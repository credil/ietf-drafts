<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc3667.dtd">
<?rfc toc='no'?>
<?rfc tocdepth='4'?>
<?rfc compact="yes"?>
<rfc updates="5234" category="std" ipr="trust200902" docName='draft-kyzivat-abnf-import-00'>

<!-- Notes:
-->

<front>
   <title abbrev="ABNF Import">
      ABNF Extensions for Importing and Scoping
   </title>
   <author initials="P." surname="Kyzivat" fullname="Paul Kyzivat">
      <organization>Huawei</organization>
      <address>
         <email>pkyzivat@alum.mit.edu</email>
      </address>
   </author>
   <date year="2013" />
   <abstract>
      <t>

This document proposes extensions to the ABNF defined in <xref target="RFC5234"/> 
to support importation of ABNF from other documents, and multiple naming scopes
for rulenames.

      </t>
   </abstract>
</front>
<middle>
   <section title="Introduction">
      <t>

The intent of this proposal is to better support current practice where one draft 
or RFC extends the ABNF from another draft or RFC, or references ABNF rules defined elsewhere 
when defining something new.

      </t>
      <t>
Currently that is done using comments that identify the source of the referenced definitions. 
Formally processing this requires manual actions to cut and paste definitions from multiple 
documents to create a single ABNF source that can be processed for formal tools.

      </t>
      <t>
With the proposed changes, it will be possible to build ABNF tools that automatically 
extract the required definitions. 

      </t>
      <t>
The changes that support this are:

      </t>
      <list style='symbols'>
         <t>
A way to assign a name to a rule list within a document
<vspace blankLines="1"/>This allows multiple independent groups of rules to be defined within a single document 
and referenced independently.For flexibility, nesting of named rule lists is permitted.         </t>
         <t>
A way to reference a rule defined in a named collection of rules

         </t>
         <t>
A way to import rule definitions from another document<vspace blankLines="1"/>
The reference identifies the document and may name a specific named rule list within that document. 
When importing a named rule list, it may be imported with or without the name. 
The definitions are copied into          </t>
      </list>
   </section>

   <section title="Terminology">
      <t>

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.

      </t>
   </section>
   <section title="Extensions to ABNF Syntax">
      <t>

The following are additions to the ABNF for ABNF defined in <xref target="RFC5234"/>.
      </t>
      <figure><artwork type='abnf'><![CDATA[

    rulelist =/ 1*( 
       named-rulelist / rulelist-import / rule/ (*c-wsp c-nl) )
     ; this is really a backward compatible replacement definition    named-rulelist =        rulelist-name *WSP "{" rulelist "}" c-nl    rulelist-name = rulename
    rulelist-import =        (basic-import / named-import) c-nl    basic-import = "@" docname     ; imports all the ABNF from the named document    docname = char-val     ; format and resolution of the document from the docname     ; is defined by the specific tools used.     ; At least common URI types should be supported      ; E.g. "urn:ietf:rfc:5234",      ;      "urn:ietf:id:draft-ietf-foo-bar-01",     ;      "file:foo.xml"    named-import = rulelist-name basic-import     ; (E.g. CORE@"urn:ietf:rfc:5234")     ; This is shorthand for importing into a new named     ; rulelist with the given name.
    element =/ scoped-rulename    scoped-rulename = 1*(rulelist-name ".") rulename      ]]></artwork></figure>
   </section>
   <section title="Import Semantics">
      <t>

Importing logically replaces the import statement with text from the imported document. 
Importing may be done in two ways:      </t>
      <list style='symbols'>
         <t>

The &lt;basic-import&gt; simply inserts all the ABNF from the referenced document.         </t>
         <t>

The &lt;named-import&gt; is similar, but does the import within a new &lt;named-rulelist&gt;. 
This is just syntactic sugar, but is convenient. E.g. the following:
            <figure><artwork>
    CORE@"urn:ietf:rfc:5234"

            </artwork></figure>
is equivalent to:
            <figure><artwork>
    CORE {       @"urn:ietf:rfc:5234"    }            </artwork></figure>
         </t>
      </list>
      <t>

Note that if the imported rules contain references to rules that are not imported, 
then the importing document must provide definitions for those.
      </t>
      <t>

For now, the ABNF syntax of ABNF defines a docname as a string without further syntax. 
Interpretation of the docname is deferred to the ABNF processing tools. 
I propose that this should at least support common URI formats, including the urn:ietf format for rfcs and ids. 
It may also be expedient to support some more concise syntax for ietf documents.      </t>
      <t>

The intent is that the import statements only import the ABNF definitions from the referenced document, 
ignoring any content that is not ABNF. This is so that ABNF from RFCs and drafts can be referenced directly. 
The xml2rfc notation &lt;artwork type='abnf'&gt; should be sufficient to support this. 
If multiple abnf artwork elements are present they should simply be concatenated to form one logical
document to be imported.

      </t>
   </section>
   <section title="Scoping of Names">
      <t>

A document containing ABNF has an implicit outermost scope.

Each scope has a symbol table for rules and named rulelists defined within that scope.      </t>
      <t>

The appearance of a &lt;named-rulelist&gt; with a particular &lt;rulelist-name&gt; 
creates a nested scope with that name within the enclosing scopeâ€™s symbol table. 
Once a named rulelist has been closed it may not be reopened. 
(This ensures that redefinition of a named rulelist is an error, preventing a class of errors.)      </t>
      <t>
An element consisting of a &lt;rulename&gt; is resolved 
within the symbol table of the scope where it is found. If not found, 
resolution is attempted successively in each enclosing scope.      </t>
      <t>
An element consisting of a &lt;scoped-rulename&gt; is resolved as follows:      </t>
      <list style='symbols'> 
         <t>
The leftmost component of the &lt;scoped-rulename&gt;  (the first &lt;rulelist-name&gt;) 
is resolved first.         </t>
         <t>
It is resolved by looking within the symbol table of the scope where it is found. If not found, 
resolution is attempted successively in each enclosing scope, 
and must resolve to a &lt;named-rulelist&gt;.         </t>
         <t>
Then the next component (&lt;rulelist-name&gt; or &lt;rulename&gt;) is resolved 
within the symbol table of that rulelist. This continues until the last component 
has been resolved.

         </t>
      </list>
      <t>

I'm undecided whether it should be possible to have both a rule and a rulelist with 
the same name in the same scope.
      </t>
      <t>

It is important to maintain the order independence of rule definitions that exists with 
prior definitions of ABNF. (It must be possible to reference a rule in a named rulelist 
that is defined later.)

      </t>
   </section>
   <section title="IANA Considerations">
      <t>

Don't think so.

      </t>
   </section>
   <section title="Security Considerations">
      <t>

Security is truly believed to be irrelevant to this document.

      </t>
   </section>
</middle>

<back>
   <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.5234"?>
   </references>
   <references title="Informative References">
   </references>
</back>
</rfc>
