<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="no"?>
<?rfc tocdepth="6"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc strict="yes"?>
<rfc ipr="trust200902" category="std" docName="draft-ietf-dnsext-dnssec-algo-signal-03" >
<front>
<title abbrev="Algorithm-Signal">Signaling Cryptographic Algorithm Understanding in DNSSEC</title>
	<author fullname="Steve Crocker" initials="S." surname="Crocker">
			<organization>Shinkuro Inc.</organization>
			<address>
				<postal>
					<street>5110 Edgemoor Lane</street>
					<city>Bethesda</city>
					<code>20814</code>
					<region>MD</region>
					<country>USA</country>
				</postal>
				<email>steve@shinkuro.com</email>
			</address>
	</author>
	<author fullname="Scott Rose" initials="S." surname="Rose">
			<organization> NIST </organization>
			<address>
				<postal>
					<street>100 Bureau Dr.</street>
					<city>Gaithersburg</city>
					<code>20899</code>
					<region>MD</region>
					<country>USA</country>
				</postal>
				<phone>+1-301-975-8439</phone>
				<email> scottr.nist@gmail.com </email>
			</address>
		</author>
	
<date month="January" year="2012"/>
<area> Internet Area </area>
<workgroup> DNS Extensions Working Group </workgroup>
<keyword>DNS</keyword>
<keyword>DNSSEC</keyword>
<keyword>EDNS</keyword>
<abstract>
	<t>
	The DNS Security Extensions (DNSSEC) were developed to provide origin 
	authentication and integrity protection for DNS data by using digital 
	signatures.  These digital signatures can be generated 
	using different algorithms.  This draft sets out to specify a way for  
	validating end-system resolvers to signal to a server which cryptographic 
	algorithms they support.
	</t>
</abstract>
	<note title="Requirements Language">
	<t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;,
&quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;,
&quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;,
&quot;MAY&quot;, and &quot;OPTIONAL&quot; in this document are to be
interpreted as described in <xref target="RFC2119">RFC 2119</xref>.
	</t>
	</note>
</front>
<middle>
<section title="Introduction">
	<t>
	The DNS Security Extensions (DNSSEC) <xref target="RFC4033" />, 
	<xref target="RFC4034" /> and <xref target="RFC4035" /> were developed 
	to provide origin 
	authentication and integrity protection for DNS data by using digital 
	signatures.  Each digital signature RR (RRSIG) contains an 
    	algorithm code number.  These algorithm codes tells validators 
	which cryptographic algorithm was used to generate the digital signature.  
	</t>
	<t>
	This draft sets out to specify a way for validating end-system resolvers
	to tell a server which
	cryptographic algorithms they support in a DNS query.  This is done 
	using the EDNS attribute values in the OPT meta-RR <xref target="RFC2671" />.  
	</t>
	<t>
	This proposed EDNS option serves to measure the 
	acceptance and use of new digital signing algorithms.
	This algorithm signaling option can be used by zone administrators as a gauge
	to measure the successful deployment of code that implements a newly deployed 
	digital signature algorithm used with DNSSEC.  
	A zone administrator may be able 
	to determine when to stop serving the old algorithm when
	the server sees that a significant number of its clients signal that they 
	are able to accept the new algorithm.  Note that this survey 
	may be conducted over the period of years before a tipping point is seen.
	</t>
	<t>
	This draft does not seek to include another process for including new algorithms for
	use with DNSSEC (see .  It also does not address the question of which algorithms are to
	be included in any official list of mandatory or recommended cryptographic algorithms
	for use with DNSSEC.  Rather, this document specifies a means by which a client 
	query can signal a set of algorithms it implements.
	</t>
</section>
<section title="Signaling DNSSEC Algorithm Understood (DAU) Using EDNS">
	<t>
	The ENDS0 specification outlined in <xref target="RFC2671" /> defines a 
    way to include new options using a standardized mechanism.  These options are 
    contained in the RDATA of the OPT meta-RR.  This document defines 
    a new EDNS0 option for a client to signal which algorithms the client 
    supports. 
	</t>
	<figure><preamble>The figure below shows how the digital signature signaling attribute is 
	defined in the RDATA of the OPT RR specified in <xref target="RFC2671" />:
	</preamble>
<artwork>
    0                       8                      16
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                 OPTION-CODE (TBD)             |					
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |             DIGITAL-SIG-LIST-LENGTH           |					
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |       ALG-CODE        |        ...            \					
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    
</artwork><postamble></postamble>
	</figure>
	<t>
	OPTION-CODE is the code for the DNSSEC Algorithm Understood (DAU) option.  Its value
	is fixed at TBD.
	</t>
	<t>
	DIGITAL-SIG-LIST-LENGTH is the length of the list of digital signature algorithms in octets.
        DNSSEC algorithm codes are 1 octet long so this value is the number of octets.
	</t>
	<t>
	ALG-CODE is the list of assigned values of DNSSEC zone signing algorithms that 
	the client indicates as understood.  The values SHOULD be in descending order of 
	preference, with the most preferred algorithm first. For example, if
	a validating client implements RSA/SHA-1, RSA/SHA-256 and prefers the latter, 
	the value of ALG-CODE would be: 8 (RSA/SHA-256), 5 (RSA/SHA-1).
	</t>
</section>

<section title="Client Considerations">
	<t>
	A validating end-system resolver sets the DAU option in the OPT meta-RR when sending a 
	query.  The validating end-system resolver sets the value(s) in the order of preference,
	with the most preferred algorithm(s) first as described in section 2. The end-system resolver
	SHOULD also set the DNSSEC-OK bit <xref target="RFC4035" /> to 
        indicate that it wishes to receive DNSSEC RRs in the response.
	</t>
	<t>
	Note that the PRIVATEDNS (253) and/or the PRIVATEOID (254) codes cover a potentially wide range
	of algorithms and are likely not useful to a server.  There is no compelling reason for a client
	to include these codes in its list of understood algorithms.
	</t>
  <section title="Stub Resolvers">
	<t>
	Typically, stub resolvers rely on an upstream recursive server (or cache) to provide
	a response.  So optimal setting of the DAU option depends on whether the stub resolver performs its own
	DNSSEC validation or doesn't perform its own validation.
	</t>
   </section>
   <section title="Validating Stub Resolvers">
	<t>
	A validating stub resolver already (usually) sets the DO bit <xref target="RFC4035" /> to indicate that it wishes
	to receive additional DNSSEC RRs (i.e. RRSIG RR's) in the response.  Such validating resolvers SHOULD include the DAU option in the OPT RR 
	when sending a query.  This way thee validating stub resolver indicates which cryptographic algorithm(s)
	it supports by setting the values(s) in the order of preference, with the most preferred
	algorithm(s) first as described in Section 2.
	</t>
   </section>
   <section title="Non-Validating Stub Resolvers">
   <t>
	The DAU EDNS option is NOT 
	RECOMMENDED for non-validating stub resolvers.  
	</t>
  </section>	  
<section title="Recursive Resolvers">

  <section title="Validating Recursive Resolvers">
	<t>
	A validating recursive resolver sets the DAU option when performing recursion based on the DO and CD flags in the client request <xref target="RFC4035" />. 
	If the client of the recursive resolver did
	not include the DO bit in the query the recursive resolver SHOULD include the DAU option according
	to its own local policy.
	</t>
	<t>
	If the client did include the DO and CD bits, but did not include the DAU option in the query,
	the validating recursive resolver SHOULD NOT include the DAU option to avoid conflicts.
	</t>
	<t>
	If the client did set the DO bit and the DAU option in the query, the validating
	recursive resolver SHOULD include the DAU option based on the setting of the CD bit.  If the CD bit
	is set, the validating recursive resolver SHOULD include the DAU option based on the client query or
	a superset of the client DAU option list and the validator's own list (if different). If the CD bit is not set, 
	the validating recursive resolver MAY copy the client DAU option or substitute its own DAU option list. 
	</t>
  </section>
  <section title="Non-validating Recursive Resolvers">
	<t>
	Recursive resolvers that do not do validation or caching SHOULD copy the DAU option 
	seen in received queries as they represent the wishes of the validating downstream resolver that issued the original query.
	</t>
  </section>
</section>

</section>

<section title="Intermediate System Considerations">
	<t>
	Intermediate proxies <xref target="RFC5625" /> that understand DNS SHOULD behave like a comparable recursive resolver when 
	dealing with the DAU option.
	</t>
</section>

<section title="Server Considerations">
	<t>
	When an authoritative server sees the DAU option in the OPT meta-RR in a
	request the normal algorithm for servicing requests is followed. The DAU option
	does not trigger any special processing on the server side.  </t>
	<t>
	If the DAU option is present but the DNSSEC-OK (OK) bit is not set, the
	server does not do any DNSSEC processing, including any recording of the DAU option.
	</t>
</section>

<section title="Traffic Analysis Considerations">
	<t>
	Zone administrators that are planning or are in the process of a 
	cryptographic algorithm rollover operation should monitor DNS query traffic
	and record the values of the DAU option in queries.  This monitoring can 
	measure the deployment of client code that implements (and signals) certain
	algorithms.  Exactly how to capture DNS traffic and measure new algorithm
	adoption is beyond the scope of this document.
	</t>
	<t>
	Zone administrators can use this data to set plans for starting an algorithm 
	rollover and determine when older algorithms can be phased out without disrupting a
	significant number of clients.  In order to keep this disruption to a minimum, zone
	administrators should wait to complete an algorithm rollover until a large 
	majority of clients signal that they understand the new algorithm.  This may be
	in the order of years rather than months.

	Note that clients that do not implement the DAU option are likely to be older 
	implementations which would also not implement any newly deployed algorithm.
	</t>
</section>

<section anchor="IANA" title="IANA Considerations">
	<t>
	The algorithm codes used to identify DNSSEC algorithms has already been 
	established by IANA.  This document does not seek to alter that registry
	in any way.
	</t>
	<t>
	This draft seeks to update the "DNS EDNS0 Options" registry by adding the 
	DAU option and referencing this document.  The code for the option should
	be TBD.
	</t>
</section>

<section anchor="Security" title="Security Considerations">
	<t>
	This document specifies a way for a client to signal its digital signature 
	algorithm preference to a cache or server.  It is not meant to be a 
discussion
	on algorithm superiority.  The signal is an optional code contained in
	the OPT meta-RR used with EDNS0.  The goal of this option is to signal new
	algorithm uptake in client code to allow zone administrators to know when
	it is possible to complete an algorithm rollover in a DNSSEC signed zone.
	</t>
</section>

</middle>

<back>
	<references title="Normative References">
		<?rfc include="reference.RFC.2119" ?>
		<?rfc include="reference.RFC.2671" ?>
		<?rfc include="reference.RFC.4033" ?>
		<?rfc include="reference.RFC.4034" ?>
		<?rfc include="reference.RFC.4035" ?>
		<?rfc include="reference.RFC.5625" ?>
	</references>
</back>
</rfc>

