<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc3667.dtd">
<?rfc toc='yes'?>
<?rfc tocdepth='4'?>
<?rfc compact="yes"?>
<rfc updates="5234" category="std" ipr="trust200902" docName='draft-kyzivat-clue-signaling-00'>

<!-- Notes:

Paul's messages from 12/18/12 4:11PM and 12/19/12 11:21AM
formed a starting point for this draft.

-->

<front>
   <title abbrev="CLUE Signaling">
      CLUE Signaling
   </title>
   <author initials="P." surname="Kyzivat" fullname="Paul Kyzivat">
      <organization>Huawei</organization>
      <address>
         <email>pkyzivat@alum.mit.edu</email>
      </address>
   </author>
   <date year="2013" />
   <abstract>
      <t>

This document specifies how signaling is conducted in the course of CLUE sessions.
This includes how SIP/SDP signaling is applied to CLUE sessions as well as defining 
a CLUE-specific signaling protocol that complements SIP/SDP and supports negotiation
of CLUE application level data.

      </t>
   </abstract>
</front>
<middle>
   <section title="Introduction">
      <t>

This document specifies how signaling is conducted in the course of CLUE sessions.
This includes how SIP/SDP signaling is applied to CLUE sessions as well as defining 
a CLUE-specific signaling protocol that complements SIP/SDP and supports negotiation
of CLUE application level data. 

      </t>
      <t>

[Yes, this is a dup of the abstract for now. Eventually it should say more.]

      </t>

   </section>

   <section title="Terminology">
      <t>

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.

      </t>
      <t>

This document draws liberally from the terminology defined in the
<xref target="I-D.ietf-clue-framework">CLUE Framework</xref>.

      </t>

      <t>

Other terms introduced here:
<vspace blankLines='1'/>

      </t>
      <list style='hanging'>
         <t hangText="CLUE Channel:">

A reliable, bidirectional, transport mechanism used to convey CLUE messages.
A CLUE channel consists of one SCTP stream in each direction over a DTLS/SCTP session.
<vspace blankLines='1'/>

         </t>

      </list>

   </section>

   <section title="CLUE-Specific Signaling Protocol " anchor="sec.protocol">
      <t>
The <xref target="I-D.ietf-clue-framework">CLUE Framework</xref> mentions a CLUE-specific 
protocol for the exchange of ADVERTISEMENT and CONFIGURE messages, but gives little detail.
The <xref target="I-D.presta-clue-data-model-schema">Data Model</xref> specifies a model
and XML representation for CLUE-related data, but doesn't currently specify exactly what
data belongs in each message, or how messages are sequenced. 
This document provides the detail missing from those documents.
      </t>

         <section title="CLUE Messages" anchor="sec.messages">
            <t>
CLUE messages are encoded in XML.
The <xref target="I-D.presta-clue-data-model-schema">Data Model</xref>
defines many/most of the elements from which CLUE messages are composed.
The content of each individual CLUE message could be defined by reference to an
XML element type defined in the Data Model. 
Or this document could itself define an XML element type for each message,
with much of the content of those elements being drawn from the Data Model.
Which approach to follow is TBD.
            </t>

            <section title="ADVERTISEMENT Message">
               <t>
Most of the content needed for the ADVERTISEMENT message is already defined in the Data Model.
But the Data Model has't been constructed with that in mind. 
So either the Data Model needs revision with a focus on the needs of signaling,
or else additional schema is needed here.
               </t>
           </section>

            <section title="CONFIGURE Message">
               <t>
The CONFIGURE message should probably also be based primarily on data elements
defined in the Data Model.
               </t>
                <t>
The CONFIGURE message must make reference (explicitly or implicitly) 
to the ADVERTISEMENT message on which it is based. 
The mechanism for doing this must be specified.
               </t>
            </section>

            <section title="Stand-alone messages or deltas?">
               <t>

Each message exchanged within a CLUE session could contain a complete description
of the state it wishes to achieve. 
Or each message could describe just the changes that it wishes to make to the current state.
Or the protocol could support both message forms.
Which direction to pursue is TBD.
               </t>
               <t>
[Paul: while this does need to be decided, it is fundamentally just an optimization.
IMO it does not have major impact on the other parts of this document,
so I would prefer to continue deferring it until we are so far along with the
remainder of the document that we can no longer defer it.]
               </t>

            </section>

            <section title="other">
               <t>
               </t>
            </section>

         </section>

         <section title="Message Acknowledgement" anchor="sec.ack">

            <t>
The CLUE channel is reliable, so there is no need for acknowledgement to
guarantee delivery. But there is still a need for application-to-application acknowledgement
to report that the message has been received, parsed, and found to be of an acceptable format.
One possibility is to introduce separate ACK and/or NAK messages.
Another possibility is to add a confirmation element to each CLUE message, 
so that confirmation can be piggybacked on the basic messages.
Something concrete needs to be proposed.
            </t>

         </section>

         <section title="Message Sequencing" anchor="sec.sequencing">

            <t>
There is a very basic introduction to this topic in section 9.4 (Message Flow) of the
<xref target="I-D.ietf-clue-framework">CLUE Framework</xref>. 
That still mentions the Consumer Capability message, which we have decided to drop.
Without that it would look like:
            </t>

            <figure align="center">
               <artwork align="center"><![CDATA[
 Media Consumer                         Media Provider
 --------------                         ------------
       |                                     |
       |<----- ADVERTISEMENT message --------|
       |                                     |
       |                                     |
       |-------- CONFIGURE message --------->|
       |                                     |
               ]]></artwork>
            </figure>
            <t>

But we need much more than this, to show multiple CONFIGUREs per ADVERTISEMENT, 
interleaving of ADVERTISEMENTs and CONFIGUREs in both directions, etc.

            </t>

            <t>
Message sequencing needs to be described at two levels:
            </t>

            <list style='symbols'>
               <t>

Basic sequencing of the CLUE messages themselves, 
without regard for the SIP/SDP signaling that may be going on at the same time.
This is useful to cover the basic concepts. That should be covered in this section.
It provides context for understanding the more detailed treatment later.
<vspace blankLines='1'/>
This could include some simple state machines.
<vspace blankLines='1'/>

               </t>
               <t>

In reality there is a complex dependency between CLUE signaling and 
SDP Offer/Answer exchanges carried in SIP signaling.
So there is a need to describe the valid ways in which these
two forms of signaling interact. That is covered in
<xref target="sec.coordination"/>.

               </t>
            </list>

        </section>

         <section title="Message Transport" anchor="sec.transport">
            <t>

CLUE messages are transported over CLUE channels.  
In a two-party CLUE session, a CLUE channel connects the two endpoints.
In a CLUE conference, each endpoint has a CLUE channel connecting it to an MCU. 
(In conferences with cascaded mixers <xref target="RFC4353"/>, 
two MCUs will be connected by a CLUE channel.)

            </t>
            <t>

The transport mechanism used for CLUE messages is DTLS/SCTP as specified in 
<xref target="I-D.tuexen-tsvwg-sctp-dtls-encaps"/> and 
<xref target="I-D.ietf-mmusic-sctp-sdp"/>. 
A CLUE channel consists of one SCTP stream in each direction over a DTLS/SCTP session.
The mechanism for establishing the DTLS/SCTP session is described in
<xref target="sec.sdp_oa"/>.

            </t>
         </section>

         <section title="Message Framing">
            <t>
Message framing is provided by the SCTP transport protocol.
Each CLUE message is carried in one SCTP message.
            </t>
         </section>

         <section title="other">
            <t>
            </t>
         </section>

   </section>

   <section title="CLUE use of SDP O/A" anchor="sec.sdp_oa">

      <t>
The CLUE channel is usually offered in the first SIP O/A exchange between
two parties in an intended CLUE session. The offer of the CLUE channel
is the indicator that this SIP session is proposing to establish a CLUE session.
      </t>
      <t>
(However it is also acceptable to start with a non-CLUE SIP session and upgrade it
to a CLUE session later.)
      </t>
      <t>
The mechanism for negotiating a DTLS/SCTP connection is specified in 
<xref target="I-D.ietf-mmusic-sctp-sdp"/>.
We need to specify how to select the specific pair of SCTP streams that comprise the CLUE channel.
      </t>

      <t>
Any specific usage/conventions required for coordination of SDP
offers and answers with the CLUE messages should also be described here.
      </t>
      <t>
(We have a draft 
<xref target="I-D.even-clue-sdp-clue-relation"/>
that can contribute to this.)
      </t>

   </section>

   <section title="Coordination of CLUE protocol and SDP O/A" anchor="sec.coordination">
      <t>
This should include state machines and/or call flows. These will illustrate, and then
provide normative rules for valid sequences of messages of both types.
For instance this needs to show when SDP offers and answers must occur relative to
an ADVERTISEMENT or CONFIGURE message that requires SDP changes.
      </t>
      <t>
[THIS IS A VERY IMPORTANT PART OF THIS DOCUMENT!]
      </t>
   </section>

   <section title="CLUE requirements on SDP O/A" anchor="sec.sdp_rqmts">
      <t>
Any SDP extensions required by CLUE should be specified here. 
Then we will need to take action within MMUSIC to make those happen.
This section should be empty and removed before this document becomes an RFC.
      </t>
   </section>

   <section title="SIP Signaling" anchor="sec.sip_signaling">
      <t>
(Placeholder) This may be unremarkable. If so we can drop it.
      </t>
   </section>

   <section title="Interoperation with Legacy SIP Devices" anchor="sec.interop">
      <t>
This may just describe how the degenerate form of the general mechanisms
work for legacy devices. Or it may describe special case handling that we
mandate as part of CLUE. Or it may just discuss non-normative things for implementors
should consider.
      </t>
   </section>

   <section title="CLUE over RTCWEB">
      <t>
We may want to rule this out of scope for now. 
But we should be thinking about this.
      </t>
   </section>

   <section title="Open Issues">
      <t>

Here are issues pertinent to signaling that need resolution.
Resolution will probably result in changes somewhere in this document,
but may also impact other documents.
<vspace blankLines='1'/>

      </t>

      <list style='symbols'>
         <t>

While the preference is to multiplex multiple capture encodings over a single RTP session,
this will not always be desirable or possible. The factors that prevent multiplexing
may come from either the provider or the consumer. So the extent of multiplexing
must be negotiated. The decision about how to multiplex affects the number and
grouping of m-lines in the SDP. The endpoint of a CLUE session that sends an offer
needs to know the mapping of capture encodings to m-lines for both sides. 
<vspace blankLines='1'/>
AFAIK this issue hasn't yet been considered at all.

         </t>
      </list>
   </section>

   <section title="What else?">
      <t>
      </t>
   </section>

   <section title="Acknowledgements">
      <t>
The team focusing on this draft consists of:
Roni Even,
Rob Hansen,
Christer Holmberg,
Paul Kyzivat,
Simon Pietro-Romano,
Roberta Presta.
      </t>
      <t>
Paul's contributions are supported by collaboration with colleague Lennard Xiao on the study of CLUE signaling.
      </t>
      <t>
The author list should be updated as people contribute substantial text to this document.
      </t>
   </section>

   <section title="IANA Considerations">
      <t>

TBD

      </t>
   </section>
   <section title="Security Considerations">
      <t>

TBD

      </t>
   </section>
</middle>

<back>
   <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.I-D.ietf-clue-framework"?>
      <?rfc include="reference.I-D.presta-clue-data-model-schema"?>
      <?rfc include="reference.I-D.ietf-mmusic-sctp-sdp"?>
      <?rfc include="reference.I-D.tuexen-tsvwg-sctp-dtls-encaps"?>
   </references>
   <references title="Informative References">
      <?rfc include="reference.RFC.4353"?>
      <?rfc include="reference.I-D.even-clue-sdp-clue-relation"?>
   </references>
</back>
</rfc>
