<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<rfc category="info" docName="draft-slevinski-signwriting-text-01" ipr="trust200902">
  <?rfc strict="yes" ?>
  <?rfc toc="yes"?>
  <?rfc tocdepth="4"?>
  <?rfc symrefs="yes"?>
  <?rfc sortrefs="yes" ?>
  <?rfc compact="yes" ?>
  <?rfc subcompact="no" ?>

  <front>
    <title abbrev="SignWriting Text">The SignPuddle Standard for SignWriting Text</title>

    <author fullname="Stephen E Slevinski Jr" initials="S."
            surname="Slevinski">
      <organization>SignPuddle</organization>
      <address>
        <email>slevin@signpuddle.net</email>
      </address>
    </author>

    <date month="May" year="2013" />

    <area>General</area>

    <workgroup>Sutton-Slevinski Collaboration</workgroup>

    <keyword>script</keyword>
    <keyword>encoding</keyword>
    <keyword>model</keyword>
    <keyword>Cartesian</keyword>
    <keyword>SignPuddle Standard</keyword>
    <keyword>SignWriting</keyword>
    <keyword>SignWriting Text</keyword>
    <keyword>plain text</keyword>
    <keyword>rich text</keyword>
    <keyword>sign language</keyword>
    <keyword>grammar</keyword>

    <abstract>
      <t>For concreteness, because the universal character set is not yet universal, and because an international standard for the internet community should be documented and stable, this I-D has been released with the intention of producing an RFC to document the character use and naming conventions of the SignWriting community on the Internet.
      </t>
      <t>The SignWriting Script is an international standard for writing sign languages by hand or with computers. 
      From education to research, from entertainment to religion, SignWriting has proven useful because people are using it to write signed languages.
      The SignWriting Script has two major families: Block Printing for the reader and Handwriting for the writer.  The script encoding model presented in this document evolved from the Block Printing half of the SignWriting Script.
      </t>
      <t>The SignWriting Text encoding model encompasses the Block Printing family of the SignWriting Script.  
      The plain text model for the mathematical names has been stable since January 12th, 2012.  
      The visual image can be SVG generated on the server or created with an experimental TrueType Font.
      The coded character sets and character encoding forms are documented with regular expressions.
      </t>
      <t>The ad hoc graphemes of informal SignWriting were first created in 1974.  Ad hoc graphemes are still used in the handwriting family.  The standardized symbols of computerized Block Printing text began in 1986.  After several generations of writers and standardized symbolsets, the ISWA 2010 has been optimized and refined as a 16-bit coded character set with several isomorphic encodings based on an ordered hierarchy with 6 degrees of significance.
      The International SignWriting Alphabet 2010 is a mathematical symbolset that has been stable since its initial release on May 11th, 2010.
      </t>
      <t>The SignPuddle Standard for SignWriting Text is an open and freely available encoding model for sign language as text.  The licenses include the Open Font License for the fonts, Creative Commons by-sa (Attribution, Share Alike) for the documentation, and the GPL for the software implementation.  
      The technological infrastructure continues to expand and should be fully realized by the time this I-D has become an RFC.  SignPuddle Online contains almost 1 million examples of 2-dimensional signs written by the internet community.  
      Each logogram has a mathematical name which describes the freeform placement of the symbols.  
      These strings are the written record of the sign.  This standard and emerging infrastructure are used for the sign language Wikipedia project on Wikimedia Labs.  This standard is being integrated with the SignTyp linguistic coding system developed by Rachel Channon through an NSF grant.  This standard was the origin for the alternate Unicode proposals.
      </t>
      <t>For Unicode, the current use of the Private Use Area font characters is documented.  The state of the TrueType Font is explained.  A character proposal for plane 1 is included that is isomorphic with the characters that are currently used by the community.
      </t>
      <t>Three appendices discuss additional topics to the standard.  
      The first discusses the Modern SignWriting theory and example document, stable since January 12, 2012.
      The second discusses the founding principles of Cartesian SignWriting: a script encoding model for SignWriting Block Printing. 
      The third discusses a common framework for written sign language grammar.
      </t>
      <t>This memo concretely defines a conceptual character encoding map for the Internet community.  It is published for reference, examination, implementation, and
      evaluation.  Distribution of this memo is unlimited.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction" anchor="intro">
      <t>For concreteness, because the universal character set is not yet universal, and because an international standard for the internet community should be documented and stable, this I-D has been released with the intention of producing an RFC to document the character use and naming conventions of the SignWriting community on the Internet.
      </t>
      <t>The SignWriting Script is an international standard for writing sign languages by hand or with computers. 
      From education to research, from entertainment to religion, SignWriting has proven useful because people are using it to write signed languages.
      </t>
      <t>Sign languages are fundamentally different than spoken language in the quality of the segments in the stream of human speech.  The SignWriting Script uses 2-dimensional logograms with freeform symbol placement to capture the spatial and simultaneous segments in the stream of signed language speech.
      </t>
      <t>The SignWriting fonts and standards are freely and openly available, with no royalties or restrictions. 
      This information is provided to promote a complete solution for an open culture in written sign language.
      </t>
      <section title="Overview">
        <t>The SignPuddle Standard for SignWriting Text is an emerging standard intended for the internet community. This memo concretely defines a fully developed model for reference, examination, implementation, and evaluation. Distribution of this memo is unlimited.
        </t>
        <t>The fonts are <eref target="http://signpuddle.net/iswa">officially available</eref>.  
        The release candidate of the SignWriting Icon Server is <eref target="https://github.com/Slevinski/swis">available on Github</eref>, 
        hosted on <eref target="http://signbank.org/swis">SignBank</eref> and hosted on <eref target="http://swis.wmflabs.org">Wikimedia Labs</eref>.
        </t>
        <t><xref target="intro" /> Introduction: includes a discussion of terminology, historical background, current usage, and this overview of the document.
        </t>
        <t><xref target="signwriting_script" /> SignWriting Script: includes a general discussion of the SignWriting script.  Both the Block Printing and the Handwriting families are discussed.
        </t>
        <t><xref target="signwriting_text" /> SignWriting Text: includes a general discussion of the plain text of logograms for the mathematical names and visual images.
        </t>
        <t><xref target="iswa_2010" /> ISWA 2010: discusses the SignWriting grapheme, symbolset, and symbol encoding of the ISWA 2010.  Symbols are visually iconic, uniquely identified, and organized in a layered hierarchy.
        </t>
        <t><xref target="signpuddle_standard" /> SignPuddle Standard: defines the licenses, infrastructure, and the data available.
        </t>
        <t><xref target="unicode" /> Unicode Integration: discusses the private use area font characters and the proposed characters on plane 1.
        </t>
        <t><xref target="msw" /> Modern SignWriting: discusses the theory and example document released on January 12th, 2012.
        </t>
        <t><xref target="cartesian_signwriting" /> Cartesian SignWriting: presents a script encoding model for SignWriting Block Printing.  Formal structures for logographic sign are mixed with punctuation to form text.
        </t>
        <t><xref target="grammar" /> Theory of SignWriting Grammar: discusses the common and possible script encoding models for written sign language.
        </t>
      </section>
      <section title="Historical Foundation">
        <t>In 1966, Valerie Sutton invented the DanceWriting notation, which was the precursor to the entire Sutton MovementWriting System.
        </t>
        <t>in 1974, Valerie Sutton invented the SignWriting Script. The subsequent development of the script was driven by input from readers and writers, both hearing and Deaf.
        </t>
        <t>From 1974 to 1986 SignWriting Script was written exclusively by hand. During this time the use of the script spread around the world, and to this day it continues to be written on paper and chalkboard.
        </t>
        <t>In 1981, the development of SignWriting Block Printing evolved rapidly with the publication of the SignWriting Newsletter, which was published from 1981 to 1984.
        </t>
        <t>In 1984 Emerson and Stern Associates received a grant to develop a word processor for SignWriting Block Printing. The resulting software, which operated on the Apple II, supported only a minor subset of the SignWriting system. It was not subsequently used, and received no further development.
        </t>
        <t>In 1986, Richard Gleaves designed and developed SignWriter as a word processor for SignWriting Block Printing. SignWriter introduced the keyboard typing model and a symbol encoding system which served as the basis for subsequent encoding systems. The initial version was for the Apple IIe, and the resulting symbolset was limited by the 128KB memory limit.
        </t>
        <t>By 1995, SignWriter had been ported to MS-DOS and expanded to support multiple languages, an integrated sign dictionary, and the full SSS-95 symbolset. SignWriter DOS was distributed on the internet, and achieved widespread international use.</t>
        <t>In 1999, the SSS-99 symbolset was created for SignWriter Java.  The revamped symbolset was created without the limitations imposed upon the SSS-95.  
        </t>
        <t>In 2002, the SSS-2002 symbolset reorganized the structure of the symbols imposing a multi level hierarchy with the modern symbol ID.  The SSS-2002 was the first symbolset used in the SignBank 2002 application by Todd Duell.
        </t>
        <t>In 2004, the SSS-2004 symbolset was created after reaching widespread international use.  The SSS-2004 was the first symbolset used in the SignPuddle application by Steve Slevinski.  This symbolset was expanded to include international MovementWriting concepts and became known as the International MovementWriting Alphabet.</t>
        
        <t>September 12, 2008, Valerie Sutton and Steve Slevinski released the ISWA 2008 under the open font license.  The International SignWriting Alphabet 2008 was a major refactoring of the IMWA concept by eliminating the general MovementWriting symbols and focusing on the SignWriting script.  Valerie organized and named 37,811 unique symbols.  Steve analyzed and formatted the ISWA 2008, creating a 16-bit coded character set called the x-ISWA-2008.  Steve also created the first iteration of Cartesian SignWriting as a script encoding model.
        </t>
        <t>The ISWA 2008 was used in a production setting for a year and a half without issue.  In 2010, the ISWA 2008 was updated.  576 unused symbols had a palm facing irregularity which needed to be fixed.  General size and shape of the symbols did not change.
        </t>
        <t>May 11th, 2010, Valerie and Steve released the ISWA 2010.  The ISWA 2010 was designed as a focused refactor of the ISWA 2008 concepts. 
        The update included a restructured hierarchy, better movement symbols, elimination of variation defects, addition of new hand shapes, and removal of hand shape variations. 
        Revision 2 of Cartesian SignWriting script encoding model was released for the ISWA 2010.  
        The symbolset and encoding have been stable since release, with only a cosmetic fix for symbol 01-06-017-01-03-10.  
        </t>
        <t>June 22nd, 2010, Steve refactored the coded character set as 12-bit rather than 16-bit to improve searching.  The updated script encoding model was called Cartesian SignWriting revision 3.
        </t>
        <t>October 20th, 2010, the initial release of the ISWA 2010 Font Reference.  Since then, 2 years of stability and growth.</t>
        <t>February 23rd, 2011, the addition of SVG using polygon line tracing.</t>
        <t>September 19th, 2011, the complete SVG Refinement by Adam Frost.</t> 
        <t>January 12th, 2012, the fully realized character encoding model for SignWriting Text.</t>
        <t>May 2nd, 2012, added database fonts. </t>
        <t>November 1st, 2012, the  prerelease of the SignWriting Icon Server.</t>
      </section>
      <section title="Current Usage">
        <t>SignPuddle Online contains almost 1 million examples of 2-dimensional signs written by the internet community. Each logogram has a mathematical name that describes the freeform placement of the symbols. These strings are the written record of the sign. XML files organize these names by language and purpose. The ASL Dictionary has over 9 thousand entries.
        </t>
        <t>This standard and emerging infrastructure are used for the sign language Wikipedia project on Wikimedia Labs (<xref target="wmflabs" />).  This standard is being integrated with the SignTyp linguistic coding system developed by Rachel Channon through an NSF grant (<xref target="signtyp" />). This standard was the origin for the alternate Unicode proposals. Compatibility with this standard is highly encouraged to efficiently leverage sign language as text.
        </t>
        <t>For Unicode, the current use of the Private Use Area font characters is documented. A character proposal for plane 1 is included that is isomorphic with the characters that are currently used by the community. 
        </t>
      </section>
    </section>

    <section title="SignWriting Script" anchor="signwriting_script">
      <t>The SignWriting Script is the universal and complete solution for written sign language.  It has been applied to a wide and deep international community of many sign languages including: 
American Sign Language, Arabian Sign Languages, Australian Sign Language, Bolivian Sign Language, Brazilian Sign Language, British Sign Language, Catalan Sign Language, Colombian Sign Language, 
Czech Sign Language, Danish Sign Language, Dutch Sign Language, Ethiopian Sign Language, Finnish Sign Language, Flemish Sign Language, French-Belgian Sign Language, French Sign Language, German Sign Language,
Greek Sign Language, Irish Sign Language, Italian Sign Language, Japanese Sign Language, Malawi Sign Language, Malaysian Sign Language, Maltese Sign Language, Mexican Sign Language, Nepalese Sign Language, 
New Zealand Sign Language, Nicaraguan Sign Language, Norwegian Sign Language, Peruvian Sign Language, Philippines Sign Language, Polish Sign Language, Portugese Sign Language, Quebec Sign Language, 
South African Sign Language, Spanish Sign Language, Swedish Sign Language, Swiss Sign Language, Taiwanese Sign Language, and Tunisian Sign Language.
      </t>
      <t>Initially developed in 1974, the script was written exclusively by hand for 12 years.  Since then the script has spread around the world and continues to be written on paper and chalkboard.</t>
      <t>In 1981, SignWriting Publishing rapidly evolved with Block Printing.  In 1986, computerization of the SignWriting Block Printing began.  The current symbol encoding of the ISWA 2010 has been stable since the font release on October 20th, 2010.  
      The current character encoding model has been stable since the initial release of Modern SignWriting on January 12th, 2012.
      </t>
      <section title="2-Dimensional Logograms" anchor="logograms">
        <t>A founding principle of the SignWriting Script is that signs are written in 2-dimensional signboxes.  
        The size of the signbox varies with the symbols written inside.  Both block printing and handwriting use 2-dimensional logograms.
        </t>
        <t>Inside of a 2-dimensional signbox, the symbols are placed in a freeform, 2-dimensional arrangement. This feature of the script expresses spatial relation directly.
        </t>
      </section>
      <section title="Viewpoints, Planes, &amp; Perspectives">
        <t>Writing based on vision uses two viewpoints: receptive and expressive.  The receptive viewpoint is based on the idea of receiving an image.  For the receptive viewpoint, the right hand of a signer will be written on the left side of the canvas.  When SignWriting is used for transcription, the receptive view is most often used.  The related writing systems of DanceWriting and MovementWriting normally use the receptive viewpoint.
        </t>
        <t>The expressive viewpoint is based on the idea of expressing a concept.  For the expressive viewpoint, the right hand of a signer will be written on the right side of the canvas.  When SignWriting is used for authorship, the expressive view is most often used.
        </t>
        <t>The are two main writing planes: the front wall (Frontal Plane) and the floor (Transverse Plane). The choice of writing plane can affect the shape of the graphemes, such as the fill pattern for the hand graphemes or the tail for the movement arrow graphemes.
        </t>
        <t>There are two perspectives: front and top. The front perspective is a straight on view of/from the signer.  The top perspective is a top-down view of the signer.  Usually, a cluster will be written from a single perspective.
        </t>
      </section>
      <section title="Block Printing" anchor="printing">
        <t>Block printing is only half of the SignWriting Script.  Block printing is based on the iconic symbols of the symbol set.  
        Each of the iconic symbols is structured, standardized, and highly featural.  Block printing is used in education, publishing, and is the basis of the computerized model.  
        </t>
        <t>Valerie Sutton writes, "SignWriting Printing is easy to read. It is designed for the reader. The Printing can be written by hand as well as by computer. If I am writing a letter to a friend in ASL, I write the letter in SignWriting Printing, taking the time to make sure that my handwritten-symbols are easy and clear to read. I try to write as clearly as if I were using a computer. Of course it is slower, but it is worth it, knowing that my friend will be able to read my letter!"
        </t>
        <section title="Education" anchor="ed">
          <t><eref target="http://www.signwriting.org/lessons/cursive/curs007.html">Kids all over the earth</eref> are learning block printing thanks to Valerie Sutton and the material she donates though the <eref target="http://movementwriting.org/csmw/">Center for Sutton Movement Writing</eref>.</t>
        </section>
        <section title="Publishing" anchor="publish">
          <t>The history of SignWriting Publishing had a rapid development between <eref target="http://www.signwriting.org/library/history/hist005.html">1981 and 1984 with the SignWriter Newspaper</eref>.
          Patience and concentration was needed to write neat enough for publication.  Stencils and wax transfer symbols were used in painstaking work.  Typesetters could consistently reproduce the iconic symbols.</t>
          <t>Discussions during early publishing history were a catalyst for developing <eref target="http://www.signwriting.org/library/history/hist007.html#anchor298343">a way to type sign language</eref>.</t>
          <t>The SignWriter Newspaper suspended in 1984 and resumed publication as a typed SignWriter Newsletter in 1989.</t>
        </section>
        <section title="Computerized" anchor="comp">
          <t>Block printing is the basis of the computerized SignWriting model.</t>
          <t>Read about the Historical Foundation in <eref target="http://signpuddle.net/wiki/index.php/MSW:Historical_Foundation#2.C._Computerized_SignWriting">section 2.C of Modern SignWriting</eref>.</t>
          <t>Computerized SignWriting is important, but there is <eref target="http://www.signwriting.org/lessons/cursive/curs002.html">so much more</eref> to the <eref target="http://signpuddle.net/wiki/index.php/SignWriting_Script">SignWriting Script</eref>.</t>
          <t></t>
        </section>
      </section>
      

      <section title="Handwriting" anchor="handwriting">
        <t><eref target="http://www.signwriting.org/lessons/cursive">SignWriting Handwriting</eref> has always been a part of the script.</t>
        <t>Valerie Sutton writes, "SignWriting Handwriting is easier to write by hand, than the Printing. It is designed for the writer. There are several variations of Handwriting, and since most of the time, the writer is only writing for private notes, some writers create their own shortcuts that work just for them...and that is fine!"
        </t>
        <section title="Cursive" anchor="cursive">
          <t>A popular form of SignWriting is cursive.  It can be shared among a groups of writers or it can be individualized and personal.  Cursive writing is designed to have fluid marks and a natural flow.  Cursive writing may use fewer features than the iconic symbols, but should be related to an iconic symbol in appearance and meaning.  Once developed, this style of writing is great for taking notes in a class.
          </t>
        </section>
        <section title="Shorthand" anchor="shorthand">
          <t><eref target="http://www.signwriting.org/lessons/cursive/shorthand">Shorthand is a skill of the proficient writer</eref>.  They can write SignWriting shorthand quickly and naturally.</t>
          
          <t>In 1982, Sign Language Stenographers could <eref target="http://www.signwriting.org/lessons/cursive/byhand5.html">record sign language with SignWriting Shorthand at normal signing speed</eref>.  Time tests proved practice and special training were required. The marks they write are personal style of quick and efficient strokes with a highly developed reception to what signifies meaning.  They understand the iconic symbols of the SignWriting Script, but their marks are personal reminders rather than a fully developed text.  </t>
          
          <t>The shorthand in and of itself is often an incomplete representation of the gestures that were experienced.  The shorthand writing can be thought of as a short-term memory device.  Often shorthand notes must be revised and extended at a later time, the sooner the better.</t>
        </section>
      </section>

    </section>

    <section title="SignWriting Text" anchor="signwriting_text">
      <t>SignWriting Text uses plain text that is iconic.  The sequential characters specify properties in common between forms.  
      The text is diagrammatic with defined relationships and simple structures.  It clarifies likenesses that are topologically similar.
      </t>
      <t>SignWriting Text is grammatically correct because it supports 2-dimensional arrangement and writing with lanes.
      Mathematically sized logograms are named with plain text strings based on patterns.
      Simple HTML and CSS are used for proper vertical layout.
      </t>
      <t>This model separates visual display from layout issues.  It is compatible with TrueType Fonts and server generated SVG.
      </t>
      <t>The model defines several compatible coded character sets and character encoding forms.  
      </t>
      <section title="Mathematical Name">
        <t>The mathematical name of a logographic sign is a plain text string of characters.   
        This encoding model makes explicit those features which can be effectively and efficiently processed. 
        Formal languages and regular expressions are used to solve fundamental problems.
        </t>
        <section title="Pattern String">
          <t>The mathematical name is structured with 11 different tokens.  
          They can be grouped in 4 layers:  the 5 structural makers (A, B, L, M, R), 
          the 3 base symbol ranges (w, s, P), 
          the 2 modifier indexes (i, o), and the numbers (n).
          </t>
          <texttable align='left' style='all' anchor='table_token_patterns'>
            <preamble>Token Patterns</preamble>
            <ttcol>Pattern</ttcol>
            <ttcol>Description</ttcol>
<c>wio</c><c>a writing symbol as 3 tokens of writing base, fill modifier and rotation modifier</c>
<c>nn</c><c>coordinate with X and Y values as 2 numbers</c>
<c>wionn</c><c>a spatial symbol as 5 tokens, with 3 tokens for a writing symbol and 2 tokens for coordinates of top left placement</c>
<c>(wionn)*</c><c>zero or more spatial symbols</c>
<c>Bnn(wionn)*</c><c>a signbox with a preprocessed maximum coordinate and a list of spatial symbols used for horizontal writing</c>
<c>[LMR]</c><c>a lane marker: either left, middle or right.</c>
<c>[LMR]nn(wionn)*</c><c>a signbox in either the left, middle, or right lane with a preprocessed maximum coordinate and a list of spatial symbols used for vertical writing</c>
<c>[ws]</c><c>a writing base symbol or a detailed location base symbol</c>
<c>[ws]io</c><c>a writing symbol or a detailed location symbol</c>
<c>([ws]io)+</c><c>one or more writing symbols and/or detailed location symbols</c>
<c>(A([ws]io)+)?</c><c>an optional prefix as a prefix marker followed by one or more writing symbols and/or detailed location symbols</c>
<c>Pio</c><c>a punctuation symbol as a punctuation base symbol with a fill modifier and a rotation modifier</c>
<c>(((A([ws]io)+)?Bnn(wionn)*)|Pio)+</c><c>a sign text for horizontal writing as a string of signboxes (with optional prefixes) and punctuation</c>
<c>(((A([ws]io)+)?[LMR]nn(wionn)*)|Pio)+</c><c>a sign text for vertical writing as a string of signboxes in lanes (with optional prefixes) and punctuation </c>
          </texttable>
    	</section>
        <section title="Unordered String">
          <t>2-dimensional space does not have a normative 1-dimensional order.  
          A group of spatial symbols is defined as (wionn)* which is zero or more writing symbols with 2-dimensional placement by tokens nn for each symbol.
          The tokens nn are meaningful and searchable.
          Each symbol defined with wionn is absolutely meaningful and searchable.
          Except for exact sign matching, the 2-dimensional order of the spatial symbols is meaningless and unreliable.
          </t>
        </section>
        <section title="Compact and Tractable">
          <t>The ASCII encoding is ready to deploy with a mature infrastructure.
          The name of a sign with 4 symbols is 60 characters long.
          The plain text model fully supports the grammar of written ASL with an additional 350 characters of basic HTML and CSS.  
          The stand alone JavaScript engine for client side viewing is 1.3 K characters and qualifies as a micro script.
          This script can be applied to any modern browser through a site script or initiated within a browser using a bookmark.
          </t>
          <t>To search for a sign with 4 spatial symbols requires 53 characters of query string and will create around 800 characters of regular expression.
          </t>
        </section>
      </section>
      <section title="Visual Image">
        <t>The visual image of a logographic sign is a 2-dimension arrangement of symbols inside of a sign box.
        The sign box has a defined width, height, and 2-dimensional center that can be calculated from the plain text.
              The SVG created by the SignWriting Icon Server is print quality.

        </t>
        <section title="TrueType Font">
          <t>Ready for experimental use with several open issues.  
          The entire ISWA 2010 is included with 2-dimensional arrangements of symbols for the logograms.
          The TrueType Font utilizes the temporary Unicode characters from the Private Use Area.  
          </t>
          <t>There are 4 open issues: the symbols are fuzzy, handshapes overlap incorrectly, arrow head/tail fill is missing, and Graphite occassionally crashes.
          </t>
        </section>
        <section title="Server Generated SVG">
          <t>The SignWriting Icon Server (open source on GitHub) is able to create logographic sign images from the mathematical names.
          The SVG is grammatically correct and print quality.
          </t>
          <t>Each SignWriting Icon Server provides the SignWriting Thin Viewer as a site script and as a bookmark.  
          The main SignWriting Icon Server is available on Wikimedia Labs and open to all.
          The backup SignWriting Icon Server is available on SignBank.org.
          New SignWriting Icon Servers can be created directly from the GitHub source.
          </t>
        </section>

      </section>
      <section title="Character Encoding Scheme">
        <t>Encoding schemes define how a character is written as a sequence of bytes.  
        SignWriting Text can use any encoding schemes that supports ASCII or Unicode.  
        </t>
        <t>Given a sequence of bytes representing text and a stated character encoding scheme, a string of characters is unambiguous and it is easy to recreate a sequence of characters as required for plain text.
        </t>
        <section title="ASCII">
          <t>Every logographic sign has a mathematical name in ASCII.  ASCII is universally supported.  The ASCII names are authoritative and easy to identify.  Searching with regular expressions is 4 times faster in ASCII that the equivalent Unicode.
          </t>
        </section>
        <section title="Unicode">
          <t>Every logographic sign has a temporary name of Unicode PUA characters for client side font handling.  The use of the Unicode PUA demonstrates the necessity and the capability of the proposed character set.
          </t>
        </section>
      </section>
      <section title="Coded Character Set">
        <t>A character is a fundamental building block of digital data. A character's smallest representation is a binary representation of a code point found in a character set.  A string is an ordered sequence of characters, which is nothing more that a list of code points.
        </t>
        <section title="x-ISWA-2010">
          <t>The x-ISWA-2010 is a 16-bit character set that covers each symbol of the ISWA 2010.  A 16-bit code is an integer between 0 and 65,535.  This type of value is perfect for a primary key for database lookup or other integer index.  Through a simple formula, any symbol identification can be transformed into a unique 16-bit codepoint.  Font software using the SQLite fonts rely on the x-ISWA-2010 coded character set.
          </t>
          <t>There are 652 BaseSymbols in the ISWA 2010, numbered from 1 to 652. Each BaseSymbol can be visualized on a grid of 6 columns and 16 rows: for the 6 fills and 16 rotations. Each symbol can be identified by 3 values of BaseSymbol, column and row.
          </t>
          <t>The codes of the x-ISWA-2010 are assigned starting with the first BaseSymbol grid.  The first symbol is given a code value of 1 and the codes are incremented down the first column, continue to the next column, and continue through the remaining BaseSymbols.
          </t>
          <t>Given any symbol with:
          </t>
            <t>BaseSymbol number = n</t>
            <t>Fill = f</t>
            <t>Rotation = r</t>
          <t>code = (n-1)*96 + (f-1)*16 + r
          </t>
        </section>
        <section title="x-Binary-SignWriting" anchor='x_binary_signwriting'>
          <t>The x-Binary-SignWriting is a 12-bit character set that covers the characters of SignWriting Plain Text.  It is possible to write the name of a logographic sign with binary data.  This is more of a theoretical advantage because we don't write with 12-bit characters.  This form is most useful for the translation to Private Use Area Unicode.
          </t>
        <texttable align='left' style='all' anchor='table_x_binary_signwriting'>
          <preamble>x-Binary-SignWriting Character</preamble>
          <ttcol>Name</ttcol>
          <ttcol>Token</ttcol>
          <ttcol>BSW Codepoint(s)</ttcol>

<c>Sequence Marker</c>
<c>A</c>
<c>B+100</c>

<c>SignBox Marker</c>
<c>B</c>
<c>B+101</c>

<c>Left Lane Marker</c>
<c>L</c>
<c>B+102</c>

<c>Middle Lane Marker</c>
<c>M</c>
<c>B+103</c>

<c>Right Lane Marker</c>
<c>R</c>
<c>B+104</c>

<c>Columns 1 thru 6 (fills)</c>
<c>i</c>
<c>B+110 - B+115</c>

<c>Rows 1 thru 16 (rotations)</c>
<c>o</c>
<c>B+120 - B+12F</c>

<c>Writing BaseSymbols</c>
<c>w</c>
<c>B+130 - B+3AE</c>

<c>Detailed Location BaseSymbols</c>
<c>s</c>
<c>B+3AF - B+3B6</c>

<c>Punctuation BaseSymbols</c>
<c>P</c>
<c>B+3B7 - B+3BB</c>

<c>Negative Numbers: -250 thru -1</c>
<c>n</c>
<c>B+706 - B+7FF</c>

<c>Positive Numbers: 0 thru 249</c>
<c>n</c>
<c>B+800 - B+8F9</c>
        </texttable>
        </section>
        <section title="x-Character-SignWriting">
          <t>The x-Character-SignWriting is a character set for SignWriting in Unicode.  
          Take the characters of the x-Binary-SignWriting coded character set and add hexadecimal value FD700.  
          The characters follow the same token patterns as x-Binary-SignWriting defined in <xref target="x_binary_signwriting" />.
          <vspace blankLines='100' />
          </t>

        <texttable align='left' style='all' anchor='table_x_character_signwriting'>
          <preamble>x-Character-SignWriting Characters</preamble>
          <ttcol>Name</ttcol>
          <ttcol>Token</ttcol>
          <ttcol>Unicode PUA</ttcol>

<c>Sequence Marker</c>
<c>A</c>
<c>U+FD800</c>

<c>SignBox Marker</c>
<c>B</c>
<c>U+FD801</c>

<c>Left Lane Marker</c>
<c>L</c>
<c>U+FD802</c>

<c>Middle Lane Marker</c>
<c>M</c>
<c>U+FD803</c>

<c>Right Lane Marker</c>
<c>R</c>
<c>U+FD804</c>

<c>Columns 1 thru 6 (fills)</c>
<c>i</c>
<c>U+FD810 - U+FD815</c>

<c>Rows 1 thru 16 (rotations)</c>
<c>o</c>
<c>U+FD820 - U+FD82F</c>

<c>Writing BaseSymbols</c>
<c>w</c>
<c>U+FD830 - U+FDAAE</c>

<c>Detailed Location BaseSymbols)</c>
<c>s</c>
<c>U+FDAAF - U+FDAB6</c>

<c>Punctuation BaseSymbols</c>
<c>P</c>
<c>U+FDAB7 - U+FDABB</c>

<c>Negative Numbers: -250 thru -1</c>
<c>n</c>
<c>U+FDE06 - U+FDEFF</c>

<c>Positive Numbers: 0 thru 249</c>
<c>n</c>
<c>U+FDF00 - U+FDFF9</c>
        </texttable>
        </section>
      </section>

      <section title="Character Encoding Form">
        <t>The character encoding form for SignWriting text are based on ASCII or Unicode.  
        The standard Unicode CEFs of UTF-8, UTF-16, or UTF-32 can be used.  For ASCII, an additional mapping layer of a lite markup is used.
        </t>
        <section title="Lite Markup">
          <t>ASCII characters are used to identify structure, symbols, and coordinates.  
          It has proven to be beneficial to use a human readable lite markup of ASCII words separated by white space.
          Each word represents either a signbox or a punctuation.  
          The lite markup has the advantage of a small size without requiring special Unicode or XML functions.  
          Simple regular expressions can quickly and efficiently process the lite markup.
          </t>

          <t>In the lite markup, the structural markers use the token values as the character representation.
          </t>

          <texttable align='left' style='all' anchor='table_structural_marker_tokens'>
            <preamble>Structural Marker Tokens</preamble>
            <ttcol>Token</ttcol>
            <ttcol>Description</ttcol>

            <c>A</c>
            <c>Sequence Marker</c>
            <c>B</c>
            <c>SignBox Marker</c>
            <c>L</c>
            <c>Left Lane Marker</c>
            <c>M</c>
            <c>Middle Lane Marker</c>
            <c>R</c>
            <c>Right Lane Marker</c>
          </texttable>

          <t>In the lite markup, symbols are referenced by symbol keys: the letter 'S' followed by 5 hexadecimal values, 3 characters for the symbol base and 2 characters for the modifiers.
          </t>

          <t>In the lite markup, there are 2 types of coordinates:  regular fixed-width coordinates and irregular variable-width coordinates.  Both types of coordinates contain 2 numbers separated by the letter 'x'.
          </t>

          <t>In the lite markup, regular coordinates are always 7 ASCII characters long: 3 digits followed by the letter 'x' followed by 3 more digits.  The numbers range from 250 to 749, with 500 being the center point as zero.  So for regular coordinates, the string "250" is equal to the number value of -250 and "749" is equal to the number value of 249.
          The loose definition of regular coordinates matches numbers with 3 digits without specifying the number range.  It has a regular expression of /[0-9]{3}x[0-9]{3}/.
          The strict definition of regular coordinates only matches numbers in the range from 250 to 749.  It has a more verbose regular expression of /(2[5-9][0-9]|[3-6][0-9]{2}|7[0-4][0-9])x(249|2[5-9][0-9]|[3-6][0-9]{2}|7[0-4][0-9])/.
          </t>
          <t>In the lite markup, irregular coordinates are variable width.  The numbers can be positive or negative.  For negative numbers, the '-' minus sign is replaced with the letter 'n'.  The two numbers in the coordinate are separated by the letter 'x'.  The center coordinate of (0,0) is represented by the string '0x0'.  The coordinate (-250,-250) is represented by the string 'n250xn250'.
          </t>
          <t>Although signs have a coordinate number limit of -250 to 249, irregular coordinates are unbounded when used for display with compounds of multiple signs and punctuation.
          </t>
        </section>

        <section title="Formal SignWriting">
          <t>Formal SignWriting is the standard format for storing the names of the signs. 
          It uses a lite markup with the token values for structural markers (A, B, L, M, R), symbol keys, and regular coordinates. White space is used to separate words of signs and punctuation.
          </t>
          <texttable align="left" style="all" anchor="table_formal_signwriting">
            <preamble>Regular Expressions of Formal SignWriting</preamble>
            <ttcol>Structure</ttcol>
            <ttcol>Regular Expression</ttcol>
            
            <c>Symbol key</c>
            <c>S[123][0-9a-f]{2}[0-5][0-9a-f]</c>

            <c>Coordinate</c>
            <c>[0-9]{3}x[0-9]{3}</c>

            <c>Signbox</c>
            <c>[BLMR]([0-9]{3}x[0-9]{3})(S[123][0-9a-f]{2}[0-5][0-9a-f][0-9]{3}x[0-9]{3})*</c>

            <c>Term</c>
            <c>(A(S[123][0-9a-f]{2}[0-5][0-9a-f])+)[BLMR]([0-9]{3}x[0-9]{3})(S[123][0-9a-f]{2}[0-5][0-9a-f][0-9]{3}x[0-9]{3})*</c>

            <c>Punctuation</c>
            <c>S38[7-9ab][0-5][0-9a-f][0-9]{3}x[0-9]{3}</c>

            <c>Text</c>
            <c>((A(S[123][0-9a-f]{2}[0-5][0-9a-f])+)?[BLMR]([0-9]{3}x[0-9]{3})(S[123][0-9a-f]{2}[0-5][0-9a-f][0-9]{3}x[0-9]{3})*|S38[7-9ab][0-5][0-9a-f][0-9]{3}x[0-9]{3})( (A(S[123][0-9a-f]{2}[0-5][0-9a-f])+)?[BLMR]([0-9]{3}x[0-9]{3})(S[123][0-9a-f]{2}[0-5][0-9a-f][0-9]{3}x[0-9]{3})*| S38[7-9ab][0-5][0-9a-f][0-9]{3}x[0-9]{3})*</c>
          </texttable>
        </section>
        <section title="Kartesian SignWriting">
          <t>Kartesian SignWriting is an alternate encoding form with several types of display variants.
          It uses a lite markup with the token values for structural markers (A, B, L, M, R), symbol keys, and irregular coordinates. White space is used to separate words of signs and punctuation.
          </t>
          <t>Each format uses a lite markup with the token values for structural markers (A, B, L, M, R), symbol keys, and irregular coordinates.  Spaces separate words for signs and punctuation.
          </t>

          <texttable align="left" style="all" anchor="table_ksw_common">
            <preamble>Regular Expressions of Formal SignWriting</preamble>
            <ttcol>Structure</ttcol>
            <ttcol>Regular Expression</ttcol>
            <c>Symbol key</c>
            <c>S[123][0-9a-f]{2}[0-5][0-9a-f]</c>

            <c>Coordinate</c>
            <c>n?[0-9]+xn?[0-9]+</c>
          </texttable>

          <section title="Raw">
            <t>The raw display format string contains the minimal amount of data required to represent text. It defines signs and punctuations. The signboxes are neither centered or sized.  A signbox can occur anywhere in the signbox space and the center is not assumed to be the coordinate (0,0).  The maximum coordinate for a signbox is unstated.  Likewise, the punctuation does not contain any placement information.  Layout is impossible without access to an outside datasource.
            </t>

            <t>A sign is a combination of a lane maker (BLMR), followed by zero or more symbol keys with placement coordinates.
            </t>

            <t>A punctuation is represented with a single symbol key.
            </t>

            <texttable align="left" style="all" anchor="table_ksw_raw">
              <preamble>Regular Expressions of Kartesian SignWriting Raw</preamble>
              <ttcol>Structure</ttcol>
              <ttcol>Regular Expression</ttcol>
              
              <c>Signbox</c>
              <c>[BLMR](S[123][0-9a-f]{2}[0-5][0-9a-f]n?[0-9]+xn?[0-9]+)*</c>

              <c>Term prefix</c>
              <c>A(S[123][0-9a-f]{2}[0-5][0-9a-f])+</c>

              <c>Punctuation</c>
              <c>S38[7-9ab][0-5][0-9a-f]</c>

              <c>Text</c>
              <c>((A(S[123][0-9a-f]{2}[0-5][0-9a-f])+)?[BLMR](S[123][0-9a-f]{2}[0-5][0-9a-f]n?[0-9]+xn?[0-9]+)*|S38[7-9ab][0-5][0-9a-f])( (A(S[123][0-9a-f]{2}[0-5][0-9a-f])+)?[BLMR](S[123][0-9a-f]{2}[0-5][0-9a-f]n?[0-9]+xn?[0-9]+)*| S38[7-9ab][0-5][0-9a-f])*</c>
            </texttable>
          </section>


          <section title="Expanded">
            <t>The expanded display format string contains sizing information (width and height) for every symbol outside of the term prefix.  The maximum coordinate for a signbox can be calculated by adding the symbol width and height to the symbol placement coordinate.
            </t>

            <t>For any symbol key in the signbox or for punctuation, the width and height is accessed from an outside data source.  The size information is written as an irregular coordinate and appended to the symbol key through a simple search and replace.
            </t>

            <t>A sign is a combination of a lane maker (BLMR), followed by zero or more symbol keys with sizing information followed by placement coordinates.
            </t>

            <t>A punctuation is represented with a symbol key and a size coordinate
            </t>

            <texttable align="left" style="all" anchor="table_ksw_expanded">
              <preamble>Regular Expressions of Kartesian SignWriting Expanded</preamble>
              <ttcol>Structure</ttcol>
              <ttcol>Regular Expression</ttcol>

              <c>Signbox</c>
              <c>[BLMR](S[123][0-9a-f]{2}[0-5][0-9a-f][0-9]+x[0-9]+xn?[0-9]+xn?[0-9]+)*</c>

              <c>Term prefix</c>
              <c>A(S[123][0-9a-f]{2}[0-5][0-9a-f])+</c>

              <c>Punctuation</c>
              <c>S38[7-9ab][0-5][0-9a-f][0-9]+x[0-9]+</c>

              <c>Text</c>
              <c>((A(S[123][0-9a-f]{2}[0-5][0-9a-f])+)?[BLMR](S[123][0-9a-f]{2}[0-5][0-9a-f][0-9]+x[0-9]+xn?[0-9]+xn?[0-9]+)*|S38[7-9ab][0-5][0-9a-f][0-9]+x[0-9]+)( (A(S[123][0-9a-f]{2}[0-5][0-9a-f])+)?[BLMR](S[123][0-9a-f]{2}[0-5][0-9a-f][0-9]+x[0-9]+xn?[0-9]+xn?[0-9]+)*| S38[7-9ab][0-5][0-9a-f][0-9]+x[0-9]+)*</c>
            </texttable>

          </section>

          <section title="Layout">
            <t>The layout display format string contains the maximum coordinate as a preprocessed value for signboxes and it contains the placement coordinate for punctuation.  It is equivalent to the lite markup for the regular searching form, but with irregular coordinates.
            </t>

            <t>A sign is a combination of a lane maker (BLMR), followed by the maximum coordinate, followed by zero or more symbol keys with placement coordinates.
            </t>

            <t>A punctuation is a combination of a symbol key followed by a placement coordinate. The center is assumed to be the coordinate (0,0). The maximum coordinate is the additive inverse of the placement coordinate.
            </t>

            <texttable align="left" style="all" anchor="table_ksw_layout">
              <preamble>Regular Expressions of Kartesian SignWriting Layout</preamble>
              <ttcol>Structure</ttcol>
              <ttcol>Regular Expression</ttcol>
              
              <c>Signbox</c>
              <c>[BLMR]([0-9]+x[0-9]+)(S[123][0-9a-f]{2}[0-5][0-9a-f]n?[0-9]+xn?[0-9]+)*</c>

              <c>Term prefix</c>
              <c>A(S[123][0-9a-f]{2}[0-5][0-9a-f])+</c>

              <c>Punctuation</c>
              <c>S38[7-9ab][0-5][0-9a-f]n?[0-9]+xn?[0-9]+</c>

              <c>Text</c>
              <c>((A(S[123][0-9a-f]{2}[0-5][0-9a-f])+)?[BLMR]([0-9]+x[0-9]+)(S[123][0-9a-f]{2}[0-5][0-9a-f]n?[0-9]+xn?[0-9]+)*|S38[7-9ab][0-5][0-9a-f]n?[0-9]+xn?[0-9]+)( (A(S[123][0-9a-f]{2}[0-5][0-9a-f])+)?[BLMR]([0-9]+x[0-9]+)(S[123][0-9a-f]{2}[0-5][0-9a-f]n?[0-9]+xn?[0-9]+)*| S38[7-9ab][0-5][0-9a-f]n?[0-9]+xn?[0-9]+)*</c>
            </texttable>
          </section>

          <section title="Panel">
            <t>A panel display format  string combines multiple signs and punctuations into a unit as a defined height column or defined width row.  Each signbox contains an offset coordinate that is used to position the symbols inside of the signbox.  The offset is added to the placement coordinate to determine the position of each symbol on the panel.
            </t>

            <t>Each panel begins with a panel display marker "D" followed by a sizing coordinate.  The top-left of the panel is taken to be the coordinate (0,0) such that the sizing coordinate can be understood as the width and height of the panel as well as the maximum coordinate.
            </t>

            <t>Each panel can contain several signboxes.  Each signbox has its own offset coordinate.  The offset coordinate is used to determine the position of the signbox's symbols within the panel.
            </t>

            <t>A full panel includes the panel prefix with several signboxes with offsets.
            </t>

            <texttable align="left" style="all" anchor="table_ksw_display">
              <preamble>Regular Expressions of Kartesian SignWriting Display</preamble>
              <ttcol>Structure</ttcol>
              <ttcol>Regular Expression</ttcol>

              <c>Signbox with offset</c>
              <c>_[BLMR]([0-9]+x[0-9]+)(S[123][0-9a-f]{2}[0-5][0-9a-f]n?[0-9]+xn?[0-9]+)*</c>

              <c>Panel</c>
              <c>D[0-9]+x[0-9]+(_[BLMR]([0-9]+x[0-9]+)(S[123][0-9a-f]{2}[0-5][0-9a-f]n?[0-9]+xn?[0-9]+)*)*</c>

              <c>Panels</c>
              <c>D[0-9]+x[0-9]+(_[BLMR]([0-9]+x[0-9]+)(S[123][0-9a-f]{2}[0-5][0-9a-f]n?[0-9]+xn?[0-9]+)*)*( D[0-9]+x[0-9]+(_[BLMR]([0-9]+x[0-9]+)(S[123][0-9a-f]{2}[0-5][0-9a-f]n?[0-9]+xn?[0-9]+)*)*)*</c>
            </texttable>
          </section>

        </section>
      </section>
      <section title="Query Language">
        <t>The query language is an ASCII lite markup similar to FSW used to search.  A query will compile to a series of regular expression to search a section of text to find similar or exact sign matches.
         Modern SignWriting section 9 clearly illustrates <eref target="http://signpuddle.net/wiki/index.php/MSW:Regular_Storage_Form#9.B._Query_String">the searching available and the associated regular expression technology</eref>.
        </t>
        <t>The query string is a concise representation for a much larger set of regular expression statements. The query string permits several types of searches for symbols, ranges and spatial relation.
        </t>
      </section>
    </section>


    <section title="ISWA 2010" anchor="iswa_2010">
      <t>The ISWA 2010 is the abstract symbolset for the x-ISWA-2010 coded character set. The symbols are visually iconic, uniquely identified, and organized in a layered hierarchy (<xref target="hierarchy" />).
      </t>
      <t>The x-ISWA-2010 is a 16-bit coded character used in the font software to access the symbol glyphs.  
      </t>
      <t>The x-Binary-SignWriting is a 12-bit coded character set that does not directly encode the symbols of the ISWA 2010, but divides each symbol into a combination of 3 characters.  
      The first character represents the base of the symbol.  The next represents the fill of the symbol.  The last character represents the rotation of the symbol.
      </t>

      <section title="Grapheme" anchor="sw_grapheme">
        <t>The grapheme is the fundamental unit of writing for the SignWriting script. Many graphemes of SignWriting are visually iconic.  
        The main writing graphemes of SignWriting represent a visual conception: either hands, movement, dynamics, timing, head, face, trunk, or limb.  The body concept is a combination of trunk and limb.  The specific size and shape of each grapheme is designed to balance and complement other graphemes.  
        </t>
        <t>The writing graphemes are extensive and specifically organized for written sign language and sign gestures.  The writing graphemes do not include the specific graphemes of DanceWriting or the general graphemes of MovementWriting.
        </t>
        <t>The writing graphemes are used in clusters. A cluster is a spatial grouping of graphemes written as a single unit. The graphemes can overlap and obscure graphemes underneath.  A cluster can represents a sign of a sign language or a visual performance of a sign gesture.
        </t>
        <t>Detailed location graphemes are separate from the main writing graphemes.  Detailed location graphemes are used individually or sequentially.  They represent isolated analysis that is written outside the cluster.
          </t>
        <t>Punctuation graphemes are used when writing sentences.  They are used individually, between clusters.
        </t>
        <t>When written by hand, lines are drawn to form each grapheme.  Different styles draw different types of lines: either for personal taste, speed, or quality.  The main types of handwriting are formal, cursive, and shorthand.  Formal handwriting, equivalent to block printing, includes defined lines for all grapheme features, specific palm facings for hand shapes, and detailed arrow heads and tails.  Cursive handwriting is more fluid and less detailed. Handwriting for personal use can omit palm facings, generalize arrows, and other liberties of personal consumption.  Shorthand is a further reduction of detail, written for speed.  Shorthand is a memory aid to a written record and should be rewritten soon after the notes were taken.</t>
        <t>Understanding the ratios of size and shape for the graphemes improves hand writing.  SignWriting was an exclusively handwritten script for 7 years before publishing formalized the Block Printing model.
        </t>
      </section>

      <section title="Symbol" anchor="iswa_sym">
        <t>There are 37,811 symbols, each with a unique ID.  A symbol ID is a sequence of six formatted numbers of increasing detail.  The first dashed number defines the category (11).  The first two dashed numbers define the group (11-22).  The first four dashed numbers define a base (11-22-333-44).  The fifth number represents the fill (55).  The sixth number represents the rotation (66).  A symbol ID is a combination of base ID with a valid fill and a valid rotation.  A symbol ID has the format "nn-nn-nnn-nn-nn-nn", where each "n" is a digit from 0 to 9.
        </t>
        <t>The fill modifier can best be understood through the palm facing of the hand graphemes.   The palm facing is based on planes. The SignWriting script uses two planes: the Front Wall  (Frontal Plane) and the Floor (Transverse Plane). There are 6 palm facings. The first three palm facings are parallel with the Front Wall. The second three palm facings are parallel with the Floor. The reader can view the signer from different viewpoints (expressive or receptive) and can view the hands from different perspectives (front or top), but no matter what the viewpoint or perspective, the first three Fills represent the palm facing parallel to the Front Wall and the second three Fills represent the palm facing parallel to the Floor.
        </t>
        <texttable  align='left' style='all' anchor='table_hand_fills'>
          <ttcol>Fill</ttcol>
          <ttcol>Indicator</ttcol>
          <ttcol>Meaning</ttcol>
          <c>01</c>
          <c>grapheme with white palm</c>
          <c>reader sees palm of hand parallel Front Wall</c>
          <c>02</c>
          <c>grapheme with half black palm</c>
          <c>reader sees side of hand parallel Front Wall</c>
          <c>03</c>
          <c>grapheme with black palm</c>
          <c>reader sees back of hand parallel Front Wall</c>
          <c>04</c>
          <c>grapheme with white palm and broken line</c>
          <c>reader sees palm of hand parallel Floor</c>
          <c>05</c>
          <c>grapheme with half black palm and broken line</c>
          <c>reader sees side of hand parallel Floor</c>
          <c>06</c>
          <c>grapheme with black palm and broken line</c>
          <c>reader sees palm of hand parallel Floor</c>
        </texttable>
        <t>The fill modifier is redefined for the movement arrows of category 2.
        </t>
        <texttable  align='left' style='all' anchor='table_arrow_fills'>
          <ttcol>Fill</ttcol>
          <ttcol>Indicator</ttcol>
          <ttcol>Meaning</ttcol>
          <c>01</c>
          <c>a grapheme with a black arrow head</c>
          <c>movement of the right hand</c>
          <c>02</c>
          <c>a grapheme with a white arrow head</c>
          <c>movement of the left hand</c>
          <c>03</c>
          <c>a grapheme with a thin, unconnected arrow head</c>
          <c>spatial overlapping  of movement arrows for the left and right hands when they move as a unit</c>
          <c>04</c>
          <c>Irregular arrow stems</c>
          <c>building blocks for complex movement</c>
        </texttable>
        <t>The rest of the other bases use a fill modifier for grouping and visual organization that is meaningful only for a particular base symbol or small set.
        </t>
        <t>The rotation modifier can best be understood through the hand symbols.  The first 8 rotations progress 45 degrees counter clockwise.  The last 8 rotations are a mirror of the first 8 and progress 45 degrees clockwise.  Zero (0) degrees is understood to point to the top of the grapheme.
        </t>
        <texttable  align='left' style='all' anchor='table_hand_rotations'>
          <ttcol>Rotation</ttcol>
          <ttcol>Direction</ttcol>
          <ttcol>Degrees from top</ttcol>
          <c>01</c>
          <c>Counter Clockwise</c>
          <c>0</c>
          <c>02</c>
          <c>Counter Clockwise</c>
          <c>45</c>
          <c>03</c>
          <c>Counter Clockwise</c>
          <c>90</c>
          <c>04</c>
          <c>Counter Clockwise</c>
          <c>135</c>
          <c>05</c>
          <c>Counter Clockwise</c>
          <c>180</c>
          <c>06</c>
          <c>Counter Clockwise</c>
          <c>225</c>
          <c>07</c>
          <c>Counter Clockwise</c>
          <c>270</c>
          <c>08</c>
          <c>Counter Clockwise</c>
          <c>315</c>

          <c>09</c>
          <c>Clockwise</c>
          <c>0</c>

          <c>10</c>
          <c>Clockwise</c>
          <c>45</c>
          <c>11</c>
          <c>Clockwise</c>
          <c>90</c>
          <c>12</c>
          <c>Clockwise</c>
          <c>135</c>
          <c>13</c>
          <c>Clockwise</c>
          <c>180</c>
          <c>14</c>
          <c>Clockwise</c>
          <c>225</c>
          <c>15</c>
          <c>Clockwise</c>
          <c>270</c>
          <c>16</c>
          <c>Clockwise</c>
          <c>315</c>
        </texttable>
      </section>
      <section title="Hierarchy" anchor="hierarchy">
        <t>The symbols of the ISWA 2010 are placed in a layered hierarchy for organization and access.  There are 4 levels to the ISWA 2010 hierarchy: category, group, base, and symbol.
        </t>
        <t>There are 7 categories.  The first number of the symbol ID identifies the category.  The first 5 categories contain writing symbols for use in clusters: 1) Hands, 2) Movement, 3) Dynamics &amp; Timing, 4) Head &amp; Face, and 5) Body.  The Body category can be broken into 2 subcategories: 5.1) Trunk and 5.2) Limb.
        </t>
        <t>The 6th category is Detailed Location that contains symbols used alone or in sequence, always outside the cluster.  The 7th category is Punctuation that contains symbols used between clusters for text.
        </t>
        <texttable  align='left' style='all' anchor='table_categories'>
          <preamble>The 7 Categories of the ISWA 2010</preamble>
          <ttcol>Cat</ttcol>
          <ttcol>Purpose</ttcol>
          <ttcol>Name</ttcol>
          <ttcol>Description</ttcol>
          <c>1</c>
          <c>Writing</c>
          <c>Hands</c>
          <c>Handshapes from over 40 Sign Languages are placed in 10 groups based on the numbers 1-10 in American Sign Language.</c>
          
          <c>2</c>
          <c>Writing</c>
          <c>Movement</c>
          <c>Contact symbols, small finger movements, straight arrows, curved arrows and circles are placed into 10 groups based on planes: The Front Wall Plane includes movement that is "parallel to the front wall" and the Floor Plane includes movement that is "parallel to the floor".</c>
          
          <c>3</c>
          <c>Writing</c>
          <c>Dynamics &amp; Timing</c>
          <c>Dynamics Symbols are used to give the "feeling" or "tempo" to movement. They provide emphasis on a movement or expression, and combined with Punctuation Symbols become the equivalent to Exclamation Points. The Tension Symbol, combined with Contact Symbols, provides the feeling of "pressure", and combined with facial expressions can place emphasis or added feeling to an expression. Timing symbols are used to show alternating or simultaneous movement.</c>
          
          <c>4</c>
          <c>Writing</c>
          <c>Head &amp; Face</c>
          <c>Starting with the head and then from the top of the face and moving down.</c>
          
          <c>5</c>
          <c>Writing</c>
          <c>Body</c>
          <c>Torso movement, shoulders, hips, and the limbs are used in Sign Languages as a part of grammar, especially when describing conversations between people, called Role Shifting, or making spatial comparisons between items on the left and items on the right.</c>
          
          <c>6</c>
          <c>Detailed Location</c>
          <c>Detailed Location</c>
          <c>Detailed Location symbols used are used alone or in sequence outside of the cluster.  They may be useful for sorting large dictionaries, refining animation, simplifying translation between scripts and notation systems, and for detailed analysis of location sometimes needed in linguistic research.</c>
          
          <c>7</c>
          <c>Punctuation</c>
          <c>Punctuation</c>
          <c>Punctuation symbols are used when writing complete sentences or documents in SignWriting.</c>
        </texttable>
        <t>There are 30 groups.  The first 2 dashed numbers in the symbol ID identify the group.  The 30 groups can be divided into 3 sets of 10.  The first ten are hands, category 1.  The second ten are movements, category 2.  The third ten are categories 3 thru 7.  In order, 1 group for the Dynamics &amp; Timing category, 1 for Head, 4 for Face, 1 for Trunk, 1 for Limb, 1 for Detailed Location, and 1 for Punctuation.  
        </t>

        <texttable  align='left' style='all' anchor='table_30_groups'>
          <preamble>The 30 groups with symbol ID segment.</preamble>
          <ttcol>First Set</ttcol>
          <ttcol>Second Set</ttcol>
          <ttcol>Third Set</ttcol>
          <c>01-01
          Index</c>
          <c>02-01
          Contact</c>
          <c>03-01
          Dynamics &amp; Timing</c>

          <c>01-02
          Index Middle</c>
          <c>02-02
          Finger Movement</c>
          <c>04-01
          Head</c>

          <c>01-03
          Index Middle Thumb</c>
          <c>02-03
          Straight Wall Plane</c>
          <c>04-02
          Brow Eyes Eyegaze</c>

          <c>01-04
          Four Fingers</c>
          <c>02-04
          Straight Diagonal Plane</c>
          <c>04-03
          Cheeks Ears Nose Breath</c>

          <c>01-05
          Five Fingers</c>
          <c>02-05
          Straight Floor Plane</c>
          <c>04-04
          Mouth Lips</c>

          <c>01-06
          Baby Finger</c>
          <c>02-06
          Curves Parallel Wall Plane</c>
          <c>04-05
          Tongue Teeth Chin Neck</c>

          <c>01-07
          Ring Finger</c>
          <c>02-07
          Curves Hit Wall Plane</c>
          <c>05-01
          Trunk</c>

          <c>01-08
          Middle Finger</c>
          <c>02-08
          Curves Hit Floor Plane</c>
          <c>05-02
          Limbs</c>

          <c>01-09
          Index Thumb</c>
          <c>02-09
          Curves Parallel Floor Plane</c>
          <c>06-01
          Detailed Location</c>

          <c>01-10
          Thumb</c>
          <c>02-10
          Circles</c>
          <c>07-01
          Punctuation</c>
        </texttable>
        <t>There are 652 bases.  The first 4 dashed numbers of a symbol ID identify the base.  The 652 bases are divided between the 30 groups.  For each group, there are less than 60 bases.  The bases are often displayed in columns of 10.  
        </t>
        <t>Each base can have up to 96 symbols.  All 6 dashed numbers of the symbol ID are required to identify a symbol.  Each symbol is a combination of a base, fill, and rotation.  The fill is identified by the 5th number of the symbol ID with possible values from 01 to 06.  The rotation is identified by the 6th number of the symbol ID with possible values from 01 to 16.
        </t>
      </section>
      <section title="Combined Character Sequence" anchor='sec_x_iswa_2010_combo'>
        <t>Each symbol of the ISWA 2010 can be expressed with a combination of 3 characters. 
        The first character represents the base of the symbol. 
        The next character represents the fill of the symbol. 
        The last character represents the rotation of the symbol. 
        </t>
        <t>There are three forms the fill and rotation can use to represent their value: a hexadecimal key, an x-Binary-SignWriting character, or an x-Character-SignWriting character.  
        </t>
        <t>The x-Binary-SignWriting coded character set uses a 12-bit encoding. 
        Code points in this set use a "B+" prefix along with the 3 hexadecimal digits that represent the value.
        </t>
        <t> The x-Character-SignWriting coded character set uses the Private Use Area of Unicode.  These code points occur on plane 15.  
        Code points in this set use a "U+" prefix along with the 5 hexadecimal digits that represent the value.
        </t>
        <t>The fill value ranges from 1 to 6.  The fill key is 1 less than the value and ranges from 0 to 5.
        </t>
        <texttable align='left' style='all' anchor='fill_variations'>
          <ttcol align="right">Fill Value</ttcol>
          <ttcol>Key</ttcol>
          <ttcol>x-Binary-SignWriting</ttcol>
          <ttcol>x-Character-SignWriting</ttcol>
          <c>1</c>
          <c>0</c>
          <c>B+110</c>
          <c>U+FD810</c>

          <c>2</c>
          <c>1</c>
          <c>B+111</c>
          <c>U+FD812</c>

          <c>3</c>
          <c>2</c>
          <c>B+112</c>
          <c>U+FD812</c>

          <c>4</c>
          <c>3</c>
          <c>B+113</c>
          <c>U+FD813</c>

          <c>5</c>
          <c>4</c>
          <c>B+114</c>
          <c>U+FD814</c>

          <c>6</c>
          <c>5</c>
          <c>B+115</c>
          <c>U+FD815</c>
        </texttable>
        <t>
        The rotation value ranges from 1 to 16.  The rotation key is written in hexadecimal and is equal to 1 less than the value and ranges from "0" to "f".
        </t>
        <texttable align='left' style='all' anchor='rotation_variations'>
          <ttcol align="right">Rotation Value</ttcol>
          <ttcol>Key</ttcol>
          <ttcol>x-Binary-SignWriting</ttcol>
          <ttcol>x-Character-SignWriting</ttcol>
          <c>1</c>
          <c>0</c>
          <c>B+120</c>
          <c>U+FD820</c>

          <c>2</c>
          <c>1</c>
          <c>B+121</c>
          <c>U+FD821</c>

          <c>3</c>
          <c>2</c>
          <c>B+122</c>
          <c>U+FD822</c>

          <c>4</c>
          <c>3</c>
          <c>B+123</c>
          <c>U+FD823</c>

          <c>5</c>
          <c>4</c>
          <c>B+124</c>
          <c>U+FD824</c>

          <c>6</c>
          <c>5</c>
          <c>B+125</c>
          <c>U+FD825</c>

          <c>7</c>
          <c>6</c>
          <c>B+126</c>
          <c>U+FD826</c>

          <c>8</c>
          <c>7</c>
          <c>B+127</c>
          <c>U+FD827</c>

          <c>9</c>
          <c>8</c>
          <c>B+128</c>
          <c>U+FD828</c>

          <c>10</c>
          <c>9</c>
          <c>B+129</c>
          <c>U+FD829</c>

          <c>11</c>
          <c>a</c>
          <c>B+12A</c>
          <c>U+FD82A</c>

          <c>12</c>
          <c>b</c>
          <c>B+12B</c>
          <c>U+FD82B</c>

          <c>13</c>
          <c>c</c>
          <c>B+12C</c>
          <c>U+FD82C</c>

          <c>14</c>
          <c>d</c>
          <c>B+12D</c>
          <c>U+FD82D</c>

          <c>15</c>
          <c>e</c>
          <c>B+12E</c>
          <c>U+FD82E</c>

          <c>16</c>
          <c>f</c>
          <c>B+12F</c>
          <c>U+FD82F</c>
        </texttable>


        <t>Further, a 16 bit symbol code from the x-ISWA-2010 exists for each of the valid combined character sequences.  This relationship can be stated as (symbol code = ((base code - 256) * 96) + ((fill value - 1) * 16) + rotation value).  The first symbol code is 1 and the last valid symbol code is  62,504.
        </t>
        <t>The first symbol has an ID of "01-01-001-01-01-01" and a symbol code of 1.
        <list>
          <t>Symbol code 1 = symbol key S10000 = B+130, B+110, B+120 = U+FD830, U+FD810, U+FD820.
          </t>
          <t>Symbol code 1 = ( ( hexdec('100') - 256 ) * 96 ) + ( ( fill_value(1) - 1 ) * 16 ) + rotation_value(1).
          </t>
          <t>Symbol code 1 = ( ( 256 - 256 ) * 96 ) + ( ( 1 - 1 ) * 16 ) + 1.
          </t>
          <t>Symbol code 1 = ( 0 * 96 ) + ( 0 * 16 ) + 1.
          </t>
          <t>Symbol code 1 = 1.
          </t>
        </list>
        </t>
      </section>
      <section title="Validity" anchor='sec_x_iswa_2010_validity'>
        <t>Although there are 6 possible fills and 16 possible rotations, not every combination of base, fill, and rotation is valid. Each base has a set of valid fills and a set of valid rotation.  These validity sets contain one or more values from the defined range.  
        </t>
        <t>For each value, the inclusion in the validity set can be expressed with a value of "0" or "1".   For fill values, lining up the digit from left to right, will result in a string 6 digits long.  The value of the 6 digit number is 2 ^ (value -1).
        </t>
        <texttable style='all' anchor='table_binaryfills'>
          <ttcol align='center'>Fill Value</ttcol>
          <ttcol align='center'>1</ttcol>
          <ttcol align='center'>2</ttcol>
          <ttcol align='center'>3</ttcol>
          <ttcol align='center'>4</ttcol>
          <ttcol align='center'>5</ttcol>
          <ttcol align='center'>6</ttcol>
          <ttcol align='center'>Binary</ttcol>
          <ttcol align='center'>Power of 2</ttcol>
          <c>1</c>
          <c>X</c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c>100000</c>
          <c>1</c>

          <c>2</c>
          <c></c>
          <c>X</c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c>010000</c>
          <c>2</c>

          <c>3</c>
          <c></c>
          <c></c>
          <c>X</c>
          <c></c>
          <c></c>
          <c></c>
          <c>001000</c>
          <c>4</c>

          <c>4</c>
          <c></c>
          <c></c>
          <c></c>
          <c>X</c>
          <c></c>
          <c></c>
          <c>000100</c>
          <c>8</c>

          <c>5</c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c>X</c>
          <c></c>
          <c>000010</c>
          <c>16</c>

          <c>6</c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c>X</c>
          <c>000001</c>
          <c>32</c>
        </texttable>

        <t>The value of any fill validity set is equal to the sum of the power of 2 for each fill value in the set.  The empty set is invalid and has a sum of zero (0).  The full set of all possible fills has a sum of 63. 
        </t>
        <texttable style='all' anchor='table_binaryfills_empty_full'>
          <ttcol align='center'>Fill Set</ttcol>
          <ttcol align='center'>1</ttcol>
          <ttcol align='center'>2</ttcol>
          <ttcol align='center'>3</ttcol>
          <ttcol align='center'>4</ttcol>
          <ttcol align='center'>5</ttcol>
          <ttcol align='center'>6</ttcol>
          <ttcol align='center'>Binary</ttcol>
          <ttcol align='center'>Power of 2</ttcol>
          <c>{}</c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c>000000</c>
          <c>0</c>

          <c>{1,2,3,4,5,6}</c>
          <c>X</c>
          <c>X</c>
          <c>X</c>
          <c>X</c>
          <c>X</c>
          <c>X</c>
          <c>111111</c>
          <c>63</c>
        </texttable>
        <t>Each base has a defined validity set for fills.  The "Fills" column in the "Bases" section.
        </t>
        <t>The rotation validity sets have a larger range than the fills.  The possible rotation values range from 1 to 16.  The power of 2 numbers are 16-bit.
        </t>

        <texttable align='left' style='all' anchor='binarynumber_value'>
          <ttcol align="right">Value</ttcol>
          <ttcol>Binary</ttcol>
          <ttcol>Power of 2</ttcol>
          <c>1</c>
          <c>2^0</c>
          <c>1</c>

          <c>2</c>
          <c>2^1</c>
          <c>2</c>
          <c>3</c>
          <c>2^2</c>
          <c>4</c>

          <c>4</c>
          <c>2^3</c>
          <c>8</c>
          <c>5</c>
          <c>2^4</c>
          <c>16</c>

          <c>6</c>
          <c>2^5</c>
          <c>32</c>
          <c>7</c>
          <c>2^6</c>
          <c>64</c>

          <c>8</c>
          <c>2^7</c>
          <c>128</c>
          <c>9</c>
          <c>2^8</c>
          <c>256</c>

          <c>10</c>
          <c>2^9</c>
          <c>512</c>
          <c>11</c>
          <c>2^10</c>
          <c>1024</c>

          <c>12</c>
          <c>2^11</c>
          <c>2048</c>
          <c>13</c>
          <c>2^12</c>
          <c>4096</c>

          <c>14</c>
          <c>2^13</c>
          <c>8192</c>
          <c>15</c>
          <c>2^14</c>
          <c>16384</c>

          <c>16</c>
          <c>2^15</c>
          <c>32768</c>
        </texttable>
        <t>The value of a rotation validity set is the summation of the power of 2 numbers.  The minimum summation is 1.  The largest possible summation is 65,535 where all 16 rotations are valid.</t>
        <t>Each base has a defined validity set for rotations.  The "Rotations" column in the "Bases" section.
        </t>
       
        <t>Interestingly enough, there are only 12 possible validity sets in the ISWA 2010.  
        </t>

        <texttable align='left' style='all' anchor='binaryvalue_sets'>
            <ttcol align='right'>Sum</ttcol>
            <ttcol>Binary</ttcol>
            <ttcol>Set</ttcol>
            <c>1</c>
            <c>100000</c>
            <c>{1}</c>

            <c>2</c>
            <c>010000</c>
            <c>{2}</c>
            <c>3</c>
            <c>110000</c>
            <c>{1, 2}</c>

            <c>7</c>
            <c>111000</c>
            <c>{1, 2, 3}</c>
            <c>15</c>
            <c>111100</c>
            <c>{1, 2, 3, 4}</c>

            <c>31</c>
            <c>111110</c>
            <c>{1, 2, 3, 4, 5}</c>

            <c>63</c>
            <c>111111</c>
            <c>{1, 2, 3, 4, 5, 6}</c>

            <c>187</c>
            <c>11011101</c>
            <c>{1, 2, 4, 5, 6, 8}</c>

            <c>255</c>
            <c>11111111</c>
            <c>{1, 2, 3, 4, 5, 6, 7, 8}</c>

            <c>511</c>
            <c>1111111110000000</c>
            <c>{1, 2, 3, 4, 5, 6, 7, 8, 9}</c>
            <c>48059</c>
            <c>1101110111011101</c>
            <c>{1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16}</c>

            <c>65535</c>
            <c>1111111111111111</c>
            <c>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}</c>
        </texttable>
      </section>
    </section>

    <section title="SignPuddle Standard" anchor="signpuddle_standard">
      <t>The SignPuddle Standard for SignWriting text is nearing a stable and fully functional version 1.</t>
      <section title="Licenses">
        <section title="Open Font License">
          <t>Our font software is available under SIL's Open Font License.</t>
        </section>
        <section title="Creative Commons">
          <t>Our reference material is licensed under Creative Commons attribution, share alike (by-sa).</t>
        </section>
        <section title="GPL">
          <t>The current open source projects are licensed under the GPL 2 for MediaWiki and GPL 3 for the general software on Github.  
          Any contributions to the open source code must agree to a possible relicense in the future under a BSD like license.</t>
        </section>
        <section title="BSD">
          <t>After the <eref target="http://signpuddle.net/wiki/index.php/The_Wall">financial issues</eref> of the Center for Sutton Movement Writing have been addressed, 
          the open source projects will relicensed under a more open and free BSD-like license, such as the MIT License.</t>
        </section>
      </section>

      <section title="Infrastructure">
        <section title="International SignWriting Alphabet Fonts">
          <t>The <eref target="http://signpuddle.net/iswa">International SignWriting Alphabet 2010 (ISWA 2010) Font Reference</eref> is a product of the collaboration between SignWriting inventor, Valerie Sutton, and SignWriting encoder Stephen E Slevinski Jr.  Special thanks to Adam Frost's excellent work on the SVG refinement and more.</t>
          <t>The ISWA 2010 fonts have been stable since their initial release on October 20th, 2010.</t>
          <t>Valerie Sutton
          <list style="symbols">
            <t>hand crafted and organized 30K plus individual glyphs</t>
            <t>created a 2 dimension PNG of 3 colors for each</t>
            <t>named each individual glyph with 6 degrees of significance</t>
            <t>font name: ISWA 2010 Sutton</t>
          </list></t>
          <t>Steve Slevinski
          <list style="symbols">
           <t>counted and numbered the glyphs</t>
           <t>created mathematical names</t>
           <t>analyzed PNGs for line and fill</t>
           <t>refactored glyphs - font name: ISWA 2010 PNG Standard</t>
           <t>extended glyphs - font names: ISWA 2010 PNG Inverse, Shadow, Colorized</t>
           <t>traced glyphs - font names: ISWA 2010 SVG Line Trace, Shaddow Trace, Smooth, and Angular</t>
           <t>refactored and extended Adam's SVG work - font name: ISWA 2010 SVG Refinement</t>
          </list></t>
          <t>Adam Frost
          <list style="symbols">
            <t>manually traced each and every glyph that could not be automatically rotated</t>
            <t>font name: ISWA 2010 SVG Refinement</t>
            <t>physically performed and photographed every hand shape</t>
            <t>font name: ISWA 2010 Hand Photo</t>
            <t>consulted with Valerie in places of ambiguity</t>
            <t>found the Facial Irregularity, documented in the ISWA 2010 Errata</t>
          </list></t>
        </section>
        <section title="SignWriting Icon Server">
          <t>The SignWriting Icon Server create SVG and PNG images and queries data collections using an open API. 
          The image creation is stable and fully implemented.  
          The API is currently under construction with only an initial level of support.
          </t>
          <t>The main server is available on <eref target="http://swis.wmflabs.org">Wikimedia Labs</eref> for all SignWriting projects.
          </t>
          <t>A backup server is available on <eref target="http://signbank.org/swis">SignBank</eref>.
          </t>
          <t> Additional SignWriting Icon Servers can be created directly from the GitHub source.
          </t>

        </section>
        <section title="SignWriting Thin Viewer">
          <t>The SignWriting Thin Viewer uses JavaScript to wrap the sign names with basic HTML and CSS to fully supports the grammar of written ASL.
          This script can be applied to any modern browser through a site script or initiated within a browser using a bookmark.
          </t>
          <section title="CSS Text Layout">
            <t>The SignWriting Thin Viewer use CSS to make SignWriting text behave more like logographic text.  
            It uses simple math for layout.  
            It has center data points for selecting text to copy and for searching text on a page. 
            It uses images for individual signs and punctuation. It makes SignWritng text act more like text.
            </t>
            <t>The current working prototype uses 12 CSS rules: 4 that cover every cluster, 4 that cover the data string, and 4 custom layout values for each cluster.
            </t>
            <t>Common
              <list style="symbols">
                <t>position: relative;</t>
                <t>background-repeat: no-repeat;</t>
                <t>background-origin: content-box;</t>
                <t>padding: 10px;</t>
              </list></t>

            <t>Data Span
              <list style="symbols">
                <t>display: table-cell;</t>
                <t>vertical-align: middle;</t>
                <t>font-size:0%;</t>
                <t>height: inherit;</t>
              </list></t>

            <t>Individual
              <list style="symbols">
                <t>width: ?px</t>
                <t>height: ?px</t>
                <t>left: ?px</t>
                <t>background-image: url(ht..</t>
              </list></t>

            <t>The width, height, and left values are easy to calculate using the character string.  No need to access a database or wait for the image server.
            </t>
            <t>The background-image must link to a SignWriting Icon Server. CSS rules will directly effect the '''url''' affecting the style of the rich text. Specify the looks of Headings 1 thru 6, bold, italic, or to indicate URL links.
            </t>
          </section>

        </section>
      </section>
      <section title="Compatibility">
        <t>SignPuddle Online, ASL Wikipedia Project, SignTyp, SignWriter Studio, the DELEGS Editor, and more.</t>
        <section title="SignPuddle Online">
          <t><eref target="http://signpuddle.org">SignPuddle Online</eref> is the current home of the international community of online writers of the SignWriting Script.  
          Online tools make it possible to create SignWriting dictionaries and documents directly on the web.
          Each collection is freely available as <eref target="http://signbank.org/signpuddle2.0/data/spml">a small XML file</eref>.
          Dozens of sign languages from around the world are represented.  Each language can have several collections of SignWriting. 
          </t>
        </section>
        <section title="Wikimedia Labs" anchor="wmflabs">
          <t>SignWriting has an <eref target="https://labsconsole.wikimedia.org/wiki/Nova_Resource:Signwriting">open project on Wikimedia Labs</eref>.  The <eref target="http://ase.wikipedia.wmflabs.org">ASL Wikipedia Project</eref> is in full swing.  The <eref target="http://bzs.wikipedia.wmflabs.org">Libras Wikipedia Project</eref> may start soon.</t>
          <t>In general, Wikimedia Labs creates virtual computers running Linux.  They use a special tool called Puppet to configure the virtual servers.  Wikimedia Labs allows you to create, manage, and analyze the virtual servers through a MediaWiki based application.  Wikimedia Labs is deeply integrated but not always configured properly or documented. 
          </t>
          <t>Wikimedia Labs has created a project for SignWriting.  I am a super user on Wikimedia Labs.  I administer the SignWriting project.  I can create virtual servers at will, each is called an instance.  I have 2 instances running.  The first is "ase10", the 10th server I created before I had everything properly configured and installed.  I created "ase11" when I was trying to fix the catastrophic crash of the ASL Wikipedia. "ase11" is a basic server without MediaWiki or the SWMP.
          </t>
          <t>For the public to view anything on Wikimedia Labs, you must use an IP from a limited pool.  Each project has a limit of 0 IPs when it is first created.  This number can be increased according to need.
          </t>
          <t>I have 2 public IPs for SignWriting.  The first is used by the ASL Wikipedia Project and points to "ase10".  The second is currently used for the <eref target="http://swis.wmflabs.org">SignWriting Icon Server</eref> installation for Wikimedia projects.
          </t>
          <t>There is no BZS virtual server running on Wikimedia Labs.  This needs to be created by a skilled and experienced Linux administrator through the Wikimedia Labs environment.  BZS is pointing to the SignWriting Icon Server on "ase11".
          </t>
          <t>You do not need a public IP to start development on Wikimedia Labs, only to be viewed by the public.
          </t>
        </section>
        <section title="SignTyp" anchor="signtyp">
          <t> This standard is being integrated with the SignTyp linguistic coding system developed by Rachel Channon through an NSF grant.
          <list>
            <t><eref target="http://homepage.uconn.edu/~hdv02001/Articles-pdfs/131%20-%20Notation%20Systems.pdf">Notation Systems</eref> by Harry van der Hulst and Rachel Channon.
            </t>
            <t><eref target="http://www.purdue.edu/tislr10/pdfs/van%20der%20Hulst%20Channon.pdf">Why dynamic features?</eref> by Harry van der Hulst and Rachel Channon.
            </t>
            <t><eref target="http://www.signwriting.org/archive/docs7/sw0623_TISLR_2010_SignWriting_SignTyp_Poster.pdf">Transcription systems as input to coding systems: SignWriting &amp; SignTyp</eref> by Charles Butler and Rachel Channon.
            </t>
          </list>
          </t>
        </section>
        <section title="SignWriter Studio" anchor="signwriter_studio">
          <t><eref target="http://signwriterstudio.com">SignWriter Studio</eref> is a Windows-only compatible application by Jonathan Duncan.  It has an alternate symbol selection technique.  According to Valerie Sutton, it illustrates a unique insight into the hand shapes of the ISWA.
          </t>
          <t>Jonathan Duncan writes:
          </t>
          <t><list>
          <t>SignWriter Studio has 4 ways to get the basic symbol base, and 3 ways to modify the selected base. 
            </t>
            
            <t>1) Select the base symbol from a complete list of base symbols organized in a tree view
            2) Search for a hand symbol in hand search section by hand feature.
            3) Select a symbol already present in the signbox.
            4) Select a symbol from a Favorites section.
            </t>
            <t>Then one of three chooser to define the fill and rotation will become available.
            1)The hand chooser.
            2)The arrow chooser.
            3)The general chooser.
            </t>
            <t>The Hand chooser is to quickly find the symbol for a certain, hand, plain(wall or floor), palm facing and rotation.  The Hand Chooser also extends add a fourth palm facing to logically show all possible symbols in their most common uses.  This chooser resembles the instruction manual explaining the use of hand shapes.
            </t>
            <t>The Arrow Chooser is to quickly find arrows for a certain hand, plain(wall or floor) and rotation.This chooser resembles the instruction manual explaining the use of arrows.
            </t>
            <t>The General Chooser is for symbols for which the two previous chooser do not work well and gives a grouped list of symbols for the base group.
            </t>
          </list></t>

        </section>
        <section title="DELEGS Online" anchor="delegs">
          <t>The <eref target="http://www.delegs.com/DelegsPage">DELEGS Editor</eref> from the University of Hamburg and C1 WPS GmbH in Germany is designed for Deaf Education. 
          It is a tool for writing translation texts between spoken and signed languages.
          </t>
          <t>Spoken language text is used to display horizontal SignWriting Text from left to right.
          The spoken language can appear beneath the sign or it can be hidden.
          </t>
        </section>
      </section>
    </section>

    <section title="Unicode Integration" anchor="unicode">
      <t>SignWriting Text is integrated with Unicode in the Private Use Area.  
      </t>
      <section title="Private Use Area Font Characters">
        <t>The Unicode PUA is a simple shift of the x-Binary-SignWriting coded character set.  
        Each code is increased by decimal value 1,038,080 which is FD700 in hex.  
        An experimental TrueType Font converts the Unicode PUA to create the visual images.  
        </t>
      </section>
      <section title="Proposal" anchor="proposal">
        <t>A shift of the 12 bit characters of x-Binary-SignWriting by 1D700 will use the range U+1D800 to U+1DFFF, using eight 8-bit rows of Unicode Plane 1 known as the the SMP: Supplementary Multilingual Plane.  
        These rows occur inside an unassigned section of the Notational systems.
        </t>
        <t>These are the characters being used by the community.  The gap between the ISWA 2010 symbols and the number sections illustrates two truths.  
        First, the entire Sutton MovementWriting family will be encoded.  Second, it doesn't really matter where the numbers are placed, perhaps plane 14.
        </t>
        <t> The number characters encode the ruler principle with characters.  The ruler principle is built in automatically for scripts written sequentially in one dimension.  
        The number characters are needed for 2-dimensional logograms, where the spatial relationship between symbols is explicitly stated with X,Y Cartesian coordinates.  
        Number characters may be a useful concept for other scripts and notations to support 2-dimensional script processing.
        </t>
        <t>The entire set of characters is used for a plain text model of a 2-dimension logographic script with freeform placement of symbols.</t>
        <t>Future additions to the ISWA 2010 will include essential hand shapes and new mouth shapes.  New characters will extend the SignWriting Text model with minimal complications.  
        </t>
        <t>Future proposals will include the rest of the Sutton MovementWriting System.</t>
      </section>
    </section>

    <section title="IANA Considerations">
      <t>This section provides guidance to the Internet Assigned Numbers
      Authority (IANA) regarding registration of values related to the code spaces
      of the Center for Sutton Movement Writing, in accordance with [RFC2978].
      
       
      protocol, in accordance with BCP 26, [RFC2434].
      </t>
      <t>See IANA: http://www.rfc-editor.org/rfc/rfc2978.txt
      </t>
      <t>Conforms with RFC 2040.
      </t>
      <t>There are three name spaces for the Center for Sutton Movement Writing that require definition and extension:
      x-ISWA-2010, x-Binary-SignWriting, and x-Character-SignWriting
      </t>
      <t>SignWriting Text is an international standard with several coded character sets.  These sets may require additional hand and mouth shapes. 
      </t>
      <t>   The following terms are used here with the meanings defined in BCP
   26: "name space", "assigned value", "registration".

      </t>
      <t>   The following policies are used here with the meanings defined in BCP
   26: "Private Use", "First Come First Served", "Expert Review",
   "Specification Required", "IETF Consensus", "Standards Action".

      </t>
   </section>

    <section title="Security Considerations">
      <t>None.</t>
    </section>

  </middle>

  <back>

    <section title="Modern SignWriting" anchor="msw">
      <t>This Internet Draft is in complete agreement with the theory and example workbook released on January 12th, 2012 called <eref target="http:// http://signpuddle.net/wiki/index.php/MSW">Modern SignWriting</eref>.
      </t>
      <t>Modern SignWriting has example text and concretely defines the processes available.
      It fully documented the symbol encoding.
      The query language is by far the most important aspect of this design.
      Modern SignWriting section 9 clearly illustrates <eref target="http://signpuddle.net/wiki/index.php/MSW:Regular_Storage_Form#9.B._Query_String">the searching available and the associated regular expression technology</eref>.
      I discussed the model on the Regular Expressions Experts list of Linked In the <eref target="http://www.linkedin.com/groups/Searching-3-digit-number-simple-1066587.S.85595980?qid=9cb1768b-5413-4f7f-92b5-fbef2c243df8">end of 2011</eref>.
      </t>
      <t>Modern SignWriting is now part of the <eref target="http://signpuddle.net/wiki/index.php/SignWriting_Text_Reference">SignWriting Text Reference</eref> and available in wiki form and PDF.
      </t>
      <t>Entire sections of the Modern SignWriting document will be included in this I-D as progresses is made.
      </t>
    </section>

    <section title="Cartesian SignWriting" anchor='cartesian_signwriting'>
      <t>Cartesian SignWriting is the name of a script encoding model for SignWriting Block Printing.  
      The mathematical model is defined by the <eref target="http://signpuddle.net/wiki/index.php/MSW:Mathematical_Model">SignWriting Text Language</eref>.  
      This language uses formal words to name terms, signs, and punctuation.
      </t>
      <t>Formal structures of logographic sign are mixed with punctuation to form text. Each logographic sign is a 2-dimensional arrangement of symbols defined with cartesian coordinates.
      </t>
     <t>Cartesian SignWriting is a heuristic model.  The first prototypes were created in 2008. 
     Through trial and error, the model was successively refactored to reduce the complexity and the computation cost of the implementations.  
     The model has been optimized for common usage and processing.
      </t>
      <section title="Signbox">
        <t>Cartesian SignWriting uses coordinate based symbol placement.
        </t>
        <t>Each logographic sign exists on its own 2-dimensional canvas.  Each point on the canvas is identified with an X and a Y coordinate.  
        Each canvas has a defined center.  Formal numbers range from -250 to 249.  Informal number have no limit.  
        </t>
          <figure>
            <artwork>
           Y Axis
             | -
             | 
             |
             |
             |
             |
X Axis       |
  -----------+------------
  -          |           +
             |
             |
             |
             |
             |
             | +
            </artwork>
          </figure>
          <t> Symbols are placed on the canvas with coordinates that represent the top-left of the symbol image.
          </t>
      </section>
        
      <section title="Temporal Order">
        <t>A term is a specialized sign that uses a sequential prefix before the 2-dimensional signbox. 
        </t>
          <t>A sequence is a list of writing symbols and/or detailed location symbols.  A valid sequence must contain at least one symbol and can not contain punctuation.  A sequence is an optional sign prefix used to define a temporal order.
          </t>
          <t>The temporal order of a sign is distinct from the visual cluster.  Neither structure can be dirived from the other automatically.  It requires human intelligence to correctly create the sequence from the signbox contents.
          </t>
          <t>There are several theories on the best way to structure a sequence.  The most productive is based on the SignSpelling Sequence theory of Valerie Sutton.  A sequence is structured as a series of starting handshapes followed by optional movements, transitional handshapes, movement, and end handshapes.  Only symbols from category 1 (hands) and category 2 (movement) should be used in this first section.  The last section of the sequence should contain symbols of dynamics &amp; timing, head &amp; face, or body: categories 3, 4, and 5.
          </t>
          <t>Detailed location symbols from category 6 can be used in a sequence, but are rarely (if ever) needed for a sequence in general writing.
          </t>
      </section>
      <section title="Logograph of Logographs">
        <t>Cartesian SignWriting text uses a series of canvases, each with a unique coordinate space.  
        A higher level coordinate space can be created to represent an entire panel of SignWriting Text.  Either a column of vertical writing or a row of horizontal.
        The higher level coordinate space has an origin of (0,0).  For columns, the panels share a common height.  For rows, the panels share a common width.
        </t>
          <figure>
            <artwork>
             X Axis
    (0,0)     width
      +-------------------
      |           
 Y  h |           
    e |           
 A  i |           
 x  g |           
 i  h |           
 s  t |
      |
      |
            </artwork>
          </figure>
        <t>The mathematics of the panel is defined in Modern SignWriting, section 10.D <eref target="http://signpuddle.net/wiki/index.php/MSW:Variant_Display_Form#10.D._Panel">Variant Display Form: Panel</eref>.
        The SignWriting Icon Server contains the functions required to convert a section of SignWriting Text into a series of panels.  This can be useful for presentation.
        </t>
        <t>The development of the rich text model defines a higher level logograph with manipulation of the DOM using CSS rules.
        </t>
      </section>

    </section>

    <section title="Theory of SignWriting Grammar and Encoding" anchor='grammar'>
      <t>Sign language is vastly different than spoken language. Instead of the sequential sounds of the voice, there is a 3 dimensional space with simultaneous action. 
      The SignWriting Script creates 2-dimensional writing that is visually icon and full of featural information. 
      This is true on the symbol level and on the sign level. 
      A symbol represents phonemic information and is full of featural information to better understand the phonemes of the symbols. 
      A sign is a 2-dimensional arrangement of symbols and is full of featural information to better understand the morphemes of the signs. 
      </t>
      <t>The 2 families of the SignWriting Script are Handwriting and Block Printing.  The Handwriting family integrates with diacritic marks.  The Block Printing family uses 2-dimensional placement with overlap and overlay.
      </t>
      <t>Both of these families identify features in the writing they produce. Block Printing uses more features and Handwriting often uses less.
      </t>
         
      <t>The Block Printing family is aimed at the needs of the reader and the publisher.  
      The Block Printing family is ready to standardize with a fully developed model.
      </t>
      <t>The Handwriting family is concerned with the needs of the writer. 
      The purpose is not to recreate the iconic symbols of the International SignWriting alphabet exactly by hand, but the purpose is to enable the writer to quickly write notes on paper or chalkboard.
      Handwriting often drops features of the SignWriting Script for efficiency and speed. 
      If too many features are dropped, the writing may loose it's clarity over time as the writer is distanced from the writing.  This is common for Shorthand.
      </t>
      <section title="Logographic Sign">
        <t>A sign is a variably-size logographic word.  It is a 2-dimensional combination of symbols inside of a signbox with a tight bounding box and an explicit center.  
        </t>
      </section>
      <section title="Punctuation and Text">
        <t>Punctuation separates signs into structured sentences.  A punctuation symbol is always used alone and should not be used in a sign.  Line breaks should not occur before punctuation.
        </t>
      </section>
      <section title="Terms">
        <t>A term is a logographic sign with an optional prefix.  
        The prefix is a sequential list of symbols that identify temporal order and additional analysis.  
        Terms are special signs that are above the <eref target="http://signpuddle.net/wiki/index.php/MSW:Mathematical_Model#4.D._Variability">standard noise of SignWriting Text</eref>.  The <eref target="http://signpuddle.net/wiki/index.php/MSW:Regular_Storage_Form#9.B._Query_String">query language of Formal SignWriting</eref> support searching for general signs with the letter "Q" and searching for terms with the letters "QT". 
        </t>
      </section>
      <section title="Lanes">
        <t>When written vertically, SignWriting can use 3 different lanes: left, middle, and right. The middle lane is the default lane and punctuation is always used in the middle lane. No matter the lane, the center of a sign is aligned with the center of the lane.
        </t>
        <t>For body weight shifts to one side or the other, the center of the cluster is aligned with a fixed horizontal offset from the middle lane into either the left or right lane.
        </t>
        <t>The left and right lanes are used to represent body weight shifts and are represented by a horizontal offset from the middle lane. Body weight shifts are important to the grammar of sign languages, used for two different grammatical aspects: 1) role shifting during sign language storytelling, and 2) spatial comparisons of two items under discussion. One "role" or "item" is placed on the right side of the body (right lane), and the other on the left side of the body (left lane), and the weight shifts back and forth between the two, with the narrator in the middle (middle lane). 
        </t>
      </section>
      <section title="Modes">
        <t>The most common writing mode is vertical.</t>
          <figure anchor="fig_vertical_writing_mode">
            <preamble>Vertical Writing Mode</preamble>
            <artwork>
              &lt;-- width / extent --&gt;
 
                     top side/
                    start side
              +--------------------+                  A
              |  ----> Block flow  |                  |
              |                    |                  |                   
              |  | i b    T F      |                  |
  left side/  |  | n a    e l      |  right side/  height/
  head side   |  | l s    x o      |  foot side    measure
              |  V i e    t w      |                  |
              |    n               |                  |
              |    e               |                  |
              |                    |                  |
              +--------------------+                  V
                    bottom side/
                      end side
            </artwork>
          </figure>
        <t><list>
          <t>downward inline base</t>
          <t>rightward block flow</t>
          <t>vertical translate by word</t>
          <t>variable dimensions of words</t>
          <t>center of word aligns with the central baseline</t>
          <t>variable over and under values from central baseline</t>
        </list></t>

        <t>The horizontal writing mode can loose or obfuscate important grammatical information, but is still useful, especially for translations with a spoken language.</t>
          <figure anchor="fig_horizontal_writing_mode">
            <preamble>Horizontal Writing Mode</preamble>
            <artwork>
   ----> inline base
   
   | B f      Text
   | l l      Flow
   | o o
   v c w
     k
            </artwork>
          </figure>

      </section>
      <section title="Layout">
       <t>The SignPuddle Standard for SignWriting Text uses a freeform layout with cartesian coordinates for absolute positioning.  Additional layout options are included and explored.
       </t>
       <t>The main issue of layout is how the writer will use the system.  The balance between complexity and usability from the writer's perspective is of primary importance.
       </t>
       <t>The second issue of layout involve comparison.  Signs can quickly be scanned for the symbols used; however, the relative position of the symbols require an analysis of the layout.  The different layouts offer different approaches for evaluation.
       </t>
       <t>The third issues of layout involves variability.  There are two types of variability.  The first, inter-personal variability, occurs when writers pick different symbols and different details.  Inter-personal variability is part of the writing system that layout can not resolve.  The second, intra-personal variability, occurs when writers use the same symbols, but in slightly different positions.   With layout choices, it is possible to reduce the intra-personal variability, but this reduction may harm the writing system by imposing too many restrictions on the writer.
       </t>
       <t>A fourth issues of layout involves elegance and beauty.  Some may consider one type of layout to be superior to another based on subjective personal opinions.  SignWriting is a unique script.  The ultimate choice of layout should be based on the writer's experience, comparison, and variability.
       </t>
       <section title="Freeform">
         <t>With freeform layout, the writer decides what symbols to use and the exact symbol position.  The freeform layout offers the greatest flexibility for the writer and the greatest intra-personal variability.
         </t>
         <t>Cartesian coordinates specify X and Y coordinates for the top, left of the symbol glyph.  The coordinates of the symbols relate to the center of the canvas.  
         The Cartesian Coordinate system is a more practical choices for computer processing because the equations of layout and comparison are eaiser. 
         This is the current method for writing.  The writer is presented with a canvas and positions each symbol independently. 
         </t>
         <t>Polar coordinates specify an angle and a distance from the center of the sign to the center of each symbol.  
         Polar coordinates require the pythagorean therum and the slope equation for standard processing.
         </t>
       </section>
       <section title="Restricted">
         <t>It is possible to impose restrictions on symbol placement thereby limiting the intra-personal variability of sign spellings.
         </t>
         <t>For generic restrictions, instead of allowing any coordinates, it may be possible to limit the options.  For example, with polar coordinates, only allow specific angles and specific distances.  This has not been evaluated.
         </t>
         <t>For specific restrictions it may be possible to perform a statistical analysis of the symbols used to come up with a limited number of attachment points around each symbol and a small list of predefined distances between symbols.  This information would be symbol specific and could greatly reduce the intra-personal variability if successfully implemented.
         </t>
        </section>
        <section title="Non-form">
          <t>Some would argue that the writer should not determine the form of a sign, but should input linguistic analysis and let the layout/font manager determine the best representation for the written sign.  This would change the script from a writing system into computer aided design, requiring concepts that are not part of the script and are not part of the writer's thought processes.  The idea would make for an interesting project, but it is not about encoding SignWriting.
          </t>
        </section>
      </section>
      <section title="Positioning">
        <t>Any of the above layout options have two choices for positioning: absolute or relative.  
        </t>
        <section title="Absolute">
          <t>The absolute position of each symbol relates to the center of the sign.  The freeform layout section above is defined using absolute positioning.  
          </t>
        </section>
        <section title="Relative">
          <t>A relative position relates the symbol position according to other symbols.  
          This could be defined with a tree structure or a more complicated linked list. 
          One or more root symbols could initialize the sign and other symbols would build from the roots.
          The restricted layout of polar coordinates is defined above using relative positioning.  
          </t>
          <t>The viability and usability of relative positioning is unknown and has not been investigated.
          </t>
        </section>
          
      </section>
    </section>
  </back>
</rfc>
