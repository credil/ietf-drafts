<?xml version="1.0" encoding="UTF-8"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629xslt/rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->

 <!-- Normative References -->
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC5234 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC3261 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3261.xml">
<!ENTITY I-D.ietf-hybi-thewebsocketprotocol SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-hybi-thewebsocketprotocol-14.xml">
<!-- Informative References -->
<!ENTITY RFC2616 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC3327 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3327.xml">
<!ENTITY RFC5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC3986 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC3581 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3581.xml">
<!ENTITY RFC4168 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4168.xml">
<!ENTITY RFC5658 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5658.xml">
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="no" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->

<rfc category="std" docName="draft-ibc-rtcweb-sip-websocket-00" ipr="trust200902">
<!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>

    <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->
    <title abbrev="SIP over WebSocket">WebSocket Transport for Session Initiation Protocol (SIP)</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Inaki Baz Castillo" initials="I.B.C." surname="Baz Castillo">
      <organization>XtraTelecom S.A.</organization>
      <address>
        <postal>
          <street></street>
          <city>Barakaldo</city>
          <region>Basque Country</region>
          <code></code>
          <country>Spain</country>
        </postal>
        <email>ibc@aliax.net</email>
      </address>
    </author>

    <author fullname="Jose Luis Millan" initials="J.L.M." surname="Luis Millan">
      <organization>XtraTelecom S.A.</organization>
      <address>
        <postal>
        <street>
        </street>
        <city>Bilbao</city>
        <region>Basque Country</region>
        <code>
        </code>
        <country>Spain</country>
        </postal>
        <email>jmillan@aliax.net</email>
      </address>
    </author>

    <author fullname="Victor Pascual" initials="V.P." surname="Pascual">
      <organization>Acme Packet</organization>
      <address>
        <postal>
          <street>Anabel Segura 10</street>
          <city>Madrid</city>
          <region>Madrid</region>
          <code>28108</code>
          <country>Spain</country>
        </postal>
        <email>vpascual@acmepacket.com</email>
      </address>
    </author>


    <date month="September" year="2011" />
    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
         in the current day and month for you. If the year is not the current one, it is
         necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
         purpose of calculating the expiry date).  With drafts it is normally sufficient to
         specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>IETF</area>
    <!--<workgroup></workgroup>-->
    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
         If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>SIP</keyword>
    <keyword>WebSocket</keyword>
    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>This document specifies a WebSocket subprotocol for a new transport in SIP (Session Initiation Protocol). The WebSocket protocol enables two-way realtime communication between clients (typically web-based applications) and servers. The main goal of this specification is to integrate the SIP protocol within web applications.</t>
    </abstract>

  </front>



  <middle>

    <section title="Introduction" anchor="introduction">

      <t>Integrating the SIP protocol <xref target="RFC3261"/> within modern web-based applications has been a hard task historically due to the specification complexity and inherent limitations in web browsers and HTTP protocol <xref target="RFC2616"/>. The arrival of WebSocket <xref target="I-D.ietf-hybi-thewebsocketprotocol"/> and <xref target="RTC-Web"/> (Real Time Collaboration on the World Wide Web) provides a two-way communication technology for web-based applications along with multimedia capabilities for audio and video sessions in web browsers, making feasible the requeriments of the SIP protocol.</t>

      <t>This specification defines a new WebSocket subprotocol for transporting SIP messages between a WebSocket client and server, a new transport for the SIP protocol and procedures for SIP proxies when behaving as a bridge between WebSocket and other SIP transports. No changes have been made to the SIP protocol <xref target="RFC3261"/>.</t>

     </section>

    <section title="Conventions" anchor="conventions">

      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

    </section>


    <section title="Scope" anchor="scope">

      <t>The WebSocket protocol is mostly suitable for web-based applications running in a web browser. Other applications running out of web browsers do not have the constraints of web applications since typically they can directly access to the transport layer.</t>

      <t>In the same manner, the WebSocket protocol adds a network overhead since it works as an intermediary layer between the transport and application layers. There is no benefit on using SIP over WebSocket transport between two SIP nodes when none of them runs within a web browser. Even more, the WebSocket protocol is not symmetric since just a WebSocket client can open a connection to a WebSocket server (a WebSocket client does not listen for incoming connections).</t>

      <t>Given these arguments, this specification is mostly focused on integrating the SIP protocol within web-based applications or any client application using the WebSocket protocol. Other aspects such as DNS NAPTR/SRV resolution for SIP over WebSocket transport are not covered by this specification since they are mainly useless given the WebSocket protocol nature.</t>

      <t>This document just covers SIP as a signalling protocol, leaving multimedia capabilities integration for a separate document once <xref target="RTC-Web"/> (Real Time Collaboration on the World Wide Web) becomes a standard.</t>
    </section>


    <section title="SIP WebSocket Transport" anchor="sip_websocket_transport">

      <t>WebSocket <xref target="I-D.ietf-hybi-thewebsocketprotocol"/> is a reliable protocol and therefore the WebSocket subprotocol for a SIP transport defined by this document is also a reliable transport. Thus, client and server transactions using WebSocket transport MUST follow the procedures and timer values for a reliable transport as defined in <xref target="RFC3261"/>.</t>

      <section title="Via Transport Parameter" anchor="via_transport_parameter">

        <t>Via header fields carry the transport protocol identifier. This document defines the value "WS" to be used for requests over plain WebSocket protocol and "WSS" for requests over secure WebSocket protocol (in which the WebSocket session is established on top of TLS <xref target="RFC5246"/> over TCP transport).</t>

        <t>The updated augmented BNF (Backus-Naur Form) <xref target="RFC5234"/> for this parameter is the following (the original BNF for this parameter can be found in <xref target="RFC3261"/>):<figure><artwork><![CDATA[
  transport         =  "UDP" / "TCP" / "TLS" / "WS" / "WSS"
                       / other-transport
]]></artwork></figure>
        </t>

        <t>The following are examples of Via header fields using "WS" and "WSS":<figure><artwork><![CDATA[
  Via: SIP/2.0/WS 1.2.3.4:28456
  Via: SIP/2.0/WSS [2001:0:63ba:74c:1806:7ea2:9aab:f892]:32802
]]></artwork></figure>
        </t>

      </section>

      <section title="SIP URI Transport Parameter" anchor="sip_uri_transport_parameter">
   
        <t>This document defines the value "ws" as the transport parameter value for a SIP URI <xref target="RFC3986"/> to be contacted using WebSocket protocol. Whether to select a plain or secure WebSocket connection depends on the SIP URI schema ("sip" schema means plain WebSocket connection while "sips" schema requires secure WebSocket connection).</t>
   
        <t>The updated augmented BNF (Backus-Naur Form) <xref target="RFC5234"/> for this parameter is the following (the original BNF for this parameter can be found in <xref target="RFC3261"/>):<figure><artwork><![CDATA[
  transport-param   =  "transport="
                       ( "udp" / "tcp" / "sctp" / "tls" / "ws"
                       / other-transport )
]]></artwork></figure>
        </t>
     
        <t>The following are examples of SIP URI's containing a "ws" transport parameter:<figure><artwork><![CDATA[
  sip:alice@1.2.3.4:28456;transport=ws
  sips:bob@[2001:0:63ba:74c:1806:7ea2:9aab:f892]:32802;transport=ws
]]></artwork></figure>
        </t>
       
     </section>

     <section title="Sending Responses" anchor="sending_responses">

        <t>The SIP server transport uses the value of the top Via header field in order to determine where to send a response. If the "sent-protocol" is "WS" or "WSS" the response MUST be sent using the existing WebSocket connection to the source of the original request, if that connection is still open. This requires the server transport to maintain an association between server transactions and transport connections. If that connection is no longer open, the server MUST NOT attempt to open a WebSocket connection to the Via "sent-by"/"received"/"rport".
          <list style="empty">
            <t>This is due the nature of the WebSocket protocol in which just the WebSocket client can establish a connection with the WebSocket server. A WebSocket client does not listen for incoming connections.</t>
          </list>
        </t>

      </section>
     
    </section>
    

    <section title="The WebSocket SIP Subprotocol" anchor="the_websocket_sip_subprotocol">
      <t>The term WebSocket subprotocol refers to the application-level protocol layered over a WebSocket connection. This document specifies the WebSocket SIP subprotocol for carrying SIP requests and responses through a WebSocket connection.</t>
      
      <t>WebSocket <xref target="I-D.ietf-hybi-thewebsocketprotocol"/> defines message units as application data exchange for communication endpoints, becoming a message boundary protocol. These messages can contain UTF-8 text or binary data. The WebSocket SIP subprotocol specified in this document mandates messages of type UTF-8 text.</t>

      <t>The WebSocket client and WebSocket server send SIP messages to each other. Each SIP message MUST be carried within a single WebSocket message and MUST be a complete SIP message, so a Content-Length header field is not mandatory. Sending more than one SIP message within a single WebSocket message is not allowed, neither sending an incomplete SIP message.
        <list style="empty">
          <t>This makes parsing of SIP messages easier on client side (typically web-based applications with an strict and simple API for receiving WebSocket messages). There is no need to establish boundaries (typically using Content-Length headers) between different messages. Same advantage is present in other message-based SIP transports as UDP or <xref target="RFC4168">SCTP</xref>.</t>
        </list>
      </t>

    </section>


    <section title="WebSocket Client Usage" anchor="websocket_client_usage">

      <t>As stated in <xref target="I-D.ietf-hybi-thewebsocketprotocol"/>, a WebSocket URI <xref target="RFC3986"/> is given to the WebSocket client (typically within a web-based application) who resolves the URI destination and establishes a WebSocket connection with the corresponding server (by performing the handshake and negotiation procedures described in <xref target="I-D.ietf-hybi-thewebsocketprotocol"/>).</t>

      <t>The client application is supposed to be provided with SIP account configuration values (as an AoR, outbound proxy and so on). Such values are used by the client application when generating SIP messages.</t>

      <t>After establishing the WebSocket connection, the client SHOULD discover the source IP and port from which the server has received the TCP connection. Such IP and port are required for constructing the client's SIP local URI (to be used in Contact header during SIP registration and SIP dialogs).
        <list style="empty">
          <t>The mechanism used by the client application in order to discover its source IP and port is currently out of the scope of this specification, although it might be defined in future revisions of this document.</t>
        </list>
      </t>

      <t>The client's SIP local URI MUST be constructed as follows:
        <list style="symbols">
          <t>If the WebSocket connection is secure (given WebSocket URI has "wss" schema) the URI MUST have "sips" schema, "sip" otherwise.</t>
          <t>The URI username is up to the application.</t>
          <t>The URI hostport is determined by the local IP and port previously retrieved.</t>
          <t>A "transport" parameter with value "ws" MUST be added to the URI.</t>
        </list>
      </t>

      <t>This SIP local URI MUST be used by the client as a registration binding (Contact URI in a REGISTER) and as a local target for SIP dialogs (Contact URI in a request or response) since this URI is the only adddress in which the client can be contacted, and just through the WebSocket server.</t>

      <t>Any new request sent by the client MUST contain the discovered local IP and port in the Via "sent-by" field. Via "sent-transport" field MUST be set to "WSS" if the WebSocket connection is secure, to "WS" otherwise.</t>

      <t>Due to the nature of the WebSocket protocol, the client sends all the SIP requests to the WebSocket server it is connected to, so the WebSocket server behaves as a de facto outbound SIP proxy.</t>

      <t>In case the client application decides to close the WebSocket connection (for example when performing "logout" in a web application) it is recommended to remove the existing SIP registration binding (if present) by specifying an expiration interval of "0" for that contact address in a REGISTER request as described in section 10.2.2 of <xref target="RFC3261"/>.</t>


      <section title="WebSocket Disconnection" anchor="websocket_disconnection">

        <t>In some circumstances the WebSocket connection could be terminated by the WebSocket server (for example when the server is restarted). If the client application wants to become reachable again it SHOULD reconnect to the WebSocket server and perform the SIP local URI discovery process again followed by a new SIP registration.</t>

        <t>The client MAY also remove the previous registration binding in the registrar server, as such address is no longer reachable.
          <list style="empty">
            <t>When the WebSocket server is also the SIP registrar server, it MAY remove the SIP registration bindings associated to a WebSocket connection after such connection has been closed. Such a decision is out of the scope of this specification and depends on the SIP network topology.</t>
          </list>
        </t>
      </section>

    </section>


    <section title="WebSocket Server Usage" anchor="websocket_server_usage">

      <t>Here we assume that a SIP proxy or UAS (User Agent Server) is also acting as a WebSocket server implementing the WebSocket subprotocol described in this document. The server receives WebSocket connection attempts from clients. How the server authorizes or not those connections is out of the scope of this specification. Once the WebSocket subprotocol defined in this document has been negotiated, both client and server can send SIP messages to each other.</t>

      <t>The server can only contact a SIP URI with the parameter "transport=ws" in case the destination address belongs to an existing WebSocket connection established from a WebSocket client. If not, a local transport error MUST be generated (which involves a 500 or 503 SIP response code).
        <list style="empty">
          <t>Such a case could happen when an existing SIP registration binding points to an already closed WebSocket connection which was not removed.</t>
        </list>
      </t>
      
      <section title="SIP Proxy Considerations" anchor="sip_proxy_considerations">
        <t>A SIP proxy implementing WebSocket transport can intercommunicate clients using SIP over WebSocket with other SIP clients or nodes using any other transport.</t>
        <t>When the proxy bridges between WebSocket transport and any other SIP transport (including WebSocket transport) it MUST perform Loose Routing as specified in <xref target="RFC3261"/>. Otherwise in-dialog requests would fail since WebSocket clients cannot contact destinations other than their WebSocket server, and non-WebSocket SIP nodes cannot establish a connection to WebSocket clients. It is also recommended that the proxy follows recommendations in <xref target="RFC5658"/> and uses double Record-Route technique in these cases.</t>
        <t>In the same way, if the SIP proxy implementing the WebSocket server behaves as an outbound proxy for REGISTER requests, it MUST add a Path header as described in <xref target="RFC3327"/>. Otherwise the WebSocket client would never receive incoming requests from the SIP registrar server after the lookup procedures in the SIP location service.</t>
      </section>

    </section>


    <section title="WebSocket Connection Keep Alive" anchor="websocket_connection_keep_alive">
      
      <t>It is recommended that the WebSocket client or server keeps the WebSocket connection open by sending periodic Ping frames as described in <xref target="I-D.ietf-hybi-thewebsocketprotocol"/> section 5.5.2. The mechanisms of decision for a WebSocket endpoint to maintain, or not, the connection over time is out of scope of this document.</t>

      <t>In some cases due to transient network errors, the connection with the WebSocket server could be lost without the WebSocket client being aware of it. The WebSocket client would only realize of the network failure when attempting to send new data over the WebSocket connection.
        <list style="empty">
          <t>The authors of this specification have requested the W3C (World Wide Web Consortium) to include a mechanism in the <xref target="WS-API"> WebSocket API</xref> for instructing the WebSocket client to supervise the connection by sending periodical Ping frames at the interval requested by the API user.</t>
        </list>
      </t>
      
    </section>

    
    <section title="Examples" anchor="examples">

      <t>The flows depicted in this section describe the behavior of an initial prototype which is currently under development.</t>

      <section title="Registration" anchor="registration">
        <t><figure><artwork><![CDATA[
Alice    (SIP WS)     WebSocket SIP Server
|                             |
|OPTIONS F1                   |
|---------------------------->|
|200 OK F2                    |
|<----------------------------|
|                             |
|REGISTER F3                  |
|---------------------------->|
|200 OK F4                    |
|<----------------------------|
|                             |
]]></artwork></figure>
        </t>

        <t>Alice is a WebSocket client running on a web browser. Alice establishes a plain WebSocket connection with a WebSocket server (also a SIP proxy/registrar) implementing the SIP subprotocol. Upon connection, Alice sends a SIP OPTIONS request including an empty "rport" parameter <xref target="RFC3581"/> in the Via header and obtains its source IP and port from the Via "received" and "rport" parameters in the response. Alice then forms its SIP local URI and constructs a REGISTER request.</t>

        <t>Message details (authentication and SDP bodies are omitted for simplicity):</t>

<t><figure><artwork><![CDATA[
F1 OPTIONS Alice -> WebSocket SIP Server

OPTIONS sip:ws-server.atlanta.com SIP/2.0
Via: SIP/2.0/WS 1.2.3.4;branch=z9hG4bKasudf;rport
From: sip:alice@atlanta.com;tag=ux8asodj
To: sip:ws-server.atlanta.com
Call-ID: 87djahs72kjsd
CSeq: 1 OPTIONS
Max-Forwards: 1
Accept: application/sdp


F2 200 OK WebSocket SIP Server -> Alice

SIP/2.0 200 OK
Via: SIP/2.0/WS 1.2.3.4;branch=z9hG4bKasudf;received=93.12.40.105;
  rport=19465
From: sip:alice@atlanta.com;tag=ux8asodj
To: sip:ws-server.atlanta.com;tag=jcx67hjm
Call-ID: 87djahs72kjsd
CSeq: 1 OPTIONS
Content-Type: application/sdp

 
F3 REGISTER Alice -> WebSocket SIP Server

REGISTER sip:proxy.atlanta.com SIP/2.0
Via: SIP/2.0/WS 93.12.40.105:19465;branch=z9hG4bKasudf
From: sip:alice@atlanta.com;tag=65bnmj.34asd
To: sip:ws-server.atlanta.com
Call-ID: aiuy7k9njasd
CSeq: 1 REGISTER
Max-Forwards: 70
Contact: <sip:alice@93.12.40.105:19465;transport=ws>


F4 200 OK WebSocket SIP Server -> Alice

SIP/2.0 200 OK
Via: SIP/2.0/WS 93.12.40.105:19465;branch=z9hG4bKasudf
From: sip:alice@atlanta.com;tag=65bnmj.34asd
To: sip:ws-server.atlanta.com;tag=12isjljn8
Call-ID: aiuy7k9njasd
CSeq: 1 REGISTER
Contact: <sip:alice@93.12.40.105:19465;transport=ws>
]]></artwork></figure>
        </t>
      </section>

      <section title="INVITE dialog through a proxy" anchor="invite_dialog_through_a_proxy">
        <t><figure><artwork><![CDATA[
Alice      (SIP WSS)      SIP Proxy       (SIP UDP)       Carol
|                             |                             |
|INVITE F1                    |                             |
|---------------------------->|                             |
|100 Trying F2                |                             |
|<----------------------------|                             |
|                             |INVITE F3                    |
|                             |---------------------------->|
|                             |200 OK F4                    |
|                             |<----------------------------|
|200 OK F5                    |                             |
|<----------------------------|                             |
|                             |                             |
|ACK F6                       |                             |
|---------------------------->|                             |
|                             |ACK F7                       |
|                             |---------------------------->|
|                             |                             |
|                    Both Way RTP Media                     |
|<=========================================================>|
|                             |                             |
|                             |BYE F8                       |
|                             |<----------------------------|
|BYE F9                       |                             |
|<----------------------------|                             |
|200 OK F10                   |                             |
|---------------------------->|                             |
|                             |200 OK F11                   |
|                             |---------------------------->|
|                             |                             |
]]></artwork></figure>
        </t>
        
        <t>Here the WebSocket server is also a SIP proxy and registrar for the domain atlanta.com. Alice, a WebSocket SIP client, calls Carol's AoR through a secure WebSocket connection. The WebSocket SIP server acts as a SIP proxy routing the INVITE to the UDP location of Carol. The proxy does Loose-Routing. Carol answers the call and terminates it later.</t>

        <t>Message details (authentication and SDP bodies are omitted for simplicity):</t>
 
        <t><figure><artwork><![CDATA[
F1 INVITE Alice -> SIP Proxy (transport WSS)

INVITE sip:carol@atlanta.com SIP/2.0
Via: SIP/2.0/WSS 93.12.40.105:20565;branch=z9hG4bK56sdasks
From: sip:alice@atlanta.com;tag=asdyka899
To: sip:carol@atlanta.com
Call-ID: asidkj3ss
CSeq: 1 INVITE
Max-Forwards: 70
Contact: <sips:alice@93.12.40.105:20565;transport=ws>
Content-Type: application/sdp


F2 100 Trying SIP Proxy -> Alice (transport WSS)

SIP/2.0 100 Trying
Via: SIP/2.0/WSS 93.12.40.105:20565;branch=z9hG4bK56sdasks
From: sip:alice@atlanta.com;tag=asdyka899
To: sip:carol@atlanta.com
Call-ID: asidkj3ss
CSeq: 1 INVITE


F3 INVITE SIP Proxy -> Carol (transport UDP)

INVITE sip:carol@77.123.45.23:5060 SIP/2.0
Via: SIP/2.0/UDP 100.100.100.100;branch=z9hG4bKhjhjqw32c
Via: SIP/2.0/WSS 93.12.40.105:20565;branch=z9hG4bK56sdasks
Record-Route: <sip:100.100.100.100;transport=udp>,
  <sips:100.100.100.100:9090;transport=ws>
From: sip:alice@atlanta.com;tag=asdyka899
To: sip:carol@atlanta.com
Call-ID: asidkj3ss
CSeq: 1 INVITE
Max-Forwards: 69
Contact: <sips:alice@93.12.40.105:20565;transport=ws>
Content-Type: application/sdp


F4 200 OK Carol -> SIP Proxy (transport UDP)

SIP/2.0 200 OK
Via: SIP/2.0/UDP 100.100.100.100;branch=z9hG4bKhjhjqw32c
Via: SIP/2.0/WSS 93.12.40.105:20565;branch=z9hG4bK56sdasks
Record-Route: <sip:100.100.100.100;transport=udp>,
  <sips:100.100.100.100:9090;transport=ws>
From: sip:alice@atlanta.com;tag=asdyka899
To: sip:carol@atlanta.com;tag=bmqkjhsd
Call-ID: asidkj3ss
CSeq: 1 INVITE
Max-Forwards: 69
Contact: <sip:carol@77.123.45.23:5060;transport=udp>
Content-Type: application/sdp


F5 200 OK SIP Proxy -> Alice (transport WSS)

SIP/2.0 200 OK
Via: SIP/2.0/WSS 93.12.40.105:20565;branch=z9hG4bK56sdasks
Record-Route: <sip:100.100.100.100;transport=udp>,
  <sips:100.100.100.100:9090;transport=ws>
From: sip:alice@atlanta.com;tag=asdyka899
To: sip:carol@atlanta.com;tag=bmqkjhsd
Call-ID: asidkj3ss
CSeq: 1 INVITE
Max-Forwards: 69
Contact: <sip:carol@77.123.45.23:5060;transport=udp>
Content-Type: application/sdp
           

F6 ACK Alice -> SIP Proxy (transport WSS)

ACK sip:carol@77.123.45.23:5060;transport=udp SIP/2.0
Via: SIP/2.0/WSS 93.12.40.105:20565;branch=z9hG4bKhgqqp090
Route: <sips:100.100.100.100:9090;transport=ws>,
  <sip:100.100.100.100;transport=udp>
From: sip:alice@atlanta.com;tag=asdyka899
To: sip:carol@atlanta.com;tag=bmqkjhsd
Call-ID: asidkj3ss
CSeq: 1 ACK
Max-Forwards: 70


F7 ACK SIP Proxy -> Carol (transport UDP)

ACK sip:carol@77.123.45.23:5060;transport=udp SIP/2.0
Via: SIP/2.0/UDP 100.100.100.100;branch=z9hG4bKhwpoc80zzx
Via: SIP/2.0/WSS 93.12.40.105:20565;branch=z9hG4bKhgqqp090
From: sip:alice@atlanta.com;tag=asdyka899
To: sip:carol@atlanta.com;tag=bmqkjhsd
Call-ID: asidkj3ss
CSeq: 1 ACK
Max-Forwards: 69


F8 BYE Carol -> SIP Proxy (transport UDP)

BYE sips:alice@93.12.40.105:20565;transport=ws SIP/2.0
Via: SIP/2.0/UDP 77.123.45.23;branch=z9hG4bKbiuiansd001
Route: <sip:100.100.100.100;transport=udp>,
  <sips:100.100.100.100:9090;transport=ws>
From: sip:carol@atlanta.com;tag=bmqkjhsd
To: sip:alice@atlanta.com;tag=asdyka899
Call-ID: asidkj3ss
CSeq: 1201 BYE
Max-Forwards: 70


F9 BYE SIP Proxy -> Alice (transport WSS)

BYE sips:alice@93.12.40.105:20565;transport=ws SIP/2.0
Via: SIP/2.0/WSS 100.100.100.100:9090;branch=z9hG4bKmma01m3r5
Via: SIP/2.0/UDP 77.123.45.23;branch=z9hG4bKbiuiansd001
From: sip:carol@atlanta.com;tag=bmqkjhsd
To: sip:alice@atlanta.com;tag=asdyka899
Call-ID: asidkj3ss
CSeq: 1201 BYE
Max-Forwards: 69


F10 200 OK Alice -> SIP Proxy (transport WSS)

SIP/2.0 200 OK
Via: SIP/2.0/WSS 100.100.100.100:9090;branch=z9hG4bKmma01m3r5
Via: SIP/2.0/UDP 77.123.45.23;branch=z9hG4bKbiuiansd001
From: sip:carol@atlanta.com;tag=bmqkjhsd
To: sip:alice@atlanta.com;tag=asdyka899
Call-ID: asidkj3ss
CSeq: 1201 BYE


F11 200 OK SIP Proxy -> Carol (transport UDP)

SIP/2.0 200 OK
Via: SIP/2.0/UDP 77.123.45.23;branch=z9hG4bKbiuiansd001
From: sip:carol@atlanta.com;tag=bmqkjhsd
To: sip:alice@atlanta.com;tag=asdyka899
Call-ID: asidkj3ss
CSeq: 1201 BYE
]]></artwork></figure>
        </t>
      </section>

      <section title="INVITE dialog through two proxies" anchor="invite_dialog_through_two_proxies">
        <t><figure><artwork><![CDATA[
Alice   (SIP WS)   Proxy 1   (SIP UDP)   Proxy 2    (SIP WSS)    Bob
|                     |                     |                     |
|INVITE F1            |                     |                     |
|-------------------->|                     |                     |
|100 Trying F2        |                     |                     |
|<--------------------|                     |                     |
|                     |INVITE F3            |                     |
|                     |-------------------->|                     |
|                     |100 Trying F4        |                     |
|                     |<--------------------|                     |
|                     |                     |INVITE F5            |
|                     |                     |-------------------->|
|                     |                     |486 Busy Here F6     |
|                     |                     |<--------------------|
|                     |                     |ACK F7               |
|                     |                     |-------------------->|
|                     |486 Busy Here F8     |                     |
|                     |<--------------------|                     |
|                     |ACK F9               |                     |
|                     |-------------------->|                     |
|486 Busy Here F10    |                     |                     |
|<--------------------|                     |                     |
|ACK F11              |                     |                     |
|-------------------->|                     |                     |
|                     |                     |                     |

]]></artwork></figure></t>
    
        <t>Alice and Bob are WebSocket clients running on web browsers. Alice belongs to atlanta.com SIP domain while Bob does to biloxi.com. Each domain has its own SIP proxy. Both proxies are also WebSocket servers. Alice calls Bob's AoR through a WebSocket connection. Bob responds the INVITE with a 486 Busy Here. Communication through proxies is made via UDP transport protocol.</t>

        <t>Message details (authentication and SDP bodies are omitted for simplicity):</t>

        <t><figure><artwork><![CDATA[
F1 INVITE Alice -> Proxy 1 (transport WS)

INVITE sip:bob@biloxi.com SIP/2.0
Via: SIP/2.0/WS 93.12.40.105:21324;branch=z9hG4bKmmuuq
From: Alice <sip:alice@atlanta.com>;tag=lxtyr
To: Bob <sip:bob@biloxi.com>
Call-ID: aslke3dkj
CSeq: 1 INVITE
Max-Forwards: 70
Contact: <sip:alice@93.12.40.105:21324;transport=ws>
Content-Type: application/sdp


F2 100 Trying Proxy 1 -> Alice (transport WS)

SIP/2.0 100 Trying
Via: SIP/2.0/WS 93.12.40.105:21324;branch=z9hG4bKmmuuq
From: Alice <sip:alice@atlanta.com>;tag=lxtyr
To: Bob <sip:bob@biloxi.com>
Call-ID: aslke3dkj
CSeq: 1 INVITE


F3 INVITE Proxy 1 -> Proxy 2 (transport UDP)

INVITE sip:bob@biloxi.com SIP/2.0
Via: SIP/2.0/UDP 101.101.101.101;branch=z9hG4bKdkej
Via: SIP/2.0/WS 93.12.40.105:21324;branch=z9hG4bKmmuuq
Record-Route: <sip:101.101.101.101;transport=udp>
Record-Route: <sip:101.101.101.101:80;transport=ws>
From: Alice <sip:alice@atlanta.com>;tag=lxtyr
To: Bob <sip:bob@biloxi.com>
Call-ID: aslke3dkj
CSeq: 1 INVITE
Max-Forwards: 69
Contact: <sip:alice@93.12.40.105:21324;transport=ws>
Content-Type: application/sdp


F4 100 Trying Proxy 2 -> Proxy 1 (transport UDP)

SIP/2.0 100 Trying
Via: SIP/2.0/UDP 101.101.101.101;branch=z9hG4bKdkej
Via: SIP/2.0/WS 93.12.40.105:21324;branch=z9hG4bKmmuuq
From: Alice <sip:alice@atlanta.com>;tag=lxtyr
To: Bob <sip:bob@biloxi.com>
Call-ID: aslke3dkj
CSeq: 1 INVITE


F5 INVITE Proxy 2 -> Bob (transport WSS)

INVITE sips:bob@85.84.123.222:30142;transport=ws SIP/2.0
Via: SIP/2.0/WSS 102.102.102.102:443;branch=z9hG4bKqowin
Via: SIP/2.0/UDP 101.101.101.101;branch=z9hG4bKdkej
Via: SIP/2.0/WS 93.12.40.105:21324;branch=z9hG4bKmmuuq
Record-Route: <sips:102.102.102.102:443;transport=ws>
Record-Route: <sip:102.102.102.102;transport=udp>
Record-Route: <sip:101.101.101.101;transport=udp>
Record-Route: <sip:101.101.101.101:9090;transport=ws>
From: Alice <sip:alice@atlanta.com>;tag=lxtyr
To: Bob <sip:bob@biloxi.com>
Call-ID: aslke3dkj
CSeq: 1 INVITE
Max-Forwards: 68
Contact: <sip:alice@93.12.40.105:21324;transport=ws>
Content-Type: application/sdp


F6 486 Busy Here Bob -> Proxy 2 (transport WSS)

SIP/2.0 486 Busy Here
Via: SIP/2.0/WSS 102.102.102.102:443;branch=z9hG4bKqowin
Via: SIP/2.0/UDP 101.101.101.101;branch=z9hG4bKdkej
Via: SIP/2.0/WS 93.12.40.105:21324;branch=z9hG4bKmmuuq
From: Alice <sip:alice@atlanta.com>;tag=lxtyr
To: Bob <sip:bob@biloxi.com>;tag=dskfjd
Call-ID: aslke3dkj
CSeq: 1 INVITE


F7 ACK Proxy 2 -> Bob (transport WSS)

ACK sips:bob@85.84.123.222:30142;transport=ws SIP/2.0
Via: SIP/2.0/WSS 102.102.102.102:443;branch=z9hG4bKqowin
From: Alice <sip:alice@atlanta.com>;tag=lxtyr
To: Bob <sip:bob@biloxi.com>;tag=dskfjd
Call-ID: aslke3dkj
CSeq: 1 ACK


F8 486 Busy Here Proxy 2 -> Proxy 1 (transport UDP)

SIP/2.0 486 Busy Here
Via: SIP/2.0/UDP 101.101.101.101;branch=z9hG4bKdkej
Via: SIP/2.0/WS 93.12.40.105:21324;branch=z9hG4bKmmuuq
From: Alice <sip:alice@atlanta.com>;tag=lxtyr
To: Bob <sip:bob@biloxi.com>;tag=dskfjd
Call-ID: aslke3dkj
CSeq: 1 INVITE


F9 ACK Proxy 1 -> Proxy 2 (transport UDP)

ACK sip:bob@biloxi.com SIP/2.0
Via: SIP/2.0/UDP 101.101.101.101;branch=z9hG4bKdkej
From: Alice <sip:alice@atlanta.com>;tag=lxtyr
To: Bob <sip:bob@biloxi.com>;tag=dskfjd
Call-ID: aslke3dkj
CSeq: 1 ACK


F10 486 Busy Here Proxy 1 -> Alice (transport WS)

SIP/2.0 486 Busy Here
Via: SIP/2.0/WS 93.12.40.105:21324;branch=z9hG4bKmmuuq
From: Alice <sip:alice@atlanta.com>;tag=lxtyr
To: Bob <sip:bob@biloxi.com>;tag=dskfjd
Call-ID: aslke3dkj
CSeq: 1 INVITE


F11 ACK Alice -> Proxy 1 (transport WS) 

ACK sip:bob@biloxi.com SIP/2.0
Via: SIP/2.0/WS 93.12.40.105:21324;branch=z9hG4bKmmuuq
From: Alice <sip:alice@atlanta.com>;tag=lxtyr
To: Bob <sip:bob@biloxi.com>;tag=dskfjd
Call-ID: aslke3dkj
CSeq: 1 ACK
]]></artwork></figure></t>

      </section>
    </section>

   
    <section title="Security Considerations" anchor="security_considerations">
      <t>If the client (typically a web-based application) needs to protect the privacy of the SIP traffic through the WebSocket connection, it is encouraged to use a secure WebSocket connection.</t>
    </section>


    <section title="IANA Considerations" anchor="iana_considerations">
      
      <section title="Registration of new Via transports">
        <t>This specification registers two new transport identifiers for Via headers:
          <list style="hanging" hangIndent="6">
            <t hangText="WS:">MUST be used when constructing a SIP request to be sent over a plain WebSocket connection.</t>
            <t hangText="WSS:">MUST be used when constructing a SIP request to be sent over a secure WebSocket connection (tunneled over TLS <xref target="RFC5246"/>).</t>
          </list>
        </t>
      </section>

      <section title="Registration of new SIP URI transport">
        <t>This specification registers a new value for the "transport" parameter in a SIP URI:
          <list style="hanging" hangIndent="6">
            <t hangText="ws:">Identifies a SIP URI to be contacted using a WebSocket (plain or secure) connection.</t>
          </list>
        </t>
      </section>

      <section title="Registration of the WebSocket SIP subprotocol">
        <t>If a registry is created for WebSocket subprotocols, the SIP subprotocol defined in this specification will be registered.</t>
      </section>
      
    </section>
    

  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      &RFC2119;
      &RFC5234;
      &RFC3261;
      &I-D.ietf-hybi-thewebsocketprotocol;
    </references>

    <references title="Informative References">
      &RFC2616;
      &RFC3986;
      &RFC4168;
      &RFC5246;
      &RFC3327;
      &RFC3581;
      &RFC5658;

      <reference anchor="WS-API">
        <front>
          <title>The Web Sockets API</title>
          <author initials="I." surname="Hickson" fullname="Ian Hickson">
            <organization>Google, Inc.</organization>
          </author>
          <date month="September" year="2010" />
        </front>
      </reference>

      <reference anchor="RTC-Web">
        <front>
          <title>Real Time Collaboration on the World Wide Web</title>
          <author>
            <organization>IETF</organization>
          </author>
          <author>
            <organization>W3C</organization>
          </author>
          <date month="October" year="2010" />
        </front>
      </reference>
      
    </references>


  </back>

</rfc>
