<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC '' 
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
]>


<rfc category="info" ipr="trust200902" docName="draft-sullivan-domain-origin-assert-00">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
  <?rfc toc="yes" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc iprnotified="no" ?>
  <?rfc strict="yes" ?>
  <?rfc compact="yes" ?>
  <?rfc comments="yes"?>
  <?rfc inline="yes"?>
  <front>
    <title abbrev="Asserting origins">Asserting Administrative
    Boundaries of Origin Using DNS Zones</title>
    <author initials="A." surname="Sullivan" fullname="Andrew Sullivan">
      <organization>Dyn, Inc.</organization>
      <address>
        <postal>
          <street>150 Dow St</street>
          <city>Manchester</city>
          <region>NH</region>
          <code>03101</code>
          <country>U.S.A.</country>
        </postal>
        <email>asullivan@dyn.com</email>
      </address>
    </author>
    <date year="2012"/>
    <abstract>
      <t>
        Some clients on the Internet make inferences about the
        administrative relationships among servers on the Internet
        based on the domain names of those servers.  Examples include
        decisions about acceptance of cookies and about cross-document
        information sharing in ECMAScript DOM.  Perhaps unfortunately,
        real administrative boundaries in the DNS are not possible to
        detect, and therefore these inferences can go wrong in several
        ways.  Mitigation strategies deployed so far will not scale.
        The solution to this is to provide a way to make an explicit
        assertion about the relationships between different domain
        names.
      </t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction">
      <t>Many network resources are accessed primarily by name.  DNS
      names make up a fundamental part of the name by which people or
      other systems access those network resources.  As a result, DNS
      names have become fundamental elements in building security
      policies and user agent behaviour.  Some such policies attempt
      to determine the scope for data sharing of things like HTTP
      state management cookies <xref target="RFC6265" /> and
      cross-document information sharing in ECMAScript DOM.  The idea
      is to foil the attempts of attackers in (for example)
      attackersite.co.tld from setting cookies for everyone in
      co.tld.</t>
      <t>Another use of the policy is a user interface convention that
      attempts to display the "real" domain name differently from
      other parts of the fully-qualified domain name, in an effort to
      decrease the success of phishing attacks.  In this strategy, for
      instance, a domain name like
      "www.bank.example.com.attackersite.tld" is formatted to
      highlight that the name is inside "attackersite.tld", in the
      hope of thereby reducing the user's impression that the user is
      visiting "www.bank.example.com".</t>
      <t>Issuers of X.509 certificates make judgements about
      administrative boundaries around domains when issuing the
      certificates.  For some discussion of the relationship between
      DNS names and X.509 certificates, see <xref target="RFC6125" />.</t>
      <t>One way to build a reasonable policy is to treat each
      different domain name distinctly.  Under this approach,
      foo.example.org, bar.example.org, and baz.example.org are all
      just different domains.  Such an approach can be awkward,
      however, when (as is often the case) the real administrative
      boundary is a shared one (in this example, example.org).
      Therefore, clients have attempted to make more sophisticated
      policies.</t>
      <t>Historically, some policies were based on the DNS tree.
      Early policies made a firm distinction between top-level domains
      and everything else; but this was too naive, and later attempts
      were based on inferences from the DNS names themselves.  That
      did not work well, because there is no way in the DNS to
      discover the boundaries of administrative control around domain
      names.</t>
      <t> Some have attempted to use the boundary of zone cuts
      (i.e. the location of the zone's apex and SOA record; see <xref
      target="RFC1034" > </xref> 
      and <xref target="RFC1035"
       />).
      Unfortunately, that boundary is neither necessary nor sufficient
      for these purposes: it is possible for a large site to have
      many, administratively distinct subdomain-named sites without
      inserting an SOA record, and it is also possible that an
      administrative entity (like a company) might divide its domain
      up into different zones for administrative reasons unrelated to
      the purposes of sites named in that domain.  It was also, prior
      to the advent of DNSSEC, difficult to find zone cuts.</t>
      <t>What appears to be needed is a mechanism to determine
      administrative boundaries in the DNS.  That is, given two domain
      names, one needs to be able to answer whether the first name
      lies within the same administrative realm as the second.  <cref
      source="ajs@anvilwalrusden.com"> I've used "administrative
      realm" here in an attempt to come up with yet another suitable
      term.  "Administrative domain" is one other suggestion, though I
      fear a confusion between "administrative domain" and "domain"
      simpliciter, especially given that DNS operators are sometimes
      called domain administrators (so the domain is their
      administrative domain, of course, which is just confusing).
      Other thoughts on these terms welcome.</cref></t>
      <t>A particularly important distinction for security purposes is
      the one between names that are mostly used to contain other
      domains, as compared to those that are mostly used to operate
      services.  The former are often "delegation-centric" domains,
      delegating parts of their name space to others, and are
      frequently called "public suffix" domains.  The term "public
      suffix" comes from a site, publicsuffix.org, that publishes a
      list of domains (henceforth, the "public suffix list") that are
      used to contain other domains.  Not all, but most,
      delegation-centric domains are public suffix domains; and not
      all public suffix domains need to do DNS delegation, although
      most of them do.  The reason for the public suffix list is to
      make the distinction between names that must never be treated as
      being in the same adminsitrative realm as another, and those
      that may be so treated.</t>
      <t>Unfortunately, the public suffix list has several inherent
      limitations.  To begin with, it is a list that is separately
      maintained from the list of DNS delegations.  As a result, the
      data in the public suffix list can diverge from the actual use
      of the DNS.  Second, because its semantics are not the same as
      those of the DNS, it does not capture unusual features of the
      DNS, such as the empty non-terminal name.  Third, as the size of
      the root zone grows, keeping the list both accurate and
      synchronized with the expanding services will become difficult
      and unreliable.  Perhaps most importantly, it puts the power of
      assertion about the operational policies of a domain outside the
      control of the operators of that domain, and in the control of a
      third party possibly unrelated to those operators.</t>
      <t>There have been suggestions for improvements of the public
      suffix list,  most notably in <xref
      target="I-D.pettersen-subtld-structure" />. It is unclear
      the extent to which those improvements would help, because they
      represent improvements on the fundamental mechansism of keeping
      metadata about the DNS tree apart from the DNS tree itself.</t>
    </section>

    <section title="Background and terminology">
      <t>The reader is assumed to be familiar with the DNS (<xref
      target="RFC1034" /> <xref target="RFC1035" />) and DNSSEC (<xref
      target="RFC4033" /> <xref target="RFC4034" /> <xref
      target="RFC4035" /> <xref target="RFC5155" />).</t>

      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
      "OPTIONAL" in this document are to be interpreted as described
      in <xref target="RFC2119" >RFC 2119</xref>.</t>
    </section>

    <section title="Overview of mechanism">
      <section title="Records in the DNS">

        <t>The basic mechanism uses resource records in the DNS to
        provide names through which the administrative boundary
        extends.  The resource record is called BOUND (for
        administrative BOUNDary), RRTYPE TBD.  <cref
        source="ajs@anvilwalrusden.com"> This could perhaps be a NAPTR
        or some such record with underscore conventions on the name,
        except that then I don't see how to make it extend well to
        underscore names themselves.  Ideas?  The disadvatage of a new
        RRTYPE is the reported difficulty of provisioning new
        RRs.</cref></t>
        <t>Each BOUND resource record contains in its RDATA either one
        fully-qualified domain name, or a domain name containing the
        wildcard character "*" in the leftmost label, or the special
        string "_"; for more on the latter two, see <xref
        target="specials" />.</t>
        <t> There may be more than one BOUND resource record per name
        in the response.  Each domain name in the RDATA is treated as
        a part of a common administrative realm as the owner name in
        the original QNAME.</t>
        <t>There are three possible responses to a query for the BOUND
        RRTYPE at an owner name that are relevant to determining the
        administrative realm.  The first is Name Error (RCODE=3, also
        known as NXDOMAIN).  In this case, the name itself does not
        exist, and no further processing is needed.</t>
        <t>The second is a No Data response <xref target="RFC2308"  />
        of any type.  The No Data response means that the owner name in
        the QNAME does not recognize any other name as part of a
        common administrative realm.</t>
        <t>The final is a response with one or more BOUND resource
        records in the Answer section.  Each BOUND resource record
        asserts that the name identified in its RDATA shares the
        administrative realm of the owner name.  The RDATA either
        contains a multi-label domain name relative to the root zone
        (see section 3.1 of <xref target="RFC1034" />) or a string
        with some special characters in it (see <xref
        target="specials" />).</t>
        <t>Any other response is no different from any other sort of
        response from the DNS, and is not in itself meaningful for
        determining the administrative realm of a name (though it
        might be meaningful for finding the BOUND record).</t>
      </section>
      <section title="Special target labels" anchor="specials">
        <section title="Underscore target" anchor="underscore">
          <t>A BOUND resource record with the single label "_" (called
          the "underscore target") in the RDATA is a positive
          assertion that no other domain name falls inside the
          administrative realm of the owner name.  The record has a
          special use: it may be used to bootstrap operation.  A
          client that has encountered the underscore target may
          remember the existence of the underscore target even after
          the expiry of the TTL on the RRset, until such
          time as a new query for the owner name may be made
          successfully.  This rule permits implementations to cache
          positive statements of administrative isolation during
          disconnected periods, thereby starting a subsequent session
          with the values of prior affirmed policy.  Apart from this
          bootstrapping use, and the ability of such an RR to have a
          TTL independent of the negative TTL value for the zone, this
          mechanism is semantically equivalent to a No Data
          answer.</t>
          <t>It would be absurd for the underscore target to exist
          with any other BOUND resource record at that owner name.  An
          authoritative name server MAY refuse to serve a zone
          containing such an inconsistency, MAY refuse to load a zone
          containing such an inconsistency, or MAY suppress every
          BOUND RR at an owner name except that containing the
          underscore target.  The name server side of a recursive
          resolver MAY discard every BOUND RR at an owner name except
          that containing the underscore target.  Conforming servers
          MUST NOT serve the underscore target and any other BOUND RR
          at the same owner name.  Clients receiving a BOUND RRset
          that includes the underscore target MUST accept that RR, and
          discard any other RR in the RRset.</t>
        </section>
        <section title="Wildcards in targets" anchor="wildcardtarget">
          <t>The special character "*" in the RDATA is used to match
          any label, according to the wildcard label rules in section
          4.3.3 of <xref target="RFC1034" />.</t>
        </section>
      </section>
        <section title="Wire format of the BOUND Resource Record">
          <t><cref source="ajs@anvilwalrusden.com">To be provided if we
          decide that the BOUND RR is the right thing to do.</cref>
          </t>
        </section>
        
      </section>

      <section title="An example case" anchor="eg">
        <t>For the purposes of discussion, it will be useful to
        imagine a portion of the DNS, using the domain example.tld.  A
        diagram of the tree of this portion is in <xref
        target="sampletree" />.  In the example, the domain
        example.tld includes several other names: www.example.tld,
        account.example.tld, cust1.example.tld, cust2.example.tld,
        test.example.tld, cust1.test.example.tld, and
        cust2.test.example.tld.
        <figure anchor="sampletree">
          <artwork><![CDATA[
                          tld
                           |   
                           |     
                  ------example -- 
                 /      /  |  \    \
               /      /    |    \    \
             /    www   account   \   cust2
           test                    \
          /   \                  cust1
      cust1   cust2
]]></artwork>
        </figure></t>
        <t>In the example, the domain tld delegates the domain
        example.tld.  There are other possible cut points in the
        example, and depending on whether the cuts exist there may be
        implications for the use of the examples.  See <xref
        target="worked" />, below.</t>
        <t>The (admittedly artificial) example permits us to
        distinguish a number of different roles.  To begin with, there
        are three parties involved in the operation of services:
        <list style="symbols">
          <t>OperatorV, the operator of example.tld;</t>
          <t>Operator1, the operator of cust1.example.tld;</t>
          <t>Operator2, the operator of cust2.example.tld.</t>
        </list></t>
        <t>Since there are three parties, there are likely three
        admininstrative boundaries as well; but the example contains
        some others.  For instance, the names www.example.tld and
        example.tld are undoubtedly in the same administrative realm.
        By way of contrast, account.example.tld might be treated as
        completely separate, because OperatorV might wish to ensure
        that the accounts sytem is never permitted to share anything
        with any other name.  By the same token, the names underneath
        test.example.tld are actually the test-instance sites for
        customers.  So cust1.test.example.tld might be in the same
        administrative realm as cust1.example.tld, but
        test.example.tld is certainly not in the same administrative
        realm as www.example.tld.</t>
        <t>Finally, supposing that Operator1 and Operator2 merge their
        operations, it seems that it would be useful for
        cust1.example.tld and cust2.example.tld to lie in the same
        administrative realm, without including everything else in
        example.tld.</t> 

      <section title="Examples of using the BOUND record for determining
                      boundaries" anchor="worked">
        <t>This section provides some examples of different
        configurations of the example tree in <xref target="eg" />,
        above.  The examples are not exhaustive, but may provide an
        indication of what might be done with the mechanism.</t>
        <section title="One delegation, eight administrative
                        realms, no underscore target" anchor="18nu">
          <t>In this scenario, the example portion of the DNS name
          space contains all and only the following BOUND records:
          <list style="empty">
            <t>
            </t>
            <t>example.tld         86400   IN  BOUND  www.example.tld</t>
            <t>www.example.tld     86400   IN  BOUND  example.tld</t>
          </list>
          </t>
          <t>Tld is the top-level domain, and has delegated
          example.tld.  The operator of example.tld makes no
          delegations.  There are four operators involved: the
          operator of tld; OperatorV; Operator1, the operator of the
          services at cust1.example.tld and cust1.test.example.tld;
          and Operator2, the operator of the services at
          cust2.example.tld and cust2.test.example.tld.</t>
          <t>In this arrangement, example.tld and www.example.tld
          positively claim to be within the same administrative realm.
          Every other name stands alone.  A query for a BOUND record
          at any of those other names will result in a No Data
          response, which means that none of them include any other
          name in the same administrative realm.  As a result, there
          are eight separate administrative realms in this case: tld,
          {example.tld and www.example.tld}, test.example.tld,
          cust1.test.example.tld, cust2.test.example.tld,
          account.example.tld, cust1.example.tld, and cust2.example.tld.</t>
        </section>
        <section title="One delegation, eight administrative
          realms, underscore targets" anchor="18u">
          <t>This example mostly works the same way as the one in
          Section <xref target="18nu" />, but there is a slight
          difference.  In this case, both tld and test.example.tld
          publish underscore targets in their BOUND records:
          <list style="empty">
            <t>
            </t>
            <t>tld                      86400  IN  BOUND  _</t>
            <t>test.example.tld         86400  IN  BOUND  _</t>
          </list></t>
          <t>The practical effect of this is largely the same, except
          that these expressions of policy last 86,400 seconds instead
          of the length of time on the negative TTL in the relevant
          SOA for the zone.  Many zones have short negative TTLs
          because of expectations that newly-added records will show
          up quickly.  This mechanism permits such names to express
          their administrative isolation for predictable periods of
          time.  Moreover, because clients are permitted to retain
          these records during periods when DNS service is not
          available, a client could go offline for several weeks, and
          return to service with the presumption that test.example.tld
          is still not in any administrative realm with any other name.</t>
        </section>
        <section title="Two delegations, seven or eight administrative realms,
          underscore targets" anchor="27v8u">
          <t>In this scenario, example.tld delegates the name
          test.example.tld.  In this case, there is an SOA record for
          test.example.tld.  The BOUND record at test.example.tld is
          maintained, however.</t>
          <t>At the same time, the Operator1 determines that it is
          safe to treat the test instance and production instance as
          being in the same adminsitrative realm.  To begin with,
          Operator1 asks OperatorV to add the following record to the
          test.example.tld zone:
          <list style="empty">
            <t>
            </t>
            <t>cust1.test.example.tld  86400   IN  BOUND
            cust1.example.tld</t>
          </list></t>
          <t>This arrangement is not complete yet.  Until a record is
          also added at cust1.example.tld, Operator1's intention
          is only half fulfilled.  The service at
          cust1.test.example.tld treats cust1.example.tld as part of
          a common administrative realm, but the converse is not the
          case.  <cref source="ajs@anvilwalrusden.com">I can't decide
          whether there's anything useful in this configuration.
          Thoughts?</cref></t>
          <t>To complete the process, Operator1 asks OperatorV to add
          the following record to the example.tld zone:
          <list style="empty">
            <t>
            </t>
            <t>cust1.example.tld  86400   IN  BOUND
            cust1.test.example.tld</t>
          </list></t>
          <t>Once this is complete, both names treat the other as part
          of the same administrative realm.  In the end,
          the example segment of the DNS expresses the following
          administrative realms: tld, {example.tld, www.example.tld},
          test.example.tld, {cust1.test.example.tld,
          cust1.example.tld}, cust2.example.tld, account.example.tld, cust2.example.tld.</t>
        </section>
      </section>
    </section>
<!--    <section title="Wildcards and the BOUND Resource Record" anchor="wildcards">
      <t>A zone publisher can cause all domains beneath it to be in
      the same administrative boundary by publishing a wildcard
      record.  For example, the wildcard expansion of an BOUND
      record at *.example.com with a target of *.example.com would
      mean that every name beneath example.com considers every other
      name beneath example.com to be within the administrative
      boundary.</t>
    </section> -->

    <section title="Handling truncation" anchor="truncation">
      <t>It is possible to put enough BOUND records into a zone such
      that the resulting response will exceed DNS or UDP protocol
      limits.  In such cases, a UDP DNS response will arrive with the
      TC (truncation) bit set.  Am BOUND response with the TC bit
      must be queried again in order to retrieve a complete response,
      in order to ensure that there is no missing underscore target
      (see <xref target="underscore" />).</t>
    </section>
    <section title="Limitations of the approach" anchor="limitations">
      <t>There are three significant problems with this proposal, all
      of which are related to using DNS to deliver the data.</t>
      <t>The first is that new DNS RRTYPEs are difficult to deploy.
      While adding a new RRTYPE is straightforward, many provisioning
      systems do not have the necessary support and some firewalls and
      other edge systems continue to filter RRTYPEs they do not
      know.</t>
      <t>The second is that it is difficult for an application to
      obtain data from the DNS.  The TTL on an RRset, in particular,
      is usually not available to an application, even if the
      application uses the facilities of the operating system to
      deliver other parts of an unknown RRTYPE.</t>
      <t>Finally, in many environments the system hosting the
      application has only proxied access to the Internet, and cannot
      query the DNS directly.  It is not clear how such clients could
      ever possibly retrieve the BOUND record for a name.</t>
    </section>
    <section title="Security Considerations">
      <t>This mechanism enables publication of assertions about
      administrative relationships of different DNS-named systems on
      the Internet.  If such assertions are accepted without checking
      that both sides agree to the assertion, it would be possible for
      one site to become an illegitimate source for data to be
      consumed in some other site.</t>
      <t>Undertaking any of the inferences suggested in this draft
      without the use of the DNS Security Extensions exposes the user
      to the possibility of forged DNS responses.</t>
    </section>
    <section title="IANA Considerations">
      <t>IANA will be requested to register the BOUND RRTYPE if this
      proceeds.</t>
    </section>
    <section title="Acknowledgements">
      <t>The author thanks Dave Crocker, Jeff Hodges, Murray
      Kucherawy, Patrick McManus, Yngve N. Pettersen, and Peter St Andre for
      early discussion of this idea. </t>
    </section>
   </middle>
  <back>

    <references title="Normative References">

<!-- BEGIN INCLUDED references file draft-sullivan-domain-origin-assert-00.xml-normative -->


<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC1034'>

<front>
<title abbrev='Domain Concepts and Facilities'>Domain names - concepts and facilities</title>
<author initials='P.' surname='Mockapetris' fullname='P. Mockapetris'>
<organization>Information Sciences Institute (ISI)</organization></author>
<date year='1987' day='1' month='November' /></front>

<seriesInfo name='STD' value='13' />
<seriesInfo name='RFC' value='1034' />
<format type='TXT' octets='129180' target='http://www.rfc-editor.org/rfc/rfc1034.txt' />
</reference>


<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC1035'>

<front>
<title abbrev='Domain Implementation and Specification'>Domain names - implementation and specification</title>
<author initials='P.' surname='Mockapetris' fullname='P. Mockapetris'>
<organization>USC/ISI</organization>
<address>
<postal>
<street>4676 Admiralty Way</street>
<city>Marina del Rey</city>
<region>CA</region>
<code>90291</code>
<country>US</country></postal>
<phone>+1 213 822 1511</phone></address></author>
<date year='1987' day='1' month='November' /></front>

<seriesInfo name='STD' value='13' />
<seriesInfo name='RFC' value='1035' />
<format type='TXT' octets='125626' target='http://www.rfc-editor.org/rfc/rfc1035.txt' />
</reference>


<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC2119'>

<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date year='1997' month='March' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='http://www.rfc-editor.org/rfc/rfc2119.txt' />
<format type='HTML' octets='17491' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5777' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>


<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC2308'>

<front>
<title abbrev='DNS NCACHE'>Negative Caching of DNS Queries (DNS NCACHE)</title>
<author initials='M.' surname='Andrews' fullname='Mark Andrews'>
<organization>CSIRO - Mathematical and Information Sciences</organization>
<address>
<postal>
<street>Locked Bag 17</street>
<street>North Ryde NSW 2113</street>
<country>AUSTRALIA</country></postal>
<phone>+61 2 9325 3148</phone>
<email>Mark.Andrews@cmis.csiro.au</email></address></author>
<date year='1998' month='March' />
<area>Applications</area>
<keyword>domain name system</keyword>
<keyword>DNS</keyword>
<abstract>
<t>

   [RFC1034] provided a description of how to cache negative responses.

   It however had a fundamental flaw in that it did not allow a name

   server to hand out those cached responses to other resolvers, thereby

   greatly reducing the effect of the caching.  This document addresses

   issues raise in the light of experience and replaces [RFC1034 Section

   4.3.4].
</t>
<t>



   Negative caching was an optional part of the DNS specification and

   deals with the caching of the non-existence of an RRset [RFC2181] or

   domain name.

</t>
<t>


   Negative caching is useful as it reduces the response time for

   negative answers.  It also reduces the number of messages that have

   to be sent between resolvers and name servers hence overall network

   traffic.  A large proportion of DNS traffic on the Internet could be

   eliminated if all resolvers implemented negative caching.  With this

   in mind negative caching should no longer be seen as an optional part

   of a DNS resolver.
</t></abstract></front>

<seriesInfo name='RFC' value='2308' />
<format type='TXT' octets='41428' target='http://www.rfc-editor.org/rfc/rfc2308.txt' />
<format type='HTML' octets='50045' target='http://xml.resource.org/public/rfc/html/rfc2308.html' />
<format type='XML' octets='41491' target='http://xml.resource.org/public/rfc/xml/rfc2308.xml' />
</reference>

<!-- END INCLUDED references file draft-sullivan-domain-origin-assert-00.xml-normative -->
    </references>
      
    <references title="Informative References">

<!-- BEGIN INCLUDED references file draft-sullivan-domain-origin-assert-00.xml-informative -->


<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='I-D.pettersen-subtld-structure'>
<front>
<title>The Public Suffix Structure file format and its use for Cookie domain validation</title>

<author initials='Y' surname='Pettersen' fullname='Yngve Pettersen'>
    <organization />
</author>

<date month='March' day='6' year='2012' />

<abstract><t>This document defines the term "Public Suffix domain" as meaning a domain under which multiple parties that are unaffiliated with the owner of the Public Suffix domain may register subdomains.  Examples of Public Suffix domains include "org", "co.uk", "k12.wa.us" and "uk.com".  It also defines a file format that can be used to distribute information about such Public Suffix domains to relying parties.  As an example, this information is then used to limit which domains an Internet service can set HTTP cookies for, strengthening the rules already defined by the cookie specification.  This specification updates RFC 6265 [RFC6265] by defining the term "Public Suffix domain".</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-pettersen-subtld-structure-09' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-pettersen-subtld-structure-09.txt' />
</reference>


<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC4033'>

<front>
<title>DNS Security Introduction and Requirements</title>
<author initials='R.' surname='Arends' fullname='R. Arends'>
<organization /></author>
<author initials='R.' surname='Austein' fullname='R. Austein'>
<organization /></author>
<author initials='M.' surname='Larson' fullname='M. Larson'>
<organization /></author>
<author initials='D.' surname='Massey' fullname='D. Massey'>
<organization /></author>
<author initials='S.' surname='Rose' fullname='S. Rose'>
<organization /></author>
<date year='2005' month='March' />
<abstract>
<t>The Domain Name System Security Extensions (DNSSEC) add data origin authentication and data integrity to the Domain Name System.  This document introduces these extensions and describes their capabilities and limitations.  This document also discusses the services that the DNS security extensions do and do not provide.  Last, this document describes the interrelationships between the documents that collectively describe DNSSEC. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4033' />
<format type='TXT' octets='52445' target='http://www.rfc-editor.org/rfc/rfc4033.txt' />
</reference>


<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC4034'>

<front>
<title>Resource Records for the DNS Security Extensions</title>
<author initials='R.' surname='Arends' fullname='R. Arends'>
<organization /></author>
<author initials='R.' surname='Austein' fullname='R. Austein'>
<organization /></author>
<author initials='M.' surname='Larson' fullname='M. Larson'>
<organization /></author>
<author initials='D.' surname='Massey' fullname='D. Massey'>
<organization /></author>
<author initials='S.' surname='Rose' fullname='S. Rose'>
<organization /></author>
<date year='2005' month='March' />
<abstract>
<t>This document is part of a family of documents that describe the DNS Security Extensions (DNSSEC). The DNS Security Extensions are a collection of resource records and protocol modifications that provide source authentication for the DNS. This document defines the public key (DNSKEY), delegation signer (DS), resource record digital signature (RRSIG), and authenticated denial of existence (NSEC) resource records. The purpose and format of each resource record is described in detail, and an example of each resource record is given.&lt;/t>&lt;t> This document obsoletes RFC 2535 and incorporates changes from all updates to RFC 2535. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4034' />
<format type='TXT' octets='63879' target='http://www.rfc-editor.org/rfc/rfc4034.txt' />
</reference>


<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC4035'>

<front>
<title>Protocol Modifications for the DNS Security Extensions</title>
<author initials='R.' surname='Arends' fullname='R. Arends'>
<organization /></author>
<author initials='R.' surname='Austein' fullname='R. Austein'>
<organization /></author>
<author initials='M.' surname='Larson' fullname='M. Larson'>
<organization /></author>
<author initials='D.' surname='Massey' fullname='D. Massey'>
<organization /></author>
<author initials='S.' surname='Rose' fullname='S. Rose'>
<organization /></author>
<date year='2005' month='March' />
<abstract>
<t>This document is part of a family of documents that describe the DNS Security Extensions (DNSSEC). The DNS Security Extensions are a collection of new resource records and protocol modifications that add data origin authentication and data integrity to the DNS. This document describes the DNSSEC protocol modifications. This document defines the concept of a signed zone, along with the requirements for serving and resolving by using DNSSEC. These techniques allow a security-aware resolver to authenticate both DNS resource records and authoritative DNS error indications.&lt;/t>&lt;t> This document obsoletes RFC 2535 and incorporates changes from all updates to RFC 2535. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4035' />
<format type='TXT' octets='130589' target='http://www.rfc-editor.org/rfc/rfc4035.txt' />
</reference>


<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC5155'>

<front>
<title>DNS Security (DNSSEC) Hashed Authenticated Denial of Existence</title>
<author initials='B.' surname='Laurie' fullname='B. Laurie'>
<organization /></author>
<author initials='G.' surname='Sisson' fullname='G. Sisson'>
<organization /></author>
<author initials='R.' surname='Arends' fullname='R. Arends'>
<organization /></author>
<author initials='D.' surname='Blacka' fullname='D. Blacka'>
<organization /></author>
<date year='2008' month='March' />
<abstract>
<t>The Domain Name System Security (DNSSEC) Extensions introduced the NSEC resource record (RR) for authenticated denial of existence.  This document introduces an alternative resource record, NSEC3, which similarly provides authenticated denial of existence.  However, it also provides measures against zone enumeration and permits gradual expansion of delegation-centric zones. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5155' />
<format type='TXT' octets='112338' target='http://www.rfc-editor.org/rfc/rfc5155.txt' />
</reference>


<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC6125'>

<front>
<title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
<author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'>
<organization /></author>
<author initials='J.' surname='Hodges' fullname='J. Hodges'>
<organization /></author>
<date year='2011' month='March' />
<abstract>
<t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS).  This document specifies procedures for representing and verifying the identity of application services in such interactions. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='6125' />
<format type='TXT' octets='136507' target='http://www.rfc-editor.org/rfc/rfc6125.txt' />
</reference>


<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC6265'>

<front>
<title>HTTP State Management Mechanism</title>
<author initials='A.' surname='Barth' fullname='A. Barth'>
<organization /></author>
<date year='2011' month='April' />
<abstract>
<t>This document defines the HTTP Cookie and Set-Cookie header fields.  These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='6265' />
<format type='TXT' octets='79724' target='http://www.rfc-editor.org/rfc/rfc6265.txt' />
</reference>

<!-- END INCLUDED references file draft-sullivan-domain-origin-assert-00.xml-informative -->
    </references>
  </back>
</rfc>