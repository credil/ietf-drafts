<?xml version="1.0" encoding="UTF-8"?><?rfc linefile="1:eps-token.xml"?>
<!-- automatically generated by xml2rfc v1.35 on 2012-03-12T22:28:50Z -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!-- xml2rfc-processed-entity RFC2119 -->
  <!-- xml2rfc-processed-entity RFC4346 -->
  <!-- xml2rfc-processed-entity RFC4998 -->
  <!-- xml2rfc-processed-entity RFC5705 -->
  <!-- xml2rfc-processed-entity SMIME-ALL -->

  <!-- xml2rfc-processed-entity getPolicyRequest -->
  <!-- xml2rfc-processed-entity getPolicyResponse -->
  <!-- xml2rfc-processed-entity sendMessageRequest -->
  <!-- xml2rfc-processed-entity sendMessageResponse -->
  <!-- xml2rfc-processed-entity readMessageRequest -->
  <!-- xml2rfc-processed-entity readMessageResponse -->

  <!-- xml2rfc-processed-entity SOAP11 -->
  <!-- xml2rfc-processed-entity SOAP12 -->
  <!-- xml2rfc-processed-entity XML-DIGSIG -->
  <!-- xml2rfc-processed-entity XML-C14N11 -->

  <!-- xml2rfc-processed-entity PlasmaSchema -->
  <!-- xml2rfc-processed-entity RequestSchema -->
  <!-- xml2rfc-processed-entity ResponseSchema -->
  <!-- xml2rfc-processed-entity AuthenticationType -->
  <!-- xml2rfc-processed-entity PlasmaTokensSchema -->
  <!-- xml2rfc-processed-entity RequestMessageData -->
  <!-- xml2rfc-processed-entity SignBodySchema -->

  <!-- xml2rfc-processed-entity GetRoleRequestExample -->
  <!-- xml2rfc-processed-entity GetRoleResponseExample -->
  <!-- xml2rfc-processed-entity GetTokenRequestExample -->
  <!-- xml2rfc-processed-entity GetTokenResponseExample -->
  <!-- xml2rfc-processed-entity GetKeyRequestExample -->
  <!-- xml2rfc-processed-entity GetKeyResponseExample -->

  <?rfc linefile="1:bibxml/smime.xml"?>  <!-- xml2rfc-processed-entity ESS-BASE -->
  <!-- xml2rfc-processed-entity CMS -->
  <!-- xml2rfc-processed-entity CMS-ASN -->
  <!-- xml2rfc-processed-entity CMS-AED -->
  <!-- xml2rfc-processed-entity SMIME-MSG -->
  <!-- xml2rfc-processed-entity AED-RANT -->
  <!-- xml2rfc-processed-entity XOR-HASH -->
  <!-- xml2rfc-processed-entity SMIMEv3-MSG -->
  <!-- xml2rfc-processed-entity SMIME-MSG -->


<?rfc linefile="36:eps-token.xml"?>
]>


<?xml-stylesheet type='text/xsl' href='rfc2629.xlst' ?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc comments="yes"?>
<rfc category="std" docName="draft-schaad-plasma-service-01" ipr="trust200902">
  <front>
    <title abbrev="EPS TRUST">Email Policy Service Trust Processing</title>
    <author fullname="Jim Schaad" initials="J." surname="Schaad">
      <organization>Soaring Hawk Consulting</organization>
      <address>
        <email>ietf@augustcellars.com</email>
      </address>
    </author>
    <date/>
    <abstract>
      <t>Write Me</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction">
      <section title="XML Nomenclature and Name Spaces">
        <t>The following name spaces are used in this document:</t>
        <texttable>
          <ttcol>Prefix</ttcol><ttcol> Namespace</ttcol><ttcol> Specification(s)</ttcol>
          <c>eps</c><c>http://ietf.org/2011/plasma/</c><c>This Specification</c>
          <c>wst</c><c> http://docs.oasis-open.org/ws-sx/ws-trust/200512</c><c><xref target="WS-TRUST"/></c>
          <c>wsu</c><c> http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd</c><c> [WS-Security]</c>
          <c>wsse</c><c> http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd</c><c> [WS-Security]</c>
          <c>wsse11</c><c> http://docs.oasis-open.org/wss/oasis-wss-wsecurity-secext-1.1.xsd</c><c> [WS-Security]</c>
          <c>xacml</c><c>http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-cs-01-en.html</c><c><xref target="XACML"/></c>
          <c>ds</c><c> http://www.w3.org/2000/09/xmldsig#</c><c><xref target="XML-Signature"/></c>
          <c>xenc</c><c> http://www.w3.org/2001/04/xmlenc#</c><c> [XML-Encrypt]</c>
          <c>wsp</c><c> http://schemas.xmlsoap.org/ws/2004/09/policy</c><c> [WS-Policy]</c>
          <c>wsa</c><c> http://www.w3.org/2005/08/addressing</c><c> [WS-Addressing]</c>
          <c>xs</c><c> http://www.w3.org/2001/XMLSchema</c><c> [XML-Schema1][XML-Schema2]</c>
        </texttable> 
      </section>
      <section title="Requirements Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
      </section>
    </section>

    <section title="Components">
      <section title="WS-Trust 1.3">
        <t>We use WS-Trust as the basis for the protocol presented in this document.  WS-Trust is a secure messaging protocol used for security token exchange to enable the issuance and dissemination of credentials within different trust domains.  WS-Trust 1.3 is specified by OASIS in <xref target="WS-TRUST"/>.  WS-Trust is built on SOAP (see <xref target="SOAP12"/>) to provide a messaging structure.</t>
      </section>
      <section title="XACML 3.0">
        <t>The XACML specification (eXtensible Access Control Markup Language) <xref target="XACML"/> provides a framework for writing access control policies and for creating standardized access control queries and responses.  For creating the query/response messages, the specification is written assuming that there is a high degree of trust in both the PEP and the PDP.  If one looks at Figure 2 in <xref target="Plasma"/>, this corresponds to the (a) case in the diagram.  For this specification we are assuming that the PEP is not a trusted entity leading to some additional message wrapping and requirements.</t>
      </section>
      <section title="SAML">
        <t>We use the SAML specification.</t>
      </section>
    </section>
    <section title="Model" anchor="model">
      <t>To be supplied from the problem statement document. <cref source="Brian">Should one be able to create a policy on the fly for specific item where a set of attributes can be defined by the sender of the message.</cref></t>
      <figure align="center" title="Message Access Control Actors" anchor="fig1"><artwork>

        (1)(3)     +----------+  
      +-----------&gt;|Sending   |&lt;------------+
      |            |Agent     |             |
 (2)  v            +----------+             v
+----------+           ^               +---------+
|Email     |           |               |Mail     |
|Policy    |&lt;----------+               |Transfer |
|Service   |                           |Agent    |
+----------+                           +---------+
 ()   ^            +----------+             ^
      |            |Receiving |             |
      +-----------&gt;|Agent     |&lt;------------+
        ()()       +----------+ 

</artwork></figure>
      <t>List the boxes above and give some info about them.
      <list style="hanging">
        <t hangText="Email Policy Service"> is the gateway controller for accessing a message.  Although it is represented as a single box in the diagram, there is no reason for it to be in practice.  Each of the three protocols could be talking to different instances of a common system.  This would allow for a server to operated by Company A, but be placed in Company B's network thus reducing the traffic sent between the two networks.</t>
        <t hangText="Mail Transfer Agent"> is the entity or set of entities that is used to move the message from the sender to the receiver.  Although this document describes the process in terms of mail, any method can be used to transfer the message.</t>
        <t hangText="Receiving Agent"> is the entity that consumes the message.</t>
        <t hangText="Sending Agent"> is the entity that originates the message.</t>
      </list>
      </t>
      <section title="Sender Processing">
        <t>We layout the general steps that need to be taken by the sender of an EPS message.  The numbers in the steps below refer to the numbers in the upper half of <xref target="fig1"/>.  A more detailed description of the processing is found in <xref target="getPolicy"/> for obtaining the security policies that can be applied to a messages and <xref target="sendMessage"/> for sending a message.  </t>
        <t>
          <list style="numbers">
            <t>The Sending Agent sends a message to one or more Email Policy Services in order to obtain the set of policies that it can apply to a message along with a security token to be used in proving the authorization.  Details of the message send can be found in <xref target="getPolicy-Request"/>.</t>
            <t>The Email Policy Service examines the set of policies that it understands and checks to see if the requester is authorized to send messages with the policy.</t>
            <t>The Email Policy Service returns the set of policies and an security token to the Sending Agent.  Details of the message sent can be found in <xref target="getPolicy-Response"/>.</t>
            <t>The Sending Agent selects the Email Policy(s) to be applied to the message, along with the set of recipients for the message.</t>
            <t>The Sending Agent relays the selected information to the Email Policy Service along with the security token.  Details of this message can be found in <xref target="sendMessage-Request"/>.</t>
            <t>The Email Policy Service creates the recipient info attribute as defined in <xref target="EPS-CMS"/>.</t>
            <t>The Email Policy Service returns the created attribute to the Sending Agent.  Details of this message can be found in <xref target="sendMessage-Response"/>.</t>
            <t>The Sending Agent composes the CMS EnvelopedData content type placing the returned attribute into a KEKRecipientInfo structure and then send the message to the Mail Transport Agent.</t>
          </list>
        </t>
      </section>
      <section title="Recieving Agent Processing">
        <t>We layout the general steps that need to be taken by the sender of an EPS message.  The numbers in the steps below refer to the numbers in the lower half of <xref target="fig1"/>.  A more detailed description of the processing is found in <xref target="readMessage"/>.</t>
        <t>
          <list style="numbers">
            <t>The Receiving Agent obtains the message from the Mail Transport Agent.</t>
            <t>The Receiving Agent starts to decode the message and in that process locates an EvelopedData content type which has a KEKRecipientInfo structure with a XXXX attribute.</t>
            <t>The Receiving Agent processes the SignedData content of the XXXX attribute to determine that communicating with it falls within accepted policy.</t>
            <t>The Receiving Agent transmits the content of the XXXX attribute to the referenced Email Policy Service.  The details of this message can be found in <xref target="readMessage-Request"/>.</t>
            <t>The Email Policy Service decrypts the content of the message and applies the policy to the credentials provided by the Receiving Agent.</t>
            <t>If the policy passes, the Email Policy Service returns the appropriate key or RecipientInfo structure to the Receiving Agent.  Details of this message can be found in <xref target="readMessage-Response"/>.</t>
            <t>The Receiving Agent proceeds to decrypt the message and perform normal processing.</t>
          </list>
        </t>
      </section>
    </section>
    <section title="Protocol Overview" anchor="Overview">
      <t>The protocol defined in this document is designed to take place between a Plasma server and a Plasma client.  The protocol takes place in terms of a query/repsonse dialog from the client to the server.  A completed dialog can consist of one or more query/response message pairs as the protocol allows for multiple round trips within a single dialog so that a client can provide additional authentication, authorization and attribute information to the server.</t>
      <t>The protocol MUST be run over a secure transport, while the protocol allows for signature operations to occur on sections of the message structure, the secure transport is responsible for providing the confidentiality and integrity protection services over the entire message.</t>
      <t>Multiple dialogs may be run over a single secure transport.  Before a new dialog may be started, the previous dialog MUST have completed to a state of success, failure or not applicable.  A new dialog MUST NOT be started after receiving a response with an indeterminate status.  This is an indicator that the dialog has not yet completed.</t>
      <t>Plasma compliant implementations MUST support TLS 1.1 <xref target="RFC4346"/> and above as secure transports.  Implementations SHOULD NOT allow for the use of TLS 1.0 or SSL. Other secure transports MAY be implemented. </t>
    </section>


    <section title="Plasma Request">
      <t>The specification is written using XACML as the basic structure used to frame a request for an operation to occur.  The request for operations to occur are written in terms of XACML action items.  This specification defines a number of actions specific to the use of this document in a CMS environment.  Other specifications may define additional action items for other environments (for example the XML encryption environment) or other purposes.  (It has been suggested that this basic structure could be used to standardize the dialogs between PDPs and PAPs.)</t>

      <t>In addition to the XACML action request there is a set of structures to allow for a variety of authentication mechanisms to be used.  By allowing for the use of SAML and GSS-API as base authentication mechanisms, the mechanism used is contained in a sub-system and thus does not directly impact the protocol.  Additionally the authentication can be performed by the secure transport, for example TLS with client authentication by X.509 certificates or a login dialog box.</t>

      <t>The request message uses a single XML structure.  This structure is the eps:PlasmaRequest object.  The XML Schema used to describe this structure is:</t>

      <?rfc linefile="1:ForDraft/requestSchema"?><figure><artwork>
  &lt;xs:element name="PlasmaRequest" type="RequestType"/&gt;
  &lt;xs:complexType name="RequestType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element ref="Authentication" minOccurs="0"/&gt;
      &lt;xs:element ref="xacml:Request" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
</artwork></figure>
<?rfc linefile="165:eps-token.xml"?>

      <t>A Plasma Request will have two elements in it:

        <list style="hanging">

          <t hangText="Authentication">is an optional element that contains the various methods of authentication that are available for use.  The authentication element is also used to contain SAML assertions containing attributes about the individual being authenticated.</t>

          <t hangText="xacml:Request">is an optional element that contains the control information for the action requested.  The control information takes the form of an action request plus additional data to be used as part of the action request.  The data and actions are to be treated as self-asserted, this is they are deemed not to come from a reliable source even in the event that an authentication is successfully completed.  Attributes for the policy enforcement SHOULD NOT be self-asserted values. This element is taken from the XACML specification.</t>

        </list>
      </t>

      <t>Clients sending a Plasma Request to a server MUST populate one or both elements.  </t>

      <section title="Authentication Element">
        <t>NOTE: I think this section goes away as it is covered later.</t>
        <t>The authentication type is used to carry information about the different ways that the Plasma server will allow for authentication to occur.  More than one authentication field can be filled in when sending message to the server.  If more than one authentication field is set, then the server can select which fields are to be used.  More than one field can be used.</t>
        <t>Additionally, the authentication element can be used to transport attributes about the entity being authenticated by including a SAML assertion with the attribute values.  The assertion of attributes is treated as being separate from authentication, however a single SAML assertion can contain both authentication and attribute information.</t>
        <t>The XML Schema used for the Authentication element is:</t>

        <?rfc linefile="1:ForDraft/AuthenticationType"?><figure><artwork>
  &lt;xs:element name="Authentication" type="AuthenticationType"/&gt;
  &lt;xs:complexType name="AuthenticationType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="SAML_Collection" minOccurs="0"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element ref="saml:Assertion" maxOccurs="unbounded"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element name="GSS_API" type="xs:hexBinary" minOccurs="0"/&gt;
      &lt;xs:element name="WS_Token" type="xs:hexBinary" minOccurs="0" maxOccurs="unbounded"/&gt;
      &lt;xs:element ref="ds:Signature" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
</artwork></figure>
<?rfc linefile="186:eps-token.xml"?>

        <t>The fields of this element are:

          <list style="hanging">

            <t hangText="SAML_Collection">holds a sequence of one or more SAML assertions.  These assertions can contain statements about attributes or keys for the requester.</t>

            <t hangText="GSS_API"> holds a GSS-API message object.  This message object will normally be using the GSS-API/EAP method defined by <xref target="ABFAB"/>.</t>

            <t hangText="WS_Token"> holds a WS-Token obtained from some source.  The most common source for a WS-Token to be obtained from will be from a previous conversation with a Plasma server.  For example, one or more WS-Tokens will be returned from a Get Roles dialog.</t>

            <t hangText="ds:Signature"></t>

          </list>
        </t>
      </section>
      <section title="xacml:Request Element">
        <t>We use the xacml:Request element for creating the access control request of the Plasma Server.  When the request element is present, one will normally have an attribute from the urn:oasis:names:tc:xacml:3.0:attribute-category.  This document defines a set of actions to be used with the server.</t>
        <t>Additional attributes can be added to the request as well.  These attributes can help control what is happening to the message and provide additional data to the request.  When attributes are to be provided in an authenticated manner, then they must be provided in a different manner than being placed here.  Unless self-assertion is considered sufficient.</t>
        <t>For convenience the schema for the xacml:Request element is reproduced here:</t>
        <figure><artwork>
&lt;xs:element name="Request" type="xacml:RequestType"/&gt;
&lt;xs:complexType name="RequestType"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:element ref="xacml:RequestDefaults" minOccurs="0"/&gt;
    &lt;xs:element ref="xacml:Attributes" maxOccurs="unbounded"/&gt;
    &lt;xs:element ref="xacml:MultiRequests" minOccurs="0"/&gt;
  &lt;/xs:sequence&gt;
  &lt;xs:attribute name="ReturnPolicyIdList" type="xs:boolean" use="required"/&gt;
  &lt;xs:attribute name="CombinedDecision" type="xs:boolean" use="required"/&gt;
&lt;/xs:complexType&gt;
</artwork></figure>
        <t>The use of the RequestDefaults  element is possible, but will generally not be supported.  The use of MultiRequest element is strongly discouraged.</t>
      </section>
    </section>
    <section title="Plasma Response Element">
      <t>There is a single top level structure that is used by the server to respond to a client request.</t>
      <t>The XML Schema used to describe the top level response is as follows:</t>
      <?rfc linefile="1:ForDraft/responseSchema"?><figure><artwork>
  &lt;xs:element name="PlasmaResponse" type="ResponseType"/&gt;
  &lt;xs:complexType name="ResponseType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element ref="xacml:Response"/&gt;
      &lt;xs:element name="PlasmaTokens" minOccurs="0"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element ref="PlasmaToken" minOccurs="0" maxOccurs="unbounded"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element name="CMSToken" minOccurs="0" maxOccurs="unbounded"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:simpleContent&gt;
            &lt;xs:extension base="xs:hexBinary"&gt;
              &lt;xs:attribute name="TokenId" type="xs:string" use="optional"/&gt;
            &lt;/xs:extension&gt;
          &lt;/xs:simpleContent&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element ref="CMSKey" minOccurs="0"/&gt;
      &lt;xs:element ref="Authentication" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
</artwork></figure>
<?rfc linefile="225:eps-token.xml"?>
      <t>A Plasma Response has three elements used:
        <list style="hanging">
          <t hangText="xacml:Response"> is a mandatory element that returns the status of the access request.</t>
          <t hangText="PlasmaTokens"> is an optional element that will return one or more PlasmaToken elements. </t>
          <t hangText="CMSToken"> is an optional element that contains the CMS Token that is included in a CMS message as part of a recipient info element.</t>
          <t hangText="CMSKey"> is an optional element that contains the key to be used in decrypting a CMS message.</t>
          <t hangText="Authentication"> return a GSS-API element as part of a GSS-API authentication process.  Also return a challenge.  A full discussion of the Authentication element can be found in <xref target="AuthElement"/>.</t>
        </list>
      </t>
      <section title="xacml:Response Element">
        <t>The xacml:Response element has the ability to return both a decision, but additionally information about why a decision was not made.</t>
        <t>The schema for the xacml:Response element is reproduced here for convenience:</t>
<figure><artwork>
&lt;xs:element name="Response" type="xacml:ResponseType"/&gt;
&lt;xs:complexType name="ResponseType"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:element ref="xacml:Result" maxOccurs="unbounded"/&gt;
  &lt;/xs:sequence&gt;
&lt;/xs:complexType&gt;

&lt;xs:element name="Result" type="xacml:ResultType"/&gt;
&lt;xs:complexType name="ResultType"&gt;
  &lt;xs:sequence&gt;
    &lt;xs:element ref="xacml:Decision"/&gt;
    &lt;xs:element ref="xacml:Status" minOccurs="0"/&gt;
    &lt;xs:element ref="xacml:Obligations" minOccurs="0"/&gt;
    &lt;xs:element ref="xacml:AssociatedAdvice" minOccurs="0"/&gt;
    &lt;xs:element ref="xacml:Attributes" minOccurs="0" maxOccurs="unbounded"/&gt;
    &lt;xs:element ref="xacml:PolicyIdentifierList" minOccurs="0"/&gt;
  &lt;/xs:sequence&gt;
&lt;/xs:complexType&gt;
</artwork></figure>
        <t>The xacml:Response element consists of one child the Result.  While the schema allows for multiple results to be returned, it is constrained to be a single Result returned in this specification as only a single request will ever be made at one time.</t>
        <t>The xacml:Response element consists of the following elements:
          <list style="hanging">
            <t hangText="xacml:Decision"> is a mandatory element that returns the possible decisions of the access control decision.  The set of permitted values are Permit, Deny, Indeterminate and No Policy.</t>
            <t hangText="xacml:Status"> is an optional element returned for the Indeterminate status which provides for the reason that a decision was not able to be reached.  Additionally it can contain hints for remedying the situation.  This document defines a new set of status values to be returned.  Formal declaration may be found in <xref target="IANA"/>.
              <list style="symbols">
                <t>gss-api indicates that a gss-api message has been returned as part of the authentication process.</t>
              </list>
            </t>
            <t hangText="xacml:Obligations"> is designed to force the PEP to perform specific actions prior to allowing access to the resource.  This element is not used by Plasma and SHOULD be absent.  If a response is returned with this element present, the processing MUST fail unless the PEP can perform the required action.  A set of Plasma specific obligations are found in <xref target="OurObligations"/>.</t>
            <t hangText="xacml:AssocatedAdvice"> is designed to give suggestions to the PEP about performing specific actions prior to allowing access to the resource.  This element is not used by Plasma and SHOULD be absent.  If the response is returned with this element present, processing will succeed even if the PEP does not know how to perform the required action.  A set of Plasma specific advoice elements are found in <xref target="OurObligations"/>.</t>
            <t hangText="xacml:Attributes"> provides a location for the server to return attributes used in the access control evaluation process.  Only those attributes requested in the Attributes section of the request are to be returned.  Since Plasma does not generally supply attributes for the evaluation process, this field will normally be absent.</t>
            <t hangText="xacml:PolicyIdentifierList"> provides a location to return the set of policies used to grant access to the resource.  This element is expected to be absent for Plasma.</t>
          </list>
        </t>
      </section>
    </section>

    <section title="Authentication Element" anchor="AuthElement">
      <t>One of the major goals in the Plasma work is to attempt and detach the process of authentication specifics from the Plasma protocol.  In order to accomplish this we are specifying the use of two general mechanisms (SAML and GSS-API) which can be configured and expanded without changing the core Plasma protocol itself.  The authentication element has two main purposes:  1) to process the authentication being used by the client and 2) to carry authenticated attributes for use in the policy evaluation.</t>

      <t>When transporting the authentication information, one needs to recognize that there may be a single or multiple messages in the dialog in order to complete the authentication process. In performing the process of authenticating, any or all of the elements in this structure can be used.  If there are multiple elements filled out, the server can choose to process the elements in any order.  This means that the Plasma protocol itself does not favor any specific mechanism.  The current set of mechanisms that are built into the Plasma specification are:
        <list style="symbols">
          <t>SAML Assertions - many different types of SAML assertions are supported.  The specification allows for both bearer and holder of key assertions.</t>
          <t>X.509 Certificates can be used for the purpose of authentication by creating a signature with the XML Digital Signature standard.</t>
          <t>GSS-API - the specification allows for the use of GSS-API in performing the authentication process.  The ABFAB mechanism in GSS-API is specifically designed for use in a federated community and allows for both authentication and attribute information to be queried from the identity server.</t>
          <t>WS-Trust tokens allow for much of the same type of information to be passed as SAML assertions.  The Plasma specification has been designed mailing for the use of WS-Trust tokens to be used for caching prior authentication sessions.</t>
        </list>
      </t>

      <t>More than one authentication element may be present in any single message.  This is because a client may need to provide more than one piece of data to a server in order to authenticate, for example a holder of key SAML Assertion along with a signature created with that key.  Additionally a client may want to provide the server an option of different ways of doing the authentication.  In a federated scenario, an X.509 certificate with a signature can be presented and the server may not be able to build a trust path to it's set of trust anchors.  In this case the server may opt to use the GSS-API/EAP protocol for doing the authentication.  Finally, the client may want to provide the server with a SAML Assertion that binds a number of attributes to it's identities so that the server does not need to ask for those attributes at a later time.</t>
      
      <t>When transporting the attribute information, one needs to recognize that there may be single or multiple messages in the dialog in order to complete the authorization process.  The PDP will return a status code of urn:oasis:names:xacml:1.0:status:missing-attribute in the event that one or more attributes are needed in order to complete the authorization process.  The details on how XACML returns missing attribute information is found in Section 7.17.3 of <xref target="XACML"/>.  When the list of attributes is returned, the client has two choices: 1) It can close the dialog, look for a source of the missing attributes and then start a new dialog, 2) it can just get an assertion for the missing attributes and send the new assertion as in a new request message within the same dialog.  The decision of which process to use will depend in part on how long it is expected to take to get the new attribute assertion to be returned.</t>

      <t>The schema for the Authentication element directly maps to the ability to hold the above elements.  The schema for the Authentication element is:</t>
      <?rfc linefile="1:ForDraft/AuthenticationType"?><figure><artwork>
  &lt;xs:element name="Authentication" type="AuthenticationType"/&gt;
  &lt;xs:complexType name="AuthenticationType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="SAML_Collection" minOccurs="0"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element ref="saml:Assertion" maxOccurs="unbounded"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element name="GSS_API" type="xs:hexBinary" minOccurs="0"/&gt;
      &lt;xs:element name="WS_Token" type="xs:hexBinary" minOccurs="0" maxOccurs="unbounded"/&gt;
      &lt;xs:element ref="ds:Signature" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
</artwork></figure>
<?rfc linefile="293:eps-token.xml"?>

      
      <section title="SAML Collection Element" anchor="Auth-SAML">

        <t>The SAML collection element provides a holder to place one or more SAML Assertions<cref source="jls">Should this be the collection element as it currently is, or should it be an unbounded occurs element instead?</cref>.  SAML has defined three different types of assertions in it's core specification <xref target="OASIS-CORE"/>:
          <list style="symbols">
            <t>Authentication: The assertion subject was authenticated by a particular means at a particular time.</t>
            <t>Attribute: The assertion subject is associated with the supplied attributes.</t>
            <t>Authorization Decision: A request to allow the assertion subject to access the specified resource has been granted or denied.</t>
          </list>
          While a PDP can use an Authorization Decision as input, this is unexpected and MAY be supported.  In addition there are three different ways that the subject of a SAML statement can be identified:
          <list style="symbols">
            <t>A bearer statement: These statements are belong to anybody who presents them.  The owner is required to take the necessary precautions to protect them.</t>
            <t>A holder of key statement: These statements belong to anybody who can use the key associated with the statement.  </t>
            <t>Subject name match: These statements can be associated to an identity by matching the name of the entity.</t>
          </list>
        </t>

        <t>When a holder of key identification is used, the XML Signature element is used to provide the key usage element.  </t>

        <t>We cannot pass a SAML assertion with attributes as a single attribute in the XACML request as XACML wants each of the different attributes to be individually listed in the request.  This greatly simplifies the XACML code, but means that one needs to do a mapping process from the SAML attributes to the XACML attributes.  This process has been discussed in Section 2 of <xref target="SAML-XACML"/>.  This mapping process MUST be done by a trusted agent, as there are a number of steps that need to be done including the validation of the signature on the SAML assertion.  This process cannot be done by the PEP that is residing on the Plasma client's system as this is considered to be an untrusted entity by the Plasma system as a whole.  One method for this to be addressed is to treat the Plasma server as both a PDP (for the Plasma client) and a PDP for the true XACML policy evaluator.  In this model, the Plasma server becomes the trusted PEP party and has the ability to do the necessary signature validation and mapping processes.  A new XACML request is then created and either re-submitted to itself for complete evaluation or to a third party which does the actual XACML processing.</t>


      </section>


      <section title="WS Trust Tokens">
        <t>WS Trust tokens are used in two different ways by this specification.  They can be used as the primary introduction method of a client to the server, or they can be used by the server to allow the client to be re-introduced to the server in such a way that the server can use cached information.</t>
        <t>WS Trust tokens come in two basic flavors:  Bearer tokens and Holder of Key tokens.  With the first flavor, presentation of the token is considered to be sufficient to allow the server to validate the identity of the presenter and know the appropriate attributes to make a policy decision.  In the second flavor some type of cryptographic operation is needed in addition to just presenting the token.  The Signature element <xref target="Auth-Sig"/> provides necessary infrastructure to permit the cryptographic result to be passed to the server.</t>
        <t>This document does not define the content or structure of any tokens to be used.  This is strictly an implementation issue for the servers in question.  This is because the client can treat the WS Token value presented to it as an opaque blob.  Only the servers need to understand how to process the blob.  However there are some additional fields which can be returned in addition to the token that need to be discussed:
          <list style="hanging">
            <t hangText="wst:TokenType"> SHOULD be returned if more than one type of token is used by the set of servers.  If a token type is returned to the client, the client MUST include the element when the token is returned to the server.</t>
            <t hangText="wst:BinarySecret"> SHOULD be returned for moderate duration tokens.  If a binary secret is returned then the client MUST provide protection for the secret value.  When a binary secret has been returned, then the client MUST create either a signature or MAC value and place it into the Signature element <xref target="Auth-Sig"/>. <cref source="JLS">I don't know of any way to say use the asymmetric key that you authenticated with originally - can this be done?</cref>.</t>
            <t hangText="wst:Lifetime"> MUST be returned with the wsu:Expires element set.  The wsu:Created element MAY be included.  The element provides the client a way to know when a token is going to expire and obtain a new one as needed.</t>
          </list>
        </t>
      </section>

      <section title="XML Signature Element" anchor="Auth-Sig">
        <t>When a holder of key credential is used to determine the attributes associated with an entity, there is a requirement that the key be used in a proof of possesion step so that the Plasma server can validate that the entity does hold the key.  The credentials can hold either asymmetic keys (X.509 certificates and SAML Assertions) or symmetic keys (WS Trust TOkens and SAML Assertions) which use Digital Signatures or Message Authentication Codes (MACs) respectively to create and validate a key usage statement.  The XML signature standard <xref target="XML-Signature"/> provides an infrastructure to for holding the proof of possession information.</t>

        <t>When the XML Signature element is used in the first message of the dialog, an XACML Request element be present in the document.  In this case the signature is to be computed over the XACML Request.  After the first message, the XACML Request element may be present, but usually is not.  When the XACML Request element is present in the subsequent messages it may be signed, however the SignBody XML element has been defined for use in subsequenct messages.  The XML schema for this element is:</t>

        <?rfc linefile="1:ForDraft/SignBodySchema"?><figure><artwork>
  &lt;xs:element name="SignBody" type="SignBodyType"/&gt;
  &lt;xs:complexType name="SignBodyType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="ChannelBinding" type="xs:base64Binary"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
</artwork></figure>
<?rfc linefile="337:eps-token.xml"?>

        <t>In the SignBodyType show above, the ChannelBinding element contains a value derived from the TLS tunnel used to transport the protocol.  The details for the value derivation can be find in section <xref target="ChannelBind"/>.  By the use of a value which is derived from the cryptographic keys used in for protecting the tunnel, it is possible for the server to verify that the authentication values computed were done specifically for this specific conversation and are not replayed from previous conversations.</t>

        <t>When creating either a signature or a MAC, the following statements hold:
          <list style="symbols">
            <t>The canonicalization algorithm Canonical XML 1.1 <xref target="XML-C14N11"/> without comments MUST be supported and SHOULD be used in preparing the XML node set for hashing.  Other canonicalization algorithms MAY be used.</t>
            <t>The Signature element SHOULD include an Enveloped Signature Transformation (Section 6.6.4 of <xref target="XML-Signature"/> but MAY be the root of the Plasm request.  Both methods MUST be supported by Plasma servers.</t>
            <t>The signature algorithms RSAwithSHA256 and ECDSAwithSHA256 MUST be supported by both clients and servers.  The MAC algorithm HMAC-SHA256 MUST be supported by both clients and servers.  Other signature and MAC algorithms MAY be supported.</t>
            <t>Set the additional attributes that must be included in a signature - what should they be?</t>
            <t>If an xacml:Request element is referenced by an XML Signature element, the xacml:Request element MUST include the ChannelBinding token (<xref target="ChannelBind"/>) as one of the attributes.</t>
            <t>The keys used in computing the authentication value need to be identified for the recipient.  For X509 certificates, the full raw certificate will normally be included as part of the signature, but MAY be referenced instead.  For SAML assertions, the specific assertion carrying the asymmetric key can be identified by TBD HERE.  In the event that symmetric keys are used by holder of key assertions, the specific assertion will be identified by TBD HERE.  In these cases the server is expected to be able to associated the key with the assertion by some means (either locally or perhaps encrypted into the assertion).</t>
          </list>
        </t>
      </section>
        
      <section title="GSS-API Element">
        <t>TBD - rules for using GSS-API in general and the EAP version from ABFAB particularly.
          <list style="symbols">
            <t>How to build the name.</t>
            <t>Must use a secure tunnel for the outer EAP method and an appropriate inner EAP method(s) to accomplish the required level of authentication.</t>
            <t>Server query of attributes and specification of LOA to the EAP IdP.</t>
            <t>Any additional Trust model items.</t>
            <t>How round trips are accomplished - the only case that a server will send back an Authentication element is on return processing of GSS-API messages.  </t>
          </list>
        </t>
      </section>

    </section>
    
    <section title="Role Token and Policy Acquisition" anchor="getPolicy">
      <t>In order to send a message using a Plasma server, the first step is to obtain a role token that provides the description of the lables that can be applied and the authorization to send a message using one or more of the labels.  The process of obtaining the role token is designed to be a query/response round trip to the Plasma server.  In practice a number of round trips may be necessary in order to provide all of the identity and attributes to the Plasma server that are needed to evaluate the policies for the labels.  An example of a request token can be found in <xref target="GetRoleExample"/>.</t>

      <t>When a Plasma server receives a role token request from a client, it needs to perform a policy evaluation for all of the policies that it arbitrates along with all of the options for those policies.  In general, the first time that a client requests a role token from the server, it will not know the level of authentication that is needed or the set of attributes that needs to be presented in order to get the set of tokens.  A server MUST NOT issue a role token without first attempting to retrieve from an attribute source (either the client or a back end server) all of the attributes required to check all policies.  Since the work load required on the server is expected to be potentially extensive for creating the role token, it is expected that the token returned will be valid for a period of time.  This will allow for the frequency of the operation to be reduced.  While the use of an extant role token can be used for identity proof, it is not generally suggested that a new token be issued without doing a full evaluation of the attributes of the client as either the policy or the set of client attributes may have changed in the mean time.</t>  


      <section title="Role Token Request" anchor="getPolicy-Request">

        <t>The process starts by a client sending a server a role token request.  Generally, but not always, the request will include some type of identity proof information and a set of generic attributes.  It is suggested that, after the first successful conversation, the client cache hints about the identity and attributes needed for a server.  This allows for fewer round trips in later conversations.</t>

        <t>The role token request, as with all requests, is always built using the eps:PlasmaRequest XML structure.  The xacml:Request element MUST be included on the first message, but is omitted on subsequent authentication round trips.  The eps:Authentication MAY be included on the first message (depending on how authentication is going to be done) and MUST be included on subsequent authentication round trips.</t>

        <t>When sending the role token there are a number of things that can be done.  These include:
          <list style="symbols">
1            <t>The client can optionally include an attribute to specify the name to be used for policy evaluation purposes.  If this attribute is absent, then the name is extracted from the identity proof provided externally.  This attribute allows for a client to get delegated permissions for a third party.  One case where this would be used is for an executive assistant to be able to act as the executive for reading certain types of messages.  When this behavior is desired, the following attribute is used:
              <vspace blankLines='1'/>
              Category="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject"
              <vspace blankLines='0'/>
              AttributeId="urn:oasis:names:tc:xacml:1.0:data-type:rfc822Name"
              <vspace blankLines='1'/>
              Plasma servers MUST implement the rfc822Name attribute id, other name forms MAY be implemented as well.
            </t>

            <t>The client MUST include an action attribute.  This document defines the action attribute to be used for requesting role tokens:
              <vspace blankLines='1'/>
              Category="urn:oasis:name:tc:xacml:3.0:attribute-category:action"
              <vspace blankLines='0'/>
              AttributeId="urn:ietf:plasma:action-id"
              <vspace blankLines='0'/>
              Attribute Value: GetRoleTokens
            </t>

            <t>If the client is using the XML Digital Signature element in this message, then the client MUST include the cryptographic channel binding token (<xref target="ChannelBind"/>) in the set of XACML attributes.</t>

            <t>
              The client can optionally include a SAML assertion in the Authentication section of the message.  See section <xref target="Auth-SAML"/> for more information on how to deal with SAML assertions carrying attribute statements.</t>
            
          </list>
        </t>

        <t>An example of a message requesting the set of policy information is:
          <?rfc linefile="1:ForDraft/getPolicyRequest"?><figure><artwork>
&lt;esp:PlasmaRequest&gt;
  &lt;eps:Authentication&gt;...&lt;/eps:Authentication&gt;
  &lt;xacml:Request&gt;
    &lt;xacml:Attributes Category="...:action"&gt;
      &lt;xacml:Attribute AttributeId="urn:plasma:action-id"&gt;
        &lt;xacml:AttributeValue
           DataType="http://www.w3.org/2001/XMLSchema#string"&gt;
          GetRoleToken&lt;/xacml:AttributeValue&gt;
      &lt;/xacml:Attribute&gt;
    &lt;/xacml:Attributes&gt;
  &lt;/xacml:Request&gt;
&lt;/esp:PlasmaRequest&gt;
</artwork></figure>
<?rfc linefile="408:eps-token.xml"?>
          In this example the identity information of the requester is implicit from the data in the Authentication element.</t>
        
      </section>

      <section title="Request Role Token Response" anchor="getPolicy-Response">
        <t>In response to a role token request message, the Plasma server returns a role token request message.  The response message uses the eps:PlasmaResponse XML structure.  When a response message is create the following should be noted:
          <list style="symbols">
            <t>An xacml:Decision is always included in a response message.  The values permitted are:
              <list style="hanging">
                <t hangText="Permit"> is used to signal success.  In this case the response message MUST include an eps:PlasmaTokens element.</t>
                <t hangText="Deny"> is used to signal failure.  In this case the xacml:Status element MUST be present an contain a failure reason.</t>
                <t hangText="Indeterminate"> is used to signal that a result cannot yet be reached.  In this case there must be a request for additional attributes in the xacml:Result/Attributes element or additional authentication information to be carried in TBD.</t>
                <t hangText="NotApplicable"> is returned if the Plasma server does not have the capability to issue role tokens.</t>
              </list>
            </t>
          </list>
        </t>
          
        <t>An example of a message returning the set of policy information is:
          <?rfc linefile="1:ForDraft/getPolicyResponse"?><figure><artwork>
&lt;eps:PlasmaResponse&gt;
  &lt;xacml:Response&gt;
    &lt;xacml:Result&gt;
      &lt;xacml:Decision&gt;Permit&lt;/xacml:Decision&gt;
    &lt;/xacml:Result&gt;
  &lt;/xacml:Response&gt;
  &lt;eps:PlasmaTokens&gt;
    &lt;eps:PlasmaToken&gt;
      &lt;eps:PolicyList&gt;
        &lt;eps:Policy&gt;
          Details of a policy
        &lt;/eps:Policy&gt;
        ... More policies ...
        &lt;wst:RequestSecurityTokenResponse&gt;
          &lt;wst:TokenType&gt;urn:...:plasma:roleToken&lt;/wst:TokenType&gt;
          &lt;wst:RequestedSecurityToken&gt;...&lt;/wst:RequestedSecurityToken&gt;
        &lt;/wst:RequestSecurityTokenResponse&gt;
      &lt;/eps:PolicyList&gt;
    &lt;/eps:PlasmaToken&gt;
  &lt;/eps:PlasmaTokens&gt;
&lt;/eps:PlasmaResponse&gt;
</artwork></figure>
<?rfc linefile="428:eps-token.xml"?>
          In this example, the Email Policy Service is returning three different policies that can be used along with a security token and a key to be used with the token when sending a message.
        </t>

        <section title="PlasmaTokens XML element">

          <t>The eps:PlasmaTokens element is used to return one or more tokens to the client.  Each token returned will contain one or more policies that can be asserted with the token and the token itself.  Additionally the name of a Plasma server to be used with the token can be included as well as cryptographic information to be used with the token.</t>

          <t>The schema used for the PlasmaTokens element is:</t>
          <?rfc linefile="1:ForDraft/PlasmaTokensSchema"?><figure><artwork>
  &lt;xs:element name="PlasmaToken" type="PlasmaTokenType"/&gt;
  &lt;xs:complexType name="PlasmaTokenType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="PDP" type="xs:anyURI" maxOccurs="unbounded"/&gt;
      &lt;xs:choice&gt;
        &lt;xs:element name="PolicyList"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element name="Policy" type="PolicyType" maxOccurs="unbounded"/&gt;
            &lt;/xs:sequence&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
        &lt;xs:element ref="Label"/&gt;
      &lt;/xs:choice&gt;
      &lt;xs:element ref="wst:RequestSecurityTokenResponse"/&gt;
      &lt;xs:element ref="xacml:Obligations" minOccurs="0"/&gt;
      &lt;xs:element ref="xacml:AssociatedAdvice" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="PolicyType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="Name" type="xs:string"/&gt;
      &lt;xs:element name="Identifier" type="xs:string"/&gt;
      &lt;xs:element name="Options" type="xs:anyType"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
</artwork></figure>
<?rfc linefile="437:eps-token.xml"?>

          <t>The eps:PlasmaTokens field will contain one or more eps:PlasmaToken elements.</t>

          <t>The eps:PlasmaToken element contains the following items:
            <list style="hanging">
              <t hangText="PDP"> is an optional element.  If the element is present, it provides one or more URLs to be used for containing a Plasma server for the purpose of sending a message.  This element allows for the use of different Plasma servers for issuing role tokens and message tokens.  No ranking of the servers is implied by the order of the URLs returned.</t>
              <t hangText="PolicyList"> contains the description of one or more policies that can be asserted using the issued token.  Any of the policies contained in the list may be combined together using the policy logic in constructing a label during the send message process.</t>
              <t hangText="Label"> contains a single specific label.  This element is returned as part of a read message token to allow for replies to be formulated by an entity that cannot generally originate a message using the policy.</t>
              <t hangText="wst:RequestSecurityTokenResponse"> contains the actual token itself.</t>
            </list>
          </t>

          <t>The eps:PolicyType type is used to represent the elements of a policy to the client.  The elements in this type are:
            <list style="hanging">
              <t hangText="Name"> contains a display string that represents the policy.  This element is localized in response to the TBD attribute in the TBD field.</t>
              <t hangText="Identifier"> contains a "unique" identifier for the policy.  This is the value that identifies the policy to the software.  The type for the value is defined as a string and is expected to be either a URN, and Object Identifier or some equally unique identifier.</t>
              <t hangText="Options"> allows for a set of options to be specified for the policy.  The set of options is dependent on the policy and only those clients which have pre-knowledge of a policy are expected to be able to deal with them.  The options can range from a simple yes/no selection to a list of strings.  An example of using options is provided by the basic policies defined in [TBD] where a set of RFC 822 names is provided.<cref source="JLS">I keep wondering if we need to define a set of minimal structures that can be used for options so that the entirety is not pushed off onto the client and server to parse and understand the structures.</cref>
              </t>
            </list>
          </t>

          <t>When building the wst:RequestSecurityTokenResponse element, the following should be noted:
            <list>
              <t>A wst:RequestedSecruityToken element containing the security token MUST be included.  The format of the security token is not specified and is implementation specific, it is not expected that .  Examples of items that could be used as security tokens are SAML statements, encrypted record numbers in a server database. </t>
              <t>A wst:Lifetime giving the life time of the token SHOULD be included.  It is not expected that this should be determinable from the token itself and thus must be independently provided.  There is no guarantee that the token will be good during the lifetime as it make get revoked due to changes in credentials, however the client is permitted to act as if it were.  The token provided may be used for duration.  If this element is absent, it should be assumed that the token is either a one time token or of limited duration.</t>
              <t>Talk about cryptographic information</t>
            </list>
          </t>
        </section>
      </section>
    </section>

    <section title="Sending A Message" anchor="sendMessage">

      <t>
        After having obtained a role token from a Plasma server, the client can then prepare to send a message by requesting a message token from the Plasma server.  As part of the preparatory process, the client will construct the label to be applied to the message from the set of policies that it can assert, determine the optional elements for those policies which have options, generate the random key encryption key and possible create the key recipient structures for the message.  Although this section is written in terms of a CMS Encrypted message, there is nothing to prevent the specification of different formats and still use this same basic protocol.  An example of a request token exchange can be found in <xref target="GetCMSTokenRequest"/>.</t>

      <section title="Send Message Request" anchor="sendMessage-Request">
        
        <t>The send message request is built using the eps:PlasmaRequest XML structure.  When building the request, the following aplies:
          <list style="symbols">

            <t>The eps:Authentication element MAY be included in the initial message.  The authorization is supplied by the role token which is included in the data structure, however authentication may be required as well.  The authentication data is placed here.</t>

            <t>The xacml:Request element MUST be included in the initial message.</t>

            <t>The client MUST include an action attribute.  This document defines the action attribute to be used for purpose:
              <vspace blankLines='1'/>
              Category = "urn:oasis:name:tc:xacml:3.0:attribute-category:action"
              <vspace blankLines='0'/>
              AttributeId="urn:ietf:plasma:action-id"
              <vspace blankLines='0'/>
              Attribute Value= GetSendCMSToken
            </t>

            <t>The client MUST include a data attribute.  This attribute contains the information that is used to build the CMS Message token to be returned.  There MAY be more than one data attribute, but this will not be a normal case.  More details on this attribute are in <xref target="MessageTokenRequest"/>.</t>

            <t>If the client is using the XML Digital Signature element in this message, then the client MUST include the cryptographic channel binding token (xref target="ChannelBind"/>) in the set of XACML attributes.</t>

          </list>
        </t>
            
        <t>An example of a message returning the set of policy information is:
          <?rfc linefile="1:ForDraft/sendMessageRequest"?><figure><artwork>
&lt;eps:PlasmaRequest&gt;
  &lt;eps:Authentication&gt;
    &lt;eps:WS_Token&gt;
      Role Token goes here
    &lt;/eps:WS_Token&gt;
    &lt;xacml:Request&gt;
      &lt;xacml:Attributes Category="...:action"&gt;
        &lt;xacml:Attribute AttributeId="urn:plasma:action-id"&gt;
          &lt;xacml:AttributeValue&gt;
            GetSendCMSToken
          &lt;/xacml:AttributeValue&gt;
        &lt;/xacml:Attribute&gt;
      &lt;/xacml:Attributes&gt;
      &lt;xacml:Attributes Category="...:data"&gt;
        &lt;xcaml:Attribute AttributeId="urn:plasma:data-id"&gt;
          &lt;xacml:AttributeValue&gt;
            Label and keys
          &lt;/xacml:AttributeValue&gt;
        &lt;/xcaml:Attribute&gt;
      &lt;/xacml:Attributes&gt;
    &lt;/xacml:Request&gt;
  &lt;/eps:Authentication&gt;
&lt;/eps:PlasmaRequest&gt;
</artwork></figure>
<?rfc linefile="501:eps-token.xml"?>
        </t>

        <section title="CMS Message Token Data Structure" anchor="MessageTokenRequest">
          <t>The message token data structure is used as an attribute to carry the necessary information to issue a CMS message token.  The schema that describes the structure is:
          </t>

          <?rfc linefile="1:ForDraft/RequestMessageData"?><figure><artwork>
  &lt;xs:element name="MessageTokenRequest" type="MessageTokenRequestType"/&gt;
  &lt;xs:complexType name="MessageTokenRequestType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="RoleToken"/&gt;
      &lt;xs:element ref="Label"/&gt;
      &lt;xs:element ref="RecipientInfo" minOccurs="0" maxOccurs="unbounded"/&gt;
      &lt;xs:element name="KEK" type="xs:hexBinary" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:element name="RecipientInfo" type="RecipientInfoType"/&gt;
  &lt;xs:complexType name="RecipientInfoType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="Subject" maxOccurs="unbounded"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:simpleContent&gt;
            &lt;xs:extension base="xs:anySimpleType"&gt;
              &lt;xs:attribute name="type" type="xs:string" use="required"/&gt;
            &lt;/xs:extension&gt;
          &lt;/xs:simpleContent&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element name="LockBox" type="xs:hexBinary"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
</artwork></figure>
<?rfc linefile="508:eps-token.xml"?>

          <t>When used in an xacml:Attribute, the structure is identified by:
            <vspace blankLines='1'/>
            Category = "urn:oasis:name:tc:xacml:3.0:attribute-category:data"
            <vspace blankLines='0'/>
            AttributeId = "urn:ietf:plasma:data-id"
            <vspace blankLines='0'/>
            DataType = "http://www.w3.org/2001/XMLSchema#anyType"
          </t>

          <t>The elements of the structure are used as:
            <list style="hanging">
              <t hangText="RoleToken"> contains the previously issued role token which provides the authorization to use the policies in the label.</t>
              <t hangText="Label"> contains the label to be applied to the message.</t>
              <t hangText="Recipients"> is an optional element that contains one or more recipient info structures.</t>
              <t hangText="KEK"> is an optional element that contains the KEK to decrypt the CMS lock box.</t>
            </list>
            One or both of KEK and Recipients MUST be present.
          </t>

          <t>The elements of the RecipientInfoType structure are:
            <list style="hanging">
              <t hangText="Subject"> contains a subject identifier.  Since a CMS recipient info structure does not contain a great deal of information about the recipient, this element contains a string which can be used to identify the subject.  This will normally be an RFC 822 name.  Multiple subject names can be provided for a single lock box.  This allows for the use a KEK value that is shared among the set of recipients but not the Plasma server.</t>
              <t hangText="LockBox"> contains a hex encoded CMS Recipient Info structure.  If the recipient info structure is placed here, it MUST NOT be placed in the CMS EnvelopedData structure as well.</t>
            </list>
          </t>

        </section>
        
      </section>


      <section title="Send Message Response" anchor="sendMessage-Response">
        
        <t>In response to a send message request, the Plasma server returns a send message response message.  The response messages uses the eps:PlasmaResponse XML structure.  When the response message is created, the following should be noted:
          <list style="symbols">
            <t>The xacml:Decisions is always included in the response.  If the 'Permit' value is returned then the eps:CMSToken element MUST be present.</t>
            <t>The eps:CMSToken element is included in a success message.  It contains value of the keyatt-eps-kek attribute defined in <xref target="EPS-CMS"/>.</t>
          </list>
        </t>

        <t>An example of a message returning the set of policy information is:
          <?rfc linefile="1:ForDraft/sendMessageResponse"?><figure><artwork>
&lt;eps:PlasmaResponse&gt;
  &lt;xacml:Response&gt;
    &lt;xacml:Result&gt;
      &lt;xacml:Decision&gt;Permit&lt;/xacml:Decision&gt;
    &lt;/xacml:Result&gt;
  &lt;/xacml:Response&gt;
  &lt;eps:CMSToken&gt;234e34d3&lt;/eps:CMSToken&gt;
&lt;/eps:PlasmaResponse&gt;
</artwork></figure>
<?rfc linefile="551:eps-token.xml"?>
        </t>
      </section>
    </section>

    <section title="Decoding A Message" anchor="readMessage">
      
      <t>When the receiving agent is ready to decrypt the message, it identifies that there is a KEKRecipientInfo object which contains a key attribute identified by id-keyatt-eps-token.  It validates that communicating with the Email Policy Service is within local policy and then sends a request to the service to obtain the encryption key for the message.</t>
      

      <t>In some cases the recipient of a message is not authorized to use the same set of labels for sending a message.  For this purpose a token can be returned in the message along with the key so that recipient of the can reply to the message using the same set of security labels.</t>

      <section title="Requesting Message Key" anchor="readMessage-Request">
        <t>The client sends a request to the Plasma server that is identified in the token.  For the CMS base tokens, the address of the Plasma server to use is defined in <xref target="EPS-CMS"/> this is located in the aa-eps-url attribute.</t>

        <t>The request uses the eps:PlasmaRequest XML structure.  When building the request, the following should be noted:
          <list style="symbols">
            <t>The xacml:Request MUST be present in the first message of the exchange.</t>
            <t>The action used to denote that a CMS token should be decrypted is:
              <vspace blankLines="1"/>
              Category="urn:oasis:names:tc:xaml:3.0:attribute-category:action"
              <vspace blankLines="0"/>
              AttributeId="urn:ietf:plasma:action-id"
              <vspace blankLines="0"/>
              Attribute Value: ParseCMSToken
            </t>
            <t>The CMS token to be cracked is identified by:<cref source="jls">I need to think this case out a bit more - I want to be able to supply multiple CMS tokens at one time, however I am not sure if that is do able because if you get a success for one token and a deny for another token there is no way to handle that in the xacml:Response.</cref>
              <vspace blankLines="1"/>
              Category="urn:oasis:names:tc:xacml:3.0:attribute-cateogry:data"
              <vspace blankLines="0"/>
              AttributeId="urn:ietf:plasma:data-id"
              <vspace blankLines="0"/>
              Attribute Value: CMSToken
            </t>
            <t>In the event that a reply to role token is wanted as well, then that is supplied as a separate action:
              <vspace blankLines="1"/>
              Category="urn:oasis:names:tc:xaml:3.0:attribute-category:action"
              <vspace blankLines="0"/>
              AttributeId="urn:ietf:plasma:action-id"
              <vspace blankLines="0"/>
              Attribute Value: GetReplyToken
            </t>

            <t>If the client is using the XML Digital Signature element in this message, then the client MUST include the cryptographic channel binding token (xref target="ChannelBind"/>) in the set of XACML attributes.</t>

          </list>
        </t>

        <t>An example of a message returning the set of policy information is:
          <?rfc linefile="1:ForDraft/readMessageRequest"?><figure><artwork>
&lt;eps:PlasmaRequest&gt;
  &lt;eps:Authentication&gt;...&lt;/eps:Authentication&gt;
  &lt;xacml:Request&gt;
    &lt;xacml:Attributes Category="...:action"&gt;
      &lt;xacml:Attribute AttributeId="..:action-id"&gt;
        &lt;xacml:AttributeValue&gt;ParseCMSToken&lt;/xacml:AttributeValue&gt;
      &lt;/xacml:Attribute&gt;
    &lt;/xacml:Attributes&gt;
    &lt;xacml:Attribute Category="...:data"&gt;
      &lt;xacml:Attribute AttreibuteId="..:data-id"&gt;
        &lt;xacml:AttributeValue&gt;
          Hex encoded CMS Token Value
        &lt;/xacml:AttributeValue&gt;
      &lt;/xacml:Attribute&gt;
    &lt;/xacml:Attribute&gt;
  &lt;/xacml:Request&gt;
&lt;/eps:PlasmaRequest&gt;
</artwork></figure>
<?rfc linefile="600:eps-token.xml"?>
        </t>
      </section>

      <section title="Requesting Message Key Response" anchor="readMessage-Response">
        <t>In response to a message key request, the Plasma server returns a decrypted key.  The response message uses the eps:Plasma XML structure.  When a response message is create the following should be noted:
          <list style="symbols">
            <t>If the value of xacml:Decision is Permit, then response MUST include an eps:CMSKey element.</t>
            <t>If a reply token was requested and granted, then the response MUST include an eps:PlasmaToken element.  The eps:PlasmaToken element MUST use the Label option</t>
          </list>
        </t>
        
        <t>An example of a message returning the set of policy information is:
          <?rfc linefile="1:ForDraft/readMessageResponse"?><figure><artwork>
&lt;eps:PlasmaResponse&gt;
  &lt;xacml:Response&gt;
    &lt;xacml:Result&gt;
      &lt;xacml:Decision&gt;Permit&lt;/xacml:Decision&gt;
    &lt;/xacml:Result&gt;
  &lt;/xacml:Response&gt;
  &lt;eps:CMSKey&gt;
    &lt;eps:DisplayString&gt;Label TExt&lt;/eps:DisplayString&gt;
    &lt;eps:KEK&gt;hex based KEK&lt;/eps:KEK&gt;
  &lt;/eps:CMSKey&gt;
&lt;/eps:PlasmaResponse&gt;
</artwork></figure>
<?rfc linefile="613:eps-token.xml"?>
        </t>
      </section>
    </section>

    <section title="Plasma Attributes">
      <t>In this document a number of different XAMCL attributes have been defined, this section provides a more detailed description of these elements.</t>
      
      <section title="Data Attributes">

        <section title="Channel Binding Data Attribute" anchor="ChannelBind">
          <t>The channel binding data attribute is used to provide for a binding of the TLS session that is being used to transport the Plasma messages with the content of the Plasma requests themselves.  There is a need for the server to be able to validate that the cryptographic operations related to holder of key statements be made specifically for  the current conversation and not be left over from a previous one as a replay attack.  By deriving a cryptographic value from the shared TLS session key and signing that value we are able to do so.</t>
          <t>The channel binding value to be used is created by the TLS key exporter specification defined in RFC 5705 <xref target="RFC5705"/>.  This allows for a new cryptographic value to be derived from the existing shared secret key with additional input to defined the context in which the key is being derived.  When using the exporter, the label to be input into the key exporter is "EXPORTER_PLASMA".  The value to be derived will be 512 bits in length, and no context is provided to the exporter.</t>

          <t>When used as an XACML attribute in a request:
             <list>
               <t>The category of the attribute is "urn:oasis:names:tc:xacml:3.0:attribute-category:data".</t>
               <t>The AttributeId attribute is "urn:ietf:params:xml:plasma:data-id:ChannelBinding".</t>
               <t>The Issuer attribute is absent.</t>
               <t>The DataType is either base64Binary or hexBinary</t>
             </list>
          </t>

          <t>The same value is used for both the XACML channel binding data attribute and the XML channel binding structure defined in <xref target="Auth-Sig"/>.</t>
        </section>

        <section title="CMS Signer Info Data Attribute" anchor="SignerInfo">
          <t>In many cases a policy stays that the client is required to sign the message before encrypting it.  The server cannot verify that a signature is applied to the message and included, but we can require that a signature be supplied to the server.  This signature can then be validated by the server (except for the message digest attribute value), and the server can take a hash of the value and return it as part of the key returned to a decrypting agent.  This agent can then validate that the signature is a part of the message and complain if it absent.  This means we do not have an enforcement mechanism, but we do have a way of performing an audit at a later time to see that the signature operation was carried out correctly.</t>
          <t>By requiring that a signature be supplied to the server as part of the authentication process, the Plasma server can also be setup so that the supplied signature is automatically setup for archival operations.  One way to do archiving is to use the data records defined in <xref target="RFC4998"/>.</t>
          <t>The following applies when this data value is present:
            <list>
              <t>The Category attribute is "urn:oasis:names:tc:xacml:3.0:attribute-category:data".</t>
              <t>The AttributeId attribute is "urn:ietf:params:xml:plasma:data-id:CMSSignerInfo".</t>
              <t>The Issuer attribute is absent.</t>
              <t>The DataType attribute is either base64Binary or hexBinary.</t>
            </list>
          </t>
        </section>

        <section title="S/MIME Capabilities Data Attribute" anchor="SMimeCaps">
          <t>Policies sometimes require that specific algorithms be used in order to meet the security needs of the policy.  This attribute allows for an S/MIME Capabilities to be carried in a DER encoded SMIMECapabilities ASN.1 structure to be transmitted to the client.  Details on how the S/MIME Capabilities function can be found in <xref target="SMIME-MSG"/>.</t>
          <t>The following attributes are to be set for the data value:
            <list>
              <t>The Category attribute is "urn:oasis:names:tc:xacml:3.0:attribute-category:data".</t>
              <t>The AttributeId attribute is "urn:ietf:params:xml:plasma:data-id:SMIME-Capabilties".</t>
              <t>The Issuer attribute is absent.</t>
              <t>The DataType attribute is either base64binary or hexBinary.</t>
            </list>
          </t>
        </section>
      </section>

      <section title="Obligations and Advice" anchor="OurObligations">
        <t>Obligations and advice consist of actions that the Plasma server either requires or requests that the client PEP perform in order to gain access or before granting access to the data.  These normally represent actions or restrictions that the PDP itself cannot enforce and thus are not input attributes to the policy evaluation.  The same set of values can be used either as obligations or advice, the difference being that if the PEP cannot do an obligation it is required to change the policy decision.</t>

        <section title="Signature Required">
          <t>Many policies require that a message be signed before it is encrypted and sent.  Since the unencrypted version of message is not sent to the Plasma server, the policy cannot verify that a signature has been placed onto the signed message.  The attribute is not for use as a returned obligation from an XACML decisions, rather it is for a pre-request obligations used in role responses (<xref target="getPolicy-Response"/>).</t>

          <t>When used as an Obligation:
             <list>
               <t>The ObligationId attribute is "urn:ietf:params:xml:plasma:obligation:signature-required".</t>
               <t>A S/MIME Capabilities data value can optionally be included.  If it is included, then it contains the set of S/MIME capabilities that describes the set of signature algorithms from which the signature algorithm for the message MUST be selected.</t>
             </list>
          </t>
        </section>

        <section title="Encryption Required">
          <t>Occasionally a policy requires a specific set of encryption algorithms be used for a message, when this is the case then the encryption required obligation is included in the returned set of obligations.  If the default set of encryption algorithms is sufficient then the obligation is omitted.</t>

          <t>When used as an Obligation:
            <list>
              <t>The ObligationId attribute is "urn:ietf:params:xml:plasma:obligation:encryption-required".</t>
              <t>An S/MIME Capabilities data value MUST be included containing the set of permitted encryption algorithms.  The algorithms included MUST include a sufficient set of algorithms for the message to be encrypted.  An absolute minimum would be a content encryption algorithm and key encryption algorithm.</t>
            </list>
          </t>
        </section>
      </section>
    </section>


    <section title="Security Considerations">
      <t>To be supplied after we have a better idea of what the document looks like.</t>
    </section>
    <section title="IANA Considerations" anchor="IANA">
      <t>We define the following name spaces</t>
      <t>New name space for the plasma documents urn:ietf:params:xml:ns:plasma</t>
      <t>Define a new action name space urn:ietf:params:xml:ns:plasma:action-id
        <list>
          <t>GetRoleTokens</t>
          <t>GetSendCMSToken</t>
          <t>ParseCMSToken</t>
          <t>GetReplyToken</t>
        </list>
      </t>
      <t>Define a new data name space urn:ietf:params:xml:ns:plasma:data-id
        <list>
          <t>CMSToken</t>
          <t>ChannelBinding</t>
          <t>SMIME-Capabilities</t>
        </list>
      </t>
      <t>Define a new name space for status codes at urn:ietf:params:xml:ns:plasma:status.  The initial set of values is
        <list style="hanging">
          <t hangText="authentication-error">This identifier indicates that the authentication methods failed to successfully complete.</t>
        </list>
      </t>
      <t>Define a new name space for obligations.  The same namespace will be used both for obligations and for advice and the values may appear in either section.
        <list style="hanging">
          <t hangText="signature-required">This identifier indicates that that the encrypted body must contain a signature element.  The data value of this type shall be "http://www.w3.org/2001/XMLSchema#hexBinary" and the data structure shall consist of a DER encoded CMSCapabilities structure <xref target="SMIME-MSG"/> with the list of permitted signature algorithms.  If there are no restrictions on the algorithms or the restriction is implicit, then the data value MAY be omitted.</t>
          <t hangText="encryption-algorithms"> see above </t>
          <t hangText="ambigous-identity"> The identity of the client is either not stated in a form the Plasma server understands, or there are multiple identities in the authentication data.  To remedy this situation, the client includes an explicit identity in the xacml:Reqeust element.</t>
        </list>
      </t>
      <t>We define a schema in appendix A at urn:ietf:params:xml:schema:plasma-RFCTBD</t>

    </section>
    <section title="Open Issues">
      <t>List of Open Issues:
        <list style="symbols">
          <t>JLS: URL definitions - do we need a new schema or do we just overload https?  For our URLs - do we require that they be passed through the internationalization step first?  Probably should since the locale information is on the server and the client might not agree.</t>
          <t>JLS: Should we require that any SignatureProperty be present for XML Signature elements?</t>
          <t>JLS: Need to figure out an appropriate way to reference the assertion from a dig sig element.  Could use a special version of RetrievalMethod with a transform, but that does not seem correct.  May need to define a new KeyInfo structure to do it.</t>
          <t>JLS: Should X.509 certificates and attribute certificates be fully specified as an authentication method?</t>
          <t>JLS: Should a SignerInfo attribute be placed under the access-subject Category for a senders version and under Environment for a machine version?  Currently both are under Data</t>
        </list>
      </t>
    </section>
  </middle>
  <back>
    <references title="Normative References">
      <reference anchor="ABFAB">
        <front>
          <title>A GSS-API Mechanism for the Extensible Authentication Protocol</title>
          <author initials="S." surname="Hartman" />
          <author initials="J." surname="Howlett" />
          <date month="Oct" year="2011" />
        </front>
        <seriesInfo name="Work In Progress" value="draft-ietf-abfab-gss-eap-04" />
      </reference>
      <?rfc linefile="1:bibxml/reference.RFC.2119.xml"?>

<reference anchor='RFC2119'>

<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date year='1997' month='March' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='http://www.rfc-editor.org/rfc/rfc2119.txt' />
<format type='HTML' octets='17491' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5777' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>
<?rfc linefile="752:eps-token.xml"?>
      <reference anchor="EPS-CMS">
        <front>
          <title>Email Policy Service ASN.1 Processing</title>
          <author initials="J." surname='Schaad' fullname='Jim Schaad'/>
          <date month='Jan' year='2011'/>
        </front>
        <seriesInfo name='Work In Progress' value='draft-schaad-plamsa-cms'/>
      </reference>
      <?rfc linefile="1:bibxml4\reference.w3c.REC-xmldsig-core-20080610.xml"?>

<reference anchor='XML-Signature'
           target='http://www.w3.org/TR/2008/REC-xmldsig-core-20080610'>
<front>
<title>XML Signature Syntax and Processing (Second Edition)</title>

<author initials='T.' surname='Roessler' fullname='Thomas Roessler'>
    <organization />
</author>

<author initials='J.' surname='Reagle' fullname='Joseph Reagle'>
    <organization />
</author>

<author initials='F.' surname='Hirsch' fullname='Frederick Hirsch'>
    <organization />
</author>

<author initials='D.' surname='Eastlake' fullname='Donald Eastlake'>
    <organization />
</author>

<author initials='D.' surname='Solo' fullname='David Solo'>
    <organization />
</author>

<date month='June' day='10' year='2008' />
</front>

<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-xmldsig-core-20080610' />
<format type='HTML' target='http://www.w3.org/TR/2008/REC-xmldsig-core-20080610' />
</reference>
<?rfc linefile="761:eps-token.xml"?>
      <?rfc linefile="1:bibxml4\reference.w3c.REC-xml-c14n11-20080502.xml"?>

<reference anchor='XML-C14N11'
           target='http://www.w3.org/TR/2008/REC-xml-c14n11-20080502'>
<front>
<title>Canonical XML Version 1.1</title>

<author initials='J.' surname='Boyer' fullname='John Boyer'>
    <organization />
</author>

<author initials='G.' surname='Marcy' fullname='Glenn Marcy'>
    <organization />
</author>

<date month='May' day='2' year='2008' />
</front>

<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-xml-c14n11-20080502' />
<format type='HTML' target='http://www.w3.org/TR/2008/REC-xml-c14n11-20080502' />
</reference>
<?rfc linefile="762:eps-token.xml"?>
      <reference anchor="WS-TRUST" target="http://docs.oasis-open.org/ws-sx/ws-trust/200512/ws-trust-1.3-os.html">
        <front>
          <title>WS-Trust 1.3</title>
          <author initials="K" surname="Lawrence"/>
          <author initials="C" surname="Kaler"/>
          <author initials="A" surname="Nadalin"/>
          <author initials="M" surname="Goodner"/>
          <author initials="M" surname="Gudgin"/>
          <author initials="A" surname="Barbir"/>
          <author initials="H" surname="Granqvist"/>
          <date month="March" day='19' year='2007'/>
        </front>
        <seriesInfo name="OASIS Standard" value="ws-trust-200512"/>
        <format type='HTML' target='http://docs.oasis-open.org/ws-sx/ws-trust/200512/ws-trust-1.3-os.html'/>
      </reference>
      <reference anchor="XACML" target="http://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-cs-01.en.doc">
        <front>
          <title>eXtensible Access Control Markup Language (XACML) Version 3.0</title>
          <author initials="E" surname="Rissanen" role="Editor"/>
          <date month="August" day='10' year='2010'/>
        </front>
        <seriesInfo name="OASIS Standard" value="xacml-201008"/>
        <format type='HTML' target="http://docs.oasis-open.org/xacml/3.0/xacml03.0-core-spec-cs-01-en.html"/>
      </reference>
      <reference anchor="Plasma">
        <front>
          <title>Requirements for Message Access Control</title>
          <author initials="T." surname="Freeman"/>
          <author initials="J." surname="Schaad"/>
          <author initials="P." surname="Patterson"/>
          <date month="October" year="2011"/>
        </front>
        <seriesInfo name="Work in progress" value="draft-freeman-message-access-control"/>
      </reference>
      <reference anchor="OASIS-CORE">
        <front>
          <title>Assertions and Protocols for the OASIS Security Assertion Markup Language (SAML) V2.0</title>
          <author initials="S." surname="Cantor" role="ed."/>
          <author initials="J." surname="Kemp" role="ed."/>
          <author initials="R." surname="Philpott" role="ed."/>
          <author initials="E." surname="Maler" role="ed."/>
          <date month="March" day="15" year="2005"/>
        </front>
        <seriesInfo name="OASIS Standard" value="saml-core-2.0-os"/>
      </reference>
      <?rfc linefile="1:bibxml/reference.RFC.5705.xml"?>

<reference anchor='RFC5705'>

<front>
<title>Keying Material Exporters for Transport Layer Security (TLS)</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'>
<organization /></author>
<date year='2010' month='March' />
<abstract>
<t>A number of protocols wish to leverage Transport Layer Security (TLS) to perform key establishment but then use some of the keying material for their own purposes.  This document describes a general mechanism for allowing that. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5705' />
<format type='TXT' octets='16346' target='http://www.rfc-editor.org/rfc/rfc5705.txt' />
</reference>
<?rfc linefile="808:eps-token.xml"?>
      <?rfc linefile="1:bibxml/reference.RFC.5751.xml"?>

<reference anchor="SMIME-MSG">

<front>
<title>Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.2 Message Specification</title>
<author initials='B.' surname='Ramsdell' fullname='B. Ramsdell'>
<organization /></author>
<author initials='S.' surname='Turner' fullname='S. Turner'>
<organization /></author>
<date year='2010' month='January' />
<abstract>
<t>This document defines Secure/Multipurpose Internet Mail Extensions (S/MIME) version 3.2.  S/MIME provides a consistent way to send and receive secure MIME data.  Digital signatures provide authentication, message integrity, and non-repudiation with proof of origin.  Encryption provides data confidentiality.  Compression can be used to reduce data size.  This document obsoletes RFC 3851. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5751' />
<format type='TXT' octets='98638' target='http://www.rfc-editor.org/rfc/rfc5751.txt' />
</reference>
<?rfc linefile="809:eps-token.xml"?>
    </references>
    <references title="Informative References">
      <?rfc linefile="1:bibxml/reference.RFC.4346.xml"?>

<reference anchor='RFC4346'>

<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.1</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'>
<organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'>
<organization /></author>
<date year='2006' month='April' />
<abstract>
<t>This document specifies Version 1.1 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4346' />
<format type='TXT' octets='187041' target='http://www.rfc-editor.org/rfc/rfc4346.txt' />
</reference>
<?rfc linefile="812:eps-token.xml"?>
      <?rfc linefile="1:bibxml/reference.RFC.4998.xml"?>

<reference anchor='RFC4998'>

<front>
<title>Evidence Record Syntax (ERS)</title>
<author initials='T.' surname='Gondrom' fullname='T. Gondrom'>
<organization /></author>
<author initials='R.' surname='Brandner' fullname='R. Brandner'>
<organization /></author>
<author initials='U.' surname='Pordesch' fullname='U. Pordesch'>
<organization /></author>
<date year='2007' month='August' />
<abstract>
<t>In many scenarios, users must be able prove the existence and integrity of data, including digitally signed data, in a common and reproducible way over a long and possibly undetermined period of time.  This document specifies the syntax and processing of an Evidence Record, a structure designed to support long-term non-repudiation of existence of data. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4998' />
<format type='TXT' octets='66888' target='http://www.rfc-editor.org/rfc/rfc4998.txt' />
</reference>
<?rfc linefile="813:eps-token.xml"?>
      <reference anchor="SAML-XACML">
        <front>
          <title>SAML 2.0 profile of XACML v2.0</title>
          <author initials="A." surname="Anderson" role="ed."/>
          <author initials="H." surname="Lockhart" role="ed."/>
          <date month="February" day="1" year="2005"/>
        </front>
        <seriesInfo name="OASIS Standard" value="access_control-xacml-2.0-saml-profile-spec-os.pdf"/>
      </reference>
      <?rfc linefile="1:bibxml4\reference.w3c.note-soap-20000508.xml"?>

<reference anchor="SOAP11">
<front>
<title>Simple Object Access Protocol (SOAP) 1.1</title>

<author initials="D" surname="Box" fullname="Don Box">
    <organization />
</author>

<author initials="D" surname="Ehnebuske" fullname="David Ehnebuske">
    <organization />
</author>

<author initials="G" surname="Kakivaya" fullname="Gopal Kakivaya">
    <organization />
</author>

<author initials="A" surname="Layman" fullname="Andrew Layman">
    <organization />
</author>

<author initials="N" surname="Mendelsohn" fullname="Noah Mendelsohn">
    <organization />
</author>

<author initials="H" surname="Nielsen" fullname="Henrik Frystyk Nielsen">
    <organization />
</author>

<author initials="S" surname="Thatte" fullname="Satish Thatte">
    <organization />
</author>

<author initials="D" surname="Winer" fullname="Dave Winer">
    <organization />
</author>

<date month="May" day="8" year="2000" />
</front>

<seriesInfo name="W3C NOTE" value="NOTE-SOAP-20000508" />
<format type="HTML" target="http://www.w3.org/TR/2000/NOTE-SOAP-20000508" />
</reference>
<?rfc linefile="823:eps-token.xml"?>
      <?rfc linefile="1:bibxml4\reference.w3c.rec-soap12-part1-20070427.xml"?>

<reference anchor="SOAP12"
           target='http://www.w3.org/TR/2007/REC-soap12-part1-20070427'>
<front>
<title>SOAP Version 1.2 Part 1: Messaging Framework (Second Edition)</title>

<author initials='Y.' surname='Lafon' fullname='Yves Lafon'>
    <organization />
</author>

<author initials='M.' surname='Gudgin' fullname='Martin Gudgin'>
    <organization />
</author>

<author initials='M.' surname='Hadley' fullname='Marc Hadley'>
    <organization />
</author>

<author initials='J.' surname='Moreau' fullname='Jean-Jacques Moreau'>
    <organization />
</author>

<author initials='N.' surname='Mendelsohn' fullname='Noah Mendelsohn'>
    <organization />
</author>

<author initials='A.' surname='Karmarkar' fullname='Anish Karmarkar'>
    <organization />
</author>

<author initials='H.' surname='Nielsen' fullname='Henrik Frystyk Nielsen'>
    <organization />
</author>

<date month='April' day='27' year='2007' />
</front>

<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-soap12-part1-20070427' />
<format type='HTML' target='http://www.w3.org/TR/2007/REC-soap12-part1-20070427' />
</reference>
<?rfc linefile="824:eps-token.xml"?>
    </references>
    <section title="XML Schema">
      <t>This appendix represents the entirety of the XML Schema for Plasma documents.</t>
      <?rfc linefile="1:ForDraft/Plasma.xsd.incl"?><figure><artwork>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- edited with XMLSpy v2007 sp2 (http://www.altova.com) by James Schaad (exmsft) --&gt;
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xacml="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17" xmlns:wst="http://schemas.xmlsoap.org/ws/2005/02/trust" xmlns="urn:ietf:schema:plasma:1.0" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" targetNamespace="urn:ietf:schema:plasma:1.0" elementFormDefault="qualified" attributeFormDefault="unqualified"&gt;
  &lt;xs:annotation&gt;
    &lt;xs:documentation&gt;
    The PlasmaRequest element is one of two top level elements defined by this XSD schema.
    The PlasmaRequest element is sent from the client to the server in order to 
  &lt;/xs:documentation&gt;
  &lt;/xs:annotation&gt;
  &lt;xs:element name="PlasmaRequest" type="RequestType"/&gt;
  &lt;xs:complexType name="RequestType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element ref="Authentication" minOccurs="0"/&gt;
      &lt;xs:element ref="xacml:Request" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:element name="PlasmaResponse" type="ResponseType"/&gt;
  &lt;xs:complexType name="ResponseType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element ref="xacml:Response"/&gt;
      &lt;xs:element name="PlasmaTokens" minOccurs="0"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element ref="PlasmaToken" minOccurs="0" maxOccurs="unbounded"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element name="CMSToken" minOccurs="0" maxOccurs="unbounded"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:simpleContent&gt;
            &lt;xs:extension base="xs:hexBinary"&gt;
              &lt;xs:attribute name="TokenId" type="xs:string" use="optional"/&gt;
            &lt;/xs:extension&gt;
          &lt;/xs:simpleContent&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element ref="CMSKey" minOccurs="0"/&gt;
      &lt;xs:element ref="Authentication" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:element name="RequestRoles"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element ref="Authentication" minOccurs="0"/&gt;
        &lt;xs:element name="Identity" type="xs:string"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:element name="RequestMessageData"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="Label"/&gt;
        &lt;xs:element name="RoleToken"/&gt;
        &lt;xs:element name="Recipients"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:element name="ReadMessage"/&gt;
  &lt;xs:element name="Authentication" type="AuthenticationType"/&gt;
  &lt;xs:complexType name="AuthenticationType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="SAML_Collection" minOccurs="0"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element ref="saml:Assertion" maxOccurs="unbounded"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element name="GSS_API" type="xs:hexBinary" minOccurs="0"/&gt;
      &lt;xs:element name="WS_Token" type="xs:hexBinary" minOccurs="0" maxOccurs="unbounded"/&gt;
      &lt;xs:element ref="ds:Signature" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="LabelNode"&gt;
    &lt;xs:choice&gt;
      &lt;xs:element name="AND"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name="Label" type="LabelNode"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element name="OR"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name="Label" type="LabelNode"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element name="LEAF"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:simpleContent&gt;
            &lt;xs:extension base="xs:string"&gt;
              &lt;xs:attribute name="label"/&gt;
            &lt;/xs:extension&gt;
          &lt;/xs:simpleContent&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:choice&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:element name="PlasmaToken" type="PlasmaTokenType"/&gt;
  &lt;xs:complexType name="PlasmaTokenType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="PDP" type="xs:anyURI" maxOccurs="unbounded"/&gt;
      &lt;xs:choice&gt;
        &lt;xs:element name="PolicyList"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element name="Policy" type="PolicyType" maxOccurs="unbounded"/&gt;
            &lt;/xs:sequence&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
        &lt;xs:element ref="Label"/&gt;
      &lt;/xs:choice&gt;
      &lt;xs:element ref="wst:RequestSecurityTokenResponse"/&gt;
      &lt;xs:element ref="xacml:Obligations" minOccurs="0"/&gt;
      &lt;xs:element ref="xacml:AssociatedAdvice" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="PolicyType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="Name" type="xs:string"/&gt;
      &lt;xs:element name="Identifier" type="xs:string"/&gt;
      &lt;xs:element name="Options" type="xs:anyType"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:element name="MessageTokenRequest" type="MessageTokenRequestType"/&gt;
  &lt;xs:complexType name="MessageTokenRequestType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="RoleToken"/&gt;
      &lt;xs:element ref="Label"/&gt;
      &lt;xs:element ref="RecipientInfo" minOccurs="0" maxOccurs="unbounded"/&gt;
      &lt;xs:element name="KEK" type="xs:hexBinary" minOccurs="0"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:element name="RecipientInfo" type="RecipientInfoType"/&gt;
  &lt;xs:complexType name="RecipientInfoType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="Subject" maxOccurs="unbounded"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:simpleContent&gt;
            &lt;xs:extension base="xs:anySimpleType"&gt;
              &lt;xs:attribute name="type" type="xs:string" use="required"/&gt;
            &lt;/xs:extension&gt;
          &lt;/xs:simpleContent&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element name="LockBox" type="xs:hexBinary"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:element name="Label" type="LabelType"/&gt;
  &lt;xs:complexType name="LabelType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:choice&gt;
        &lt;xs:element ref="Label" minOccurs="0" maxOccurs="unbounded"/&gt;
        &lt;xs:element ref="Leaf" minOccurs="0" maxOccurs="unbounded"/&gt;
      &lt;/xs:choice&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="CombiningRule" type="CombiningRuleType" use="required"/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:simpleType name="CombiningRuleType"&gt;
    &lt;xs:restriction base="xs:string"&gt;
      &lt;xs:enumeration value="and"/&gt;
      &lt;xs:enumeration value="or"/&gt;
      &lt;xs:enumeration value="except"/&gt;
    &lt;/xs:restriction&gt;
  &lt;/xs:simpleType&gt;
  &lt;xs:element name="Leaf" type="LeafType"/&gt;
  &lt;xs:complexType name="LeafType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:any namespace="##any" minOccurs="0" maxOccurs="unbounded"/&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="Label" type="xs:string" use="required"/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:element name="CMSKey" type="CMSKeyType"/&gt;
  &lt;xs:complexType name="CMSKeyType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="DisplayString" type="xs:string"/&gt;
      &lt;xs:choice&gt;
        &lt;xs:element name="KEK" type="xs:hexBinary"/&gt;
        &lt;xs:element name="KEKIdentifier" type="xs:hexBinary"/&gt;
        &lt;xs:element ref="RecipientInfo"/&gt;
      &lt;/xs:choice&gt;
      &lt;xs:element ref="PlasmaToken" minOccurs="0"/&gt;
      &lt;xs:element name="EncryptionRequestor" type="xs:string"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:element name="SignBody" type="SignBodyType"/&gt;
  &lt;xs:complexType name="SignBodyType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="ChannelBinding" type="xs:base64Binary"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;
</artwork></figure>
<?rfc linefile="828:eps-token.xml"?>
    </section>
    <section title="Example: Get Roles Request" anchor="GetRoleExample">
      <t>This section provides an example of a request message to obtain the set of roles for an individual named 'bart@simpsons.com'.  The authentication provided in this is a SAML statement included in the SAML_Collection element.</t>
      <?rfc linefile="1:ForDraft/GetRoleRequest.xml.incl"?><figure><artwork>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;PlasmaRequest xmlns="urn:ietf:schema:plasma" 
  xmlns:xacml="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"&gt;
  &lt;Authentication&gt;
    &lt;SAML_Collection&gt;...&lt;/SAML_Collection&gt;
  &lt;/Authentication&gt;
  &lt;xacml:Request CombinedDecision="false" ReturnPolicyIdList="false"&gt;
    &lt;xacml:Attributes Category="urn:oasis:names:tc:xacml:1.0:subect-category:access-subject"&gt;
      &lt;xacml:Attribute IncludeInResult="false" 
        AttributeId="urn:oasis:names:tc:xacml:1.0:subject:subject-id"&gt;
        &lt;xacml:AttributeValue 
          DataType="urn:oasis:names:tc:xacml:1.0:data-type:rfc822Name"&gt;bart@simpsons.com&lt;/xacml:AttributeValue&gt;
      &lt;/xacml:Attribute&gt;
    &lt;/xacml:Attributes&gt;
    &lt;xacml:Attributes Category="urn:oasis:names:tc:xaml:3.0:attribute-catagory:action"&gt;
      &lt;xacml:Attribute IncludeInResult="false" AttributeId="urn:plasma:action-id"&gt;
        &lt;xacml:AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string"&gt;GetRoleTokens&lt;/xacml:AttributeValue&gt;
      &lt;/xacml:Attribute&gt;
    &lt;/xacml:Attributes&gt;
  &lt;/xacml:Request&gt;
&lt;/PlasmaRequest&gt;
</artwork></figure>
<?rfc linefile="832:eps-token.xml"?>
    </section>
    <section title="Example: Get Roles Response" anchor="GetRoleResponse">
      <t>This section provides an example response to a successful request for a role sets.</t>
       <?rfc linefile="1:ForDraft/Get-Role-Response.xml.incl"?><figure><artwork>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;PlasmaResponse xmlns="urn:ietf:schema:plasma:1.0"
  xmlns:xacml="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17" 
  xmlns:wst="http://schemas.xmlsoap.org/ws/2005/02/trust" 
  xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"&gt;
  &lt;xacml:Response&gt;
    &lt;xacml:Result&gt;
      &lt;xacml:Decision&gt;Permit&lt;/xacml:Decision&gt;
    &lt;/xacml:Result&gt;
  &lt;/xacml:Response&gt;
  &lt;PlasmaTokens&gt;
    &lt;PlasmaToken&gt;
      &lt;PDP&gt;https://pdp.example.com/companyPolicies&lt;/PDP&gt;
      &lt;PolicyList&gt;
        &lt;Policy&gt;
          &lt;Name&gt;Company Confidential&lt;/Name&gt;
          &lt;Identifier&gt;urn:example:policies:confidential&lt;/Identifier&gt;
        &lt;/Policy&gt;
        &lt;Policy&gt;
          &lt;Name&gt;Plasma Project&lt;/Name&gt;
          &lt;Identifier&gt;urn:example:policies:plasma&lt;/Identifier&gt;
        &lt;/Policy&gt;
      &lt;/PolicyList&gt;
      &lt;wst:RequestSecurityTokenResponse&gt;
        &lt;wst:TokenType&gt;urn:plasma:roleToken&lt;/wst:TokenType&gt;
        &lt;wst:RequestedSecruityToken&gt;....&lt;/wst:RequestedSecruityToken&gt;
        &lt;wst:Entropy&gt;&lt;wst:BinarySecret&gt;12345678&lt;/wst:BinarySecret&gt;&lt;/wst:Entropy&gt;
        &lt;wst:Lifetime&gt;&lt;wsu:Expires&gt;2012-02-01T00:00:00&lt;/wsu:Expires&gt;&lt;/wst:Lifetime&gt;
      &lt;/wst:RequestSecurityTokenResponse&gt;
    &lt;/PlasmaToken&gt;
  &lt;/PlasmaTokens&gt;
&lt;/PlasmaResponse&gt;
</artwork></figure>
<?rfc linefile="836:eps-token.xml"?>
    </section>
    <section title="Example: Get CMS Token Request" anchor="GetCMSTokenRequest">
      <t>This section contains an example of a request from a client to a server for a CMS message token to be issued.  The authentication for the request is provided by using a WS-Trust token previously issued as part of a role request/response dialog.  The request contains the following elements:
        <list style="symbols">
          <t>A complex rule set is requested where permission to is to be granted to anyone who meets either of the two policies given.</t>
          <t>A specific recipient info structure is provided for a subject who's name is 'lisa@simpsons.com'.  The details of the recipient info structure are skipped but it would be any encoding of a RecipientInfo structure from CMS.</t>
          <t>A generic key encryption key is provided for any other subject who meets the policies specified.</t>
        </list>
      </t>
      <?rfc linefile="1:ForDraft/Get-Token-Request.xml.incl"?><figure><artwork>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;PlasmaRequest xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="urn:ietf:schema:plasma:1.0 C:\ietf\drafts\Schema\Plasma.xsd" 
    xmlns="urn:ietf:schema:plasma:1.0"
    xmlns:xacml="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"&gt;
  &lt;Authentication&gt;
    &lt;WS_Token&gt;123456&lt;/WS_Token&gt;
  &lt;/Authentication&gt;
  &lt;xacml:Request CombinedDecision="false" ReturnPolicyIdList="false"&gt;
    &lt;xacml:Attributes Category="urn:oasis:names:tc:xaml:3.0:attribute-catagory:action"&gt;
      &lt;xacml:Attribute IncludeInResult="false" AttributeId="urn:plasma:action-id"&gt;
        &lt;xacml:AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string"&gt;GetCMSToken&lt;/xacml:AttributeValue&gt;
      &lt;/xacml:Attribute&gt;
    &lt;/xacml:Attributes&gt;
    &lt;xacml:Attributes Category="urn:ietf:plasma:attribute-category:data"&gt;
      &lt;xacml:Attribute AttributeId="urn:plasma:data-id" IncludeInResult="false"&gt;
        &lt;xacml:AttributeValue DataType="xml"&gt;
          &lt;MessageTokenRequest&gt;
            &lt;Label CombiningRule="or"&gt;
              &lt;Leaf Label="urn:example:policies:confidential"/&gt;
              &lt;Leaf Label="urn:example:policies:plasma"/&gt;
            &lt;/Label&gt;
            &lt;RecipientInfo&gt;
              &lt;Subject type="urn:oasis:names:tc:xacml:1.0:data-type:rfc822Name"&gt;
                lisa@simpsons.com
              &lt;/Subject&gt;
              &lt;LockBox&gt;FF33eeddccaa002234&lt;/LockBox&gt;
            &lt;/RecipientInfo&gt;
            &lt;KEK&gt;AB123456&lt;/KEK&gt;
          &lt;/MessageTokenRequest&gt;
        &lt;/xacml:AttributeValue&gt;
      &lt;/xacml:Attribute&gt;
    &lt;/xacml:Attributes&gt;
  &lt;/xacml:Request&gt;
&lt;/PlasmaRequest&gt;
</artwork></figure>
<?rfc linefile="846:eps-token.xml"?>
    </section>
    <section title="Example: Get CMS Token Response" anchor="GetCMSTokenResponse">
      <t>This section contains an example of a response from a server to a client for a CMS message token to be issued.  The token is returned in the CMSToken element.  This element would then be placed into the CMS message being created by the client.</t>
      <?rfc linefile="1:ForDraft/Get-Token-Response.xml.incl"?><figure><artwork>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;PlasmaResponse xmlns="urn:ietf:schema:plasma:1.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:schemaLocation="urn:ietf:schema:plasma:1.0 C:\ietf\drafts\Schema\Plasma.xsd" 
  xmlns:xacml="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"&gt;
  &lt;xacml:Response&gt;
    &lt;xacml:Result&gt;
      &lt;xacml:Decision&gt;Permit&lt;/xacml:Decision&gt;
    &lt;/xacml:Result&gt;
  &lt;/xacml:Response&gt;
  &lt;CMSToken&gt;3425342352343243&lt;/CMSToken&gt;
&lt;/PlasmaResponse&gt;
</artwork></figure>
<?rfc linefile="850:eps-token.xml"?>
    </section>
    <section title="Example: Get CMS Key Request" anchor="GetCMSKeyRequest">
      <?rfc linefile="1:ForDraft/Get-Key-Request.xml.incl"?><figure><artwork>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;PlasmaRequest xmlns="urn:ietf:schema:plasma:1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:schemaLocation="urn:ietf:schema:plasma:1.0 C:\ietf\drafts\Schema\Plasma.xsd"
  xmlns:xacml="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"&gt;
  &lt;Authentication&gt;
    &lt;SAML_Collection&gt;....&lt;/SAML_Collection&gt;
  &lt;/Authentication&gt;
  &lt;xacml:Request CombinedDecision="false" ReturnPolicyIdList="false"&gt;
    &lt;xacml:Attributes Category="urn:oasis:names:tc:xacml:3.0:attribute-catagory:action"&gt;
      &lt;xacml:Attribute AttributeId="urn:plasma:action-id" IncludeInResult="false"&gt;
        &lt;xacml:AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string"&gt;ParseCMSToken&lt;/xacml:AttributeValue&gt;
      &lt;/xacml:Attribute&gt;
      &lt;xacml:Attribute AttributeId="urn:plasma:action-id" IncludeInResult="false"&gt;
        &lt;xacml:AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string"&gt;GetReplyToken&lt;/xacml:AttributeValue&gt;
      &lt;/xacml:Attribute&gt;
    &lt;/xacml:Attributes&gt;
    &lt;xacml:Attributes Category="urn:ietf:plasma:attribute-category:data"&gt;
      &lt;xacml:Attribute AttributeId="urn:plasma:data-id" IncludeInResult="false"&gt;
        &lt;xacml:AttributeValue DataType="http://www.w3.org/2001/XMLSchema#hexBinary"&gt;AABBDDEEFF1122344&lt;/xacml:AttributeValue&gt;
      &lt;/xacml:Attribute&gt;
    &lt;/xacml:Attributes&gt;
  &lt;/xacml:Request&gt;
&lt;/PlasmaRequest&gt;
</artwork></figure>
<?rfc linefile="853:eps-token.xml"?>
    </section>
    <section title="Example: Get CMS KeyResponse" anchor="GetCMSKeyResponse">
      <?rfc linefile="1:ForDraft/Get-Key-Response.xml.incl"?><figure><artwork>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;PlasmaResponse xmlns="urn:ietf:schema:plasma:1.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xsi:schemaLocation="urn:ietf:schema:plasma:1.0 C:\ietf\drafts\Schema\Plasma.xsd" 
  xmlns:xacml="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
   xmlns:wst="http://schemas.xmlsoap.org/ws/2005/02/trust" 
   xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"&gt;
  &lt;xacml:Response&gt;
    &lt;xacml:Result&gt;
      &lt;xacml:Decision&gt;Permit&lt;/xacml:Decision&gt;
    &lt;/xacml:Result&gt;
  &lt;/xacml:Response&gt;
  &lt;CMSKey&gt;
    &lt;DisplayString&gt;Company Confidential&lt;/DisplayString&gt;
    &lt;KEK&gt;3425342352343243&lt;/KEK&gt;
    &lt;PlasmaToken&gt;
      &lt;PDP&gt;https://pdp.example.com/companyPolicies&lt;/PDP&gt;
      &lt;Label CombiningRule="or"&gt;
        &lt;Leaf Label="urn:example:policies:confidential"/&gt;
        &lt;Leaf Label="urn:example:policies:plasma"/&gt;
      &lt;/Label&gt;
      &lt;wst:RequestSecurityTokenResponse&gt;
        &lt;wst:TokenType&gt;urn:plasma:roleToken&lt;/wst:TokenType&gt;
        &lt;wst:RequestedSecurityToken&gt;....&lt;/wst:RequestedSecurityToken&gt;
        &lt;wst:Lifetime&gt;&lt;wsu:Expires&gt;2012-02-01T00:00:00&lt;/wsu:Expires&gt;&lt;/wst:Lifetime&gt;
      &lt;/wst:RequestSecurityTokenResponse&gt;
    &lt;/PlasmaToken&gt;
  &lt;/CMSKey&gt;
&lt;/PlasmaResponse&gt;
</artwork></figure>
<?rfc linefile="856:eps-token.xml"?>
    </section>
  </back>
</rfc>

<!-- LocalWords:  XACML
-->
