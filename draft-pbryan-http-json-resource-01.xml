<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2616 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC4627 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml">
<!ENTITY RFC5789 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5789.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="2"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="info" docName="draft-pbryan-http-json-resource-01" ipr="trust200902">

    <front>
        <title abbrev="HTTP JSON Resource">A Convention for HTTP Access to JSON Resources</title>
        <author fullname="Paul C. Bryan" initials="P." surname="Bryan" role="editor">
            <organization>ForgeRock</organization>
            <address>
                <phone>+1 604 783 1481</phone>
                <email>pbryan@anode.ca</email>
            </address>
        </author>
        <date year="2012"/>
        <area>General</area>
        <workgroup>Internet Engineering Task Force</workgroup>
        <keyword>json</keyword>
        <abstract>
            <t>This document codifies a convention for accessing JSON representations of
             resources via HTTP.</t>
        </abstract>
    </front>

    <middle>

        <section title="Introduction">
            <t><xref target="RFC4627">JavaScript Object Notation (JSON)</xref> is a common
             format for the exchange and storage of structured data.
             <xref target="RFC2616">Hypertext Transfer Protocol (HTTP)</xref> is a common
             protocol for providing remote access to resources.</t>
            <t>This document codifies a convention for accessing JSON representations of
             resources via HTTP. This promotes a common remote access interface across
             multiple disparate resources and reuse of conforming server and client software
             components.</t>
        </section>

        <section title="Conventions">
            <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
             "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
             interpreted as described in <xref target="RFC2119">RFC 2119</xref>.</t>
            <t>This document expresses the structure of Request-URIs in examples using
             <xref target="URI-Template"/> syntax.</t>
        </section>

        <section title="Resources">
            <t>A resource accessed through this convention is represented as a JSON value
             with an "application/json" (or derivative) Internet media type.</t>
            <t>An accessible resource is a member of a collection of resources. A collection
             of resources MUST have a unique location, which is expressed as a part of the
             Request-URI of HTTP requests. The server implementation determines the location
             of a resource collection.</t>
            <t>Each resource MUST have a unique identifier within a collection. The server
             implementation MAY establish restrictions on identifiers that can be used, and
             reject requests that have identifiers that do not conform with a
             403 Forbidden status code.</t>
        </section>

        <section title="Version Control">
            <t>A server MAY implement version control for resources, and use it as the basis
             of an optimistic concurrency control mechanism. If version control is implemented
             for a given resource, the server MUST expose the resource version in responses,
             and clients MUST use preconditions when performing operations that modify such
             resources.</t>
            <t>If a server implements version control for a resource, and the resource
             version is incorrectly specified by a client for an operation that modifies the
             resource, the server SHOULD indicate this with a 412 Precondition Failed status
             code.</t>
            <t>If a server implements version control for a resource and the resource version
             is not specified by a client for an operation that modifies the resource,
             the server SHOULD indicate this with a 428 Precondition Required status code,
             per <xref target="New-Status"/>.</t>
            <t>The server implementation determines how a resource version is computed; it
             MUST ensure that different values for a given resource compute different
             versions. Clients SHOULD treat a resource version provided by a server as
             opaque.</t>
            <t>The server expresses resource version via the "ETag" response header and the
             "_rev" metadata member in JSON object entity responses. The client expresses
             resource version via the "If-Match" and "If-None-Match" precondition request
             headers.</t>
        </section>

        <section title="Operations">

            <t>This convention provides a uniform set of operations, all of which are
            implemented via standard HTTP methods. The operations are: create, read, update,
            delete, patch, query, and action. The server implementation MAY conditionally
            implement any operation.</t>

            <section title="Create">
                <t>The "create" operation allows a client to create a new resource in a
                collection. A resource is created in one of two ways: if the client is
                 requesting a specific identifier, then the resource is created via the
                 HTTP PUT method; if the server is to select its own identifier, then
                 the resource is created via the POST method. The PUT method SHOULD be
                 preferred over POST.</t>
                <section title="PUT Request">
                    <t>In the PUT method, the identifier of the resource to create is
                     specified in the Request-URI of the HTTP request. The server MAY
                     override the requested identifier of the resource and select a suitable
                     identifier of its own.</t>
                    <t>To unambiguously request resource creation, the "If-None-Match"
                     header MUST contain the value "*". If no precondition header
                     unambiguously requests resource creation or update, the server MAY use
                     its own means of determining how to interpret the PUT method.</t>
                    <figure><artwork><![CDATA[
PUT /{collection}/{id} HTTP/1.1
Content-Type: application/json
If-None-Match: * 
...

[JSON representation of resource to create]
]]>                 </artwork></figure>
                </section>
                <section title="POST Request">
                    <t>In the POST method, the identifier of the resource is not specified.
                     The Request-URI of the request MUST NOT contain a query component, in
                     order to distinguish it from the "action" operation. The server MUST
                     select a suitable identifier for the created resource.</t>
                    <figure><artwork><![CDATA[
POST /{collection} HTTP/1.1
Content-Type: application/json
...

[Resource representation]
]]>                 </artwork></figure>
                </section>
                <section title="Response">
                    <figure><artwork><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/json
Location: [location of resource]
ETag: "[resource version]"
...

[Resource metadata object]
]]>                 </artwork></figure>
                    <t>The "Location" header field contains a URI that identifies the newly
                     created resource. The optional "ETag" header field contains the version
                     of the newly created resource. The resource metadata object also contains
                     the identifier and optional version of the newly created resource.</t>
                    <t>If version control is implemented for a given resource, the server MUST
                     expose the new resource version in the ETag header of the response.</t>
                </section>
            </section>

            <section title="Read">
                <t>The "read" operation allows a client to read a representation of a
                 resource from the server. It is implemented using the HTTP GET method. The
                 client MUST NOT include a query component in the Request-URI, in order to
                 distinguish it from the "query" operation.</t>
                <t>If the resulting representation of the resource is a JSON object, it
                 SHOULD contain the JSON "_id" member, and also the "_rev" member if resource
                 version is supported by the server implementation.</t>
                <section title="Request">
                    <figure><artwork><![CDATA[
GET /{collection}/{id} HTTP/1.1
...

]]>                 </artwork></figure>
                </section>
                <section title="Response">
                    <figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
ETag: "[resource version]"
...

[Resource representation]
]]>                 </artwork></figure>
                    <t>If version control is implemented for a given resource, the server MUST
                     expose the resource version in the ETag header of the response.</t>
                </section>
            </section>

            <section title="Update">
                <t>The "update" operation allows a client to update the representation of a
                 resource on the server. It is performed using the HTTP PUT method. To cause
                 the PUT method to unambiguously request a resource update, the "If-Match"
                 header MUST contain the current version of the resource. If no precondition
                 header unambiguously requests resource creation or update, the server MAY
                 use its own means of determining how to interpret the PUT method.</t>
                <section title="Request">
                    <figure><artwork><![CDATA[
PUT /{collection}/{id} HTTP/1.1
Content-Type: application/json
If-Match: "[resource version]"
...

[Resource representation]
]]>                 </artwork></figure>
                </section>
                <section title="Response">
                    <figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
ETag: "[resource version]"
...

[Resource metadata object]
]]>                 </artwork></figure>
                    <t>If version control is implemented for a given resource, the server MUST
                     expose the updated resource version in the ETag header of the
                     response.</t>
                </section>
            </section>

            <section title="Delete">
                <t>The "delete" operation allows a client to delete a resource, or optionally
                 an entire collection of resources. It is performed using the HTTP DELETE
                 method.</t>
                <t>To delete a single resource, both the collection location and resource
                 identifier MUST be specified in the Request-URI of the HTTP request. To
                 delete an entire collection, only the collection location MUST be
                 specified.</t>
                <section title="Request">
                    <figure><artwork><![CDATA[
DELETE /{collection}/{id} HTTP/1.1
If-Match: "[resource version]"
...

]]>                 </artwork></figure>
                </section>
                <section title="Response">
                    <figure><artwork><![CDATA[
HTTP/1.1 204 No Content
...
]]>                 </artwork></figure>
                </section>
            </section>

            <section title="Patch">
                <t>The "patch" operation allows a client to apply a set of partial
                 modifications to a resource on the server. This is particularly useful if
                 the client is provided with redacted representations of resources and/or
                 does not have permission to modify resources in their entirety.</t>
                <t>The "patch" operation is performed using the HTTP PATCH method, per
                 <xref target="RFC5789" />. The supported patch document format(s) to apply
                 the partial modifications is determined by the server implementation.</t>
                <section title="Request">
                    <figure><artwork><![CDATA[
PATCH /{collection}/{id} HTTP/1.1
Content-Type: application/json-patch
If-Match: "[resource version]"
...

[JSON Patch document]
]]>                 </artwork></figure>
                </section>
                <section title="Response">
                    <figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
ETag: "[resource version]"
...

[Resource metadata object]
]]>                 </artwork></figure>
                    <t>If version control is implemented for a given resource, the server MUST
                     expose the updated resource version in the ETag header of the
                     response.</t>
                </section>
            </section>

            <section title="Query">
                <t>The "query" operation performs a parametric query of a resource or
                 collection, and responds with a result. The execution of a query MUST NOT
                 incur side effects. It is implemented using the HTTP GET method. The client
                 MUST include a query component in the Request-URI to distinguish it from the
                 "read" operation.</t>
                <t>To query a single resource, both the collection location and resource
                 identifier MUST be specified in the Request-URI of the HTTP request. To
                 query an entire collection, only the collection location MUST be
                 specified.</t>
                <section title="Request">
                    <figure><artwork><![CDATA[
GET /{collection}/{id}?{query} HTTP/1.1
...

]]>                 </artwork></figure>
                </section>
                <section title="Response">
                    <figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
...

[JSON query result value]
]]>                 </artwork></figure>
                    <t>The structure of the query result value is determined by the server
                     implementation.</t> 
                </section>
            </section>

            <section title="Action">
                <t>The "action" operation performs a parametric action on a resource or
                 collection, and responds with an optional result. The execution of an action
                 MAY incur side effects.</t>
                <t>The operation is implemented via the HTTP POST request. The
                 Request-URI MUST NOT contain a query component, in order to distinguish it
                 from a "create" operation. The request MAY include an entity body.</t>
                <t>To perform an action on a single resource, both the collection location
                 and resource identifier MUST be specified in the Request-URI. To perform an
                 action on an entire collection, only the collection location MUST be
                 specified.</t>
                <t>If the response contains a result value, then the server SHOULD respond
                 with a 200 OK status code; otherwise it SHOULD respond with a 204 No Content
                 status code.</t>
                <section title="Request">
                    <figure><artwork><![CDATA[
POST /{component}/{id}?{query} HTTP/1.1
Content-Type: application/json
...

[Optional JSON value]
]]>                 </artwork></figure>
                </section>
                <section title="Response">
                    <figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
...

[JSON action result value]
]]>                 </artwork></figure>
                    <t>The structure of the action result value (if any) is determined by
                     the server implementation. If version control is implemented for a given
                     resource, the server MAY expose the updated resource version in the ETag
                     header of the response.</t>
                </section>
            </section>

        </section>

        <section title="Request Context">
            <t>A server MAY require some form of request context be established by the
             client prior to allowing access to resources. How such context is established,
             persisted and transmitted is out of the scope of this convention, and SHOULD
             be specified by the server implementation.</t>
            <t>If inadequate request context has been established, the server SHOULD indicate
             this with a 401 Unauthorized error status code, unless there is another means
             of indicating such which is consistent with the required request context.</t>
        </section>

        <section title="Access Control">
            <t>The server implementation MAY enforce access control policies that restrict
             what resources a client can access and/or on what JSON values within each
             resource may be accessed.</t>
            <t>If the necessary context has been established (including no context at all) but
             such context does not permit the requested access to a resource, the server
             SHOULD indicate this with a 403 Forbidden error status code and a detail message
             describing the nature of the access denial.</t>
            <t>The server implementation MAY amend representations of resources to conform to
             access control policies, and SHOULD specify under what conditions such amendments
             are applied.</t> 
        </section>

        <section title="Resource Validation">
            <t>The server MAY enforce validation rules on resource representations provided
             by the client. If such a validation fails, the server SHOULD indicate this with
             a 403 Forbidden error status code and a detail message describing the nature
             of the validation failure.</t>
        </section>

        <section title="Resource Metadata">
            <t>Most responses to requests contain metadata about the resource being accessed.
            The metadata is included an HTTP ETag response header as well as members within
            a JSON object resource representation, including a JSON object specifically
            intended to contain only metadata (referred to within this document as a
            "resource metadata object").</t>
            <section title="Header">
                <t>ETag<vspace />
                 The current version of a resource, if version control is implemented
                 for the resource.</t>
            </section>
            <section title="Object Members">
                <t>"_id": string, required<vspace />
                 The identifier of the resource, relative to the collection it is a member
                 of.</t>
                <t>"_rev": string, optional<vspace />
                 The current version of the resource, if version control is implemented
                 for the resource.</t>
            </section>
        </section>

        <section title="Error Response">
            <t>In the event of an error, a 4xx or 5xx HTTP status code SHOULD BE
             expressed in the response, with an entity body containing an error object
             adhering to the following structure:</t>
            <figure><artwork><![CDATA[
{
    "error": number,
    "reason": string,
    "detail": string
}
]]>         </artwork></figure>
            <section title="Members">
                <t>"error": number, required<vspace />
                 The value provided SHOULD coincide with the status code provided in the
                 HTTP response.</t>
                <t>"reason": string, optional<vspace />
                 A short reason phrase of the error.</t>
                <t>"detail": string, optional<vspace />
                 The detail message of the error.</t>
            </section>
        </section>

        <section title="Modifying a Resource Identifier">
            <t>The server MAY allow the update and/or patch operations to modify the
             identifier of a resource within the collection if the resource has a JSON
             object representation. If such modification is disallowed, the server SHOULD
             respond with a 403 Forbidden status code.</t>
            <t>To indicate a request to modify the resource identifier, the "_id" metadata
             member should be included in the request entity and differ from the existing
             resource identifier in the Request-URI.</t>
            <t>If the server successfully modifies the resource identifier, instead of
             responding with a 200 OK status code, the server MUST respond with a
             201 Created status code, with a Location header containing the URI of the
             newly created resource.</t>
            <t>If there is already a resource with the requested identifier, the server
             MUST respond with a 409 Conflict status code indicating it could not be
             modified. If the server rejects the identifier as invalid, the server
             SHOULD respond with a 403 Forbidden status code.</t>
        </section>

        <section title="IANA Considerations">
            <t>This document has no IANA actions.</t>
        </section>

        <section anchor="Security" title="Security Considerations">
            <t>TBD.</t>
        </section>

        <section title="Acknowledgements">
            <t>The following individuals contributed ideas, feedback and wording, which
             contributed to the content of this specification:<list>
                <t>Alin Brici, Andi Egloff.</t>
            </list></t> 
            <t>This convention was influenced by various projects that expose HTTP-based
             access APIs, especially those that managed JSON-based representations, notably
             CouchDB.</t>
        </section>

    </middle>

    <back>
        <references title="Normative References">
            &RFC2119;
            &RFC2616;
            &RFC4627;
            &RFC5789;
            <reference anchor="URI-Template" target="http://tools.ietf.org/html/draft-gregorio-uritemplate-07">
                <front>
                    <title>URI Template</title>
                    <author initials="J." surname="Gregorio">
                        <organization>Google</organization>
                    </author>
                    <author initials="R." surname="Fielding">
                        <organization>Adobe</organization>
                    </author>
                    <author initials="M." surname="Hadley">
                        <organization>MITRE</organization>
                    </author>
                    <author initials="M." surname="Nottingham">
                        <organization>Rackspace</organization>
                    </author>
                    <author initials="D." surname="Orchard">
                        <organization>Salesforce.com</organization>
                    </author>
                    <date year="2011" month="September" />
                </front>
            </reference>
            <reference anchor="New-Status" target="http://tools.ietf.org/html/draft-nottingham-http-new-status-03">
                <front>
                    <title>Additional HTTP Status Codes</title>
                    <author initials="M." surname="Nottingham">
                        <organization>Rackspace</organization>
                    </author>
                    <author initials="R." surname="Fielding">
                        <organization>Adobe</organization>
                    </author>
                    <date year="2011" month="October" />
                </front>
            </reference>
        </references>

<!--
        <references title="Informative References">
        </references>
-->

        <section title="Examples">
            <t>TBD.</t>
        </section>

    </back>

</rfc>
