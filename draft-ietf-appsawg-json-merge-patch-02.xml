<?xml version="1.0"?> 
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc5789 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5789.xml'>  
  <!ENTITY rfc2119 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
  <!ENTITY rfc4627 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml'>
]>
<?rfc toc="yes"?> 
<?rfc strict="yes"?> 
<?rfc symrefs="yes" ?> 
<?rfc sortrefs="yes"?> 
<?rfc compact="yes"?> 
<rfc category="std" ipr="trust200902" docName="draft-ietf-appsawg-json-merge-patch-02"> 
  <front> 
    <title abbrev="application/merge-patch"> 
      JSON Merge Patch
    </title> 
 
    <author initials="J.M." surname="Snell" fullname="James M Snell"> 
      <address> 
        <email>jasnell@gmail.com</email> 
      </address> 
    </author> 
    
    <date month="November" year="2013" /> 
 
    <area>General</area>
    <workgroup>Applications Area Working Group</workgroup>
    <keyword>I-D</keyword> 
    <keyword>http</keyword>
    <keyword>json</keyword> 
    <keyword>patch</keyword> 
    <keyword>merge</keyword>
 
    <abstract> 
      <t>
        This specification defines the JSON merge patch format and processing
        rules.
      </t> 
    </abstract> 
 
  </front> 
  
  <middle> 
    <section anchor="intro" title="Introduction"> 
 
      <t>
        This specification defines the JSON merge patch document 
        format, processing rules, and associated MIME media type identifier.
        The merge patch format is primarily intended for use with the 
        HTTP PATCH method <xref target="RFC5789"/> as a means of describing
        a set of modifications to a subset of target resource's content.
      </t>
      
      <t>
        A JSON merge patch document describes changes to be made to a target
        JSON document using a syntax that closely mimics the document being
        modified. Recipients of a merge patch document determine the exact 
        set of changes being requested by comparing the content of the provided
        patch against the current content of the target document. If the 
        provided merge patch contains members that do not appear within the
        target, those members are added. If the target does contain the member, 
        the value is replaced. Null values in the merge patch are given 
        special meaning to indicate the removal of existing values in the target. 
      </t>
      
<figure><preamble>For example, given the following original JSON document:</preamble><artwork>
  {
    "a": "b",
    "c": {
      "d": "e",
      "f": "g"
    }
  }
</artwork></figure>
      
<figure><preamble>Changing the value of "a" and removing "f" can be achieved by sending:</preamble><artwork>
  PATCH /target HTTP/1.1
  Host: example.org
  Content-Type: application/merge-patch+json
  
  {
    "a":"z",
    "c": {
      "f": null
    }
  }
</artwork></figure>
      
      <t>
        When applied to the target resource, the value of the "a" member 
        is replaced with "z" and "f" is removed, leaving the remaining content 
        untouched.
      </t>
            
      <t>  
        This design means that merge patch documents are suitable for describing
        modifications to JSON documents that primarily use objects for their 
        structure and do not make use of explicit null values. The merge 
        patch format is not appropriate for all JSON syntaxes.
      </t>
 
      <t>
        In this document, the key words "MUST", "MUST NOT", "REQUIRED", "SHALL", 
        "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" 
        are to be  interpreted as described in <xref target="RFC2119" />.
      </t> 
 
    </section> 
        
    <section title="Processing Merge Patch Documents" anchor="json-merge-patch">
    
      <t>
        JSON merge patch documents describe, by example, a set of changes that 
        are to be made to a target resource. Recipients of merge patch 
        documents are responsible for comparing the merge patch with
        the current content of the target resource to determine the specific
        set of change operations to be applied to the target.
      </t>
      
      <t>
        The following rules MUST be applied to determine what changes are 
        to be made:
        <list style="numbers">
        <t>
          If the roots of either the merge patch or target resource documents
          are JSON Arrays, the target resource is replaced, in whole, by the 
          merge patch document. Any null member contained in the merge patch 
          MUST be ignored and treated as if those members are undefined.
        </t>
        <t>
          If, however, the roots of the merge patch or target resource documents 
          are Objects, iterate through each member of merge patch object and 
          determine the following:       
          <list style="symbols">
            <t>
              If an equivalent member in the target resource is currently 
              undefined, and the given value in the merge patch is not null, 
              the member is added to the target.
            </t>
            <t>
              If the value given by the merge patch is null and the equivalent 
              member is defined in the target resource, the existing member is 
              removed.
            </t>
            <t>
              If the value given by the merge patch is either a non-null JSON 
              primitive or Array, and the equivalent member is defined in the 
              target, the existing value is replaced with the given value.
              Any null member contained in a provided array MUST be ignored
              and treated as if the member was undefined, even within array or
              object members within the array.
            </t>
            <t>
              If the value given by the merge patch is a JSON object, and the 
              equivalent member is defined in the target resource with a 
              JSON primitive or Array value, that existing value is replaced
              in whole by the object provided. Any null member in arrays 
              or objects within the provided data MUST be ignored and 
              treated as if the member was undefined.
            </t>
            <t>
              If the value given by the merge patch is a JSON object, and the 
              equivalent member is currently defined in the target resource 
              with an Object value, then recursively apply Rule #2 to the 
              two objects.
            </t>
            <t>
              Any member currently defined in the target resource that 
              does not explicitly appear within the merge patch is to remain 
              untouched and unmodified.
            </t>
          </list>
        </t>
        </list>
      </t>
                  
      <t>
        Once the set of intended modifications is derived from the 
        merge patch document, the recipient is free to determine the 
        appropriateness of the modification based on it's own understanding 
        of the target resource. If the recipient is unable to apply any 
        individual modification described by the merge patch document, it 
        MUST NOT apply any of the changes and MUST stop processing the 
        modification.
      </t>
        
      <t>
        If the merge patch document attempts to remove a member from the target 
        resource that does not currently exist, the recipient SHOULD NOT 
        consider the request to be in error. The requested removal SHOULD
        be ignored as the final modified state of the target will still 
        accurately reflect the merge documents original intent.
      </t>
    
    </section>
    
    <section title="Example" anchor="example">
      
      <figure><preamble>For example, given the following example JSON document:</preamble>
      <artwork>
  {
    "title": "Goodbye!",
    "author" : {
      "givenName" : "John",
      "familyName" : "Doe"
    },
    "tags":[ "example", "sample" ],
    "content": "This will be unchanged"
  }
      </artwork></figure>
      
      <t>
        A user-agent wishing to change the value of the "title" member 
        from "Goodbye!" to the value "Hello!", add a new "phoneNumber" 
        member, remove the "familyName" from the "author" object, and remove 
        the word sample from the "tags" Array, would send the following 
        request:
      </t>
      
<figure><artwork>
  PATCH /my/resource HTTP/1.1
  Host: example.org
  Content-Type: application/merge-patch+json; charset="UTF-8"
  
  {
    "title": "Hello!",
    "phoneNumber": "+01-123-456-7890",
    "author": {
      "familyName": null
    },
    "tags": [ "example" ]
  }
</artwork></figure>
      
<figure><preamble>The resulting JSON document would be:</preamble><artwork>
  {
    "title": "Hello!",
    "author" : {
      "givenName" : "John"
    },
    "tags": [ "example" ],
    "content": "This will be unchanged",
    "phoneNumber": "+01-123-456-7890"
  }
</artwork></figure>

    </section>
             
    <section title="IANA Considerations"> 
      <t>This specification registers the following additional 
      MIME Media Types:</t>

      <t><list>
      <t>Type name: application</t>
      <t>Subtype name: merge-patch+json</t>
      <t>Required parameters: None</t>
      <t>Optional parameters: "charset" : Specifies the character set encoding.
      If not specified, a default of "UTF-8" is assumed.</t>
      <t>Encoding considerations: Resources that use the "application/merge-patch+json"
      media type are required to conform to the "application/json" Media Type
      and are therefore subject to the same encoding considerations
      specified in <xref target="RFC4627">Section 6</xref>.</t>
      <t>Security considerations: As defined in this specification</t>
      <t>Published specification: This specification.</t>
      <t>Applications that use this media type: None currently known.</t>
      <t>Additional information:
      <list>
      <t>Magic number(s): N/A</t>
      <t>File extension(s): N/A</t>
      <t>Macintosh file type code(s): TEXT</t>
      </list></t>
      <t>Person &amp; email address to contact for further information: James M Snell &lt;jasnell@gmail.com&gt;</t>
      <t>Intended usage: COMMON</t>
      <t>Restrictions on usage: None.</t>
      <t>Author: James M Snell &lt;jasnell@gmail.com&gt;</t>
      <t>Change controller: IESG</t>
      </list></t>
      
    </section> 
      
    <section title="Security Considerations"> 
      <t>
        The "application/merge-patch+json" Media Type allows user agents to 
        indicate their intention that the server determine the specific set of 
        change operations to be applied to a target resource. As such, 
        it is the server's responsibility to determine the appropriateness 
        of any given change as well as the user agent's authorization to 
        request such changes. How such determinations are made is considered
        out of the scope of this specification.
      </t>
      
      <t>
        All of the the security considerations discussed in 
        <xref target="RFC5789">Section 5</xref> apply to all uses of the 
        HTTP PATCH method with the "application/merge-patch+json" Media Type.
      </t>     
    </section>
     
  </middle> 
  <back>
    <references title="Normative References"> 
      &rfc2119;
      &rfc5789;
      &rfc4627;
    </references>
    
    <section title="Example Test Cases">

      <figure><artwork>
  ORIGINAL          PATCH          RESULT
  ------------------------------------------
  {"a":"b"}       {"a":"c"}       {"a":"c"}
    
  {"a":"b"}       {"b":"c"}       {"a":"b",
                                   "b":"c"}
  
  {"a":"b"}       {"a":null}      {}
  
  {"a":"b",       {"a":null}      {"b":"c"}
   "b":"c"}
   
  {"a":["b"]}     {"a":"c"}       {"a":"c"}
  
  {"a":"c"}       {"a":["b"]}     {"a":["b"]}
  
  {"a": {         {"a": {         {"a": {
    "b": "c"}       "b": "d",       "b": "d"
  }                 "c": null}      }
                  }               }
                  
  {"a": [         {"a": [1]}      {"a": [1]}
    {"b":"c"}
   ]
  }
  
  ["a","b"]       ["c","d"]       ["c","d"]
  
  {"a":"b"}       ["c"]           ["c"]
  
  [1,2]           {"a":"b",       {"a":"b"}
                   "c":null}

  {"e":null}      {"a":1}         {"e":null,
                                   "a":1}

  {}              {"a": {         {"a": {
                    "bb": {         "bb": {
                     "ccc":null   }}}
                  }}}
              
  {"a":"foo"}     {"b": [         {"a":"foo",
                    3,             "b": [3, {}]
                    null,         }
                    {"x":null}
                   ]
                  }
                  
  [1,2]           [1,null,3]      [1,3]
  
  [1,2]           [1,null,2]      [1,2]
  
  {"a":"b"}       {"a": [         {"a": [
                    {"z":1,         {"z":1}
                     "b":null      ]
                    }             }
                   ]
                  }

  {"a":"foo"}     null            Invalid Patch

  {"a":"foo"}     "bar"           Invalid Patch  
</artwork></figure>

    </section>
    
    <section title="Example JavaScript Implementation">
      
      <t>
        The following example implementation is provided as is, without warranty. 
        It is provided in the public domain. Note that this example is provided
        strictly for illustrative purposes and has not been optimized for 
        performance or reliability in any way.
      </t>
      
      <figure><artwork><![CDATA[
// Apply the patch to the original, return the 
// modified object... this will mutate the 
// passed in object in place as well...
function apply(orig, patch) {
  if (patch == null) 
    return orig;
  else if (patch instanceof Array)
    orig = purge_nulls(patch);
  else if (is_primitive(patch))
    orig = patch;
  else if (patch instanceof Object) {
    if (orig instanceof Array) {
      orig = purge_nulls(patch);
    } else {
      for (m in patch) {
        if (orig.hasOwnProperty(m)) {
          if (patch[m] == null)
            delete orig[m];
          else {
            if (is_primitive(patch[m])) 
              orig[m] = patch[m];
            else {
              if (orig[m] instanceof Array)
                orig[m] = purge_nulls(patch[m]);
              else 
                orig[m] = apply(orig[m],patch[m]);
            }
          }
        } else if (patch[m] != null)
          orig[m] = purge_nulls(patch[m]);
      }
    }
  }
  return orig;
}

function is_primitive(val) {
  var m = typeof val;
  return m == 'string'  || 
         m == 'number'  ||
         m == 'boolean';
}

function purge_nulls(obj) {
  var ret = obj;
  if (!is_primitive(obj)) {
    if (obj instanceof Array) {
      var ret = [];
      for (m in obj)
        if (obj[m] != null) 
          ret.push(purge_nulls(obj[m]));
    } else if (obj instanceof Object) {
      var ret = {};
      for (m in obj) {
        if (obj[m])
          ret[m] = purge_nulls(obj[m]);
      }
    }
  }
  return ret;    
}

// Define the original object...
var orig = {
  "a": "b",
  "c": {
    "d": [1,2,3],
    "e": {
      "f": 1
    }
  }
}
  
// Define the patch...
var patch = {
  "c": {
    "d": [1,2],
    "e": {
      "f": null
    }
  }
}
  
// Apply the patch...
var modified = apply(orig,patch);
]]></artwork></figure>
      
    </section>
    
  </back>  
</rfc> 
 
