<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<rfc category="std" docName="draft-richer-oauth-dyn-reg-management-00"
     ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>

  <?rfc tocdepth='3' ?>

  <?rfc symrefs='yes' ?>

  <?rfc sortrefs='yes' ?>

  <?rfc compact='yes' ?>

  <?rfc subcompact='no' ?>

  <?rfc strict='yes' ?>

  <?rfc notedraftinprogress='yes' ?>

  <front>
    <title abbrev="oauth-dyn-reg">OAuth 2.0 Dynamic Client Registration
    Management Protocol</title>

    <author fullname="Justin Richer" initials="J" role="editor"
            surname="Richer">
      <organization>The MITRE Corporation</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <region/>

          <code/>

          <country/>
        </postal>

        <phone/>

        <facsimile/>

        <email>jricher@mitre.org</email>

        <uri/>
      </address>
    </author>

    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization abbrev="Ping Identity">Ping Identity</organization>

      <address>
        <email>ve7jtb@ve7jtb.com</email>
      </address>
    </author>

    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
      <organization abbrev="Microsoft">Microsoft</organization>

      <address>
        <email>mbj@microsoft.com</email>

        <uri>http://self-issued.info/</uri>
      </address>
    </author>

    <author fullname="Maciej Machulak" initials="M" surname="Machulak">
      <organization>Newcastle University</organization>

      <address>
        <email>m.p.machulak@ncl.ac.uk</email>

        <uri>http://ncl.ac.uk/</uri>
      </address>
    </author>

    <date day="26" month="August" year="2013"/>

    <area>Security</area>

    <workgroup>OAuth Working Group</workgroup>

    <abstract>
      <t>This specification defines methods for a dynamically registered OAuth
      2.0 client to manage its registration through an OAuth 2.0 protected web
      API as well as extended client metadata attributes.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="Introduction" title="Introduction">
      <t>In some use-case scenarios, it is desirable or necessary to allow
      OAuth 2.0 clients to obtain authorization from an OAuth 2.0
      authorization server without requiring the two parties to interact
      beforehand. Nevertheless, for the authorization server to accurately and
      securely represent to end-users which client is seeking authorization to
      access the end-user's resources, a method for automatic and unique
      registration of clients is needed. The OAuth 2.0 authorization framework
      does not define how the relationship between the client and the
      authorization server is initialized, or how a given client is assigned a
      unique client identifier. Historically, this has happened out-of-band
      from the OAuth 2.0 protocol.</t>

      <t>This specification extends the <xref target="DynReg">OAuth 2.0 Core
      Dynamic Client Registration</xref> specification (which provides a
      method for OAuth 2.0 clients to be registered dynamically with an
      authorization server) and defines a mechanism for the client to present
      the authorization server with a set of extended metadata, such as a
      display name and icon to be presented to the user during the
      authorization step. This draft also provides a mechanism for the client
      to read and update this information after the initial registration
      action. This draft protects these actions through the use of an OAuth
      2.0 bearer access token that is issued to the client during registration
      explicitly for this purpose.</t>

      <section anchor="Notation" title="Notational Conventions">
        <t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
        'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
        document are to be interpreted as described in <xref
        target="RFC2119"/>.</t>

        <t>Unless otherwise noted, all the protocol parameter names and values
        are case sensitive.</t>
      </section>

      <section anchor="terminology" title="Terminology">
        <t>This specification uses the terms "Access Token", "Refresh Token",
        "Authorization Code", "Authorization Grant", "Authorization Server",
        "Authorization Endpoint", "Client", "Client Identifier", "Client
        Secret", "Protected Resource", "Resource Owner", "Resource Server",
        and "Token Endpoint" defined by <xref target="RFC6749">OAuth
        2.0</xref>.</t>

        <t>This specification defines the following additional terms:</t>

        <t><list style="hanging">
            <t hangText="Client Configuration Endpoint">OAuth 2.0 endpoint
            through which registration information for a registered client can
            be managed. This URL for this endpoint is returned by the
            authorization server in the client information response.</t>

            <t hangText="Registration Access Token">OAuth 2.0 bearer token
            issued by the authorization server through the client registration
            endpoint that is used to authenticate the caller when accessing
            the client's registration information at the client configuration
            endpoint. This access token is associated with a particular
            registered client.</t>
          </list></t>
      </section>

      <section anchor="protocol-flow" title="Protocol Flow">
        <figure>
          <preamble>This extends the flow in the <xref target="DynReg">core
          dynamic registration</xref> specification as follows:</preamble>

          <artwork><![CDATA[
       +--------(A)- Initial Access Token
       |
       v
 +-----------+                                      +---------------+
 |           |--(B)- Client Registration Request -->|    Client     |
 |           |                                      | Registration  |
 |           |<-(C)- Client Information Response ---|   Endpoint    |
 |           |                                      +---------------+
 |           |
 |           |                                      +---------------+
 | Client or |--(D)- Read or Update Request ------->|               |
 | Developer |                                      |               |
 |           |<-(E)- Client Information Response ---|    Client     |
 |           |                                      | Configuration |
 |           |                                      |   Endpoint    |
 |           |                                      |               |
 |           |--(F)- Delete Request --------------->|               |
 |           |                                      |               |
 |           |<-(G)- Delete Confirmation -----------|               |
 +-----------+                                      +---------------+


]]></artwork>

          <postamble>Figure 1: Abstract Protocol Flow</postamble>
        </figure>

        <t>The abstract OAuth 2.0 Client dynamic registration flow illustrated
        in Figure 1 describes the interaction between the client or developer
        and the two endpoints defined in this specification and its parent.
        This figure does not demonstrate error conditions. This flow includes
        the following steps:</t>

        <t><list style="hanging">
            <t hangText="(A)"><vspace blankLines="0"/>Optionally, the client
            or developer is issued an initial access token for use with the
            client registration endpoint. The method by which the initial
            access token is issued to the client or developer is out of scope
            for this specification.</t>

            <t hangText="(B)"><vspace blankLines="0"/>The client or developer
            calls the client registration endpoint with its desired
            registration metadata, optionally including the initial access
            token from (A) if one is required by the authorization server.</t>

            <t hangText="(C)"><vspace blankLines="0"/>The authorization server
            registers the client and returns the client's registered metadata,
            a client identifier that is unique at the server, a set of client
            credentials such as a client secret if applicable for this client,
            a URI pointing to the client configuration endpoint, and a
            registration access token to be used when calling the client
            configuration endpoint.</t>

            <t hangText="(D)"><vspace blankLines="0"/>The client or developer
            optionally calls the client configuration endpoint with a read or
            update request using the registration access token issued in (C).
            An update request contains all of the client's registered
            metadata.</t>

            <t hangText="(E)"><vspace blankLines="0"/>The authorization server
            responds with the client's current configuration, potentially
            including a new registration access token and a new set of client
            credentials such as a client secret if applicable for this client.
            If a new registration access token is issued, it replaces the
            token issued in (C) for all subsequent calls to the client
            configuration endpoint.</t>

            <t hangText="(F)"><vspace blankLines="0"/>The client or developer
            optionally calls the client configuration endpoint with a delete
            request using the registration access token issued in (C).</t>

            <t hangText="(G)"><vspace blankLines="0"/>The authorization server
            deprovisions the client and responds with a confirmation that the
            deletion has taken place.</t>
          </list></t>
      </section>

      <section anchor="Credentials"
               title="Registration Tokens and Client Credentials">
        <t>Throughout the course of the dynamic registration protocol, there
        are three different classes of credentials in play, each with
        different properties and targets.</t>

        <t><list style="symbols">
            <t>The initial access token is optionally used by the client or
            developer at the registration endpoint. This is an OAuth 2.0 token
            that is used to authorize the initial client registration request.
            The content, structure, generation, and validation of this token
            are out of scope for this specification. The authorization server
            can use this token to verify that the presenter is allowed to
            dynamically register new clients. This token may be shared between
            multiple instances of a client to allow them to each register
            separately, thereby letting the authorization server use this
            token to tie multiple instances of registered clients (each with
            their own distinct client identifier) back to the party to whom
            the initial access token was issued, usually an application
            developer. This token should be used only at the client
            registration endpoint.</t>

            <t>The registration access token is used by the client or
            developer at the client configuration endpoint and represents the
            holder's authorization to manage the registration of a client.
            This is an OAuth 2.0 bearer token that is issued from the client
            registration endpoint in response to a client registration request
            and is returned in a client information response. The registration
            access token is uniquely bound to the client identifier and is
            required to be presented with all calls to the client
            configuration endpoint. The registration access token should be
            protected and should not be shared between instances of a client
            (otherwise, one instance could change or delete registration
            values for all instances of the client). The registration access
            token can be rotated through the use of the client read and update
            methods on the client configuration endpoint. The registration
            access token should be used only at the client configuration
            endpoint.</t>

            <t>The client credentials (such as <spanx style="verb">client_secret</spanx>)
            are optional depending on the type of client and are used to
            retrieve OAuth tokens. Client credentials are most often bound to
            particular instances of a client and should not be shared between
            instances. Note that since not all types of clients have client
            credentials, they cannot be used to manage client registrations at
            the client configuration endpoint. The client credentials can be
            rotated through the use of the client read and update methods on
            the client configuration endpoint. The client credentials can not
            be used for authentication at the client registration endpoint or
            at the client configuration endpoint.</t>
          </list></t>

        <section anchor="credential-rotation" title="Credential Rotation">
          <t>The Authorization Server MAY rotate the client's registration
          access token and/or client credentials (such as a <spanx
          style="verb">client_secret</spanx>) throughout the lifetime of the
          client. The client can discovery that these values have changed by
          reading the client information response returned from either a read
          or update request to the client configuration endpoint. The client's
          current registration access token and client credentials (if
          applicable) MUST be included in this response.</t>

          <t>The registration access token SHOULD be rotated only in response
          to a read or update request to the client configuration endpoint, at
          which point the new registration access token is returned to the
          client and the old registration access token SHOULD be discarded by
          both parties. If the registration access token to expire or be
          rotated outside of such requests, the client or developer may be
          locked out of managing the client's configuration.</t>
        </section>
      </section>
    </section>

    <section anchor="client-metadata" title="Client Metadata">
      <t>Many OAuth 2.0 clients wish to register different kinds of client
      metadata to facilitate authorization and usage of the protected API.
      This specification extends the list of client metadata defined in <xref
      target="DynReg">OAuth 2.0 Core Client Dynamic Registration</xref> with
      the following fields:</t>

      <t><list style="hanging">
          <t hangText="client_name"><vspace blankLines="0"/>Human-readable
          name of the client to be presented to the user. If omitted, the
          authorization server MAY display the raw <spanx style="verb">client_id</spanx>
          value to the user instead. It is RECOMMENDED that clients always
          send this field. The value of this field MAY be internationalized as
          described in <xref target="HumanReadableClientMetadata">Human
          Readable Client Metadata</xref>.</t>

          <t hangText="client_uri"><vspace/>URL of the homepage of the client.
          If present, the server SHOULD display this URL to the end user in a
          clickable fashion. It is RECOMMENDED that clients always send this
          field. The value of this field MUST point to a valid web page. The
          value of this field MAY be internationalized as described in <xref
          target="HumanReadableClientMetadata">Human Readable Client
          Metadata</xref>.</t>

          <t hangText="logo_uri"><vspace blankLines="0"/>URL that references a
          logo for the client. If present, the server SHOULD display this
          image to the end user during approval. The value of this field MUST
          point to a valid image file. The value of this field MAY be
          internationalized as described in <xref
          target="HumanReadableClientMetadata">Human Readable Client
          Metadata</xref>.</t>

          <t hangText="scope"><vspace blankLines="0"/>Space separated list of
          scope values (as described in <xref target="RFC6749">OAuth 2.0
          Section 3.3</xref>) that the client can use when requesting access
          tokens. The semantics of values in this list is service specific. If
          omitted, an authorization server MAY register a Client with a
          default set of scopes.</t>

          <t hangText="contacts"><vspace blankLines="0"/>Array of email
          addresses for people responsible for this client. The authorization
          server MAY make these addresses available to end users for support
          requests for the client. An authorization server MAY use these email
          addresses as identifiers for an administrative page for this
          client.</t>

          <t hangText="tos_uri"><vspace blankLines="0"/>URL that points to a
          human-readable Terms of Service document for the client. The
          Authorization Server SHOULD display this URL to the end-user if it
          is given. The Terms of Service usually describe a contractual
          relationship between the end-user and the client that the end-user
          accepts when authorizing the client. The value of this field MUST
          point to a valid web page. The value of this field MAY be
          internationalized as described in <xref
          target="HumanReadableClientMetadata">Human Readable Client
          Metadata</xref>.</t>

          <t hangText="policy_uri"><vspace blankLines="0"/>URL that points to
          a human-readable Policy document for the client. The authorization
          server SHOULD display this URL to the end-user if it is given. The
          policy usually describes how an end-user's data will be used by the
          client. The value of this field MUST point to a valid web page. The
          value of this field MAY be internationalized as described in <xref
          target="HumanReadableClientMetadata">Human Readable Client
          Metadata</xref>.</t>

          <t hangText="jwks_uri"><vspace blankLines="0"/>URL for the Client's
          <xref target="JWK">JSON Web Key Set</xref> document representing the
          client's public keys. The value of this field MUST point to a valid
          JWK Set. These keys MAY be used for higher level protocols that
          require signing or encryption.</t>

          <t hangText="software_id"><vspace blankLines="0"/>A identifier for
          the software that comprises a client. Unlike <spanx style="verb">client_id</spanx>,
          which is issued by the authorization server and generally varies
          between instances, the <spanx style="verb">software_id</spanx> is
          asserted by the client software and is intended to be shared between
          all copies of the client software. The value for this field MAY be a
          <xref target="RFC4122">UUID</xref>. The identifier SHOULD NOT change
          when software version changes or when a new installation instance is
          detected. Authorization servers MUST treat this field as
          self-asserted by the client and MUST NOT make any trusted decisions
          on the value of this field alone.</t>

          <t hangText="software_version"><vspace blankLines="0"/>A version
          identifier for the software that comprises a client. The value of
          this field is a string that is intended to be compared using string
          equality matching. The value of the <spanx style="verb">software_version</spanx>
          SHOULD change on any update to the client software. Authorization
          servers MUST treat this field as self-asserted by the client and
          MUST NOT make any trusted decisions on the value of this field
          alone.</t>
        </list></t>

      <section anchor="HumanReadableClientMetadata"
               title="Human Readable Client Metadata">
        <t>Human-readable client metadata values and client metadata values
        that reference human-readable values MAY be represented in multiple
        languages and scripts. For example, the values of fields such as
        <spanx style="verb">client_name</spanx>, <spanx style="verb">tos_uri</spanx>,
        <spanx style="verb">policy_uri</spanx>, <spanx style="verb">logo_uri</spanx>,
        and <spanx style="verb">client_uri</spanx> might have multiple
        locale-specific values in some client registrations.</t>

        <t>To specify the languages and scripts, <xref
        target="RFC5646">BCP47</xref> language tags are added to client
        metadata member names, delimited by a # character. Since JSON member
        names are case sensitive, it is RECOMMENDED that language tag values
        used in Claim Names be spelled using the character case with which
        they are registered in the <xref target="IANA.Language">IANA Language
        Subtag Registry</xref>. In particular, normally language names are
        spelled with lowercase characters, region names are spelled with
        uppercase characters, and languages are spelled with mixed case
        characters. However, since BCP47 language tag values are case
        insensitive, implementations SHOULD interpret the language tag values
        supplied in a case insensitive manner. Per the recommendations in
        BCP47, language tag values used in metadata member names should only
        be as specific as necessary. For instance, using <spanx style="verb">fr</spanx>
        might be sufficient in many contexts, rather than <spanx style="verb">fr-CA</spanx>
        or <spanx style="verb">fr-FR</spanx>.</t>

        <t>For example, a client could represent its name in English as <spanx
        style="verb">"client_name#en": "My Client"</spanx> and its name in
        Japanese as <spanx style="verb">"client_name#ja-Jpan-JP": "\u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u540D"</spanx>
        within the same registration request. The authorization server MAY
        display any or all of these names to the resource owner during the
        authorization step, choosing which name to display based on system
        configuration, user preferences or other factors.</t>

        <t>If any human-readable field is sent without a language tag, parties
        using it MUST NOT make any assumptions about the language, character
        set, or script of the string value, and the string value MUST be used
        as-is wherever it is presented in a user interface. To facilitate
        interoperability, it is RECOMMENDED that clients and servers use a
        human-readable field without any language tags in addition to any
        language-specific fields, and it is RECOMMENDED that any
        human-readable fields sent without language tags contain values
        suitable for display on a wide variety of systems.</t>

        <t>Implementer's Note: Many JSON libraries make it possible to
        reference members of a JSON object as members of an object construct
        in the native programming environment of the library. However, while
        the <spanx style="verb">#</spanx> character is a valid character
        inside of a JSON object's member names, it is not a valid character
        for use in an object member name in many programming environments.
        Therefore, implementations will need to use alternative access forms
        for these claims. For instance, in JavaScript, if one parses the JSON
        as follows, <spanx style="verb">var j = JSON.parse(json);</spanx>,
        then the member <spanx style="verb">client_name#en-us</spanx> can be
        accessed using the JavaScript syntax <spanx style="verb">j["client_name#en-us"]</spanx>.</t>
      </section>
    </section>

    <section anchor="AccessEndpoint" title="Client Configuration Endpoint">
      <t>The client configuration endpoint is an OAuth 2.0 protected resource
      that is provisioned by the server to facilitate viewing, updating, and
      deleting a client's registered information. The location of this
      endpoint is communicated to the client through the <spanx style="verb">registration_client_uri</spanx>
      member of the <xref target="client-info-response">Client Information
      Response</xref>. The client MUST use its registration access token in
      all calls to this endpoint as an <xref target="RFC6750">OAuth 2.0 Bearer
      Token</xref>.</t>

      <t>Operations on this endpoint are switched through the use of different
      <xref target="RFC2616">HTTP methods</xref>. If an authorization server
      does not support a particular method on the client configuration
      endpoint, it MUST respond with the appropriate error code.</t>

      <section anchor="client-configuration-endpoint-uri"
               title="Forming the Client Configuration Endpoint URL">
        <t>The authorization server MUST provide the client with the fully
        qualified URL in the <spanx style="verb">registration_client_uri</spanx>
        element of the <xref target="client-info-response">Client Information
        Response</xref>. The authorization server MUST NOT expect the client
        to construct or discover this URL on its own. The client MUST use the
        URL as given by the server and MUST NOT construct this URL from
        component pieces.</t>

        <t>Depending on deployment characteristics, the client configuration
        endpoint URL may take any number of forms. It is RECOMMENDED that this
        endpoint URL be formed through the use of a server-constructed URL
        string which combines the client registration endpoint's URL and the
        issued <spanx style="verb">client_id</spanx> for this client, with the
        latter as either a path parameter or a query parameter. For example, a
        client with the client identifier <spanx style="verb">s6BhdRkqt3</spanx>
        could be given a client configuration endpoint URL of <spanx
        style="verb">https://server.example.com/register/s6BhdRkqt3</spanx>
        (path parameter) or of <spanx style="verb">https://server.example.com/register?client_id=s6BhdRkqt3</spanx>
        (query parameter). In both of these cases, the client simply uses the
        URL as given by the authorization server.</t>

        <t>These common patterns can help the server to more easily determine
        the client to which the request pertains, which MUST be matched
        against the client to which the registration access token was issued.
        If desired, the server MAY simply return the client registration
        endpoint URL as the client configuration endpoint URL and change
        behavior based on the authentication context provided by the
        registration access token.</t>
      </section>

      <section anchor="ReadRequest" title="Client Read Request">
        <t>To read the current configuration of the client on the
        authorization server, the client makes an HTTP GET request to the
        client configuration endpoint, authenticating with its registration
        access token.</t>

        <figure>
          <preamble>Following is a non-normative example request (with line
          wraps for display purposes only):</preamble>

          <artwork><![CDATA[GET /register/s6BhdRkqt3 HTTP/1.1
Accept: application/json
Host: server.example.com
Authorization: Bearer reg-23410913-abewfq.123483

]]></artwork>
        </figure>

        <t/>

        <t>Upon successful read of the information for a currently active
        client, the authorization server responds with an HTTP 200 OK with
        content type of <spanx style="verb">application/json</spanx> and a
        payload as described in <xref target="client-info-response">Client
        Information Response</xref>. Some values in the response, including
        the <spanx style="verb">client_secret</spanx> and <spanx style="verb">registration_access_token</spanx>,
        MAY be different from those in the initial registration response. If
        the authorization server includes a new client secret and/or
        registration access token in its response, the client MUST immediately
        discard its previous client secret and/or registration access token.
        The value of the <spanx style="verb">client_id</spanx> MUST NOT change
        from the initial registration response.</t>

        <t>If the registration access token used to make this request is not
        valid, the server MUST respond with an error as described in <xref
        target="RFC6750">OAuth Bearer Token Usage</xref>.</t>

        <t>If the client does not exist on this server, the server MUST
        respond with HTTP 401 Unauthorized and the registration access token
        used to make this request SHOULD be immediately revoked.</t>

        <t>If the client does not have permission to read its record, the
        server MUST return an HTTP 403 Forbidden.</t>
      </section>

      <section anchor="UpdateRequest" title="Client Update Request">
        <t>This operation updates a previously-registered client with new
        metadata at the authorization server. This request is authenticated by
        the registration access token issued to the client.</t>

        <t>The client sends an HTTP PUT to the client configuration endpoint
        with a content type of <spanx style="verb">application/json</spanx>.
        The HTTP entity payload is a <xref target="RFC4627">JSON</xref>
        document consisting of a JSON object and all parameters as top- level
        members of that JSON object.</t>

        <t>This request MUST include all fields described in <xref
        target="client-metadata">Client Metadata</xref> as returned to the
        client from a previous register, read, or update operation. The client
        MUST NOT include the <spanx style="verb">registration_access_token</spanx>,
        <spanx style="verb">registration_client_uri</spanx>, <spanx
        style="verb">client_secret_expires_at</spanx>, or <spanx style="verb">client_id_issued_at</spanx>
        fields described in <xref target="client-info-response">Client
        Information Response</xref>.</t>

        <t>Valid values of client metadata fields in this request MUST
        replace, not augment, the values previously associated with this
        client. Omitted fields MUST be treated as null or empty values by the
        server.</t>

        <t>The client MUST include its <spanx style="verb">client_id</spanx>
        field in the request, and it MUST be the same as its currently-issued
        client identifier. If the client includes the <spanx style="verb">client_secret</spanx>
        field in the request, the value of this field MUST match the
        currently-issued client secret for that client. The client MUST NOT be
        allowed to overwrite its existing client secret with its own chosen
        value.</t>

        <t>For all metadata fields, the authorization server MAY replace any
        invalid values with suitable default values, and it MUST return any
        such fields to the client in the response.</t>

        <t>For example, a client could send the following request to the
        client registration endpoint to update the client registration in the
        above example with new information:</t>

        <figure>
          <preamble>Following is a non-normative example request (with line
          wraps for display purposes only):</preamble>

          <artwork><![CDATA[PUT /register/s6BhdRkqt3 HTTP/1.1
Accept: application/json
Host: server.example.com
Authorization: Bearer reg-23410913-abewfq.123483

{
 "client_id":"s6BhdRkqt3",
 "client_secret": "cf136dc3c1fc93f31185e5885805d",
 "redirect_uris":["https://client.example.org/callback",
    "https://client.example.org/alt"],
 "scope": "read write dolphin",
 "grant_types": ["authorization_code", "refresh_token"]
 "token_endpoint_auth_method": "client_secret_basic",
 "jwks_uri": "https://client.example.org/my_public_keys.jwks"
 "client_name":"My New Example",
 "client_name#fr":"Mon Nouvel Exemple",
 "logo_uri":"https://client.example.org/newlogo.png"
 "logo_uri#fr":"https://client.example.org/fr/newlogo.png"
}
]]></artwork>
        </figure>

        <t/>

        <t>Upon successful update, the authorization server responds with an
        HTTP 200 OK Message with content type <spanx style="verb">application/json</spanx>
        and a payload as described in <xref
        target="client-info-response">Client Information Response</xref>. Some
        values in the response, including the <spanx style="verb">client_secret</spanx>
        and r<spanx style="verb">egistration_access_token</spanx>, MAY be
        different from those in the initial registration response. If the
        authorization server includes a new client secret and/or registration
        access token in its response, the client MUST immediately discard its
        previous client secret and/or registration access token. The value of
        the <spanx style="verb">client_id</spanx> MUST NOT change from the
        initial registration response.</t>

        <t>If the registration access token used to make this request is not
        valid, the server MUST respond with an error as described in <xref
        target="RFC6750">OAuth Bearer Token Usage</xref>.</t>

        <t>If the client does not exist on this server, the server MUST
        respond with HTTP 401 Unauthorized, and the registration access token
        used to make this request SHOULD be immediately revoked.</t>

        <t>If the client is not allowed to update its records, the server MUST
        respond with HTTP 403 Forbidden.</t>

        <t>If the client attempts to set an invalid metadata field and the
        authorization server does not set a default value, the authorization
        server responds with an error as described in <xref
        target="DynReg">Client Registration Error Response</xref>.</t>
      </section>

      <section anchor="DeleteRequest" title="Client Delete Request">
        <t>To deprovision itself on the authorization server, the client makes
        an HTTP DELETE request to the client configuration endpoint. This
        request is authenticated by the registration access token issued to
        the client.</t>

        <figure>
          <preamble>Following is a non-normative example request (with line
          wraps for display purposes only):</preamble>

          <artwork><![CDATA[DELETE /register/s6BhdRkqt3 HTTP/1.1
Host: server.example.com
Authorization: Bearer reg-23410913-abewfq.123483

]]></artwork>
        </figure>

        <t/>

        <t>A successful delete action will invalidate the <spanx style="verb">client_id</spanx>,
        <spanx style="verb">client_secret</spanx>, and <spanx style="verb">registration_access_token</spanx>
        for this client, thereby preventing the <spanx style="verb">client_id</spanx>
        from being used at either the authorization endpoint or token endpoint
        of the authorization server. The authorization server SHOULD
        immediately invalidate all existing authorization grants and
        currently-active tokens associated with this client.</t>

        <t>If a client has been successfully deprovisioned, the authorization
        server responds with an HTTP 204 No Content message.</t>

        <t>If the server does not support the delete method, the server MUST
        respond with an HTTP 405 Not Supported.</t>

        <t>If the registration access token used to make this request is not
        valid, the server MUST respond with an error as described in <xref
        target="RFC6750">OAuth Bearer Token Usage</xref>.</t>

        <t>If the client does not exist on this server, the server MUST
        respond with HTTP 401 Unauthorized and the registration access token
        used to make this request SHOULD be immediately revoked.</t>

        <t>If the client is not allowed to delete itself, the server MUST
        respond with HTTP 403 Forbidden.</t>

        <figure>
          <preamble>Following is a non-normative example response:</preamble>

          <artwork><![CDATA[HTTP/1.1 204 No Content
Cache-Control: no-store
Pragma: no-cache

]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="Responses" title="Responses">
      <t>In response to certain requests from the client to either the client
      registration endpoint or the client configuration endpoint as described
      in this specification, the authorization server sends the following
      response bodies.</t>

      <section anchor="client-info-response"
               title="Client Information Response">
        <t>This specification extends the client information response defined
        in OAuth 2.0 Core Client Dynamic Registration. The response contains
        the client identifier as well as the client secret, if the client is a
        confidential client. The response also contains the fully qualified
        URL of the client configuration endpoint for this specific client that
        the client may use to obtain and update information about itself. The
        response also contains a registration access token that is to be used
        by the client to perform subsequent operations at the client
        configuration endpoint.</t>

        <t><list style="hanging">
            <t hangText="client_id"><vspace/>REQUIRED. The unique client
            identifier, MUST NOT be currently valid for any other registered
            client.</t>

            <t hangText="client_secret"><vspace/>OPTIONAL. The client secret.
            If issued, this MUST be unique for each <spanx style="verb">client_id</spanx>.
            This value is used by confidential clients to authenticate to the
            token endpoint as described in <xref target="RFC6749">OAuth
            2.0</xref> Section 2.3.1.</t>

            <t hangText="client_id_issued_at"><vspace/>OPTIONAL. Time at which
            the Client Identifier was issued. The time is represented as the
            number of seconds from 1970-01-01T0:0:0Z as measured in UTC until
            the date/time.</t>

            <t hangText="client_secret_expires_at"><vspace/>REQUIRED if <spanx
            style="verb">client_secret</spanx> is issued. Time at which the
            <spanx style="verb">client_secret</spanx> will expire or 0 if it
            will not expire. The time is represented as the number of seconds
            from 1970-01-01T0:0:0Z as measured in UTC until the date/time.</t>

            <t hangText="registration_access_token"><vspace/>REQUIRED. Access
            token that is used at the client configuration endpoint to perform
            subsequent operations upon the client registration.</t>

            <t hangText="registration_client_uri"><vspace
            blankLines="0"/>REQUIRED. The fully qualified URL of the client
            configuration endpoint for this client. The client MUST use this
            URL as given when communicating with the client configuration
            endpoint.</t>
          </list></t>

        <t>Additionally, the Authorization Server MUST return all registered
        <xref target="client-metadata">metadata</xref> about this client,
        including any fields provisioned by the authorization server itself.
        The authorization server MAY reject or replace any of the client's
        requested metadata values submitted during the registration or update
        requests and substitute them with suitable values.</t>

        <t>The response is an <spanx style="verb">application/json</spanx>
        document with all parameters as top-level members of a <xref
        target="RFC4627">JSON object</xref>.</t>

        <figure>
          <preamble>Following is a non-normative example response:</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store
Pragma: no-cache

{
 "registration_access_token": "reg-23410913-abewfq.123483",
 "registration_client_uri": 
    "https://server.example.com/register/s6BhdRkqt3",
 "client_id":"s6BhdRkqt3",
 "client_secret": "cf136dc3c1fc93f31185e5885805d",
 "client_id_issued_at":2893256800
 "client_secret_expires_at":2893276800
 "client_name":"My Example Client",
 "client_name#ja-Jpan-JP":
    "\u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u540D",
 "redirect_uris":["https://client.example.org/callback",
    "https://client.example.org/callback2"]
 "scope": "read write dolphin",
 "grant_types": ["authorization_code", "refresh_token"]
 "token_endpoint_auth_method": "client_secret_basic",
 "logo_uri": "https://client.example.org/logo.png",
 "jwks_uri": "https://client.example.org/my_public_keys.jwks"
}]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This specification makes no requests of IANA.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>Since the client configuration endpoint is an OAuth 2.0 protected
      resource, it SHOULD have some rate limiting on failures to prevent the
      registration access token from being disclosed though repeated access
      attempts.</t>

      <t>The authorization server MUST treat all client metadata as
      self-asserted. For instance, a rogue client might use the name and logo
      for the legitimate client which it is trying to impersonate.
      Additionally, a rogue client might try to use the software identifier or
      software version of a legitimate client to attempt to associate itself
      on the authorization server instances of the legitimate client. To
      counteract this, an authorization server needs to take steps to mitigate
      this phishing risk by looking at the entire registration request and
      client configuration. For instance, an authorization server could warn
      if the domain/site of the logo doesn't match the domain/site of redirect
      URIs. An authorization server could also refuse registration from a
      known software identifier that is requesting different redirect URIs or
      a different client homepage uri. An authorization server can also
      present warning messages to end users about dynamically registered
      clients in all cases, especially if such clients have been recently
      registered or have not been trusted by any users at the authorization
      server before.</t>

      <t>In a situation where the authorization server is supporting open
      client registration, it must be extremely careful with any URL provided
      by the client that will be displayed to the user (e.g. <spanx
      style="verb">logo_uri</spanx>, <spanx style="verb">tos_uri</spanx>,
      <spanx style="verb">client_uri</spanx>, and <spanx style="verb">policy_uri</spanx>).
      For instance, a rogue client could specify a registration request with a
      reference to a drive-by download in the <spanx style="verb">policy_uri</spanx>.
      The authorization server SHOULD check to see if the <spanx style="verb">logo_uri</spanx>,
      <spanx style="verb">tos_uri</spanx>, <spanx style="verb">client_uri</spanx>,
      and <spanx style="verb">policy_uri</spanx> have the same host and scheme
      as the those defined in the array of <spanx style="verb">redirect_uris</spanx>
      and that all of these resolve to valid web pages.</t>

      <t>While the client secret can expire, the registration access token
      should not expire while a client is still actively registered. If this
      token were to expire, a developer or client could be left in a situation
      where they have no means of retrieving or updating the client's
      registration information. Were that the case, a new registration would
      be required, thereby generating a new client identifier. However, to
      limit the exposure surface of the registration access token, the
      registration access token MAY be rotated when the developer or client
      does a read or update operation on the client's client configuration
      endpoint. As the registration access tokens are relatively long-term
      credentials, and since the registration access token is a Bearer token
      and acts as the sole authentication for use at the client configuration
      endpoint, it MUST be protected by the developer or client as described
      in <xref target="RFC6750">OAuth 2.0 Bearer Token Usage</xref>.</t>

      <t>If a client is deprovisioned from a server, any outstanding
      registration access token for that client MUST be invalidated at the
      same time. Otherwise, this can lead to an inconsistent state wherein a
      client could make requests to the client configuration endpoint where
      the authentication would succeed but the action would fail because the
      client is no longer valid. To prevent accidental disclosure from such an
      erroneous situation, the authorization server MUST treat all such
      requests as if the registration access token was invalid (by returning
      an HTTP 401 Unauthorized error, as described).</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2246.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4122.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5226.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5646.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6125.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6749.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6750.xml'?>

      <reference anchor="JWK">
        <front>
          <title>JSON Web Key (JWK)</title>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization>Microsoft</organization>

            <address>
              <email>mbj@microsoft.com</email>

              <uri>http://self-issued.info/</uri>
            </address>
          </author>

          <date day="8" month="May" year="2013"/>
        </front>

        <seriesInfo name="Internet-Draft" value="draft-ietf-jose-json-web-key"/>

        <format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-key"
                type="HTML"/>
      </reference>

      <reference anchor="DynReg">
        <front>
          <title>OAuth 2.0 Core Dynamic Client Registration</title>

          <author fullname="Justin Richer" initials="J" surname="Richer">
            <organization>J</organization>
          </author>

          <date day="26" month="August" year="2013"/>
        </front>

        <seriesInfo name="Internet-Draft"
                    value="draft-richer-oauth-dyn-reg-core"/>

        <format target="http://tools.ietf.org/html/draft-oauth-dyn-reg-core"
                type="HTML"/>
      </reference>

      <reference anchor="OAuth.JWT">
        <front>
          <title abbrev="OAuth JWT Bearer Token Profiles">JSON Web Token (JWT)
          Bearer Token Profiles for OAuth 2.0</title>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <!-- role="editor" -->

            <organization>Microsoft</organization>
          </author>

          <author fullname="Brian Campbell" initials="B." surname="Campbell">
            <organization abbrev="Ping Identity">Ping Identity
            Corp.</organization>
          </author>

          <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
            <organization>Salesforce</organization>
          </author>

          <date day="29" month="March" year="2013"/>
        </front>

        <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-jwt-bearer"/>

        <format target="http://tools.ietf.org/html/draft-ietf-oauth-jwt-bearer"
                type="HTML"/>
      </reference>

      <reference anchor="OAuth.SAML2">
        <front>
          <title abbrev="OAuth JWT Bearer Token Profiles">SAML 2.0 Bearer
          Assertion Profiles for OAuth 2.0</title>

          <author fullname="Brian Campbell" initials="B." surname="Campbell">
            <organization abbrev="Ping Identity">Ping Identity
            Corp.</organization>
          </author>

          <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
            <organization>Salesforce</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization>Microsoft</organization>
          </author>

          <date day="29" month="March" year="2013"/>
        </front>

        <seriesInfo name="Internet-Draft"
                    value="draft-ietf-oauth-saml2-bearer"/>

        <format target="http://tools.ietf.org/html/draft-ietf-oauth-saml2-bearer"
                type="HTML"/>
      </reference>

      <reference anchor="IANA.Language">
        <front>
          <title>Language Subtag Registry</title>

          <author>
            <organization>Internet Assigned Numbers Authority
            (IANA)</organization>
          </author>

          <date year="2005"/>
        </front>

        <format target="http://www.iana.org/assignments/language-subtag-registry"
                type="TXT"/>
      </reference>
    </references>

    <section anchor="Acknowledgments" title="Acknowledgments">
      <t>The authors thank the OAuth Working Group, the User-Managed Access
      Working Group, and the OpenID Connect Working Group participants for
      their input to this document. In particular, the following individuals
      have been instrumental in their review and contribution to various
      versions of this document: Amanda Anganes, Derek Atkins, Tim Bray,
      Domenico Catalano, Donald Coffin, Vladimir Dzhuvinov, George Fletcher,
      Thomas Hardjono, Phil Hunt, William Kim, Torsten Lodderstedt, Eve Maler,
      Josh Mandel, Nov Matake, Nat Sakimura, Christian Scholz, and Hannes
      Tschofenig.</t>
    </section>

    <section anchor="History" title="Document History">
      <t>[[ to be removed by the RFC editor before publication as an RFC
      ]]</t>

      <t>- 00</t>

      <t><list style="symbols">
          <t>Partitioned dyn-reg specification into core and management
          specs</t>
        </list></t>

      <t>-14</t>

      <t><list style="symbols">
          <t>Added software_id and software_version metadata fields</t>

          <t>Added direct references to RFC6750 errors in read/update/delete
          methods</t>
        </list></t>

      <t>-13</t>

      <t><list style="symbols">
          <t>Fixed broken example text in registration request and in delete
          request</t>

          <t>Added security discussion of separating clients of different
          grant types</t>

          <t>Fixed error reference to point to RFC6750 instead of RFC6749</t>

          <t>Clarified that servers must respond to all requests to
          configuration endpoint, even if it's just an error code</t>

          <t>Lowercased all Terms to conform to style used in RFC6750</t>
        </list></t>

      <t>-12</t>

      <t><list style="symbols">
          <t>Improved definition of Initial Access Token</t>

          <t>Changed developer registration scenario to have the Initial
          Access Token gotten through a normal OAuth 2.0 flow</t>

          <t>Moved non-normative client lifecycle examples to appendix</t>

          <t>Marked differentiating between auth servers as out of scope</t>

          <t>Added protocol flow diagram</t>

          <t>Added credential rotation discussion</t>

          <t>Called out Client Registration Endpoint as an OAuth 2.0 Protected
          Resource</t>

          <t>Cleaned up several pieces of text</t>
        </list></t>

      <t>-11</t>

      <t><list style="symbols">
          <t>Added localized text to registration request and response
          examples.</t>

          <t>Removed <spanx style="verb">client_secret_jwt</spanx> and <spanx
          style="verb">private_key_jwt</spanx>.</t>

          <t>Clarified <spanx style="verb">tos_uri</spanx> and <spanx
          style="verb">policy_uri</spanx> definitions.</t>

          <t>Added the OAuth Token Endpoint Authentication Methods registry
          for registering <spanx style="verb">token_endpoint_auth_method</spanx>
          metadata values.</t>

          <t>Removed uses of non-ASCII characters, per RFC formatting
          rules.</t>

          <t>Changed <spanx style="verb">expires_at</spanx> to <spanx
          style="verb">client_secret_expires_at</spanx> and <spanx
          style="verb">issued_at</spanx> to <spanx style="verb">client_id_issued_at</spanx>
          for greater clarity.</t>

          <t>Added explanatory text for different credentials (Initial Access
          Token, Registration Access Token, Client Credentials) and what
          they're used for.</t>

          <t>Added Client Lifecycle discussion and examples.</t>

          <t>Defined Initial Access Token in Terminology section.</t>
        </list></t>

      <t>-10</t>

      <t><list style="symbols">
          <t>Added language to point out that scope values are
          service-specific</t>

          <t>Clarified normative language around client metadata</t>

          <t>Added extensibility to token_endpoint_auth_method using absolute
          URIs</t>

          <t>Added security consideration about registering redirect URIs</t>

          <t>Changed erroneous 403 responses to 401's with notes about token
          handling</t>

          <t>Added example for initial registration credential</t>
        </list></t>

      <t>-09</t>

      <t><list style="symbols">
          <t>Added method of internationalization for Client Metadata
          values</t>

          <t>Fixed SAML reference</t>
        </list></t>

      <t>-08</t>

      <t><list style="symbols">
          <t>Collapsed jwk_uri, jwk_encryption_uri, x509_uri, and
          x509_encryption_uri into a single jwks_uri parameter</t>

          <t>Renamed grant_type to grant_types since it's a plural value</t>

          <t>Formalized name of "OAuth 2.0" throughout document</t>

          <t>Added JWT Bearer Assertion and SAML 2 Bearer Assertion to example
          grant types</t>

          <t>Added response_types parameter and explanatory text on its use
          with and relationship to grant_types</t>
        </list></t>

      <t>-07</t>

      <t><list style="symbols">
          <t>Changed registration_access_url to registration_client_uri</t>

          <t>Fixed missing text in 5.1</t>

          <t>Added Pragma: no-cache to examples</t>

          <t>Changed "no such client" error to 403</t>

          <t>Renamed Client Registration Access Endpoint to Client
          Configuration Endpoint</t>

          <t>Changed all the parameter names containing "_url" to instead use
          "_uri"</t>

          <t>Updated example text for forming Client Configuration Endpoint
          URL</t>
        </list></t>

      <t>-06</t>

      <t><list style="symbols">
          <t>Removed secret_rotation as a client-initiated action, including
          removing client secret rotation endpoint and parameters.</t>

          <t>Changed _links structure to single value
          registration_access_url.</t>

          <t>Collapsed create/update/read responses into client info
          response.</t>

          <t>Changed return code of create action to 201.</t>

          <t>Added section to describe suggested generation and composition of
          Client Registration Access URL.</t>

          <t>Added clarifying text to PUT and POST requests to specify JSON in
          the body.</t>

          <t>Added Editor's Note to DELETE operation about its inclusion.</t>

          <t>Added Editor's Note to registration_access_url about alternate
          syntax proposals.</t>
        </list></t>

      <t>-05</t>

      <t><list style="symbols">
          <t>changed redirect_uri and contact to lists instead of space
          delimited strings</t>

          <t>removed operation parameter</t>

          <t>added _links structure</t>

          <t>made client update management more RESTful</t>

          <t>split endpoint into three parts</t>

          <t>changed input to JSON from form-encoded</t>

          <t>added READ and DELETE operations</t>

          <t>removed Requirements section</t>

          <t>changed token_endpoint_auth_type back to
          token_endpoint_auth_method to match OIDC who changed to match us</t>
        </list></t>

      <t>-04</t>

      <t><list style="symbols">
          <t>removed default_acr, too undefined in the general OAuth2 case</t>

          <t>removed default_max_auth_age, since there's no mechanism for
          supplying a non-default max_auth_age in OAuth2</t>

          <t>clarified signing and encryption URLs</t>

          <t>changed token_endpoint_auth_method to token_endpoint_auth_type to
          match OIDC</t>
        </list></t>

      <t>-03</t>

      <t><list style="symbols">
          <t>added scope and grant_type claims</t>

          <t>fixed various typos and changed wording for better clarity</t>

          <t>endpoint now returns the full set of client information</t>

          <t>operations on client_update allow for three actions on metadata:
          leave existing value, clear existing value, replace existing value
          with new value</t>
        </list></t>

      <t>-02</t>

      <t><list style="symbols">
          <t>Reorganized contributors and references</t>

          <t>Moved OAuth references to RFC</t>

          <t>Reorganized model/protocol sections for clarity</t>

          <t>Changed terminology to "client register" instead of "client
          associate"</t>

          <t>Specified that client_id must match across all subsequent
          requests</t>

          <t>Fixed RFC2XML formatting, especially on lists</t>
        </list></t>

      <t>-01</t>

      <t><list style="symbols">
          <t>Merged UMA and OpenID Connect registrations into a single
          document</t>

          <t>Changed to form-paramter inputs to endpoint</t>

          <t>Removed pull-based registration</t>
        </list></t>

      <t>-00</t>

      <t><list style="symbols">
          <t>Imported original UMA draft specification</t>
        </list></t>
    </section>
  </back>
</rfc>
