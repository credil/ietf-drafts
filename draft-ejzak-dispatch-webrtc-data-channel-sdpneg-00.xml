<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
	 which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
	 There has to be one entity for each item to be referenced.
	 An alternate method (rfc include) is described in the references. -->

<!ENTITY DATAREQ SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-rtcweb-data-channel.xml">
<!ENTITY DATAPROTO SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-rtcweb-data-protocol.xml">
<!ENTITY JSEP SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-rtcweb-jsep.xml">
<!ENTITY SDPSCTP SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-mmusic-sctp-sdp.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3264 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3264.xml">
<!ENTITY RFC3758 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3758.xml">
<!ENTITY RFC4960 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4960.xml">

<!ENTITY RFC4566 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4566.xml">
<!ENTITY RFC4975 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4975.xml">
<!ENTITY RFC4976 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4976.xml">
<!ENTITY RFC5547 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5547.xml">
<!ENTITY RFC6135 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6135.xml">
<!ENTITY RFC6714 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6714.xml">


]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
	 please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
	 (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="no" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
	 (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-ejzak-dispatch-webrtc-data-channel-sdpneg-00" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
	 ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
		or pre5378Trust200902
	 you can add the attributes updates="NNNN" and obsoletes="NNNN"
	 they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

	<front>
		<!-- The abbreviated title is used in the page header - it is only necessary if the
			 full title is longer than 39 characters -->

		<title abbrev="SDP-based WebRTC data channel negotiation">SDP-based WebRTC data channel negotiation</title>

		<!-- add 'role="editor"' below for the editors if appropriate -->

		<!-- Another author who claims to be an editor -->

	<author fullname="Richard Ejzak" initials="R.P." surname="Ejzak">
		<organization>Alcatel-Lucent</organization>

		<address>
			<postal>
			<street>1960 Lucent Lane</street>

			<!-- Reorder these if your country does things differently -->

			<city>Naperville</city>

			<region>Illinois</region>

			<code>60563-1594</code>

			<country>US</country>
			</postal>

			<phone>+1 630 979 7036</phone>

			<email>richard.ejzak@alcatel-lucent.com</email>

			<!-- uri and facsimile elements may also be added -->
		</address>
	</author>
		<author fullname="Jerome Marcon" initials="J.M." surname="Marcon">
			<organization>Alcatel-Lucent</organization>
			<address>
				<postal>
					<street>Route de Villejust</street>

					<!-- Reorder these if your country does things differently -->

					<code>91620</code>

					<city>Nozay</city>

					<country>France</country>
				</postal>

				<email>jerome.marcon@alcatel-lucent.com</email>

				<!-- uri and facsimile elements may also be added -->
			</address>
		</author>

		<date year="2013" />

		<!-- If the month and year are both specified and are the current ones, xml2rfc will fill
			 in the current day for you. If only the current year is specified, xml2rfc will fill
		 in the current day and month for you. If the year is not the current one, it is
		 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
		 purpose of calculating the expiry date).  With drafts it is normally sufficient to
		 specify just the year. -->

		<!-- Meta-data Declarations -->

		<area>RAI</area>

		<workgroup>DISPATCH</workgroup>

		<!-- WG name at the upperleft corner of the doc,
			 IETF is fine for individual submissions.
		 If this element is not present, the default is "Network Working Group",
			 which is used by the RFC Editor as a nod to the history of the IETF. -->


		<!-- Keywords will be incorporated into HTML output
			 files in a meta tag but they have no effect on text or nroff
			 output. If you submit your draft to the RFC Editor, the
			 keywords will be used for the search engine. -->

		<abstract>
			<t>The Real-Time Communication in WEB-browsers (RTCWeb) working group is charged to provide protocols to support direct interactive rich communication using audio, video, and data between two peers' web-browsers. For the support of data communication, the RTCWeb working group has in particular defined the concept of bi-directional data channels over SCTP, where each data channel might be used to transport other protocols, called sub-protocols. Data channel setup can be done using either the in-band WebRTC Data Channel protocol or some external (in-band or out-of-band) negotiation. This document specifies how the SDP offer/answer exchange can be used to achieve such an external negotiation.</t>
		</abstract>
	</front>

	<middle>
	<section title="Introduction">

		<t>The RTCWeb working group has defined the concept of bi-directional data channels running on top of SCTP/DTLS. Each data channel consists of paired SCTP streams sharing the same SCTP Stream Identifier. Data channels are created by endpoint applications through the WebRTC API, and can be used to transport proprietary or well-defined protocols, which in the latter case can be signaled by the data channel "sub-protocol" parameter, conceptually similar to the WebSocket "sub-protocol". However, apart from the "sub-protocol" value transmitted to the peer, RTCWeb leaves open how endpoint applications can agree on how to instantiate a given sub-protocol on a data channel, and whether it is signaled in-band or out-of-band (or both). In particular, the SDP offer generated by the browser includes no channel-specific information.</t>

		<t>This document defines SDP-based out-of-band negotiation procedures to establish WebRTC data channels for transport of well-defined sub-protocols.</t>

	</section>


	<section title="Conventions">
		<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"></xref>.</t>
	</section>

	<section title="Terminology">
		<t>This document uses the following terms:
			<list style='hanging'>
				<t>Data channel: A bidirectional channel consisting of paired SCTP outbound and inbound streams.</t>
				<t>Data channel properties: fixed properties assigned to a data channel at the time of its creation. Some of these properties determine the way the browser transmits data on this channel (e.g., stream identifier, reliability, order of delivery...)</t>
				<t>External negotiation: data channel negotiation based on out-of-band or in-band mechanisms other than the WebRTC data channel protocol.</t>
				<t>In-band: transmission through the peer-to-peer SCTP association.</t>
				<t>In-band negotiation: data channel negotiation based on the in-band WebRTC data channel protocol defined in <xref target="I-D.ietf-rtcweb-data-protocol"/>.</t>
				<t>Out-of-band: transmission through the WebRTC signaling path.</t>
				<t>Peer: From the perspective of one of the agents in a session, its peer is the other agent. Specifically, from the perspective of the SDP offerer, the peer is the SDP answerer. From the perspective of the SDP answerer, the peer is the SDP offerer.</t>
				<t>Stream identifier: the identifier of the outbound and inbound SCTP streams composing a data channel.</t>
			</list>
		</t>
	</section>

	<section title="WebRTC Data Channels" anchor="defch">

		<t>This section summarizes how WebRTC data channels work in general.</t>

		<t>A WebRTC application creates a data channel via the WebRTC Data Channel API, by providing a number of setup parameters (sub-protocol, label, reliability, order of delivery, priority). The application also specifies if the browser takes charge of the in-band negotiation using the WebRTC data protocol, or if the application intends to perform an "external negotiation" using some other in-band or out-of-band mechanism.</t>

		<t>In any case, the SDP offer generated by the browser is per <xref target="I-D.ietf-mmusic-sctp-sdp"/>. In brief, it contains one m-line for the SCTP association on top of which data channels will run, and one attribute per protocol assigned to the SCTP ports:</t>
			<figure align="left" title="">
				<artwork align="left"><![CDATA[
m=application 54111 DTLS/SCTP 5000 5001 5002
c=IN IP4 79.97.215.79
a=sctpmap:5000 webrtc-datachannel 16
a=sctpmap:5001 bfcp 2
a=sctpmap:5002 t38 1
				]]></artwork>
			</figure>
		<t>Note: A WebRTC browser will only create an sctpmap attribute for the webrtc-datachannel protocol, and will not create sctpmap attributes for other protocols such as bfcp or t38. This example shows the hypothetical power of the syntax to support multiplexing of SCTP associations for different protocols on the same DTLS connection.</t>

		<t>Note: This SDP syntax does not contain any channel-specific information.</t>

		<section title="Stream identifier numbering" anchor="si_num">

			<t>Independently from the requested type of negotiation, the application creating a data channel can either pass to the browser the stream identifier to assign to the data channel or else let the browser pick one identifier from the ones unused.</t>

			<t>To avoid glare situations, each endpoint can moreover own an exclusive set of stream identifiers, in which case an endpoint can only create a data channel with a stream identifier it owns.</t>

			<t>Which set of stream identifiers is owned by which endpoint is determined by convention or other means.

				<list style='hanging'>
				<t>For data channels negotiated in-band, one endpoint owns by convention the even stream identifiers, whereas the other owns the odd stream identifiers, as defined in <xref target="I-D.ietf-rtcweb-data-protocol"/>.</t>
					<t>For data channels externally negotiated, no convention is defined by default.</t>
				</list>
			</t>
		</section>

		<section title="Generic external negotiation">

			<section title="Overview">
				<t>In-band negotiation only provides for negotiation of data channel transport parameters and does not provide for negotiation of sub-protocol specific parameters. External negotiation can be defined to allow negotiation of parameters beyond those handled by in-band negotiation, e.g., parameters specific to the sub-protocol instantiated on a particular data channel. See <xref target="prot_att"/> for an example of such a parameter.</t>

				<t>The following procedures are common to all methods of external negotiation, whether in-band (communicated using proprietary means on an already established data channel) or out-of-band (using SDP or some other protocol associated with the signaling channel).</t>
			</section>

			<section title="Opening a data channel" anchor="ext_open">
				<t>In the case of external negotiation, the endpoint application has the option to fully control the stream identifier assignments. However these assignments have to coexist with the assignments controlled by the browser for the in-band negotiated data channels (if any). It is the responsibility of the application to ensure consistent assignment of stream identifiers.</t>

				<t>When the application requests the creation of a new data channel to be set up via external negotiation, the browser creates the data channel locally without sending any DATA CHANNEL OPEN message in-band, and sets the data channel state to Connecting if the SCTP association is not yet established, or sets the data channel state to Open if the SCTP association is already established.</t>

				<t>The application then externally negotiates the data channel properties and sub-protocol properties with the peer's application.</t>

				<t>[ASSUMPTION] The peer must then symmetrically create a data channel with these negotiated data channel properties. This is the only way for the peer's browser to know which properties to apply when transmitting data on this channel. The browser must allow data channel creation with any non-conflicting stream identifier so that both peers can create the data channel with the same stream identifier.</t>

				<t>In case the external negotiation is correlated with an SDP offer/answer exchange that establishes the SCTP association, the SCTP initialization completion triggers each endpoint's browser to change the data channel state from Connecting to Open.</t>

				<t>Each application must ensure that a data channel is in the Open state both locally and at the peer prior to sending data. This document includes procedures for doing so that are specific to using SDP offer/answer for external negotiation.</t>

				<t>[ACTION ITEM] Determine if these procedures are fully consistent with the data channel design and whether additional clarification is needed in data channel documents to ensure proper support of external negotiation.</t>
			</section>

			<section title="Closing a data channel">
				<t>When the application requests the closing of an externally negotiated data channel, the browser always performs an in-band SSN reset for this channel.</t>

				<t>Depending upon the method used for external negotiation and the sub-protocol associated with the data channel, the closing might in addition be signaled to the peer via external negotiation.</t>

			</section>

		</section>
	</section>

	<section title="SDP-based external negotiation">

		<t>This section defines a method of external negotiation by which two WebRTC endpoints can negotiate data channel-specific and sub-protocol-specific parameters, using the out-of-band SDP offer/answer exchange.</t>

		<section title="SDP syntax" anchor="sdp_synt">

			<t>Two new SDP attributes are defined to support external negotiation of data channels. The first attribute provides for negotiation of channel-specific parameters. The second attribute provides for negotiation of sub-protocol-specific parameters.</t>

			<section title="SDP attribute for data channel parameter negotiation">

				<t>Associated with the m line that defines the SCTP association for data channels (defined in Section 4), each SDP offer and answer includes an attribute line that defines the data channel parameters for each data channel to be negotiated. Each attribute line specifies the following parameters for a data channel: Stream Identifier, sub-protocol, label, reliability, order of delivery, and priority. The following is an example of the attribute line for sub-protocol "BFCP" and stream id "2" :

				<figure align="left" title="">
					<artwork align="left"><![CDATA[
a=webrtc-DataChannel:5000 stream=2;label="channel 2"; \
  subprotocol="BFCP";max_retr=3
					]]></artwork>
				</figure>
				</t>

				<t>This line MUST be replicated without changes in the SDP answer, if the answerer accepts the offered data channel.</t>

				<t>This line MUST be replicated without changes in any subsequent offer or answer, as long as the data channel is still opened at the time of offer or answer generation.

					<list style='hanging'>
						<t>Note: This attribute was defined in old version 03 of the following draft but was removed along with any support for SDP external negotiation in subsequent versions: <xref target="I-D.ietf-mmusic-sctp-sdp"/>.</t>

						<t>Note: This document does not provide a complete specification of how to negotiate the use of a data channel to transport BFCP. Procedures specific to each sub-protocol such as BFCP will be documented elsewhere. The use of BFCP is only an example of how the generic procedures described herein might apply to a specific sub-protocol.</t>
					</list>
				</t>

				<section title="stream parameter">
					<t>The 'stream' parameter indicates the actual stream identifier within the association used to form the channel. Stream is a mandatory parameter.

					<figure align="left" title="">
						<artwork align="left"><![CDATA[
stream-attr       =  "a=stream=" streamidentifier
streamidentifier      =  1*DIGIT
						]]></artwork>
					</figure>
					</t>
				</section>

				<section title="label parameter">
					<t>The 'label' parameter indicates the name of the channel. It represents a label that can be used to distinguish, in the context of the WebRTC API, an RTCDataChannel object from other RTCDataChannel objects. Label is a mandatory parameter.

					<figure align="left" title="">
						<artwork align="left"><![CDATA[
label-attr       =  "a=label=" labelstring
labelstring      =  text
text             =  byte-string
						]]></artwork>
					</figure>
					</t>
				</section>

				<section title="subprotocol parameter">
					<t>The 'subprotocol' parameter indicates which protocol the client expects to exchange via the channel. Subprotocol is a mandatory parameter.

					<figure align="left" title="">
						<artwork align="left"><![CDATA[
subprotocol-attr       =  "a=subprotocol=" labelstring
labelstring            =  text
text                   =  byte-string
						]]></artwork>
					</figure>
					</t>

					<t>[ACTION ITEM] The IANA registry to be used for the subprotocol parameter is still to be determined. It also needs to be determined what the relationship is to existing registries and how to reference already-existing protocols.</t>
				</section>

				<section title="max_retr parameter">
					<t>The 'max_retr' parameter indicates the max times a user message will be retransmitted. The max_retr parameter is optional with default value unbounded.

					<figure align="left" title="">
						<artwork align="left"><![CDATA[
maxretr-attr       =  "a=maxretr=" maxretrvalue
maxretrvalue       =  1*DIGIT
						]]></artwork>
					</figure>

					</t>
				</section>

				<section title="max_time parameter">
					<t>A user messages will no longer be transmitted or retransmitted after a specified life-time given in milliseconds in the 'max_time' parameter. The max_time parameter is optional with default value unbounded.
						<figure align="left" title="">
							<artwork align="left"><![CDATA[
maxtime-attr       =  "a=maxtime=" maxtimevalue
maxtimevalue       =  1*DIGIT
							]]></artwork>
						</figure>

					</t>
				</section>

				<section title="unordered parameter">
<t>The 'unordered' parameter indicates that DATA chunks in the channel MUST be dispatched to the upper layer by the receiver without any attempt to reorder. The unordered parameter is optional. If the unordered parameter is absent, the receiver is required to deliver DATA chunks to the upper layer in proper order.</t>
				</section>
			</section>

			<section title="Sub-protocol specific attributes" anchor="prot_att">

				<t>In the SDP, each data channel declaration MAY also be followed by other SDP attributes specific to the sub-protocol in use. Each of these attributes is represented by one new attribute line, and it includes the contents of a media-level SDP attribute already defined for use with this (sub)protocol in another IETF specification. Sub-protocol-specific attributes might also be defined for exclusive use with data channel transport, but should use the same syntax described here for other sub-protocol-specific attributes.</t>

				<t>Each sub-protocol specific SDP attribute that would normally be used to negotiate the subprotocol using SDP is replaced with an attribute of the form "a=wdcsa:sctp-port:stream-id original-attribute", where wdcsa stands for "webrtc-DataChannel sub-protocol attribute", sctp-port is the sctp port number assigned for webrtc-DataChannel on the media line, stream-id is the sctp stream identifier assigned to this sub-protocol instance, and original-attribute represents the contents of the sub-protocol related attribute to be included.
					<figure align="left" title="">
						<artwork align="left"><![CDATA[
a=webrtc-DataChannel:5000 stream=2;label="channel 2"; \
  subprotocol="MSRP";max_retr=3
a=wdcsa:5000:2 accept-types:text/plain
						]]></artwork>
					</figure>
				</t>

				<t>Thus in the example above, the original attribute line "a=accept-types:text/plain" is represented by the attribute line "a=wdcsa:5000:2 accept-types:text/plain", which specifies that this instance of MSRP being transported on the sctp association using port number 5000 and the data channel with stream id 2 accepts plain text files.</t>

				<t>As opposed to the data channel setup parameters, these parameters are subject to offer/answer negotiation following the procedures defined in the sub-protocol specific documents.</t>

				<t>The same syntax applies to any other SDP attribute required for negotiation of this instance of the sub-protocol.</t>

				<t>Note: This document does not provide a complete specification of how to negotiate the use of a data channel to transport MSRP. Procedures specific to each sub-protocol such as MSRP will be documented elsewhere. The use of MSRP is only an example of how the generic procedures described herein might apply to a specific sub-protocol.</t>

			</section>
		</section>
		<section title="Procedures">

			<section title="Managing stream identifiers" anchor="id_mngt">

				<t>For the SDP-based external negotiation described in this document, the initial offerer (in the context of a PeerConnection) owns by convention the even stream identifiers whereas the initial answerer owns the odd stream identifiers. This ownership is invariant for the whole lifetime of the PeerConnection, e.g. it does not change if the initial answerer sends a new offer to the initial offerer.</t>

				<t>[ACTION ITEM] This convention is different from the convention currently defined for in-band negotiation, where even/odd assignment is determined by DTLS role. Since DTLS role cannot be determined until after the initial SDP offer/answer is complete, this convention cannot be used for external negotiation. It might be appropriate to change the convention for stream identifier assignment for in-band negotiation for consistency with external negotiation. Otherwise it might be necessary to prohibit simultaneous use of in-band and external negotiation for data channels.</t>

			</section>

			<section title="Opening a data channel">

				<t>The procedure for opening a data channel using external negotiation starts with the agent preparing to send an SDP offer. If a peer receives an SDP offer before getting to send a new SDP offer with data channels that are to be externally negotiated, or loses an SDP offer glare resolution procedure in this case, it must wait until the ongoing SDP offer/answer completes before resuming the external negotiation procedure.</t>

				<t>The agent that intends to send an SDP offer to create data channels through SDP-based external negotiation performs the following:
					<list style='symbols'>
						<t>Creates data channels using stream identifiers from the owned set (see <xref target="id_mngt"/>).</t>
						<t>As described in <xref target="ext_open"/>, if the SCTP association is not yet established, then the newly created data channels are in the Connecting state, else if the SCTP association is already established, then the newly created data channels are in the Open state.</t>
						<t>Obtains a new SDP offer from the browser.</t>
						<t>Determines the list of stream identifiers assigned to data channels opened through external negotiation.</t>
						<t>Completes the SDP offer with the webrtc-DataChannel and wdcsa attributes needed for each externally-negotiated data channel, as described in <xref target="sdp_synt"/>.</t>
						<t>Sends the SDP offer.</t>
					</list>
				</t>

				<t>The peer receiving such an SDP offer performs the following:
					<list style='symbols'>
						<t>Applies the SDP offer. Note that the browser ignores data channel specific attributes in the SDP.</t>
						<t>Analyzes the channel parameters and sub-protocol attributes to determine whether to accept each offered data channel.</t>
						<t>For accepted data channels, creates peer instances for the data channels with the browser using the channel parameters described in the SDP offer. Note that the browser is asked to create data channels with stream identifiers not "owned" by the agent.</t>
						<t>As described in <xref target="ext_open"/>, if the SCTP association is not yet established, then the newly created data channels are in the Connecting state, else if the SCTP association is already established, then the newly created data channels are in the Open state.</t>
						<t>Obtains a new SDP answer from the browser.</t>
						<t>Completes the SDP answer with the webrtc-DataChannel and wdcsa attributes needed for each externally-negotiated data channel, as described in <xref target="sdp_synt"/>.</t>
						<t>Sends the SDP answer.</t>
					</list>
				</t>

				<t>The agent receiving such an SDP answer performs the following:
					<list style='symbols'>
						<t>Closes any created data channels (whether in Connecting or Open state) for which the expected webrtc-DataChannel and wdcsa attributes are not present in the SDP answer.</t>
						<t>Applies the SDP answer.</t>
					</list>
				</t>

				<t>Any data channels in Connecting state are transitioned to the Open state when the SCTP association is established.</t>

				<t>Each agent application must wait to send data until it has confirmation that the data channel at the peer is in the Open state. This occurs:
					<list style='symbols'>
						<t>At both peers when a data channel is created without an established SCTP association, as soon as the browsers report that the data channel transitions to the Open state from the Connecting state.</t>
						<t>At the agent receiving an SDP offer for which there is an established SCTP association, as soon as it creates an externally negotiated data channel in the Open state based on information signaled in the SDP offer.</t>
						<t>At the agent sending an SDP offer to create a new externally negotiated data channel for which there is an established SCTP association, when it receives the SDP answer confirming acceptance of the data channel or when it begins to receive data on the data channel from the peer, whichever occurs first.</t>
					</list>
				</t>
			</section>

			<section title="Closing a data channel">

				<t>When the application requests the closing of a data channel that was externally negotiated, the browser always performs an in-band SSN reset for this channel.</t>

				<t>It is specific to the sub-protocol whether this closing must in addition be signaled to the peer via a new SDP offer/answer exchange.</t>

				<t>The application must also close any data channel that was externally negotiated, for which the stream identifiers are not listed in an incoming SDP offer.</t>

			</section>
		</section>

	</section>

	<section anchor="Security" title="Security Considerations">
		<t>To be completed.</t>
	</section>

	<section anchor="IANA" title="IANA Considerations">
		<t>To be completed.</t>
	</section>

	<section title="Acknowledgments">
		<t>The authors wish to acknowledge the borrowing of ideas from other internet drafts by Salvatore Loreto, Gonzalo Camarillo, Peter Dunkley and Gavin Llewellyn, and to thank Paul Kyzivat, Jonathan Lennox, Uwe Rauschenbach and Keith Drage for their invaluable comments.</t>
	</section>

</middle>

  <!--  *****BACK MATTER ***** -->

  <back>
	<!-- References split into informative and normative -->

	<!-- There are 2 ways to insert reference entries from the citation libraries:
	 1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
	 2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
		(for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

	 Both are cited textually in the same manner: by using xref elements.
	 If you use the PI option, xml2rfc will, by default, try to find included files in the same
	 directory as the including file. You can also define the XML_LIBRARY environment variable
	 with a value containing a set of directories to search.  These can be either in the local
	 filing system or remote ones accessed by http (http://domain/dir/... ).-->


	<references title="Normative References">
	  <!-- Here we use entities that we defined at the beginning. -->

	  &RFC2119;

	  &RFC4566;

	  &RFC3264;

	  &JSEP;

	  &DATAREQ;

	  &SDPSCTP;

		<reference anchor='WebRtcAPI' target='http://www.w3.org/TR/2012/WD-webrtc-20120821'>
			<front>
				<title>WebRTC 1.0: Real-time Communication Between Browsers</title>

				<author initials='A.' surname='Bergkvist' fullname='Adam Bergkvist'>
				<organization />
				</author>

				<author initials='D.' surname='Burnett' fullname='Daniel C. Burnett'>
				<organization />
				</author>

				<author initials='A.' surname='Narayanan' fullname='Anant Narayanan'>
				<organization />
				</author>

				<author initials='C.' surname='Jennings' fullname='Cullen Jennings'>
				<organization />
				</author>

				<date month='August' day='21' year='2012' />
			</front>
			<seriesInfo name='World Wide Web Consortium WD' value='WD-webrtc-20120821' />
			<format type='HTML' target='http://www.w3.org/TR/2012/WD-webrtc-20120821' />
		</reference>

	</references>

	<references title="Informative References">
	  <!-- Here we use entities that we defined at the beginning. -->

	  	&DATAPROTO;

		&RFC4975;

		&RFC4976;

		&RFC5547;

		&RFC6135;

		&RFC6714;

	</references>



  </back>
</rfc>
