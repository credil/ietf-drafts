<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc category="std" ipr="trust200902" docName="draft-ietf-jose-json-web-algorithms-18">

  <front>
    <title>JSON Web Algorithms (JWA)</title>

    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>

    <date day="12" month="November" year="2013" />

    <area>Security</area>
    <workgroup>JOSE Working Group</workgroup>

    <keyword>RFC</keyword>
    <keyword>Request for Comments</keyword>
    <keyword>I-D</keyword>
    <keyword>Internet-Draft</keyword>
    <keyword>JavaScript Object Notation</keyword>
    <keyword>JSON</keyword>
    <keyword>JSON Object Signing and Encryption</keyword>
    <keyword>JOSE</keyword>
    <keyword>JSON Web Signature</keyword>
    <keyword>JWS</keyword>
    <keyword>JSON Web Encryption</keyword>
    <keyword>JWE</keyword>
    <keyword>JSON Web Key</keyword>
    <keyword>JWK</keyword>
    <keyword>JSON Web Algorithms</keyword>
    <keyword>JWA</keyword>

    <abstract>
      <t>
	The JSON Web Algorithms (JWA) specification registers
	cryptographic algorithms and identifiers to be used with the
	JSON Web Signature (JWS),
	JSON Web Encryption (JWE), and
	JSON Web Key (JWK) specifications.
	It defines several IANA registries for these identifiers.
      </t>
    </abstract>

  </front>

  <middle>
    <section title="Introduction" anchor="Introduction">
      <t>
	The JSON Web Algorithms (JWA) specification registers
	cryptographic algorithms and identifiers to be used with the
	JSON Web Signature (JWS) <xref target="JWS"/>,
	JSON Web Encryption (JWE) <xref target="JWE"/>, and
	JSON Web Key (JWK) <xref target="JWK"/> specifications.
	It defines several IANA registries for these identifiers.
	All these specifications utilize
	JavaScript Object Notation (JSON) <xref target="RFC4627"/>
	based data structures.
	This specification also describes the semantics and operations
	that are specific to these algorithms and key types.
      </t>
      <t>
	Registering the algorithms and identifiers here,
	rather than in the JWS, JWE, and JWK
	specifications, is intended to allow them to remain unchanged
	in the face of changes in the set of Required, Recommended,
	Optional, and Deprecated algorithms over time.
	This also allows changes to the JWS, JWE, and JWK specifications
	without changing this document.
      </t>
      <t>
	Names defined by this specification are short because a core goal is
	for the resulting representations to be compact.
      </t>

      <section title="Notational Conventions" anchor="NotationalConventions">
        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
          "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
          and "OPTIONAL" in this document are to be interpreted as
          described in
	  Key words for use in RFCs to Indicate Requirement Levels <xref target='RFC2119' />.
	  If these words are used without being spelled in uppercase then
	  they are to be interpreted with their normal natural language meanings.
        </t>
	<t>
	  BASE64URL(OCTETS) denotes the base64url encoding of OCTETS,
	  per <xref target="Terminology"/>.
	</t>
	<t>
	  UTF8(STRING) denotes the octets of the
	  UTF-8 <xref target="RFC3629"/> representation of STRING.
	</t>
	<t>
	  ASCII(STRING) denotes the octets of the
	  ASCII <xref target="USASCII"/> representation of STRING.
	</t>
	<t>
	  The concatenation of two values A and B
	  is denoted as A&nbsp;||&nbsp;B.
	</t>
      </section>

    </section>

    <section title="Terminology" anchor="Terminology">

      <t>
	These terms defined by the
	JSON Web Signature (JWS) <xref target="JWS"/>
	specification are incorporated into this specification:
	"JSON Web Signature (JWS)",
	"JWS Header",
	"JWS Payload",
	"JWS Signature",
	"JWS Protected Header",
	"Base64url Encoding", and
	"JWS Signing Input".
      </t>

      <t>
	These terms defined by the
	JSON Web Encryption (JWE) <xref target="JWE"/>
	specification are incorporated into this specification:
	"JSON Web Encryption (JWE)",
	"Authenticated Encryption",
	"Plaintext",
	"Ciphertext",
	"Additional Authenticated Data (AAD)",
	"Authentication Tag",
	"Content Encryption Key (CEK)",
	"JWE Header",
	"JWE Encrypted Key",
	"JWE Initialization Vector",
	"JWE Ciphertext",
	"JWE Authentication Tag",
	"JWE Protected Header",
	"Key Management Mode",
	"Key Encryption",
	"Key Wrapping",
	"Direct Key Agreement",
	"Key Agreement with Key Wrapping", and
	"Direct Encryption".
      </t>

      <t>
	These terms defined by the
	JSON Web Key (JWK) <xref target="JWK"/>
	specification are incorporated into this specification:
	"JSON Web Key (JWK)" and
	"JSON Web Key Set (JWK Set)".
      </t>

      <t>
	These terms are defined for use by this specification:
      </t>

      <t>
	<list style="hanging">
	  <t hangText="Header Parameter">
	    A name/value pair that is member of a
	    JWS Header or JWE Header.
	  </t>
	</list>
      </t>

    </section>

    <section title="Cryptographic Algorithms for Digital Signatures and MACs" anchor="SigningAlgs">
      <t>
	JWS uses cryptographic algorithms to digitally sign or
	create a Message Authentication Codes (MAC) of the contents
	of the JWS Header and the JWS Payload.
      </t>

      <section title='"alg" (Algorithm) Header Parameter Values for JWS' anchor="JWSAlgValues">
	<t>
	  The table below is the set of
	  <spanx style="verb">alg</spanx> (algorithm) header
	  parameter values defined by this specification for use with JWS, each of which
	  is explained in more detail in the following sections:
	</t>

	<texttable>

	  <ttcol align="left">alg Parameter Value</ttcol>
	  <ttcol align="left">Digital Signature or MAC Algorithm</ttcol>
	  <ttcol align="left">Implementation Requirements</ttcol>

	  <c>HS256</c>
	  <c>HMAC using SHA-256</c>
	  <c>Required</c>

	  <c>HS384</c>
	  <c>HMAC using SHA-384</c>
	  <c>Optional</c>

	  <c>HS512</c>
	  <c>HMAC using SHA-512</c>
	  <c>Optional</c>

	  <c>RS256</c>
	  <c>RSASSA-PKCS-v1_5 using SHA-256</c>
	  <c>Recommended</c>

	  <c>RS384</c>
	  <c>RSASSA-PKCS-v1_5 using SHA-384</c>
	  <c>Optional</c>

	  <c>RS512</c>
	  <c>RSASSA-PKCS-v1_5 using SHA-512</c>
	  <c>Optional</c>

	  <c>ES256</c>
	  <c>ECDSA using P-256 and SHA-256</c>
	  <c>Recommended+</c>

	  <c>ES384</c>
	  <c>ECDSA using P-384 and SHA-384</c>
	  <c>Optional</c>

	  <c>ES512</c>
	  <c>ECDSA using P-521 and SHA-512</c>
	  <c>Optional</c>

	  <c>PS256</c>
	  <c>RSASSA-PSS using SHA-256 and MGF1 with SHA-256</c>
	  <c>Optional</c>

	  <c>PS384</c>
	  <c>RSASSA-PSS using SHA-384 and MGF1 with SHA-384</c>
	  <c>Optional</c>

	  <c>PS512</c>
	  <c>RSASSA-PSS using SHA-512 and MGF1 with SHA-512</c>
	  <c>Optional</c>

	  <c>none</c>
	  <c>No digital signature or MAC performed</c>
	  <c>Optional</c>

	</texttable>

	<t>
	  The use of "+" in the Implementation Requirements
	  indicates that the requirement strength is likely
	  to be increased in a future version of the specification. 
	</t>
	<t>
	  See <xref target="SigAlgXref" /> for a table cross-referencing the
	  JWS digital signature and MAC <spanx style="verb">alg</spanx> (algorithm)
	  values defined in this specification with the equivalent identifiers
	  used by other standards and software packages.
	</t>
      </section>

      <section title="HMAC with SHA-2 Functions" anchor="DefiningHMAC">
	<t>
	  Hash-based Message Authentication Codes (HMACs) enable one to
	  use a secret plus a cryptographic hash function to generate a
	  Message Authentication Code (MAC). This can be used to
	  demonstrate that whoever generated the MAC was in possession of the MAC key.
	</t>
	<t>
	  The algorithm for implementing and validating HMACs is
	  provided in <xref target="RFC2104">RFC 2104</xref>.  This
	  section defines the use of the HMAC SHA-256, HMAC SHA-384,
	  and HMAC SHA-512 functions <xref target="SHS"/>. The
	  <spanx style="verb">alg</spanx> (algorithm) Header Parameter values
	  <spanx style="verb">HS256</spanx>, <spanx
	  style="verb">HS384</spanx>, and <spanx
	  style="verb">HS512</spanx> are used in the JWS Header
	  to indicate that the JWS Signature contains
	  an HMAC value using the respective hash function.
	</t>
	<t>
	  A key of the same size as the hash output (for instance, 256
	  bits for <spanx style="verb">HS256</spanx>) or larger MUST
	  be used with this algorithm.
	</t>
	<t>
	  The HMAC SHA-256 MAC is generated per RFC 2104,
	  using SHA-256 as the hash algorithm "H",
	  using the JWS Signing Input as the "text" value,
	  and using the shared key.
	  The HMAC output value is the JWS Signature.
	</t>
	<t>
	  The HMAC SHA-256 MAC for a JWS is validated by computing an HMAC value per RFC 2104,
	  using SHA-256 as the hash algorithm "H",
	  using the received JWS Signing Input as the "text" value,
	  and using the shared key.
	  This computed HMAC value is then compared to the result of
	  base64url decoding the received encoded JWS Signature value.
	  Alternatively, the computed HMAC value can be base64url encoded
	  and compared to the received encoded JWS Signature value,
	  as this comparison produces the same result as comparing
	  the unencoded values.
	  In either case, if the values match, the HMAC has been validated.
	</t>
	<t>
	  Securing content with the HMAC SHA-384 and HMAC SHA-512
	  algorithms is performed identically to the procedure for
	  HMAC SHA-256 --
	  just using the corresponding hash algorithms
	  with correspondingly larger minimum key sizes and result values:
	  384 bits each for HMAC SHA-384 and 512 bits each for HMAC SHA-512.
	</t>
	<t>
	  An example using this algorithm is shown in
	  Appendix A.1 of <xref target="JWS"/>.
	</t>
      </section>

      <section title="Digital Signature with RSASSA-PKCS1-V1_5" anchor="DefiningRSA">
	<t>
	  This section defines the use of the RSASSA-PKCS1-V1_5
	  digital signature algorithm as defined in
	  Section 8.2 of <xref target="RFC3447">RFC 3447</xref>
	  (commonly known as PKCS #1),
	  using SHA-256, SHA-384, or SHA-512 <xref target="SHS"/>
	  as the hash functions.
	  The <spanx style="verb">alg</spanx> (algorithm) header
	  parameter values <spanx style="verb">RS256</spanx>, <spanx
	  style="verb">RS384</spanx>, and <spanx
	  style="verb">RS512</spanx> are used in the JWS Header
	  to indicate that the JWS Signature contains
	  a RSASSA-PKCS1-V1_5 digital signature using the respective hash function.
	</t>
	<t>
	  A key of size 2048 bits or larger MUST be used with these algorithms.
	</t>
	<t>
	  The RSASSA-PKCS1-V1_5 SHA-256 digital signature is generated as follows:
	  Generate a digital signature of the JWS Signing Input
	  using RSASSA-PKCS1-V1_5-SIGN
	  and the SHA-256 hash function
	  with the desired private key.
	  This is the JWS Signature value.
	</t>
	<t>
	  The RSASSA-PKCS1-V1_5 SHA-256 digital signature for a JWS is validated as follows:
	  Submit the JWS Signing Input,
	  the JWS Signature,
	  and the public key corresponding to the private key used
	  by the signer to the RSASSA-PKCS1-V1_5-VERIFY algorithm
	  using SHA-256 as the hash function.
	</t>
	<t>
	  Signing with the RSASSA-PKCS1-V1_5 SHA-384 and RSASSA-PKCS1-V1_5 SHA-512
	  algorithms is performed identically to the procedure for
	  RSASSA-PKCS1-V1_5 SHA-256 --
	  just using the corresponding hash algorithms
	  instead of SHA-256.
	</t>
	<t>
	  An example using this algorithm is shown in
	  Appendix A.2 of <xref target="JWS"/>.
	</t>
      </section>

      <section title="Digital Signature with ECDSA" anchor="DefiningECDSA">
	<t>
	  The Elliptic Curve Digital Signature Algorithm (ECDSA) <xref target="DSS"/>
	  provides for the use of Elliptic Curve cryptography, which is
	  able to provide equivalent security to RSA cryptography but
	  using shorter key sizes and with greater processing
	  speed. This means that ECDSA digital signatures will be substantially
	  smaller in terms of length than equivalently strong RSA
	  digital signatures.
	</t>
	<t>
	  This specification defines the use of ECDSA with the P-256
	  curve and the SHA-256 cryptographic hash function, ECDSA
	  with the P-384 curve and the SHA-384 hash function, and
	  ECDSA with the P-521 curve and the SHA-512 hash
	  function. The P-256, P-384, and P-521 curves are
	  defined in  <xref target="DSS"/>. The <spanx
	  style="verb">alg</spanx> (algorithm) Header Parameter values <spanx
	  style="verb">ES256</spanx>, <spanx
	  style="verb">ES384</spanx>, and <spanx
	  style="verb">ES512</spanx> are used in the JWS Header
	  to indicate that the JWS Signature contains a base64url
	  encoded ECDSA P-256 SHA-256, ECDSA P-384 SHA-384, or ECDSA
	  P-521 SHA-512 digital signature, respectively.
	</t>
	<t>
	  The ECDSA P-256 SHA-256 digital signature is generated as follows:

	  <list style="numbers">
	    <t>
	      Generate a digital signature of the JWS Signing Input
	      using ECDSA P-256 SHA-256 with
	      the desired private key. The output will be the pair
	      (R, S), where R and S are 256 bit unsigned integers.
	    </t>
	    <t>
	      Turn R and S into octet sequences in big endian order,
	      with each array being be 32 octets long.
	      The octet sequence representations MUST NOT be shortened
	      to omit any leading zero octets contained in the values.
	    </t>
	    <t>
	      Concatenate the two octet sequences in the order R and then S.
	      (Note that many ECDSA implementations will directly produce
	      this concatenation as their output.)
	    </t>
	    <t>
	      The resulting 64 octet sequence is the JWS Signature value.
	    </t>
	  </list>
	</t>

	<t>
	  The ECDSA P-256 SHA-256 digital signature for a JWS is validated as follows:

	  <list style="numbers">
	    <t>
	      The JWS Signature value MUST be a 64 octet sequence.
	      If it is not a 64 octet sequence, the validation has failed.
	    </t>
	    <t>
	      Split the 64 octet sequence into two 32 octet sequences. The first
	      array will be R and the second S
	      (with both being in big endian octet order).
	    </t>
	    <t>
	      Submit the JWS Signing Input
	      R, S and the public key (x, y) to the ECDSA P-256
	      SHA-256 validator.
	    </t>
	  </list>
	</t>
	<t>
	  Signing with the ECDSA P-384 SHA-384 and ECDSA P-521 SHA-512
	  algorithms is performed identically to the procedure for
	  ECDSA P-256 SHA-256 --
	  just using the corresponding hash algorithms
	  with correspondingly larger result values.
	  For ECDSA P-384 SHA-384, R and S will be 384 bits each,
	  resulting in a 96 octet sequence.
	  For ECDSA P-521 SHA-512, R and S will be 521 bits each,
	  resulting in a 132 octet sequence.
	</t>
	<t>
	  Examples using these algorithms are shown in
	  Appendices A.3 and A.4 of <xref target="JWS"/>.
	</t>
      </section>

      <section title="Digital Signature with RSASSA-PSS" anchor="DefiningPSS">
	<t>
	  This section defines the use of the RSASSA-PSS
	  digital signature algorithm as defined in
	  Section 8.1 of <xref target="RFC3447">RFC 3447</xref>
	  with the MGF1 mask generation function, always using the
	  same hash function for both the RSASSA-PSS hash function
	  and the MGF1 hash function.
	  Use of SHA-256, SHA-384, and SHA-512 as these hash functions is defined.
	  The size of the salt value is the same size as the hash function output.
	  All other algorithm parameters use the defaults specified
	  in Section A.2.3 of RFC 3447.
	  The <spanx style="verb">alg</spanx> (algorithm) header
	  parameter values <spanx style="verb">PS256</spanx>,
	  <spanx style="verb">PS384</spanx>,
	  and <spanx style="verb">PS512</spanx>
	  are used in the JWS Header
	  to indicate that the JWS Signature contains a base64url
	  encoded RSASSA-PSS digital signature using
	  the respective hash function in both roles.
	</t>
	<t>
	  A key of size 2048 bits or larger MUST be used with this algorithm.
	</t>
	<t>
	  The RSASSA-PSS SHA-256 digital signature is generated as follows:
	  Generate a digital signature of the JWS Signing Input
	  using RSASSA-PSS-SIGN,
	  the SHA-256 hash function, and
	  the MGF1 mask generation function with SHA-256
	  with the desired private key.
	  This is the JWS signature value.
	</t>
	<t>
	  The RSASSA-PSS SHA-256 digital signature for a JWS is validated as follows:
	  Submit the JWS Signing Input,
	  the JWS Signature,
	  and the public key corresponding to the private key used
	  by the signer to the RSASSA-PSS-VERIFY algorithm
	  using SHA-256 as the hash function and using
	  MGF1 as the mask generation function with SHA-256.
	</t>
	<t>
	  Signing with the RSASSA-PSS SHA-384 and RSASSA-PSS SHA-512
	  algorithms is performed identically to the procedure for
	  RSASSA-PSS SHA-256 --
	  just using the alternative hash algorithm in both roles.
	</t>
      </section>

      <section title='Using the Algorithm "none"' anchor="UsingNone">
	<t>
	  JWSs MAY also be created that do not provide integrity protection.
	  Such a JWS is called a "Plaintext JWS".
	  A Plaintext JWS MUST use the <spanx style="verb">alg</spanx>
	  value <spanx style="verb">none</spanx>, and is formatted
	  identically to other JWSs, but
	  MUST use the empty octet sequence as its JWS Signature value.
	  Receivers MUST verify that the JWS Signature value is the empty octet sequence.
	  See <xref target="NoneSecCon"/> for security considerations
	  associated with using this algorithm.
	</t>
      </section>

    </section>

    <section title="Cryptographic Algorithms for Key Management" anchor="KeyManagementAlgs">
      <t>
	JWE uses cryptographic algorithms to encrypt or determine the
	Content Encryption Key (CEK).
      </t>

      <section title='"alg" (Algorithm) Header Parameter Values for JWE' anchor="JWEAlgValues">

	<t>
	  The table below is the set of <spanx
	  style="verb">alg</spanx> (algorithm) Header Parameter values
	  that are defined by this specification for use with JWE.
	  These algorithms are used to encrypt the CEK, producing the
	  JWE Encrypted Key, or to use key agreement to agree upon the CEK.
	</t>

	<texttable>

	  <ttcol align="left">alg Parameter Value</ttcol>
	  <ttcol align="left">Key Management Algorithm</ttcol>
	  <ttcol align="left">Additional Header Parameters</ttcol>
	  <ttcol align="left">Implementation Requirements</ttcol>

	  <c>RSA1_5</c>
	  <c>RSAES-PKCS1-V1_5</c>
	  <c>(none)</c>
	  <c>Required</c>

	  <c>RSA-OAEP</c>
	  <c>RSAES using OAEP with default parameters</c>
	  <c>(none)</c>
	  <c>Optional</c>

	  <c>A128KW</c>
	  <c>AES Key Wrap with default initial value using 128 bit key</c>
	  <c>(none)</c>
	  <c>Recommended</c>

	  <c>A192KW</c>
	  <c>AES Key Wrap with default initial value using 192 bit key</c>
	  <c>(none)</c>
	  <c>Optional</c>

	  <c>A256KW</c>
	  <c>AES Key Wrap with default initial value using 256 bit key</c>
	  <c>(none)</c>
	  <c>Recommended</c>

	  <c>dir</c>
	  <c>Direct use of a shared symmetric key as the CEK</c>
	  <c>(none)</c>
	  <c>Recommended</c>

	  <c>ECDH-ES</c>
	  <c>Elliptic Curve Diffie-Hellman Ephemeral Static
	  key agreement using Concat KDF
	  </c>
	  <c>
	    <spanx style="verb">epk</spanx>,
	    <spanx style="verb">apu</spanx>,
	    <spanx style="verb">apv</spanx>
	  </c>
	  <c>Recommended+</c>

	  <c>ECDH-ES+A128KW</c>
	  <c>ECDH-ES using Concat KDF and CEK wrapped with
	  <spanx style="verb">A128KW</spanx></c>
	  <c>
	    <spanx style="verb">epk</spanx>,
	    <spanx style="verb">apu</spanx>,
	    <spanx style="verb">apv</spanx>
	  </c>
	  <c>Recommended</c>

	  <c>ECDH-ES+A192KW</c>
	  <c>ECDH-ES using Concat KDF and CEK wrapped with
	  <spanx style="verb">A192KW</spanx></c>
	  <c>
	    <spanx style="verb">epk</spanx>,
	    <spanx style="verb">apu</spanx>,
	    <spanx style="verb">apv</spanx>
	  </c>
	  <c>Optional</c>

	  <c>ECDH-ES+A256KW</c>
	  <c>ECDH-ES using Concat KDF and CEK wrapped with
	  <spanx style="verb">A256KW</spanx></c>
	  <c>
	    <spanx style="verb">epk</spanx>,
	    <spanx style="verb">apu</spanx>,
	    <spanx style="verb">apv</spanx>
	  </c>
	  <c>Recommended</c>

	  <c>A128GCMKW</c>
	  <c>Key wrapping with AES GCM using 128 bit key</c>
	  <c>
	    <spanx style="verb">iv</spanx>,
	    <spanx style="verb">tag</spanx>
	  </c>
	  <c>Optional</c>

	  <c>A192GCMKW</c>
	  <c>Key wrapping with AES GCM using 192 bit key</c>
	  <c>
	    <spanx style="verb">iv</spanx>,
	    <spanx style="verb">tag</spanx>
	  </c>
	  <c>Optional</c>

	  <c>A256GCMKW</c>
	  <c>Key wrapping with AES GCM using 256 bit key</c>
	  <c>
	    <spanx style="verb">iv</spanx>,
	    <spanx style="verb">tag</spanx>
	  </c>
	  <c>Optional</c>

	  <c>PBES2-HS256+A128KW</c>
	  <c>
	    PBES2 with HMAC SHA-256
	    and <spanx style="verb">A128KW</spanx> wrapping
	  </c>
	  <c>
	    <spanx style="verb">p2s</spanx>,
	    <spanx style="verb">p2c</spanx>
	  </c>
	  <c>Optional</c>

	  <c>PBES2-HS384+A192KW</c>
	  <c>
	    PBES2 with HMAC SHA-384
	    and <spanx style="verb">A192KW</spanx> wrapping
	  </c>
	  <c>
	    <spanx style="verb">p2s</spanx>,
	    <spanx style="verb">p2c</spanx>
	  </c>
	  <c>Optional</c>

	  <c>PBES2-HS512+A256KW</c>
	  <c>
	    PBES2 with HMAC SHA-512
	    and <spanx style="verb">A256KW</spanx> wrapping
	  </c>
	  <c>
	    <spanx style="verb">p2s</spanx>,
	    <spanx style="verb">p2c</spanx>
	  </c>
	  <c>Optional</c>

	</texttable>

	<t>
	  The Additional Header Parameters column indicates what
	  additional Header Parameters are used by the algorithm,
	  beyond <spanx style="verb">alg</spanx>, which all use.
	  All but <spanx style="verb">dir</spanx> and
	  <spanx style="verb">ECDH-ES</spanx> also produce a JWE Encrypted Key value.
	</t>
	<t>
	  The use of "+" in the Implementation Requirements
	  indicates that the requirement strength is likely
	  to be increased in a future version of the specification. 
	</t>
	<t>
	  See <xref target="EncAlgXref" /> for a table cross-referencing the
	  JWE <spanx style="verb">alg</spanx> (algorithm)
	  values defined in this specification with the equivalent identifiers
	  used by other standards and software packages.
	</t>
      </section>

      <section title="Key Encryption with RSAES-PKCS1-V1_5" anchor="KeyEncryptionRSA15">
	<t>
	  This section defines the specifics of encrypting a JWE CEK with
	  RSAES-PKCS1-V1_5 <xref target="RFC3447"/>.
	  The <spanx style="verb">alg</spanx> Header Parameter value
	  <spanx style="verb">RSA1_5</spanx> is used in this case.
	</t>
	<t>
	  A key of size 2048 bits or larger MUST be used with this algorithm.
	</t>
	<t>
	  An example using this algorithm is shown in
	  Appendix A.2 of <xref target="JWE"/>.
	</t>
      </section>

      <section title="Key Encryption with RSAES OAEP" anchor="KeyEncryptionRSAOAEP">
	<t>
	  This section defines the specifics of encrypting a JWE CEK with
	  RSAES using Optimal Asymmetric Encryption Padding (OAEP)
	  <xref target="RFC3447"/>, with the
	  default parameters specified by RFC 3447 in Section A.2.1.
	  (Those default parameters are using a hash function of SHA-1 and
	  a mask generation function of MGF1 with SHA-1.)
	  The <spanx style="verb">alg</spanx> Header Parameter value
	  <spanx style="verb">RSA-OAEP</spanx> is used in this case.
	</t>
	<t>
	  A key of size 2048 bits or larger MUST be used with this algorithm.
	</t>
	<t>
	  An example using this algorithm is shown in
	  Appendix A.1 of <xref target="JWE"/>.
	</t>
      </section>

      <section title="Key Wrapping with AES Key Wrap" anchor="KeyEncryptionAESKW">
	<t>
	  This section defines the specifics of encrypting a JWE CEK with
	  the Advanced Encryption Standard (AES) Key Wrap Algorithm
	  <xref target="RFC3394"/>
	  using the default initial value specified in Section 2.2.3.1
	  using a 128, 192, or 256 bit key.
	  The <spanx style="verb">alg</spanx> Header Parameter values
	  <spanx style="verb">A128KW</spanx>,
	  <spanx style="verb">A192KW</spanx>,
	  or <spanx style="verb">A256KW</spanx>
	  are respectively used in this case.
	</t>
	<t>
	  An example using this algorithm is shown in
	  Appendix A.3 of <xref target="JWE"/>.
	</t>
      </section>

      <section title="Direct Encryption with a Shared Symmetric Key" anchor="DirectEncryption">
	<t>
	  This section defines the specifics of directly performing symmetric key
	  encryption without performing a key wrapping step.  In this case,
	  the shared symmetric key is used directly as the Content Encryption Key (CEK)
	  value for the <spanx style="verb">enc</spanx> algorithm.
	  An empty octet sequence is used as the JWE Encrypted Key value.
	  The <spanx style="verb">alg</spanx> Header Parameter value
	  <spanx style="verb">dir</spanx>
	  is used in this case.
	</t>
	<t>
	  Refer to the security considerations on key lifetimes
	  in <xref target="KeyLifetimes"/> and AES GCM in <xref target="GCMSecCon"/>
	  when considering utilizing direct encryption.
	</t>
      </section>

      <section title="Key Agreement with Elliptic Curve Diffie-Hellman Ephemeral Static (ECDH-ES)" anchor="ECDHES">
	<t>
	  This section defines the specifics of key agreement with
	  Elliptic Curve Diffie-Hellman Ephemeral Static <xref target="RFC6090"/>,
	  in combination with the
	  Concat KDF, as defined in Section 5.8.1 of <xref target="NIST.800-56A" />.
	  The key agreement result can be used in one of two ways:
	  <list style='numbers'>
	    <t>
	      directly as the Content Encryption Key (CEK) for the
	      <spanx style="verb">enc</spanx> algorithm, in the Direct Key Agreement mode, or
	    </t>
	    <t>
	      as a symmetric key used to wrap the CEK with the
	      <spanx style="verb">A128KW</spanx>,
	      <spanx style="verb">A192KW</spanx>,
	      or <spanx style="verb">A256KW</spanx>
	      algorithms, in the Key Agreement with Key Wrapping mode.
	    </t>
	  </list>
	</t>
	<t>
	  The <spanx style="verb">alg</spanx> Header Parameter value
	  <spanx style="verb">ECDH-ES</spanx>
	  is used in the Direct Key Agreement mode.
	  In this mode,
	  the output of the Concat KDF MUST be a key of the
	  same length as that used by the
	  <spanx style="verb">enc</spanx> algorithm;
	  in this case, the empty octet sequence is used as the JWE Encrypted Key value.
	</t>
	<t>
	  The <spanx style="verb">alg</spanx> Header Parameter values 
	  <spanx style="verb">ECDH-ES+A128KW</spanx>,
	  <spanx style="verb">ECDH-ES+A192KW</spanx>,
	  or <spanx style="verb">ECDH-ES+A256KW</spanx>
	  are used in the Key Agreement with Key Wrapping mode.
	  In this mode,
	  the output of the Concat KDF MUST be a key of the
	  length needed for the specified key wrapping algorithm,
	  one of 128, 192, or 256 bits respectively.
	</t>
	<t>
	  A new ephemeral public key
	  value MUST be generated for each key agreement operation.
	</t>

	<section title="Header Parameters Used for ECDH Key Agreement" anchor="ParamsECDHES">
	  <t>
	    The following Header Parameter names
	    are used for key agreement as defined below.
	  </t>

	  <section title='"epk" (Ephemeral Public Key) Header Parameter' anchor="epkDef">
	    <t>
	      The <spanx style="verb">epk</spanx> (ephemeral public key)
	      value created by the originator for the use in key agreement algorithms.
	      This key is represented as a JSON Web Key <xref target="JWK" />
	      public key value.
	      It MUST contain only public key parameters and
	      SHOULD contain only the minimum JWK parameters necessary to represent the key;
	      other JWK parameters included can be checked for consistency and honored or can be ignored.
	      This Header Parameter MUST be present and MUST be understood and processed
	      by implementations when these algorithms are used.
	    </t>
	  </section>

	  <section title='"apu" (Agreement PartyUInfo) Header Parameter' anchor="apuDef">
	    <t>
	      The <spanx style="verb">apu</spanx> (agreement PartyUInfo)
	      value for key agreement algorithms using it
	      (such as <spanx style="verb">ECDH-ES</spanx>),
	      represented as a base64url encoded string.
	      When used, the PartyUInfo value contains information about the sender.
	      Use of this Header Parameter is OPTIONAL.
	      This Header Parameter MUST be understood and processed
	      by implementations when these algorithms are used.
	    </t>
	  </section>

	  <section title='"apv" (Agreement PartyVInfo) Header Parameter' anchor="apvDef">
	    <t>
	      The <spanx style="verb">apv</spanx> (agreement PartyVInfo)
	      value for key agreement algorithms using it
	      (such as <spanx style="verb">ECDH-ES</spanx>),
	      represented as a base64url encoded string.
	      When used, the PartyVInfo value contains information about the receiver.
	      Use of this Header Parameter is OPTIONAL.
	      This Header Parameter MUST be understood and processed
	      by implementations when these algorithms are used.
	    </t>
	  </section>

	</section>

	<section title='Key Derivation for ECDH Key Agreement' anchor="KeyDerivECDHES">
	  <t>
	    The key derivation process derives the agreed upon key from the
	    shared secret Z established through the ECDH algorithm,
	    per Section 6.2.2.2 of <xref target="NIST.800-56A" />.
	  </t>
	  <t>
	    Key derivation is performed using the Concat KDF, as
	    defined in Section 5.8.1 of <xref target="NIST.800-56A" />, where the Digest
	    Method is SHA-256.
	    The Concat KDF parameters are set as follows:
	    <list style='hanging'>
	      <t hangText="Z">
		This is set to the representation of the shared secret Z as an octet sequence.
	      </t>
	      <t hangText="keydatalen">
		This is set to the number of bits in the desired output key.
		For <spanx style="verb">ECDH-ES</spanx>, this is length of the key
		used by the <spanx style="verb">enc</spanx> algorithm.
		For <spanx style="verb">ECDH-ES+A128KW</spanx>,
		<spanx style="verb">ECDH-ES+A192KW</spanx>,
		and <spanx style="verb">ECDH-ES+A256KW</spanx>,
		this is 128, 192, and 256, respectively.
	      </t>
	      <t hangText="AlgorithmID">
		The AlgorithmID value is of the form Datalen || Data, where
		Data is a variable-length string of zero or more octets,
		and Datalen is a fixed-length, big endian 32 bit counter that
		indicates the length (in octets) of Data.
		In the Direct Key Agreement case,
		Data is set to
		the octets of the UTF-8 representation of the
		<spanx style="verb">enc</spanx> Header Parameter value.
		In the Key Agreement with Key Wrapping case,
		Data is set to
		the octets of the UTF-8 representation of the
		<spanx style="verb">alg</spanx> Header Parameter value.
	      </t>
	      <t hangText="PartyUInfo">
		The PartyUInfo value is of the form Datalen || Data, where
		Data is a variable-length string of zero or more octets,
		and Datalen is a fixed-length, big endian 32 bit counter that
		indicates the length (in octets) of Data.
		If an <spanx style="verb">apu</spanx> (agreement PartyUInfo)
		Header Parameter is present, Data is set to the result of
		base64url decoding the <spanx style="verb">apu</spanx> value
		and Datalen is set to the number of octets in Data.
		Otherwise, Datalen is set to 0 and Data is set to the empty octet sequence.
	      </t>
	      <t hangText="PartyVInfo">
		The PartyVInfo value is of the form Datalen || Data, where
		Data is a variable-length string of zero or more octets,
		and Datalen is a fixed-length, big endian 32 bit counter that
		indicates the length (in octets) of Data.
		If an <spanx style="verb">apv</spanx> (agreement PartyVInfo)
		Header Parameter is present, Data is set to the result of
		base64url decoding the <spanx style="verb">apv</spanx> value
		and Datalen is set to the number of octets in Data.
		Otherwise, Datalen is set to 0 and Data is set to the empty octet sequence.
	      </t>
	      <t hangText="SuppPubInfo">
		This is set to the keydatalen represented as a
		32 bit big endian integer.
	      </t>
	      <t hangText="SuppPrivInfo">
		This is set to the empty octet sequence.
	      </t>
	    </list>
	  </t>
	  <t>
	    Applications need to specify how the
	    <spanx style="verb">apu</spanx> and <spanx style="verb">apv</spanx> parameters
	    are used for that application.
	    The <spanx style="verb">apu</spanx> and <spanx style="verb">apv</spanx>
	    values MUST be distinct, when used.
	    Applications wishing to conform to <xref target="NIST.800-56A" />
	    need to provide values that meet the requirements of that document,
	    e.g., by using values that identify the sender and recipient.
	    Alternatively, applications MAY conduct key derivation in a manner similar to
	    The Diffie-Hellman Key Agreement Method <xref target="RFC2631"/>:
	    In that case, the <spanx style="verb">apu</spanx> field MAY either be omitted
	    or represent a random 512-bit value
	    (analogous to PartyAInfo in Ephemeral-Static mode in [RFC2631])
	    and the <spanx style="verb">apv</spanx> field should not be present.
	  </t>
	  <t>
	    See <xref target="ECDHESExample"/> for an example key agreement computation
	    using this method.
	  </t>
	</section>
      </section>

      <section title="Key Encryption with AES GCM" anchor="KeyEncryptionGCM">
	<t>
	  This section defines the specifics of encrypting a
	  JWE Content Encryption Key (CEK) with
	  Advanced Encryption Standard (AES) in Galois/Counter Mode (GCM)
	  <xref target="AES"/> <xref target="NIST.800-38D"/>
	  using a 128, 192, or 256 bit key.
	  The <spanx style="verb">alg</spanx> Header Parameter values
	  <spanx style="verb">A128GCMKW</spanx>,
	  <spanx style="verb">A192GCMKW</spanx>,
	  or <spanx style="verb">A256GCMKW</spanx>
	  are respectively used in this case.
	</t>
	<t>
	  Use of an Initialization Vector of size 96 bits is
	  REQUIRED with this algorithm.
	  The Initialization Vector is represented in base64url encoded form
	  as the <spanx style="verb">iv</spanx> (initialization vector)
	  Header Parameter value.
	</t>
	<t>
	  The Additional Authenticated Data value used is
	  the empty octet string.
	</t>
	<t>
	  The requested size of the Authentication Tag output MUST be
	  128 bits, regardless of the key size.
	</t>
	<t>
	  The JWE Encrypted Key value is the Ciphertext output.
	</t>
	<t>
	  The Authentication Tag output is represented in base64url encoded form
	  as the <spanx style="verb">tag</spanx> (authentication tag)
	  Header Parameter value.
	</t>

	<section title="Header Parameters Used for AES GCM Key Encryption"
		 anchor="ParamsGCMKeyWrap">
	  <t>
	    The following Header Parameters are used for AES GCM key encryption.
	  </t>

	  <section title='"iv" (Initialization Vector) Header Parameter' anchor="ivDef">
	    <t>
	      The <spanx style="verb">iv</spanx> (initialization vector)
	      Header Parameter value is the base64url encoded representation of the
	      Initialization Vector value used for the key encryption operation.
	      This Header Parameter MUST be present and MUST be understood and processed
	      by implementations when these algorithms are used.
	    </t>
	  </section>

	  <section title='"tag" (Authentication Tag) Header Parameter' anchor="tagDef">
	    <t>
	      The <spanx style="verb">tag</spanx> (authentication tag)
	      Header Parameter value is the base64url encoded representation of the
	      Authentication Tag value resulting from the key encryption operation.
	      This Header Parameter MUST be present and MUST be understood and processed
	      by implementations when these algorithms are used.
	    </t>
	  </section>

	</section>

      </section>

      <section title="Key Encryption with PBES2" anchor="pbcrypto-pbes2-jwe">
        <t>
	  The <spanx style="verb">PBES2-HS256+A128KW</spanx>,
	  <spanx style="verb">PBES2-HS384+A192KW</spanx>,
	  and <spanx style="verb">PBES2-HS512+A256KW</spanx>
	  composite algorithms are used to perform password-based encryption of a JWE CEK,
	  by first deriving a key encryption key from a user-supplied password,
	  then encrypting the JWE CEK using the derived key.
	  These algorithms are PBES2 schemes
	  as specified in Section 6.2 of <xref target="RFC2898"/>.
	</t>
	<t>
	  These algorithms use HMAC SHA-2 algorithms as the Pseudo-Random Function (PRF)
	  for the PBKDF2 key derivation and
	  AES Key Wrap <xref target="RFC3394"/> for the encryption scheme.
	  The PBES2 password input is an octet sequence;
	  if the password to be used is represented as a text string
	  rather than an octet sequence, the UTF-8 encoding of the text string
	  MUST be used as the octet sequence.
	  The salt MUST be provided as the <spanx style="verb">p2s</spanx>
	  Header Parameter value, and MUST be base64url decoded to obtain the value.
	  The iteration count parameter MUST be provided as the
	  <spanx style="verb">p2c</spanx> Header Parameter value.
	  The algorithms respectively use HMAC SHA-256, HMAC SHA-384, and HMAC SHA-512
	  as the PRF and use 128, 192, and 256 bit AES Key Wrap keys.
	  Their derived-key lengths respectively are 16, 24, and 32 octets.
	</t>
	<t>
	  See Appendix C of JSON Web Key (JWK) <xref target="JWK"/>
	  for an example key encryption computation using
	  <spanx style="verb">PBES2-HS256+A128KW</spanx>.
	</t>

	<section title="Header Parameters Used for PBES2 Key Encryption"
		 anchor="ParamsPBES2">
	  <t>
	    The following Header Parameters are used for
	    Key Encryption with PBES2.
	  </t>

	  <section title='"p2s" (PBES2 salt) Parameter' anchor="p2sDef">
	    <t>
	      The <spanx style="verb">p2s</spanx> (PBES2 salt) Header Parameter contains
	      the PBKDF2 salt value, encoded using base64url.
	      This Header Parameter MUST be present and MUST be understood and processed
	      by implementations when these algorithms are used.
	    </t>
	    <t>
	      The salt expands the possible keys that can be derived
	      from a given password.
	      A salt value containing 8 or more octets MUST be used.
	      A new salt value MUST be generated randomly for every encryption operation;
	      see <xref target="RFC4086"/> for considerations on generating random values.
	    </t>
	  </section>

	  <section title='"p2c" (PBES2 count) Parameter' anchor="p2cDef">
	    <t>
	      The <spanx style="verb">p2c</spanx> (PBES2 count) Header Parameter contains
	      the PBKDF2 iteration count, represented as a positive integer.
	      This Header Parameter MUST be present and MUST be understood and processed
	      by implementations when these algorithms are used.
	    </t>
	    <t>
	      The iteration count adds computational expense,
	      ideally compounded by the possible range
	      of keys introduced by the salt.
	      A minimum iteration count of 1000 is RECOMMENDED.
	    </t>
	  </section>

	</section>

      </section>

    </section>

    <section title="Cryptographic Algorithms for Content Encryption" anchor="ContentEncryptionAlgs">
      <t>
	JWE uses cryptographic algorithms to encrypt the Plaintext.
      </t>

      <section title='"enc" (Encryption Method) Header Parameter Values for JWE' anchor="JWEEncValues">
	<t>
	  The table below is the set of
	  <spanx style="verb">enc</spanx> (encryption method) Header Parameter values that
	  are defined by this specification for use with JWE.  These algorithms are used
	  to encrypt the Plaintext, which produces the Ciphertext.
	</t>

	<texttable>

	  <ttcol align="left">enc Parameter Value</ttcol>
	  <ttcol align="left">Content Encryption Algorithm</ttcol>
	  <ttcol align="left">Additional Header Parameters</ttcol>
	  <ttcol align="left">Implementation Requirements</ttcol>

	  <c>A128CBC-HS256</c>
	  <c>
	    AES_128_CBC_HMAC_SHA_256 authenticated encryption algorithm,
	    as defined in <xref target="CBC_HMAC_256"/>
	  </c>
	  <c>(none)</c>
	  <c>Required</c>

	  <c>A192CBC-HS384</c>
	  <c>
	    AES_192_CBC_HMAC_SHA_384 authenticated encryption algorithm,
	    as defined in <xref target="CBC_HMAC_384"/>
	  </c>
	  <c>(none)</c>
	  <c>Optional</c>

	  <c>A256CBC-HS512</c>
	  <c>
	    AES_256_CBC_HMAC_SHA_512 authenticated encryption algorithm,
	    as defined in <xref target="CBC_HMAC_512"/>
	  </c>
	  <c>(none)</c>
	  <c>Required</c>

	  <c>A128GCM</c>
	  <c>AES GCM using 128 bit key</c>
	  <c>(none)</c>
	  <c>Recommended</c>

	  <c>A192GCM</c>
	  <c>AES GCM using 192 bit key</c>
	  <c>(none)</c>
	  <c>Optional</c>

	  <c>A256GCM</c>
	  <c>AES GCM using 256 bit key</c>
	  <c>(none)</c>
	  <c>Recommended</c>

	</texttable>

	<t>
	  The Additional Header Parameters column indicates what
	  additional Header Parameters are used by the algorithm,
	  beyond <spanx style="verb">enc</spanx>, which all use.
	  All also use a JWE Initialization Vector value and
	  produce JWE Ciphertext and JWE Authentication Tag values.
	</t>
	<t>
	  See <xref target="EncEncXref" /> for a table cross-referencing the
	  JWE <spanx style="verb">enc</spanx> (encryption method)
	  values defined in this specification with the equivalent identifiers
	  used by other standards and software packages.
	</t>
      </section>

      <section title="AES_CBC_HMAC_SHA2 Algorithms" anchor="AES_CBC_HMAC_SHA2">
	<t>
	  This section defines a family of authenticated encryption algorithms
	  built using a composition of
	  Advanced Encryption Standard (AES) in Cipher Block Chaining (CBC) mode with PKCS #5 padding
	  <xref target="AES"/> <xref target="NIST.800-38A"/> operations and
	  HMAC <xref target="RFC2104"/> <xref target="SHS"/> operations.
	  This algorithm family is called AES_CBC_HMAC_SHA2.
	  It also defines three instances of this family,
	  the first using 128 bit CBC keys and HMAC SHA-256,
	  the second using 192 bit CBC keys and HMAC SHA-384,
	  and the third using 256 bit CBC keys and HMAC SHA-512.
	  Test cases for these algorithms can be found in
	  <xref target="CBC_HMAC_TestCases"/>.
	</t>
	<t>
	  These algorithms are based upon
	  <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2">Authenticated Encryption with AES-CBC and HMAC-SHA</xref>,
	  performing the same cryptographic computations,
	  but with the Initialization Vector and Authentication Tag values remaining
	  separate, rather than being concatenated with
	  the Ciphertext value in the output representation.
	  This option is discussed in Appendix B of that specification.
	  This algorithm family is a generalization of the algorithm family in
	  <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2"/>, and can be used to
	  implement those algorithms.
	</t>
	
	<section title="Conventions Used in Defining AES_CBC_HMAC_SHA2">
	  <t>
	    We use the following notational conventions.  
	    <list>
	      <t>
		CBC-PKCS5-ENC(X, P) denotes the AES CBC encryption of&nbsp;P
		using PKCS #5 padding using the cipher with the key&nbsp;X.
	      </t>
	      <t> 
		MAC(Y, M) denotes the application of the Message
		Authentication Code (MAC) to the message&nbsp;M, using the key&nbsp;Y.
	      </t>
	    </list>
	  </t>
	</section>

	<section anchor="generic" title="Generic AES_CBC_HMAC_SHA2 Algorithm">
	  <t>
	    This section defines AES_CBC_HMAC_SHA2 in a manner that is
	    independent of the AES CBC key size or hash function to be used.
	    <xref target="CBC_HMAC_Enc"/> and <xref target="CBC_HMAC_Dec"/> define the
	    generic encryption and decryption algorithms.
	    <xref target="CBC_HMAC_256"/>  and <xref target="CBC_HMAC_512"/>
	    define instances of AES_CBC_HMAC_SHA2 that
	    specify those details.
	  </t>

	  <section anchor="CBC_HMAC_Enc" title="AES_CBC_HMAC_SHA2 Encryption">
	    <t> 
	      The authenticated
	      encryption algorithm takes as input four octet strings: a
	      secret key K, a plaintext P, associated data A, and
	      an initialization vector IV.
	      The authenticated ciphertext value E
	      and the authentication tag value T
	      are provided as outputs.
	      The data in the plaintext are encrypted and
	      authenticated, and the associated data are authenticated,
	      but not encrypted.
	    </t>
	    <t>
	      The encryption process is as follows, or
	      uses an equivalent set of steps:
	      <list style="numbers">
		<t>
		  The secondary keys MAC_KEY and ENC_KEY are generated
		  from the input key K as follows.  Each of these two
		  keys is an octet string.
		  <list style="empty">
		    <t>MAC_KEY consists of the initial MAC_KEY_LEN octets of
		    K, in order.</t>

		    <t>ENC_KEY consists of the final ENC_KEY_LEN octets of
		    K, in order.</t>
		  </list> 
		  Here we denote the number of octets in the MAC_KEY as
		  MAC_KEY_LEN, and the number of octets in ENC_KEY as
		  ENC_KEY_LEN; the values of these parameters are specified
		  by the AEAD algorithms (in <xref target="CBC_HMAC_256"/> and
		  <xref target="CBC_HMAC_512"/>).  The number of octets in the
		  input key K is the sum of MAC_KEY_LEN and ENC_KEY_LEN.
		  When generating the secondary keys from K, MAC_KEY and ENC_KEY
		  MUST NOT overlap.
		  Note that the MAC key comes before the encryption key in the input key K;
		  this is in the opposite order of the algorithm names in
		  the identifier "AES_CBC_HMAC_SHA2".
		</t>

		<t>
		  The Initialization Vector (IV) used is a 128 bit value
		  generated randomly or pseudorandomly
		  for use in the cipher.
		</t>

		<t>
		  The plaintext is CBC encrypted using PKCS #5 padding
		  using ENC_KEY as the key, and the IV.
		  We denote the ciphertext output from this step as E.
		</t>

		<t>
		  The octet string AL is equal to the number
		  of bits in A expressed as a 64-bit unsigned integer in network byte
		  order.
		</t>

		<t>A message authentication tag T is computed by applying
		HMAC <xref target="RFC2104"/> to the following data, in
		order:
		<list style="empty">
		  <t> the associated data A, </t>
		  <t> the initialization vector IV, </t>
		  <t> the ciphertext E computed in the previous step, and </t>
		  <t> the octet string AL defined above. </t>
		</list>
		The string MAC_KEY is used as the MAC key.  We denote
		the output of the MAC computed in this step as M.
		The first T_LEN bits of M are used as T.
		</t>

		<t>
		  The Ciphertext E and the Authentication Tag T
		  are returned as the outputs of the authenticated encryption.
		</t>
	      </list>
	    </t>

	    <t>
	      The encryption process can be illustrated as follows.  Here
	      K, P, A, IV, and E denote the key, plaintext, associated data,
	      initialization vector, and
	      ciphertext, respectively.
	      <list>
		<t>
		  MAC_KEY = initial MAC_KEY_LEN bytes of K,
		</t>
		<t>
		  ENC_KEY = final ENC_KEY_LEN bytes of K,
		</t>
		<t>
		  E = CBC-PKCS5-ENC(ENC_KEY, P), 
		</t>
		<t>
		  M = MAC(MAC_KEY, A || IV || E || AL), 
		</t>
		<t>
		  T = initial T_LEN bytes of M.
		</t>
	      </list>
	    </t>
	    
	  </section>

	  <section anchor="CBC_HMAC_Dec" title="AES_CBC_HMAC_SHA2 Decryption">
	    <t>
	      The authenticated decryption operation has four inputs: K,
	      A, E, and T as defined above.  It has only
	      a single output, either a plaintext value P or a special
	      symbol FAIL that indicates that the inputs are not
	      authentic.  The authenticated decryption algorithm is
	      as follows, or uses an equivalent set of steps:
	      
	      <list style="numbers">

		<t>
		  The secondary keys MAC_KEY and ENC_KEY are generated
		  from the input key K as in Step 1 of <xref target="CBC_HMAC_Enc"/>.
		</t>

		<t>
		  The integrity and authenticity of A and E are checked
		  by computing an HMAC with the inputs as in Step 5 of 
		  <xref target="CBC_HMAC_Enc"/>.  
		  The value T, from the previous step, is compared to the
		  first MAC_KEY length bits of the
		  HMAC output.  If those values are identical, then A and
		  E are considered valid, and processing is
		  continued. Otherwise, all of the data used in the MAC
		  validation are discarded, and the AEAD decryption
		  operation returns an indication that it failed, and the
		  operation halts.
		  (But see Section 10 of <xref target="JWE"/> for
		  security considerations on thwarting timing attacks.)
		</t>

		<t>
		  The value E is decrypted and the PKCS #5 padding is removed.
		  The value IV is used as the initialization vector.
		  The value ENC_KEY is used as the decryption key.
		</t>

		<t> The plaintext value is returned.</t>
	      </list>
	    </t>
	  
	  </section>
	</section>

	<section anchor="CBC_HMAC_256" title="AES_128_CBC_HMAC_SHA_256">
	  <t>This algorithm is a concrete instantiation of the
	  generic AES_CBC_HMAC_SHA2 algorithm above.
	  It uses the HMAC message
	  authentication code <xref target="RFC2104"></xref> with the
	  SHA-256 hash function <xref target="SHS"></xref> to provide
	  message authentication, with the HMAC output
	  truncated to 128 bits, corresponding to the
	  HMAC-SHA-256-128 algorithm defined in <xref target="RFC4868"/>.
	  For encryption, it uses AES
	  in the Cipher Block Chaining (CBC) mode of operation as
	  defined in Section 6.2 of <xref target="NIST.800-38A"></xref>, with
	  PKCS #5 padding.</t>
	  <t>
	    The input key K is 32 octets long. 
	  </t>
	  <t>
	    The AES CBC IV is 16 octets long.  ENC_KEY_LEN is 16
	    octets.
	  </t>
	  <t>
	    The SHA-256 hash algorithm is used in HMAC.  MAC_KEY_LEN is 16
	    octets.  The HMAC-SHA-256 output is truncated to T_LEN=16 octets,
	    by stripping off the final 16 octets.
	  </t>

	</section>

	<section anchor="CBC_HMAC_384" title="AES_192_CBC_HMAC_SHA_384">
	  <t>
	    AES_192_CBC_HMAC_SHA_384 is based on AES_128_CBC_HMAC_SHA_256,
	    but with the following differences:
	    <list>
	      <t>
		A 192 bit AES CBC key is used instead of 128.
	      </t>
	      <t>
		SHA-384 is used in HMAC instead of SHA-256.  
	      </t>
	      <t>
		ENC_KEY_LEN is 24 octets instead of 16.
	      </t>
	      <t>
		MAC_KEY_LEN is 24 octets instead of 16.
	      </t>
	      <t>
		The length of the input key K is 48 octets instead of 32.
	      </t>
	      <t>
		The HMAC SHA-384 value is truncated to T_LEN=24 octets instead of 16.
	      </t>
	    </list>
	  </t>
	</section>

	<section anchor="CBC_HMAC_512" title="AES_256_CBC_HMAC_SHA_512">
	  <t>
	    AES_256_CBC_HMAC_SHA_512 is based on AES_128_CBC_HMAC_SHA_256,
	    but with the following differences:
	    <list>
	      <t>
		A 256 bit AES CBC key is used instead of 128.
	      </t>
	      <t>
		SHA-512 is used in HMAC instead of SHA-256.  
	      </t>
	      <t>
		ENC_KEY_LEN is 32 octets instead of 16.
	      </t>
	      <t>
		MAC_KEY_LEN is 32 octets instead of 16.
	      </t>
	      <t>
		The length of the input key K is 64 octets instead of 32.
	      </t>
	      <t>
		The HMAC SHA-512 value is truncated to T_LEN=32 octets instead of 16.
	      </t>
	    </list>
	  </t>
	</section>

	<section title="Plaintext Encryption with AES_CBC_HMAC_SHA2"
		 anchor="JWE_CBC_HMAC">
	  <t>
	    The algorithm value <spanx style="verb">A128CBC-HS256</spanx>
	    is used as the <spanx style="verb">alg</spanx> value when using
	    AES_128_CBC_HMAC_SHA_256 with JWE.
	    The algorithm value <spanx style="verb">A192CBC-HS384</spanx> 
	    is used as the <spanx style="verb">alg</spanx> value when using
	    AES_192_CBC_HMAC_SHA_384 with JWE.
	    The algorithm value <spanx style="verb">A256CBC-HS512</spanx> 
	    is used as the <spanx style="verb">alg</spanx> value when using
	    AES_256_CBC_HMAC_SHA_512 with JWE.
	  </t>
	</section>
      </section>

      <section title="Plaintext Encryption with AES GCM" anchor="PlaintextEncryptionGCM">
	<t>
	  This section defines the specifics of encrypting the JWE Plaintext with
	  Advanced Encryption Standard (AES) in Galois/Counter Mode (GCM)
	  <xref target="AES"/> <xref target="NIST.800-38D"/>
	  using a 128, 192, or 256 bit key.
	  The <spanx style="verb">enc</spanx> Header Parameter values
	  <spanx style="verb">A128GCM</spanx>,
	  <spanx style="verb">A192GCM</spanx>,
	  or <spanx style="verb">A256GCM</spanx>
	  are respectively used in this case.
	</t>
	<t>
	  The CEK is used as the encryption key.
	</t>
	<t>
	  Use of an initialization vector of size 96 bits is
	  REQUIRED with this algorithm.
	</t>
	<t>
	  The requested size of the Authentication Tag output MUST be
	  128 bits, regardless of the key size.
	</t>
	<t>
	  The JWE Authentication Tag is set
	  to be the Authentication Tag value produced by the encryption.
	  During decryption, the received JWE Authentication Tag is used as the
	  Authentication Tag value.
	</t>
	<t>
	  An example using this algorithm is shown in
	  Appendix A.1 of <xref target="JWE"/>.
	</t>
      </section>

    </section>

    <section title="Cryptographic Algorithms for Keys" anchor="JWKKeyTypes">
      <t>
	A JSON Web Key (JWK) <xref target="JWK" /> is a
	JSON
	data structure that represents a cryptographic key.
	These keys can be either asymmetric or symmetric.
	They can hold both public and private information about the key.
	This section defines the parameters for keys
	using the algorithms specified by this document.
      </t>

      <section title='"kty" (Key Type) Parameter Values' anchor="JWKKtyValues">
	<t>
	  The table below is the set of
	  <spanx style="verb">kty</spanx> (key type) parameter
	  values that are defined by this specification for use in JWKs.
	</t>

	<texttable>

	  <ttcol align="left">kty Parameter Value</ttcol>
	  <ttcol align="left">Key Type</ttcol>
	  <ttcol align="left">Implementation Requirements</ttcol>

	  <c>EC</c>
	  <c>Elliptic Curve <xref target="DSS"/></c>
	  <c>Recommended+</c>

	  <c>RSA</c>
	  <c>RSA <xref target="RFC3447" /></c>
	  <c>Required</c>

	  <c>oct</c>
	  <c>Octet sequence (used to represent symmetric keys)</c>
	  <c>Required</c>

	</texttable>

	<t>
	  The use of "+" in the Implementation Requirements
	  indicates that the requirement strength is likely
	  to be increased in a future version of the specification. 
	</t>
      </section>

      <section title="Parameters for Elliptic Curve Keys" anchor="JWKEC">
	<t>
	  JWKs can represent Elliptic Curve <xref target="DSS"/> keys.  In
	  this case, the <spanx style="verb">kty</spanx>
	  member value MUST be <spanx style="verb">EC</spanx>.
	</t>

	<section title="Parameters for Elliptic Curve Public Keys" anchor="ECPublic">

	  <t>
	    An elliptic curve public key is represented by a pair of coordinates  
	    drawn from a finite field, which together define a point on an elliptic curve.
	    The following members MUST be present for elliptic curve public keys:  
	    <list style="symbols">  
	      <t><spanx style="verb">crv</spanx></t>  
	      <t><spanx style="verb">x</spanx></t>  
	      <t><spanx style="verb">y</spanx></t>  
	    </list>
	  </t>
	  <t>
	    SEC1 <xref target="SEC1"/> point compression is not supported for any values.
	  </t>

	  <section title='"crv" (Curve) Parameter' anchor="crvECDef">
	    <t>
	      The <spanx style="verb">crv</spanx> (curve) member identifies
	      the cryptographic curve used with the key.  Curve values
	      from <xref target="DSS"/> used by this specification are:
	      <list style='symbols'>
		<t><spanx style="verb">P-256</spanx></t>
		<t><spanx style="verb">P-384</spanx></t>
		<t><spanx style="verb">P-521</spanx></t>
	      </list>
	      These values are registered in the IANA
	      JSON Web Key Elliptic Curve registry
	      defined in
	      <xref target="CurveReg"/>.
	      Additional <spanx style="verb">crv</spanx> values MAY be used, provided
	      they are understood by implementations using that Elliptic Curve key.
	      The <spanx style="verb">crv</spanx> value is a case-sensitive string.
	    </t>
	  </section>

	  <section title='"x" (X Coordinate) Parameter' anchor="xECDef">
	    <t>
	      The <spanx style="verb">x</spanx> (x coordinate) member contains the
	      x coordinate for the elliptic curve point.
	      It is represented as the base64url encoding of the
	      octet string representation of the coordinate,
	      as defined in Section 2.3.5 of <xref target="SEC1">SEC1</xref>.  
	      The length of this octet string MUST be the full size of a coordinate  
	      for the curve specified in the <spanx style="verb">crv</spanx> parameter.
	      For example, if the value of <spanx style="verb">crv</spanx> is
	      <spanx style="verb">P-521</spanx>, the octet string must be 66 octets long.
	    </t>
	  </section>

	  <section title='"y" (Y Coordinate) Parameter' anchor="yECDef">
	    <t>
	      The <spanx style="verb">y</spanx> (y coordinate) member contains the
	      y coordinate for the elliptic curve point.
	      It is represented as the base64url encoding of the
	      octet string representation of the coordinate,
	      as defined in Section 2.3.5 of <xref target="SEC1">SEC1</xref>.  
	      The length of this octet string MUST be the full size of a coordinate  
	      for the curve specified in the <spanx style="verb">crv</spanx> parameter.
	      For example, if the value of <spanx style="verb">crv</spanx> is
	      <spanx style="verb">P-521</spanx>, the octet string must be 66 octets long.  
	    </t>
	  </section>

	</section>

	<section title="Parameters for Elliptic Curve Private Keys" anchor="ECPrivate">
	  <t>
	    In addition to the members used to represent Elliptic Curve public keys,
	    the following member MUST be present to represent Elliptic Curve private keys.
	  </t>

	  <section title='"d" (ECC Private Key) Parameter' anchor="dECDef">
	    <t>
	      The <spanx style="verb">d</spanx> (ECC private key) member contains
	      the Elliptic Curve private key value.
	      It is represented as the base64url encoding of the
	      octet string representation of the private key value,
	      as defined in Sections C.4 and 2.3.7 of <xref target="SEC1">SEC1</xref>.  
	      The length of this octet string MUST be ceiling(log-base-2(n)/8)
	      octets (where n is the order of the curve).
	    </t>
	  </section>

	</section>
      </section>

      <section title="Parameters for RSA Keys" anchor="JWKRSA">
	<t>
	  JWKs can represent RSA <xref target="RFC3447" /> keys.  In
	  this case, the <spanx style="verb">kty</spanx>
	  member value MUST be <spanx style="verb">RSA</spanx>.
	</t>

	<section title="Parameters for RSA Public Keys" anchor="RSAPublic">

	  <t>
	    The following members MUST be present for RSA public keys.
	  </t>

	  <section title='"n" (Modulus) Parameter' anchor="nRSADef">
	    <t>
	      The <spanx style="verb">n</spanx> (modulus) member contains
	      the modulus value for the RSA public key.  It is
	      represented as the base64url encoding of the value's
	      unsigned big endian representation as an octet sequence.
	      The octet sequence MUST utilize the minimum
	      number of octets to represent the value.
	    </t>
	  </section>

	  <section title='"e" (Exponent) Parameter' anchor="eRSADef">
	    <t>
	      The <spanx style="verb">e</spanx> (exponent) member contains
	      the exponent value for the RSA public key.  It is
	      represented as the base64url encoding of the value's
	      unsigned big endian representation as an octet sequence.
	      The octet sequence MUST utilize the minimum
	      number of octets to represent the value.
	      For instance, when representing the value 65537,
	      the octet sequence to be base64url encoded MUST consist of the
	      three octets [1, 0, 1].
	    </t>
	  </section>

	</section>

	<section title="Parameters for RSA Private Keys" anchor="RSAPrivate">
	  <t>
	    In addition to the members used to represent RSA public keys,
	    the following members are used to represent RSA private keys.
	    The parameter <spanx style="verb">d</spanx> is REQUIRED for RSA private keys.
	    The others enable optimizations and SHOULD be included by producers
	    of JWKs representing RSA private keys.
	    If the producer includes any of the other private key parameters, 
	    then all of the others MUST be present,
	    with the exception of <spanx style="verb">oth</spanx>,
	    which MUST only be present when more than two prime factors were used.
	    The consumer of a JWK MAY choose to accept an RSA private key
	    that does not contain a complete set of the private key parameters
	    other than <spanx style="verb">d</spanx>, including JWKs in which
	    <spanx style="verb">d</spanx> is the only RSA private key parameter included.
	  </t>

	  <section title='"d" (Private Exponent) Parameter' anchor="dRSADef">
	    <t>
	      The <spanx style="verb">d</spanx> (private exponent) member contains
	      the private exponent value for the RSA private key.
	      It is represented as the base64url encoding of the
	      value's unsigned big endian representation as an octet sequence.
	      The octet sequence MUST utilize the minimum
	      number of octets to represent the value.
	    </t>
	  </section>

	  <section title='"p" (First Prime Factor) Parameter' anchor="pRSADef">
	    <t>
	      The <spanx style="verb">p</spanx> (first prime factor) member contains
	      the first prime factor, a positive integer.
	      It is represented as the base64url encoding of the
	      value's unsigned big endian representation as an octet sequence.
	      The octet sequence MUST utilize the minimum
	      number of octets to represent the value.
	    </t>
	  </section>

	  <section title='"q" (Second Prime Factor) Parameter' anchor="qRSADef">
	    <t>
	      The <spanx style="verb">q</spanx> (second prime factor) member contains
	      the second prime factor, a positive integer.
	      It is represented as the base64url encoding of the
	      value's unsigned big endian representation as an octet sequence.
	      The octet sequence MUST utilize the minimum
	      number of octets to represent the value.
	    </t>
	  </section>

	  <section title='"dp" (First Factor CRT Exponent) Parameter' anchor="dpRSADef">
	    <t>
	      The <spanx style="verb">dp</spanx> (first factor CRT exponent)
	      member contains the Chinese Remainder Theorem (CRT) exponent
	      of the first factor, a positive integer.
	      It is represented as the base64url encoding of the
	      value's unsigned big endian representation as an octet sequence.
	      The octet sequence MUST utilize the minimum
	      number of octets to represent the value.
	    </t>
	  </section>

	  <section title='"dq" (Second Factor CRT Exponent) Parameter' anchor="dqRSADef">
	    <t>
	      The <spanx style="verb">dq</spanx> (second factor CRT exponent)
	      member contains the Chinese Remainder Theorem (CRT) exponent
	      of the second factor, a positive integer.
	      It is represented as the base64url encoding of the
	      value's unsigned big endian representation as an octet sequence.
	      The octet sequence MUST utilize the minimum
	      number of octets to represent the value.
	    </t>
	  </section>

	  <section title='"qi" (First CRT Coefficient) Parameter' anchor="qiRSADef">
	    <t>
	      The <spanx style="verb">dp</spanx> (first CRT coefficient)
	      member contains the Chinese Remainder Theorem (CRT)
	      coefficient of the second factor, a positive integer.
	      It is represented as the base64url encoding of the
	      value's unsigned big endian representation as an octet sequence.
	      The octet sequence MUST utilize the minimum
	      number of octets to represent the value.
	    </t>
	  </section>

	  <section title='"oth" (Other Primes Info) Parameter' anchor="othRSADef">
	    <t>
	      The <spanx style="verb">oth</spanx> (other primes info)
	      member contains an array of information about any third and subsequent
	      primes, should they exist.
	      When only two primes have been used (the normal case),
	      this parameter MUST be omitted.
	      When three or more primes have been used, the number of array
	      elements MUST be the number of primes used minus two.
	      Each array element MUST be an object with the following members:
	    </t>

	    <section title='"r" (Prime Factor)' anchor="othRSArDef">
	      <t>
		The <spanx style="verb">r</spanx> (prime factor) parameter
		within an <spanx style="verb">oth</spanx> array member
		represents the value of a subsequent prime factor,
		a positive integer.
		It is represented as the base64url encoding of the
		value's unsigned big endian representation as an octet sequence.
		The octet sequence MUST utilize the minimum
		number of octets to represent the value.
	      </t>
	    </section>

	    <section title='"d" (Factor CRT Exponent)' anchor="othRSAdDef">
	      <t>
		The <spanx style="verb">d</spanx> (Factor CRT Exponent) parameter
		within an <spanx style="verb">oth</spanx> array member
		represents the CRT exponent of the corresponding prime factor,
		a positive integer.
		It is represented as the base64url encoding of the
		value's unsigned big endian representation as an octet sequence.
		The octet sequence MUST utilize the minimum
		number of octets to represent the value.
	      </t>
	    </section>

	    <section title='"t" (Factor CRT Coefficient)' anchor="othRSAtDef">
	      <t>
		The <spanx style="verb">t</spanx> (factor CRT coefficient) parameter
		within an <spanx style="verb">oth</spanx> array member
		represents the CRT coefficient of the corresponding prime factor,
		a positive integer.
		It is represented as the base64url encoding of the
		value's unsigned big endian representation as an octet sequence.
		The octet sequence MUST utilize the minimum
		number of octets to represent the value.
	      </t>
	    </section>

	  </section>

	</section>

      </section>

      <section title="Parameters for Symmetric Keys" anchor="JWKoct">
	<t>
	  When the JWK <spanx style="verb">kty</spanx>
	  member value is <spanx style="verb">oct</spanx> (octet sequence),
	  the member <spanx style="verb">k</spanx> is used to represent
	  a symmetric key (or another key whose value is a single octet sequence).
	  An <spanx style="verb">alg</spanx> member SHOULD also be present
	  to identify the algorithm intended to be used with the key,
	  unless the application uses another means
	  or convention to determine the algorithm used.
	</t>

	<section title='"k" (Key Value) Parameter' anchor="kOctDef">
	  <t>
	    The <spanx style="verb">k</spanx> (key value) member contains
	    the value of the symmetric (or other single-valued) key.
	    It is represented as the base64url encoding of the
	    octet sequence containing the key value.
	  </t>
	</section>

      </section>

    </section>

    <section title="IANA Considerations" anchor="IANA">
      <t>
	The following registration procedure is used for all the
	registries established by this specification.
      </t>
      <t>
	Values are registered with a Specification Required
	<xref target="RFC5226"/> after a two-week review period on the [TBD]@ietf.org mailing
	list, on the advice of one or more Designated Experts. However, to allow for the
	allocation of values prior to publication, the Designated Expert(s) may approve
	registration once they are satisfied that such a specification will be published.
      </t>
      <t>
	Registration requests must be sent to the [TBD]@ietf.org mailing list for review and
	comment, with an appropriate subject (e.g., "Request for access token type: example").
	[[ Note to the RFC Editor:
	The name of the mailing list should be determined in consultation
	with the IESG and IANA. Suggested name: jose-reg-review. ]]
      </t>
      <t>
	Within the review period, the Designated Expert(s) will either approve or
	deny the registration request, communicating this decision to the review list and IANA.
	Denials should include an explanation and, if applicable, suggestions as to how to make
	the request successful.
	Registration requests that are undetermined for
	a period longer than 21 days can be brought to the IESG's attention
	(using the iesg@iesg.org mailing list) for resolution.
      </t>
      <t>
	Criteria that should be applied by the Designated Expert(s) includes
	determining whether the proposed registration duplicates existing functionality,
	determining whether it is likely to be of general applicability
	or whether it is useful only for a single application,
	and whether the registration makes sense.
      </t>
      <t>
	IANA must only accept registry updates from the Designated Expert(s) and should direct
	all requests for registration to the review mailing list.
      </t>
      <t>
	It is suggested that multiple Designated Experts be appointed who are able to
	represent the perspectives of different applications using this specification,
	in order to enable broadly-informed review of registration decisions.
	In cases where a registration decision could be perceived as
	creating a conflict of interest for a particular Expert,
	that Expert should defer to the judgment of the other Expert(s).
      </t>

      <section title="JSON Web Signature and Encryption Algorithms Registry" anchor="JWSJWEAlgsReg">
	<t>
	  This specification establishes the
	  IANA JSON Web Signature and Encryption Algorithms registry
	  for values of the JWS and JWE
	  <spanx style="verb">alg</spanx> (algorithm) and
	  <spanx style="verb">enc</spanx> (encryption method)
	  Header Parameters.
	  The registry records the algorithm name,
	  the algorithm usage locations,
	  implementation requirements,
	  and a reference to the specification that defines it.
	  The same algorithm name can be registered multiple times,
	  provided that the sets of usage locations are disjoint.
	</t>
	<t>
	  It is suggested that when algorithms can use keys of different lengths,
	  that the length of the key be included in the algorithm name.
	  This allows readers of the JSON text to easily make security consideration decisions.
	</t>
	<t>
	  The implementation requirements of an algorithm MAY be changed
	  over time by the Designated Experts(s) as the
	  cryptographic landscape evolves, for instance,
	  to change the status of an algorithm to Deprecated, or
	  to change the status of an algorithm from Optional
	  to Recommended+ or Required.
	  Changes of implementation requirements are only permitted
	  on a Specification Required basis, with the new specification
	  defining the revised implementation requirements level.
	</t>

        <section title="Registration Template" anchor="AlgsTemplate">
          <t>
            <list style='hanging'>
              <t hangText='Algorithm Name:'>
                <vspace />
                The name requested (e.g., "example").
		This name is case-sensitive.
		Names may not match other registered names in a case-insensitive manner
		unless the Designated Expert(s) state that there is a compelling reason
		to allow an exception in this particular case.
              </t>
              <t hangText='Algorithm Description:'>
                <vspace />
                Brief description of the Algorithm (e.g., "Example description").
              </t>
              <t hangText='Algorithm Usage Location(s):'>
                <vspace />
                The algorithm usage location. This must be one or more of the values
		<spanx style="verb">alg</spanx> or
		<spanx style="verb">enc</spanx>
		if the algorithm is to be used with JWS or JWE.
		The value <spanx style="verb">JWK</spanx> is used if the algorithm
		identifier will be used as a JWK <spanx style="verb">alg</spanx>
		member value, but will not be used with JWS or JWE;
		this could be the case, for instance, for non-authenticated encryption algorithms.
		Other values may be used with the approval of a Designated Expert.
              </t>
              <t hangText='Implementation Requirements:'>
                <vspace />
                The algorithm implementation requirements, which must be one the words
		Required, Recommended, Optional, Deprecated, or Prohibited.
		Optionally, the word can be followed by a "+" or "-".
		The use of "+" indicates that the requirement strength is likely
		to be increased in a future version of the specification. 
		The use of "-" indicates that the requirement strength is likely
		to be decreased in a future version of the specification.
		Any identifiers registered for non-authenticated encryption algorithms
		or other algorithms that are otherwise unsuitable for direct use
		as JWS or JWE algorithms must be registered as "Prohibited".
              </t>	      
              <t hangText='Change Controller:'>
                <vspace />
                For Standards Track RFCs, state "IESG". For others, give the name of the
                responsible party. Other details (e.g., postal address, email address, home page
                URI) may also be included.
              </t>
              <t hangText='Specification Document(s):'>
                <vspace />
                Reference to the document(s) that specify the parameter, preferably including URI(s) that
                can be used to retrieve copies of the document(s). An indication of the relevant
                sections may also be included but is not required.
              </t>
            </list>
          </t>
        </section>

        <section title="Initial Registry Contents" anchor="AlgsContents">
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">HS256</spanx>
              </t>
              <t>
                Algorithm Description: HMAC using SHA-256
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Required
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" />
		of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">HS384</spanx>
              </t>
              <t>
                Algorithm Description: HMAC using SHA-384
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
	      <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" />
		of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">HS512</spanx>
              </t>
              <t>
                Algorithm Description: HMAC using SHA-512
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
	      <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" />
		of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">RS256</spanx>
              </t>
              <t>
                Algorithm Description: RSASSA-PKCS-v1_5 using SHA-256
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Recommended
              </t>
	      <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">RS384</spanx>
              </t>
              <t>
                Algorithm Description: RSASSA-PKCS-v1_5 using SHA-384
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">RS512</spanx>
              </t>
              <t>
                Algorithm Description: RSASSA-PKCS-v1_5 using SHA-512
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ES256</spanx>
              </t>
              <t>
                Algorithm Description: ECDSA using P-256 and SHA-256
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Recommended+
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ES384</spanx>
              </t>
              <t>
                Algorithm Description: ECDSA using P-384 and SHA-384
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ES512</spanx>
              </t>
              <t>
                Algorithm Description: ECDSA using P-521 and SHA-512
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">PS256</spanx>
              </t>
              <t>
                Algorithm Description: RSASSA-PSS using SHA-256 and MGF1 with SHA-256
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
	      <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">PS384</spanx>
              </t>
              <t>
                Algorithm Description: RSASSA-PSS using SHA-384 and MGF1 with SHA-384
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
	      <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">PS512</spanx>
              </t>
              <t>
                Algorithm Description: RSASSA-PSS using SHA-512 and MGF1 with SHA-512
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
	      <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">none</spanx>
              </t>
              <t>
                Algorithm Description: No digital signature or MAC performed
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">RSA1_5</spanx>
              </t>
              <t>
                Algorithm Description: RSAES-PKCS1-V1_5
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Required
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">RSA-OAEP</spanx>
              </t>
              <t>
                Algorithm Description: RSAES using OAEP with default parameters
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A128KW</spanx>
              </t>
              <t>
                Algorithm Description: AES Key Wrap using 128 bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Recommended
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A192KW</spanx>
              </t>
              <t>
                Algorithm Description: AES Key Wrap using 192 bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A256KW</spanx>
              </t>
              <t>
                Algorithm Description: AES Key Wrap using 256 bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Recommended
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">dir</spanx>
              </t>
              <t>
                Algorithm Description: Direct use of a shared symmetric key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Recommended
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ECDH-ES</spanx>
              </t>
              <t>
                Algorithm Description: ECDH-ES using Concat KDF
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Recommended+
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ECDH-ES+A128KW</spanx>
              </t>
              <t>
                Algorithm Description: ECDH-ES using Concat KDF
		and <spanx style="verb">A128KW</spanx> wrapping
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Recommended
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ECDH-ES+A192KW</spanx>
              </t>
              <t>
                Algorithm Description: ECDH-ES using Concat KDF
		and <spanx style="verb">A192KW</spanx> wrapping
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ECDH-ES+A256KW</spanx>
              </t>
              <t>
                Algorithm Description: ECDH-ES using Concat KDF
		and <spanx style="verb">A256KW</spanx> wrapping
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Recommended
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
          <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A128GCMKW</spanx>
              </t>
              <t>
                Algorithm Description: Key wrapping with AES GCM using 128 bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="KeyEncryptionGCM" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A192GCMKW</spanx>
              </t>
              <t>
                Algorithm Description: Key wrapping with AES GCM using 192 bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="KeyEncryptionGCM" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A256GCMKW</spanx>
              </t>
              <t>
                Algorithm Description: Key wrapping with AES GCM using 256 bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="KeyEncryptionGCM" /> of [[ this document ]]
              </t>
            </list>
	  </t>

	  <t>
	    <list style="symbols">
	      <t>
		Algorithm Name: <spanx style="verb">PBES2-HS256+A128KW</spanx>
	      </t>
	      <t>
		Algorithm Description: PBES2 with HMAC SHA-256
		and <spanx style="verb">A128KW</spanx> wrapping
	      </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
	      <t>
		Implementation Requirements: Optional
	      </t>
	      <t>
		Change Controller: IESG
	      </t>
	      <t>
		Specification Document(s): <xref target="pbcrypto-pbes2-jwe"/> of [[ this document ]]
	      </t>
	    </list>
	  </t>
	  <t>
	    <list style="symbols">
	      <t>
		Algorithm Name: <spanx style="verb">PBES2-HS384+A192KW</spanx>
	      </t>
	      <t>
		Algorithm Description: PBES2 with HMAC SHA-384
		and <spanx style="verb">A192KW</spanx> wrapping
	      </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
	      <t>
		Implementation Requirements: Optional
	      </t>
	      <t>
		Change Controller: IESG
	      </t>
	      <t>
		Specification Document(s): <xref target="pbcrypto-pbes2-jwe"/> of [[ this document ]]
	      </t>
	    </list>
	  </t>
	  <t>
	    <list style="symbols">
	      <t>
		Algorithm Name: <spanx style="verb">PBES2-HS512+A256KW</spanx>
	      </t>
	      <t>
		Algorithm Description: PBES2 with HMAC SHA-512
		and <spanx style="verb">A256KW</spanx> wrapping
	      </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
	      <t>
		Implementation Requirements: Optional
	      </t>
	      <t>
		Change Controller: IESG
	      </t>
	      <t>
		Specification Document(s): <xref target="pbcrypto-pbes2-jwe"/> of [[ this document ]]
	      </t>
	    </list>
	  </t>

	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A128CBC-HS256</spanx>
              </t>
              <t>
                Algorithm Description: 
		AES_128_CBC_HMAC_SHA_256 authenticated encryption algorithm
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">enc</spanx>
              </t>
              <t>
                Implementation Requirements: Required
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWEEncValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A192CBC-HS384</spanx>
              </t>
              <t>
                Algorithm Description: 
		AES_192_CBC_HMAC_SHA_384 authenticated encryption algorithm
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">enc</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWEEncValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A256CBC-HS512</spanx>
              </t>
              <t>
                Algorithm Description: 
		AES_256_CBC_HMAC_SHA_512 authenticated encryption algorithm
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">enc</spanx>
              </t>
              <t>
                Implementation Requirements: Required
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWEEncValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A128GCM</spanx>
              </t>
              <t>
                Algorithm Description: AES GCM using 128 bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">enc</spanx>
              </t>
              <t>
                Implementation Requirements: Recommended
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWEEncValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A192GCM</spanx>
              </t>
              <t>
                Algorithm Description: AES GCM using 192 bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">enc</spanx>
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWEEncValues" /> of [[ this document ]]
              </t>
            </list>
          </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A256GCM</spanx>
              </t>
              <t>
                Algorithm Description: AES GCM using 256 bit key
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">enc</spanx>
              </t>
              <t>
                Implementation Requirements: Recommended
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWEEncValues" /> of [[ this document ]]
              </t>
            </list>
          </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

      <section title="JWE Header Parameter Names Registration" anchor="HdrReg">
	<t>
	  This specification registers the Header Parameter names defined in
	  <xref target="ParamsECDHES"/>, <xref target="ParamsGCMKeyWrap"/>,
	  and <xref target="ParamsPBES2"/> in the IANA
	  JSON Web Signature and Encryption Header Parameters registry
	  defined in
	  <xref target="JWS" />.
	</t>

        <section title="Registry Contents" anchor="HdrContents">
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                Header Parameter Name: <spanx style="verb">epk</spanx>
              </t>
              <t>
                Header Parameter Description: Ephemeral Public Key
              </t>
	      <t>
		Header Parameter Usage Location(s): JWE
	      </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="epkDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
 	    <list style='symbols'>
              <t>
                Header Parameter Name: <spanx style="verb">apu</spanx>
              </t>
              <t>
                Header Parameter Description: Agreement PartyUInfo
              </t>
	      <t>
		Header Parameter Usage Location(s): JWE
	      </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="apuDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
 	    <list style='symbols'>
              <t>
                Header Parameter Name: <spanx style="verb">apv</spanx>
              </t>
              <t>
                Header Parameter Description: Agreement PartyVInfo
              </t>
	      <t>
		Header Parameter Usage Location(s): JWE
	      </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="apvDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
          <t>
            <list style='symbols'>
              <t>
                Header Parameter Name: <spanx style="verb">iv</spanx>
              </t>
              <t>
                Header Parameter Description: Initialization Vector
              </t>
	      <t>
		Header Parameter Usage Location(s): JWE
	      </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="ivDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
 	    <list style='symbols'>
              <t>
                Header Parameter Name: <spanx style="verb">tag</spanx>
              </t>
              <t>
                Header Parameter Description: Authentication Tag
              </t>
	      <t>
		Header Parameter Usage Location(s): JWE
	      </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="tagDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
          <t>
            <list style='symbols'>
              <t>
                Header Parameter Name: <spanx style="verb">p2s</spanx>
              </t>
              <t>
                Header Parameter Description: PBES2 salt
              </t>
	      <t>
		Header Parameter Usage Location(s): JWE
	      </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="p2sDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
 	    <list style='symbols'>
              <t>
                Header Parameter Name: <spanx style="verb">p2c</spanx>
              </t>
              <t>
                Header Parameter Description: PBES2 count
              </t>
	      <t>
		Header Parameter Usage Location(s): JWE
	      </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="p2cDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

      <section title="JSON Web Encryption Compression Algorithms Registry" anchor="ZipReg">
	<t>
	  This specification establishes the
	  IANA JSON Web Encryption Compression Algorithms registry
	  for JWE <spanx style="verb">zip</spanx> member values.
	  The registry records the compression algorithm value
	  and a reference to the specification that defines it.
	</t>

        <section title="Registration Template" anchor="ZipTemplate">
          <t>
            <list style='hanging'>
              <t hangText='Compression Algorithm Value:'>
                <vspace />
                The name requested (e.g., "example").
		Because a core goal of this specification is for the resulting
		representations to be compact, it is RECOMMENDED that the name be short
		-- not to exceed 8 characters without a compelling reason to do so.
		This name is case-sensitive.
		Names may not match other registered names in a case-insensitive manner
		unless the Designated Expert(s) state that there is a compelling reason
		to allow an exception in this particular case.
              </t>
              <t hangText='Compression Algorithm Description:'>
                <vspace />
                Brief description of the compression algorithm (e.g., "Example description").
              </t>
              <t hangText='Change Controller:'>
                <vspace />
                For Standards Track RFCs, state "IESG". For others, give the name of the
                responsible party. Other details (e.g., postal address, email address, home page
                URI) may also be included.
              </t>
              <t hangText='Specification Document(s):'>
                <vspace />
                Reference to the document(s) that specify the parameter, preferably including URI(s) that
                can be used to retrieve copies of the document(s). An indication of the relevant
                sections may also be included but is not required.
              </t>
            </list>
          </t>
        </section>

        <section title="Initial Registry Contents" anchor="ZipContents">
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                Compression Algorithm Value: <spanx style="verb">DEF</spanx>
              </t>
              <t>
                Compression Algorithm Description: DEFLATE
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): JSON Web Encryption (JWE) <xref target="JWE"/>
              </t>
            </list>
          </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

      <section title="JSON Web Key Types Registry" anchor="KeyTypesRegistry">
	<t>
	  This specification establishes the
	  IANA JSON Web Key Types registry
	  for values of the JWK
	  <spanx style="verb">kty</spanx> (key type) parameter.
	  The registry records the <spanx style="verb">kty</spanx> value,
	  implementation requirements,
	  and a reference to the specification that defines it.
	</t>
	<t>
	  The implementation requirements of a key type MAY be changed
	  over time by the Designated Experts(s) as the
	  cryptographic landscape evolves, for instance,
	  to change the status of a key type to Deprecated, or
	  to change the status of a key type from Optional
	  to Recommended+ or Required.
	  Changes of implementation requirements are only permitted
	  on a Specification Required basis, with the new specification
	  defining the revised implementation requirements level.
	</t>

        <section title="Registration Template" anchor="KtyTemplate">
          <t>
            <list style='hanging'>
              <t hangText='"kty" Parameter Value:'>
                <vspace />
                The name requested (e.g., "example").
		Because a core goal of this specification is for the resulting
		representations to be compact, it is RECOMMENDED that the name be short
		-- not to exceed 8 characters without a compelling reason to do so.
		This name is case-sensitive.
		Names may not match other registered names in a case-insensitive manner
		unless the Designated Expert(s) state that there is a compelling reason
		to allow an exception in this particular case.
              </t>
              <t hangText='Key Type Description:'>
                <vspace />
                Brief description of the Key Type (e.g., "Example description").
              </t>
              <t hangText='Change Controller:'>
                <vspace />
                For Standards Track RFCs, state "IESG". For others, give the name of the
                responsible party. Other details (e.g., postal address, email address, home page
                URI) may also be included.
              </t>
              <t hangText='Implementation Requirements:'>
                <vspace />
                The key type implementation requirements, which must be one the words
		Required, Recommended, Optional, or Deprecated.
		Optionally, the word can be followed by a "+" or "-".
		The use of "+" indicates that the requirement strength is likely
		to be increased in a future version of the specification. 
		The use of "-" indicates that the requirement strength is likely
		to be decreased in a future version of the specification.
              </t>	      
              <t hangText='Specification Document(s):'>
                <vspace />
                Reference to the document(s) that specify the parameter, preferably including URI(s) that
                can be used to retrieve copies of the document(s). An indication of the relevant
                sections may also be included but is not required.
              </t>
            </list>
          </t>
        </section>

        <section title="Initial Registry Contents" anchor="KtyContents">
	  <t>
	    This specification registers the values defined in
	    <xref target="JWKKtyValues" />.
	  </t>
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                "kty" Parameter Value: <spanx style="verb">EC</spanx>
              </t>
              <t>
                Key Type Description: Elliptic Curve
              </t>
              <t>
                Implementation Requirements: Recommended+
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWKEC" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                "kty" Parameter Value: <spanx style="verb">RSA</spanx>
              </t>
              <t>
                Key Type Description: RSA
              </t>
              <t>
                Implementation Requirements: Required
              </t>
	      <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWKRSA" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                "kty" Parameter Value: <spanx style="verb">oct</spanx>
              </t>
              <t>
                Key Type Description: Octet sequence
              </t>
              <t>
                Implementation Requirements: Required
              </t>
	      <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="JWKoct" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

      <section title="JSON Web Key Parameters Registration" anchor="KeyRegistration">
	<t>
	  This specification registers the parameter names defined in
	  Sections <xref target="JWKEC" format="counter"/>,
	  <xref target="JWKRSA" format="counter"/>, and
	  <xref target="JWKoct" format="counter"/> in the
	  IANA JSON Web Key Parameters registry
	  defined in
	  <xref target="JWK"/>.
	</t>

        <section title="Registry Contents" anchor="KeyContents">
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">crv</spanx>
              </t>
              <t>
                Parameter Description: Curve
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">EC</spanx>
	      </t>
	      <t>
                Parameter Information Class: Public
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="crvECDef" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">x</spanx>
              </t>
              <t>
                Parameter Description: X Coordinate
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">EC</spanx>
	      </t>
	      <t>
                Parameter Information Class: Public
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="xECDef" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">y</spanx>
              </t>
              <t>
                Parameter Description: Y Coordinate
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">EC</spanx>
	      </t>
	      <t>
                Parameter Information Class: Public
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="yECDef" /> of [[ this document ]]
              </t>
            </list>
	  </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">d</spanx>
              </t>
              <t>
                Parameter Description: ECC Private Key
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">EC</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="dECDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>

	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">n</spanx>
              </t>
              <t>
                Parameter Description: Modulus
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Public
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="nRSADef" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">e</spanx>
              </t>
              <t>
                Parameter Description: Exponent
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Public
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="eRSADef" /> of [[ this document ]]
              </t>
            </list>
	  </t>


	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">d</spanx>
              </t>
              <t>
                Parameter Description: Private Exponent
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="dRSADef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">p</spanx>
              </t>
              <t>
                Parameter Description: First Prime Factor
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="pRSADef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">q</spanx>
              </t>
              <t>
                Parameter Description: Second Prime Factor
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="qRSADef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">dp</spanx>
              </t>
              <t>
                Parameter Description: First Factor CRT Exponent
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="dpRSADef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">dq</spanx>
              </t>
              <t>
                Parameter Description: Second Factor CRT Exponent
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="dqRSADef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">qi</spanx>
              </t>
              <t>
                Parameter Description: First CRT Coefficient
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="qiRSADef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">oth</spanx>
              </t>
              <t>
                Parameter Description: Other Primes Info
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">RSA</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="othRSADef"/> of [[ this document ]]
              </t>
            </list>
	  </t>

	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">k</spanx>
              </t>
              <t>
                Parameter Description: Key Value
              </t>
              <t>
		Used with "kty" Value(s): <spanx style="verb">oct</spanx>
	      </t>
	      <t>
                Parameter Information Class: Private
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="kOctDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>

	</section>
	<?rfc subcompact="no"?>
      </section>

      <section title="JSON Web Key Elliptic Curve Registry" anchor="CurveReg">
	<t>
	  This specification establishes the
	  IANA JSON Web Key Elliptic Curve registry
	  for JWK <spanx style="verb">crv</spanx> member values.
	  The registry records the curve name,
	  implementation requirements,
	  and a reference to the specification that defines it.
	  This specification registers the parameter names defined in
	  <xref target="crvECDef" />.
	</t>
	<t>
	  The implementation requirements of a curve MAY be changed
	  over time by the Designated Experts(s) as the
	  cryptographic landscape evolves, for instance,
	  to change the status of a curve to Deprecated, or
	  to change the status of a curve from Optional
	  to Recommended+ or Required.
	  Changes of implementation requirements are only permitted
	  on a Specification Required basis, with the new specification
	  defining the revised implementation requirements level.
	</t>

        <section title="Registration Template" anchor="CurveTemplate">
          <t>
            <list style='hanging'>
              <t hangText='Curve Name:'>
                <vspace />
                The name requested (e.g., "example").
		Because a core goal of this specification is for the resulting
		representations to be compact, it is RECOMMENDED that the name be short
		-- not to exceed 8 characters without a compelling reason to do so.
		This name is case-sensitive.
		Names may not match other registered names in a case-insensitive manner
		unless the Designated Expert(s) state that there is a compelling reason
		to allow an exception in this particular case.
              </t>
              <t hangText='Curve Description:'>
                <vspace />
                Brief description of the curve (e.g., "Example description").
              </t>
              <t hangText='Implementation Requirements:'>
                <vspace />
                The curve implementation requirements, which must be one the words
		Required, Recommended, Optional, or Deprecated.
		Optionally, the word can be followed by a "+" or "-".
		The use of "+" indicates that the requirement strength is likely
		to be increased in a future version of the specification. 
		The use of "-" indicates that the requirement strength is likely
		to be decreased in a future version of the specification.
              </t>	      
              <t hangText='Change Controller:'>
                <vspace />
                For Standards Track RFCs, state "IESG". For others, give the name of the
                responsible party. Other details (e.g., postal address, email address, home page
                URI) may also be included.
              </t>
              <t hangText='Specification Document(s):'>
                <vspace />
                Reference to the document(s) that specify the parameter, preferably including URI(s) that
                can be used to retrieve copies of the document(s). An indication of the relevant
                sections may also be included but is not required.
              </t>
            </list>
          </t>
        </section>

        <section title="Initial Registry Contents" anchor="CurveContents">
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                Curve Name: <spanx style="verb">P-256</spanx>
              </t>
              <t>
                Curve Description: P-256 curve
              </t>
              <t>
                Implementation Requirements: Recommended+
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="crvECDef" /> of [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Curve Name: <spanx style="verb">P-384</spanx>
              </t>
              <t>
                Curve Description: P-384 curve
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="crvECDef" /> of [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Curve Name: <spanx style="verb">P-521</spanx>
              </t>
              <t>
                Curve Description: P-521 curve
              </t>
              <t>
                Implementation Requirements: Optional
              </t>
              <t>
                Change Controller: IESG
              </t>
              <t>
                Specification Document(s): <xref target="crvECDef" /> of [[ this document ]]
              </t>
            </list>
          </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

    </section>

    <section title="Security Considerations" anchor="Security">
      <t>
	All of the security issues faced by any cryptographic application
	must be faced by a JWS/JWE/JWK agent.  Among these issues are protecting
	the user's private and symmetric keys, preventing various attacks, and helping the
	user avoid mistakes such as inadvertently encrypting a message for
	the wrong recipient.  The entire list of security considerations is
	beyond the scope of this document, but some significant considerations are
	listed here.
      </t>
      <t>
	The security considerations in
	<xref target="AES"/>,
	<xref target="DSS"/>,
	<xref target="JWE"/>,
	<xref target="JWK"/>,
	<xref target="JWS"/>,
	<xref target="NIST.800-38A"/>,
	<xref target="NIST.800-38D"/>,
	<xref target="NIST.800-56A"/>,
	<xref target="RFC2104"/>,
	<xref target="RFC3394"/>,
	<xref target="RFC3447"/>,
	<xref target="RFC5116"/>,
	<xref target="RFC6090"/>, and
	<xref target="SHS"/> apply to this specification.
      </t>
      <t>
	Algorithms of matching strengths should be used together whenever possible.
	For instance, when AES Key Wrap is used with a given key size,
	using the same key size is recommended when AES GCM is also used.
      </t>

      <section title="Algorithms and Key Sizes will be Deprecated" anchor="CryptoAgility">
	<t>
	  Eventually the algorithms and/or key sizes currently described
	  in this specification will no longer be considered
	  sufficiently secure and will be deprecated.  Therefore,
	  implementers and deployments must be prepared for this
	  eventuality.
	</t>
      </section>

      <section title="Key Lifetimes" anchor="KeyLifetimes">
	<t>
	  Many algorithms have associated security considerations related to
	  key lifetimes and/or the number of times that a key may be used.
	  Those security considerations continue to apply when using
	  those algorithms with JOSE data structures.
	</t>
      </section>

      <section title="RSAES-PKCS1-v1_5 Security Considerations" anchor="RSASecCon">
	<t>
	  While Section 8 of RFC 3447 <xref target="RFC3447"/>
	  explicitly calls for people not to adopt RSASSA-PKCS-v1_5 for new
	  applications and instead requests that people transition to
	  RSASSA-PSS, this specification does include RSASSA-PKCS-v1_5, for
	  interoperability reasons, because it commonly implemented.
	</t>
	<t>
	  Keys used with RSAES-PKCS1-v1_5 must follow the constraints in
	  Section 7.2 of RFC 3447 <xref target="RFC3447"/>.  In particular, keys with
	  a low public key exponent value must not be used.
	</t>
      </section>

      <section title="AES GCM Security Considerations" anchor="GCMSecCon">
	<t>
	  Keys used with AES GCM must follow the constraints in
	  Section 8.3 of <xref target="NIST.800-38D"/>, which states:
	  "The total number of invocations of the authenticated
	  encryption function shall not exceed 2^32, including all IV
	  lengths and all instances of the authenticated encryption
	  function with the given key".
	  In accordance with this rule, AES GCM MUST NOT be used
	  with the same key value
	  more than 2^32 times.
	</t>
	<t>
	  An Initialization Vector value MUST never be used multiple times
	  with the same AES GCM key.
	  One way to prevent this is to store a counter with the key
	  and increment it with every use.
	  The counter can also be used to prevent exceeding the 2^32 limit above.
	</t>
	<t>
	  This security consideration does not apply to the
	  composite AES-CBC HMAC SHA-2 or AES Key Wrap algorithms.
	</t>
      </section>

      <section title="Plaintext JWS Security Considerations" anchor="NoneSecCon">
	<t>
	  Plaintext JWSs (JWSs that use the <spanx style="verb">alg</spanx>
	  value <spanx style="verb">none</spanx>) provide no integrity protection.
	  Thus, they must only be used in contexts where the payload is secured by
	  means other than a digital signature or MAC value, or need not be secured.
	</t>
	<t>
	  Implementations that support plaintext JWS objects
	  MUST NOT accept such objects as valid unless the application
	  specifies that it is acceptable for a specific object to not be
	  integrity-protected.
	  Implementations MUST NOT accept plaintext JWS objects by default.
	  For example, the "verify" method of a hypothetical JWS software library
	  might have a Boolean "acceptUnsigned" parameter
	  that indicates <spanx style="verb">none</spanx> is
	  an acceptable <spanx style="verb">alg</spanx> value.
	  As another example, the "verify" method might take a list of algorithms
	  that are acceptable to the application as a parameter and would reject
	  plaintext JWS values if <spanx style="verb">none</spanx> is not in that list.
	</t>
	<t>
	  In order to mitigate downgrade attacks, applications MUST NOT signal
	  acceptance of plaintext JWS objects at a global level,
	  and SHOULD signal acceptance on a per-object basis.
	  For example, suppose an application accepts JWS objects over two channels,
	  (1) HTTP and (2) HTTPS with client authentication.
	  It requires a JWS signature on objects received over HTTP,
	  but accepts plaintext JWS objects over HTTPS.
	  If the application were to globally indicate that
	  <spanx style="verb">none</spanx> is acceptable, then an attacker could
	  provide it with an unsigned object over HTTP and still have
	  that object successfully validate.
	  Instead, the application needs to indicate acceptance of
	  <spanx style="verb">none</spanx> for each object received over HTTPS
	  (e.g., by setting "acceptUnsigned" to "true" for the first hypothetical
	  JWS software library above), but not for each object received over HTTP.
	</t>
      </section>

      <section title="Differences between Digital Signatures and MACs"
	       anchor="SignaturesAndMacs">
	<t>
	  While in many cases, MACs and digital signatures can be used for
	  integrity checking, there are some significant differences between
	  the security properties that each of them provides.
	  These need to be taken into consideration when designing protocols and
	  selecting the algorithms to be used in protocols.
	</t>
	<t>
	  Both signatures and MACs provide for integrity checking -- verifying that
	  the message has not been modified since the integrity value was computed.
	  However, MACs provide for origination identification only under
	  specific circumstances.
	  It can normally be assumed that a private key used for a signature
	  is only in the hands of a single entity
	  (although perhaps a distributed entity, in the case of replicated servers),
	  however a MAC key needs to be in the hands of all the entities that use it
	  for integrity computation and checking.
	  This means that origination can only be determined if a MAC key is known only
	  to two entities and the receiver knows that it did not create the message.
	  MAC validation cannot be used to prove origination to a third party.
	</t>
      </section>

      <section title="Denial of Service Attacks" anchor="DOSAttacks">
	<t>
	  Receiving agents that validate signatures and sending agents that
	  encrypt messages need to be cautious of cryptographic processing
	  usage when validating signatures and encrypting messages using keys
	  larger than those mandated in this specification.  An attacker could
	  send certificates with keys that would result in excessive
	  cryptographic processing, for example, keys larger than those
	  mandated in this specification, which could swamp the processing
	  element.  Agents that use such keys without first validating the
	  certificate to a trust anchor are advised to have some sort of
	  cryptographic resource management system to prevent such attacks.
	</t>
      </section>

      <section title="Reusing Key Material when Encrypting Keys" anchor="security-reuse">
	<t>
	  It is NOT RECOMMENDED to reuse the same key material
	  (Key Encryption Key, Content Encryption Key, Initialization Vector, etc.)
	  to encrypt multiple JWK or JWK Set objects, or to encrypt
	  the same JWK or JWK Set object multiple times.
	  One suggestion for preventing re-use is to always generate
	  a new set key material for each encryption operation,
	  based on the considerations noted in this document
	  as well as from <xref target="RFC4086"/>.
	</t>
      </section>

      <section title="Password Considerations" anchor="security-pwd">
	<t>
	  Passwords are vulnerable to
	  a number of attacks.  To help mitigate some of these
	  limitations, this document applies principles from
	  <xref target="RFC2898"/> to derive cryptographic keys from
	  user-supplied passwords.
	</t>
	<t>
	  However, the strength of the password still has a
	  significant impact. A high-entropy password has greater
	  resistance to dictionary attacks.
	  <xref target="NIST-800-63-1"/> contains guidelines for
	  estimating password entropy, which can help applications and
	  users generate stronger passwords.
	</t>
	<t>
	  An ideal password is one that is as large as (or larger than)
	  the derived key length. However, passwords larger than
	  a certain algorithm-specific size are first
	  hashed, which reduces an attacker's effective search space
	  to the length of the hash algorithm.
	  It is RECOMMENDED that a password used for
	  <spanx style="verb">PBES2-HS256+A128KW</spanx> be
	  no shorter than 16 octets and no longer than 128 octets and
	  a password used for <spanx style="verb">PBES2-HS512+A256KW</spanx> be
	  no shorter than 32 octets and no longer than 128 octets long.
	</t>
	<t>
	  Still, care needs to be taken in where and how
	  password-based encryption is used.  These algorithms can still be
	  susceptible to dictionary-based attacks if the iteration count is too small;
	  this is of particular concern if these algorithms are used to protect data
	  that an attacker can have indefinite number of attempts to circumvent
	  the protection, such as protected data stored on a file system.
	</t>
      </section>

    </section>

    <section title="Internationalization Considerations" anchor="i18n">
      <t>
	Passwords obtained from users are likely to require
	preparation and normalization to account for differences of
	octet sequences generated by different input devices, locales, etc.
	It is RECOMMENDED that applications to perform the steps
	outlined in <xref target="I-D.melnikov-precis-saslprepbis"/>
	to prepare a password supplied directly by a user
	before performing key derivation and encryption.
      </t>
    </section>

  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2104.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2898.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3394.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3629.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4086.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4868.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5116.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5226.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6090.xml' ?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-melnikov-precis-saslprepbis-04.xml' ?>

      <reference anchor="SHS">
        <front>
          <title>Secure Hash Standard (SHS)</title>

          <author>
            <organization>National Institute of Standards and
            Technology</organization>
          </author>

          <date month="October" year="2008" />
        </front>
        <seriesInfo name="FIPS" value="PUB 180-3" />
        <format target="http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf" type="PDF" />
      </reference>

      <reference anchor="DSS">
        <front>
          <title>Digital Signature Standard (DSS)</title>

          <author>
            <organization>National Institute of Standards and
            Technology</organization>
          </author>

          <date month="July" year="2013" />
        </front>
        <seriesInfo name="FIPS" value="PUB 186-4" />
        <format target="http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf" type="PDF" />
      </reference>

      <reference anchor="AES">
        <front>
          <title>Advanced Encryption Standard (AES)</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)
            </organization>
          </author>
          <date month="November" year="2001" />
        </front>
        <seriesInfo name="FIPS" value="PUB 197" />
	<format target="http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf" type="PDF" />
      </reference>

      <reference anchor="NIST.800-38A">
        <front>
          <title>Recommendation for Block Cipher Modes of Operation</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)
            </organization>
          </author>
          <date month="December" year="2001" />
        </front>
        <seriesInfo name="NIST" value="PUB 800-38A" />
	<format target="http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf" type="PDF" />
      </reference>

      <reference anchor="NIST.800-38D">
        <front>
          <title>Recommendation for Block Cipher Modes of Operation:
	  Galois/Counter Mode (GCM) and GMAC</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)
            </organization>
          </author>
          <date month="December" year="2001" />
        </front>
        <seriesInfo name="NIST" value="PUB 800-38D" />
	<format target="http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf" type="PDF" />
      </reference>

      <reference anchor="NIST.800-56A">
        <front>
          <title>Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)
            </organization>
          </author>
          <date month="May" year="2013" />
        </front>
        <seriesInfo name="NIST" value="Special Publication 800-56A, Revision 2" />
	<format target="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar2.pdf" type="PDF" />
      </reference>

      <reference anchor="JWS">
        <front>
          <title>JSON Web Signature (JWS)</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization abbrev="Ping Identity">Ping Identity</organization>
	    <address>
	      <email>ve7jtb@ve7jtb.com</email>
	    </address>
	  </author>

	  <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
	    <organization abbrev="NRI">Nomura Research Institute</organization>
	    <address>
	      <email>n-sakimura@nri.co.jp</email>
	    </address>
	  </author>

	  <date day="12" month="November" year="2013" />
        </front>
        <seriesInfo value="draft-ietf-jose-json-web-signature" name="Internet-Draft"/>
	<format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-signature" type="HTML" />
      </reference>

      <reference anchor="JWE">
        <front>
          <title>JSON Web Encryption (JWE)</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>

	  <author fullname="Eric Rescorla" initials="E." surname="Rescorla">
	    <organization abbrev="RTFM">RTFM, Inc.</organization>
	    <address>
	      <email>ekr@rtfm.com</email>
	    </address>
	  </author>

	  <author fullname="Joe Hildebrand" initials="J." surname="Hildebrand">
	    <organization abbrev="Cisco">Cisco Systems, Inc.</organization>
	    <address>
	      <email>jhildebr@cisco.com</email>
	    </address>
	  </author>

	  <date day="12" month="November" year="2013" />
        </front>
        <seriesInfo value="draft-ietf-jose-json-web-encryption" name="Internet-Draft"/>
	<format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-encryption" type="HTML" />
      </reference>

      <reference anchor="JWK">
        <front>
	  <title>JSON Web Key (JWK)</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>

	  <date day="12" month="November" year="2013" />
        </front>
        <seriesInfo value="draft-ietf-jose-json-web-key" name="Internet-Draft"/>
	<format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-key" type="HTML" />
      </reference>

      <reference anchor="USASCII">
	<front>
	  <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange</title>
	  <author>
	    <organization>American National Standards Institute</organization>
	  </author>
	  <date year="1986"/>
	</front>
	<seriesInfo name="ANSI" value="X3.4"/>
      </reference>

      <reference anchor="SEC1">  
        <front>  
          <title>SEC 1: Elliptic Curve Cryptography</title>  
          <author>  
            <organization>Standards for Efficient Cryptography Group</organization>  
          </author>  
          <date month="May" year="2009" />  
        </front>  
        <format target="http://www.secg.org/collateral/sec1_final.pdf" type="PDF" />  
      </reference>  

    </references>

    <references title="Informative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2631.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3275.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml' ?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml4/reference.W3C.CR-xmldsig-core2-20120124.xml" ?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-xmlenc-core-20021210.xml" ?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml4/reference.W3C.CR-xmlenc-core1-20120313.xml" ?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-rescorla-jsms-00.xml" ?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-mcgrew-aead-aes-cbc-hmac-sha2-02.xml" ?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-miller-jose-jwe-protected-jwk-02.xml" ?>

      <reference anchor="MagicSignatures">
        <front>
          <title>Magic Signatures</title>

          <author fullname="John Panzer (editor)" initials="J." surname="Panzer (editor)"></author>

          <author fullname="Ben Laurie" initials="B." surname="Laurie"></author>

          <author fullname="Dirk Balfanz" initials="D." surname="Balfanz"></author>

          <date day="7" month="January" year="2011" />
        </front>
        <format target="http://salmon-protocol.googlecode.com/svn/trunk/draft-panzer-magicsig-01.html" type="HTML" />
      </reference>

      <reference anchor="JSS">
        <front>
          <title>JSON Simple Sign</title>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization>independent</organization>
	  </author>

	  <author fullname="Nat Sakimura (editor)" initials="N. " surname="Sakimura (editor)">
	    <organization abbrev="NRI">Nomura Research Institute</organization>
	  </author>

          <date month="September" year="2010" />
        </front>
        <format target="http://jsonenc.info/jss/1.0/" type="HTML" />
      </reference>

      <reference anchor="JSE">
        <front>
          <title>JSON Simple Encryption</title>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization>independent</organization>
	  </author>

	  <author fullname="Nat Sakimura (editor)" initials="N. " surname="Sakimura (editor)">
	    <organization abbrev="NRI">Nomura Research Institute</organization>
	  </author>

          <date month="September" year="2010" />
        </front>
        <format target="http://jsonenc.info/enc/1.0/" type="HTML" />
      </reference>

      <reference anchor="CanvasApp">
        <front>
          <title>Canvas Applications</title>

          <author fullname="Facebook" surname="Facebook"></author>

          <date year="2010" />
        </front>
        <format target="http://developers.facebook.com/docs/authentication/canvas" type="HTML" />
      </reference>

      <reference anchor="JCA">
        <front>
          <title>Java Cryptography Architecture</title>

	  <author fullname="Oracle" surname="Oracle">
	  </author>
 
         <date year="2013" />
        </front>
        <format target="http://docs.oracle.com/javase/7/docs/technotes/guides/security/crypto/CryptoSpec.html" type="HTML" />
      </reference>

      <reference anchor="NIST-800-63-1">
        <front>
          <title>Electronic Authentication Guideline</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)</organization>
          </author>
          <date month="December" year="2011"/>
        </front>
        <seriesInfo name="NIST" value="800-63-1"/>
        <format target="http://csrc.nist.gov/publications/nistpubs/800-63-1/SP-800-63-1.pdf" type="PDF"/>
      </reference>

    </references>

    <section title="Algorithm Identifier Cross-Reference" anchor="AlgXref">

      <t>
	This appendix contains tables cross-referencing the
	cryptographic algorithm identifier
	values defined in this specification with the equivalent identifiers
	used by other standards and software packages.
	See <xref target="RFC3275">XML DSIG</xref>,
	<xref target="W3C.CR-xmldsig-core2-20120124">XML DSIG 2.0</xref>,
	<xref target="W3C.REC-xmlenc-core-20021210">XML Encryption</xref>,
	<xref target="W3C.CR-xmlenc-core1-20120313">XML Encryption 1.1</xref>,
	and <xref target="JCA">Java Cryptography Architecture</xref>
	for more information about the names defined by those
	documents.
      </t>

      <section title="Digital Signature/MAC Algorithm Identifier Cross-Reference"
	       anchor="SigAlgXref">
	<t>
	  This section contains a table cross-referencing the
	  JWS digital signature and MAC <spanx style="verb">alg</spanx> (algorithm)
	  values defined in this specification with the equivalent identifiers
	  used by other standards and software packages.
	</t>
	<texttable>

	  <!-- <ttcol align="left">Algorithm</ttcol> -->
	  <ttcol align="left">JWS</ttcol>
	  <ttcol align="left">XML DSIG</ttcol>
	  <ttcol align="left">JCA</ttcol>
	  <ttcol align="left">OID</ttcol>

	  <!-- <c>HMAC using SHA-256</c> -->
	  <c>HS256</c>
	  <c>http://www.w3.org/2001/04/xmldsig-more#hmac-sha256</c>
	  <c>HmacSHA256</c>
	  <c>1.2.840.113549.2.9</c>

	  <!-- <c>HMAC using SHA-384</c> -->
	  <c>HS384</c>
	  <c>http://www.w3.org/2001/04/xmldsig-more#hmac-sha384</c>
	  <c>HmacSHA384</c>
	  <c>1.2.840.113549.2.10</c>

	  <!-- <c>HMAC using SHA-512</c> -->
	  <c>HS512</c>
	  <c>http://www.w3.org/2001/04/xmldsig-more#hmac-sha512</c>
	  <c>HmacSHA512</c>
	  <c>1.2.840.113549.2.11</c>

	  <!-- <c>RSASSA-PKCS-v1_5 using SHA-256</c> -->
	  <c>RS256</c>
	  <c>http://www.w3.org/2001/04/xmldsig-more#rsa-sha256</c>
	  <c>SHA256withRSA</c>
	  <c>1.2.840.113549.1.1.11</c>

	  <!-- <c>RSASSA-PKCS-v1_5 using SHA-384</c> -->
	  <c>RS384</c>
	  <c>http://www.w3.org/2001/04/xmldsig-more#rsa-sha384</c>
	  <c>SHA384withRSA</c>
	  <c>1.2.840.113549.1.1.12</c>

	  <!-- <c>RSASSA-PKCS-v1_5 using SHA-512</c> -->
	  <c>RS512</c>
	  <c>http://www.w3.org/2001/04/xmldsig-more#rsa-sha512</c>
	  <c>SHA512withRSA</c>
	  <c>1.2.840.113549.1.1.13</c>

	  <!-- <c>ECDSA using P-256 and SHA-256</c> -->
	  <c>ES256</c>
	  <c>http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256</c>
	  <c>SHA256withECDSA</c>
	  <c>1.2.840.10045.4.3.2</c>

	  <!-- <c>ECDSA using P-384 and SHA-384</c> -->
	  <c>ES384</c>
	  <c>http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384</c>
	  <c>SHA384withECDSA</c>
	  <c>1.2.840.10045.4.3.3</c>

	  <!-- <c>ECDSA using P-521 and SHA-512</c> -->
	  <c>ES512</c>
	  <c>http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512</c>
	  <c>SHA512withECDSA</c>
	  <c>1.2.840.10045.4.3.4</c>

	  <!-- <c>RSASSA-PSS using SHA-256 and MGF1 with SHA-256</c> -->
	  <c>PS256</c>
	  <c>http://www.w3.org/2007/05/xmldsig-more#sha256-rsa-MGF1</c>
	  <c>SHA256withRSAandMGF1</c>
	  <c>1.2.840.113549.1.1.10</c>

	  <!-- <c>RSASSA-PSS using SHA-384 and MGF1 with SHA-384</c> -->
	  <c>PS384</c>
	  <c>http://www.w3.org/2007/05/xmldsig-more#sha384-rsa-MGF1</c>
	  <c>SHA384withRSAandMGF1</c>
	  <c>1.2.840.113549.1.1.10</c>

	  <!-- <c>RSASSA-PSS using SHA-512 and MGF1 with SHA-512</c> -->
	  <c>PS512</c>
	  <c>http://www.w3.org/2007/05/xmldsig-more#sha512-rsa-MGF1</c>
	  <c>SHA512withRSAandMGF1</c>
	  <c>1.2.840.113549.1.1.10</c>

	</texttable>
      </section>

      <section title="Key Management Algorithm Identifier Cross-Reference"
	       anchor="EncAlgXref">
	<t>
	  This section contains a table cross-referencing the
	  JWE <spanx style="verb">alg</spanx> (algorithm)
	  values defined in this specification with the equivalent identifiers
	  used by other standards and software packages.
	</t>
	<texttable>

	  <!-- <ttcol align="left">Algorithm</ttcol> -->
	  <ttcol align="left">JWE</ttcol>
	  <ttcol align="left">XML ENC</ttcol>
	  <ttcol align="left">JCA</ttcol>
	  <ttcol align="left">OID</ttcol>

	  <!-- <c>RSAES-PKCS1-V1_5</c> -->
	  <c>RSA1_5</c>
	  <c>http://www.w3.org/2001/04/xmlenc#rsa-1_5</c>
	  <c>RSA/ECB/PKCS1Padding</c>
	  <!-- RSA/ECB/PKCS1Padding or RSA/None/PKCS1Padding ? -->
	  <c>1.2.840.113549.1.1.1</c>

	  <!-- <c>RSAES using OAEP</c> -->
	  <c>RSA-OAEP</c>
	  <c>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</c>
	  <c>RSA/ECB/OAEPWithSHA-1AndMGF1Padding</c>
	  <!-- RSA/ECB/OAEPWithSHA-1AndMGF1Padding or RSA/None/OAEPWithSHA-1AndMGF1Padding ? -->
	  <c>1.2.840.113549.1.1.7</c>

	  <!-- <c>Elliptic Curve Diffie-Hellman Ephemeral Static</c> -->
	  <c>ECDH-ES</c>
	  <c>http://www.w3.org/2009/xmlenc11#ECDH-ES</c>
	  <c></c>
	  <c>1.3.132.1.12</c>

	  <!-- <c>AES Key Wrap using 128 bit key</c> -->
	  <c>A128KW</c>
	  <c>http://www.w3.org/2001/04/xmlenc#kw-aes128</c>
	  <c></c>
	  <c>2.16.840.1.101.3.4.1.5</c>

	  <!-- <c>AES Key Wrap using 192 bit key</c> -->
	  <c>A192KW</c>
	  <c>http://www.w3.org/2001/04/xmlenc#kw-aes192</c>
	  <c></c>
	  <c>2.16.840.1.101.3.4.1.25</c>

	  <!-- <c>AES Key Wrap using 256 bit key</c> -->
	  <c>A256KW</c>
	  <c>http://www.w3.org/2001/04/xmlenc#kw-aes256</c>
	  <c></c>
	  <c>2.16.840.1.101.3.4.1.45</c>

	</texttable>
      </section>

      <section title="Content Encryption Algorithm Identifier Cross-Reference"
	       anchor="EncEncXref">
	<t>
	  This section contains a table cross-referencing the
	  JWE <spanx style="verb">enc</spanx> (encryption method)
	  values defined in this specification with the equivalent identifiers
	  used by other standards and software packages.
	</t>
	<t>
	  For the composite algorithms <spanx style="verb">A128CBC-HS256</spanx>,
	  <spanx style="verb">A192CBC-HS384</spanx>,
	  and <spanx style="verb">A256CBC-HS512</spanx>, the corresponding AES CBC
	  algorithm identifiers are listed.
	</t>
	<texttable>

	  <!-- <ttcol align="left">Algorithm</ttcol> -->
	  <ttcol align="left">JWE</ttcol>
	  <ttcol align="left">XML ENC</ttcol>
	  <ttcol align="left">JCA</ttcol>
	  <ttcol align="left">OID</ttcol>

	  <!-- <c>AES CBC with PKCS #5 padding using 128 bit key</c> -->
	  <c>A128CBC-HS256</c>
	  <c>http://www.w3.org/2001/04/xmlenc#aes128-cbc</c>
	  <c>AES/CBC/PKCS5Padding</c>
	  <c>2.16.840.1.101.3.4.1.2</c>

	  <!-- <c>AES CBC with PKCS #5 padding using 192 bit key</c> -->
	  <c>A192CBC-HS384</c>
	  <c>http://www.w3.org/2001/04/xmlenc#aes192-cbc</c>
	  <c>AES/CBC/PKCS5Padding</c>
	  <c>2.16.840.1.101.3.4.1.22</c>

	  <!-- <c>AES CBC with PKCS #5 padding using 256 bit key</c> -->
	  <c>A256CBC-HS512</c>
	  <c>http://www.w3.org/2001/04/xmlenc#aes256-cbc</c>
	  <c>AES/CBC/PKCS5Padding</c>
	  <c>2.16.840.1.101.3.4.1.42</c>

	  <!-- <c>AES GCM using 128 bit key</c> -->
	  <c>A128GCM</c>
	  <c>http://www.w3.org/2009/xmlenc11#aes128-gcm</c>
	  <c>AES/GCM/NoPadding</c>
	  <c>2.16.840.1.101.3.4.1.6</c>

	  <!-- <c>AES GCM using 192 bit key</c> -->
	  <c>A192GCM</c>
	  <c>http://www.w3.org/2009/xmlenc11#aes192-gcm</c>
	  <c>AES/GCM/NoPadding</c>
	  <c>2.16.840.1.101.3.4.1.26</c>

	  <!-- <c>AES GCM using 256 bit key</c> -->
	  <c>A256GCM</c>
	  <c>http://www.w3.org/2009/xmlenc11#aes256-gcm</c>
	  <c>AES/GCM/NoPadding</c>
	  <c>2.16.840.1.101.3.4.1.46</c>

	</texttable>
      </section>

    </section>

    <section title="Test Cases for AES_CBC_HMAC_SHA2 Algorithms"
	     anchor="CBC_HMAC_TestCases">
      <t>
	The following test cases can be used to validate implementations of
	the AES_CBC_HMAC_SHA2 algorithms defined in <xref target="AES_CBC_HMAC_SHA2"/>.
	They are also intended to correspond to test cases that may appear in a
	future version of <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2"/>,
	demonstrating that the cryptographic computations performed are the same.
      </t>
      <t>
	The variable names are those defined in <xref target="AES_CBC_HMAC_SHA2"/>.
	All values are hexadecimal.
      </t>

      <section title="Test Cases for AES_128_CBC_HMAC_SHA_256"
	     anchor="CBC_HMAC_256_TestCases">
	<figure>
	  <artwork><![CDATA[
AES_128_CBC_HMAC_SHA_256

  K =       00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f

  MAC_KEY = 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f

  ENC_KEY = 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f

  P =       41 20 63 69 70 68 65 72 20 73 79 73 74 65 6d 20
            6d 75 73 74 20 6e 6f 74 20 62 65 20 72 65 71 75
            69 72 65 64 20 74 6f 20 62 65 20 73 65 63 72 65
            74 2c 20 61 6e 64 20 69 74 20 6d 75 73 74 20 62
            65 20 61 62 6c 65 20 74 6f 20 66 61 6c 6c 20 69
            6e 74 6f 20 74 68 65 20 68 61 6e 64 73 20 6f 66
            20 74 68 65 20 65 6e 65 6d 79 20 77 69 74 68 6f
            75 74 20 69 6e 63 6f 6e 76 65 6e 69 65 6e 63 65

  IV =      1a f3 8c 2d c2 b9 6f fd d8 66 94 09 23 41 bc 04

  A =       54 68 65 20 73 65 63 6f 6e 64 20 70 72 69 6e 63
            69 70 6c 65 20 6f 66 20 41 75 67 75 73 74 65 20
            4b 65 72 63 6b 68 6f 66 66 73

  AL =      00 00 00 00 00 00 01 50

  E =       c8 0e df a3 2d df 39 d5 ef 00 c0 b4 68 83 42 79
            a2 e4 6a 1b 80 49 f7 92 f7 6b fe 54 b9 03 a9 c9
            a9 4a c9 b4 7a d2 65 5c 5f 10 f9 ae f7 14 27 e2
            fc 6f 9b 3f 39 9a 22 14 89 f1 63 62 c7 03 23 36
            09 d4 5a c6 98 64 e3 32 1c f8 29 35 ac 40 96 c8
            6e 13 33 14 c5 40 19 e8 ca 79 80 df a4 b9 cf 1b
            38 4c 48 6f 3a 54 c5 10 78 15 8e e5 d7 9d e5 9f
            bd 34 d8 48 b3 d6 95 50 a6 76 46 34 44 27 ad e5
            4b 88 51 ff b5 98 f7 f8 00 74 b9 47 3c 82 e2 db

  M =       65 2c 3f a3 6b 0a 7c 5b 32 19 fa b3 a3 0b c1 c4
            e6 e5 45 82 47 65 15 f0 ad 9f 75 a2 b7 1c 73 ef

  T =       65 2c 3f a3 6b 0a 7c 5b 32 19 fa b3 a3 0b c1 c4
]]></artwork>
	</figure>
      </section>

      <section title="Test Cases for AES_192_CBC_HMAC_SHA_384"
	     anchor="CBC_HMAC_384_TestCases">
	<figure>
	  <artwork><![CDATA[
  K =       00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
            20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f

  MAC_KEY = 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17

  ENC_KEY = 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27
            28 29 2a 2b 2c 2d 2e 2f

  P =       41 20 63 69 70 68 65 72 20 73 79 73 74 65 6d 20
            6d 75 73 74 20 6e 6f 74 20 62 65 20 72 65 71 75
            69 72 65 64 20 74 6f 20 62 65 20 73 65 63 72 65
            74 2c 20 61 6e 64 20 69 74 20 6d 75 73 74 20 62
            65 20 61 62 6c 65 20 74 6f 20 66 61 6c 6c 20 69
            6e 74 6f 20 74 68 65 20 68 61 6e 64 73 20 6f 66
            20 74 68 65 20 65 6e 65 6d 79 20 77 69 74 68 6f
            75 74 20 69 6e 63 6f 6e 76 65 6e 69 65 6e 63 65

  IV =      1a f3 8c 2d c2 b9 6f fd d8 66 94 09 23 41 bc 04

  A =       54 68 65 20 73 65 63 6f 6e 64 20 70 72 69 6e 63
            69 70 6c 65 20 6f 66 20 41 75 67 75 73 74 65 20
            4b 65 72 63 6b 68 6f 66 66 73

  AL =      00 00 00 00 00 00 01 50

  E =       ea 65 da 6b 59 e6 1e db 41 9b e6 2d 19 71 2a e5
            d3 03 ee b5 00 52 d0 df d6 69 7f 77 22 4c 8e db
            00 0d 27 9b dc 14 c1 07 26 54 bd 30 94 42 30 c6
            57 be d4 ca 0c 9f 4a 84 66 f2 2b 22 6d 17 46 21
            4b f8 cf c2 40 0a dd 9f 51 26 e4 79 66 3f c9 0b
            3b ed 78 7a 2f 0f fc bf 39 04 be 2a 64 1d 5c 21
            05 bf e5 91 ba e2 3b 1d 74 49 e5 32 ee f6 0a 9a
            c8 bb 6c 6b 01 d3 5d 49 78 7b cd 57 ef 48 49 27
            f2 80 ad c9 1a c0 c4 e7 9c 7b 11 ef c6 00 54 e3

  M =       84 90 ac 0e 58 94 9b fe 51 87 5d 73 3f 93 ac 20
            75 16 80 39 cc c7 33 d7 45 94 f8 86 b3 fa af d4
            86 f2 5c 71 31 e3 28 1e 36 c7 a2 d1 30 af de 57

  T =       84 90 ac 0e 58 94 9b fe 51 87 5d 73 3f 93 ac 20
            75 16 80 39 cc c7 33 d7
]]></artwork>
	</figure>
      </section>


      <section title="Test Cases for AES_256_CBC_HMAC_SHA_512"
	     anchor="CBC_HMAC_512_TestCases">
	<figure>
	  <artwork><![CDATA[
  K =       00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
            20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
            30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f

  MAC_KEY = 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f

  ENC_KEY = 20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
            30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f

  P =       41 20 63 69 70 68 65 72 20 73 79 73 74 65 6d 20
            6d 75 73 74 20 6e 6f 74 20 62 65 20 72 65 71 75
            69 72 65 64 20 74 6f 20 62 65 20 73 65 63 72 65
            74 2c 20 61 6e 64 20 69 74 20 6d 75 73 74 20 62
            65 20 61 62 6c 65 20 74 6f 20 66 61 6c 6c 20 69
            6e 74 6f 20 74 68 65 20 68 61 6e 64 73 20 6f 66
            20 74 68 65 20 65 6e 65 6d 79 20 77 69 74 68 6f
            75 74 20 69 6e 63 6f 6e 76 65 6e 69 65 6e 63 65

  IV =      1a f3 8c 2d c2 b9 6f fd d8 66 94 09 23 41 bc 04

  A =       54 68 65 20 73 65 63 6f 6e 64 20 70 72 69 6e 63
            69 70 6c 65 20 6f 66 20 41 75 67 75 73 74 65 20
            4b 65 72 63 6b 68 6f 66 66 73

  AL =      00 00 00 00 00 00 01 50

  E =       4a ff aa ad b7 8c 31 c5 da 4b 1b 59 0d 10 ff bd
            3d d8 d5 d3 02 42 35 26 91 2d a0 37 ec bc c7 bd
            82 2c 30 1d d6 7c 37 3b cc b5 84 ad 3e 92 79 c2
            e6 d1 2a 13 74 b7 7f 07 75 53 df 82 94 10 44 6b
            36 eb d9 70 66 29 6a e6 42 7e a7 5c 2e 08 46 a1
            1a 09 cc f5 37 0d c8 0b fe cb ad 28 c7 3f 09 b3
            a3 b7 5e 66 2a 25 94 41 0a e4 96 b2 e2 e6 60 9e
            31 e6 e0 2c c8 37 f0 53 d2 1f 37 ff 4f 51 95 0b
            be 26 38 d0 9d d7 a4 93 09 30 80 6d 07 03 b1 f6

  M =       4d d3 b4 c0 88 a7 f4 5c 21 68 39 64 5b 20 12 bf
            2e 62 69 a8 c5 6a 81 6d bc 1b 26 77 61 95 5b c5
            fd 30 a5 65 c6 16 ff b2 f3 64 ba ec e6 8f c4 07
            53 bc fc 02 5d de 36 93 75 4a a1 f5 c3 37 3b 9c

  T =       4d d3 b4 c0 88 a7 f4 5c 21 68 39 64 5b 20 12 bf
            2e 62 69 a8 c5 6a 81 6d bc 1b 26 77 61 95 5b c5
]]></artwork>
	</figure>
      </section>

    </section>

    <section title='Example ECDH-ES Key Agreement Computation' anchor="ECDHESExample">
      <t>
	This example uses ECDH-ES Key Agreement and the Concat KDF to derive the
	Content Encryption Key (CEK) in the manner described in
	<xref target="ECDHES"/>.
	In this example, the ECDH-ES Direct Key Agreement mode
	(<spanx style="verb">alg</spanx> value <spanx style="verb">ECDH-ES</spanx>)
	is used to produce an agreed upon key for AES GCM with a 128 bit key
	(<spanx style="verb">enc</spanx> value <spanx style="verb">A128GCM</spanx>).
      </t>
      <t>
	In this example, a sender Alice is encrypting content to a recipient Bob.
	The sender (Alice) generates an ephemeral key for the key agreement computation.
	Alice's ephemeral key (in JWK format) used for the key agreement computation
	in this example (including the private part) is:
      </t>
      <figure><artwork><![CDATA[
  {"kty":"EC",
   "crv":"P-256",
   "x":"gI0GAILBdu7T53akrFmMyGcsF3n5dO7MmwNBHKW5SV0",
   "y":"SLW_xSffzlPWrHEVI30DHM_4egVwt3NQqeUD7nMFpps",
   "d":"0_NxaRPUMQoAJt50Gz8YiTr8gRTwyEaCumd-MToTmIo"
  }
]]></artwork></figure>
      <t>
	The recipient's (Bob's) key (in JWK format) used for the key agreement computation
	in this example (including the private part) is:
      </t>
      <figure><artwork><![CDATA[
  {"kty":"EC",
   "crv":"P-256",
   "x":"weNJy2HscCSM6AEDTDg04biOvhFhyyWvOHQfeF_PxMQ",
   "y":"e8lnCO-AlStT-NJVX-crhB7QRYhiix03illJOVAOyck",
   "d":"VEmDZpDXXK8p8N0Cndsxs924q6nS1RXFASRl6BfUqdw"
  }
]]></artwork></figure>
      <t>
	Header Parameter values used in this example are as follows.
	In this example,
	the <spanx style="verb">apu</spanx> (agreement PartyUInfo) parameter value
	is the base64url encoding of the UTF-8 string "Alice" and
	the <spanx style="verb">apv</spanx> (agreement PartyVInfo) parameter value
	is the base64url encoding of the UTF-8 string "Bob".
	The <spanx style="verb">epk</spanx> parameter is used to communicate
	the sender's (Alice's) ephemeral public key value to the recipient (Bob).
      </t>
      <figure><artwork><![CDATA[
  {"alg":"ECDH-ES",
   "enc":"A128GCM",
   "apu":"QWxpY2U",
   "apv":"Qm9i",
   "epk":
    {"kty":"EC",
     "crv":"P-256",
     "x":"gI0GAILBdu7T53akrFmMyGcsF3n5dO7MmwNBHKW5SV0",
     "y":"SLW_xSffzlPWrHEVI30DHM_4egVwt3NQqeUD7nMFpps"
    }
  }
]]></artwork></figure>

      <t>
	The resulting Concat KDF <xref target="NIST.800-56A" /> parameter values are:
	<list style='hanging'>
	  <t hangText="Z">
	    This is set to the ECDH-ES key agreement output.
	    (This value is often not directly exposed by libraries,
	    due to NIST security requirements, and only serves as an input to a KDF.)
	    In this example, Z is the octet sequence: <vspace blankLines="0" />
	    [158, 86, 217, 29, 129, 113, 53, 211, 114, 131, 66, 131, 191, 132, 38, 156, 251, 49, 110, 163, 218, 128, 106, 72, 246, 218, 167, 121, 140, 254, 144, 196].
	  </t>
	  <t hangText="keydatalen">
	    This value is 128 - the number of bits in the desired output key
	    (because <spanx style="verb">A128GCM</spanx> uses a 128 bit key).
	  </t>
	  <t hangText="AlgorithmID">
	    This is set to the octets representing the 32 bit big endian value 7
	    - [0, 0, 0, 7] - the number of octets in the AlgorithmID content "A128GCM",
	    followed, by the octets representing the UTF-8 string "A128GCM"
	    - [65, 49, 50, 56, 71, 67, 77].
	  </t>
	  <t hangText="PartyUInfo">
	    This is set to the octets representing the 32 bit big endian value 5
	    - [0, 0, 0, 5] - the number of octets in the PartyUInfo content "Alice",
	    followed, by the octets representing the UTF-8 string "Alice"
	    - [65, 108, 105, 99, 101].
	  </t>
	  <t hangText="PartyVInfo">
	    This is set to the octets representing the 32 bit big endian value 3
	    - [0, 0, 0, 3] - the number of octets in the PartyUInfo content "Bob",
	    followed, by the octets representing the UTF-8 string "Bob"
	    - [66, 111, 98].
	  </t>
	  <t hangText="SuppPubInfo">
	    This is set to the octets representing the 32 bit big endian value 128
	    - [0, 0, 0, 128] - the keydatalen value.
	  </t>
	  <t hangText="SuppPrivInfo">
	    This is set to the empty octet sequence.
	  </t>
	</list>
      </t>
      <t>
	Concatenating the parameters AlgorithmID through SuppPubInfo results in
	an OtherInfo value of: <vspace blankLines="0" />
	[0, 0, 0, 7, 65, 49, 50, 56, 71, 67, 77, 0, 0, 0, 5, 65, 108, 105, 99, 101, 0, 0, 0, 3, 66, 111, 98, 0, 0, 0, 128]
      </t>
      <t>
	Concatenating the round number 1 ([0, 0, 0, 1]), Z,
	and the OtherInfo value results in the Concat KDF round 1 hash input of:
	<vspace blankLines="0" />
	[0, 0, 0, 1, <vspace blankLines="0" />
	158, 86, 217, 29, 129, 113, 53, 211, 114, 131, 66, 131, 191, 132, 38, 156, 251, 49, 110, 163, 218, 128, 106, 72, 246, 218, 167, 121, 140, 254, 144, 196, <vspace blankLines="0" />
	0, 0, 0, 7, 65, 49, 50, 56, 71, 67, 77, 0, 0, 0, 5, 65, 108, 105, 99, 101, 0, 0, 0, 3, 66, 111, 98, 0, 0, 0, 128]
      </t>
      <t>
	The resulting derived key, which is the first 128 bits of the round 1 hash output is:
	<vspace blankLines="0" />
	[86, 170, 141, 234, 248, 35, 109, 32, 92, 34, 40, 205, 113, 167, 16, 26]
      </t>
      <figure>
	<preamble>The base64url encoded representation of this derived key is:</preamble>
	<artwork><![CDATA[
  VqqN6vgjbSBcIijNcacQGg
]]></artwork></figure>
    </section>

    <section title="Acknowledgements" anchor="Acknowledgements">
      <t>
	Solutions for signing and encrypting JSON content were
	previously explored by <xref target="MagicSignatures">Magic
	Signatures</xref>, <xref target="JSS">JSON Simple Sign</xref>,
	<xref target="CanvasApp">Canvas Applications</xref>, <xref
	target="JSE">JSON Simple Encryption</xref>, and <xref
	target="I-D.rescorla-jsms">JavaScript Message Security
	Format</xref>, all of which influenced this draft.
      </t>
      <t>
	The <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2">Authenticated Encryption with AES-CBC and HMAC-SHA</xref>
	specification, upon which the AES_CBC_HMAC_SHA2 algorithms are based,
	was written by David A. McGrew and Kenny Paterson.
	The test cases for AES_CBC_HMAC_SHA2 are based upon those
	for <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2"/> by John Foley.
      </t>
      <t>
	Matt Miller wrote
	<xref target="I-D.miller-jose-jwe-protected-jwk">Using JavaScript Object Notation (JSON)
	Web Encryption (JWE) for Protecting JSON Web Key (JWK) Objects</xref>,
	which the password-based encryption content of this draft is based upon.
      </t>
      <t>
        This specification is the work of the JOSE Working Group,
	which includes dozens of active and dedicated participants.
	In particular, the following individuals contributed ideas,
        feedback, and wording that influenced this specification:
      </t>
      <t>
	Dirk Balfanz,
	Richard Barnes,
	John Bradley,
	Brian Campbell,
	Breno de Medeiros,
	Vladimir Dzhuvinov,
	Yaron Y. Goland,
	Dick Hardt,
	Jeff Hodges,
	Edmund Jay,
	James Manger,
	Matt Miller,
	Tony Nadalin,
	Axel Nennker,
	John Panzer,
	Emmanuel Raviart,
	Nat Sakimura,
	Jim Schaad,
	Hannes Tschofenig,
	and Sean Turner.
      </t>
      <t>
	Jim Schaad and Karen O'Donoghue chaired the JOSE working group and
	Sean Turner and Stephen Farrell served as Security area directors
	during the creation of this specification.
      </t>
    </section>

    <section title="Document History" anchor="History">
      <t>
	[[ to be removed by the RFC Editor before publication as an RFC ]]
      </t>

      <t>
	-18
	<list style='symbols'>
	  <t>
	    Changes to address editorial and minor issues
	    #129, #134, #135, #158, #161, #185, #186, and #187.
	  </t>
	  <t>
	    Added and used Description registry fields.
	  </t>
	</list>
      </t>

      <t>
	-17
	<list style='symbols'>
	  <t>
	    Explicitly named all the logical components of a JWS and JWE
	    and defined the processing rules and serializations
	    in terms of those components,
	    addressing issues #60, #61, and #62.
	  </t>
	  <t>
	    Removed processing steps in algorithm definitions that duplicated
	    processing steps in JWS or JWE,
	    addressing issue #56.
	  </t>
	  <t>
	    Replaced verbose repetitive phases such as
	    "base64url encode the octets of the UTF-8 representation of X"
	    with mathematical notation such as "BASE64URL(UTF8(X))".
	  </t>
	  <t>
	    Terms used in multiple documents are now defined in
	    one place and incorporated by reference.
	    Some lightly used or obvious terms were also removed.
	    This addresses issue #58.
	  </t>
	  <t>
	    Changes to address minor issue
	    #53.
	  </t>
	</list>
      </t>

      <t>
	-16
	<list style='symbols'>
	  <t>
	    Added a DataLen prefix to the AlgorithmID value in the Concat KDF computation.
	  </t>
	  <t>
	    Added OIDs for encryption algorithms, additional signature algorithm OIDs,
	    and additional XML DSIG/ENC URIs in the algorithm cross-reference tables.
	  </t>
	  <t>
	    Changes to address editorial and minor issues
	    #28, #36, #39, #52, #53, #55, #127, #128, #136, #137, #141,
	    #150, #151, #152, and #155.
	  </t>
	</list>
      </t>

      <t>
	-15
	<list style='symbols'>
	  <t>
	    Changed statements about rejecting JWSs to statements about
	    validation failing,
	    addressing issue #35.
	  </t>
	  <t>
	    Stated that changes of implementation requirements are only permitted
	    on a Specification Required basis,
	    addressing issue #38.
	  </t>
	  <t>
	    Made <spanx style="verb">oct</spanx> a required key type,
	    addressing issue #40.
	  </t>
	  <t>
	    Updated the example ECDH-ES key agreement values.
	  </t>
	  <t>
	    Changes to address editorial and minor issues
	    #34, #37, #49, #63, #123, #124, #125, #130, #132, #133, #138, #139,
	    #140, #142, #143, #144, #145, #148, #149, #150, and #162.
	  </t>
	</list>
      </t>

      <t>
	-14
	<list style='symbols'>
	  <t>
	    Removed <spanx style="verb">PBKDF2</spanx> key type and
	    added <spanx style="verb">p2s</spanx> and <spanx style="verb">p2c</spanx>
	    header parameters for use with the PBES2 algorithms.
	  </t>
	  <t>
	    Made the RSA private key parameters that are there to enable optimizations
	    be RECOMMENDED rather than REQUIRED.
	  </t>
	  <t>
	    Added algorithm identifiers for AES algorithms using 192 bit keys
	    and for RSASSA-PSS using HMAC SHA-384.
	  </t>
	  <t>
	    Added security considerations about key lifetimes,
	    addressing issue #18.
	  </t>
	  <t>
	    Added an example ECDH-ES key agreement computation.
	  </t>
	</list>
      </t>

      <t>
	-13
	<list style='symbols'>
	  <t>
	    Added key encryption with AES GCM
	    as specified in draft-jones-jose-aes-gcm-key-wrap-01,
	    addressing issue #13.
	  </t>
	  <t>
	    Added security considerations text limiting the number of times that
	    an AES GCM key can be used for key encryption or direct encryption,
	    per Section 8.3 of NIST SP 800-38D,
	    addressing issue #28.
	  </t>
	  <t>
	    Added password-based key encryption
	    as specified in draft-miller-jose-jwe-protected-jwk-02.
	  </t>
	</list>
      </t>

      <t>
	-12
	<list style='symbols'>
	  <t>
	    In the Direct Key Agreement case,
	    the Concat KDF AlgorithmID is set to
	    the octets of the UTF-8 representation of the
	    <spanx style="verb">enc</spanx> header parameter value.
	  </t>
	  <t>
	    Restored the <spanx style="verb">apv</spanx> (agreement PartyVInfo) parameter.
	  </t>
	  <t>
	    Moved the
	    <spanx style="verb">epk</spanx>,
	    <spanx style="verb">apu</spanx>, and
	    <spanx style="verb">apv</spanx>
	    Header Parameter definitions to be with
	    the algorithm descriptions that use them.
	  </t>
	  <t>
	    Changed terminology from "block encryption" to "content encryption".
	  </t>
	</list>
      </t>

      <t>
	-11
	<list style='symbols'>
	  <t>
	    Removed the Encrypted Key value from the AAD computation since it is
	    already effectively integrity protected by the encryption process.
	    The AAD value now only contains the representation of the JWE Encrypted Header.
	  </t>
	  <t>
	    Removed <spanx style="verb">apv</spanx> (agreement PartyVInfo)
	    since it is no longer used.
	  </t>
	  <t>
	    Added more information about the use of PartyUInfo during key agreement.
	  </t>
	  <t>
	    Use the keydatalen as the SuppPubInfo value for the Concat KDF
	    when doing key agreement, as RFC 2631 does.
	  </t>
	  <t>
	    Added algorithm identifiers for RSASSA-PSS with SHA-256 and SHA-512.
	  </t>
	  <t>
	    Added a Parameter Information Class value to the
	    JSON Web Key Parameters registry, which registers whether
	    the parameter conveys public or private information.
	  </t>
	</list>
      </t>
      <t>
	-10
	<list style='symbols'>
	  <t>
	    Changed the JWE processing rules for multiple recipients so that
	    a single AAD value contains the header parameters and encrypted key
	    values for all the recipients,
	    enabling AES GCM to be safely used for multiple recipients.
	  </t>
	</list>
      </t>
      <t>
	-09
	<list style='symbols'>
	  <t>
	    Expanded the scope of the JWK parameters to include
	    private and symmetric key representations, as specified by
	    draft-jones-jose-json-private-and-symmetric-key-00.
	  </t>
	  <t>
	    Changed term "JWS Secured Input" to "JWS Signing Input".
	  </t>
	  <t>
	    Changed from using the term "byte" to "octet" when referring to 8 bit values.
	  </t>
	  <t>
	    Specified that AES Key Wrap uses the default initial value
	    specified in Section 2.2.3.1 of RFC 3394.
	    This addressed issue #19.
	  </t>
	  <t>
	    Added Key Management Mode definitions to terminology section
	    and used the defined terms to provide clearer key management instructions.
	    This addressed issue #5.
	  </t>
	  <t>
	    Replaced <spanx style="verb">A128CBC+HS256</spanx>
	    and <spanx style="verb">A256CBC+HS512</spanx>
	    with <spanx style="verb">A128CBC-HS256</spanx>
	    and <spanx style="verb">A256CBC-HS512</spanx>.
	    The new algorithms perform the same cryptographic computations as
	    <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2"/>,
	    but with the Initialization Vector and Authentication Tag values remaining
	    separate from the Ciphertext value in the output representation.
	    Also deleted the header parameters
	    <spanx style="verb">epu</spanx> (encryption PartyUInfo) and
	    <spanx style="verb">epv</spanx> (encryption PartyVInfo),
	    since they are no longer used.
	  </t>
	  <t>
	    Changed from using the term "Integrity Value" to "Authentication Tag".
	  </t>
	</list>
      </t>
      <t>
	-08
	<list style='symbols'>
	  <t>
	    Changed the name of the JWK key type parameter from
	    <spanx style="verb">alg</spanx> to <spanx style="verb">kty</spanx>.
	  </t>
	  <t>
	    Replaced uses of the term "AEAD" with "Authenticated Encryption", since
	    the term AEAD in the RFC 5116 sense implied the use of a particular
	    data representation, rather than just referring to the class of
	    algorithms that perform authenticated encryption with associated data.
	  </t>
	  <t>
	    Applied editorial improvements suggested by
	    Jeff Hodges.
	    Many of these simplified the terminology used.
	  </t>
	  <t>
	    Added seriesInfo information to Internet Draft references.
	  </t>
	</list>
      </t>
      <t>
	-07
	<list style='symbols'>
	  <t>
	    Added a data length prefix to PartyUInfo and PartyVInfo values.
	  </t>
	  <t>
	    Changed the name of the JWK RSA modulus parameter from 
	    <spanx style="verb">mod</spanx> to <spanx style="verb">n</spanx>
	    and the name of the JWK RSA exponent parameter from
	    <spanx style="verb">xpo</spanx> to <spanx style="verb">e</spanx>,
	    so that the identifiers are the same as those used in RFC 3447.
	  </t>
	  <t>
	    Made several local editorial changes to clean up loose ends
	    left over from to the decision to only support
	    block encryption methods providing integrity.
	  </t>
	</list>
      </t>
      <t>
	-06
	<list style='symbols'>
	  <t>
	    Removed the <spanx style="verb">int</spanx> and
	    <spanx style="verb">kdf</spanx> parameters and defined the new composite
	    Authenticated Encryption algorithms <spanx style="verb">A128CBC+HS256</spanx> and
	    <spanx style="verb">A256CBC+HS512</spanx> to replace the former
	    uses of AES CBC, which required the use of separate integrity
	    and key derivation functions.
	  </t>
	  <t>
	    Included additional values in the Concat KDF calculation -- the
	    desired output size and the algorithm value,
	    and optionally PartyUInfo and PartyVInfo values.
	    Added the optional header parameters
	    <spanx style="verb">apu</spanx> (agreement PartyUInfo),
	    <spanx style="verb">apv</spanx> (agreement PartyVInfo),
	    <spanx style="verb">epu</spanx> (encryption PartyUInfo), and
	    <spanx style="verb">epv</spanx> (encryption PartyVInfo).
	  </t>
	  <t>
	    Changed the name of the JWK RSA exponent parameter from 
	    <spanx style="verb">exp</spanx> to <spanx style="verb">xpo</spanx>
	    so as to allow the potential use of the name <spanx style="verb">exp</spanx>
	    for a future extension that might define an expiration parameter for keys.
	    (The <spanx style="verb">exp</spanx> name is already used for this
	    purpose in the JWT specification.)
	  </t>
	  <t>
	    Applied changes made by the RFC Editor to RFC 6749's registry language
	    to this specification.
	  </t>
	</list>
      </t>
      <t>
	-05
	<list style='symbols'>
	  <t>
	    Support both direct encryption using a
	    shared or agreed upon symmetric key, and the use of a
	    shared or agreed upon symmetric key to key wrap the CMK.
	    Specifically, added the <spanx style="verb">alg</spanx> values
	    <spanx style="verb">dir</spanx>,
	    <spanx style="verb">ECDH-ES+A128KW</spanx>, and
	    <spanx style="verb">ECDH-ES+A256KW</spanx>
	    to finish filling in this set of capabilities.
	  </t>
	  <t>
	    Updated open issues.
	  </t>
	</list>
      </t>
      <t>
	-04
	<list style='symbols'>
	  <t>
	    Added text requiring that any leading zero bytes be retained in
	    base64url encoded key value representations for fixed-length values.
	  </t>
	  <t>
	    Added this language to Registration Templates:
	    "This name is case sensitive.  Names that match other registered names
	    in a case insensitive manner SHOULD NOT be accepted."
	  </t>
	  <t>
	    Described additional open issues.
	  </t>
	  <t>
	    Applied editorial suggestions.
	  </t>
	</list>
      </t>
      <t>
        -03
        <list style='symbols'>
	  <t>
	    Always use a 128 bit "authentication tag" size for
	    AES GCM, regardless of the key size.
	  </t>
	  <t>
	    Specified that use of a 128 bit IV is REQUIRED with AES CBC.
	    It was previously RECOMMENDED.
	  </t>
	  <t>
	    Removed key size language for ECDSA algorithms, since the
	    key size is implied by the algorithm being used.
	  </t>
	  <t>
	    Stated that the <spanx style="verb">int</spanx> key size
	    must be the same as the hash output size (and not larger,
	    as was previously allowed) so that its size is defined for
	    key generation purposes.
	  </t>
	  <t>
	    Added the <spanx style="verb">kdf</spanx> (key derivation function) header parameter
	    to provide crypto agility for key derivation.
	    The default KDF remains the Concat KDF with the SHA-256 digest function.
	  </t>
	  <t>
	    Clarified that the <spanx style="verb">mod</spanx> and
	    <spanx style="verb">exp</spanx> values are unsigned.
	  </t>
	  <t>
	    Added Implementation Requirements columns to algorithm tables
	    and Implementation Requirements entries to algorithm registries.
	  </t>
	  <t>
	    Changed AES Key Wrap to RECOMMENDED.
	  </t>
	  <t>
	    Moved registries
	    JSON Web Signature and Encryption Header Parameters and
	    JSON Web Signature and Encryption Type Values
	    to the JWS specification.
	  </t>
	  <t>
	    Moved JSON Web Key Parameters registry to the JWK specification.
	  </t>
          <t>
	    Changed registration requirements from RFC Required to
	    Specification Required with Expert Review.
	  </t>
	  <t>
	    Added Registration Template sections for defined registries.
	  </t>
	  <t>
	    Added Registry Contents sections to populate registry values.
	  </t>
	  <t>
	    No longer say "the UTF-8 representation of the JWS Secured Input
	    (which is the same as the ASCII representation)".  Just call it
	    "the ASCII representation of the JWS Secured Input".
	  </t>
	  <t>
	    Added "Collision Resistant Namespace" to the terminology section.
	  </t>
	  <t>
	    Numerous editorial improvements.
	  </t>
	</list>
      </t>
      <t>
        -02
        <list style='symbols'>
	  <t>
	    For AES GCM,
	    use the "additional authenticated data" parameter
	    to provide integrity for the header, encrypted key, and
	    ciphertext and use the resulting "authentication tag"
	    value as the JWE Authentication Tag.
	  </t>
	  <t>
	    Defined minimum required key sizes for algorithms
	    without specified key sizes.
	  </t>
	  <t>
	    Defined KDF output key sizes.
	  </t>
	  <t>
	    Specified the use of PKCS #5 padding with AES CBC.
	  </t>
	  <t>
	    Generalized text to allow key agreement to be employed
	    as an alternative to key wrapping or key encryption.
	  </t>
	  <t>
	    Clarified that ECDH-ES is a key agreement algorithm.
	  </t>
	  <t>
	    Required implementation of AES-128-KW and AES-256-KW.
	  </t>
	  <t>
	    Removed the use of <spanx style="verb">A128GCM</spanx> and
	    <spanx style="verb">A256GCM</spanx> for key wrapping.
	  </t>
          <t>
	    Removed <spanx style="verb">A512KW</spanx> since it turns
	    out that it's not a standard algorithm.
          </t>
	  <t>
	    Clarified the relationship between
	    <spanx style="verb">typ</spanx> header parameter values
	    and MIME types.
	  </t>
	  <t>
	    Generalized language to refer to Message Authentication Codes (MACs)
	    rather than Hash-based Message Authentication Codes (HMACs)
	    unless in a context specific to HMAC algorithms.
	  </t>
	  <t>
	    Established registries:
	    JSON Web Signature and Encryption Header Parameters,
	    JSON Web Signature and Encryption Algorithms,
	    JSON Web Signature and Encryption "typ" Values,
	    JSON Web Key Parameters, and
	    JSON Web Key Algorithm Families.
	  </t>
	  <t>
	    Moved algorithm-specific definitions from JWK to JWA.
	  </t>
          <t>
            Reformatted to give each member definition its own section heading.
          </t>
        </list>
      </t>
      <t>
        -01
        <list style='symbols'>
          <t>
           Moved definition of "alg":"none" for JWSs here from the JWT
           specification since this functionality is likely to be
           useful in more contexts that just for JWTs.
          </t>
	  <t>
	    Added Advanced Encryption Standard (AES) Key Wrap Algorithm
	    using 512 bit keys (<spanx style="verb">A512KW</spanx>).
	  </t>

	  <t>
	    Added text "Alternatively, the Encoded JWS Signature MAY be base64url
	    decoded to produce the JWS Signature and this value can
	    be compared with the computed HMAC value, as this
	    comparison produces the same result as comparing the
	    encoded values".
	  </t>
          <t>
	    Corrected the Magic Signatures reference.
          </t>
	  <t>
	    Made other editorial improvements suggested by JOSE
	    working group participants.
	  </t>
        </list>
      </t>
      <t>
        -00
        <list style='symbols'>
          <t>
            Created the initial IETF draft based upon
            draft-jones-json-web-signature-04 and
            draft-jones-json-web-encryption-02 with no normative changes.
          </t>
	  <t>
	    Changed terminology to no longer call both digital
	    signatures and HMACs "signatures".
	  </t>
        </list>
      </t>
    </section>     

  </back>
</rfc>
