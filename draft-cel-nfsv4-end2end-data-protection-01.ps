%!PS-Adobe-3.0
%%BoundingBox: 76 24 574 716
%%Title: Enscript Output
%%For: Chuck Lever
%%Creator: GNU Enscript 1.6.6
%%CreationDate: Fri Oct 18 16:11:57 2013
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 6
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 6
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 10 10 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [612 792] 
  >> setpagedevice
} if
/d_page_w 498 def
/d_page_h 692 def
/d_header_x 0 def
/d_header_y 692 def
/d_header_w 498 def
/d_header_h 0 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 498 def
/d_footer_h 0 def
/d_output_w 498 def
/d_output_h 692 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
76 24 translate
/pagenum 1 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 646 M
(NFSv4                                                           C. Lever) s
5 635 M
(Internet-Draft                                                    Oracle) s
5 624 M
(Intended status: Experimental                           October 18, 2013) s
5 613 M
(Expires: April 21, 2014) s
5 580 M
(                  End-to-end Data Integrity For NFSv4) s
5 569 M
(               draft-cel-nfsv4-end2end-data-protection-01) s
5 547 M
(Abstract) s
5 525 M
(   End-to-end data integrity protection provides a strong guarantee that) s
5 514 M
(   data an application reads from durable storage is exactly the same) s
5 503 M
(   data it wrote previously to durable storage.  This document specifies) s
5 492 M
(   possible additions to the NFSv4 protocol enabling it to convey end-) s
5 481 M
(   to-end data integrity information between client and server.) s
5 85 M
(Lever                    Expires April 21, 2014                 [Page 1]) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
76 24 translate
/pagenum 2 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(Requirements Language) s
5 613 M
(   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",) s
5 602 M
(   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this) s
5 591 M
(   document are to be interpreted as described in [RFC2119].) s
5 569 M
(Status of this Memo) s
5 547 M
(   This Internet-Draft is submitted in full conformance with the) s
5 536 M
(   provisions of BCP 78 and BCP 79.) s
5 514 M
(   Internet-Drafts are working documents of the Internet Engineering) s
5 503 M
(   Task Force \(IETF\).  Note that other groups may also distribute) s
5 492 M
(   working documents as Internet-Drafts.  The list of current Internet-) s
5 481 M
(   Drafts is at http://datatracker.ietf.org/drafts/current/.) s
5 459 M
(   Internet-Drafts are draft documents valid for a maximum of six months) s
5 448 M
(   and may be updated, replaced, or obsoleted by other documents at any) s
5 437 M
(   time.  It is inappropriate to use Internet-Drafts as reference) s
5 426 M
(   material or to cite them other than as "work in progress.") s
5 404 M
(   This Internet-Draft will expire on April 21, 2014.) s
5 382 M
(Copyright Notice) s
5 360 M
(   Copyright \(c\) 2013 IETF Trust and the persons identified as the) s
5 349 M
(   document authors.  All rights reserved.) s
5 327 M
(   This document is subject to BCP 78 and the IETF Trust's Legal) s
5 316 M
(   Provisions Relating to IETF Documents) s
5 305 M
(   \(http://trustee.ietf.org/license-info\) in effect on the date of) s
5 294 M
(   publication of this document.  Please review these documents) s
5 283 M
(   carefully, as they describe your rights and restrictions with respect) s
5 272 M
(   to this document.  Code Components extracted from this document must) s
5 261 M
(   include Simplified BSD License text as described in Section 4.e of) s
5 250 M
(   the Trust Legal Provisions and are provided without warranty as) s
5 239 M
(   described in the Simplified BSD License.) s
5 74 M
(Lever                    Expires April 21, 2014                 [Page 2]) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
76 24 translate
/pagenum 3 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(Table of Contents) s
5 613 M
(   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4) s
5 602 M
(     1.1.  Scope Of This Document . . . . . . . . . . . . . . . . . .  4) s
5 591 M
(     1.2.  Causes of Data Corruption  . . . . . . . . . . . . . . . .  4) s
5 580 M
(     1.3.  End-to-end Data Integrity  . . . . . . . . . . . . . . . .  5) s
5 569 M
(     1.4.  The Case For End-To-End Data Integrity Management  . . . .  5) s
5 558 M
(     1.5.  Terminology  . . . . . . . . . . . . . . . . . . . . . . .  7) s
5 547 M
(   2.  Protocol . . . . . . . . . . . . . . . . . . . . . . . . . . .  9) s
5 536 M
(     2.1.  Protection types . . . . . . . . . . . . . . . . . . . . .  9) s
5 525 M
(       2.1.1.  Protection Type Table  . . . . . . . . . . . . . . . . 10) s
5 514 M
(     2.2.  GETATTR  . . . . . . . . . . . . . . . . . . . . . . . . . 12) s
5 503 M
(     2.3.  INIT_PROT_INFO - Initialize Protection Information . . . . 12) s
5 492 M
(       2.3.1.  ARGUMENTS  . . . . . . . . . . . . . . . . . . . . . . 12) s
5 481 M
(       2.3.2.  RESULTS  . . . . . . . . . . . . . . . . . . . . . . . 12) s
5 470 M
(       2.3.3.  DESCRIPTION  . . . . . . . . . . . . . . . . . . . . . 12) s
5 459 M
(     2.4.  New data content type  . . . . . . . . . . . . . . . . . . 12) s
5 448 M
(     2.5.  READ_PLUS  . . . . . . . . . . . . . . . . . . . . . . . . 13) s
5 437 M
(     2.6.  WRITE_PLUS . . . . . . . . . . . . . . . . . . . . . . . . 14) s
5 426 M
(     2.7.  Error codes  . . . . . . . . . . . . . . . . . . . . . . . 14) s
5 415 M
(   3.  Protocol Design Considerations . . . . . . . . . . . . . . . . 16) s
5 404 M
(     3.1.  Protection Envelopes . . . . . . . . . . . . . . . . . . . 16) s
5 393 M
(     3.2.  Protecting Holes . . . . . . . . . . . . . . . . . . . . . 17) s
5 382 M
(     3.3.  Multi-server Considerations  . . . . . . . . . . . . . . . 18) s
5 371 M
(       3.3.1.  pNFS and Protection Information  . . . . . . . . . . . 19) s
5 360 M
(       3.3.2.  Server-to-server copy  . . . . . . . . . . . . . . . . 19) s
5 349 M
(   4.  Security Considerations  . . . . . . . . . . . . . . . . . . . 21) s
5 338 M
(   5.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 22) s
5 327 M
(   6.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 23) s
5 316 M
(   7.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 24) s
5 305 M
(     7.1.  Normative References . . . . . . . . . . . . . . . . . . . 24) s
5 294 M
(     7.2.  Informative References . . . . . . . . . . . . . . . . . . 24) s
5 283 M
(   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . . 25) s
5 74 M
(Lever                    Expires April 21, 2014                 [Page 3]) s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
76 24 translate
/pagenum 4 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(1.  Introduction) s
5 613 M
(1.1.  Scope Of This Document) s
5 591 M
(   This document specifies a protocol based on NFSv4 minor version 2) s
5 580 M
(   [PROVISIONAL-NFSV42] that enables per-I/O data integrity information) s
5 569 M
(   to be conveyed between an NFS client and an NFS server.) s
5 547 M
(   A key requirement is that data integrity verification is possible) s
5 536 M
(   from application write to read.  This does not mean that a single) s
5 525 M
(   protection envelope must exist from application to storage.  However,) s
5 514 M
(   it must be possible to perform integrity checking during each step of) s
5 503 M
(   an I/O request's journey from application to storage and back.) s
5 481 M
(   Therefore, the authors will not address how an NFSv4 client handles) s
5 470 M
(   integrity-protected read and write requests from applications, nor) s
5 459 M
(   with how an NFSv4 server manages protection information on its) s
5 448 M
(   durable storage.  We specify only a generic mechanism for) s
5 437 M
(   transmitting integrity-protected read and write requests via the) s
5 426 M
(   NFSv4 protocol, which client and server implementors may use as they) s
5 415 M
(   see fit.) s
5 393 M
(   A key interest in specifying and prototyping an integrity protection) s
5 382 M
(   feature is exploring how I/O error handling and state recovery) s
5 371 M
(   mechanisms in NFSv4 must be strengthened to guarantee the integrity) s
5 360 M
(   of protected data.) s
5 338 M
(   Additionally, we want to identify exactly what modes of corruption) s
5 327 M
(   are faced in environments where applications run on nodes separated) s
5 316 M
(   from physical data storage.  Do we expect corruption that has never) s
5 305 M
(   been seen in SAN or DAS environments, particularly failure modes in) s
5 294 M
(   NAS clients that cannot be detected by traditional means \(such as) s
5 283 M
(   looking for misplaced block writes\)?) s
5 261 M
(   Finally, do we already have appropriate integrity protection) s
5 250 M
(   mechanisms in the current protocol?  Network-layer integrity) s
5 239 M
(   mechanisms such as an integrity-protecting RPCSEC_GSS service have) s
5 228 M
(   been around for years, and might be adequate.  But do these) s
5 217 M
(   mechanisms protect against CPU and memory corruption and application) s
5 206 M
(   bugs, as well as malicious changes to data-at-rest?) s
5 184 M
(1.2.  Causes of Data Corruption) s
5 162 M
(   Data can be corrupted during transmission, during the act of) s
5 151 M
(   recording, or during the act of retrieval.  Data can become corrupt) s
5 140 M
(   while at rest on durable storage.  Either active corruption \(e.g.) s
5 129 M
(   data is accidentally or maliciously overwritten\) or passive) s
5 118 M
(   corruption \(e.g. storage device failure\) can occur.) s
5 74 M
(Lever                    Expires April 21, 2014                 [Page 4]) s
_R
S
%%Page: (5) 5
%%BeginPageSetup
_S
76 24 translate
/pagenum 5 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(   Data storage systems must handle an increasingly large amount of) s
5 624 M
(   data.  If the rate of corruption stays fixed while the amount of data) s
5 613 M
(   stored increases, we expect corruption to become more common.) s
5 591 M
(   To reduce failure rate and increase performance, data storage system) s
5 580 M
(   complexity has increased.  Complexity itself introduces the risk of) s
5 569 M
(   corruption, since complexity can introduce bugs and make test) s
5 558 M
(   coverage unacceptably sparse.  Diagnosing a failure in complex) s
5 547 M
(   systems is an everyday challenge.) s
5 525 M
(   Data corruption can be "detected" or "undetected" \(silent\).  The goal) s
5 514 M
(   of data integrity protection is not to make corruption impossible,) s
5 503 M
(   but rather to ensure corruption is detected before it can no longer) s
5 492 M
(   be corrected, or at least before corrupt data is used by an) s
5 481 M
(   application.) s
5 459 M
(1.3.  End-to-end Data Integrity) s
5 437 M
(   End-to-end data integrity is a class of operating system, file) s
5 426 M
(   system, storage controller, and storage device features that provide) s
5 415 M
(   broad protection against unwanted changes to or loss of data that) s
5 404 M
(   resides on data storage devices.) s
5 382 M
(   Typically, data integrity is verified at individual steps in a data) s
5 371 M
(   flow using techniques such as parity.  This provides isolated) s
5 360 M
(   protection during particular transfer operations or at best between) s
5 349 M
(   adjacent nodes in an I/O path.) s
5 327 M
(   In contrast, end-to-end protection guarantees data can be verified at) s
5 316 M
(   every step as data flows from an application through a file system) s
5 305 M
(   and storage controllers, via a variety of communication protocols, as) s
5 294 M
(   it is stored on storage devices, and when it is read back from) s
5 283 M
(   storage.) s
5 261 M
(1.4.  The Case For End-To-End Data Integrity Management) s
5 239 M
(   A modern NFSv4 deployment may already provide some degree of data) s
5 228 M
(   protection to in-transit data.) s
5 206 M
(   o  The use of RPCSEC GSS Kerberos 5i and 5p [RFC2203] can protect) s
5 195 M
(      NFSv4 requests from tampering or corruption during network) s
5 184 M
(      transfer.) s
5 162 M
(   o  An NFSv4 fileserver can employ RAID or block devices that store) s
5 151 M
(      additional checksum data per logical block, in order to detect) s
5 140 M
(      media failure.) s
5 74 M
(Lever                    Expires April 21, 2014                 [Page 5]) s
_R
S
%%Page: (6) 6
%%BeginPageSetup
_S
76 24 translate
/pagenum 6 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(   o  An advanced file system on an NFSv4 fileserver may protect data) s
5 624 M
(      integrity by storing multiple copies of data or by separately) s
5 613 M
(      storing additional checksums.) s
5 591 M
(   To demonstrate why end-to-end data integrity protection provides a) s
5 580 M
(   stronger integrity guarantee than protection provided by the single-) s
5 569 M
(   domain mechanisms above, consider the following cases:) s
5 547 M
(   o  On an NFSv4 fileserver, suppose a device driver bug causes a write) s
5 536 M
(      operation to DMA the wrong memory pages to durable storage.  The) s
5 525 M
(      written data is incorrect, but the DMA transport checksum matches) s
5 514 M
(      it.  The DMA operation completes without reporting an error, and) s
5 503 M
(      upper layers discard the original copy of the data.) s
5 481 M
(   o  Suppose an operating system or file system bug allows) s
5 470 M
(      modifications to a page after it has been prepared for I/O and a) s
5 459 M
(      checksum has been generated.  The page and checksum are then) s
5 448 M
(      written to storage.  The written data does not represent the data) s
5 437 M
(      originally by the application, and the accompanying stored) s
5 426 M
(      checksum does not match it.  The write operation completes without) s
5 415 M
(      reporting an error, and upper layers discard the original copy of) s
5 404 M
(      the data.) s
5 382 M
(   o  Suppose a RAID array on an NFSv4 server receives incorrect data) s
5 371 M
(      for some reason.  The array will generate RAID parity blocks from) s
5 360 M
(      the incorrect data.  The data is incorrect, but the accompanying) s
5 349 M
(      parity matches it.  The write operation completes without) s
5 338 M
(      reporting an error, and upper layers discard the original copy of) s
5 327 M
(      the data.) s
5 305 M
(   o  Suppose an application is writing data repeatedly to the same area) s
5 294 M
(      of a file stored on an NFSv4 fileserver.  Retransmits of an old) s
5 283 M
(      write request become indistinguishable from new write requests to) s
5 272 M
(      the same region.  The written data always matches its appliction-) s
5 261 M
(      generated checksum, but a replayed retransmission can overwrite) s
5 250 M
(      newer data, and upper layers discard the original copy of the) s
5 239 M
(      data.) s
5 217 M
(   o  Suppose a middle box is caching NFSv4 write requests on behalf of) s
5 206 M
(      a number of NFSv4 clients.  The wsize in effect for the clients) s
5 195 M
(      does not have to match the wsize in effect between the middle box) s
5 184 M
(      and the NFSv4 server.  If the middle box fragments and reassembles) s
5 173 M
(      the write requests incorrectly, the write requests appear to) s
5 162 M
(      complete, but incorrect data is written to the NFSv4 server, and) s
5 151 M
(      the clients discard the original copy of the data.) s
5 129 M
(   In none of these cases is corruption identified while the original) s
5 118 M
(   data remains available to correct the situation.  An end-to-end) s
5 74 M
(Lever                    Expires April 21, 2014                 [Page 6]) s
_R
S
%%Page: (7) 7
%%BeginPageSetup
_S
76 24 translate
/pagenum 7 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(   solution could have caught and reported each of these, allowing the) s
5 624 M
(   data's originator to retry or report failure before the data loss is) s
5 613 M
(   compounded.) s
5 591 M
(1.5.  Terminology) s
5 569 M
(   Buffer separation:  Protection information and the data it protects) s
5 558 M
(      is contained in distinct buffers which have independent paths to) s
5 547 M
(      durable storage.) s
5 525 M
(   Checksum:  A value which is used to detect corruption in a collection) s
5 514 M
(      of data.  It is usually computed by applying a simple operation) s
5 503 M
(      \(such as addition\) to each element of the collection.  Computing a) s
5 492 M
(      checksum is a low-overhead operation, but is less effective at) s
5 481 M
(      helping detect and correct errors than a CRC.) s
5 459 M
(   Cyclic Redundancy Check:  A value which is used to detect corruption) s
5 448 M
(      in a collection of data.  It is based on a linear block error-) s
5 437 M
(      correcting code.  The hash function's generator polynomial is) s
5 426 M
(      chosen to maximize error detection, and is typically more) s
5 415 M
(      successful than either simple parity or a checksum.  A CRC is) s
5 404 M
(      efficient to compute with dedicated hardware, but can be expensive) s
5 393 M
(      to compute in software.) s
5 371 M
(   Data corruption:  Any undesired alteration of data.  Data corruption) s
5 360 M
(      can be "detected" or "undetected" \(silent\).) s
5 338 M
(   Data integrity:  A database term used here to mean that a collection) s
5 327 M
(      of data is exactly the same before and after processing,) s
5 316 M
(      transmission, or storage.) s
5 294 M
(   Data integrity verification failure:  A node in an I/O path has) s
5 283 M
(      failed to verify protection information associated with some data.) s
5 272 M
(      This can be because the data or the protection information has) s
5 261 M
(      been corrupted, or the node is malfunctioning.) s
5 239 M
(   Integrity metadata:  See "Protection information.") s
5 217 M
(   Latent corruption:  Data corruption that is discovered long after) s
5 206 M
(      data was originally recorded on a storage device.) s
5 184 M
(   Lost write:  A write operation to a storage device which behaves as) s
5 173 M
(      if the target data is stored durably, but in fact the data is) s
5 162 M
(      never recorded.) s
5 74 M
(Lever                    Expires April 21, 2014                 [Page 7]) s
_R
S
%%Page: (8) 8
%%BeginPageSetup
_S
76 24 translate
/pagenum 8 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(   Misdirected write:  A write operation that causes the target data to) s
5 624 M
(      be written to a different location on a storage device than was) s
5 613 M
(      intended.) s
5 591 M
(   Parity:  A single bit which represents the evenness or oddness of a) s
5 580 M
(      collection of data.  Checking a parity bit can reveal and help) s
5 569 M
(      correct data corruption.  Parity is easy to compute and requires) s
5 558 M
(      little space to store, but is generally less effective than other) s
5 547 M
(      methods of error correction.  "Parity" can also refer to checksum) s
5 536 M
(      data in a RAID.) s
5 514 M
(   Protection envelope:  A set of nodes in an I/O system which together) s
5 503 M
(      guarantee data integrity from input to output.) s
5 481 M
(   Protection information:  Information about a collection of) s
5 470 M
(      application data that allows detection and possibly correction of) s
5 459 M
(      corruption.  This can take the form of parity, a checksum, a CRC) s
5 448 M
(      value, or something more complex.  Also the formal name of an end-) s
5 437 M
(      to-end data integrity mechanism adopted by T10 for SCSI block) s
5 426 M
(      storage devices.) s
5 404 M
(   Protection interval:  A collection of application data that is) s
5 393 M
(      protected from corruption.  The collection must be no larger or) s
5 382 M
(      smaller than what can be written atomically to durable storage.) s
5 371 M
(      Typically there is a one-to-one mapping between a protection) s
5 360 M
(      interval and a logical block on a storage device.  However, a) s
5 349 M
(      device with a large sector size may store multiple protection) s
5 338 M
(      intervals per sector, to maintain adequate protection with limited) s
5 327 M
(      protection information.) s
5 305 M
(   Protection type:  An enumerated value that indicates the the size,) s
5 294 M
(      contents, and interpretation of fields containing protection) s
5 283 M
(      information.) s
5 74 M
(Lever                    Expires April 21, 2014                 [Page 8]) s
_R
S
%%Page: (9) 9
%%BeginPageSetup
_S
76 24 translate
/pagenum 9 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(2.  Protocol) s
5 613 M
(   This section prescribes changes to the NFSv4 XDR specification) s
5 602 M
(   [PROVISIONAL-NFSV42-XDR] to enable the conveyance of Protection) s
5 591 M
(   Information via NFSv4.  Therefore, an NFSv4.2 implementation is a) s
5 580 M
(   necessary starting point.  These changes are compatible with the) s
5 569 M
(   NFSv4 minor versioning rules described in the NFSv4.2 specification.) s
5 547 M
(   The RPC protocol used by NFSv4 is ONC RPC [RFC5531].  The data) s
5 536 M
(   structures used for the parameters and return values of these) s
5 525 M
(   procedures are expressed in this document in XDR [RFC4506].) s
5 503 M
(2.1.  Protection types) s
5 481 M
(   A new fixed-size structure is defined that encodes the format and) s
5 470 M
(   content of Protection Information.  This includes the meaning of) s
5 459 M
(   tags, the size of the protection interval, and so on.) s
5 437 M
(   For NFS, we need to go beyond existing SCSI protection types and) s
5 426 M
(   consider cryptographic integrity types \(i.e. the ability to guarantee) s
5 415 M
(   integrity of data-at-rest over time by means of digital signature\).) s
5 393 M
(   To begin, we provide NFSv4 equivalents for a few typical T10 PI) s
5 382 M
(   protection types [T10-SBC2], in addition to a few new protection) s
5 371 M
(   types:) s
5 349 M
(      enum nfs_protection_type4 {) s
5 338 M
(              NFS_PI_TYPE1     = 1,) s
5 327 M
(              NFS_PI_TYPE2     = 2,) s
5 316 M
(              NFS_PI_TYPE3     = 3,) s
5 305 M
(              NFS_PI_TYPE4     = 4,) s
5 294 M
(              NFS_PI_TYPE4     = 5,) s
5 283 M
(      };) s
5 261 M
(      struct nfs_protection_info4 {) s
5 250 M
(              nfs_protection_type4 pi_type;) s
5 239 M
(              uint32_t             pi_intvl_size;) s
5 228 M
(              uint64_t             pi_other_data;) s
5 217 M
(      };) s
5 195 M
(   The pi_type field reports the protection type.  The pi_intvl_size) s
5 184 M
(   field reports the supported protection interval size, in octets.  The) s
5 173 M
(   meaning of the content of the pi_other_data field depends on the) s
5 162 M
(   protection type.) s
5 74 M
(Lever                    Expires April 21, 2014                 [Page 9]) s
_R
S
%%Page: (10) 10
%%BeginPageSetup
_S
76 24 translate
/pagenum 10 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(2.1.1.  Protection Type Table) s
5 613 M
(   The following table specifies tag sizes and contents, and other) s
5 602 M
(   features of each protection type.) s
5 580 M
(   +------------+----------------------+--------------------+----------+) s
5 569 M
(   |     NFS    |      Description     |    pi_other_data   |  Comment |) s
5 558 M
(   | Protection |                      |                    |          |) s
5 547 M
(   |    Type    |                      |                    |          |) s
5 536 M
(   +------------+----------------------+--------------------+----------+) s
5 525 M
(   |      1     |      PI field is     |     Always zero    |    NFS   |) s
5 514 M
(   |            |  application-owned;  |                    | "native" |) s
5 503 M
(   |            |   8-byte protection  |                    |    PI    |) s
5 492 M
(   |            |   information field  |                    |          |) s
5 481 M
(   |            |  containing a SHA-1  |                    |          |) s
5 470 M
(   |            |      hash of the     |                    |          |) s
5 459 M
(   |            |  protection interval |                    |          |) s
5 448 M
(   |            |                      |                    |          |) s
5 437 M
(   |      2     |      PI field is     |   Zero means the   |    NFS   |) s
5 426 M
(   |            |  application-owned;  |  RSASSA-PKCS1-v1_5 | "native" |) s
5 415 M
(   |            |   8-byte protection  |   signing scheme   |    PI    |) s
5 404 M
(   |            |   information field  |  [RFC3447] is used |          |) s
5 393 M
(   |            | containing a hash of |                    |          |) s
5 382 M
(   |            |    the protection    |                    |          |) s
5 371 M
(   |            | interval signed by a |                    |          |) s
5 360 M
(   |            |    private key. A    |                    |          |) s
5 349 M
(   |            |     public key is    |                    |          |) s
5 338 M
(   |            |  provided separately |                    |          |) s
5 327 M
(   |            |   so the server can  |                    |          |) s
5 316 M
(   |            |    verify incoming   |                    |          |) s
5 305 M
(   |            | protection intervals |                    |          |) s
5 294 M
(   |            |                      |                    |          |) s
5 283 M
(   |      3     |   8-byte protection  |  1 if the PI field |  T10 PI  |) s
5 272 M
(   |            |   information field  |         is         |  Type 1  |) s
5 261 M
(   |            |   containing 2-byte  | application-owned; |          |) s
5 250 M
(   |            |   guard tag \(CRC-16  |   otherwise zero   |          |) s
5 239 M
(   |            |      checksum of     |                    |          |) s
5 228 M
(   |            |      protection      |                    |          |) s
5 217 M
(   |            |   interval\), 2-byte  |                    |          |) s
5 206 M
(   |            |    application tag   |                    |          |) s
5 195 M
(   |            |  \(user defined\), and |                    |          |) s
5 184 M
(   |            | 4-byte reference tag |                    |          |) s
5 173 M
(   |            |  \(LO 32-bits of LBA\) |                    |          |) s
5 162 M
(   |            |                      |                    |          |) s
5 74 M
(Lever                    Expires April 21, 2014                [Page 10]) s
_R
S
%%Page: (11) 11
%%BeginPageSetup
_S
76 24 translate
/pagenum 11 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(   |      4     |   8-byte protection  |  1 if the PI field |  T10 PI  |) s
5 624 M
(   |            |   information field  |         is         |  Type 2  |) s
5 613 M
(   |            |   containing 2-byte  | application-owned; |          |) s
5 602 M
(   |            |   guard tag \(CRC-16  |   otherwise zero   |          |) s
5 591 M
(   |            |      checksum of     |                    |          |) s
5 580 M
(   |            |      protection      |                    |          |) s
5 569 M
(   |            |   interval\), 2-byte  |                    |          |) s
5 558 M
(   |            |    application tag   |                    |          |) s
5 547 M
(   |            |  \(user defined\), and |                    |          |) s
5 536 M
(   |            | 4-byte reference tag |                    |          |) s
5 525 M
(   |            |          \(*\)         |                    |          |) s
5 514 M
(   |            |                      |                    |          |) s
5 503 M
(   |      5     |      PI field is     |  1 if the PI field |  T10 PI  |) s
5 492 M
(   |            |  application-owned;  |         is         |  Type 3  |) s
5 481 M
(   |            |   8-byte protection  | application-owned; |          |) s
5 470 M
(   |            |   information field  |   otherwise zero   |          |) s
5 459 M
(   |            |   containing 2-byte  |                    |          |) s
5 448 M
(   |            |   guard tag \(CRC-16  |                    |          |) s
5 437 M
(   |            |      checksum of     |                    |          |) s
5 426 M
(   |            |      protection      |                    |          |) s
5 415 M
(   |            |   interval\), 2-byte  |                    |          |) s
5 404 M
(   |            |    application tag   |                    |          |) s
5 393 M
(   |            |  \(user defined\), and |                    |          |) s
5 382 M
(   |            | 4-byte reference tag |                    |          |) s
5 371 M
(   |            |    \(user defined\)    |                    |          |) s
5 360 M
(   +------------+----------------------+--------------------+----------+) s
5 338 M
(   The protection type enumerator is key to the extensibility of the) s
5 327 M
(   NFSv4 end-to-end data integrity feature.  A future specification can) s
5 316 M
(   introduce new protection types that support Advanced Format drives,) s
5 305 M
(   or types for storage that does not support application-owned) s
5 294 M
(   Protection Information fields, for example.  To manage this ongoing) s
5 283 M
(   process, the contents of this table should be administered by IANA.) s
5 261 M
(   [*] Protection Type 2 uses an indirect LBA in its reference tag.  In) s
5 250 M
(   this case, the I/O operation passes the reference tag value for the) s
5 239 M
(   first protection interval in a separate operation.  The reference tag) s
5 228 M
(   in the first protection field must match this value.  The reference) s
5 217 M
(   tags in subsequent fields are this value plus \(n-1\).) s
5 195 M
(   It's still not clear to me how type 2 works without chaining read and) s
5 184 M
(   write requests.  When an application writes a series of unrelated) s
5 173 M
(   blocks, what should the reference LBNs be?  When an application reads) s
5 162 M
(   randomly, what reference LBNs should it expect?) s
5 74 M
(Lever                    Expires April 21, 2014                [Page 11]) s
_R
S
%%Page: (12) 12
%%BeginPageSetup
_S
76 24 translate
/pagenum 12 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(2.2.  GETATTR) s
5 613 M
(   A new read-only per-FSID GETATTR attribute is defined to request the) s
5 602 M
(   list of protection types supported on a particular FSID.) s
5 580 M
(      const FATTR4_PROTECTION_TYPES = 82;) s
5 558 M
(   The reply data type follows.) s
5 536 M
(      typedef nfs_protection_info4 fattr4_protection_info<>;) s
5 514 M
(2.3.  INIT_PROT_INFO - Initialize Protection Information) s
5 492 M
(   Some protection types require additional data in order for the) s
5 481 M
(   storage to perform integrity verification.  This data is transmitted) s
5 470 M
(   by a new operation.) s
5 448 M
(2.3.1.  ARGUMENTS) s
5 426 M
(      struct INITPROTINFO4args {) s
5 415 M
(              nfs_protection_type4 ipi_type;) s
5 404 M
(              opaque               ipi_data;) s
5 393 M
(      };) s
5 371 M
(2.3.2.  RESULTS) s
5 349 M
(      struct INITPROTINFO4res {) s
5 338 M
(              nfsstat4             status;) s
5 327 M
(      };) s
5 294 M
(2.3.3.  DESCRIPTION) s
5 272 M
(   This operation is used to transmit initialization data in preparation) s
5 261 M
(   for a stream of integrity-protected I/O requests.  The exact content) s
5 250 M
(   of the ipi_data field depends on the protection type specified in the) s
5 239 M
(   ipi_type field.) s
5 217 M
(   For example, for NFS_PI_TYPE2, the ipi_data field might contain a) s
5 206 M
(   binary format public key that can be used to validate the signature) s
5 195 M
(   of incoming protection intervals.) s
5 173 M
(2.4.  New data content type) s
5 151 M
(   NFSv4.2 introduces a mechanism that can be used to extend the types) s
5 140 M
(   of data that can be read and written by a client.  To convey) s
5 129 M
(   protection information we extend the data_content4 enum.) s
5 74 M
(Lever                    Expires April 21, 2014                [Page 12]) s
_R
S
%%Page: (13) 13
%%BeginPageSetup
_S
76 24 translate
/pagenum 13 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(      enum data_content4 {) s
5 624 M
(              NFS4_CONTENT_DATA            = 0,) s
5 613 M
(              NFS4_CONTENT_APP_DATA_HOLE   = 1,) s
5 602 M
(              NFS4_CONTENT_HOLE            = 2,) s
5 591 M
(              NFS4_CONTENT_PROTECTED_DATA  = 3,) s
5 580 M
(      };) s
5 558 M
(      struct data_protected4 {) s
5 547 M
(              nfs_protection_info4 pd_type;) s
5 536 M
(              offset4              pd_offset;) s
5 525 M
(              bool                 pd_allocated;) s
5 514 M
(              opaque               pd_info<>;) s
5 503 M
(              opaque               pd_data<>;) s
5 492 M
(      };) s
5 470 M
(   The pd_offset field specifies the byte offset where data should be) s
5 459 M
(   read or written.  The number of bytes to write is specified by the) s
5 448 M
(   size of the pd_data array.) s
5 426 M
(   The pd_allocated field is equivalent to the d_allocated field in the) s
5 415 M
(   data4 type specified in [PROVISIONAL-NFSV42].) s
5 393 M
(   The opaque pd_info field contains a packed array of fixed-size) s
5 382 M
(   protection fields.  The length of the array must be consistent with) s
5 371 M
(   the pd_offset and count arguments specified for the data range of the) s
5 360 M
(   operation.  The size and format of the contents of each field in the) s
5 349 M
(   array is determined by the value of the pd_type field.) s
5 327 M
(   The opaque pd_data field contains the normal data being conveyed in) s
5 316 M
(   this operation.) s
5 294 M
(2.5.  READ_PLUS) s
5 272 M
(   The READ_PLUS operation reads protection information using the) s
5 261 M
(   NFS4_CONTENT_PROTECTED_DATA content type.) s
5 239 M
(      union read_plus_content switch \(data_content4 rpc_content\) {) s
5 228 M
(      case NFS4_CONTENT_DATA:) s
5 217 M
(              data4                rpc_data;) s
5 206 M
(      case NFS4_CONTENT_APP_DATA_HOLE:) s
5 195 M
(              app_data_hole4       rpc_adh;) s
5 184 M
(      case NFS4_CONTENT_HOLE:) s
5 173 M
(              data_info4           rpc_hole;) s
5 162 M
(      case NFS4_CONTENT_PROTECTED_DATA:) s
5 151 M
(              data_prot_fields4    rpc_pdata;) s
5 140 M
(      default:) s
5 129 M
(              void;) s
5 118 M
(   };) s
5 74 M
(Lever                    Expires April 21, 2014                [Page 13]) s
_R
S
%%Page: (14) 14
%%BeginPageSetup
_S
76 24 translate
/pagenum 14 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(   The offset and length arguments of the READ_PLUS operation) s
5 624 M
(   \(rpa_offset and rpa_count\) determine the data byte range covered by) s
5 613 M
(   the protection information and normal data returned in each request.) s
5 591 M
(   For example, suppose the protection type mandated 8-byte protection) s
5 580 M
(   fields and a 512-byte protection interval.  A READ_PLUS requesting) s
5 569 M
(   protection information for a 4096-byte range of a file would receive) s
5 558 M
(   an array of eight 8-byte protection fields, or 64 bytes.) s
5 536 M
(2.6.  WRITE_PLUS) s
5 514 M
(   The WRITE_PLUS operation writes protection information using the) s
5 503 M
(   NFS4_CONTENT_PROTECTED_DATA content type.) s
5 481 M
(      union write_plus_arg4 switch \(data_content4 wpa_content\) {) s
5 470 M
(      case NFS4_CONTENT_DATA:) s
5 459 M
(              data4                wpa_data;) s
5 448 M
(      case NFS4_CONTENT_APP_DATA_HOLE:) s
5 437 M
(              app_data_hole4       wpa_adh;) s
5 426 M
(      case NFS4_CONTENT_HOLE:) s
5 415 M
(              data_info4           wpa_hole;) s
5 404 M
(      case NFS4_CONTENT_PROTECTED_DATA:) s
5 393 M
(              data_prot_fields4    wpa_pdata;) s
5 382 M
(      default:) s
5 371 M
(              void;) s
5 360 M
(      };) s
5 338 M
(   The offset and length arguments of the WRITE_PLUS operation) s
5 327 M
(   \(pd_offset and the size of pd_data\) determine the data byte range) s
5 316 M
(   covered by the protection information.) s
5 294 M
(   For example, suppose the protection type mandated 8-byte protection) s
5 283 M
(   fields and a 512-byte protection interval.  A WRITE_PLUS writing) s
5 272 M
(   protection information to a 4096-byte range of a file would send an) s
5 261 M
(   array of eight 8-byte protection fields, or 64 bytes.) s
5 239 M
(2.7.  Error codes) s
5 217 M
(   New error codes are introduced to allow an NFSv4 server to convey) s
5 206 M
(   integrity-related failure modes to clients.  These new codes include) s
5 195 M
(   \(but are not limited to\) the following:) s
5 173 M
(      enum nfsstat4 {) s
5 162 M
(      ...) s
5 151 M
(              NFS4ERR_PROT_NOTSUPP = 10200,) s
5 140 M
(              NFS4ERR_PROT_INVAL   = 10201,) s
5 129 M
(              NFS4ERR_PROT_FAIL    = 10202,) s
5 118 M
(              NFS4ERR_PROT_LATFAIL = 10203,) s
5 74 M
(Lever                    Expires April 21, 2014                [Page 14]) s
_R
S
%%Page: (15) 15
%%BeginPageSetup
_S
76 24 translate
/pagenum 15 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(      };) s
5 613 M
(   NFS4ERR_PROT_NOTSUPP:  The protection type specified in an operation) s
5 602 M
(      is not supported for the FSID upon which the file resides.) s
5 580 M
(   NFS4ERR_PROT_INVAL:  The protection information passed as an argument) s
5 569 M
(      is garbled \(cf. BADXDR\).  This error code MUST be returned if the) s
5 558 M
(      offset and length of read or written data does not align with the) s
5 547 M
(      protection interval specified by the protection type.) s
5 525 M
(   NFS4ERR_PROT_FAIL:  During a WRITE_PLUS operation, the protection) s
5 514 M
(      information does not verify the written data.  If this was an) s
5 503 M
(      UNSTABLE WRITE_PLUS, the client should retry the operation using) s
5 492 M
(      FILE_SYNC so the server can report precisely where the data writes) s
5 481 M
(      are failing.) s
5 459 M
(   NFS4ERR_PROT_LATFAIL:  During a READ_PLUS operation, the protection) s
5 448 M
(      information does not verify the read data.  This error code) s
5 437 M
(      reports a verification that occurred before the data arrives at an) s
5 426 M
(      NFSv4 client.  The client is not required to read protection) s
5 415 M
(      information to see this error.) s
5 393 M
(      If data integrity verification fails while a server is pre-) s
5 382 M
(      fetching data, the failure cannot be reported until the client) s
5 371 M
(      reads the section of the file where the failure occurs.  Pre-) s
5 360 M
(      fetched data might never be read by a client, therefore a data) s
5 349 M
(      integrity verification failure that occured while pre-fetching may) s
5 338 M
(      never be reported to an NFS client or an application.) s
5 74 M
(Lever                    Expires April 21, 2014                [Page 15]) s
_R
S
%%Page: (16) 16
%%BeginPageSetup
_S
76 24 translate
/pagenum 16 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(3.  Protocol Design Considerations) s
5 613 M
(3.1.  Protection Envelopes) s
5 591 M
(   We explore protection envelopes that might appear in a typical NFSv4) s
5 580 M
(   deployment, and design an architecture that guarantees unbroken data) s
5 569 M
(   integrity protection through each of these envelopes.) s
5 547 M
(   In addition, it is useful to permit varying degrees of server,) s
5 536 M
(   client, and application participation in a data protection scheme.) s
5 525 M
(   We can define protection envelopes of varying circumference that) s
5 514 M
(   allow implementations and deployments to choose a level of) s
5 503 M
(   complexity, data protection, and performance impact that suits their) s
5 492 M
(   applications.) s
5 470 M
(   The following are presented in order of smallest to largest) s
5 459 M
(   circumference.  To enable end-to-end protection, each protection) s
5 448 M
(   envelope in this list depends on having the previous envelope in) s
5 437 M
(   place.) s
5 415 M
(   Server storage:  The storage subsystem on an NFSv4 server is below) s
5 404 M
(      the physical filesystems on that server.  If a data integrity) s
5 393 M
(      mechanism is available on the block storage, the physical) s
5 382 M
(      filesystem may or may not choose to use it.  Data integrity) s
5 371 M
(      verification failures are reflected to NFS clients as simple I/O) s
5 360 M
(      errors.) s
5 338 M
(   Server filesystem:  The physical filesystem on an NFSv4 server may) s
5 327 M
(      provide a data integrity mechanism based on its own checksumming) s
5 316 M
(      scheme, or by using a standard block storage mechanism such as T10) s
5 305 M
(      PI/DIX [DIX].  The NFSv4 service on that system may or may not) s
5 294 M
(      choose to use the filesystem's integrity service.  Data integrity) s
5 283 M
(      verification failures are reflected to NFS clients as simple I/O) s
5 272 M
(      errors.) s
5 250 M
(   Server:  An NFSv4 server may choose to use the local filesystem's) s
5 239 M
(      data integrity mechanism, but not to advertise a data integrity) s
5 228 M
(      mechanism via NFSv4.  Data integrity verification failures are) s
5 217 M
(      reflected to NFS clients as simple I/O errors.) s
5 195 M
(   Client-server:  If an NFSv4 server advertises data integrity) s
5 184 M
(      mechanisms via NFSv4, an NFSv4 client may choose to use NFSv4 data) s
5 173 M
(      integrity protection without advertising the capability to) s
5 162 M
(      applications running on it.  It may also choose not to use NFSv4) s
5 151 M
(      data integrity protection at all.  Data integrity verification) s
5 140 M
(      failures are reflected to applications as simple I/O errors.) s
5 74 M
(Lever                    Expires April 21, 2014                [Page 16]) s
_R
S
%%Page: (17) 17
%%BeginPageSetup
_S
76 24 translate
/pagenum 17 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(   Application-client-server:  Suppose that an NFSv4 client chooses to) s
5 624 M
(      use data integrity protection via NFSv4 and that. the capability) s
5 613 M
(      is advertised to applications.  Applications may or may not choose) s
5 602 M
(      to use the capability.  An NFSv4 client uses on-the-wire data) s
5 591 M
(      integrity when an application chooses to use the capability, but) s
5 580 M
(      may or may not use it when the application chooses not to use it.) s
5 569 M
(      Data integrity verification failures are reflected to applications) s
5 558 M
(      as is.  This is full end-to-end data integrity protection via) s
5 547 M
(      NFSv4.) s
5 525 M
(   Note that the "server" envelope is not externally distinguishable) s
5 514 M
(   from a server that does not support data integrity protection at all) s
5 503 M
(   \(other than that it provides somewhat better data integrity) s
5 492 M
(   guarantees than one that does not support data integrity protection\).) s
5 481 M
(   This is a way to introduce stronger data integrity without requiring) s
5 470 M
(   a large deployment of NFSv4 clients capable of integrity) s
5 459 M
(   verification.  Or, stronger data integrity can be introduced to) s
5 448 M
(   legacy NFS environments that have no protocol mechanisms for) s
5 437 M
(   extending the protection envelop past the server.) s
5 415 M
(   The "application-client-server" envelope illustrates that, on a) s
5 404 M
(   protection-enabled file system, data integrity verification can be) s
5 393 M
(   used on a per-file basis.  Applications may choose to use protection) s
5 382 M
(   for some files and not others.  Some applications may choose to use) s
5 371 M
(   protection, and some applications may choose not to use it.) s
5 349 M
(   Note that in each case, data integrity protection is available to the) s
5 338 M
(   edge of the farthest protection envelope.  Data integrity is) s
5 327 M
(   protected only after the data arrives at a protection envelope) s
5 316 M
(   boundary, and before it leaves that boundary.  Legacy NFS clients) s
5 305 M
(   continue to access protected data on a server, but are unaware of) s
5 294 M
(   data integrity verification failures except as generic I/O errors.) s
5 272 M
(   The client-cache-server case is considered separately.  The "cache") s
5 261 M
(   node in this case may be a dedicated NFSv4 cache, a caching peer-to-) s
5 250 M
(   peer NFSv4 client, or a pNFS metadata server.  A separate protection) s
5 239 M
(   envelope exists between an NFSv4 client and an intermediate cache,) s
5 228 M
(   and that cache and the NFSv4 server where the protected data resides.) s
5 206 M
(3.2.  Protecting Holes) s
5 184 M
(   NFSv4 minor version 2 [PROVISIONAL-NFSV42] exposes clients to certain) s
5 173 M
(   mechanics of the underlying file systems on servers which allow more) s
5 162 M
(   direct control of the storage space utilized by files.  The goal of) s
5 151 M
(   these new features is to economize the transfer and storage of file) s
5 140 M
(   data.  These new features include support for reading sparse files) s
5 129 M
(   efficiently, space reservation, and punching holes \(similar to a TRIM) s
5 118 M
(   or DISCARD operation on a block device\) in files.) s
5 74 M
(Lever                    Expires April 21, 2014                [Page 17]) s
_R
S
%%Page: (18) 18
%%BeginPageSetup
_S
76 24 translate
/pagenum 18 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(   A hole is an area of a file that can be represented in a file system) s
5 624 M
(   by having no backing storage.  By definition any read of that region) s
5 613 M
(   of the file returns a range of bytes containing zero.  Any write to) s
5 602 M
(   that region allocates fresh backing storage normally.) s
5 580 M
(   NFSv4.2 extends this notion to allow NFSv4 clients to specify a) s
5 569 M
(   pattern containing non-zero bytes to be returned when reading that) s
5 558 M
(   region of a file.  The protocol feature is independent of how an) s
5 547 M
(   NFSv4 server's file system chooses to store this data.  In fact a) s
5 536 M
(   server's file system is free to simply store zeroes or a byte pattern) s
5 525 M
(   on disk as raw data rather than in some optimized fashion.) s
5 503 M
(   If an NFSv4 server's file system does use an optimized storage) s
5 492 M
(   method, a decision must be made about whether accompanying PI is) s
5 481 M
(   needed.  For a plain hole \(where zero is always returned by a raw) s
5 470 M
(   data read operation\) the intention is that there is no backing) s
5 459 M
(   storage there, thus PI is not meaningful.  However a read operation) s
5 448 M
(   that requests protection information must return something) s
5 437 M
(   meaningful.  For protection types that mandate only a checksum guard) s
5 426 M
(   tag \(and do not store either reference or or application tag data\), a) s
5 415 M
(   checksum for each protection interval can be generated on the server) s
5 404 M
(   during a normal read operation, or on the client if a sparse read is) s
5 393 M
(   used.) s
5 371 M
(   For a data hole \(where some non-zero pattern is returned by a raw) s
5 360 M
(   read operation\), storing PI is optional, and depends on whether the) s
5 349 M
(   protection type requires the storage to return an intact application) s
5 338 M
(   tag.  Without the requirement of storing the application tag, the) s
5 327 M
(   file system could discard the PI after a write operation, and) s
5 316 M
(   recompute it from the pattern on a read operation.  Or, it could) s
5 305 M
(   store the PI information as part of the pattern metadata.) s
5 283 M
(3.3.  Multi-server Considerations) s
5 261 M
(   The NFSv4 protocol provides several mechanisms for NFSv4 servers to) s
5 250 M
(   co-operate in ways that enhance performance scalability and data) s
5 239 M
(   availability.  An NFSv4 client can access the same data serially on) s
5 228 M
(   single NFSv4 servers when a file system is replicated.  A file system) s
5 217 M
(   can be migrated between NFSv4 servers transparently to clients.  Or a) s
5 206 M
(   file system can be constructed from files that reside in parts on) s
5 195 M
(   several NFSv4 servers.) s
5 173 M
(   To allow coherent use of a data integrity mechanism:) s
5 151 M
(   o  Each NFSv4 Data Server hosting a particular file system MUST) s
5 140 M
(      support the same protection types.) s
5 74 M
(Lever                    Expires April 21, 2014                [Page 18]) s
_R
S
%%Page: (19) 19
%%BeginPageSetup
_S
76 24 translate
/pagenum 19 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(   o  Each replica of a file system MUST support the same protection) s
5 624 M
(      types.) s
5 602 M
(   o  The destination of a file system migration MUST support all) s
5 591 M
(      protection types supported by the source, and the transitioned) s
5 580 M
(      file system MUST use the same protection type it did on the source) s
5 569 M
(      server.) s
5 547 M
(   Enforcing these mandates is likely outside the purview of the NFSv4) s
5 536 M
(   protocol, particularly because no mechanism for transitioning file) s
5 525 M
(   systems is set out by any NFSv4 protocol specification.  However,) s
5 514 M
(   enforcing such mandates could be built into administrative tools.) s
5 492 M
(3.3.1.  pNFS and Protection Information) s
5 470 M
(   There has been some uncertainty about whether Protection Information) s
5 459 M
(   should be considered metadata or data. pNFS has a convenient) s
5 448 M
(   operational definition of data and metadata: if it's data, it goes to) s
5 437 M
(   the Data Server; if it's metadata, it goes to the Metadata Server.) s
5 415 M
(   Protection Information belongs with the data it protects, which is) s
5 404 M
(   written to Data Servers.  Therefore Protection Information is data.) s
5 393 M
(   If a client ever writes Protection Information to a Metadata Server,) s
5 382 M
(   such Protection Information will be forwarded to an appropriate Data) s
5 371 M
(   Server for storage.) s
5 349 M
(   For the file layout type, which uses NFSv4 when communicating with) s
5 338 M
(   Data Servers, all protection types have protocol support for) s
5 327 M
(   Protection Information.  For other layout types, support may or may) s
5 316 M
(   not be available in their respective data protocols.  Layout) s
5 305 M
(   implementations are not guaranteed to support every protection type.) s
5 283 M
(3.3.2.  Server-to-server copy) s
5 261 M
(   NFSv4 minor version 2 [PROVISIONAL-NFSV42] introduces a new multi-) s
5 250 M
(   server feature known as server-to-server copy.  Clients can offload) s
5 239 M
(   the data copy portion of copying part or all of a file.  The) s
5 228 M
(   destination file is recognized as a separate entity \(ie. has a unique) s
5 217 M
(   file handle\), not as a replica of the original file.) s
5 195 M
(   As such, the destination file may be stored in a file system that has) s
5 184 M
(   a different protection type than the source file, or may not be) s
5 173 M
(   protected at all.  If the destination filesystem supports the same) s
5 162 M
(   protection type as the source filesystem, the copy offload operation) s
5 151 M
(   MUST copy Protection Information associated with the source file to) s
5 140 M
(   the destination file.) s
5 118 M
(   Server implementors MAY provide data integrity verification on both) s
5 74 M
(Lever                    Expires April 21, 2014                [Page 19]) s
_R
S
%%Page: (20) 20
%%BeginPageSetup
_S
76 24 translate
/pagenum 20 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(   ends of the offloaded copy operation.  A server MUST report data) s
5 624 M
(   integrity verification failures that occur during an offloaded copy) s
5 613 M
(   operation.) s
5 74 M
(Lever                    Expires April 21, 2014                [Page 20]) s
_R
S
%%Page: (21) 21
%%BeginPageSetup
_S
76 24 translate
/pagenum 21 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(4.  Security Considerations) s
5 613 M
(   A man-in-the-middle attack can replace both the data and integrity) s
5 602 M
(   metadata in any NFSv4 request that is sent in the clear.  Therefore,) s
5 591 M
(   when a data integrity protection mechanism is deployed on an) s
5 580 M
(   untrusted network, it is strongly urged that a cryptographically) s
5 569 M
(   secure integrity-checking RPC transport, such as RPCSEC GSS Kerberos) s
5 558 M
(   5i [RFC2203], is used to convey NFSv4 traffic on open networks.) s
5 74 M
(Lever                    Expires April 21, 2014                [Page 21]) s
_R
S
%%Page: (22) 22
%%BeginPageSetup
_S
76 24 translate
/pagenum 22 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(5.  IANA Considerations) s
5 613 M
(   This document currently does not require actions by IANA.  However,) s
5 602 M
(   see Section 2.1.) s
5 74 M
(Lever                    Expires April 21, 2014                [Page 22]) s
_R
S
%%Page: (23) 23
%%BeginPageSetup
_S
76 24 translate
/pagenum 23 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(6.  Acknowledgements) s
5 613 M
(   The author of this document gratefully acknowledges the contributions) s
5 602 M
(   of Martin K. Petersen, David Noveck, and Spencer Shepler.  Bill) s
5 591 M
(   Baker, Chris Mason, and Tom Haynes also provided guidance and) s
5 580 M
(   suggestions.) s
5 74 M
(Lever                    Expires April 21, 2014                [Page 23]) s
_R
S
%%Page: (24) 24
%%BeginPageSetup
_S
76 24 translate
/pagenum 24 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(7.  References) s
5 613 M
(7.1.  Normative References) s
5 591 M
(   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate) s
5 580 M
(              Requirement Levels", BCP 14, RFC 2119, March 1997.) s
5 558 M
(   [RFC2203]  Eisler, M., Chiu, A., and L. Ling, "RPCSEC_GSS Protocol) s
5 547 M
(              Specification", RFC 2203, September 1997.) s
5 525 M
(   [RFC3447]  Jonsson, J. and B. Kaliski, "Public-Key Cryptography) s
5 514 M
(              Standards \(PKCS\) #1: RSA Cryptography Specifications) s
5 503 M
(              Version 2.1", RFC 3447, February 2003.) s
5 481 M
(   [RFC4506]  Eisler, M., "XDR: External Data Representation Standard",) s
5 470 M
(              STD 67, RFC 4506, May 2006.) s
5 448 M
(   [RFC5531]  Thurlow, R., "RPC: Remote Procedure Call Protocol) s
5 437 M
(              Specification Version 2", RFC 5531, May 2009.) s
5 415 M
(7.2.  Informative References) s
5 393 M
(   [DIX]      Petersen, M., "I/O Controller Data Integrity Extensions",) s
5 382 M
(              November 2009, <http://oss.oracle.com/~mkp/docs/dif.pdf>.) s
5 360 M
(   [PROVISIONAL-NFSV42]) s
5 349 M
(              Haynes, T., Ed., "NFS Version 4 Minor Version 2",) s
5 338 M
(              March 2013, <http://datatracker.ietf.org/doc/) s
5 327 M
(              draft-ietf-nfsv4-minorversion2>.) s
5 305 M
(   [PROVISIONAL-NFSV42-XDR]) s
5 294 M
(              Haynes, T., Ed., "NFS Version 4 Minor Version 2 Protocol) s
5 283 M
(              External Representation Standard \(XDR\) Description",) s
5 272 M
(              March 2013, <https://datatracker.ietf.org/doc/) s
5 261 M
(              draft-ietf-nfsv4-minorversion2-dot-x>.) s
5 239 M
(   [T10-SBC2]) s
5 228 M
(              Elliott, R., Ed., "ANSI INCITS 405-2005, Information) s
5 217 M
(              Technology - SCSI Block Commands - 2 \(SBC-2\)",) s
5 206 M
(              November 2004.) s
5 74 M
(Lever                    Expires April 21, 2014                [Page 24]) s
_R
S
%%Page: (25) 25
%%BeginPageSetup
_S
76 24 translate
/pagenum 25 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
5 668 M
(Internet-Draft       NFSv4 End-to-end Data Integrity        October 2013) s
5 635 M
(Author's Address) s
5 613 M
(   Charles Lever) s
5 602 M
(   Oracle Corporation) s
5 591 M
(   1015 Granger Avenue) s
5 580 M
(   Ann Arbor, MI  48104) s
5 569 M
(   US) s
5 547 M
(   Phone: +1 734 274 2396) s
5 536 M
(   Email: chuck.lever@oracle.com) s
5 74 M
(Lever                    Expires April 21, 2014                [Page 25]) s
_R
S
%%Page: (26) 26
%%BeginPageSetup
_S
76 24 translate
/pagenum 26 def
/fname () def
/fdir (.) def
/ftail (.) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
_R
S
%%Trailer
%%Pages: 26
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
