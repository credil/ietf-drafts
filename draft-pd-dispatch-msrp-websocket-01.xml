<?xml version="1.0" encoding="UTF-8"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- Normative References -->
<!ENTITY RFC2119 SYSTEM
	"http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
	<!-- MUST, SHOULD, MAY -->
<!ENTITY RFC4975 SYSTEM
	"http://xml.resource.org/public/rfc/bibxml/reference.RFC.4975.xml">
	<!-- MSRP -->
<!ENTITY RFC4976 SYSTEM
	"http://xml.resource.org/public/rfc/bibxml/reference.RFC.4976.xml">
	<!-- MSRP Relay -->
<!ENTITY RFC5234 SYSTEM
	"http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml">
	<!-- ABNF -->
<!ENTITY RFC6455 SYSTEM
	"http://xml.resource.org/public/rfc/bibxml/reference.RFC.6455.xml">
	<!-- WebSocket -->

<!-- Informative References -->
<!ENTITY RFC2606 SYSTEM
	"http://xml.resource.org/public/rfc/bibxml/reference.RFC.2606.xml">
	<!-- Reserved Top Level DNS Names -->
<!ENTITY RFC2616 SYSTEM
	"http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml">
	<!-- HTTP -->
<!ENTITY RFC2617 SYSTEM
	"http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml">
	<!-- HTTP Digest -->
<!ENTITY RFC3986 SYSTEM
	"http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml">
	<!-- URI -->
<!ENTITY RFC5246 SYSTEM
	"http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
	<!-- TLS -->
<!ENTITY RFC6265 SYSTEM
	"http://xml.resource.org/public/rfc/bibxml/reference.RFC.6265.xml">
	<!-- HTTP Cookie -->
<!ENTITY draft-sip-ws PUBLIC ""
	'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-sipcore-sip-websocket.xml'>
	<!-- SIP over WebSocket -->
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->

<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most
     I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->

<rfc category="std" docName="draft-pd-dispatch-msrp-websocket-01" ipr="trust200902"
	updates="4975, 4976">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: trust200902, noModificationTrust200902,
	noDerivativesTrust200902, or pre5378Trust200902
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only
         necessary if the full title is longer than 39 characters -->

    <title abbrev="WebSocket as a Transport for MSRP">The WebSocket Protocol
	as a Transport for the Message Session Relay Protocol (MSRP)</title>
    
    <author fullname="Peter Dunkley" initials="P." surname="Dunkley">
      <organization>Crocodile RCS Ltd</organization>
      <address>
        <postal>
          <street>Forum 3, Parkway</street>
          <street>Solent Business Park, Whiteley</street>
          <city>Fareham</city>
          <code>PO15 7FH</code>
          <country>United Kingdom</country>
        </postal>
        <email>peter.dunkley@crocodile-rcs.com</email>
      </address>
    </author>

    <author fullname="Gavin Llewellyn" initials="G." surname="Llewellyn">
      <organization>Crocodile RCS Ltd</organization>
      <address>
        <postal>
          <street>Forum 3, Parkway</street>
          <street>Solent Business Park, Whiteley</street>
          <city>Fareham</city>
          <code>PO15 7FH</code>
          <country>United Kingdom</country>
        </postal>
        <email>gavin.llewellyn@crocodile-rcs.com</email>
      </address>
    </author>

    <author fullname="Victor Pascual" initials="V." surname="Pascual">
      <organization>Acme Packet</organization>
      <address>
        <postal>
          <street>Anabel Segura 10</street>
          <city>Madrid, Madrid</city>
          <code>28108</code>
          <country>Spain</country>
        </postal>
        <email>vpascual@acmepacket.com</email>
      </address>
    </author>

    <date year="2013" />
    <!-- If the month and year are both specified and are the current ones,
         xml2rfc will fill in the current day for you. If only the current year
	 is specified, xml2rfc will fill in the current day and month for you.
	 If the year is not the current one, it is necessary to specify at
	 least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally
	 sufficient to specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>IETF</area>
    <workgroup>Dispatch Working Group</workgroup>
    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF.
	 -->

    <keyword>MSRP</keyword>
    <keyword>WebSocket</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>The WebSocket protocol enables two-way real-time communication between
	 clients and servers. This document specifies a new WebSocket
	 sub-protocol as a reliable transport mechanism between MSRP (Message
	 Session Relay Protocol) clients and relays to enable usage of MSRP in
	 new scenarios. This document normatively updates RFC 4975 and
         RFC 4976.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction" anchor="introduction">
      <t>The WebSocket <xref target="RFC6455" /> protocol enables message
	 exchange between clients and servers on top of a persistent TCP
	 connection (optionally secured with TLS <xref target="RFC5246" />).
	 The initial protocol handshake makes use of HTTP
	 <xref target="RFC2616" /> semantics, allowing the WebSocket protocol
	 to reuse existing HTTP infrastructure.</t>
      <t>Modern web browsers include a WebSocket client stack complying with
	 the WebSocket API <xref target="WS-API" /> as specified by the W3C.
	 It is expected that other client applications (those running in
	 personal computers and devices such as smart-phones) will also make a
	 WebSocket client stack available. The specification in this document
	 enables usage of MSRP in these scenarios.</t>
      <t>This specification defines a new WebSocket sub-protocol (as defined in
	 section 1.9 in <xref target="RFC6455" />) for transporting MSRP
	 messages between a WebSocket client and MSRP relay
	 <xref target="RFC4976" /> containing a WebSocket server, a new
	 transport for MSRP, and procedures for MSRP clients and relays
	 implementing the WebSocket transport.</t>
    </section>
    
    <section title="Terminology" anchor="terminology">
      <t>All diagrams, examples, and notes in this specification are
	 non-normative, as are all sections explicitly marked non-normative.
	 Everything else in this specification is normative.</t>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
	 "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
	 document are to be interpreted as described in
	 <xref target="RFC2119" />.</t>

      <section title="Definitions" anchor="definitions">
        <t>
          <list style="hanging" hangIndent="6">
            <t hangText="MSRP WebSocket Client:">An MSRP entity capable of
	       opening outbound connections to MSRP relays which are WebSocket
	       servers and communicating using the WebSocket MSRP sub-protocol
	       as defined by this document.</t>
            <t hangText="MSRP WebSocket Server:">An MSRP entity (specifically
	       an MSRP relay <xref target="RFC4976" />) capable of listening
               for inbound connections from WebSocket clients and communicating
               using the WebSocket MSRP sub-protocol as defined by this
               document.</t>
          </list>
        </t>
      </section>


    </section>

    <section title="The WebSocket Protocol" anchor="the_websocket_protocol">
      <t>_This section is non-normative._</t>

      <t>The WebSocket protocol <xref target="RFC6455"/> is a transport layer
	 on top of TCP (optionally secured with TLS <xref target="RFC5246"/>)
	 in which both client and server exchange message units in both
	 directions. The protocol defines a connection handshake, WebSocket
	 sub-protocol and extensions negotiation, a frame format for sending
	 application and control data, a masking mechanism, and status codes
	 for indicating disconnection causes.</t>

      <t>The WebSocket connection handshake is based on HTTP
	 <xref target="RFC2616"/> and utilizes the HTTP GET method with an
	 "Upgrade" request. This is sent by the client and then answered by
	 the server (if the negotiation succeeded) with an HTTP 101 status
	 code. Once the handshake is completed the connection upgrades from
	 HTTP to the WebSocket protocol. This handshake procedure is designed
	 to reuse the existing HTTP infrastructure. During the connection
	 handshake, client and server agree on the application protocol to use
	 on top of the WebSocket transport. Such application protocol (also
	 known as a "WebSocket sub-protocol") defines the format and semantics
	 of the messages exchanged by the endpoints. This could be a custom
	 protocol or a standardized one (such as the WebSocket MSRP
	 sub-protocol defined in this document). Once the HTTP 101 response is
	 processed both client and server reuse the underlying TCP connection
	 for sending WebSocket messages and control frames to each other.
	 Unlike plain HTTP, this connection is persistent and can be used for
	 multiple message exchanges.</t>

      <t>WebSocket defines message units to be used by applications for the
	 exchange of data, so it provides a message boundary-preserving
	 transport layer. These message units can contain either UTF-8 text or
	 binary data, and can be split into multiple WebSocket text/binary
	 transport frames as needed by the WebSocket stack.
        <list style="empty">
          <t>The <xref target="WS-API">WebSocket API</xref> for web browsers
	     only defines callbacks to be invoked upon receipt of an entire
	     message unit, regardless of whether it was received in a single
	     WebSocket frame or split across multiple frames.</t>
        </list>
      </t>
    </section>
    
    <section title="The WebSocket MSRP Sub-Protocol"
	anchor="the_websocket_msrp_sub_protocol">
        <t>The term WebSocket sub-protocol refers to an application-level
	   protocol layered on top of a WebSocket connection. This document
	   specifies the WebSocket MSRP sub-protocol for carrying MSRP requests
	   and responses through a WebSocket connection.</t>
      <section title="Handshake" anchor="handshake">
        <t>The MSRP WebSocket Client and MSRP WebSocket Server negotiate usage
	   of the WebSocket MSRP sub-protocol during the WebSocket handshake
	   procedure as defined in section 1.3 of <xref target="RFC6455"/>.
	   The Client MUST include the value "msrp" in the
	   Sec-WebSocket-Protocol header in its handshake request. The 101
	   reply from the Server MUST contain "msrp" in its corresponding
	   Sec-WebSocket-Protocol header.</t>

        <t>Below is an example of a WebSocket handshake in which the Client
	   requests the WebSocket MSRP sub-protocol support from the Server:
	   <figure><artwork><![CDATA[
  GET / HTTP/1.1
  Host: a.example.com
  Upgrade: websocket
  Connection: Upgrade
  Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
  Origin: http://www.example.com
  Sec-WebSocket-Protocol: msrp
  Sec-WebSocket-Version: 13
]]></artwork></figure></t>

        <t>The handshake response from the Server accepting the WebSocket MSRP
	   sub-protocol would look as follows:<figure><artwork><![CDATA[
  HTTP/1.1 101 Switching Protocols
  Upgrade: websocket
  Connection: Upgrade
  Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
  Sec-WebSocket-Protocol: msrp
]]></artwork></figure></t>

        <t>Once the negotiation has been completed, the WebSocket connection is
	   established and can be used for the transport of MSRP requests and
	   responses. The WebSocket messages transmitted over this connection
	   MUST conform to the negotiated WebSocket sub-protocol.</t>
      </section>

      <section title="MSRP encoding" anchor="msrp_encoding">
        <t>WebSocket messages can be transported in either UTF-8 text frames or
	   binary frames. MSRP <xref target="RFC4975"/> allows both text and
	   binary bodies in MSRP requests. Therefore MSRP WebSocket Clients
	   and Servers MUST accept both text and binary frames.</t>
      </section>
    </section>

    <section title="MSRP WebSocket Transport" anchor="msrp_websocket_transport">
      <section title="General" anchor="general">
	<t>WebSocket clients cannot receive WebSocket connections initiated by
           other WebSocket clients or WebSocket servers. This means that it is
	   impossible for an MSRP client to communicate directly with other
	   MSRP clients. Therefore, all MSRP over WebSocket messages MUST be
	   routed via an MSRP WebSocket Server.</t>
	<t>MSRP WebSocket Servers can be used to route
	   MSRP messages between MSRP WebSocket Clients, and between MSRP
	   WebSocket Clients and "normal" MSRP clients and relays.</t>
	<t>Each MSRP message MUST be carried within a single WebSocket message,
	   and a WebSocket message MUST NOT contain more than one MSRP message.
	  <list style="empty">
	    <t>This simplifies parsing of MSRP messages for both clients and
	       servers. When large messages are sent MSRP chunking (as defined
	       in section 5.1 of <xref target="RFC4975" />) MUST be used to
	       split the message into several smaller MSRP messages.</t>
	  </list></t>
      </section>
      <section title="Updates to RFC 4975" anchor="updates_to_rfc_4975">
	<section title="MSRP URI Transport Parameter"
		anchor="msrp_uri_transport_parameter">
	  <t>This document defines the value "ws" as the transport parameter
	     value for an MSRP URI <xref target="RFC3986" /> to be contacted
	     using the MSRP WebSocket sub-protocol as transport.</t>
	  <t>The updated augmented BNF (Backus-Naur Form)
	     <xref target="RFC5234" /> for this parameter is the following (the
	     original BNF for this parameter can be found in
	     <xref target="RFC4975" />):<figure><artwork><![CDATA[
  transport  =  "tcp" / "ws" / 1*ALPHANUM
]]></artwork></figure></t>
	</section>
        <section title="SDP Transport Protocol"
		anchor="sdp_transport_protocol">
	  <t>This document does not define a new SDP transport protocol for
	     MSRP over WebSockets. As all MSRP over WebSocket messages MUST be
	     routed via an MSRP WebSocket Server, it is acceptable for an MSRP
	     WebSocket Client to specify the "TCP/MSRP" or "TCP/TLS/MSRP"
	     protocols in the SDP m-line - that being the protocol used by
	     non-WebSocket clients and between MSRP relays
	     (<xref target="RFC4975"/> section 8.1).</t>

	  <t>The "ws" transport parameter will appear in the endpoint URI in
	     SDP "path" attribute (<xref target="RFC4975"/> section 8.2);
	     compliant MSRP implementation should already allow unrecognised
	     transports, provided that they do not have to establish a direct
	     connection to the resource described by the URI.</t>
	</section>
      </section>
      <section title="Updates to RFC 4976" anchor="updates_to_rfc_4976">
	<section title="AUTH Request Authentication"
		anchor="auth_request_authentication">
	  <t>The MSRP relay specification <xref target="RFC4976" /> states that
	     AUTH requests MUST be authenticated. This document modifies this
	     requirement to state that all connections between MSRP clients and
	     relays MUST be authenticated. In the case of the MSRP WebSocket
	     Clients there are two possible authentication mechanisms:
	     <list style="numbers">
		<t>HTTP Digest authentication in AUTH (as per
		   <xref target="RFC4976" />).</t>
		<t>Cookie-based or HTTP Digest authentication in the WebSocket
		   Handshake (see <xref target="authentication" />).</t>
	     </list></t>
	</section>
	<section title="Use of TLS"
		anchor="use_of_tls">
	  <t>The MSRP relay specification <xref target="RFC4976" /> mandates
	     the use of TLS between MSRP clients and MSRP relays, and specifies
	     the mechanisms that must be used for TLS authentication. This
	     document downgrades the MUSTs with respect to TLS to SHOULDs when
	     using the MSRP WebSocket sub-protocol as transport.  Connections
	     between MSRP WebSocket Clients and Servers SHOULD use secure
	     WebSocket connections, but MAY use insecure WebSocket connections.
	     As the secure WebSocket connections are negotiated between the
	     client's WebSocket stack and the WebSocket server, an MSRP
             WebSocket Client may have no knowledge of, or control over, the
             mechanisms used for TLS authentication.</t>
	</section>
      </section>
    </section>
    
    <section title="Connection Keep Alive" anchor="connection_keep_alive">
      <t>_This section is non-normative._</t>

      <t>It is RECOMMENDED that MSRP WebSocket Clients and Servers keep their
	 WebSocket connections open by sending periodic WebSocket "Ping"
	 frames as described in <xref target="RFC6455"/> section 5.5.2.
        <list style="empty">
          <t>The WebSocket API <xref target="WS-API"/> does not provide a
	     mechanism for applications running in a web browser to control
	     whether or not periodic WebSocket "Ping" frames are sent to the
	     server. The implementation of such a keep alive feature is the
	     decision of each web browser manufacturer and may also depend on
	     the configuration of the web browser.</t>
        </list> </t>

      <t>A future WebSocket protocol extension providing a similar keep alive
	 mechanism could also be used.</t>

      <t>When MSRP WebSocket Clients or Servers cannot use WebSocket "Ping"
	 frames to keep connections open an MSRP implementation MAY use
	 bodiless SEND requests as described in <xref target="RFC4975"/>
	 section 7.1.</t>
    </section>

    <section title="Authentication" anchor="authentication">
      <t>_This section is non-normative._</t>

      <t>Prior to sending MSRP requests, an MSRP WebSocket Client connects to
	 an MSRP WebSocket Server and performs the connection handshake. As
	 described in <xref target="the_websocket_protocol"/> the handshake
	 procedure involves a HTTP GET method request from the Client and a
	 response from the Server including an HTTP 101 status code.</t>

      <t>In order to authorize the WebSocket connection, the MSRP WebSocket
	 Server MAY inspect any Cookie <xref target="RFC6265"/> headers present
	 in the HTTP GET request. For many web applications the value of such
	 a Cookie is provided by the web server once the user has authenticated
         themselves to the web server, which could be done by many existing
	 mechanisms. As an alternative method, the MSRP WebSocket Server could
	 request HTTP authentication by replying to the Client's GET method
	 request with a HTTP 401 status code. The WebSocket protocol
	 <xref target="RFC6455"/> covers this usage in section 4.1:
        <list style="empty">
          <t>If the status code received from the server is not 101, the
	     WebSocket client stack handles the response per HTTP
	     <xref target="RFC2616"/> procedures, in particular the client
	     might perform authentication if it receives 401 status code.</t>
        </list>
      </t>

      <t>Regardless of whether the MSRP WebSocket Server requires
	 authentication during the WebSocket handshake, authentication MAY be
	 requested at MSRP protocol level. Therefore it is RECOMMENDED that an
	 MSRP WebSocket Client implements HTTP Digest <xref target="RFC2617"/>
	 authentication as stated in <xref target="RFC4976"/>.</t>
    </section>
    
    <section title="Examples" anchor="examples">
      <section title="AUTH" anchor="example_auth">
	<t><figure><artwork><![CDATA[
Alice    (MSRP WSS)     a.example.com
|                             |
|HTTP GET (WS handshake) F1   |
|---------------------------->|
|101 Switching Protocols F2   |
|<----------------------------|
|                             |
|AUTH F3                      |
|---------------------------->|
|200 OK F4                    |
|<----------------------------|
|                             |
]]></artwork></figure></t>

        <t>Alice loads a web page using her web browser and retrieves
	   JavaScript code implementing the WebSocket MSRP sub-protocol defined
           in this document. The JavaScript code (an MSRP WebSocket Client)
           establishes a secure WebSocket connection with an MSRP relay (an MSRP
           WebSocket Server) at a.example.com. Upon WebSocket connection, Alice
           constructs and sends an MSRP AUTH request. Since the JavaScript
           stack in a browser has no way to determine the local address from
           which the WebSocket connection was made, this implementation uses a
           random ".invalid" domain name for the hostpart of the From-Path URI
           (see <xref target="msrp_websocket_client_considerations"/>).</t>

        <t>Message details (authentication is omitted for simplicity):</t>

<t><figure><artwork><![CDATA[
F1 HTTP GET (WS handshake)  Alice -> a.example.com (TLS)

GET / HTTP/1.1
Host: a.example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
Origin: https://www.example.com
Sec-WebSocket-Protocol: msrp
Sec-WebSocket-Version: 13


F2 101 Switching Protocols  a.example.com -> Alice (TLS)

HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
Sec-WebSocket-Protocol: msrp


F3 AUTH  Alice -> a.example.com (transport WSS)

MSRP 49fi AUTH
To-Path: msrps://alice@a.example.com:443;ws
From-Path: msrps://df7jal23ls0d.invalid:2855/98cjs;ws
-------49fi$


F4 200 OK  a.example.com -> Alice (transport WSS)

MSRP 49fi 200 OK
To-Path: msrps://df7jal23ls0d.invalid:2855/98cjs;ws
From-Path: msrps://alice@a.example.com:443;ws
Use-Path: msrps://a.example.com:2855/jui787s2f;tcp
Expires: 900
-------49fi$
]]></artwork></figure></t>
      </section>

      <section title="SDP exchange (MSRP WebSocket Client to MSRP Client)"
		anchor="example_sdp_exchange">
        <t>The following example shows SDP that could be included in a SIP
	   message to set up an MSRP session between Alice and Bob where Alice
	   uses a WebSocket MSRP relay.</t>

        <t>Note that SDP does not permit line folding. A "\" in the examples
	   shows a line continuation due to limitations in line length of this
	   document. Neither the backslash nor the extra CRLF is included in
	   the actual SDP.</t>

	<t>Alice makes an offer with a path including the relay:</t>

<t><figure><artwork><![CDATA[
c=IN IP4 a.example.com
m=message 1234 TCP/TLS/MSRP *
a=accept-types:message/cpim text/plain text/html
a=path:msrps://a.example.com:2855/jui787s2f;tcp \
       msrps://df7jal23ls0d.invalid:2855/98cjs;ws
]]></artwork></figure></t>

	<t>In this offer, Alice wishes to receive MSRP messages via the relay
	   at a.example.com. She wants to use TLS as the transport for the MSRP
	   session (beyond the relay). She can accept message/cpim, text/plain,
	   and text/html message bodies in SEND requests.</t>

	<t>Bob's answer to this offer could look like:</t>

<t><figure><artwork><![CDATA[
c=IN IP4 bob.example.com
m=message 1234 TCP/TLS/MSRP *
a=accept-types:message/cpim text/plain
a=path:msrps://bob.example.com:8145/foo;tcp
]]></artwork></figure></t>

	<t>Here Bob wishes to receive the MSRP messages at bob.example.com. He
	   can accept only message/cpim and text/plain message bodies in SEND
	   requests and has rejected the text/html content offered by Alice.
	   He does not need a relay to set up the MSRP session.</t>
      </section>

      <section title="SEND (MSRP WebSocket Client to MSRP Client)"
		anchor="example_send_ws_to_nows">
<t><figure><artwork><![CDATA[
Alice    (MSRP WSS)     a.example.com      (MSRP TLS)     Bob
|                             |                             |
|SEND F1                      |                             |
|---------------------------->|                             |
|200 OK F2                    |                             |
|<----------------------------|                             |
|                             |SEND F3                      |
|                             |---------------------------->|
|                             |200 OK F4                    |
|                             |<----------------------------|
]]></artwork></figure></t>

        <t>In the same scenario Alice sends an instant message to Bob
           (session details having been previously negotiated by some other
	   mechanism - such as SDP <xref target="RFC4976" />). The MSRP
	   WebSocket Server at a.example.com acts as an MSRP relay, routing
	   the message to Bob over TLS.</t>

	<t>In this example Bob himself does not require an MSRP relay and has
           not authenticated with a.example.com but Alice does and has.</t>

        <t>Message details (note that MSRP does not permit line folding. A
	   "\" in the examples shows a line continuation due to limitations
	   in line length of this document. Neither the backslash nor the extra
	   CRLF is included in the actual request or response):</t>

<t><figure><artwork><![CDATA[
F1 SEND  Alice -> a.example.com (transport WSS)

MSRP 6aef SEND
To-Path: msrps://a.example.com:2855/jui787s2f;tcp \
         msrps://bob.example.com:8145/foo;tcp
From-Path: msrps://df7jal23ls0d.invalid:2855/98cjs;ws
Success-Report: no
Byte-Range: 1-*/*
Message-ID: 87652
Content-Type: text/plain

Hi Bob, I'm about to send you file.mpeg
-------6aef$


F2 200 OK  a.example.com -> Alice (transport WSS)

MSRP 6aef 200 OK
To-Path: msrps://df7jal23ls0d.invalid:2855/98cjs;ws
From-Path: msrps://a.example.com:2855/jui787s2f;tcp
-------6aef$


F3 SEND  a.example.com -> Bob (transport TLS)

MSRP juh76 SEND
To-Path: msrps://bob.example.com:8145/foo;tcp
From-Path:  msrps://a.example.com:2855/jui787s2f;tcp \
            msrps://df7jal23ls0d.invalid:2855/98cjs;ws
Success-Report: no
Byte-Range: 1-*/*
Message-ID: 87652
Content-Type: text/plain

Hi Bob, I'm about to send you file.mpeg
-------juh76$


F4 200 OK  Bob -> a.example.com (transport TLS)

MSRP juh76 200 OK
To-Path: msrps://a.example.com:2855/jui787s2f;tcp
From-Path: msrps://bob.example.com:8145/foo;tcp
-------juh76$
]]></artwork></figure></t>
      </section>

      <section title="SEND (MSRP Client to MSRP WebSocket Client)"
		anchor="example_send_nows_to_ws">
<t><figure><artwork><![CDATA[
Bob      (MSRP TLS)     a.example.com     (MSRP WSS)    Alice
|                             |                             |
|SEND F1                      |                             |
|---------------------------->|                             |
|200 OK F2                    |                             |
|<----------------------------|                             |
|                             |SEND F3                      |
|                             |---------------------------->|
|                             |200 OK F4                    |
|                             |<----------------------------|
]]></artwork></figure></t>

        <t>In the same scenario Bob sends an instant message to Alice
           (session details having been previously negotiated by some other
	   mechanism - such as SDP <xref target="RFC4976" />). The MSRP
	   WebSocket Server at a.example.com acts as an MSRP relay, routing
	   the message to Alice over secure WebSocket.</t>

        <t>In this example Bob himself does not require an MSRP relay and has
           not authenticated with a.example.com but Alice does and has.</t>

        <t>Message details (note that MSRP does not permit line folding. A
	   "\" in the examples shows a line continuation due to limitations
	   in line length of this document. Neither the backslash nor the extra
	   CRLF is included in the actual request or response):</t>

<t><figure><artwork><![CDATA[
F1 SEND  Bob -> a.example.com (transport TLS)

MSRP xght6 SEND
To-Path: msrps://a.example.com:2855/jui787s2f;tcp \
         msrps://df7jal23ls0d.invalid:2855/98cjs;ws
From-Path: msrps://bob.example.com:8145/foo;tcp
Success-Report: no
Byte-Range: 1-*/*
Message-ID: 87652
Content-Type: text/plain

Thanks for the file.
-------xght6$


F2 200 OK  a.example.com -> Bob (transport TLS)

MSRP xght6 200 OK
To-Path: msrps://bob.example.com:8145/foo;tcp
From-Path: msrps://a.example.com:2855/jui787s2f;tcp
-------xght6$


F3 SEND  a.example.com -> Alice (transport WSS)

MSRP yh67 SEND
To-Path:  msrps://df7jal23ls0d.invalid:2855/98cjs;ws
From-Path:  msrps://a.example.com:2855/jui787s2f;tcp \
            msrps://bob.example.com:8145/foo;tcp
Success-Report: no
Byte-Range: 1-*/*
Message-ID: 87652
Content-Type: text/plain

Hi Bob, I'm about to send you file.mpeg
-------yh67$


F4 200 OK  Bob -> a.example.com (transport TLS)

MSRP yh67 200 OK
To-Path:  msrps://a.example.com:2855/jui787s2f;tcp
From-Path:  msrps://df7jal23ls0d.invalid:2855/98cjs;ws
-------yh67$
]]></artwork></figure></t>
      </section>

      <section title="SEND (MSRP WebSocket Client to MSRP WebSocket Client)"
		anchor="example_send_ws_to_ws">
<t><figure><artwork><![CDATA[
Alice    (MSRP WSS)     a.example.com     (MSRP WSS)    Carol
|                             |                             |
|SEND F1                      |                             |
|---------------------------->|                             |
|200 OK F2                    |                             |
|<----------------------------|                             |
|                             |SEND F3                      |
|                             |---------------------------->|
|                             |200 OK F4                    |
|                             |<----------------------------|
]]></artwork></figure></t>

        <t>In the same scenario Alice sends an instant message to Carol
           (session details having been previously negotiated by some other
	   mechanism - such as SDP <xref target="RFC4976" />). The MSRP
	   WebSocket Server at a.example.com acts as an MSRP relay, routing
	   the message to Carol over secure WebSocket.</t>

        <t>In this example both Alice and Carol are using MSRP WebSocket
           Clients and an MSRP WebSocket Server. This means that a.example.com
           will appear twice in the To-Path in F1.  a.example.com can either
           handle this internally or loop the MSRP SEND request back to itself
           as if it were two, separate, MSRP relays.</t>

        <t>Message details (note that MSRP does not permit line folding. A
	   "\" in the examples shows a line continuation due to limitations
	   in line length of this document. Neither the backslash nor the extra
	   CRLF is included in the actual request or response):</t>

<t><figure><artwork><![CDATA[
F1 SEND  Alice -> a.example.com (transport WSS)

MSRP kjh6 SEND
To-Path: msrps://a.example.com:2855/jui787s2f;tcp \
         msrps://a.example.com:2855/iwnslt;tcp \
         msrps://jk9awp14vj8x.invalid:2855/76qwe;ws
From-Path: msrps://df7jal23ls0d.invalid:2855/98cjs;ws
Success-Report: no
Byte-Range: 1-*/*
Message-ID: 87652
Content-Type: text/plain

Carol, here is the file Bob sent me.
-------kjh6$


F2 200 OK  a.example.com -> Alice (transport WSS)

MSRP kjh6 200 OK
To-Path: msrps://df7jal23ls0d.invalid:2855/98cjs;ws
From-Path: msrps://a.example.com:2855/jui787s2f;tcp
-------kjh6$


F3 SEND  a.example.com -> Carol (transport WSS)

MSRP re58 SEND
To-Path: msrps://jk9awp14vj8x.invalid:2855/76qwe;ws
From-Path: msrps://a.example.com:2855/iwnslt;tcp \
           msrps://a.example.com:2855/jui787s2f;tcp \
           msrps://df7jal23ls0d.invalid/98cjs;ws
Success-Report: no
Byte-Range: 1-*/*
Content-Type: text/plain

Carol, here is the file Bob sent me.
-------re58$


F4 200 OK  Carol -> a.example.com (transport WSS)

MSRP re58 200 OK
To-Path: msrps://a.example.com:2855/iwnslt;tcp
From-Path: msrps://jk9awp14vj8x.invalid:2855/76qwe;ws
-------re58$
]]></artwork></figure></t>
      </section>
    </section>

    <section title="Security Considerations" anchor="security_considerations">
      <section title="Secure WebSocket Connection" anchor="secure_websocket_connection">
        <t>It is RECOMMENDED that the MSRP traffic transported over a WebSocket
	   communication be protected by using a secure WebSocket connection
	   (using TLS <xref target="RFC5246" /> over TCP).</t>
      </section>
    </section>

    <section title="IANA Considerations" anchor="iana_considerations">
      <section title="Registration of the WebSocket MSRP Sub-Protocol">
        <t>This specification requests IANA to register the WebSocket MSRP
	   sub-protocol in the registry of WebSocket sub-protocols with the
	   following data:
          <list style="hanging">
            <t hangText="Subprotocol Identifier:">msrp</t>
            <t hangText="Subprotocol Common Name:">WebSocket Transport for
		MSRP (Message Session Relay Protocol)</t>
            <t hangText="Subprotocol Definition:">TBD, it should point to this
		document</t>
          </list>
        </t>
      </section>
    </section>

    <section title="Acknowledgements" anchor="acknowledgements">
      <t>Special thanks to Inaki Baz Castillo, Jose Luis Millan Villegas, and
	 Victor Pascual, the authors of
	 <xref target="I-D.ietf-sipcore-sip-websocket" /> which has inspired
	 this draft.</t>
      <t>Additional thanks to Inaki Baz Castillo who pointed out that
         "web-browser" shouldn't be used all the time as this specification
         should be valid for smartphones and apps other than browsers and
	 suggested clarifications to the SDP handling for MSRP over
	 WebSocket.</t>
      <t>Special thanks to James Wyatt from Crocodile RCS Ltd for helping with
	 the JavaScript MSRP over WebSockets prototyping.</t>
      <t>Thanks to Saul Ibarra Corretge for suggesting that the existing MSRP
	 keep alive mechanism may be used when WebSocket pings are not
	 available.</t>
    </section>
  
  </middle>
    
  <!--  *****BACK MATTER ***** -->

  <back>
    <references title="Normative References">
      &RFC2119;
      &RFC4975;
      &RFC4976;
      &RFC5234;
      &RFC6455;
    </references>

    <references title="Informative References">
      &RFC2606;
      &RFC2616;
      &RFC2617;
      &RFC3986;
      &RFC5246;
      &RFC6265;

      <reference anchor="WS-API">
        <front>
          <title>The WebSocket API</title>
          <author>
            <organization>W3C</organization>
          </author>
          <author initials="I." surname="Hickson" fullname="Ian Hickson" role="editor">
            <organization>Google, Inc.</organization>
          </author>
          <date month="May" year="2012" />
        </front>
      </reference>

      &draft-sip-ws;
    </references>

    <section title="Implementation Guidelines"
	anchor="implementation_guidelines">
      <t>_This section is non-normative._</t>

      <section title="MSRP WebSocket Client Considerations"
	anchor="msrp_websocket_client_considerations">
        <t>The JavaScript stack in web browsers does not have the ability to
	   discover the local transport address used for originating WebSocket
	   connections. Therefore the MSRP WebSocket Client constructs a domain
	   name consisting of a random token followed by the ".invalid"
	   top-level domain name, as stated in <xref target="RFC2606"/>, and
	   uses it within its From-Path headers.
          <list style="empty">
            <t>The From-Path URI provided by MSRP clients which use an MSRP
	       relay is not used for routing MSRP messages, thus it is safe to
	       set a random domain in the hostpart of the From-Path URI.</t>
          </list>
        </t>
      </section>
    </section>

    <!-- Change Log
v01 2012-10-30  PD   Added GRL as co-author
                     Corrected use of web browser in some places
                         (comment from IBC)
                     Corrected examples in section 8
                     Some other small textual fixes
v00 2012-10-11  PD   Initial version -->
  </back>
</rfc>
