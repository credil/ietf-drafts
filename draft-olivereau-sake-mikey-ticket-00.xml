<?xml version="1.0" encoding="us-ascii"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd"
[
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="info" docName="draft-olivereau-sake-mikey-ticket-00" ipr="trust200902">
<front>
<title abbrev="-sake-mikey-ticket">Server-Assisted Key Exchange (SAKE): A new mode for MIKEY-TICKET</title>
<author fullname="Alexis Olivereau" initials="A." surname="Olivereau">
<organization>CEA</organization>
<address>
<postal>
<street>CEA Saclay-Nano-INNOV, Batiment 862</street>
<city>Gif-sur-Yvette Cedex</city>
<region></region>
<code>91191</code>
<country>FR</country>
</postal>
<phone>+33 169089233</phone>
<email>alexis.olivereau@cea.fr</email>
</address>
</author>
<author fullname="Aymen Boudguiga" initials="A." surname="Boudguiga">
<organization>CEA</organization>
<address>
<postal>
<street>CEA Saclay-Nano-INNOV, Batiment 862</street>
<city>Gif-sur-Yvette Cedex</city>
<region></region>
<code>91191</code>
<country>FR</country>
</postal>
<phone>+33 169086357</phone>
<email>aymen.boudguiga@cea.fr</email>
</address>
</author>
<author fullname="Nouha Oualha" initials="N." surname="Oualha">
<organization>CEA</organization>
<address>
<postal>
<street>CEA Saclay-Nano-INNOV, Batiment 862</street>
<city>Gif-sur-Yvette Cedex</city>
<region></region>
<code>91191</code>
<country>FR</country>
</postal>
<phone>+33 169084625</phone>
<email>nouha.oualha@cea.fr</email>
</address>
</author>
<date month="October" year="2013"/>
<area>General</area>
<workgroup>CoRE Working Group</workgroup>
<keyword>MIKEY-TICKET</keyword>
<abstract>
<t>A key establishment protocol intended to run between constrained devices has to be both lightweight and secure. Among the existing key establishment families (key agreement, key transport, server-assisted key transport or key distribution), the latter is the best candidate for constrained devices, since it can keep cryptographic operations simple at nodes sides. Nevertheless, most key distribution protocols exhibit an asymmetric design, since they are supposed to run between devices playing well-defined client and server roles, implying different security assumptions between the devices involved in the exchange.</t>
<t>MIKEY-Ticket is a key distribution protocol that specifies new modes for the Multimedia Internet KEYing (MIKEY) protocol. It answers situations where the network contains a trusted third party (one or multiple trusted key management servers). The general MIKEY-Ticket mode is a key distribution scheme relying on six messages exchanged between the node initiating the protocol (Initiator), the Key Management Server (KMS) and the responding node (Responder). This general mode assumes that the two parties establishing a key with each other play similar roles, with the only exception that one is the Initiator and the other one the Responder.</t>
<t>However, this mode suffers from a risk of a Denial of Service (DoS) inherited from the protocol design. In addition, the protocol syntax involves very large messages that would have to be fragmented, and would therefore not be convenient to communications between constrained nodes. In this document, we propose a new MIKEY-Ticket mode that solves the risk of DoS during the key establishment between the Initiator and the Responder, relies on a 5-message exchange instead of a 6-message one and bases on a simplified syntax, leading to lighter messages.</t>
</abstract>
</front>
<middle>
<section title="Introduction">
<t>Key establishment protocols serve to establish a secret key between two communicating entities. These entities do not necessarily share common credentials before starting a key management session. In practice, key establishment methods either rely on a key agreement protocol such as the Diffie-Hellman (DH) exchange, or pass through a Trusted Third Party (TTP) in a key transport protocol. Key agreement protocols assume that the communicating entities share a common secret or are able to use public key cryptography. However, in key transport protocols, the TTP is in charge of deriving and securely transporting a symmetric key to the two communicating parties. This approach is more suitable to constrained devices.</t>
<t>The MIKEY-TICKET <xref target="RFC6043"/> specification describes a key transport protocol which relies on a TTP called the Key Management Server (KMS). MIKEY-TICKET was initially defined to enhance the Multimedia Internet KEYing protocol <xref target="RFC3830"/> by adding new modes of key distribution. These modes are adapted to centralized deployment scenarios where two entities called the Initiator and the Responder establish a shared key by passing through the KMS.</t>
<t>We present in this draft a new mode for the MIKEY-TICKET protocol. We will be focusing on the first (PSK) variant of MIKEY-TICKET which relies on pre-shared keys between the Initiator or the Responder, and the KMS. We do not consider the second, public key (PK) variant of MIKEY-TICKET, which relies on the much heavier asymmetric cryptography.</t>
</section>
<section title="Terminology">
<section title="Keywords">
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119" />.</t>
</section>
<section title="Definitions">
<t>KDF: Key Derivation Function</t>
<t>I: Initiator</t>
<t>Initiator: the node that starts the key establishment protocol.</t>
<t>KMS: Key Management Sever. It is in charge of deriving the MPK for the initiator and the responder.</t>
<t>MAC: Message Authentication Code</t>
<t>MPK: MIKEY Protection Key.</t>
<t>R: Responder</t>
<t>Responder: the sensor that participates to the key establishment protocol.</t>
</section>
</section>
<section anchor="MT" title="MIKEY-TICKET Overview">
<t>In its first variant which is the only one considered throughout this draft, MIKEY-Ticket assumes that each one of the two parties (X) involved in the MIKEY-TICKET exchange is sharing with the KMS a secret master key K_X. From K_X, two keys Ke_X and Ka_X are derived. Ke_X is used to provide confidentiality through the encryption of sensitive data. Ka_X is used to provide data authenticity by computing Messages authentication Codes (MAC). Eventually the initiator (I) and the responder (R) are sharing with the KMS the tuples of keys {K_I, Ke_I, Ka_I} and {K_R, Ke_R, Ka_R}, respectively.</t>
<t>As depicted in <xref target="fig1" />, MIKEY-Ticket relies on six messages to establish a new key between I and R.
<figure anchor="fig1" title="MIKEY-Ticket exchange (source: RFC6043)"><artwork><![CDATA[
   +---+                          +-----+                          +---+
   | I |                          | KMS |                          | R |
   +---+                          +-----+                          +---+
             (1) REQUEST_INIT
     -------------------------------->
             (2) REQUEST_RESP
     <--------------------------------
                             (3) TRANSFER_INIT
     ---------------------------------------------------------------->
                                              (4) RESOLVE_INIT
                                     <--------------------------------
                                              (5) RESOLVE_RESP
                                     -------------------------------->
                             (6) TRANSFER_RESP
     <----------------------------------------------------------------
]]></artwork></figure>
<list style="format (%d)" counter="my_1">
<t>REQUEST_INIT from I to KMS
<list style="hanging"  hangIndent="2">
<t>I starts the protocol by sending the REQUEST_INIT message to the KMS. This message contains information about the identity of R, a nonce (i.e. a random number, a timestamp or a sequence number) to avoid replay attacks and a MAC computed with Ka_I.</t>
<t>The validity of this MAC is verified by the KMS at the reception of this first message. Then, the KMS generates K_IR, the key to be shared between I and R, and responds with the REQUEST_RESP message.</t>
</list></t>
<t>REQUEST_RESP from KMS to I
<list style="hanging"  hangIndent="2">
<t>This message contains the ticket (TICKET), the encryption of K_IR with Ke_I and a MAC computed with Ka_I.</t> 
<t>At the reception of the REQUEST_RESP message, I verifies the validity of the MAC. Then, it decrypts and recovers K_IR. K_IR is then used to derive two keys Ke_IR and Ka_IR (for more details about key derivation and messages content, please refer to <xref target="RFC6043"/>). Ke_IR serves to encrypt data between I and R while Ka_IR provides data integrity through MAC computing. The ticket is then transferred from I to R in the TRANFER_INIT message.</t>
</list></t>
<t>TRANFER_INIT from I to R
<list style="hanging"  hangIndent="2">
<t>Note that this message contains a MAC computed with the key Ka_IR.</t>
<t>At the reception of TRANSFER_INIT, R does not verify the MAC computed by I because R has not yet received the key K_IR. Consequently, R sends to the KMS the RESOLVE_INIT message to request K_IR.</t>
</list></t>
<t>RESOLVE_INIT from R to KMS
<list style="hanging"  hangIndent="2">
<t>R includes in that message the ticket, in order to identify the current MIKEY-Ticket session initiated by I. The message also contains a MAC computed with Ka_R.</t>
<t>After verifying the MAC value of RESOLVE_INIT, the KMS responds to R with the RESOLVE_RESP message.</t>
</list></t>
<t>RESOLVE_RESP from KMS to R
<list style="hanging"  hangIndent="2">
<t>This message which contains the encryption of K_IR with Ke_R and a MAC computed with Ka_R.</t>
<t>After verification of that MAC and decryption of K_IR, R is in possession of the key K_IR and can derive Ke_IR and Ka_IR. It can then verify the MAC value that had been received in the TRANFER_INIT message. If this MAC is valid, R sends to I the TRANSFER_RESP message to acknowledge not only the good reception of K_IR but also the successful derivation of Ka_IR and Ke_IR.</t>
</list></t>
<t>TRANSFER_RESP from R to I
<list style="hanging"  hangIndent="2">
<t>This message concludes the exchange by proving to I the knowledge of K_IR by R.</t>
</list></t>
</list>
</t>
</section>
<section anchor="newMT" title="New Mode Proposal">
<section anchor="newMTOv" title="Overview">
<t>We assume, as for MIKEY-Ticket, that I and R are sharing with the KMS the tuples of keys {K_I, Ke_I, Ka_I} and {K_R, Ke_R, Ka_R}, respectively.</t>
<t>The essential design choice in the current proposal is to involve the KMS in message exchanges as much as possible, in order to benefit from from the pre-established security contexts is has with both I and R.</t>
</section>
<section anchor="newMTEx" title="Exchanges">
<t>The proposed new mode is started by I and contains five exchanges as presented in <xref target="fig2" />:</t>
<figure anchor="fig2" title="New mode exchange"><artwork><![CDATA[
   +---+                          +-----+                          +---+
   | I |                          | KMS |                          | R |
   +---+                          +-----+                          +---+
             (1) REQUEST_INIT
     -------------------------------->
                                           (2) RESOLVE_PUSH_INIT
                                     -------------------------------->
                                           (3) RESOLVE_PUSH_RESP
                                     <--------------------------------
             (4) REQUEST_RESP
     <--------------------------------
                            (5) TRANSFER_SYNTH
     ---------------------------------------------------------------->
]]></artwork></figure>
<t><list style="format (%d)" counter="my_count">
<t>REQUEST_INIT from I to KMS
<list style="hanging"  hangIndent="2">
<t>I generates a random nonce N_I and concatenates it to its identifier (ID_I ), the identifier of the KMS (ID_KMS) and the identifier of R (ID_R). In addition, I adds to the REQUEST_INIT message a MAC computed with Ka_I over the elements sent in clear, namely (ID_I, ID_KMS, ID_R, N_I).</t>
<t>Upon receiving the REQUEST_INIT message, the KMS checks the freshness of the nonce N_I to ensure that the message is not being replayed by an attacker. Then, the KMS validates the MAC. If it is authentic, the KMS sends the RESOLVE_PUH_INIT message to R.</t>
</list></t>
<t>RESOLVE_PUSH_INIT from KMS to R
<list style="hanging"  hangIndent="2">
<t>First, the KMS generates a master session key K_IR to be subsequently used to secure communications between I and R. Then, it encrypts this key with the encryption key it shares with R (Ke_R). The result is concatenated to the identifiers (ID_KMS, ID_I, ID_R ), to the nonce N_I and to a MAC computed with Ka_R to form the RESOLVE_PUSH_INIT message, which is then sent to R.</t>
<t>Upon reception of the RESOLVE_PUSH_INIT message, R verifies the freshness of the nonce N_I which will be also serving as a session identifier. Then, R checks the validity of the MAC received from the KMS. If the message is fresh and valid, R uses its encryption key Ke_R to decrypt and recover K_IR.</t>
</list></t>
<t>RESOLVE_PUSH_RESP from R to KMS
<list style="hanging"  hangIndent="2">
<t>R generates a random nonce N_R. Then, it uses K_IR and a key derivation function (KDF) to derive a pair of keys (Ke_IR, Ka_IR). The first key, Ke_IR, is used to encrypt data exchanged with I. The second key, Ka_IR, is used to compute MAC over the messages exchanged with I. KDF can be, for example, the HMAC_SHA256() function which outputs 256-bit long keys <xref target="RFC2104"/>. The KDF is fed with the key K_IR, the identifiers and the nonces of I and R, and a unique distinguishing string. That distinguishing string ensures that encryption and integrity keys will be different. That is, Ke_IR and and Ka_IR will respectively be computed as follows:
<list style="symbol">
<t>Ke_IR = KDF{K_IR,(ID_I,ID_R,N_I,N_R,Encryption-Key-Distinguisher)}</t>
<t>Ka_IR = KDF{K_IR,(ID_I,ID_R,N_I,N_R,Authenticity-Key-Distinguisher)}</t>
</list>
</t>
<t>Within RESOLVE_PUSH_RESP message, R also includes two MAC values related to the identifiers ID_R and ID_KMS, and the nonces N_I and N_R. The first MAC is computed with Ka_IR over the nonces N_I and N_R and is sent to I via the KMS. This MAC will be received by I as the proof of the good reception of K_IR by R. The second MAC is computed with Ka_R over the content of the RESOLVE_PUSH_RESP message and is used to provide message integrity. Then, the RESOLVE_PUSH_RESP message is sent to the KMS. Upon receiving it, the KMS checks the freshness of the nonce N_R. Then, it checks the validity of the MAC computed with Ka_R. If the MAC value is valid, the KMS sends the REQUEST_RESP message to I.</t>
</list></t>
<t>REQUEST_RESP from KMS to I
<list style="hanging"  hangIndent="2">
<t>The KMS includes in that message the identifiers ID_I and ID_KMS, the nonces N_I and N_R, the MAC received from R in the RESOLVE_PUSH_RESP message and intended to I, the encryption of K_IR with Ke_I and a MAC computed with Ka_I over the aforementioned fields.</t>
<t>Upon reception of that message, I checks the freshness of N_I and verifies the validity of the MAC computed by the KMS. Then, I decrypts and recovers K_IR. Afterwards, I derives the two keys Ke_IR and and Ka_IR using KDF. KDF is the same key derivation function as used by R upon reception of K_IR. At this point, I computes with Ka_IR a MAC over N_I and N_R and compares it to the one sent by R via the KMS. If the two MAC values match, I authenticates R as the owner of Ka_IR and hence as the owner of K_IR and Ke_IR. Consequently, I generates the next TRANSFER_SYNTH message to acknowledge to R the good reception of the proof of K_IR knowledge and thereby close the session.</t>
</list></t>
<t>TRANSFER_SYNTH from I to R
<list style="hanging"  hangIndent="2">
<t>I includes in that message the identifiers ID_I and ID_R, the nonces N_I and N_R and a MAC computed with Ka_IR over the aforementioned fields.</t>
<t>Upon reception of that message, it is sufficient for R to check the validity of the MAC to know that I has successfully received K_IR.</t>
</list></t>
</list></t>
</section>
<section anchor="newMTSyn" title="Syntax">
<t>TBD.</t>
</section>
</section>
<section anchor="Security" title="Security Considerations">
<section anchor="replay" title="Replay attack">
<t>To avoid Replay attacks, we make use of nonces (N_I and N_R). We assume that the nonces are at least 128 bits long. As a consequence, the probability of getting the same random number twice for two different sessions is equal to 1/2^128. In addition, when we use nonces, we impose that each node stores the list of nonces already used and checks the nonce of each received message against this list. As such, any replayed message will be detected thanks to the presence of its nonce in the receiver's list of nonces. Replayed messages have to be dropped by the receiver. However, when the number of detected replays exceeds a certain threshold during a given slot of time, the network administrator has to be informed about the threat of presence of a malicious node.</t>
<t>To get rid of the nonces storage issue, timestamps can be used to provide message freshness but other issues like nodes synchronization during timestamps verification may then arise.</t>
</section>
<section anchor="DoS" title="DoS attack">
<t>As each message of SAKE contains a MAC computed with a key shared with the receiver, the DoS attack risk is reduced. That is, a peer will not engage on encrypting or decrypting some data without verifying the MAC value of the received message. As such, each entity identifies its communication peers before starting any memory and/or energy consuming operation.</t>
</section>
<section anchor="MitM" title="Man In The Middle (MITM) attack">
<t>As the four first exchanges of SAKE pass through the KMS, an attacker can not realize a MITM attack. Indeed, the attacker would need to know the keys shared between I and KMS or R and KMS in order to realize a MITM attack, while these keys are secret. As such, MITM is not feasible against the proposed mode.</t>
</section>
<section anchor="escrow" title="Key escrow attack">
<t>The KMS is the only node capable of realizing a key escrow attack as it is in charge of generating I and R shared key. However, the KMS is assumed to be a trusted party. That is, the KMS will not attempt to impersonate a legitimate node.</t>
</section>
</section>
<section anchor="Acknowledgements" title="Acknowledgements">
<t>This work is part of the European project TWISNet (Trustworthy Wireless Industrial Sensor Network, FP7-ICT-STREP, contract No. 258280) and is totally funded by the European Union</t>
</section>
<section anchor="IANA" title="IANA Considerations">
<t>This memo includes no request to IANA.</t>
</section>
</middle>
<back>
<references title="Normative References">
<?rfc include="reference.RFC.3830.xml"?>
<?rfc include="reference.RFC.6043.xml"?>
</references>
<references title="Informative References">
<?rfc include="reference.RFC.2104.xml"?>
<?rfc include="reference.RFC.2119.xml"?>
</references>
</back>
</rfc>
