<?xml version="1.0" encoding="US-ASCII"?> <!-- -*- fill-column: 120; -*- -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!ENTITY RFC2119 SYSTEM
"http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY I-D.ietf-alto-protocol SYSTEM
"http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-alto-protocol.xml">
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="info" docName="DOCNAME" ipr="trust200902">

  <front>

    <title abbrev="ALTO Interop">Interoperability testing of the Application-
    Layer Traffic Optimization (ALTO) Protocol</title>

    <author fullname="Vijay K. Gurbani" initials="V.K." surname="Gurbani"
            role="editor">
     <organization>Bell Laboratories, Alcatel-Lucent</organization>
     <address>
      <email>vkg@bell-labs.com</email>
      </address>
    </author>

    <author fullname="William Roome" initials="W." surname="Roome">
     <organization>Bell Laboratories, Alcatel-Lucent</organization>
     <address>
      <email>w.roome@alcatel-lucent.com</email>
     </address>
    </author>

    <author fullname="Robert Varga" initials="R." surname="Varga">
     <organization>Cisco Systems, Inc.</organization>
     <address>
      <email>rovarga@cisco.com</email>
     </address>
    </author>

    <author fullname="Ning Zhang" initials="N." surname="Zhang">
     <organization>Neustar</organization>
     <address>
      <email>Ning.Zhang@neustar.biz</email>
     </address>
    </author>

    <date year="2012" />

    <area>Transport</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <keyword>alto</keyword>
    <keyword>interoperability</keyword>
    <keyword>bakeoff</keyword>

    <abstract>
      <t>The Application-Layer Traffic Optimization (ALTO) protocol is 
        designed to allow entities with knowledge about the network 
        infrastructure to export such information to applications that 
        need to choose one or more endpoints to connect to among large 
        sets of logically equivalent ones.  This document provides a
        collection of messages that may be used to test the functionality
        and interoperability of an ALTO client and an ALTO server.</t>
    </abstract>
  </front>

  <middle>
    <section title="Overview" anchor="overview">
      <t>The Application-Layer Traffic Optimization (ALTO) protocol is 
      designed to allow entities with knowledge about the network 
      infrastructure to export such information to applications that 
      need to choose one or more endpoints to connect to among large 
      sets of logically equivalent ones. </t>

      <t>This document contains a set of messages that may be used
      test the functionality and interoperability of an ALTO client and
      an ALTO server.</t>

      <t>This document is informational and is NOT NORMATIVE on any
      aspects of the ALTO protocol.  The normative behaviour of ALTO
      entities is prescribed in <xref target="I-D.ietf-alto-protocol"/>.</t>

      <t>The test messages are organized into several sections.  The key
      ALTO services, including but not limited to, Information Resource
      Directory retrieval, retrieving network map and cost map, endpoint
      cost service, filtered network map service, filtered cost map
      service are provided as discrete test cases.  Also included are 
      errors associating with the ALTO request and the JSON payload.</t>

      <t>While every effort has been made to catalogue representative test
      cases, this document does not attempt to codify every test case
      that arises in ALTO.  The aim of the document is to focus on 
      areas that highlight the key offerings of the ALTO protocol.</t>

    </section> <!-- overview -->

    <section title="Maps: Network map and cost map" anchor="maps">
      <t>To uniformly interpret the contents of the ALTO messages,
      a sample topology is presented below.  This topology is divided
      into a network map and a cost map.  The network map contains a
      series of PIDs, a provider-defined network location identifier
      as specified in <xref target="I-D.ietf-alto-protocol"/>.</t>

      <figure anchor="fig:network-map" title="Sample Network Map">
       <artwork><![CDATA[
       PID            IP Address Block
       -------------------------------
       mypid1         10.0.0.0/8, 15.0.0.0/8
       mypid2         192.168.0.0/16
       mypid3         192.168.10.0/24
       peeringpid1    128.0.0.0/16
       peeringpid2    130.0.0.0/16, 2001:DB8::/32
       transitpid1    132.0.0.0/16
       transitpid2    135.0.0.0/16
       defaultpid     0.0.0.0/0, ::/0
       ]]></artwork>
      </figure>

      <t>A cost map corresponding to the above network map is shown
      below.  The cost map defines path costs amongst sets of source 
      and destination network locations.  Each path cost is the end-to-end 
      cost from the source to the destination.</t>

      <figure anchor="fig:cost-map" title="Corresponding Cost Map">
       <artwork><![CDATA[
       Source      Destination        Cost Mode
       PID         PID           Numerical  Ordinal
       ---------------------------------------------
       mypid1      mypid1            0        1
         "         mypid2            0        1
         "         mypid3            0        1
         "         peeringpid1       0        1
         "         peeringpid2       0        1
         "         transitpid1       5        3
         "         transitpid2      10        7
         "         defaultpid        4        2
       mypid2      mypid1            0        1
         "         mypid2            0        1
         "         mypid3            0        1
         "         peeringpid1       0        1
         "         peeringpid2       0        1
         "         transitpid1       7        5
         "         transitpid2       8        6
         "         defaultpid        4        2
       mypid3      mypid1            0        1
         "         mypid2            0        1
         "         mypid3            0        1
         "         peeringpid1       0        1
         "         peeringpid2       0        1
         "         transitpid1       8        6
         "         transitpid2       8        6
         "         defaultpid        5.1      4
       ]]></artwork>
      </figure>

      <t>Note that the above represents a sparse cost map, i.e., the ALTO
      server is not defining a path cost from each source PID to each
      destination PID.  It is only defining the costs that it is interested
      in serving.</t>
    </section> <!-- maps -->

    <section title="Test cases" anchor="test-cases">
     <t>Exhaustive test cases are described in subsections below.  Note 
     that it is not expected that an ALTO client and server implementation 
     generate requests and responses in the same format as shown below.  
     The syntax related to representing each request or response is left 
     to each individual implementation as long as the payload is 
     syntactically valid and semantically equivalent to any other 
     representation of the same payload.</t>

     <t>In the test cases below, an ALTO server is assumed to be 
     available at the URL http://alto.ietf.org.  Requests are directed
     towards it.  This document assumes that the ALTO server URL has
     been discovered by the ALTO discovery protocol, however, it does
     not provide further details on the discovery protocol itself.
     Wherever possible, relevant HTTP headers are shown in
     the test cases, however, for the sake of brevity not all headers
     are depicted.</t>

     <section title="Information Resource Directory" anchor="ird">

      <t><list style="hanging">
       <t hangText = "Test-IRD-1:">The Information Resource Directory (IRD) 
       enumerates URIs at which an ALTO server offers Information 
       Resources.</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
      GET /directory HTTP/1.1
      Host: alto.ietf.org
      Accept: application/alto-directory+json,
              application/alto-error+json

      Server -> Client:
      -----------------
      HTTP/1.1 200 OK
      Content-Length: 2596
      Connection: close
      Content-Type: application/alto-directory+json
      Date: Wed, 29 Jun 2011 10:52:09 GMT

      {
      "resources": [
         {
         "capabilities": {
            "cost-modes": [
               "numerical"
            ],
            "cost-types": [
               "routingcost"
            ]
         },
         "media-types": [
            "application/alto-costmap+json"
         ],
         "uri": "http://alto.ietf.org/costmap/numerical/routingcost"
      },
      {
         "capabilities": {
            "cost-modes": [
               "ordinal"
            ],
            "cost-types": [
               "routingcost"
            ]
         },
         "media-types": [
            "application/alto-costmap+json"
         ],
         "uri": "http://alto.ietf.org/costmap/ordinal/routingcost"
      },
      {
         "media-types": [
            "application/alto-networkmap+json"
         ],
         "uri": "http://alto.ietf.org/networkmap"
      },
      {
         "media-types": [
            "application/alto-serverinfo+json"
         ],
         "uri": "http://alto.ietf.org/serverinfo"
      },
      {
         "accepts": [
            "application/alto-costmapfilter+json"
         ],
         "capabilities": {
            "cost-constraints": true,
            "cost-modes": [
               "numerical",
               "ordinal"
            ],
            "cost-types": [
               "routingcost"
            ]
         },
         "media-types": [
            "application/alto-costmap+json"
         ],
         "uri": "http://alto.ietf.org/costmap/filtered"
      },
      {
         "accepts": [
            "application/alto-endpointcostparams+json"
         ],
         "capabilities": {
            "cost-constraints": true,
            "cost-modes": [
               "numerical",
               "ordinal"
            ],
            "cost-types": [
               "routingcost"
            ]
         },
         "media-types": [
            "application/alto-endpointcost+json"
         ],
         "uri": "http://alto.ietf.org/endpoints/cost"
      },
      {
         "accepts": [
            "application/alto-endpointpropparams+json"
         ],
         "capabilities": {
            "prop-types": [
               "pid"
            ]
         },
         "media-types": [
            "application/alto-endpointprop+json"
         ],
         "uri": "http://alto.ietf.org/endpoints/property"
      },
      {
         "accepts": [
            "application/alto-networkmapfilter+json"
         ],
         "media-types": [
            "application/alto-networkmap+json"
         ],
         "uri": "http://alto.ietf.org/networkmap/filtered"
      }
   ]
   }
      ]]></artwork></figure>

     </section> <!-- ird -->

     <section title="Endpoint property service" anchor="endpoint-svs">

      <t><list style="hanging">
       <t hangText="Test-EPS-1: ">An ALTO client retrieves a PID for 
       IPv4 address 192.168.1.23.</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
     POST /endpoints/property HTTP/1.1
     Host: alto.ietf.org
     Content-Length: ...
     Accept: application/alto-endpointprop+json

     {
        "properties" : [ "pid" ],
        "endpoints" : [ "ipv4:192.168.1.23" ]
     }
     ]]></artwork></figure>

      <t>The server returns the following response (note that the longest
      prefix match is used to retrieve the corresponding PID property).</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 200 OK
      Content-Length: ...
      Content-Type: application/alto-endpointprop+json

      {
           "meta" : {},
           "data": {
             "map-vtag" : "1266506139",
             "map" : {
               "ipv4:192.168.1.23" : { "pid": "mypid2" }
             }
           }
      }
      ]]></artwork></figure>

      <t><list style="hanging">
       <t hangText="Test-EPS-2: ">An ALTO client retrieves a PID for 
       IPv4 address 192.168.10.23.</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
     POST /endpoints/property HTTP/1.1
     Host: alto.ietf.org
     Content-Length: ...
     Accept: application/alto-endpointprop+json

     {
        "properties" : [ "pid" ],
        "endpoints" : [ "ipv4:192.168.10.23" ]
     }
     ]]></artwork></figure>

      <t>The server returns the following response (note that the longest
      prefix match is used to retrieve the corresponding PID property).</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 200 OK
      Content-Length: ...
      Content-Type: application/alto-endpointprop+json

      {
           "meta" : {},
           "data": {
             "map-vtag" : "1266506139",
             "map" : {
               "ipv4:192.168.10.23"    : { "pid": "mypid3" }
             }
           }
      }
      ]]></artwork></figure>

      <t><list style="hanging">
       <t hangText="Test-EPS-3: ">An ALTO client retrieves a PID for 
       IPv4 address 201.1.13.12.</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
     POST /endpoints/property HTTP/1.1
     Host: alto.ietf.org
     Content-Length: ...
     Accept: application/alto-endpointprop+json

     {
        "properties" : [ "pid" ],
        "endpoints" : [ "ipv4:201.1.13.12" ]
     }
     ]]></artwork></figure>

      <t>The server returns the following response (note that the longest
      prefix match is used to retrieve the corresponding PID property).</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 200 OK
      Content-Length: ...
      Content-Type: application/alto-endpointprop+json

      {
           "meta" : {},
           "data": {
             "map-vtag" : "1266506139",
             "map" : {
               "ipv4:201.1.13.12"    : { "pid": "defaultpid" }
             }
      }
      ]]></artwork></figure>

      <t><list style="hanging">
       <t hangText="Test-EPS-4: ">An ALTO client retrieves a PID for
       an IPv4 and IPv6 address.</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
      POST /endpoints/property HTTP/1.1
      Host: alto.ietf.org
      Content-Length: 106
      Accept: application/alto-endpointprop+json
      Content-Type: application/alto-endpointpropparams+json

      {
        "properties" : [ "pid" ],
        "endpoints" : [ "ipv6:1234::192.168.1.23", 
                        "ipv4:132.0.10.12" ]
      }

      ]]></artwork></figure>

      <t>The server returns the following response:</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 200 OK
      Content-Type: application/alto-endpointprop+json;charset=UTF-8
      Content-Length: 157

      {
           "meta" : { } ,
           "data" : {
             "map-vtag" : "1266506139",
             "map" : {
               "ipv6:1234::192.168.1.23" : { "pid" : "defaultpid " } ,
               "ipv:132.0.10.12" : { "pid" : "transitpid1" }
             }
           }
      }
      ]]></artwork></figure>

     </section> <!-- endpoint-svs -->

     <section title="Endpoint cost service" anchor="endpoint-cost">

      <t><list style="hanging">
       <t hangText="Test-ECS-1: ">An ALTO client requests cost information
       between individual endpoints.</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
      POST /endpoints/cost HTTP/1.1
      Host: alto.example.com
      Content-Length: 429
      Content-Type: application/alto-endpointcostparams+json
      Accept: application/alto-endpointcost+json,
              application/alto-error+json

      {
       "cost-mode" : "numerical",
       "cost-type" : "routingcost",
       "endpoints" : {
         "srcs": [ "ipv4:10.0.0.0", "ipv4:192.168.11.0", 
                   "ipv4:192.168.10.0"],
         "dsts": [
           "ipv4:10.0.0.0",
           "ipv4:15.0.0.0",
           "ipv4:192.168.11.0",
           "ipv4:192.168.10.0",
           "ipv4:128.0.0.0",
           "ipv4:130.0.0.0",
           "ipv4:0.0.0.0",
           "ipv4:132.0.0.0",
           "ipv4:135.0.0.0"
         ]
       }
      }
     ]]></artwork></figure>

     <t>Server responds with the following:</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 200 OK
      Content-Length: 1692
      Content-Type: application/alto-endpointcost+json

      {
         "meta": { },
         "data": {
                "cost-mode": "numerical",
                "cost-type": "routingcost",
                "map": {
                       "ipv4:10.0.0.0": {
                        "ipv4:10.0.0.0": 0.000000,
                        "ipv4:15.0.0.0": 0.000000,
                        "ipv4:192.168.11.0": 0.000000,
                        "ipv4:192.168.10.0": 0.000000,
                        "ipv4:128.0.0.0": 0.000000,
                        "ipv4:130.0.0.0": 0.000000,
                        "ipv4:0.0.0.0": 4.000000,
                        "ipv4:132.0.0.0": 5.000000,
                         "ipv4:135.0.0.0": 10.000000
                    },
                    "ipv4:192.168.11.0": {
                         "ipv4:10.0.0.0": 0.000000,
                         "ipv4:15.0.0.0": 0.000000,
                         "ipv4:192.168.11.0": 0.000000,
                         "ipv4:192.168.10.0": 0.000000,
                         "ipv4:128.0.0.0": 0.000000,
                         "ipv4:130.0.0.0": 0.000000,
                         "ipv4:0.0.0.0": 4.000000,
                         "ipv4:132.0.0.0": 7.000000,
                         "ipv4:135.0.0.0": 8.000000
                    },
                    "ipv4:192.168.10.0": {
                          "ipv4:10.0.0.0": 0.000000,
                          "ipv4:15.0.0.0": 0.000000,
                          "ipv4:192.168.11.0": 0.000000,
                          "ipv4:192.168.10.0": 0.000000,
                          "ipv4:128.0.0.0":0.000000,
                          "ipv4:130.0.0.0": 0.000000,
                          "ipv4:0.0.0.0": 5.100000,
                          "ipv4:132.0.0.0": 8.000000,
                          "ipv4:135.0.0.0": 8.000000
                    }
                }
         }
      }
     ]]></artwork></figure>

     <t><list style="hanging">
       <t hangText="Test-ECS-2: ">An ALTO client requests the ranking
       service for a source host to a set of destination hosts.</t>
     </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
      POST /endpoints/cost HTTP/1.1
      Host: alto.ietf.org
      Accept: application/alto-endpointcost+json,
              application/alto-error+json
      Content-Type: application/alto-endpointcostparams+json
      Content-Length: 235

      {
        "cost-mode" : "ordinal",
        "cost-type" : "routingcost",
        "endpoints" : {
          "srcs": [ "ipv6:2001:DB8::ABCD:6789", "ipv4:192.168.10.1" ],
          "dsts": [
            "ipv6:2001:DB8::2345:5678",
            "ipv4:135.0.29.1",
            "ipv4:192.168.10.23"
          ]
        }
      }
      ]]></artwork></figure>

      <t>The server response is shown below.  Note that the source IP
      adress of "ipv6:2001:DB8::ABCD:6789", which occurs in PID "peeringpid2",
      is omitted in the response.  This reflects the fact that the ALTO 
      server does not know the source costs from the "peeringpid2" PID.</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 200 OK
      Content-Type: application/alto-endpointcost+json;charset=UTF-8
      Content-Length: 376

      {
         "data": {
          "cost-mode": "ordinal",
          "cost-type": "routingcost",
          "map": {
            "ipv4:192.168.10.1": {
              "ipv4:192.168.10.23": 1,
              "ipv6:2001:DB8::2345:5678": 1,
              "ipv4:135.0.29.1": 6
            }
          },
          "map-vtag": "gqcla2l8"
        },
        "meta": {}
      }
      ]]></artwork></figure>
 
     <t><list style="hanging">
       <t hangText="Test-ECS-3: ">An ALTO client requests the cost
       service subject to certain constraints.</t>
     </list></t>

     <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
      POST /endpoints/cost HTTP/1.1
      Host: alto.example.com
      Content-Length: ...
      Content-Type: application/alto-endpointcostparams+json
      Accept: application/alto-endpointcost+json,
              application/alto-error+json

      {
       "constraints": ["le 5", "ge 4"],
       "cost-mode": "numerical",
       "cost-type": "routingcost",
       "endpoints": {
         "dsts": [
           "ipv4:10.0.0.0",
           "ipv4:15.0.0.0",
           "ipv4:192.168.11.0",
           "ipv4:192.168.10.0",
           "ipv4:128.0.0.0",
           "ipv4:130.0.0.0",
           "ipv4:0.0.0.0",
           "ipv4:132.0.0.0",
           "ipv4:135.0.0.0"
         ],
         "srcs": [
           "ipv4:10.0.0.0",
           "ipv4:192.168.11.0",
           "ipv4:192.168.10.0"
         ]
       }
      }
     ]]></artwork></figure>

     <t>The server responds with the following:</t>
     <figure><artwork><![CDATA[
      Server -> Client
      -----------------
      HTTP/1.1 200 OK
      Content-Length: 1692
      Content-Type: application/alto-endpointcost+json
      {
       "data": {
         "cost-mode": "numerical",
         "cost-type": "routingcost",
           "map": {
             "ipv4:10.0.0.0": {
               "ipv4:0.0.0.0": 4, "ipv4:132.0.0.0": 5
             },
             "ipv4:192.168.11.0": {"ipv4:0.0.0.0": 4}
           }
       },
       "meta": {}
      }
     ]]></artwork></figure>

     </section> <!-- endpoint-cost -->

     <section title="Retrieving maps" anchor="test-maps">

      <t><list style="hanging">
       <t hangText="Test-MAPS-1: ">An ALTO client retrieves a complete
       network map.</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
      GET /networkmap HTTP/1.1
      Host: alto.ietf.org
      Accept: application/alto-networkmap+json,
              application/alto-error+json

     ]]></artwork></figure>

      <t>The server returns the following response.</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 200 OK
      Content-Length: 799
      Content-Type: application/alto-networkmap+json

      {
       "meta" : {},
       "data" : {
         "map-vtag" : "1266506139",
         "map" : {
            "mypid1" : {
               "ipv4" : [ "10.0.0.0/8", "15.0.0.0/8" ]
            },
            "mypid2" : {
               "ipv4" : [ "192.168.0.0/16" ]
            },
            "mypid3" : {
               "ipv4" : [ "192.168.10.0/24" ]
            },
            "peeringpid1" : {
               "ipv4" : [ "128.0.0.0/16" ]
            },
            "peeringpid2" : {
               "ipv4" : [ "130.0.0.0/16" ],
               "ipv6" : [ "2001:DB8::/32"]
            },
            "transitpid1" : {
               "ipv4" : [ "132.0.0.0/16" ]
            },
            "transitpid2" : {
               "ipv4" : [ "135.0.0.0/16" ]
            },
            "defaultpid" : {
               "ipv4" : [ "0.0.0.0/0" ],
               "ipv6" : [ "::/0" ]
            }
         }
       }
      }

      ]]></artwork></figure>

      <t><list style="hanging">
       <t hangText="Test-MAPS-2: ">An ALTO client retrieves a complete
       cost map for the numerical cost mode.</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
      GET /costmap/numerical/routingcost HTTP/1.1
      Host: alto.ietf.org
      Accept: application/alto-costmap+json,
              application/alto-error+json

     ]]></artwork></figure>

      <t>The server returns the following response.  In the response
      below, note that the version tag of the cost map ("map-vtag")
      corresponds to the network map of the same version shown in
      test case Test-MAPS-1.</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 200 OK
      Content-Length: 787
      Content-Type: application/alto-costmap+json

      {
        "meta" : {},
        "data" : {
          "cost-mode" : "numerical",
          "cost-type" : "routingcost",
          "map-vtag"  : "1266506139",
          "map" : {
            "mypid1": { "mypid1" : 0,  "mypid2" : 0,  "mypid3" : 0,
                     "peeringpid1" : 0, "peerinpid2" :  0,
                     "transitpid1" : 5, "transitpid2" : 10,
                     "defaultpid" : 4},
            "mypid2": { "mypid1" : 0,  "mypid2" : 0,  "mypid3" : 0,
                     "peeringpid1" : 0, "peerinpid2" :  0,
                     "transitpid1" : 7, "transitpid2" : 8,
                     "defaultpid" : 4},
            "mypid3": { "mypid1" : 0,  "mypid2" : 0,  "mypid3" : 0,
                     "peeringpid1" : 0, "peerinpid2" :  0,
                     "transitpid1" : 8, "transitpid2" : 8,
                     "defaultpid" : 5.1}
          }
        }
      }
      ]]></artwork></figure>

      <t><list style="hanging">
       <t hangText="Test-MAPS-3: ">An ALTO client retrieves a complete
       cost map for the ordinal cost mode.</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
      GET /costmap/ordinal/routingcost HTTP/1.1
      Host: alto.ietf.org
      Accept: application/alto-costmap+json,
              application/alto-error+json

     ]]></artwork></figure>

      <t>The server returns the following response.  In the response
      below, note that the version tag of the cost map ("map-vtag")
      corresponds to the network map of the same version shown in
      test case Test-MAPS-1.</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 200 OK
      Content-Length: ...
      Content-Type: application/alto-costmap+json

      {
        "meta" : {},
        "data" : {
          "cost-mode" : "ordinal",
          "cost-type" : "routingcost",
          "map-vtag"  : "1266506139",
          "map" : {
            "mypid1": { "mypid1" : 0,  "mypid2" : 0,  "mypid3" : 0,
                     "peeringpid1" : 1, "peerinpid2" :  1,
                     "transitpid1" : 4, "transitpid2" : 4,
                     "defaultpid" : 5},
            "mypid2": { "mypid1" : 0,  "mypid2" : 0,  "mypid3" : 0,
                     "peeringpid1" : 1, "peerinpid2" :  2,
                     "transitpid1" : 3, "transitpid2" : 3,
                     "defaultpid" : 5},
            "mypid3": { "mypid1" : 0,  "mypid2" : 0,  "mypid3" : 0,
                     "peeringpid1" : 3, "peerinpid2" :  2,
                     "transitpid1" : 2, "transitpid2" : 4,
                     "defaultpid" : 5}
          }
        }
      }
      ]]></artwork></figure>

      <t><list style="hanging">
       <t hangText="Test-MAPS-4: ">This test is designed to detect a change
       in the network map.</t>
      </list></t>
      <t>Add a new block of addresses to the network map of <xref
      target="fig:network-map"/>, thereby updating the network map.  For 
      example, add the following new entry to the network map of 
      <xref target="fig:network-map"/>:</t>

      <t>peeringpid2   130.0.0.0/16, 2001:DB8::/32, 201.1.2.0/24</t>

      <t>The ALTO client retrieves the new network map using the GET
      request shown in Test-MAPS-1.  The expectation is that the 
      retrieved network map has the new PID (peeringpid2) included in
      the topology, and the version tag on the newly retrieved network
      map should be different than the response to the ALTO client shown
      in Test-MAPS-1.</t>

      <t>The server should respond with a response that approximates
      what is shown below:</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 200 OK
      Content-Length: 815
      Content-Type: application/alto-networkmap+json

      {
      "meta" : {},
      "data" : {
         "map-vtag" : "1266506155",
         "map" : {
            "mypid1" : {
               "ipv4" : [ "10.0.0.0/8", "15.0.0.0/8" ]
            },
            "mypid2" : {
               "ipv4" : [ "192.168.0.0/16" ]
            },
            "mypid3" : {
               "ipv4" : [ "192.168.10.0/24" ]
            },
            "peeringpid1" : {
               "ipv4" : [ "128.0.0.0/16" ]
            },
            "peeringpid2" : {
               "ipv4" : [ "130.0.0.0/16", "201.1.2.0/24" ],
               "ipv6" : [ "2001:DB8::/32"]
            },
            "transitpid1" : {
               "ipv4" : [ "132.0.0.0/16" ]
            },
            "transitpid2" : {
               "ipv4" : [ "135.0.0.0/16" ]
            },
            "defaultpid" : {
               "ipv4" : [ "0.0.0.0/0" ],
               "ipv6" : [ "::/0" ]
            }
         }
      }
      }

     ]]></artwork></figure>

     </section> <!-- test-maps -->

     <section title="Filtering" anchor="filter">

      <t><list style="hanging">
       <t hangText="Test-FILTER-1: ">An ALTO client sends a request to
       get a filtered map of PID mypid2.</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
      POST /networkmap/filtered HTTP/1.1
      Host: alto.ietf.org
      Content-Length: 26
      Content-Type: application/alto-networkmapfilter+json
      Accept: application/alto-networkmap+json,
              application/alto-error+json

      {
        "pids": [ "mypid2" ]
      }

      ]]></artwork></figure>

      <t>The server responds with the following:</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 200 OK
      Content-Length: 172
      Content-Type: application/alto-networkmap+json

      {
         "meta" : {},
         "data" : {
            "map-vtag" : "1266506155",
            "map" : {
               "mypid2" : {
                  "ipv4" : [ "192.168.0.0/16" ]
               }
            }
         }
      }
      ]]></artwork></figure>

      <t><list style="hanging">
       <t hangText="Test-FILTER-2: ">An ALTO client sends a request to
       get a filtered map from a source PID to a set of destination PIDs.</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
      POST /costmap/filtered HTTP/1.1
      Host: alto.ietf.org
      Content-Type: application/alto-costmapfilter+json
      Content-Length: 174
      Accept: application/alto-costmap+json,
              application/alto-error+json

      {
        "cost-mode" : "numerical",
        "cost-type" : "routingcost",
        "pids" : {
          "srcs" : [ "mypid1", "mypid3" ],
          "dsts" : [ "mypid2", "peeringpid1", "transitpid2" ]
        }
      }
      ]]></artwork></figure>

      <t>The server responds with the following:</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 200 OK
      Content-Length: 294
      Content-Type: application/alto-costmap+json

      {
        "meta" : {},
        "data" : {
          "cost-mode" : "numerical",
          "cost-type" : "routingcost",
          "map-vtag" : "1266506155",
          "map" : {
            "mypid1": { "mypid2": 0,  "peeringpid1": 0,  
                        "transitpid2": 10 },
            "mypid3": { "mypid2": 0,  "peeringpid1": 0,  
                        "transitpid2": 8 }
          }
        }
      }
      ]]></artwork></figure>

     </section> <!-- filter -->

     <section title="JSON parsing errors" anchor="json-parsing-err">

      <t><list style="hanging">
       <t hangText="Test-JSON-ERR-1: ">An ALTO client sends a malformed
       JSON body in the request --- a missing closing brace ('}').</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
      POST /endpoints/cost HTTP/1.1
      Host: alto.ietf.org
      Accept: application/alto-endpointcost+json,
              application/alto-error+json
      Content-Type: application/alto-endpointcostparams+json
      Content-Length: 131

      {
        "cost-mode" : "numerical",
        "cost-type" : "routingcost",
        "endpoints": {
                "srcs": [ "ipv4:10.0.0.0"],
                "dsts": [ "ipv4:10.0.0.0" ]
      }

     ]]></artwork></figure>

      <t>The server returns an HTTP response code of 400 with ALTO
      error code of E_SYNTAX (c.f., Table 1 
      <xref target="I-D.ietf-alto-protocol"/>).</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 400 Bad Request
      Content-Type: application/alto-error+json
      Content-Length: ...

      {
         "code": "E_SYNTAX"
      }

      ]]></artwork></figure>

      <t><list style="hanging">
       <t hangText="Test-JSON-ERR-2: ">An ALTO client sends a malformed
       request --- the "dsts" member for the endpoint cost service
       is missing.</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
      POST /endpoints/cost HTTP/1.1
      Host: alto.ietf.org
      Accept: application/alto-endpointcost+json,
              application/alto-error+json
      Content-Type: application/alto-endpointcostparams+json
      Content-Length: 137

      {
        "cost-mode" : "numerical",
        "cost-type" : "routingcost",
        "endpoints": {
                "srcs": [ "ipv4:10.0.0.0"] }
      }

     ]]></artwork></figure>

      <t>The server returns an HTTP response code of 400 with ALTO
      error code of E_JSON_FIELD_MISSING (c.f., Table 1 
      <xref target="I-D.ietf-alto-protocol"/>).</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 400 Bad Request
      Content-Type: application/alto-error+json
      Content-Length: ...

      {
         "code": "E_JSON_FIELD_MISSING"
      }

      ]]></artwork></figure>

      <t><list style="hanging">
       <t hangText="Test-JSON-ERR-3: ">An ALTO client sends a request
       with an unexpected type for a JSON value.</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
      POST /endpoints/cost HTTP/1.1
      Host: alto.ietf.org
      Accept: application/alto-endpointcost+json,
              application/alto-error+json
      Content-Type: application/alto-endpointcostparams+json
      Content-Length: 176

      {
           "cost-mode" : "numerical",
           "cost-type" : "routingcost",
           "endpoints": {
                "srcs":"ipv4:10.0.0.0" ,
                "dsts": [ "ipv4:10.0.0.0" ]
           }
      }

     ]]></artwork></figure>

      <t>The server returns an HTTP response code of 400 with ALTO
      error code of E_JSON_VALUE_TYPE(c.f., Table 1 
      <xref target="I-D.ietf-alto-protocol"/>).</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 400 Bad Request
      Content-Type: application/alto-error+json
      Content-Length: ...

      {
           "code": "E_JSON_VALUE_TYPE"
      }
      ]]></artwork></figure>

      <t><list style="hanging">
       <t hangText="Test-JSON-ERR-4: ">An ALTO client sends a request
       with an invalid JSON code mode.</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
      POST /costmap/filtered HTTP/1.1
      Host: alto.ietf.org
      Content-Length: 105
      Content-Type: application/alto-costmapfilter+json
      Accept: application/alto-costmap+json

      {
        "cost-mode": "foo",
        "cost-type": "routingcost",
        "pids": {
           "dsts": [],
           "srcs": []
        }
      }

     ]]></artwork></figure>

      <t>The server returns an HTTP response code of 400 with ALTO
      error code of E_INVALID_COST_MODE (c.f., Table 1 
      <xref target="I-D.ietf-alto-protocol"/>).</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 400 Bad Request
      Content-Length: ...
      Content-Type: application/alto-error+json

      {
        "code": "E_INVALID_COST_MODE"
      }
      ]]></artwork></figure>

      <t><list style="hanging">
       <t hangText="Test-JSON-ERR-5: ">An ALTO client sends a request
       with an invalid JSON code type.</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
      POST /costmap/filtered HTTP/1.1
      Host: alto.ietf.org
      Content-Length: 105
      Content-Type: application/alto-costmapfilter+json
      Accept: application/alto-costmap+json

      {
        "cost-mode": "numerical",
        "cost-type": "foo",
        "pids": {
           "dsts": [],
           "srcs": []
        }
      }

     ]]></artwork></figure>

      <t>The server returns an HTTP response code of 400 with ALTO
      error code of E_INVALID_COST_TYPE (c.f., Table 1 
      <xref target="I-D.ietf-alto-protocol"/>).</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 400 Bad Request
      Content-Length: ...
      Content-Type: application/alto-error+json

      {
        "code": "E_INVALID_COST_TYPE"
      }
      ]]></artwork></figure>

      <t><list style="hanging">
       <t hangText="Test-JSON-ERR-6: ">An ALTO client sends a request
       with an invalid JSON endpoint property type.</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
      POST /endpoints/property HTTP/1.1
      Host: alto.ietf.org
      Content-Length: 66
      Content-Type: application/alto-endpointpropparams+json
      Accept: application/alto-endpointprop+json

      {
          "endpoints": ["ipv4:10.0.0.1"],
          "properties": ["foo"]
      }
     ]]></artwork></figure>

      <t>The server returns an HTTP response code of 400 with ALTO
      error code of E_INVALID_PROPERTYTYPE (c.f., Table 1 
      <xref target="I-D.ietf-alto-protocol"/>).</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 400 Bad Request
      Content-Length: ...
      Content-Type: application/alto-error+json

      {
          "code": "E_INVALID_PROPERTY_TYPE"
      }
      ]]></artwork></figure>

      <t><list style="hanging">
       <t hangText="Test-JSON-ERR-7: ">An ALTO client sends a request
       with multiple errors.  In the particular test case below, an
       invalid cost type and and an invalid cost mode are sent.</t>
      </list></t>

      <figure><artwork><![CDATA[
      Client -> Server:
      -----------------
      POST /costmap/filtered HTTP/1.1
      Host: alto.ietf.org
      Content-Length: 112
      Content-Type: application/alto-costmapfilter+json
      Accept: application/alto-costmap+json

      {
          "cost-mode": "bar",
          "cost-type": "foo",
          "pids": {
             "dsts": [],
             "srcs": []
          }
      }
     ]]></artwork></figure>

      <t>The server must detect at least one of the errors and return the
      detected error.</t>

      <figure><artwork><![CDATA[
      Server -> Client:
      -----------------
      HTTP/1.1 400 Bad Request
      Content-Length: ...
      Content-Type: application/alto-error+json

      {
          "code": "E_INVALID_COST_TYPE"
      }

      ]]></artwork></figure>

     </section> <!-- json-parsing-err -->

    </section> <!-- test-cases -->

    <section title="Security considerations" anchor="sec-cons">
      <t>This document does not present any new security considerations
      above and beyond what is documented in the ALTO protocol
      <xref target="I-D.ietf-alto-protocol"/>.</t>
    </section> <!-- sec-cons -->

    <section title="IANA considerations" anchor="iana-cons">
      <t>This document does not require any action from IANA.</t>
    </section> <!-- iana-cons -->

  </middle>

  <back>

    <references title="Normative References">

      &RFC2119;

    </references>

    <references title="Informative References">

      &I-D.ietf-alto-protocol;

    </references>

   <section title="Acknowledgements">
    <t>The editors will like to thank the ALTO working group participants
    for reviewing test cases.  Richard Alimi and Mikio Hara contributed
    review cycles to the contents of this document.</t>
   </section>

  </back>
</rfc>
