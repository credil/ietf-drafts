<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-reddy-mmusic-ice-happy-eyeballs-03"
     ipr="trust200902">
  <front>
    <title abbrev="Happy Eyeballs for ICE ">Happy Eyeballs Extension for
    ICE</title>

    <author fullname="Tirumaleswar Reddy" initials="T." surname="Reddy">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>Cessna Business Park, Varthur Hobli</street>

          <street>Sarjapur Marathalli Outer Ring Road</street>

          <city>Bangalore</city>

          <region>Karnataka</region>

          <code>560103</code>

          <country>India</country>
        </postal>

        <email>tireddy@cisco.com</email>
      </address>
    </author>

    <author fullname="Prashanth Patil" initials="P." surname="Patil">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street></street>

          <city>Bangalore</city>

          <country>India</country>
        </postal>

        <email>praspati@cisco.com</email>
      </address>
    </author>

    <author fullname="Dan Wing" initials="D." surname="Wing">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>170 West Tasman Drive</street>

          <city>San Jose</city>

          <region>California</region>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <email>dwing@cisco.com</email>
      </address>
    </author>

    <date />

    <workgroup>MMUSIC</workgroup>

    <abstract>
      <t>This document describes an algorithm that makes Interactive
      Connectivity Establishment (ICE) connectivity checks more responsive by
      reducing delays in dual-stack host ICE connectivity checks when there is
      a path failure for an address family preferred by the application or by
      the operating system. As IPv6 is usually preferred over IPv4, the
      procedures in this document helps avoid user-noticeable delays when the
      IPv6 path is broken or excessively slow.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>In situations where there are many IPv6 addresses, <xref
      target="RFC5245">ICE</xref> will prefer IPv6 candidates <xref
      target="RFC6724"></xref> and will attempt connectivity checks on all the
      IPv6 candidates before trying an IPv4 candidate. If the IPv6 path is
      broken, this fallback to IPv4 can consume a lot of time, harming user
      satisfaction of dual-stack devices. This causes ICE to perform terribly
      in cases where IPv6 doesn't work, which is still very commonplace. This
      document recommends an alternative prioritization for candidates that
      improves this situation with a goal that the ICE agent not be
      inordinately harmed by a simple reordering of the candidates.</t>

      <t>This document describes an algorithm that makes ICE connectivity
      checks more responsive to failures of an address family by reordering
      the candidates such that IPv6 and IPv4 candidates get a fair chance
      during connectivity checks. This algorithm change is backward compatible
      with existing implementations, and does not require any changes other
      than to the selection of candidate priority.</t>
    </section>

    <section anchor="notation" title="Notational Conventions">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref>.</t>

      <t>This note uses terminology defined in <xref
      target="RFC5245"></xref>.</t>
    </section>

    <section anchor="problem_stmt" title="Candidate Priority">
      <t>By using the technique described in <xref
      target="alg_overview"></xref>, if there are both IPv6 and IPv4 addresses
      candidates gathered, and the first 'N' candidates are of the same IP
      address family, then the highest-priority candidate of the other address
      family is promoted to position 'N+1' in the check list thus making ICE
      connectivity checks more responsive to failures of an address family.
      The algorithm ensures that there are no more than a fixed number of
      candidates of a given IP version in a single sequence.</t>

      <t>Even if an administrator changes the policy table to prefer IPv4
      addresses over IPv6 addresses as explained in <xref
      target="RFC6724"></xref>, the IPv4 server-reflexive candidates will
      still have lower priority than IPv6 host candidates as per the
      "Recommended Formula" (section 4.1.2.1 of <xref
      target="RFC5245"></xref>) which is not desired. The Happy Eyeballs
      extension for ICE algorithm resolves the problem in this scenario as
      well by ensuring that IPv4 server-reflexive candidates are placed before
      IPv6 host candidates and thus ordering based on candidate types is no
      longer in effect.</t>
    </section>

    <section anchor="alg_overview" title="Algorithm overview">
      <t>The Happy Eyeballs Extension for ICE algorithm proposes the following
      steps after candidates are prioritized using the formula in section
      4.1.2.1 of <xref target="RFC5245"></xref>:</t>

      <t><list style="letters">
          <t>If the first 'N' candidates are of the same IP address family,
          then the highest-priority candidate of the other address family is
          promoted to position 'N+1' in the list.</t>

          <t>Step (a) is repeated for subsequent candidates in the list until
          all candidates of the preferred address family are exhausted.</t>
        </list></t>

      <t>The algorithm ensures that a long sequence of candidates belonging to
      the same address family is interleaved with candidates from an
      alternative IP version.</t>

      <t>The following figure illustrates the result of the algorithm on
      candidates:</t>

      <t><figure>
          <artwork><![CDATA[Before Happy Eyeballs Extension for ICE algorithm : 
----------------------------------------------------
 (highest)  IPv6 Host Candidate-1 
            IPv6 Host Candidate-2 
            IPv6 Host Candidate-3 
            IPv6 Host Candidate-4 
            IPv6 Host Candidate-5 
            IPv6 Host Candidate-6 
            IPv6 Host Candidate-7 
            IPv4 Host Candidate 
            IPv6 Server Reflexive Candidate  
            IPv4 Server Reflexive Candidate
            IPv6 Relayed Transport Candidate
 (lowest)   IPv4 Relayed Transport Candidate


After Happy Eyeballs Extension for ICE algorithm :
--------------------------------------------------
 (highest)  IPv6 Host Candidate-1 
            IPv6 Host Candidate-2 
            IPv6 Host Candidate-3 
            IPv4 Host Candidate                 ---> Promoted candidate
            IPv6 Host Candidate-4 
            IPv6 Host Candidate-5
            IPv6 Host Candidate-6 
            IPv4 Server Reflexive Candidate    ---> Promoted candidate
            IPv6 Host Candidate-7 
            IPv6 Server Reflexive Candidate 
            IPv6 Relayed Transport Candidate 
 (lowest)   IPv4 Relayed Transport Candidate]]></artwork>
        </figure></t>

      <section anchor="result" title="Processing the Results">
        <t>If ICE connectivity checks using an IPv4 candidate is successful
        for each component of the media stream and connectivity checks using
        IPv6 candidates is not yet successful, the ICE endpoint will declare
        victory, conclude ICE for the media stream and start sending media
        using IPv4. However, it is also possible that ICE endpoint continues
        to perform ICE connectivity checks with IPv6 candidate pairs and if
        checks using higher-priority IPv6 candidate pair is successful then
        media stream can be moved to the IPv6 candidate pair. Continuing to
        perform connectivity checks can be useful for subsequent connections,
        to optimize which connectivity checks are tried first. Such
        optimizations are out of scope of this document.</t>

        <t>The following diagram shows the behaviour during the connectivity
        check when Alice calls Bob and Agent Alice is the controlling agent
        and uses the aggressive nomination algorithm. "USE-CAND" implies the
        presence of the USE-CANDIDATE attribute.</t>

        <figure anchor="Figure2" title="Happy Eyeballs Extension for ICE">
          <artwork align="left"><![CDATA[ Alice                                                         Bob            
  |                                                             |
  |                                                             |
  |  Bind Req USE-CAND                     Bind Req             |
  |  using IPv6                            using IPv6           |  
  |------------------>X                X<-----------------------|
  |  Bind Req USE-CAND                     Bind Req             |  
  |  using IPv6 after Ta                   using IPv6           | 
  |------------------>X                X<-----------------------|           
  |                                                             |
[after connectivity checks for 2 IPv6 addresses, try IPv4]      |
  |                                                             | 
  |  Bind Req USE-CAND                                          | 
  |  using IPv4                                                 | 
  |------------------------------------------------------------>|                      
  |                                        Bind Resp            |  
  |                                        using IPv4           |
  |<----------------------------------------------------------- |
  |          RTP                                                | 
  |============================================================>|
  |                                       Bind Req              |  
  |                                       using IPv4            |
  |<------------------------------------------------------------|
  |  Bind Response                                              |  
  |  using IPv4                                                 |
  |------------------------------------------------------------>|
  |          RTP                                                | 
  |<===========================================================>|
                  ]]></artwork>
        </figure>
      </section>
    </section>

    <section title="IANA Considerations">
      <t>None.</t>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>STUN connectivity check using MAC computed during key exchanged in
      the signaling channel provides message integrity and data origin
      authentication as described in section 2.5 of <xref
      target="RFC5245"></xref> apply to this use.</t>
    </section>

    <section anchor="ack" title="Acknowledgements">
      <t>Authors would like to thank Bernard Aboba, Martin Thomson, Jonathan
      Lennox, Pal Martinsen for their comments and review.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include="reference.RFC.3484"?>

      <?rfc include="reference.RFC.5766"?>

      <?rfc include="reference.RFC.5245"?>

      <?rfc include="reference.RFC.5389"?>

      <?rfc include="reference.RFC.4566"?>

      <?rfc include="reference.RFC.6724"?>

      <?rfc include="reference.RFC.4566"
?>

      <?rfc include="reference.RFC.6336"?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.RFC.2663'
?>

      <?rfc include='reference.I-D.keranen-mmusic-ice-address-selection'?>

      <!---->
    </references>
  </back>
</rfc>
