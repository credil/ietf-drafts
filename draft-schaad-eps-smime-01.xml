<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2119 SYSTEM "bibxml/reference.RFC.2119.xml" >

  <!ENTITY SMIME-REFS SYSTEM "bibxml/smime.xml">
  &SMIME-REFS;

  <!ENTITY EPS-WS-TRUST SYSTEM "bibxml3/reference.I-D.draft-eps-ws-trust.xml">
  <!ENTITY EPS-ASN SYSTEM "ForDraft/eps.incl">
  <!ENTITY EPS-CT SYSTEM "ForDraft/eps-ct.incl">
  <!ENTITY EPS-OKA SYSTEM "ForDraft/eps-oak.incl">
  <!ENTITY EPS-URL-ATTR SYSTEM "ForDraft/eps-url-attr.incl">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xlst' ?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc comments="yes"?>
<rfc category="std" docName="draft-schaad-eps-smime-01" ipr="trust200902">
  <front>
    <title abbrev="EPS ASN.1">Email Policy Service ASN.1 Processing</title>
    <author fullname="Jim Schaad" initials="J." surname="Schaad">
      <organization>Soaring Hawk Consulting</organization>
      <address>
        <email>ietf@augustcellars.com</email>
      </address>
    </author>
    <date/>
    <abstract>
      <t>When using the Email Policy Service model, there exist the communications with the policy server which are based in XML and there are the communications which are S/MIME based and thus done in ASN.1.  This document covers the ASN.1 requirements and the modifications in S/MIME processing needed to implement an Email Policy Service system.</t>
    </abstract>
  </front>
  <middle>

    <section title="Introduction">
      <t>In the traditional e-mail system, the sender of a message is responsible for determining the list of recipiemnts for a message, obtaining a valid public or group key for each recipient, applying a security label to a message, and sending the message.  The recipient of a message is responsible for the enforcement of any security labels on a message.  While this system works in theory, in practice it has some difficulties that have lead to problems in getting S/MIME mail widely deployed.  This document is part of an effort to provide an alternative method of allocating the responsiblities above to different entities in an attempt to make the process work better.</t>
      <t>In an Email Policy Service deployment of S/MIME, the sender of the message is still responsible for determing the list of recipients for the message and determining the security label to be applied to the message, however the responsiblity of obtaining valid keys for each recipient is off-loaded to the policy server component.  The recipient is no longer responible for enforcment of the policy as this is also off-loaded to the policy server component.  Doing this allows for the following changes in behavior of the system:
        <list style="symbols">
          <t>The sender is no longer responsible for finding and validating the set of public keys used for the message.  This simplifies the complexity of the sender and lowers the resources required by the sender.</t>
          <t>The set of recipients that can decrypt the message can now be change dynamically after the message is sent, without resourting to a group keying stratigy.</t>
          <t>The enforcement of the policy is now done centrally, this means that updates to the policy are instantanous and the enforcement policy can be centerally audited.</t>
          <t>Since the label enforcement is done before the message is decrypted, there are no concerns about the message contents being leaked by poor client implemenations.</t>
          <t>Many of the same components used in a web-based deployment of policy enforcement in a confederation can be used for e-mail based deployment of information.</t>
        </list>
      </t>

      <t>This document is layed out as follows:
        <list style="symbols">
          <t>In <xref target="model"/> a more complete discription of the components involved in the model are discussed.</t>
          <t>In <xref target="RI"/> I describe the new ASN.1 structures that are used to carry the additional information, and the way that these structures are used in a recipient info structure.</t>
          <t>In <xref target="sender"/> I describe the modifications from the sender processing rules outlined in <xref target="SMIME-MSG"/>.</t>
          <t>In <xref target="recipient"/> I describe the modification from the recipient processing rules outlined in <xref target="SMIME-MSG"/>.</t>
        </list>
      </t>
      
      <section title="Requirements Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
      </section>
    </section>

    <section title="Model" anchor="model">
      <t>To be supplied from the problem statement document.</t>
      <section title="Overview">
        <t>To be supplied from the problem statement document.</t>
<figure align="center" title="Message Access Control Actors" anchor="fig1"><artwork>
                    (1)(2)(6)
        (3)(5)     +----------+    (7)
      +------------|Sending   |-------------+
      |            |Agent     |             |
(4)   |            +----------+             |
+----------+                           +---------+
|Email     |                           |Mail     |
|Policy    |                           |Transfer |
|Service   |                           |Agent    |
+----------+                           +---------+
 (4)  |            +----------+             |
      |            |Receiving |             |
      +------------|Agent     |-------------+
        (3)(5)     +----------+    (1)
                     (2)(6)
</artwork></figure>
        <t>List the boxes above and give some info about them.</t>
      </section>

      <section title="Sender">
        <t>The general steps that need to be taken by the sender of an EPS message are listed below.  The steps refer to the numbers in the upper halve of <xref target="fig1"/>.  Talk about the expansion in section x.x</t>
        <t>
          <list style="numbers">
            <t>The Sending Agent composes the message, determines the set of recipients and a policy label to be applied to the message.</t>
            <t>The Sending Agent randomly creates a KEK.</t>
            <t>The Sending Agent transmits the KEK, the list of recipents and the policy label to the Email Policy Service.  One possible protocol for this is <xref target="EPS-WS-TRUST"/>.</t>
            <t>The Email Policy Service validates that the set of recipients, the sender and policy label are consistant.</t>
            <t>The Email Policy Service returns an EPS-KEK attribute to the Sending Agent.</t>
            <t>The Sending Agent creates a normal S/MIME encrypted data message, one of the recipient info structures being a KEK recipient using the KEK created in step 2 and the EPS-KEK attribute from step 5.</t>
            <t>The Sending Agent send the mesage to the Mail Transfer Agent using SMTP or a simliar protocol.</t>
          </list>
        </t>
      </section>
      <section title="Recipient" anchor="model-recip">
        <t>The general steps that need to be taken by a Reciving Agent for an EPS messaging system.  The steps refer to the bottom half ov <xref target="fig1"/>.  An expansion of this is covered in <xref target="recipient"/>.</t>
        <t>
          <list style="numbers">
            <t>The Recieving Agent obtains the message from a Mail Transfer Agent using IMAP, POP or simliar protocol.</t>
            <t>The Recieving Agent recognizes that a KEK recipient info with an EPS-KEK attribute exists and validates the attribute.</t>
            <t>The Recieving Agent sends the KEK idnetifer and the EPS-KEK attribute along with other information to the Email Policy Service.</t>
            <t>The Email Policy Service evalutes the policy label and the recipient information.</t>
            <t>The Email Policy Service returns the KEK to the Recieving Agent.</t>
            <t>The Recieving Agent decrypts the message and displays it to the user.</t>
          </list>
        </t>
      </section>
    </section>
    <section title="Recipient Info Encoding" anchor="RI">
      <t>When creating an Email Policy S/MIME message we use the Other Key Attribute field in the KEKRecipentInfo.kekid structure to hold the required information about how to find the KEK that is required to decrypt the message.  For the convenience of the reader we include the KEKRecipientInfo structure and its pieces here:</t>
<figure><artwork><![CDATA[
KEKRecipientInfo ::= SEQUENCE {
    version CMSVersion,  -- always set to 4
    kekid KEKIdentifier,
    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
    encryptedKey EncryptedKey }

KEKIdentifier ::= SEQUENCE {
    keyIdentifier OCTET STRING,
    date GeneralizedTime OPTIONAL,
    other OtherKeyAttribute OPTIONAL }

OtherKeyAttribute ::= SEQUENCE {
    keyAttrId  KEY-ATTRIBUTE.
            &id({SupportedKeyAttributes}),
    keyAttr    KEY-ATTRIBUTE.
            &Type({SupportedKeyAttributes}{@keyAttrId})}
]]></artwork></figure>
      <t> When you look at the KEKRecipientInfo structure you fill out the fields as follows:
        <list style="hanging">
          <t hangText="version">is set to the value of 4.</t>
          <t hangText="kekid">is a sequence where the fields are:
            <list style="hanging">
              <t hangText="keyIdentifier">is a randomly generated value.  The value is created without any internal symantics and should be unique within the message.  It is suggested that the value be between 20 and 30 octets in length.</t>
              <t hangText="date">is not used and should be omitted.</t>
              <t hangText="other">is a sequence where the fields are:
                <list style="hanging">
                  <t hangText="keyAttrId">contains the value id-keyatt-eps-token.</t>
                  <t hangText="keyAttr">contains a SignedData structure.  The internal details of this data structure are covered in <xref target="eps-oka"/>.</t>
                </list>
              </t>
            </list>
          </t>
          <t hangText="keyEncryptionAlgorithm">contains the identifier and the type information for the key encryption algorithm.  <xref target="algs"/> lays out the manditory algorithms.  This algorithm must be understandable by the sender of the message and by the recipient of the message, but it is not a requirement that the Email Policy Server can process the algorithm.</t>
          <t hangText="encryptedKey">contains the content encryption key encrypted by the key encryption key.</t>
        </list>
      </t>
      <section title="EPS Other Key Attribute" anchor="eps-oka">
        <t>The EPS Other Key Attribute functions as the lock box for the key encryption key used in encrypting the content encryption key.  In addition to the KEK, the lock box also contains the information that is needed by the Email Policy Server to know the policy(s) applied to the encrypted data and possible parameters for the policy.</t>
        <t>The relevant section from the ASN.1 module which contains the content is:</t>
        &EPS-OKA;
        <t>We define a new KEY-ATTRIBUTE called keyatt-eps-kek.  This attribute is identified by the id-keyatt-eps-token.  The data structure that is assocated with this key attribute is the CMS SignedData structure.</t>
        <t>When you look at the SignedData structure, the fields are filled in as follows (some less signficant fields are omitted):
          <list style="hanging">
            <t hangText="encapContentInfo"> is a structure containing the fields:
              <list style="hanging">
                <t hangText="eContentType"> is id-envelopedData.</t>
                <t hangText="eContent"> is CMS EnvelopedData structure with the following fields:
                  <list style="hanging">
                    <t hangText="recipientInfos"> contains the lock box for the Email Policy Server to get access to the data encrypted in this object.  See below for some additional dicussion on what lock boxes need to be created.</t>
                    <t hangText="encryptedContentInfo"> is a structure containing the following elements:
                      <list style="hanging">
                        <t hangText="contentType"> is id-ct-eps-LockBox.</t>
                        <t hangText="contentEncryptionAlgorithm"> contains the identifier and parameters for the content encryption algorithm.  This algorithm only needs to be understood by the Email Policy Service.</t>
                        <t hangText="encryptedContent"> contains the encrypted EPS LockBox content.  Details on this type are in the next section.</t>
                      </list>
                    </t>
                  </list>
                </t>
              </list>
            </t>
            <t hangText="certificates"> SHOULD contain the set of certificates (up to but not including the trust anchor) needed to validate the set of signer info structures.</t>
            <t hangText="signerInfos"> will contain one or more signer info structures.  In each signature the signed attributes:
              <list>
                <t>MUST contain the signing time, the message digest, the content type and the EPS url attributes.</t>
                <t>MAY contain the ESS security label attribute.</t>
                <t>other attributes can also be included.</t>
              </list>
            </t>
          </list>
        </t>
        <t>When creating the recipient info structures for the EnvelopedData structure, there will normally only need to be a single entry in the sequence as the only entity that needs to decrypt the EPS Lockbox is the Email Policy Service.  In the event that the service is distributed over multiple servers then multiple lock boxes may need to be created.  One of the implications of the fact that the originator of the message is the only recipient is that, although the signing key needs to be contained in a certificate, there is no corresponding requirement that the encryption key needs to be in a certificate.  Instead of using a certificate, a subject key identifer that is meaningful only to the Email Policy Service can be used.</t>
      </section>
      <section title="EPS Content Type">
        <t>The innermost content type for an EPS Other Key Attribute is always an EPS Lockbox.  This content is always contained in an encrypted CMS object which is encrypted for the Email Policy server itself, as such the contents and structure is known just to the EPS server.</t>
        <t>The relevant section from the ASN.1 module which devines this content is:</t>
        &EPS-CT;
        <t>In the above ASN.1, the following items are defined:
          <list style="hanging">
            <t hangText="ct-eps-LockBox"> is a new CMS content type object, this object is to be added to the conten type object set ContentSet in <xref target="CMS-ASN"/>.</t>
            <t hangText="id-ct-eps-LockBox"> is the identifier defined for the new content type.</t>
            <t hangText="EPS-LockBox"> is the new type defined for new content type.  This is a sequence <cref source="JLS">I wonder if this should be a sequence of rather than a sequence so that you can define multiple KEK values each with a different label on it as well as a set of KEKs that have a single common label.</cref> with the following fields:
              <list style="hanging">
                <t hangText="label"> contains the policy label that is to be applied to the KEK values in the keyList field.</t>
                <t hangText="keyList"> contains the KEK values.</t>
              </list>
            </t>
            <t hangText="KeyList"> is a new type that contains the KEK values or the KeyRecipientInfo structures.  This allows for messages to be sent with either early-binding, where a RecipientInfo structure is filled out for the recieving agent, or late-binding, where the KEK value is sent from the Email Policy Service to the recieving agent.
              <list style="hanging">
                <t hangText="namedRecipients"> contains the recipient info structures for individually identified recipients.</t>
                <t hangText="defaultRecipients"> contains the KEK keys for those recipients that are not individual identified with their own recipient info structures.</t>
              </list>
            </t>
            <t hangText="NamedRecipient"> contains the information identifying a single named recpient along with the recipient info structures for that recipient.
              <list style="hanging">
                <t hangText="recipient"> contains the name of the name of the recipient in the form of an RFC2822 email address.</t>
                <t hangText="kekValues"> contains the recipient info structures for the named recipient.  The information is contained in a sequence of values, one for each possible encrypted block.  The fields in the sequence are:
                  <list style="hanging">
                    <t hangText="kekIdentifier"> contains the value of the kek identifier in the message.</t>
                    <t hangText="keyValue"> contains a recpient info structure wrapping the CEK of the message.</t>
                  </list>
                </t>
              </list>
            </t>
            <t hangText="OneKek"> contains the information that defines a single KEK to be used.  The sequence has the fields:
              <list style="hanging">
                <t hangText="kekIdentifier"> contains the identification value for the KEK.  This value matches the KEKIdentifier.keyIdentifier value in the recipient info information.</t>
                <t hangText="kekValue"> contains the KEK value.</t>
              </list>
            </t>
            <t hangText="OneLabel"> is the type structure used to specify the individual policies and how the policies interact with each other.  The structure is explicitly setup to be extensible in future versions.  Information on how the extensisbility should be handled is in <xref target="extend"/>.  The choices in the structure are:
              <list style="hanging">
                <t hangText="andLabels">allows for a set of policies to be combined together in such as way as to state that for the overall statement to be true, each of the policies listed must also be true.  The ASN.1 is designed so that there must be at least two elements in the combined statement.</t>
                <t hangText="orLabels">allows for a set of policies to be combined together in such a way as to state that for the overall statement to be true, any of the policies listed needs to be true.  The ASN.1 is designed so that there must be at least two elementsin the combined statement.</t>
                <t hangText="exclude">allows for two policies to be combined together such as to state that for the overall policy to be true, the first policy must be true and the second policy must not be true.  This policy combination is designed to remove a set of people from the over all policy.  (I.e. every one in the general group but is not working for company X.)</t>
                <t hangText="uriLeaf">allows for the specifiction of a policy as a URI.  If the policy is unknown then the policy evaluation fails.  The use of a URI allows for the addition of parameters to be added to the policy statement.<cref source="JLS">Do we want to change the type?  What do we want to say about internaltionalization?</cref></t>
                <t hangText="oidLeaf">allows for the specifiction of a policy as an object identifier.  THere is no option to provide for parameters. <cref source="JLS">We could add such an option if we desired.</cref> An unrecognized policy to evaluated as fails.</t>
              </list>
            </t>
          </list>
        </t>
        <section title="Extensibility" anchor="extend">
          <t>The ASN.1 type OneLabel has been explicitly defined to allow for later extensibility.  When a new element is added, it will be added with at the end of the choice with a different tag value.  ASN.1 decoders need to following the current recommendations on dealing with extensibility.  This means that when the decoder finds a new choice in this structure that is not part of the current syntax, the element should be treated as an unknown blob and returned to the caller as an unrecognized blob.  This allows for the calling code to make the decision on how the unknown element is treated.</t>
            <t>However the extensisiblity is not handled the same in all cases.  Each of the four different cases is outlined below.</t>
            <section title="Sender Composing">
              <t>The set of policies that can be used by the sender in applying a label is usually given as a list of policies, however under some circumstances the sender may be handed structured policies either for application or for checking that some policies can be used together.  If structured policies are provided to the sender, it will not matter to the sender that they cannot evaluate the policy unless the details are to be shown to the sending user.  Following the current ASN.1 rules which allow for the decoding and then re-encoding of a type which contains unknown nodes allows the sending agent the most flexiblity.</t>
              <t>The protocol used to give the policy information to the sending client may not use the ASN.1 structure provided here or configuration purposes but would generally be expected to provide for a different data format.</t>
            </section>
            <section title="Sender to Email Policy Service">
              <t>In the sending agent to Email Policy Service protoocl (defined external to this document) the ASN.1 type OneLabel may or may not be used directly.  If it is used, then the Email Policy Server is expected to reject the label if it contiains elements which it does not understand.  The general expectation is that the Email Policy Service that the sender is communicating with is going to be the same one as is later enforcing the policy. It makes no sense for this server to accept a policy that it would later be unable to enforce.  The protocol should make provisions for the return of this as an explicit error code.  Having the ASN.1 decoded allows for the communication of the exact tag that is causing the problem.</t>
            </section>
            <section title="Recipient to Email Policy Service">
              <t>The Email Policy Service which recipient communicates way is normally the same server as the sender communicated with.  However the server can be a different server, or the server may have been downgraded in the mean time.  In this case the policy evaluation need to be conservative.  There are two different way s of doing this evaluation.  The first option is to say that if an unknown node is found, then the policy evaluation fails for all cases.  The second option is to try and evaluation the policy, but to do so in a conserative manner.  If the second option is chosen then the following rules are used:
                <list style="hanging">
                  <t hangText="uriLeaf"> results in true, false or unknown.  The unknown state results if the policy is unknown or cannot currently be evaluated.</t>
                  <t hangText="oidLeaf">  results in true, false or unknown.  The unknown state results if the policy is unknown or cannot currently be evaluated.</t>
                  <t hangText="andLabels"> results in false if any input node is false.  It results in true if all of the input nodes are true.  Otherwise it results in unknown.</t>
                  <t hangText="orLabels"> results in unknown if any input node is unknown.  It results in true if any node is true and no nodes are unknown.  Otherwise it results in false.</t>
                  <t hangText="exclude"> results in false if the second input is true or unknown. It results in true if the first input is true and the second is false.  Otherwise it results in unknown.</t>
                </list>
                If the final node results in true, then access is gracted.  If the final result is either false or unknown then access is denied.  Any future element that is added to the choice needs to define a similar rule to the set of rules above.</t>
            </section>
            <section title="Recipient User Agent Display">
              <t>Recipient user agents may want to display the policy to the user.  This policy may be communicated from the Email Policy Service to the recipient using the OneLabel ASN.1 structure or using a different type.  The label has been successfully (or unsuccessfully) validated so access has been granted (or denied) to the message.  At this point we are only talking about a user interface issue.  The recipient user agent should make some type of provision for indicating that an operation was placed in that location of the tree, but the agent is not aware of what the operation is.</t>
            </section>
        </section>
        <section title="Multiple KEKs">
          <t>Discuss cases where multiple KEKs are placed in the message.</t>
        </section>
      </section>
      <section title="EPS URL Authenticated Attribute">
        <t>It is required that the name of the Email Policy Server be securely communicated to the message recipient.  For this purpose a URL is used as this can communicate both a server name, but also additional parameters that can be used to identify a specific service on the server.</t>
        <t>The relevent section from the ASN.1 module for this attribute is:</t>
        &EPS-URL-ATTR;
        <t>From this we can see the following:
          <list>
            <t>A new attribute aa-eps-url has been defined.</t>
            <t>The OID value of id-aa-eps-url has been created to identify the new attribute.</t>
            <t>The type of the value associated with the attribute is a UTF8String which contains the URL for the Email Policy Server.  <cref source="jls">It might be that we should use IA5String for this depending on how you feel about the ability to include i18n strings in the domain name.  I.e. should it be done before it is placed here or afterwords?</cref><cref source="jls">Do we care about allowing things other than http here?  For example should these be specified as soap:... URIs?</cref></t>
            <t>The new attribute is to appear only as a Signed Attribute in a SignedData structure.  It is therefore to be added to the attribute set SignedAttributeSet in the update ASN.1 module contained in <xref target="CMS-ASN"/>.</t>
          </list>
        </t>
        <t>The attribute structure defined for signed attributes allows for multiple values to be carried in a single attribute.  For this attribute there MUST be at least one value.  If there is more than one value, each value MUST be a unique.</t>
        <t>This attribute is only included in a SignedData object by an Email Policy Server.  There are no processing rules for the sender of a message.  The processing rules for a recipient can be found in <xref target="recipient"/>.</t>
      </section>
    </section>
    <section title="Sender Processing Rules" anchor="sender">
      <section title="Flow">
        <t>This is the set of processing steps that a sender needs to do:
          <list style="numbers">
            <t>Sender Agent obtains the set of policies under which it can send a message.</t>
            <t>Sender Agent composes the message content.</t>
            <t>Sender Agent determines the policy label to be applied to the message.</t>
            <t>Sender Agent determines the set of recipients for the message.</t>
            <t>Sender Agent randomly creates the KEK.</t>
            <t>Sender Agent transmits the KEK, the list of recipients and the policy label to the EPS.</t>
            <t>Sender Agent recieves an EPS-KEK attribute from the policy server.  If the policy validation fails then the sender agent cannot send the message under the current policy label.</t>
            <t>Sender Agent verifies the signature on the signed data structure inside of the EPS-KEK attribute.
              <list>
                <t>Signature is current and passes cryptographic processing.</t>
                <t>Signed attributes contains the EPS URL attribute, and the attribute is consistant with the policy selected.</t>
                <t>Other checks</t>
              </list>
            </t>
            <t>Sender Agent selects an appropriate content encryption algorithm and randomly generates a CEK and encrypts the message.</t>
            <t>Sender Agent creates a KEK recipient info structure with the EPS-KEK attribute.  Sender Agent also creates all other necessary recipient info structures including one itself if required.</t>
            <t>Sender Agent finishs encoding the message and transmits it to the MTA.</t>p
          </list>
        </t>
      </section>
    </section>
    <section title="Recipient Processing Rules" anchor="recipient">
      <section title="Flow">
        <t>In this section we expand on the list of actions that are <xref target="model-recip"/>.  When looking at the validation steps that are given here, the results need to be the same but the order that the steps are taken can be different.  As an example, it can make sense to do the policy check in step X before doing the signature validation as this would not require any network access.</t>
        <t>This is the set of processing that the recipient needs to do:
          <list style="numbers">
            <t>The Recieving Agent obtains the message from a Mail Transfer Agent using IMAP, POP or a similar protocol.</t>
            <t>The Recieving Agent recognizes that a KEK recipient info exists with an EPS-KEK attribute.  It is recommended that the entire list of recipient info structures be checked for one that can be processed directly before processing this node.</t>
            <t>The Recieving Agent validates the EPS-KEK attribute.  THe following steps need to be taken for validation.
              <list style="letters">
                <t>The signature on the SignedData structure is validated.  If the validation fails then processing ends.  If more than one SignerInfo element exists on the structure, then the validation succeeds and the signed attributes from that SignerInfo structure are used.  The order of performing the validation of the SignerInfo structures may be influenced by the content of EPS URL attribute.</t>
                <t>If an ESS security label attribute (<xref target="ESS-BASE"/>) is present, then it must be evaluated and processing ends if the security label processing fails or is denied.</t>
                <t>The EPS URL attribute is absent, then processing fails.</t>
                <t>The URL value in the EPS URL attribute is checked againist local policy.  If the check fails then processing fails.  This check is performed so that information about the user is not given to random Email Policy Services.</t>
                <t>...Other steps....</t>
              </list>
            </t>
            <t>The recipient gathers the necessary identity and attribute statements, usual certificates or SASL statements. <cref source="JLS">At the present we don't give any idea of how this is to be done.</cref></t>
            <t>The recipient establishing a secure connection to the Email Policy server and passes in the identity and attribute statements.</t>
          </list>
        </t>
      </section>
      <section title="Reply and Forward Processing">
        <t>Cover the fact that a token should be returned when a message is read so that a reply message can be sent even if they do not normally have permission to send a message.</t>
      </section>
    </section>
    <section title="Policy Server Processing Rules">
    </section>
    <section title="Missing Pieces">
      <section title="Sender/Policy Server Protocol">
      </section>
      <section title="Recipient/Policy Server Protocol">
      </section>
      <section title="MLA/Policy Server Protocol">
      </section>
    </section>
    <section title="Manditory Algorithms" anchor="algs">
      <t>KEK manditory to implement algorithms - MUST AES-128 KEK Wrap. SHOULD AES-256 KEK wrap.</t>
      <t>Key Transport - MUST RSA v 1.5</t>
      <t>Key Agreement - MUST EC-DH for group ...</t>
      <t>Content Encryption - MUST AES-128.</t>
    </section>
    <section title="Security Considerations">
      <t>Man in the middle attack on the protocol from the sending agent to the email policy server.</t>
      <t>Man in the middle attack on the protocol from the recieving agent to the email policy server.</t>
    </section>
    <section title="IANA Considerations">
      <t>No action by IANA is required for this document.</t>
    </section>
  </middle>
  <back>
    <references title="Normative References">
      &CMS-ASN;
      &EPS-WS-TRUST;
      &ESS-BASE;
      &RFC2119;
      &SMIME-MSG;
    </references>
    <section title="2009 ASN.1 Module">
      &EPS-ASN;
    </section>
  </back>
</rfc>
