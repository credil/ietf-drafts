<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-leung-cdni-uri-signing-00"
     ipr="trust200902">
  <front>
    <title abbrev="CDNI URI Signing">URI Signing for CDN Interconnection
    (CDNI)</title>

    <author fullname="Kent Leung" initials="K" surname="Leung">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street>3625 Cisco Way</street>

          <city>San Jose</city>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <phone>+1 408 526 5030</phone>

        <email>kleung@cisco.com</email>
      </address>
    </author>

    <author fullname="Francois Le Faucheur" initials="F. "
            surname="Le Faucheur">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street>Greenside, 400 Avenue de Roumanille</street>

          <city>Sophia Antipolis</city>

          <code>06410</code>

          <country>France</country>
        </postal>

        <phone>+33 4 97 23 26 19</phone>

        <email>flefauch@cisco.com</email>
      </address>
    </author>

    <author fullname="Matt Caulfield" initials="M" surname="Caulfield">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street>1414 Massachusetts Avenue</street>

          <city>Boxborough</city>

          <region>MA</region>

          <code>01719</code>

          <country>USA</country>
        </postal>

        <phone>+1 978 936 9307</phone>

        <email>mcaulfie@cisco.com</email>
      </address>
    </author>

    <date day="13" month="Oct" year="2012"/>

    <workgroup>CDNI</workgroup>

    <abstract>
      <t>This document describes how the concept of URI signing supports the
      content access control requirements of CDNI and proposes a candidate URI
      signing scheme.</t>

      <t>The proposed URI signing method specifies the information needed to
      be included in the URI and the algorithm used to authorize and to
      validate access request for the content referenced by the URI.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The overall problem space for CDN Interconnection is described in
      <xref target="RFC6707"/>.</t>

      <t>The CDNI Problem Statement <xref target="RFC6707"/>, the CDN
      requirements document <xref target="I-D.ietf-cdni-requirements"/> and
      the CDNI Framework document<xref target="I-D.ietf-cdni-framework"/>
      discuss the need for the interconnected CDNs to be able to implement an
      access control mechanism that enforces the CSP distribution policy.</t>

      <t>Specifically, <xref target="I-D.ietf-cdni-framework"/> states:</t>

      <t>"The CSP may also trust the CDN operator to perform actions such as
      ..., and to enforce per-request authorization performed by the CSP using
      techniques such as URI signing."</t>

      <t>In particular, the following requirement is listed in <xref
      target="I-D.ietf-cdni-requirements"/>:</t>

      <t>"META-17 [HIGH] The CDNI Metadata Distribution interface shall allow
      signaling of authorization checks and validation that are to be
      performed by the surrogate before delivery. For example, this could
      potentially include:</t>

      <t>* need to validate URI signed information (e.g. Expiry time, Client
      IP address)."</t>

      <t>This document proposes a URI signing scheme that allows Surrogates in
      interconnected CDNs to enforce a per-request authorization performed by
      the CSP. Splitting the role of performing per-request authorization by
      CSP and the role of validation of this authorization by the CDN allows
      any arbitrary distribution policy to be enforced across CDNs without the
      need of CDNs to have any awareness of the actual CSP distribution
      policy.</t>

      <section title="Terminology">
        <t>This document uses the terminology defined in <xref
        target="RFC6707"/>.</t>

        <t>This document also uses the terminology of <xref target="RFC2104"/>
        including the following terms (reproduced here for convenience):</t>

        <t><list style="symbols">
            <t>MAC: message authentication code</t>

            <t>HMAC: hash-based message authentication code (HMAC)</t>

            <t>HMAC-SHA1: HMAC instantiation using SHA1 as the cryptographic
            hash function</t>

            <t>HMAC-MD5: HMAC instantiation using MD5 as the cryptographic
            hash function</t>
          </list></t>

        <t>In addition, the following terms are used throughout this
        document:</t>

        <t><list style="symbols">
            <t>URI Signature: message digest that is computed with an
            algorithm that uses the key and URI as inputs to the hash
            function. This value is appended in the signed URI.</t>
          </list></t>
      </section>

      <section anchor="overview" title="URI Signing Overview">
        <t>URI Signing is an authorization method for content delivery. This
        is based on embedding the HTTP URI with information that can be
        validated to ensure the request has legitimate access to the content.
        There are two parts: 1) attributes that convey authorization
        restrictions (e.g. source IP address and time period), and 2) message
        digest that confirms the integrity and authenticity of the URI
        provided by the URI creator. The authorization attributes can be
        anything agreed upon between the entity that creates the URI and the
        entity that validates the URI. A key is used by the HMAC algorithm to
        generate the message digest (i.e. sign the URI) and validate the
        message digest (i.e. URI signature). The two functions may or may not
        use the same key.</t>

        <t>There are two types of keys used for URI Signing: asymmetric keys
        and symmetric key. Asymmetric keys always have a key pair made up of a
        public key and private key. The private key and public key are used
        for signing and validating the URI, respectively. A symmetric key is
        the same key that is used for both functions. Regardless of the type
        of key, the entity that validates the URI has to obtain the key.
        Distribution for the symmetric key requires security to prevent others
        from taking it. Public key can be distributed freely while private key
        is kept by the URI signer.</t>

        <t>URI Signing operates in the following way. A signed URI is provided
        by the CSP (i.e. URI signer) to the user out of band. When the user
        selects the URI, the HTTP request is sent to the CDN which validates
        that URI before delivering the content.</t>
      </section>
    </section>

    <section anchor="attributes"
             title="Authorization Attributes in URI Signing">
      <t>This section identifies the set of query string attributes that
      provide the authorization information needed to enforce the distribution
      policy of a CSP. Since the URI signing mechanism provides flexibility in
      policy enforcement, the exact subset of attributes used for URI
      signature in a given request is a deployment decision. The defined
      keyword for each query string attribute is specified in parenthesis
      below.</t>

      <t><list style="symbols">
          <t>Version (VER) - An integer used for identifying the version of
          URI signing method with its set of capabilities.</t>

          <t>Expiry Time (ET) - Time in seconds when URL expires since
          midnight 1/1/1970 UTC (i.e. UNIX epoch).</t>

          <t>Client IP (CIP) - IP address of the client in a dotted decimal
          format.</t>

          <t>Key Owner (KO) - Identifier of secret key owner in an integer
          format.</t>

          <t>Key ID (KN) - A number that is used as an index to the key used
          to validate the URI signature.</t>

          <t>Hash Function (HF) - A string used for identifying the hash
          algorithm (e.g. "MD5", "SHA1").</t>

          <t>Algorithm (ALG) - An integer used for identifying the algorithm
          to compute the URI signature.</t>

          <t>Client ID (CID) - Identifier of the client such as IMSI, MSISDN,
          MEID, MAC address, etc.</t>
        </list></t>

      <t>The query string attributes are embedded within the content URL to
      provide information needed to enforce the distribution policy. Each of
      the attributes is further described below.</t>

      <t>The Client IP attribute is used to restrict content access to a
      particular user, based on the client IP address of the user for whom the
      content access was authorized.</t>

      <t>The Expiry Time attribute ensures that the content expires after a
      predetermined time. This limits the time window for content access and
      prevents replay of the request beyond the allotted time.</t>

      <t>The Key Owner and Key ID attributes are used to index the key that is
      retrieved as input to the HMAC algorithm to compute the message digest
      for validaing the signed URI.</t>

      <t>The Algorithm attribute indicates the HMAC algorithm to be used for
      message digest computation.</t>

      <t>The Version attribute indicates which set of capabilities are
      supported (e.g. attributes and their defined values).</t>

      <t>The Client ID attribute is used to restrict content access to a
      particular user associated with this identifier. For example, it could
      be the information about the subscriber, device, or network access
      interface.</t>
    </section>

    <section anchor="uri_signing" title="URI Signing and Validation">
      <t>The keyword for the URI signature is "US".</t>

      <t>The following steps are taken for signing an URI for the algorithms
      defined in this document. Note that some steps may be skipped if the
      attribute is not needed to enforce the distribution policy. The entire
      URI (i.e. scheme, authority, path, query, and fragment as defined in
      <xref target="RFC3986">URI Generic Syntax</xref>) is protected by the
      URI signature when the algorithm (i.e. "ALG") is set to 1. The scheme is
      removed from the URI when the algorithm is set to 2. This allows the URI
      signature to be validated correctly in the case when a client performs a
      fallback to HTTP for a content referenced by an URI with RTSP
      scheme.</t>

      <t><list style="numbers">
          <t>Check if the content URI already contains a query string. If not,
          append a "?" character. If yes, append an "&amp;" character.</t>

          <t>Append the string "VER=0". This represents the base version of
          URI Signing.</t>

          <t>Append the string "&amp;ET=".</t>

          <t>Get the current time in seconds since epoch (as an integer). Add
          the expiry time in seconds as an integer.</t>

          <t>Append this integer.</t>

          <t>Append the string "&amp;CIP=".</t>

          <t>Append the client's IP address in dotted decimal format.</t>

          <t>Append the string "&amp;KO=".</t>

          <t>Append the numeric value of the key owner corresponding to the
          key being used.</t>

          <t>Append the string "&amp;KN=".</t>

          <t>Append the key ID number corresponding to the key being used.</t>

          <t>Append the string "&amp;HF=".</t>

          <t>Append the string for the type of hash function.</t>

          <t>Append the string "&amp;ALG=".</t>

          <t>Append the integer for the type of algorithm. Note: If algorithm
          is "1", no additional logic needed by default. If algorithm is "2",
          remove the scheme part of the URI.</t>

          <t>Append the string "&amp;US=".</t>

          <t>Store this as the message (e.g.
          http://example.com/content.mov?VER=0&amp;ET=1209422976&amp;CIP=171.71.50.123&amp;KO=1&amp;KN=2&amp;HF=1&amp;ALG=1&amp;US=).</t>

          <t>For symmetric key, compute the message digest (i.e. URI
          signature) using the algorithm with key and message as inputs ot the
          hash function. For asymmetric keys, after the message digest
          computation (as described previously), use the public key to encrypt
          the message digest. </t>

          <t>Convert the message digest to its equivalent human readable
          hexidecimal value (e.g. f08b56f46075813e44b2d4888628a471).</t>

          <t>Append this hexidecimal value to message. This is the complete
          signed URI.</t>
        </list></t>

      <t>The following steps are taken for validating a signed URI. Note that
      some steps may be skipped if the attributes are not embedded in the URI.
      The lack of attribute indicates enforcement of its purpose is not
      necessary in the distribution policy.</t>

      <t><list style="numbers">
          <t>Check if the URI contains a query string. If not, it is not a
          signed URI and request is denied.</t>

          <t>Extract the value from "US=<i>string</i>" part of URI. The value
          is the URI signature.</t>

          <t>Extract the values fom "KO=<i>ko_number</i>" and
          "KN=<i>kn_number</i> part of URI. Use these values to locate the key
          and also key type (i.e. asymmetric or symmetric)</t>

          <t>Extract the value from "HF=<i>hf_number</i>" part of URI. The
          value is the type of hash function.</t>

          <t>Extract the value from "ALG=<i>alg_number</i>" part of URI. The
          value is the type of algorithm.</t>

          <t>Store URI excluding the part after "US=" as the message.</t>

          <t>If the extracted algorithm value is "1", keep message without
          change. If algorithm value is "2", remove the scheme part of the URI
          in the message.</t>

          <t>Compute the message digest (i.e. URI signature) using the
          algorithm with key and message as inputs to the hash function (based
          on the extracted hash function value). </t>

          <t>For symmetric key, compare this computed value with the received
          URI signature. For asymmetric keys, decrypt the URI signature with
          the public key. Then compare the computed value with the decrypted
          value. If the comparison is not a match, the request is denied.
          Otherwise, continue with next step. Note that the request is denied
          if any of the following validations failed.</t>

          <t>Validate that the request came from the same IP address as
          indicated in the "CIP=<i>address</i>".</t>

          <t>Validate that the request arrived before expiration time as
          indicated in the "ET=<i>time</i>" based on the current time.</t>
        </list></t>
    </section>

    <section anchor="cdni_interfaces"
             title="Considerations for CDNI Interfaces">
      <t>The CDNI Interfaces need enhancements to support URI Signing.
      Downstream CDN that supports URI Signing needs to advertise this
      capability to the Upstream CDN. Upstream CDN selects Downstream CDN
      based on such capability when the CSP requires access control to enforce
      its distribution policy. Also, Upstream CDN distributes information
      relevant for validating a signed URI via the CDNI Metadata interface.
      Events that pertain to URI Signing (e.g. request denial or delivery
      after access authorization) are included in the reports generated for
      the CDNI Logging interface.</t>

      <section anchor="advertisement" title="CDNI Capabilities Advertisement">
        <t>The Downstream CDN advertises its capability to support URI Signing
        via the CDNI Request Routing interface. The version of URI Signing
        should be included. TBD: subteam working on this area.</t>

        <t><list style="symbols">
            <t>URI Signing support and its version</t>

            <t>CDNI metadata for URI Signing support</t>
          </list></t>
      </section>

      <section anchor="metadata" title="CDNI Metadata Interface">
        <t>The following CDNI metadata are specified for URI Signing. Note
        that the Key Owner and Key ID information are not needed if only one
        key is provided by CSP or Upstream CDN for the content or set of
        contents covered by the CDNI metadata. Also, the CDNI metadata for
        HMAC algorithm is not needed when the Algorithm attribute is embedded
        in the signed URI. TBD: CDNI Metadata Interface is work in
        progress.</t>

        <t><list style="symbols">
            <t>Content access control indication.</t>

            <t>Type of access control. Specifically, access to content is
            subject to URL signature validation</t>

            <t>Key (i.e. public key or shared key) along with its key index
            (i.e. Key Owner and Key ID) and type (asymmetric or symmetric)
            used for validating URI signature</t>

            <t>List of Downstream CDN authorized for key distribution (i.e.
            trust relationship between CSP and CDNs)</t>

            <t>Algorithm for HMAC to be used for validation.</t>
          </list></t>
      </section>

      <section anchor="logging" title="CDNI Logging Interface">
        <t>The Downstream CDN reports that enforcement of the access control
        was applied to the request for content delivery. TBD: CDNI Logging
        interface is work in progress.</t>

        <t><list style="symbols">
            <t>URI signature validation events (e.g. invalid client IP
            address, expired signed URI, incorrect URI signature, successful
            validation)</t>

            <t>Delivery log with confirmation of access control enforcement
            (i.e Delivery CDN enforced URI Signing before content
            delivery)</t>
          </list></t>
      </section>
    </section>

    <section anchor="operation" title="URI Signing Operation">
      <t>URI Signing supports both the HTTP-based and DNS-based request
      routing. <xref target="RFC2104">HMAC</xref> defines a hash-based message
      authentication code allowing two parties that share a secret key to
      establish the integrity and authenticity of a set of information (e.g. a
      message) through a cryptographic hash function.</t>

      <section anchor="http" title="HTTP Redirection">
        <t>For HTTP-based request routing, HMAC is applied to a set of
        information that is unique to a given end user content request using a
        secret key shared between adjacent CDNI hops (e.g. between the CSP and
        the Authoritative CDN, between the Authoritative CDN and a Downstream
        CDN). This allows a CDNI hop to ascertain the authenticity of a given
        request received from a previous CDNI hop.</t>

        <t>The URI signing scheme described below is based on the following
        steps (assuming HTTP redirection, iterative request routing and a CDN
        path with two CDNs). Note that Authoritative CDN and Upstream CDN are
        used exchangeably.</t>

        <figure title="Figure 1: HTTP-based Request Routing with URI Signing">
          <artwork>
   End-User              dCDN                 uCDN                  CSP
      |                    |                    |                    |
      |              1.Provides information to validate URI signature|
      |                    |                    |&lt;-------------------|
      |       2.CDNI RR interface used to       |                    |
      |         advertise URI Signing capability|                    |
      |                    |-------------------&gt;|                    |
      |        3.CDNI Metadata interface used to|                    |
      |           provide URI Signing attributes|                    |
      |                    |&lt;-------------------|                    |
      |4.Content request   |                    |                    |
      |-------------------------------------------------------------&gt;|
      |                    |                    |  [Apply distribution
      |                    |                    |   policy]          |
      |                    |                    |                    |
      |                    |              (ALT: Authorization decision)
      |5.Request is denied |                    |      &lt;Negative&gt;    |
      |&lt;-------------------------------------------------------------|
      |                    |                    |                    |
      |6.Redirect to uCDN (signed URI)          |      &lt;Positive&gt;    |
      |&lt;-------------------------------------------------------------|
      |                    |                    |                    |
      |7.Content request   |                    |                    |
      |----------------------------------------&gt;| [Validate URI      |
      |                    |                    |  signature]        |
      |                    |                    |                    |
      |                    |    (ALT: Validation result)             |
      |8.Request is denied |          &lt;Negative&gt;|                    |
      |&lt;----------------------------------------|                    |
      |                    |                    |                    |
      |9.Re-sign URI and redirect to  &lt;Positive&gt;|                    |
      |  dCDN (newly signed URI)                |                    |
      |&lt;----------------------------------------|                    |
      |                    |                    |                    |
      |10.Content request  |                    |                    |
      |-------------------&gt;| [Validate URI      |                    |
      |                    |  signature]        |                    |
      |                    |                    |                    |
      |    (ALT: Validation result)             |                    |
      |11.Request is denied| &lt;Negative&gt;         |                    |
      |&lt;-------------------|                    |                    |
      |                    |                    |                    |
      |12.Content delivery | &lt;Positive&gt;         |                    |
      |&lt;-------------------|                    |                    |
      :                    :                    :                    :
      :   (Later in time)  :                    :                    :
      |13.CDNI Logging interface to report URI Signing information   |
      |                    |-------------------&gt;|                    |</artwork>
        </figure>

        <t><list style="numbers">
            <t>CSP provides to the Authoritative CDN the information needed to
            validate cryptographic signatures from that CSP. For example, this
            information may include a hashing function, algorithm, and a
            key.</t>

            <t>Using the CDNI Request Routing interface, the Downstream CDN
            advertises its capabilities including URI Signing support to the
            Authoritative CDN.</t>

            <t>Using the CDNI Metadata interface, the Authoritative CDN
            communicates to a Downstream CDN the information needed to
            validate cryptographic signatures from the Authoritative CDN for
            the given CSP. For example, this information may include a hashing
            algorithm and private key corresponding to the trust relationship
            between the Authoritative CDN and the Downstream CDN.</t>

            <t>On receipt of a given content request on the CSP portal, the
            CSP makes a specific authorization decision for this unique
            request based on its arbitrary distribution policy.</t>

            <t>If the authorization decision is negative, the CSP rejects the
            request.</t>

            <t>If the authorization decision is positive, the CSP computes a
            cryptographic signature that is based on unique parameters of that
            request and includes it in the URI provided to the end user to
            request the content.</t>

            <t>On receipt of the corresponding content request, the
            authoritative CDN validates the cryptographic signature in the URI
            using the information provided by the CSP.</t>

            <t>If the validation is negative, the authoritative CDN rejects
            the request</t>

            <t>If the validation is positive, the authoritative CDN computes a
            cryptographic signature that is based on unique parameters of that
            request and includes it in the URI provided to the end user to
            further request the content from the Downstream CDN</t>

            <t>On receipt of the corresponding content request, the Downstream
            CDN validates the cryptographic signature in the URI using the
            information provided by the Authoritative CDN in the CDNI
            Metadata</t>

            <t>If the validation is negative, the Downstream CDN rejects the
            request and sends an error code (e.g. 403) in the HTTP
            response.</t>

            <t>If the validation is positive, the Downstream CDN serves the
            request and delivers the content.</t>

            <t>At a later time, Downstream CDN reports logging events that
            includes URI signing information.</t>
          </list></t>

        <t>URI Signing with symmetric key or asymmetric keys works for
        HTTP-based request routing because the trust relationship is between
        the adjacent CDNs.</t>
      </section>

      <section anchor="dns" title="DNS Redirection">
        <t>For DNS-based request routing, HMAC is applied to a set of
        information that is unique to a given end user content request using a
        secret key shared between CSP and the Delivery CDN. The Delivery CDN
        needs to obtain the key information to validate the signed URL, which
        is set by the CSP based on its distribution policy.</t>

        <t>The URI signing scheme described below is based on the following
        steps (assuming iterative DNS request routing and a CDN path with two
        CDNs). Note that Authoritative CDN and Upstream CDN are used
        exchangeably.</t>

        <figure title="Figure 2: DNS-based Request Routing with URI Signing">
          <artwork>
   End-User              dCDN                 uCDN                  CSP
      |                    |                    |                    |
      |              1.Provides information to validate URI signature|
      |                    |                    |&lt;-------------------|
      |       2.CDNI RR interface used to       |                    |
      |         advertise URI Signing capability|                    |
      |                    |-------------------&gt;|                    |
      |        3.CDNI Metadata interface used to|                    |
      |           provide URI Signing attributes|                    |
      |                    |&lt;-------------------|                    |
      |4.Content request   |                    |                    |
      |-------------------------------------------------------------&gt;|
      |                    |                    |  [Apply distribution
      |                    |                    |   policy]          |
      |                    |                    |                    |
      |                    |              (ALT: Authorization decision)
      |5.Request is denied |                    |      &lt;Negative&gt;    |
      |&lt;-------------------------------------------------------------|
      |                    |                    |                    |
      |6.Redirect to uCDN (signed URI)          |      &lt;Positive&gt;    |
      |&lt;-------------------------------------------------------------|
      |                    |                    |                    |
      |7.DNS request       |                    |                    |
      |----------------------------------------&gt;|                    |
      |                    |                    |                    |
      |8.Redirect DNS to dCDN                   |                    |
      |&lt;----------------------------------------|                    |
      |                    |                    |                    |
      |9.DNS request       |                    |                    |
      |-------------------&gt;|                    |                    |
      |                    |                    |                    |
      |10.IP address of Surrogate               |                    |
      |&lt;-------------------|                    |                    |
      |                    |                    |                    |
      |11.Content request  |                    |                    |
      |-------------------&gt;| [Validate URI      |                    |
      |                    |  signature]        |                    |
      |                    |                    |                    |
      |    (ALT: Validation result)             |                    |
      |12.Request is denied| &lt;Negative&gt;         |                    |
      |&lt;-------------------|                    |                    |
      |                    |                    |                    |
      |13.Content delivery | &lt;Positive&gt;         |                    |
      |&lt;-------------------|                    |                    |
      :                    :                    :                    :
      :   (Later in time)  :                    :                    :
      |14.CDNI Logging interface to report URI Signing information   |
      |                    |-------------------&gt;|                    |</artwork>
        </figure>

        <t><list style="numbers">
            <t>CSP provides to the Authoritative CDN the information needed to
            validate cryptographic signatures from that CSP. For example, this
            information may include a hash function, algorithm, and a key.</t>

            <t>Using the CDNI Request Routing interface, the Downstream CDN
            advertises its capabilities including URI Signing support to the
            Authoritative CDN.</t>

            <t>Using the CDNI Metadata interface, the Authoritative CDN
            communicates to a Downstream CDN the information needed to
            validate cryptographic signatures from the CSP (i.e. private key
            between CSP and participating CDNs). This requires a relationship
            between CSP and Downstream CDN. The CDNI metadata specifies CDNs
            with trust relationships according to the CSP. The set of
            Downstream CDNs is limited by this criteria.</t>

            <t>On receipt of a given content request on the CSP portal, the
            CSP makes a specific authorization decision for this unique
            request based on its arbitrary distribution policy.</t>

            <t>If the authorization decision is negative, the CSP rejects the
            request</t>

            <t>If the authorization decision is positive, the CSP computes a
            cryptographic signature that is based on unique parameters of that
            request and includes it in the URI provided to the end user to
            request the content.</t>

            <t>End user sends DNS request to the authoritative CDN.</t>

            <t>On receipt of the DNS request, the authoritative CDN redirects
            the request to the Downstream CDN.</t>

            <t>End user sends DNS request to the Downstream CDN.</t>

            <t>On receipt of the DNS request, the Downstream CDN responds with
            IP address of one of its Surrogates.</t>

            <t>On receipt of the corresponding content request, the Downstream
            CDN validates the cryptographic signature in the URI using the
            information provided by the Authoritative CDN in the CDNI
            Metadata</t>

            <t>If the validation is negative, the Downstream CDN rejects the
            request and sends an error code (e.g. 403) in the HTTP
            response.</t>

            <t>If the validation is positive, the Downstream CDN serves the
            request and delivers the content.</t>

            <t>At a later time, Downstream CDN reports logging events that
            includes URI signing information.</t>
          </list></t>

        <t>Note: DNS-based request routing using symmetric key is problematic
        when Delivering CDN does not have trust relationship with the CSP.</t>

        <t>URI Signing with asymmetric keys works for DNS-based request
        routing because the CSP's public key can be distributed without
        restriction to the Downstream CDN for validation of the signed
        URI.</t>
      </section>
    </section>

    <section title="HTTP Adaptive Bit Rate">
      <t>TBD - HTTP ABR content introduces issues for URI Signing (reference
      draft-brandenburg-cdni-has). Flexible URI Signing scheme to support HTTP
      ABR content</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document requests IANA to create a new registry for CDNI URI
      Signing. The following query string attribute names (a.k.a. keywords)
      are assigned for the authorization attributes used in CDNI URI Signing.
      There is no intention to claim any query string attribute for URI beyond
      URI Signing context. That means the entities that sign the URI or
      validate the URI signature comply to the keywords specified in the query
      string for the URI Signing function only when URI Signing is used.</t>

      <t><list style="symbols">
          <t>US (URI signature&gt;</t>

          <t>VER (Version)</t>

          <t>ET (Expiry time)</t>

          <t>CIP (Client IP address)</t>

          <t>KO (Key owner)</t>

          <t>KN (Key ID)</t>

          <t>HF (Hash Function)</t>

          <t>ALG (Algorithm)</t>

          <t>CID (Client ID)</t>
        </list></t>

      <t>This document requests IANA to create a registry for each of the
      defined query string attribute and assign the values for the
      authorization attribute:</t>

      <t>VER: 0 (Base)</t>

      <t>HF: "MD5", "SHA1", "SHA256"</t>

      <t>ALG: 1 (Full URI), 2 (URI without scheme)</t>

      <t>CID: "MAC:&lt;value&gt;", "IMSI:&lt;value&gt;",
      "MSISDN:&lt;value&gt;", "MEID:&lt;value&gt;", "NAI:&lt;value&gt;"
      (TBD)</t>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>A symmetric key needs to be shared by the entity thats produces the
      URI signature and the entity that validates the URI signature. In the
      case of DNS-based request routing, CSP that signed the URI may not have
      a relationship with the Downstream CDN that validates the signed URI. In
      this case, the Upstream CDN shall select only the Downstream CDN with a
      relationship with CSP. Otherwise, asymmetric keys should be used for
      DNS-based request routing. The Downstream CDN only needs to use the
      CSP's public key to validate the signed URI. Asymmetric keys method does
      not have any require a relationship between the two entities
      participating in URI Signing.</t>

      <t>For HTTP-based request routing, the two entities participating in URI
      Signing are always the adjacent Upstream CDN and Downstream CDN because
      of the hop by hop nature of the redirection. Therefore, either symmetric
      key or asymmetric keys can be used because the adjacent Upstream CDN and
      Downstream CDN have a relationship. </t>

      <t/>

      <t>The following security threats are identified (TBD):</t>

      <t><list style="symbols">
          <t>Client IP address spoofing</t>

          <t>Illegimate client behind a NAT</t>

          <t>Replay of request</t>
        </list></t>
    </section>

    <section title="Acknowledgements">
      <t>TBD</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.6707'?>

      <reference anchor="I-D.ietf-cdni-requirements">
        <front>
          <title>Use Cases for Content Delivery Network Interconnection,
          draft-ietf-cdni-use-cases-03</title>

          <author fullname="G. Bertrand" initials="G." role="editor"
                  surname="Bertrand">
            <organization/>
          </author>

          <author fullname="E. Stephan" initials="E." surname="Stephan">
            <organization/>
          </author>

          <author fullname="G. Watson" initials="G." surname="Watson">
            <organization/>
          </author>

          <author fullname="T. Burbridge" initials="T." surname="Burbridge">
            <organization/>
          </author>

          <author fullname="P. Eardley" initials="P." surname="Eardley">
            <organization/>
          </author>

          <author fullname="K. Ma" initials="K." surname="Ma">
            <organization/>
          </author>

          <date day="30" month="January" year="2012"/>
        </front>
      </reference>

      <reference anchor="I-D.ietf-cdni-framework">
        <front>
          <title>Use Cases for Content Delivery Network Interconnection,
          draft-ietf-cdni-use-cases-03</title>

          <author fullname="G. Bertrand" initials="G." role="editor"
                  surname="Bertrand">
            <organization/>
          </author>

          <author fullname="E. Stephan" initials="E." surname="Stephan">
            <organization/>
          </author>

          <author fullname="G. Watson" initials="G." surname="Watson">
            <organization/>
          </author>

          <author fullname="T. Burbridge" initials="T." surname="Burbridge">
            <organization/>
          </author>

          <author fullname="P. Eardley" initials="P." surname="Eardley">
            <organization/>
          </author>

          <author fullname="K. Ma" initials="K." surname="Ma">
            <organization/>
          </author>

          <date day="30" month="January" year="2012"/>
        </front>
      </reference>

      <?rfc include='reference.RFC.2104'?>
    </references>

    <references title="Informative References">
      <reference anchor="I-D.draft-bertrand-cdni-logging">
        <front>
          <title>CDNI Logging Interface</title>

          <author fullname="Gilles Bertrand" initials="G." role="editor"
                  surname="Bertrand">
            <organization/>
          </author>

          <author fullname="Emile Stephan" initials="E." surname="Stephan">
            <organization/>

            <address>
              <postal>
                <street/>

                <city/>

                <region/>

                <code/>

                <country/>
              </postal>

              <phone/>

              <facsimile/>

              <email/>

              <uri/>
            </address>
          </author>

          <date/>
        </front>
      </reference>

      <reference anchor="I-D.draft-lefaucheur-cdni-logging-delivery">
        <front>
          <title>CDNI Logging Formats for HTTP and HTTP Adaptive Streaming
          Deliveries</title>

          <author fullname="Francois Le Faucheur" initials="F."
                  surname="Le Faucheur">
            <organization/>
          </author>

          <author fullname="Mahesh Viveganandhan" initials="M."
                  surname="Viveganandhan">
            <organization/>

            <address>
              <postal>
                <street/>

                <city/>

                <region/>

                <code/>

                <country/>
              </postal>

              <phone/>

              <facsimile/>

              <email/>

              <uri/>
            </address>
          </author>

          <author fullname="Kent Leung" initials="K." surname="Leung">
            <organization/>

            <address>
              <postal>
                <street/>

                <city/>

                <region/>

                <code/>

                <country/>
              </postal>

              <phone/>

              <facsimile/>

              <email/>

              <uri/>
            </address>
          </author>

          <date/>
        </front>
      </reference>

      <?rfc include='reference.RFC.3986'?>
    </references>
  </back>
</rfc>
