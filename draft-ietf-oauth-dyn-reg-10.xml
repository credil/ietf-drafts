<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<rfc category="std" docName="draft-ietf-oauth-dyn-reg-10" ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>

  <?rfc tocdepth='3' ?>

  <?rfc symrefs='yes' ?>

  <?rfc sortrefs='yes' ?>

  <?rfc compact='yes' ?>

  <?rfc subcompact='no' ?>

  <?rfc strict='yes' ?>

  <?rfc notedraftinprogress='yes' ?>

  <front>
    <title abbrev="oauth-dyn-reg">OAuth 2.0 Dynamic Client Registration
    Protocol</title>

    <author fullname="Justin Richer" initials="J" role="editor"
            surname="Richer">
      <organization>The MITRE Corporation</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <region/>

          <code/>

          <country/>
        </postal>

        <phone/>

        <facsimile/>

        <email>jricher@mitre.org</email>

        <uri/>
      </address>
    </author>

    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization abbrev="Ping Identity">Ping Identity</organization>

      <address>
        <email>ve7jtb@ve7jtb.com</email>
      </address>
    </author>

    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
      <organization abbrev="Microsoft">Microsoft</organization>

      <address>
        <email>mbj@microsoft.com</email>
      </address>
    </author>

    <author fullname="Maciej Machulak" initials="M" surname="Machulak">
      <organization>Newcastle University</organization>

      <address>
        <email>m.p.machulak@ncl.ac.uk</email>

        <uri>http://ncl.ac.uk/</uri>
      </address>
    </author>

    <date day="6" month="May" year="2013"/>

    <area>Security</area>

    <workgroup>OAuth Working Group</workgroup>

    <abstract>
      <t>This specification defines an endpoint and protocol for dynamic
      registration of OAuth 2.0 Clients at an Authorization Server and methods
      for the dynamically registered client to manage its registration.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>In some use-case scenarios, it is desirable or necessary to allow
      OAuth 2.0 clients to obtain authorization from an OAuth 2.0
      authorization server without requiring the two parties to interact
      beforehand. Nevertheless, in order for the authorization server to
      accurately and securely represent to end-users which client is seeking
      authorization to access the end-user's resources, a method for automatic
      and unique registration of clients is needed. The OAuth 2.0
      authorization framework does not define how the relationship between the
      Client and the Authorization Server is initialized, or how a given
      client is assigned a unique Client Identifier. Historically, this has
      happened out-of-band from the OAuth 2.0 protocol. This draft provides a
      mechanism for a client to register itself with the Authorization Server,
      which can be used to dynamically provision a Client Identifier, and
      optionally a Client Secret.</t>

      <t>As part of the registration process, this specification also defines
      a mechanism for the client to present the Authorization Server with a
      set of metadata, such as a display name and icon to be presented to the
      user during the authorization step. This draft also provides a mechanism
      for the Client to read and update this information after the initial
      registration action.</t>

      <section title="Notational Conventions">
        <t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
        'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
        document are to be interpreted as described in <xref
        target="RFC2119"/>.</t>

        <t>Unless otherwise noted, all the protocol parameter names and values
        are case sensitive.</t>
      </section>

      <section anchor="terminology" title="Terminology">
        <t>This specification uses the terms "Access Token", "Refresh Token",
        "Authorization Code", "Authorization Grant", "Authorization Server",
        "Authorization Endpoint", "Client", "Client Identifier", "Client
        Secret", "Protected Resource", "Resource Owner", "Resource Server",
        and "Token Endpoint" defined by <xref target="RFC6749">OAuth
        2.0</xref>.</t>

        <t>This specification defines the following additional terms:</t>

        <t><list style="symbols">
            <t>Client Registration Endpoint: The OAuth 2.0 Endpoint through
            which a Client can request new registration. The means of the
            Client obtaining the URL for this endpoint are out of scope for
            this specification.</t>

            <t>Client Configuration Endpoint: The OAuth 2.0 Endpoint through
            which a specific Client can manage its registration information,
            provided by the Authorization Server to the Client. This URL for
            this endpoint is communicated to the client by the Authorization
            Server in the Client Information Response.</t>

            <t>Registration Access Token: An OAuth 2.0 Bearer Token issued by
            the Authorization Server through the Client Registration Endpoint
            which is used by the Client to authenticate itself during read,
            update, and delete operations. This token is associated with a
            particular Client.</t>
          </list></t>
      </section>
    </section>

    <section anchor="client-metadata" title="Client Metadata">
      <t>Clients generally have an array of metadata associated with their
      unique Client Identifier at the Authorization Server. These can range
      from human-facing display strings, such as a client name, to items that
      impact the security of the protocol, such as the list of valid redirect
      URIs.</t>

      <t>The client metadata values serve two parallel purposes in the overall
      OAuth 2.0 Dynamic Client Registration protocol:</t>

      <t><list style="symbols">
          <t>the Client requesting its desired values for each parameter to
          the Authorization Server in a <xref
          target="RegistrationRequest">register</xref> or <xref
          target="UpdateRequest">update</xref> request, and</t>

          <t>the Authorization Server informing the Client of the current
          values of each parameter that the Client has been registered to use
          through a <xref target="client-info-response">client information
          response</xref>.</t>
        </list></t>

      <t>An Authorization Server MAY override any value that a Client requests
      during the registration process (including any omitted values) and
      replace the requested value with a default at the server's discretion.
      The Authorization Server SHOULD provide documentation for any fields
      that it requires to be filled in by the client or to have particular
      values or formats.</t>

      <t>Extensions and profiles of this specification MAY expand this list,
      but Authorization Servers MUST accept or ignore all parameters on this
      list. The Authorization Server MUST ignore any additional parameters
      sent by the Client that it does not understand.</t>

      <t><list style="hanging">
          <t hangText="redirect_uris"><vspace blankLines="0"/>Array of
          redirect URIs for use in redirect-based flows such as the
          Authorization Code and Implicit grant types. It is RECOMMENDED that
          clients using these flows register this parameter, and an
          Authorization Server SHOULD require registration of valid redirect
          URIs for all clients that use these grant types in order to protect
          against token and credential theft attacks.</t>

          <t hangText="client_name"><vspace blankLines="0"/>Human-readable
          name of the Client to be presented to the user. If omitted, the
          Authorization Server MAY display the raw <spanx style="verb">client_id</spanx>
          value to the user instead. It is RECOMMENDED that clients always
          send this field. The value of this field MAY be internationalized as
          described in <xref target="HumanReadableClientMetadata">Human
          Readable Client Metadata</xref>.</t>

          <t hangText="client_uri"><vspace/>URL of the homepage of the Client.
          If present, the server SHOULD display this URL to the end user in a
          clickable fashion. It is RECOMMENDED that clients always send this
          field. The value of this field MAY be internationalized as described
          in <xref target="HumanReadableClientMetadata">Human Readable Client
          Metadata</xref>.</t>

          <t hangText="logo_uri"><vspace blankLines="0"/>URL that references a
          logo for the Client. If present, the server SHOULD display this
          image to the end user during approval. The value of this field MAY
          be internationalized as described in <xref
          target="HumanReadableClientMetadata">Human Readable Client
          Metadata</xref>.</t>

          <t hangText="contacts"><vspace blankLines="0"/>Array of email
          addresses for people responsible for this Client. The Authorization
          Server MAY make these addresses available to end users for support
          requests for the Client. An Authorization Server MAY use these email
          addresses as identifiers for an administrative page for this
          client.</t>

          <t hangText="tos_uri"><vspace blankLines="0"/>URL that points to a
          human-readable Terms of Service for the Client. The Authorization
          Server SHOULD display this URL to the End-User if it is given. The
          value of this field MAY be internationalized as described in <xref
          target="HumanReadableClientMetadata">Human Readable Client
          Metadata</xref>.</t>

          <t hangText="token_endpoint_auth_method"><vspace blankLines="0"/>The
          requested authentication type for the Token Endpoint. Valid values
          are:<list style="symbols">
              <t><spanx style="verb">none</spanx>: this is a public client as
              defined in OAuth 2.0 and does not have a client secret</t>

              <t><spanx style="verb">client_secret_post</spanx>: the client
              uses the HTTP POST parameters defined in OAuth 2.0 section
              2.3.1</t>

              <t><spanx style="verb">client_secret_basic</spanx>: the client
              uses HTTP Basic defined in OAuth 2.0 section 2.3.1</t>

              <t><spanx style="verb">client_secret_jwt</spanx>: the client
              uses the <xref target="OAuth.JWT">JWT Assertion</xref> profile
              with a symmetric signature using the <spanx style="verb">client_secret</spanx>
              issued by the server</t>

              <t><spanx style="verb">private_key_jwt</spanx>: the client uses
              the <xref target="OAuth.JWT">JWT Assertion</xref> profile with
              its own private key, usually with its public key location
              indicated by the <spanx style="verb">jwks_uri</spanx> field</t>
            </list>Other authentication methods may be defined by extension.
          If unspecified or omitted, the default is <spanx style="verb">client_secret_basic</spanx>,
          denoting HTTP Basic Authentication Scheme as specified in Section
          2.3.1 of OAuth 2.0. Other authentication methods MAY be supported by
          using an absolute URI as the value of this parameter.</t>

          <t hangText="scope"><vspace blankLines="0"/>Space separated list of
          scope values (as described in <xref target="RFC6749">OAuth 2.0
          Section 3.3</xref>) that the client can use when requesting access
          tokens. The semantics of values in this list is service specific. If
          omitted, an Authorization Server MAY register a Client with a
          default set of scopes.</t>

          <t hangText="grant_types"><vspace blankLines="0"/>Array of OAuth 2.0
          grant types that the Client may use. These grant types are defined
          as follows:<list style="symbols">
              <t><spanx style="verb">authorization_code</spanx>: The
              Authorization Code Grant described in OAuth 2.0 Section 4.1</t>

              <t><spanx style="verb">implicit</spanx>: The Implicit Grant
              described in OAuth 2.0 Section 4.2</t>

              <t><spanx style="verb">password</spanx>: The Resource Owner
              Password Credentials Grant described in OAuth 2.0 Section
              4.3</t>

              <t><spanx style="verb">client_credentials</spanx>: The Client
              Credentials Grant described in OAuth 2.0 Section 4.4</t>

              <t><spanx style="verb">refresh_token</spanx>: The Refresh Token
              Grant described in OAuth 2.0 Section 6.</t>

              <t><spanx style="verb">urn:ietf:params:oauth:grant-type:jwt-bearer</spanx>:
              The JWT Bearer grant type defined in <xref
              target="OAuth.JWT">OAuth JWT Bearer Token Profiles</xref>.</t>

              <t><spanx style="verb">urn:ietf:params:oauth:grant-type:saml2-bearer</spanx>:
              The SAML 2 Bearer grant type defined in <xref
              target="OAuth.SAML2">OAuth SAML 2 Bearer Token
              Profiles</xref>.</t>
            </list>Authorization Servers MAY allow for other values as defined
          in grant type extensions to OAuth 2.0. The extension process is
          described in OAuth 2.0 Section 2.5, and the value of this parameter
          MUST be the same as the value of the <spanx style="verb">grant_type</spanx>
          parameter passed to the Token Endpoint defined in the extension.</t>

          <t hangText="response_types"><vspace blankLines="0"/>Array of the
          OAuth 2.0 response types that the Client may use. These response
          types are defined as follows:<list style="symbols">
              <t><spanx style="verb">code</spanx>: The Authorization Code
              response described in OAuth 2.0 Section 4.1</t>

              <t><spanx style="verb">token</spanx>: The Implicit response
              described in OAuth 2.0 Section 4.2</t>
            </list>Authorization Servers MAY allow for other values as defined
          in response type extensions to OAuth 2.0. The extension process is
          described in OAuth 2.0 Section 2.5, and the value of this parameter
          MUST be the same as the value of the <spanx style="verb">response_type</spanx>
          parameter passed to the Authorization Endpoint defined in the
          extension.</t>

          <t hangText="policy_uri"><vspace blankLines="0"/>A URL location that
          the Client provides to the End-User to read about the how the
          profile data will be used. The Authorization Server SHOULD display
          this URL to the End-User if it is given. The value of this field MAY
          be internationalized as described in <xref
          target="HumanReadableClientMetadata">Human Readable Client
          Metadata</xref>.</t>

          <t hangText="jwks_uri"><vspace blankLines="0"/>URL for the Client's
          <xref target="JWK">JSON Web Key Set</xref> document that is used for
          signing requests, such as requests to the Token Endpoint using the
          <spanx style="verb">private_key_jwt</spanx> assertion client
          credential. The keys MAY also be used for higher level protocols
          that require signing or encryption.</t>
        </list></t>

      <section anchor="GrantTypesAndResponseTypes"
               title="Relationship Between Grant Types and Response Types">
        <t>The <spanx style="verb">grant_types</spanx> and <spanx
        style="verb">response_types</spanx> values described above are
        partially orthogonal, as they refer to arguments passed to different
        endpoints in the OAuth protocol. However, they are related in that the
        <spanx style="verb">grant_types</spanx> available to a client
        influence the <spanx style="verb">response_types</spanx> that the
        client is allowed to use, and vice versa. For instance, a <spanx
        style="verb">grant_types</spanx> value that includes <spanx
        style="verb">authorization_code</spanx> implies a <spanx style="verb">response_types</spanx>
        value that includes code, as both values are defined as part of the
        OAuth 2.0 Authorization Code Grant. As such, a server supporting these
        fields SHOULD take steps to ensure that a client cannot register
        itself into an inconsistent state.</t>

        <t>The correlation between the two fields is listed in the table
        below.</t>

        <texttable>
          <ttcol>grant_types value includes:</ttcol>

          <ttcol>response_types value includes:</ttcol>

          <c>authorization_code</c>

          <c>code</c>

          <c>implicit</c>

          <c>token</c>

          <c>password</c>

          <c>(none)</c>

          <c>client_credentials</c>

          <c>(none)</c>

          <c>refresh_token</c>

          <c>(none)</c>

          <c>urn:ietf:params:oauth:grant-type:jwt-bearer</c>

          <c>(none)</c>
        </texttable>

        <t>Extensions and profiles of this document that introduce new values
        to either the <spanx style="verb">grant_types</spanx> or <spanx
        style="verb">response_types</spanx> parameter MUST document all
        correspondences between the parameter types.</t>
      </section>

      <section anchor="HumanReadableClientMetadata"
               title="Human Readable Client Metadata">
        <t>Human-readable Client Metadata values and Client Metadata values
        that reference human-readable values MAY be represented in multiple
        languages and scripts. For example, the values of fields such as
        <spanx style="verb">client_name</spanx>, <spanx style="verb">tos_uri</spanx>,
        <spanx style="verb">policy_uri</spanx>, <spanx style="verb">logo_uri</spanx>,
        and <spanx style="verb">client_uri</spanx> might have multiple
        locale-specific values in some Client registrations.</t>

        <t>To specify the languages and scripts, <xref
        target="RFC5646">BCP47</xref> language tags are added to Client
        Metadata member names, delimited by a # character. Since JSON member
        names are case sensitive, it is RECOMMENDED that language tag values
        used in Claim Names be spelled using the character case with which
        they are registered in the <xref target="IANA.Language">IANA Language
        Subtag Registry</xref>. In particular, normally language names are
        spelled with lowercase characters, region names are spelled with
        uppercase characters, and languages are spelled with mixed case
        characters. However, since BCP47 language tag values are case
        insensitive, implementations SHOULD interpret the language tag values
        supplied in a case insensitive manner. Per the recommendations in
        BCP47, language tag values used in Metadata member names should only
        be as specific as necessary. For instance, using <spanx style="verb">fr</spanx>
        might be sufficient in many contexts, rather than <spanx style="verb">fr-CA</spanx>
        or <spanx style="verb">fr-FR</spanx>.</t>

        <t>For example, a Client could represent its name in English as <spanx
        style="verb">"client_name#en": "My Client"</spanx> and its name in
        Japanese as <spanx style="verb">"client_name#ja-Jpan-JP": "&#12463;&#12521;&#12452;&#12450;&#12531;&#12488;&#21517;"</spanx>
        within the same registration request. The Authorization Server MAY
        display any or all of these names to the Resource Owner during the
        authorization step, choosing which name to display based on system
        configuration, user preferences or other factors.</t>

        <t>If any human-readable field is sent without a language tag, parties
        using it MUST NOT make any assumptions about the language, character
        set, or script of the string value, and the string value MUST be used
        as-is wherever it is presented in a user interface. To facilitate
        interoperability, it is RECOMMENDED that clients and servers use a
        human-readable field without any language tags in addition to any
        language-specific fields, and it is RECOMMENDED that any
        human-readable fields sent without language tags contain values
        suitable for display on a wide variety of systems.</t>

        <t>Implementer's Note: Many JSON libraries make it possible to
        reference members of a JSON object as members of an Object construct
        in the native programming environment of the library. However, while
        the <spanx style="verb">#</spanx> character is a valid character
        inside of a JSON object's member names, it is not a valid character
        for use in an object member name in many programming environments.
        Therefore, implementations will need to use alternative access forms
        for these claims. For instance, in JavaScript, if one parses the JSON
        as follows, <spanx style="verb">var j = JSON.parse(json);</spanx>,
        then the member <spanx style="verb">client_name#en-us</spanx> can be
        accessed using the JavaScript syntax <spanx style="verb">j["client_name#en-us"]</spanx>.</t>
      </section>
    </section>

    <section anchor="RegistrationEndpoint"
             title="Client Registration Endpoint">
      <t>The Client Registration Endpoint is an OAuth 2.0 Endpoint defined in
      this document that is designed to allow a Client to register itself with
      the Authorization Server. The Client Registration Endpoint MUST accept
      HTTP POST messages with request parameters encoded in the entity body
      using the <spanx style="verb">application/json</spanx> format. The
      Client Registration Endpoint MUST be protected by a transport-layer
      security mechanism, and the server MUST support TLS 1.2 <xref
      target="RFC5246">RFC 5246</xref> and/or TLS 1.0 <xref target="RFC2246"/>
      and MAY support additional transport-layer mechanisms meeting its
      security requirements. When using TLS, the Client MUST perform a TLS/SSL
      server certificate check, per <xref target="RFC6125">RFC
      6125</xref>.</t>

      <t>The Client Registration Endpoint MAY accept an initial authorization
      credential in the form of an <xref target="RFC6749">OAuth 2.0 </xref>
      access token in order to limit registration to only previously
      authorized parties. The method by which this access token is obtained by
      the registrant is generally out-of-band and is out of scope of this
      specification.</t>

      <t>In order to support open registration and facilitate wider
      interoperability, the Client Registration Endpoint SHOULD allow initial
      registration requests with no authentication. These requests MAY be
      rate-limited or otherwise limited to prevent a denial-of-service attack
      on the Client Registration Endpoint.</t>

      <t>In order to facilitate registered clients updating their information,
      the Client Registration Endpoint issues a Request Access Token for
      clients to securely identify themselves in future connections to the
      <xref target="AccessEndpoint">Client Configuration Endpoint</xref>. As
      such, the Client Configuration Endpoint MUST accept requests with <xref
      target="RFC6750">OAuth 2.0 Bearer Tokens</xref> for these operations,
      whether or not the initial registration call requires authentication of
      some form.</t>

      <t>The Client Registration Endpoint MUST ignore all parameters it does
      not understand.</t>

      <section anchor="RegistrationRequest"
               title="Client Registration Request">
        <t>This operation registers a new Client to the Authorization Server.
        The Authorization Server assigns this client a unique Client
        Identifier, optionally assigns a Client Secret, and associates the
        metadata given in the request with the issued Client Identifier. The
        request includes any parameters described in <xref
        target="client-metadata">Client Metadata</xref> that the client wishes
        to specify for itself during the registration. The Authorization
        Server MAY provision default values for any items omitted in the
        Client Metadata.</t>

        <t>The Client sends an HTTP POST to the Client Registration Endpoint
        with a content type of "application/json". The HTTP Entity Payload is
        a <xref target="RFC4627">JSON</xref> document consisting of a JSON
        object and all parameters as top-level members of that JSON
        object.</t>

        <t>For example, a client could send the following open registration
        request to the Client Registration Endpoint:</t>

        <figure>
          <preamble>Following is a non-normative example request (with line
          wraps for display purposes only):</preamble>

          <artwork><![CDATA[
POST /register HTTP/1.1
Content-Type: application/json
Accept: application/json
Host: server.example.com

{
 "redirect_uris":["https://client.example.org/callback",
    "https://client.example.org/callback2"]
 "client_name":"My Example Client",
 "token_endpoint_auth_method":"client_secret_basic",
 "scope":"read write dolphin",
 "logo_uri":"https://client.example.org/logo.png",
 "jwks_uri":"https://client.example.org/my_public_keys.jwks"
}
]]></artwork>
        </figure>

        <t/>

        <t>Alternatively, if the client has been provisioned with an initial
        authorization credential, it could send the following registration
        request to the Client Registration Endpoint:</t>

        <figure>
          <preamble>Following is a non-normative example request (with line
          wraps for display purposes only):</preamble>

          <artwork><![CDATA[
POST /register HTTP/1.1
Content-Type: application/json
Accept: application/json
Authorization: Bearer ey23f2.adfj230.af32-developer321
Host: server.example.com

{
 "redirect_uris":["https://client.example.org/callback",
    "https://client.example.org/callback2"]
 "client_name":"My Example Client",
 "token_endpoint_auth_method":"client_secret_basic",
 "scope":"read write dolphin",
 "logo_uri":"https://client.example.org/logo.png",
 "jwks_uri":"https://client.example.org/my_public_keys.jwks"
}
]]></artwork>
        </figure>

        <t/>
      </section>

      <section anchor="RegistrationResponse"
               title="Client Registration Response">
        <t>Upon successful registration, the Authorization Server generates a
        new Client Identifier for the client. This Client Identifier MUST be
        unique at the server and MUST NOT be in use by any other client. The
        server responds with an HTTP 201 Created code and a body of type
        <spanx style="verb">application/json</spanx> with content described in
        <xref target="client-info-response">Client Information
        Response</xref>.</t>

        <t>Upon an unsuccessful registration, the Authorization Server
        responds with an error as described in <xref
        target="client-registration-error">Client Registration
        Error</xref>.</t>
      </section>
    </section>

    <section anchor="AccessEndpoint" title="Client Configuration Endpoint">
      <t>The Client Configuration Endpoint is an OAuth 2.0 protected endpoint
      that is provisioned by the server for a specific client to be able to
      view and update its registered information. The Client MUST include its
      Registration Access Token in all calls to this endpoint as an <xref
      target="RFC6750">OAuth 2.0 Bearer Token</xref>.</t>

      <t>Operations on this endpoint are switched through the use of different
      <xref target="RFC2616">HTTP methods</xref>.</t>

      <section anchor="AccessURL"
               title="Forming the Client Configuration Endpoint URL">
        <t>The Authorization Server MUST provide the client with the fully
        qualified URL in the <spanx style="verb">registration_client_uri</spanx>
        element of the <xref target="client-info-response">Client Information
        Response</xref>. The Authorization Server MUST NOT expect the client
        to construct or discover this URL on its own. The Client MUST use the
        URL as given by the server and MUST NOT construct this URL from
        component pieces.</t>

        <t>Depending on deployment characteristics, the Client Configuration
        Endpoint URL may take any number of forms. It is RECOMMENDED that this
        endpoint URL be formed through the use of a server-constructed URL
        string which combines the Client Registration Endpoint's URL and the
        issued client_id for this Client, with the latter as either a path
        parameter or a query parameter. For example, a Client with the Client
        ID <spanx style="verb">s6BhdRkqt3</spanx> could be given a Client
        Configuration Endpoint URL of <spanx style="verb">https://server.example.com/register/s6BhdRkqt3</spanx>
        (path parameter) or of <spanx style="verb">https://server.example.com/register?client_id=s6BhdRkqt3</spanx>
        (query parameter). In both of these cases, the client simply follows
        the URL as given.</t>

        <t>These common patterns can help the Server to more easily determine
        the client to which the request pertains, which MUST be matched
        against the client to which the Registration Access Token was issued.
        If desired, the server MAY simply return the Client Registration
        Endpoint URL as the Client Configuration Endpoint URL and change
        behavior based on the authentication context provided by the
        Registration Access Token.</t>
      </section>

      <section anchor="ReadRequest" title="Client Read Request">
        <t>In order to read the current configuration of the Client on the
        Authorization Server, the Client makes an HTTP GET request to the
        Client Configuration Endpoint, authenticating with its Registration
        Access Token.</t>

        <figure>
          <preamble>Following is a non-normative example request (with line
          wraps for display purposes only):</preamble>

          <artwork><![CDATA[GET /register/s6BhdRkqt3 HTTP/1.1
Accept: application/json
Host: server.example.com
Authorization: Bearer reg-23410913-abewfq.123483

]]></artwork>
        </figure>

        <t/>

        <t>Upon successful read of the information for a currently active
        Client, the Authorization Server responds with an HTTP 200 OK with
        content type of <spanx style="verb">application/json</spanx> and a
        payload as described in <xref target="client-info-response">Client
        Information Response</xref>.</t>

        <t>If the client does not exist on this server, the server MUST
        respond with HTTP 401 Unauthorized and the Registration Access Token
        used to make this request SHOULD be immediately revoked.</t>

        <t>If the Client does not have permission to read its record, the
        server MUST return an HTTP 403 Forbidden.</t>
      </section>

      <section anchor="UpdateRequest" title="Client Update Request">
        <t>This operation updates a previously-registered client with new
        metadata at the Authorization Server. This request is authenticated by
        the Registration Access Token issued to the client.</t>

        <t>The Client sends an HTTP PUT to the Client Configuration Endpoint
        with a content type of <spanx style="verb">application/json</spanx>.
        The HTTP Entity Payload is a <xref target="RFC4627">JSON</xref>
        document consisting of a JSON object and all parameters as top- level
        members of that JSON object.</t>

        <t>This request MUST include all fields described in <xref
        target="client-metadata">Client Metadata</xref> as returned to the
        Client from a previous register, read, or update operation. The Client
        MUST NOT include the <spanx style="verb">registration_access_token</spanx>,
        <spanx style="verb">registration_client_uri</spanx>, <spanx
        style="verb">expires_at</spanx>, or <spanx style="verb">issued_at</spanx>
        fields described in <xref target="client-info-response">Client
        Information Response</xref>.</t>

        <t>Valid values of Client Metadata fields in this request MUST
        replace, not augment, the values previously associated with this
        Client. Omitted fields MUST be treated as null or empty values by the
        server.</t>

        <t>The Client MUST include its <spanx style="verb">client_id</spanx>
        field in the request, and it MUST be the same as its currently-issued
        Client Identifier. If the client includes the <spanx style="verb">client_secret</spanx>
        field in the request, the value of this field MUST match the
        currently-issued Client Secret for that Client. The Client MUST NOT be
        allowed to overwrite its existing Client Secret with its own chosen
        value.</t>

        <t>For all metadata fields, the Authorization Server MAY replace any
        invalid values with suitable default values, and it MUST return any
        such fields to the Client in the response.</t>

        <t>For example, a client could send the following request to the
        Client Registration Endpoint to update the client registration in the
        above example with new information:</t>

        <figure>
          <preamble>Following is a non-normative example request (with line
          wraps for display purposes only):</preamble>

          <artwork><![CDATA[PUT /register/s6BhdRkqt3 HTTP/1.1
Accept: application/json
Host: server.example.com
Authorization: Bearer reg-23410913-abewfq.123483

{
 "client_id":"s6BhdRkqt3",
 "client_secret": "cf136dc3c1fc93f31185e5885805d",
 "redirect_uris":["https://client.example.org/callback",
    "https://client.example.org/alt"],
 "scope": "read write dolphin",
 "grant_types": ["authorization_code", "refresh_token"]
 "token_endpoint_auth_method": "client_secret_basic",
 "jwks_uri": "https://client.example.org/my_public_keys.jwks"
 "client_name":"My New Example",
 "logo_uri":"https://client.example.org/newlogo.png"
}
]]></artwork>
        </figure>

        <t/>

        <t>Upon successful update, the Authorization Server responds with an
        HTTP 200 OK Message with content type <spanx style="verb">application/json</spanx>
        and a payload as described in <xref
        target="client-info-response">Client Information Response</xref>. The
        Authorization Server MAY include a new Client Secret and/or
        Registration Access Token in its response. If so, the Client MUST
        immediately discard its previous Client Secret and/or Registration
        Access Token.</t>

        <t>If the client does not exist on this server, the server MUST
        respond with HTTP 401 Unauthorized, and the Registration Access Token
        used to make this request SHOULD be immediately revoked.</t>

        <t>If the Client is not allowed to update its records, the server MUST
        respond with HTTP 403 Forbidden.</t>

        <t>If the Client attempts to set an invalid metadata field and the
        Authorization Server does not set a default value, the Authorization
        Server responds with an error as described in <xref
        target="client-registration-error">Client Registration Error
        Response</xref>.</t>
      </section>

      <section anchor="DeleteRequest" title="Client Delete Request">
        <t>In order to deprovision itself on the Authorization Server, the
        Client makes an HTTP DELETE request to the Client Configuration
        Endpoint. This request is authenticated by the Registration Access
        Token issued to the client.</t>

        <figure>
          <preamble>Following is a non-normative example request (with line
          wraps for display purposes only):</preamble>

          <artwork><![CDATA[DELETE /register/s6BhdRkqt3 HTTP/1.1
Accept: application/json
Host: server.example.com
Authorization: Bearer reg-23410913-abewfq.123483

]]></artwork>
        </figure>

        <t/>

        <t>A successful delete action will invalidate the client_id,
        client_secret, and registration_access_token for this client, thereby
        preventing the client_id from being used at either the Authorization
        Endpoint or Token Endpoint of the Authorization Server. The
        Authorization Server SHOULD immediately invalidate all existing
        authorization grants and currently-active tokens associated with this
        Client.</t>

        <t>If a Client has been successfully deprovisioned, the Authorization
        Server responds with an HTTP 204 No Content message.</t>

        <t>If the server does not support the delete method, the server MUST
        respond with an HTTP 405 Not Supported.</t>

        <t>If the client does not exist on this server, the server MUST
        respond with HTTP 401 Unauthorized and the Registration Access Token
        used to make this request SHOULD be immediately revoked.</t>

        <t>If the client is not allowed to delete itself, the server MUST
        respond with HTTP 403 Forbidden.</t>

        <figure>
          <preamble>Following is a non-normative example response:</preamble>

          <artwork><![CDATA[HTTP/1.1 204 No Content
Cache-Control: no-store
Pragma: no-cache

]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="Responses" title="Responses">
      <t>In response to certain requests from the Client to either the Client
      Registration Endpoint or the Client Configuration Endpoint as described
      in this specification, the Authorization Server sends the following
      response bodies.</t>

      <section anchor="client-info-response"
               title="Client Information Response">
        <t>The response contains the Client Identifier as well as the Client
        Secret, if the Client is a confidential Client. The response also
        contains the fully qualified URL to the Client Configuration Endpoint
        for this specific client that the client may use to obtain and update
        information about itself. The response also contains a Registration
        Access Token that is to be used by the client to perform subsequent
        operations at the Client Configuration Endpoint.</t>

        <t><list style="hanging">
            <t hangText="client_id"><vspace/>REQUIRED. The unique Client
            identifier, MUST NOT be currently valid for any other registered
            Client.</t>

            <t hangText="client_secret"><vspace/>OPTIONAL. The Client secret.
            If issued, this MUST be unique for each <spanx style="verb">client_id</spanx>.
            This value is used by confidential clients to authenticate to the
            Token Endpoint as described in OAuth 2.0 Section 2.3.1.</t>

            <t hangText="expires_at"><vspace/>REQUIRED if <spanx style="verb">client_secret</spanx>
            is issued. Time at which the <spanx style="verb">client_secret</spanx>
            will expire or 0 if it will not expire. The time is represented as
            the number of seconds from 1970-01-01T0:0:0Z as measured in UTC
            until the date/time.</t>

            <t hangText="issued_at"><vspace/>OPTIONAL. Time at which the
            Client Identifier was issued. The time is represented as the
            number of seconds from 1970-01-01T0:0:0Z as measured in UTC until
            the date/time.</t>

            <t hangText="registration_access_token"><vspace/>REQUIRED. The
            Access token to be used by the client to perform actions on the
            Client Configuration Endpoint.</t>

            <t hangText="registration_client_uri"><vspace
            blankLines="0"/>REQUIRED. The fully qualified URL of the Client
            Configuration Endpoint for this client. The Client MUST use this
            URL as given when communicating with the Client Configuration
            Endpoint.</t>
          </list></t>

        <t>Additionally, the Authorization Server MUST return all registered
        <xref target="client-metadata">metadata</xref> about this client,
        including any fields provisioned by the Authorization Server itself.
        The Authorization Server MAY reject or replace any of the client's
        requested metadata values submitted during the registration or update
        requests and substitute them with suitable values.</t>

        <t>The response is an <spanx style="verb">application/json</spanx>
        document with all parameters as top-level members of a <xref
        target="RFC4627">JSON object</xref>.</t>

        <figure>
          <preamble>Following is a non-normative example response:</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store
Pragma: no-cache

{
 "registration_access_token": "reg-23410913-abewfq.123483",
 "registration_client_uri": 
       "https://server.example.com/register/s6BhdRkqt3",
 "client_id":"s6BhdRkqt3",
 "client_secret": "cf136dc3c1fc93f31185e5885805d",
 "expires_at":2893276800
 "redirect_uris":["https://client.example.org/callback",
    "https://client.example.org/callback2"]
 "scope": "read write dolphin",
 "grant_types": ["authorization_code", "refresh_token"]
 "token_endpoint_auth_method": "client_secret_basic",
 "logo_uri": "https://client.example.org/logo.png",
 "jwks_uri": "https://client.example.org/my_public_keys.jwks"
}]]></artwork>
        </figure>
      </section>

      <section anchor="client-registration-error"
               title="Client Registration Error Response">
        <t>When an OAuth 2.0 error condition occurs, such as the client
        presenting an invalid Registration Access Token, the Authorization
        Server returns an Error Response as defined in Section 5.2 of the
        OAuth 2.0 specification.</t>

        <t>When a registration error condition occurs, the Authorization
        Server returns an HTTP 400 status code with content type <spanx
        style="verb">application/json</spanx> consisting of a <xref
        target="RFC4627">JSON object</xref> describing the error in the
        response body.</t>

        <t>The JSON object contains two members:</t>

        <t><list style="hanging">
            <t hangText="error"><vspace/>The error code, a single ASCII
            string.</t>

            <t hangText="error_description"><vspace/>A human-readable text
            description of the error for debugging.</t>
          </list></t>

        <t>This specification defines the following error codes:</t>

        <t><list style="hanging">
            <t hangText="invalid_redirect_uri"><vspace/>The value of one or
            more <spanx style="verb">redirect_uris</spanx> is invalid.</t>

            <t hangText="invalid_client_metadata"><vspace/>The value of one of
            the <xref target="client-metadata">client metadata</xref> fields
            is invalid and the server has rejected this request. Note that an
            Authorization server MAY choose to substitute a valid value for
            any requested parameter of a client's metadata.</t>

            <t hangText="invalid_client_id"><vspace/> Value of <spanx
            style="verb">client_id</spanx> is invalid.</t>
          </list></t>

        <figure>
          <preamble>Following is a non-normative example of an error response
          (with line wraps for display purposes only):</preamble>

          <artwork><![CDATA[HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store
Pragma: no-cache
   
{
 "error":"invalid_redirect_uri",
 "error_description":"The redirect URI of http://sketchy.example.com
   is not allowed for this server."
}]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes no requests of IANA.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>Since requests to the Client Registration Endpoint result in the
      transmission of clear-text credentials (in the HTTP request and
      response), the server MUST require the use of a transport-layer security
      mechanism when sending requests to the Registration Endpoint. The server
      MUST support TLS 1.2 <xref target="RFC5246">RFC 5246</xref> and/or TLS
      1.0 <xref target="RFC2246"/> and MAY support additional transport-layer
      mechanisms meeting its security requirements. When using TLS, the Client
      MUST perform a TLS/SSL server certificate check, per <xref
      target="RFC6125">RFC 6125</xref>.</t>

      <t>As this endpoint is an OAuth 2.0 Protected Resource, requests to the
      Registration Endpoint SHOULD have some rate limiting on failures to
      prevent the Registration Access Token from being disclosed though
      repeated access attempts.</t>

      <t>For clients that use redirect-based grant types such as Authorization
      Code and Implicit, Authorization Servers SHOULD require clients to
      pre-register their <spanx style="verb">redirect_uris</spanx>. Requiring
      Clients to do so can help mitigate attacks where rogue actors inject and
      impersonate a validly registered client and intercept its authorization
      code or tokens through an invalid redirect URI.</t>

      <t>The authorization server MUST treat all client metadata as
      self-asserted. A rogue Client might use the name and logo for the
      legitimate Client, which it is trying to impersonate. An Authorization
      Server needs to take steps to mitigate this phishing risk, since the
      logo could confuse users into thinking they're logging in to the
      legitimate Client. For instance, an Authorization Server could warn if
      the domain/site of the logo doesn't match the domain/site of redirect
      URIs. An Authorization Server can also present warning messages to end
      users about untrusted Clients in all cases, especially if such clients
      have been dynamically registered and have not been trusted by any users
      at the Authorization Server before.</t>

      <t>In a situation where the Authorization Server is supporting open
      Client registration, it must be extremely careful with any URL provided
      by the Client that will be displayed to the user (e.g. <spanx
      style="verb">logo_uri</spanx> and <spanx style="verb">policy_uri</spanx>).
      A rogue Client could specify a registration request with a reference to
      a drive-by download in the <spanx style="verb">policy_uri</spanx>. The
      Authorization Server should check to see if the <spanx style="verb">logo_uri</spanx>
      and <spanx style="verb">policy_uri</spanx> have the same host as the
      hosts defined in the array of <spanx style="verb">redirect_uris</spanx>.</t>

      <t>While the Client Secret can expire, the Registration Access Token
      should not expire while a client is still actively registered. If this
      token were to expire, a Client could be left in a situation where it has
      no means of updating itself and must register itself anew. As the
      Registration Access Tokens are long-term credentials, and since the
      Registration Access Token is a Bearer token and acts as the sole
      authentication for use at the Client Configuration Endpoint, it MUST be
      protected by the Client as described in <xref target="RFC6750">OAuth 2.0
      Bearer</xref>.</t>

      <t>If a Client is deprovisioned from a server, any outstanding
      Registration Access Tokens for that client MUST be invalidated at the
      same time. Otherwise, this can lead to an inconsistent state wherein a
      Client could make requests to the Client Configuration Endpoint where
      the authentication would succeed but the action would fail because the
      Client is no longer valid.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2246.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5646.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6125.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6749.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6750.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml'?>

      <reference anchor="JWK">
        <front>
          <title>JSON Web Key (JWK)</title>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization>Microsoft</organization>

            <address>
              <email>mbj@microsoft.com</email>

              <uri>http://self-issued.info/</uri>
            </address>
          </author>

          <date day="25" month="April" year="2013"/>
        </front>

        <seriesInfo name="Internet-Draft" value="draft-ietf-jose-json-web-key"/>

        <format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-key"
                type="HTML"/>
      </reference>

      <reference anchor="OAuth.JWT">
        <front>
          <title abbrev="OAuth JWT Bearer Token Profiles">JSON Web Token (JWT)
          Bearer Token Profiles for OAuth 2.0</title>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <!-- role="editor" -->

            <organization>Microsoft</organization>
          </author>

          <author fullname="Brian Campbell" initials="B." surname="Campbell">
            <organization abbrev="Ping Identity">Ping Identity
            Corp.</organization>
          </author>

          <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
            <organization>Salesforce</organization>
          </author>

          <date day="29" month="March" year="2013"/>
        </front>

        <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-jwt-bearer"/>

        <format target="http://tools.ietf.org/html/draft-ietf-oauth-jwt-bearer"
                type="HTML"/>
      </reference>

      <reference anchor="OAuth.SAML2">
        <front>
          <title abbrev="OAuth JWT Bearer Token Profiles">SAML 2.0 Bearer
          Assertion Profiles for OAuth 2.0</title>

          <author fullname="Brian Campbell" initials="B." surname="Campbell">
            <organization abbrev="Ping Identity">Ping Identity
            Corp.</organization>
          </author>

          <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
            <organization>Salesforce</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization>Microsoft</organization>
          </author>

          <date day="29" month="March" year="2013"/>
        </front>

        <seriesInfo name="Internet-Draft"
                    value="draft-ietf-oauth-saml2-bearer"/>

        <format target="http://tools.ietf.org/html/draft-ietf-oauth-saml2-bearer"
                type="HTML"/>
      </reference>

      <reference anchor="IANA.Language">
        <front>
          <title>Language Subtag Registry</title>

          <author>
            <organization>Internet Assigned Numbers Authority
            (IANA)</organization>
          </author>

          <date year="2005"/>
        </front>

        <format target="http://www.iana.org/assignments/language-subtag-registry"
                type="TXT"/>
      </reference>
    </references>

    <section anchor="Acknowledgments" title="Acknowledgments">
      <t>The authors thank the OAuth Working Group, the User-Managed Access
      Working Group, and the OpenID Connect Working Group participants for
      their input to this document. In particular, the following individuals
      have been instrumental in their review and contribution to various
      versions of this document: Amanda Anganes, Tim Bray, Domenico Catalano,
      George Fletcher, Torsten Lodderstedt, Eve Maler, Nov Matake, Thomas
      Hardjono, Nat Sakimura, and Christian Scholz.</t>
    </section>

    <section anchor="History" title="Document History">
      <t>[[ to be removed by the RFC editor before publication as an RFC
      ]]</t>

      <t>-10</t>

      <t><list style="symbols">
          <t>Added language to point out that scope values are
          service-specific</t>

          <t>Clarified normative language around client metadata</t>

          <t>Added extensibility to token_endpoint_auth_method using absolute
          URIs</t>

          <t>Added security consideration about registering redirect URIs</t>

          <t>Changed erroneous 403 responses to 401's with notes about token
          handling</t>

          <t>Added example for initial registration credential</t>
        </list></t>

      <t>-09</t>

      <t><list style="symbols">
          <t>Added method of internationalization for Client Metadata
          values</t>

          <t>Fixed SAML reference</t>
        </list></t>

      <t>-08</t>

      <t><list style="symbols">
          <t>Collapsed jwk_uri, jwk_encryption_uri, x509_uri, and
          x509_encryption_uri into a single jwks_uri parameter</t>

          <t>Renamed grant_type to grant_types since it's a plural value</t>

          <t>Formalized name of "OAuth 2.0" throughout document</t>

          <t>Added JWT Bearer Assertion and SAML 2 Bearer Assertion to example
          grant types</t>

          <t>Added response_types parameter and explanatory text on its use
          with and relationship to grant_types</t>
        </list></t>

      <t>-07</t>

      <t><list style="symbols">
          <t>Changed registration_access_url to registration_client_uri</t>

          <t>Fixed missing text in 5.1</t>

          <t>Added Pragma: no-cache to examples</t>

          <t>Changed "no such client" error to 403</t>

          <t>Renamed Client Registration Access Endpoint to Client
          Configuration Endpoint</t>

          <t>Changed all the parameter names containing "_url" to instead use
          "_uri"</t>

          <t>Updated example text for forming Client Configuration Endpoint
          URL</t>
        </list></t>

      <t>-06</t>

      <t><list style="symbols">
          <t>Removed secret_rotation as a client-initiated action, including
          removing client secret rotation endpoint and parameters.</t>

          <t>Changed _links structure to single value
          registration_access_url.</t>

          <t>Collapsed create/update/read responses into client info
          response.</t>

          <t>Changed return code of create action to 201.</t>

          <t>Added section to describe suggested generation and composition of
          Client Registration Access URL.</t>

          <t>Added clarifying text to PUT and POST requests to specify JSON in
          the body.</t>

          <t>Added Editor's Note to DELETE operation about its inclusion.</t>

          <t>Added Editor's Note to registration_access_url about alternate
          syntax proposals.</t>
        </list></t>

      <t>-05</t>

      <t><list style="symbols">
          <t>changed redirect_uri and contact to lists instead of space
          delimited strings</t>

          <t>removed operation parameter</t>

          <t>added _links structure</t>

          <t>made client update management more RESTful</t>

          <t>split endpoint into three parts</t>

          <t>changed input to JSON from form-encoded</t>

          <t>added READ and DELETE operations</t>

          <t>removed Requirements section</t>

          <t>changed token_endpoint_auth_type back to
          token_endpoint_auth_method to match OIDC who changed to match us</t>
        </list></t>

      <t>-04</t>

      <t><list style="symbols">
          <t>removed default_acr, too undefined in the general OAuth2 case</t>

          <t>removed default_max_auth_age, since there's no mechanism for
          supplying a non-default max_auth_age in OAuth2</t>

          <t>clarified signing and encryption URLs</t>

          <t>changed token_endpoint_auth_method to token_endpoint_auth_type to
          match OIDC</t>
        </list></t>

      <t>-03</t>

      <t><list style="symbols">
          <t>added scope and grant_type claims</t>

          <t>fixed various typos and changed wording for better clarity</t>

          <t>endpoint now returns the full set of client information</t>

          <t>operations on client_update allow for three actions on metadata:
          leave existing value, clear existing value, replace existing value
          with new value</t>
        </list></t>

      <t>-02</t>

      <t><list style="symbols">
          <t>Reorganized contributors and references</t>

          <t>Moved OAuth references to RFC</t>

          <t>Reorganized model/protocol sections for clarity</t>

          <t>Changed terminology to "client register" instead of "client
          associate"</t>

          <t>Specified that client_id must match across all subsequent
          requests</t>

          <t>Fixed RFC2XML formatting, especially on lists</t>
        </list></t>

      <t>-01</t>

      <t><list style="symbols">
          <t>Merged UMA and OpenID Connect registrations into a single
          document</t>

          <t>Changed to form-paramter inputs to endpoint</t>

          <t>Removed pull-based registration</t>
        </list></t>

      <t>-00</t>

      <t><list style="symbols">
          <t>Imported original UMA draft specification</t>
        </list></t>
    </section>
  </back>
</rfc>
