<?xml version="1.0"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119      SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6690      SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6690.xml">
<!ENTITY RFC5988      SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5988.xml">
<!ENTITY RFC6347      SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6347.xml">
<!ENTITY RFC5785      SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5785.xml">
<!ENTITY I-D.ietf-core-coap 						SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-core-coap.xml">
<!ENTITY I-D.ietf-core-groupcomm 					SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-core-groupcomm-09.xml">
<!ENTITY I-D.ietf-core-interfaces 					SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-core-interfaces-00.xml">
<!ENTITY I-D.ietf-core-resource-directory 			SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-core-resource-directory-00.xml">
<!ENTITY I-D.greevenbosch-core-profile-description 	SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-greevenbosch-core-profile-description-01.xml">
<!ENTITY I-D.keoh-tls-multicast-security 	SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-keoh-tls-multicast-security-00.xml">
]>


<?rfc toc="yes"?>
<?rfc symrefs="yes" ?>

<rfc category="std" ipr="trust200902" docName="draft-ishaq-core-entities-00">
  <front>
    <title abbrev="CoAP Entities">CoAP Entities</title>
    
      <author initials="I." surname="Ishaq" fullname="Isam Ishaq">
          <organization abbrev="iMinds-IBCN/UGent">iMinds-IBCN/UGent</organization>
          <address>
              <postal>
                  <street>Department of Information Technology</street>
                  <street>Internet Based Communication Networks and Services (IBCN)</street>
                  <street>Ghent University - iMinds</street>
                  <street>Gaston Crommenlaan 8 bus 201</street>
                  <city>Ghent</city>
                  <code>B-9050</code>
                  <country>Belgium</country>
              </postal>
              <phone>+32-9-3314946</phone>
              <email>isam.ishaq@intec.ugent.be</email>
          </address>
      </author>
      
      <author initials="J." surname="Hoebeke" fullname="Jeroen Hoebeke">
          <organization abbrev="iMinds-IBCN/UGent">iMinds-IBCN/UGent</organization>
          <address>
              <postal>
                  <street>Department of Information Technology</street>
                  <street>Internet Based Communication Networks and Services (IBCN)</street>
                  <street>Ghent University - iMinds</street>
                  <street>Gaston Crommenlaan 8 bus 201</street>
                  <city>Ghent</city>
                  <code>B-9050</code>
                  <country>Belgium</country>
              </postal>
              <phone>+32-9-3314954</phone>
              <email>jeroen.hoebeke@intec.ugent.be</email>
          </address>
      </author>
      
      <author initials="F." surname="Van den Abeele" fullname="Floris Van den Abeele">
          <organization abbrev="iMinds-IBCN/UGent">iMinds-IBCN/UGent</organization>
          <address>
              <postal>
                  <street>Department of Information Technology</street>
                  <street>Internet Based Communication Networks and Services (IBCN)</street>
                  <street>Ghent University - iMinds</street>
                  <street>Gaston Crommenlaan 8 bus 201</street>
                  <city>Ghent</city>
                  <code>B-9050</code>
                  <country>Belgium</country>
              </postal>
              <phone>+32-9-3314946</phone>
              <email>floris.vandenabeele@intec.ugent.be</email>
          </address>
      </author>
      
    <date month="June" year="2013"/>
    <area>Applications</area>
    <workgroup>core</workgroup>
    <abstract>
      <t>
         This document describes a format to create entities
         that can be used for group communication using CoAP unicast messages.
      </t>
    </abstract>
    <note title="Note">
      <t>
        Discussion and suggestions for improvement are requested, 
        and should be sent to core@ietf.org.
      </t>
    </note>
  </front>
  <middle>
    <section title="Requirements notation">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
        "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
        and "OPTIONAL" in this document are to be interpreted as
        described in <xref target="RFC2119"/>.
      </t>
	  <t>
	    The above key words are used to establish a set of guidelines for
		CoAP entities.  An implementation of CoAP entities MAY implement 
		these guidelines; an implementation
		claiming compliance to this document MUST implement the set of
		guidelines.
	  </t>
	  <t>
	    This document assumes readers are familiar with the terms and
		concepts that are used in <xref target="I-D.ietf-core-coap"/> and 
		<xref target="I-D.greevenbosch-core-profile-description"/>.  
		In addition, this document defines the following terminology:
		<list style="hanging">
		  <t hangText="Entity"><vspace />
			A group of resources on CoAP servers that can be created, 
			used or manipulated through a single CoAP request.</t>
		  <t hangText="Entity Manager (EM)"><vspace />
			The component that manages the entities. 
			This component, 
			which can reside e.g. on the Border Gateway of the LLN, 
			is responsible for maintaining entities. 
			Clients on the Internet can interact with an EM to 
			create new entities and/or customize
			how these entities should behave.</t>
		</list> 

	  </t>
    </section>
    <section title="Introduction">
		<t>
			The Constrained Application Protocol (CoAP) <xref target="I-D.ietf-core-coap"/> 
			is a RESTful protocol for constrained nodes.
			The networks that connect these nodes together are often referred to as low
			power and lossy networks (LLNs).		  
		</t>
		<t>
			Typically, each of the constrained servers has at least one
			CoAP resource that may be queried by clients to obtain
			information about the nodes themselves (e.g. battery
			level), about the environment that they monitor (e.g.
			temperature of the room), or to trigger the nodes to perform
			real-world actions (switch the light on). 
		</t>
		<t>
			Depending on the application, information from individual
			nodes might not be sufficient, reliable, or useful. 
			An application may need to aggregate and/or compare data from
			several nodes in order to obtain accurate results. 
			In the same way, 
			a single user request might need to trigger a series of
			actions on multiple actuators to perform a single user request.
		</t>
		<t>
			Although multicast may be used to transmit the same request to several nodes
			<xref target="I-D.ietf-core-groupcomm"/>, 
			multicast communication in LLNs has some disadvantages. 
			For instance, it is difficult to avoid duplication of messages, 
			and duplication is undesirable in an LLN where
			bandwidth is limited for these constrained nodes.
			Furthermore, basic multicast is not reliable in an LLN, which is
			problematic for requests that require guaranteed delivery.
			Security of multicast is another issue. Currently CoAP relies on 
			Datagram Transport Layer Security (DTLS) <xref target="RFC6347"/>
			for secure unicast communication. At the moment, DTLS requires non-standard 
			extensions like <xref target="I-D.keoh-tls-multicast-security" /> to secure 
			multicast. As demonstrated by the formation of the upcoming DTLS-IoT WG (pending
			a BoF at IETF 87) that aims to introduce multicast record layer support for DTLS, 
			work is very much ongoing in this field but no standard solution is available
			as of today. Also, the creation of multicast groups, defining which nodes
			should be addressed when using a particular multicast address,
			is hard to realize inside LLNs. For instance, the approach in 
			<xref target="I-D.ietf-core-groupcomm"/> suggests that every CoAP endpoint
			should implement the "core.gp" interface. 
			Additionally, the use of multicast increases the footprint of the code
			that needs to fit on the constrained nodes, 
			and it is to be expected that this functionality will not be available in many LLNs.
			Consequently, in some cases the use of multicast might be not feasible or provide 
			a suboptimal solution.
		</t>
		<t>
			As an alternative, 
			unicast-based solutions should be considered. 
			Simple unicast solutions are defined in the CoRE Interfaces draft 
			<xref target="I-D.ietf-core-interfaces"/>. 
			Among other interface types, this draft defines the
			Batch interface type and its extension, 
			the Linked Batch interface type. 
			Batch interfaces are used to manipulate a
			collection of sub-resources at the same time. 
			Contrary to the basic Batch, 
			which is a collection statically defined by the web server, 
			a Linked Batch is dynamically controlled by a web client. 
			A Linked Batch resource has no sub-resources. 
			Instead the resources forming the batch are referenced using 
			Web Linking <xref target="RFC5988"/> 
			and the CoRE Link Format <xref target="RFC6690"/>. 
			The draft does not foresee any way to manipulate resources 
			that are located on multiple smart objects with a single client request.
		</t>
		<t>			
			The current CoRE drafts do not foresee any
			unicast-based way to manipulate resources that are located on
			multiple nodes with a single client request. 
			To overcome this shortcoming and be able to perform such composite requests, 
			intelligence is typically added to the client
			application to make it communicate with the nodes individually. 
			This leads to more complex user applications, 
			and the added intelligence and programming cannot be shared with
			other applications easily. 
			Furthermore, complex use applications may be unmanageable. 
			Any modifications to those
			complex user applications may require significant testing time,
			thus limiting the flexibility of the user applications.
			Additionally a large overhead of communication between the
			client machine and the nodes is generated, especially
			when many nodes are involved in these actions. 
			When the communication between the client and the nodes is
			done across the Internet, delays are unpredictable and a
			sequence of actuator commands might arrive out of order and
			possibly have unwanted results. 
			Furthermore, if the communication occurs over costly links, 
			communication between the client and the nodes might get
			unnecessarily expensive.
		</t>
		<t>
			The discussed approaches are able to realize
			communication with a group of resources, 
			but each exhibit some limitations. 
			Therefore, in this Internet Draft we propose an alternative
			unicast-based approach for communication with a group of
			resources across multiple nodes.
		</t>
    </section>

	<section title="System Overview">
		<t>
			We call the component that manages the entities, the Entity Manager (EM). 
			This component, which can reside e.g. on the Border Gateway of the LLN, 
			is responsible for maintaining entities that are created from groups of CoAP servers 
			(i.e. sensors and actuators) and/or resources inside the LLN. 
			Clients on the Internet can interact with an EM to create new entities 
			and/or customize how these entities should behave. 
			Optionally the client can elect to contact a resource directory
			<xref target="I-D.ietf-core-resource-directory"/>
			in order to discover which resources are available in the network. 
			<!--Fig. 1 shows an overview of the involved components. -->

		</t>
		<t>
			The EM functionality does not have to be put on a dedicated device. 
			Theoretically any CoAP server can be extended to become an EM. 
			The choice of the most appropriate location to put the EM functionality 
			depends on the size and topology of the network. 
			For example, it can reside on a smart object in the 
			constrained network with enough resources, in the Cloud, on
			the client device itself, or on a gateway at the edge of the
			LLN. The latter case has the added benefit that security can be
			centrally managed besides offloading the processing from
			constrained devices.
		</t>
		<t>
			Regardless of the location of the EM, it will serve as a
			proxy between the client and the constrained devices. Client
			requests will be sent to the EM, which will analyze and verify
			the requests and then issue the appropriate requests to the
			constrained devices using CoAP. Once the EM receives
			responses from the constrained devices, it will combine them
			according to the client needs and will send back an aggregated
			response to the client.
		</t>
		<t>
			When a client tries to create a new entity consisting of a
			group of resources inside LLNs, the EM performs a sanity
			check on the request in order to make sure that the resulting
			entity would make sense. For example it verifies that the
			resources inside the entity are valid, if they support a certain
			content format or if their data can be aggregated.
			Customization of the entity behavior is accomplished by
			creating profiles for the entities. A profile of an entity can
			specify for example whether to return the values of all
			resources in the entity, only the computed average of all values
			or a subset of all values.
		</t>
    </section>

	<section title="Entity Creation">
		<t>
			To facilitate the creation and manipulation of entities, an
			Entity Manager MUST implement the RESTful interface defined in this draft. 
			A CoAP resource implementing this interface can be identified by using 
			the resource type (rt) "core.em". We call this interface the Entity Management
			Interface and the corresponding resource the Entity Management Resource 
			(available at e.g. &quot;/e&quot;). 
			This interface supports only the CoAP POST request method. 
			As payload of the request, 
			it expects a collection of resources in CoRE link format 
			<xref target="RFC6690"/>, 
			which together should form the entity. 
			In the response, 
			the Location-Path CoAP option MUST be used to specify the
			name of the newly created resource. 
			The payload of the response is in plain text and describes 
			the results of the validation tests performed by the EM on the
			collection of resources.
		</t>
		<t>
			When a client wants to create an entity consisting of several
			sub-resources, it MUST compose a CoAP POST request and
			send it to the Entity Management resource on the EM. 
			The EM creates the entity, assigns it a unique URI,
			and stores the entity in the entity database for future usage.
			Then the EM starts the entity validation process (explained in
			the next subsection). 
			The EM MUST inform the client about the URI to
			use in order to access or further customize the newly created
			entity and about the results of the validation of the entity. 
			If the entity did not pass the validation process the client SHOULD fix
			any errors and resubmit the entity for validation again before
			the client can use the entity.
		</t>
    </section>

	<section title="Validation Process">
		<t>
			Whenever a client requests to create a new entity or to
			modify an existing entity, the EM SHOULD perform a validation
			process. The purpose of this validation process is twofold: 1)
			Make sure that the sub-resources in the entity exist and can be
			used. 2) Derive the properties of the entity based on the
			properties of the sub-resources it contains. If the entity passes
			validation the EM marks the entity as a valid entity and stores
			the entity along with its calculated properties in the entity
			database for future usage. If the entity fails validation it is still
			created, but marked as invalid. The entity validation is based
			on EM knowledge of the individual sub-resources through .well-known/core
			and their profiles and possibly based on additional functionality
			implemented by the EM (e.g. vendor-specific functionality).
		</t>
		<t>
			If the Entity Manager does not know any of the subresources
			in an entity (e.g. based on knowledge in a resource
			directory) or does not know the sub-resource capabilities, it
			tries to obtain this information according to a fallback
			mechanism as follows. 
			<list style="symbols">
				<t>
					The EM tries to contact the object containing the resource 
					in order to obtain the resource profile,
					since this would provide the most complete information about
					the resource. 
				</t>
				<t>
					If the resource profile does not exist, 
					the EM tries to obtain any information about this resource 
					from .well-known/core of the respective object. 
				</t>
				<t>
					If this fails as well, 
					the EM tries to query the resource directly to discover, 
					at a minimum, if the resource exists or not. 
				</t>
			</list>
		</t>
		<t>
			The validation process that the entity manger performs on entities MUST ensure the
			following:
			<list style="symbols">
				<t>
					The individual sub-resources contained in the entity are
					valid (e.g. the resources exist on the respective nodes).
				</t>
				<t>
					The requested operations can be performed on the
					individual sub-resources (e.g. which CoAP options are supported, 
					which RESTful methods are allowed?).
				</t>
				<t>
					The individual sub-resources do not conflict. 
					A sample conflict can occur when an entity creation request
					contains two sub-resources on the same actuator asking
					it to do contradictory actions, e.g. open and close at the
					same time.
				</t>
				<t>
					The responses sent by the individual sub-resources can
					be combined together by using a common denominator or by executing
					custom algorithms that reside at the EM.
				</t>
			</list>
		</t>
    </section>
	
	<section title="Entity Profile">
		<t>
			Once the EM knows all information about the subresources
			that should become part of the entity and once all
			necessary checks have passed, 
			the EM SHOULD create a profile for the entity based on 
			this information and its custom algorithms.
			This profile contains information
			related to the resource itself, as described in 
			<xref target="I-D.greevenbosch-core-profile-description"/>. 
			In addition, 
			the profile is extended with an entity specific part, 
			providing more information about the entity itself. 
			The entity specific part is a JSON object with the name
			&quot;entity&quot;. 
			The value of this object is an array of entity specific fields.
		</t>
		<section title="The resources &quot;r&quot; entity field">
	      <t>
	         The resources "r" entity field contains a list of the resources 
			 in the entity.
	         It has the format depicted in <xref target="rformat"/>,
	         where r1, r2, ... are strings containing the absolute URIs 
			 of the individual resources.
	         <figure title="resources &quot;r&quot; entity field syntax" anchor="rformat">
	            <artwork align="center">
"r":[r1,r2,...]
	            </artwork>
	         </figure>
	      </t>
	      <t>
	         When including the "r" entity field in the entity profile description,
	         all individual resources of the CoAP entity MUST be included.
	      </t>
	      <t>
	         If the "r" entity profile field is available,
	         the receiving party SHALL assume a non-listed URI is not a resource of the entity.
	      </t>
      </section>

	</section>
	
	<section title="Entity Usage">
		<t>
			Once an entity is created the response contains the URI of
			the dynamically created resource name. 
			The client CAN now interact with the entity by issuing 
			a single CoAP request to the resource representing the entity. 
			When a request for an entity arrives, the following process flow 
			SHOULD be executed.
			<list style="symbols">
				<t>
					The EM breaks down the request into its components and sends the
					individual requests to the respective objects using unicast
					CoAP messages. 
					It can either do that in parallel or sequentially.
				</t>
				<t>
					Once all needed answers are received, 
					the EM creates a response for the client based on the 
					individual responses and sends it to the client. 
					Note that the amount of sub-resources that should respond, 
					the way in which a response is formed and how it should look
					like can be configured by customizing the entity profile as will be
					explained later on. 
				</t>
			</list>
		</t>
    </section>

    <section title="Examples">
		<section title="Entity Creation">
			<t>
				In the following simple example the client requests the creation of an
				entity consisting of two sub-resources: coap://sen5.example.com/tmp and
				coap://sen8.example.com/tmp. The EM creates the new entity,
				assigns it the URI &quot;/1&quot; and informs the client about the newly
				created entity. From now on, any client can access the newly
				created entity by accessing the &quot;/1&quot; resource on the EM.
			</t>
			<figure title="">
				<artwork align="center">
Req: POST coap://em.example.com/e (application/link-format)
     Body: &lt;coap://sen5.example.com/tmp&gt;,
	       &lt;coap://sen8.example.com/tmp&gt;

Res: 2.05 Content (text/plain) 
     Body: /1 created

				</artwork>
			</figure>
		</section>
		
		<section title="Entity Profile">
		<t>
			Assume that the temperature sensor at
      "coap://sen5.example.com/tmp" from the previous example supports 
			the "Uri-Host" (3),
			"ETag" (4), "Observe" (6), "Uri-Port" (7), "Uri-Path" (11) and
			"Content-Format" (12) CoAP options (op). This sensor further
			supports the "application/senml+json" (55) content format (cf)
			and the allowed method is GET (1). 
      This will result in Sen5 having the following profile
      <xref target="I-D.greevenbosch-core-profile-description"/>:
		</t>
		<figure title="">
			<artwork align="center">
Req: GET coap://sen5.example.com/.well-known/profile?path=/tmp

Res: 2.05 Content (application/json)
Body:
{
  "profile":[
    {
	  "path":"tmp",
	  "op":[3,4,6,7,11,12],
	  "cf":[55],
	  "m":[1]
    }
  ]
}
			</artwork>
		</figure>
		<t>
		Let us further assume that the second
		temperature sensor "coap://sen8.example.com/tmp"
		supports the same options as sen5 except for the observe option. 
		Only the GET method is allowed and the supported
		content formats on this sensor are "text/plain" (0) and
		"application/senml+json" (55). 
    Thus Sen8 will have the following profile:
		</t>
		<figure title="">
			<artwork align="center">
Req: GET coap://sen8.example.com/.well-known/profile?path=/tmp

Res: 2.05 Content (application/json)
Body:
{
  "profile":[
    {
	  "path":"tmp",
      "op":[3,4,7,11,12],
      "cf":[0,55],
      "m":[1]
    }
  ]
}
			</artwork>
		</figure>
		<t>
		Based on these two profiles the EM constructs a profile for
		the newly created entity. 
		This profile contains information related to the resource itself. 
		In this example, this includes the options that are supported, the
		supported methods (only GET) and the content format
		"application/senml+json" (55). 
		In addition, the profile is extended with an entity specific part, 
		providing more information about the entity itself. 
		The resulting profile of the entity looks as follows:
		</t>
		<figure title="">
			<artwork align="center">
Res: 2.05 Content (application/json)
{
  "profile":[
    {
      "path":"1",
      "op":[3,4,7,11,12],
      "cf":[55],
      "m":[1]
    }
  ],
  "entity":[
   {
      "r":["coap://sen5.example.com/tmp",
	       "coap://sen8.example.com/tmp"]
   }
  ]
}
			</artwork>
		</figure>
		</section>

		<section title="Entity Usage">
			<t>
				The following Figure shows an example of using the entity
				that was created previous example. 
				The client issues a GET request on the entity&apos;s resource "/1". 
				This results in the EM issuing two GET requests to the 
				individual sub-resources,
				waiting for replies from both of them and then sending back
				both results in one combined response back to the client.
		</t>
		<figure title="">
			<artwork align="center">
   Client                      EM                Sen5               Sen8
   |                         |                     |                   |
   | GET                     |                     |                   |
   | coap://em.example.com/1 |                     |                   |
   |------------------------>| GET                 |                   |
   |                         | coap://sen5.example.com/tmp             |
   |                         |-------------------->|                   |
   |                         |                     |                   |
   |                         |     GET coap://sen8.example.com/tmp     | 
   |                         |---------------------------------------->|
   |                         |                     |                   |
   |                         |&lt;----------------------------------------|
   |                         | 2.05 Content (text/plain) Body: 23.5    |
   |                         |                     |                   |
   |                         |&lt;--------------------|                   |
   |                         | 2.05 Content (text/plain) Body: 26.6    |
   |                         |                     |                   |
   |&lt;------------------------|                     |                   |
   | 2.05 Content (application/senml+json)         |                   |
   | Payload: {"e":[         |                     |                   |
   | {"n": "Sen5/tmp", "v": "26.6", u="degC"},     |                   |
   | {"n": "Sen8/tmp", "v": "23.5", u="degC"}]}    |                   |
   |                         |                     |                   |
			</artwork>
		</figure>
		</section>

    </section>

    <section title="Open topics">
      <section title="Open since v00">
	      <t>
	         <list style="symbols">
	           <t>             
	             Use key words consistently. 
	           </t>
<!--
	           <t>
	             .....
	           </t>
			   -->
	         </list>
	      </t>
      </section>
<!--      <section title="Open since v01">
	      <t>
	         <list style="symbols">
              <t>
	              .......
              </t>
	         </list>
	      </t>
      </section>
-->      
    </section>
<!--
    <section title="Change log">    
      <section title="Changes in v02">
        <t>
          <list style="symbols">
            <t>Removed .....</t>
            <t>Changed .....</t>
            <t>Added .....</t>
            <t>Imported ......</t>
            <t>Adjusted text about ......</t> 
          </list>
        </t>
      </section>
      <section title="Changes in v01">
        <t>
           <list style="symbols">
             <t>Updated .....</t>
             <t>Expanded ....</t>
           </list>
        </t>
      </section>
    </section>
-->              
    <section title="Security Considerations">
		<t>
			For general CoAP security considerations see <xref target="I-D.ietf-core-coap"/>. 
		</t>
		<t>
			A client might request the creation of a large number of entities or entities 
			that contain a large number of resources. This might lead to buffer overflow on the EM.
    </t>
		<t>
			In an unprotected environment,
			an attacker can change the profile description of Entities.
			For example, the list of supported options may be changed.
			This could cause the client to make a wrong decision on which mechanisms to use.
			As the Entity Manager amplifies a single requests into multiple requests
			per user, special care should be taken to avoid congestion and to avoid abuse
			of this mechanism by a malicious user that might want to flood the LLN.
			However, such threats are normal in environments that lack authentication.
		</t>
    </section>
    <section title="IANA Considerations">
      <t>
        <list style="symbols">
          <t>A registry for entity profile fields as well as possible values needs to be set up.</t>
          <!--<t>The .....</t> -->
        </list>
      </t>
    </section>
<!--    <section title="Acknowledgements">
       <t>
          The authors would like to thank ......
       </t>
    </section>
	-->
  </middle>
  <back>
    <references title="Normative References">
		&RFC2119;
		&RFC6690;
		&I-D.ietf-core-coap;
		&I-D.greevenbosch-core-profile-description;
		&RFC5785;
    </references>
	<references title='Informative reference'>
		&RFC5988;
		&RFC6347;
		&I-D.ietf-core-groupcomm;
		&I-D.ietf-core-interfaces;
		&I-D.ietf-core-resource-directory;
    &I-D.keoh-tls-multicast-security;
	</references>
  </back>

</rfc>
