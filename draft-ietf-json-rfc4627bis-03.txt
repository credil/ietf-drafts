



JSON Working Group                                          T. Bray, Ed.
Internet-Draft                                              Google, Inc.
Intended status: Standards Track                      September 18, 2013
Expires: March 22, 2014


                    The JSON Data Interchange Format
                     draft-ietf-json-rfc4627bis-03

Abstract

   JavaScript Object Notation (JSON) is a lightweight, text-based,
   language-independent data interchange format.  It was derived from
   the ECMAScript Programming Language Standard.  JSON defines a small
   set of formatting rules for the portable representation of structured
   data.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 22, 2014.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Bray                     Expires March 22, 2014                 [Page 1]

Internet-Draft                  JSON bis                  September 2013


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Conventions Used in This Document . . . . . . . . . . . .   3
     1.2.  Introduction to This Revision . . . . . . . . . . . . . .   3
     1.3.  Changes from RFC 4627 . . . . . . . . . . . . . . . . . .   3
   2.  JSON Grammar  . . . . . . . . . . . . . . . . . . . . . . . .   4
   3.  Values  . . . . . . . . . . . . . . . . . . . . . . . . . . .   5
   4.  Objects . . . . . . . . . . . . . . . . . . . . . . . . . . .   5
   5.  Arrays  . . . . . . . . . . . . . . . . . . . . . . . . . . .   6
   6.  Numbers . . . . . . . . . . . . . . . . . . . . . . . . . . .   6
   7.  Strings . . . . . . . . . . . . . . . . . . . . . . . . . . .   7
   8.  Character Model . . . . . . . . . . . . . . . . . . . . . . .   8
     8.1.  Encoding and Detection  . . . . . . . . . . . . . . . . .   8
     8.2.  Unicode Characters  . . . . . . . . . . . . . . . . . . .   8
     8.3.  String Comparison . . . . . . . . . . . . . . . . . . . .   9
   9.  Parsers . . . . . . . . . . . . . . . . . . . . . . . . . . .   9
   10. Generators  . . . . . . . . . . . . . . . . . . . . . . . . .   9
   11. IANA Considerations . . . . . . . . . . . . . . . . . . . . .   9
   12. Security Considerations . . . . . . . . . . . . . . . . . . .  11
   13. Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .  11
   14. Contributors  . . . . . . . . . . . . . . . . . . . . . . . .  12
   15. Normative References  . . . . . . . . . . . . . . . . . . . .  12
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  13


1.  Introduction

   JavaScript Object Notation (JSON) is a text format for the
   serialization of structured data.  It is derived from the object
   literals of JavaScript, as defined in the ECMAScript Programming
   Language Standard, Third Edition [ECMA].

   JSON can represent four primitive types (strings, numbers, booleans,
   and null) and two structured types (objects and arrays).

   A string is a sequence of zero or more Unicode characters [UNICODE].

   An object is an unordered collection of zero or more name/value
   pairs, where a name is a string and a value is a string, number,
   boolean, null, object, or array.

   An array is an ordered sequence of zero or more values.

   The terms "object" and "array" come from the conventions of
   JavaScript.





Bray                     Expires March 22, 2014                 [Page 2]

Internet-Draft                  JSON bis                  September 2013


   JSON's design goals were for it to be minimal, portable, textual, and
   a subset of JavaScript.

1.1.  Conventions Used in This Document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   The grammatical rules in this document are to be interpreted as
   described in [RFC4234].

1.2.  Introduction to This Revision

   In the years since the publication of RFC 4627, JSON has found very
   wide use.  This experience has revealed certain patterns which, while
   allowed by the RFC, have caused interoperability problems.

   Also, a small number of errata have been reported.

   This revision does not change any of the rules of the specification;
   all texts which were legal JSON remain so, and none which were not
   JSON become JSON.  The revision's goal is to fix the errata and
   highlight practices which can lead to interoperability problems.

1.3.  Changes from RFC 4627

   This section lists all changes between this document and the text in
   RFC 4627.

   o  Changed Working Group attribution to JSON Working Group.

   o  Changed title of doc per consensus call at http://www.ietf.org/
      mail-archive/web/json/current/msg00736.html

   o  Applied erratum #607 from RFC 4627 to correctly align the artwork
      for the definition of "object".

   o  Change the reference to [UNICODE] to be be non-version-specific.

   o  Applied erratum #3607 from RFC 4627 by removing the security
      consideration that begins "A JSON text can be safely passed" and
      the JavaScript code that went with that consideration.

   o  Added Tim Bray as editor.

   o  Added an "Introduction to this Revision" section.




Bray                     Expires March 22, 2014                 [Page 3]

Internet-Draft                  JSON bis                  September 2013


   o  Added language about duplicate object member names and
      interoperability.

   o  Added language about intereoperability as a function of number
      ranges and IEEE754.  Also added IEEE754 reference.

   o  Added language about interoperability and Unicode characters, and
      about string comparisons.  To do this, turned the old "Encoding"
      section into a "Character Model" section, with three subsections:
      The old "Encoding" material, and two new sections for "Unicode
      Characters" and "String Comparison".

   o  Made a real XML-level "Security Considerations" section, and
      lifted the text out of the existing "IANA Considerations" section.

   o  Removed the language "Interoperability considerations: n/a" from
      the "IANA Considerations section.

   o  Added "Contributors" section crediting Douglas Crockford.

2.  JSON Grammar

   A JSON text is a sequence of tokens.  The set of tokens includes six
   structural characters, strings, numbers, and three literal names.

   A JSON text is a serialized object or array.

   JSON-text = object / array


   These are the six structural characters:

      begin-array     = ws %x5B ws  ; [ left square bracket

      begin-object    = ws %x7B ws  ; { left curly bracket

      end-array       = ws %x5D ws  ; ] right square bracket

      end-object      = ws %x7D ws  ; } right curly bracket

      name-separator  = ws %x3A ws  ; : colon

      value-separator = ws %x2C ws  ; , comma


   Insignificant whitespace is allowed before or after any of the six
   structural characters.




Bray                     Expires March 22, 2014                 [Page 4]

Internet-Draft                  JSON bis                  September 2013


   ws = *(
           %x20 /              ; Space
           %x09 /              ; Horizontal tab
           %x0A /              ; Line feed or New line
           %x0D                ; Carriage return
       )


3.  Values

   A JSON value MUST be an object, array, number, or string, or one of
   the following three literal names:

   false null true


   The literal names MUST be lowercase.  No other literal names are
   allowed.

      value = false / null / true / object / array / number / string

      false = %x66.61.6c.73.65   ; false

      null  = %x6e.75.6c.6c      ; null

      true  = %x74.72.75.65      ; true


4.  Objects

   An object structure is represented as a pair of curly brackets
   surrounding zero or more name/value pairs (or members).  A name is a
   string.  A single colon comes after each name, separating the name
   from the value.  A single comma separates a value from a following
   name.  The names within an object SHOULD be unique.

      object = begin-object [ member *( value-separator member ) ]
               end-object

      member = string name-separator value


   An object whose names are all unique is interoperable in the sense
   that all software implementations which receive that object will
   agree on the name-value mappings.  When the names within an object
   are not unique, the behavior of software that receives such an object
   is unpredictable.  Many implementations report the last name/value
   pair only; other implementations report an error or fail to parse the



Bray                     Expires March 22, 2014                 [Page 5]

Internet-Draft                  JSON bis                  September 2013


   object; other implementations report all of the name/value pairs,
   including duplicates.

5.  Arrays

   An array structure is represented as square brackets surrounding zero
   or more values (or elements).  Elements are separated by commas.

   array = begin-array [ value *( value-separator value ) ] end-array


6.  Numbers

   The representation of numbers is similar to that used in most
   programming languages.  A number contains an integer component that
   may be prefixed with an optional minus sign, which may be followed by
   a fraction part and/or an exponent part.

   Octal and hex forms are not allowed.  Leading zeros are not allowed.

   A fraction part is a decimal point followed by one or more digits.

   An exponent part begins with the letter E in upper or lowercase,
   which may be followed by a plus or minus sign.  The E and optional
   sign are followed by one or more digits.

   Numeric values that cannot be represented as sequences of digits
   (such as Infinity and NaN) are not permitted.

      number = [ minus ] int [ frac ] [ exp ]

      decimal-point = %x2E       ; .

      digit1-9 = %x31-39         ; 1-9

      e = %x65 / %x45            ; e E

      exp = e [ minus / plus ] 1*DIGIT

      frac = decimal-point 1*DIGIT

      int = zero / ( digit1-9 *DIGIT )

      minus = %x2D               ; -

      plus = %x2B                ; +

      zero = %x30                ; 0



Bray                     Expires March 22, 2014                 [Page 6]

Internet-Draft                  JSON bis                  September 2013


   This specification allows implementations to set limits on the range
   of numbers accepted.  While absolute interoperability cannot be
   guaranteed, wide interoperability can be achieved by limiting numbers
   in JSON texts to those within the precision and magnitude expressible
   in an IEEE 754:20008 binary64 (double precision) number [IEEE754].
   Numeric values that cannot be represented in the grammar above (such
   as Infinity and NaN) are not permitted.  Attempting to represent
   numbers that cannot be exactly encoded as an IEEE 754:2008 binary64
   number, such as 1E400, 9007199254740993, or
   3.141592653589793238462643383279, may cause interoperability
   problems.

7.  Strings

   The representation of strings is similar to conventions used in the C
   family of programming languages.  A string begins and ends with
   quotation marks.  All Unicode characters may be placed within the
   quotation marks except for the characters that must be escaped:
   quotation mark, reverse solidus, and the control characters (U+0000
   through U+001F).

   Any character may be escaped.  If the character is in the Basic
   Multilingual Plane (U+0000 through U+FFFF), then it may be
   represented as a six-character sequence: a reverse solidus, followed
   by the lowercase letter u, followed by four hexadecimal digits that
   encode the character's code point.  The hexadecimal letters A though
   F can be upper or lowercase.  So, for example, a string containing
   only a single reverse solidus character may be represented as
   "\u005C".

   Alternatively, there are two-character sequence escape
   representations of some popular characters.  So, for example, a
   string containing only a single reverse solidus character may be
   represented more compactly as "\\".

   To escape an extended character that is not in the Basic Multilingual
   Plane, the character is represented as a twelve-character sequence,
   encoding the UTF-16 surrogate pair.  So, for example, a string
   containing only the G clef character (U+1D11E) may be represented as
   "\uD834\uDD1E".











Bray                     Expires March 22, 2014                 [Page 7]

Internet-Draft                  JSON bis                  September 2013


      string = quotation-mark *char quotation-mark

      char = unescaped /
          escape (
              %x22 /          ; "    quotation mark  U+0022
              %x5C /          ; \    reverse solidus U+005C
              %x2F /          ; /    solidus         U+002F
              %x62 /          ; b    backspace       U+0008
              %x66 /          ; f    form feed       U+000C
              %x6E /          ; n    line feed       U+000A
              %x72 /          ; r    carriage return U+000D
              %x74 /          ; t    tab             U+0009
              %x75 4HEXDIG )  ; uXXXX                U+XXXX

      escape = %x5C              ; \

      quotation-mark = %x22      ; "

      unescaped = %x20-21 / %x23-5B / %x5D-10FFFF


8.  Character Model

8.1.  Encoding and Detection

   JSON text SHALL be encoded in Unicode.  The default encoding is
   UTF-8.

   Since the first two characters of a JSON text will always be ASCII
   characters [RFC0020], it is possible to determine whether an octet
   stream is UTF-8, UTF-16 (BE or LE), or UTF-32 (BE or LE) by looking
   at the pattern of nulls in the first four octets.

   00 00 00 xx  UTF-32BE
   00 xx 00 xx  UTF-16BE
   xx 00 00 00  UTF-32LE
   xx 00 xx 00  UTF-16LE
   xx xx xx xx  UTF-8


8.2.  Unicode Characters

   A JSON text which is composed entirely of Unicode characters
   [UNICODE] (however encoded) is interoperable in the sense that all
   software implementations which parse it will agree on the contents of
   names and values of object members.  However, the ABNF in this
   specification allows member names and string values to contain bit
   sequences which cannot encode Unicode characters, for example



Bray                     Expires March 22, 2014                 [Page 8]

Internet-Draft                  JSON bis                  September 2013


   "\uDEAD" (a single unpaired UTF-16 surrogate).  Instances of this
   have been observed, for example when a library truncates a UTF-16
   string without checking whether the truncation split a surrogate
   pair.  The behavior of software which receives JSON texts containing
   such values is unpredictable; for example, implementations might
   return different values for the length of a string value, or even
   suffer a fatal runtime exception.

8.3.  String Comparison

   Software implementations are typically required to test names of
   object members for equality.  Implementations which transform the
   textual representation into sequences of Unicode code units, and then
   perform the comparison numerically, code unit by code unit, are
   interoperable in the sense that implementations will agree in all
   cases on equality or inequality of two strings.  For example,
   implementations which compare strings with escaped characters
   unconverted may incorrectly find that "a\b" and "a\u005Cb" are not
   equal.

9.  Parsers

   A JSON parser transforms a JSON text into another representation.  A
   JSON parser MUST accept all texts that conform to the JSON grammar.
   A JSON parser MAY accept non-JSON forms or extensions.

   An implementation may set limits on the size of texts that it
   accepts.  An implementation may set limits on the maximum depth of
   nesting.  An implementation may set limits on the range of numbers.
   An implementation may set limits on the length and character contents
   of strings.

10.  Generators

   A JSON generator produces JSON text.  The resulting text MUST
   strictly conform to the JSON grammar.

11.  IANA Considerations













Bray                     Expires March 22, 2014                 [Page 9]

Internet-Draft                  JSON bis                  September 2013


   The MIME media type for JSON text is application/json.

   Type name: application

   Subtype name: json

   Required parameters: n/a

   Optional parameters: n/a

   Encoding considerations: 8bit if UTF-8; binary if UTF-16 or UTF-32

     JSON may be represented using UTF-8, UTF-16, or UTF-32.  When JSON
     is written in UTF-8, JSON is 8bit compatible.  When JSON is
     written in UTF-16 or UTF-32, the binary content-transfer-encoding
     must be used.

   Published specification: RFC 4627

   Applications that use this media type:

     JSON has been used to exchange data between applications written
     in all of these programming languages: ActionScript, C, C#,
     ColdFusion, Common Lisp, E, Erlang, Java, JavaScript, Lua,
     Objective CAML, Perl, PHP, Python, Rebol, Ruby, and Scheme.

   Additional information:

     Magic number(s): n/a
     File extension(s): .json
     Macintosh file type code(s): TEXT

   Person & email address to contact for further information:
     Douglas Crockford
     douglas@crockford.com

   Intended usage: COMMON

   Restrictions on usage: none

   Author:
     Douglas Crockford
     douglas@crockford.com

   Change controller:
     Douglas Crockford
     douglas@crockford.com




Bray                     Expires March 22, 2014                [Page 10]

Internet-Draft                  JSON bis                  September 2013


12.  Security Considerations

   Generally there are security issues with scripting languages.  JSON
   is a subset of JavaScript, but excludes assignment and invocation.

13.  Examples

   This is a JSON object:

   {
     "Image": {
         "Width":  800,
         "Height": 600,
         "Title":  "View from 15th Floor",
         "Thumbnail": {
             "Url":    "http://www.example.com/image/481989943",
             "Height": 125,
             "Width":  "100"
         },
         "IDs": [116, 943, 234, 38793]
       }
   }


   Its Image member is an object whose Thumbnail member is an object and
   whose IDs member is an array of numbers.

   This is a JSON array containing two objects:























Bray                     Expires March 22, 2014                [Page 11]

Internet-Draft                  JSON bis                  September 2013


   [
     {
        "precision": "zip",
        "Latitude":  37.7668,
        "Longitude": -122.3959,
        "Address":   "",
        "City":      "SAN FRANCISCO",
        "State":     "CA",
        "Zip":       "94107",
        "Country":   "US"
     },
     {
        "precision": "zip",
        "Latitude":  37.371991,
        "Longitude": -122.026020,
        "Address":   "",
        "City":      "SUNNYVALE",
        "State":     "CA",
        "Zip":       "94085",
        "Country":   "US"
     }
   ]


14.  Contributors

   RFC 4627 was written by Douglas Crockford.  This document was
   constructed by making a relatively small number of additions to and
   subtractions from that document; thus the vast majority of the text
   here is his.

15.  Normative References

   [ECMA]     European Computer Manufacturers Association, "ECMAScript
              Language Specification 3rd Edition ", December 1999,
              <http://www.ecma-international.org/publications/files/
              ecma-st/ECMA-262.pdf>.

   [IEEE754]  IEEE, "IEEE Standard for Floating-Point Arithmetic", 2008,
              <http://grouper.ieee.org/groups/754/>.

   [RFC0020]  Cerf, V., "ASCII format for network interchange", RFC 20,
              October 1969.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.





Bray                     Expires March 22, 2014                [Page 12]

Internet-Draft                  JSON bis                  September 2013


   [RFC4234]  Crocker, D., Ed.  and P. Overell, "Augmented BNF for
              Syntax Specifications: ABNF", RFC 4234, October 2005.

   [UNICODE]  The Unicode Consortium, "The Unicode Standard, Version 4.0
              ", 2003, <http://www.unicode.org/versions/latest/>.

Author's Address

   Tim Bray (editor)
   Google, Inc.

   Email: tbray@textuality.com






































Bray                     Expires March 22, 2014                [Page 13]
