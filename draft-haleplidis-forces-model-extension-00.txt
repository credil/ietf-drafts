


Internet Engineering Task Force                            E. Haleplidis
Internet-Draft                                      University of Patras
Intended status: Informational                           October 1, 2012
Expires: April 4, 2013


                         ForCES Model Extension
               draft-haleplidis-forces-model-extension-00

Abstract

   Forwarding and Control Element Separation (ForCES) defines an
   architectural framework and associated protocols to standardize
   information exchange between the control plane and the forwarding
   plane in a ForCES Network Element (ForCES NE).  RFC5812 has defined
   the ForCES Model provides a formal way to represent the capabilities,
   state, and configuration of forwarding elements within the context of
   the ForCES protocol, so that control elements (CEs) can control the
   FEs accordingly.  More specifically, the model describes the logical
   functions that are present in an FE, what capabilities these
   functions support, and how these functions are or can be
   interconnected.

   RFC5812 has been around for two years and experience in its use has
   shown room for extensions without a need to alter the protocol while
   retaining backward compatibility with older xml libraries.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on April 4, 2013.

Copyright Notice

   Copyright (c) 2012 IETF Trust and the persons identified as the
   document authors.  All rights reserved.



Haleplidis                Expires April 4, 2013                 [Page 1]

Internet-Draft           ForCES Model Extension             October 2012


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   1.  Terminology and Conventions  . . . . . . . . . . . . . . . . .  3
     1.1.  Requirements Language  . . . . . . . . . . . . . . . . . .  3
     1.2.  Definitions  . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
   3.  ForCES Model Extension overview  . . . . . . . . . . . . . . .  4
   4.  Extensions . . . . . . . . . . . . . . . . . . . . . . . . . .  5
     4.1.  Complex Metadata . . . . . . . . . . . . . . . . . . . . .  5
     4.2.  DataType and Metadata Optional Default Value . . . . . . .  5
     4.3.  Optional Frame Produced  . . . . . . . . . . . . . . . . .  5
     4.4.  Strengthen XML Validation  . . . . . . . . . . . . . . . .  6
   5.  XML Extension Schema for LFB Class Library Documents . . . . .  6
   6.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 18
   7.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 18
   8.  Security Considerations  . . . . . . . . . . . . . . . . . . . 18
   9.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 19
     9.1.  Normative References . . . . . . . . . . . . . . . . . . . 19
     9.2.  Informative References . . . . . . . . . . . . . . . . . . 19
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . . 19




















Haleplidis                Expires April 4, 2013                 [Page 2]

Internet-Draft           ForCES Model Extension             October 2012


1.  Terminology and Conventions

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

1.2.  Definitions

   This document follows the terminology defined by the ForCES Model in
   [RFC5812].  The required definitions are repeated below for clarity.

      FE Model - The FE model is designed to model the logical
      processing functions of an FE.  The FE model proposed in this
      document includes three components; the LFB modeling of individual
      Logical Functional Block (LFB model), the logical interconnection
      between LFBs (LFB topology), and the FE-level attributes,
      including FE capabilities.  The FE model provides the basis to
      define the information elements exchanged between the CE and the
      FE in the ForCES protocol [RFC5810].

      LFB (Logical Functional Block) Class (or type) - A template that
      represents a fine-grained, logically separable aspect of FE
      processing.  Most LFBs relate to packet processing in the data
      path.  LFB classes are the basic building blocks of the FE model.

      LFB Instance - As a packet flows through an FE along a data path,
      it flows through one or multiple LFB instances, where each LFB is
      an instance of a specific LFB class.  Multiple instances of the
      same LFB class can be present in an FE's data path.  Note that we
      often refer to LFBs without distinguishing between an LFB class
      and LFB instance when we believe the implied reference is obvious
      for the given context.

      LFB Model - The LFB model describes the content and structures in
      an LFB, plus the associated data definition.  XML is used to
      provide a formal definition of the necessary structures for the
      modeling.  Four types of information are defined in the LFB model.
      The core part of the LFB model is the LFB class definitions; the
      other three types of information define constructs associated with
      and used by the class definition.  These are reusable data types,
      supported frame (packet) formats, and metadata.

      Element - Element is generally used in this document in accordance
      with the XML usage of the term.  It refers to an XML tagged part
      of an XML document.  For a precise definition, please see the full
      set of XML specifications from the W3C. This term is included in



Haleplidis                Expires April 4, 2013                 [Page 3]

Internet-Draft           ForCES Model Extension             October 2012


      this list for completeness because the ForCES formal model uses
      XML.

      Attribute - Attribute is used in the ForCES formal modeling in
      accordance with standard XML usage of the term, i.e., to provide
      attribute information included in an XML tag.

      LFB Metadata - Metadata is used to communicate per-packet state
      from one LFB to another, but is not sent across the network.  The
      FE model defines how such metadata is identified, produced, and
      consumed by the LFBs, but not how the per-packet state is
      implemented within actual hardware.  Metadata is sent between the
      FE and the CE on redirect packets.

      ForCES Component - A ForCES Component is a well-defined, uniquely
      identifiable and addressable ForCES model building block.  A
      component has a 32-bit ID, name, type, and an optional synopsis
      description.  These are often referred to simply as components.
      LFB Component - An LFB component is a ForCES component that
      defines the Operational parameters of the LFBs that must be
      visible to the CEs.

      LFB Class Library - The LFB class library is a set of LFB classes
      that has been identified as the most common functions found in
      most FEs and hence should be defined first by the ForCES Working
      Group.


2.  Introduction

   The ForCES Model [RFC5812] presents a formal way to define FEs
   Logical Function Blocks (LFBs) using XML.  [RFC5812] has been
   published a litlte more than two years and current experience in its
   use has shown some room for adding new and changing existing modeling
   concepts.

   This document extends the ForCES Model by changing and adding new
   concepts.  These extensions do not require any changes on the ForCES
   protocol [RFC5810] as they are simply changes of the schema
   definition.  Additionally backward compatibility is ensured as xml
   libraries produced with the earlier schema are still valid with the
   new one.


3.  ForCES Model Extension overview

   The folowing extensions are considered:




Haleplidis                Expires April 4, 2013                 [Page 4]

Internet-Draft           ForCES Model Extension             October 2012


   1.  Allow complex metadata.

   2.  Allow optional default values for datatypes and metadata.

   3.  Change from mandatory to optional the frame produced in the
       output port of LFBs.

   4.  Strengthen the XML validation.


4.  Extensions

   Some of these extensions were product of the work done on the
   OpenFlow library [I-D.haleplidis-forces-openflow-lib] document.

4.1.  Complex Metadata

   Section 4.6.  (Element for Metadata Definitions) in the ForCES Model
   [RFC5812] limits the datatype use in metadata to only atomic types.

   With this extension, complex data types are also allowed,
   specifically structs and arrays as metadata.  A simple use case can
   be seen in the OpenFlow switch [OpenFlowSpec1.1] where exists the
   Action Set metadata which is an array.

4.2.  DataType and Metadata Optional Default Value

   In the original schema, default values can be defined only in
   datatypes defined inside LFB components.  However when it's a complex
   datatype or it's a refered datatype, using the default value field is
   difficult to be used.  Additionally there is no option in a complex
   datatype to use the default value field for only one component in the
   complex datatype.

   This extension allows optionally to add default values to atomic and
   typeref types, whether they are as simple or complex datatypes.  A
   simple use case would be to have a struct component where one of the
   components is a counter which the default value would be zero.  The
   same applies to metadata.

4.3.  Optional Frame Produced

   In the original schema, frame expected in LFB inputs is optional, but
   frame produced in LFB outputs is mandatory.  There is a case in the
   OpenFlow switch [OpenFlowSpec1.1] where the OpenFlow switch buffers
   the packet and sends only part of it to the controller with a Buffer
   ID as metadata.  In this case the input port of the Redirect LFB will
   not expect any packets but only metadata.  The LFB that performs the



Haleplidis                Expires April 4, 2013                 [Page 5]

Internet-Draft           ForCES Model Extension             October 2012


   buffering will only send metadata and not the packet.

4.4.  Strengthen XML Validation

   The following validation rules have been inserted in the original
   schema in [RFC5812]:

   1.  Each metadata ID must be unique.  This validation rule checks
       only within the xml file.

   2.  LFB Class IDs must be unique.  This validataion rule checks only
       within the xml file.

   3.  Component ID, Capability ID and Event Base ID must be unique per
       LFB.

   4.  Event IDs must be unique per LFB.

   5.  Special Values in Atomic datatypes must be unique per atomic
       datatype.


5.  XML Extension Schema for LFB Class Library Documents


<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
xmlns="urn:ietf:params:xml:ns:forces:lfbmodel:1.0"
xmlns:lfb="urn:ietf:params:xml:ns:forces:lfbmodel:1.0"
targetNamespace="urn:ietf:params:xml:ns:forces:lfbmodel:1.0"
elementFormDefault="qualified" attributeFormDefault="unqualified">
  <xsd:annotation>
    <xsd:documentation xml:lang="en">
        Schema for Defining LFB Classes and associated types (frames,
        data types for LFB attributes, and metadata).
        </xsd:documentation>
  </xsd:annotation>
  <xsd:element name="description" type="xsd:string"/>
  <xsd:element name="synopsis" type="xsd:string"/>
  <!-- Document root element: LFBLibrary -->
  <xsd:element name="LFBLibrary">
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element ref="description" minOccurs="0"/>
        <xsd:element name="load" type="loadType" minOccurs="0"
        maxOccurs="unbounded"/>
        <xsd:element name="frameDefs" type="frameDefsType"
        minOccurs="0"/>



Haleplidis                Expires April 4, 2013                 [Page 6]

Internet-Draft           ForCES Model Extension             October 2012


        <xsd:element name="dataTypeDefs" type="dataTypeDefsType"
        minOccurs="0"/>
        <xsd:element name="metadataDefs" type="metadataDefsType"
        minOccurs="0"/>
        <xsd:element name="LFBClassDefs" type="LFBClassDefsType"
        minOccurs="0"/>
      </xsd:sequence>
      <xsd:attribute name="provides" type="xsd:Name" use="required"/>
    </xsd:complexType>
    <!-- Uniqueness constraints -->
    <xsd:key name="frame">
      <xsd:selector xpath="lfb:frameDefs/lfb:frameDef"/>
      <xsd:field xpath="lfb:name"/>
    </xsd:key>
    <xsd:key name="dataType">
      <xsd:selector xpath="lfb:dataTypeDefs/lfb:dataTypeDef"/>
      <xsd:field xpath="lfb:name"/>
    </xsd:key>
    <xsd:key name="metadataDef">
      <xsd:selector xpath="lfb:metadataDefs/lfb:metadataDef"/>
      <xsd:field xpath="lfb:name"/>
    </xsd:key>
    <xsd:key name="metadataDefID">
      <xsd:selector xpath="lfb:metadataDefs/lfb:metadataDef"/>
      <xsd:field xpath="lfb:metadataID"/>
    </xsd:key>
    <xsd:key name="LFBClassDef">
      <xsd:selector xpath="lfb:LFBClassDefs/lfb:LFBClassDef"/>
      <xsd:field xpath="lfb:name"/>
    </xsd:key>
    <xsd:key name="LFBClassDefID">
      <xsd:selector xpath="lfb:LFBClassDefs/lfb:LFBClassDef"/>
      <xsd:field xpath="@LFBClassID"/>
    </xsd:key>
  </xsd:element>
  <xsd:complexType name="loadType">
    <xsd:attribute name="library" type="xsd:Name" use="required"/>
    <xsd:attribute name="location" type="xsd:anyURI" use="optional"/>
  </xsd:complexType>
  <xsd:complexType name="frameDefsType">
    <xsd:sequence>
      <xsd:element name="frameDef" maxOccurs="unbounded">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="name" type="xsd:NMTOKEN"/>
            <xsd:element ref="synopsis"/>
            <xsd:element ref="description" minOccurs="0"/>
          </xsd:sequence>



Haleplidis                Expires April 4, 2013                 [Page 7]

Internet-Draft           ForCES Model Extension             October 2012


        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="dataTypeDefsType">
    <xsd:sequence>
      <xsd:element name="dataTypeDef" maxOccurs="unbounded">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="name" type="xsd:NMTOKEN"/>
            <xsd:element name="derivedFrom" type="xsd:NMTOKEN"
            minOccurs="0"/>
            <xsd:element ref="synopsis"/>
            <xsd:element ref="description" minOccurs="0"/>
            <xsd:group ref="typeDeclarationGroup"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <!--
         Predefined (built-in) atomic data-types are:
             char, uchar, int16, uint16, int32, uint32, int64, uint64,
             string[N], string, byte[N], boolean, octetstring[N],
             float32, float64
      -->
  <xsd:group name="typeDeclarationGroup">
    <xsd:choice>
      <!-- Extension -->
      <xsd:sequence>
        <!-- /Extension -->
        <xsd:element name="typeRef" type="typeRefNMTOKEN"/>
        <!-- Extension -->
        <xsd:element name="DefaultValue" type="xsd:token"
        minOccurs="0"/>
      </xsd:sequence>
      <!-- /Extension -->
      <xsd:element name="atomic" type="atomicType"/>
      <xsd:element name="array" type="arrayType">
        <!-- Extension -->
        <!--declare keys to have unique IDs -->
        <xsd:key name="contentKeyID">
          <xsd:selector xpath="lfb:contentKey"/>
          <xsd:field xpath="@contentKeyID"/>
        </xsd:key>
        <!-- /Extension -->
      </xsd:element>
      <xsd:element name="struct" type="structType">



Haleplidis                Expires April 4, 2013                 [Page 8]

Internet-Draft           ForCES Model Extension             October 2012


        <!-- Extension -->
        <!-- key declaration to make componentIDs unique in a struct
            -->
        <xsd:key name="structComponentID">
          <xsd:selector xpath="lfb:component"/>
          <xsd:field xpath="@componentID"/>
        </xsd:key>
        <!-- /Extension -->
      </xsd:element>
      <xsd:element name="union" type="structType"/>
      <xsd:element name="alias" type="typeRefNMTOKEN"/>
    </xsd:choice>
  </xsd:group>
  <xsd:simpleType name="typeRefNMTOKEN">
    <xsd:restriction base="xsd:token">
      <xsd:pattern value="\c+"/>
      <xsd:pattern value="string\[\d+\]"/>
      <xsd:pattern value="byte\[\d+\]"/>
      <xsd:pattern value="octetstring\[\d+\]"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="atomicType">
    <xsd:sequence>
      <xsd:element name="baseType" type="typeRefNMTOKEN"/>
      <xsd:element name="rangeRestriction" type="rangeRestrictionType"
       minOccurs="0"/>
      <xsd:element name="specialValues" type="specialValuesType"
      minOccurs="0">
        <!-- Extension -->
        <xsd:key name="SpecialValue">
          <xsd:selector xpath="specialValue"/>
          <xsd:field xpath="@value"/>
        </xsd:key>
        <!-- /Extension -->
      </xsd:element>
      <!-- Extension -->
      <xsd:element name="defaultValue" type="xsd:token" minOccurs="0"/>
      <!-- /Extension -->
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="rangeRestrictionType">
    <xsd:sequence>
      <xsd:element name="allowedRange" maxOccurs="unbounded">
        <xsd:complexType>
          <xsd:attribute name="min" type="xsd:integer" use="required"/>
          <xsd:attribute name="max" type="xsd:integer" use="required"/>
        </xsd:complexType>
      </xsd:element>



Haleplidis                Expires April 4, 2013                 [Page 9]

Internet-Draft           ForCES Model Extension             October 2012


    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="specialValuesType">
    <xsd:sequence>
      <xsd:element name="specialValue" maxOccurs="unbounded">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="name" type="xsd:NMTOKEN"/>
            <xsd:element ref="synopsis"/>
          </xsd:sequence>
          <xsd:attribute name="value" type="xsd:token"/>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="arrayType">
    <xsd:sequence>
      <xsd:group ref="typeDeclarationGroup"/>
      <xsd:element name="contentKey" minOccurs="0"
      maxOccurs="unbounded">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="contentKeyField" type="xsd:string"
             maxOccurs="unbounded"/>
          </xsd:sequence>
          <xsd:attribute name="contentKeyID" type="xsd:integer"
           use="required"/>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="type" use="optional" default="variable-size">
      <xsd:simpleType>
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="fixed-size"/>
          <xsd:enumeration value="variable-size"/>
        </xsd:restriction>
      </xsd:simpleType>
    </xsd:attribute>
    <xsd:attribute name="length" type="xsd:integer" use="optional"/>
    <xsd:attribute name="maxLength" type="xsd:integer" use="optional"/>
  </xsd:complexType>
  <xsd:complexType name="structType">
    <xsd:sequence>
      <xsd:element name="derivedFrom" type="typeRefNMTOKEN"
       minOccurs="0"/>
      <xsd:element name="component" maxOccurs="unbounded">
        <xsd:complexType>
          <xsd:sequence>



Haleplidis                Expires April 4, 2013                [Page 10]

Internet-Draft           ForCES Model Extension             October 2012


            <xsd:element name="name" type="xsd:NMTOKEN"/>
            <xsd:element ref="synopsis"/>
            <xsd:element ref="description" minOccurs="0"/>
            <xsd:element name="optional" minOccurs="0"/>
            <xsd:group ref="typeDeclarationGroup"/>
          </xsd:sequence>
          <xsd:attribute name="componentID" type="xsd:unsignedInt"
           use="required"/>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="metadataDefsType">
    <xsd:sequence>
      <xsd:element name="metadataDef" maxOccurs="unbounded">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="name" type="xsd:NMTOKEN"/>
            <xsd:element ref="synopsis"/>
            <xsd:element name="metadataID" type="xsd:integer"/>
            <xsd:element ref="description" minOccurs="0"/>
            <xsd:choice>
              <!-- Extension -->
              <xsd:sequence>
                <!-- /Extension -->
                <xsd:element name="typeRef" type="typeRefNMTOKEN"/>
                <!-- Extension -->
                <xsd:element name="DefaultValue" type="xsd:token"
                 minOccurs="0"/>
              </xsd:sequence>
              <!-- /Extension -->
              <xsd:element name="atomic" type="atomicType"/>
              <xsd:element name="array" type="arrayType">
                <!-- Extension -->
                <!--declare keys to have unique IDs -->
                <xsd:key name="contentKeyID1">
                  <xsd:selector xpath="lfb:contentKey"/>
                  <xsd:field xpath="@contentKeyID"/>
                </xsd:key>
                <!-- /Extension -->
              </xsd:element>
              <xsd:element name="struct" type="structType">
                <!-- Extension -->
                <!-- key declaration to make componentIDs unique in
                 a struct -->
                <xsd:key name="structComponentID1">
                  <xsd:selector xpath="lfb:component"/>
                  <xsd:field xpath="@componentID"/>



Haleplidis                Expires April 4, 2013                [Page 11]

Internet-Draft           ForCES Model Extension             October 2012


                </xsd:key>
                <!-- /Extension -->
              </xsd:element>
            </xsd:choice>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="LFBClassDefsType">
    <xsd:sequence>
      <xsd:element name="LFBClassDef" maxOccurs="unbounded">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="name" type="xsd:NMTOKEN"/>
            <xsd:element ref="synopsis"/>
            <xsd:element name="version" type="versionType"/>
            <xsd:element name="derivedFrom" type="xsd:NMTOKEN"
             minOccurs="0"/>
            <xsd:element name="inputPorts" type="inputPortsType"
             minOccurs="0"/>
            <xsd:element name="outputPorts" type="outputPortsType"
             minOccurs="0"/>
            <xsd:element name="components" type="LFBComponentsType"
             minOccurs="0"/>
            <xsd:element name="capabilities" type="LFBCapabilitiesType"
             minOccurs="0"/>
            <xsd:element name="events" type="eventsType" minOccurs="0"/>
            <xsd:element ref="description" minOccurs="0"/>
          </xsd:sequence>
          <xsd:attribute name="LFBClassID" type="xsd:unsignedInt"
           use="required"/>
        </xsd:complexType>
        <!-- Key constraint to ensure unique attribute names within
                 a class:
            -->
        <xsd:key name="components">
          <xsd:selector xpath="lfb:components/lfb:component"/>
          <xsd:field xpath="lfb:name"/>
        </xsd:key>
        <xsd:key name="capabilities">
          <xsd:selector xpath="lfb:capabilities/lfb:capability"/>
          <xsd:field xpath="lfb:name"/>
        </xsd:key>
        <xsd:key name="events">
          <xsd:selector xpath="lfb:events/lfb:event"/>
          <xsd:field xpath="lfb:name"/>
        </xsd:key>



Haleplidis                Expires April 4, 2013                [Page 12]

Internet-Draft           ForCES Model Extension             October 2012


        <xsd:key name="eventsIDs">
          <xsd:selector xpath="lfb:events/lfb:event"/>
          <xsd:field xpath="@eventID"/>
        </xsd:key>
        <xsd:key name="componentIDs">
          <xsd:selector xpath="lfb:components/lfb:component"/>
          <xsd:field xpath="@componentID"/>
        </xsd:key>
        <xsd:key name="capabilityIDs">
          <xsd:selector xpath="lfb:capabilities/lfb:capability"/>
          <xsd:field xpath="@componentID"/>
        </xsd:key>
        <xsd:key name="ComponentCapabilityComponentIDUniqueness">
          <xsd:selector xpath="lfb:components/lfb:component|
          lfb:capabilities/lfb:capability|lfb:events"/>
          <xsd:field xpath="@componentID|@baseID"/>
        </xsd:key>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:simpleType name="versionType">
    <xsd:restriction base="xsd:NMTOKEN">
      <xsd:pattern value="[1-9][0-9]*\.([1-9][0-9]*|0)"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="inputPortsType">
    <xsd:sequence>
      <xsd:element name="inputPort" type="inputPortType"
       maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="inputPortType">
    <xsd:sequence>
      <xsd:element name="name" type="xsd:NMTOKEN"/>
      <xsd:element ref="synopsis"/>
      <xsd:element name="expectation" type="portExpectationType"/>
      <xsd:element ref="description" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="group" type="xsd:boolean" use="optional"
     default="0"/>
  </xsd:complexType>
  <xsd:complexType name="portExpectationType">
    <xsd:sequence>
      <xsd:element name="frameExpected" minOccurs="0">
        <xsd:complexType>
          <xsd:sequence>
            <!-- ref must refer to a name of a defined frame type -->
            <xsd:element name="ref" type="xsd:string"



Haleplidis                Expires April 4, 2013                [Page 13]

Internet-Draft           ForCES Model Extension             October 2012


             maxOccurs="unbounded"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="metadataExpected" minOccurs="0">
        <xsd:complexType>
          <xsd:choice maxOccurs="unbounded">
            <!-- ref must refer to a name of a defined metadata -->
            <xsd:element name="ref" type="metadataInputRefType"/>
            <xsd:element name="one-of" type="metadataInputChoiceType"/>
          </xsd:choice>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="metadataInputChoiceType">
    <xsd:choice minOccurs="2" maxOccurs="unbounded">
      <!-- ref must refer to a name of a defined metadata -->
      <xsd:element name="ref" type="xsd:NMTOKEN"/>
      <xsd:element name="one-of" type="metadataInputChoiceType"/>
      <xsd:element name="metadataSet" type="metadataInputSetType"/>
    </xsd:choice>
  </xsd:complexType>
  <xsd:complexType name="metadataInputSetType">
    <xsd:choice minOccurs="2" maxOccurs="unbounded">
      <!-- ref must refer to a name of a defined metadata -->
      <xsd:element name="ref" type="metadataInputRefType"/>
      <xsd:element name="one-of" type="metadataInputChoiceType"/>
    </xsd:choice>
  </xsd:complexType>
  <xsd:complexType name="metadataInputRefType">
    <xsd:simpleContent>
      <xsd:extension base="xsd:NMTOKEN">
        <xsd:attribute name="dependency" use="optional"
         default="required">
          <xsd:simpleType>
            <xsd:restriction base="xsd:string">
              <xsd:enumeration value="required"/>
              <xsd:enumeration value="optional"/>
            </xsd:restriction>
          </xsd:simpleType>
        </xsd:attribute>
        <xsd:attribute name="defaultValue" type="xsd:token"
         use="optional"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="outputPortsType">



Haleplidis                Expires April 4, 2013                [Page 14]

Internet-Draft           ForCES Model Extension             October 2012


    <xsd:sequence>
      <xsd:element name="outputPort" type="outputPortType"
       maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="outputPortType">
    <xsd:sequence>
      <xsd:element name="name" type="xsd:NMTOKEN"/>
      <xsd:element ref="synopsis"/>
      <xsd:element name="product" type="portProductType"/>
      <xsd:element ref="description" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="group" type="xsd:boolean" use="optional"
     default="0"/>
  </xsd:complexType>
  <xsd:complexType name="portProductType">
    <xsd:sequence>
      <xsd:element name="frameProduced" minOccurs="0">
        <xsd:complexType>
          <xsd:sequence>
            <!-- ref must refer to a name of a defined frame type
                   -->
            <xsd:element name="ref" type="xsd:NMTOKEN"
             maxOccurs="unbounded"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="metadataProduced" minOccurs="0">
        <xsd:complexType>
          <xsd:choice maxOccurs="unbounded">
            <!-- ref must refer to a name of a defined metadata
                -->
            <xsd:element name="ref" type="metadataOutputRefType"/>
            <xsd:element name="one-of"
             type="metadataOutputChoiceType"/>
          </xsd:choice>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="metadataOutputChoiceType">
    <xsd:choice minOccurs="2" maxOccurs="unbounded">
      <!-- ref must refer to a name of a defined metadata -->
      <xsd:element name="ref" type="xsd:NMTOKEN"/>
      <xsd:element name="one-of" type="metadataOutputChoiceType"/>
      <xsd:element name="metadataSet" type="metadataOutputSetType"/>
    </xsd:choice>
  </xsd:complexType>



Haleplidis                Expires April 4, 2013                [Page 15]

Internet-Draft           ForCES Model Extension             October 2012


  <xsd:complexType name="metadataOutputSetType">
    <xsd:choice minOccurs="2" maxOccurs="unbounded">
      <!-- ref must refer to a name of a defined metadata -->
      <xsd:element name="ref" type="metadataOutputRefType"/>
      <xsd:element name="one-of" type="metadataOutputChoiceType"/>
    </xsd:choice>
  </xsd:complexType>
  <xsd:complexType name="metadataOutputRefType">
    <xsd:simpleContent>
      <xsd:extension base="xsd:NMTOKEN">
        <xsd:attribute name="availability" use="optional"
         default="unconditional">
          <xsd:simpleType>
            <xsd:restriction base="xsd:string">
              <xsd:enumeration value="unconditional"/>
              <xsd:enumeration value="conditional"/>
            </xsd:restriction>
          </xsd:simpleType>
        </xsd:attribute>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="LFBComponentsType">
    <xsd:sequence>
      <xsd:element name="component" maxOccurs="unbounded">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="name" type="xsd:NMTOKEN"/>
            <xsd:element ref="synopsis"/>
            <xsd:element ref="description" minOccurs="0"/>
            <xsd:element name="optional" minOccurs="0"/>
            <xsd:group ref="typeDeclarationGroup"/>
            <xsd:element name="defaultValue" type="xsd:token"
            minOccurs="0"/>
          </xsd:sequence>
          <xsd:attribute name="access" use="optional"
           default="read-write">
            <xsd:simpleType>
              <xsd:list itemType="accessModeType"/>
            </xsd:simpleType>
          </xsd:attribute>
          <xsd:attribute name="componentID" type="xsd:unsignedInt"
           use="required"/>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:simpleType name="accessModeType">



Haleplidis                Expires April 4, 2013                [Page 16]

Internet-Draft           ForCES Model Extension             October 2012


    <xsd:restriction base="xsd:NMTOKEN">
      <xsd:enumeration value="read-only"/>
      <xsd:enumeration value="read-write"/>
      <xsd:enumeration value="write-only"/>
      <xsd:enumeration value="read-reset"/>
      <xsd:enumeration value="trigger-only"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="LFBCapabilitiesType">
    <xsd:sequence>
      <xsd:element name="capability" maxOccurs="unbounded">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="name" type="xsd:NMTOKEN"/>
            <xsd:element ref="synopsis"/>
            <xsd:element ref="description" minOccurs="0"/>
            <xsd:element name="optional" minOccurs="0"/>
            <xsd:group ref="typeDeclarationGroup"/>
          </xsd:sequence>
          <xsd:attribute name="componentID" type="xsd:integer"
           use="required"/>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="eventsType">
    <xsd:sequence>
      <xsd:element name="event" maxOccurs="unbounded">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="name" type="xsd:NMTOKEN"/>
            <xsd:element ref="synopsis"/>
            <xsd:element name="eventTarget" type="eventPathType"/>
            <xsd:element ref="eventCondition"/>
            <xsd:element name="eventReports" type="eventReportsType"
             minOccurs="0"/>
            <xsd:element ref="description" minOccurs="0"/>
          </xsd:sequence>
          <xsd:attribute name="eventID" type="xsd:integer"
          use="required"/>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="baseID" type="xsd:integer" use="optional"/>
  </xsd:complexType>
  <!-- the substitution group for the event conditions -->
  <xsd:element name="eventCondition" abstract="true"/>
  <xsd:element name="eventCreated" substitutionGroup="eventCondition"/>



Haleplidis                Expires April 4, 2013                [Page 17]

Internet-Draft           ForCES Model Extension             October 2012


  <xsd:element name="eventDeleted" substitutionGroup="eventCondition"/>
  <xsd:element name="eventChanged" substitutionGroup="eventCondition"/>
  <xsd:element name="eventGreaterThan"
   substitutionGroup="eventCondition"/>
  <xsd:element name="eventLessThan"
   substitutionGroup="eventCondition"/>
  <xsd:complexType name="eventPathType">
    <xsd:sequence>
      <xsd:element ref="eventPathPart" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <!-- the substitution group for the event path parts -->
  <xsd:element name="eventPathPart" type="xsd:string" abstract="true"/>
  <xsd:element name="eventField" type="xsd:string"
   substitutionGroup="eventPathPart"/>
  <xsd:element name="eventSubscript" type="xsd:string"
   substitutionGroup="eventPathPart"/>
  <xsd:complexType name="eventReportsType">
    <xsd:sequence>
      <xsd:element name="eventReport" type="eventPathType"
       maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:simpleType name="booleanType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="0"/>
      <xsd:enumeration value="1"/>
    </xsd:restriction>
  </xsd:simpleType>
</xsd:schema>

                           OpenFlow XML Library


6.  Acknowledgements

   TBD


7.  IANA Considerations

   This memo includes no request to IANA.


8.  Security Considerations

   TBD




Haleplidis                Expires April 4, 2013                [Page 18]

Internet-Draft           ForCES Model Extension             October 2012


9.  References

9.1.  Normative References

   [I-D.haleplidis-forces-openflow-lib]
              Haleplidis, E., Cherkaoui, O., Hares, S., and W. Wang,
              "Forwarding and Control Element Separation (ForCES)
              OpenFlow Model Library",
              draft-haleplidis-forces-openflow-lib-01 (work in
              progress), July 2012.

   [OpenFlowSpec1.1]
              http://www.OpenFlow.org/, "The OpenFlow 1.1
              Specification.", <http://www.OpenFlow.org/documents/
              OpenFlow-spec-v1.1.0.pdf>.

   [RFC5810]  Doria, A., Hadi Salim, J., Haas, R., Khosravi, H., Wang,
              W., Dong, L., Gopal, R., and J. Halpern, "Forwarding and
              Control Element Separation (ForCES) Protocol
              Specification", RFC 5810, March 2010.

   [RFC5812]  Halpern, J. and J. Hadi Salim, "Forwarding and Control
              Element Separation (ForCES) Forwarding Element Model",
              RFC 5812, March 2010.

9.2.  Informative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.


Author's Address

   Evangelos Haleplidis
   University of Patras
   Department of Electrical and Computer Engineering
   Patras,   26500
   Greece

   Email: ehalep@ece.upatras.gr











Haleplidis                Expires April 4, 2013                [Page 19]

