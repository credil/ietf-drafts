<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>
<rfc category="std" docName="draft-cui-softwire-b4-translated-ds-lite-09"
     ipr="trust200902">
  <front>
    <title abbrev="B4-translated DS-Lite">Lightweight 4over6: An Extension to
    the DS-Lite Architecture</title>

    <author fullname="Yong Cui" initials="Y.C" surname="Cui">
      <organization>Tsinghua University</organization>

      <address>
        <postal>
          <street>Department of Computer Science, Tsinghua University</street>

          <city>Beijing</city>

          <code>100084</code>

          <country>P.R.China</country>
        </postal>

        <phone>+86-10-62603059</phone>

        <email>yong@csnet1.cs.tsinghua.edu.cn</email>
      </address>
    </author>

    <author fullname="Qiong Sun" initials="Q.S" surname="Sun">
      <organization>China Telecom</organization>

      <address>
        <postal>
          <street>Room 708, No.118, Xizhimennei Street</street>

          <city>Beijing</city>

          <code>100035</code>

          <country>P.R.China</country>
        </postal>

        <phone>+86-10-58552936</phone>

        <email>sunqiong@ctbri.com.cn</email>
      </address>
    </author>

    <author fullname="Mohamed Boucadair" initials="M.B" surname="Boucadair">
      <organization>France Telecom</organization>

      <address>
        <postal>
          <city>Rennes</city>

          <code>35000</code>

          <country>France</country>
        </postal>

        <email>mohamed.boucadair@orange.com</email>
      </address>
    </author>

    <author fullname="Tina Tsou" initials="T.T" surname="Tsou">
      <organization>Huawei Technologies</organization>

      <address>
        <postal>
          <street>2330 Central Expressway</street>

          <city>Santa Clara</city>

          <region>CA</region>

          <code>95050</code>

          <country>USA</country>
        </postal>

        <phone>+1-408-330-4424</phone>

        <email>tena@huawei.com</email>
      </address>
    </author>

    <author fullname="Yiu L. Lee" initials="Y" surname="Lee">
      <organization>Comcast</organization>

      <address>
        <postal>
          <street>One Comcast Center</street>

          <city>Philadelphia</city>

          <region>PA</region>

          <code>19103</code>

          <country>USA</country>
        </postal>

        <email>yiu_lee@cable.comcast.com</email>
      </address>
    </author>

    <author fullname="Ian Farrer" initials="I.F" surname="Farrer">
      <organization>Deutsche Telekom AG</organization>

      <address>
        <postal>
          <street>GTN-FM4,Landgrabenweg 151</street>

          <city>Bonn</city>

          <region>NRW</region>

          <code>53227</code>

          <country>Germany</country>
        </postal>

        <email>ian.farrer@telekom.de</email>
      </address>
    </author>

    <date day="22" month="October" year="2012"/>

    <workgroup>Softwire Working Group</workgroup>

    <abstract>
      <t>DS-Lite <xref target="RFC6333"/> describes an architecture for
      transporting IPv4 packets over an IPv6 network. This document specifies
      an extension to DS-Lite called Lightweight 4over6 which moves the
      Network Address Translation function from the DS-Lite AFTR to the B4,
      removing the requirement for a Carrier Grade NAT function in the AFTR.
      This reduces the amount of centralized state that must be held to a
      per-subscriber level. In order to delegate the NAPT function and make
      IPv4 Address sharing possible, port-restricted IPv4 addresses are
      allocated to the B4s.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>Dual-Stack Lite (DS-Lite, <xref target="RFC6333"/>) defines a model
      for providing IPv4 access over an IPv6 network using two well-known
      technologies: IP in IP <xref target="RFC2473"/> and Network Address
      Translation (NAT). The DS-Lite architecture defines two major functional
      elements as follows:</t>

      <t><list hangIndent="34" style="hanging">
          <t hangText="Basic Bridging BroadBand element:">A B4 element is a
          function implemented on a dual-stack capable node, either a directly
          connected device or a CPE, that creates a tunnel to an AFTR.</t>

          <t hangText="Address Family Transition Router:">An AFTR element is
          the combination of an IPv4-in-IPv6 tunnel endpoint and an IPv4-IPv4
          NAT implemented on the same node.</t>
        </list>As the AFTR performs the centralized NAT44 function, it
      dynamically assigns public IPv4 addresses and ports to requesting host's
      traffic (as described in <xref target="RFC3022"/>). To achieve this, the
      AFTR must dynamically maintain per-flow state in the form of active NAPT
      sessions. For service providers with a large number of B4 clients, the
      size and associated costs for scaling the AFTR can quickly become
      prohibitive. It can also place a large NAPT logging overhead upon the
      service provider in countries where legal requirements mandate this.</t>

      <t>This document describes a mechanism called Lightweight 4 over 6
      (lw4o6), which provides a solution for these problems. By relocating the
      NAPT functionality from the centralized AFTR to the distributed B4s, a
      number of benefits can be realised:<list style="symbols">
          <t>NAPT44 functionality is already widely supported and used in
          today's CPE devices. Lw4o6 uses this to provide
          private&lt;-&gt;public NAPT44, meaning that the service provider
          does not need a centralized NAT44 function.</t>

          <t>The amount of state that must be maintained centrally in the AFTR
          can be reduced from per-flow to per-subscriber. This reduces the
          amount of resources (memory and processing power) necessary in the
          AFTR.</t>

          <t>The reduction of maintained state results in a greatly reduced
          logging overhead on the service provider.</t>
        </list></t>

      <t>Operator's IPv6 and IPv4 addressing architectures remain independent
      of each other as in DS-Lite. Therefore, flexible IPv4/IPv6 addressing
      schemes can be deployed.</t>

      <t>Lightweight 4over6 provides a solution for a hub-and-spoke softwire
      architecture only. It does not offer direct, meshed IPv4 connectivity
      between subscribers without packets traversing the AFTR. If this type of
      meshed interconnectivity is required, <xref
      target="I-D.ietf-softwire-map"/> provides a suitable solution.</t>

      <t>The tunneling mechanism remains the same for DS-Lite and Lightweight
      4over6. This document describes the changes to DS-Lite that are
      necessary to implement Lightweight 4over6. These changes mainly concern
      the configuration parameters and provisioning method necessary for the
      functional elements.</t>

      <t>This document is an extended case, which covers address sharing for
      <xref target="I-D.ietf-softwire-public-4over6"/>. It is also a variant
      of A+P called Binding Table Mode (see Section 4.4 of <xref
      target="RFC6346"/>).</t>

      <t>This document focuses on architectural considerations and
      particularly on the expected behavior of the involved functional
      elements and their interfaces. Deployment-specific issues are discussed
      in a companion document. As such, discussions about redundancy and
      provisioning policy are out of scope.</t>
    </section>

    <section anchor="conventions" title="Conventions">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"/>.</t>
    </section>

    <section title="Terminology">
      <t>The document defines the following terms:<list hangIndent="30"
          style="hanging">
          <t hangText="Lightweight 4over6 (lw4o6):">Lightweight 4over6 is an
          IPv4-over-IPv6 hub and spoke mechanism, which extends DS-Lite by
          moving the IPv4 translation (NAPT44) function from the AFTR to the
          B4.</t>

          <t hangText="Lightweight B4 (lwB4):">A B4 element (Basic Bridging
          BroadBand element <xref target="RFC6333"/>), which supports
          Lightweight 4over6 extensions. An lwB4 is a function implemented on
          a dual-stack capable node, (either a directly connected device or a
          CPE), that supports port-restricted IPv4 address allocation,
          implements NAPT44 functionality and creates a tunnel to an
          lwAFTR</t>

          <t hangText="Lightweight AFTR (lwAFTR):">An AFTR element (Address
          Family Transition Router element <xref target="RFC6333"/>), which
          supports Lightweight 4over6 extension. An lwAFTR is an IPv4-in-IPv6
          tunnel endpoint which maintains per-subscriber address binding only
          and does not perform a NAPT44 function.</t>

          <t hangText="Restricted Port-Set:">A non-overlapping range of
          allowed external ports allocated to the lwB4 to use for NAPT44.
          Source ports of IPv4 packets sent by the B4 must belong to the
          assigned port-set. The port set is used for all port aware IP
          protocols (TCP, UDP, SCTP etc.)</t>

          <t hangText="Port-restricted IPv4 Address:">A public IPv4 address
          with a restricted port-set. In Lightweight 4over6, multiple B4s may
          share the same IPv4 address, however, their port-sets must be
          non-overlapping.</t>
        </list></t>

      <t>Throughout the remainder of this document, the terms B4/AFTR should
      be understood to refer specifically to a DS-Lite implementation. The
      terms lwB4/lwAFTR refer to a Lightweight 4over6 implementation.</t>

      <t/>
    </section>

    <section title="Lightweight 4over6 Architecture">
      <t>The Lightweight 4over6 architecture is functionally similar to
      DS-Lite. lwB4s and an lwAFTR are connected through an IPv6-enabled
      network. Both approaches use an IPv4-in-IPv6 encapsulation scheme to
      deliver IPv4 connectivity services. The following figure shows the data
      plane with main functional change between DS-Lite and lw4o6:</t>

      <t><figure>
          <artwork><![CDATA[
                                               
+--------+   +---------+   IPv4-in-IPv6    +------+      +-------------+
|IPv4 LAN|---|lwB4/NAPT|===================|lwAFTR|------|IPv4 Internet|
+--------+   +---------+                   +------+      +-------------+
                    ^                          |
                    +--------------------------+
                      NAPT function relocated
                         to lwB4 in lw4o6

]]></artwork>

          <postamble>Figure 1 Lightweight 4over6 Data Plane
          Overview</postamble>
        </figure></t>

      <t>There are three main components in the Lightweight 4over6
      architecture:</t>

      <t><list style="symbols">
          <t>The lwB4, which performs the NAPT function and
          encapsulation/de-capsulation IPv4/IPv6.</t>

          <t>The lwAFTR, which performs the encapsulation/de-capsulation
          IPv4/IPv6.</t>

          <t>The provisioning system, which tells the lwB4 which IPv4 address
          and port set to use.</t>
        </list></t>

      <t>The lwB4 differs from a regular B4 in that it now performs the NAPT
      functionality. This means that it needs to be provisioned with the
      public IPv4 address and port set it is allowed to use. This information
      is provided though a provisioning mechanism such as DHCP, PCP or
      TR-69.</t>

      <t>The lwAFTR needs to know the binding between the IPv6 address of each
      subscriber and the IPv4 address and port set allocated to that
      subscriber. This information is used to perform ingress filtering
      upstream and encapsulation downstream. Note that this is per-subscriber
      state as opposed to per-flow state in the regular AFTR case.</t>

      <t>The consequence of this architecture is that the information
      maintained by the provisioning mechanism and the one maintained by the
      lwAFTR MUST be synchronized (See figure 2). The details of this
      synchronization depend on the exact provisioning mechanism and will be
      discussed in a companion draft.</t>

      <t><figure>
          <artwork><![CDATA[
                         +------------+
                 /-------|Provisioning|<-------\
                 |       +------------+        |
                 |                             |
                 V                             V
+--------+   +---------+    IPv4/IPv6      +------+      +-------------+
|IPv4 LAN|---|lwB4/NAPT|===================|lwAFTR|------|IPv4 Internet|
+--------+   +---------+                   +------+      +-------------+
        ]]></artwork>

          <postamble>Figure 2 Lightweight 4over6 Provisioning
          Synchronization</postamble>
        </figure></t>
    </section>

    <section title="Lightweight B4 Behavior">
      <section title="Lightweight B4 Provisioning">
        <t>With DS-Lite, the B4 element only needs to be configured with a
        single DS-Lite specific parameter so that it can set up the softwire
        (the IPv6 address of the AFTR). Its IPv4 address can be taken from the
        well-known range 192.0.0.0/29.</t>

        <t>In lw4o6, due to the distributed nature of the NAPT function, a
        number of lw4o6 specific configuration parameters must be provisioned
        to the lwB4. These are:</t>

        <t><list style="symbols">
            <t>IPv6 Address for the lwAFTR (as in DS-Lite)</t>

            <t>IPv4 External (Public) Address for NAPT44</t>

            <t>Restricted port-set to use for NAPT44</t>
          </list></t>

        <t>An IPv6 address from an assigned prefix is also required for the
        lwB4 to use as the encapsulation source address for the softwire.
        Normally, this is the lwB4's globally unique WAN interface address
        which can be obtained via an IPv6 address allocation procedure such as
        SLAAC, DHCPv6 or manual configuration.</t>

        <t>In the event that the lwB4's encapsulation source address is
        changed for any reason (such as the DHCPv6 lease expiring), the lwB4's
        dynamic provisioning process must be re-initiated.</t>

        <t>For learning the IPv6 address of the lwAFTR, the lwB4 SHOULD
        implement the method described in section 5.4 of <xref
        target="RFC6333"/> and implement the DHCPv6 option defined in <xref
        target="RFC6334"/>. Other methods of learning this address are also
        possible.</t>

        <t>An lwB4 MUST support dynamic port-restricted IPv4 address
        provisioning (unlike a DS-Lite B4). Several different mechanisms can
        be used for provisioning the lwB4 with its port-restricted IPv4
        address such as: DHCPv4, DHCPv6, PCP, PPP and IPCP. Some alternatives
        are mentioned in Appendix A of this document.</t>

        <t>In this document, it is RECOMMENDED that the DHCPv4 provisioning
        method is implemented as it is widely deployed in services providers
        networks and supports all IPv4 and IPv6 addressing models. The DHCPv4
        based provisioning model is described in section 7 of this
        document.</t>

        <t>In the event that the lwB4 receives and ICMPv6 error message (type
        1, code 5) originating from the lwAFTR, the lwB4 SHOULD interpret this
        to mean that no matching entry in the lwAFTR's binding table has been
        found. The lwB4 MAY then re-initiate the dynamic port-restricted
        provisioning process. The lwB4's re-initiation policy SHOULD be
        configurable.</t>

        <t>The DNS considerations described in Section 5.5 and Section 6.4 of
        <xref target="RFC6333"/> SHOULD be followed.</t>
      </section>

      <section title="Lightweight B4 Data Plane Behavior">
        <t>Several sections of <xref target="RFC6333"/> provide background
        information on the B4's data plane functionality and MUST be
        implemented by the lwB4 as they are common to both solutions. The
        relevant sections are:</t>

        <t><list hangIndent="34" style="hanging">
            <t hangText="5.2. Encapsulation">Covering encapsulation and
            de-capsulation of tunneled traffic</t>

            <t hangText="5.3. Fragmentation and Reassembly">Covering MTU and
            fragmentation considerations (referencing <xref
            target="RFC2473"/>)</t>

            <t hangText="7.1. Tunneling">Covering tunneling and traffic class
            mapping between IPv4 and IPv6 (referencing <xref
            target="RFC2473"/> and <xref target="RFC4213"/>)</t>
          </list></t>

        <t>The lwB4 element performs IPv4 address translation (NAPT44) as well
        as encapsulation and de-capsulation. It runs standard NAPT44 <xref
        target="RFC3022"/> using the allocated port-restricted address as its
        external IPv4 address and port numbers.</t>

        <t>Internally connected hosts source IPv4 packets with an <xref
        target="RFC1918"/> address. When the lwB4 receives such an IPv4
        packet, it performs a NAPT44 function on the source address and port
        by using the public IPv4 address and a port number from the allocated
        port-set. Then, it encapsulates the packet with an IPv6 header. The
        destination IPv6 address is the lwAFTR's IPv6 address and the source
        IPv6 address is the lwB4's IPv6 tunnel endpoint address. Finally, the
        lwB4 forwards the encapsulated packet to the configured lwAFTR.</t>

        <t>When the lwB4 receives an IPv4-in-IPv6 packet from the lwAFTR, it
        de-capsulates the IPv4 packet from the IPv6 packet. Then, it performs
        NAPT44 translation on the destination address and port, based on the
        available information in its local NAPT44 table.</t>

        <t>The lwB4 is responsible for performing ALG functions (e.g., SIP,
        FTP), and other NAPT traversal mechanisms (e.g., UPnP, NAPT-PMP,
        manual binding configuration, PCP) for the internal hosts. This
        requirement is typical for NAPT44 gateways available today.</t>

        <t>It is possible that a lwB4 is co-located in a host. In this case,
        the functions of NAPT44 and encapsulation/de-capsulation are
        implemented inside the host.</t>

        <t>If the lwB4 is provisioned with a full port-set (e.g. all ports
        from 0 to 65535), then it SHOULD behave as a 4 over 6 Initiator as
        described in <xref target="I-D.ietf-softwire-public-4over6"/>.</t>
      </section>
    </section>

    <section title="Lightweight AFTR Behavior">
      <section title="Binding Table Maintenance">
        <t>The lwAFTR maintains an address binding table containing the
        binding between the lwB4's IPv6 address, the allocated IPv4 address
        and restricted port-set. Unlike the DS-Lite extended binding table
        defined in section 6.6 of <xref target="RFC6333"/> which is a 5-tuple
        NAT table, each entry in the Lightweight 4over6 binding table contains
        the following 3-tuples:</t>

        <t><list style="symbols">
            <t>IPv6 Address for a single lwB4</t>

            <t>Public IPv4 Address</t>

            <t>Restricted port-set</t>
          </list>The entry has two functions: the IPv6 encapsulation of
        inbound IPv4 packets destined to the lwB4 and the validation of
        outbound IPv4-in-IPv6 packets received from the lwB4 for
        de-capsulation.</t>

        <t>The lwAFTR does not perform NAPT and so does not need session
        entries.</t>

        <t>The lwAFTR MUST synchronize the binding information with the
        port-restricted address provisioning process. If the lwAFTR does not
        participate in the port-restricted address provisioning process, the
        binding MUST be synchronized through other methods (e.g. out-of-band
        static update).</t>

        <t>If the lwAFTR participates in the port-restricted provisioning
        process, then its binding table MUST be created as part of this
        process.</t>

        <t>For all provisioning processes, the lifetime of binding table
        entries MUST be synchronized with the lifetime of address
        allocations.</t>

        <t><vspace blankLines="1"/></t>
      </section>

      <section title="lwAFTR Data Plane Behavior">
        <t>Several sections of <xref target="RFC6333"/> provide background
        information on the AFTR's data plane functionality and MUST be
        implemented by the lwAFTR as they are common to both solutions. The
        relevant sections are:</t>

        <t><list hangIndent="34" style="hanging">
            <t hangText="6.2. Encapsulation">Covering encapsulation and
            de-capsulation of tunneled traffic</t>

            <t hangText="6.3. Fragmentation and Reassembly">Fragmentation and
            re-assembly considerations (referencing <xref
            target="RFC2473"/>)</t>

            <t hangText="7.1. Tunneling">Covering tunneling and traffic class
            mapping between IPv4 and IPv6 (referencing <xref
            target="RFC2473"/> and <xref target="RFC4213"/>)</t>
          </list></t>

        <t>When the lwAFTR receives an IPv4-in-IPv6 packet from an lwB4, it
        de-capsulates the IPv6 header and verifies the source addresses and
        port in the binding table. If both the source IPv4 and IPv6 addresses
        match a single entry in the binding table and the source port in the
        allowed port-set for that entry, the lwAFTR forwards the packet to the
        IPv4 destination.</t>

        <t>If no match is found (e.g., no matching IPv4 address entry, port
        out of range, etc.), the lwAFTR MUST discard the packet. An ICMPv6
        type 1, code 5 (source address failed ingress/egress policy) error
        message MAY be sent back to the requesting lwB4. The ICMP policy
        SHOULD be configurable.</t>

        <t>When the lwAFTR receives an inbound IPv4 packet, it uses the IPv4
        destination address and port to lookup the destination lwB4's IPv6
        address in its binding table. If a match is found, the lwAFTR
        encapsulates the IPv4 packet. The source is the lwAFTR's IPv6 address
        and the destination is the lwB4's IPv6 address from the matched entry.
        Then, the lwAFTR forwards the packet to the lwB4 natively over the
        IPv6 network.</t>

        <t>If no match is found, the lwAFTR MUST discard the packet. An ICMPv4
        type 3, code 1 (Destination unreachable, host unreachable) error
        message MAY be sent back. The ICMP policy SHOULD be configurable.</t>

        <t>The lwAFTR MUST support hairpinning of traffic between two lwB4s,
        by performing de-capsulation and re-encapsulation of packets. The
        hairpinning policy MUST be configurable.</t>

        <t>If the binding table entry has a full port-set (e.g. all ports from
        0 to 65535) allocated for an lwB4 client, then the lwAFTR SHOULD
        behave as a 4 over 6 concentrator as described in <xref
        target="I-D.ietf-softwire-public-4over6"/>.</t>
      </section>
    </section>

    <section title="Provisioning using DHCPv4 over IPv6 Transport">
      <t>The DHCPv4 based provisioning model uses DHCPv4 format messages
      within an IPv6 packet as described in <xref
      target="I-D.ietf-dhc-dhcpv4-over-ipv6"/>. This is used for configuring
      the lwB4's public IPv4 address and port-set that will be used for the
      softwire and NAPT44 function.</t>

      <t/>

      <section title="lwB4 DHCPv4 Based Provisioning">
        <t>The lwB4's steps for this configuration model are as follows:<list
            style="numbers">
            <t>The lwB4 learns IPv6 Address of DHCPv4 over IPv6 Server</t>

            <t>The lwB4 sends a DHCPv4 over IPv6 request (Discover)
            message</t>

            <t>The DHCPv4 over IPv6 response contains the public IPv4 address
            and restricted port-set to configure NAPT44 and the softwire</t>
          </list></t>

        <t>The lwB4 must implement the Client Relay Agent function described
        in <xref target="I-D.ietf-dhc-dhcpv4-over-ipv6"/>. This function is
        responsible for converting the DHCPv4 message's IPv4 transport to an
        IPv6 transport.</t>

        <t>To learn the IPv6 unicast address of the DHCPv4 over IPv6 server or
        relay, the lwB4 SHOULD implement the DHCPv6 option defined in <xref
        target="I-D.mrugalski-softwire-dhcpv4-over-v6-option"/>.</t>

        <t>If the DHCPv4 over IPv6 client has multiple IPv6 addresses
        assigned, the mechanisms defined in <xref target="RFC3484"/> MUST be
        applied for selecting the correct address as the source of the DHCPv4
        over IPv6 request. A DHCPv4 over IPv6 client embedded within the lwB4
        MUST use the same IPv6 address as the data plane encapsulation source
        address for all DHCPv4 over IPv6 requests.</t>

        <t>To implement this provisioning model, the lwB4 MUST support public
        IPv4 address and restricted port-set allocation over DHCPv4 according
        to the mechanism described in <xref
        target="I-D.sun-dhc-port-set-option"/> (or evolution thereof).</t>
      </section>

      <section title="lwAFTR DHCPv4 Based Provisioning">
        <t>The DHCPv4 over IPv6 based provisioning process can be considered
        out-of-band from the perspective of the lwAFTR in that the lwAFTR does
        not need to be directly involved for the mechanism to function
        correctly. However, the contents of the lwAFTR's binding table MUST be
        synchronized with the DHCPv4 over IPv6 server.</t>

        <t>This is necessary to ensure that the IPv4 address and port-set that
        is allocated in response to a specific client's DHCP request (e.g. the
        originating IPv6 address of the request) matches the equivalent entry
        in the lwAFTR's binding table. If this elements are not kept
        synchronized, then the lwAFTR will either discard or mis-route packets
        it receives.</t>

        <t>The lwAFTR MAY implement a local DHCPv4 over IPv6 server or Relay
        Agent as described in <xref target="I-D.ietf-dhc-dhcpv4-over-ipv6"/>.
        If one of these is implemented, the lwB4s MAY send DHCPv4 over IPv6
        messages to the lwAFTR which can then learn the bindings between IPv6
        address and IPv4 address with port set directly.</t>
      </section>
    </section>

    <section title="ICMP Processing">
      <t>ICMP does not work in an address sharing environment without special
      handling <xref target="RFC6269"/>. Due to the port-set style address
      sharing, Lightweight 4over6 requires specific ICMP message handling not
      required by DS-Lite.</t>

      <t>The following behavior SHOULD be implemented by the lwAFTR to provide
      ICMP error handling and basic remote IPv4 service diagnostics for a port
      restricted CPE: for inbound ICMP messages, the lwAFTR MAY behave in two
      modes:</t>

      <t>Either:</t>

      <t><list style="numbers">
          <t>Check the ICMP Type field.</t>

          <t>If the ICMP type is set to 0 or 8 (echo reply or request), then
          the lwAFTR MUST take the value of the ICMP identifier field as the
          source port, and use this value to lookup the binding table for an
          encapsulation destination. If a match is found, the lwAFTR forwards
          the ICMP packet to the IPv6 address stored in the entry; otherwise
          it MUST discard the packet.</t>

          <t>If the ICMP type field is set to any other value, then the lwAFTR
          MUST use the method described in REQ-3 of <xref target="RFC5508"/>
          to locate the source port within the transport layer header in ICMP
          packet's data field. The destination IPv4 address and source port
          extracted from the ICMP packet are then used to make a lookup in the
          binding table. If a match is found, it MUST forward the ICMP reply
          packet to the IPv6 address stored in the entry; otherwise it MUST
          discard the packet.</t>
        </list>Or:</t>

      <t><list style="symbols">
          <t>Discard all inbound ICMP messages.</t>
        </list></t>

      <t>The ICMP policy SHOULD be configurable.</t>

      <t>The lwB4 SHOULD implement the requirements defined in <xref
      target="RFC5508"/> for ICMP forwarding. For ICMP echo request packets
      originating from the private IPv4 network, the lwB4 SHOULD implement the
      method described in <xref target="RFC6346"/> and use an available port
      from its port-set as the ICMP Identifier.</t>

      <t>For both the lwAFTR and the lwB4, ICMPv6 MUST be handled as described
      in <xref target="RFC2473"/>.</t>

      <t/>
    </section>

    <section title="Security Considerations">
      <t>As the port space for a subscriber shrinks due to address sharing,
      the randomness for the port numbers of the subscriber is decreased
      significantly. This means it is much easier for an attacker to guess the
      port number used, which could result in attacks ranging from throughput
      reduction to broken connections or data corruption.</t>

      <t>The port-set for a subscriber can be a set of contiguous ports or
      non-contiguous ports. Contiguous port-sets do not reduce this threat.
      However, with non-contiguous port-set (which may be generated in a
      pseudo-random way <xref target="RFC6431"/>), the randomness of the port
      number is improved, provided that the attacker is outside the
      Lightweight 4over6 domain and hence does not know the port-set
      generation algorithm.</t>

      <t>More considerations about IP address sharing are discussed in Section
      13 of <xref target="RFC6269"/>, which is applicable to this
      solution.</t>
    </section>

    <section title="IANA Considerations">
      <t>This document does not include an IANA request.</t>
    </section>

    <section title="Author List">
      <t>The following are extended authors who contributed to the effort:</t>

      <t><list>
          <t>Jianping Wu <vspace blanklines="1"/> Tsinghua University <vspace
          blanklines="1"/> Department of Computer Science, Tsinghua University
          <vspace blanklines="1"/> Beijing 100084 <vspace blanklines="1"/>
          P.R.China</t>

          <t>Phone: +86-10-62785983 <vspace blanklines="1"/> Email:
          jianping@cernet.edu.cn</t>

          <t/>

          <t>Peng Wu <vspace blanklines="1"/> Tsinghua University <vspace
          blanklines="1"/> Department of Computer Science, Tsinghua University
          <vspace blanklines="1"/> Beijing 100084 <vspace blanklines="1"/>
          P.R.China</t>

          <t>Phone: +86-10-62785822 <vspace blanklines="1"/> Email:
          pengwu.thu@gmail.com</t>

          <t/>

          <t>Chongfeng Xie <vspace blanklines="1"/> China Telecom <vspace
          blanklines="1"/> Room 708, No.118, Xizhimennei Street <vspace
          blanklines="1"/> Beijing 100035 <vspace blanklines="1"/>
          P.R.China</t>

          <t>Phone: +86-10-58552116 <vspace blanklines="1"/> Email:
          xiechf@ctbri.com.cn</t>

          <t/>

          <t>Xiaohong Deng <vspace blanklines="1"/> France Telecom</t>

          <t>Email: xiaohong.deng@orange.com</t>

          <t/>

          <t>Cathy Zhou <vspace blanklines="1"/> Huawei Technologies <vspace
          blanklines="1"/> Section B, Huawei Industrial Base, Bantian Longgang
          <vspace blanklines="1"/> Shenzhen 518129 <vspace blanklines="1"/>
          P.R.China</t>

          <t>Email: cathyzhou@huawei.com</t>

          <t/>

          <t>Alain Durand <vspace blanklines="1"/> Juniper Networks <vspace
          blanklines="1"/> 1194 North Mathilda Avenue <vspace blanklines="1"/>
          Sunnyvale, CA 94089-1206 <vspace blanklines="1"/> USA</t>

          <t>Email: adurand@juniper.net</t>

          <t/>

          <t>Reinaldo Penno <vspace blanklines="1"/> Cisco Systems, Inc.
          <vspace blanklines="1"/> 170 West Tasman Drive<vspace
          blanklines="1"/> San Jose, California 95134<vspace blanklines="1"/>
          USA</t>

          <t>Email: repenno@cisco.com</t>

          <t/>

          <t>Alex Clauberg <vspace blanklines="1"/> Deutsche Telekom AG
          <vspace blanklines="1"/> GTN-FM4 <vspace blanklines="1"/>
          Landgrabenweg 151 <vspace blanklines="1"/> Bonn, CA 53227 <vspace
          blanklines="1"/> Germany</t>

          <t>Email: axel.clauberg@telekom.de</t>

          <t/>

          <t>Lionel Hoffmann <vspace blanklines="1"/> Bouygues Telecom <vspace
          blanklines="1"/> TECHNOPOLE <vspace blanklines="1"/> 13/15 Avenue du
          Marechal Juin <vspace blanklines="1"/> Meudon 92360 <vspace
          blanklines="1"/> France</t>

          <t>Email: lhoffman@bouyguestelecom.fr</t>

          <t/>

          <t>Maoke Chen <vspace blanklines="1"/> FreeBit Co., Ltd. <vspace
          blanklines="1"/>13F E-space Tower, Maruyama-cho 3-6<vspace
          blanklines="1"/>Shibuya-ku, Tokyo 150-0044<vspace
          blanklines="1"/>Japan</t>

          <t>Email: fibrib@gmail.com</t>
        </list></t>
    </section>

    <section title="Acknowledgement">
      <t>The authors would like to thank Ole Troan, Ralph Droms for their
      comments and feedback.</t>

      <t>This document is a merge of three documents: <xref
      target="I-D.cui-softwire-b4-translated-ds-lite"/>, <xref
      target="I-D.zhou-softwire-b4-nat"/> and <xref
      target="I-D.penno-softwire-sdnat"/>.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119" ?>

      <?rfc include="reference.RFC.2473"?>

      <?rfc include="reference.RFC.3484"?>

      <?rfc include="reference.RFC.4213"?>

      <?rfc include="reference.RFC.5508"?>

      <?rfc include="reference.RFC.6269" ?>

      <?rfc include="reference.RFC.6333" ?>

      <?rfc include="reference.RFC.6334" ?>

      <?rfc include="reference.RFC.3022" ?>

      <?rfc include="reference.RFC.6346" ?>

      <?rfc include="reference.RFC.6431" ?>

      <?rfc include="reference.RFC.1918"?>

      <?rfc include="reference.I-D.sun-dhc-port-set-option"?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.I-D.ietf-softwire-public-4over6" ?>

      <?rfc include="reference.I-D.ietf-softwire-map" ?>

      <?rfc include="reference.I-D.cui-softwire-b4-translated-ds-lite" ?>

      <?rfc include="reference.I-D.zhou-softwire-b4-nat" ?>

      <?rfc include="reference.I-D.penno-softwire-sdnat" ?>

      <?rfc include="reference.I-D.ietf-dhc-dhcpv4-over-ipv6" ?>

      <?rfc include="reference.I-D.boucadair-dhcpv6-shared-address-option" ?>

      <?rfc include="reference.I-D.ietf-pcp-base" ?>

      <?rfc include="reference.I-D.tsou-pcp-natcoord" ?>

      <?rfc include="reference.I-D.mrugalski-softwire-dhcpv4-over-v6-option"?>

      <?rfc include="reference.I-D.wu-dhc-port-set-option"?>
    </references>

    <section title="Alternatives for Port-Restricted Address Allocation">
      <t>Besides DHCPv4, other protocols for address and port-set provisioning
      MAY also be implemented. Some possible alternatives include:</t>

      <t><list style="symbols">
          <t>PCP<xref target="I-D.ietf-pcp-base"/>: a lwB4 MAY use <xref
          target="I-D.tsou-pcp-natcoord"/> to retrieve a restricted IPv4
          address and a set of ports.</t>

          <t>DHCPv6: the DHCPv6 protocol MAY be extended to support port-set
          allocation <xref
          target="I-D.boucadair-dhcpv6-shared-address-option"/>, along with
          IPv6-mapped IPv4 address allocation.</t>

          <t>IPCP: IPCP MAY be extended to carry the port-set (e.g., <xref
          target="RFC6431"/>).</t>
        </list></t>

      <t>In a Lightweight 4over6 domain, the same provisioning mechanism MUST
      be enabled in the lwB4s, the AFTRs and the provisioning server.</t>
    </section>
  </back>
</rfc>
