



Network Working Group                                         P. Kyzivat
Internet-Draft                                                   L. Xiao
Intended status: Standards Track                               C. Groves
Expires: December 15, 2013                                        Huawei
                                                           June 13, 2013


                             CLUE Signaling
                    draft-kyzivat-clue-signaling-03

Abstract

   This document specifies how signaling is conducted in the course of
   CLUE sessions.  This includes how SIP/SDP signaling is applied to
   CLUE sessions as well as defining a CLUE-specific signaling protocol
   that complements SIP/SDP and supports negotiation of CLUE application
   level data.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 15, 2013.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.












Kyzivat, et al.         Expires December 15, 2013               [Page 1]

Internet-Draft               CLUE Signaling                    June 2013


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  CLUE-Specific Signaling Protocol  . . . . . . . . . . . . . .   3
     3.1.  Protocol Versioning, Options & Extensions . . . . . . . .   4
       3.1.1.  Versioning  . . . . . . . . . . . . . . . . . . . . .   4
       3.1.2.  Options and/or Extensions . . . . . . . . . . . . . .   4
       3.1.3.  Negotiation . . . . . . . . . . . . . . . . . . . . .   4
       3.1.4.  Principles  . . . . . . . . . . . . . . . . . . . . .   5
     3.2.  Acknowledging Messages  . . . . . . . . . . . . . . . . .   6
       3.2.1.  Explicit Acknowledgment of Each Message . . . . . . .   6
       3.2.2.  Piggybacking ACK on Requests  . . . . . . . . . . . .   6
       3.2.3.  Reporting Message Errors  . . . . . . . . . . . . . .   7
     3.3.  Stand-alone messages or deltas? . . . . . . . . . . . . .   9
     3.4.  Message Sequencing  . . . . . . . . . . . . . . . . . . .   9
       3.4.1.  Signaling Changes in Provider State . . . . . . . . .  10
       3.4.2.  Signaling Changes in Consumer State . . . . . . . . .  11
     3.5.  Message Transport . . . . . . . . . . . . . . . . . . . .  11
       3.5.1.  CLUE Channel Lifetime . . . . . . . . . . . . . . . .  11
       3.5.2.  Channel Error Handling  . . . . . . . . . . . . . . .  12
     3.6.  CLUE Messages . . . . . . . . . . . . . . . . . . . . . .  12
       3.6.1.  ADVERTISEMENT Message . . . . . . . . . . . . . . . .  13
       3.6.2.  CONFIGURE Message . . . . . . . . . . . . . . . . . .  13
       3.6.3.  ACK Message . . . . . . . . . . . . . . . . . . . . .  13
       3.6.4.  NAK Message . . . . . . . . . . . . . . . . . . . . .  14
     3.7.  Message Syntax  . . . . . . . . . . . . . . . . . . . . .  14
     3.8.  Message Framing . . . . . . . . . . . . . . . . . . . . .  16
     3.9.  other . . . . . . . . . . . . . . . . . . . . . . . . . .  16
   4.  CLUE use of SDP O/A . . . . . . . . . . . . . . . . . . . . .  16
     4.1.  Encodings represented in SDP  . . . . . . . . . . . . . .  17
   5.  Coordination of CLUE protocol and SDP O/A . . . . . . . . . .  18
     5.1.  Independence of SDP and CLUE negotiation  . . . . . . . .  18
     5.2.  Combined Protocol Use Cases . . . . . . . . . . . . . . .  19
       5.2.1.  Two CLUE-capable endpoints  . . . . . . . . . . . . .  19
       5.2.2.  A case with a non-CLUE-capable endpoint . . . . . . .  22
   6.  CLUE requirements on SDP O/A  . . . . . . . . . . . . . . . .  23
   7.  SIP Signaling . . . . . . . . . . . . . . . . . . . . . . . .  24



Kyzivat, et al.         Expires December 15, 2013               [Page 2]

Internet-Draft               CLUE Signaling                    June 2013


   8.  Interoperation with Legacy SIP Devices  . . . . . . . . . . .  24
   9.  CLUE over RTCWEB  . . . . . . . . . . . . . . . . . . . . . .  24
   10. Open Issues . . . . . . . . . . . . . . . . . . . . . . . . .  24
   11. What else?  . . . . . . . . . . . . . . . . . . . . . . . . .  24
   12. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  24
   13. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  24
   14. Security Considerations . . . . . . . . . . . . . . . . . . .  25
   15. Change History  . . . . . . . . . . . . . . . . . . . . . . .  25
   16. References  . . . . . . . . . . . . . . . . . . . . . . . . .  25
     16.1.  Normative References . . . . . . . . . . . . . . . . . .  26
     16.2.  Informative References . . . . . . . . . . . . . . . . .  26
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  27

1.  Introduction

   This document specifies how signaling is conducted in the course of
   CLUE sessions.  This includes how SIP/SDP signaling is applied to
   CLUE sessions as well as defining a CLUE-specific signaling protocol
   that complements SIP/SDP and supports negotiation of CLUE application
   level data.

   [Yes, this is a dup of the abstract for now.  Eventually it should
   say more.]

2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   This document draws liberally from the terminology defined in the
   CLUE Framework [I-D.ietf-clue-framework].

   Other terms introduced here:

   CLUE Channel:  A reliable, bidirectional, transport mechanism used to
      convey CLUE messages.  A CLUE channel consists of one SCTP stream
      in each direction over a DTLS/SCTP session.

3.  CLUE-Specific Signaling Protocol











Kyzivat, et al.         Expires December 15, 2013               [Page 3]

Internet-Draft               CLUE Signaling                    June 2013


   The CLUE Framework [I-D.ietf-clue-framework] mentions a CLUE-specific
   protocol for the exchange of ADVERTISEMENT and CONFIGURE messages,
   but gives little detail.  The Data Model
   [I-D.presta-clue-data-model-schema] specifies a model and XML
   representation for CLUE-related data, but doesn't currently specify
   exactly what data belongs in each message, or how messages are
   sequenced.  This document provides the detail missing from those
   documents.

3.1.  Protocol Versioning, Options & Extensions

3.1.1.  Versioning

   There must be some provision for identifying incompatible protocol
   versions.

   NOTE: We probably don't want to have incompatible versions.
   Typically changes will be introduced in a backward compatible way.
   But a time may come when this isn't possible, and we should be
   prepared for that.  This is more likely to occur before an RFC is
   published.  While it is probably unwise to deploy a product based on
   a draft, there will certainly be prototypes developed for testing,
   and those tests may lead to a need for incompatible change.  So
   whatever the mechanism is, it should be applicable to changes that
   occur from draft to draft, as well as after an RFC has been
   published.

3.1.2.  Options and/or Extensions

   There must be some provision for dealing with optional-to-implement
   features in the specification, and/or for backward compatible
   extensions to the protocol.  These are superficially different, but
   in practice they are more-or-less equivalent.  To an implementation
   of the base protocol and some extensions, those extensions must be
   viewed as optional-to-implement features in peers.

   One decision is whether extensions may be implemented mix-and-match,
   or whether there is a sequence of extensions, and one extension may
   only be supported if all the prior extensions have been supported.

3.1.3.  Negotiation

   Both version and options can be negotiated.  Some mechanisms may work
   for both, while others are only appropriate for one or the other.
   Some possibilities:






Kyzivat, et al.         Expires December 15, 2013               [Page 4]

Internet-Draft               CLUE Signaling                    June 2013


   o  No negotiation at all.  Instead, unrecognized syntax in certain
      "extension points" is to be ignored.  If it is recognized, then a
      corresponding extension specification defines what to do.

   o  Negotiate via the SIP signaling.

   o  Negotiate as part of the O/A exchange that establishes the
      channel.  (E.g. it is likely that individual channels of the SCTP
      association will be specified in SDP with a specific sub-protocol
      type.  There could be a separate sub-protocol for each new
      version.)

   o  Negotiate within the CLUE channel, via a special message exchange,
      before exchanging "normal" CLUE messages.

   o  Declare versioning in every CLUE message.  Define errors for
      unsupported versions and fallback to earlier versions.

3.1.4.  Principles

   o  CLUE SHOULD allow forwards and backwards compatibility through a
      version and extension mechanism.  Forward compatibility allows a
      version of a protocol to communicate effectively with and
      interwork with future versions of the protocol.  A version should
      not restrict the future protocol from providing extra
      capabilities.

   o  Whenever possible backwards compatibility should be maintained.
      Backward compatibility rules will be defined to ensure that
      endpoints implementing future versions of CLUE will be able to
      send protocol messages of the previous versions which will be
      understood and fully processed by the remote endpoint.

   o  Existing protocol elements should not be changed unless a protocol
      error needs to be corrected.

   o  The semantics of existing elements and values should not be
      changed.

   o  Established rules for formatting and encoding messages and
      elements should not be changed.

   o  When information elements are found to be obsolete they can be
      marked as not used.  However, the identifier for that information
      element will be marked as reserved.  In that way it cannot be used
      in future versions.





Kyzivat, et al.         Expires December 15, 2013               [Page 5]

Internet-Draft               CLUE Signaling                    June 2013


3.2.  Acknowledging Messages

   The CLUE channel is reliable, so there is no need for acknowledgement
   to guarantee delivery.  But there is still a need for application-to-
   application acknowledgement to report that the message has been
   received, parsed, and found to be of an acceptable format.  One
   possibility is to introduce separate ACK and NAK messages.  Another
   possibility is to add a confirmation element to each CLUE message, so
   that confirmation can be piggybacked on the basic messages.  Some
   alternatives follow.  [OTHER PROPOSALS WELCOME.]

3.2.1.  Explicit Acknowledgment of Each Message

   The characteristics of this approach are:

   o  There are separate request and response messages.  (This is
      similar to SIP.)

   o  Every request message expects exactly one response message.

   o  Every request message carries a sequence number that identifies
      it.

   o  Each end of the connection assigns sequential sequence numbers to
      the requests it sends.

   o  Every response message carries the sequence number of the message
      to which it responds.

   o  Responses are to be sent promptly upon the receipt of a request.
      (Needs more detail.)

   o  Responses are either ACK or NAK.  NAK responses also carry info
      describing the error.

   o  Each CONFIGURE message is to be understood in the context of the
      most recent ACKed ADVERTISEMENT message.  A CONFIGURE message may
      be rejected if there is an outstanding ADVERTISEMENT for which no
      response has been received.  (Or it may be accepted if the
      advertiser is able to do so meaningfully.)

3.2.2.  Piggybacking ACK on Requests

   The characteristics of this approach are:

   o  Every message carries a sequence number that identifies it.





Kyzivat, et al.         Expires December 15, 2013               [Page 6]

Internet-Draft               CLUE Signaling                    June 2013


   o  Each end of the connection assigns sequential sequence numbers to
      the messages it sends.

   o  Every message carries the sequence number of the last message
      received and found valid.

   o  If a message is received and found invalid, then a NAK message is
      sent that refers to it and indicates what is wrong with it.

   o  If a valid message is received and a new message needs to be sent
      in response, then the responding message implicitly acknowledges
      the prior message.

   o  If a valid message is received and there is no need to immediately
      send another message, then a NO-OP message is sent to acknowledge
      the received message.  But a NO-OP message is never sent in
      response to a NO-OP message.

   o  Each CONFIGURE message is to be understood in the context of the
      most recent *acknowledged* ADVERTISEMENT message.  A CONFIGURE
      message may be rejected if it doesn't acknowledge the most
      recently sent ADVERTISEMENT.  (Or it may be accepted if the
      advertiser is able to do so meaningfully.)

   The general format of every message is:

   o  sequence # of this message

   o  sequence # of most recently *received* and *valid* message

   o  message type (ADVERTISEMENT, CONFIG, NO-OP, NAK)

   o  body of the message, according to type

   (The exact representation is TBD - by XML experts.)

   There are loose ends to resolve here.  In particular, how to
   acknowledge messages after NAKing one.

3.2.3.  Reporting Message Errors

   There needs to be a mechanism to report errors with other messages.
   The details of form, content, and usage still need to be specified,
   and need to be tuned to the details of the protocol.  This could use
   distinct messages or be incorporated into the other messages.  Errors
   this message must be able to report include:





Kyzivat, et al.         Expires December 15, 2013               [Page 7]

Internet-Draft               CLUE Signaling                    June 2013


   Syntax error in message:  The message has been disregarded due to a
      syntax error detected at the message level.  The message does not
      conform to the productions of messages in [Protocol Document].
      Used when the message cannot be parsed.

   Sequencing Error:  Sequence number has already been used, or is
      greater than the expected number.  (Details of possible errors
      depend upon the specific sequence numbering mechanism.)

   Version not supported:  This indicates a lack of support for the
      protocol version indicated in the message header of the message.
      In the case of the version number being indicated in the message
      header, the message contents are disregarded.

   Option not supported:  This indicates a lack of support for the
      protocol option the used in the message.  The message contents are
      disregarded.

   Unknown capture identity:  The received Configure message contains an
      unknown capture identity not previously declared by an
      Advertisement.  The message contents are disregarded.

   Invalid identity:  The received message contains an invalid capture
      identity.  For example a duplicated Capture scene identity or some
      other semantically incorrect usage.  The message contents are
      disregarded.

   Invalid value:  The received message contains an invalid parameter
      value.  The value is not according to the protocol definition in
      [protocol document] or according the extension documentation.

   Missing element:  The received message is missing an element.
      Certain parameters require multiple values, e.g. Point of capture
      requires X,Y,Z co-ordinates if one or more elements are missing
      this error code is used.

   Conflicting parameters or values:  The received message contains
      multiple values that may not be used together.

   Invalid capture area:  The received message defines a capture area
      that cannot be rendered in a sensible manner.  For example the
      capture area does not define a quadrilateral region.

   Invalid point of line of capture:  The indicated co-ordinate for the
      point on line of capture is invalid.  For example: does not lie
      between the point of capture and the area of capture or it is the
      same as the point of capture.




Kyzivat, et al.         Expires December 15, 2013               [Page 8]

Internet-Draft               CLUE Signaling                    June 2013


   Invalid capture scene entry:  The message contains an invalid capture
      scene entry.  For example the capture scene entry contains more
      than one media type.

   Invalid Simultaneous Set:  The simultaneous set contained in the
      message is invalid.  For example the simultaneous set refers to an
      undefined capture set or does not match the specified capture
      scene entries.

   Invalid Configuration:  The Configure message requests a
      configuration that the provider cannot support.

   Invalid Advertisement reference:  The Configure message refers to an
      invalid Advertisement.  The message refers-to/depends-upon out-of-
      date ADVERTISEMENT message or provides an invalid reference.

3.3.  Stand-alone messages or deltas?

   Each message exchanged within a CLUE session could contain a complete
   description of the state it wishes to achieve.  Or each message could
   describe just the changes that it wishes to make to the current
   state.  Or the protocol could support both message forms.  Which
   direction to pursue is TBD.

   [Paul: while this does need to be decided, it is fundamentally just
   an optimization.  IMO it does not have major impact on the other
   parts of this document, so I would prefer to continue deferring it
   until we are so far along with the remainder of the document that we
   can no longer defer it.]

3.4.  Message Sequencing

   There is a very basic introduction to this topic in section 4
   (Overview) of the CLUE Framework [I-D.ietf-clue-framework].  After
   removing extraneous material it would look like:

              +-----------+                     +-----------+
              | Endpoint1 |                     | Endpoint2 |
              +----+------+                     +-----+-----+
                   |                                  |
                   | ADVERTISEMENT 1                  |
                   |*********************************>|
                   |                  ADVERTISEMENT 2 |
                   |<*********************************|
                   |                                  |
                   |                      CONFIGURE 1 |
                   |<*********************************|
                   | CONFIGURE 2                      |



Kyzivat, et al.         Expires December 15, 2013               [Page 9]

Internet-Draft               CLUE Signaling                    June 2013


                   |*********************************>|
                   |                                  |


   But we need much more than this, to show multiple CONFIGUREs per
   ADVERTISEMENT, interleaving of ADVERTISEMENTs and CONFIGUREs in both
   directions, etc.

   Message sequencing needs to be described at two levels:

   o  Basic sequencing of the CLUE messages themselves, without regard
      for the SIP/SDP signaling that may be going on at the same time.
      This is useful to cover the basic concepts.  That should be
      covered in this section.  It provides context for understanding
      the more detailed treatment later.

      This could include some simple state machines.

   o  In reality there is a complex dependency between CLUE signaling
      and SDP Offer/Answer exchanges carried in SIP signaling.  So there
      is a need to describe the valid ways in which these two forms of
      signaling interact.  That is covered in Section 5.

3.4.1.  Signaling Changes in Provider State

   Once a CLUE session has been established, ADVERTISEMENTs and
   CONFIGUREs exchanged, and media is flowing, a provider may experience
   a change in state that has an effect on what it wishes or is able to
   provide.  In this case it may need to alter what it is sending and/or
   send a new ADVERTISEMENT.  In some cases it will be necessary to
   alter what is being sent without first sending a new ADVERTISEMENT
   and waiting for a CONFIGURE conforming to it.

   The following is a non-exhaustive list of situations and recommended
   actions:

   o  An advertised capture, that is not currently configured, is no
      longer available.

      To recover from this: Send a new ADVERTISEMENT that omits this
      capture.

   o  An advertised capture, that has been configured, is no longer
      available.

      To recover from this: (1) stop transmitting the configured
      encoding of this capture.  (2) Send a new ADVERTISEMENT that omits
      this capture.



Kyzivat, et al.         Expires December 15, 2013              [Page 10]

Internet-Draft               CLUE Signaling                    June 2013


   o  The provider loses some resource and must reduce the frame rate,
      frame size, or resolution of a capture encoding.

      If the reduced values still fall within the advertised values for
      the capture then the change may be made without any further
      signaling.

      If the change must be outside the range of what was advertised,
      then the provider must cease transmitting the capture encoding.
      It then must send a new ADVERTISEMENT reflecting what it is now
      capable of delivering.

   o  New or changed scenes or scene geometry.  For instance, the
      addition of a new scene containing presentation captures.  Also,
      an MCU may make significant changes in what it advertises as new
      endpoints join a conference.

   o  [Add more]

3.4.2.  Signaling Changes in Consumer State

   If the Consumer for some reason looses the CLUE state information how
   does it ask for an Advertisement from the provider?  There could be
   multiple possibilities.  A error code approach?  However error codes
   would typically be associated with a NACK so it may not be good for a
   Config message.  Maybe send a message which means "send me a complete
   update".  An alternative may be to release the connection or just do
   new signaling to establish a new CLUE session.

3.5.  Message Transport

   CLUE messages are transported over a bidirectional CLUE channel.  In
   a two-party CLUE session, a CLUE channel connects the two endpoints.
   In a CLUE conference, each endpoint has a CLUE channel connecting it
   to an MCU.  (In conferences with cascaded mixers [RFC4353], two MCUs
   will be connected by a CLUE channel.)

3.5.1.  CLUE Channel Lifetime

   The transport mechanism used for CLUE messages is DTLS/SCTP as
   specified in [I-D.tuexen-tsvwg-sctp-dtls-encaps] and
   [I-D.ietf-mmusic-sctp-sdp].  A CLUE channel consists of one SCTP
   stream in each direction over a DTLS/SCTP session.  The mechanism for
   establishing the DTLS/SCTP session is described in Section 4.

   The CLUE channel will usually be offered during the initial SIP
   INVITE, and remain connected for the duration of the CLUE/SIP
   session.  However this need not be the case.  The CLUE channel may be



Kyzivat, et al.         Expires December 15, 2013              [Page 11]

Internet-Draft               CLUE Signaling                    June 2013


   established mid-session after desire and capability for CLUE have
   been determined, and the CLUE channel may be dropped mid-call if the
   desire and/or capability to support it is lost.

   There may be cases when it becomes necessary to "reset" the CLUE
   channel.  This by be as a result of an error on the underlying SCTP
   association, a need to change the endpoint address of the SCTP
   association, loss of CLUE protocol state, or something else TBD.

   The precise mechanisms used to determine when a reset is required,
   and how to accomplish it and return to a well defined state are TBS.

3.5.2.  Channel Error Handling

   We will need to specify behavior in the face of transport errors that
   are so severe that they can't be managed via CLUE messaging within
   the CLUE channel.  Some errors of this sort are:

   o  Unable to establish the SCTP association after signaling it in
      SDP.

   o  CLUE channel setup rejected by peer.

   o  Error reported by transport while writing message to CLUE channel.

   o  Error reported by transport while reading message from CLUE
      channel.

   o  Timeout - overdue acknowledgement of a CLUE message.
      (Requirements for now soon a message must be responded to are
      TBD.)

   o  Application fault.  CLUE protocol state lost.

   The worst case is to drop the entire CLUE call.  Another possibility
   is to fall back to legacy compatibility mode.  Or perhaps a "reset"
   can be done on the protocol.  E.g. this might be accomplished by
   sending a new O/A and establishing a replacement SCTP association.
   Or a new CLUE channel might be established within the existing SCTP
   association.

3.6.  CLUE Messages









Kyzivat, et al.         Expires December 15, 2013              [Page 12]

Internet-Draft               CLUE Signaling                    June 2013


   CLUE messages are encoded in XML.  The Data Model
   [I-D.presta-clue-data-model-schema] defines many/most of the elements
   from which CLUE messages are composed.  This document specifies an
   XML schema that contains an element definition for each CLUE message,
   with much of the content of those elements being drawn from the Data
   Model.

3.6.1.  ADVERTISEMENT Message

   This message contains XML representations of captures, capture
   scenes, encoding groups, and simultaneous sets using the types
   defined for those in the Data Model
   [I-D.presta-clue-data-model-schema].

   The XML definition for this is element <advertisement> in section
   Section 3.7

   [[ Currently this does not contain any representation of encodings.
   It assumes those will be defined in SDP. ]]

3.6.2.  CONFIGURE Message

   This message optionally contains an XML representations of
   captureEncodings using the type defined in the Data Model
   [I-D.presta-clue-data-model-schema].  A configure message with no
   captureEncodings indicates that no captures are requested.

   [[ It currently also contains a reference to the request number of
   the advertisement it is based upon.  Whether this should be present,
   or if it should implicitly reference the most recently acknowledged
   advertisement is TBD. ]]

   The XML definition for this is element <configure> in section
   Section 3.7

3.6.3.  ACK Message

   Need for, and details of, the ACK message are TBD.

   The XML element <response> in section Section 3.7 could serve as the
   representation, either with no reason element, or a reason element
   with a special value.









Kyzivat, et al.         Expires December 15, 2013              [Page 13]

Internet-Draft               CLUE Signaling                    June 2013


3.6.4.  NAK Message

   Need for, and details of, the NACK message are TBD.

   The XML element <response> in section Section 3.7 could serve to as
   the representation, with the reason element providing the details.
   Then the code value in the reason element should map to the errors in
   section Section 3.2.3.

3.7.  Message Syntax

   [[ The following is a first cut at a schema for the actual messages
   in the clue protocol.  It uses <encodingGroups> from the data model
   but not <encodings>.  Rather, it assumes that encodings are described
   in SDP as m-lines with a text identifier, and that the identifier has
   the same value as the encodingIDs embedded in the <encodingGroups>.
   If we stick with this the data model should be adjusted to agree, but
   until then it should "work".  The SDP encoding of the identifier is
   TBD.  Candidates are 'a=label:ID' and 'a=mid:ID'. ]]

   For now there only <advertisement> and <configure> are defined.  More
   messages will be needed for acknowledgment.

   <?xml version="1.0" encoding="UTF-8" ?>
   <xs:schema
      targetNamespace="urn:ietf:params:xml:ns:clue-message"
      xmlns:tns="urn:ietf:params:xml:ns:clue-message"
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xmlns:dm="urn:ietf:params:xml:ns:clue-info"
      xmlns="urn:ietf:params:xml:ns:clue-message"
      elementFormDefault="qualified"
      attributeFormDefault="unqualified">

   <!-- Import data model schema -->
      <xs:import namespace="urn:ietf:params:xml:ns:clue-info"
                 schemaLocation="clue-data-model-04-wip.xsd"/>

   <!-- ELEMENT DEFINITIONS -->
   <xs:element name="advertisement" type="advertisementMessageType"/>
   <xs:element name="configure" type="configureMessageType"/>
   <xs:element name="response" type="responseMessageType"/>

   <!-- CLUE MESSAGE TYPE -->
   <xs:complexType name="clueMessageType" abstract="true">
     <xs:sequence>
       <!-- mandatory fields -->
       <!-- TBS: version info -->
     </xs:sequence>



Kyzivat, et al.         Expires December 15, 2013              [Page 14]

Internet-Draft               CLUE Signaling                    June 2013


   </xs:complexType>

   <!-- CLUE REQUEST MESSAGE TYPE -->
   <xs:complexType name="clueRequestMessageType" abstract="true">
    <xs:complexContent>
     <xs:extension base="clueMessageType">
      <xs:sequence>
        <!-- mandatory fields -->
        <xs:element name="requestNumber" type="xs:integer"/>
      </xs:sequence>
     </xs:extension>
    </xs:complexContent>
   </xs:complexType>

   <!-- CLUE RESPONSE MESSAGE TYPE -->
   <xs:complexType name="clueResponseMessageType">
    <xs:complexContent>
     <xs:extension base="clueMessageType">
      <xs:sequence>
        <!-- mandatory fields -->
        <xs:element name="requestNumber" type="xs:integer"/>
        <!-- optional fields -->
        <xs:element name="reason" type="reasonType" minOccurs="0"/>
        <xs:any namespace="##other"
            processContents="lax" minOccurs="0"/>
      </xs:sequence>
     </xs:extension>
    </xs:complexContent>
   </xs:complexType>

   <!-- CLUE ADVERTISEMENT MESSAGE TYPE -->
   <xs:complexType name="advertisementMessageType">
    <xs:complexContent>
     <xs:extension base="clueRequestMessageType">
      <xs:sequence>
        <!-- mandatory fields -->
        <xs:element name="mediaCaptures"
                    type="dm:mediaCapturesType"/>
        <xs:element name="encodingGroups"
                    type="dm:encodingGroupsType"/>
        <!-- The encodings are defined via identifiers in the SDP,
             referenced in encodingGroups -->
        <xs:element name="captureScenes"
                    type="dm:captureScenesType"/>
        <!-- optional fields -->
        <xs:element name="simultaneousSets"
                    type="dm:simultaneousSetsType" minOccurs="0"/>
        <xs:any namespace="##other"



Kyzivat, et al.         Expires December 15, 2013              [Page 15]

Internet-Draft               CLUE Signaling                    June 2013


                processContents="lax" minOccurs="0"/>
      </xs:sequence>
     </xs:extension>
    </xs:complexContent>
   </xs:complexType>

   <!-- CLUE CONFIGURE MESSAGE TYPE -->
   <xs:complexType name="configureMessageType">
    <xs:complexContent>
     <xs:extension base="clueRequestMessageType">
      <xs:sequence>
        <!-- mandatory fields -->
        <xs:element name="advertisementNumber" type="xs:integer"/>
        <!-- advertisementNumber is requestNumber
             of the advertisement-->
        <!-- optional fields -->
        <xs:element name="captureEncodings"
                    type="dm:captureEncodingsType" minOccurs="0"/>
        <xs:any namespace="##other"
                processContents="lax" minOccurs="0"/>
      </xs:sequence>
     </xs:extension>
    </xs:complexContent>
   </xs:complexType>

   <!-- REASON TYPE -->
   <xs:complexType name="reasonType">
     <xs:simpleContent>
       <xs:extension base="xs:string">
         <xs:attribute type="xs:short" name="code" use="required"/>
       </xs:extension>
     </xs:simpleContent>
   </xs:complexType>

   </xs:schema>


3.8.  Message Framing

   Message framing is provided by the SCTP transport protocol.  Each
   CLUE message is carried in one SCTP message.

3.9.  other

4.  CLUE use of SDP O/A

   The CLUE channel is usually offered in the first SIP O/A exchange
   between two parties in an intended CLUE session.  The offer of the



Kyzivat, et al.         Expires December 15, 2013              [Page 16]

Internet-Draft               CLUE Signaling                    June 2013


   CLUE channel is the indicator that this SIP session is proposing to
   establish a CLUE session.

   (However it is also acceptable to start with a non-CLUE SIP session
   and upgrade it to a CLUE session later.)

   The mechanism for negotiating a DTLS/SCTP connection is specified in
   [I-D.ietf-mmusic-sctp-sdp].  We need to specify how to select the
   specific pair of SCTP streams that comprise the CLUE channel.

   Any specific usage/conventions required for coordination of SDP
   offers and answers with the CLUE messages should also be described
   here.

   (We have a draft [I-D.even-clue-sdp-clue-relation] that can
   contribute to this.)

4.1.  Encodings represented in SDP

   [[ This is a straw horse, based on a proposal in
   [I-D.hansen-clue-sdp-interaction].  It remains unclear if this
   approach will work well, but we'll try it out and see how it
   develops. ]]

   Providers signal available encodings in SDP sent to the consumer,
   rather than in an Advertisement message.  Each encoding is described
   by an SDP media section containing an identifier.  Encoding groups
   contained in Advertisement messages reference encodings by including
   the SDP identifier.  Configure messages also reference encodings via
   the identifier when selecting capture encodings.

   An encoding referenced by an encoding group can only be used to send/
   receive media if SDP defining the corresponding identifier was
   defined in the most recent offer/answer exchange.  However a consumer
   may configure a capture encoding using an advertised encoding that is
   not currently defined in SDP.  In this case it can be used if/when
   the provider defines the label in a subsequent offer/answer exchange.
   This provides flexibility in coordinating CLUE messages and SDP, but
   all encodings referenced by an Advertisement SHOULD be specified as
   soon as possible.  When the SDP definition of an encoding is not
   available, the consumer has insufficient information to decide
   whether to select it.

   [[ Using this approach the description of an encoding has all, and
   only, the descriptive capability provided by SDP.  Also, for now this
   assumes a single capture per-m-line and no m-line bundling.  We will
   want to relax those assumptions later. ]]




Kyzivat, et al.         Expires December 15, 2013              [Page 17]

Internet-Draft               CLUE Signaling                    June 2013


5.  Coordination of CLUE protocol and SDP O/A

   This should include state machines and/or call flows.  These will
   illustrate, and then provide normative rules for valid sequences of
   messages of both types.  For instance this needs to show when SDP
   offers and answers must occur relative to an ADVERTISEMENT or
   CONFIGURE message that requires SDP changes.

   [THIS IS A VERY IMPORTANT PART OF THIS DOCUMENT!]

5.1.  Independence of SDP and CLUE negotiation

   [This text is taken from [I-D.hansen-clue-sdp-interaction].]

   This draft proposes that CLUE messages and SDP messages should be
   independent: parameters in CLUE messages MAY exceed values negotiated
   in SDP, or may make reference to SDP contents not present in the most
   recent offer/answer exchange.  Without this provision, SDP and CLUE
   messages become part of a single negotiation, and a change on either
   by either side may necessitate an exchange of the other message type.
   For instance, removing stream information from SDP might first
   necessitate sending a new CLUE message removing the references to
   this stream.  The state machine required to ensure validity of
   negotiation will be complicated, and there will be a number of
   invalid states which must be avoided.  This is further complicated by
   the fact that, even if both ends of a call obey the constraints to
   ensure validity, a middle box may choose to rewrite an SDP such that
   an invalid state is reached.

   Making the two message types independent significantly reduces the
   complexity of the state machines required.  And with the message
   flows independent there is no way for an invalid state to occur when
   the two negotiations contain contradictory information.  A cost of
   this is that endpoints will now need to deal with the fact that CLUE
   messages may contain parameters exceeding those negotiated in SDP, or
   referencing SDP content that does not exist.  However, this is
   analogous to an issue endpoints already deal with in SDP.  For
   instance, the sum of bandwidth parameters for various m-lines can
   exceed the overall session bandwidth.  Not only is this not invalid,
   but it can be desirable, as it allows the sender to prioritise
   streams.  What can be sent for any device is simply the intersection
   of what is permitted by the most recent SDP offer/answer, and the
   outcome of the CLUE negotiation; implementations should ignore
   references to entities in the other negotiation that do no exist.

   This does not mean that there will be no interaction between SDP and
   CLUE messaging - a device wishing to add a new stream may well need
   to update both their SDP and their CLUE negotiations.  However, there



Kyzivat, et al.         Expires December 15, 2013              [Page 18]

Internet-Draft               CLUE Signaling                    June 2013


   is no fixed order in which this must be done and no requirement for
   them to be updated in a particular order or fashion; it is left to
   the implementation to renegotiate the channels as it sees fit.  If
   updates to both negotiations are required for a new stream to be
   added, then the new stream will not be available until both
   renegotiations are complete - the completion of the first
   renegotiation will have no effect.

5.2.  Combined Protocol Use Cases

   [[ NOTE: this material is now out of date with the rest of the
   document. ]]

5.2.1.  Two CLUE-capable endpoints

   This is the case where two CLUE-capable endpoints are willing to set
   up a CLUE telepresence session.  In the following, a possible
   approach addressing the problem is illustrated.




         +----------+                      +-----------+
         |   EP1    |                      |    EP2    |
         |          |                      |           |
         +----+-----+                      +-----+-----+
              |                                  |
              |                                  |
              | INVITE (BASIC SDP+COMEDIA)       |
              |--------------------------------->|
              |                                  |
              |                                  |
              |        200 0K (BASIC SDP+COMEDIA)|
              |<---------------------------------|
              |                                  |
              |                                  |
              | ACK                              |
              |--------------------------------->|
              |                                  |
              |                                  |
              |                                  |
              |<################################>|
              |  ?? BASIC SDP MEDIA SESSION  ??  |
              |<################################>|
              |                                  |
              |                                  |
              |        CLUE CTRL CHANNEL SETUP   |
              |<================================>|



Kyzivat, et al.         Expires December 15, 2013              [Page 19]

Internet-Draft               CLUE Signaling                    June 2013


              |            ...                   |
              |<================================>|
              |   CLUE CTRL CHANNEL ESTABLISHED  |
              |<================================>|
              |                                  |
              |                                  |
              | ADVERTISEMENT 1                  |
              |*********************************>|
              |                                  |
              |                                  |
              |                  ADVERTISEMENT 2 |
              |<*********************************|
              |                                  |
              |                                  |
              |                                  |
              |                      CONFIGURE 1 |
              |<*********************************|
              |                                  |
              |                                  |
              | CONFIGURE 2                      |
              |*********************************>|
              |                                  |
              |                                  |
              |                                  |
              | REINVITE (UPDATED SDP)           |
              |--------------------------------->|
              |                                  |
              |                                  |
              |              200 0K (UPDATED SDP)|
              |<---------------------------------|
              |                                  |
              |                                  |
              | ACK                              |
              |--------------------------------->|
              |                                  |
              |<################################>|
              |   UPDATED SDP MEDIA SESSION      |
              |<################################>|
              |                                  |
              |                                  |
              |                                  |
              |                                  |
              |                                  |
              v                                  v







Kyzivat, et al.         Expires December 15, 2013              [Page 20]

Internet-Draft               CLUE Signaling                    June 2013


   First, endpoint EP1 sends to endpoint EP2 a SIP INVITE including in
   the SDP body the basilar audio and video capabilities ("BASIC SDP")
   and the information needed for opening a control channel to be used
   for CLUE protocol messages exchange, according to what is envisioned
   in the COMEDIA approach ("COMEDIA") for DTLS/SCTP channel
   [I-D.ietf-mmusic-sctp-sdp].

   After the successful SIP O/A phase, EP1 and EP2 are able to exchange
   audio and video streams ("BASIC AUDIO AND VIDEO").  [RP: Is this
   channel needed at this point of the call flow?]  [RP: which streams
   are sent on this channel in this moment?]

   Moreover, another effect of the above successful SIP O/A phase, is
   the opening of the control channel.  After the setup phase, the
   channel is established and CLUE protocol messages can flow above it.

   CLUE protocol messages have not been formally defined yet.  However,
   up to now there is a common agreement on their names and their main
   purposes, that should be following.

   CLUE protocol ADVERTISEMENT messages are used to better describe the
   media provider's available streams in order to make the media
   consumer able to reproduce them in a more realistic fashion, as it is
   the main purpose of a telepresence session.  These messages are
   needed since it is not possible in an agile fashion to describe
   spatial information and several further metadata about media captures
   via SDP.

   In this document it is assumed that ADVERTISEMENT messages contain
   the full description of the sender's telepresence room in terms of
   available media capture and encoding capabilities.  [RP: open issue -
   the mapping between what is described in the advertisement messages
   and media streams exchanged in the eventual basic SDP session already
   established]

   CLUE protocol CONFIGURE messages are used to let the media consumer
   indicate to the media provider which are the available streams it is
   interested in, so that the media provider can send to the media
   consumer what it desires.

   In the following, it is considered one of the possible call flow that
   can lead to the desired session configuration.

   EP1 sends the ADVERTISEMENT message to EP2 (ADVERTISEMENT 1), which
   replies with a CONFIGURE message (CONFIGURE 1).  After receiving the
   CONFIGURE message, EP1 assumes the CLUE offer/answer negotiation it
   started is completed.  EP1 then can issue a REINVITE to EP2 with an
   SDP body updated accordingly to the CLUE messages exchange.



Kyzivat, et al.         Expires December 15, 2013              [Page 21]

Internet-Draft               CLUE Signaling                    June 2013


   Similarly, EP2 sends its ADVERTISEMENT to EP1 (ADVERTISEMENT 2),
   which replies with a CONFIGURE (CONFIGURE 2).

   EP1 re-negotiates the media involved in the existent session via a
   SIP REINVITE message to EP2.  The SDP body within the REINVITE
   message reflects the negotiation carried on by the CLUE message
   exchange.  In the case represented in figure, EP2 builds the 200 OK
   response also according to the second CLUE O/A negotiation.

5.2.2.  A case with a non-CLUE-capable endpoint

   In this example, one of the two involved endpoint (EP2) is not CLUE-
   capable, i.e., it is not able to use the CLUE protocol.




         +----------+                      +-----------+
         |   EP1    |                      |    EP2    |
         |          |                      |           |
         +----+-----+                      +-----+-----+
              |                                  |
              |                                  |
              | INVITE (BASIC SDP+COMEDIA)       |
              |--------------------------------->|
              |                                  |
              |                                  |
              | 200 0K (BASIC SDP + *NO* COMEDIA)|
              |<---------------------------------|
              |                                  |
              |                                  |
              | ACK                              |
              |--------------------------------->|
              |                                  |
              |                                  |
              |                                  |
              |<################################>|
              |  ?? BASIC SDP MEDIA SESSION  ??  |
              |<################################>|
              |                                  |
              |                                  |
              |                                  |
              | REINVITE (UPDATED SDP)           |
              |--------------------------------->|
              |                                  |
              |                                  |
              |              200 0K (UPDATED SDP)|
              |<---------------------------------|



Kyzivat, et al.         Expires December 15, 2013              [Page 22]

Internet-Draft               CLUE Signaling                    June 2013


              |                                  |
              |                                  |
              | ACK                              |
              |--------------------------------->|
              |                                  |
              |<################################>|
              |   UPDATED SDP MEDIA SESSION      |
              |<################################>|
              |                                  |
              |                                  |
              |                                  |
              |                                  |
              |                                  |
              v                                  v



   Endpoint EP1 sends to endpoint EP2 a SIP INVITE including in the SDP
   body the basilar audio and video capabilities ("BASIC SDP") and the
   information needed for opening a control channel to be used for CLUE
   protocol messages exchange, as envisioned by the COMEDIA approach
   ("COMEDIA") for DTLS/SCTP channel [I-D.ietf-mmusic-sctp-sdp].

   Since EP2 is not CLUE-capable, it answers with a 200 OK in which
   basic audio and video capabilities are accepted while the opening of
   the CLUE channel is rejected.

   From such a response, EP1 understands the peer is not CLUE-capable.
   In this example, EP1 re-negotiates the session according to a pre-
   determined bulk of media streams to be sent to non-CLUE-capable
   endpoints.

6.  CLUE requirements on SDP O/A

   Any SDP extensions required to support CLUE signaling should be
   specified here.  Then we will need to take action within MMUSIC to
   make those happen.  This section should be empty and removed before
   this document becomes an RFC.

   NOTE: The RTP mapping document [I-D.even-clue-rtp-mapping] is also
   likely to call for SDP extensions.  We will have to reconcile how to
   coordinate these two documents.









Kyzivat, et al.         Expires December 15, 2013              [Page 23]

Internet-Draft               CLUE Signaling                    June 2013


7.  SIP Signaling

   (Placeholder) This may be unremarkable.  If so we can drop it.

8.  Interoperation with Legacy SIP Devices

   This may just describe how the degenerate form of the general
   mechanisms work for legacy devices.  Or it may describe special case
   handling that we mandate as part of CLUE.  Or it may just discuss
   non-normative things for implementors should consider.

9.  CLUE over RTCWEB

   We may want to rule this out of scope for now.  But we should be
   thinking about this.

10.  Open Issues

   Here are issues pertinent to signaling that need resolution.
   Resolution will probably result in changes somewhere in this
   document, but may also impact other documents.

   o  While the preference is to multiplex multiple capture encodings
      over a single RTP session, this will not always be desirable or
      possible.  The factors that prevent multiplexing may come from
      either the provider or the consumer.  So the extent of
      multiplexing must be negotiated.  The decision about how to
      multiplex affects the number and grouping of m-lines in the SDP.
      The endpoint of a CLUE session that sends an offer needs to know
      the mapping of capture encodings to m-lines for both sides.

      AFAIK this issue hasn't yet been considered at all.

11.  What else?

12.  Acknowledgements

   The team focusing on this draft consists of: Roni Even, Rob Hansen,
   Christer Holmberg, Paul Kyzivat, Simon Pietro-Romano, Roberta Presta.

   Christian Groves has contributed detailed comments and suggestions.

   The author list should be updated as people contribute substantial
   text to this document.

13.  IANA Considerations

   TBD



Kyzivat, et al.         Expires December 15, 2013              [Page 24]

Internet-Draft               CLUE Signaling                    June 2013


14.  Security Considerations

   TBD

15.  Change History

   -03:

      *  Added a syntax section with an XML schema for CLUE messages.
         This is a strawhorse, and is very incomplete, but it
         establishes a template for doing this based on elements defined
         in the data model.  (Thanks to Roberta for help with this!)

      *  Did some rewording to fit the syntax section in and reference
         it.

      *  Did some relatively minor restructuring of the document to make
         it flow better in a logical way.

   -02:  A bunch of revisions by pkyzivat:

      *  Moved roberta's call flows to a more appropriate place in the
         document.

      *  New section on versioning.

      *  New section on NAK.

      *  A couple of possible alternatives for message acknowledgment.

      *  Some discussion of when/how to signal changes in provider
         state.

      *  Some discussion about the handling of transport errors.

      *  Added a change history section.

      These were developed by Lennard Xiao, Christian Groves and Paul,
      so added Lennard and Christian as authors.

   -01:  Updated by roberta to include some sample call flows.

   -00:  Initial version by pkyzivat.  Established general outline for
      the document, and specified a few things thought to represent wg
      consensus.

16.  References




Kyzivat, et al.         Expires December 15, 2013              [Page 25]

Internet-Draft               CLUE Signaling                    June 2013


16.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [I-D.ietf-clue-framework]
              Duckworth, M., Pepperell, A., and S. Wenger, "Framework
              for Telepresence Multi-Streams", draft-ietf-clue-
              framework-10 (work in progress), May 2013.

   [I-D.presta-clue-data-model-schema]
              Presta, R. and S. Romano, "An XML Schema for the CLUE data
              model", draft-presta-clue-data-model-schema-03 (work in
              progress), March 2013.

   [I-D.ietf-mmusic-sctp-sdp]
              Loreto, S. and G. Camarillo, "Stream Control Transmission
              Protocol (SCTP)-Based Media Transport in the Session
              Description Protocol (SDP)", draft-ietf-mmusic-sctp-sdp-03
              (work in progress), January 2013.

   [I-D.tuexen-tsvwg-sctp-dtls-encaps]
              Jesup, R., Loreto, S., Stewart, R., and M. Tuexen, "DTLS
              Encapsulation of SCTP Packets for RTCWEB", draft-tuexen-
              tsvwg-sctp-dtls-encaps-01 (work in progress), July 2012.

16.2.  Informative References

   [RFC4353]  Rosenberg, J., "A Framework for Conferencing with the
              Session Initiation Protocol (SIP)", RFC 4353, February
              2006.

   [I-D.even-clue-sdp-clue-relation]
              Even, R., "Signalling of CLUE and SDP offer/answer",
              draft-even-clue-sdp-clue-relation-01 (work in progress),
              October 2012.

   [I-D.even-clue-rtp-mapping]
              Even, R. and J. Lennox, "Mapping RTP streams to CLUE media
              captures", draft-even-clue-rtp-mapping-05 (work in
              progress), February 2013.

   [I-D.hansen-clue-sdp-interaction]
              Hansen, R., "SDP and CLUE message interactions", draft-
              hansen-clue-sdp-interaction-01 (work in progress),
              February 2013.





Kyzivat, et al.         Expires December 15, 2013              [Page 26]

Internet-Draft               CLUE Signaling                    June 2013


Authors' Addresses

   Paul Kyzivat
   Huawei

   Email: pkyzivat@alum.mit.edu


   Lennard Xiao
   Huawei

   Email: lennard.xiao@huawei.com


   Christian Groves
   Huawei

   Email: Christian.Groves@nteczone.com

































Kyzivat, et al.         Expires December 15, 2013              [Page 27]
