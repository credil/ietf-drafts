<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes" ?>

<rfc category="info" ipr="trust200902" docName="draft-wang-6tsch-6tus-01">

<front>
   <title abbrev="6tsch-6tus">
      6tus Layer Specification
   </title>
   <author initials="Q" surname="Wang" fullname="Qin Wang" role="editor">
      <organization>Univ. of Sci. and Tech. Beijing </organization>
      <address>
         <postal>
            <street>30 Xueyuan Road</street>
            <city>Beijing</city>
            <region>Hebei</region>
            <code>100083</code>
            <country>China</country>
         </postal>
         <phone>+86 (10) 6233 4781</phone>
         <email>wangqin@ies.ustb.edu.cn</email>
      </address>
   </author>
   <author initials="X" surname="Vilajosana" fullname="Xavier Vilajosana" >
      <organization>Universitat Oberta de Catalunya</organization>
      <address>
         <postal>
            <street>156 Rambla Poblenou</street>
            <city>Barcelona</city>
            <region>Catalonia</region>
            <code>08018</code>
            <country>Spain</country>
         </postal>
         <phone>+34 (646) 633 681</phone>
         <email>xvilajosana@uoc.edu</email>
      </address>
   </author>
   <author initials="T" surname="Watteyne" fullname="Thomas Watteyne" >
      <organization>Linear Technology</organization>
      <address>
         <postal>
            <street>30695 Huntwood Avenue</street>
            <city>Hayward</city>
            <region>CA</region>
            <code>94544</code>
            <country>USA</country>
         </postal>
         <phone>+1 (510) 400-2978</phone>
         <email>twatteyne@linear.com</email>
      </address>
   </author>
   <date month="May" year="2013" />
   <workgroup>6TSCH</workgroup>
   <keyword>Draft</keyword>
   <abstract>
      <t>
         The recently published <xref target="IEEE802154e"/> standard formalizes the concept of link-layer resources in LLNs. Nodes are synchronized and follow a schedule. A time slot in that schedule corresponds to an atomic link-layer resource, and can be allocated to any pair of neighbors in the network. This allows the schedule to be built to tightly match each node's bandwidth, latency and energy constraints, while ensuring collision-free communication. The <xref target="IEEE802154e"/> standard does not, however, present a mechanism to do so, as building and managing the schedule is out of the standard's scope. Routing layers such as the IETF IPv6 Routing Protocol for LLNs (RPL) provide a mechanism to route multipoint-to-point traffic (from devices inside the LLN towards a central control point) and point-to-multipoint traffic (from the central control point to the devices inside the LLN). Network layer overlays cannot be optimized and adapted to take advantage of the cell-based topology created by the underlying TSCH MAC layer as a missing set of functionalities need to be defined. This document describes the 6tus layer and the main commands it provides to upper network layers such as RPL or GMPLS. The set of functionalities includes feedback metrics from cell states so network layers can take routing decisions, TSCH configuration and control procedures, and the support for centralized and decentralized scheduling policies.
      </t>
   </abstract>
</front>

<middle>
   <section title="Introduction">
      <t>
         As presented in <xref target="I-D.watteyne-6tsch-tsch-lln-context"/>, the <xref target="IEEE802154e"/> standard defines the mechanisms for a TSCH node to communicate given a schedule. It does not, however, define the policies to build and maintain the TSCH schedule, match that schedule to the multi-hop paths maintained by a network layer such as RPL or a 2.5 layer such as GMPLS, adapt the resources allocated between neighbor nodes to the data traffic flows, enforce a differentiated treatment for data generated at the application layer and signaling messages needed by 6LoWPAN and RPL to discover neighbors, react to topology changes, self-configure IP addresses, or manage keying material.
      </t>
      <t>
         In a TSCH network, the MAC layer is not in charge of setting up the schedule that controls the connectivity graph of the network and the resources allocated to each cell in that topology. This responsibility is left to an upper layer, defined in this document and called "6tus" (pronounced "sixtus").
      </t>
      <t>
         This document describes the 6tus layer and the main commands provided to upper network layers such as RPL or GMPLS. The set of functionalities include feedback metrics from cell state so the network layer can take routing decisions, TSCH configuration and control procedures and support centralized and decentralized scheduling policies. The 6tus layer addresses the set of functionalities described in <xref target="I-D.watteyne-6tsch-tsch-lln-context"/>.
      </t>
      <t>
         For example, network formation in a TSCH network is handled by the use of Enhanced Beacons (EB). EBs include information for joining nodes to be able to synchronize and set up an initial network topology, however <xref target="IEEE802154e"/> does not specify how the period of EBs is configured, nor the rules for a node to select a particular node to join. The 6tus layer offers a set of commands so control mechanisms can be introduced on top of TSCH so nodes configure to join a specific node and obtain an unique 16-bit identifier from the network. Once a network is formed, 6tus maintains the network's health, allowing for nodes to stay synchronized. It supplies mechanisms to manage each node's time source neighbor and configure the EB interval. Network layers running on top of 6tus take advantage of the TSCH MAC layer information so routing metrics, topological information, energy consumption and latency requirements can be adjusted to TSCH and adapted to application requirements.
      </t>
      <t>
         TSCH requires a mechanism to manage its schedule; 6tus provides a set of commands for upper layers to set up specific schedules, either explicitly by detailing specific cell information, or by allowing 6tus to establish a schedule given a bandwidth or latency requirement. 6tus is designed to enable centralized, decentralized or hybrid scheduling entities. 6tus enables internal TSCH queuing configuration, size of buffers, packet priorities, and transmission failure behavior, and defines mechanisms to encrypt and authenticate MAC slotframes.
      </t>
   </section>
   <section title="6tus Layer Specification">
      <section title="Overview">
         <t>
            6tus is a layer which is the next-higher layer for TSCH, as detailed in <xref target="I-D.draft-thubert-6tsch-architecture"/>. 6tus offers both management and data interfaces to an upper layer. It includes monitoring and statistics collection, both of which are configurable through the management interface.
         </t>
         <t>
            6tus distinguishes between hard cells and soft cells. It therefore requires an extra flag to all cells in the TSCH schedule, as detailed in <xref target="sec_cellmodel"/>.
         </t>
         <t>
            When a higher layer gives 6tus a 6LoWPAN packet for transmission, 6tus maps it to the appropriate outgoing priority-based queue, as detailed in <xref target="sec_dataconveymodel"/>.
         </t>
         <t>
            All commands of the management and data interfaces are detailed in <xref target="sec_cmd"/>. This set of commands is designed to support centralized, decentralized and hybrid scheduling entities.
         </t>
         <t>
            6tus defines TSCH Information Elements (IEs) for neighbors nodes to negociate scheduling cells in the TSCH schedule. The format of those is given in <xref target="sec_message_formats"/>.
         </t>
         <t>
            Example data exchanges between neighbor nodes are illustrated in <xref target="sec_seq"/>.
         </t>
         <t>
            <xref target="sec_statistics"/> defines how 6tus gathers statistics (e.g. link quality, energy level, queue usage), and what commands an upper layer can use to configure and retrieve statistics.
         </t>
         <t>
            6tus can be configured to monitor some cells it has scheduled to detect cells with poor performance. It can then automatically move those cells inside the TSCH schedule. This behavior is described in <xref target="sec_monitoring"/>
         </t>
      </section>
      <section title="Cell Model"           anchor="sec_cellmodel">
         <t>
            IEEE802.15.4e defines a set of options attached to each cell. A cell can be a Transmit cell, a Receive cell, a Shared cell or a Timekeeping cell. These options are not exclusive, as a cell can be qualified with more than one of them. The IEEE802.15.4e MLME-SET-LINK.request command uses a linkOptions bitmap to specify the options of a cell. Acceptable values are:
            <list>
               <t>b0    = Transmit</t>
               <t>b1    = Receive</t>
               <t>b2    = Shared</t>
               <t>b3    = Timekeeping</t>
               <t>b4-b7 = Reserved</t>
            </list>
            Only Transmit cells can also be marked as Shared cells. When the shared bit is set, and a back-off procedure is applied to handle collisions. Shared behavior is not defined for Receive cells.
         </t>
          <t>6tus allows an upper layer to schedule a cell at a specific timeslot and channel offset in a specific slotframe. 6tus follows the hard cell reservation process described in <xref target="sec_seq_createhard"/>. </t>
          <t>In addition, 6tus allows an upper layer to schedule a certain amount of bandwidth to a neighbor, without having to specify the exact timeslot(s) and channel offset(s). 6tus follows the soft cell reservation process described in <xref target="sec_seq_createsoft"/>. Once bandwidth is reserved, 6tus is in charge of ensuring that this requirement is continuously satisfied, as described in <xref target="sec_monitoring"/>. 6tus dynamically reallocates slots if needed, and overprovisions if required. </t>
          <t>Given this mechanism, 6tus defines hard cells (which have been requested specifically) and soft cells (which that can be reallocated dynamically). The hard/soft flag is introduced by the 6tus layer as an extension of the IEEE802.15.4e LinkOption flags. This option is mandatory; all cells are either hard or soft.
         </t>
         <t>
            With the addition of the Hard/Soft flag, the resulting flags are:
            <list>
               <t>b0    = Transmit</t>
               <t>b1    = Receive</t>
               <t>b2    = Shared</t>
               <t>b3    = Timekeeping</t>
               <t>b4    = Hard (1)/Soft (0)</t>
               <t>b5-b7 = Reserved</t>
            </list>
         </t>
         <section title="hard cells">
            <t>
               A hard cell is a cell that cannot be dynamically reallocated by 6tus. A hard cell is uniquely identified by the following tuple:
               <list>
                  <t>slotframe id: id of the slotframe this cell is part of.</t>
                  <t>timeslot: the slot within the slotframe.</t>
                  <t>channel offset.</t>
                  <t>LinkOption bitmap: bitmap as defined in <xref target="sec_cellmodel"/>, including the hard/soft bit which must be set to 1.</t>
               </list>
            </t>
         </section>
         <section title="soft cells">
            <t>
               A soft cell is a cell that can be reallocated by 6tus dynamically. The hard/soft bit must be set to 0. This cell is installed by 6tus given a specific bandwidth requirement. soft cells are installed through the soft cell negotiation process described in <xref target="sec_seq"/>.
            </t>
         </section>
      </section>
      <section title="Data Convey Model"    anchor="sec_dataconveymodel">
         <t>
            Based on the established TSCH schedule, 6tus is responsible for feeding the data flow from the upper layer into TSCH. This section describes how 6tus shapes data from upper layer (e.g. RPL, 6LoWPAN), and feeds it to TSCH. Since 6tus is a layer between TSCH and 6LoWPAN, the properties assciated with a packet/fragment from the upper layer includes the next hop neighbor (DestAddr) and expected sending priority of the packet (Priority). The output to TSCH is the fragment corresponding to the next active cell in the TSCH schedule.
         </t>
         <figure anchor="fig_I-mux_mux">
            <preamble>
               6tus Data Convey Model
            </preamble>
<artwork>
                       |
                       | (DestAddr, Priority, Fragment)
                       |
   +---------------------------------------+
   |                 I-MUX                 |
   +---------------------------------------+
     |       |       |       |    ....   |
     |       |       |       |           |
   +---+   +---+   +---+   +---+       +---+
   |   |   |   |   |   |   |   |       |   |
   |Q1 |   |Q2 |   |Q3 |   |Q4 |       |Qn |
   |   |   |   |   |   |   |   |       |   |
   +---+   +---+   +---+   +---+       +---+
     |       |       |       |           |
     |       |       |       |           |
   +---------------------------------------+
   |                 MUX                   |
   +---------------------------------------+
                      |
                      |
                    +---+
                    |PDU|
                    +---+
                      |
                      | TSCH MAC-payload
                      |
</artwork>
         </figure>
         <t>
            In <xref target="fig_I-mux_mux"/>, Qi represents a queue, which is either broadcast or unicast, and is assigned a priority. The number of queues is configurable. The relationship between queues and slotframes is configurable. For example, for a given queue, only one specific slotframe can be used, or all of the slotframes can be used, or a subset of slotframes can be used.
         </t>
         <t>
            When 6tus receives a packet to transmit through a Send.data command (<xref target="sec_cmd_data"/>), the I-MUX module selects a queue in which to insert it. If the packet's destination address is a unicast (resp. broadcast) address, it will be inserted into a unicast (resp. broadcast) queue.
         </t>
         <t>
            The MUX module is invoked at each scheduled transmit cell by TSCH. When invoked, the MUX module goes through the queues, looking for the best frame to send. If it finds a frame, it hands it over to TSCH for transmission. If the next active cell is a broadcast cell, it selects a fragment only from broadcast queues.
         </t>
         <t>
            How the MUX module selects the best frame is configurable. Typically, the following rules are used:
            <list>
               <t>The frame's layer 2 destination address must match the neighbor address associated with the transmit cell.</t>
               <t>Frames from a queue with a high priority must be sent before frames from a queue with a low priority.</t>
            </list>
            Further rules can be configured to satisfy specific QoS requirements.
         </t>
      </section>
      <section title="Commands"                                      anchor="sec_cmd">
         <t>
            6tus provides a set of commands a higher layer can call, including management commands and data commands. Most of these commands are related to the management of slotframes, time slots and scheduling information. 6tus also provides an interface allowing an upper layer to retrieve status information and statistics. This section lists the commands offered by 6tus.
         </t>
         <section title="Cell Commands"                              anchor="sec_cmd_cell">
            <t>
               The following methods allow an upper layer to manage the network schedule:
            </t>
            <section title="CREATE.hardcell"                         anchor="sec_cmd_cell_createhard">
               <t>
                  Creates one or more hard cells in the schedule. Fails if the cell already exists. A cell is uniquely identified by the tuple (slotframe id, timeslot, channel offset).
               </t>
               <t>
                  To create a hard cell, the upper layer specifies:
                  <list>
                     <t>slotframe id: id of the slotframe this slot will be scheduled in.</t>
                     <t>time slot: the specific time slot number.</t>
                     <t>channel offset: the frequency offset.</t>
                     <t>LinkOption bitmap: bitmap as defined in <xref target="sec_cellmodel"/></t>
                     <t>target node address: the address of that node to communicate with over this cell. In case of broadcast cells this is the broadcast address.</t>
                  </list>
               </t>
               <t>
                  6tus schedules the cell and marks it as a hard cell, indicating that it cannot reschedule this cell.
               </t>
            </section>
            <section title="CREATE.softcell"                         anchor="sec_cmd_cell_createsoft">
               <t>
                  To create a soft cell, the upper layer specifies:
                  <list>
                     <t>slotframe id: id of the slotframe this slot will be scheduled in</t>
                     <t>number of cells: the required number of soft cells.</t>
                     <t>LinkOption bitmap: bitmap as defined in <xref target="sec_cellmodel"/></t>
                     <t>target node address: the address of that node to communicate with over this cell. In case of broadcast cells this is the broadcast address.</t>
                     <t>QoS level: the cell redundancy policy. The policy can be for example STRICT, BEST_EFFORT, etc.</t>
                  </list>
               </t>
               <t>
                  6tus is responsible for picking the exact timeslot and channel offset in the schedule, and ensure that the target node chooses the same. 6tus marks these cells as soft cell, indicating that it will continuously monitor their performance and reschedule if needed.
               </t>
               <t>
                  6tus deals with the allocation process by negotiation with the target node. The negotiation process is described in <xref target="sec_seq_createsoft"/>. The command returns the list of created cells defined by (slotframe id, time slot number, channel offset). It fails if the required number of cells is higher than the available number of cells in the schedule. It fails if the negotiation with the target node fails. It fails if the cell Option bitmap indicates that the cell MUST be Hard.
              </t>
           </section>
            <section title="READ.cell"                               anchor="sec_cmd_cell_read">
               <t>
                  Given a (slotframe id, time slot number, channel offset), retrieves the cell information. Fails if the cell does not exist. The returned information contains:
                  <list>
                     <t>slotframe id: the id of the slotframe where this cell is installed.</t>
                     <t>time slot: the time slot where the cell is set.</t>
                     <t>channel offset: the selected channel offset for the cell.</t>
                     <t>LinkOption bitmap: bitmap as defined in <xref target="sec_cellmodel"/></t>
                     <t>target node address: the target address of that cell. In case of broadcast cells this is the broadcast address.</t>
                  </list>
               </t>
               <t>
                  A read command can be issued for any cell, hard or soft.
               </t>
            </section>
            <section title="UPDATE.cell"                             anchor="sec_cmd_cell_update">
               <t>
                  Update a hard cell, i.e. move it to a different timeslot and/or channel offset. Fails if the cell does not exist. Requires a (slotframe id, time slot, channel offset), type of cell and target node are the fields that can be updated. soft cells cannot be updated by the UPDATE.cell command. REALLOCATE.softcell (<xref target="sec_cmd_cell_reallocatesoft"/>) MUST be used instead.
               </t>
            </section>
            <section title="DELETE.hardcell"                         anchor="sec_cmd_cell_deletehard">
               <t>
                  To removes a hard cell, the upper layer specifies:
                  <list>
                     <t>slotframe id: the id of the slotframe where this cell is installed.</t>
                     <t>time slot: the time slot where the cell is set.</t>
                     <t>channel offset: the selected channel offset for the cell.</t>
                  </list>
               </t>
               <t>
                  This removes the hard cell from the node's schedule.
               </t>
            </section>
            <section title="DELETE.softcell"                         anchor="sec_cmd_cell_deletesoft">
               <t>
                  To remove a (number of) soft cell(s), the upper layer specifies:
                  <list>
                     <t>slotframe id: the id of the slotframe where this cell is installed.</t>
                     <t>number of cells: the number of cells to be removed</t>
                     <t>LinkOption bitmap: bitmap as defined in <xref target="sec_cellmodel"/></t>
                     <t>target node address: the target address of that cell. In case of broadcast cells this is the broadcast address.</t>
                  </list>
               </t>
               <t>
                  In the case a soft cell wants to be moved from the allocated slot so a hard cell can be installed instead, the REALLOCATE.softcell (<xref target="sec_cmd_cell_reallocatesoft"/>) MUST be used.
               </t>
            </section>
            <section title="REALLOCATE.softcell"                     anchor="sec_cmd_cell_reallocatesoft">
               <t>
                  To force a move of a soft cell, the upper layer specifies:
                  <list>
                     <t>slotframe id: the id of the slotframe where the cell is allocated.</t>
                     <t>time slot: the slot number where that cell is installed.</t>
                     <t>channel offset: the channel offset for that cell.</t>
                  </list>
               </t>
               <t>
                  The reallocated cell will be installed in a different slot, channel offset but same slotframe. hard cells cannot be reallocated.
               </t>
            </section>
            <section title="Hardcell Command Behavior"               anchor="sec_cmd_cell_deschard">
               <t>The following table describe the behavior of 6tus upon reception of the hard cell management commands.</t>
               <figure>
                  <preamble>
                     hard cell Operations behavior
                  </preamble>
<artwork>
+---------------------------------+---------------------------------+
|        6tus commands            |          6tus behavior          |
+---------------------------------+---------------------------------+
| Create.hardcell                 | 6tus_ReserveHardCellReq() -ACK  |
| (NeigAddr, SlotframeID,         |                                 |     
| SlotOffset,                     | If  NeigAddr ==Broadcast Address|
| ChannelOffset, LinkOption)      | Then LinkType=ADVERTISING       |
|                                 | Add cell to EB's FrameAndCellIE |
+---------------------------------+---------------------------------+
| Read.cell                       | MLME-GET.request                |
|(NeigAddr,SlotframeID,SlotOffset,|                                 |
| ChannelOffset, LinkOption)      |                                 |
+---------------------------------+---------------------------------+
| Delete.hardcell                 | 6tus_RemoveHardCellReq() --ACK  |
| (NeigAddr ,SlotOffset,          |                                 |
| ChannelOffset, LinkOption)      | If LinkType=ADVERTISING, it is a|
|                                 | broadcast cell, Then Remove cell|
|                                 | from EB's FrameAndCellIE        |
+---------------------------------+---------------------------------+
| Update.cell                     | 6tus_RemoveHardCellReq() --ACK  |
| (OldFrameID, OldSlotOffset,     | 6tus_ReserveHardCellReq() --ACK |
|  OldChannelOffset, NewFrameID,  | (with same NeigAddr,LinkOption) |
|  NewSlotOffset,NewChannelOffset)| If old cell is in EB            |
|                                 | Then modify EB                  |
+---------------------------------+---------------------------------+
</artwork>
               </figure>
            </section>
            <section title="Softcell Command Behavior"               anchor="sec_cmd_cell_descsoft">
               <t>The following table describe the behavior of 6tus upon reception of the Softcell management commands.</t>
               <figure>
                  <preamble>
                     soft cell Operations behavior
                  </preamble>
<artwork>
+--------------------------------+----------------------------------+
|         6tus commands          |                 6tus behavior    |
+--------------------------------+----------------------------------+
| Create.softcell                | 6tus_ReserveSoftCellReq() -ACK   |
|(NeigAddr, NumCell,LinkOption,  | ACK ---6tus_ReserveSoftCellResp()|
| SlotframeID, QoSLevel)         |                                  |
+--------------------------------+----------------------------------+
| Read.cell                      | MLME-GET.request                 |
|(NeigAddr,SlotframeID,          |                                  |
| SlotOffset,ChannelOffset)      |                                  |
+--------------------------------+----------------------------------+
| Delete.softcell                | 6tus_RemoveSoftCellReq() -- ACK  |
| (NeigAddr ,NumCell,            | If LinkType =ADVERTISING         |
| LinkOption, SlotframeID)       | i.e. a broadcast cell Then Remove|
|                                | cell from EB's FrameAndCellIE    |
+--------------------------------+----------------------------------+
| Reallocate.softcell            | 6tus_RemoveSoftCellReq() -- ACK  |
|(NeigAddr,SlotframeID,          | 6tus_ReserveSoftCellReq() -- ACK |
| SlotOffset,ChannelOffset)      | ACK ---6tus_ReserveSoftCellResp()|
+--------------------------------+----------------------------------+
</artwork>
               </figure>
            </section>
         </section>
         <section title="Slotframe Commands"                         anchor="sec_cmd_frame">
            <t>
               6tus provides the following commands to manage TSCH slotframes.
            </t>
            <section title="CREATE.slotframe"                        anchor="sec_cmd_frame_create">
               <t>
                  Creates a new slotframe. Returns the slotframe id that corresponds to its priority (SlotFrameHandle). The command requires:
                  <list>
                     <t>number of slots: the required number of slots.</t>
                  </list>
                  Fails if the number of required slots is less than zero.
               </t>
            </section>
            <section title="READ.slotframe"                          anchor="sec_cmd_frame_read">
               <t>
                  Returns the information of a slotframe given its slotframe id. The command returns:
                  <list>
                     <t>slotframe id: the id of the slotframe. (SlotFrameHandle)</t>
                     <t>number of slots: the number of slots.</t>
                  </list>
               </t>
               <t>
                  Fails if the slotframe id does not exist.
               </t>
            </section>
            <section title="UPDATE.slotframe"                        anchor="sec_cmd_frame_update">
               <t>
                  Change the number of slots in a slotframe. The command requires:
                  <list>
                     <t>slotframe id: the id of the slotframe.</t>
                     <t>number of slots: the number of slots to be updated.</t>
                  </list>
               </t>
               <t>
                  Fails if the number of required slots is less than zero. Fails if the slotframe id does not exist.
               </t>
            </section>
            <section title="DELETE.slotframe"                        anchor="sec_cmd_frame_delete">
               <t>
                  Deletes a slotframe. The command requires:
                  <list>
                     <t>slotframe id: the id of the slotframe.</t>
                  </list>
                  Fails if the slotframe id does not exist.
               </t>
            </section>
            <section title="Slotframe Command Behavior"              anchor="sec_cmd_frame_desc">
               <t>
                  The following table describes the behavior of 6tus upon reception of the Slotframe management commands.
               </t>
               <figure>
                  <preamble>
                     Slotframe Management Operations behavior
                  </preamble>
<artwork>
+--------------------------------+----------------------------------+
|            6tus commands       |             6tus behavior        |
+--------------------------------+----------------------------------+
| Create.slotframe(NumSlot)      | MLME-SET-SLOTFRAME.request       |
|                                |(operation=ADD)                   |
+--------------------------------+----------------------------------+
| Read.slotframe(SlotframeID)    | MLME-GET.request                 |
+--------------------------------+----------------------------------+
| Delete.slotframe(SlotframeID)  | MLME-SET-SLOTFRAME.request       |
|                                |(operation=DELETE)                |
+--------------------------------|----------------------------------+
| Update.slotframe(SlotframeID   | MLME-SET-SLOTFRAME.request       |
|  ,NumSlot)                     |(operation=MODIFY)                |
+--------------------------------+----------------------------------+
</artwork>
               </figure>
            </section>
         </section>
         <section title="Monitoring Commands"                        anchor="sec_cmd_mon">
            <t>
               Monitoring commands provide the means for upper layers to configure whether 6tus must ensure the required bandwidth. This procedure is achieved through over-provisioning according to cell status feedback. Monitoring is also in charge of reallocating soft cells that are under the required QoS. The mechanism is described in <xref target="sec_monitoring"/>.
            </t>
            <section title="CONFIGURE.monitoring"                    anchor="sec_cmd_mon_config">
               <t>
                  Configures the level of QoS the Monitoring process must enforce. The command requires:
                  <list>
                     <t>slotframe id: the id of the slotframe.</t>
                     <t>target node: the destination node.</t>
                     <t>enforce policy: The policy used to enforce the QoS requirements. Can be for example DISABLE, BEST_EFFORT, STRICT, OVER-PROVISION, etc.</t>
                  </list>
                  Fails if the slotframe id does not exist.
               </t>
            </section>
            <section title="READ.monitoring.status"                  anchor="sec_cmd_mon_read">
               <t>
                  Reads the current Monitoring status. Requires the following parameters.
                  <list>
                     <t>slotframe id: the id of the slotframe.</t>
                     <t>target node: the destination node.</t>
                  </list>
               </t>
               <t>
                  Returns the QoS levels for that Target node on that slotframe.
                  <list>
                     <t>allocated_hard: Number of hard cells allocated.</t>
                     <t>allocated_soft: Number of soft cells allocated.</t>
                     <t>provisioned: the extra provisioned cells. 0 if CONFIGURE.qos enforce is DISABLE.</t>
                     <t>QoS: the current QoS. Including overprovisioned cells, i.e what bandwidth is being obtained including the overprovisioned cells. </t>
                     <t>RQoS: the real QoS without provisioned cells. What is the actual bandwidth without taking into account the overprovisioned cells.</t>
                  </list>
               </t>
               <t>
                  Fails if the slotframe id does not exist.
               </t>
            </section>
            <section title="Monitoring Command Behavior"             anchor="sec_cmd_mon_desc">
               <t>
                  The following table describes the behavior of 6tus upon reception of the Monitoring management commands.
               </t>
               <figure anchor="MonitoringBehavior">
                  <preamble>
                     Monitoring Management Operations behavior
                  </preamble>
<artwork>
+------------------------------------+------------------------------+
|            6tus commands           |             6tus behavior    |
+------------------------------------+------------------------------+
| Configure.monitoring(NeigAdd,      | Create/Update Monitoring MIB |
| SlotframeID,Enforce)               | Starts monitoring service    |
+------------------------------------+------------------------------+
| Read.monitoring.status(SlotframeID)| Reads 6tus Monitoring MIB    |
+------------------------------------+------------------------------+
</artwork>
               </figure>
            </section>
         </section>
         <section title="Statistics Commands"                        anchor="sec_cmd_stats">
            <t>
               6tus keeps track of TSCH statistics for upper layers to adapt correctly to medium changes. The exact metrics for statistics are out of the scope of this document but the present commands should be used to configure and read monitored information regardless of the specific metric.
            </t>
            <section title="CONFIGURE.statistics"                    anchor="sec_cmd_stats_config">
               <t>
                  Configures Statistics process. The command requires:
                  <list>
                     <t>slotframe id: the id of the slotframe. If empty monitors all slotframe ids</t>
                     <t>time slot: slot number to be monitored. If empty all slots are monitored</t>
                     <t>channel offset: specific channel offset to be monitored. If empty all channels are monitored.</t>
                     <t>target node: the destination node. If empty, all target nodes are monitored.</t>
                     <t>metric: metric to be monitored. This may be PDR, ETX, queuing statistics, energy-related metrics, etc.)</t>
                     <t>window: time window to be considered for the calculations. If 0 all historical data is considered.</t>
                     <t>enable: Enables statistics or disables them.</t>
                  </list>
               </t>
               <t>
                  Fails if the slotframe id does not exist. The statistics service can be configured to retrieve statistics at different levels. For example to aggregate information by slotframe id, or to retrieve statistics for a particular slot, etc.
              the CONFIGURE.statistics enables flexible configuration by supporting empty parameters that will force the monitoring of the statistics by all members of that dimension.
               </t>
            </section>
            <section title="READ.statistics"                         anchor="sec_cmd_stats_read">
               <t>
                  Reads a metric for the specified dimension. Information is aggregated according to the parameters. The command requires:
                  <list>
                     <t>slotframe id: the id of the slotframe. If empty aggregates information of all slotframe ids</t>
                     <t>time slot: the slot number for which the information is required. If empty all slots are aggregated</t>
                     <t>channel offset: the specific channel offset for which the information is required. If empty all channels are aggregated.</t>
                     <t>target node: the destination node. If empty all target nodes are aggregated.</t>
                     <t>metric: metric to be read.</t>
                  </list>
               </t>
               <t>
                  Returns the value for the requested metric.
               </t>
               <t>
                  Fails if empty metric or metric does not exits.
               </t>
            </section>
            <section title="RESET.statistics"                        anchor="sec_cmd_stats_reset">
               <t>
                  Resets the gathered statistics. The command requires:
                  <list>
                     <t>slotframe id: the id of the slotframe. If empty resets the information of all slotframe ids</t>
                     <t>time slot: the slot number for which the information wants to be reset. If empty statistics from all slots are reset</t>
                     <t>channel offset: the specific channel offset for which the information wants to be reset. If empty all statistics for all channels are reset.</t>
                     <t>target node: the destination node. If empty all statistics for the target node are reset.</t>
                     <t>metric: metric to be reset.</t>
                  </list>
               </t>
               <t>
                  Fails if empty metric or metric does not exits.
               </t>
            </section>
            <section title="Statistics Command Behavior"             anchor="sec_cmd_stats_desc">
               <t>The following table describes the behavior of 6tus upon reception of the Statistics management commands.</t>
               <figure>
                  <preamble>
                     Statistics Management Operations behavior
                  </preamble>
<artwork>
+--------------------------------+----------------------------------+
|            6tus commands       |             6tus behavior        |
+--------------------------------+----------------------------------+
| Configure.statistics           |                                  |                    
| (SlotFrameID,TSlot, ChannelOff,| Configures Statistics MIB.       |
| NeigAdd,Metric,Window,En)      | Enables statistics service       | 
+--------------------------------+----------------------------------+
| Read.statistics(SlotFrameID)   | Returns the statistic MIB for the|
| Ch.Off,NeigAdd,Metric)         | requested parameters             |
+--------------------------------+----------------------------------+
| Reset.statistics(SlotFrameID)  | Resets the required statistic MIB|
| Ch.Off,NeigAdd,Metric)         |                                  |
+--------------------------------+----------------------------------+
</artwork>
               </figure>
            </section>
         </section>
         <section title="Network Formation Commands"                 anchor="sec_cmd_netfrm">
            <t>
               EBs need to be configured, including their transmission period, the slot number and channel offset that they should be sent on, and the priority announced. The parameters for that command are optional and enable a very flexible configuration of EBs. If slotframe id is specified, the EBs will be configured to use that specific slotframe; if not they will use the first slotframe where the configured time slot is allocated. Time slot enforces the EB to a specific time slot. In case time slot parameter is not present, the EB is sent in the first available transmit time slot. In case channel offset parameter is not set, the EB is configured to use the first available channel.
            </t>
            <section title="CONFIGURE.eb"                            anchor="sec_cmd_netfrm_configeb">
               <t>
                  Configures EBs. The command requires:
                  <list>
                     <t>slotframe id: the id of the slotframe where the EBs MUST be sent. Zero if any slotframe can be used.</t>
                     <t>time slot: the slot number where the EBs MUST be sent. Zero if any timeslot can be used.</t>
                     <t>channel offset: the channel offset where the EBs MUST be sent. Zero if any channel offset can be used.</t>
                     <t>period: the EBs period, in seconds.</t>
                     <t>expires: when the EBs periodicity will stop. If Zero the period never stops.</t>
                     <t>priority: the joining priority model that will be used for advertisement. Joining priority MAY be for example SAME_AS_PARENT, RANDOM, BEST_PARENT+1.</t>
                  </list>
               </t>
               <t>
                  Fails if the tuple slotframe id, timeslot, channel offset is already scheduled.
               </t>
            </section>
            <section title="READ.eb"                                 anchor="sec_cmd_netfrm_readeb">
               <t>
                  Reads the EBs configuration. No parameters are required.
               </t>
               <t>
                  Returns the current EBs configuraton for that slotframe, which contains:
                  <list>
                     <t>slotframe id: the slotframe where the EB is being sent.</t>
                     <t>time slot: the slot number where the EBs is being sent.</t>
                     <t>channel offset: the channel offset the EBs is being sent on.</t>
                     <t>period: the EBs period.</t>
                     <t>expires: when the EBs periodicity stops. If 0 the period never stops.</t>
                     <t>priority: the joining priority that this node advertises.</t>
                  </list>
               </t>
               <t>
                  Fails if the slotframe id does not exist.
               </t>
            </section>
            <section title="Network Formation Command Behavior"      anchor="sec_cmd_netfrm_desc">
               <t>The following table describes the behavior of 6tus upon reception of the Network Configuration management commands.</t>
               <figure>
                  <preamble>
                     Network Configuration Management Operations behavior
                  </preamble>
<artwork>
+----------------------------------+--------------------------------+
|            6tus commands         |             6tus behavior      |
+----------------------------------+--------------------------------+
| Configure.EB(SlotFrameID,TSlot,  | Configures the 6tus MIB        |
| Ch.Off,Period,Expires,Prio,Con_p)| regarding EB configuration     |
+----------------------------------+--------------------------------+
| Read.EB()                        | Reads 6tus EB MIB              |
|                                  |                                |
+----------------------------------+--------------------------------+
</artwork>
               </figure>
            </section>
         </section>
         <section title="Time Source Neighbor Commands"              anchor="sec_cmd_time">
            <t>
               Commands to select time source neighbors.
            </t>
            <section title="CONFIGURE.timesource"                    anchor="sec_cmd_time_config">
               <t>
                  Configures the Time Source Neighbor selection process. More than one time source neighbor can be selected. The command requires:
                  <list>
                     <t>selection policy: The policy used to select the time parent. The policy MAY be for example ALL_PARENTS, BEST_CONNECTED, LOWEST_JOIN_PRIORITY, etc.</t>
                  </list>
               </t>
               <t>
                  Fails if any of the time source neighbors do not exist or it is not reachable.
               </t>
            </section>
            <section title="READ.timesource"                         anchor="sec_cmd_time_read">
               <t>
                  Retrieves information about the time parents of that node. The command does not require any parameter.
               </t>
               <t>
                  Returns the following information for each of the time sources:
                  <list>
                     <t>target node: address of the time parent.</t>
                     <t>statistics: includes for example minimum, maximum, average time correction for that time parent</t>
                     <t>policy: the used policy</t>
                  </list>
               </t>
               <t>
                  Fails if the slotframe id or no time source neighbors exist.
               </t>
            </section>
            <section title="Time Source Neighbor Command Behavior"   anchor="sec_cmd_time_desc">
               <t>
                  The following table describes the behavior of 6tus upon reception of the Time Source Neighbor Configuration management commands.
               </t>
               <figure anchor="TimeSourceBehavior">
                  <preamble>
                     Time Source Neighbors Configuration Management Operations behavior
                  </preamble>
<artwork>
+---------------------------------+---------------------------------+
|            6tus commands        |             6tus behavior       |
+---------------------------------+---------------------------------+
| Configure.timesource(Policy)    | Configures the 6tus MIB         |
|                                 | regarding timesource parents    |
+---------------------------------+---------------------------------+
| Read.timesource()               | Read 6tus timesource MIB        |
|                                 |                                 |
+---------------------------------+---------------------------------+
</artwork>
               </figure>
            </section>
         </section>
         <section title="Neighbor Commands"                          anchor="sec_cmd_neigh">
            <t>
               Commands to manage neighbor table. The commands SHOULD be used by the upper layer to query the neighbor related information and by the lower layer to keep track of neighbors information.
            </t>
            <section title="CREATE.neighbor"                         anchor="sec_cmd_neigh_create">
               <t>
                  Creates an entry for a neighbor in the neighbor table.
                  <list>
                     <t>neighbor address: The address of the neighbor.</t>
                     <t>neighbor stats: for example, RSSI of the last received packet from that neighbor, ASN when that neighbor has been added, etc.</t>
                  </list>
               </t>
               <t>
                  Returns whether the neighbor is created or not.
               </t>
            </section>
            <section title="READ.all.neighbor"                       anchor="sec_cmd_neigh_readall">
               <t>
                  Returns the list of neighbors of that node. Fails if empty. For each neighbor in the list it returns:
                  <list>
                     <t>neighbor address: The address of the neighbor.</t>
                     <t>neighbor stats: for example, RSSI of the last received packet from that neighbor, ASN when that neighbor has been added, packets received from that neighbor, packets sent to it, etc. .</t>
                  </list>
               </t>
            </section>
            <section title="READ.neighbor"                           anchor="sec_cmd_neigh_read">
               <t>
                  Returns the information of a specific neighbors of that node specified by its neighbor address. Fails if it does not exists. For that neighbor it returns:
                  <list>
                     <t>neighbor address: The address of the neighbor.</t>
                     <t>neighbor stats: for example, RSSI of the last received packet from that neighbor, ASN when that neighbor has been added, packets received from that neighbor, packets sent to it, etc.</t>
                  </list>
               </t>
            </section>
            <section title="UPDATE.neighbor"                         anchor="sec_cmd_neigh_update">
               <t>
                  Updates an entry for a neighbor in the neighbor table.  Fails if the neighbor does not exist. Updates stats parameters. Requires:
                  <list>
                     <t>neighbor address: The address of the neighbor.</t>
                     <t>neighbor stats: for example, RSSI of the last received packet from that neighbor, ASN when that neighbor has been added, etc. .</t>
                  </list>
               </t>
               <t>
                  Returns whether the neighbor is updated or not.
               </t>
            </section>
            <section title="DELETE.neighbor"                         anchor="sec_cmd_neigh_delete">
               <t>
                  Deletes a neighbor given its address. Fails if the neighbor does not exists.
               </t>
            </section>
            <section title="Neighbors Command Behavior"              anchor="sec_cmd_neigh_desc">
               <t>
                  The following table describes the behavior of 6tus upon reception of the Neighbors Configuration management commands.
               </t>
               <figure>
                  <preamble>
                     Neighbors Management Operations behavior
                  </preamble>
<artwork>
+---------------------------------+---------------------------------+
|            6tus commands        |             6tus behavior       |
+---------------------------------+---------------------------------+
| Create.neighbor(address,stats)  | Adds a neighbor to the neighbor |
|                                 | table in the 6tus MIB.          |
+---------------------------------+---------------------------------+
| Read.all.neighbor()             | lists all neighbors from the    |
|                                 | neighbor table.                 |
+---------------------------------+---------------------------------+
| Read.neighbor(address)          | Reads neighbor information from |
|                                 | neighbor table in the 6tus MIB  |
+---------------------------------+---------------------------------+
| Update.neighbor(address,stats)  | Updates an entry for a neighbor |
|                                 | in the 6tus MIB                 |
+---------------------------------+---------------------------------+
| Delete.neighbor(address)        | Removes the neighbor from the   |
|                                 | 6tus MIB                        |
+---------------------------------+---------------------------------+
</artwork>
               </figure>
            </section>
         </section>
         <section title="Queueing Commands"                          anchor="sec_cmd_q">
            <t>
               TSCH MAC layer queues need to be configured. This includes queue length, retransmission policy, discarding of packets, etc.
            </t>
            <section title="CREATE.queue"                            anchor="sec_cmd_q_create">
               <t>
                  Creates and Configures TSCH Queues. The command SHOULD be applied for each required queue. The command requires:
                  <list>
                     <t>txqlength: the desired transmission queue length.</t>
                     <t>rxqlength: the desired reception queue length.</t>
                     <t>numrtx: number of allowed retransmissions.</t>
                     <t>age: discard packet according to its age on the queue. 0 if no discards are allowed.</t>
                     <t>rtxbackoff: retransmission back off in number of slotframes. 0 if next available slot wants to be used.</t>
                     <t>statswindow: window of time used to compute stats.</t>
                     <t>queue priority: the priority of this queue.</t>
                  </list>
               </t>
               <t>
                  Returns the queue id.
               </t>
            </section>
            <section title="READ.queue"                              anchor="sec_cmd_q_read">
               <t>
                  Reads the queue configuration. Requires the queue id.
               </t>
               <t>
                  The command returns:
                  <list>
                     <t>txqlength: the transmission queue length.</t>
                     <t>rxqlength: the reception queue length.</t>
                     <t>numrtx: number of allowed retransmissions.</t>
                     <t>age: maximum age of a packet befoer being discarded. 0 if no discards are allowed.</t>
                     <t>rtxbackoff: retransmission backoff in number of slotframes. 0 if next available slot is used.</t>
                  </list>
               </t>
            </section>
            <section title="READ.queue.stats"                        anchor="sec_cmd_q_readstats">
               <t>
                  Reads the queue stats. Requires queue id.
               </t>
               <t>
                  The command returns:
                  <list>
                     <t>txqlengthstats: average, maximum, minimum length of the transmission queue.</t>
                     <t>rxqlengthstats: average, maximum, minimum length of the reception queue.</t>
                     <t>numrtxstats: average, maximum, minimum number of retransmissions.</t>
                     <t>agestats: average, maximum, minimum age of a packet in the queue.</t>
                     <t>rtxbackoffstats: average, maximum, minimum retransmission backoff.</t>
                     <t>queue priority: the priority of this queue.</t>
                  </list>
               </t>
            </section>
            <section title="UPDATE.queue"                            anchor="sec_cmd_q_update">
               <t>
                  Update a TSCH Queue. The command requires:
                  <list>
                     <t>queueid: the desired transmission queue length.</t>
                     <t>txqlength: the desired transmission queue length.</t>
                     <t>rxqlength: the desired reception queue length.</t>
                     <t>numrtx: number of allowed retransmissions.</t>
                     <t>age: discard packet according to its age on the queue. 0 if no discards are allowed.</t>
                     <t>rtxbackoff: retransmission backoff in number of slotframes. 0 if next available slot wants to be used.</t>
                     <t>statswindow: window of time used to compute stats.</t>
                  </list>
               </t>
            </section>
            <section title="DELETE.queue"                            anchor="sec_cmd_q_delete">
               <t>
                  Deletes a TSCH Queue. The command requires the queue id. All packets in the queue are discarded and the queue is deleted.
               </t>
            </section>
            <section title="Queueing Command Behavior"               anchor="sec_cmd_q_desc">
               <t>
                  The following table describes the behavior of 6tus upon reception of the Queue management commands.
               </t>
               <figure>
                  <preamble>
                     Queue Management Operations behavior
                  </preamble>
<artwork>
+---------------------------------+---------------------------------+
|            6tus commands        |             6tus behavior       |
+---------------------------------+---------------------------------+
| Create.queue(tqlen,trlen,numrtx,| Creates a queue with specified  |
| age,rtxbackoff,prio)            | parameters. Updates 6tus MIB.   |
+---------------------------------+---------------------------------+
| Read.queue(id)                  | Reads the queue configuration   |
|                                 | from 6tus MIB.                  |
+---------------------------------+---------------------------------+
| Update.queue(id,tqlen,trlen,    | Updates the queue configuration |
| numrtx,age,rtxbackoff,prio)     | from 6tus MIB. Readjustes actual|
|                                 | queue size if required.         |
+---------------------------------+---------------------------------+
| Delete.queue(id)                | Deletes the queue from MIB.     |
|                                 |                                 |
+---------------------------------+---------------------------------+
| Read.queue.stats()              | Reads the queue                 |
|                                 | stats from 6tus MIB.            |
+---------------------------------+---------------------------------+
</artwork>
               </figure>
            </section>
         </section>
         <section title="Security Commands"                          anchor="sec_cmd_sec">
            <t>
               The following commands are used to manage underlying layer security. In that case 6tus acts as delegating interface to IEEE802.15.4 security configuration commands.
            </t>
            <section title="CONFIGURE.security"                      anchor="sec_cmd_sec_config">
               <t>
                  Enables/Disables Security and configures the MAC PIB. The command requires:
                  <list>
                     <t>enable: enables underlying layer security.</t>
                     <t>macAutoRequestSecurityLevel: the security level used for automatic data requests as described by IEEE 802.15.4 table 61.</t>
                     <t>macAutoRequestKeyIdMode: the key identifier mode used for automatic data requests as described by IEEE 802.15.4 table 61.</t>
                     <t>macAutoRequestKeySource: the originator of the key for automatic data requests as described by IEEE 802.15.4 table 61.</t>
                     <t>macAutoRequestKeyIndex: the index of the key used for automatic data requests as described by IEEE 802.15.4 table 61.</t>
                     <t>macDefaultKeySource: the originator of the default key used for key identifier mode 0x01 as described by IEEE 802.15.4 table 61.</t>
                     <t>macPANCordinatorExtendedAddress: Address of the PAN coordinator as described by IEEE 802.15.4 table 61.</t>
                     <t>macPANCordinatorShortAddress: Short address of the PAN coordinator as described by IEEE 802.15.4 table 61.</t>
                  </list>
               </t>
            </section>
            <section title="CONFIGURE.security.macKeyTable"          anchor="sec_cmd_sec_config_mackey">
               <t>
                  Configures Security Keys. The command requires:
                  <list>
                     <t>KeyIdLookupList: list of keyIdLookupDescriptor Entries as defined by IEEE 802.15.4 table 61.</t>
                     <t>DeviceDescriptorHandleList: Implementation specific list of devices that are using this key. As defined by IEEE 802.15.4 table 61.</t>
                     <t>KeyUsageList: List of slotframe types on which this key is being used as specified by IEEE 802.15.4 section 7.4.1.2</t>
                     <t>Key: 16 octets key. As specified by IEEE 802.15.4 table 61.</t>
                  </list>
               </t>
            </section>
            <section title="CONFIGURE.security.macSecurityLevelTable" anchor="sec_cmd_sec_config_seclvl">
               <t>
                  Configures the set of security levels. The command requires:
                  <list>
                     <t>FrameType: Slotframe type as defined by IEEE802.15.4e std.</t>
                     <t>Command Identifier: The command identifier as defined by IEEE802.15.4e std.</t>
                     <t>Security Minimum: The minimum required security level as specified by IEEE 802.15.4e</t>
                     <t>Device Override Security Minimum: whether the minimum security level can be overridden as specified by IEEE 802.15.4 Table 64</t>
                     <t>Allowed Security Levels: the key identifier field that identifies the key that is being used as specified by IEEE 802.15.4 section 7.4.3</t>
                  </list>
               </t>
            </section>
            <section title="Security Command Behavior"               anchor="sec_cmd_sec_desc">
               <t>
                  6tus offers the interface to upper layers so underlying MAC layer can be configured. In that sense, 6tus acts as a "none-layer" by only delegating the functionalities to the MAC security services. For more details Section 7 on IEEE802.15.4-2011 and its amendments on IEEE802.15.4e-2012 should be referred.
               </t>
            </section>
         </section>
         <section title="Data Commands"                              anchor="sec_cmd_data">
            <section title="Send.data"                               anchor="sec_cmd_data_send">
               <t>
                  The command used by upper layers to queue a packet so underlying TSCH sends it. According to the specific priority the packet is pushed into a Queue with the equivalent priority or following a criteria out of the scope of this document. Once a packet is inserted into a queue it waits to be transmitted by TSCH according to the model defined in <xref target="sec_dataconveymodel"/>.
               </t>
               <t>
                  The required parameters are:
                  <list>
                     <t>src address: L2 source address</t>
                     <t>dest address: L2 unicast or broadcast destination address</t>
                     <t>priority: packet priority, usually is consistent with queue priority</t>
                     <t>message length: the length of the message.</t>
                     <t>message: control message or data message</t>
                     <t>securityLevel:As defined by IEEE802.15.4e std.</t>
                  </list>
               </t>
            </section>
            <section title="Receive.data"                            anchor="sec_cmd_data_rcv">
               <t>
                  The command is invoked whenever a packet is received and inserted into a reception queue. The method acts as a callback function to notify to the upper layers the received message. Upper layers MUST provide an implementation for that method.
               </t>
               <t>
                  The function has the following parameters:
                  <list>
                     <t>src address: L2 source address</t>
                     <t>dest address: L2 unicast or broadcast destination address</t>
                     <t>priority: packet priority, usually is consistent with queue priority</t>
                     <t>message length: the length of the message.</t>
                     <t>message: control message or data message</t>
                  </list>
               </t>
            </section>
            <section title="Data Command Behavior"                   anchor="sec_cmd_data_desc">
               <t>
                  The following table describes the behavior of 6tus upon reception of the Data Communication Configuration management commands.
               </t>
               <figure anchor="dataBehavior">
                  <preamble>
                     Data Communication Management Operations behavior
                  </preamble>
<artwork>
+---------------------------------+---------------------------------+
|            6tus commands        |             6tus behavior       |
+---------------------------------+---------------------------------+
| Send.data(src,dest,prio,        | The message is inserted in the  |
|           len,msg,seclevel)     | the queue corresponding to the  |
|                                 | required priority. Fails if the |
|                                 | queue is full. Fails if the     |
|                                 | destination address is not a    |
|                                 | L2 neighbor of the node.        |
+---------------------------------+---------------------------------+
| Receive.data(src,dest,prio,len, | The method is invoked whenever a|
|  msg)                           | message is inserted in the queue|
|                                 | after successful reception.     |
+---------------------------------+---------------------------------+
</artwork>
               </figure>
            </section>
         </section>
      </section>
      <section title="Message Formats"      anchor="sec_message_formats">
         <t>
            6tus has to negotiate the scheduling of soft cells with neighbor nodes. This negotiation happens through 6tus-specific TSCH Information Elements, the format of which is defined in this section. This section also details the formats of the IEs defined in <xref target="IEEE802154e"/> and reused without modification.
         </t>
         <t>
            6tus messages can contain one or more IEs. <xref target="sec_ie"/> defines the different IEs used by 6tus, both the ones used without modification from <xref target="IEEE802154e"/>, and the new ones defined by 6tus. <xref target="sec_pkfmt"/> shows how those IEs are assembled to form the different packets used by 6tus.
         </t>
         <section title="Information Elements" anchor="sec_ie">
            <t>
               IEEE802.15.4e defines Information elements (IEs) which are formatted data objects consisting of an ID, a length, and a data payload used to pass data between layers or devices. IEEE802.15.4e defines Header IEs and Payload IEs; 6tus only uses Payload IEs. A Payload IE includes one or more IEs, and ends with a termination IE (ID = 0xf, see <xref target="IEEE802154e"/>).
            </t>
            <t>
               6tus uses the following Information Elements, in which the first four IEs are defined in IEEE802.15.4e, and other three IEs are introduced in this document.
               <list>
                  <t>Defined in <xref target="IEEE802154e"/> and used by 6tus without modification:</t>
                  <t>
                     <list>
                        <t>TSCH Synchronization IE (<xref target="sec_ie_synchronization"/>)</t>
                        <t>TSCH Slotframe and Cell IE (<xref target="sec_ie_slotframecell"/>)</t>
                        <t>TSCH Timeslot Template IE (<xref target="sec_ie_timeslot"/>)</t>
                        <t>TSCH Channel Hopping IE (<xref target="sec_ie_channelhopping"/>)</t>
                     </list>
                  </t>
                  <t>Defined by 6tus:</t>
                  <t>
                     <list>
                        <t>6tus Opcode IE (<xref target="sec_ie_6tus_opcode"/>)</t>
                        <t>6tus Bandwidth IE (<xref target="sec_ie_6tus_bandwidth"/>)</t>
                        <t>6tus Generic Schedule IE (<xref target="sec_ie_6tus_schedule"/>)</t>
                     </list>
                  </t>
               </list>
            </t>
            <section title="TSCH Synchronization IE"       anchor="sec_ie_synchronization">
               <t>
                  A Synchronization IE (SyncIE) contains Information allowing a node to synchronize to a TSCH network, including the current ASN and a join priority. Synchronization IE must be included in all TSCH Enhanced Beacons.
               </t>
               <t>
                  6tus re-uses this IE as defined in <xref target="IEEE802154e"/>.
               </t>
               <figure anchor="SyncIE">
                  <preamble>
                     Format of a TSCH Synchronization IE (SyncIE).
                  </preamble>
<artwork>
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Length      |    SubID    |T|          ASN                  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                 ASN                           | Join Priority |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
               </figure>
               <t>Length=6</t>
               <t>SubID=0x1a</t>
               <t>T=0, i.e. short type</t>
               <t>
                  ASN (5 octets) contains the Absolute Slot Number corresponding to the timeslot in which the TSCH Enhanced Beacon is sent.
               </t>
               <t>
                  The Join Priority can be used by a joining device to select among beaconing devices when multiple beacons are heard. The PAN coordinator's join priority is zero. A lower value of join priority indicates that the device is the preferred one to connect to. The beaconing device's join priority is the lowest join priority heard when it joined the network plus one.
               </t>
            </section>
            <section title="TSCH Slotframe and Cell IE"    anchor="sec_ie_slotframecell">
               <t>
                  The Slotframe and Cell IE (FrameAndCellIE) contains one or more slotframes and their respective cells that a beaconing device advertises to allow other devices to join the network.
               </t>
               <t>
                  6tus re-uses this IE as defined in <xref target="IEEE802154e"/>.
               </t>
               <figure anchor="FrameAndCellIE">
                  <preamble>
                     Format of a TSCH Slotframe and Cell IE (FrameAndCellIE).
                  </preamble>
<artwork>
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Length      |    SubID    |T|  NumFrame     |               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               |
   |                                                               |
   //               Slotframe and cell information                //
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
               </figure>
               <t>Length=variable</t>
               <t>SubID=0x1b</t>
               <t>T=0, i.e. short type</t>
               <t>NumFrame is set to the total number of slotframe descriptors contained in the TSCH Enhanced Beacon.
               </t>
               <figure anchor="sec_slotframe_descriptor">
                  <preamble>
                     Format of a slotframe descriptor.
                  </preamble>
<artwork>
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   FrameID      |            FrameLen          |   NumCell     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   //          Cell information for each cell (5x NumCell)        //
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
               </figure>
               <t>
                  FrameID field shall be set to the slotframeHandle that uniquely identifies the slotframe.
               </t>
               <t>
                  FrameLen field shall be set to the size of the slotframe in number of timeslots.
               </t>
               <t>
                  NumCell field shall be set to the number of cells that belong to the specific slotframe identified by the slotframeHandle.
               </t>
               <figure anchor="fig_cell_information">
                  <preamble>
                     Format of a Cell information.
                  </preamble>
<artwork>
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |        SlotOffset             |        ChannelOffset          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  LinkOption   |
   +-+-+-+-+-+-+-+-+
</artwork>
               </figure>
               <t>
                  SlotOffset shall be set to the timeslot of this cell.
               </t>
               <t>
                  ChannelOffset shall be set to the logic channel of this cell.
               </t>
               <t>
                  LinkOption indicates whether this cell is a TX cell, an RX cell, or a SHARED TX cell, whether the device to which it is being linked is to be used for clock synchronization, and whether this cell is hard cell.
               </t>
            </section>
            <section title="TSCH Timeslot Template IE"     anchor="sec_ie_timeslot">
               <t>
                  Timeslot Template IE (SlotTemplateIE) defines Timeslot template being used by the TSCH device.
               </t>
               <t>
                  6tus re-uses this IE as defined in <xref target="IEEE802154e"/>.
               </t>
               <figure anchor="SlotTemplatIE">
                  <preamble>
                     Format of a TSCH Timeslot Template IE (SlotTemplateIE).
                  </preamble>
<artwork>
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Length      |    SubID    |T|  TemplateID   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
               </figure>
               <t>Length=1</t>
               <t>SubID=0x1c</t>
               <t>T=0, i.e. short type</t>
               <t>
                  TemplateID shall be set to a Timeslot template handle. The full time-slot template, which contains the macTimeslotTemplate of TSCH (total 25 octets), may be included.(see IEEE802.15.4e).
               </t>
            </section>
            <section title="TSCH Channel Hopping IE"       anchor="sec_ie_channelhopping">
               <t>
                  Channel Hopping IE (ChHoppingIE) defines the Hopping Sequence being used by the TSCH device.
               </t>
               <t>
                  6tus re-uses this IE as defined in <xref target="IEEE802154e"/>.
               </t>
               <figure anchor="ChHoppingIE">
                  <preamble>
                     Format of a TSCH Channel Hopping IE (ChHoppingIE).
                  </preamble>
<artwork>
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      Length         | SubID |T| HopSequenceID |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
               </figure>
               <t>Length=1</t>
               <t>SubID=0x09</t>
               <t>T=1, i.e. long type</t>
               <t>
                  HopSequenceID shall be set to a Hopping Sequence handle. The full Hopping Sequence information may be included. (see IEEE802.15.4e).
               </t>
            </section>
            <section title="6tus Opcode IE"                anchor="sec_ie_6tus_opcode">
               <t>
                  6tus Opcode IE (OpcodeIE) defines operation codes of packets in 6tus layer.
               </t>
               <t>
                  This IE is not present in <xref target="IEEE802154e"/> and is defined by 6tus.
               </t>
               <figure anchor="OpcodeIE">
                  <preamble>
                     Format of a 6tus Opcode IE (OpcodeIE).
                  </preamble>
<artwork>
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Length      |    SubID    |T|   OpcodeID    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
               </figure>
               <t>Length=1</t>
               <t>SubID=0x41</t>
               <t>T=0, i.e. short type</t>
               <t>
                  OpcodeID field shall be set to one of the following codes.
                  <list>
                     <t>0x00: Reserve Soft Cell Request</t>
                     <t>0x01: Reserve Soft Cell Response</t>
                     <t>0x02: Remove Soft Cell Request</t>
                     <t>0x03: Reserve Hard Cell Request</t>
                     <t>0x04: Remove Hard Cell Request</t>
                  </list>
               </t>
            </section>
            <section title="6tus Bandwidth IE"             anchor="sec_ie_6tus_bandwidth">
               <t>
                  Bandwidth IE (BwIE) defines the number of cells to be reserved or actually be reserved.
               </t>
               <t>
                  This IE is not present in <xref target="IEEE802154e"/> and is defined by 6tus.
               </t>
               <figure anchor="BwIE">
                  <preamble>
                     Format of a 6tus Bandwidth IE (BwIE).
                  </preamble>
<artwork>
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Length      |    SubID    |T|    FrameID    |   NumCell     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
               </figure>
               <t>Length=2</t>
               <t>SubID=0x42</t>
               <t>T=0, i.e. short type</t>
               <t>
                  FrameID field may be set to the SlotFrameHandle to identify the slotframe from which cells are reserved. FrameID field may be set to NOP, which means no specific slotframe is associated.
               </t>
               <t>
                  NumCell field shall be set to the number of cells. When BwIE is combined with the OpecodeID of Reserve Soft Cell Request, NumCell presents how many cells are required to reserve; and when BwIE is combined with the OpecodeID of Reserve Soft Cell Response, NumCell presents how many cells are reserved successfully.
               </t>
            </section>
            <section title="6tus Generic Schedule IE"      anchor="sec_ie_6tus_schedule">
               <t>
                  Generic Schedule IE (ScheduleIE) describes cell sets. In different packet, ScheduleIE represents different information. See <xref target="sec_pkfmt"/> for more detail.
               </t>
               <t>
                  This IE is not present in <xref target="IEEE802154e"/> and is defined by 6tus.
               </t>
               <figure anchor="ScheduleIE">
                  <preamble>
                     Format of a 6tus Generic Schedule IE (ScheduleIE).
                  </preamble>
<artwork>
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Length      |    SubID    |T|                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
   |                                                               |
   //                   Schedule Body                             //
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
               </figure>
               <t>Length=variable</t>
               <t>SubID=0x43</t>
               <t>T=0, i.e. short type</t>
               <t>
                  Schedule Body carries one or more schedule object. An object may carry a TLV, which may itself comprise other TLVs. TLV format is as follows. Type: 1 byte, Length: 1 byte, Value: variable
               </t>
               <t>
                  The following are some examples of schedule object TLV.
               </t>
               <figure anchor="sec_cell_set">
                  <preamble>
                     Example 1. Cell Set TLV
                  </preamble>
<artwork>
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Type=1      |    Length     |     FrameID   |  NumCell    |F|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   //                        CellObjects                          //
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
               </figure>
               <t>
                 FrameID shall be set to the slotframeHandle that uniquely identifies the slotframe.
               </t>
               <t>
                  NumCell shall be set to the number of cells that belong to the specific slotframe identified by the slotframeHandle.
               </t>
               <t>
                  F=1 means the specified cells equals to what are listed in CellObjects, and F=0 means the specified cells equals to what are not listed in CellObjects.
               </t>
               <t>
                  CellObjects carries the information for one or more cells, including SlotOffset, ChannelOffset, LinkOption (<xref target="fig_cell_information"/>).
               </t>
               <figure anchor="fig_schedule_matrix">
                  <preamble>
                     Example 2. Schedule Matrix TLV
                  </preamble>
<artwork>
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Type=2      |    Length     |  FrameID      |StartSlotOffset|
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |StartSLotOffset|    NumSlot    |                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
   |                                                               |
   //                 SlotBitMap (2x NumSlot)                     //
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
               </figure>
               <t>
                  FrameID field shall be set to the slotframeHandle that uniquely identifies the slotframe.
               </t>
               <t>
                  StartSlotOffset field (2 octets) shall be set to the slotoffset in the specific slotframe identified by the slotframeHandle.
               </t>
               <t>
                  NumSlot field shall be set to the number of slots from StartSlotOffset in the specific slotframe identified by the slotframeHandle.
               </t>
               <t>
                  SlotBitMap (per slot) indicates for the given slot which channels are specified. For the 16 channels in 2.4GHz band, 2-octets are used to indicate which channel is specified. For example, given a slot and a SlotBitmap with value (10001000,00010000); the bitmap represents that ChannelOffset-0, ChannelOffset-4, ChannelOffset-11 are specified.
               </t>
            </section>
         </section>
         <section title="Packet Formats"       anchor="sec_pkfmt">
            <t>
               This section describes the packets used in 6tus to form a network, reserve/maintain bandwidth using soft cells, and reserve/remove hard cells in both Tx side and Rx side. Each of these packets use one or more IEs defined in <xref target="sec_ie"/>.
            </t>
            <section title="TSCH Enhanced Beacon" anchor="sec_pkfmt_tsch_eb">
               <t>
                  The TSCH Enhanced Beacon is used to announce the presence of the network and allow new nodes to join. It is and IEEE802.15.4e Enhanced Beacon packet with the following Payload IEs:
                  <list>
                     <t>TSCH Synchronization IE (<xref target="sec_ie_synchronization"/>)</t>
                     <t>TSCH Timeslot Template IE (<xref target="sec_ie_timeslot"/>)</t>
                     <t>TSCH Channel Hopping IE (<xref target="sec_ie_channelhopping"/>)</t>
                     <t>TSCH Slotframe and Cell IE (<xref target="sec_ie_slotframecell"/>)</t>
                  </list>
               </t>
               <figure anchor="fig_payload_ie_of_tsch_enhanced_beacon_packet">
                  <preamble>
                     Payload IE of TSCH Enhanced Beacon Packet
                  </preamble>
<artwork>
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Length        |GroupID|T|             SyncIE            |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        SyncIE                                 |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         SyncIE                |      SlotTemplateIE           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |SlotTemplateIE |               ChHoppingIE                     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   //                        FrameAndCellIE                       //
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
               </figure>
               <t>Length=variable</t>
               <t>GroupID=0x1, i.e. MLME IE</t>
               <t>T=1, i.e. payload IE</t>
               <t>
                  See <xref target="sec_ie_synchronization"/>, <xref target="sec_ie_timeslot"/>, <xref target="sec_ie_channelhopping"/>,<xref target="sec_ie_slotframecell"/> for SyncIE, SlotTemplateIE, ChHoppingIE and FrameAndCellIE.
               </t>
            </section>
            <section title="Soft Cell Reservation Request">
               <t>
                  Soft Cell Reservation Request packet is formatted in Data packet of IEEE802.15.4e with following payload IE.
               </t>
               <figure anchor="fig_payload_ie_of_cell_reservation_request">
                  <preamble>
                     Payload IE of Soft Cell Reservation Request
                  </preamble>
<artwork>
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Length        |GroupID|T|          OpcodeIE             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | OpcodeIE      |                  BwIE                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    BwIE       |                                               |
   +-+-+-+-+-+-+-+-+                                               |
   //                          ScheduleIE                         //
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
               </figure>
               <t>Length=variable</t>
               <t>GroupID=0x1, i.e. MLME IE</t>
               <t>T=1, i.e. payload IE</t>
               <t>The OpcodeID field in the 3-octet OpcodeIE should be set to 0x00, indicates Reserve Soft Cell Request operation.</t>
               <t>The NumCell field in 4-octet BwIE should be set to the number of cells needed to be reserved.</t>
               <t>The ScheduleIE specifies a candidate cell set, from which the cells should be reserved. ScheduleIE may be empty, means there is no constrain on which cells should not be reserved.</t>
            </section>
            <section title="Soft Cell Reservation Response">
               <t>
                  Soft Cell Reservation Response is formatted in Data packet of IEEE802.15.4e with following payload IE.
               </t>
               <figure anchor="fig_payload_ie_of_cell_reservation_response">
                  <preamble>
                     Payload IE of Soft Cell Reservation Response
                  </preamble>
<artwork>
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Length        |GroupID|T|          OpcodeIE             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | OpcodeIE      |                  BwIE                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    BwIE       |                                               |
   +-+-+-+-+-+-+-+-+                                               |
   //                          ScheduleIE                         //
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
               </figure>
               <t>Length=variable</t>
               <t>GroupID=0x1, i.e. MLME IE</t>
               <t>T=1, i.e. payload IE</t>
               <t>The OpcodeID field in the 3-octet OpcodeIE should be set to 0x01, indicates Reserve Soft Cell Response operation.</t>
               <t>The NumCell field in 4-octet BwIE should be set to the number of cells which have been reserved successfully.</t>
               <t>The ScheduleIE should specify all of the cells which have been reserved successfully.</t>
            </section>
            <section title="Soft Cell Remove Request">
               <t>
                  Soft Cell Remove Request is formatted in a Data packet of IEEE802.15.4e with the following payload IE.
               </t>
               <figure anchor="fig_payload_ie_of_cell_remove_request">
                  <preamble>
                     Payload IE of Soft Cell Remove Request
                  </preamble>
<artwork>
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Length        |GroupID|T|          OpcodeIE             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | OpcodeIE      |                                               |
   +-+-+-+-+-+-+-+-+                                               |
   //                          ScheduleIE                         //
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
               </figure>
               <t>Length=variable</t>
               <t>GroupID=0x1, i.e. MLME IE</t>
               <t>T=1, i.e. payload IE</t>
               <t>The OpcodeID field in the 3-octet OpcodeIE should be set to 0x02, indicates Remove Soft Cell Request operation.</t>
               <t>The ScheduleIE should specify all the cells that need to be removed.</t>
            </section>
         
            <section title="Hard Cell Reservation Request">
               <t>
                  Hard Cell Reservation Request packet is formatted in Data packet of IEEE802.15.4e with following payload IE.
               </t>
               <figure anchor="fig_payload_ie_of_hard_cell_reservation_request">
                  <preamble>
                     Payload IE of Hard Cell Reservation Request
                  </preamble>
<artwork>
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Length        |GroupID|T|          OpcodeIE             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | OpcodeIE      |                                               |
   +-+-+-+-+-+-+-+-+                                               |
   //                          ScheduleIE                         //
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
               </figure>
               <t>Length=variable</t>
               <t>GroupID=0x1, i.e. MLME IE</t>
               <t>T=1, i.e. payload IE</t>
               <t>The OpcodeID field in the 3-octet OpcodeIE should be set to 0x03, indicates Reserve Hard Cell Request operation.</t>
               <t>The ScheduleIE should specify all the cell that need to be reserved. </t>
            </section>
         
            <section title="Hard Cell Remove Request">
               <t>
                  Hard Cell Remove Request is formatted in a Data packet of IEEE802.15.4e with the following payload IE.
               </t>
               <figure anchor="fig_payload_ie_of_hard_cell_remove_request">
                  <preamble>
                     Payload IE of Hard Cell Remove Request
                  </preamble>
<artwork>
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       Length        |GroupID|T|          OpcodeIE             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | OpcodeIE      |                                               |
   +-+-+-+-+-+-+-+-+                                               |
   //                          ScheduleIE                         //
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
               </figure>
               <t>Length=variable</t>
               <t>GroupID=0x1, i.e. MLME IE</t>
               <t>T=1, i.e. payload IE</t>
               <t>The OpcodeID field in the 3-octet OpcodeIE should be set to 0x04, indicates Remove Hard Cell Request operation.</t>
               <t>The ScheduleIE should specify all the cells that need to be removed.</t>
            </section>
         </section> 
      </section>   
      <section title="Time Sequence"        anchor="sec_seq">
         <t>
            6tus neighbors exchange 6tus-specific packets in the following cases, each detailed in a subsection.
            <list>
               <t>Network formation is detailed in <xref target="sec_seq_formation"/>.</t>
               <t>Creating soft cells is detailed in <xref target="sec_seq_createsoft"/>.</t>
               <t>Deleting soft cells is detailed in <xref target="sec_seq_deletesoft"/>.</t>
               <t>Maintaining soft cells is detailed in <xref target="sec_seq_maintainsoft"/>.</t>
               <t>Creating hard cells is detailed in <xref target="sec_seq_createhard"/>.</t>
               <t>Deleting hard cells is detailed in <xref target="sec_seq_deletehard"/>.</t>
            </list>
         </t>
         <section title="Network Formation"                          anchor="sec_seq_formation">
            <t>
               Network formation consists of two processes: joining and maintenance.
            </t>
            <section title="Joining">
               <t>
                  A node already in the network sends out TSCH Enhanced Beacons periodically.
               </t>
               <t>
                  When a node is joining an existing network, it listens for TSCH Enhanced Beacons. After collecting one or more TSCH Enhanced BEACONs (the format of which is detailed in <xref target="sec_pkfmt_tsch_eb"/>), the joining node must do the following.
                  <list>
                     <t>
                        Initialize a neighbor table. Establish a neighbor table and record all of the information described in the TSCH Enhanced BEACONs as its initial schedule with those neighbors.
                     </t>
                     <t>
                        Select a time source neighbor. According to the Joining Priority described by SyncIEs, the joining node chooses one or more of the advertisers as its time source neighbors. 6tus does not specify the criteria to choose time source neighbors from the Enhanced BEACONs.
                     </t>
                     <t>
                        Select cells for Enhanced Beacons. The joining node selects one or more cells to broadcast its own Enhanced Beacons, which may be same as the cells used by its neighbors for Enhanced Beacon broadcast, and record those cell(s) into the TSCH schedule with LinkType=ADVERTISING.
                     </t>
                     <t>
                        From its Enhanced Beacons, including the cell(s) for its Enhanced Beacon, which LinkOption should be set to "Receive" and "Timekeeping", telling its neighbors that the cell is used for broadcast.
                     </t>
                     <t>
                        Start broadcasting Enhanced Beacon and communicate with neighbors.
                     </t>
                  </list>
               </t>
            </section>
            <section title="Maintenance">
               <t>
                  Nodes may broadcast Enhance Beacons on the cells marked with LinkType=ADVERTISING, and listen for Enhanced Beacons from neighbors on the cells with LinkOption = "Receive" and "Timekeeping". If a cell with both LinkType=ADVERTISING has both the "Receive" and "Timekeeping" LinkOption, it is shared by neighbors and itself to broadcast, then broadcast Enhanced Beacon has higher priority.
               </t>
               <t>
                  Whenever a node receives an Enhanced Beacon, it must update its schedule if there is a difference.
               </t>
            </section>
         </section>
         <section title="Creating soft cells"                       anchor="sec_seq_createsoft">
            <t>
               The upper layer instructs 6tus to schedule one or more soft cells by calling the Create soft cell command. This command can also be called by the monitoring process internal to 6tus.
            </t>
            <t>
               When receiving a Create soft cell command, Node A's 6tus layer forms a Soft Cell Reservation Request packet which includes BwIE and ScheduleIE. The BwIE includes the number of cells needed to be reserved (N1), and ScheduleIE includes a candidate cell set from which the new cells should be selected. If the ScheduleIE is empty, Node A indicates there is no constraint on cell selection. The Soft Cell Reservation Request is then sent to the neighbor (Node B) with whom new cells need to be added. After receiving the Soft Cell Reservation Request, Node B selects the cells from the candidate cell set defined by the ScheludeIE in the Soft Cell Reservation Request, and forms a Soft Cell Reservation Response packet, in which BwIE indicates the number of cells actually being reserved (N2), and ScheduleIE indicates those reserved cells. If N2 is smaller than N1, node B indicates to node A that there are not enough qualified cells to be reserved. Node B must record the reserved cells into its local schedule while sending out Soft Cell Reservation Response. After receiving the Soft Cell Reservation Response, Node A must record the reserved cells into its local schedule.
            </t>
            <t>
               The policy to build a candidate cell set and the policy to select cells from the candidate cell set to reserve is flexiable. For example, the candidate cell set can be all of the cells not used by Node A, and Node B can randomly choose N1 cells, which are not used by Node B, from the candidate cell set.
            </t>
            <t>
               The expression of Schedule Body is flexible. For example, Node A can use Cell Set TLV defined in <xref target="sec_cell_set"/> with field 'F' set to '0', and the CellObjects includes all of the cells being used by Node A. In another word, the cell candidate set is all of the cells not being included in the list defined by CellObjects.
            </t>
            <t>
               The policy to deal with the failure or not fully satisfaction in a soft cell Reservation process is flexible. For example, Node A may initiate another soft cell reservation procedure, or simply report to upper layer.
            </t>
         </section>
         <section title="Deleting soft cells"                       anchor="sec_seq_deletesoft">
            <t>
               The upper layer instructs 6tus to delete one or more soft cells by calling the Delete soft cell command. This command can also be called by the monitoring process internal to 6tus.
            </t>
            <t>
               When receiving a Delete soft cell command, Node A's 6tus layer selects cells to be removed from its local schedule, and creates a Soft Cell Remove Request, including a ScheduleIE. The ScheduleIE indicates which specific cells to remove with a neighbor (Node B). The cells specified in the ScheduleIE should be removed from local schedule of Node A while the Soft Cell Remove Request is sent to Node B. When receiving the Soft Cell Remove Request, the cells specified in the ScheduleIE should be removed from the local schedule of Node B.
            </t>
            <t>
               The policy to select cells corresponding to a Delete soft cell command is out of scope.
            </t>
         </section>
         <section title="Maintaining soft cells"                     anchor="sec_seq_maintainsoft">
            <t>
               The monitoring process internal to 6tus (<xref target="sec_monitoring"/>) is responsible for monitoring and re-scheduling soft cells to meet some QoS requirements. The monitoring process may issue a soft cell Maintenance command, which indicate a set of cells to be moved in the TSCH schedule.
            </t>
            <t>
               When a receiving a soft cell Maintenance command, 6tus initializes a Soft Cell Remove Request (<xref target="sec_seq_deletesoft"/>) with the neighbor in question, followed by a Soft Cell Reservation Request (<xref target="sec_seq_createsoft"/>).
            </t>
         </section>
         <section title="Creating hard cells"                       anchor="sec_seq_createhard">
            <t>
               The upper layer instructs 6tus to create one or more hard cells by calling the Create hard cell command. 
            </t>
            <t>
               When receiving a Create hard cell command, Node A's 6tus layer creates a Hard Cell Reservation Request, including a ScheduleIE. The ScheduleIE indicates which specific cells with a neighbor (Node B) to be added. The cells specified in the ScheduleIE should be added in local schedule of Node A while the Hard Cell Reserve Request is sent to Node B. When receiving the Hard Cell Reserve Request, the cells specified in the ScheduleIE should be added in the local schedule of Node B.
            </t>
         </section>
         <section title="Deleting hard cells"                       anchor="sec_seq_deletehard">
            <t>
               The upper layer instructs 6tus to delete one or more hard cells by calling the Delete hard cell command. 
            </t>
            <t>
               When receiving a Delete hard cell command, Node A's 6tus layer creates a Hard Cell Remove Request, including a ScheduleIE. The ScheduleIE indicates which specific cells with a neighbor (Node B) to be removed. The cells specified in the ScheduleIE should be removed from local schedule of Node A while the Hard Cell Remove Request is sent to Node B. When receiving the Hard Cell Remove Request, the cells specified in the ScheduleIE should be removed from the local schedule of Node B.
            </t>
         </section>
      </section>
      <section title="Statistics"           anchor="sec_statistics">
         <t>
            The 6tus Statistics Fuction (SF) is responsible for collecting statistics, which it can provide to an upper layer and the Monitoring Function (<xref target="sec_monitoring"/>).
         </t>
         <section title="Statistics Metrics">
            <t>
            6tus is in charge of keeping statistics from a set of metrics gathered from the behavior of the TSCH layer.
            </t>
            <t>
               The statistics data related to node states and cell metrics should be provided to upper layer for management, e.g. for RPL to calculate Rank or to GMPLS to determine whether the link in a multi-hop path is meeting the required bandwidth. The specific algorithm to generate the statistics is implementation dependent and hence out of the scope of this document. However, the statistics component should include the following metrics:
            <list style="numbers">
               <t>LinkThroughput: associated with a link, Node A->Node B. For example, LinkThroughput can be calculated with: SUM(NumOfCell(i)*NumOfBytePerPacket)/(FrameLen(i)*SlotDuration) where NumOfCell(i) is the total number of cells from Node A to Node B in Slotframe-i, FrameLen(i) is the length of Slotframe-i.</t>
               <t>Latency: associated with a link, Node A->Node B. For example, latency can be expressed as Minimum and Maximum Latency. Minimum Latency = Min(MinNumOfSlot(i),i=1..) * SlotDuration and Maximum Latency = Max(MaxNumOfSlot(i),i=1..) * SlotDuration where, MinNumOfSlot(i) and MaxNumOfSlot(i) are the minimum or maximum number of slots between two dedicated cells from Node A to Node B in Slotframe-i, respectively.</t>
               <t>LinkQuality. For example, average LQI, ETX;</t>
               <t>TafficLoad. For example, Queue Full Rate, Queue Empty Rate;</t>
               <t>NodeEnergy. For example, E_E=E_bat / [E_0 (T-t)/T].</t>
            </list>
            </t>
         </section>
         <section title="Statistics Configuration">
            <t>
               Statistics Function should be configurable. The configuration parameters should include:
               <list>
                  <t>LinkQualityStatisticsEn.</t>
                  <t>TafficLoadStatisticsEn.</t>
                  <t>DeviceStatisticsEn.</t>
               </list>
            </t>
            <t>
               6tus statistics function is enabled/disabled and configured by the commands defined in <xref target="sec_cmd_stats"/>
            </t>
         </section>
      </section>
      <section title="Monitoring"           anchor="sec_monitoring">
         <t>
            Monitoring Fuction (MF) in 6tus is responsible for monitoring cell quality, traffic load, and issuing soft cell Maintenance command, or Create/Delete soft cell command. The data provided by Statistics Function may be used as a input of MF in making monitoring decision.
         </t>
         <section title="Monitor Configuration">
            <t>
               Monitoring Function should be configurable. The configuration parameters should include:
               <list>
                  <t>MaintainCellEn.</t>
                  <t>CreateDeleteCellEn.</t>
                  <t>
                     QosLevel. QosLevel should associate with specific neighbor address. QosLevel may reflect the latency constraint, cell quality constraint, and so on. The value of QosLevel works as the bandwidth redundancy coefficient.
                  </t>
               </list>
            </t>
            <t>
               6tus monitoring function is enabled/disabled and configured by the commands defined in <xref target="sec_cmd_mon"/>
            </t>
         </section>
         <section title="Actuation">
            <t>
               The cell quality statistics may be used to generate soft cell Maintenance command, which leads to a soft cell Maintenance procedure (see <xref target="sec_seq_maintainsoft"/>). The traffic load statistics may be used to generate internal Create/Delete soft cell commands, which leads to a  soft cell Reservation process or a soft cell Remove process, respectively. (see <xref target="sec_seq_createsoft"/> and <xref target="sec_seq_deletesoft"/>)
            </t>
            <t>
               The policy to generate the soft cell Maintenance command and the policy to generate Create/Delete soft cell commands is out of the scope.
            </t>
            <t>
               The policy to generate Create/Delete soft cell commands may take QosLevel into account. For example, there are two slotframes existing, Slotframe-1 consists of 32 slots, Slotframe-2 consists of 96 slots; Slot duration is 10ms; QosLevel=1.5. If, from the traffic load statistics, MF figures out 2 packet/second should be added, then it leads to a Create soft cell command, where FrameID=2, NumCell=3.
            </t>
         </section>
      </section>
   </section>
   <section title="Using 6tus">
      <t>
         This part describes how 6tus gives support to specific upper layers.
      </t>
      <section title="RPL on 6tus">
         <t>
            6tus provides a set of functionalities so higher layers can obtain information about the status of the network and take advantage of the slotted structure to improve metric calculation and objective function optimization. The following sections describe how RPL can make use of 6tus layer.
         </t>
         <t>
            In order to optimize the combination of RPL and TSCH, 6tus provides specific support to RPL in the following aspects:
            <list>
               <t>RPL Neighbor Discovery and Parent Selection</t>
               <t>RPL Rank Computation</t>
               <t>RPL Control Messages Broadcast</t>
               <t>QoS</t>
            </list>
         </t>
         <section title="Support to Neighbor Discovery and Parent Selection">
            <t>
               The <xref target="sec_cmd_neigh"/> defines a set of commands so the neighbor table can be managed and queried by RPL. An entry to the neighbor table is inserted whenever an EBs is received at L2. The EB causes the 6tus layer to create an entry to the neighbors table. A neighbor table entry contains a set of statistics with respect to that specific neighbor such as the ASN when the last packet has been received from that neighbor, a set of cell quality metrics (RSSI, LQI), number of packets  sent to it or number of packets received from it amongst others. 6tus updates that table upon sending or reception of a packet from/to a neighbor. RPL can query at any time the neighbor table to retrieve information about a particular neighbor. This information can be used to compute the routing objective function as for example the inverse of the Probability Delivery Ratio (PDR). Parent selection can also be driven by the information contained on the neighbor table as well as complemented with the cells statistics defined in <xref target="sec_cmd_stats"/> and <xref target="sec_statistics"/>.
            </t>
            <t>
               6tus enables RPL to configure EB periodicity. By controlling the EBs periodicity, RPL can configure how network dynamism and support to mobility are addressed, as more frequent beacons the more prone to cope with mobility. <xref target="sec_cmd_netfrm"/> enables to configure how the network is formed and EBs periodicity.
            </t>
            <t>
               RPL may want to select the policy to determine the time source neighbor, this can be interesting when time source neighbors can be aligned to the routing topology, i.e, the selected time source neighbor can  be the node's favorite parent in a specific DODAG. <xref target="sec_cmd_time"/> describes the 6tus command to setup the desired policy. The policy is selected by RPL and enforced by 6tus layer.
            </t>
            <t>
               The rule for 6tus to select and maintain time sources is as follows.
               <list>
                  <t>
                     Time source of one node should be one member of the node's neighbor set.
                  </t>
                  <t>
                     Time sources should be the neighbors which have relatively lower Join Priority in the neighbor set. Lower Join Priority means closer to TSCH Pan coordinator.
                  </t>
                  <t>
                     The link from a node to its time sources should be in a good link quality.
                  </t>
               </list>
            </t>
         </section>
         <section title="Support to Rank Computation">
            <t>
               RPL objective function is computed by a set of metrics. The specific metrics and how the objective function is calculated are out of the scope of the present document, however, 6tus builds a set of functionalities to provide more accurate statistics of the underlying layer so the objective function can be accommodated to the nature of a TSCH MAC layer.
            </t>
            <t>
               6tus provides Statistics for Rank computation as described in sections(<xref target="sec_cmd_stats"/> and <xref target="sec_statistics"/>). The function to compute the Rank based on those statistics is out of scope of 6tus, however the provided metrics are aligned to the behavior of the TSCH MAC layer.
            </t>
         </section>
         <section title="Support to Control Messages Broadcast">
            <t>
               In RPL, some control messages, e.g. DIO, and DAO in sorting mode, need to be broadcasted to the neighbors. The broadcast channel requirement has to be addressed by 6tus by configuring TSCH to provide such a channel.
            </t>
            <t>
               In order to decouple the upper (RPL) layer to TSCH, instead of carrying DIO message in the Enhance Beacon, 6tus introduces a mechanism to establish broadcast cells.
            </t>
            <t>
               In TSCH schedule, every cell has the LinkType attribute. If LinkType=ADVERTISING, indicates that the cell may be used to send an Enhanced Beacon. When a node forms its Enhanced Beacon, the cell, with LinkType=ADVERTISING, should be included in the FrameAndCellIE, and its LinkOption field should be set to the combination of "Receive" and "Timekeeping". The receiver of the Enhanced Beacon may listen to at the cell to get the Enhanced Beacon (<xref target="IEEE802154e"/>). 6tus takes this way to establish broadcast channel, which not only allows TSCH broadcast Enhanced Beacon, but also allows an upper layer like RPL broadcast.
            </t>
            <t>
               To support DIO and DAO broadcast, 6tus uses the payload of a Data Packet to carry the DIO or DAO.  The message is inserted into the queue associated with the cells which LinkType is set to ADVERTISING. Then, taking advantage of the broadcast cell feature established with FrameAndCellIE as described above, the data packet with DIO or DAO in payload can be received by neighbors, which leads to the maintenance of DODAG.
            </t>
            <t>
               The LinkOption of combining "Receive" and "Timekeeping" let the receivers of the Enhanced Beacon understand that the cell is used as broadcast cell. But the frequency of sending Enhance Beacon or other broadcast messages by upper layer is determined by the timers associated with the messages, e.g. Enhance Beacon is triggered by the timer in 6tus, and the DIO message is triggered by the trickle timer of RPL. Therefore, for energy efficiency, receivers can have some policy to wake up at the broadcast cell, but it is implementation dependent.
            </t>
         </section>
         <section title="Support to QoS">
            <t>
               TSCH MAC layer is decoupled from the upper layers and its interaction with them is asynchronous. This means that the MAC layer executes a schedule and checks at each slot according to the type of cell whether there is something to send or receive. If that is the case the packet is sent and the MAC layer continues its operation. When an upper layer sends a packet, this packet is pushed into a queue waiting to the MAC layer to read it and sent it in a particular slot according to is destination and priority (<xref target="sec_dataconveymodel"/>). 6tus provides a set of queue management operations which enable upper layers to create different queues and determine their priorities. In that sense different classes of traffic can be handled by the routing layer, i.e inserting a packet to a specific queue according to its priority.
            </t>
            <t>
               6tus provides at least a Broadcast Queue, a Transmit Queue, and a Receive Queue. RPL can configure the queues with Internal Queueing Command (<xref target="sec_cmd_q_create"/>). Broadcast Queue are associated with cells with LinkType=ADVERTISING in sender's schedule, and LinkOption="Receive" and "Timekeeping" in all neighbors' schedule. That indicates the cells can be used for broadcast from the sender to its neighbors. Transmit Queues are associated with the dedicated Transmit cells or Shared Cells. RPL can benefit from having different priority queues in order to improve latency or provide integrated services with different priorities, i.e different traffic classes.
            </t>
            <t>
               Data Communication Command (<xref target="sec_cmd_data"/>) can be used to send control messages and data messages. The operation is used to insert a message to an specific queue.
            </t>
            <t>
               For example a suitable configuration can include two Broadcast Queues with priority High and Low, respectively; three Transmit Queues, with priority High, Mid, and Low, respectively; and one Receive Queue.
            </t>
            <t>
               When DestAddr is a broadcast address, its related MAC layer packets will be pushed into the Broadcast Queue with the corresponding priority. 6tus is responsible for feeding these packets to TSCH at broadcast cells.
            </t>
            <t>
               When DestAddr is unicast address, its related MAC layer packets will be push into the Transmit Queue with corresponding priority. 6tus is responsible for feeding these packets to TSCH at Transmit cells or Shared Cells.
            </t>
            <t>
               6tus conducts a QoS policy, which is out of scope. Here is an example. Packets in higher priority queue MUST be sent out before the packets in lower priority queue. Then, when there is an available broadcast/unicast cell, 6tus checks the broadcast/unicast queue with higher priority first, if there is a packet, then feed it to TSCH at the cell, otherwise checks broadcast/unicast queue with lower priority further. Repeat the process, until find a broadcast/unicast packet to feed to TSCH or find all of broadcast/unicast queues are empty.
            </t>
         </section>
      </section>
      <section title="GMPLS on 6tus">
         <t>
            GMPLS is a 2.5 layer service that is used to forward packets based on the concept of generalized label. Labels are determined by a reservation protocol during the formation of a multi-hop path. As defined by <xref target="RFC3471"/>,<xref target="RFC3473"/> and <xref target="RFC4606"/> a generalized label identifies a flow of data through a set of nodes that conform to a multi-hop path. Instead of being appended to each packet as is the case in MPLS <xref target="RFC3031"/>, the generalized label it is kept at each node in the form of a table. The table can be used to map input cells to output cells so routing decisions can be taken at that layer.
         </t>
         <t>
            In order to optimize the combination of GMPLS and TSCH, 6tus provides specific support to GMPLS in the following aspects:
            <list>
               <t>Cell Reservation Support</t>
               <t>QoS</t>
            </list>
         </t>
         <section title="Cell Reservation Support for GMPLS on 6tus">
            <t>
               The GMPLS control plane is used to send path reservation requests and reservation confirmations. When reservation confirmations are received, GMPLS needs to configure the underlying MAC layer to provide the required bandwidth. 6tus provides a set of commands to deal with bandwidth allocation, i.e. cell allocation. <xref target="sec_cmd_cell"/> describes the operations that GMPLS layer may use for cell configuration. Note that 6tus supports different types of reservations: soft cell and hard cell. How the reservation requirements are expressed is out of scope of this  document, but 6tus is able to handle a reservation done as a specific bandwidth requirement, done through specifying exact cells.
            </t>
            <t>
               GMPLS can also give different priorities to its control plane and data plane. It can for example be interesting to have a higher priority for control messages so the network adapts to new bandwidth requirements quickly. In contrast, data plane messages can be given a higher priority when they need to meet higher throughput or lower latency. 6tus provides commands (<xref target="sec_cmd_q"/>) to manage MAC layer queues and assign different priorities to them.
            </t>
         </section>
         <section title="Supporting QoS">
            <t>
               GMPLS can use 6tus statistics to determine whether some QoS requirement is met. Metrics defined in <xref target="sec_statistics"/> and operations defined in <xref target="sec_cmd_stats_desc"/> can be used by GMPLS to trigger new bandwidth allocation, or to map different input bundles to output bundles.
            </t>
         </section>
      </section>
   </section>
</middle>

<back>
   <references title="Normative References">
      <?rfc include='reference.RFC.2119'?>
   </references>
   <references title="Informative References">
      <?rfc include='reference.RFC.2205'?>
      <?rfc include='reference.RFC.2464'?>
      <?rfc include='reference.RFC.3031'?>
      <?rfc include='reference.RFC.3036'?>
      <?rfc include='reference.RFC.3471'?>
      <?rfc include='reference.RFC.3473'?>
      <?rfc include='reference.RFC.3819'?>
      <?rfc include='reference.RFC.4606'?>
      <?rfc include='reference.RFC.4919'?>
      <?rfc include='reference.RFC.4944'?>
      <?rfc include='reference.RFC.5548'?>
      <?rfc include='reference.RFC.5826'?>
      <?rfc include='reference.RFC.5867'?>
      <?rfc include='reference.RFC.5673'?>
      <?rfc include='reference.RFC.6282'?>
      <?rfc include='reference.RFC.6550'?>
      <?rfc include='reference.RFC.6568'?>
      <?rfc include='reference.RFC.6606'?>
      <?rfc include='reference.RFC.6755'?>
      <?rfc include='reference.I-D.thubert-roll-forwarding-frags.xml'?>
      <?rfc include='reference.I-D.tsao-roll-security-framework.xml'?>
      <?rfc include='reference.I-D.thubert-roll-asymlink.xml'?>
      <?rfc include='reference.I-D.ietf-roll-terminology.xml'?>
      <?rfc include='reference.I-D.ietf-roll-p2p-rpl.xml'?>
      <?rfc include='reference.I-D.ietf-roll-trickle-mcast.xml'?>
      <?rfc include='reference.I-D.thubert-6lowpan-backbone-router'?>
      <?rfc include='reference.I-D.draft-sarikaya-core-sbootstrapping-04'?>
      <?rfc include='reference.I-D.draft-gilger-smart-object-security-workshop-00'?>
      <?rfc include='reference.I-D.phinney-roll-rpl-industrial-applicability'?>
      <?rfc include='reference.I-D.ietf-core-coap'?>
      <?rfc include='reference.I-D.watteyne-6tsch-tsch-lln-context'?>
      <reference anchor="I-D.draft-palattella-6tsch-terminology">
         <front>
            <title>
               Terminology in IPv6 over Time Slotted Channel Hopping. draft-palattella-6tsch-terminology-00 (work in progress)
            </title>
            <author initials="MR" surname="Palattella" fullname="Maria Rita Palattella" role="editor"/>
            <author initials="P"  surname="Thubert"    fullname="Pascal Thubert"/>
            <author initials="T"  surname="Watteyne"   fullname="Thomas Watteyne"/>
            <author initials="Q"  surname="Wang"       fullname="Qin Wang"/>
            <date month="March" year="2013"/>
         </front>
      </reference>
      <reference anchor="I-D.draft-thubert-6tsch-architecture">
         <front>
            <title>
               An Architecture for IPv6 over Time Synchronized Channel Hopping. draft-thubert-6tsch-architecture-00 (work in progress)
            </title>
            <author initials="P" surname="Thubert"  fullname="Pascal Thubert" role="editor"/>
            <author initials="R" surname="Assimiti" fullname="Robert Assimiti"/>
            <author initials="T" surname="Watteyne" fullname="Thomas Watteyne"/>
            <date month="March" year="2013"/>
         </front>
      </reference>
   </references>
   <references title="External Informative References">
      <reference anchor="IEEE802154e">
         <front>
            <title>IEEE std. 802.15.4e, Part. 15.4: Low-Rate Wireless Personal Area Networks (LR-WPANs) Amendament 1: MAC sublayer</title>
            <author>
               <organization>IEEE standard for Information Technology</organization>
            </author>
            <date month="April" year="2012"/>
         </front>
      </reference>
      <reference anchor="IEEE802154">
         <front>
            <title>IEEE std. 802.15.4, Part. 15.4: Wireless Medium Access Control (MAC) and Physical Layer (PHY) Specifications for Low-Rate Wireless Personal Area Networks</title>
            <author>
               <organization>IEEE standard for Information Technology</organization>
            </author>
            <date month="June" year="2011"/>
         </front>
      </reference>
      <reference anchor="OpenWSN" target="http://www.openwsn.org/">
         <front>
            <title>Berkeley's OpenWSN Project Homepage</title>
            <author/>
            <date/>
         </front>
      </reference>
   </references>
</back>

</rfc>
