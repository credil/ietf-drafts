<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<rfc category="info" docName="draft-slevinski-signwriting-text-02" ipr="trust200902">
  <?rfc strict="yes" ?>
  <?rfc toc="yes"?>
  <?rfc tocdepth="4"?>
  <?rfc symrefs="yes"?>
  <?rfc sortrefs="yes" ?>
  <?rfc compact="yes" ?>
  <?rfc subcompact="no" ?>

  <front>
    <title abbrev="SignWriting Text">The SignPuddle Standard for SignWriting Text</title>

    <author fullname="Stephen E Slevinski Jr" initials="S."
            surname="Slevinski">
      <organization>SignPuddle</organization>
      <address>
        <email>slevin@signpuddle.net</email>
      </address>
    </author>

    <date month="November" year="2013" />

    <area>General</area>

    <workgroup>Sutton-Slevinski Collaboration</workgroup>

    <keyword>script</keyword>
    <keyword>encoding</keyword>
    <keyword>model</keyword>
    <keyword>Cartesian</keyword>
    <keyword>SignPuddle Standard</keyword>
    <keyword>SignWriting</keyword>
    <keyword>SignWriting Text</keyword>
    <keyword>plain text</keyword>
    <keyword>rich text</keyword>
    <keyword>sign language</keyword>
    <keyword>grammar</keyword>

    <abstract>
      <t>For concreteness, because the universal character set is not yet universal, and because an international standard for the internet community should be documented and stable, this I-D has been released with the intention of producing an RFC to document the character use and naming conventions of the SignWriting community on the Internet.
      </t>
      <t>The SignWriting Script is an international standard for writing sign languages by hand or with computers. 
      From education to research, from entertainment to religion, SignWriting has proven useful because people are using it to write signed languages.
      The SignWriting Script has two major families: Block Printing for the reader and Handwriting for the writer.  
      </t>
      <t>The SignWriting Text encoding model defines the structures of SignWriting Block Printing.  
      The plain-text mathematical names are explained with tokens and regular expressions patterns.  
      The visual image is supported with SVG and PNG generated by a SignWriting Icon Server.
      The TrueType Font is experimental and not fully functional.
      </t>
      <t>Formal SignWriting strings define a lite ASCII markup to name each sign logogram.
      The text is defined with regular expressions.  
      The included query language defines several productive searching possibilities.
      The transformation from query language to regular expression is defined.
      </t>
      <t>For Unicode, the current use of the Private Use Area font characters is documented.  The state of the TrueType Font is explained.  A character proposal for plane 1 is included that is isomorphic with the characters that are currently used by the community.
      </t>
      <t>Three appendices discuss additional topics to the standard.  
      The first discusses the Modern SignWriting theory and example document, stable since January 12, 2012.
      The second discusses the symbol encoding of the International SignWriting Alphabet 2010.
      The third discusses the SignPuddle Standards: licences, infrastructure, and compatibility.
      </t>
      <t>This memo concretely defines a conceptual character encoding map for the Internet community.  It is published for reference, examination, implementation, and
      evaluation.  Distribution of this memo is unlimited.</t>
    </abstract>
  </front>

  <middle>

    <section title="SignWriting Script" anchor="signwriting_script">
      <t>The SignWriting Script is the universal and complete solution for written sign language.  It has been applied to a wide and deep international community of sign languages including: 
American Sign Language, Arabian Sign Languages, Australian Sign Language, Bolivian Sign Language, Brazilian Sign Language, British Sign Language, Catalan Sign Language, Colombian Sign Language, 
Czech Sign Language, Danish Sign Language, Dutch Sign Language, Ethiopian Sign Language, Finnish Sign Language, Flemish Sign Language, French-Belgian Sign Language, French Sign Language, German Sign Language,
Greek Sign Language, Irish Sign Language, Italian Sign Language, Japanese Sign Language, Malawi Sign Language, Malaysian Sign Language, Maltese Sign Language, Mexican Sign Language, Nepalese Sign Language, 
New Zealand Sign Language, Nicaraguan Sign Language, Norwegian Sign Language, Peruvian Sign Language, Philippines Sign Language, Polish Sign Language, Portugese Sign Language, Quebec Sign Language, 
South African Sign Language, Spanish Sign Language, Swedish Sign Language, Swiss Sign Language, Taiwanese Sign Language, and Tunisian Sign Language.
      </t>
      <t>Sign language is vastly different than spoken language. Instead of the sequential sounds of the voice, there is a 3 dimensional space with simultaneous action. 
      The SignWriting Script creates 2-dimensional writing that is visually icon and full of featural information. 
      This is true on the symbol level and on the sign level. 
      A symbol represents phonemic information and is full of featural information to better understand the phonemes of the symbols. 
      A sign is a 2-dimensional arrangement of symbols and is full of featural information to better understand the morphemes of the signs. 
      </t>
      <t>The SignWriting Script is an international standard for writing sign languages by hand or with computers. 
      From education to research, from entertainment to religion, SignWriting has proven useful because people are using it to write signed languages.
      </t>
      <t>Initially developed in 1974, the script was written exclusively by hand for 12 years.  Since then the script has spread around the world and continues to be written on paper and chalkboard.</t>
      <t>In 1981, SignWriting Publishing rapidly evolved with Block Printing.  In 1986, computerization of the SignWriting Block Printing began.  
      The current symbol encoding of the ISWA 2010 has been stable since the font release on October 20th, 2010.  
      The larger character encoding model has been stable since the initial release of Modern SignWriting on January 12th, 2012.
      </t>
      <t>The 2 families of the SignWriting Script are Handwriting for the writer and Block Printing for the reader.  
      Block Printing uses more features and Handwriting often uses less.
      Block printing is used in education, publishing, and is the basis of the computerized model.  
      </t>
      
      <section title="2-Dimensional Signs" anchor="logograms">
        <t>A sign is a variably-size logographic word.  It is a 2-dimensional combination of symbols inside of a signbox with a tight bounding box and an explicit center.  
        The size of the signbox varies with the symbols written inside.
        </t>
        <t>Inside of a 2-dimensional signbox, the symbols are placed in a freeform, 2-dimensional arrangement. This feature of the script expresses spatial relation directly.
        </t>
        <t>Writing based on vision uses two viewpoints: receptive and expressive.  The receptive viewpoint is based on the idea of receiving an image.  For the receptive viewpoint, the right hand of a signer will be written on the left side of the canvas.  When SignWriting is used for transcription, the receptive view is most often used.  The related writing systems of DanceWriting and MovementWriting normally use the receptive viewpoint.
        </t>
        <t>The expressive viewpoint is based on the idea of expressing a concept.  For the expressive viewpoint, the right hand of a signer will be written on the right side of the canvas.  When SignWriting is used for authorship, the expressive view is most often used.
        </t>
        <t>The are two main writing planes: the front wall (Frontal Plane) and the floor (Transverse Plane). The choice of writing plane can affect the shape of the symbols, such as the fill pattern for the hand shape palms or the tail for the movement arrows.
        </t>
        <t>There are two perspectives: front and top. The front perspective is a straight on view of/from the signer.  The top perspective is a top-down view of the signer.  Usually, a sign will be written from a single perspective.
        </t>
      </section>
      <section title="Punctuation and Text">
        <t>Logographic signs are mixed with punctuation to form text. 
        </t>
        <t>Punctuation is a single symbol and separates a series of signs into structured sentences.  
        A punctuation symbol is always used alone and should not be used in a sign.  
        Line breaks should not occur before punctuation.
        </t>
        <t>When written vertically, SignWriting can use 3 different lanes: left, middle, and right. The middle lane is the default lane and punctuation is always used in the middle lane. No matter the lane, the center of a sign is aligned with the center of the lane.
        </t>
        <t>For body weight shifts to one side or the other, the center of the sign is aligned with a fixed horizontal offset from the middle lane into either the left or right lane.
        </t>
        <t>The left and right lanes are used to represent body weight shifts and are represented by a horizontal offset from the middle lane. Body weight shifts are important to the grammar of sign languages, used for two different grammatical aspects: 1) role shifting during sign language storytelling, and 2) spatial comparisons of two items under discussion. One "role" or "item" is placed on the right side of the body (right lane), and the other on the left side of the body (left lane), and the weight shifts back and forth between the two, with the narrator in the middle (middle lane). 
        </t>
      </section>
      <section title="Block Printing" anchor="printing">
        <t>Valerie Sutton writes, "SignWriting Printing is easy to read. It is designed for the reader. The Printing can be written by hand as well as by computer. If I am writing a letter to a friend in ASL, I write the letter in SignWriting Printing, taking the time to make sure that my handwritten-symbols are easy and clear to read. I try to write as clearly as if I were using a computer. Of course it is slower, but it is worth it, knowing that my friend will be able to read my letter!"
        </t>
        <t>With Block Printing, a sign is a cluster of several symbols arranged in 2-dimensions space.
        Each symbol has a definite appearance and understanding within an established symbol set.
        The exact form of each symbol is structured, standardized, and highly featural.  
        </t>        
        <t>Each symbol has two aspects.  The first is the line that defines the positive shape of the symbol.
        The second aspect is the fill (or negative space) of the symbol that is sometimes used inside the lines for palm facing, and inside some arrow heads and tails. 
        Not every symbol has fill.  
        Fill matters when symbols overlap.  
        The negative space of the symbol on top will cover part of the symbol underneath.
       </t>
        <t>The Block Printing family is aimed at the needs of the reader and the publisher.  
        The Block Printing family is ready to standardize with a fully developed model.
        </t>
      
      </section>

      <section title="Handwriting" anchor="handwriting">
        <t>Valerie Sutton writes, "SignWriting Handwriting is easier to write by hand, than the Printing. It is designed for the writer. There are several variations of Handwriting, and since most of the time, the writer is only writing for private notes, some writers create their own shortcuts that work just for them...and that is fine!"
        </t>
        <t>The purpose is not to recreate the iconic symbols of the International SignWriting Alphabet exactly by hand, but the purpose is to enable the writer to quickly write notes on paper or chalkboard.
        Handwriting often drops features of the SignWriting Script for efficiency and speed. 
        If too many features are dropped, the writing may loose it's clarity over time as the writer is distanced from the writing.  This is common for Shorthand.
        </t>
        <t>A popular form of SignWriting is cursive.  It can be shared among a groups of writers or it can be individualized and personal.  Cursive writing is designed to have fluid marks and a natural flow.  Cursive writing may use fewer features than the iconic symbols, but should be related to an iconic symbol in appearance and meaning.  Once developed, this style of writing is great for taking notes in a class.
        </t>
        <t><eref target="http://www.signwriting.org/lessons/cursive/shorthand">Shorthand is a skill of the proficient writer</eref>.
        In 1982, Sign Language Stenographers could <eref target="http://www.signwriting.org/lessons/cursive/byhand5.html">record sign language with SignWriting Shorthand at normal signing speed</eref>.  Time tests proved practice and special training were required. The marks they write are personal style of quick and efficient strokes with a highly developed reception to what signifies meaning.  They understand the iconic symbols of the SignWriting Script, but their marks are personal reminders rather than a fully developed text.  </t>
         
        <t>The shorthand in and of itself is often an incomplete representation of the gestures that were experienced.  The shorthand writing can be thought of as a short-term memory device.  Often shorthand notes must be revised and extended at a later time, the sooner the better.</t>
      </section>

    </section>

    <section title="SignWriting Text" anchor="signwriting_text">
      <t>SignWriting Text uses plain text that is diagrammatic.  It defines relationships with simple structures.  
      It clarifies likenesses that are topologically similar.
      </t>
      <t>SignWriting Text is grammatically correct because it supports 2-dimensional arrangement and writing with lanes.
      Mathematically sized logograms are named with plain text strings based on patterns.
      Simple HTML and CSS are used for proper vertical layout.
      </t>
      <t>This model separates visual display from layout issues.  
      It is compatible with TrueType Fonts and server generated images, either SVG or PNG.  
      </t>
      <section title="2-Dimensional Space">
        <t>Each logographic sign exists on its own 2-dimensional canvas.  Each point on the canvas is identified with an X and a Y coordinate.  
        Each canvas has a defined center.  Formal numbers range from -250 to 249.  Informal number have no limit.  
        </t>
          <figure>
            <artwork>
           Y Axis
             | -
             | 
             |
             |
             |
             |
X Axis       |
  -----------+------------
  -          |           +
             |
             |
             |
             |
             |
             | +
            </artwork>
          </figure>

          <t> Symbols are placed on the canvas with coordinates that represent the top-left of the symbol image.  Symbol images may overlap.
          </t>
          <t>2-dimensional space does not have a normative 1-dimensional order.  
          When symbols overlap, the relative order of the overlapping symbols is important.
          Otherwise, the exact string order of the spatial symbols is unpredictable.
          </t>
          <t>Each signbox is an unordered list of symbols in 2-dimensional relationships that can be represented with an ASCII string as the name.  
          This name by itself can not be sorted with a binary string compare.
          For sorting, the signbox text must be prefixed with a sequential list to become a sortable term.
          </t>
      </section>
      <section title="Terms for Sorting">
        <t>A term is a specialized sign that uses a sequential prefix before the 2-dimensional signbox text. 
        The sequence is a list of writing symbols and/or detailed location symbols that identify temporal order and additional analysis.
        A valid sequence must contain at least one symbol and can not contain punctuation.  
        </t>
        <t>This optional prefix is written by the author or extracted from a dictionary.
        The sorting of terms in universally supported through the binary string comparison.
        </t>
          <t>There are several theories on the best way to structure a sequence.  The most productive is based on the SignSpelling Sequence theory of Valerie Sutton.  
          A sequence is structured as a series of starting handshapes followed by optional movements, transitional handshapes, movement, and end handshapes.  
          Only symbols from category 1 (hands) and category 2 (movement) should be used in this first section.  
          The last section of the sequence should contain symbols of dynamics &amp; timing, head &amp; face, or body: categories 3, 4, and 5.
          </t>
          <t>Detailed location symbols from category 6 can be used in a sequence, but are rarely (if ever) needed for a sequence in general writing.
          </t>
      </section>
      <section title="Mathematical Name">
        <t>The mathematical name of a logographic sign is a plain text string of characters.   
        This encoding model makes explicit those features which can be effectively and efficiently processed. 
        Formal languages and regular expressions are used to solve fundamental problems.
        </t>
          <texttable align='left' style='all' anchor='table_regex'>
            <preamble>Regular Expression Basics</preamble>
            <ttcol>Characters</ttcol>
            <ttcol>Description</ttcol>
            <ttcol>Example</ttcol>
            <c>*</c><c>Match a literal 0 or more times </c><c>ABC* matches AB, ABC, ABCC, ...</c>
            <c>+ </c><c>Match a literal 1 or more times </c><c>ABC+ matches ABC, ABCC, ABCCC, ...</c>
            <c>? </c><c>Match a literal 0 or 1 times </c><c>ABC? matches AB or ABC</c>
            <c>{#} </c><c>Match a literal "#" times </c><c>AB{2} matches ABB</c>
            <c>[ ] </c><c>Match any single literal from a list </c><c>[ABC] matches A, B, or C</c>
            <c>[ - ] </c><c>Match any single literal in a range </c><c>[A-C] matches A, B, or C</c>
            <c>( ) </c><c>Creates a group for matching </c><c>A(BC)+ matches ABC, ABCBC, ABCBCBC, ...</c>
            <c>( | ) </c><c>Matches one of several alternatives </c><c>(AB|BC|CD) will match AB, BC, or CD</c>
          </texttable>
          <t>The mathematical name is structured with 11 different tokens.  
          They can be grouped in 4 layers:  the 5 structural makers (A, B, L, M, R), 
          the 3 base symbol ranges (w, s, P), 
          the 2 modifier indexes (i, o), and the numbers (n).
          </t>
          <texttable align='left' style='all' anchor='table_tokens_structural'>
            <preamble>The Tokens of SignWriting Text</preamble>
            <ttcol>Token</ttcol>
            <ttcol>Description</ttcol>

            <c>A</c>
            <c>Sequence Marker</c>

            <c>B</c>
            <c>SignBox Marker</c>

            <c>L</c>
            <c>Left Lane Marker</c>

            <c>M</c>
            <c>Middle Lane Marker</c>

            <c>R</c>
            <c>Right Lane Marker</c>

            <c>w</c>
            <c>Writing BaseSymbols</c>

            <c>s</c>
            <c>Detailed Location BaseSymbols</c>

            <c>P</c>
            <c>Punctuation BaseSymbols</c>

            <c>i</c>
            <c>Fill Modifiers</c>

            <c>o</c>
            <c>Rotation Modifiers</c>

            <c>n</c>
            <c>Numbers: -250 thru 249</c>
        </texttable>
        <t>These tokens are used in patterns to form written sign language.  
        The following token patterns fully describe the SignWriting Text language.
        <eref target="http://signpuddle.net/wiki/index.php/MSW:Mathematical_Model#4.B._Proto_Encoding_of_SignWriting_Text"></eref>
        </t>

          <texttable align='left' style='all' anchor='table_token_patterns'>
            <preamble>Token Patterns</preamble>
            <ttcol>Regular Expression</ttcol>
            <ttcol>Description</ttcol>
<c>wio</c><c>a writing symbol as 3 tokens of writing base, fill modifier and rotation modifier</c>
<c>nn</c><c>coordinate with X and Y values as 2 numbers</c>
<c>wionn</c><c>a spatial symbol as 5 tokens, with 3 tokens for a writing symbol and 2 tokens for coordinates of top left placement</c>
<c>(wionn)*</c><c>zero or more spatial symbols</c>
<c>Bnn(wionn)*</c><c>a signbox with a preprocessed maximum coordinate and a list of spatial symbols used for horizontal writing</c>
<c>[LMR]</c><c>a lane marker: either left, middle or right.</c>
<c>[LMR]nn(wionn)*</c><c>a signbox in either the left, middle, or right lane with a preprocessed maximum coordinate and a list of spatial symbols used for vertical writing</c>
<c>[ws]</c><c>a writing base symbol or a detailed location base symbol</c>
<c>[ws]io</c><c>a writing symbol or a detailed location symbol</c>
<c>([ws]io)+</c><c>one or more writing symbols and/or detailed location symbols</c>
<c>(A([ws]io)+)?</c><c>an optional prefix as a prefix marker followed by one or more writing symbols and/or detailed location symbols</c>
<c>Pionn</c><c>a punctuation symbol as a punctuation base symbol with a preprocessed minimum coordinate</c>
<c>(((A([ws]io)+)?Bnn(wionn)*)|Pionn)+</c><c>a sign text for horizontal writing as a string of signboxes (with optional prefixes) and punctuation</c>
<c>(((A([ws]io)+)?[LMR]nn(wionn)*)|Pionn)+</c><c>a sign text for vertical writing as a string of signboxes in lanes (with optional prefixes) and punctuation </c>
          </texttable>

      </section>
      <section title="Visual Image">
        <t>The visual image of a logographic sign is a 2-dimension arrangement of symbols inside of a signbox.
        Each signbox has a defined width, height, and 2-dimensional center that can be calculated from the plain text.
        </t>
        <t>The TrueType Font is ready for experimental use.
          The entire ISWA 2010 is included with 2-dimensional arrangements of symbols for the logograms.
          The TrueType Font utilizes the Private Use Area Unicode characters. 
          There are 4 open issues: the symbols are fuzzy, handshapes overlap incorrectly, arrow head/tail fill is missing, and Graphite occassionally crashes.
          </t>
          <t>The SignWriting Icon Server (open source on GitHub) is able to create logographic sign images from the mathematical names.
          The SVG is print quality.  The PNG images are pixelated. The SignWriting Icon Server includes multiple levels of caching to improve the speed and response of the user experience over time.
      
          </t>

      </section>

    </section>

      <section title="Formal SignWriting">
        <t>According to Wikipedia, "In mathematics, computer science, and linguistics, a formal language is a set of strings of symbols that may be constrained by rules that are specific to it."
        <eref target="https://en.wikipedia.org/wiki/Formal_language"></eref>
        </t>
        <t>Formal SignWriting defines a formal language for the signed languages of the world.  
        Any sign of any sign language can be written as a string of ASCII characters.
        </t>
        <t>Formal SignWriting is a heuristic model.  The first prototypes were created in 2008.  
        Through trial and error, the model was successively refactored to reduce the complexity and the computation cost of the implementations.  
        The model has been optimized for common usage and processing.  The final model has been stable since January 12th, 2012.
        </t>
        <section title="Lite Markup">
          <t>ASCII characters are used to identify structure, symbols, and coordinates.  
          It has proven to be beneficial to use a human readable lite markup of ASCII words separated by white space.
          Each word represents either a sign or a punctuation.  
          The lite markup has the advantage of a small size without requiring special Unicode or XML functions.  
          Simple regular expressions can quickly and efficiently process the lite markup.
          </t>

          <t>Formal SignWriting uses the following structures with the associated regular expressions.
          <list style='hanging'>
            <t hangText="'Symbol key'">S[123][0-9a-f]{2}[0-5][0-9a-f]</t>
            <t hangText="'Coordinate'">[0-9]{3}x[0-9]{3}</t>
            <t hangText="'Explicit Coordinate'">(2[5-9][0-9]|[3-6][0-9]{2}|7[0-4][0-9])x(2[5-9][0-9]|[3-6][0-9]{2}|7[0-4][0-9])</t>
            <t hangText="'Signbox'">[BLMR]([0-9]{3}x[0-9]{3})(S[123][0-9a-f]{2}[0-5][0-9a-f][0-9]{3}x[0-9]{3})*</t>
            <t hangText="'Term'">(A(S[123][0-9a-f]{2}[0-5][0-9a-f])+)[BLMR]([0-9]{3}x[0-9]{3})(S[123][0-9a-f]{2}[0-5][0-9a-f][0-9]{3}x[0-9]{3})*</t>
            <t hangText="'Punctuation'">S38[7-9ab][0-5][0-9a-f][0-9]{3}x[0-9]{3}</t>
            <t hangText="'Text'">((A(S[123][0-9a-f]{2}[0-5][0-9a-f])+)?[BLMR]([0-9]{3}x[0-9]{3})(S[123][0-9a-f]{2}[0-5][0-9a-f][0-9]{3}x[0-9]{3})*|S38[7-9ab][0-5][0-9a-f][0-9]{3}x[0-9]{3})( (A(S[123][0-9a-f]{2}[0-5][0-9a-f])+)?[BLMR]([0-9]{3}x[0-9]{3})(S[123][0-9a-f]{2}[0-5][0-9a-f][0-9]{3}x[0-9]{3})*| S38[7-9ab][0-5][0-9a-f][0-9]{3}x[0-9]{3})*</t>
          </list>
          </t>
          
          <t>Any symbol key is 6 characters long.  The first character of "S" identifies the start of a symbol key.  
          The next 3 characters identify the symbol base.  
          The last two characters identify the fill and rotation modifiers.
          </t>
          <t>There are 2 definitions for a coordinate.  The more general definition simply defines 3 numbers followed by an "x" followed by 3 more numbers.
          The more explicit definition correctly restricts the number range from 250 to 749.  The general coordinate definition is adequate for processing.
          </t>
          <t>Each signbox includes 2 preprocessed maximum coordinate numbers (bottom-right).  
          This pre-calculated value defines a tight bounding box around the symbols used in the sign.
          </t>
          <t>Terms include a sequential symbol prefix (used for sorting) before the signbox definition.
          </t>
          <t>Punctuation includes a preprocessed minimum coordinate.  The maximum coordinate of a punctuation is derived by processing each coordinate number separately and combining the results.
          For both X and Y values, Maximum = 1000 - Minimum.
          </t>
          <t>Text is defined as a list of intermixed signs and punctuation.
          </t>

        </section>


        <section title="Query Language">
          <t>The query language is a lite ASCII markup similar to Formal SignWriting.
          Any Formal SignWriting string can easily be converted into a query string.
          The query string is a concise representation for a much larger and detailed set of regular expressions.
          The regular expressions can be used to quickly and accurately search large files and databases containing Formal SignWriting.
          </t>
          <t>A filter and repeat pattern of searching is used as a series of match criteria. 
          A file, database, or text input is searched using a sequence of steps.  
          Each step applies a single match criteria.  Matching results are collated and the next search criteria is applied.  
          The pattern of searching the previous results continues until all regular expressions have been used.
          </t>
          <t>The conversion from Query String to Regular Expression has been fully implemented in the SignWriting Icon Server.
          </t>

          <t>The Query Language uses the following structures with the associated regular expressions.
          <list style='hanging'>
            <t hangText="'Query Type'">QT?</t>
            <t hangText="'Symbol Search'">S[123][0-9a-f]{2}[0-5u][0-9a-fu]([0-9]{3}x[0-9]{3})?</t>
            <t hangText="'Range Search'">R[123][0-9a-f]{2}t[123][0-9a-f]{2}([0-9]{3}x[0-9]{3})?</t>
            <t hangText="'Variance'">(V[0-9]+)?</t>
            <t hangText="'Query String'">QT?(S[123][0-9a-f]{2}[0-5u][0-9a-fu]([0-9]{3}x[0-9]{3})?|R[123][0-9a-f]{2}t[123][0-9a-f]{2}([0-9]{3}x[0-9]{3})?)*(V[0-9]+)?</t>
          </list>
          </t>
          <t>Two different types of general query are possible.
          QT is a term specific search query that will only find results that can be sorted.
          Q is a general query that will find all of the sortable terms as well as un-prefixed signboxes that can not be sorted.
          </t>
          <t>The symbol search is a combination of symbol definition and optional coordinate.  
          For the symbol definition, it is possible to use the "u" character for the fill and rotation.  
          The "u" stands for unknown and will match all values rather than a specific character.  
          The optional coordinate will use location searching for the symbol.
          The coordinate together with the variance will specify the values of approximate matching.
          </t>
          <t>The range search is a combination of a base symbol range and optional coordinate.
          The base symbol range consists of 2 values: the starting base symbol and the ending base symbol.
          Every symbol between these 2 base symbols will be matched.
          The optional coordinate will use location searching for the range of symbols.
          The coordinate together with the variance will specify the values of approximate matching.
          </t>
          <t>The variance is a number value, 0 or greater with a default value of 10.
          The variance is used with location searching to specify the range of coordinates that are matched.
          A variance of 0 will only find symbols used at an exact coordinate.
          A variance of 5 will match the symbols used at a coordinate, plus or minus 5 for both X and Y numbers.
          </t>

          <t>The Query Language to regular expression generator uses the following structures as building blocks.
          <list style='hanging'>
            <t hangText="'Term Prefix'">(A(S[123][0-9a-f]{2}[0-5][0-9a-f])+)</t>
            <t hangText="'SignBox Prefix'">[BLMR]([0-9]{3}x[0-9]{3})</t>
            <t hangText="'Spatial Symbols'">(S[123][0-9a-f]{2}[0-5][0-9a-f][0-9]{3}x[0-9]{3})*</t>
          </list>
          </t>
          <t>The Term Prefix is a structural marker followed by zero or more symbols.  
          For the query string "QT", the prefix is required.  
          For the general "Q", the prefix is optional so "?" is appended to the Term Prefix regular expression.
          </t>
          <t>The SignBox Prefix is a combination of structural marker and preprocessed maximum coordinate.
          Every constructed regular expression will include the SignBox Prefix.
          </t>
          <t>The Spatial Symbols is zero or more symbol definitions and associated coordinates.  
          The Spatial Symbols regular expression is used for every search.
          For both "Q" and "QT", it is the only symbol matching used.
          When searching for specific symbols and ranges, 
          the general Spatial Symbols definition will sandwich the specific search definitions.
          </t>
          <t>Searching for number ranges with regular expressions requires a unique technique.
          This technique was described to the LinkedIn Regular Expression Experts <eref target="http://www.linkedin.com/groups/Searching-3-digit-number-simple-1066587.S.85595980?qid=9cb1768b-5413-4f7f-92b5-fbef2c243df8">at the end of 2011</eref>.
          Searching for number ranges in hexadecimal with regular expressions is slightly more complicated but uses the same solution.
          </t>
        </section>
      </section>


    <section title="Unicode Integration" anchor="unicode">
      <t>SignWriting Text is integrated with Unicode in the Private Use Area.  
      </t>
      <section title="Private Use Area Font Characters">
        <t>The Unicode PUA is a simple shift of the x-Binary-SignWriting coded character set.  
        Each code is increased by decimal value 1,038,080 which is FD700 in hex.  
        An experimental TrueType Font converts the Unicode PUA to create the visual images.  
        </t>
      </section>
      <section title="Proposal" anchor="proposal">
        <t>A shift of the 12 bit characters of x-Binary-SignWriting by 1D700 will use the range U+1D800 to U+1DFFF, using eight 8-bit rows of Unicode Plane 1 known as the the SMP: Supplementary Multilingual Plane.  
        These rows occur inside an unassigned section of the Notational systems.
        </t>
        <t>These are the characters being used by the community.  The gap between the ISWA 2010 symbols and the number sections illustrates two truths.  
        First, the entire Sutton MovementWriting family will be encoded.  Second, it doesn't really matter where the numbers are placed, perhaps plane 14.
        </t>
        <t> The number characters encode the ruler principle with characters.  The ruler principle is built in automatically for scripts written sequentially in one dimension.  
        The number characters are needed for 2-dimensional logograms, where the spatial relationship between symbols is explicitly stated with X,Y Cartesian coordinates.  
        Number characters may be a useful concept for other scripts and notations to support 2-dimensional script processing.
        </t>
        <t>The entire set of characters is used for a plain text model of a 2-dimension logographic script with freeform placement of symbols.</t>
        <t>Future additions to the ISWA 2010 will include essential hand shapes and new mouth shapes.  New characters will extend the SignWriting Text model with minimal complications.  
        </t>
        <t>Future proposals will include the rest of the Sutton MovementWriting System.</t>
      </section>
    </section>

    <section title="IANA Considerations">
      <t>This section provides guidance to the Internet Assigned Numbers
      Authority (IANA) regarding registration of values related to the code spaces
      of the Center for Sutton Movement Writing, in accordance with [RFC2978].
      
       
      protocol, in accordance with BCP 26, [RFC2434].
      </t>
      <t>See IANA: http://www.rfc-editor.org/rfc/rfc2978.txt
      </t>
      <t>Conforms with RFC 2040.
      </t>
      <t>There are three name spaces for the Center for Sutton Movement Writing that require definition and extension:
      x-ISWA-2010, x-Binary-SignWriting, and x-Character-SignWriting
      </t>
      <t>SignWriting Text is an international standard with several coded character sets.  These sets may require additional hand and mouth shapes. 
      </t>
      <t>   The following terms are used here with the meanings defined in BCP
   26: "name space", "assigned value", "registration".

      </t>
      <t>   The following policies are used here with the meanings defined in BCP
   26: "Private Use", "First Come First Served", "Expert Review",
   "Specification Required", "IETF Consensus", "Standards Action".

      </t>
   </section>

    <section title="Security Considerations">
      <t>None.</t>
    </section>

  </middle>

  <back>

    <section title="Modern SignWriting" anchor="msw">
      <t>This Internet Draft is in complete agreement with the theory and example workbook released on January 12th, 2012 called <eref target="http://signpuddle.net/wiki/index.php/MSW">Modern SignWriting</eref>.
      Modern SignWriting has example text and concretely defines the processes available.
      It fully documented the text encoding with regular expressions.
      </t>
      <t>The Formal Signwriting encoding is ready to deploy with a maturing infrastructure.
      The name of a sign with 4 symbols is 60 characters long.
      The plain text model fully supports the grammar of written ASL with an additional 350 characters of basic HTML and CSS.  
      The stand alone JavaScript engine for client side viewing is 1.3 K characters and qualifies as a micro script.
      This script can be applied to any modern browser through a site script or initiated within a browser using a bookmark.
      </t>
      <t>To search for a sign with 4 spatial symbols requires 53 characters of query string and will create around 800 characters of regular expression for searching.
      </t>
      <t>There is sometimes a limit on text size.  
      Assuming a maximum size of 256 characters, here is the list for the number of symbols that can be used with an explicit number of words.
      </t>
      <t>For one sign with proper sorting, 13 symbols can be recorded with 256 characters.  
      For two signs with proper sorting, 12 symbols can be recorded with 247 characters.  
      For three signs with proper sorting, 11 symbols can be recorded with 238 characters.
      For four signs with proper sorting, 11 symbols can be recorded with 248 characters
      </t>

      <t>For one sign without sorting, 19 symbols can be recorded with 255 characters.  
      For two signs without sorting, 18 symbols can be recorded with 251 characters.  
      For three signs without sorting, 17 symbols can be recorded with 247 characters.
      For four signs without sorting, 17 symbols can be recorded with 256 characters
      </t>
      

    </section>

    <section title="ISWA 2010" anchor="iswa_2010">
      <t>The ISWA 2010 is the abstract symbolset for the x-ISWA-2010 coded character set. The symbols are visually iconic, uniquely identified, and organized in a layered hierarchy (<xref target="hierarchy" />).
      </t>
      <t>The x-ISWA-2010 is a 16-bit coded character used in the font software to access the symbol glyphs.  
      </t>
      <t>The x-Binary-SignWriting is a 12-bit coded character set that does not directly encode the symbols of the ISWA 2010, but divides each symbol into a combination of 3 characters.  
      The first character represents the base of the symbol.  The next represents the fill of the symbol.  The last character represents the rotation of the symbol.
      </t>

      <section title="Grapheme" anchor="sw_grapheme">
        <t>The grapheme is the fundamental unit of writing for the SignWriting script. Many graphemes of SignWriting are visually iconic.  
        The main writing graphemes of SignWriting represent a visual conception: either hands, movement, dynamics, timing, head, face, trunk, or limb.  The body concept is a combination of trunk and limb.  The specific size and shape of each grapheme is designed to balance and complement other graphemes.  
        </t>
        <t>The writing graphemes are extensive and specifically organized for written sign language and sign gestures.  The writing graphemes do not include the specific graphemes of DanceWriting or the general graphemes of MovementWriting.
        </t>
        <t>The writing graphemes are used in clusters. A cluster is a spatial grouping of graphemes written as a single unit. The graphemes can overlap and obscure graphemes underneath.  A cluster can represents a sign of a sign language or a visual performance of a sign gesture.
        </t>
        <t>Detailed location graphemes are separate from the main writing graphemes.  Detailed location graphemes are used individually or sequentially.  They represent isolated analysis that is written outside the cluster.
          </t>
        <t>Punctuation graphemes are used when writing sentences.  They are used individually, between clusters.
        </t>
        <t>When written by hand, lines are drawn to form each grapheme.  Different styles draw different types of lines: either for personal taste, speed, or quality.  The main types of handwriting are formal, cursive, and shorthand.  Formal handwriting, equivalent to block printing, includes defined lines for all grapheme features, specific palm facings for hand shapes, and detailed arrow heads and tails.  Cursive handwriting is more fluid and less detailed. Handwriting for personal use can omit palm facings, generalize arrows, and other liberties of personal consumption.  Shorthand is a further reduction of detail, written for speed.  Shorthand is a memory aid to a written record and should be rewritten soon after the notes were taken.</t>
        <t>Understanding the ratios of size and shape for the graphemes improves hand writing.  SignWriting was an exclusively handwritten script for 7 years before publishing formalized the Block Printing model.
        </t>
      </section>

      <section title="Symbol" anchor="iswa_sym">
        <t>There are 37,811 symbols, each with a unique ID.  A symbol ID is a sequence of six formatted numbers of increasing detail.  The first dashed number defines the category (11).  The first two dashed numbers define the group (11-22).  The first four dashed numbers define a base (11-22-333-44).  The fifth number represents the fill (55).  The sixth number represents the rotation (66).  A symbol ID is a combination of base ID with a valid fill and a valid rotation.  A symbol ID has the format "nn-nn-nnn-nn-nn-nn", where each "n" is a digit from 0 to 9.
        </t>
        <t>The fill modifier can best be understood through the palm facing of the hand graphemes.   The palm facing is based on planes. The SignWriting script uses two planes: the Front Wall  (Frontal Plane) and the Floor (Transverse Plane). There are 6 palm facings. The first three palm facings are parallel with the Front Wall. The second three palm facings are parallel with the Floor. The reader can view the signer from different viewpoints (expressive or receptive) and can view the hands from different perspectives (front or top), but no matter what the viewpoint or perspective, the first three Fills represent the palm facing parallel to the Front Wall and the second three Fills represent the palm facing parallel to the Floor.
        </t>
        <texttable  align='left' style='all' anchor='table_hand_fills'>
          <ttcol>Fill</ttcol>
          <ttcol>Indicator</ttcol>
          <ttcol>Meaning</ttcol>
          <c>01</c>
          <c>grapheme with white palm</c>
          <c>reader sees palm of hand parallel Front Wall</c>
          <c>02</c>
          <c>grapheme with half black palm</c>
          <c>reader sees side of hand parallel Front Wall</c>
          <c>03</c>
          <c>grapheme with black palm</c>
          <c>reader sees back of hand parallel Front Wall</c>
          <c>04</c>
          <c>grapheme with white palm and broken line</c>
          <c>reader sees palm of hand parallel Floor</c>
          <c>05</c>
          <c>grapheme with half black palm and broken line</c>
          <c>reader sees side of hand parallel Floor</c>
          <c>06</c>
          <c>grapheme with black palm and broken line</c>
          <c>reader sees palm of hand parallel Floor</c>
        </texttable>
        <t>The fill modifier is redefined for the movement arrows of category 2.
        </t>
        <texttable  align='left' style='all' anchor='table_arrow_fills'>
          <ttcol>Fill</ttcol>
          <ttcol>Indicator</ttcol>
          <ttcol>Meaning</ttcol>
          <c>01</c>
          <c>a grapheme with a black arrow head</c>
          <c>movement of the right hand</c>
          <c>02</c>
          <c>a grapheme with a white arrow head</c>
          <c>movement of the left hand</c>
          <c>03</c>
          <c>a grapheme with a thin, unconnected arrow head</c>
          <c>spatial overlapping  of movement arrows for the left and right hands when they move as a unit</c>
          <c>04</c>
          <c>Irregular arrow stems</c>
          <c>building blocks for complex movement</c>
        </texttable>
        <t>The rest of the other bases use a fill modifier for grouping and visual organization that is meaningful only for a particular base symbol or small set.
        </t>
        <t>The rotation modifier can best be understood through the hand symbols.  The first 8 rotations progress 45 degrees counter clockwise.  The last 8 rotations are a mirror of the first 8 and progress 45 degrees clockwise.  Zero (0) degrees is understood to point to the top of the grapheme.
        </t>
        <texttable  align='left' style='all' anchor='table_hand_rotations'>
          <ttcol>Rotation</ttcol>
          <ttcol>Direction</ttcol>
          <ttcol>Degrees from top</ttcol>
          <c>01</c>
          <c>Counter Clockwise</c>
          <c>0</c>
          <c>02</c>
          <c>Counter Clockwise</c>
          <c>45</c>
          <c>03</c>
          <c>Counter Clockwise</c>
          <c>90</c>
          <c>04</c>
          <c>Counter Clockwise</c>
          <c>135</c>
          <c>05</c>
          <c>Counter Clockwise</c>
          <c>180</c>
          <c>06</c>
          <c>Counter Clockwise</c>
          <c>225</c>
          <c>07</c>
          <c>Counter Clockwise</c>
          <c>270</c>
          <c>08</c>
          <c>Counter Clockwise</c>
          <c>315</c>

          <c>09</c>
          <c>Clockwise</c>
          <c>0</c>

          <c>10</c>
          <c>Clockwise</c>
          <c>45</c>
          <c>11</c>
          <c>Clockwise</c>
          <c>90</c>
          <c>12</c>
          <c>Clockwise</c>
          <c>135</c>
          <c>13</c>
          <c>Clockwise</c>
          <c>180</c>
          <c>14</c>
          <c>Clockwise</c>
          <c>225</c>
          <c>15</c>
          <c>Clockwise</c>
          <c>270</c>
          <c>16</c>
          <c>Clockwise</c>
          <c>315</c>
        </texttable>
      </section>
      <section title="Hierarchy" anchor="hierarchy">
        <t>The symbols of the ISWA 2010 are placed in a layered hierarchy for organization and access.  There are 4 levels to the ISWA 2010 hierarchy: category, group, base, and symbol.
        </t>
        <t>There are 7 categories.  The first number of the symbol ID identifies the category.  The first 5 categories contain writing symbols for use in clusters: 1) Hands, 2) Movement, 3) Dynamics &amp; Timing, 4) Head &amp; Face, and 5) Body.  The Body category can be broken into 2 subcategories: 5.1) Trunk and 5.2) Limb.
        </t>
        <t>The 6th category is Detailed Location that contains symbols used alone or in sequence, always outside the cluster.  The 7th category is Punctuation that contains symbols used between clusters for text.
        </t>
        <texttable  align='left' style='all' anchor='table_categories'>
          <preamble>The 7 Categories of the ISWA 2010</preamble>
          <ttcol>Cat</ttcol>
          <ttcol>Purpose</ttcol>
          <ttcol>Name</ttcol>
          <ttcol>Description</ttcol>
          <c>1</c>
          <c>Writing</c>
          <c>Hands</c>
          <c>Handshapes from over 40 Sign Languages are placed in 10 groups based on the numbers 1-10 in American Sign Language.</c>
          
          <c>2</c>
          <c>Writing</c>
          <c>Movement</c>
          <c>Contact symbols, small finger movements, straight arrows, curved arrows and circles are placed into 10 groups based on planes: The Front Wall Plane includes movement that is "parallel to the front wall" and the Floor Plane includes movement that is "parallel to the floor".</c>
          
          <c>3</c>
          <c>Writing</c>
          <c>Dynamics &amp; Timing</c>
          <c>Dynamics Symbols are used to give the "feeling" or "tempo" to movement. They provide emphasis on a movement or expression, and combined with Punctuation Symbols become the equivalent to Exclamation Points. The Tension Symbol, combined with Contact Symbols, provides the feeling of "pressure", and combined with facial expressions can place emphasis or added feeling to an expression. Timing symbols are used to show alternating or simultaneous movement.</c>
          
          <c>4</c>
          <c>Writing</c>
          <c>Head &amp; Face</c>
          <c>Starting with the head and then from the top of the face and moving down.</c>
          
          <c>5</c>
          <c>Writing</c>
          <c>Body</c>
          <c>Torso movement, shoulders, hips, and the limbs are used in Sign Languages as a part of grammar, especially when describing conversations between people, called Role Shifting, or making spatial comparisons between items on the left and items on the right.</c>
          
          <c>6</c>
          <c>Detailed Location</c>
          <c>Detailed Location</c>
          <c>Detailed Location symbols used are used alone or in sequence outside of the cluster.  They may be useful for sorting large dictionaries, refining animation, simplifying translation between scripts and notation systems, and for detailed analysis of location sometimes needed in linguistic research.</c>
          
          <c>7</c>
          <c>Punctuation</c>
          <c>Punctuation</c>
          <c>Punctuation symbols are used when writing complete sentences or documents in SignWriting.</c>
        </texttable>
        <t>There are 30 groups.  The first 2 dashed numbers in the symbol ID identify the group.  The 30 groups can be divided into 3 sets of 10.  The first ten are hands, category 1.  The second ten are movements, category 2.  The third ten are categories 3 thru 7.  In order, 1 group for the Dynamics &amp; Timing category, 1 for Head, 4 for Face, 1 for Trunk, 1 for Limb, 1 for Detailed Location, and 1 for Punctuation.  
        </t>

        <texttable  align='left' style='all' anchor='table_30_groups'>
          <preamble>The 30 groups with symbol ID segment.</preamble>
          <ttcol>First Set</ttcol>
          <ttcol>Second Set</ttcol>
          <ttcol>Third Set</ttcol>
          <c>01-01
          Index</c>
          <c>02-01
          Contact</c>
          <c>03-01
          Dynamics &amp; Timing</c>

          <c>01-02
          Index Middle</c>
          <c>02-02
          Finger Movement</c>
          <c>04-01
          Head</c>

          <c>01-03
          Index Middle Thumb</c>
          <c>02-03
          Straight Wall Plane</c>
          <c>04-02
          Brow Eyes Eyegaze</c>

          <c>01-04
          Four Fingers</c>
          <c>02-04
          Straight Diagonal Plane</c>
          <c>04-03
          Cheeks Ears Nose Breath</c>

          <c>01-05
          Five Fingers</c>
          <c>02-05
          Straight Floor Plane</c>
          <c>04-04
          Mouth Lips</c>

          <c>01-06
          Baby Finger</c>
          <c>02-06
          Curves Parallel Wall Plane</c>
          <c>04-05
          Tongue Teeth Chin Neck</c>

          <c>01-07
          Ring Finger</c>
          <c>02-07
          Curves Hit Wall Plane</c>
          <c>05-01
          Trunk</c>

          <c>01-08
          Middle Finger</c>
          <c>02-08
          Curves Hit Floor Plane</c>
          <c>05-02
          Limbs</c>

          <c>01-09
          Index Thumb</c>
          <c>02-09
          Curves Parallel Floor Plane</c>
          <c>06-01
          Detailed Location</c>

          <c>01-10
          Thumb</c>
          <c>02-10
          Circles</c>
          <c>07-01
          Punctuation</c>
        </texttable>
        <t>There are 652 bases.  The first 4 dashed numbers of a symbol ID identify the base.  The 652 bases are divided between the 30 groups.  For each group, there are less than 60 bases.  The bases are often displayed in columns of 10.  
        </t>
        <t>Each base can have up to 96 symbols.  All 6 dashed numbers of the symbol ID are required to identify a symbol.  Each symbol is a combination of a base, fill, and rotation.  The fill is identified by the 5th number of the symbol ID with possible values from 01 to 06.  The rotation is identified by the 6th number of the symbol ID with possible values from 01 to 16.
        </t>
      </section>
      <section title="Combined Character Sequence" anchor='sec_x_iswa_2010_combo'>
        <t>Each symbol of the ISWA 2010 can be expressed with a combination of 3 characters. 
        The first character represents the base of the symbol. 
        The next character represents the fill of the symbol. 
        The last character represents the rotation of the symbol. 
        </t>
        <t>There are three forms the fill and rotation can use to represent their value: a hexadecimal key, an x-Binary-SignWriting character, or an x-Character-SignWriting character.  
        </t>
        <t>The x-Binary-SignWriting coded character set uses a 12-bit encoding. 
        Code points in this set use a "B+" prefix along with the 3 hexadecimal digits that represent the value.
        </t>
        <t> The x-Character-SignWriting coded character set uses the Private Use Area of Unicode.  These code points occur on plane 15.  
        Code points in this set use a "U+" prefix along with the 5 hexadecimal digits that represent the value.
        </t>
        <t>The fill value ranges from 1 to 6.  The fill key is 1 less than the value and ranges from 0 to 5.
        </t>
        <texttable align='left' style='all' anchor='fill_variations'>
          <ttcol align="right">Fill Value</ttcol>
          <ttcol>Key</ttcol>
          <ttcol>x-Binary-SignWriting</ttcol>
          <ttcol>x-Character-SignWriting</ttcol>
          <c>1</c>
          <c>0</c>
          <c>B+110</c>
          <c>U+FD810</c>

          <c>2</c>
          <c>1</c>
          <c>B+111</c>
          <c>U+FD812</c>

          <c>3</c>
          <c>2</c>
          <c>B+112</c>
          <c>U+FD812</c>

          <c>4</c>
          <c>3</c>
          <c>B+113</c>
          <c>U+FD813</c>

          <c>5</c>
          <c>4</c>
          <c>B+114</c>
          <c>U+FD814</c>

          <c>6</c>
          <c>5</c>
          <c>B+115</c>
          <c>U+FD815</c>
        </texttable>
        <t>
        The rotation value ranges from 1 to 16.  The rotation key is written in hexadecimal and is equal to 1 less than the value and ranges from "0" to "f".
        </t>
        <texttable align='left' style='all' anchor='rotation_variations'>
          <ttcol align="right">Rotation Value</ttcol>
          <ttcol>Key</ttcol>
          <ttcol>x-Binary-SignWriting</ttcol>
          <ttcol>x-Character-SignWriting</ttcol>
          <c>1</c>
          <c>0</c>
          <c>B+120</c>
          <c>U+FD820</c>

          <c>2</c>
          <c>1</c>
          <c>B+121</c>
          <c>U+FD821</c>

          <c>3</c>
          <c>2</c>
          <c>B+122</c>
          <c>U+FD822</c>

          <c>4</c>
          <c>3</c>
          <c>B+123</c>
          <c>U+FD823</c>

          <c>5</c>
          <c>4</c>
          <c>B+124</c>
          <c>U+FD824</c>

          <c>6</c>
          <c>5</c>
          <c>B+125</c>
          <c>U+FD825</c>

          <c>7</c>
          <c>6</c>
          <c>B+126</c>
          <c>U+FD826</c>

          <c>8</c>
          <c>7</c>
          <c>B+127</c>
          <c>U+FD827</c>

          <c>9</c>
          <c>8</c>
          <c>B+128</c>
          <c>U+FD828</c>

          <c>10</c>
          <c>9</c>
          <c>B+129</c>
          <c>U+FD829</c>

          <c>11</c>
          <c>a</c>
          <c>B+12A</c>
          <c>U+FD82A</c>

          <c>12</c>
          <c>b</c>
          <c>B+12B</c>
          <c>U+FD82B</c>

          <c>13</c>
          <c>c</c>
          <c>B+12C</c>
          <c>U+FD82C</c>

          <c>14</c>
          <c>d</c>
          <c>B+12D</c>
          <c>U+FD82D</c>

          <c>15</c>
          <c>e</c>
          <c>B+12E</c>
          <c>U+FD82E</c>

          <c>16</c>
          <c>f</c>
          <c>B+12F</c>
          <c>U+FD82F</c>
        </texttable>


        <t>Further, a 16 bit symbol code from the x-ISWA-2010 exists for each of the valid combined character sequences.  This relationship can be stated as (symbol code = ((base code - 256) * 96) + ((fill value - 1) * 16) + rotation value).  The first symbol code is 1 and the last valid symbol code is  62,504.
        </t>
        <t>The first symbol has an ID of "01-01-001-01-01-01" and a symbol code of 1.
        <list>
          <t>Symbol code 1 = symbol key S10000 = B+130, B+110, B+120 = U+FD830, U+FD810, U+FD820.
          </t>
          <t>Symbol code 1 = ( ( hexdec('100') - 256 ) * 96 ) + ( ( fill_value(1) - 1 ) * 16 ) + rotation_value(1).
          </t>
          <t>Symbol code 1 = ( ( 256 - 256 ) * 96 ) + ( ( 1 - 1 ) * 16 ) + 1.
          </t>
          <t>Symbol code 1 = ( 0 * 96 ) + ( 0 * 16 ) + 1.
          </t>
          <t>Symbol code 1 = 1.
          </t>
        </list>
        </t>
      </section>
      <section title="Validity" anchor='sec_x_iswa_2010_validity'>
        <t>Although there are 6 possible fills and 16 possible rotations, not every combination of base, fill, and rotation is valid. Each base has a set of valid fills and a set of valid rotation.  These validity sets contain one or more values from the defined range.  
        </t>
        <t>For each value, the inclusion in the validity set can be expressed with a value of "0" or "1".   For fill values, lining up the digit from left to right, will result in a string 6 digits long.  The value of the 6 digit number is 2 ^ (value -1).
        </t>
        <texttable style='all' anchor='table_binaryfills'>
          <ttcol align='center'>Fill Value</ttcol>
          <ttcol align='center'>1</ttcol>
          <ttcol align='center'>2</ttcol>
          <ttcol align='center'>3</ttcol>
          <ttcol align='center'>4</ttcol>
          <ttcol align='center'>5</ttcol>
          <ttcol align='center'>6</ttcol>
          <ttcol align='center'>Binary</ttcol>
          <ttcol align='center'>Power of 2</ttcol>
          <c>1</c>
          <c>X</c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c>100000</c>
          <c>1</c>

          <c>2</c>
          <c></c>
          <c>X</c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c>010000</c>
          <c>2</c>

          <c>3</c>
          <c></c>
          <c></c>
          <c>X</c>
          <c></c>
          <c></c>
          <c></c>
          <c>001000</c>
          <c>4</c>

          <c>4</c>
          <c></c>
          <c></c>
          <c></c>
          <c>X</c>
          <c></c>
          <c></c>
          <c>000100</c>
          <c>8</c>

          <c>5</c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c>X</c>
          <c></c>
          <c>000010</c>
          <c>16</c>

          <c>6</c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c>X</c>
          <c>000001</c>
          <c>32</c>
        </texttable>

        <t>The value of any fill validity set is equal to the sum of the power of 2 for each fill value in the set.  The empty set is invalid and has a sum of zero (0).  The full set of all possible fills has a sum of 63. 
        </t>
        <texttable style='all' anchor='table_binaryfills_empty_full'>
          <ttcol align='center'>Fill Set</ttcol>
          <ttcol align='center'>1</ttcol>
          <ttcol align='center'>2</ttcol>
          <ttcol align='center'>3</ttcol>
          <ttcol align='center'>4</ttcol>
          <ttcol align='center'>5</ttcol>
          <ttcol align='center'>6</ttcol>
          <ttcol align='center'>Binary</ttcol>
          <ttcol align='center'>Power of 2</ttcol>
          <c>{}</c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c></c>
          <c>000000</c>
          <c>0</c>

          <c>{1,2,3,4,5,6}</c>
          <c>X</c>
          <c>X</c>
          <c>X</c>
          <c>X</c>
          <c>X</c>
          <c>X</c>
          <c>111111</c>
          <c>63</c>
        </texttable>
        <t>Each base has a defined validity set for fills.  The "Fills" column in the "Bases" section.
        </t>
        <t>The rotation validity sets have a larger range than the fills.  The possible rotation values range from 1 to 16.  The power of 2 numbers are 16-bit.
        </t>

        <texttable align='left' style='all' anchor='binarynumber_value'>
          <ttcol align="right">Value</ttcol>
          <ttcol>Binary</ttcol>
          <ttcol>Power of 2</ttcol>
          <c>1</c>
          <c>2^0</c>
          <c>1</c>

          <c>2</c>
          <c>2^1</c>
          <c>2</c>
          <c>3</c>
          <c>2^2</c>
          <c>4</c>

          <c>4</c>
          <c>2^3</c>
          <c>8</c>
          <c>5</c>
          <c>2^4</c>
          <c>16</c>

          <c>6</c>
          <c>2^5</c>
          <c>32</c>
          <c>7</c>
          <c>2^6</c>
          <c>64</c>

          <c>8</c>
          <c>2^7</c>
          <c>128</c>
          <c>9</c>
          <c>2^8</c>
          <c>256</c>

          <c>10</c>
          <c>2^9</c>
          <c>512</c>
          <c>11</c>
          <c>2^10</c>
          <c>1024</c>

          <c>12</c>
          <c>2^11</c>
          <c>2048</c>
          <c>13</c>
          <c>2^12</c>
          <c>4096</c>

          <c>14</c>
          <c>2^13</c>
          <c>8192</c>
          <c>15</c>
          <c>2^14</c>
          <c>16384</c>

          <c>16</c>
          <c>2^15</c>
          <c>32768</c>
        </texttable>
        <t>The value of a rotation validity set is the summation of the power of 2 numbers.  The minimum summation is 1.  The largest possible summation is 65,535 where all 16 rotations are valid.</t>
        <t>Each base has a defined validity set for rotations.  The "Rotations" column in the "Bases" section.
        </t>
       
        <t>Interestingly enough, there are only 12 possible validity sets in the ISWA 2010.  
        </t>

        <texttable align='left' style='all' anchor='binaryvalue_sets'>
            <ttcol align='right'>Sum</ttcol>
            <ttcol>Binary</ttcol>
            <ttcol>Set</ttcol>
            <c>1</c>
            <c>100000</c>
            <c>{1}</c>

            <c>2</c>
            <c>010000</c>
            <c>{2}</c>
            <c>3</c>
            <c>110000</c>
            <c>{1, 2}</c>

            <c>7</c>
            <c>111000</c>
            <c>{1, 2, 3}</c>
            <c>15</c>
            <c>111100</c>
            <c>{1, 2, 3, 4}</c>

            <c>31</c>
            <c>111110</c>
            <c>{1, 2, 3, 4, 5}</c>

            <c>63</c>
            <c>111111</c>
            <c>{1, 2, 3, 4, 5, 6}</c>

            <c>187</c>
            <c>11011101</c>
            <c>{1, 2, 4, 5, 6, 8}</c>

            <c>255</c>
            <c>11111111</c>
            <c>{1, 2, 3, 4, 5, 6, 7, 8}</c>

            <c>511</c>
            <c>1111111110000000</c>
            <c>{1, 2, 3, 4, 5, 6, 7, 8, 9}</c>
            <c>48059</c>
            <c>1101110111011101</c>
            <c>{1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16}</c>

            <c>65535</c>
            <c>1111111111111111</c>
            <c>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}</c>
        </texttable>
      </section>
    </section>

    <section title="SignPuddle Standard" anchor="signpuddle_standard">
      <t>The SignPuddle Standard for SignWriting text has been stable since January 12th, 2012.
      </t>
      <section title="Licenses">
          <t>The font software is available under SIL's Open Font License.</t>
          <t>The reference material is licensed under Creative Commons attribution, share alike (by-sa).</t>
          <t>The current open source projects are licensed under the GPL 2 for MediaWiki and GPL 3 for the general software on Github.  
          Any contributions to the open source code must agree to a possible relicense in the future under a BSD like license.</t>
          <t>After the <eref target="http://signpuddle.net/wiki/index.php/The_Wall">financial issues</eref> of the Center for Sutton Movement Writing have been addressed, 
          the open source projects will relicensed under a more open and free BSD-like license, such as the MIT License.</t>
      </section>

      <section title="Infrastructure">
        <section title="International SignWriting Alphabet Fonts">
          <t>The <eref target="http://signpuddle.net/iswa">International SignWriting Alphabet 2010 (ISWA 2010) Font Reference</eref> is a product of the collaboration between SignWriting inventor, Valerie Sutton, and SignWriting encoder Stephen E Slevinski Jr.  Special thanks to Adam Frost's excellent work on the SVG refinement and more.</t>
          <t>The ISWA 2010 fonts have been stable since their initial release on October 20th, 2010.</t>
          <t>Valerie Sutton
          <list style="symbols">
            <t>hand crafted and organized 30K plus individual glyphs</t>
            <t>created a 2 dimension PNG of 3 colors for each</t>
            <t>named each individual glyph with 6 degrees of significance</t>
            <t>font name: ISWA 2010 Sutton</t>
          </list></t>
          <t>Steve Slevinski
          <list style="symbols">
           <t>counted and numbered the glyphs</t>
           <t>created mathematical names</t>
           <t>analyzed PNGs for line and fill</t>
           <t>refactored glyphs - font name: ISWA 2010 PNG Standard</t>
           <t>extended glyphs - font names: ISWA 2010 PNG Inverse, Shadow, Colorized</t>
           <t>traced glyphs - font names: ISWA 2010 SVG Line Trace, Shaddow Trace, Smooth, and Angular</t>
           <t>refactored and extended Adam's SVG work - font name: ISWA 2010 SVG Refinement</t>
          </list></t>
          <t>Adam Frost
          <list style="symbols">
            <t>manually traced each and every glyph that could not be automatically rotated</t>
            <t>font name: ISWA 2010 SVG Refinement</t>
            <t>physically performed and photographed every hand shape</t>
            <t>font name: ISWA 2010 Hand Photo</t>
            <t>consulted with Valerie in places of ambiguity</t>
            <t>found the Facial Irregularity, documented in the ISWA 2010 Errata</t>
          </list></t>
        </section>
        <section title="SignPuddle Online">
          <t><eref target="http://signpuddle.org">SignPuddle Online</eref> is the current home of the international community of online writers of the SignWriting Script.  
          Online tools make it possible to create SignWriting dictionaries and documents directly on the web.
          Each collection is freely available as <eref target="http://signbank.org/signpuddle2.0/data/spml">a small XML file</eref>.
          Dozens of sign languages from around the world are represented.  Each language can have several collections of SignWriting. 
          </t>
        </section>
        <section title="SignWriting Icon Server">
          <t>The SignWriting Icon Server create SVG and PNG images and queries data collections using an open API. 
          The image creation is stable and fully implemented.  
          The API is currently under construction with only an initial level of support.
          </t>
          <t>The main server is available on <eref target="http://swis.wmflabs.org">Wikimedia Labs</eref> for all SignWriting projects.
          </t>
          <t>A backup server is available on <eref target="http://signbank.org/swis">SignBank</eref>.
          </t>
          <t>Each SignWriting Icon Server provides the SignWriting Thin Viewer as a site script and as a bookmark.  
          </t>
          <t> Additional SignWriting Icon Servers can be created directly from the GitHub source.
          </t>

        </section>
        <section title="Wikimedia Incubator">
          <t>The SignWriting Script has been enabled on Wikimedia Incubator using the SignWriting Gadget.
          </t>
        </section>
        <section title="SignWriting Thin Viewer">
          <t>The SignWriting Thin Viewer uses JavaScript to wrap the sign names with basic HTML and CSS to fully supports the grammar of written ASL.
          This script can be applied to any modern browser through a site script or initiated within a browser using a bookmark.
          </t>
        </section>
      </section>
      <section title="Compatibility">
        <t>SignTyp, SignWriter Studio, the DELEGS Editor, SWift, and more.</t>
        <section title="SignTyp" anchor="signtyp">
          <t> This standard is being integrated with the SignTyp linguistic coding system developed by Rachel Channon through an NSF grant.
          <list>
            <t><eref target="http://homepage.uconn.edu/~hdv02001/Articles-pdfs/131%20-%20Notation%20Systems.pdf">Notation Systems</eref> by Harry van der Hulst and Rachel Channon.
            </t>
            <t><eref target="http://www.purdue.edu/tislr10/pdfs/van%20der%20Hulst%20Channon.pdf">Why dynamic features?</eref> by Harry van der Hulst and Rachel Channon.
            </t>
            <t><eref target="http://www.signwriting.org/archive/docs7/sw0623_TISLR_2010_SignWriting_SignTyp_Poster.pdf">Transcription systems as input to coding systems: SignWriting &amp; SignTyp</eref> by Charles Butler and Rachel Channon.
            </t>
          </list>
          </t>
        </section>
        <section title="SignWriter Studio" anchor="signwriter_studio">
          <t><eref target="http://signwriterstudio.com">SignWriter Studio</eref> is a Windows-only compatible application by Jonathan Duncan.  It has an alternate symbol selection technique.  According to Valerie Sutton, it illustrates a unique insight into the hand shapes of the ISWA.
          </t>
          <t>Jonathan Duncan writes:
          </t>
          <t><list>
          <t>SignWriter Studio has 4 ways to get the basic symbol base, and 3 ways to modify the selected base. 
            </t>
            
            <t>1) Select the base symbol from a complete list of base symbols organized in a tree view
            2) Search for a hand symbol in hand search section by hand feature.
            3) Select a symbol already present in the signbox.
            4) Select a symbol from a Favorites section.
            </t>
            <t>Then one of three chooser to define the fill and rotation will become available.
            1)The hand chooser.
            2)The arrow chooser.
            3)The general chooser.
            </t>
            <t>The Hand chooser is to quickly find the symbol for a certain, hand, plain(wall or floor), palm facing and rotation.  The Hand Chooser also extends add a fourth palm facing to logically show all possible symbols in their most common uses.  This chooser resembles the instruction manual explaining the use of hand shapes.
            </t>
            <t>The Arrow Chooser is to quickly find arrows for a certain hand, plain(wall or floor) and rotation.This chooser resembles the instruction manual explaining the use of arrows.
            </t>
            <t>The General Chooser is for symbols for which the two previous chooser do not work well and gives a grouped list of symbols for the base group.
            </t>
          </list></t>

        </section>
        <section title="DELEGS Online" anchor="delegs">
          <t>The <eref target="http://www.delegs.com/DelegsPage">DELEGS Editor</eref> from the University of Hamburg and C1 WPS GmbH in Germany is designed for Deaf Education. 
          It is a tool for writing translation texts between spoken and signed languages.
          </t>
          <t>Spoken language text is used to display horizontal SignWriting Text from left to right.
          The spoken language can appear beneath the sign or it can be hidden.
          </t>
        </section>
        <section title="SWift" anchor="swift">
          <t><eref target="http://www.researchgate.net/publication/230720646_SWift_a_SignWriting_improved_fast_transcriber">SWift is a SignWriting improved fast transcriber</eref> from 
          Claudia Savina Bianchini, Fabrizio Borgia, and Maria De Marsico.  
          SWift is under active development.  The design "guides and simplifies the editing process".
          </t>
          <t>SWift uses an alternate symbol hierarchy than the ISWA 2010.  A conversion library is planned in the future to support Formal SignWriting strings.
          </t>
        </section>
      </section>
    </section>
        
  </back>
</rfc>
