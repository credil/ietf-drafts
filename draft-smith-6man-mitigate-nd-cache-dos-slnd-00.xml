<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">

<!ENTITY RFC4861 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4861.xml">

<!ENTITY RFC3756 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3756.xml">

<!ENTITY RFC4193 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4193.xml">

]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc updates="4861" category="std" docName="draft-smith-6man-mitigate-nd-cache-dos-slnd-00" ipr="trust200902">

  <front>

    <title abbrev="Stateless Neighbor Discovery">Mitigating IPv6 Router Neighbor Cache DoS Using Stateless Neighbor Discovery</title>

    <author fullname="Mark Smith" initials="M.R." surname="Smith">
      <organization abbrev="IMOT">In My Own Time</organization>

      <address>
        <postal>
          <street>PO BOX 521</street>

          <city>HEIDELBERG</city>

          <region>VIC</region>

          <code>3084</code>

          <country>AU</country>
        </postal>

        <email>markzzzsmith@yahoo.com.au</email>

      </address>
    </author>

    <date year="2012" />

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <keyword>ipv6</keyword>
    <keyword>neighbor discovery</keyword>
    <keyword>neighbor cache</keyword>
    <keyword>DoS</keyword>
    <keyword>security</keyword>

    <abstract>
	<t>The IPv6 neighbor discovery cache is vulernable to a Denial of Service attack that purposely exhausts the state used during the neighbor discovery address resolution process. This can be very disruptive when a router is successfully attacked.</t>

	<t>This memo proposes a stateless form of neighbor discovery to be used by routers to eliminate the opportunity for this DoS attack. This method of stateless neighbor discovery would be used for unknown or untrusted packet sources, when the router's neighbor cache's state capacity reaches a medium to high threshold of use. Trusted packet sources would continue to be provided with traditional stateful neighbor discovery.</t>
    </abstract>

  </front>

  <middle>
    <section title="Introduction">

	<t>The IPv6 neighbor discovery cache <xref target="RFC4861" /> is vulernable to a Denial of Service attack that purposely exhausts the state used during the neighbor discovery address resolution process <xref target="RFC3756" />. This can be very disruptive when a router is successfully attacked.</t>

	<t>This memo proposes a stateless form of neighbor discovery to be used by routers to eliminate the opportunity for this DoS attack. This method of stateless neighbor discovery would be used for unknown or untrusted packet sources, when the router's neighbor cache's state capacity reaches a medium to high threshold of use. Trusted packet sources would continue to be provided with traditional stateful neighbor discovery.</t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>

    <section title="Terminology">

	<t>Stateful Neighbor Discovery (SFND): Traditional neighbor discovery, as specified in <xref target="RFC4861" />. This form of neighbor discovery maintains per packet destination state for all unresolved destinations during the neighbor discovery process. The neighbor cache's state capacity is intentionally exhausted to cause the neighbor cache Denial of Service attack.</t>

	<t>Stateless Neighbor Discovery (SLND): The form of neighbor discovery described in this memo. This form of neighbor discovery does not maintain per packet destination state for unresolved destinations during the neighbor discovery process.</t>

    </section>

    <section title="Stateless Neighbor Discovery">

	<section title="SLND Variables">
	<t>To perform stateless neighbor discovery, four variables are maintained:</t>

	<t>SLND Flag - This flag indicates whether or not the interface will perform SLND if necessary.</t>

	<t>SLDN Activate Threshold - This variable specifies the threshold when stateless neighbor discovery is activated. The threshold specifies a neighbor cache utilisation level. It is expressed as a percentage, with a default value of 80%. It may be either a per-interface or router global variable depending on whether the router implementation has per-interface neighbor caches or a global neighbor cache used by all interfaces.</t>

	<t>SLND Active Flag - This flag indicates whether or not the interface is performing SLND for untrusted packet sources. It is maintained for each interface on the router.</t>

	<t>Trusted/Untrusted Sources Prefix List ("TUSP List") - This variable specifies a list of trusted and/or untrusted packet source address prefixes. It is a per-interface variable, as different interfaces on the router may have different sets of trusted and/or untrusted packet sources. However, a router may maintain a single global TUSP List that is used by all interfaces that may perform SLND, which don't have an interface specific TUSP List.</t>

	<t>SLND Neighbor Solicitation Rate Limit ("SLND NS Rate Limit") - This variable specifies a threshold for multicast Neighbor Solictiations when the interface is performing SLND, specified in packets per second. It is a per-interface attribute, as different interfaces may have different thresholds. The rate value should be appropriate to the multicast capabilities of the interface link technology, with a typical value being 10% of the multicast rate supported by the link. A router may maintain a global threshold that is applied to interfaces that do not have an interface specific rate limit.</t>

    	</section>

	<section title="SLND Process">

	<t>The stateless neighbor discovery process may occur once a router has determined the outgoing interface for a packet, and that the packet's destination is on-link.</t>

	<t>If the packet's destination address is present in the neighbor cache, and the link-layer address has been resolved, the packet is forwarded to it's destination.</t>

	<t>If the packet's destination address is not present in the neighbor cache, and the SLND Flag is off, traditional stateful neighbor discovery is performed for the packet's destination.</t>

	<t>If the packet's destination address is not present in the neighbor cache, and the SLND Flag is on, the packet's source address is compared to the TUSP List.</t>

	<t>If the packet's source address is determined to be trusted, traditional neighbor discovery is performed.</t>

	<t>If the packet's source address is determined to be untrusted, stateless neighbor discovery is performed. The stateless neighbor discovery process is as follows:</t>

	<t>
	<list style="numbers">
		<t>The router determines if sending a multicast neighbor solicitation would exceed the SLND NS Rate Limit for the outgoing interface. If the SLND NS Rate Limit would be exceeded, drop the packet and do not proceed any further.</t>
		<t>A multicast neighbor solicitation is sent by the router for the destination address in the packet. The packet is then dropped.</t>
		<t>As some later point in time, the router is likely to receive a unicast neighbor advertisement, for a previously sent neighbor solicitation.</t>
		<t>If the SLND Active Flag is off, the router ignores the neighbor advertisement.</t>
		<t>If the SLND Active Flag is on, the router creates an entry in it's neighbor cache using the information received in the unicast neighbor advertisement. Stateless neighbor discovery is now complete.</t>
	</list>
	</t>

	<t>The utilisation of the neighbor cache has to be measured to determine if it crosses the SLDN Activate Threshold. If the utilisation increases above the SLDN Activate Threshold, the SLND Active Flag is switched on, and if it decreases below the SLDN Activate Threshold, the SLND Active Flag is switched off. Neighbor cache utlisation should be measured and compared to the SLDN Activate Threshold when:</t>
	
	<t>
        <list style="symbols">
		<t>entries are added to the neighbor cache, during either stateful or stateless neighbor discovery</t>
		<t>entries are removed from the neighbor cache when NUD discovers the neighbor has become unreachable</t>
        </list>
	</t>

    	</section>

    </section>

    <section title="Consequences of Stateless Neighbor Discovery">

	<t>During traditional stateful neighbor discovery, state is used to perform the following:</t>

	<t>
        <list style="symbols">
		<t>ensure a received neighbor advertisement corresponds to a previously sent neighbor solicitation</t>
		<t>to retransmit a limited number of neighbor solicitations if previous solicitations remain unanswered</t>
		<t>to store a small number of packets that triggered the neighbor discovery process, so that they can be transmitted if neighbor discovery completes successfully</t>
		<t>to generate an ICMPv6 destination unreachable, address unreachble messages back to the traffic source, should the neighbor discovery process fail</t>
        </list>
	</t>

	<t>Stateless neighbor discovery sacrifices these functions and the related state to mitigate the neighbor cache denial-of-service attack.</t>

    	<section anchor='nd_adv_val' title="Neighbor Advertisement Validation">
	<t>Ensuring received advertisements correspond to previously sent neighbor solicitations prevents on-link nodes from sending unsolicited neighbor advertisements, and then having them added to the router's neighbor cache without validation. Doing so would allow the on-link nodes to perform a neighbor cache denial of service attack, similar to the one this memo mitigates for off-link sources.</t>
	<t>If neighbor advertisement validation is to occur, then the router is vulnerable to an off-link sourced neighbor cache DoS attack, but not vulnerable to an on-link sourced neighbor cache DoS attack. If this neighbor advertisement validation does not occur, then the reverse is the case.</t>
	<t>Considering that on-link nodes will usually have a vested interest in the router continuing to operate, that there will be a much smaller set of on-link sources, and that they'll be far better known and possibly access controlled, the likelihood of an on-link sourced neighbor cache DoS is much lower than an off-link sourced neighbor cache DoS. It is therefore beneficial to sacrifice on-link neighbor cache DoS protection to gain off-link neighbor cache DoS protection. Also note that during the stateless neighbor discovery process proposed in this memo, neighbor advertisement validation is only sacrificed when an off-link sourced neighbor cache DoS appears to be taking place. Under normal circumstances on-link sourced neighbor advertisement validation will continue to occur.</t>

    	</section>
    	<section title="Optimisation Functions">

	<t>The nature of IPv6 is best effort, meaning that there is a possibility that packets may be lost as they transit the network, and that IPv6 will not make any attempt to recover lost packets. If an application residing on an IPv6 node requires reliable packet delivery, it will need to utilise locally implemented reliable upper layer protocols such as TCP and SCTP, or implement it's own reliability mechanisms. These reliability mechanisms involve retransmitting packets.</t>

	<t>The remaining uses of stateful neighbor discovery state are not assured of success. The limited number of neighbor solicitation retransmissions may not be enough, causing neighbor discovery to fail even though the target node exists. There may be more packets sent that trigger neighbor discovery than are stored for transmission when neighbor discovery completes successfully, causing them to be dropped. The ICMPv6 destination unreachable message may be dropped on the way back to the traffic originating node, perhaps intentionally by a network located firewall.</t>

	<t>This means that these functions are useful but not essential optimisations. If necessary, they do not need to be performed, as the traffic source will retransmit it's packets, reinitiating the neighbor discovery process. This provides the opportunity to perform a stateless form of neighbor discovery if there is evidence that a neighbor cache DoS attack is occuring, mitigating the off-link sourced neighbor cache DoS attack.</t>

    	</section>

    </section>

    <section title="Trusted/Untrusted Source Prefix List">

	<t>The following information sources can be used to construct the trusted/untrusted source prefix list (TUSP List).</t>

	<section title="Configured Trusted and Untrusted Prefixes">

	<t>The first TUSP List source is an operator configured list of prefixes and their lengths, each with a flag indicating whether traffic with source addresses that falls within the specified prefix is from a trusted or untrusted source.</t>

	<t>How this list is evaluated would be implementation dependent, however it is likely to be either sequential from first to last entry, or using a longest match algorithm.</t>

	<t>This list should have a default entry of the ULA prefix (fc00::/7) <xref target="RFC4193" />, flagged as a trusted source. An implementation must allow this entry to be removed.</t>

    	</section>

	<section title="Routing Information">

	<t>The second TUSP List source is the network's routing information.</t>

	<t>The network's routing information can be used to distinguish trusted and untrusted traffic sources. An advantage of using routing information for this purpose is that it will typically be dynamically and automatically distributed to all routers within the network, when dynamic routing protocols are used. This avoids routers in the network having to be manually reconfigured when subnets are added or removed from the network.</t>

	<t>The contents of a stub network's route table is typically all the internal routes for the network, and then a default route used to reach the Internet. The list of internal routes can be used to distinguish between trusted and untrusted sources, with traffic sources matching internal routes being trusted, and all other traffic sources being untrusted.</t>

	<t>In more complex routing environments, such as those using one or more IGPs and an EGP such as BGP, there may be other methods available to distinguish between trusted and untrusted sources. For example, routes carried in an IGP could be considered trusted, while routes carried in BGP are untrusted. For a network using BGP to carry all reachability information, except network transit and loopback interface routes, routes may be tagged with one or more BGP communities which indicate internal and therefore trusted prefixes.</t>

	<t>A default route should never be used to define a trusted traffic source prefix. If a router's operator wishes to trust all traffic sources, they should configure ::/0 as a configured trusted prefix.</t>

	<t>Implementations should provide convenient methods to use the network's routing information to distinguish between trusted and untrusted traffic source prefixes.</t>

    	</section>

	<section title="Default to Untrusted">

	<t>Finally, should none of the previous trusted or untrusted source prefix information sources match the source address of traffic that would trigger neighbor discovery, the packet source should be considered untrusted.</t>

    	</section>

    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">

    </section>

    <section anchor="Security" title="Security Considerations">

	<t>This memo proposes a security mitigation for an off-link sourced neighbor cache denial-of-service attack.</t>

	<t>As discussed in <xref target='nd_adv_val' />, the method proposed creates an opportunity for an on-link sourced neighbor cache DoS attack, when mitigating the off-link sourced neighbor cache DoS. This is considered to be an acceptable security trade-off.</t>

    </section>

    <section title="Change Log [RFC Editor please remove]">
	
	<t>draft-smith-6man-mitigate-nd-cache-dos-slnd-00, initial version, 2012-09-04</t>


    </section>

  </middle>

  <back>

    <references title="Normative References">

      &RFC2119;

    </references>

    <references title="Informative References">

      &RFC4861;

      &RFC3756;

      &RFC4193;

    </references>

  </back>
</rfc>
