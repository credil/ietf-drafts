<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2578 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2578.xml">
<!ENTITY RFC2579 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2579.xml">
<!ENTITY RFC2580 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2580.xml">
<!ENTITY RFC2790 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2790.xml">
<!ENTITY RFC2863 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2863.xml">
<!ENTITY RFC3410 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3410.xml">
<!ENTITY RFC3414 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3414.xml">
<!ENTITY RFC3415 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3415.xml">
<!ENTITY RFC3418 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3418.xml">
<!ENTITY RFC4122 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4122.xml">
]>


<?rfc strict="no" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>

<!--ipr="noDerivativeWorks2026", full2026, trust200902-->
<!-- trust200902, noDerivativeWorks2026 -->
<rfc docName="draft-asai-vmm-mib-02" ipr="trust200902" category="std">

  <front>
    <title abbrev="Virtual Machine Monitoring MIB">
      Management Information Base for Virtual Machines Controlled
      by a Hypervisor
    </title>
    <author fullname="Hirochika Asai" initials="H.A." surname="Asai">
      <organization abbrev="Univ. of Tokyo">The University of Tokyo</organization>
      <address>
        <postal>
          <street>7-3-1 Hongo</street>
          <city>Bunkyo-ku</city>
          <region>Tokyo</region>
          <code>113-8656</code>
          <country>JP</country>
        </postal>
        <phone>+81 3 5841 6748</phone>
        <email>panda@hongo.wide.ad.jp</email>
      </address>
    </author>

    <author fullname="Michael MacFaden" initials="M.M." surname="MacFaden">
      <organization abbrev="VMware Inc.">VMware Inc.</organization>
      <address>
        <email>mrm@vmware.com</email>
      </address>
    </author>

    <author fullname="Juergen Schoenwaelder" initials="J.S." surname="Schoenwaelder">
      <organization abbrev="Jacobs University">Jacobs University</organization>
      <address>
        <postal>
          <street>Campus Ring 1</street>
          <city>Bremen 28759</city>
          <country>Germany</country>
        </postal>
        <email>j.schoenwaelder@jacobs-university.de</email>
      </address>
    </author>

    <author fullname="Yuji Sekiya" initials="Y.S." surname="Sekiya">
      <organization abbrev="Univ. of Tokyo">The University of Tokyo</organization>
      <address>
        <postal>
          <street>2-11-16 Yayoi</street>
          <city>Bunkyo-ku</city>
          <region>Tokyo</region>
          <code>113-8658</code>
          <country>JP</country>
        </postal>
        <email>sekiya@wide.ad.jp</email>
      </address>
    </author>
    <author fullname="Keiichi Shima" initials="K.S." surname="Shima">
      <organization abbrev="IIJ Innovation Institute Inc.">IIJ Innovation Institute Inc.</organization>
      <address>
        <postal>
          <street>1-105 Kanda-Jinbocho</street>
          <city>Chiyoda-ku</city>
          <region>Tokyo</region>
          <code>101-0051</code>
          <country>JP</country>
        </postal>
        <email>keiichi@iijlab.net</email>
      </address>
    </author>

    <author fullname="Tina Tsou" initials="T.T." surname="Tsou">
      <organization abbrev="Huawei Technologies (USA)">Huawei Technologies (USA)</organization>
      <address>
        <postal>
          <street>2330 Central Expressway</street>
          <city>Santa Clara  CA 95050</city>
          <country>USA</country>
        </postal>
        <email>tina.tsou.zouting@huawei.com</email>
      </address>
    </author>

    <author fullname="Cathy Zhou" initials="C.Z." surname="Zhou">
      <organization abbrev="Huawei Technologies">Huawei Technologies</organization>
      <address>
        <postal>
          <street>Bantian, Longgang District</street>
          <city>Shenzhen  518129</city>
          <country>P.R. China</country>
        </postal>
        <email>cathyzhou@huawei.com</email>
      </address>
    </author>

<!--role="notfirstpage"-->
    <author fullname="Hiroshi Esaki" initials="H.E." surname="Esaki">
      <organization abbrev="Univ. of Tokyo">The University of Tokyo</organization>
      <address>
        <postal>
          <street>7-3-1 Hongo</street>
          <city>Bunkyo-ku</city>
          <region>Tokyo</region>
          <code>113-8656</code>
          <country>JP</country>
        </postal>
        <phone>+81 3 5841 6748</phone>
        <email>hiroshi@wide.ad.jp</email>
      </address>
    </author>

    <date month="February" year="2013" />

    <!-- Meta-data Declarations -->
    <area>Operations and Management</area>
    <workgroup>OPSAWG</workgroup>
    <keyword>MIB</keyword>
    <keyword>Hypervisor</keyword>
    <keyword>Virtual machine manager</keyword>

    <abstract>
      <t>This document defines a portion of
      the Management Information Base (MIB)
      for use with network management protocols in the Internet community.
      In particular, this specifies objects for managing virtual machines
      controlled by a hypervisor (a.k.a. virtual machine manager).
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>This document defines a portion of
      the Management Information Base (MIB)
      for use with network management protocols in the Internet community.
      In particular, this specifies objects for managing virtual machines
      controlled by a hypervisor (a.k.a. virtual machine managers).
      A hypervisor controls multiple virtual machines
      on a single physical machine by allocating resources
      to each virtual machine using virtualization technologies.
      Therefore, this MIB module contains information on
      virtual machines and their resources controlled by
      a hypervisor as well as hypervisor's hardware
      and software information.
      </t>
      <t>The design of this MIB module has been derived from enterprise
      specific MIB modules, namely a MIB module for managing guests of the
      Xen hypervisor, a MIB module for managing virtual machines controlled
      by the VMware hypervisor, and a MIB module using the libvirt
      programming interface to access different hypervisors.
      </t>
      <section title="Requirements Language">
        <t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;,
        &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;,
        &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;,
        &quot;MAY&quot;, and &quot;OPTIONAL&quot; in this
        document are to be interpreted as described in RFC 2119.</t>
      </section>
    </section>

    <section title="The Internet-Standard Management Framework">
      <t>For a detailed overview of the documents that describe the
      current Internet-Standard Management Framework, please refer to
      section 7 of <xref target="RFC3410">RFC 3410</xref>.
      Managed objects are accessed via a virtual information store,
      termed the Management Information Base or MIB.
      MIB objects are generally accessed through the
      Simple Network Management Protocol (SNMP).
      Objects in the MIB are defined using the mechanisms defined
      in the Structure of Management Information (SMI).
      This memo specifies a MIB module that is compliant to the SMIv2,
      which is described in STD 58, <xref target="RFC2578">RFC 2578</xref>,
      STD 58, <xref target="RFC2579">RFC 2579</xref> and STD 58,
      <xref target="RFC2580">RFC 2580</xref>.
      </t>
    </section>

    <section title="Managed Objects for Virtual Machines Controlled by a
                    Hypervisor"><!--on Virtualization Environment-->
      <section title="Managed Objects on Virtualization Environment">
        <figure align="center" anchor="environment"
                title="An example of a virtualization environment">
          <artwork align="center"><![CDATA[
+------------------------------------------------------------------+
| +-------------------------------------------+                    |
| | Virtual machine                           |                    |
| |                                           |                    |
| | +---------+ +---------+ +---------+       | .........          |
| | | Virtual | | Virtual | | Virtual |       |                    |
| +-| CPU     |-| memory  |-| storage |... ---+                    |
|   +---------+ +---------+ +---------+                            |
|            Virtual resources                                     |
|                   ^                                              |
|                   | Allocation using virtualization technologies |
|                   |                                              |
|                   +---------- Physical resources   ._____.       |
|                       +--------+    .--------.    /       \      |
|  +==============+     |        |   /________/|   *\_______/*     |
+- || SNMP agent || - - |  CPU   | - | Memory |/ - | Storage | .. -+
|  +==============+     +--------+   +--------+     \_______/      |
| Hypervisor                                                       |
+------------------------------------------------------------------+
]]></artwork>
          <postamble>A hypervisor allocates resources
          as virtual devices such as virtual CPU, virtual memory,
          virtual storage, and virtual network interface
          to multiple virtual machines controlled by the hypervisor
          from physical resources.</postamble>
        </figure>

        <t>On the common implementations of hypervisor softwares,
        a hypervisor allocates resources as virtual devices
        such as virtual CPUs, virtual memory, virtual storage, and
        virtual network interface to multiple virtual machines
        controlled by the hypervisor from physical resources.
        This document defines objects related to
        system and software information of a hypervisor,
        the list of virtual machines controlled by the hypervisor,
        and virtual resources allocated by the hypervisor
        to virtual machines.
        As shown in <xref target="environment" />,
        the virtual resource objects are defined as virtual devices.
        Consequently, this document specifies four specific types
        of virtual devices;
        CPUs (processors), memory, network interfaces, and storage devices.
        Note that physical resources are managed in
        <xref target="RFC2790">HOST-RESOURCES-MIB</xref>.
        In case that each virtual resource device object has
        a corresponding parent physical device managed in HOST-RESOURCES-MIB,
        the object of the virtual resource device
        contains a pointer to the physical device.
        The objects related to virtual network interfaces
        are mapped to the objects managed in
        <xref target="RFC2863">IF-MIB</xref>.
        </t>
        <t>The objects defined in this document are managed at
        a hypervisor and an SNMP agent is launched at the hypervisor
        to provide access to the objects.
        The objects are managed
        from the viewpoint of the operators of hypervisors,
        but not the operators of virtual machines; i.e.,
        the objects do not take into account
        the actual resource utilization on each virtual machine
        but the resource allocation from the physical resources.
        For example, vmNetworIfIndex indicates the virtual interface
        associated with an interface of a virtual machine
        at the hypervisor, and consequently, the `in' and `out' directions
        denote `from a virtual machine to the hypervisor' and
        `from the hypervisor to a virtual machine', respectively.
        Moreover, vmStorageAllocatedSize denotes
        the size allocated by the hypervisor, but not the size
        actually used by the operating system on the virtual machine.
        This means that vmStorageDefinedSize and vmStorageAllocatedSize
        must not take different values
        when the vmStorageSourceType is `block' or `raw'.
        <!--potentially take different values
            only if vmStorageSourceType is `unknown', `other', or `sparse'.-->
        </t>
    </section>
      <section anchor="overview" title="Overview of the MIB Mobule">
        <t>The MIB module is organized into a group of scalars and tables.  The
        scalars below `hypervisor' provide basic information about the
        hypervisor.  The `vm' lists the virtual machines (guests)
        that are known to the hypervisor.
        The `vmCpuTable' and 'vmCpuAffinityTable'
        provide the mapping of virtual CPUs and their affinity
        to virtual machines.
        The `vmStorageTable' and the `vmNetworkTable' provide
        the mapping of logical storage areas and network
        interfaces to virtual machines.
        </t>
        <t>The `vmOperState' textual convention defines a state model for
        virtual machines.  Events causing transitions between major states
        will cause the generation of notifications (vmStarted, vmStopped,
        vmSuspended,
        vmResumed).</t>
        <t>The MIB module provides a few writable objects that can be used to
        make non-persistent changes, e.g., changing the memory allocation or
        the CPU allocation.  It is not the goal of this MIB module to provide
        a configuration interface for virtual machines since other protocols
        and data modeling languages are more suitable for this task.</t>
        <t>The OID tree structure of the MIB module is shown below.</t>
        <figure><artwork><![CDATA[
--vmMIB (1.3.6.1.2.1.yyy)
  +--vmNotifications(0)
  |  +--vmStarted(1) [vmName, vmUUID, vmOperState]
  |  +--vmStopped(2) [vmName, vmUUID, vmOperState]
  |  +--vmSuspended(3) [vmName, vmUUID, vmOperState]
  |  +--vmResumed(4) [vmName, vmUUID, vmOperState]
  +--vmObjects(1)
  |  +vmHypervisor(1)
  |  |  +-- r-n SnmpAdminString    vmHvSoftware(1)
  |  |  +-- r-n SnmpAdminString    vmHvVersion(2)
  |  |  +-- r-n OBJECT IDENTIFIER  vmHvObjectID(3)
  |  |  +-- r-n TimeTicks          vmHvUpTime(4)
  |  +-- r-n Integer32  vmNumber(2)
  |  +-- r-n TimeTicks  vmTableLastChange(3)
  |  +--vmTable(4)
  |  |  +--vmEntry(1) [vmIndex]
  |  |     +-- --- VirtualMachineIndex  vmIndex(1)
  |  |     +-- r-n SnmpAdminString      vmName(2)
  |  |     +-- r-n UUIDorZero           vmUUID(3)
  |  |     +-- r-n SnmpAdminString      vmOSType(4)
  |  |     +-- rwn VirtualMachineAdminState
  |  |     |                            vmAdminState(5)
  |  |     +-- r-n VirtualMachineOperState
  |  |     |                            vmOperState(6)
  |  |     +-- rwn VirtualMachineAutoStart
  |  |     |                            vmAutoStart(7)
  |  |     +-- r-n VirtualMachinePersistent
  |  |     |                            vmPersistent(8)
  |  |     +-- r-n Integer32            vmCurCpuNumber(9)
  |  |     +-- rwn Integer32            vmMinCpuNumber(10)
  |  |     +-- rwn Integer32            vmMaxCpuNumber(11)
  |  |     +-- r-n Integer32            vmMemUnit(12)
  |  |     +-- r-n Integer32            vmCurMem(13)
  |  |     +-- rwn Integer32            vmMinMem(14)
  |  |     +-- rwn Integer32            vmMaxMem(15)
  |  |     +-- r-n TimeTicks            vmUpTime(16)
  |  |     +-- r-n Couter64             vmCpuTime(17)
  |  +--vmCpuTable(5)
  |  |  +--vmCpuEntry(1) [vmIndex, vmCpuIndex]
  |  |     +-- --- VirtualMachineCpuIndex
  |  |     |                            vmCpuIndex(1)
  |  |     +-- r-n Counter64            vmCpuCoreTime(2)
  |  +--vmCpuAffinityTable(6)
  |  |  +--vmCpuAffinityEntry(1) [vmIndex,
  |  |     |                      vmCpuIndex,
  |  |     |                      vmCpuPhysIndex]
  |  |     +-- --- Integer32            vmCpuPhysIndex(1)
  |  |     +-- rwn Integer32            vmCpuAffinity(2)
  |  +--vmStorageTable(7)
  |  |  +--vmStorageEntry(1) [vmStorageVmIndex, vmStorageIndex]
  |  |     +-- --- VirtualMachineIndexOrZero
  |  |     |                            vmStorageVmIndex(1)
  |  |     +-- --- VirtualMachineStorageIndex
  |  |     |                            vmStorageIndex(2)
  |  |     +-- r-n Integer32            vmStorageParent(4)
  |  |     +-- r-n VritualMachineStorageSourceType
  |  |     |                            vmStorageSourceType(4)
  |  |     +-- r-n SnmpAdminString      vmStorageSourceTypeString(5)
  |  |     +-- r-n SnmpAdminString      vmStorageResourceID(6)
  |  |     +-- r-n VirtualMachineStorageAccess
  |  |     |                            vmStorageAccess(7)
  |  |     +-- r-n VirtualMachineStorageMediaType
  |  |     |                            vmStorageMediaType(8)
  |  |     +-- r-n SnmpAdminString      vmStorageMediaTypeString(9)
  |  |     +-- r-n Integer32            vmStorageSizeUnit(10)
  |  |     +-- r-n Integer32            vmStorageDefinedSize(11)
  |  |     +-- r-n Integer32            vmStorageAllocatedSize(12)
  |  |     +-- r-n Counter64            vmStorageReadIOs(13)
  |  |     +-- r-n Counter64            vmStorageWriteIOs(14)
  |  +--vmNetworkTable(8)
  |     +--vmNetworkEntry(1) [vmIndex, vmNetworkIndex]
  |        +-- --- VirtualMachineNetworkIndex
  |        |                            vmNetworIndex(1)
  |        +-- r-n InterfaceIndexOrZero vmNetworIfIndex(2)
  |        +-- r-n InterfaceIndexOrZero vmNetworParent(3)
  |        +-- r-n SnmpAdminString      vmNetworkModel(4)
  |        +-- r-n PhysAddress          vmNetworkPhysAddress(5)
  +--vmConformance(2)
     +--vmCompliances(1)
     |  +--vmFullCompliances(1)
     |  +--vmReadOnlyCompliances(2)
     +--vmGroups(2)
        +--vmHypervisorGroup(1)
        +--vmVirtualMachineGroup(2)
        +--vmCpuGroup(3)
        +--vmCpuAffinityGroup(4)
        +--vmStorageGroup(5)
        +--vmNetworkGroup(6)
        +--vmNotificationGroup(7)
        ]]></artwork></figure>
      </section>

      <section anchor="definition" title="Definitions">
        <figure><artwork><![CDATA[
VM-MIB DEFINITIONS ::= BEGIN

IMPORTS
    MODULE-IDENTITY, OBJECT-TYPE, NOTIFICATION-TYPE, TimeTicks,
    Counter64, Integer32, mib-2
        FROM SNMPv2-SMI
    OBJECT-GROUP, MODULE-COMPLIANCE, NOTIFICATION-GROUP
        FROM SNMPv2-CONF
    TEXTUAL-CONVENTION, PhysAddress
        FROM SNMPv2-TC
    SnmpAdminString
        FROM SNMP-FRAMEWORK-MIB
    UUIDorZero
        FROM UUID-TC-MIB
    InterfaceIndexOrZero
        FROM IF-MIB;

vmMIB MODULE-IDENTITY
    LAST-UPDATED "201302250000Z"        -- 25 February 2013
    ORGANIZATION "IETF Operations and Management Area Working Group"
    CONTACT-INFO
            "
            WG E-mail: (To be added after approved by WG)
            Mailing list subscription info:
              http:// (To be added after approved by WG)

            Hirochika Asai
            The University of Tokyo
            7-3-1 Hongo
            Bunkyo-ku, Tokyo  113-8656
            JP
            Phone: +81 3 5841 6748
            Email: panda@hongo.wide.ad.jp

            Michael MacFaden
            VMware Inc.
            Email: mrm@vmware.com

            Juergen Schoenwaelder
            Jacobs University
            Campus Ring 1
            Bremen 28759
            Germany
            Email: j.schoenwaelder@jacobs-university.de

            Yuji Sekiya
            The University of Tokyo
            2-11-16 Yayoi
            Bunkyo-ku, Tokyo  113-8658
            JP
            Email: sekiya@wide.ad.jp

            Keiichi Shima
            IIJ Innovation Institute Inc.
            1-105 Kanda-Jinbocho
            Chiyoda-ku, Tokyo  101-0051
            JP
            Email: keiichi@iijlab.net
            "

    DESCRIPTION
            "This MIB module is for use in managing a hypervisor and
            virtual machines controlled by the hypervisor.  The OID
            `yyy' is temporary one, and it must be assigned by IANA
            when this becomes an official document.

            Copyright (c) 2013 IETF Trust and the persons identified
            as authors of the code.  All rights reserved.

            Redistribution and use in source and binary forms, with
            or without modification, is permitted pursuant to, and
            subject to the license terms contained in, the
            Simplified BSD License set forth in Section 4.c of the
            IETF Trust's Legal Provisions Relating to IETF Documents
            (http://trustee.ietf.org/license-info)."

    REVISION "201302250000Z"        -- 25 February 2013
    DESCRIPTION
            "The original version of this MIB, published as
            RFCXXXX."
    ::= { mib-2 yyy }


vmNotifications OBJECT IDENTIFIER ::= { vmMIB 0 }
vmObjects       OBJECT IDENTIFIER ::= { vmMIB 1 }
vmConformance   OBJECT IDENTIFIER ::= { vmMIB 2 }


-- Textual conversion definitions
--
VirtualMachineIndex ::= TEXTUAL-CONVENTION
    DISPLAY-HINT "d"
    STATUS       current
    DESCRIPTION
            "A unique value, greater than zero, identifying a
            virtual machine.  The value for each virtual machine
            must remain constant at least from one re-initialization
            of the hypervisor to the next re-initialization."
    SYNTAX       Integer32 (1..2147483647)

VirtualMachineIndexOrZero ::= TEXTUAL-CONVENTION
    DISPLAY-HINT "d"
    STATUS       current
    DESCRIPTION
            "This textual convention is an extension of the
            VirtualMachineIndex convention.  This extension permits
            the additional value of zero.  The meaning of the value
            zero is object-specific and must therefore be defined as
            part of the description of any object which uses this
            syntax.  Examples of the usage of zero might include
            situations where a virtual machine is unknown, or when
            none or all virtual machines need to be referenced."
    SYNTAX       Integer32 (0..2147483647)

VirtualMachineAdminState ::= TEXTUAL-CONVENTION
    STATUS      current
    DESCRIPTION
            "The administrative state of a virtual machine:

            on(1)          The administrative power state of the
                           virtual machine is off.

            off(2)         The administrative power state of the
                           virtual machine is on.

            pause(3)       The administrative power state of the
                           virtual machine is hibernated or
                           suspended."
    SYNTAX       INTEGER {
                    on(1),
                    off(2),
                    pause(3)
                 }

VirtualMachineOperState ::= TEXTUAL-CONVENTION
    STATUS       current
    DESCRIPTION
            "The operational state of a virtual machine:

            unknown(1)     The state is unknown, e.g., because the
                           implementation failed to obtain the state
                           from the hypervisor.

            other(2)       The state has been obtained but it is
                           not a known state.

            running(3)     The virtual machine is currently running.

            blocked(4)     The virtual machine is currently blocked.

            paused(5)      The virtual machine is currently paused.

            migrating(6)   The virtual machine is currently
                           migrating.

            shutdown(7)    The virtual machine is currently in the
                           process of shutting down.

            shutoff(8)     The virtual machine is down.

            crashed(9)     The virtual machine has crashed."
    SYNTAX       INTEGER {
                    unknown(1),
                    other(2),
                    running(3),
                    blocked(4),
                    paused(5),
                    migrating(6),
                    shutdown(7),
                    shutoff(8),
                    crashed(9)
                 }

VirtualMachineAutoStart ::= TEXTUAL-CONVENTION
    STATUS       current
    DESCRIPTION
            "The autostart configuration of a virtual machine:

            unknown(1)     The autostart configuration is unknown,
                           e.g., because the implementation failed
                           to obtain the autostart configuration
                           from the hypervisor. (read-only)

            enable(2)      The autostart configuration of the
                           virtual machine is enabled.

            disable(3)     The autostart configuration of the
                           virtual machine is disabled."
    SYNTAX      INTEGER {
                    unknown(1),
                    enable(2),
                    disable(3)
                }

VirtualMachinePersistent ::= TEXTUAL-CONVENTION
    STATUS       current
    DESCRIPTION
            "This value indicates whether a virtual machine has a
            persistent configuration which means the virtual machine
            will still exist after shutting down:

            unknown(1)     The persistent configuration is unknown,
                           e.g., because the implementation failed
                           to obtain the persistent configuration
                           from the hypervisor. (read-only)

            persistent(2)  The virtual machine is persistent.

            transient(3)   The virtual machine is transient, i.e.,
                           the virtual machine does not exist after
                           its power-off."
    SYNTAX       INTEGER {
                    unknown(1),
                    persistent(2),
                    transient(3)
                 }

VirtualMachineCpuIndex ::= TEXTUAL-CONVENTION
    DISPLAY-HINT "d"
    STATUS       current
    DESCRIPTION
            "A unique value, greater than zero, identifying a
            virtual CPU assigned to a virtual machine.  The value
            for each virtual CPU must remain constant at least from
            one re-initialization of the virtual machine to the next
            re-initialization."
     SYNTAX      Integer32 (1..2147483647)

VirtualMachineStorageIndex ::= TEXTUAL-CONVENTION
    DISPLAY-HINT "d"
    STATUS       current
    DESCRIPTION
            "A unique value, greater than zero, identifying a
            virtual storage device allocated to a virtual machine.
            The value for each virtual storage device must remain
            constant at least from one re-initialization of the
            virtual machine to the next re-initialization."
     SYNTAX      Integer32 (1..2147483647)

VirtualMachineStorageSourceType ::= TEXTUAL-CONVENTION
    STATUS       current
    DESCRIPTION
            "The source type of a virtual storage device:

            unknown(1)     The source type is unknown, e.g., because
                           the implementation failed to obtain the
                           media type from the hypervisor.

            other(2)       The source type is other than those
                           defined in this conversion.

            block(3)       The source type is a block device.

            raw(4)         The source type is a raw-formatted file.

            sparse(5)      The source type is a sparse file.

            network(6)     The source type is a network device."
    SYNTAX       INTEGER {
                    unknown(1),
                    other(2),
                    block(3),
                    raw(4),
                    sparse(5),
                    network(6)
                 }

VirtualMachineStorageAccess ::= TEXTUAL-CONVENTION
    STATUS       current
    DESCRIPTION
            "The access permission of a virtual storage:

            readwrite(1)   The virtual storage is a read-write
                           device.

            readonly(2)    The virtual storage is a read-only
                           device."
    SYNTAX       INTEGER {
                    readwrite(1),
                    readonly(2)
                 }

VirtualMachineStorageMediaType ::= TEXTUAL-CONVENTION
    STATUS       current
    DESCRIPTION
            "The media type of a virtual storage device:

            unknown(1)     The media type is unknown, e.g., because
                           the implementation failed to obtain the
                           media type from the hypervisor.

            other(2)       The media type is other than those
                           defined in this conversion.

            hardDisk(3)    The media type is hard disk.

            opticalDisk(4) The media type is optical disk."
    SYNTAX       INTEGER {
                    other(1),
                    unknown(2),
                    hardDisk(3),
                    opticalDisk(4)
                 }

VirtualMachineNetworkIndex ::= TEXTUAL-CONVENTION
    DISPLAY-HINT "d"
    STATUS       current
    DESCRIPTION
            "A unique value, greater than zero, identifying a
            virtual network interface allocated to a virtual
            machine.  The value for each virtual network interface
            must remain constant at least from one re-initialization
            of the virtual machine to the next re-initialization."
     SYNTAX      Integer32 (1..2147483647)


-- The hypervisor group
--
-- A collection of objects common to all hypervisors.
--
vmHypervisor    OBJECT IDENTIFIER ::= { vmObjects 1 }

vmHvSoftware OBJECT-TYPE
    SYNTAX       SnmpAdminString (SIZE (0..255))
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "A textual description of the hypervisor software.  This
            value should not include its version, and it should be
            included in `hvVersion'."
    ::= { vmHypervisor 1 }

vmHvVersion OBJECT-TYPE
    SYNTAX       SnmpAdminString (SIZE (0..255))
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "A textual description of the version of the hypervisor
            software."
    ::= { vmHypervisor 2 }

vmHvObjectID OBJECT-TYPE
    SYNTAX       OBJECT IDENTIFIER
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The vendor's authoritative identification of the
            hypervisor software contained in the entity.  This value
            is allocated within the SMI enterprises
            subtree (1.3.6.1.4.1).  Note that this is different from
            sysObjectID in the SNMPv2-MIB [RFC3418] because
            sysObjectID is not the identification of the hypervisor
            software but the device, firmware, or management
            operating system."
    ::= { vmHypervisor 3 }

vmHvUpTime OBJECT-TYPE
    SYNTAX       TimeTicks
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The time (in centi-seconds) since the hypervisor was
            last re-initialized.  Note that this is different from
            sysUpTime in the SNMPv2-MIB [RFC3418] and hrSystemUptime
            in the HOST-RESOURCES-MIB [RFC2790] because sysUpTime is
            the uptime of the network management portion of the
            system, and hrSystemUptime is the uptime of the
            management operating system but not the hypervisor
            software."
    ::= { vmHypervisor 4 }


-- The virtual machine information
--
-- A collection of objects common to all virtual machines.
--
vmNumber  OBJECT-TYPE
    SYNTAX       Integer32 (0..2147483647)
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The number of virtual machines (regardless of their
            current state) present on this hypervisor."
    ::= { vmObjects 2 }

vmTableLastChange  OBJECT-TYPE
    SYNTAX       TimeTicks
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The value of hvUpTime at the time of the last creation
            or deletion of an entry in the vmTable."
    ::= { vmObjects 3 }

vmTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF VmEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
            "A list of virtual machine entries.  The number of
            entries is given by the value of vmNumber."
    ::= { vmObjects 4 }

vmEntry OBJECT-TYPE
    SYNTAX       VmEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
            "An entry containing management information applicable
            to a particular virtual machine."
    INDEX   { vmIndex }
    ::= { vmTable 1 }

VmEntry ::=
    SEQUENCE {
        vmIndex                 VirtualMachineIndex,
        vmName                  SnmpAdminString,
        vmUUID                  UUIDorZero,
        vmOSType                SnmpAdminString,
        vmAdminState            VirtualMachineAdminState,
        vmOperState             VirtualMachineOperState,
        vmAutoStart             VirtualMachineAutoStart,
        vmPersistent            VirtualMachinePersistent,
        vmCurCpuNumber          Integer32,
        vmMinCpuNumber          Integer32,
        vmMaxCpuNumber          Integer32,
        vmMemUnit               Integer32,
        vmCurMem                Integer32,
        vmMinMem                Integer32,
        vmMaxMem                Integer32,
        vmUpTime                TimeTicks,
        vmCpuTime               Counter64
    }

vmIndex OBJECT-TYPE
    SYNTAX       VirtualMachineIndex
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
            "A unique value, greater than zero, identifying the
            virtual machine."
    ::= { vmEntry 1 }

vmName OBJECT-TYPE
    SYNTAX       SnmpAdminString (SIZE (0..255))
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "A textual name of the virtual machine."
    ::= { vmEntry 2 }

vmUUID OBJECT-TYPE
    SYNTAX       UUIDorZero
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The virtual machine's 128-bit UUID or the zero-length
            string when a UUID is not available."
    ::= { vmEntry 3 }

vmOSType OBJECT-TYPE
    SYNTAX       SnmpAdminString (SIZE (0..255))
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "A textual description containing operating system
            information installed on the virtual machine.  This
            value corresponds to the operating system the hypervisor
            assumes to be running when the virtual machine is
            started.  This may differ from the actual operating
            system in case the virtual machine boots into a
            different operating system."
    ::= { vmEntry 4 }

vmAdminState OBJECT-TYPE
    SYNTAX       VirtualMachineAdminState
    MAX-ACCESS   read-write
    STATUS       current
    DESCRIPTION
            "The administrative power state of the virtual machine.
            Note that a virtual machine is supposed to be resumed
            when vmAdminState of the virtual machine is changed from
            pause(3) to on(1)."
    ::= { vmEntry 5 }

vmOperState OBJECT-TYPE
    SYNTAX       VirtualMachineOperState
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The current operational state of the virtual machine."
    ::= { vmEntry 6 }

vmAutoStart OBJECT-TYPE
    SYNTAX       VirtualMachineAutoStart
    MAX-ACCESS   read-write
    STATUS       current
    DESCRIPTION
            "The autostart configuration of the virtual machine."
    ::= { vmEntry 7 }

vmPersistent OBJECT-TYPE
    SYNTAX       VirtualMachinePersistent
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "This value indicates whether the virtual machine has a
            persistent configuration which means the virtual machine
            will still exist after shutting down."
    ::= { vmEntry 8 }

vmCurCpuNumber OBJECT-TYPE
    SYNTAX       Integer32 (0..2147483647)
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The number of virtual CPUs currently assigned to the
            virtual machine."
    ::= { vmEntry 9 }

vmMinCpuNumber OBJECT-TYPE
    SYNTAX       Integer32 (-1|0..2147483647)
    MAX-ACCESS   read-write
    STATUS       current
    DESCRIPTION
            "The minimum number of virtual CPUs that are assigned to
            the virtual machine when it is in a power-on state.  The
            value -1 indicates that there is no hard boundary for
            the minimum number of virtual CPUs.  Changes to this
            object may not persist across restarts of the
            hypervisor."
    ::= { vmEntry 10 }

vmMaxCpuNumber OBJECT-TYPE
    SYNTAX       Integer32 (-1|0..2147483647)
    MAX-ACCESS   read-write
    STATUS       current
    DESCRIPTION
            "The maximum number of virtual CPUs that are assigned to
            the virtual machine when it is in a power-on state.  The
            value -1 indicates that there is no limit.  Changes to
            this object may not persist accross restarts of the
            hypervisor."
    ::= { vmEntry 11 }

vmMemUnit OBJECT-TYPE
    SYNTAX       Integer32 (1..2147483647)
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The multiplication unit for vmCurMem, vmMinMem, and
            vmMaxMem.  For example, when this value is 1024, the
            memory size unit for vmCurMem, vmMinMem, and vmMaxMem is
            KiB."
    ::= { vmEntry 12 }

vmCurMem OBJECT-TYPE
    SYNTAX       Integer32 (0..2147483647)
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The current memory size currently allocated to the
            virtual memory module in the unit designated by
            vmMemUnit."
    ::= { vmEntry 13 }

vmMinMem OBJECT-TYPE
    SYNTAX       Integer32 (-1|0..2147483647)
    MAX-ACCESS   read-write
    STATUS       current
    DESCRIPTION
            "The minimum memory size defined to the virtual machine
            in the unit designated by vmMemUnit.  The value -1
            indicates that there is no hard boundary for the minimum
            memory size.  Changes to this object may not persist
            across the restart of the hypervisor."
    ::= { vmEntry 14 }

vmMaxMem OBJECT-TYPE
    SYNTAX       Integer32 (-1|0..2147483647)
    MAX-ACCESS   read-write
    STATUS       current
    DESCRIPTION
            "The maximum memory size defined to the virtual machine
            in the unit designated by vmMemUnit.  The value -1
            indicates that there is no limit.  Changes to this
            object may not persist across the restart of the
            hypervisor."
    ::= { vmEntry 15 }


vmUpTime OBJECT-TYPE
    SYNTAX       TimeTicks
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The time (in centi-seconds) since the administrative
            state of the virtual machine was last changed to power
            on."
    ::= { vmEntry 16 }

vmCpuTime OBJECT-TYPE
    SYNTAX       Counter64
    UNITS        "microsecond"
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The total CPU time used in microsecond.  If the number
            of virtual CPUs is larger than 1, vmCpuTime may exceed
            real time."
    ::= { vmEntry 17 }

-- The virtual CPU on each virtual machines
vmCpuTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF VmCpuEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
            "The table of virtual CPUs provided by the hypervisor."
    ::= { vmObjects 5 }

vmCpuEntry OBJECT-TYPE
    SYNTAX       VmCpuEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
            "An entry for one virtual processor assigned to a
            virtual machine."
    INDEX { vmIndex, vmCpuIndex }
    ::= { vmCpuTable 1 }

VmCpuEntry ::=
    SEQUENCE {
        vmCpuIndex              VirtualMachineCpuIndex,
        vmCpuCoreTime           Counter64
    }

vmCpuIndex OBJECT-TYPE
    SYNTAX       VirtualMachineCpuIndex
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
            "A unique value identifying a virtual CPU assigned to
            the virtual machine."
    ::= { vmCpuEntry 1 }

vmCpuCoreTime OBJECT-TYPE
    SYNTAX       Counter64
    UNITS        "microsecond"
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The total CPU time used by this virtual CPU in
            microsecond."
    ::= { vmCpuEntry 2 }

-- The virtual CPU affinity on each virtual machines
vmCpuAffinityTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF VmCpuAffinityEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
            "A list of CPU affinity entries of a virtual CPU."
    ::= { vmObjects 6 }

vmCpuAffinityEntry OBJECT-TYPE
    SYNTAX       VmCpuAffinityEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
            "An entry containing CPU affinity associated with a
            particular virtual machine."
    INDEX   { vmIndex, vmCpuIndex, vmCpuPhysIndex }
    ::= { vmCpuAffinityTable 1 }

VmCpuAffinityEntry ::=
    SEQUENCE {
        vmCpuPhysIndex          Integer32,
        vmCpuAffinity           Integer32
    }

vmCpuPhysIndex OBJECT-TYPE
    SYNTAX       Integer32 (1..2147483647)
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
            "A value identifying a physical CPU on the hypervisor.
            On systems implementing the HOST-RESOURCES-MIB, the
            value must be the same value that is used as the index
            in the hrProcessorTable (hrDeviceIndex)."
    ::= { vmCpuAffinityEntry 2 }

vmCpuAffinity OBJECT-TYPE
    SYNTAX       INTEGER {
                    unknown(0),   -- unknown
                    enable(1),    -- enabled
                    disable(2)    -- disabled
                 }
    MAX-ACCESS   read-write
    STATUS       current
    DESCRIPTION
            "The CPU affinity of this virtual CPU to the physical
            CPU represented by `vmCpuPhysIndex'."
    ::= { vmCpuAffinityEntry 3 }


-- The virtual storage devices on each virtual machine.  This
-- document defines some overlapped objects with hrStorage in
-- HOST-RESOURCES-MIB [RFC2790], because virtual resources shall be
-- allocated from the hypervisor's resources, which is the `host
-- resources'
vmStorageTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF VmStorageEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
            "The conceptual table of virtual storage devices
            attached to the virtual machine."
    ::= { vmObjects 7 }

vmStorageEntry OBJECT-TYPE
    SYNTAX       VmStorageEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
            "An entry for one virtual storage device attached to the
            virtual machine."
    INDEX { vmStorageVmIndex, vmStorageIndex }
    ::= { vmStorageTable 1 }

VmStorageEntry ::=
    SEQUENCE {
        vmStorageVmIndex        VirtualMachineIndexOrZero,
        vmStorageIndex          VirtualMachineStorageIndex,
        vmStorageParent         Integer32,
        vmStorageSourceType     VirtualMachineStorageSourceType,
        vmStorageSourceTypeString
                                SnmpAdminString,
        vmStorageResourceID     SnmpAdminString,
        vmStorageAccess         VirtualMachineStorageAccess,
        vmStorageMediaType      VirtualMachineStorageMediaType,
        vmStorageMediaTypeString
                                SnmpAdminString,
        vmStorageSizeUnit       Integer32,
        vmStorageDefinedSize    Integer32,
        vmStorageAllocatedSize  Integer32,
        vmStorageReadIOs        Counter64,
        vmStorageWriteIOs       Counter64
    }

vmStorageVmIndex OBJECT-TYPE
    SYNTAX       VirtualMachineIndexOrZero
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
            "This value identifies the virtual machine (guest) this
            storage device has been allocated to.  The value zero
            indicates that the storage device is currently not
            allocated to any virtual machines."
    ::= { vmStorageEntry 1 }

vmStorageIndex OBJECT-TYPE
    SYNTAX       VirtualMachineStorageIndex
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
            "A unique value identifying a virtual storage device
            allocated to the virtual machine."
    ::= { vmStorageEntry 2 }

vmStorageParent OBJECT-TYPE
    SYNTAX       Integer32 (0..2147483647)
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The value of hrStorageIndex which is the parent (i.e.,
            physical) device of this virtual device on systems
            implementing the HOST-RESOURCES-MIB.  The value zero
            denotes this virtual device is not any child represented
            in the hrStorageTable."
    ::= { vmStorageEntry 3 }

vmStorageSourceType OBJECT-TYPE
    SYNTAX       VirtualMachineStorageSourceType
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The source type of the virtual storage device."
    ::= { vmStorageEntry 4 }

vmStorageSourceTypeString OBJECT-TYPE
    SYNTAX       SnmpAdminString (SIZE (0..255))
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "A (detailed) textual string of the source type of the
            virtual storage device.  For example, this represents
            the specific format name of the sparse file."
    ::= { vmStorageEntry 5 }

vmStorageResourceID OBJECT-TYPE
    SYNTAX       SnmpAdminString (SIZE (0..255))
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "A textual string that represents the resource
            identifier of the virtual storage.  For example, this
            contains the path to the disk image file that
            corresponds to the virtual storage."
    ::= { vmStorageEntry 6 }

vmStorageAccess OBJECT-TYPE
    SYNTAX       VirtualMachineStorageAccess
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The access permission of the virtual storage device."
    ::= { vmStorageEntry 7 }

vmStorageMediaType OBJECT-TYPE
    SYNTAX       VirtualMachineStorageMediaType
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The media type of the virtual storage device."
    ::= { vmStorageEntry 8 }

vmStorageMediaTypeString OBJECT-TYPE
    SYNTAX       SnmpAdminString (SIZE (0..255))
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "A (detailed) textual string of the virtual storage
            media.  For example, this represents the specific driver
            name of the emulated media such as `IDE' and `SCSI'."
    ::= { vmStorageEntry 9 }

vmStorageSizeUnit OBJECT-TYPE
    SYNTAX       Integer32 (1..2147483647)
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The multiplication unit for vmStorageDefinedSize and
            vmStorageAllocatedSize.  For example, when this value is
            1048576, the storage size unit for vmStorageDefinedSize
            and vmStorageAllocatedSize is MiB."
    ::= { vmStorageEntry 10 }

vmStorageDefinedSize OBJECT-TYPE
    SYNTAX       Integer32 (-1|0..2147483647)
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The defined virtual storage size defined in the unit
            designated by vmStorageSizeUnit.  If this information is
            not available, this value shall be -1."
    ::= { vmStorageEntry 11 }

vmStorageAllocatedSize OBJECT-TYPE
    SYNTAX       Integer32 (-1|0..2147483647)
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The storage size allocated to the virtual storage from
            a physical storage in the unit designated by
            vmStorageSizeUnit.  When the virtual storage is block
            device or raw file, this value and vmStorageDefinedSize
            are supposed to equal.  This value must not be different
            from vmStorageDefinedSize when vmStorageSourceType is
            `block' or `raw'.  If this information is not available,
            this value shall be -1."
    ::= { vmStorageEntry 12 }

vmStorageReadIOs OBJECT-TYPE
    SYNTAX       Counter64
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The number of read I/O requests."
    ::= { vmStorageEntry 13 }

vmStorageWriteIOs OBJECT-TYPE
    SYNTAX       Counter64
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The number of write I/O requests."
    ::= { vmStorageEntry 14 }

-- The virtual network interfaces on each virtual machine.
vmNetworkTable OBJECT-TYPE
    SYNTAX       SEQUENCE OF VmNetworkEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
            "The conceptual table of virtual network interfaces
            attached to the virtual machine."
    ::= { vmObjects 8 }

vmNetworkEntry OBJECT-TYPE
    SYNTAX       VmNetworkEntry
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
            "An entry for one virtual storage device attached to the
            virtual machine."
    INDEX { vmIndex, vmNetworkIndex }
    ::= { vmNetworkTable 1 }

VmNetworkEntry ::=
    SEQUENCE {
        vmNetworkIndex          VirtualMachineNetworkIndex,
        vmNetworkIfIndex        InterfaceIndexOrZero,
        vmNetworkParent         InterfaceIndexOrZero,
        vmNetworkModel          SnmpAdminString,
        vmNetworkPhysAddress    PhysAddress
    }

vmNetworkIndex OBJECT-TYPE
    SYNTAX       VirtualMachineNetworkIndex
    MAX-ACCESS   not-accessible
    STATUS       current
    DESCRIPTION
            "A unique value identifying a virtual network interface
            allocated to the virtual machine."
    ::= { vmNetworkEntry 1 }

vmNetworkIfIndex OBJECT-TYPE
    SYNTAX       InterfaceIndexOrZero
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The value of ifIndex which corresponds to this virtual
            network interface.  If this device is not represented in
            the ifTable, then this value shall be zero."
    ::= { vmNetworkEntry 2 }

vmNetworkParent OBJECT-TYPE
    SYNTAX       InterfaceIndexOrZero
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The value of ifIndex which corresponds to the parent
            (i.e., physical) device of this virtual device on.  The
            value zero denotes this virtual device is not any child
            represented in the ifTable."
    ::= { vmNetworkEntry 3 }

vmNetworkModel OBJECT-TYPE
    SYNTAX       SnmpAdminString (SIZE (0..255))
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "A textual string containing the (emulated) model of
            virtual network interface.  For example, this value is
            `virtio' when the emulation driver model is virtio."
    ::= { vmNetworkEntry 4 }

vmNetworkPhysAddress OBJECT-TYPE
    SYNTAX       PhysAddress
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION
            "The MAC address of the virtual network interface."
    ::= { vmNetworkEntry 5 }


-- Notification definitions:
vmStarted NOTIFICATION-TYPE
    OBJECTS      {
                    vmName,
                    vmUUID,
                    vmOperState
                 }
    STATUS       current
    DESCRIPTION
            "This notification is generated when a virtual machine
            has been started and the start process has reached a
            stable state (e.g., running or crashed)."
    ::= { vmNotifications 1 }

vmStopped NOTIFICATION-TYPE
    OBJECTS      {
                    vmName,
                    vmUUID,
                    vmOperState
                 }
    STATUS       current
    DESCRIPTION
            "This notification is generated when a virtual machine
            has been stopped and the shutdown process has reached a
            stable state (e.g., shutdown, shutoff or crashed)."
    ::= { vmNotifications 2 }

vmSuspended NOTIFICATION-TYPE
    OBJECTS      {
                    vmName,
                    vmUUID,
                    vmOperState
                 }
    STATUS       current
    DESCRIPTION
            "This notification is generated when a virtual machine
            has been suspended and the suspension process has
            reached a stable state (e.g., paused or crashed)."
    ::= { vmNotifications 3 }

vmResumed NOTIFICATION-TYPE
    OBJECTS      {
                    vmName,
                    vmUUID,
                    vmOperState
                 }
    STATUS       current
    DESCRIPTION
            "This notification is generated when a virtual machine
            has been resumed and the resumption process has reached
            a stable state (e.g., running or crashed)."
    ::= { vmNotifications 4 }


-- Compliance definitions:
vmGroups       OBJECT IDENTIFIER ::= { vmConformance 1 }
vmCompliances  OBJECT IDENTIFIER ::= { vmConformance 2 }

vmFullCompliances MODULE-COMPLIANCE
    STATUS       current
    DESCRIPTION
            "Compliance statement for implementations supporting
            read/write access, according to the object definitions."
    MODULE     -- this module
    MANDATORY-GROUPS {
        vmHypervisorGroup,
        vmVirtualMachineGroup,
        vmCpuGroup,
        vmCpuAffinityGroup,
        vmStorageGroup,
        vmNetworkGroup,
        vmNotificationGroup
    }
    ::= { vmCompliances 1 }

vmReadOnlyCompliances MODULE-COMPLIANCE
    STATUS       current
    DESCRIPTION
            "Compliance statement for implementations supporting
            only readonly access."
    MODULE     -- this module
    MANDATORY-GROUPS {
        vmHypervisorGroup,
        vmVirtualMachineGroup,
        vmCpuGroup,
        vmCpuAffinityGroup,
        vmStorageGroup,
        vmNetworkGroup,
        vmNotificationGroup
    }

    OBJECT vmAdminState
    MIN-ACCESS   read-only
    DESCRIPTION
            "Write access is not required."

    OBJECT vmAutoStart
    MIN-ACCESS   read-only
    DESCRIPTION
            "Write access is not required."

    OBJECT vmMinCpuNumber
    MIN-ACCESS   read-only
    DESCRIPTION
            "Write access is not required."

    OBJECT vmMaxCpuNumber
    MIN-ACCESS   read-only
    DESCRIPTION
            "Write access is not required."

    OBJECT vmMinMem
    MIN-ACCESS   read-only
    DESCRIPTION
            "Write access is not required."

    OBJECT vmMaxMem
    MIN-ACCESS   read-only
    DESCRIPTION
            "Write access is not required."

    OBJECT vmCpuAffinity
    MIN-ACCESS   read-only
    DESCRIPTION
            "Write access is not required."
    ::= { vmCompliances 2 }

vmHypervisorGroup OBJECT-GROUP
    OBJECTS {
        vmHvSoftware,
        vmHvVersion,
        vmHvObjectID,
        vmHvUpTime,
        vmNumber,
        vmTableLastChange
    }
    STATUS       current
    DESCRIPTION
            "A collection of objects providing insight into the
            hypervisor itself."
     ::= { vmGroups 1 }

vmVirtualMachineGroup OBJECT-GROUP
    OBJECTS {
        -- vmIndex
        vmName,
        vmUUID,
        vmOSType,
        vmAdminState,
        vmOperState,
        vmAutoStart,
        vmPersistent,
        vmCurCpuNumber,
        vmMinCpuNumber,
        vmMaxCpuNumber,
        vmMemUnit,
        vmCurMem,
        vmMinMem,
        vmMaxMem,
        vmUpTime,
        vmCpuTime
    }
    STATUS       current
    DESCRIPTION
            "A collection of objects providing insight into the
            virtual machines) controlled by a hypervisor."
    ::= { vmGroups 2 }

vmCpuGroup OBJECT-GROUP
    OBJECTS {
        -- vmCpuIndex,
        vmCpuCoreTime
    }
    STATUS       current
    DESCRIPTION
            "A collection of objects providing insight into the
            virtual machines) controlled by a hypervisor."
    ::= { vmGroups 3 }

vmCpuAffinityGroup OBJECT-GROUP
    OBJECTS {
        -- vmCpuPhysIndex,
        vmCpuAffinity
    }
    STATUS       current
    DESCRIPTION
            "A collection of objects providing insight into the
            virtual machines) controlled by a hypervisor."
    ::= { vmGroups 4 }

vmStorageGroup OBJECT-GROUP
    OBJECTS {
        -- vmStorageVmIndex,
        -- vmStorageIndex,
        vmStorageParent,
        vmStorageSourceType,
        vmStorageSourceTypeString,
        vmStorageResourceID,
        vmStorageAccess,
        vmStorageMediaType,
        vmStorageMediaTypeString,
        vmStorageSizeUnit,
        vmStorageDefinedSize,
        vmStorageAllocatedSize,
        vmStorageReadIOs,
        vmStorageWriteIOs
    }
    STATUS       current
    DESCRIPTION
            "A collection of objects providing insight into the
            virtual storage devices controlled by a hypervisor."
    ::= { vmGroups 5 }

vmNetworkGroup OBJECT-GROUP
    OBJECTS {
        -- vmNetworkIndex,
        vmNetworkIfIndex,
        vmNetworkParent,
        vmNetworkModel,
        vmNetworkPhysAddress
    }
    STATUS       current
    DESCRIPTION
            "A collection of objects providing insight into the
            virtual network interfaces controlled by a hypervisor."
    ::= { vmGroups 6 }

vmNotificationGroup NOTIFICATION-GROUP
    NOTIFICATIONS {
        vmStarted,
        vmStopped,
        vmSuspended,
        vmResumed
    }
    STATUS       current
    DESCRIPTION
            "A collection of notifications for virtual machines
            controlled by a hypervisor."
    ::= { vmGroups 7 }

END
      ]]></artwork></figure>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>The MIB module in this document uses the following IANA-assigned
      OBJECT IDENTIFIER values recorded in the SMI Numbers registry:
      </t>
      <figure><artwork><![CDATA[
      Descriptor        OBJECT IDENTIFIER value
      ----------        -----------------------

      vm-mib            { mib-2 TBD }
      ]]></artwork></figure>
    </section>
    <!--<xref target="RFC4122" /> UUID,
	<xref target="RFC3418" /> SNMPv2-MIB,
	<xref target="RFC2790" /> HOST-RESOURCES-MIB-->

    <section anchor="Security" title="Security Considerations">
      <t>There are a number of management objects defined in this MIB that
      have a MAX-ACCESS clause of read-write and/or read-create. Such
      objects may be considered sensitive or vulnerable in some network
      environments.  The support for SET operations in a non-secure
      environment without proper protection can have a negative effect on
      hypervisor and virtual machine operations.</t>

      <t>There are a number of managed objects in this MIB that may contain
      sensitive information.  The objects in the vmHvSoftware and vmHvVersion
      list information about the hypervisor's software and version.
      Some may wish not to disclose to others which software
      they are running.
      Further, an inventory of the running software and versions
      may be helpful to an attacker who hopes to exploit software bugs
      in certain applications.
      Moreover, the objects in the vmTable, vmCpuTable, vmCpuAffinityTable,
      vmStorageTable and vmNetworkTable list
      information about the virtual machines and their virtual resource
      allocation.
      Some may wish not to disclose to others how many and what
      virtual machines they are operating.
      </t>

      <t>It is thus important to control even GET access to these objects and
      possibly to even encrypt the values of these object when sending them
      over the network via SNMP.  Not all versions of SNMP provide features
      for such a secure environment.</t>

      <t>It is recommended that attention be specifically given to
      implementing the MAX-ACCESS clause in a number of objects, including
      vmAdminState, vmAutoStart, vmMinCpuNumber, vmMaxCpuNumber,
      vmMinMem, vmMaxMem, and vmCpuAffinity
      in scenarios that DO NOT use SNMPv3 strong
      security (i.e. authentication and encryption). Extreme caution must
      be used to minimize the risk of cascading security vulnerabilities
      when SNMPv3 strong security is not used.
      When SNMPv3 strong security is not used,
      these objects should have access of read-only, not read-create.</t>

      <t>SNMPv1 by itself is not a secure environment. Even if the network
      itself is secure (for example by using IPsec), even then, there is
      no control as to who on the secure network is allowed to access and
      GET/SET (read/change/create/delete) the objects in this MIB.
      </t>
      <t>It is recommended that the implementers consider the security
      features as provided by the SNMPv3 framework. Specifically, the use
      of the User-based Security Model <xref target="RFC3414" />
      and the View-based Access Control Model
      <xref target="RFC3415" /> is recommended.
      </t>
      <t>It is then a customer/user responsibility to ensure that the SNMP
      entity giving access to an instance of this MIB, is properly
      configured to give access to the objects only to those principals
      (users) that have legitimate rights to indeed GET or SET
      (change/create/delete) them.</t>
    </section>
  </middle>

  <back>
    <!-- References split into informative and normative -->

    <references title="Normative References">
      &RFC2578;
      &RFC2579;
      &RFC2580;
      &RFC2790;
      &RFC2863;
      &RFC3414;
      &RFC3415;
      &RFC3418;
      &RFC4122;
    </references>
    <references title="Informative References">
      &RFC3410;
    </references>

<!--
    <section anchor="app-additional" title="Additional Stuff">
      <t>This becomes an Appendix.</t>
    </section>
-->
  </back>
</rfc>
