<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc2629 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml'>
  <!ENTITY RFC5280 SYSTEM  "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml">
  <!ENTITY RFC6960 SYSTEM  "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6960.xml">
  <!ENTITY RFC5019 SYSTEM  "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5019.xml">
  <!ENTITY RFC6277 SYSTEM  "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6277.xml">
  <!ENTITY RFC6066 SYSTEM  "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6066.xml">  
  
  <!ENTITY RFC6698 SYSTEM  "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6698.xml">
  <!ENTITY RFC6962 SYSTEM  "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6962.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" docName="draft-hallambaker-pkixstatus-00" ipr="trust200902">

  <front>
    <title abbrev="PKIX Operations: Revocation and Status">PKIX Operations: Certificate Status</title>
    <author fullname="Phillip Hallam-Baker" initials="P. M." surname="Hallam-Baker">
      <organization>Comodo Group Inc.</organization>
      <address>
        <email>philliph@comodo.com</email>
      </address>
    </author>

    <date day="4" month="June" year="2013" />

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <abstract>
      <t>
[abs]
      </t>

    </abstract>
  </front>

  <middle>
    <section title="Certificate Status">
      <t>
        A certificate is issued with a predetermined validity interval. It is common practice to
        specify a validity interval that starts a few hours or days before the instant of issue so
        as to avoid rejection by machines with clocks running behind the current time or otherwise
        mis-set.         In normal operation the certificate will remain valid until it expires.
      </t>
            <t>
        The CA that issued a certificate has primary responsibility for maintaining
        the certificate life cycle and reporting changes to certificate status. But
        other parties can and in some cases do report status for third party certificates.
        In particular client and platform providers have revoked certificates known
        to have been mis-issued or in a case of a CA breach.
      </t>
        
      <section title="Operational Certificate Lifecycle Model">

<t>
  PKIX does not describe a certificate lifecyle model. Instead the certificate lifecycle
  model is a consequence of the issue of PKIX Certificates and CRLs. While this
  is sufficient for describing PKIX it is not satisfactory as a reference model for
  describing operations. Not least because modern PKIX operations are frequently
  based on the use of OCSP rather than CRLs and differences in the semantics
  of CRLs and OCSP are one of the features we would want to measure. The distinction
  between an operational model and PKIX semantics is illustrated by considering
  the difference between the operational concept of direct/indirect status assertions
  and the PKIX semantics of direct/indirect CRLs.
</t>
        <section title="Direct and Indirect Status Assertions">
        <t>
          PKIX CRLs may be marked as direct or indirect to indicate that they
          are issued by the same CA that issued the original certificate (a direct CRL)
          or by a third party (an indirect CRL). 
        </t>
        <t>
          In the corresponding operational model we define a direct status assertion as
          being by the same CA that issued the original certificate and an indirect 
          status assertion as being any status assertion that is not direct.
        </t>
        <t>
          The difference between the operational and PKIX models has imporant 
          practical consequences. The CA that originally issued an assertion
          naturally holds a privileged position when it comes to revoking it. A
          direct CRL thus has a privileged position when considering the 
          question of certificate validity. A direct status assertion thus 
          has a privileged position when considering revocation status. A
          direct CRL carries an implicit claim that it is a direct status 
          assertion but this is merely a claim unless the client
          validating the CRL takes steps to verify it. For example by 
          verifying that the CRL signature has valid trust chain to the same
          trust anchor as the certificate.
        </t>
          <t>CRLs introduce a further complication as a CRL contains a list of
          explicit statements declaring that a certificate is invalid. In the case
          of a direct CRL there is an implicit assertion that any issued, unexpired certificate
          not listed was valid at the time the CRL was issued. The processing
          rules specified in <xref target="RFC5280"/> appear to limit this implicit
          assertion to direct CRLs but this is does not appear to be 
          called out in the text.
    </t>
        <t>
          One of the main use cases that might motivate the issue of an indirect
          status assertion is the case where a third party notices that a certificate is being
          used for malicious purposes and intends to advise relying parties that 
          they should not rely on that certificate. There is thus a case for
          granting third parties the ability to revoke certificates but does granting
          this ability also confer the ability to (implicitly) declare certificates
          valid?
        </t>
        <t>
          [Operational question: Do clients interpret indirect CRLs as substitutes
          for the direct CRL or as adjuncts providing additional information.]
          </t>
        </section>
         <section title="Trust Path Processing">       
       
           <t>
             One of the operational questions we would like to understand is the 
             extent to which it is possible to revoke EE certificates by revoking one
             or more of the CSCs in the certification path.
           </t>
           <t>
             Self Signed certificates used to transport Trust Anchors are not actually
             PKIX certificates and are not governed by the PKIX model. One important
             consequence of this is that relying parties do not use PKIX 
             mechanisms to check the validity of Trust Anchors.
           </t>
           <t>
             CSCs signed by the trust anchor are potentially subject to revocation.
             Do the status checking mechanisms employed in browsers support this
             in practice?
             </t>
           <t>
             [OCSP and CRLs raise separate issues here. In the case of an OCSP responder
             should we require signed OCSP tokens for each cert in the path? Is it possible
             to use a mix of CSCs and OCSP in stapled tokens?]
           </t>

              </section>   
        <section title="Revocation Reasons">
      <t>
        A status declarer may declare a certificate invalid (i.e. revoke the certificate) before its
        scheduled expiry for a variety of reason that include:
        </t>
      <t>
        <list style="hanging">
          <t hangText="Subject requested revocation:">The certificate subject requested revocation.</t>     
          <t hangText="Subject requested correction:">The certificate subject requested
           information in a certificate be corrected. Such corrections are typically
        made by revoking the original certificate and issuing a replacement.</t> 
          <t hangText="Payment declined:">A CA may issue a certificate 
          before payment has cleared. If the payment is subsequently declined, the 
           certificate is revoked.</t>    
          <t hangText="Declined extension:">The certificate was originally issued on
          condition that use beyond an initial period would require an additional 
        fee which the subject did not pay. </t>  
          <t hangText="Terms of Use:">The subject was determined to have breached the terms of use</t>
          <t hangText="Fraudulent Request:">The application was determined to be fraudulent after issue</t>              
          <t hangText="CA compromise:">The certificate can no longer be trusted because the 
          operations of the CA were compromised.</t>        
        </list>
      </t>   
          
          <t>
            The ability to provide a reason for revocation is defined without explaining
            the reason a CA should provide this information or how relying parties
            should behave differently according to the revocation reason given.
            Revoked certificates are to be considered invalid regardless of the
            reason for revocation.
          </t>
          <t>
            PKIX does not define an order of severity. In cases where multiple reasons
            apply, the CA may pick any. There is no obligation to report a reason at
            all let alone report severity.
          </t>          
          <t>
            Once a certificate is revoked the certificate lifecycle is complete as
            far as the CA is concerned and there is no obligation on the CA to update
            the revocation reason after the fact to reflect the discovery of
            a more serious cause.
          </t>
            
          <t>
            In the case of a subject request the CA only has reliable knowledge
            of the fact of the request and not the reason(s) the request was made.
            A certificate subject might have requested the certificate be revoked because they
        no further use for it or because they know the associated private key has been 
        compromised. Even if the CA asks for the revocation reason there is no
        reason to expect the subject to answer.
            The subject may not wish to report that a private key has been 
            compromised.
          </t>      
          <t> The net effect of these limitations is that 
            revocation reasons only provide a lower bound on the severity of the cause
            for which a certificate was revoked. 
            </t>

          </section>
          <section title="Operational Certificate States">
      <t>
        From an operational point of view, 
        the lifecycle of a PKIX certificate has five potential states:
      </t>
      <t>
        <list style="hanging">
          <t hangText="Valid">The certificate was issued and is valid.</t>
          <t hangText="Invalid">No certificate was issued or the certificate issued is no longer valid.
          <list style="hanging">
          <t hangText="Nonexistent">The certificate does not exist. This
          may be because the certificate has not yet been issued or it will never be issued.</t>
          <t hangText="Hold">The certificate exists but has been suspended with the possibility
          of reinstatement.</t>
          <t hangText="Revoked">The certificate exists but has been declared to be invalid with permanent effect.</t>          
          <t hangText="Expired">The certificate existed in the past but the expiry date specified at
          issue has passed.</t>            
          </list>         
          </t>          
        </list>
      </t>
<t>
  The Hold state has been found to be of little or no practical value since issuing
  a new certificate is simpler and more effective than attempting to cancel a 
  previous instruction to put the certificate on hold. 
  </t>      
            
      <t>
        CRLs and certain OCSP configurations do not permit a client to 
        distinguish between the states Valid and Invalid/Nonexistent.
        The CRL mechanism was designed to allow a relying party to check the validity of a known 
  certificate. It was thus unnecessary to distinguish the states
        Valid and Nonexistent as that would be verified by
        checking the signature. Accordingly a CRL contains only a list
        of invalid certificates.
  </t>
      <t>
        In the case of a CA Breach, key compromise or cryptanalytic attack,  a certificate 
        may be created that has a valid signature but was not issued by the CA. Such a
        certificate is 'Nonexistent' as far as the CA is concerned. Requiring a
        CA to distinguish these states in reporting certificate status 
        provides a limited degree of transparency in CA operations. A CA that 
        reports 'Nonexistent' in response to a status request for an
        unexpired certificate that has a valid signature has a defective or
        breached issue process. A CA that reports valid in response to a status
        request for a non-existent certificate has a defective or breached
        revocation mechanism.
      </t>    
      
                  </section>      
        </section>

       
    <section title="Client Behavior">

      <t>
        WebPKI clients are advised but not required to check certificate status before 
        relying on the assertions they contain. Waiting to obtain status information
        from an external source
        before relying on a certificate may cause delay or even rejection of a 
        valid certificate. 
      </t>
      <t>
        Excluding the possibility that a client requests revocation
        status then ignores the result, the options available to a Web PKI client are therefore:
      </t>      
      
      <t>
        <list style="hanging">
          <t hangText="Ignore">The client does not process revocation status from
          any source</t>
                    <t hangText="Local">The client only process revocation status
          that is available from local sources. For example hardcoded 'do not trust'
        lists.</t>
          <t hangText="Soft-Fail">The client attempts to obtain revocation status
          from external sources and will reject certificates reported as revoked but
        will accept a certificate as valid if the external source does not reply.</t>
      <t hangText="Hard-Fail">
        The client attempts to obtain revocation status
        from external sources and will reject certificates
        unless an affirmative assertion of validity is obtained.
      </t>
          </list>
          </t>
    </section>      
    
    </section>
    <section title="Status Assertion Mechanisms">

        
        
    <section title="CRLs">
      <t>
        The PKIX CRL mechanism for asserting certificate status is described in <xref target="RFC5280"/>.
      </t>
      <section title="Status Model">
      <t>
        A CRL only provides a list of certificates that have been revoked. An 
        issued, unexpired certificate is presumed to be valid if it does not 
        appear in the CRL. The certificate states supported by the CRL 
        mechanism are thus:
        </t>


      <t>
        <list style="hanging">
          <t hangText="UNREVOKED">Corresponds to operational states Valid, Nonexistent and Expired.</t>
          <t hangText="UNDETERMINED">Occurs when no CRL with a corresponding scope is available.</t>
          <t hangText="REVOKED">Corresponds to operational state Revoked. </t>
          <t hangText="HOLD">Corresponds to operational state Hold. </t>
        </list>

      </t>
      <t>
        The CRL result 'UNREVOKED' thus corresponds to three states in the Operational model
        of which one is Valid and the other two are Invalid states. A client that does not
        have a source of trusted time available may use the issue time of the CRL as the 
        basis for checking expiry. The CRL mechanism does not provide a means of determining
        that a certificate was legitimately issued 
      </t>

</section>
        <section title="Revocation Reasons">
      <t>
        <xref target="RFC5280"/> requires that a CRL entry specify a reason code but not the
        circumstances in which a code should be raised. [This is however
        specified in X.509v3]

        The following reason codes are defined:
      </t>
      <t>
        <list style="hanging">
          <t hangText="unspecified"></t>
          <t hangText="keyCompromise"></t>
          <t hangText="cACompromise"></t>
          <t hangText="affiliationChanged"></t>
          <t hangText="superseded"></t>
          <t hangText="cessationOfOperation"></t>
          <t hangText="privilegeWithdrawn"></t>
          <t hangText="aACompromise"></t>
        </list>
      </t>    

      </section>
    </section>
      <section title="OCSP">

      <t>
        OCSP is defined in <xref target="RFC6960"/>. <xref target="RFC5019"/> (lightweight) and 

        TLS Stapling <xref target="RFC6066"/> Section 8.
      </t>


        <t>
          The OCSP protocol permits responses to be signed in advance [static] or
          provide a proof of freshness by returning a nonce presented by the client.
        </t>
        <t>
          The protocol only permits static responses to report the status of 
          individual certificates. There is no feature analagous to the NSEC3 feature
          of DNSSEC which permits the non-existence of an entry in a particular range
          to be asserted.
        </t>        
        
        <t>
          [CABForum (expected to) mandate distinction of Valid / Nonexistent]
        </t>
        <section title="CRL Responder">
          <t>
            An OCSP responder may generate responses from CRLs. Such a responder
            can generate most but not all the responses required in advance by
            generating revoked responses for all the certificates listed in
            the CRL and valid responses for all the certificate serial numbers
            presented in previous requests.
          </t>
          <t>
            Such a responder cannot distinguish between Valid and nonexistent 
            states unless provided with additional information not in the CRL.
          </t>
        </section>
        <section title="Lightweight Distribution">
          <t>
            <xref target="RFC5019"/>
          </t>
<t>
  In the lightweight distribution mode of operation, the CA 
  generates OCSP responses for all unexpired certificates that it has
  issued. The signed tokens are then passed to a separate network
  for distribution. For example, a Content Delivery Network with
  a large number of delivery points.
</t>
            <t>
              One of the main strengths of this model is that all the signing
              of OCSP tokens is done offline and no signing key is ever exposed
              to an external network. One consequence of this model is that 
              responses for nonexistent certificates cannot be signed. 
            </t>

    </section>   
      <section title="OCSP Stapling">

        <t>
          One of the principle limitations of the traditional OCSP model 
          is that each TLS transaction becomes a three party communication.
          To complete the TLS connection the client must communicate with 
          the server being contacted and the OCSP service. This approach 
          introduces unnecessary delay and an additional potential 
          point of failure and is therefore unsatisfactory.
        </t>
      <t>
        OCSP stapling permits a TLS server to provide a client that supports the
        stapling extension to provide the OCSP token together with the
        certificate it corresponds to. This permits a client to establish
        a TLS communication without the need for a three party communication
        in the case that the client and server both support stapling.
        </t>
        <t>
          The chief drawback to stapling is that support for stapling is
          optional. thus a client that does not receive a stapled token
          must attempt to obtain it from the OCSP service and is 
          therefore subject to the same Softfail/hardfail dilemma 
          described above.
        </t>
      </section>
        
      </section>
        <section title="Other">

    <section title="Hardcoded/Indirect Revocation List">
      <t>
        [Commonly employed in browsers]
      </t>
      <t>
        [Some earlier versions could only be updated by changing 
        all the code. Very inflexible.]
      </t>
      <t>
        [Updatable revocation lists]
      </t>
    </section>



    <section title="DANE">
<t>
  DANE assertions <xref target="RFC6698"/> may be used to cancel a certificate. [describe]
</t>

    </section>        
            <section title="Certificate Transparency">

<t>
  CT <xref target="RFC6962"/> provides a means of auditing the operation
  of a CA using only information that is available to the public. 
  Moreover a client can determine that a certificate has 
  been issued transparently or not. [describe]
</t>
        <t>
          [Allows another way to distinguish Valid and nonexistent and thus
          CA breach.]
        </t>
    </section>
    </section>
    </section>

    <section title="Status Acquisition Mechanisms">
                      <section title="Google's Status Mechanism">


    </section>
      <section title="SCVP">


      </section>
      <section title="XKMS">


      </section>
    </section>
    
      <section title="Status">
        <t>
          Historical behavior is only of interest to the extent that it affects 
          current operations.
        </t>
                <t>
          Every PKIX certificate has a built in expiry date. Thus we are only 
          interested in CA operations from the date at which their oldest unexpired 
          certificate is still valid.
        </t>
      <section title="CAs">
  <t>
    Describe survey methodology here (self reporting)
  </t>

        
      <section title="CA-Browser Forum Requirements">
<t>
  Here put the common requirements.
</t>

      </section>
      </section>
      <section title="Servers">


      </section>
      <section title="Clients">


      </section>      
      </section>    
    
      
    <section title="Security Considerations">
      <t>
        Put something here?
      </t>
    </section>
    <section title="IANA Considerations">
      <t>
None
      </t>
    </section>
  </middle>
  <back>


    <references title="Normative References">
      &RFC5280;
      &RFC6960;
      &RFC5019;
      &RFC6277;
      &RFC6066;
    </references>
    <references title="Non Normative References">
      &RFC6698;
      &RFC6962;
    </references>

  </back>
</rfc>