<?xml version="1.0" encoding="UTF-8"?>
<?rfc artworklines="1"?>
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc inline="yes"?>
<?rfc comments="yes"?>
<?rfc subcompact="yes"?>
<?rfc tocdepth="6"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc rfcedstyle="yes"?>
<rfc ipr="trust200902" category="std" docName="draft-ordogh-spam-reporting-using-imap-kleansed-00">
	<front>
		<title abbrev="IMAP SREP">Spam reporting using IMAP: SREP</title>
		<author fullname="Zoltan Ordogh" initials="Z. O." surname="Ordogh">
			<organization>Research In Motion Limited</organization>
			<address>
				<postal>
					<street>1875 Buckhorn Gate</street>
					<city>Mississauga</city>
					<code>L4W 5P1</code>
					<region>Ontario</region>
					<country>Canada</country>
				</postal>
				<phone>+19056294746x15674</phone>
				<facsimile>+12892615950</facsimile>
				<email>zordogh@rim.com</email>
			</address>
		</author>
		<author fullname="Alessandro Vesely" initials="A." surname="Vesely" role="editor">
			<organization/>
			<address>
				<postal>
					<street>v. L. Anelli 13</street>
					<code>20122</code>
					<city>Milano</city>
					<region>MI</region>
					<country>IT</country>
				</postal>
				<email>vesely@tana.it</email>
			</address>
		</author>
		<date year="2012"/>
		<area/>
		<workgroup/>
		<abstract>
			<t>This is the definition of an IMAP command for reporting spam.</t>

			<t>Spam can be flagged using the $Junk and $NotJunk keywords.
				Spam reporting is meant to correspond to a command to be run on
				the IMAP server, in order to tune filters and possibly mitigate
				further attempts.  This behavior can be obtained by moving
				message to a special folder that is being observed by the server.</t>
		</abstract>
		<note title="Purpose">
			<t>This is a cleanup of an existing draft
				and its sole purpose is to discuss whether
				its core is good for APPSAWG.
			</t>
		</note>
	</front>
	<middle>
		<section title="Introduction">

			<t> Spam reporting is the activity by which a Mailbox Provider can
				manage a feedback loop, as defined in <xref target="FBL"/>.
				That activity requires complaints to be collected, typically having
				end users hit a "Report Spam" button in their Mail User Agents (MUA).
				This memo defines a new command, SREP, that identifies a message
				in an Internet Message Access Protocol <xref target="IMAP4"/> store
				and requests that it be the object of a complaint.
				That way, a MUA that is an IMAP4 client can implement a "Report Spam"
				button and enable it according to servers' capabilities.</t>

			<t> There are a number of solutions available based on the multipart/report
				content type defined in <xref target="REPORT"/>. However, these solutions
				require including the message contents and hence, consume bandwidth to
				transmit the entire message. In bandwidth-constrained environments --such
				as mobile networks-- it is highly desirable to send only a minimum set of
				information --a reference-- instead of the entire message. Furthermore, it
				is desirable to permit individual server implementations to handle spam in
				any way these systems choose to: do nothing, flag, recommend deletion or
				relocation, perform deletion or relocation, and, involve any choice of spam
				aggregation in the decision process, for example the
				<xref target="OMA-SPAMREP"/>. Solutions that exist today employ manipulating
				proprietary flags in the IMAP storage to achieve the bare minimum, however more
				advanced solutions cannot be developed by using flags only; the IMAP server
				needs to be involved actively in the spam reporting process.</t>

			<t> This document specifies the syntax of the SREP command, which allows a
				client to inform the server that the user considered a message (or parts
				thereof) spam, or, that the user no longer considers a message (or parts
				thereof) spam. Since all information about the message is readily available
				on the server, the command also allows the server to implement a more
				intelligent and accurate decision logic, which may be invoked when the spam
				is reported and the server can respond with its decision to the client.</t>

			<t> A server implementation may run a local executable or script
				that makes the relevant decisions pertaining to the spam reporting
				process.</t>

			<t> This document focuses only on the client-server interactions and the
				scope is limited to messages that either exist on the IMAP server, or,
				exist elsewhere and the IMAP server is configured to access them.
				Consequently, deposit- time filtering, messages that have been deleted, or,
				exist in an external storage but are accessible via an access protocol
				unknown to the IMAP server are out of scope.</t>
		</section>

		<section title="Conventions Used In This Document">
			<t> In the examples, "C:" and "S:" indicate lines sent by the client or the
				server, respectively.</t>

			<t> The key words "MUST", "MUST NOT", "SHOULD", "SHOULD NOT", and "MAY" in
				this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
		</section>

		<section anchor="Command" title="The SREP command">
			<t>The SREP command follows the conventions of <xref target="IMAP4"/>.</t>
			<t>Arguments:
				<list>
					<t>directive; see <xref target="Directives"/></t>
					<t>OPTIONAL abuse type; see <xref target="AbuseTypes"/></t>
					<t>reference; see <xref target="References"/></t>
					<t>OPTIONAL list of part identifiers; see <xref target="PartIDs"/></t>
					<t>request action; see <xref target="RequestAction"/></t>
				</list>
			</t>
			<t>Responses; see <xref target="Responses"/>:
				<list>
					<t>OPTIONAL OK response: RELOCATE</t>
					<t>OPTIONAL OK response: RELOCATED</t>
					<t>OPTIONAL OK response: DELETE</t>
					<t>OPTIONAL OK response: DELETED</t>
					<t>OPTIONAL OK response: KEYWORD</t>
				</list>
			</t>
			<t>Result:
				<list>
					<t>OK - command completed successfully</t>
					<t>NO - the server cannot access one or more messages (deleted or unauthorized)</t>
					<t>BAD - there was an error during processing the command (syntax or unsupported parameter)</t>
				</list>
			</t>
			<t>The formal syntax of the SREP command is defined in <xref target="FormalSyntax"/>.</t>
			<t>The SREP command allows:
				<list>
					<t>- reporting spam; i.e. set the spam condition, and,</t>
					<t>- reporting that a message (that was reported spam earlier) is no longer spam; i.e. clear the spam condition.</t>
				</list>
			</t>

			<t> The SREP command may be used with any IMAP4 server implementation that
				returns "SREP" as one of the supported capabilities in response to the
				CAPABILITY command. If the server does not indicate support for the SREP
				capability, the client MUST NOT use the SREP command.</t>

			<t> The SREP command may result in ambiguity, therefore the client MUST NOT
				send any commands before the result of the SREP command has been received,
				see Section 5.5 in [IMAP].</t>

			<t> The command MAY be issued on one or more messages at a time, in the
				currently selected mailbox.</t>

			<t>
				The command MAY be extended in the future with new parameters (actions,
						directives, reference types, etc). Servers MUST be able to recognize
						parameters unknown to them and respond with a BAD response in case they
						encounter such a parameter.</t>

			<section anchor="Directives" title="Directives">

				<t>The directive argument tells the server whether a message is being
				reported as spam or as no longer spam. The SREP
				command MUST include the directive.</t>

				<t>To report a spam, the directive MUST be SET.</t>

				<t>To report that a message is no longer considered to be a spam, the directive MUST be CLEAR.</t>

				<t> Extensions are permitted, as defined in <xref target="FormalSyntax"/>.</t>
			</section>
			<section anchor="AbuseTypes" title="Abuse types">
				<t>The client may have additional information about the spam regarding the nature of the abuse.
					When such information is available, the client SHOULD include the abuse type argument in the request.
					When such information is not available, the client MUST omit the abuse type argument from the request.
					When the directive argument is CLEAR, the client MUST omit the abuse type argument from the request.
					This specification uses the following abuse types defined in <xref target="ARF"/>:
				</t>
				<t>
					<list style="hanging" hangIndent="6">

						<t hangText="abuse">Phishing (forgery, link manipulation, etc.): an
						attempt to divulge information from the recipient by masquerading the
						sender and/or the content(s) of the message as a trustworthy form of
						communication.</t>

						<t hangText="virus">Malware (virus, spyware, etc.): a malicious piece of
						software code embedded or attached to the message specifically designed
						to disrupt normal operation, gather sensitive information, gain
						unauthorized access, and/or perform other abusive behavior upon
						execution.</t>

					</list>
				</t>

				<t> Extensions are permitted, as defined in <xref target="FormalSyntax"/>.
					However, the type <xref target="NON-SPAM"/> is implied by the CLEAR
					directive, and SHOULD NOT be SET.
				</t>
			</section>
			<section anchor="References" title="References">
				<t>The reference argument consists of a reference type and a reference
					value. In general, the reference type MUST indicate the format of the
					reference while the reference value MUST contain a value corresponding to
					the indicated reference format. To use a unique identifier specified in
					<xref target="IMAP4"/>, the reference type MUST be UID and the reference
					value MUST be a number expressing the unique identifier of the message. To
					use a sequence set specified in <xref target="IMAP4"/>, the reference type
					MUST be SEQ and the reference value MUST be sequence numbers corresponding
					to the specified message sequence number set. To use an authorized URL
					specified in <xref target="URLAUTH"/>, the reference type MUST be URLAUTH
					and the reference value MUST be an URLAUTH-authorized URL, authorizing the
					entire message. </t>

				<t> Extensions are permitted, as defined in <xref target="FormalSyntax"/>.</t>
			</section>
			<section anchor="PartIDs" title="Part identifiers">

				<t>When the reference identifies one and only one message, the list of part
					identifiers MAY be included to improve the accuracy of spam detection.
					When the reference identifies more than one message, the list of part
					identifiers MUST be omitted.</t>

				<t>The list of part identifiers is a parenthesized list of part
					identifiers. Part identifiers MAY identify header fields or bodies. Header
					field identifiers MUST be prefixed with the word 'header' and the dot
					('.') character MUST be used as the separator character. Header fields
					MUST be identified by the name of the header field.</t>

				<t>Example:
					<list><t>The 'From' header field is identified as 'header.from'.</t></list>
				</t>

				<t>Body identifiers MUST be prefixed with the word 'body' and the dot ('.')
					character MUST be used as the separator character. Bodies MUST be
					identified by their positions within the message hierarcy, where the first
					position is 1 and the main level is 1. To refer the entire body of a
					message (or all bodies of a multipart message), the separator character,
					the position MUST be omitted.</t>

				<t>Examples:
					<list style="symbols">

						<t>The entire body of a message (or all bodies of a multipart message) is identified as 'body'.</t>

						<t>Considering a simple multipart message, the part following the first boundary is identified as 'body.1'.</t>

						<t>Considering a multipart message that includes an email attachment
						following the second boundary, and the email attachment containing text
						following the first boundary, the text within the email message is
						identified as 'body.2.1'.</t>
					</list>
					The formal syntax of the part-id-list is defined in <xref target="FormalSyntax"/>.
				</t>
			</section>
			<section anchor="RequestAction" title="Request Action">

				<t>The request action argument explicitly tells the server what to do with
					the the message. To request a specific action from the server explicitly,
					the SREP command MUST include the request action argument. To not request
					a specific action, the SREP command MUST NOT include the request action
					argument; in this case, the server MUST decide the course of action. The
					client MAY specify either one of the following actions:

					<list style="symbols">

						<t>The KEYWORD the client requests that only keyword(s) should be added
						to the message. The server MUST add the appropriate keyword.</t>

						<t>The RELOCATE the client requests that the message should be relocated.
						The server MUST relocate the message by copying the message to the
						destination mailbox removing the original as if another connected client
						requested this action.</t>

						<t>The DELETE the client requests that the message should be deleted. The
						server MUST delete the message as if another client performed this
						action.</t>
					</list>

					The server MUST ignore the destination mailbox in case it is nil, or, the
					request action is KEYWORD or DELETE. It is assumed that the server is pre-
					configured with the location where user's spam messages are stored. If the
					server is not configured with such information and the destination mailbox
					in a RELOCATE action is nil, or, destination mailbox in a RELOCATE action
					is otherwise inaccessible to the user (does not exist, insufficient
					permission, etc) the the server MUST reject the request (see BAD response
					in <xref target="Responses"/>). NOTE: While the DELETE action does not
					seem appropriate in case the directive argument is CLEAR, it is permitted.
					The formal syntax of the request action argument is defined in <xref
					target="FormalSyntax"/>. </t>
			</section>
			<section anchor="Responses" title="Responses and Results">
				<t>The SREP command MAY result in system flag changes, keyword changes, message relocation, message removal, or a combination of these.</t>
				<t>The result of the command MUST be either OK, NO or BAD:
					<list style="symbols">

						<t> The OK result MUST be returned only in case the server completed the
							command successfully.</t>

						<t> The NO result MUST be returned only in case the server processed the
							command successfully, but there is a problem with the referenced
							message(s) that prevents the server from completing the requested
							actions, such as one or more messages do not exist on the server, one or
							more messages are not properly authorized by URLAUTH, etc.</t>

						<t> The BAD result MUST be returned only in case the server cannot
							process the command, or a configuration error is preventing the server
							from completing the requested actions.</t>
					</list>
				</t>

				<t> When the result is OK, the response to a SET directive MUST be either
					KEYWORD, RELOCATE, RELOCATED, DELETE, or DELETED.</t>

				<t> When the result is OK, the response to a CLEAR directive MUST be either
					KEYWORD, RELOCATE, or  RELOCATED.</t>

				<t>The server responses are:
					<list style="symbols">
						<t> The KEYWORD response occurs in case of an explicit request from the
							client, or, in case the server decided that only the keywords should be
							updated either because it does not wish to give any hint to the client,
							or, because it does not have sufficient information. The client MAY
							decide what to do with the message.</t>

						<t> The RELOCATE response occurs in case the server decided that the
							message should be relocated, however leaves this action to the client.
							The client MAY decide what to do with the message.</t>

						<t> The RELOCATED response occurs in case of an explicit request from
							the client, or, in case the server decided that the message should be
							relocated and it performed relocation of the message to the appropriate
							location before the response was sent. The server MUST relocate the
							message by copying the message to the appropriate location and removing
							the original as if another connected client requested this action.</t>

						<t> The DELETE response occurs in case the server decided that the
							message should be deleted, however leaves this action to the client. The
							client MAY decide what to do with the message.</t>

						<t> The DELETED response occurs in case of an explicit request from the
							client, or, in case the server decided that the message should be
							deleted, and performed deletion of the message before the response was
							sent. The server MUST delete the message as if another client performed
							this action.
						</t>
					</list>
				</t>

				<t> The KEYWORD, RELOCATE and DELETE responses MUST include the list of
					flags/keywords that have been added or removed. Added keywords MUST be
					prefixed with a plus sign ('+'), while removed keywords MUST be prefixed
					with a minus sign ('-'). The RELOCATED and DELETED responses MUST NOT
					include keywords. The formal syntax of the actions is defined in <xref
					target="FormalSyntax"/>.
				</t>
			</section>
			<section anchor="FormalSyntax" title="Formal Syntax">

				<t> This document extends the formal syntax defined in <xref
					target="IMAP4"/> using the Augmented Backus-Naur Form (ABNF) notation
					specified in <xref target="ABNF"/>.
				</t>
				<figure>
					<preamble/>
					<artwork><![CDATA[
directive           = "SET" / "CLEAR" / directive-ext
directive-ext       = atom
                      ; New directives MUST begin with "X" or be
                      ; registered with IANA as standard or
                      ; standards-track
abuse-type          = "AT" SP abuse-type-id
abuse-type-id       = 1*DIGIT
                      ; New abuse types MUST be registered with
                      ; IANA as standard or standards-track
reference           = reference-type SP reference-value
reference-type      = "UID" / "SEQ" / "URLAUTH" / reference-type-ext
reference-type-ext  = atom
                      ; New reference types MUST begin with "X"
                      ; or be registered with IANA as standard or
                      ; standards-track
reference-value     = uniqueid /           ; see [IMAP]
                      sequence-set /       ; see [IMAP]
                      authorized-url /     ; see [URLAUTH]
                      reference-value-ext
authorized-url      = authimapurlfull /    ; see [URLAUTH]
                      authimapurlrump      ; see [URLAUTH]
reference-value-ext = atom
                      ; New reference values MUST correspond to
                      ; reference-type-ext
part-id-list        = "(" part-id *(SP part-id) ")"
part-id             = header-id / body-id
header-id           = "header." header-fld-name
                      ; see header-fld-name in [IMAP]
body-id             = "body" *(. 1*DIGIT)
request-action      = "DO" SP req-action SP destination-box
req-action          = "KEYWORD" /
                      "RELOCATE" /
                      "DELETE"
destination-box     = mailbox / nil
resp-text-code      = resp-spam-actions    ; responses specific to
                                           ; this command, extending
                                           ; the resp-text-code
                                           ; defined in [IMAP]
resp-spam-actions   = "KEYWORD" /
                      "RELOCATE" /
                      "RELOCATED" /
                      "DELETE" /
                      "DELETED"
]]></artwork>
					<postamble/>
				</figure>
			</section>
			<section title="Examples to report spam">
				<t>Report single message as spam; no identified parts; server only
					flags the message and hints that it should be moved:
					<list>
						<t>C: Z020 SREP SET SEQ 10</t>
						<t>S: Z020 OK [RELOCATE +$Junk] SREP Completed.</t>
					</list>
				</t>

				<t>Report single message as spam; header and body identified; server adds
					the appropriate flags and hints that it should be deleted:
					<list>
						<t>C: Z040 SREP SET SEQ 9 (header.from body.2)</t>
						<t>S: Z040 OK [DELETE (+$Junk-header.from +$Junk-body.2)] SREP Completed.</t>
					</list>
				</t>

				<t>Report single message as spam; no identified parts; server moves the
					message (may clear/set flags too, but that is irrelevant because the
					client will need to reconcile anyway).
					<list>
						<t>C: Z060 SREP SET SEQ 8</t>
						<t>S: Z060 OK [RELOCATED] SREP Completed.</t>
					</list>
				</t>

				<t>Report single message as spam; no identified parts; server deletes the message.
					<list>
						<t>C: Z080 SREP SET SEQ 6</t>
						<t>S: Z080 OK [DELETED] SREP Completed.</t>
					</list>
				</t>

				<t>Report single message as spam; no identified parts; client requests
					explicitly to delete the message, server deletes the message as the
					client requested.

					<list>
						<t>C: Z100 SREP SET SEQ 4 DO DELETE NIL</t>
						<t>S: Z100 OK [DELETED] SREP Completed.</t>
					</list>
				</t>
			</section>
			<section title="Examples to report messages as no longer spam">

				<t>Report single message as no longer spam; no identified parts; server
					only clears the appropriate flags from the message.
					<list>
						<t>C: Z020 SREP CLEAR SEQ 10</t>
						<t>S: A020 OK [KEYWORD -$Junk] SREP Completed.</t>
					</list>
				</t>

				<t>Report single message as no longer spam; earlier the header and body
					were identified as spam; the server clears the appropriate flags.
					<list>
						<t>C: Z040 SREP CLEAR SEQ 9</t>
						<t>S: A040 OK [KEYWORD (-$Junk-header.from -$Junk-body.2)] SREP Completed.</t>
					</list>
				</t>

				<t>Report single message as no longer spam; no identified parts; server
					moves the message (may set/clear flags, too but that is irrelevant
					because the client will need to reconcile anyway).
					<list>
						<t>C: Z060 SREP CLEAR SEQ 8</t>
						<t>S: A060 OK [RELOCATED] SREP Completed.</t>
					</list>
				</t>
			</section>
		</section>
		<section anchor="Acknowledgements" title="Acknowledgements">
			<t>The author acknowledges and appreciates the work and comments from Josh
			Soref, Gaelle Martin-Cocher, Suresh Chitturi, Clara Severino and Christophe
			Le Thierry D'Ennequin.</t>
		</section>
		<section anchor="IANA" title="IANA Considerations">

			<t>This document constitutes registration of the SREP capability in the
			imap4-capabilities registry. </t>

			<t>SREP command directives are registered
			by publishing a standards track or IESG-approved experimental RFC. The
			registry is currently located at: http://www.iana.org/assignments/spam-
			directive-registry </t>

			<t>SREP command abuse types are registered by
			publishing a standards track or IESG-approved experimental RFC. The registry
			is currently located at: http://www.iana.org/assignments/spam-abuse-type-
			registry </t>

			<t>SREP command reference types are registered by publishing a
			standards track or IESG-approved experimental RFC. The registry is currently
			located at: http://www.iana.org/assignments/spam-reference-type-registry
			</t>

			<t>All registries are case insensitive. </t>

			<t>This document constitutes the following registrations with IANA:
			<figure>
				<preamble/>
				<artwork><![CDATA[ IMAP SREP Directive Registry

         Directive           Reference
         ---------           ---------
         SET                 [this document]
         CLEAR               [this document]
 ]]></artwork>
 				<postamble/>
 			</figure>
			<figure><preamble/><artwork><![CDATA[
         IMAP SREP Reference Type Registry

         Reference Type      Reference
         --------------      ---------------
         UID                 [this document]
         SEQ                 [this document]
         URLAUTH             [this document]
 ]]></artwork><postamble/></figure>
			</t>
			<t>Note to RFC Editor: replace "[this document]" with the RFC number before publication.</t>
		</section>
		<section anchor="Security" title="Security Considerations">
			<t>When an aggregator service is actively involved in a deployment, the service provider MUST ensure that:
				<list>
					<t>- a mutual trust relation is in place between the IMAP server and the aggregator service, and,</t>
					<t>- the aggregator service does not leak any information.</t>
				</list>
			</t>
			<t>See additional security considerations in <xref target="IMAP4"/> and <xref target="URLAUTH"/>, respectively.
			</t>
		</section>
	</middle>
	<back>
		<references title="Normative References">
			<reference anchor="RFC2119">
				<front>
					<title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement Levels</title>
					<author initials="S." surname="Bradner" fullname="Scott Bradner">
						<organization>Harvard University</organization>
						<address>
							<postal>
								<street>1350 Mass. Ave.</street>
								<street>Cambridge</street>
								<street>MA 02138</street>
							</postal>
							<phone>- +1 617 495 3864</phone>
							<email>sob@harvard.edu</email>
						</address>
					</author>
					<date year="1997" month="March"/>
					<area>General</area>
					<keyword>keyword</keyword>
					<abstract>
						<t>
							In many standards track documents several words are used to signify
							the requirements in the specification.  These words are often
							capitalized.  This document defines these words as they should be
							interpreted in IETF documents.  Authors who follow these guidelines
							should incorporate this phrase near the beginning of their document:

							<list><t>
								The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
								NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
								"OPTIONAL" in this document are to be interpreted as described in
								RFC 2119.
									</t></list></t>
						<t>
							Note that the force of these words is modified by the requirement
							level of the document in which they are used.
																</t>
					</abstract>
				</front>
				<seriesInfo name="BCP" value="14"/>
				<seriesInfo name="RFC" value="2119"/>
				<format type="TXT" octets="4723" target="http://www.rfc-editor.org/rfc/rfc2119.txt"/>
				<format type="HTML" octets="17491" target="http://xml.resource.org/public/rfc/html/rfc2119.html"/>
				<format type="XML" octets="5777" target="http://xml.resource.org/public/rfc/xml/rfc2119.xml"/>
			</reference>
			<reference anchor="ABNF">
				<front>
					<title abbrev="ABNF">Augmented BNF for Syntax Specifications: ABNF</title>
					<author initials="D." surname="Crocker" fullname="Dave Crocker">
						<organization>Brandenburg InternetWorking</organization>
						<address>
							<postal>
								<street>675 Spruce Dr.</street>
								<city>Sunnyvale</city>
								<region>CA</region>
								<code>94086</code>
								<country>US</country>
							</postal>
							<email>dcrocker@bbiw.net</email>
						</address>
					</author>
					<author initials="P." surname="Overell" fullname="Paul Overell">
						<organization>THUS plc.</organization>
						<address>
							<postal>
								<street>99 Berkeley Street</street>
								<city>Glasgow</city>
								<code>G37HR</code>
								<country>UK</country>
							</postal>
							<email>dcrocker@bbiw.net</email>
						</address>
					</author>
					<date year="2008" month="January"/>
				</front>
				<seriesInfo name="RFC" value="5234"/>
				<format type="TXT" octets="26359" target="http://tools.ietf.org/rfc/rfc5234.txt"/>
			</reference>
			<reference anchor="IMAP4">
				<front>
					<title abbrev="IMAP - VERSION 4rev1">INTERNET MESSAGE ACCESS PROTOCOL - VERSION 4rev1</title>
					<author initials="M." surname="Crispin" fullname="Mark R. Crispin">
						<organization>Networks and Distributed Computing, University of Washington</organization>
						<address>
							<postal>
								<street>15th Avenue NE</street>
								<city>Seattle</city>
								<region>WA</region>
								<code>4545</code>
								<country>US</country>
							</postal>
							<email>MRC@CAC.Washington.EDU</email>
						</address>
					</author>
					<date year="2003" month="March"/>
				</front>
				<seriesInfo name="RFC" value="3501"/>
				<format type="TXT" octets="227639" target="http://tools.ietf.org/rfc/rfc3501.txt"/>
			</reference>
			<reference anchor="URLAUTH">
				<front>
					<title abbrev="IMAP URLAUTH Extension">Internet Message Access Protocol (IMAP) - URLAUTH Extension</title>
					<author initials="M." surname="Crispin" fullname="Mark R. Crispin">
						<organization>Networks and Distributed Computing, University of Washington</organization>
						<address>
							<postal>
								<street>15th Avenue NE</street>
								<city>Seattle</city>
								<region>WA</region>
								<code>4545</code>
								<country>US</country>
							</postal>
							<email>MRC@CAC.Washington.EDU</email>
						</address>
					</author>
					<date year="2006" month="May"/>
				</front>
				<seriesInfo name="RFC" value="4467"/>
				<format type="TXT" octets="36714" target="http://tools.ietf.org/rfc/rfc4467.txt"/>
			</reference>
			<reference anchor='ARF'>

				<front>
				<title>An Extensible Format for Email Feedback Reports</title>
				<author initials='Y.' surname='Shafranovich' fullname='Y. Shafranovich'>
				<organization /></author>
				<author initials='J.' surname='Levine' fullname='J. Levine'>
				<organization /></author>
				<author initials='M.' surname='Kucherawy' fullname='M. Kucherawy'>
				<organization /></author>
				<date year='2010' month='August' />
				<abstract>
				<t>This document defines an extensible format and MIME type that may be used by mail operators to report feedback about received email to other parties.  This format is intended as a machine-readable replacement for various existing report formats currently used in Internet email. [STANDARDS-TRACK]</t></abstract></front>

				<seriesInfo name='RFC' value='5965' />
				<format type='TXT' octets='47452' target='http://www.rfc-editor.org/rfc/rfc5965.txt' />
			</reference>
			<reference anchor='NON-SPAM'>
				<front>
				<title>Email Feedback Report Type Value: not-spam</title>
				<author initials='K.' surname='Li' fullname='K. Li'>
				<organization /></author>
				<author initials='B.' surname='Leiba' fullname='B. Leiba'>
				<organization /></author>
				<date year='2011' month='November' />
				<abstract>
				<t>This document defines a new Abuse Reporting Format (ARF) feedback report type value: "not-spam".  It can be used to report an email message that was mistakenly marked as spam. [STANDARDS-TRACK]</t></abstract></front>

				<seriesInfo name='RFC' value='6430' />
				<format type='TXT' octets='12678' target='http://www.rfc-editor.org/rfc/rfc6430.txt' />
			</reference>
		</references>
		<references title="Informative References">
			<reference anchor="REPORT">
				<front>
					<title abbrev="Multipart/Report content type">The Multipart/Report Content Type for the Reporting of Mail System Administrative Messages</title>
					<author initials="G." surname="Vaudreuil" fullname="Gregory M. Vaudreuil">
						<organization>Lucent Technologies</organization>
						<address>
							<postal>
								<street>7291 Williamson Rd</street>
								<city>Dallas</city>
								<region>TX</region>
								<code>75214</code>
								<country>US</country>
							</postal>
							<email>GregV@ieee.org</email>
						</address>
					</author>
					<date year="2003" month="January"/>
				</front>
				<seriesInfo name="RFC" value="3462"/>
				<format type="TXT" octets="12186" target="http://tools.ietf.org/rfc/rfc3462.txt"/>
			</reference>
			<reference anchor="OMA-SPAMREP">
				<front>
					<title abbrev="OMA SpamRep 1.0">Mobile Spam Reporting 1.0, OMA-ERP-SpamRep-V1_0</title>
					<author>
						<organization>Open Mobile Alliance</organization>
					</author>
				</front>
			</reference>
			<reference anchor='FBL'>
				<front>
				<title>Complaint Feedback Loop Operational Recommendations</title>
				<author initials='J.' surname='Falk' fullname='J. Falk'>
				<organization /></author>
				<date year='2011' month='November' />
				<abstract>
				<t>Complaint Feedback Loops similar to those described herein have existed for more than a decade, resulting in many de facto standards and best practices. This document is an attempt to codify, and thus clarify, the ways that both providers and consumers of these feedback mechanisms intend to use the feedback, describing some already common industry practices.&lt;/t>&lt;t> This document is the result of cooperative efforts within the Messaging Anti-Abuse Working Group, a trade organization separate from the IETF. The original MAAWG document upon which this document is based was published in April, 2010. This document does not represent the consensus of the IETF; rather it is being published as an Informational RFC to make it widely available to the Internet community and simplify reference to this material from IETF work. This document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract></front>

				<seriesInfo name='RFC' value='6449' />
				<format type='TXT' octets='75139' target='http://www.rfc-editor.org/rfc/rfc6449.txt' />
			</reference>


		</references>
		<section title="Changes from original (non-kleansed) version">
			<t>
				<list style="symbols">
					<t>Moved Abstract to Section 1 and edited it.</t>
					<t>Moved Note to Section 2 and corrected ref to 2119.</t>
					<t>Removed the type registry, also from the IANA Considerations section</t>
					<t>Minor editing.</t>
					<t>Add references:
						<list style="symbols">
							<t>RFC 2119 (normative)</t>
							<t>RFC 6965 (normative)</t>
							<t>RFC 6430 (normative)</t>
							<t>RFC 6449 (informative)</t>
						</list>
					</t>
					<t>Removed the "Example flows" sections.
						My understanding is that that part is subject to IPR, hence
						I removed IPR encumbrance along with it.</t>
					<t>Changed doc's category to Standard Track.</t>
					<t>Changed short title to IMAP SREP.</t>
					<t>Removed $OMAEVVM10-spam-* keywords from the examples, sticking to $Junk.</t>
					<t>Added myself as editor, for posting.</t>
				</list>
			</t>
		</section>
	</back>
</rfc>
