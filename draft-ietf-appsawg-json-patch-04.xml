<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2616 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC4627 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml">
<!ENTITY RFC5261 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5261.xml">
<!ENTITY RFC5789 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5789.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="info" docName="draft-ietf-appsawg-json-patch-04" ipr="trust200902">

    <front>
        <title>JSON Patch</title>
        <author fullname="Paul C. Bryan" initials="P." surname="Bryan" role="editor">
            <organization>Salesforce.com</organization>
            <address>
                <phone>+1 604 783 1481</phone>
                <email>pbryan@anode.ca</email>
            </address>
        </author>
        <author fullname="Mark Nottingham" initials="M." surname="Nottingham"
           role="editor">
           <organization></organization>
           <address>
              <email>mnot@mnot.net</email>
           </address>
        </author>
        <date year="2012" />
        <area>General</area>
        <workgroup>Applications Area Working Group</workgroup>
        <keyword>json</keyword>
		<keyword>HTTP</keyword>
		<keyword>format</keyword>
		<keyword>diff</keyword>
        <abstract>
            <t>JSON Patch defines the media type "application/json-patch", a JSON document
             structure for expressing a sequence of operations to apply to a JSON document.</t> 
        </abstract>
    </front>

    <middle>

        <section title="Introduction">
            <t><xref target="RFC4627">JavaScript Object Notation (JSON)</xref>
            is a common format for the exchange and storage of structured
            data. <xref target="RFC5789">HTTP PATCH</xref> extends the <xref
            target="RFC2616">Hypertext Transfer Protocol (HTTP)</xref> with a
            method to perform partial modifications to resources.</t>

            <t>The JSON Patch media type "application/json-patch" is a JSON
            document structure for expressing a sequence of operations to
            apply to a target JSON document, suitable for use with the HTTP
            PATCH method.</t>
        </section>

        <section title="Conventions">
            <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
            NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL"
            in this document are to be interpreted as described in <xref
            target="RFC2119">RFC 2119</xref>.</t>
        </section>

        <section anchor="Structure" title="Document Structure">
            <t>A JSON Patch document contains a JSON array of objects. Each
            object contains a single operation to apply to the target JSON
            document.</t>
            <figure><preamble>An example JSON Patch document:</preamble><artwork><![CDATA[
[
    { "test": "/a/b/c", "value": "foo" },
    { "remove": "/a/b/c" },
    { "add": "/a/b/c", "value": [ "foo", "bar" ] },
    { "replace": "/a/b/c", "value": 42 },
    { "move": "/a/b/c", "to": "/a/b/d" },
    { "copy": "/a/b/c", "to": "/a/b/e" }
]
]]>         </artwork></figure>

            <t>Evaluation of a JSON Patch document begins with a target JSON
            document. Operations are applied sequentially in the order they
            appear in the array. Each operation in the sequence is applied to
            the target document; the resulting document becomes the target of
            the next operation. Evaluation continues until all operations are
            successfully applied or an error condition is encountered.</t>
        </section>

        <section title="Operations">

            <t>The operation to perform is expressed in a member of the
            operation object. The name of the operation member is one of:
            "add", "remove", "replace", "move", "copy" or "test".</t>

            <t>The member value is a string containing a <xref
            target="JSON-Pointer"/> value that references the location
            within the target document to perform the operation. It is an
            error condition if an operation object contains no recognized
            operation member or more than one operation member.</t>
            
            <section title="add">
                <t>The "add" operation adds a new value at the specified
                location in the target document. The location must reference
                one of: the root of the target document, a member to add to an
                existing object, or an element to add to an existing array.
                The operation object contains a "value" member that
                specifies the value to be added.</t>

                <figure><preamble>Example:</preamble><artwork><![CDATA[
{ "add": "/a/b/c", "value": [ "foo", "bar" ] }
]]>             </artwork></figure>

                <t>If the location references the root of the target document
                or a member of an existing object, it is an error condition if
                a value at the specified location already exists.</t>

                <t>If the location references an element of an existing array,
                any elements at or above the specified index are shifted one
                position to the right. It is an error condition if the
                specified index is greater than the number of elements in the
                array.</t>

               <t>Note that this operation will, in common use, contain a JSON
               Pointer that does not resolve to an existing value in the
               target document. As such, the pointer's error handling
               algorithm is invoked. This specification defines the error
               handling algorithm for "add" pointers to explicitly ignore the
               error and perform the operation as specified.</t>

               <t>It is an error condition if the "value" member is not
               present.</t>
                
            </section>

            <section title="remove">
                <t>The "remove" operation removes the value at the specified
                location in the target document.</t>

                <figure><preamble>Example:</preamble><artwork><![CDATA[
{ "remove": "/a/b/c" }
]]>             </artwork></figure>

                <t>If removing an element from an array, any elements above
                the specified index are shifted one position to the left.</t>

                <t>It is an error condition if a value at the specified
                location does not exist.</t>
            </section>

            <section title="replace">
                <t>The "replace" operation replaces the value at the specified
                location in the target document with a new value. The
                operation object contains a "value" member that specifies
                the replacement value.</t>

                <figure><preamble>Example:</preamble><artwork><![CDATA[
{ "replace": "/a/b/c", "value": 42 }
]]>             </artwork></figure>

                <t>This operation is functionally identical to expressing a
                "remove" operation for a value, followed immediately by an
                "add" operation at the same location with the replacement
                value.</t>

                <t>It is an error condition if a value at the specified
                location does not exist.</t>

                <t>It is an error condition if the "value" member is not
                present.</t>

            </section>

            <section title="move">
                <t>The "move" operation removes the value at one location and
                adds it to another location in the target document.</t>

                <t>The operation object contains a "to" member, a string
                containing a JSON Pointer value that references the location
                in the target document to add the value to. This location must
                reference one of: the member to add to an existing object, or
                an element to add to an existing array.</t>

                <figure><preamble>Example:</preamble><artwork><![CDATA[
{ "move": "/a/b/c", "to": "/a/b/d" }
]]>             </artwork></figure>

                <t>This operation is functionally identical to expressing a
                "remove" operation, followed immediately by an "add" operation
                at the new location with the value that was just removed.
                Moving a value to its current location can be safely
                ignored.</t>

                <t>If the location in the "to" member references a member of
                an existing object in the target document, it is an error
                condition if a value at the specified location already exists
                (unless "move" and "to" specify the same object, which has no
                effect).</t>

                <t>If the location in the "to" member references an element of
                an existing array, any elements at or above the specified
                index are shifted one position to the right. It is an error
                condition if the specified index is greater than the number of
                elements in the array.</t>
                
                <t>It is an error condition if the "to" member is not
                present.</t>
            </section>

            <section title="copy">
                <t>The "copy" operation copies the value at one location to
                another location in the target document.</t>

                <t>The operation object contains a "to" member, a string
                containing a JSON Pointer value that references the location
                in the target document to add the value to. This location must
                reference one of: the member to add to an existing object, or
                an element to add to an existing array.</t>

                <figure><preamble>Example:</preamble><artwork><![CDATA[
{ "copy": "/a/b/c", "to": "/a/b/e" }
]]>             </artwork></figure>

                <t>If the location in the "to" member references a member of
                an existing object in the target document, it is an error
                condition if a value at the specified location already
                exists.</t>

                <t>If the location in the "to" member references an element of
                an existing array, any elements at or above the specified
                index are shifted one position to the right. It is an error
                condition if the specified index is greater than the number of
                elements in the array.</t>

                <t>It is an error condition if the "to" member is not
                present.</t>
            </section>

            <section title="test">
                <t>The "test" operation tests that a value at the specified
                location in the target document is equal to a specified value.
                The operation object contains a "value" member that
                specifies the value to test for.</t>

				<t>Here, "equal" means that the target and specified values are of
            the same JSON type, and considered equal by the following rules
            for that type:</t>
				<t><list style="symbols">
					<t>strings: are considered equal if, after unescaping any
                    sequence(s) in both strings starting with a reverse
                    solidus, they contain the same number of Unicode
                    characters and their code points are position-wise
                    equal.</t>
					<t>numbers: are considered equal if subtracting one
                    from the other results in 0.</t>
					<t>arrays: are considered equal if they contain the same
                    number of values, and each value can be considered equal
                    to the value at the corresponding position in the other
                    array.</t>
					<t>objects: are considered equal if they contain the same
               number of members, and each member can be considered equal to a
               member in the other object, by comparing their keys as strings,
               and values using this list of type-specific rules.</t>
					<t>literals (false, true and null): are considered equal
                    if they are the same.</t>
				</list></t>
				
				<t>Note that this is a logical comparison; e.g., whitespace
                between the member values of an array is not significant.</t>
                
            <t>Also, note that ordering of the serialisation of object members
            is not significant.</t>

                <figure><preamble>Example:</preamble><artwork><![CDATA[
{ "test": "/a/b/c", "value": "foo" }
]]>             </artwork></figure>

                <t>It is an error condition if the value at the specified
                location is not equal to the specified value.</t>
                
                <t>If the value is not specified, the test is only for
                   presence, not value.</t>
                   
                <figure><preamble>For example:</preamble><artwork><![CDATA[
{ "test": "/a/b/c" }
]]>             </artwork></figure>

                <t>merely tests that the indicated structure is present 
                   in the target document.</t>
                   
            </section>

        </section>

        <section anchor="Errors" title="Error Handling">
            <t>If an error condition occurs, evaluation of the JSON Patch
            document SHOULD terminate and application of the entire patch
            document SHALL NOT be deemed successful. Note that as per
            <xref target="RFC5789"/>, when used with the PATCH HTTP method,
            it is atomic.</t>
            
            <t>Therefore, the following patch would result in no changes being
            made to the document at all (because the "test" operation results
            in an error).</t>
               
                <figure><artwork><![CDATA[
[
 {"replace": "/a/b/c", "value": 42},
 {"test": "/a/b/c", "value": "C"}
]
]]>             </artwork></figure>

        </section>

        <section anchor="IANA" title="IANA Considerations">
            <t>The Internet media type for a JSON Patch document is application/json-patch.
            <list style="hanging">
            <t hangText="Type name:">application</t>
            <t hangText="Subtype name:">json-patch</t>
            <t hangText="Required parameters:">none</t>
            <t hangText="Optional parameters: ">none</t>
            <t hangText="Encoding considerations:"> binary</t>
            <t hangText="Security considerations:"><vspace />
             See Security Considerations in section 7.</t>
            <t hangText="Interoperability considerations:">N/A</t>
            <t hangText="Published specification:"><vspace />[this memo]</t>
            <t hangText="Applications that use this media type:"><vspace />
             Applications that manipulate JSON documents.</t>
            <t hangText="Additional information:"><list>
                <t hangText="Magic number(s):">N/A</t>
                <t hangText="File extension(s):">.json-patch</t>
                <t hangText="Macintosh file type code(s):">TEXT</t>
             </list></t>
            <t hangText="Person &amp; email address to contact for further information:">
             <vspace />Paul C. Bryan &lt;pbryan@anode.ca&gt;</t>
            <t hangText="Intended usage:">COMMON</t>
            <t hangText="Restrictions on usage:">none</t>
            <t hangText="Author:">Paul C. Bryan &lt;pbryan@anode.ca&gt;</t>
            <t hangText="Change controller:">IETF</t>
            </list></t>
        </section>

        <section anchor="Security" title="Security Considerations">
            <t>This specification has the same security considerations as
             <xref target="RFC4627">JSON</xref> and
             <xref target="JSON-Pointer"/>.</t>
        </section>

        <section title="Acknowledgements">
            <t>The following individuals contributed ideas, feedback and
            wording to this specification:<list>
                <t>Mike Acar, Mike Amundsen, Paul Davis, Murray S. Kucherawy,
                Dean Landolt, Randall Leeds, Julian Reschke, James Snell,
                Eli Stevens.</t>
            </list></t> 
            <t>The structure of a JSON Patch document was influenced by the
             <xref target="RFC5261">XML Patch document</xref> specification.</t>
        </section>

    </middle>

    <back>
        <references title="Normative References">
            &RFC2119;
            &RFC4627;
            <reference anchor="JSON-Pointer">
                <front>
                    <title>JSON Pointer</title>
                    <author initials="P." surname="Bryan" fullname="Paul C. Bryan">
                        <organization>ForgeRock</organization>
                    </author>
                    <author initials="K." surname="Zyp" fullname="Kris Zyp">
                        <organization>SitePen (USA)</organization>
                    </author>
                    <date year="2012" month="March"/>
                </front>
                <seriesInfo name="Internet-Draft" value="draft-ietf-appsawg-json-pointer-04"/>
                <format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-appsawg-json-pointer-04.txt"/>
                <format type="HTML" target="http://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-04"/>
            </reference>
        </references>

        <references title="Informative References">
            &RFC2616;
            &RFC5261;
            &RFC5789;
        </references>

        <section title="Examples">

            <section anchor="add-member" title="Adding an Object Member">
                <t>An example target JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
    "foo": "bar"
}
]]>                 </artwork>
                </figure>
                <t>A JSON Patch document:</t>
                <figure>
                    <artwork><![CDATA[
[
    { "add": "/baz", "value": "qux" }
]
]]>                 </artwork>
                </figure>
                <t>The resulting JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
    "baz": "qux",
    "foo": "bar"
}
]]>                 </artwork>
                </figure>
            </section>

            <section anchor="add-element" title="Adding an Array Element">
                <t>An example target JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
    "foo": [ "bar", "baz" ]
}
]]>                 </artwork>
                </figure>
                <t>A JSON Patch document:</t>
                <figure>
                    <artwork><![CDATA[
[
    { "add": "/foo/1", "value": "qux" }
]
]]>                 </artwork>
                </figure>
                <t>The resulting JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
    "foo": [ "bar", "qux", "baz" ]
}
]]>                 </artwork>
                </figure>
            </section>

            <section anchor="remove-member" title="Removing an Object Member">
                <t>An example target JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
    "baz": "qux",
    "foo": "bar"
}
]]>                 </artwork>
                </figure>
                <t>A JSON Patch document:</t>
                <figure>
                    <artwork><![CDATA[
[
    { "remove": "/baz" }
]
]]>                 </artwork>
                </figure>
                <t>The resulting JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
    "foo": "bar"
}
]]>                 </artwork>
                </figure>
            </section>

            <section anchor="remove-element" title="Removing an Array Element">
                <t>An example target JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
    "foo": [ "bar", "qux", "baz" ]
}
]]>                 </artwork>
                </figure>
                <t>A JSON Patch document:</t>
                <figure>
                    <artwork><![CDATA[
[
    { "remove": "/foo/1" }
]
]]>                 </artwork>
                </figure>
                <t>The resulting JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
    "foo": [ "bar", "baz" ]
}
]]>                 </artwork>
                </figure>
            </section>

            <section anchor="replace-value" title="Replacing a Value">
                <t>An example target JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
    "baz": "qux",
    "foo": "bar"
}
]]>                 </artwork>
                </figure>
                <t>A JSON Patch document:</t>
                <figure>
                    <artwork><![CDATA[
[
      { "replace": "/baz", "value": "boo" }
]
]]>                 </artwork>
                </figure>
                <t>The resulting JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
    "baz": "boo",
    "foo": "bar"
}
]]>                 </artwork>
                </figure>
            </section>

            <section anchor="move-value" title="Moving a Value">
                <t>An example target JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
    "foo": {
        "bar": "baz",
        "waldo": "fred"
    }
    "qux": {
        "corge": "grault"
    }
}
]]>                 </artwork>
                </figure>
                <t>A JSON Patch document:</t>
                <figure>
                    <artwork><![CDATA[
[
    { "move": "/foo/waldo", to: "/qux/thud" }
]
]]>                 </artwork>
                </figure>
                <t>The resulting JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
    "foo": {
        "bar": "baz"
    }
    "qux": {
        "corge": "grault",
        "thud": "fred"
    }
}
]]>                 </artwork>
                </figure>
            </section>

            <section anchor="move-element" title="Moving an Array Element">
                <t>An example target JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
    "foo": [ "all", "grass", "cows", "eat" ]
}
]]>                 </artwork>
                </figure>
                <t>A JSON Patch document:</t>
                <figure>
                    <artwork><![CDATA[
[
    { "move": "/foo/1", "to": "/foo/3" }
]
]]>                 </artwork>
                </figure>
                <t>The resulting JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
    "foo": [ "all", "cows", "eat", "grass" ]
}
]]>                 </artwork>
                </figure>
            </section>

            <section anchor="test-success" title="Testing a Value: Success">
                <t>An example target JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
    "baz": "qux",
    "foo": [ "a", 2, "c" ]
}
]]>                 </artwork>
                </figure>
                <t>A JSON Patch document that will result in successful evaluation:</t>
                <figure>
                    <artwork><![CDATA[
[
    { "test": "/baz", "value": "qux" },
    { "test": "/foo/1", "value": 2 }
]
]]>                 </artwork>
                </figure>
            </section>

            <section anchor="test-error" title="Testing a Value: Error">
                <t>An example target JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
    "baz": "qux"
}
]]>                 </artwork>
                </figure>
                <t>A JSON Patch document that will result in an error condition:</t>
                <figure>
                    <artwork><![CDATA[
[
    { "test": "/baz", "value": "bar" }
]
]]>                 </artwork>
                </figure>
            </section>

            <section anchor="test-complex" title="Adding a nested Member Object">
               <t>An example target JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
   "foo": "bar"
}
]]>                 </artwork>
                </figure>
                <t>A JSON Patch document:</t>
                <figure>
                    <artwork><![CDATA[
[
  { "add": "/child", "value": { "grandchild": { } } }
]
]]>                 </artwork>
                </figure>
                <t>The resulting JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
  "foo": "bar",
  "child": {
    "grandchild": {
    }
  }
}
]]>                 </artwork>
                </figure>
            </section>

        </section>

    </back>

</rfc>
