<?xml version='1.0'?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<rfc ipr="trust200902" docName="draft-hallambaker-rfctool-01" category="std">
<front>
<title abbrev="Writing I-Ds using HTML">Writing I-Ds using HTML </title>
<author fullname="Phillip Hallam-Baker" initials="P. M." surname="Hallam-Baker">
<organization>Comodo Group Inc.</organization>
<address>
<email>philliph@comodo.com</email>
</address>
</author>
<date day="29" month="July" year="2013"/>
<area>General</area>
<workgroup/>
<keyword>RFC</keyword>
<keyword>Request For Comments</keyword>
<abstract>
<t>This memo presents a technique for using as subset HTML as a source format for documents in the Internet-Drafts (I-Ds) and Request for Comments (RFC) series. The HTML subset provides equivalent functionality to the traditional XML2RFC tool but is designed for ease of use with readily available editing tools.</t>
<t>Extensions to the HTML markup allow the use of external bibliography files to manage citations and references in the manner of BibTeX. Planned extensions include building concordances of defined terms and normative language.</t>
</abstract>
</front>
<middle>
<section title="Why a New Format is Needed." anchor="Section_1">
<t>One of the more difficult aspects of working in the IETF is producing Internet Drafts that comply with the IETF formating criteria originally developed in the age of valve tube machines.</t>
<t>HTML2RFC is a HTML microformat for Internet Drafts (and RFCs). Documents written in the HTML2RFC microformat may be converted to a variety of target formats that currently include Internet Draft Plaintext [RFC2223], XML2RFC [RFC2629] and HTML in the IETF presentation stylesheet.</t>
<t>While existing tools enable the generation of documents in Internet Draft format, none provide the features necessary to allow the document editor to focus on the task of editing text rather than dealling with the distraction of producing text in the obligated format.</t>
<t>One area in which all recent document formats fall short is in the management of references in citations. While the online citation libraries introduced in XML2RFC are exceptionally useful, accessing them though XML entities or cut-and-paste of the citation sources is tedious and error prone. Patashnik and Lamport demonstrated a much superior system in 1985 in BibTeX.[BibTeX].</t>
<section title="Why Existing Tools Fail" anchor="Section_1_1">
<t>[RFC2629] which describes the XML2RFC tool was published in 1999, a time when XML was the document format of the future. Although advanced XML editing tools were expensive with poor usuability, this deficiency was expected to be resolved in the very near future. [RFC2629] did not make editing Internet Drafts easy but it was better than the available alternatives and made it possible to produce documents in both the plaintext format required for Internet Draft subissions and readable formats such as HTML.</t>
<t>Almost fifteen years later, XML document authoring tools are still expensive and none of the many tools the author has tried offers more than a modest improvement over editing XML source by hand. The tools merely make it a little easier to enter XML tags. The author is still required to remember the many idiosyncracies of the XML2RFC DTD which uses a mixture of case conventions (hangText vs texttable) and oddly chosen tag and attribute names. The only consistency in the design of the DTD is that it follows none of the conventions established in HTML. Even the paragraph tag is inexplicably labelled &lt;t&gt;.</t>
<t>Another area in which use of [RFC2629] is unsatisfactory is in the handling of citatitions and references. While the online library of references is certainly very useful, making use of it in a document is fiddly and time consuming. Citations must be managed in three separate parts of the document. Entity declarations linking to the external reference declarations are inserted at the top of the file while the citation is added to the end of the file. To create a reference to the citation in the body of the text we must create a crosslink to the anchor defined inside the external reference which may or may not be the same as the entity name defining the reference.</t>
<t>The method of handling references makes it difficult to prepare documents in offline environments (e.g. a plane) and can cause editing tools that attempt DTD validation to behave slowly or unpredictably as attempts are made to retrieve the external content while the file is being edited.</t>
</section>
<section title="Why HTML is Better" anchor="Section_1_2">
<t>One of the principal reasons that HTML has become the most widely used document markup format is that the basic structure markup is very simple and can be learned in a few minutes. Virtually every modern text editor offers at least the ability to generate HTML as an output markup. A wide range of HTML editing tools is available for every modern computing platform. Many of the best tools are free.</t>
<t>While entering HTML tags is easy, editing or reviewing text that is cluttered with markup tags is unnecessarily tedious and error prone. Editing a document describing a XML protocol in raw XML source form is particularly error prone as every occurrence of an XML markup character must be escaped, often rendering the text almost unreadable. Many HTML editors allow the editor to view source and formatted views of their document side by side or quickly switch from one to the other. This is much more efficient than trying to edit XML that is converted into readable text by a stylesheet.</t>
<t>The original HTML 2.0 markup described in [RFC1866] was intended to provide a means of describing the document structure. The most recent edition, HTML 5 [W3C-CR-html5-20121217] is considerably more complicated, offering a melange of structure, format, style and scripting features. Fortunately almost all the requirements of HTML2RFC are met by features of the original HTML 2.0 markup that have not been updated or obsoleted since.</t>
</section>
<section title="The Need to Combine XML2RFC and BibTeX Reference Management" anchor="Section_1_3">
<t>One of the key innovations introduced in [BibTeX] was the ability to separate the tasks of document editing and bibliography management. Once compiled, a bibliography could be shared between multiple documents or even multiple users. It is not uncommon for a good bibliography file to be shared by whole university departments.</t>
<t>The reference management feature of xml2rfc also provides considerable advantages over previous approaches. The online library of reference descriptions is maintained by automatic tools eliminating the need to enter most entries manually. While the xml.resoure.org repository hardly exhaustive it is rare that an Internet Draft contains more than one or two citations that are outside its scope.</t>
<t>The major drawback to the xml2rfc approach is that the online tool fails completely when editing documents in offline mode. Authors can maintain a local cache of references they use in their own documents but they must develop the necessary tools to do so themselves.</t>
<t>HTML2RFC combines the advantages of the BibTeX and xml2rfc approaches. The string [!RFC1149] within the text declares a normative reference to RFC1149 while [~RFC1149] declares an informative reference. The HTML2RFC tool attempts to resolve references by consulting a local bibliography file. Unresolved references are then resolved through a set of (extensible) rules and (optionally) appended to one or more of the user's personal bibliography files. For example, citation labels that begin with the prefix 'RFC' may be resolved by a HTTP query to the xml.resource.org repository.</t>
</section>
</section>
<section title="Document Markup" anchor="Section_2">
<t>* Basics - elements are defined by tags, </t>
<t>* Elements may have attributes but these are used sparingly. In particular HTML markup conventions require that text which is normally displayed to the user be entered as element content rather than as attributes.</t>
<t>* character entities are used to escape the markup characters</t>
<t>* Except in the &lt;pre&gt; element, multiple spaces are collapsed to single spaces. To prevent whitespace folding, use the &amp;nbsp; tag.</t>
<t>* Every HTML document must contain the following elements:</t>
<figure>
<artwork>
<![CDATA[<?xml ?>
<html>
  <head>
    <title>The document title (displayed in the window frame)</title>
  <body>

    <!-- Document text goes inside here -->

  </body>
</html>]]></artwork>
</figure>
<t>Although the HTML markup requires that a &lt;title&gt; element be present, the term title is understood to be text to be shown in 'title bar' of the window frame in which the document is displayed. HTML2RFC uses the first &lt;h1&gt; tag in the document to display the title instead as this is guaranteed to be displayed prominently in a HTML text editor while many do not bother to show the &lt;title&gt; element contents at all.</t>
<t>Following the convention established by xml2rfc, HTML2RFC divides the RFC content into front, middle and back sections. These are delimited by &lt;h1&gt; heading elements as follows:</t>
<t><list style="hanging">
<t hangText="Front">The front matter begins with the first &lt;h1&gt; element and ends at the second &lt;h1&gt; element.</t>
<t hangText="Middle">The middle matter begins with the second &lt;h1&gt; element and ends at the first &lt;h1&gt; element with a heading that begins with the string 'Appendix:'.</t>
<t hangText="Back">The back matter begins with he first &lt;h1&gt; element with a heading that begins with the string 'Appendix:' and runs to the end of the document.</t>
</list></t>
<t>It is not necessary to create sectionsfor References or Authors' Addresses, these will be included and given appropriate titles as necessary. The outline of an HTML2RFC document is therefore:</t>
<figure>
<artwork>
<![CDATA[<?xml ?>
<html>
  <head>
    <title>The document title (displayed in the window frame)</title>
  <body>
    <h1>Document Title</h1>            <!-- Start of Front Matter -->
      <!- Document abstract, metadata and author details go here -->
      <p>First paragraph of document abstract</p>
      <p>Second paragraph of document abstract</p>
    <h1>First section</h1>            <!-- Start of Middle Matter -->
      <p>First paragraph</p>
    <h1>First section</h1>
    <h1>Second section</h1>
    <h1>Appendix:First appendix</h1>
    <h1>Second appendix</h1>
  </body>
</html>]]></artwork>
</figure>
<t>Document structure in HTML is infered from the placement of heading elements. This approach is considerably easier to manage and less error prone than the xml2rfc approach which requires the author to correctly mark the beginning and the end of each section.</t>
</section>
<section title="Document Text" anchor="Section_3">
<t>HTML2RFC uses only the core HTML markup designed for declaring document structure: &lt;h1&gt; ... &lt;h6&gt;, &lt;p&gt;, &lt;pre&gt;, &lt;ul&gt;, &lt;ol&gt;, &lt;dl&gt;, &lt;li&gt;, &lt;dt&gt;, &lt;dd&gt;, &lt;table&gt;, &lt;th&gt;, &lt;tr&gt;, &lt;th&gt;, &lt;td&gt;.</t>
<t>Only the id attribute is currently recognized, all other attributes are discarded or overwritten.</t>
<texttable >
<ttcol>Markup</ttcol>
<ttcol>Status</ttcol>
<ttcol>Attributes</ttcol>
<ttcol>Description</ttcol>
<c>&lt;html&gt;, &lt;head&gt;, &lt;title&gt;, &lt;body&gt;</c>
<c> </c>
<c> </c>
<c>Necessary for well formed HTML</c>
<c> &lt;h1&gt;, &lt;h2, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt;</c>
<c> </c>
<c>id</c>
<c>Title / Section Headings</c>
<c>&lt;p&gt;</c>
<c> </c>
<c>id</c>
<c>Paragraph</c>
<c>&lt;pre&gt;</c>
<c> </c>
<c>id</c>
<c>Preformatted text (e.g. code, examples)</c>
<c>&lt;ol&gt;, &lt;ul&gt;, &lt;li&gt;</c>
<c> </c>
<c>id</c>
<c>Bulleted and numbered lists</c>
<c>&lt;dl&gt;, &lt;dt&gt;, &lt;dd&gt;</c>
<c> </c>
<c>id</c>
<c>Definition lists</c>
<c>&lt;table&gt;, &lt;tr&gt;, &lt;th&gt;, &lt;td&gt;, &lt;caption&gt;*</c>
<c> </c>
<c>id, width*, align*</c>
<c>Tables</c>
<c>&lt;a&gt;</c>
<c>*</c>
<c> </c>
<c>Internal / External document links</c>
<c>&lt;span&gt;</c>
<c>*</c>
<c> </c>
<c>Mark boundaries of normative text</c>
<c>&lt;dfn&gt;</c>
<c>*</c>
<c> </c>
<c>Declare a defined term</c>
<c>&lt;em&gt;</c>
<c>*</c>
<c> </c>
<c>Reference a defined term</c>
<c>&lt;?include?&gt;</c>
<c> </c>
<c>file, format</c>
<c>Include text from external file</c>
<c>&lt;?bibliography?&gt;</c>
<c> </c>
<c>file, format, cache</c>
<c>Use the specified bibliography</c>
<c>&lt;?bibsource?&gt;</c>
<c>*</c>
<c>prefix, pattern</c>
<c>Use the specified bibliography resolution source</c>
<c>&lt;?stylesheet?&gt;</c>
<c>*</c>
<c> </c>
<c>Specify a style sheet to include</c>
<c>[label]</c>
<c> </c>
<c> </c>
<c>Normative reference</c>
<c>[label]</c>
<c> </c>
<c> </c>
<c>Informative reference</c>
<c>[</c>
<c> </c>
<c> </c>
<c>Left square brace</c>
</texttable >
<t>Although HTML provides most of the prinitives required to markup an RFC, it does not provide the necessary tags to markup the text that appears at the front of an Internet Draft, the author names, document type and other information that is presented in the masthead and opening section. This information is declared in HTML2RFC using a 'microformat' a stylized method of using HTML tags. </t>
<t>This section describes the use of standard HTML markup tags to define the document structure. The microformat is described in [Section ?] following. The use of the id attribute to create references to document sections is described in [Section ?]</t>
<section title="Headings" anchor="Section_3_1">
<t>The &lt;h1&gt;, &lt;h2, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt; elements specify section headings. The element content is the heading text. Document section and appendix numbers are added automatically.</t>
<t>The first and second &lt;h1&gt; element in the document are special. The first &lt;h1&gt; element specifies the title of the document and begins the document properties microformat section described below. The second &lt;h1&gt; element marks the end of the document properties microformat and the beginning of the document proper.</t>
<t>A &lt;h1&gt; element with heading text that begins with the string 'Appendix:' is an appendix heading. Once one appendix heading is encountered in a document, all the following &lt;h1&gt; elements are interpreted as appendix headings whether they begin with the string 'Appendix:' or not.</t>
</section>
<section title="Paragraphs" anchor="Section_3_2">
<t>The &lt;p&gt; and &lt;pre&gt; elements specify paragraphs. &lt;p&gt; elements specify ordinary paragraphs that will be formatted by the processing tool while the &lt;pre&gt; element is used for preformatted text such as code examples where spaces must be preserved.</t>
</section>
<section title="Lists" anchor="Section_3_3">
<t>The &lt;ul&gt; element specifies an unordered list (aka bullet point). Each list item is specified by a list item &lt;li&gt; element:</t>
<figure>
<artwork>
<![CDATA[<ul>
  <li>A list item</li>
  <li>Another list item</li>
  <li>Yet another list item</li>
</ul>]]></artwork>
</figure>
<t>To create an ordered list (aka numbered), the &lt;ol&gt; element is used instead:</t>
<figure>
<artwork>
<![CDATA[<ol>
  <li>This list item will be number 1</li>
  <li>This list item will be number 2</li>
  <li>This list item will be number 3</li>
</ol>]]></artwork>
</figure>
<t>Definition list &lt;dl&gt; elements contain lists of defined term &lt;dt&gt; and defined data &lt;dd&gt; tags. Although the formatting of &lt;dt&gt; and &lt;dd&gt; elements strongly sugests that they are pairs, HTML permits them to appear in any order.</t>
<figure>
<artwork>
<![CDATA[<dl>
  <dt>Defined Term #1</dt>
  <dd>Definition of term #1</dd>
  <dt>Defined Term #2</dt>
  <dd>Definition of term #2</dd> 
</dl>]]></artwork>
</figure>
<t>Lists may be nested in lists to create a hierachy. The inner list type may be the same as the type of the enclosing list or a different type.</t>
</section>
<section title="Tables" anchor="Section_3_4">
<t>Due to the need to support conversion to IETF Plaintext and xml2rfc formats, the html2rfc table model is considerably simpler than the html model. The colspan and rowspan attributes are ignored and the width attribute is currently unimplemented.</t>
<t>The &lt;table&gt; element specifies a table. A table element may contain only &lt;tr&gt; and &lt;caption&gt; elements. Each &lt;tr&gt; element specfies a row of the table. The optional &lt;caption&gt; element specifies a title for the table. The &lt;caption&gt; element is only permitted as the first and/or last element in the list:</t>
<figure>
<artwork>
<![CDATA[<table>
  <caption>Table title</caption>
  <tr> .. .. .. </tr>
  <tr> .. .. .. </tr>
  <tr> .. .. .. </tr>
  <tr> .. .. .. </tr>
  <caption>Table title</caption>
</table>]]></artwork>
</figure>
<t>Table cells are specified using the &lt;th&gt; or &lt;td&gt; elements. &lt;th&gt; elements specify heading cells, &lt;td&gt; elements specify cells in the body of the table. If the first row of a table contains at least one &lt;th&gt; cell, the header will be repeated at the head of each page if the table is split across pages. Note that while the formatting tool may split a table so that different rows are presented on different pages, a page boundary will not be placed in the middle of a row unless the cell is too long to present any other way.</t>
</section>
</section>
<section title="Document Properties Microformat." anchor="Microformat">
<t>The document properties are specified in the front matter which begins with the first &lt;h1&gt; heading and ends with the second &lt;h1&gt; heading. </t>
<t>The only HTML elements permitted within the front matter are &lt;p&gt;, &lt;dl&gt;, &lt;dt&gt; and &lt;dd&gt;. All other tags are ignored but may raise warnings.</t>
<section title="Abstract" anchor="Section_4_1">
<t>The document abstract is specified using &lt;p&gt; elements. &lt;p&gt; elements that are empty or only contain whitespace are ignored. All other &lt;p&gt; elements specify a paragraph of the abstract. Since Internet Drafts are required to provide an abstract, at least one &lt;p&gt; element that contains text is required.</t>
</section>
<section title="Document Properties" anchor="Section_4_2">
<t>Document properties are tag value pairs specified using a definition list &lt;dl&gt; element. Each &lt;dt&gt; element specifies a tag and each &lt;dd&gt; element a value. Some document properties permit a list of values to be specified. A document can only have one file name but it can have multiple keywords. When there are multiple values for the same property, it is only necessary to specify the tag once as successive &lt;dd&gt; elements specify values for the tag specified in the last &lt;dt&gt; element encountered.</t>
<t>The document properties for this document are specified as follows:</t>
<figure>
<artwork>
<![CDATA[<dl>
  <dt>Abrrev</dt>     <dd>Writing I-Ds using HTML</dd> 
  <dt>Docname</dt>    <dd>draft-hallambaker-html2rfc</dd> 
  <dt>Version</dt>    <dd>00</dd> 
  <dt>Area</dt>       <dd>General</dd> 
  <dt>Keyword</dt>    <dd>RFC</dd> 
                      <dd>Request For Comments</dd> 
  <dt>IPR</dt>        <dd>trust200902</dd> 
  <dt>Category</dt>   <dd>std</dd>
</dl>]]></artwork>
</figure>
<t>The document properties have been formatted in tabular form to help comprehension but this is not necessary.</t>
<t>Each document property is specified by means of a case insensitive tag. In most cases the document property tag is the same as the corresponding xml2rfc element or attribute. Although most authors are likely to need to consult the documentation when specifying document properties, this is considered to be acceptable as the need to add properties to an existing document is relatively infrequent.</t>
<texttable >
<ttcol>Tag</ttcol>
<ttcol>Description</ttcol>
<ttcol>Values</ttcol>
<c>abbrev</c>
<c>Abreviated document title for page headers</c>
<c> </c>
<c>docname</c>
<c>Document filename (excluding version)</c>
<c> </c>
<c>version</c>
<c>Document version number</c>
<c>00..99</c>
<c>year</c>
<c>Publication year</c>
<c> </c>
<c>month</c>
<c>Publication month</c>
<c> </c>
<c>day</c>
<c>Publication day</c>
<c> </c>
<c>ipr</c>
<c>Intellectual Property Rights</c>
<c>See below</c>
<c>area</c>
<c>IETF area</c>
<c> </c>
<c>workgroup</c>
<c>IETF working group</c>
<c> </c>
<c>number</c>
<c>Sepcifies an RFC number</c>
<c> </c>
<c>category</c>
<c>e.g. Standards track</c>
<c>See below</c>
<c>updates</c>
<c>Number of an RFC updated by this RFC</c>
<c> </c>
<c>obsoletes</c>
<c>Number of an RFC made obsolete by this RFC</c>
<c> </c>
<c>seriesno</c>
<c>e.g. BCP 42, STD 69</c>
<c> </c>
</texttable >
<section title="IPR Values" anchor="Section_4_2_1">
<t>The IPR property specifies a label which will eventually identify a set of boilerplate text that can be imported from an external file. This will avoid the need for users to update their document authoring tools in response to changes in IETF policy.</t>
</section>
<section title="Category" anchor="Section_4_2_2">
<t>[TBS]</t>
</section>
</section>
<section title="Authors" anchor="Section_4_3">
<t>Authors are specified in the same way as the document properties. The author properties are specified as follows:</t>
<texttable >
<ttcol>Tag</ttcol>
<ttcol>Description</ttcol>
<c>author</c>
<c>Start new author and specify full name</c>
<c>surname</c>
<c>Author surname</c>
<c>initials</c>
<c>Author initials</c>
<c>organization</c>
<c>Organization</c>
<c>street</c>
<c>Postal address street</c>
<c>city</c>
<c>Postal address city</c>
<c>code</c>
<c>Postal address post code</c>
<c>country</c>
<c>Postal address country</c>
<c>phone</c>
<c>Telephone number</c>
<c>email</c>
<c>Email address</c>
<c>uri</c>
<c>Web site</c>
</texttable >
<t>In practice the Author, surname, initials, organization and email are usually sufficient. </t>
</section>
</section>
<section title="Advanced Markup." anchor="Section_5">
<t>In addition to making existing document editing tasks easier, HTML2RFC adds several new features to make maintaining a standards document easier:</t>
<t><list style="symbols">
<t>Documents may be split into multiple files facilitating use of automatically generated content.</t>
<t>Citations specified in the body of the text are detected automatically and resolved to generate the necessary references.</t>
<t>Concodances of defined terms and normative text may be generated.</t>
</list></t>
<section title="Including Text From External Sources." anchor="Section_5_1">
<section title="&lt;?Include?&gt; Processing Directive" anchor="Section_5_1_1">
<t>The &lt;?include?&gt; Processing directive is used to include text from an external source. The directive takes two attributes:</t>
<t><list style="hanging">
<t hangText="file">The file name</t>
<t hangText="format">The file format, xml or txt</t>
</list></t>
<t>The text from the included document is inserted at the current position in the file</t>
<t>In the following example, the text for Sections four and five are inserted from an external file.</t>
<figure>
<artwork>
<![CDATA[<h1>Section Three</h1>
<?include file="generated.xml" format="xml"?>
<h1>Section Six</h1>]]></artwork>
</figure>
<t>The include file processing directive is useful for combining sections of text that are either generated or verified by automatic tools.</t>
<t>The format parameter is intended to allow the processing tool to perform appropriate format conversion as the text is included. At present only XML fragments are supported.</t>
<t>Since the semantics of the processing directive are only understood by the document processing tools and are disregarded by text editors, a HTML2RFC document that includes &lt;?include?&gt; processing directives MUST be a well formed HTML document both before and after the external document is inserted.</t>
<t>One of the main advantages of moving from the XML2RFC model of specifying sections as nested XML elements to the HTML model of infering section boundaries from headings is that it makes the use of text from included files considerably more flexible.</t>
<t>The following format types are reserved for future use:</t>
<texttable >
<ttcol>Format</ttcol>
<ttcol>Use</ttcol>
<c>xml</c>
<c>XML document or fragment. The initial XML document declaration is ignored.</c>
<c>html</c>
<c>HTML document of fragment If the toplevel element is &lt;html&gt;, only the contents of the inner &lt;body&gt; element are incorporated.</c>
<c>code</c>
<c>Code in an unspecified programming language</c>
<c>ebnf</c>
<c>Extended Bacus Naur Form</c>
<c>json</c>
<c>JSON text example</c>
<c>asn1</c>
<c>ASN1 Schema</c>
<c>xsd</c>
<c>XML Schema</c>
<c>gdl</c>
<c>Goedel structure file</c>
<c>c</c>
<c>C programming language</c>
<c>cs</c>
<c>C#</c>
<c>java</c>
<c>Java</c>
<c>js</c>
<c>Javascript</c>
</texttable >
</section>
<section title="&lt;?stylesheet?&gt; Processing Directive" anchor="Section_5_1_2">
<t>The &lt;?stylesheet?&gt; processing directive takes the same file= attribute as the &lt;?include?&gt; directive except that the directive is only processed when generating HTML output in which case the included file MUST contain a CSS stylesheet and the text is copied to the output file directly to a &lt;style&gt; element in the HTML &lt;head&gt; element.</t>
</section>
</section>
<section title="References and Citations." anchor="Section_5_2">
<section title="Citations" anchor="Section_5_2_1">
<t>Citations in the body of the text are specified by means of a citation marker. The citation marker tells the document processor</t>
<t><list style="symbols">
<t>That a citation label is about to follow</t>
<t>That the citation is normative or informative</t>
<t>The label to be used to retrieve the corresponding reference from the bibliographic sources</t>
<t>(optional) The preferred citation tag to use in the final text</t>
</list></t>
<t>Each reference is identified by means of a text label. For convenience the documents commonly referenced in IETF specifications have compact predfined labels. For example, [RFC822] has the label RFC822.</t>
<t>Citation markers have the following forms:</t>
<t><list style="hanging">
<t hangText="[!label]">Normative reference to the reference 'label' to be presented as [label] in the final text.</t>
<t hangText="[!label/tag]">Normative reference to the reference 'label' to be presented as [tag] in the final text.</t>
<t hangText="[~label]">Informative reference to the reference 'label' to be presented as [label] in the final text.</t>
<t hangText="[~label/tag]">Informative reference to the reference 'label' to be presented as [tag] in the final text.</t>
</list></t>
<t>The document processing tool automatically resolves the citation labels to references and presents them as lists of normative and informative references.</t>
<t>If a document contains a normative and an informative reference to the same document, the reference is listed in the normative references section.</t>
</section>
<section title="Resolving Citation Labels" anchor="Section_5_2_2">
<t>Citation labels are resolved by consulting a bibliography file or bibliographic source. HTML2RFC documents may declare bibliography files and bibliographic sources by means of processing instructions. Document processing tools May consult additional built in bibliographic sources. The order of precedence for resolving bibliographic sources is:</t>
<t><list style="numbers">
<t>Bibliography files in the order they are declared in the source document</t>
<t>Bibliographic sources in the order they are declared in the source document</t>
<t>Bibliographic sources built in to the processing tool</t>
</list></t>
<t>Bibliography files are XML fragments that contain a list of xml2rfc &lt;reference&gt; elements, each of which defines a single reference. The &lt;?bibliography?&gt; processing instruction declares a bibliography file to be searched to resolve references. </t>
<t><list style="hanging">
<t hangText="file">The filename of the bibliography to be searched</t>
<t hangText="format">The format of the bibliography to be searched </t>
<t hangText="cached">If present, the document processor will append any references returned from one of the bibliographic sources to the end of the file at the end of document processing.</t>
</list></t>
<t>Use of the cached attribute allows references fetched from bibliographic souces to be saved for future use. </t>
<t>Rather than risk inserting new references into the middle of a file, the tool appends new reference entries to the end. Since the XML specification requires that an XML document only have one toplevel document, this means that the bibliography files are actually XML fragments rather than XML documents and some XML editing tools may present the user with tedious and unnecessary warnings.</t>
<t>The html2rfc tool has the following bibliographic sources built in:</t>
<texttable >
<ttcol>Prefix</ttcol>
<ttcol>Document Series</ttcol>
<ttcol>Example citation</ttcol>
<c>RFC</c>
<c>Request for Comments</c>
<c>RFC822</c>
<c>RFC-</c>
<c>Request for Comments (alternate style)</c>
<c>RFC-822</c>
<c>DRAFT-</c>
<c>Internet Draft</c>
<c>draft-hallambaker-html2rfc</c>
<c>W3C-</c>
<c>W3C recommendations</c>
<c>W3C.xkms</c>
<c>3GPP.</c>
<c>3GGP</c>
<c> </c>
<c>ANSI.</c>
<c>ANSI standards</c>
<c> </c>
<c>CCITT.</c>
<c>CCITT</c>
<c> </c>
<c>FIPS.</c>
<c>Federal Information Processing Standards</c>
<c> </c>
<c>IEEE.</c>
<c>Selected IEEE standards</c>
<c> </c>
<c>ISO.</c>
<c>Selected ISO standards</c>
<c> </c>
<c>ITU.</c>
<c>Selected ITU documents</c>
<c> </c>
<c>NIST.</c>
<c>Selected NIST documents</c>
<c> </c>
<c>OASIS.</c>
<c>Selected OASIS documents </c>
<c> </c>
<c>PKCS.</c>
<c>RSA Labs Public Key Cryptography Standards</c>
<c>PKCS.7.1993</c>
<c>X.</c>
<c>OSI document series </c>
<c>X.509.2000</c>
</texttable >
<t>One of the main objectives in designing a tool that can be used to produce documents for multiple standards development organizations is to encourage other organizations to maintain bibliographic source servers providing access to authoritative versions of the documents.</t>
</section>
<section title="&lt;?bibsource?&gt; Processing Directive" anchor="Section_5_2_3">
<t>The &lt;?bibsource?&gt; processing directive allows additional bibliographic sources to be defined. A bibliographic source is simply a Web server that responds to a GET request to fetch the content corresponding to a URI formed from the citation label by performing a set of predefined processing rules.</t>
<t>Users are not expected to need to use the &lt;?bibsource?&gt; processing directive as the html2rfc tool contains built in rules to access all the known bibliographic sources the tool is currently capable of reading.</t>
<t><list style="hanging">
<t hangText="prefix">d</t>
<t hangText="uri">A URI pattern to be expanded to form the URI to be used to attempt resolution of the reference.</t>
</list></t>
<t>A bibliographic source is only queried if the citation label matches the prefis specified. For example, a bibliographic source with the prefix 'RFC' will be queried to attempt resolution of the citation label RFC822 but not the label draft-hallambaker-htnl2rfc.</t>
<t>The uri attribute actually specifies a URI matching pattern. The URI matching pattern may contain one or two hash '#' characters.</t>
<t>If one hash character is specified, it is replaced by the portion of the citation label that follows the prefix. If the citation label is RFC822 and the prefix is 'RFC', a single hash character will be replaced by the string '822'.</t>
<t>Several of the bibliographic sources at xml.resource.org have filenames in which the document number of numbered documents are padded with preceeding zeros. While this maintains the correct collation order for directory listings and the like, the simple character susbstitution mechanism would break unless we remembered to use RFC0822 as the citation label.</t>
<t>More complicated substitution capabilities may be attempted by specifying a C# string formatting directive in between two hash marks. For example the matching specifier #d4# tells the processor to convert the portion of citation label following the prefix to an integer and then format the integer with preceeding zeros so that it is at least 4 characters in length.</t>
</section>
<section title="References to other document sections." anchor="Section_5_2_4">
<t>Cross references to other parts of a document are specified using the HTML id attribute and anchor &lt;a&gt; element.</t>
<t>The id attribute declares an anchor label within the current document. Anchor labels MUST NOT be declared more than once.</t>
<t>The processing tool automatically creates anchor labels for section headings that do not have an id attribute specified as follows:</t>
<texttable >
<ttcol>id</ttcol>
<ttcol>Use</ttcol>
<c>Section_&lt;n&gt;</c>
<c>Section heading </c>
<c>Section_&lt;n&gt;_&lt;n&gt;</c>
<c>Subsection  heading (etc.)</c>
<c>Appendix_&lt;a&gt;</c>
<c>Appendix heading</c>
<c>Appendix_&lt;a&gt;_&lt;d&gt; ... </c>
<c>Appendix subheading (etc.)</c>
<c>References</c>
<c> </c>
<c>References_Normative</c>
<c> </c>
<c>References_Informative</c>
<c> </c>
<c>Abstract</c>
<c> </c>
<c>Title</c>
<c> </c>
<c>Author_&lt;n&gt;</c>
<c>Author #n</c>
</texttable >
<t>The anchor element &lt;a&gt; creates a cross reference to the section identified by an anchor. The href attribute specifies the link target, in this case a URI document fragment identifier which is denoted by a hash character '#' followed by the anchor label.</t>
<t>If the content of the anchor element begins with the prefix [?, the entire contents of the anchor element will be replaced by a suitable cross reference text.</t>
<t>For example the following cross reference would be rendered as (see Section 4):</t>
<figure>
<artwork>
<![CDATA[(see <a href="#Section_4">[?Section]</a>]]></artwork>
</figure>
</section>
</section>
<section title="Concordance of Normative Language" anchor="Section_5_3">
<t>Tracking the use of normative language inside the text can take considerable effort in the later stages of standards development. The keywords MUST, SHOULD and MAY defined in [RFC2119] require particular actions to be taken when determining if a specification is ready to progress from RECOMMENDED to STANDARD status.</t>
<t>HTML2RFC processing tools can easily identify the occurrence of normative keywords but merely counting the number of MUST keywords and the pages on which they occur adds little value since the context of the requirement is lost. Heuristic approaches such as extracting the sentence in which the normative language occurs offers only a modest improvement in clarity.</t>
<t>The HTML &lt;span&gt; element MAY be used to specify the portion of text in which the normative language is used that is sufficient to identify the term in a concordance. If the &lt;span&gt; element specifies an id attribute, it specifies the label to be used to identify the normative requirement in the concordance.</t>
<t>For example, the normative language in the preceeding paragraph is marked as follows:</t>
<figure>
<artwork>
<![CDATA[<p><span id="MAY-SPAN">The HTML &lt;span&gt; element MAY be used to 
specify the portion of text in which the normative language is used 
that is sufficient to identify the term in a concordance.</span> 
If the &lt;span&gt; element specifies an id attribute, it specifies 
the label to be used to identify the normative requirement in 
the concordance.</p>]]></artwork>
</figure>
<t>The concordance of normative language would contain the following entry as a result:</t>
<t><list style="hanging">
<t hangText="[MAY-SPAN]">The HTML &lt;span&gt; element MAY be used to specify the portion of text in which the normative language is used that is sufficient to identify the term in a concordance.</t>
</list></t>
</section>
<section title="Concordance of Defined Terms." anchor="Section_5_4">
<t>The concordance of defined terms is generated in the same manner as the concordance of normative language except that the html &lt;dfn&gt; tag is used to specify the definition in the text.</t>
</section>
</section>
</middle>
<back>
<references title="Normative References">
<reference anchor="label">
<front>
<title>[Reference Not Found!]</title>
<date/>
</front>
</reference>
<reference anchor="W3C-CR-html5-20121217">
<front>
<title>[Reference Not Found!]</title>
<date/>
</front>
</reference>
<reference anchor="RFC2223">
<front>
<title>Instructions to RFC Authors</title>
<author fullname="Jon Postel" initials="J." surname="Postel">
<organization>USC/Information Sciences Institute</organization>
<address>
</address>
</author>
<author fullname="Joyce K. Reynolds" initials="J.K." surname="Reynolds">
<organization>USC/Information Sciences Institute</organization>
<address>
</address>
</author>
<date month="October" year="1997"/>
<keyword>RFC authors</keyword>
</front>
<seriesInfo name="RFC" value="2223"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc2223.txt" octets="37948"/>
<format type="XML" target="http://xml.resource.org/public/rfc/xml/rfc2223.xml" octets="37561"/>
</reference>
</references>
<references title="Informative References">
<reference anchor="RFC2119">
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname="Scott Bradner" initials="S." surname="Bradner">
<organization>Harvard University</organization>
<address>
</address>
</author>
<date month="March" year="1997"/>
<keyword>keyword</keyword>
</front>
<seriesInfo name="BCP" value="14"/>
<seriesInfo name="RFC" value="2119"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc2119.txt" octets="4723"/>
<format type="HTML" target="http://xml.resource.org/public/rfc/html/rfc2119.html" octets="17970"/>
<format type="XML" target="http://xml.resource.org/public/rfc/xml/rfc2119.xml" octets="5777"/>
</reference>
<reference anchor="RFC822">
<front>
<title>[Reference Not Found!]</title>
<date/>
</front>
</reference>
<reference anchor="RFC1866">
<front>
<title>Hypertext Markup Language - 2.0</title>
<author fullname="Tim Berners-Lee" initials="T." surname="Berners-Lee">
<organization>MIT Laboratory for Computer Science</organization>
<address>
</address>
</author>
<author fullname="Daniel W. Connolly" initials="D.W." surname="Connolly">
<organization>MIT Laboratory for Computer Science, W3 Consortium</organization>
<address>
</address>
</author>
<date month="November" year="1995"/>
</front>
<seriesInfo name="RFC" value="1866"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc1866.txt" octets="146904"/>
</reference>
<reference anchor="RFC2629">
<front>
<title>Writing I-Ds and RFCs using XML</title>
<author fullname="Marshall T. Rose" initials="M.T." surname="Rose">
<organization>Invisible Worlds, Inc.</organization>
<address>
</address>
</author>
<date month="June" year="1999"/>
<keyword>RFC</keyword>
<keyword>Request for Comments</keyword>
<keyword>I-D</keyword>
<keyword>Internet-Draft</keyword>
<keyword>XML</keyword>
<keyword>Extensible Markup Language</keyword>
</front>
<seriesInfo name="RFC" value="2629"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc2629.txt" octets="48677"/>
<format type="HTML" target="http://xml.resource.org/public/rfc/html/rfc2629.html" octets="72426"/>
<format type="XML" target="http://xml.resource.org/public/rfc/xml/rfc2629.xml" octets="53481"/>
</reference>
<reference anchor="ME-BIBTEX">
<front>
<title>BibTeXing</title>
<author fullname="Oren Patashnik" initials="O." surname="Patashnik">
<address>
</address>
</author>
<date day="8" month="February" year="1985"/>
</front>
<format type="PDF" target="http://mirror.unl.edu/ctan/biblio/bibtex/base/btxdoc.pdf"/>
</reference>
</references>
<section title="rfctool Command Line Tool" anchor="Appendix_Appendix A">
<t>rfctool is a command line tool that converts from the HTML2RFC subset of HTML to other document formats. At the time of writing these are:</t>
<t><list style="hanging">
<t hangText="html">HTML output formatted using a stylesheet that produces an IETF style masthead.</t>
<t hangText="txt">IETF Plaintext format at 58 lines per page and 72 characters per line and a formfeed between lines.</t>
<t hangText="xml">[~RFC2629] format to allow HTML2RFC documents to be shared with other authors.</t>
</list></t>
<t>The following commands are supported:</t>
<t><list style="hanging">
<t hangText="/about">Describe the rfctool tool</t>
<t hangText="[/html] &lt;input&gt; [/html &lt;htmlout&gt;] [/xml &lt;xmlout&gt;] [/txt &lt;txtout&gt;] [/lazy]">Read the file &lt;input&gt; as HTML2RFC source and produce the specified output format(s).</t>
<t hangText="/merge &lt;input&gt; &lt;output&gt; [/lazy]">Read the file &lt;input&gt;, perform processing of embedded &lt;?include?&gt; processing directives and write the result to the file &lt;output&gt;.</t>
</list></t>
<t>The default command is /html.</t>
<t>The /lazy option tells the tool to only process the input file if either the inpout file or the tool itself is newer than all the specified outputs. This option allows html2rfc to be used in build scripts without requiring unnecessary actions.</t>
<t>The /html command accepts the following options but these are not currently implemented:</t>
<t><list style="hanging">
<t hangText="/bib">Specify a bibliography file to be included</t>
<t hangText="/style">Specify a file to be incorporated into the HTML output as a stylesheet</t>
<t hangText="/w3c">Generate HTML output compliant with W3C formatting rules</t>
<t hangText="/boilerplate">Extract boilerplate text definitions from the specified file</t>
</list></t>
<t>The tool requires that the input file be strictly compliant with XML requirements but does not perform schema validation and simply ignores markup that it does not understand. The document outputs are (or should be) fully compliant with the HTML and/or XML2RFC DTDs.</t>
</section>
<section title="Features Not Implemented from XML2RFC" anchor="Appendix_Appendix B">
<t>The following xml2rfc features are not yet implemented due to lack of time:</t>
<t><list style="symbols">
<t>Table column widths. </t>
<t>Centered and right formatted table columns.</t>
<t>References to specific document sections.</t>
<t>Citation of external URL resources</t>
<t>Error handling does not identify source line where problem occurred.</t>
<t>Number ordered lists in the txt output.</t>
<t>Headers and footers in HTML output</t>
<t>Use of &lt;caption&gt; tag to generate captions for tables.</t>
</list></t>
<t>The following features were considered but not implemented due to lack of time</t>
<t><list style="symbols">
<t>Ability to create lists of normative language sorted into MUST / SHOULD / RECOMMENDED / MAY</t>
<t>Ability to specify definitions and defined terms and raise errors when defined terms have no definition</t>
<t>Ability to import code files and automatically translate into examples / schemas / etc.</t>
<t>Ability to read XML2RFC format</t>
<t>Ability to read back generated HTML (round trip)</t>
<t>Write out the list of errors into the HTML output as XML comments.</t>
<t>Add anchors into HTML output to show page transitions.</t>
<t>Lists of tables, figures</t>
</list></t>
<t>The following xml2rfc features are not implemented on account of diminishing returns:</t>
<t><list style="symbols">
<t>Ability to specify symbols other than * in lists </t>
<t>Use of letters rather than numbers in lists </t>
<t>Use of complicated formatting in lists. </t>
</list></t>
<t>The following features are intentionally omitted:</t>
<t><list style="symbols">
<t>Ability to chose whether to generate a ToC, depth etc. Every document needs a ToC.</t>
<t>Generating output in PDF: Use a tool like wkhtmltopdf instead.</t>
</list></t>
<t>The following are really just bugs:</t>
<t><list style="symbols">
<t>The tool does not support P tags nested inside LI, DT or DD elements as separate paragraph markers</t>
<t>No handling of &lt;BR&gt; tag</t>
</list></t>
</section>
</back>
</rfc>
