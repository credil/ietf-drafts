<?xml version='1.0' ?>
<!DOCTYPE rfc SYSTEM 'rfcXXXX.dtd'>
<rfc category="info" ipr="trust200902">

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>

<front>
	<title abbrev="Stateless RFC5444-DLEP">Stateless RFC5444-based Dynamic Link Exchange Protocol (DLEP)</title>

	<author initials='H.R.' surname='Rogge' fullname='Henning Rogge'>
		<organization>Fraunhofer FKIE</organization>

		<address>
			<postal>
				<street>Neuenahrer Strasse 20</street>
				<city>Wachtberg</city>
				<code>53343</code>
				<country>Germany</country>
			</postal>

			<phone>+49 228 9435-961</phone>
			<email>henning.rogge@fkie.fraunhofer.de</email>
			<uri>http://fkie.fraunhofer.de/</uri>
		</address>
	</author>

	<date month='November' year='2012' />

	<area>Routing</area>
	<workgroup>Mobile Ad-hoc Networks</workgroup>
	<keyword>RFC</keyword>
	<keyword>Request for Comments</keyword>
	<keyword>I-D</keyword>
	<keyword>Internet-Draft</keyword>
	<keyword>DLEP</keyword>
	<keyword>RFC5444</keyword>
	<keyword>Stateless</keyword>
	<abstract>
<t>This document provides material for the discussion in the MANET WG about the Dynamic Link Exchange Protocol (DLEP). This document reflects the authors' thoughts about how a stateless DLEP protocol compliant with RFC5444 could look like.</t>
	</abstract>
</front>
<middle>





	<section title='Introduction'>
<t>This document is not intented to go forward on its own, but provides input for the discussion in the MANET WG about DLEP, in particular for (1) allowing to use preexisting RFC5444 parsers and generators with DLEP, and (2) to simplify the protocol by proposing a "stateless" protocol specification of DLEP. It is the opinion of the author of this document that delivering this input for the discussion may help to clarify some proposals that have been made on the MANET mailing list.</t>

<t>Dynamic Link Exchange Protocol (DLEP, as defined in <xref target='dlep02'/>) is a proposal for a cross-layer protocol between a layer-2 entity like a radio and a layer-3 router to transport layer-2 metric, statistic and status data from the radio to the router. In addition, it allows the router to control and configure aspects of the radio, such as radio status, channel or link speed.</t>

<t>DLEP does not communicate via radio links, it is only used locally. Therefore DLEP does not need to focus on payload efficiency as other protocols of the MANET working group.</t>			

<t>A DLEP-capable radio works as a transparent bridge for the data-plane. DLEP is used to transport meta-information like link metrics, detected neighbors and configuration options between radio and router via a separate control plane.</t>

<t>This document does not discuss the Link Characteristic configuration and Credit Granting parts of <xref target="dlep02"/>, it rather concentrates on a <xref target="RFC5444"/> compatible packet format, so a standard compliant generic parser/generator code can be used for this.</t>
   
<t>Instead of copying the functionality of the <xref target="dlep02"/> state machine and session handling, this document tries to reproduce the functionality with a stateless design similar to the mechanisms in <xref target="RFC6130"/> and <xref target="olsrv2"/>.</t>

<t>If this aproach is adopted by the Working Group, parts of this document could be folded back into the draft-ietf-manet-dlep.</t>
	</section>

	
	
	
	
	<section anchor="terminology" title="Terminology">
<t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT','SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
<t>The terminology introduced in <xref target="RFC5444"/> and <xref target="RFC5497"/>, including the terms "packet", "message", "Address Block", "TLV Block","TLV", "address", "address prefix", and "address object" are to be interpreted as described therein.</t>
<t>Additionally, this document uses the following terminology and notational conventions:

		<list style="hanging">
			<t hangText="Order"> - This specification uses a single <xref target="RFC5444"/> Message Type to transmit several different kinds of information. The Order of the Message specifies the type of information that is contained in the Message.</t>
			<t hangText="DLEP-router"> - a router which runs DLEP, also called Server in <xref target="dlep02"/>.</t>
			<t hangText="DLEP-radio"> - a radio (or modem) which runs DLEP with one or more external layer-2 interfaces (e.g. WLAN interfaces). It also has a connection to attach a DLEP-router. A DLEP-radio is also called Client in <xref target="dlep02"/>.</t>
			<t hangText="Radio Interface"> - an external interface of a DLEP-radio.</t>
			<t hangText="Radio Interface ID"> - an unique 6 octet identifier for an radio interface of a DLEP-radio has. A DLEP-radio MAY use MAC-addresses as interface IDs. There MAY be special IDs for defining the receiving part of a multicast or broadcast transmission.</t>
			<t hangText="Destination"> - A MAC-address of a device attached a DLEP-radio that can be reached through the radio interface of the DLEP-radio. This can be a unicast, multicast or broadcast MAC.</t>
			<t hangText="Neighbor"> - A Destination that can be reached through a remote radio interface.</t>
			<t hangText="Network"> - In the context of this document, a network is a group of layer-2 radio devices talking to each other.</t>
		</list></t>
	</section>





	<section title="Assumptions">
<t>This protocol keeps most assumptions as defined in <xref target="dlep02"/>.</t>

<t><xref target="dlep02"/> and this specification assume that participating DLEP-radios appear to the DLEP-routers as a transparent bridge - specifically, the assumption is that the destination MAC address for data-plane traffic in any frame emitted by the DLEP-router should be the MAC address of the next-hop router or end-device, and not the MAC address of any of the intervening devices (like DLEP-radios).</t>

<t><xref target="dlep02"/> and this specification assume that security on the protocol (e.g. authentication of DLEP-radio/router, encryption of data- and/or control-plane traffic) is dealt with by the underlying transport mechanism for the <xref target="RFC5444"/> packets. As an alternative this specification would suggest using the signature support for <xref target="RFC5444"/> itself (as defined in <xref target="RFC6622"/>).</t>

<t><xref target="dlep02"/> and this specification assume that the DLEP-radios will be only connected to a single DLEP-router, not multiple devices. It might be investigate if this assumption can be relaxed later.</t>

<t>This specification assumes that the DLEP-radio is capable to determine the Radio Interface IDs of the other side of the radio communication from the Ethernet destination MAC-address of packets incoming from the local DLEP-router. It also assumes that a DLEP-radio is capable to determine the source MAC-address of packets incoming through the DLEP-radios interface.</t>

<t>This specification assumes that the control-plane of the DLEP-radio, which is used by this protocol, is separated by the data-plane from each other by some mechanism. Protocol traffic between DLEP-router and DLEP-radio will not interfere with data forwarded by the radio.</t>
	</section>





	<section title="Protocol Overview and Functioning">
		<t>The objectives of this protocol are for each DLEP-radio to:
		<list style="symbols">
			<t>Announce its presence to the attached DLEP-router.</t>
			<t>Provide each DLEP-router with Neighbor information present in its radio.</t>
			<t>Provide each DLEP-router with network metrics and statistics.</t>
			<t>Provide each DLEP-router with Neighbor radio link metrics and statistics.</t>
		</list></t>

		<t>The objectives of this protocol are for each DLEP-router to:
		<list style="symbols">
			<t>Automatically discover the presence of DLEP-radio interfaces in the local network.</t>
			<t>Get a list of all known Neighbors of each DLEP-radio interface.</t>
			<t>Get a list of network metrics and statistics.</t>
			<t>Get a list of Neighbor metrics and statistics.</t>
			<t>Being able to configure the radios local interface.</t>
		</list></t>

		<section title="Routers and Radios">
<t>This specification describes two different kinds of protocol instances, DLEP-radios and DLEP-routers.</t>

			<figure anchor='fig_dlep_scenario'>
				<artwork>
                             +--------+
                       ^     | DLEP   |
                       |     | router |
                       |     +--------+
                     DLEP        |
                       |     +--------+
                       |     | DLEP   |
                       V     | radio  |
                             +--------+
                                 |
                                 |
                            ------------
                           /            \
+--------+     +-------+  |              |  +-------+     +--------+
| DLEP   |     | DLEP  |  |    Radio     |  | DLEP  |     | DLEP   |
| router |-----| radio |--|              |--| radio |-----| router |
+--------+     +-------+  |    Network   |  +-------+     +--------+
                          |              |
    &lt;==== DLEP ====&gt;       \            /      &lt;==== DLEP ====&gt;
                            ------------
				</artwork>
				<postamble>Example of a radio network with three DLEP-radios and -routers.</postamble>
			</figure>
<t>DLEP-radios are typically data-link layer forwarding devices. These devices are connected to a local router via a short distance and high speed link, often an Ethernet connection. They contain enough resources to provide extra services to the router, and they are often embedded computer systems on their own.</t>

<t>DLEP-radios should split the connection between radio and router into separate control- and data-planes, to be able to bridge the data-plane directly to a radio interface without being influenced by the protocol traffic between DLEP-radio and the DLEP-router on the control-plane.</t>

<t>DLEP-routers can detect and configure DLEP-radios via the described protocol. The router can use the protocol to gather interface and Neighbor information and access link-layer metrics and statistics in a hardware independent way, even with the radio hardware not built into the router.</t>
		</section>

		<section title="Information Base Overview">
<t>Both DLEP-radio and DLEP-router maintain the protocol state using Information Bases, described in the following section. Each Information Base consists of a number of Protocol Sets. Each Protocol Set contains a number of Protocol Tuples.</t>

<t>An implementation of this protocol may maintain this information in the indicated form, or in any other organization that offers access to this information. In particular, note that it is not necessary to remove Protocol Tuples from Protocol Sets at the exact time indicated, only to behave as if the Protocol Tuples were removed at that time.</t>

<t>The Local Radio Information Base is maintained in the DLEP-radio and included in Interface Update and Neighbor Update Orders to the DLEP-router. Information in the Network Information Base on the DLEP-router is determined by received Interface Update and Neighbor Update Orders from the DLEP-radio. Such information has a limited duration in which it is considered valid. This duration is determined from the VALIDITY_TIME TLV in the Order in which the information is received, which in turn is set by the DLEP-radio that originated the Order, using its corresponding DLEP-radio parameter INTERFACE_UPDATE_HOLD_TIME and NEIGHBOR_UPDATE_HOLD_TIME.</t>

<t>The Local Router Information Base is maintained in the DLEP-router and included in Setup Radio and Setup Destination Orders to the DLEP-radio. Information in the Configuration Information Base on the DLEP-radio originates from Setup Radio and Setup Destination Orders from the DLEP-router. Such information has a limited duration in which it is considered valid. This duration is determined from the VALIDITY_TIME TLV in the both Orders in which the information is received, which in turn is set by the DLEP-router that originated the Orders, using its corresponding DLEP-router parameter SETUP_RADIO_HOLD_TIME and SETUP_DESTINATION_HOLD_TIME.</t>

<t>Information in the Configuration Information Base on the DLEP-radio is included in the Local Destination Order to the DLEP-router. Such information has a limited duration in which it is considered valid. This duration is determined from the VALIDITY_TIME TLV in the Local Destination Order in which the information is received, which in turn is set by the DLEP-router that originated the Local Destination Order, using its corresponding DLEP-radio parameter LOCAL_DESTINATION_HOLD_TIME.</t>
		</section>

		<section title="Signaling Overview">
<t>This protocol contains a signaling mechanism for maintaining the Configuration Information Base and the Network Information Base.</t>

			<section title="Automatic Radio Interface Discovery">
<t>As in <xref target="dlep02"/>, this specification contains an automatic discovery mechanism, that allows a DLEP-router to detect the presence of one or multiple DLEP-radio interfaces.</t>

<t>To enable the DLEP-router to do this, this specification uses a single Order, the Interface Update Order.</t>

<t>This Order combines the Peer Discovery, Peer Offer, Peer Update (ACK), Peer Termination (ACK), and Heartbeat messages of <xref target="dlep02"/>. Because of a validity time based mechanism, this obsoletes the internal state machine of <xref target="dlep02"/>.</t>

<t>For the content of the Interface Update Order, see <xref target="if_updates"/></t>
			</section>

			<section title="Setup Radio">
<t>This specification allows the DLEP-router to configure DLEP-radio interface settings. In this document, there are two Orders to configure the DLEP-radio, the Setup Radio Order and the Setup Destination Order.</t>

<t>The Setup Radio Order allows the DLEP-router to set the status of the DLEP-radio interface to UP or DOWN.</t>

<t>The Setup Destination Order adds a local Destination to a DLEP-radio interface, with IP-prefixes attached to this Destination (if known). This data is used by some radios to transport the MAC-address and IP prefixes of their attached Destinations to each other within the layer-2 protocol, to avoid an Address Resolution Protocol (ARP) exchange over the radio.</t>
			</section>

			<section anchor="if_updates" title="Interface Updates">
<t>DLEP-radios transmit a list of its interfaces and data about the interface's status, description and network metrics and statistics with the Interface Update Order.</t>

<t>The Order contains the Radio Interface ID that is described in the Order, the status of the interface (up or down) and an optional textual description of this radios interface (e.g. Company XYZ Software Defined Radio ABC line 1). It also contains interface specific metrics and statistics.</t>

<t>This data will be sent by DLEP-radios in regular intervals, at least once every INTERFACE_UPDATE_INTERVAL.</t>
			</section>

			<section title="Local Destinations">
<t>DLEP-radios transmit the currently configured Destination of the local router back to the router to acknowledge the configuration with the Local Destination Order.</t>

<t>The Order contains the MAC-address of the locally configured Destination, the its local Radio Interface ID and the IP-prefixes of the Destination (if known).</t>

<t>This data will be sent by DLEP-radios in Local Destination Orders in regular intervals, at least once every LOCAL_DESTINATION_INTERVAL.</t>
			</section>

			<section title="Neighbor Updates">
<t>Modern IP-capable radios are able to collect lots of PHY- and link-layer data about their connections to other radios in range and the Destinations behind them.</t>

<t>The Neighbor Update Order contains the known configuration (MAC- and IP-addresses), status and attributes (e.g. link statistics and metrics) of a radio connection between the local DLEP-radio interface and a Neighbor.</t>

<t>This data will be sent by DLEP-radios in Neighbor Update Orders in regular intervals, at least once every NEIGHBOR_UPDATE_INTERVAL.</t>
			</section>
		</section>
	</section>

	<section title="Protocol Parameters">
		<section title="Port Number and Multicast Address">
<t>While <xref target="dlep02"/> is likely to be designed to be transport independent, DLEP over UDP will be a common use case, so DLEP MUST specify a default UDP port number and a Linklocal Multicast address to be used. If an existing port and Multicast address can be reused or not is out of scope for this specification.</t>
		</section>

		<section title="DLEP-Radio Parameters">
			<t>There are several parameters that MUST be set on a DLEP-radio.</t>

			<t>INTERFACE_UPDATE_INTERVAL:
			<list style="empty" counter="none">
<t>The maximum time between the transmission of two successive Interface Update Orders for the same DLEP-radio interface, possibly modified by jitter as specified in <xref target="RFC5148"/>.</t>
			</list></t>

			<t>LOCAL_DESTINATION_INTERVAL:
			<list style="empty" counter="none">
<t>The maximum time between the transmission of two successive Local Destination Orders for the same DLEP-radio interface, possibly modified by jitter as specified in <xref target="RFC5148"/>.</t>
			</list></t>

			<t>NEIGHBOR_UPDATE_INTERVAL:
			<list style="empty" counter="none">
<t>The maximum time between the transmission of two successive Neighbor Update Orders for the same DLEP-radio interface, possibly modified by jitter as specified in <xref target="RFC5148"/>.</t>
			</list></t>

			<t>INTERFACE_UPDATE_HOLD_TIME:
			<list style="empty" counter="none">
<t>Used as the Value in the VALIDITY_TIME Message TLV included in all Interface Update Orders. It is then used by the DLEP-router receiving such an Order to indicate the validity of the information taken from that Order and recorded in the receiving DLEP-router's Network Information Base.</t>
			</list></t>

			<t>LOCAL_DESTINATION_HOLD_TIME:
			<list style="empty" counter="none">
<t>Used as the Value in the VALIDITY_TIME Message TLV included in all Local Destination Orders. It is then used by the DLEP-router receiving such an Order to indicate the validity of the information taken from that Order and recorded in the receiving DLEP-router's Network Information Base.</t>
			</list></t>

			<t>NEIGHBOR_UPDATE_HOLD_TIME:
			<list style="empty" counter="none">
<t>Used as the Value in the VALIDITY_TIME Message TLV included in all Neighbor Update Orders. It is then used by the DLEP-router receiving such an Order to indicate the validity of the information taken from that Order and recorded in the receiving DLEP-router's Network Information Base.</t>
			</list></t>

			<t>DEFAULT_INTERFACE_STATE:
			<list style="empty" counter="none">
				<t>Defines the default status of the interfaces of a DLEP-radio. It MUST be UP or DOWN.</t>
			</list></t>

			<t>The following constraints apply to these DLEP-radio parameters:

			<list style="symbols">
				<t>INTERFACE_UPDATE_INTERVAL > 0</t>
				<t>LOCAL_DESTINATION_INTERVAL > 0</t>
				<t>NEIGHBOR_UPDATE_INTERVAL > 0</t>
				<t>INTERFACE_UPDATE_HOLD_TIME > INTERFACE_UPDATE_INTERVAL</t>
				<t>LOCAL_DESTINATION_HOLD_TIME > LOCAL_DESTINATION_INTERVAL</t>
				<t>NEIGHBOR_UPDATE_HOLD_TIME > NEIGHBOR_UPDATE_INTERVAL</t>
			</list></t>
		</section>

		<section title="DLEP-Router Parameters">
			<t>There are several parameters that MUST be set on a DLEP-router.</t>

			<t>SETUP_RADIO_INTERVAL:
			<list style="empty" counter="none">
<t>The maximum time between the transmission of two successive Setup Radio Orders, possibly modified by jitter as specified in <xref target="RFC5148"/>.</t>
			</list></t>

			<t>SETUP_LOCAL_DESTINATION_INTERVAL:
			<list style="empty" counter="none">
<t>The maximum time between the transmission of two successive Setup Destination Orders, possibly modified by jitter as specified in <xref target="RFC5148"/>.</t>
			</list></t>

			<t>SETUP_RADIO_HOLD_TIME:
			<list style="empty" counter="none">
<t>Used as the Value in the VALIDITY_TIME Message TLV included in all Setup Radio Orders. It is then used by the DLEP-radio receiving such an Order to indicate the validity of the information taken from that Order and recorded in the receiving DLEP-radio's Information Bases.</t>
			</list></t>

			<t>SETUP_LOCAL_DESTINATION_HOLD_TIME:
			<list style="empty" counter="none">
<t>Used as the Value in the VALIDITY_TIME Message TLV included in all Setup Destination Orders. It is then used by the DLEP-radio receiving such an Order to indicate the validity of the information taken from that Order and recorded in the receiving DLEP-radio's Information Bases.</t>
			</list></t>

			<t>The following constraints apply to these DLEP-router parameters:

			<list style="symbols">
				<t>SETUP_RADIO_INTERVAL > 0.</t>
				<t>SETUP_RADIO_HOLD_TIME > SETUP_RADIO_INTERVAL.</t>
				<t>SETUP_LOCAL_DESTINATION_INTERVAL > 0.</t>
				<t>SETUP_LOCAL_DESTINATION_HOLD_TIME > SETUP_LOCAL_DESTINATION_INTERVAL.</t>
			</list></t>
		</section>
	</section>

	<section title="Local Radio Information Base">
<t>The DLEP-radio maintains a Local Radio Information Base that records a list of locally defined or collected data about the DLEP-radio's interfaces and its connected neighbors.</t>

<t>The Local Radio Information Base is not modified by signaling. If a DLEP-radio's interface configuration changes, then the Local Radio Information Base MUST reflect these changes. This MAY also result in signaling to advertise these changes.</t>

		<section title="Local Interface Set">
			<t>A DLEP-radio's Local Interface Set records the existing local interfaces, their default status and their description. It consists of Local Interface Tuples, one per existing local interface:

			<list style="empty" counter="none">
				<t>(LI_radio_interface_id, LI_default_status, LI_description)</t>
			</list>

			where:

			<list style="empty" counter="none">
				<t>LI_radio_interface_id is the Radio Interface ID of the local radio interface.</t>
				<t>LI_default_status is the default status of the radio interface if not configured by the DLEP-router.</t>
				<t>LI_description is a textual description of the radio interface with a maximum of 80 octets without ending zero byte. It MAY be NONE.</t>
			</list></t>

			<t>LI_radio_interface_id is the unique key of this set, there MUST NOT be two tuples with the same unique key in the set.</t>
		</section>

		<section title="Interface Neighbor Set">
			<t>A DLEP-radios's Interface Neighbor Set records the known other DLEP-radios in communication range and the addresses of the neighbors reachable through this radios. It consists of Interface Neighbor Tuples, one per known neighbor of a local interface:

			<list style="empty" counter="none">
				<t>(IN_radio_interface_id, IN_neighbor_interface_id, IN_mac_address, IN_ipv4_prefixes, IN_ipv6_prefixes)</t>
			</list>

			where:

			<list style="empty" counter="none">
				<t>IN_radio_interface_id is a six octet unique Radio Interface ID of the local interface for this neighbor.</t>
				<t>IN_neighbor_interface_id is a Radio Interface ID of the neighbors DLEP-radio's interface, it MAY be NONE (or a special ID) for a broadcast or multicast neighbor.</t>
				<t>IN_mac_address is the six octet MAC address of the neighbor.</t>
				<t>IN_ipv4_prefixes is a list of known IPv4 prefixes of this neighbor. It MAY be empty.</t>
				<t>IN_ipv6_prefixes is a list of known IPv6 prefixes of this neighbor. It MAY be empty.</t>
			</list></t>

			<t>(IN_radio_interface_id, IN_neighbor_interface_id, IN_mac_address) is the unique key of this set, there MUST NOT be two tuples with the same unique key in the set.</t>
		</section>

		<section title="Lost Neighbor Set">
			<t>When a radio interface's neighbor becomes unreachable, a DLEP-radio's Lost Neighbor Set records this for at least INTERFACE_UPDATE_HOLD_TIME. It consists of Lost Neighbor Tuples, one per lost neighbor of a local radio interface:

			<list style="empty" counter="none">
				<t>(LN_radio_interface_id, LN_neighbor_interface_id, LN_mac_address)</t>
			</list>

			where:

			<list style="empty" counter="none">
				<t>LN_radio_interface_id is a six octet unique Radio Interface ID of the local interface for the lost neighbor.</t>
				<t>LN_neighbor_interface_id is a six octet unique Radio Interface ID of the lost neighbors DLEP-radio's interface, it MAY be NONE for a broadcast or multicast neighbor.</t>
				<t>LN_mac_address is the six octet MAC address of the lost neighbor.</t>
			</list></t>

			<t>There MUST NOT be two tuples with the same data in the set.</t>
		</section>

		<section title="Interface Data Set">
			<t>A DLEP-radio's Interface Data Set records attributes (e.g. statistics or metrics) of its local radio interfaces and their attached networks. It consists of Interface Data Tuples:

			<list style="empty" counter="none">
				<t>(ID_radio_interface_id, ID_data_type, ID_data_value)</t>
			</list>

			where:

			<list style="empty" counter="none">
				<t>ID_radio_interface_id is a Radio Interface ID of a local radio interface.</t>
				<t>ID_data_type is the type of data stored. It MUST be an extension type of the NETWORK_DATA Address TLV.</t>
				<t>ID_data_value is the data corresponding to this tuple's key. Its format is defined in the NETWORK_DATA Address TLV values.</t>
			</list></t>

			<t>(ID_radio_interface_id, ID_data_type) is the unique key of this set, there MUST NOT be two tuples with the same unique key in the set.</t>
		</section>

		<section title="Neighbor Data Set">
			<t>A DLEP-radio's Neighbor Data Set records attributes (e.g. statistics or metrics) of a connection to a Neighbor. It consists of Neighbor Data Tuples:

			<list style="empty" counter="none">
				<t>(ND_radio_interface_id, ND_neighbor_interface_id, ND_mac_address, ND_data_type, ND_data_value)</t>
			</list>

			where:

			<list style="empty" counter="none">
				<t>ND_radio_interface_id is a Radio Interface ID of the local interface for this neighbor.</t>
				<t>ND_neighbor_interface_id is a Radio Interface ID of the neighbors DLEP-radio's interface, it MAY be NONE for a broadcast or multicast neighbor.</t>
				<t>ND_mac_address is the six octet MAC address of the neighbor.</t>
				<t>ND_data_type is the type of data stored. It MUST be an extension type of the NEIGHBOR_DATA Address TLV.</t>
				<t>ND_data_value is the data corresponding to this tuples key. Its format is defined in the NEIGHBOR_DATA Address TLV values.</t>
			</list></t>

			<t>(ND_radio_interface_id, ND_neighbor_interface_id, ND_mac_address, ND_data_type) is the unique key of this set, there MUST NOT be two tuples with the same unique key in the set.</t>
		</section>
	</section>

	<section title="Configuration Information Base">
<t>The DLEP-radio maintains a Configuration Information Base that records the configuration settings of the DLEP-router for each interface.</t>

<t>The Configuration Information Base is modified by Setup Radio and Setup Destination Orders from the DLEP-router. If a Configuration Information Base changes, then the local configuration of the interface MUST reflect this change. This MAY also result in signaling to advertise these changes.</t>

		<section title="Interface Configuration Set">
			<t>A DLEP-radio's Interface Configuration Set records the status of the local DLEP-radio interfaces as configured by the DLEP-router. It consists of Interface Configuration Tuples, one for each local interface:

			<list style="empty" counter="none">
				<t>(IC_radio_interface_id, IC_radio_status, IC_time)</t>
			</list>

			where:

			<list style="empty" counter="none">
				<t>IC_radio_interface_id is a Radio Interface ID of a local radio interface.</t>
				<t>IC_radio_status is the status of the local radio interface. It MUST be "up" or "down".</t>
				<t>IC_time is the time when this tuple MUST be removed.</t>
			</list></t>

			<t>IC_radio_interface_id is the unique key of this set, there MUST NOT be two tuples with the same unique key in the set.</t>
		</section>

		<section title="Local Destination Set">
			<t>A DLEP-radio's Local Destination Set records the known local destinations of local radio interfaces set by the connected DLEP-router. It consists of Local Destination Tuples:

			<list style="empty" counter="none">
				<t>(LD_radio_interface_id, LD_mac_address, LD_ipv4_prefixes, LD_ipv6_prefixes, LD_time)</t>
			</list>

			where:

			<list style="empty" counter="none">
				<t>LD_radio_interface_id is a Radio Interface ID of a local radio interface.</t>
				<t>LD_mac_address is the MAC address of the Destination.</t>
				<t>LD_ipv4_prefixes is a list of IPv4 prefixes of the Destination. It MAY be empty.</t>
				<t>LD_ipv6_prefixes is a list of IPv6 prefixes of the Destination. It MAY be empty.</t>
				<t>LD_time is the time when this tuple MUST be removed.</t>
			</list></t>

			<t>(LD_radio_interface_id, LD_mac_address) is the unique key of this set, there MUST NOT be two tuples with the same unique key in the set.</t>
		</section>
	</section>

	<section title="Local Router Information Base">
<t>The DLEP-router maintains a Local Router Information Base that records the radio interface status and the local Destinations for a DLEP-radio.</t>

<t>The Local Router Information Base is not modified by signaling. If a DLEP-router's configuration changes, then the Local Router Information Base MUST reflect these changes. This MAY also result in signaling to advertise these changes.</t>

		<section title="Radio Interface Configuration Set">
<t>A DLEP-router's Radio Interface Configuration Set records the radio interface status, up or down, to be configured on a DLEP-radio. It consists of Radio Interface Configuration Tuples, up to one for each DLEP-radio interface connected to the DLEP-router:

			<list style="empty" counter="none">
				<t>(RIC_radio_interface_id, RIC_status)</t>
			</list>

			where:

			<list style="empty" counter="none">
				<t>RIC_radio_interface_id is the Radio Interface ID of an attached DLEP-radio.</t>
				<t>RIC_status is the desired status of the DLEP-radio interface. MUST be UP or DOWN.</t>
			</list></t>

			<t>RIC_radio_interface_id is the unique key of this set, there MUST NOT be two tuples with the same unique key in the set.</t>
		</section>

		<section title="Destination Configuration Set">
<t>A DLEP-router's Destination Configuration Set records the local Destinations to be configured on a DLEP-radio interface. It consists of Destination Configuration Tuples, up to one for each Destination of a DLEP-radio interface connected to the DLEP-router:

			<list style="empty" counter="none">
				<t>(DC_radio_interface_id, DC_mac_address, DC_ipv4_prefixes, DC_ipv6_prefixes)</t>
			</list>

			where:

			<list style="empty" counter="none">
				<t>DC_radio_interface_id is the Radio Interface ID of an attached DLEP-radio interface.</t>
				<t>DC_mac_address is the MAC-address of Destination for the DLEP-radio interface.</t>
				<t>DC_ipv4_prefixes is a list of IPv4 prefixes of Destination for the DLEP-radio interface. MAY be empty.</t>
				<t>DC_ipv6_prefixes is a list of IPv6 prefixes of Destination for the DLEP-radio interface. MAY be empty.</t>
			</list></t>

			<t>(DC_radio_interface_id, DC_mac_address) is the unique key of this set, there MUST NOT be two tuples with the same unique key in the set.</t>
		</section>
	</section>

	<section title="Network Information Base">
<t>A DLEP-router maintains a Network Information Base that records all collected information transmitted by the attached DLEP-radios. This consists both of information about the settings of the local interfaces of the DLEP-radios, metrics and statistics about the network attached to the local interfaces and metrics and statistics about neighbors.</t>

<t>The Network Information Base is modified by Interface Update, Local Destination, and Neighbor Update Orders from the DLEP-radio. If the Network Information Base changes, this MAY trigger changes in the DLEP-router.</t>

		<section title="Discovered Interface Set">
<t>A DLEP-router's Discovered Interface Set records the attached Radio Interface IDs, the status and description of the DLEP-radio interfaces. It consists of Discovered Interface Tuples, one for each discovered DLEP-radio interface:

			<list style="empty" counter="none">
				<t>(DI_radio_interface_id, DI_radio_status, DI_description, DI_time)</t>
			</list>

			where:

			<list style="empty" counter="none">
				<t>DI_radio_interface_id is the Radio Interface ID of the discovered DLEP-radio interface.</t>
				<t>DI_radio_status is the current status of the interface. MUST be UP or DOWN.</t>
				<t>DI_description is a textual description of the radio interface of up to 80 characters without zero byte ending.</t>
				<t>DI_time is the time when this tuple MUST be removed.</t>
			</list></t>

			<t>DI_radio_interface_id is the unique key of this set, there MUST NOT be two tuples with the same unique key in the set.</t>
		</section>

		<section title="Network Local Destination Set">
<t>A DLEP-router's Network Local Destination Set records the DLEP-radio interface's configured local Destinations. It consists of Network Local Destination Tuples, one for each DLEP-radio interface's local Destination:

			<list style="empty" counter="none">
				<t>(NLD_radio_interface_id, NLD_mac_address, NLD_ipv4_prefixes, NLD_ipv6_prefixes, NLD_time)</t>
			</list>

			where:

			<list style="empty" counter="none">
				<t>NLD_radio_interface_id is the Radio Interface ID of the local Destination's radio interface.</t>
				<t>NLD_mac_address is the six octet MAC-address of the local Destination.</t>
				<t>NLD_ipv4_prefixes is a list of IPv4 prefixes configured for the local Destination, MAY be empty.</t>
				<t>NLD_ipv6_prefixes is a list of IPv6 prefixes configured for the local Destination, MAY be empty.</t>
				<t>NLD_time is the time when this tuple MUST be removed.</t>
			</list></t>

			<t>(NLD_radio_interface_id, NLD_mac_address) is the unique key of this set, there MUST NOT be two tuples with the same unique key in the set.</t>
		</section>

		<section title="Network Interface Data Set">
			<t>A DLEP-router's Network Interface Data Set records a list of attributes known about a DLEP-radio's interface (e.g. interface statistics and radio attributes). It consists of Network Interface Data Tuples:

			<list style="empty" counter="none">
				<t>(NID_radio_interface_id, NID_data_type, NID_data_value, NID_time)</t>
			</list>

			where:

			<list style="empty" counter="none">
				<t>NID_radio_interface_id is the Radio Interface ID of the DLEP-radio's interface.</t>
				<t>NID_data_type is the type of data stored. It MUST be an extension type of the NETWORK_DATA Address TLV.</t>
				<t>NID_data_value is the data corresponding to this tuples key. Its format is defined in the NETWORK_DATA Address TLV values.</t>
				<t>NID_time is the time when this tuple MUST be removed.</t>
			</list></t>

			<t>(NID_radio_interface_id, NID_data_type) is the unique key of this set, there MUST NOT be two tuples with the same unique key in the set.</t>
		</section>

		<section title="Network Neighbor Set">
			<t>A DLEP-router's Network Neighbor Set records the known configuration and status of each neighbor of a DLEP-radio interface. It consists of Network Neighbor Tuples, one for each neighbor or a radio interface:

			<list style="empty" counter="none">
				<t>(NN_radio_interface_id, NN_neighbor_interface_id, NN_mac_address, NN_status, NN_ipv4_prefixes, NN_ipv6_prefixes, NN_time)</t>
			</list>

			where:

			<list style="empty" counter="none">
				<t>NN_radio_interface_id is the Radio Interface ID of the DLEP-radio interface.</t>
				<t>NN_neighbor_interface_id is the Radio Interface ID of the neighbors DLEP-radio interface.</t>
				<t>NN_mac_address is the MAC-address of the neighbor.</t>
				<t>NN_status is the status of the neighbors radio interface. MUST be UP or DOWN.</t>
				<t>NN_ipv4_prefixes is a list of IPv4 prefixes of the neighbor. MAY be EMPTY.</t>
				<t>NN_ipv6_prefixes is a list of IPv6 prefixes of the neighbor. MAY be EMPTY.</t>
			</list></t>

			<t>(NN_radio_interface_id, NN_neighbor_interface_id, NN_mac_address) is the unique key of this set, there MUST NOT be two tuples with the same unique key in the set.</t>
		</section>

		<section title="Network Neighbor Data Set">
			<t>A DLEP-router's Network Neighbor Data Set records a list of attributes known about a DLEP-radio interface's neighbor (e.g. link statistics and metrics). It consists of Network Neighbor Data Tuples:

			<list style="empty" counter="none">
				<t>(NND_radio_interface_id, NND_neighbor_interface_id, NND_mac_address, NND_data_type, NND_data_value, NND_time)</t>
			</list>

			where:

			<list style="empty" counter="none">
				<t>NND_radio_interface_id is the Radio Interface ID of the DLEP-radio interface.</t>
				<t>NND_neighbor_interface_id is the Radio Interface ID of the neighbors DLEP-radio interface.</t>
				<t>NND_mac_address is the MAC-address of the neighbor.</t>
				<t>NND_data_type is the type of data stored. It MUST be an extension type of the NEIGHBOR_DATA Address TLV.</t>
				<t>NND_data_value is the data corresponding to this tuples key. Its format is defined in the NEIGHBOR_DATA Address TLV values.</t>
				<t>NND_time is the time when this tuple MUST be removed.</t>
			</list></t>

			<t>(NND_radio_interface_id, NND_neighbor_interface_id, NND_mac_address, NND_data_type) is the unique key of this set, there MUST NOT be two tuples with the same unique key in the set.</t>
		</section>
	</section>





	<section title="Local Radio Information Base Changes">
		<t>The Local Radio Information Base MUST be updated in response to changes in the DLEP-radio's local interface configuration.</t>

		<t>A DLEP-radio MAY transmit Interface Update and Neighbor Update Orders in response to these changes.</t>

		<section title="New Radio Interface Neighbor">
			<t>If a new Neighbor is discovered on a DLEP-radio interface, this MUST result in changes to the Local Radio Information Base</t>

			<t>Define 

			<list style="symbols">
				<t>neighbor_local_interface_id := the local Radio Interface ID of the former neighbor.</t>
				<t>neighbor_remote_interface_id :=  the Radio Interface ID of the neighbors DLEP-radio interface, MAY be NONE or a special ID for multicast and broadcast Neighbors.</t>
				<t>neighbor_mac_address := the MAC-address of the neighbor.</t>
				<t>neighbor_ipv4_prefixes := the list of known IPv4 prefixes of the neighbor.</t>
				<t>neighbor_ipv6_prefixes := the list of known IPv6 prefixes of the neighbor.</t>
			</list>

			Then change the information base as follows:

			<list style="numbers">
				<t>Remove all Lost Neighbor Tuple with:

				<list style="symbols">
					<t>LN_radio_interface_id = neighbor_local_interface_id AND</t>
					<t>LN_neighbor_interface_id = neighbor_remote_interface_id AND</t>
					<t>LN_mac_address = neighbor_mac_address.</t>
				</list></t>

				<t>Add an Interface Neighbor Tuple with:

				<list style="symbols">
					<t>IN_radio_interface_id := neighbor_local_interface_id.</t>
					<t>IN_neighbor_interface_id := neighbor_remote_interface_id.</t>
					<t>IN_mac_address := neighbor_mac_address.</t>
					<t>IN_ipv4_prefixes := neighbor_ipv4_prefixes.</t>
					<t>IN_ipv6_prefixes := neighbor_ipv6_prefixes.</t>
				</list></t>
			</list></t>

			<t>The change MAY also trigger a Neighbor Update Order.</t>
		</section>

		<section title="Lost Radio Interface Neighbor">
			<t>If an existing neighbor is lost on a DLEP-radio interface, this MUST result in change of the Local Radio Information Base.</t>

			<t>Define 

			<list style="symbols">
				<t>neighbor_local_interface_id := the local Radio Interface ID of the former neighbor.</t>
				<t>neighbor_remote_interface_id :=  the Radio Interface ID of the former neighbor's radio interface.</t>
				<t>neighbor_mac_address := the MAC-address of the neighbor.</t>
			</list>

			Then change the information base as follows:

			<list style="numbers">
				<t>Remove an existing Interface Neighbor Tuple with:

				<list style="symbols">
					<t>IN_radio_interface_id = neighbor_local_interface_id AND</t>
					<t>IN_neighbor_interface_id = neighbor_remote_interface_id AND</t>
					<t>IN_mac_address = neighbor_mac_address.</t>
				</list></t>
			
				<t>Remove all Neighbor Data Tuples with:
				<list style="symbols">
					<t>ND_radio_interface_id = neighbor_local_interface_id AND</t>
					<t>ND_neighbor_interface_id = neighbor_remote_interface_id AND</t>
					<t>ND_mac_address = neighbor_mac_address.</t>
				</list></t>

				<t>Add a Lost Neighbor Tuple with:

				<list style="symbols">
					<t>LN_radio_interface_id := NI_radio_interface_id.</t>
					<t>LN_neighbor_interface_id := NI_neighbor_interface_id.</t>
					<t>LN_mac_address := NI_mac_address.</t>
					<t>LN_time := current + NEIGHBOR_UPDATE_HOLD_TIME.</t>
				</list></t>
			</list></t>

			<t>The change MAY also trigger an Interface Update Order.</t>
		</section>

		<section title="Radio Interface Status">
			<t>The DLEP-radio interface status is determined by two sources, the default radio interface status and the status configured by a DLEP-router. Determine the actual status as follows:</t>

			<t>Define radio_interface_id as the ID of the radio interface which status will be determined.</t>

			<t>If there is an Interface Configuration Tuple with

			<list style="symbols">
				<t>IC_radio_interface_id = radio_interface_id,</t>
			</list>

			set the radio status to IC_radio_status.</t>

			<t>Otherwise, find the Local Interface Tuple with

			<list style="symbols">
				<t>LI_radio_interface_id = radio_interface_id</t>
			</list>
			
			and set the radio interface status to LI_default_status.</t>
		</section>
	</section>





	<section title="Packets and Messages">
<t>The packet and message format used by this protocol is defined in <xref target="RFC5444"/>, which is used with the following considerations:

		<list style="symbols">
<t>This protocol specifies one Message Type, the DLEP message.</t>
<t>A DLEP message MAY use any combination of Message Header options specified in <xref target="RFC5444"/>.</t>
<t>DLEP messages MUST NOT be forwarded, i.e., a &lt;msg-hop-limit&gt;, if present, MUST have the value 1.</t>
<t>DLEP messages MAY be included in multi-message packets as specified in <xref target="RFC5444"/>.</t>
<t>Received DLEP messages MUST be parsed in accordance with <xref target="RFC5444"/>. A DLEP message that is not in conformance with <xref target="RFC5444"/> MUST be discarded without being processed.</t>
<t>This protocol specifies five new Address Block TLVs and one new Message TLV.</t>
<t>This protocol uses one Message TLVs defined in <xref target="RFC5497"/>, the VALIDITY_TIME TLV.</t>
		</list></t>

<t>This specified protocol defines and owns the DLEP Message Type (see <xref target="IANA Considerations"/>). Thus, as specified in <xref target="RFC5444"/> this protocol generates and transmits all DLEP messages, receives all DLEP messages and is responsible for determining whether and how each DLEP message is to be processed.</t>

		<section title="DLEP Messages">
			<t>A DLEP Message MUST contain:

			<list style="symbols">
				<t>An address length of 6, meaning msg-addr-length (as defined in <xref target="RFC5444"/>) must be 5.</t>
				<t>Exactly one Message TLV with Type = VALIDITY_TIME as defined in <xref target="RFC5497"/>.</t>
				<t>Exactly one Message TLV with Type = ORDER.</t>
			</list>

			Each Address in a DLEP message MUST:

			<list style="symbols">
				<t>have zero or one TLV with Type = ADD_ADDRESS and the same Extension Type.</t>
				<t>have zero or one TLV with Type = NETWORK_DATA and the same Extension Type.</t>
				<t>have zero or one TLV with Type = NEIGHBOR_DATA and the same Extension Type.</t>
				<t>have zero or one TLV with Type = DESCRIPTION.</t>
			</list>

			DLEP Messages that do not obey this rules MUST be discarded without further processing.</t>

			<t>A DLEP Message MAY contain:

			<list style="symbols">
				<t>Other Message TLVs.</t>
				<t>One or more Address Blocks, each with an associated Address Block TLV Block, which MAY contain other Address Block TLVs.</t>
			</list></t>

			<section title="DLEP Message Orders">
				<t>This protocol uses several messages with different semantics. Instead of allocating a Message-Type for each of them, this specification use the  ORDER Message TLV to define an extension type for the single Message-Type it uses. (see <xref target="tbl_order_list"/>)</t>
			</section>
		</section>

		<section title="Message TLVs" anchor="msg_tlvs">
			<t>The ORDER Message TLV MUST be used in all DLEP Messages. A message MUST NOT contain more than one ORDER TLV.</t>

			<texttable anchor="tbl_order_tlv" title="ORDER TLV definition">
				<ttcol align="center">Type</ttcol>
				<ttcol align="center">Value Length</ttcol>
				<ttcol align="left">Value</ttcol>
				<c>ORDER</c>
				<c>1</c>
				<c>Specifies the ORDER of a DLEP Message, which in turn defines the context for the rest of the Message.</c>
			</texttable>

			<t>There are five types of ORDER defined in this document.</t>

			<texttable anchor="tbl_order_list" title="Types of ORDERs in DLEP Messages">
				<ttcol align="center">ORDER value</ttcol>
				<ttcol align="center">Originator</ttcol>
				<ttcol align="left">Description</ttcol>
				<c>INTERFACE_UPDATE</c>
				<c>DLEP-radio</c>
				<c>Updates the data of one or more radio interfaces.</c>
				<c>LOCAL_DESTINATION</c>
				<c>DLEP-radio</c>
				<c>Publishes the locally set Destinations of the radio interface.</c>
				<c>NEIGHBOR_UPDATE</c>
				<c>DLEP-radio</c>
				<c>Updates the data of one or more neighbors of a radio interface.</c>
				<c>SETUP_RADIO</c>
				<c>DLEP-router</c>
				<c>Configures a the interface settings of one or more radio interfaces.</c>
				<c>SETUP_DESTINATION</c>
				<c>DLEP-router</c>
				<c>Adds local Destinations to one or more DLEP-radio interfaces.</c>
			</texttable>
		</section>
		
		<section title="Address Block TLVs">
			<t>The RADIOIF_STATUS TLV is used in all three Orders. An Address of a DLEP Message MUST NOT contain more than one RADIOIF_STATUS TLV.</t>

			<texttable anchor="tbl_radioifstatus_tlv" title="RADIOIF_STATUS TLV definition">
				<ttcol align="center">Type</ttcol>
				<ttcol align="center">Value Length</ttcol>
				<ttcol align="left">Value</ttcol>
				<c>RADIOIF_STATUS</c>
				<c>1</c>
				<c>Specifies that the interface is UP or DOWN.</c>
			</texttable>

			<t>The DESCRIPTION TLV is used in the in the Interface Update Order. An Address of an Interface Update Order MUST NOT contain more than one DESCRIPTION TLV.</t>

			<texttable anchor="tbl_description_tlv" title="DESCRIPTION TLV definition">
				<ttcol align="center">Type</ttcol>
				<ttcol align="center">Value Length</ttcol>
				<ttcol align="left">Value</ttcol>
				<c>DESCRIPTION</c>
				<c>1-80</c>
				<c>Specifies a human readable ASCII identifier for a DLEP-radio interface without added zero byte.</c>
			</texttable>

			<t>The ADD_ADDRESS TLV is used in the Local Destination, the Neighbor Update and the Setup Destination Order. An Address of a DLEP Message MUST NOT contain multiple ADD_ADDRESS TLVs with the same Extension Types.</t>

			<texttable anchor="tbl_addaddress_tlv" title="ADD_ADDRESS TLV definition">
				<ttcol align="center">Type</ttcol>
				<ttcol align="center">Ext-Type</ttcol>
				<ttcol align="center">Value Length</ttcol>
				<ttcol align="left">Value</ttcol>
				<c>ADD_ADDRESS</c>
				<c>MAC</c>
				<c>x*6 octets</c>
				<c>A list of MAC-addresses attached to the address object.</c>
				<c>ADD_ADDRESS</c>
				<c>IPV4_PREFIX</c>
				<c>x*5 octets</c>
				<c>A list of IPv4 prefixes attached to the address object. Every IPv4 address is followed by a one octet prefix length (0-32) in the list.</c>
				<c>ADD_ADDRESS</c>
				<c>IPV6_PREFIX</c>
				<c>x*17 octets</c>
				<c>A list of IPv6 prefixes attached to the address object. Every IPv4 address is followed by a one octet prefix length (0-128) in the list.</c>
			</texttable>

			<t>The NETWORK_DATA TLV is used in the Interface Update Order. An Interface Update Order Address MUST NOT contain more than one NETWORK_DATA TLV with the same Type Extension.</t>

			<texttable anchor="tbl_networkdata_tlv" title="NETWORK_DATA TLV definition">
				<ttcol align="center">Type</ttcol>
				<ttcol align="center">Ext-Type</ttcol>
				<ttcol align="center">Value Length</ttcol>
				<ttcol align="left">Value</ttcol>
				<c>NETWORK_DATA</c>
				<c>NETWORK_ID</c>
				<c>1-16</c>
				<c>Binary identifier of a radio network (e.g. BSSID).</c>
				<c>NETWORK_DATA</c>
				<c>NETWORK_DESCR</c>
				<c>1-80</c>
				<c>ASCII identifier of a radio network without added zero byte (e.g. SSID)</c>
				<c>NETWORK_DATA</c>
				<c>SUPPORTED_RATES</c>
				<c>x*8</c>
				<c>Array of supported data rates of the network an interface is attached to as an array of 8 octet unsigned integers in bit/s.</c>
				<c>NETWORK_DATA</c>
				<c>RESOURCES</c>
				<c>2</c>
				<c>The first octet contains an estimate of the resources left, between 0 (no resources left) and 100 (all resources left). The second octet is 0 if the radio has limited resources or 1 if the resources are unlimited and/or the resources are currently being recharged by an external source.</c>
				<c>NETWORK_DATA</c>
				<c>LAST_ACTIVE</c>
				<c>4</c>
				<c>Time since the last data was sent or received over a radio interface as an unsigned integer in milliseconds.</c>
				<c>NETWORK_DATA</c>
				<c>FREQUENCY</c>
				<c>8</c>
				<c>Mid frequency of a radio interface channel as an unsigned integer in Hertz.</c>
				<c>NETWORK_DATA</c>
				<c>BANDWIDTH</c>
				<c>8</c>
				<c>Amount of spectrum (frequency range) of a radio interface channel as an unsigned integer in Hertz.</c>
			</texttable>

			<t>The NEIGHBOR_DATA TLV is used in the Neighbor Update Order. An Network Update Order Address MUST NOT contain more than one NEIGHBOR_DATA TLV with the same Type Extension.</t>

			<texttable anchor="tbl_neighbordata_tlv" title="NEIGHBOR_DATA TLV definition">
				<ttcol align="center">Type</ttcol>
				<ttcol align="center">Ext-Type</ttcol>
				<ttcol align="center">Value Length</ttcol>
				<ttcol align="left">Value</ttcol>
				<c>NEIGHBOR_DATA</c>
				<c>RELATIVE_LQ</c>
				<c>1</c>
				<c>Estimate of the quality of a link between 0 (worst) and 100 (best).</c>
				<c>NEIGHBOR_DATA</c>
				<c>MAXIMUM_DATARATE</c>
				<c>8+8</c>
				<c>Maximum possible link speed as 8 octet unsigned integer in bits/s. First value is receiving speed, second is transmitting speed.</c>
				<c>NEIGHBOR_DATA</c>
				<c>CURRENT_DATARATE</c>
				<c>8+8</c>
				<c>Current link speed as 8 octet unsigned integer in bits/s. First value is receiving speed, second is transmitting speed.</c>
				<c>NEIGHBOR_DATA</c>
				<c>TRAFFIC</c>
				<c>8+8</c>
				<c>Number of bytes exchanged with a neighbor since link went up as 8 octet unsigned integer in bytes. First value is received bytes, second is transmitted bytes.</c>
				<c>NEIGHBOR_DATA</c>
				<c>PACKETS</c>
				<c>8+8</c>
				<c>Number of IP packets exchanged with a neighbor since link went up as 8 octet unsigned integer in bytes. First value is received packets, second is transmitted packets.</c>
				<c>NEIGHBOR_DATA</c>
				<c>FRAMES</c>
				<c>8+8</c>
				<c>Number of link-layer frames exchanged with a neighbor since link went up as 8 octet unsigned integer in bytes. First value is received frames, second is transmitted frames.</c>
				<c>NEIGHBOR_DATA</c>
				<c>TX_RETRIES</c>
				<c>8</c>
				<c>Number of link-layer retransmissions of the same IP packet since link went up as unsigned integer.</c>
				<c>NEIGHBOR_DATA</c>
				<c>TX_FAILS</c>
				<c>8</c>
				<c>Number of permanent link-layer transmission failures of an IP packet since the link went up as unsigned integer.</c>
				<c>NEIGHBOR_DATA</c>
				<c>LAST_ACTIVE</c>
				<c>4</c>
				<c>Time since the last data was exchanged as an unsigned integer in milliseconds.</c>
			</texttable>
		</section>
	</section>





	<section title="Interface Update Order">
<t>The Interface Update Order is sent by DLEP-radios in regular intervals, at least once every INTERFACE_UPDATE_INTERVAL.</t>

<t>An Interface Update Order contains the description, status and attributes (e.g. interface metrics and statistics) of one or more DLEP-radio interfaces. This allows the DLEP-router to receive the whole data generated from the radio about each interface of the DLEP-radio in an atomic way.</t>

<t>The Interface Update Order MUST be generated by the DLEP-radio periodically. While it is allowed to split the Interface Updates for multiple DLEP-radio interfaces into more than one Interface Update Order, each Local Interface Tuple MUST be sent once in an Interface Update Order within INTERFACE_UPDATE_INTERVAL.</t>

<t>The Interface Update Order includes a list of Radio Interface IDs as address objects.</t>

<t>For each address, the Interface Update Order MUST contain the RADIOIF_STATUS Address TLV, which specifies if the radio interface is up or down.</t>

<t>For each address, it MAY contain one DESCRIPTION TLV with a textual description of the radio interface.</t>

<t>For each address, it MAY contain one NETWORK_DATA Address TLV for each Extension-Type, which will specify the known statistics and metrics of the radio interface.</t>

		<section title="Interface Update Order Generation">
			<t>Each DLEP-radio MUST generate Interface Update Orders according to the specification in this section.</t>

			<t>Define interface_set as a subset of the Local Interface Set, which MUST contain at least one Local Interface Tuple.</t>

			<t>Each Interface Update Order MUST contain the following additional elements:

			<list style="symbols">
				<t>A Message TLV with Type := ORDER and Value := INTERFACE_UPDATE.</t>

				<t>A Message TLV with Type := VALIDITY_TIME (as specified in <xref target="RFC5497"/>) with Value := INTERFACE_UPDATE_HOLD_TIME (encoded as specified in <xref target="RFC5497"/>).</t>

				<t>For each Local Interface Tuple in interface_set, add LI_radio_interface_id as an address object (as defined in <xref target="RFC5444"/>) and apply the following steps:

				<list style="numbers">
					<t>If LI_description is not NONE, add an Address TLV with Type := DESCRIPTION and Value := LI_description.</t>

					<t>Add an Address TLV with Type := RADIOIF_STATUS. If there is an Interface Configuration Tuple with IC_radio_interface_id = LI_radio_interface_id, set Value := IC_radio_status. Otherwise, set Value := LI_default_status.</t>

 					<t>For each Interface Data Tuple with ID_radio_interface_id = LI_radio_interface_id, add an Address TLV with Type := NETWORK_DATA, Extension Type := ID_data_type and Value := ID_data_value.</t>
				</list></t>
			</list></t>
		</section>

		<section title="Interface Update Order Processing">
			<t>An Interface Update Order is processed on the DLEP-router as follows:

			<list style="numbers">
				<t>Define validity_time as the Value of the Message TLV with Type = VALIDITY_TIME.</t>

				<t>For each address object interface_id that has an Address TLV with Type = RADIOIF_STATUS,

				<list style="numbers">
					<t>Define interface_status as the Value of the Address TLV with Type = RADIOIF_STATUS.</t>

					<t>If there is a Discovered Interface Tuple with DI_radio_interface_id = interface_id, remove it (there should be a maximum of one such tuples).</t>

					<t>Add a Discovered Interface Tuple with:

					<list style="symbols">
						<t>DI_radio_interface_id := interface_id.</t>
						<t>DI_radio_status := interface_status.</t>
						<t>DI_description := EMPTY.</t>
						<t>DI_time := current_time + validity_time.</t>
					</list></t>

					<t>If there is an Address TLV with Type = DESCRIPTION, set DI_description := TLV-Value.</t>

					<t>Remove all Network Interface Data Tuples with NID_radio_interface_id = interface_id.</t>

					<t>For each Address TLV with Type = NETWORK_DATA, add a Network Interface Data Tuple with:

					<list style="symbols">
						<t>NID_radio_interface_id := interface_id.</t>
						<t>NID_data_type := TLV Extension Type.</t>
						<t>NID_data_value := TLV Value.</t>
						<t>NID_time := current_time + validity_time.</t>
					</list></t>
				</list></t>
			</list></t>
		</section>
	</section>





	<section title="Local Destination Order">
<t>If the Local Destination Set is not empty, the Local Destination Order MUST be sent by DLEP-radios in regular intervals, at least once every LOCAL_DESTINATION_INTERVAL.</t>

<t>A Local Destination Order contains the IP-prefixes of a DLEP-radio interface's locally configured Destination. This allows the DLEP-router to check the configuration of the DLEP-radio interfaces.</t>

<t>While it is allowed to split the Local Destination Order for multiple destinations into more than one Local Destination Order, each Local Destination Tuple must be contained once in a Local Destination Order within LOCAL_DESTINATION_INTERVAL.</t>

<t>The Local Destination Order includes a list of local Destination MAC-addresses as address objects.</t>

<t>For each address, the Local Destination Order MUST contain one ADD_ADDRESS Address TLV of Extension-Type := MAC with a single address. This specifies the Radio Interface ID of the local Destination.</t>

<t>For each address, it MAY contain one ADD_ADDRESS Address TLV of Extension-Type := IPV4_PREFIX with one or more prefix. This specifies the IP-prefixes of the local Destination.</t>

<t>For each address, it MAY contain one ADD_ADDRESS Address TLV of Extension-Type := IPV6_PREFIX with one or more prefix. This specifies the IP-prefixes of the local Destination.</t>

		<section title="Local Destination Order Generation">
			<t>Each DLEP-radio MUST generate Local Destination Orders according to the specification in this section.</t>

			<t>Define destination_set a subset of the Local Destination Set, which MUST contain at least one Local Destination Tuple.</t>

			<t>Each Local Destination Order MUST contain the following additional elements:

			<list style="symbols">
				<t>A Message TLV with Type := ORDER and Value := LOCAL_DESTINATION.</t>

				<t>A Message TLV with Type := VALIDITY_TIME (as specified in <xref target="RFC5497"/>) with Value := LOCAL_DESTINATION_HOLD_TIME (encoded as specified in <xref target="RFC5497"/>).</t>

				<t>For each Local Destination Tuple in destination_set, add LD_mac_address as an address object (as defined in <xref target="RFC5444"/>) and apply the following steps:

				<list style="numbers">
					<t>Add an Address TLV with Type := ADD_ADDRESS, Extension Type := MAC and Value := LD_radio_interface_id.</t>

					<t>If LD_ipv4_prefixes is not empty, add an Address TLV with Type := ADD_ADDRESS, Extension Type := IPV4_PREFIX and Value := LD_ipv4_prefixes.</t>

					<t>If LD_ipv6_prefixes is not empty, add an Address TLV with Type := ADD_ADDRESS, Extension Type := IPV6_PREFIX and Value := LD_ipv6_prefixes.</t>
				</list></t>
			</list></t>
		</section>

		<section title="Local Destination Order Processing">
			<t>A Local Destination Order is processed in the DLEP-router as follows:

			<list style="numbers">
				<t>Define validity_time as the Value of the Message TLV with Type = VALIDITY_TIME.</t>

				<t>For each address object destination_mac that has an Address TLV with Type = ADD_ADDRESS and Extension Type = MAC,

				<list style="numbers">
					<t>Define interface_id as the Value of the Address TLV with Type = ADD_ADDRESS and Extension Type = MAC.</t>

					<t>If there is a Network Local Destination Tuple with NLD_radio_interface_id = interface_id and NLD_mac_address = destination_mac, remove it (there should be a maximum of one such tuples).</t>

					<t>Add a Network Local Destination Tuple with:

					<list style="symbols">
						<t>NLD_radio_interface_id := interface_id.</t>
						<t>NLD_mac_address := destination_mac.</t>
						<t>NLD_ipv4_prefixes := EMPTY.</t>
						<t>NLD_ipv6_prefixes := EMPTY.</t>
						<t>NLD_time := current_time + validity_time.</t>
					</list></t>

					<t>If there is an Address TLV with Type = ADD_ADDRESS and Extension Type = IPV4_PREFIX, set NLD_ipv4_prefixes:= TLV-Value.</t>

					<t>If there is an Address TLV with Type = ADD_ADDRESS and Extension Type = IPV6_PREFIX, set NLD_ipv6_prefixes:= TLV-Value.</t>
				</list></t>
			</list></t>
		</section>
	</section>





	<section title="Neighbor Update Order">
<t>If either the Interface Neighbor Set or the Lost Neighbor Set are not empty, the Neighbor Update Order MUST be sent by DLEP-radios in regular intervals, at least once every NEIGHBOR_UPDATE_INTERVAL.</t>

<t>A Neighbor Update Order contains the prefixes, status, and attributes (e.g. radio metrics and statistics) of one or more Neighbors of a single DLEP-radio interface. This allows the DLEP-router to receive the whole data about each Neighbor of the DLEP-radio interface in an atomic way.</t>

<t>While it is allowed to split the Neighbor Update Order for multiple Neighbors into more than one Neighbor Update Order, each Neighbor Interface Tuple and Lost Neighbor Tuple must be contained once in an Neighbor Update Order within NEIGHBOR_UPDATE_INTERVAL.</t>

<t>The Neighbor Update Order includes the Radio Interface ID of the local radio interface as the originator address.</t>

<t>The Neighbor Update Order includes a list of Neighbor MAC-addresses as address objects.</t>

<t>For each address, the Neighbor Update Order MUST contain the RADIOIF_STATUS Address TLV, which specifies if the neighbors radio interface is UP or DOWN.</t>

<t>For each address, it MAY contain one ADD_ADDRESS Address TLV of Extension-Type := MAC with a single address. This specifies the neighbor's Radio Interface ID.</t>

<t>For each address, it MAY contain one ADD_ADDRESS Address TLV of Extension-Type := IPV4_PREFIX with one or more prefix. This specifies the IP-prefixes of the neighbor.</t>

<t>For each address, it MAY contain one ADD_ADDRESS Address TLV of Extension-Type := IPV6_PREFIX with one or more prefix. This specifies the IP-prefixes of the neighbor.</t>

<t>For each address, it MAY contain one NETWORK_DATA Address TLV for each Extension-Type, which will specify the known statistics and metrics of the neighbor.</t>

		<section title="Neighbor Update Order Generation">
			<t>Each DLEP-radio MUST generate Neighbor Update Orders according to the specification in this section, each for a single DLEP-radio interface, which means for a single Local Interface Tuple.</t>

			<t>Define neighbor_set a subset of the Interface Neighbor Set with all tuples IN_radio_interface_id = LI_radio_interface_id.</t>

			<t>Define lost_neighbor_set a subset of the Lost Neighbor Set with all tuples LN_radio_interface_id = LI_radio_interface_id.</t>

			<t>neighbor_set and lost_neighbor_set MUST NOT be both empty.</t>

			<t>Each Neighbor Update Order MUST contain the following additional elements:

			<list style="symbols">
				<t>LI_radio_interface_id as the originator address.</t>

				<t>A Message TLV with Type := ORDER and Value := NEIGHBOR_UPDATE.</t>

				<t>A Message TLV with Type := VALIDITY_TIME (as specified in <xref target="RFC5497"/>) with Value := NEIGHBOR_UPDATE_HOLD_TIME (encoded as specified in <xref target="RFC5497"/>).</t>

				<t>For each Interface Neighbor Tuple in neighbor_set, add IN_mac_address as an address object (as defined in <xref target="RFC5444"/>) and apply the following steps:

				<list style="numbers">
					<t>Add an Address TLV with Type := RADIOIF_STATUS and Value := UP.</t>

					<t>If IN_neighbor_interface_id != NONE, add an Address TLV with Type := ADD_ADDRESS, Type Extension := MAC and Value := IN_neighbor_interface_id.</t>

					<t>If IN_ipv4_prefixes is not EMPTY, add an Address TLV with Type := ADD_ADDRESS, Type Extension := IPV4_PREFIX and Value := IN_ipv4_prefixes.</t>

					<t>If IN_ipv6_prefixes is not EMPTY, add an Address TLV with Type := ADD_ADDRESS, Type Extension := IPV6_PREFIX and Value := IN_ipv6_prefixes.</t>
				</list></t>

				<t>For each Lost Neighbor Tuple in lost_neighbor_set, add LN_mac_address as an address object and apply the following steps:

				<list style="numbers">
					<t>Add an Address TLV with Type := RADIOIF_STATUS and Value := DOWN.</t>

					<t>If LN_neighbor_interface_id != NONE, add an Address TLV with Type := ADD_ADDRESS, Type Extension := MAC and Value := LN_neighbor_interface_id.</t>
				</list></t>
			</list></t>
		</section>

		<section title="Neighbor Update Order Discarding">
			<t>If a Neighbor Update Order has no Originator Address, it MUST be dropped without further processing.</t>
		</section>

		<section title="Neighbor Update Order Processing">
			<t>A Neighbor Update Order is processed as follows:

			<list style="numbers">
				<t>Define interface_id as the Originator Address of the Neighbor Update Order.</t>

				<t>Define validity_time as the Value of the Message TLV with Type = VALIDITY_TIME.</t>

				<t>For each address object neighbor_mac that has an Address TLV with Type = RADIOIF_STATUS:

				<list style="numbers">
					<t>Define neighbor_status as the Value of the Address TLV with Type = RADIOIF_STATUS.</t>

					<t>If there is an Address TLV with Type = ADD_ADDRESS and Extension Type = MAC, define neighbor_radio_id as the Value of the Address TLV. If not, define neighbor_radio_id as NONE.</t>

					<t>If there is a Network Neighbor Tuple with NN_radio_interface_id = interface_id AND NN_neighbor_interface_id = neighbor_radio_id AND NN_mac_address = neighbor_mac, remove it (there should be a maximum of one).</t>

					<t>Add a Network Neighbor Tuple with:

					<list style="symbols">
						<t>NN_radio_interface_id := interface_id.</t>
						<t>NN_neighbor_interface_id := neighbor_radio_id.</t>
						<t>NN_status := neighbor_status.</t>
						<t>NN_mac_address := neighbor_mac.</t>
						<t>NN_ipv4_prefixes := EMPTY.</t>
						<t>NN_ipv6_prefixes := EMPTY.</t>
						<t>NN_time := current_time + validity_time.</t>
					</list></t>

					<t>If there is an Address TLV with Type = ADD_ADDRESS and Extension Type = IPV4_PREFIX, set NN_ipv4_prefixes := TLV-Value.</t>

					<t>If there is an Address TLV with Type = ADD_ADDRESS and Extension Type = IPV6_PREFIX, set NN_ipv6_prefixes := TLV-Value.</t>

					<t>Remove all Network Neighbor Data Tuples with NND_radio_interface_id = interface_id AND NND_neighbor_interface_id = neighbor_radio_id AND NND_mac_address = neighbor_mac.</t>

					<t>For each Address TLV with Type = NEIGHBOR_DATA, add a Network Neighbor Data Tuple with:

					<list style="symbols">
						<t>NND_radio_interface_id := interface_id.</t>
						<t>NND_neighbor_interface_id = neighbor_radio_id.</t>
						<t>NND_mac_address := neighbor_mac.</t>
						<t>NND_data_type := TLV Extension Type.</t>
						<t>NND_data_value := TLV Value.</t>
						<t>NND_time := current_time + validity_time.</t>
					</list></t>
				</list></t>
			</list></t>
		</section>
	</section>

	<section title="Setup Radio Order">
<t>If the Radio Interface Configuration Set is not empty, the Setup Radio Order MUST be sent by DLEP-routers in regular intervals, at least once every SETUP_RADIO_INTERVAL.</t>

<t>A Setup Radio Order contains the status of DLEP-radio interfaces to be configured.</t>

<t>While it is allowed to split the Setup Radio Order for multiple radio interfaces into more than one Setup Radio Order, each Radio Interface Configuration Tuple must be contained once in a Setup Radio Order within SETUP_RADIO_INTERVAL.</t>

<t>The Setup Radio Order includes a list of Radio Interface ID's as address objects.</t>

<t>For each address, the Setup Radio Order MUST contain one RADIOIF_STATUS Address TLV to specify the radio interface status.</t>

		<section title="Setup Radio Order Generation">
			<t>Each DLEP-router MUST generate Setup Radio Orders according to the specification in this section.</t>

			<t>Define interface_set a subset of the Radio Interface Configuration Set, which MUST contain at least one Radio Interface Configuration Tuple.</t>

			<t>Each Setup Radio Order MUST contain the following additional elements:

			<list style="symbols">
				<t>A Message TLV with Type := ORDER and Value := SETUP_RADIO.</t>

				<t>A Message TLV with Type := VALIDITY_TIME (as specified in <xref target="RFC5497"/>) with Value := SETUP_RADIO_HOLD_TIME (encoded as specified in <xref target="RFC5497"/>).</t>

				<t>For each Radio Interface Configuration Tuple in interface_set, add RIC_radio_interface_id as an address object (as defined in <xref target="RFC5444"/>) and apply the following steps:

				<list style="numbers">
					<t>Add an Address TLV with Type := RADIOIF_STATUS and Value := RIC_status.</t>
				</list></t>
			</list></t>
		</section>

		<section title="Setup Radio Order Processing">
			<t>A Setup Radio is processed in the DLEP-router as follows:

			<list style="numbers">
				<t>Define validity_time as the Value of the Message TLV with Type = VALIDITY_TIME.</t>

				<t>For each address object interface_id that has an Address TLV with Type = RADIOIF_STATUS,

				<list style="numbers">
					<t>Define interface_status as the Value of the Address TLV with Type = RADIOIF_STATUS.</t>

					<t>If there is an Interface Configuration Tuple with IC_radio_interface_id = interface_id, remove it (there should be a maximum of one such tuples).</t>

					<t>Add an Interface Configuration Tuple with:

					<list style="symbols">
						<t>IC_radio_interface_id := interface_id.</t>
						<t>IC_radio_status := interface_status.</t>
						<t>IC_time := current_time + validity_time.</t>
					</list></t>
				</list></t>
			</list></t>
		</section>
	</section>





	<section title="Setup Destination Order">
<t>If the Destination Configuration Set is not empty, the Setup Destination Order MUST be sent by DLEP-routers in regular intervals, at least once every SETUP_DESTINATION_INTERVAL.</t>

<t>A Setup Destination Order contains the IP-prefixes and Radio Interface ID of the local Destinations to be configured on a DLEP-radio interface.</t>

<t>While it is allowed to split the Setup Destination Order for multiple destinations into more than one Setup Destination Order, each Destination Configuration Tuple MUST be contained once in a Setup Destination Order within SETUP_DESTINATION_INTERVAL.</t>

<t>The Setup Destination Order includes a list of to be configured local Destination MAC-addresses as address objects.</t>

<t>For each address, the Setup Destination Order MUST contain one ADD_ADDRESS Address TLV of Extension-Type := MAC with a single address. This specifies the Radio Interface ID of the local Destination.</t>

<t>For each address, it MAY contain one ADD_ADDRESS Address TLV of Extension-Type := IPV4_PREFIX with one or more prefix. This specifies the IP-prefixes of the local Destination.</t>

<t>For each address, it MAY contain one ADD_ADDRESS Address TLV of Extension-Type := IPV6_PREFIX with one or more prefix. This specifies the IP-prefixes of the local Destination.</t>

		<section title="Setup Destination Order Generation">
			<t>Each DLEP-router MUST generate Setup Destination Orders according to the specification in this section.</t>

			<t>Define destination_set a subset of the Destination Configuration Set, which MUST contain at least one Destination Configuration Tuple.</t>

			<t>Each Setup Destination Order MUST contain the following additional elements:

			<list style="symbols">
				<t>A Message TLV with Type := ORDER and Value := SETUP_DESTINATION.</t>

				<t>A Message TLV with Type := VALIDITY_TIME (as specified in <xref target="RFC5497"/>) with Value := SETUP_DESTINATION_HOLD_TIME (encoded as specified in <xref target="RFC5497"/>).</t>

				<t>For each Destination Configuration Tuple in destination_set, add DC_mac_address as an address object (as defined in <xref target="RFC5444"/>) and apply the following steps:

				<list style="numbers">
					<t>Add an Address TLV with Type := ADD_ADDRESS, Extension Type := MAC and Value := DC_radio_interface_id.</t>

					<t>If DC_ipv4_prefixes is not empty, add an Address TLV with Type := ADD_ADDRESS, Extension Type := IPV4_PREFIX and Value := DC_ipv4_prefixes.</t>

					<t>If DC_ipv6_prefixes is not empty, add an Address TLV with Type := ADD_ADDRESS, Extension Type := IPV6_PREFIX and Value := DC_ipv6_prefixes.</t>
				</list></t>
			</list></t>
		</section>

		<section title="Setup Destination Order Processing">
			<t>A Setup Destination Order is processed in the DLEP-radio as follows:

			<list style="numbers">
				<t>Define validity_time as the Value of the Message TLV with Type = VALIDITY_TIME.</t>

				<t>For each address object destination_mac that has an Address TLV with Type = ADD_ADDRESS and Extension Type = MAC,

				<list style="numbers">
					<t>Define interface_id as the Value of the Address TLV with Type = ADD_ADDRESS and Extension Type = MAC.</t>

					<t>If there is a Local Destination Tuple with LD_radio_interface_id = interface_id and LD_mac_address = destination_mac, remove it (there should be a maximum of one  tuple).</t>

					<t>Add a Local Destination Tuple with:

					<list style="symbols">
						<t>LD_radio_interface_id := interface_id.</t>
						<t>LD_mac_address := destination_mac.</t>
						<t>LD_ipv4_prefixes := EMPTY.</t>
						<t>LD_ipv6_prefixes := EMPTY.</t>
						<t>LD_time := current_time + validity_time.</t>
					</list></t>

					<t>If there is an Address TLV with Type = ADD_ADDRESS and Extension Type = IPV4_PREFIX, set LD_ipv4_prefixes:= TLV-Value.</t>

					<t>If there is an Address TLV with Type = ADD_ADDRESS and Extension Type = IPV6_PREFIX, set LD_ipv6_prefixes:= TLV-Value.</t>
				</list></t>
			</list></t>
		</section>
	</section>

	<section title="IANA Considerations" anchor="IANA Considerations">
<t>This specification defines one Message Type, which MUST be allocated from the "Message Types" repository of <xref target="RFC5444"/>, 1 Message TLV Types, which MUST be allocated from the "Message TLV Types" repository of <xref target="RFC5444"/>, and 5 Address Block TLV Types, which MUST be allocated from the "Address Block TLV Types" repository of <xref target="RFC5444"/>.</t>

		<section title="Expert Review: Evaluation Guidelines">
<t>For the registries where an Expert Review is required, the designated expert SHOULD take the same general recommendations into consideration as are specified by <xref target="RFC5444"/>.</t>
		</section>

		<section title="Message Types">
<t>This specification defines one Message Type, to be allocated from the 0-223 range of the "Message Types" namespace defined in <xref target="RFC5444"/>, as specified in <xref target="tbl_msgtypes"/>.</t>

			<texttable anchor="tbl_msgtypes" title="Message type assignment.">
				<ttcol align="center">Type</ttcol>
				<ttcol align="left">Description</ttcol>
				<c>TBD1</c>
				<c>DLEP: Dynamic link exchange protocol</c>
			</texttable>
		</section>

		<section title="Message-Type-Specific TLV Type Registries">
<t>IANA is requested to create a registry for Message-Type-specific Message TLVs for DLEP messages, in accordance with Section 6.2.1 of <xref target="RFC5444"/>, and with initial assignments and allocation policies as specified in <xref target="tbl_msgspec_msgtlvs"/>.</t>

			<texttable anchor="tbl_msgspec_msgtlvs" title="DLEP Message-Type-specific Message TLV Type">
				<ttcol align="center">Type</ttcol>
				<ttcol align="left">Description</ttcol>
				<ttcol align="left">Allocation Policy</ttcol>
				<c>128-223</c>
				<c>Unassigned</c>
				<c>Expert Review</c>
			</texttable>

<t>IANA is requested to create a registry for Message-Type-specific Address Block TLVs for DLEP messages, in accordance with Section 6.2.1 of <xref target="RFC5444"/>, and with initial assignments and allocation policies as specified in <xref target="tbl_msgspec_addrtlvs"/>.</t>

			<texttable anchor="tbl_msgspec_addrtlvs" title="DLEP Message-Type-specific Address Block TLV Types">
				<ttcol align='center'>Type</ttcol>
				<ttcol align='left'>Description</ttcol>
				<ttcol align='left'>Allocation Policy</ttcol>
				<c>128-223</c>
				<c>Unassigned</c>
				<c>Expert Review</c>
			</texttable>
		</section>

		<section title="Message TLV Types">
			<t>TODO: allocate ORDER (message specific?)</t>
		</section>

		<section title="Address Block TLV Types">
			<t>TODO: allocate RADIOIF_STATUS (message specific?)</t>
			<t>TODO: allocate DESCRIPTION (message specific?)</t>
			<t>TODO: allocate ADD_ADDRESS (message specific?)</t>
			<t>TODO: allocate NETWORK_DATA (message specific?)</t>
			<t>TODO: allocate NEIGHBOR_DATA (message specific?)</t>
		</section>
	</section>

	<section title="Further work">
		<t>There are two aspects of <xref target="dlep02"/> that have not been part of this document:
		<list style="symbols">
			<t>Configuration of the radio channel.</t>
			<t>Managing of traffic credit tokens.</t>
		</list></t>

		<t>The author of this documents has the opinion that there is also demand for a discussion on the following questions:
		<list style="symbols">
			<t>What is the exact difference between Latency and Expected-Forwarding-Delay and how shall both of them be defined?</t>
			<t>What are the full consequences of multicast MAC-addresses as destinations?</t>
			<t>Is it possible to allow multiple devices (DLEP-routers and end-devices) connected with an Ethernet Switch to a DLEP-radio?</t>
		</list></t>
	</section>
	<section title='Security Considerations'>
		<t>Currently, this protocol does not specify any special security measures.</t>
	</section>
</middle>
<back>
	<references title="Normative References">
		<reference anchor="RFC2119">
			<front>
				<title abbrev="RFC2119">
					Key words for use in RFCs to Indicate Requirement Levels
				</title>
				<author initials="S." surname="Bradner" fullname="Scott Bradner">
					<organization abbrev="HU">Harvard University</organization>
				</author>
				<date month="March" year="1997"/>
			</front>
			<seriesInfo name="RFC" value="2119"/>
			<seriesInfo name="BCP" value="14"/>
		</reference>
		<reference anchor="RFC5148">
			<front>
				<title abbrev="RFC5148">
					Jitter Considerations in Mobile Ad Hoc Networks (MANETs)	
				</title>
				<author initials="T.H." surname="Clausen" fullname="Thomas Heide Clausen">
					<organization abbrev="X">Ecole Polytechnique, France</organization>
				</author>
				<author initials="C." surname="Dearlove" fullname="C. Dearlove">
					<organization>BAE Systems</organization>
				</author>
				<author initials="B." surname="Adamson" fullname="B. Adamson">
					<organization abbrev="NRL">U.S. Naval Research Laboratory</organization>
				</author>
				<date month="February" year="2008"/>
			</front>
			<seriesInfo name="RFC" value="5148"/>
		</reference>
		<reference anchor="RFC5444">
			<front>
				<title abbrev="RFC5444">
					Generalized Mobile Ad Hoc Network (MANET) Packet/Message Format
				</title>
				<author initials="T.H." surname="Clausen" fullname="Thomas Heide Clausen">
					<organization abbrev="X">Ecole Polytechnique, France</organization>
				</author>
				<author initials="C." surname="Dearlove" fullname="C. Dearlove">
					<organization>BAE Systems</organization>
				</author>
				<author initials="J." surname="Dean" fullname="J. Dean">
					<organization abbrev="NRL">Naval Research Laboratory</organization>
				</author>
				<author initials="C." surname="Adjih" fullname="C. Adjih">
					<organization abbrev="INRIA">INRIA Rocquencourt</organization>
				</author>
				<date month="February" year="2009"/>
			</front>
			<seriesInfo name="RFC" value="5444"/>
		</reference>
		<reference anchor="RFC5497">
			<front>
				<title abbrev="RFC5497">
					Representing Multi-Value Time in Mobile Ad Hoc Networks (MANETs)
				</title>
				<author initials="T.H." surname="Clausen" fullname="Thomas Heide Clausen">
					<organization abbrev="X">Ecole Polytechnique, France</organization>
				</author>
				<author initials="C." surname="Dearlove" fullname="C. Dearlove">
					<organization>BAE Systems</organization>
				</author>
				<date month="March" year="2009"/>
			</front>
			<seriesInfo name="RFC" value="5497"/>
		</reference>
		<reference anchor="RFC6130">
			<front>
				<title abbrev="RFC6130">
					Mobile Ad Hoc Network (MANET) Neighborhood Discovery Protocol (NHDP)
				</title>
				<author initials="T.H." surname="Clausen" fullname="Thomas Heide Clausen">
					<organization abbrev="X">Ecole Polytechnique, France</organization>
				</author>
				<author initials="C." surname="Dearlove" fullname="C. Dearlove">
					<organization>BAE Systems</organization>
				</author>
				<author initials="J." surname="Dean" fullname="J. Dean">
					<organization abbrev="NRL">Naval Research Laboratory</organization>
				</author>
				<date month="April" year="2011"/>
			</front>
			<seriesInfo name="RFC" value="6130"/>
		</reference>
		<reference anchor="RFC6622">
			<front>
				<title abbrev="RFC6622">
					Integrity Check Value and Timestamp TLV Definitions for Mobile Ad Hoc Networks (MANETs)
				</title>
				<author initials="T.H." surname="Clausen" fullname="Thomas Heide Clausen">
					<organization abbrev="X">Ecole Polytechnique, France</organization>
				</author>
				<author initials="U." surname="Herberg" fullname="U.Herberg">
					<organization>Fujitsu Laboratories of America</organization>
				</author>
				<date month="July" year="2012"/>
			</front>
			<seriesInfo name="RFC" value="6622"/>
		</reference>
	</references>
	<references title='Informative References'>
		<reference anchor="olsrv2">
			<front>
				<title>
					The Optimized Link State Routing Protocol version 2
				</title>
				<author initials="T.H." surname="Clausen" fullname="Thomas Heide Clausen">
					<organization abbrev="X">Ecole Polytechnique, France</organization>
				</author>
				<author initials="C." surname="Dearlove" fullname="C. Dearlove">
					<organization abbrev="INRIA">BAE Systems</organization>
				</author>
				<author initials="P." surname="Jacquet" fullname="P. Jacquet">
					<organization>Alcatel-Lucent Bell Labs</organization>
				</author>
				<author initials="U." surname="Herberg" fullname="U.Herberg">
					<organization>Fujitsu Laboratories of America</organization>
				</author>
				<date month="September" year="2009"/>
			</front>
			<seriesInfo name="draft-ietf-manet-olsrv2-15" value="(work in progress)"/>
		</reference>
		<reference anchor='dlep02'>
			<front>
				<title>Dynamic Link Exchange Protocol (DLEP)</title>
				<author initials='S.R.' surname='Ratliff' fullname='Stan Ratliff'>
					<organization>
						Cisco
					</organization>
				</author>
				<author initials='B.B.' surname='Berry' fullname='Bo Berry'>
					<organization>
						Cisco
					</organization>
				</author>
				<author initials='G.H.' surname='Harrison' fullname='Greg Harrison'>
					<organization>
						Cisco
					</organization>
				</author>
				<author initials='S.J..' surname='Jury' fullname='Shawn Jury'>
					<organization>
						NetApp
					</organization>
				</author>
				<author initials='D.S.' surname='Satterwhite' fullname='Darryl Satterwhite'>
					<organization>
						Cisco
					</organization>
				</author>
				<date month="February" year="2012"/>
			</front>
			<seriesInfo name='draft-ietf-manet-dlep-02' value="(work in progress)" />
		</reference>
	</references>

	<section title="RFC5444-DLEP Message Examples">
<t>DLEP messages are instances of <xref target="RFC5444"/> messages, and this protocol supports any combination of message header options and address encodings, enabled by <xref target="RFC5444"/> that convey the required information. As a consequence, there is no single way to represent how all DLEP messages look.</t>

		<section title="Interface Update Order Example">
<t>The Interface Update Order is used by DLEP-radios to announce their radio interfaces. The status of the interface, an optional description and a number of optional network based attributes can be attached to each radio interface.</t>

<t>In the following example that is depicted in <xref target="fig_dlep_inupd_example_1"/>, we see a simple Interface Update Order of a DLEP-radio with a single interface which is up and there are no further attributes set.</t>

<t>The DLEP message's four bit Message Flags (MF) field has value 0, indicating that no optional message header fields are present. Its four bit Message Address Length (MAL) field has value 5, indicating addresses in the message have a length of six octets, here being Radio Interface IDs. The overall message length is 28 octets.</t>

<t>The message contains a Message TLV Block with content length 8 octets containing two Message TLVs, of types VALIDITY_TIME and ORDER. Each uses a Message TLV with Flags octet (MTLVF) value 16, indicating that each has a Value, and each has a Value Length of 1 octet. The Value included in the first TLV is a time code (as defined in <xref target="RFC5497"/>) representing the parameters INTERFACE_UPDATE_HOLD_TIME. The Value included in the second TLV is a Order ID, respectively INTERFACE_UPDATE (see <xref target="msg_tlvs"/>).</t>

<t>The message has a single Address Block containing one address. The Address Block Flags octet (ABF) value 0 indicates an no address Head, no address Tail, and no address prefixes. The Address Block is followed by the full Radio Interface ID.</t>

<t>The following Address Block TLV Block (content length 4 octets) includes one Address Block TLV. The TLV is a RADIOIF_STATUS Address Block TLV with Flags octet (ATLVF) value 16, which indicates that a single address, with index 0 (implicit) belongs to an interface with the status UP (the one octet Value UP indicates this).</t>
			<figure anchor='fig_dlep_inupd_example_1'>
				<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     DLEP      | MF=0  | MAL=5 |      Message Length = 28      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Message TLV Block Length = 8  | VALIDITY_TIME |  MTLVF = 16   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Value Len = 1 | Value (Time)  |    ORDER      |  MTLVF = 16   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Value Len = 1 | INTERF.UPD.   | Num Addrs = 1 |   ABF = 0     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| RIID 1 Byte 1 | RIID 1 Byte 2 | RIID 1 Byte 3 | RIID 1 Byte 4 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| RIID 1 Byte 5 | RIID 1 Byte 6 | Address TLV Block Length = 4  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| RADIOIF_STATUS|  ATLVF = 16   | Value Len = 1 |  VALUE (UP)   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
				</artwork>
				<postamble>Example of a simple Interface Update Order.</postamble>
			</figure>

   <t>The second example (see <xref target="fig_dlep_inupd_example_2"/>) is a more complex Interface Update Order of a DLEP-radio with two interface (first up, second down), each with a 4 character description (both different) and the supported data-rate (both have the same data rate). The two Radio Interface IDs have the common header HEAD_1/HEAD_2/HEAD_3.</t>

<t>The DLEP message's four bit Message Flags (MF) field has value 0, indicating that no optional message header fields are present. Its four bit Message Address Length (MAL) field has value 5, indicating addresses in the message have a length of six octets, here being Radio Interface IDs. The overall message length is 56 octets.</t>

<t>The message contains a Message TLV Block with content length 8 octets containing two Message TLVs, of types VALIDITY_TIME and ORDER. Each uses a Message TLV with Flags octet (MTLVF) value 16, indicating that each has a Value, and each has a Value Length of 1 octet. The Value included in the first TLV is a time code (as defined in <xref target="RFC5497"/>) representing the parameters INTERFACE_UPDATE_HOLD_TIME. The Value included in the second TLV is a Order ID, respectively INTERFACE_UPDATE (see <xref target="msg_tlvs"/>).</t>

<t>The message has a single Address Block containing two address. The Address Block Flags octet (ABF) value 128, indicates an address Head, but no address Tail and Prefixes. The Head Length of 3 octets indicates address Mid sections of 3 octets each.</t>

<t>The following Address Block TLV Block (content length 28 octets) includes three Address Block TLVs. The first TLV is a RADIOIF_STATUS Address Block TLV with Flags octet (ATLVF) value 20, which indicates that it contains a value for each of the addresses (UP/DOWN). The second TLV is a DESCRIPTION Address Block TLV with Flags octet (ATLVF) value 20 too, and a four byte value with the descriptions for each address. The last TLV is a NETWORK_DATA TLV with Flags octet (ATLVF) value 144, which indicates an TLV extension type and a single value for both addresses.</t>

			<figure anchor='fig_dlep_inupd_example_2'>
				<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     DLEP      | MF=0  | MAL=5 |      Message Length = 56      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Message TLV Block Length = 8  | VALIDITY_TIME |  MTLVF = 16   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Value Len = 1 | Value (Time)  |    ORDER      |  MTLVF = 16   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Value Len = 1 | INTERF.UPD.   | Num Addrs = 2 |   ABF = 128   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Head L. = 3  |     HEAD 1    |     HEAD 2    |     HEAD 3    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| RIID 1 Byte 4 | RIID 1 Byte 5 | RIID 1 Byte 6 | RIID 2 Byte 4 |  
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| RIID 2 Byte 5 | RIID 2 Byte 6 | Address TLV Block Length = 28 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| RADIOIF_STATUS|   ATLVF = 20  | Value Len = 2 |  VALUE (UP)   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| VALUE (DOWN)  |  DESCRIPTION  |   ATLVF = 20  | Value Len = 8 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                     Description Interface 1                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                     Description Interface 2                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| NETWORK_DATA  |  ATLVF = 144  |  SUPP. RATES  | Value Len = 8 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|               Common Supported Data Rate Part 1               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|               Common Supported Data Rate Part 2               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
				</artwork>
				<postamble>Example of a simple Interface Update Order.</postamble>
			</figure>
		</section>
		<section title="Neighbor Update Order Example">
<t>The Neighbor Update Order is used by DLEP-radios to announce neighbors of their radio interfaces. The status of the neighbor, the neighbors IP addresses and a number of metrics and statistics can be attached to each neighbor.</t>

<t>In the following example that is depicted in <xref target="fig_dlep_neupd_example_1"/>, we see a Neiggbor Update Order of a DLEP-radio with a four neighbors, three of them up and one down. All of them have their radio interface_id, the three active neighbors have a relative link quality and the second neighbor also has an IP address set. The four Neighbor MAC-addresses have the common header HEAD_1/HEAD_2/HEAD_3.</t>

<t>The DLEP message's four bit Message Flags (MF) field has value 128, indicating that an originator address message header field is present. Its four bit Message Address Length (MAL) field has value 5, indicating addresses in the message have a length of six octets, here being MAC-addresses. The overall message length is 83 octets.</t>

<t>The message contains a Message TLV Block with content length 8 octets containing two Message TLVs, of types VALIDITY_TIME and ORDER. Each uses a Message TLV with Flags octet (MTLVF) value 16, indicating that each has a Value, and each has a Value Length of 1 octet. The Value included in the first TLV is a time code (as defined in <xref target="RFC5497"/>) representing the parameters NEIGHBOR_UPDATE_HOLD_TIME. The Value included in the second TLV is a Order ID, respectively NEIGHBOR_UPDATE (see <xref target="msg_tlvs"/>).</t>

<t>The message has a single Address Block containing three addresses. The Address Block Flags octet (ABF) value 128 indicates an address Head, but no address Tail and prefixes. The Head Length of 3 octets indicates address Mid sections of 3 octets each.</t>

<t>The following Address Block TLV Block (content length 42 octets) includes three Address Block TLVs. The first TLV is a RADIOIF_STATUS Address Block TLV with Flags octet (ATLVF) value 20, which indicates that each address has a value of its own (two times UP, once DOWN). The second TLV is an ADD_ADDRESS Address Block TLV with Flags octet (ATLVF) value 148, which indicates a TLV Type Extension (MAC) and a value of its own. Its followed by three neighbor Radio Interface IDs, each six octets. The third TLV is a NEIGHBOR_DATA Address Block TLV with Flag octet (ATLVF) value 180, which indicates a TLV Type Extension (RELATIVE_LQ) and a value for each of the first two addresses. The last TLV is an ADD_ADDRESS Address Block TLV with Flags octet (ATLVF) 208, which indicates a TLV Type Extension (IPV4_PREFIX) for a the second address.</t>

			<figure anchor='fig_dlep_neupd_example_1'>
				<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     DLEP      | MF=128| MAL=5 |      Message Length = 83      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|              Local Radio Interface ID Part 1                  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Local R. Interface ID Part 2 | Message TLV Block Length = 8  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| VALIDITY_TIME |  MTLVF = 16   | Value Len = 1 | Value (Time)  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    ORDER      |  MTLVF = 16   | Value Len = 1 |  NEIGHB.UPD.  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Num Addrs = 3 |   ABF = 128   |  Head L. = 3  |     HEAD 1    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     HEAD 2    |     HEAD 3    | MAC 1  Byte 4 | MAC 1  Byte 5 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| MAC 1  Byte 6 | MAC 2  Byte 4 | MAC 2  Byte 5 | MAC 2  Byte 6 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| MAC 3  Byte 4 | MAC 3  Byte 5 | MAC 3  Byte 6 | Address TLV - |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Block L. = 42 | RADIOIF_STATUS|   MTLVF = 20  | Value Len = 3 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  VALUE (UP)   |   VALUE (UP)  | VALUE (DOWN)  |  ADD_ADDRESS  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  ATLVF = 148  |      MAC      | Value L. = 18 |  N1 RIID B.1  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  N1 RIID B.2  |  N1 RIID B.3  |  N1 RIID B.4  |  N1 RIID B.5  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  N1 RIID B.6  |  N2 RIID B.1  |  N2 RIID B.2  |  N2 RIID B.3  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  N2 RIID B.4  |  N2 RIID B.5  |  N2 RIID B.6  |  N3 RIID B.1  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  N3 RIID B.2  |  N3 RIID B.3  |  N3 RIID B.4  |  N3 RIID B.5  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  N3 RIID B.6  | NEIGHBOR_DATA |  ATLVF = 180  |  RELATIVE_LQ  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| index-start=0 |  index-end=1  | Value Len = 2 |    REL_LQ 1   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    REL_LQ 2   |  ADD_ADDRESS  |  ATLVF = 208  |  IPV4_PREFIX  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| index-start=1 | Value Len = 5 | IPaddr Byte 1 | IPaddr Byte 2 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| IPaddr Byte 3 | IPaddr Byte 4 | IPaddr Prefix |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
				</artwork>
				<postamble>Example of an Neighbor Update Order.</postamble>
			</figure>
		</section>
		<section title="Setup Radio Order Example">
<t>The Setup Router Order is used by DLEP-routers to set the status of the DLEP-radios interfaces.</t>

<t>In the following example that is depicted in <xref target="fig_dlep_setro_example_1"/>, we see a Setup Router Order for a DLEP-radio with two interfaces. Both of them are configured to status UP.</t>

<t>The DLEP message's four bit Message Flags (MF) field has value 0, indicating that no optional message header fields are present. Its four bit Message Address Length (MAL) field has value 5, indicating addresses in the message have a length of six octets, here being Radio Interface IDs. The overall message length is 32 octets.</t>

<t>The message contains a Message TLV Block with content length 8 octets containing two Message TLVs, of types VALIDITY_TIME and ORDER. Each uses a Message TLV with Flags octet (MTLVF) value 16, indicating that each has a Value, and each has a Value Length of 1 octet. The Value included in the first TLV is a time code (as defined in <xref target="RFC5497"/>) representing the parameters SETUP_RADIO_HOLD_TIME. The Value included in the second TLV is a Order ID, respectively SETUP_RADIO (see <xref target="msg_tlvs"/>).</t>

<t>The message has a single Address Block containing two addresses. The Address Block Flags octet (ABF) value 128 indicates an address Head, but no address Tail and prefixes. The Head Length of 3 octets indicates address Mid sections of 3 octets each.</t>

<t>The following Address Block TLV Block (content length 4 octets) includes one Address Block TLV. The TLV is a RADIOIF_STATUS Address Block TLV with Flags octet (ATLVF) value 16, which indicates the same value (UP) for both addresses.</t>

			<figure anchor='fig_dlep_setro_example_1'>
				<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     DLEP      | MF=0  | MAL=5 |      Message Length = 32      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Message TLV Block Length = 8  | VALIDITY_TIME |  MTLVF = 16   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Value Len = 1 | Value (Time)  |    ORDER      |  MTLVF = 16   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Value Len = 1 | SETUP_RADIO   | Num Addrs = 2 |   ABF = 128   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Head L. = 3  |     HEAD 1    |     HEAD 2    |     HEAD 3    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| RIID 1 Byte 4 | RIID 1 Byte 5 | RIID 1 Byte 6 | RIID 2 Byte 4 |  
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| RIID 2 Byte 5 | RIID 2 Byte 6 | Address TLV Block Length = 4  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| RADIOIF_STATUS|   ATLVF = 16  | Value Len = 1 |  VALUE (UP)   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
				</artwork>
				<postamble>Example of an Setup Router Order.</postamble>
			</figure>
		</section>
		<section title="Setup Destination Order">
<t>The Setup Destination Order is used by DLEP-routers to set its local IP addresses for a destinationon the DLEP-radios interfaces.</t>

<t>In the following example that is depicted in <xref target="fig_dlep_setde_example_1"/>, we see a Setup Destination Order for a DLEP-radio with one interfaces. The router configures a single MAC-address with one IPv4 address and two IPv6 addresses for this interface.</t>

<t>The DLEP message's four bit Message Flags (MF) field has value 0, indicating that no optional message header fields are present. Its four bit Message Address Length (MAL) field has value 5, indicating addresses in the message have a length of six octets, here being MAC addresses. The overall message length is 81 octets.</t>

<t>The message contains a Message TLV Block with content length 8 octets containing two Message TLVs, of types VALIDITY_TIME and ORDER. Each uses a Message TLV with Flags octet (MTLVF) value 16, indicating that each has a Value, and each has a Value Length of 1 octet. The Value included in the first TLV is a time code (as defined in <xref target="RFC5497"/>) representing the parameters SETUP_DESTINATION_HOLD_TIME. The Value included in the second TLV is a Order ID, respectively SETUP_DESTINATION (see <xref target="msg_tlvs"/>).</t>

<t>The message has a single Address Block containing one addresses. The Address Block Flags octet (ABF) value 0 indicates an no address Head, no address Tail, and no address prefixes. The Address Block is followed by the full MAC-address of the Destination.</t>

<t>The following Address Block TLV Block (content length 57 octets) includes three Address Block TLV. All TLVs are ADD_ADDRESS Address Block TLVs with Flags octet (ATLVF) value 144, which indicates a TLV Type Extension and a value. The first TLV (IPV4_PREFIX Type Extension) contains a single IPv4 address with prefix, the second one (IPV6_PREFIX Type Extension) contains two IPv6 addresses with prefix.</t>

			<figure anchor='fig_dlep_setde_example_1'>
				<artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     DLEP      | MF=0  | MAL=5 |      Message Length = 81      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Message TLV Block Length = 8  | VALIDITY_TIME |  MTLVF = 16   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Value Len = 1 | Value (Time)  |    ORDER      |  MTLVF = 16   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Value Len = 1 | SETUP_DEST.   | Num Addrs = 1 |    ABF = 0    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| MAC 1  Byte 1 | MAC 1  Byte 2 | MAC 1  Byte 3 | MAC 1  Byte 4 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| MAC 1  Byte 5 | MAC 1  Byte 6 | Address TLV Block Length = 57 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  ADD_ADDRESS  |  ATLVF = 144  |      MAC      | Value Len = 6 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  RIID Byte 1  |  RIID Byte 2  |  RIID Byte 3  |  RIID Byte 4  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  RIID Byte 5  |  RIID Byte 6  |  ADD_ADDRESS  |  ATLVF = 144  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  IPV4_PREFIX  | Value Len = 5 |  IPv4 Byte 1  |  IPv4 Byte 1  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  IPv4 Byte 1  |  IPv4 Byte 1  |  Prefix (32)  |  ADD_ADDRESS  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  ATLVF = 144  |  IPV6_PREFIX  | Value L. = 34 | IPv6 1 Byte 1 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| IPv6 1 Byte 2 | IPv6 1 Byte 3 | IPv6 1 Byte 4 | IPv6 1 Byte 5 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| IPv6 1 Byte 6 | IPv6 1 Byte 7 | IPv6 1 Byte 8 | IPv6 1 Byte 9 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| IPv6 1 B. 10  | IPv6 1 B. 11  | IPv6 1 B. 12  | IPv6 1 B. 13  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| IPv6 1 B. 14  | IPv6 1 B. 15  | IPv6 1 B. 16  | IPV6 1 Prefix |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| IPv6 2 Byte 1 | IPv6 2 Byte 2 | IPv6 2 Byte 3 | IPv6 2 Byte 4 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| IPv6 2 Byte 5 | IPv6 2 Byte 6 | IPv6 2 Byte 7 | IPv6 2 Byte 8 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| IPv6 2 Byte 9 | IPv6 2 B. 10  | IPv6 2 B. 11  | IPv6 2 B. 12  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| IPv6 2 B. 13  | IPv6 2 B. 14  | IPv6 2 B. 15  | IPv6 2 B. 16  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| IPv6 2 Prefix |
+-+-+-+-+-+-+-+-+
				</artwork>
				<postamble>Example of an Setup Destination Order.</postamble>
			</figure>
		</section>
		<section title="Local Destination Order Example">
			<t>The Local Destination Order looks exactly like the Setup Destination Order, only that it is sent from the DLEP-radio to the DLEP-router.</t>
		</section>
	</section>
</back>
</rfc>
