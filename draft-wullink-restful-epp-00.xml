<?xml version='1.0' ?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<rfc ipr='trust200902' category="std" docName="draft-wullink-restful-epp-00">
<?rfc toc="yes"?>         <!-- generate a table of contents -->
<?rfc tocdepth="4"?>      <!-- extra layer of headings shown -->
<?rfc symrefs="yes"?>     <!-- use anchors instead of numbers for references -->
<?rfc sortrefs="yes" ?>   <!-- alphabetize the references -->
<?rfc compact="yes" ?>    <!-- conserve vertical whitespace -->
<?rfc subcompact="no" ?>  <!-- but keep a blank line between list items -->

 <front>
        <title abbrev="REPP">RESTful interface for the Extensible Provisioning Protocol</title>
        <author initials='M.' surname='Wullink'
                fullname='Maarten Wullink'>
            <organization>SIDN</organization>

            <address>
                <postal>
                    <street>Meander 501</street>
                    <street></street>
                    <city>Arnhem</city> <region></region>
                    <code>6825 MD</code>
                    <country>NL</country>
                </postal>

                <phone>+31 26 3525555</phone>
                <email>maarten.wullink@sidn.nl</email>
                <uri>https://sidn.nl/</uri>
            </address>
        </author>

        <author initials='M.' surname='Davids'
                fullname='Marco Davids'>
            <organization>SIDN Labs</organization>

            <address>
                <postal>
                    <street>Meander 501</street>
                    <street></street>
                    <city>Arnhem</city> <region></region>
                    <code>6825 MD</code>
                    <country>NL</country>
                </postal>

                <phone>+31 26 3525555</phone>
                <email>marco.davids@sidn.nl</email>
                <uri>https://sidn.nl/</uri>
            </address>
        </author>


        <author initials='R.' surname='Gieben'
                fullname='R. (Miek) Gieben'>
            <organization>SIDN Labs</organization>

            <address>
                <postal>
                    <street>Meander 501</street>
                    <street></street>
                    <city>Arnhem</city> <region></region>
                    <code>6825 MD</code>
                    <country>NL</country>
                </postal>

                <phone>+31 26 3525555</phone>
                <email>miek.gieben@sidn.nl</email>
                <uri>https://sidn.nl/</uri>
            </address>
        </author>

        <date month='April' year='2012' />

        <area>Internet</area>
        <workgroup>Network Working Group</workgroup>
        <keyword>REPP</keyword>
        <keyword>REST</keyword>
        <keyword>EPP</keyword>
        <keyword>RESTful</keyword>
        <abstract>
            <t>
                 This document 
                 specifies a 'RESTful interface for EPP' (REPP) with the aim to
                 improve efficiency and interoperability of EPP systems.
            </t>
            <t>  
                 This document includes a new EPP Protocol Extension as well as a 
                 mapping of <xref target="RFC5730"/>
                 XML-commands to an HTTP based (RESTful) interface.
                 Existing semantics and mappings as defined in 
                 <xref target="RFC5731"/>, <xref target="RFC5732"/> and <xref target="RFC5733"/>
                 are largely retained and reusable in RESTful EPP.
            </t>
            <t>
                With REPP, no session is created on the EPP server. Each request from   
                client to server will contain all of the information necessary to       
                understand the request. The server will close the connection after each 
                HTTP request.                                                           
            </t>    
        </abstract>
</front>

<middle>

  
<section title="Introduction" anchor="introduction">
  
  <t>
    This document describes a new EPP Protocol Extension and a mapping
    of <xref target="RFC5730"/> XML-commands to a
    <xref target="REST"/> interface which, in contrast to the
    current EPP specification, is stateless. It aims to provide a
    mechanism that is more suitable for complex, high availability
    environments, as well as for environments where TCP connections can
    be unreliable.
  </t>
  <t>
    The newly defined protocol extensions described in this memo
    leverage the HTTP protocol <xref target="RFC2616"/> and the
    principles of <xref target="REST"/>. Conforming to the REST
    constraints is generally referred to as being "RESTful".
    Hence we dubbed the new protocol extension: "RESTful EPP"
    or "REPP" for short.
  </t>
  <t>
    RFC 5730 <xref target="RFC5730"/> Section 2.1 describes that
    EPP can be layered over multiple transport protocols. Currently, the
    EPP transport over TCP <xref target="RFC5734"/> is the only
    widely deployed transport mapping for EPP. This same section defines
    that newly defined transport mappings must preserve the stateful
    nature of EPP.
  </t>
  <t>
    With REPP, no session is created on the EPP server. Each request
    from client to server will contain all of the information necessary
    to understand the request. The server will close the connection
    after each HTTP request.
  </t>
  <t>
    With a stateless mechanism, some drawbacks of EPP (as mentioned in
    <xref target="drawbacks-associated-with-stateful-epp"/>) are
    circumvented.
  </t>
  <t>
    A good understanding of the EPP base protocol specification
    <xref target="RFC5730"/> is advised, to grasp the extension
    and mapping described in this document.
  </t>
  <t>
    The key words "MUST", "MUST NOT",
    "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED",
    "MAY", and "OPTIONAL" in this document are to be
    interpreted as described in <xref target="RFC2119"/>.
  </t>
</section>
<section title="Terminology" anchor="terminology">
  
  <t>
    In this document the following terminology is used.
  </t>
  <t><list style="empty">
    <t>
      
        REST - Representational State Transfer
        (<xref target="REST"/>). An architectural style.
      
    </t>
    <t>
      
        RESTful - A RESTful web service is a web service implemented
        using HTTP and the principles of <xref target="REST"/>.
      
    </t>
    <t>
      
        EPP RFCs - This is a reference to the EPP version 1.0
        specifications <xref target="RFC5730"/>,
        <xref target="RFC5731"/>, <xref target="RFC5732"/>
        and <xref target="RFC5733"/>.
      
    </t>
    <t>
      
        Stateful EPP - The definition according to Section 2 of
        <xref target="RFC5730"/>.
      
    </t>
    <t>
      
        Stateless EPP or REPP - The RESTful EPP interface described in
        this document.
      
    </t>
    <t>
      
        URL - A Uniform Resource Locator as defined in
        <xref target="RFC3986"/>.
      
    </t>
    <t>
      
        Resource - A network data object or service that can be
        identified by a URL.
      
    </t>
    <t>
      
        Interface mapping - The mapping of
        <xref target="RFC5730"/> XML commands to Stateless EPP.
      
    </t>
  </list></t>
</section>
<section title="Conventions Used in This Document" anchor="conventions-used-in-this-document">
  
  <t>
    XML is case sensitive. Unless stated otherwise, XML specifications
    and examples provided in this document MUST be interpreted in the
    character case presented to develop a conforming implementation.
  </t>
</section>
<section title="Stateless EPP or REPP" anchor="stateless-epp-or-repp">
  
  <t>
    REPP is designed to solve, in the spirit of
    <xref target="RFC3375"/>, the drawbacks as mentioned in the
    next paragraph and yet maintain compatibility with existing object
    mapping definitions.
  </t>
  <t>
    The design intent is to provide a clear, clean and self-explanatory
    interface that can easily be integrated with existing software
    systems. On the basis of these principles a
    <xref target="REST"/> architectural style was chosen. A
    client interacts with a REPP server via HTTP requests.
  </t>
  <t>
    A server implementing REPP, MUST NOT keep any client state and is
    not compatible with <xref target="RFC5730"/>, Section 2,
    which explicitly states that EPP is stateful.
  </t>
  <t>
    REPP cannot be classified as an EPP transport mapping as defined in
    <xref target="RFC5730"/>, Section 2.1. With REPP, the EPP
    <xref target="RFC5730"/> XML commands are mapped to a REST
    interface and as such, RESTful EPP is regarded as an interface
    mapping. Since REPP relies on a newly defined XSD schema with
    protocol elements, RESTful EPP can also be referred to as an
    <xref target="RFC5730"/>, Section 2.7.1 protocol extension.
  </t>
</section>
<section title="Drawbacks Associated with Stateful EPP" anchor="drawbacks-associated-with-stateful-epp">
  
  <t>
    <xref target="RFC5734"/> requires a stateful TCP session
    between a client and the EPP server. Often this is accomplished by
    setting up a session with a &lt;login&gt; and keeping it alive for
    some time before issuing a &lt;logout&gt;. This may pose challenges
    in load-balanced environments, when a running session for whatever
    reason suddenly has to be switched from one EPP server to another
    and state is kept on a per server basis.
  </t>
  <t>
    <xref target="RFC5734"/> EPP sessions can wind up in a state
    where they are no longer linked to an active TCP connection,
    especially in an environment where TCP connectivity is flaky. This
    may raise problems in situations where session limits are enforced.
  </t>
  <t>
    REPP is designed to avoid these drawbacks, hence making the
    interaction between an EPP client and an EPP server more robust and
    efficient.
  </t>
</section>
<section title="EPP Extension Framework" anchor="epp-extension-framework">
  
  <t>
    According to <xref target="RFC3735"/>, Section 2, EPP
    provides an extension framework that allows features to be added at
    the protocol, object, and command-response levels. RESTful EPP
    (REPP) affects the following levels:
  </t>
  <t><list style="hanging">
    <t hangText="Protocol extension:">
        
          RESTful EPP defines a new namespace
          <spanx style="verb">urn:ietf:params:xml:ns:restful-epp-1.0</spanx>. It
          declares new elements, which MUST be used for RESTful EPP. The
          root element for the new namespace is the &lt;rest&gt;
          element. This element MUST contain an object mapping defined
          by the object mapping schemas.
        
      </t>
    <t hangText="Object extension:">
        
          RESTful EPP does not define any new object level extensions.
          The existing object level extensions can be reused. However,
          any existing object mapping element, including any added
          extension elements it might contain, SHALL be added as a child
          to the new &lt;rest&gt; element.
        
      </t>
    <t hangText="Command-Response extension:">
        
          RESTful EPP does not use the "command" concept,
          because the 'command' concept is part of a RPC style and not a
          RESTful style. A REST URL and HTTP method combination have
          replaced the command structure. All command extensions can be
          reused as a rest extension.
        
        <vspace blankLines="1"/>
          RESTful EPP reuses the existing response messages defined in
          the EPP RFCs. The EPP response MUST be added to the standard
          &lt;epp&gt; element and SHALL NOT be part of any &lt;rest&gt;
          element.
        
      </t>
  </list></t>
  <t>
    The DNSSEC <xref target="RFC5910"/>, E.164 number
    <xref target="RFC4114"/> and ENUM validation information
    <xref target="RFC5076"/> extension mapping elements can be
    added as children of the &lt;rest&gt; element.
  </t>
</section>
<section title="Resource Naming Convention" anchor="resource-naming-convention">
  
  <t>
    A resource can be a single unique object identifier e.g. a domain
    name, or a collection of objects. The complete set of objects a
    client can use in registry operations MUST be identified by
    {context-root}/{version}/{collection}
  </t>
  <t><list style="symbols">
    <t>
      
        {context-root} is the base URL which MUST be specified by each
        registry.
      
    </t>
    <t>
      
        {version} is a label which identifies the interface version.
        This is the equivalent of the &lt;version&gt; element in the EPP
        RFCs.
      
    </t>
    <t>
      
        {collection} MUST be substituted by "domains",
        "hosts" or "contacts", referring to either
        <xref target="RFC5731"/>, <xref target="RFC5732"/>
        or <xref target="RFC5733"/>.
      
    </t>
    <t>
      
        A trailing slash MAY be added to each request. Implementations
        MUST consider requests which only differ with respect to this
        trailing slash as identical.
      
    </t>
  </list></t>
  <t>
    A specific object instance MUST be identified by
    {context-root}/{version}/{collection}/{id} where {id} is a unique
    object identifier described in EPP RFCs.
  </t>
  <t>
    An example domain name resource following this naming convention,
    would look like this:
  </t>
  <figure><artwork>
/rest/v1/domains/example.com 
</artwork></figure>
  <t>
    The level below a collection MUST be used to identify a object
    instance, the level below an object instance MUST be used to
    identify attributes of the object instance.
  </t>
  <t>
    With RESTful EPP the object identifiers are embedded in URLs. This
    makes any object identifier in the request messages superfluous.
    However, since the goal of RESTful EPP is to stay compatible with
    the existing EPP object mapping schemas, this redundancy is accepted
    as a trade off. Removing the object identifier from the request
    message would require new object mapping schemas.
  </t>
  <t>
    The server MUST return HTTP Status-Code 412 when the object
    identifier (for example &lt;domain:name&gt;, &lt;host:name&gt; or
    &lt;contact:id&gt;) in the HTTP message-body does not match the {id}
    object identifier in the URL.
  </t>
  
</section>
<section title="Message Exchange" anchor="message-exchange">
  
  <t>
    A <xref target="RFC5730"/> request includes a command- and
    object mapping to which a command must be applied. With RESTful EPP,
    some of the request messages are expressed by a combination of a
    resource and an HTTP method.
  </t>
  <t>
    Data (payload) belonging to a request is put into the HTTP
    message-body or into an HTTP request-header, depending on the nature
    of the request as defined in
    <xref target="interface-mapping"/>.
  </t>
  <t>
    An HTTP request MUST contain no more than one EPP message. HTTP
    requests MUST be processed independently of each other and in the
    same order as the server receives them.
  </t>
  <section title="HTTP Method Definitions" anchor="http-method-definitions">
    
    <t>
      The operations on resources MUST be performed by an HTTP method.
      The server MUST support the following "verbs"
      (<xref target="REST"/>).
    </t>
    <t><list style="hanging">
      <t hangText="GET:">
          
            Request a representation of a resource or a collection of
            resources.
          
        </t>
      <t hangText="PUT:">
          
            Update an existing resource.
          
        </t>
      <t hangText="POST:">
          
            Create a new resource.
          
        </t>
      <t hangText="DELETE:">
          
            Delete an existing resource.
          
        </t>
      <t hangText="HEAD:">
          
            Check for the existence of a resource.
          
        </t>
      <t hangText="OPTIONS:">
          
            Request a greeting.
          
        </t>
    </list></t>
  </section>
  <section title="REPP Request" anchor="repp-request">
    
    <section title="Payload Data" anchor="payload-data">
      
      <t>
        The payload data of a RESTful EPP request can be transmitted to
        the server using the POST, PUT and GET HTTP methods.
      </t>
      <t><list style="hanging">
        <t hangText="POST and PUT:">
            
              Payload data, when required, MUST be added to the
              message-body.
            
          </t>
        <t hangText="GET:">
            
              When payload data is required, it concerns
              &lt;authInfo&gt;. This SHALL be put in the
              "X-REPP-authinfo" HTTP request-header.
            
          </t>
      </list></t>
    </section>
    <section title="Request Headers" anchor="request-headers">
      
      <t>
        HTTP request-headers are used to transmit additional or optional
        request data to the server. All RESTful EPP HTTP headers must
        have the "X-REPP-" prefix.
      </t>
      <t><list style="hanging">
        <t hangText="X-REPP-cltrid:">
            
              The client transaction identifier is the equivalent of the
              &lt;clTRID&gt; element in the EPP RFCs and MUST be used
              accordingly. When this header is present in a client
              request, an equivalent element in the message-body MAY
              also be present, but MUST than be consistent with the
              header.
            
          </t>
        <t hangText="X-REPP-authinfo:">
            
              The X-REPP-authinfo request-header is the alternative of
              the &lt;authInfo&gt; element in the EPP RFCs and MUST be
              used accordingly. It MUST contain the entire authorization
              information element as mentioned in
              <xref target="restful-epp-xml-schema"/>.
            
          </t>
      </list></t>
    </section>
    <section title="General Headers" anchor="general-headers">
      
      <t>
        General-headers MAY be used as defined in HTTP/1.1
        <xref target="RFC2616"/>. For REPP, the following
        general-headers are REQUIRED in HTTP requests.
      </t>
      <t><list style="hanging">
        <t hangText="Accept-Language:">
            
              This request-header is equivalent to the &lt;lang&gt;
              element in the EPP &lt;login&gt; command, expect that the
              usage of this header by the client is OPTIONAL. The server
              MUST support the use of HTTP Accept-Language header in
              client requests. The client MAY issue a &lt;hello&gt; to
              discover the languages known by the server. Multiple
              servers in a load-balanced environment SHOULD reply with
              consistent &lt;lang&gt; elements in a &lt;greeting&gt;.
              Clients SHOULD NOT expect that obtained &lt;lang&gt;
              information remains consistent between different requests.
              Languages not supported by the server default to
              "en".
            
          </t>
      </list></t>
    </section>
  </section>
  <section title="REPP Response" anchor="repp-response">
    
    <t>
      The server response is made up out of a HTTP Status-Code, HTTP
      response-headers and it MAY contain an EPP XML message in the HTTP
      message-body.
    </t>
    <section title="Response Headers" anchor="response-headers">
      
      <t>
        HTTP response-headers are used to transmit additional response
        data to the client. All RESTful EPP HTTP headers must have the
        "X-REPP-" prefix.
      </t>
      <t><list style="hanging">
        <t hangText="X-REPP-svtrid:">
            
              This header is the equivalent of the &lt;svTRID&gt;
              element in the EPP RFCs and MUST be used accordingly. If
              an HTTP message-body with the EPP XML equivalent
              &lt;svTRID&gt; exists, both values MUST be consistent.
            
          </t>
        <t hangText="X-REPP-cltrid:">
            
              This header is the equivalent of the &lt;clTRID&gt;
              element in the EPP RFCs and MUST be used accordingly. If
              an HTTP message-body with the EPP XML equivalent
              &lt;clTRID&gt; exists, both values MUST be consistent.
            
          </t>
        <t hangText="X-REPP-eppcode:">
            
              This header is the equivalent of the &lt;result code&gt;
              element in te EPP RFCs and MUST be used
              accordingly.If an HTTP
              message-body with The EPP XML equivalent &lt;result
              code&gt; exists, both values MUST be consistent.
            
          </t>
        <t hangText="X-REPP-avail:">
            
              The EPP avail header is the alternative of the
              "avail" attribute of the &lt;object:name&gt;
              element in a check response and MUST be used accordingly.
            
          </t>
      </list></t>
    </section>
    <section title="General Headers" anchor="general-headers-1">
      
      <t>
        General-headers MAY be used as defined in HTTP/1.1
        <xref target="RFC2616"/>. For REPP, the following
        general-headers are REQUIRED in HTTP responses.
      </t>
      <t><list style="hanging">
        <t hangText="Cache-Control:">
            
              This general-header... [TBD: the idea is to prohibit
              caching. Even though it will probably work and be useful
              in some scenario's, it also complicates matters.]
            
          </t>
        <t hangText="Connection:">
            
              The server MUST add the "Connection: close"
              general-header to each HTTP response.
            
          </t>
      </list></t>
    </section>
  </section>
  <section title="Error Handling" anchor="error-handling">
    
    <t>
      RESTful EPP is designed atop of the HTTP protocol, both are an
      application layer protocol with their own status- and result
      codes. The value of an EPP result code and HTTP Status-Code MUST
      remain independent of each other. E.g. an EPP result code
      indicating an error can be combined with an HTTP request with
      Status-Code 200.
    </t>
    <t><list style="hanging">
      <t hangText="HTTP Status-Code:">
          
            MUST only return status information related to the HTTP
            protocol, When there is a mismatch between the object
            identifier in the HTTP message-body and the resource URL
            HTTP Status-Code 412 MUST be returned.
          
          <vspace blankLines="1"/>
            The following EPP result codes specify an interface-,
            authorization-, authentication- or an internal server error
            and MUST NOT be used in RESTful EPP. Instead, when the
            related error occurs, an HTTP Status-Code MUST be returned
            in accordance to the mapping shown in
            <xref target="tab:epp-result"/>.
          
        </t>
      <t hangText="EPP result code:">
          
            MUST only return EPP result information relating to the EPP
            protocol. The HTTP header "X-REPP-eppcode" MUST be
            used for EPP result code information.
          
        </t>
    </list></t>
    <texttable anchor="tab:epp-result">
      <preamble>
        EPP result code and HTTP Status-Code mapping.
      </preamble>
      
        
        
        
          
            <ttcol align="left">
              EPP result code
            </ttcol>
            <ttcol align="right">
              HTTP Status-Code
            </ttcol>
          
        
        
          
            <c>
              2000 unknown command
            </c>
            <c>
              400
            </c>
          
          
            <c>
              2201 authorization error
            </c>
            <c>
              401
            </c>
          
          
            <c>
              2202 Invalid authorization information
            </c>
            <c>
              401
            </c>
          
          
            <c>
              2101 unimplemented command
            </c>
            <c>
              501
            </c>
          
        
      
    </texttable>
  </section>
</section>
<section title="Interface Mapping" anchor="interface-mapping">
  
  <t>
    This section describes the details of the REST interface by
    referring to the <xref target="RFC5730"/> Section 2.9
    Protocol Commands and defining how these are mapped to a REST
    request.
  </t>
  <t>
    Each RESTful operation consists of four parts: 1) the resource, 2)
    the HTTP method 3) the request payload, which is the HTTP
    message-body of the request, 4) the response payload, being the HTTP
    message-body of the response.
  </t>
  <t>
    The following table lists them all and the subsequent sections
    provide details for each request. Each URL in the table is prefixed
    with <spanx style="verb">/rest/v1/</spanx>. To make the table fit we use the
    following abbreviations:
  </t>
  <t><list style="hanging">
    <t hangText="{c}:">
        
          An abbreviation for {collection}: this MUST be substituted
          with <spanx style="verb">domains</spanx>, <spanx style="verb">hosts</spanx>,
          <spanx style="verb">contacts</spanx> or <spanx style="verb">messages</spanx>.
        
      </t>
    <t hangText="{i}:">
        
          An abbreviation for {id}: a domain name, host name, contact id
          or a message id.
        
      </t>
    <t hangText="(opt):">
        
          The item is optional.
        
      </t>
  </list></t>
  <texttable anchor="tab:command-ma">
    <preamble>
      Command mapping from Stateful EPP to Stateless EPP.
    </preamble>
    
      
      
      
      
      
        
          <ttcol align="left" width="24%">
            EPP command
          </ttcol>
          <ttcol align="left" width="31%">
            RESTful EPP resource
          </ttcol>
          <ttcol align="left" width="24%">
            Request payload
          </ttcol>
          <ttcol align="left" width="20%">
            Response payload
          </ttcol>
        
      
      
        
          <c>
            Hello
          </c>
          <c>
            OPTIONS /
          </c>
          <c>
            N/A
          </c>
          <c>
            &lt;greeting&gt;
          </c>
        
        
          <c>
            Login
          </c>
          <c>
            N/A
          </c>
          <c>
            N/A
          </c>
          <c>
            N/A
          </c>
        
        
          <c>
            Logout
          </c>
          <c>
            N/A
          </c>
          <c>
            N/A
          </c>
          <c>
            N/A
          </c>
        
        
          <c>
            Check
          </c>
          <c>
            HEAD {c}/{i}
          </c>
          <c>
            N/A
          </c>
          <c>
            N/A
          </c>
        
        
          <c>
            Info
          </c>
          <c>
            GET {c}/{i}
          </c>
          <c>
            AUTH(opt)
          </c>
          <c>
            &lt;info&gt;
          </c>
        
        
          <c>
            Poll request
          </c>
          <c>
            GET messages
          </c>
          <c>
            N/A
          </c>
          <c>
            &lt;poll&gt;
          </c>
        
        
          <c>
            Poll ack
          </c>
          <c>
            DELETE messages/{i}
          </c>
          <c>
            N/A
          </c>
          <c>
            &lt;poll&gt; ack
          </c>
        
        
          <c>
            Transfer (query)
          </c>
          <c>
            GET {c}/{i}/transfer
          </c>
          <c>
            AUTH(opt)
          </c>
          <c>
            &lt;transfer&gt;
          </c>
        
        
          <c>
            New password
          </c>
          <c>
            PUT password
          </c>
          <c>
            password
          </c>
          <c>
            N/A
          </c>
        
        
          <c>
            Create
          </c>
          <c>
            POST {c}
          </c>
          <c>
            &lt;create&gt;
          </c>
          <c>
            &lt;create&gt;
          </c>
        
        
          <c>
            Delete
          </c>
          <c>
            DELETE {c}/{i}
          </c>
          <c>
            N/A
          </c>
          <c>
            &lt;delete&gt;
          </c>
        
        
          <c>
            Renew
          </c>
          <c>
            PUT {c}/{i}/validity
          </c>
          <c>
            &lt;renew&gt;
          </c>
          <c>
            &lt;renew&gt;
          </c>
        
        
          <c>
            Transfer (create)
          </c>
          <c>
            POST {c}/{i}/transfer
          </c>
          <c>
            &lt;transfer&gt;
          </c>
          <c>
            &lt;transfer&gt;
          </c>
        
        
          <c>
            Transfer (cancel)
          </c>
          <c>
            DELETE {c}/{i}/transfer
          </c>
          <c>
            N/A
          </c>
          <c>
            &lt;transfer&gt;
          </c>
        
        
          <c>
            Transfer (approve)
          </c>
          <c>
            PUT {c}/{i}/transfer
          </c>
          <c>
            N/A
          </c>
          <c>
            &lt;transfer&gt;
          </c>
        
        
          <c>
            Transfer (reject)
          </c>
          <c>
            DELETE {c}/{i}/transfer
          </c>
          <c>
            N/A
          </c>
          <c>
            &lt;transfer&gt;
          </c>
        
        
          <c>
            Update
          </c>
          <c>
            PUT {c}/{i}
          </c>
          <c>
            &lt;update&gt;
          </c>
          <c>
            &lt;update&gt;
          </c>
        
      
    
  </texttable>
  <section title="Hello" anchor="hello">
    
    <t><list style="symbols">
      <t>
        
          Request: OPTIONS /
        
      </t>
      <t>
        
          Request payload: N/A
        
      </t>
      <t>
        
          Response payload: &lt;greeting&gt;
        
      </t>
    </list></t>
    <t>
      The &lt;greeting&gt; (Section 2.4 RFC 5730) MUST NOT be
      automatically transmitted by the server with each new HTTP
      connection. The server MUST send a &lt;greeting&gt; element in
      response to a OPTIONS method on the root "/" resource.
    </t>
    <t>
      A stateless EPP client MUST NOT use a &lt;hello&gt; XML payload.
    </t>
  </section>
  <section title="Password" anchor="password">
    
    <t><list style="symbols">
      <t>
        
          Request: PUT password/
        
      </t>
      <t>
        
          Request payload: New password
        
      </t>
      <t>
        
          Response payload: N/A
        
      </t>
    </list></t>
    <t>
      The client MUST use the HTTP PUT method on the password resource.
      This is the equivalent of the &lt;newPW&gt; element in the
      &lt;login&gt; command described in
      <xref target="RFC5730"/>. The request message-body MUST
      contain the new password which MUST be encoded using Base64
      <xref target="RFC4648"/>.
    </t>
    <t>
      After a successful password change, the HTTP header
      "X-REPP-eppcode" must contain EPP result code 1000,
      otherwise an appropriate 2xxx range EPP result code.
    </t>
  </section>
  <section title="Session Management Resources" anchor="session-management-resources">
    
    <t>
      The server MUST NOT create a client session. Login credentials
      MUST be added to each client request. This SHOULD be done with any
      of the well known HTTP authentication mechanisms. Basic
      authentication MAY be used but MUST be combined with TLS
      <xref target="RFC5246"/> for added security.
    </t>
    <t>
      To protect information exchanged between an EPP client and an EPP
      server <xref target="RFC5734"/> Section 9 level of security
      is REQUIRED.
    </t>
    <section title="Login" anchor="login">
      
      <t>
        The &lt;login&gt; command MUST NOT be implemented by a server.
        The &lt;newPW&gt; element has been replaced by the Password
        resource. The &lt;lang&gt; element has been replaced by the
        Accept-Language HTTP request-header. The &lt;svcs&gt; element
        has no equivalent in RESTful EPP, the client can use a
        &lt;hello&gt; to discover the server supported namespace URIs.
        The server MUST check every XML namespace used in client XML
        requests. An unsupported namespace MUST result in the
        appropriate EPP result code.
      </t>
    </section>
    <section title="Logout" anchor="logout">
      
      <t>
        The &lt;logout&gt; command MUST NOT be implemented by the
        server. The server MUST add the "Connection: close"
        HTTP general-header to each response.
      </t>
    </section>
  </section>
  <section title="Query Resources" anchor="query-resources">
    
    <section title="Check" anchor="check">
      
      <t><list style="symbols">
        <t>
          
            Request: HEAD {collection}/{id}
          
        </t>
        <t>
          
            Request payload: N/A
          
        </t>
        <t>
          
            Response payload: N/A
          
        </t>
      </list></t>
      <t>
        The HTTP header X-REPP-avail with a value of "1" or
        "0" is returned, depending on whether the object can
        be provisioned or not.
      </t>
      <t>
        A &lt;check&gt; request MUST be limited to checking only one
        resource {id} at a time. This may seem a step backwards when
        compared to the check command defined in the object mapping of
        the EPP RFCs where multiple object-ids are allowed inside a
        check command. The RESTful version of the check is however more
        efficient.
      </t>
      <t>
        The server MUST NOT support any &lt;object:reason&gt; elements
        described in the EPP object mapping RFCs.
      </t>
    </section>
    <section title="Info" anchor="info">
      
      <t><list style="symbols">
        <t>
          
            Request: GET {collection}/{id}
          
        </t>
        <t>
          
            Request payload: OPTIONAL X-REPP-authinfo HTTP header with
            &lt;authInfo&gt;.
          
        </t>
        <t>
          
            Response payload: Object &lt;info&gt; response.
          
        </t>
      </list></t>
      <t>
        A object &lt;info&gt; request MUST be performed with the HTTP
        GET method on a resource identifying an object instance. The
        response MUST be a response message as described in object
        mapping of the EPP RFCs, possibly extended with an
        <xref target="RFC3915"/> extension element
        (&lt;rgp:infData&gt;).
      </t>
      <section title="Domain Name" anchor="domain-name">
        
        <t>
          A domain name &lt;info&gt; differs from a contact- and host
          &lt;info&gt; in the sense that EPP Domain Name Mapping
          <xref target="RFC5731"/>, Section 3.1.2 describes an
          OPTIONAL "hosts" attribute for the
          &lt;domain:name&gt; element. This attribute is mapped to
          additional REST resources to be used in a domain name info
          request.
        </t>
        <t>
          The specified default value is "all". This default
          is mapped to a shortcut, the resource object instance URL
          without any additional labels.
        </t>
        <t><list style="symbols">
          <t>
            
              default: GET domains/{id}
            
          </t>
          <t>
            
              Hosts=all: GET domains/{id}/all
            
          </t>
          <t>
            
              Hosts=del: GET domains/{id}/del
            
          </t>
          <t>
            
              Hosts=sub: GET domains/{id}/sub
            
          </t>
          <t>
            
              Hosts=none: GET domains/{id}/none
            
          </t>
        </list></t>
        <t>
          The server MAY require the client to include additional
          authorization information. The authorization data MUST be sent
          with the "X-REPP-authinfo" HTTP request-header.
        </t>
      </section>
    </section>
    <section title="Poll" anchor="poll">
      
      <section title="Poll Request" anchor="poll-request">
        
        <t><list style="symbols">
          <t>
            
              Request: GET messages/
            
          </t>
          <t>
            
              Request payload: N/A
            
          </t>
          <t>
            
              Response payload: Poll request response message.
            
          </t>
        </list></t>
        <t>
          A client MUST use the HTTP GET method on the messages
          collection to request the message at the head of the queue.
        </t>
      </section>
      <section title="Poll Ack" anchor="poll-ack">
        
        <t><list style="symbols">
          <t>
            
              Request: DELETE messages/{id}
            
          </t>
          <t>
            
              Request payload: N/A
            
          </t>
          <t>
            
              Response payload: Poll ack response message
            
          </t>
        </list></t>
        <t>
          A client MUST use the HTTP DELETE method on a message instance
          to remove the message from the message queue.
        </t>
      </section>
    </section>
    <section title="Transfer Query Op" anchor="transfer-query-op">
      
      <t><list style="symbols">
        <t>
          
            Request: GET {collection}/{id}/transfer
          
        </t>
        <t>
          
            Request payload: Optional X-REPP-authinfo HTTP header with
            &lt;authInfo&gt;
          
        </t>
        <t>
          
            Response payload: Transfer query response message.
          
        </t>
      </list></t>
      <t>
        A &lt;transfer&gt; query MUST be performed with the HTTP GET
        method on the transfer resource of a specific object instance.
      </t>
    </section>
  </section>
  <section title="Object Transform Resources" anchor="object-transform-resources">
    
    <section title="Create" anchor="create">
      
      <t><list style="symbols">
        <t>
          
            Request: POST {collection}/
          
        </t>
        <t>
          
            Request payload: Object &lt;create&gt;.
          
        </t>
        <t>
          
            Response payload: Object &lt;create&gt; response.
          
        </t>
      </list></t>
      <t>
        A client MUST create a new object with the HTTP POST method in
        combination with an object collection.
      </t>
    </section>
    <section title="Delete" anchor="delete">
      
      <t><list style="symbols">
        <t>
          
            Request: DELETE {collection}/{id}
          
        </t>
        <t>
          
            Request payload: N/A
          
        </t>
        <t>
          
            Response payload: Object &lt;delete&gt; response.
          
        </t>
      </list></t>
      <t>
        Deleting an object from the registry database MUST be performed
        with the HTTP DELETE method on a REST resource specifying a
        specific object instance.
      </t>
    </section>
    <section title="Renew" anchor="renew">
      
      <t><list style="symbols">
        <t>
          
            Request: PUT {collection}/{id}/validity
          
        </t>
        <t>
          
            Request payload: Object &lt;renew&gt;.
          
        </t>
        <t>
          
            Response payload: Object &lt;renew&gt; response.
          
        </t>
      </list></t>
      <t>
        Renewing an object is only specified by
        <xref target="RFC5731"/>, the &lt;renew&gt; command has
        been mapped to a validity resource.
      </t>
    </section>
    <section title="Update" anchor="update">
      
      <t><list style="symbols">
        <t>
          
            Request: PUT {collection}/{id}
          
        </t>
        <t>
          
            Request payload: Object:update.
          
        </t>
        <t>
          
            Response payload: Update response message
          
        </t>
      </list></t>
      <t>
        An object &lt;update&gt; request MUST be performed with the HTTP
        PUT method on a specific object resource. The payload MUST
        contain an &lt;object:update&gt; described in the EPP RFCs,
        possibly extended with <xref target="RFC3915"/>
        &lt;update&gt; extension elements.
      </t>
    </section>
    <section title="Transfer" anchor="transfer">
      
      <t>
        Transferring an object from one sponsoring client to another is
        only specified in <xref target="RFC5731"/> and
        <xref target="RFC5733"/>. The &lt;transfer&gt; command
        has been mapped to a transfer resource.
      </t>
      <t>
        The semantics of the HTTP DELETE method are determined by the
        role of the client executing the method. For the current
        sponsoring registrar the DELETE method is defined as
        "reject transfer". For the new sponsoring registrar
        the DELETE method is defined as "cancel transfer".
      </t>
      <section title="Create Op" anchor="create-op">
        
        <t><list style="symbols">
          <t>
            
              Request: POST {collection}/{id}/transfer
            
          </t>
          <t>
            
              Request payload: &lt;object:transfer&gt;.
            
          </t>
          <t>
            
              Response Payload: Transfer start response.
            
          </t>
        </list></t>
        <t>
          Initiating a transfer MUST be done by creating a new
          "transfer" resource with the HTTP POST method on a
          specific domain name or contact object instance. The server
          MAY require authorization information to validate the transfer
          request.
        </t>
      </section>
      <section title="Cancel Op" anchor="cancel-op">
        
        <t><list style="symbols">
          <t>
            
              Request: DELETE {collection}/{id}/transfer
            
          </t>
          <t>
            
              Request payload: N/A
            
          </t>
          <t>
            
              Response payload: Transfer cancel response message.
            
          </t>
        </list></t>
        <t>
          The new sponsoring client MUST use the HTTP DELETE method to
          cancel a requested transfer.
        </t>
      </section>
      <section title="Approve Op" anchor="approve-op">
        
        <t><list style="symbols">
          <t>
            
              Request: PUT {collection}/{id}/transfer
            
          </t>
          <t>
            
              Request payload: N/A
            
          </t>
          <t>
            
              Response payload: Transfer approve response message.
            
          </t>
        </list></t>
        <t>
          The current sponsoring client MUST use the HTTP PUT method to
          approve a transfer requested by the new sponsoring client.
        </t>
      </section>
      <section title="Reject Op" anchor="reject-op">
        
        <t><list style="symbols">
          <t>
            
              Request: DELETE {collection}/{id}/transfer
            
          </t>
          <t>
            
              Request payload: N/A
            
          </t>
          <t>
            
              Response payload: Transfer reject response message
            
          </t>
        </list></t>
        <t>
          The current sponsoring client MUST use the HTTP DELETE method
          to reject a transfer requested by the new sponsoring client.
        </t>
      </section>
    </section>
  </section>
</section>
<section title="Transport Considerations" anchor="transport-considerations">
  
  <t>
    Section 2.1 of the EPP core protocol specification
    <xref target="RFC5730"/> describes considerations to be
    addressed by protocol transport mappings. This document addresses
    each of the considerations using a combination of features described
    in this document and features provided by HTTP as follows:
  </t>
  <t><list style="symbols">
    <t>
      
        HTTP is an application layer protocol which uses TCP as a
        transport protocol. TCP includes features to provide
        reliability, flow control, ordered delivery, and congestion
        control. Section 1.5 of RFC 793 describes these features in
        detail; congestion control principles are described further in
        RFC 2581 and RFC 2914. HTTP is a stateless protocol and as such
        it does not maintain any client state or session.
      
    </t>
    <t>
      
        The stateful nature of EPP is no longer preserved through
        managed sessions. There still is a controlled message exchanges
        because HTTP uses TCP as transport layer protocol.
      
    </t>
    <t>
      
        HTTP 1.1 allows persistent connections which can be used to send
        multiple HTTP requests to the server using the same connection.
        The server MUST NOT allow persistent connections.
      
    </t>
    <t>
      
        The server MUST NOT allow pipelining and return EPP result code
        2002 if pipelining is detected.
      
    </t>
    <t>
      
        Batch-oriented processing (combining multiple EPP commands in a
        single HTTP request) MUST NOT be permitted.
      
    </t>
    <t>
      
        <xref target="message-exchange"/> of this document
        describes features to frame EPP request data by adding the data
        to an HTTP request message-body or request-header.
      
    </t>
    <t>
      
        A request processing failure has no influence on the processing
        of other requests. The stateless nature of the server allows a
        client to retry a failed request or send another request.
      
    </t>
  </list></t>
</section>
<section title="Formal Syntax" anchor="formal-syntax">
  
  <t>
    The extension used by RESTful EPP is specified in XML Schema
    notation. The formal syntax presented here is a complete schema
    representation of RESTful EPP suitable for automated validation of
    EPP XML instances. The schema is based on the XML schemas defined in
    <xref target="RFC5730"/>. <xref target="RFC3735"/>
    Section 2.3 states that it MUST be announced in the &lt;greeting&gt;
    element.
  </t>
  <section title="RESTful EPP XML Schema" anchor="restful-epp-xml-schema">
    
    <figure anchor="fig:the-restfu" align="center"><preamble>The RESTful EPP Schema.
</preamble><artwork>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;schema xmlns:repp="urn:ietf:params:xml:ns:restful-epp-1.0"
        xmlns:epp="urn:ietf:params:xml:ns:epp-1.0" 
        xmlns:eppcom="urn:ietf:params:xml:ns:eppcom-1.0"
        xmlns="HTTP://www.w3.org/2001/XMLSchema"
        targetNamespace="urn:ietf:params:xml:ns:restful-epp-1.0"
        elementFormDefault="qualified"&gt;          

  &lt;!--  Import common element types.   --&gt;
  &lt;import namespace="urn:ietf:params:xml:ns:eppcom-1.0" 
          schemaLocation="eppcom-1.0.xsd"/&gt;
  &lt;import namespace="urn:ietf:params:xml:ns:epp-1.0" 
          schemaLocation="epp-1.0.xsd"/&gt;

  &lt;annotation&gt;
     &lt;documentation&gt;
        RESTful EPP schema.
     &lt;/documentation&gt;
  &lt;/annotation&gt;

  &lt;!-- The rest element should be used as extension root. --&gt;
  &lt;element name="rest" type="epp:extAnyType"/&gt;

  &lt;!-- A request which requires auth info can use this 
       authorization shortcut without an object id. --&gt;

  &lt;element name="authorization" type="re:authInfoType"/&gt;

  &lt;!-- The authinfo element. For use with domain and host info 
       and domain transfer. --&gt;
  &lt;complexType name="authInfoType"&gt;
     &lt;choice&gt;
        &lt;element name="pw" type="eppcom:pwAuthInfoType"/&gt;
        &lt;element name="ext" type="eppcom:extAuthInfoType"/&gt;
     &lt;/choice&gt;
  &lt;/complexType&gt;

&lt;/schema&gt; 
</artwork></figure>
  </section>
</section>
<section title="IANA Considerations" anchor="iana-considerations">
  
  <t>
    [TBD: This draft defines three resource collections; domains,
    contacts, hosts. This may require an IANA RESTful EPP collection
    protocol registry. RFC3688 defines an IANA XML Registry and
    'restful-epp-1.0' defined here would have to be added to that:
    http://www.iana.org/assignments/xml-registry-index.html ]
  </t>
</section>
<section title="Internationalization Considerations" anchor="internationalization-considerations">
  
  <t>
    [TBD: Do we need them? ]
  </t>
</section>
<section title="Security Considerations" anchor="security-considerations">
  
  <t>
    RFC 5730 describes a &lt;login&gt; command for transmitting client
    credentials. This command MUST NOT be used for RESTful EPP. Due to
    the stateless nature of REST clients MUST transmit their credentials
    with each request. The validation of the user credentials must be
    performed by an out-of-band mechanism. This could be done with Basic
    and Digest access authentication <xref target="RFC2617"/> or
    with the use of OAuth <xref target="RFC5849"/>.
  </t>
  <t>
    EPP does not use XML encryption to protect messages. Furthermore,
    RESTful EPP HTTP servers are vulnerable to common denial-of-service
    attacks. Therefore, the security considerations of
    <xref target="RFC5734"/> also apply to RESTful EPP.
  </t>
</section>
<section title="Obsolete EPP Result Codes" anchor="obsolete-epp-result-codes">
  
  <t>
    The following result codes specified in
    <xref target="RFC5730"/> are no longer meaningful in RESTful
    EPP and MUST NOT be used.
  </t>
  <texttable>
    
      
      
      
        
          <ttcol align="left">
            Code
          </ttcol>
          <ttcol align="left">
            Reason
          </ttcol>
        
      
      
        
          <c>
            1500
          </c>
          <c>
            The logout command is not used anymore.
          </c>
        
        
          <c>
            2002
          </c>
          <c>
            Commands can now be sent in any order.
          </c>
        
        
          <c>
            2100
          </c>
          <c>
            The protocol version is embedded in the base URL of the
            interface.
          </c>
        
        
          <c>
            2200
          </c>
          <c>
            The login command is not used anymore.
          </c>
        
      
    
  </texttable>
</section>

</middle>

<back>
    <references title="Normative References">
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC2119'>

<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date year='1997' month='March' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='ftp://ftp.isi.edu/in-notes/rfc2119.txt' />
<format type='HTML' octets='17491' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5777' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC2616'>

<front>
<title abbrev='HTTP/1.1'>Hypertext Transfer Protocol -- HTTP/1.1</title>
<author initials='R.' surname='Fielding' fullname='Roy T. Fielding'>
<organization abbrev='UC Irvine'>Department of Information and Computer Science</organization>
<address>
<postal>
<street>University of California, Irvine</street>
<city>Irvine</city>
<region>CA</region>
<code>92697-3425</code></postal>
<facsimile>+1(949)824-1715</facsimile>
<email>fielding@ics.uci.edu</email></address></author>
<author initials='J.' surname='Gettys' fullname='James Gettys'>
<organization abbrev='Compaq/W3C'>World Wide Web Consortium</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>
<street>545 Technology Square</street>
<city>Cambridge</city>
<region>MA</region>
<code>02139</code></postal>
<facsimile>+1(617)258-8682</facsimile>
<email>jg@w3.org</email></address></author>
<author initials='J.' surname='Mogul' fullname='Jeffrey C. Mogul'>
<organization abbrev='Compaq'>Compaq Computer Corporation</organization>
<address>
<postal>
<street>Western Research Laboratory</street>
<street>250 University Avenue</street>
<city>Palo Alto</city>
<region>CA</region>
<code>94305</code></postal>
<email>mogul@wrl.dec.com</email></address></author>
<author initials='H.' surname='Frystyk' fullname='Henrik Frystyk Nielsen'>
<organization abbrev='W3C/MIT'>World Wide Web Consortium</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>
<street>545 Technology Square</street>
<city>Cambridge</city>
<region>MA</region>
<code>02139</code></postal>
<facsimile>+1(617)258-8682</facsimile>
<email>frystyk@w3.org</email></address></author>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization abbrev='Xerox'>Xerox Corporation</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>
<street>3333 Coyote Hill Road</street>
<city>Palo Alto</city>
<region>CA</region>
<code>94034</code></postal>
<email>masinter@parc.xerox.com</email></address></author>
<author initials='P.' surname='Leach' fullname='Paul J. Leach'>
<organization abbrev='Microsoft'>Microsoft Corporation</organization>
<address>
<postal>
<street>1 Microsoft Way</street>
<city>Redmond</city>
<region>WA</region>
<code>98052</code></postal>
<email>paulle@microsoft.com</email></address></author>
<author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
<organization abbrev='W3C/MIT'>World Wide Web Consortium</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>
<street>545 Technology Square</street>
<city>Cambridge</city>
<region>MA</region>
<code>02139</code></postal>
<facsimile>+1(617)258-8682</facsimile>
<email>timbl@w3.org</email></address></author>
<date year='1999' month='June' />
<abstract>
<t>
   The Hypertext Transfer Protocol (HTTP) is an application-level
   protocol for distributed, collaborative, hypermedia information
   systems. It is a generic, stateless, protocol which can be used for
   many tasks beyond its use for hypertext, such as name servers and
   distributed object management systems, through extension of its
   request methods, error codes and headers . A feature of HTTP is
   the typing and negotiation of data representation, allowing systems
   to be built independently of the data being transferred.
</t>
<t>
   HTTP has been in use by the World-Wide Web global information
   initiative since 1990. This specification defines the protocol
   referred to as "HTTP/1.1", and is an update to RFC 2068 .
</t></abstract></front>

<seriesInfo name='RFC' value='2616' />
<format type='TXT' octets='422317' target='http://www.rfc-editor.org/rfc/rfc2616.txt' />
<format type='PS' octets='5529857' target='http://www.rfc-editor.org/rfc/rfc2616.ps' />
<format type='PDF' octets='550558' target='http://www.rfc-editor.org/rfc/rfc2616.pdf' />
<format type='HTML' octets='636125' target='http://xml.resource.org/public/rfc/html/rfc2616.html' />
<format type='XML' octets='493420' target='http://xml.resource.org/public/rfc/xml/rfc2616.xml' />
</reference>
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC2617'>

<front>
<title abbrev='HTTP Authentication'>HTTP Authentication: Basic and Digest Access Authentication</title>
<author initials='J.' surname='Franks' fullname='John Franks'>
<organization>Northwestern University, Department of Mathematics</organization>
<address>
<postal>
<street>Northwestern University</street>
<city>Evanston</city>
<region>IL</region>
<code>60208-2730</code>
<country>USA</country></postal>
<email>john@math.nwu.edu</email></address></author>
<author initials='P.M.' surname='Hallam-Baker' fullname='Phillip M. Hallam-Baker'>
<organization>Verisign Inc.</organization>
<address>
<postal>
<street>301 Edgewater Place</street>
<street>Suite 210</street>
<city>Wakefield</city>
<region>MA</region>
<code>01880</code>
<country>USA</country></postal>
<email>pbaker@verisign.com</email></address></author>
<author initials='J.L.' surname='Hostetler' fullname='Jeffery L. Hostetler'>
<organization>AbiSource, Inc.</organization>
<address>
<postal>
<street>6 Dunlap Court</street>
<city>Savoy</city>
<region>IL</region>
<code>61874</code>
<country>USA</country></postal>
<email>jeff@AbiSource.com</email></address></author>
<author initials='S.D.' surname='Lawrence' fullname='Scott D. Lawrence'>
<organization>Agranat Systems, Inc.</organization>
<address>
<postal>
<street>5 Clocktower Place</street>
<street>Suite 400</street>
<city>Maynard</city>
<region>MA</region>
<code>01754</code>
<country>USA</country></postal>
<email>lawrence@agranat.com</email></address></author>
<author initials='P.J.' surname='Leach' fullname='Paul J. Leach'>
<organization>Microsoft Corporation</organization>
<address>
<postal>
<street>1 Microsoft Way</street>
<city>Redmond</city>
<region>WA</region>
<code>98052</code>
<country>USA</country></postal>
<email>paulle@microsoft.com</email></address></author>
<author initials='A.' surname='Luotonen' fullname='Ari Luotonen'>
<organization>Netscape Communications Corporation</organization>
<address>
<postal>
<street>501 East Middlefield Road</street>
<city>Mountain View</city>
<region>CA</region>
<code>94043</code>
<country>USA</country></postal></address></author>
<author initials='L.' surname='Stewart' fullname='Lawrence C. Stewart'>
<organization>Open Market, Inc.</organization>
<address>
<postal>
<street>215 First Street</street>
<city>Cambridge</city>
<region>MA</region>
<code>02142</code>
<country>USA</country></postal>
<email>stewart@OpenMarket.com</email></address></author>
<date year='1999' month='June' />
<abstract>
<t>
   "HTTP/1.0", includes the specification for a Basic Access
   Authentication scheme. This scheme is not considered to be a secure
   method of user authentication (unless used in conjunction with some
   external secure system such as SSL ), as the user name and
   password are passed over the network as cleartext.
      </t>
<t>
   This document also provides the specification for HTTP's
   authentication framework, the original Basic authentication scheme
   and a scheme based on cryptographic hashes, referred to as "Digest
   Access Authentication".  It is therefore also intended to serve as a
   replacement for RFC 2069 .  Some optional elements specified by
   RFC 2069 have been removed from this specification due to problems
   found since its publication; other new elements have been added for
   compatibility, those new elements have been made optional, but are
   strongly recommended.
      </t>
<t>
   Like Basic, Digest access authentication verifies that both parties
   to a communication know a shared secret (a password); unlike Basic,
   this verification can be done without sending the password in the
   clear, which is Basic's biggest weakness. As with most other
   authentication protocols, the greatest sources of risks are usually
   found not in the core protocol itself but in policies and procedures
   surrounding its use.
    </t></abstract></front>

<seriesInfo name='RFC' value='2617' />
<format type='TXT' octets='77638' target='http://www.rfc-editor.org/rfc/rfc2617.txt' />
<format type='HTML' octets='116625' target='http://xml.resource.org/public/rfc/html/rfc2617.html' />
<format type='XML' octets='88198' target='http://xml.resource.org/public/rfc/xml/rfc2617.xml' />
</reference>
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC3915'>

<front>
<title>Domain Registry Grace Period Mapping for the Extensible Provisioning Protocol (EPP)</title>
<author initials='S.' surname='Hollenbeck' fullname='S. Hollenbeck'>
<organization /></author>
<date year='2004' month='September' />
<abstract>
<t>This document describes an Extensible Provisioning Protocol (EPP) extension mapping for the management of Domain Name System (DNS) domain names subject to "grace period" policies defined by the Internet Corporation for Assigned Names and Numbers (ICANN).  Grace period policies exist to allow protocol actions to be reversed or otherwise revoked during a short period of time after the protocol action has been performed.  Specified in XML, this mapping extends the EPP domain name mapping to provide additional features required for grace period processing. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='3915' />
<format type='TXT' octets='45467' target='http://www.rfc-editor.org/rfc/rfc3915.txt' />
</reference>
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC4648'>

<front>
<title>The Base16, Base32, and Base64 Data Encodings</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'>
<organization /></author>
<date year='2006' month='October' />
<abstract>
<t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4648' />
<format type='TXT' octets='35491' target='http://www.rfc-editor.org/rfc/rfc4648.txt' />
</reference>
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC5246'>

<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'>
<organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'>
<organization /></author>
<date year='2008' month='August' />
<abstract>
<t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5246' />
<format type='TXT' octets='222395' target='http://www.rfc-editor.org/rfc/rfc5246.txt' />
</reference>
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC5730'>

<front>
<title>Extensible Provisioning Protocol (EPP)</title>
<author initials='S.' surname='Hollenbeck' fullname='S. Hollenbeck'>
<organization /></author>
<date year='2009' month='August' />
<abstract>
<t>This document describes an application-layer client-server protocol for the provisioning and management of objects stored in a shared central repository.  Specified in XML, the protocol defines generic object management operations and an extensible framework that maps protocol operations to objects.  This document includes a protocol specification, an object mapping template, and an XML media type registration.  This document obsoletes RFC 4930. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='STD' value='69' />
<seriesInfo name='RFC' value='5730' />
<format type='TXT' octets='134464' target='http://www.rfc-editor.org/rfc/rfc5730.txt' />
</reference>
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC5731'>

<front>
<title>Extensible Provisioning Protocol (EPP) Domain Name Mapping</title>
<author initials='S.' surname='Hollenbeck' fullname='S. Hollenbeck'>
<organization /></author>
<date year='2009' month='August' />
<abstract>
<t>This document describes an Extensible Provisioning Protocol (EPP) mapping for the provisioning and management of Internet domain names stored in a shared central repository.  Specified in XML, the mapping defines EPP command syntax and semantics as applied to domain names.  This document obsoletes RFC 4931. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='STD' value='69' />
<seriesInfo name='RFC' value='5731' />
<format type='TXT' octets='87764' target='http://www.rfc-editor.org/rfc/rfc5731.txt' />
</reference>
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC5732'>

<front>
<title>Extensible Provisioning Protocol (EPP) Host Mapping</title>
<author initials='S.' surname='Hollenbeck' fullname='S. Hollenbeck'>
<organization /></author>
<date year='2009' month='August' />
<abstract>
<t>This document describes an Extensible Provisioning Protocol (EPP) mapping for the provisioning and management of Internet host names stored in a shared central repository.  Specified in XML, the mapping defines EPP command syntax and semantics as applied to host names.  This document obsoletes RFC 4932. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='STD' value='69' />
<seriesInfo name='RFC' value='5732' />
<format type='TXT' octets='56219' target='http://www.rfc-editor.org/rfc/rfc5732.txt' />
</reference>
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC5733'>

<front>
<title>Extensible Provisioning Protocol (EPP) Contact Mapping</title>
<author initials='S.' surname='Hollenbeck' fullname='S. Hollenbeck'>
<organization /></author>
<date year='2009' month='August' />
<abstract>
<t>This document describes an Extensible Provisioning Protocol (EPP) mapping for the provisioning and management of individual or organizational social information identifiers (known as "contacts") stored in a shared central repository.  Specified in Extensible Markup Language (XML), the mapping defines EPP command syntax and semantics as applied to contacts.  This document obsoletes RFC 4933. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='STD' value='69' />
<seriesInfo name='RFC' value='5733' />
<format type='TXT' octets='80698' target='http://www.rfc-editor.org/rfc/rfc5733.txt' />
</reference>
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC5734'>

<front>
<title>Extensible Provisioning Protocol (EPP) Transport over TCP</title>
<author initials='S.' surname='Hollenbeck' fullname='S. Hollenbeck'>
<organization /></author>
<date year='2009' month='August' />
<abstract>
<t>This document describes how an Extensible Provisioning Protocol (EPP) session is mapped onto a single Transmission Control Protocol (TCP) connection.  This mapping requires use of the Transport Layer Security (TLS) protocol to protect information exchanged between an EPP client and an EPP server.  This document obsoletes RFC 4934. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='STD' value='69' />
<seriesInfo name='RFC' value='5734' />
<format type='TXT' octets='27887' target='http://www.rfc-editor.org/rfc/rfc5734.txt' />
</reference>
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='REST'>
        <front>
        <title>Architectural Styles and the Design of Network-based Software Architectures</title>
        <author initials='R. T.' surname='Fielding' fullname='Roy Thomas Fielding'>
        <organization>University of California</organization>
        </author>
        <date year='2000'/>
        </front>
</reference>
    </references>

    <references title="Informative References">
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC3375'>

<front>
<title>Generic Registry-Registrar Protocol Requirements</title>
<author initials='S.' surname='Hollenbeck' fullname='S. Hollenbeck'>
<organization /></author>
<date year='2002' month='September' /></front>

<seriesInfo name='RFC' value='3375' />
<format type='TXT' octets='46022' target='http://www.rfc-editor.org/rfc/rfc3375.txt' />
</reference>
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC3735'>

<front>
<title>Guidelines for Extending the Extensible Provisioning Protocol (EPP)</title>
<author initials='S.' surname='Hollenbeck' fullname='S. Hollenbeck'>
<organization /></author>
<date year='2004' month='March' />
<abstract>
<t>The Extensible Provisioning Protocol (EPP) is an application layer client-server protocol for the provisioning and management of objects stored in a shared central repository.  Specified in XML, the protocol defines generic object management operations and an extensible framework that maps protocol operations to objects.  This document presents guidelines for use of EPP's extension mechanisms to define new features and object management capabilities.  This memo provides information for the Internet community.</t></abstract></front>

<seriesInfo name='RFC' value='3735' />
<format type='TXT' octets='27326' target='http://www.rfc-editor.org/rfc/rfc3735.txt' />
</reference>
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC3986'>

<front>
<title abbrev='URI Generic Syntax'>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
<organization abbrev='W3C/MIT'>World Wide Web Consortium</organization>
<address>
<postal>
<street>Massachusetts Institute of Technology</street>
<street>77 Massachusetts Avenue</street>
<city>Cambridge</city>
<region>MA</region>
<code>02139</code>
<country>USA</country></postal>
<phone>+1-617-253-5702</phone>
<facsimile>+1-617-258-5999</facsimile>
<email>timbl@w3.org</email>
<uri>http://www.w3.org/People/Berners-Lee/</uri></address></author>
<author initials='R.' surname='Fielding' fullname='Roy T. Fielding'>
<organization abbrev='Day Software'>Day Software</organization>
<address>
<postal>
<street>5251 California Ave., Suite 110</street>
<city>Irvine</city>
<region>CA</region>
<code>92617</code>
<country>USA</country></postal>
<phone>+1-949-679-2960</phone>
<facsimile>+1-949-679-2972</facsimile>
<email>fielding@gbiv.com</email>
<uri>http://roy.gbiv.com/</uri></address></author>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization abbrev='Adobe Systems'>Adobe Systems Incorporated</organization>
<address>
<postal>
<street>345 Park Ave</street>
<city>San Jose</city>
<region>CA</region>
<code>95110</code>
<country>USA</country></postal>
<phone>+1-408-536-3024</phone>
<email>LMM@acm.org</email>
<uri>http://larry.masinter.net/</uri></address></author>
<date year='2005' month='January' />
<area>Applications</area>
<keyword>uniform resource identifier</keyword>
<keyword>URI</keyword>
<keyword>URL</keyword>
<keyword>URN</keyword>
<keyword>WWW</keyword>
<keyword>resource</keyword>
<abstract>
<t>
A Uniform Resource Identifier (URI) is a compact sequence of characters
that identifies an abstract or physical resource.  This specification
defines the generic URI syntax and a process for resolving URI references
that might be in relative form, along with guidelines and security
considerations for the use of URIs on the Internet.
The URI syntax defines a grammar that is a superset of all valid URIs,
allowing an implementation to parse the common components of a URI
reference without knowing the scheme-specific requirements of every
possible identifier.  This specification does not define a generative
grammar for URIs; that task is performed by the individual
specifications of each URI scheme.
</t></abstract></front>

<seriesInfo name='STD' value='66' />
<seriesInfo name='RFC' value='3986' />
<format type='TXT' octets='141811' target='http://www.rfc-editor.org/rfc/rfc3986.txt' />
<format type='HTML' octets='213584' target='http://xml.resource.org/public/rfc/html/rfc3986.html' />
<format type='XML' octets='163534' target='http://xml.resource.org/public/rfc/xml/rfc3986.xml' />
</reference>
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC4114'>

<front>
<title>E.164 Number Mapping for the Extensible Provisioning Protocol (EPP)</title>
<author initials='S.' surname='Hollenbeck' fullname='S. Hollenbeck'>
<organization /></author>
<date year='2005' month='June' />
<abstract>
<t>This document describes an Extensible Provisioning Protocol (EPP) extension mapping for the provisioning and management of E.164 numbers that represent domain names stored in a shared central repository.  Specified in XML, this mapping extends the EPP domain name mapping to provide additional features required for the provisioning of E.164 numbers. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='4114' />
<format type='TXT' octets='31490' target='http://www.rfc-editor.org/rfc/rfc4114.txt' />
</reference>
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC5849'>

<front>
<title>The OAuth 1.0 Protocol</title>
<author initials='E.' surname='Hammer-Lahav' fullname='E. Hammer-Lahav'>
<organization /></author>
<date year='2010' month='April' />
<abstract>
<t>OAuth provides a method for clients to access server resources on behalf of a resource owner (such as a different client or an end-user).  It also provides a process for end-users to authorize third-party access to their server resources without sharing their credentials (typically, a username and password pair), using user-agent redirections.  This document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract></front>

<seriesInfo name='RFC' value='5849' />
<format type='TXT' octets='80786' target='http://www.rfc-editor.org/rfc/rfc5849.txt' />
</reference>
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC5076'>

<front>
<title>ENUM Validation Information Mapping for the Extensible Provisioning Protocol</title>
<author initials='B.' surname='Hoeneisen' fullname='B. Hoeneisen'>
<organization /></author>
<date year='2007' month='December' />
<abstract>
<t>This document describes an Extensible Provisioning Protocol (EPP) extension framework for mapping information about the validation process that has been applied for the E.164 number (or number range) that the E.164 Number Mapping (ENUM) domain name is based on.  Specified in the Extensible Markup Language (XML), this mapping extends the EPP domain name mapping to provide an additional feature required for the provisioning of ENUM Domain Names. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5076' />
<format type='TXT' octets='44679' target='http://www.rfc-editor.org/rfc/rfc5076.txt' />
</reference>
<?xml version='1.0' encoding='UTF-8'?>

<reference anchor='RFC5910'>

<front>
<title>Domain Name System (DNS) Security Extensions Mapping for the Extensible Provisioning Protocol (EPP)</title>
<author initials='J.' surname='Gould' fullname='J. Gould'>
<organization /></author>
<author initials='S.' surname='Hollenbeck' fullname='S. Hollenbeck'>
<organization /></author>
<date year='2010' month='May' />
<abstract>
<t>This document describes an Extensible Provisioning Protocol (EPP) extension mapping for the provisioning and management of Domain Name System security (DNSSEC) extensions for domain names stored in a shared central repository.  Specified in XML, this mapping extends the EPP domain name mapping to provide additional features required for the provisioning of DNS security extensions.  This document obsoletes RFC 4310. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5910' />
<format type='TXT' octets='72490' target='http://www.rfc-editor.org/rfc/rfc5910.txt' />
</reference>
    </references>    
    

  
<section title="Examples" anchor="examples">
  
  <t>
    In these examples, lines starting with "C:" represent data
    sent by a protocol client and lines starting with "S:"
    represent data returned by a REPP protocol server. Indentation and
    white space in examples are provided only to illustrate element
    relationships and are not REQUIRED features of this protocol.
  </t>
  <section title="X-REPP-authinfo" anchor="x-repp-authinfo">
    
    <section title="Domain Info with Authorization Data" anchor="domain-info-with-authorization-data">
      
      <t>
        The X-REPP-authinfo header in a Domain Info Request might look
        like this:
      </t>
      <figure><artwork>
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
   &lt;extension&gt;
      &lt;re:rest xmlns:re="urn:ietf:params:xml:ns:restful-epp-1.0"&gt;  
         &lt;re:authorization&gt; 
            &lt;re:pw&gt;passwordfordomain&lt;/re:pw&gt;
         &lt;/re:authorization&gt;
      &lt;/re:rest&gt;
   &lt;/extension&gt;
&lt;/epp&gt;
</artwork></figure>
      <t>
        So this HTTP header MUST contain the entire authorization
        information element as mentioned in
        <xref target="restful-epp-xml-schema"/>.
      </t>
    </section>
  </section>
  <section title="Hello Example" anchor="hello-example">
    
    <section title="RESTful &lt;hello&gt; Request:" anchor="restful-hello-request">
      
      <figure><artwork>
C: OPTIONS /rest/v1/ HTTP/1.1
C: Host: repp.example.com
C: Cache-Control: no-cache
C: Authorization: Basic amRvZTp0ZXN0
C: Pragma: no-cache
C: Accept: application/epp+xml
C: Accept-Encoding: gzip,deflate
C: Accept-Language: en
C: Accept-Charset: utf-8
</artwork></figure>
    </section>
    <section title="RESTful &lt;hello&gt; Response:" anchor="restful-hello-response">
      
      <figure><artwork>
S: HTTP/1.1 200 OK
S: Date: Sun, 10 Apr 2012 12:00:00 UTC
S: Server: Acme REPP server v1.0
S: Content-Length: 799
S: Content-Type: application/epp+xml
S: Connection: close
S:
S: &lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S: &lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"&gt;
S:   &lt;greeting&gt;
S:     &lt;!-- rest of the greeting elements --&gt;
S:   &lt;/greeting&gt;
S: &lt;/epp&gt;
</artwork></figure>
    </section>
  </section>
  <section title="Password Example" anchor="password-example">
    
    <section title="RESTful Change Password Request:" anchor="restful-change-password-request">
      
      <figure><artwork>
C: PUT /rest/v1/password/ HTTP/1.1
C: Host: repp.example.com
C: Cache-Control: no-cache
C: Authorization: Basic amRvZTp0ZXN0
C: Pragma: no-cache
C: Accept-Language: en
C: Accept-Charset: utf-8
C: X-REPP-cltrid: ABC-12345
C: Content-Type: text/plain
C: Content-Length: 44
C:
C: bWFpbG1lYXQ6bWFhcnRlbi53dWxsaW5rQHNpZG4ubmw=
</artwork></figure>
    </section>
    <section title="RESTful Change Password Response:" anchor="restful-change-password-response">
      
      <figure><artwork>
S: HTTP/1.1 200 OK
S: Date: Sun, 10 Apr 2012 12:00:00 UTC
S: Server: Acme REPP server v1.0
S: Content-Language: en
S: Content-Length: 0
S: X-REPP-cltrid: ABC-12345
S: X-REPP-svtrid: 54321-XYZ
S: X-REPP-eppcode: 1000
S: Connection: close
</artwork></figure>
    </section>
  </section>
  <section title="Domain Create Example" anchor="domain-create-example">
    
    <section title="RESTful Domain Create Request:" anchor="restful-domain-create-request">
      
      <figure><artwork>
C: POST /rest/v1/domains/ HTTP/1.1
C: Host: repp.example.com
C: Cache-Control: no-cache
C: Authorization: Basic amRvZTp0ZXN0
C: Pragma: no-cache
C: Accept-Language: en
C: Accept-Charset: utf-8
C: Accept: application/epp+xml
C: X-REPP-cltrid: ABC-12345
C: Content-Type: text/plain
C: Content-Length: 543

C: &lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
C: &lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0" 
C:      xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
C:  &lt;extension&gt;
C:   &lt;re:rest xmlns:re="urn:ietf:params:xml:ns:restful-epp-1.0"&gt; 
C:    &lt;domain:create&gt;
C:     &lt;!-- Object specific elements--&gt;
C:    &lt;/domain:create&gt;
C:   &lt;/re:rest&gt;
C:  &lt;/extension&gt;
C: &lt;/epp&gt;  
</artwork></figure>
    </section>
    <section title="RESTful Domain Create Response:" anchor="restful-domain-create-response">
      
      <figure><artwork>
S: HTTP/1.1 200 OK
S: Date: Sun, 10 Apr 2012 12:00:00 UTC
S: Server: Acme REPP server v1.0
S: Content-Language: en
S: Content-Length: 642
S: X-REPP-cltrid: ABC-12345
S: X-REPP-svtrid: 54321-XYZ
S: X-REPP-eppcode: 1000
S: Content-Type: application/epp+xml
S: Connection: close

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"   
S:     xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt; 
S:   &lt;response&gt;                                               
S:      &lt;result code="1000"&gt;
S:         &lt;msg&gt;Command completed successfully&lt;/msg&gt;
S:      &lt;/result&gt;
S:      &lt;resData&gt;
S:         &lt;domain:creData
S:             &lt;!-- Object specific elements--&gt;
S:         &lt;/domain:creData&gt;
S:      &lt;/resData&gt;
S:      &lt;trID&gt;
S:         &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:         &lt;svTRID&gt;54321-XYZ&lt;/svTRID&gt;
S:      &lt;/trID&gt;
S:   &lt;/response&gt;
S:&lt;/epp&gt;
</artwork></figure>
    </section>
  </section>
  <section title="Domain Delete Example" anchor="domain-delete-example">
    
    <section title="RESTful Domain Delete Request:" anchor="restful-domain-delete-request">
      
      <figure><artwork>
C: DELETE /rest/v1/domains/example.com HTTP/1.1
C: Host: repp.example.com
C: Cache-Control: no-cache
C: Authorization: Basic amRvZTp0ZXN0
C: Pragma: no-cache
C: Accept-Language: en
C: Accept-Charset: utf-8
C: X-REPP-cltrid: ABC-12345
</artwork></figure>
    </section>
    <section title="RESTful Domain Delete Response:" anchor="restful-domain-delete-response">
      
      <figure><artwork>
S: HTTP/1.1 200 OK
S: Date: Sun, 10 Apr 2012 12:00:00 UTC
S: Server: Acme REPP server v1.0
S: Content-Language: en
S: Content-Length: 505
S: X-REPP-cltrid: ABC-12345
S: X-REPP-svtrid: 54321-XYZ
S: X-REPP-eppcode: 1000
S: Content-Type: application/epp+xml
S: Connection: close

S:&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
S:&lt;epp xmlns="urn:ietf:params:xml:ns:epp-1.0"
S:     xmlns:domain="urn:ietf:params:xml:ns:domain-1.0"&gt;
S:   &lt;response&gt;
S:      &lt;result code="1000"&gt;
S:         &lt;msg&gt;Command completed successfully&lt;/msg&gt;
S:      &lt;/result&gt;
S:      &lt;trID&gt;
S:         &lt;clTRID&gt;ABC-12345&lt;/clTRID&gt;
S:         &lt;svTRID&gt;54321-XYZ&lt;/svTRID&gt;
S:       &lt;/trID&gt;
S:   &lt;/response&gt;
S:&lt;/epp&gt;
</artwork></figure>
    </section>
  </section>
</section>

</back>
</rfc>
