<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" ipr="trust200902">
  <front>
    <title abbrev="ICE-DTLS">
      Using Datagram Transport Layer Security (DTLS) For Interactivity Connectivity Establishment (ICE) Connectivity Checking: ICE-DTLS
    </title>

    <author initials="M" surname="Thomson" fullname="Martin Thomson">
      <organization>Skype</organization>
      <address>
        <postal>
          <street>3210 Porter Drive</street>
          <city>Palo Alto</city>
          <region>CA</region>
          <code>94304</code>
          <country>US</country>
        </postal>
        <phone>+1 650-353-1925</phone>
        <email>martin.thomson@gmail.com</email>
      </address>
    </author>

<!--
    <author initials="J" surname="Lokier" fullname="Jamie Lokier">
      <organization></organization>
      <address>
        <postal>
          <street></street>
          <code></code>
          <city></city>
          <country></country>
        </postal>
        <email></email>
      </address>
    </author>
-->

    <date month="March" year="2012"/>
    <area>RAI</area>
    <workgroup>rtcweb</workgroup>
    <keyword>DTLS</keyword>
    <keyword>ICE</keyword>
    <keyword>round-trip</keyword>
    <keyword>optimization</keyword>

    <abstract>
      <t>Interactivity Connectivity Establishment (ICE) connectivity checking using the Datagram Transport Layer Security (DTLS) handshake is described.  The DTLS handshake provides sufficient information to identify valid candidates and establish consent.
      </t>

    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>User experience with real time applications depends greatly on low latency.  At session setup time, optimizing the total number of network round trips between a user action and the receipt of media is key to improving user experience.
      </t>

      <t><xref target="RFC5245">Interactivity Connectivity Establishment (ICE)</xref> performs a crucial function in establishing a functional transport flow between peers in the presence of network address translation (NAT) middleboxes.  Performing the complete ICE procedure can add significant additional latency to session setup.  
      </t>

      <t>A complete ICE connectivity check and candidate nomination requires - at best - one additional round trip.  This assumes aggressive nomination and all the associated drawbacks.  Without aggressive nomination, two round trips are added.
      </t>

      <t>A transport session that is secured with <xref target="RFC6347">Datagram Transport Layer Security (DTLS)</xref> requires at least two additional round trips to establish once ICE negotiation completes.
      </t>
      
      <t>A method is described that removes the need for blocking ICE connectivity checks and nominations with only minimal additional state overhead at each peer.  This allows a secured session setup without additional latency.  In addition, the negative consequences of aggressive nomination are avoided.
      </t>

      <t>Peers identify candidates using information encoded in the DTLS cookie.  This avoids the need for a DTLS HelloVerifyRequest and corresponding round trip.
      </t>

      <t>Continuing consent to receive media in the session is verified using the <xref target="RFC6520">DTLS heartbeat extension</xref>.
      </t>

      <t>An extension to the <xref target="RFC4566">Session Description Protocol (SDP)</xref> identifies candidates that support this method.
      </t>

    </section>
    <section title="Terminology">
      <t>In this document, the key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" are to be interpreted as described in BCP 14, <xref target="RFC2119">RFC 2119</xref> and indicate requirement levels for compliant implementations.
      </t>

      <t>The term <spanx style="verb">server</spanx> and <spanx style="verb">client</spanx> are used in this document to refer to the peers that act in the DTLS server and client roles.  This is distinct from the caller and callee who are participants in the media session.
</t>
    </section>

    <section title="ICE using DTLS">
      <t>The DTLS ClientHello and ServerHello messages can be used as a replacement connectivity check request.
      </t>

      <section anchor="rtt" title="Without Optimization">
	<t>A complete session setup using ICE and DTLS optimistically requires between 5 and 7 round trips to complete.  From the instant that the caller initiates a call:
	<list style="numbers">
	  <t>Caller gathers server reflexive and relay candidates.
	  </t>
	  <t>Caller signals call creation.  Callee signals response, callee sends first connectivity check - a <xref target="RFC5389">Session Traversal Utilities for NAT (STUN)</xref> Binding request.
	  </t>
	  <t>Caller responds to connectivity check, creates own connectivity check.  Callee responds to connectivity check.
	  </t>
	  <t>Caller creates an ICE nomination (a STUN Binding request with USE-CANDIDATE set).  Callee responds to nomination.  Callee sends DTLS ClientHello.
	  </t>
	  <t>Caller sends a DTLS HelloVerifyRequest with a cookie.  Callee re-sends the ClientHello with the cookie.
	  </t>
	  <t>Caller sends a DTLS ServerHello and associated messages.  Callee sends a DTLS Finished and ChangeCipherSpec.
	  </t>
	  <t>Caller validates the Finished message.  Caller can begin media transmission.  Caller sends a Finished message.  Callee validates the Finished message.  Callee can begin media transmission.
	  </t>
	</list>
	</t>

	<t>This sequence assumes that no packets are lost or blocked during setup.  It also assumes that the callee creates the DTLS ClientHello in order to save half a round trip, which probably doesn't correspond with established practice.
	</t>

	<t>The delay imposed by acquiring consent for the call from the callee potentially dwarfs any delays from session setup.  Low latency setup is most applicable to pre-authorized sessions and situations where an automated system is able to rapidly accept calls.
	</t>
      </section>
      <section title="With Optimization">
	<t>Using the DTLS handshake messages for connectivity checking takes far fewer round trips in the best case:
	<list style="numbers">
	  <t>Caller gathers server reflexive and relay candidates.
	  </t>
	  <t>Caller signals call creation, indicating support for ICE-DTLS.  Callee signals response.  Callee sends DTLS ClientHello including a specially formatted cookie.
	  </t>
	  <t>Caller sends a DTLS ServerHello and associated messages.  Callee sends a DTLS Finished and ChangeCipherSpec.
	  </t>
	  <t>Caller validates the Finished message.  Caller can begin media transmission.  Caller sends a Finished message.  Callee validates the Finished message.  Callee can begin media transmission.
	  </t>
	</list>
	</t>
      </section>

      <section anchor="check" title="Connectivity Check and Nomination">
	<t>Validating the DTLS handshake requires that peers retain copies of the handshake messages.  A (DTLS) client that sends multiple ClientHello messages in place of connectivity checks MUST retain the contents of each of those messages in order to later successfully complete the DTLS handshake.
	</t>

	<t>This requires additional state retention - especially at the (DTLS) server - when multiple connectivity checks are sent and received.  This information does not add significantly to the state burden imposed by ICE.  Assuming that the client does not alter the configuration for each session, the Random and Cookie fields will vary in every ClientHello.
	</t>

	<t>Continuing the handshake past the *Hello messages indicates that the candidate pair in use has been nominated.  Once a Finished message has been received for any session, any state retained for other candidates within the same ICE negotiation MAY be discarded and any sessions abandoned.
	</t>
      </section>

      <section title="ICE Controller Selection">
	<t>This process implies that the peer in the DTLS client role is acting as the ICE controller.  Since both peers need to send packets in order to create the session, a mechanism for determining which of the two clients is the controller is necessary.
	</t>

	<t>A DTLS peer that receives a ClientHello when it has one of its own ClientHello messages outstanding continues to send.  A peer that receives a message is more likely to be able to respond to those messages on the same transport flow than it is to successfully send its own messages.  Based on the receipt of a message alone, there is no way to tell if the other peer has successfully received any other packets.  Therefore, the peer creates the ServerHello and associated messages in response.
	</t>

	<t>A peer that receives a ServerHello when its own ServerHello is outstanding must choose whether to end the handshake, or whether it is the controller.  Only the ICE controller is able to continue the handshake.
	</t>

	<t>Unless the ICE controller is selected by other means, the ICE controller is the peer that has the largest numeric public key value, taken from the DTLS Certificate message.
	</t>
      </section>

      <section anchor="cookie" title="DTLS Cookie Handling">
	<t>The HelloVerifyRequest message in DTLS is used to determine that a client is genuine and is able to receive packets.  This allows a server to avoid allocating state for a client based on the receipt of an arbitrary packet.
	</t>
	
	<t>Where a signaling relationship already exists between client and server, the cookie exchange provides less utility.  However, the cookie still provides protection against receipt of spoofed ClientHello packets.
	</t>

	<t>Populating the DTLS cookie with information from the signaling allows a server to determine that a packet is genuine without requiring a round trip for confirmation.  Using the ICE username fragment and password ensures that no additional state is required to use this method.
	</t>

	<t>The DTLS cookie includes information from the signaling, chosen by the DTLS server, plus a <xref target="RFC2104">HMAC</xref>.  The HMAC that ensures that access to packets does not enable the sending of spoofed ClientHello messages.
	</t>

	<t>The value of the Cookie is formed using a method similar to the ICE short term credential mechanism.  The ICE user is formed by concatenating the username fragment from the peer, a colon (':') and the local username fragment.  The HMAC is calculated using the ICE password as the key, with the text being a concatenation of the Random value from the DTLS ClientHello and the ICE user.  No other information from the ClientHello is authenticated.
	</t>
	<t>The Cookie is calculated as follows:
	<list style="empty">
	  <t>ice_user = ice_ufrag_peer | ':' | ice_ufrag_local
	  </t>
	  <t>Cookie = HMAC[hash](ice_pwd_peer, Random | ice_user) | ice_user
	  </t>
	</list>
	... where '|' implies concatenation.  This method is roughly equivalent to the one used by ICE when forming STUN packets.
	</t>

	<t>Hash agility is achieved by signaling the hash to use.  Implementations MUST support <xref target="RFC3174">SHA-1</xref>.  See <xref target="sdp"/> for an example.
	</t>

	<t>Multiple hash algorithms MAY be signaled to indicate that multiple different cookies are accepted.
	</t>

	<t>In order to support ICE usernames longer than 12 octets or hash algorithms other than SHA-1, <xref target="RFC6347">DTLS 1.2</xref> MUST be supported.  DTLS 1.2 expands the size of the cookie field to 255 octets.
	</t>
      </section>
    </section>

    <section title="Indicating Continuing Consent to Receive">
      <t>An important security concern for the web context is that a media sender has a means of checking that a media receiver consents to receive that media.  Since consent can be revoked, a regular check is necessary to ensure that media is not unwanted.
      </t>

      <t>The <xref target="RFC6520">DTLS heartbeat extension</xref> provides a means of signaling liveness of a DTLS session.  A successful response also indicates that the receiver consents to the continuing receipt of data.
      </t>
      <t>In order to support this feature, peers MUST use the heartbeat extension and MUST NOT send peer_not_allowed_to_send in the handshake.
      </t>
    </section>

    <section anchor="stun" title="Parallel STUN">
      <t>The main drawback of this optimization is that it is not possible to gather peer reflexive addresses using the connectivity check.  Performing a STUN Binding request in parallel to the DTLS handshake allows a client to gather a peer reflexive address without additional latency.
      </t>
    </section>

    <section anchor="sdp" title="Signaling in SDP">
      <t>The <xref target="RFC4566">Session Description Protocol (SDP)</xref> can be used to signal support for this feature.
      </t>
      <t>The <spanx style="verb">ice-dtls</spanx> attribute is set to the textual name of the hash function used in the HMAC.  Valid values are taken from the  <xref target="IANAHashText">IANA registry of Hash Function Textual Names</xref>, with multiple values separated by spaces.
      </t>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>The Random field in the DTLS handshake provides more entropy than the corresponding field in STUN (224 bits vs. 96 bits).  Both use an equivalent HMAC method.  This makes guessing the correct ClientHello considerably harder than guessing the correct STUN Binding request.
      </t>

      <t>The state maintained by peers using the DTLS handshake is increased marginally over what is required to perform ICE.  Each peer is required to retain all the messages in the DTLS handshake in order to correctly form the Finished message.  Since each peer also authenticates every ClientHello, only hosts with access to signaling are able to create state in this fashion.
      </t>

      <t>State accumulation can be limited using the same methods recommended for the STUN Amplification Attack (Section 18.5.2 in <xref target="RFC5245"/>).
      </t>
    </section>

    <section anchor="iana" title="IANA Considerations">
      <t>[[Note to IANA/RFC Editor: Please replace instance of RFCXXXX with the number of the published RFC and remove this note.]]
      </t>
      <t>This specification defines a new SDP 'ice-dtls' attribute following the procedures of Section 8.2.4 of <xref target="RFC4566"/>.
      <list style="hanging">
	<t hangText="Contact Name:">Martin Thomson, martin.thomson@gmail.com</t>
	<t hangText="Attribute Name:">ice-dtls</t>
	<t hangText="Long Form:">ice-dtls</t>
	<t hangText="Type of Attribute:">session- or media-level</t>
	<t hangText="Charset Considerations:">The attribute is not subject to the charset attribute.</t>
	<t hangText="Purpose:">This attribute indicates that DTLS is supported as an alternative mechanism for ICE connectivity checking and consent.  The values of the attribute indicate the hash functions that can be used to calculate the value of the DTLS cookie.
	</t>
	<t hangText="Appropriate Values:">A whitespace-separated list of values taken from the <xref target="IANAHashText">IANA registry of Hash Function Textual Names</xref>.
	</t>
      </list>
      </t>
    </section>

    <section title="Acknowledgments">
      <t>Cullen Jennings provided the initial idea for this optimization.
      </t>
    </section>

  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2104"?>
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.3174"?>
      <?rfc include="reference.RFC.4566"?>
      <?rfc include="reference.RFC.5245"?>
      <?rfc include="reference.RFC.5246"?>
      <?rfc include="reference.RFC.6347"?>
      <?rfc include="reference.RFC.6520"?>
      <reference anchor="IANAHashText">
        <front>
	  <title>IANA registry of Hash Function Textual Names</title>
	  <author>
	    <organization abbrev="IANA">
	      Internet Asigned Numbers Authority
	    </organization>
	  </author>
	  <date/>
        </front>
        <format type="XML"
                target="http://www.iana.org/assignments/hash-function-text-names"/>
      </reference>
      
      <!-- <?rfc include="reference.I-D.ietf-httpbis-p1-messaging"?> -->
    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.5389"?>
    </references>
  </back>

</rfc>
