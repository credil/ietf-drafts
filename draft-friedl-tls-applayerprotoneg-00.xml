<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC3264 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3264.xml">
<!ENTITY RFC6066 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6066.xml">
<!ENTITY RFC5077 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5077.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-friedl-tls-applayerprotoneg-00" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="Abbreviated Title">Transport Layer Security (TLS) Application Layer Protocol Negotiation Extension</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <author fullname="Stephan Friedl" initials="S.F."
            surname="Friedl">
      <organization>Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>170 West Tasman Drive</street>

          <!-- Reorder these if your country does things differently -->

          <city>San Jose</city>

          <region>CA</region>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <phone>(720)562-6785</phone>

        <email>sfriedl@cisco.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date month="October" year="2012" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>Network Working Group</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>draft</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>
      This document describes a Transport Layer Security (TLS) extension for application layer protocol 
      negotiation within the TLS handshake.  For instances in which the TLS connection is established over 
      a well known TCP/IP port not associated with the desired application layer protocol, this extension 
      allows the application layer to negotiate which protocol will be used within the TLS session.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>Currently, the Next Protocol Negotiation extension (NPN) is used to establish a <xref target="spdy">SPDY</xref> protocol 
      session within a TLS <xref target="RFC5246">RFC 5246</xref> session on port 443.  NPN is not 
      specific to SPDY and can be used to negotiate sessions for a wide variety of protocols within
      the TLS handshake.</t>
      
      <t>NPN seeks to provide a reliable mechanism for application developers to establish secure sessions for
      arbitrary protocols without interference from firewalls, HTTP proxies and MITM proxies.  It addresses
      this goal by introducing a protocol negotiation process into the TLS handshake under the constraints that
      no additional roundtrips be added to the handshake and that the final protocol selection be opaque to the
      network carrying the TLS session.  To do this, NPN introduces a non-symmetric and slightly idiosyncratic 
      extension to the TLS handshake.  Within the NPN extension, it is the server that first generates and 
      transmits an offer of supported protocols to the client.  The offer is sent as part of the TLS ServerHello 
      message before the [ChangeCipherSpec] subprotocol has been started, therefore the list of protocols 
      supported by the server is transmitted in plaintext.  The client chooses a protocol which may or may not 
      appear in the offer from the server and then responds with the definitive protocol selection answer.  
      The client response is sent after the [ChangeCipherSpec] subprotocol has been initiated, so the protocol
      selected is encrypted in the client response.</t>
      
      <t>In many other application layer protocol negotiation processes, it is the client that first sends an offer
      of protocols it supports to the server.  The server then selects the protocol to be used in the
      session and includes this answer in the response.  <xref target="RFC3264">RFC 3264</xref> describes a 
      SDP based offer/answer model which is not proscriptive in terms of which party generates the offer, 
      however in practice it is typically the client generating the offer and the server replying with the answer.  
      This permits the server to act as the definitive entity for selection of the application layer protocol.</t>
      
      <t>History demonstrates that there exist a multiplicity of compelling needs for TCP/IP networks to provide
      differentiated network treatment based on protocol.  This differentiated treatment may include QOS and/or
      firewalling to permit enterprises and carriers to manage the flows within their networks.  QOS requirements
      may be driven by the needs of real-time protocols or service provider SLAs or service tiers.  Firewalling
      is required to meet a variety of regulatory, compliance, appropriate use and security mandates.</t>
      
      <t>This draft proposes an alternative formulation of the NPN protocol which 1) brings the offer/answer negotiation
      into alignment with the majority of other application layer protocol negotiation standards, 2) improves the
      symmetry of the offer/answer exchange and 3) makes the definitive protocol selection answer from the server
      visible to the network.</t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.
        </t>
      </section>

      <section title="Application Layer Protocol Negotiation Extension">
        <t>
        A new extension type ("application_layer_protocol_negotiation(TBD)") is defined and MAY be included by the client in
        its "ClientHello" message.
        </t>
        
        <figure>
        <artwork align="left"><![CDATA[
enum {
	application_layer_protocol_negotiation(TBD), (65535)
} ExtensionType;

        ]]></artwork>
		</figure>
		
		<t>
		The "extension_data" field of the ("application_layer_protocol_negotiation(TBD)") extension SHALL contain "ProtocolIdentifierList"
		where:
        </t>
        
        <figure>
        <artwork align="left"><![CDATA[
struct {
    IdentifierType id_type;
    select (id_type) {
        case IANA_application_id: ApplicationID;
    } id;
} ProtocolIdentifier;

enum {
    IANA_application_id(0), (255)
} IdentifierType;

opaque ApplicationID<2^32-1>;

struct {
    ProtocolIdentifier protocol_id_list<1..2^16-1>
} ProtocolIdentifierList;
        ]]></artwork>
        </figure>
        
        <t>"ApplicationID" contains the base 10 IANA registered application number associated with the requested protocol.  This 
		new IANA controlled value is 32 bits in length and each application layer protocol negotiated within the ALPN handshake
		must have an entry in this IANA registry.  "ApplicationID" will be serialized as a fixed length 10 byte
        string using UTF-8 encoding [UTF8].  Leading zeros SHALL be used to pad the identifiers to 10 digits.  Spaces SHALL be used
		to separate port numbers in a "ProtocolIdentifierList".</t>
        
        <t>
		Servers that receive a client hello containing the "application_layer_protocol_negotiation" extension, MAY
        return a suitable protocol selection response to the client.  The server will ignore any "ProtocolIdentifier" that
		it does not recognize.  A new ServerHello extension type ("connection_protocol(TBD)") MAY be returned to the client within
		the extended ServerHello message.  The "extension_data" field of the ("connection_protocol(TBD)") extension SHALL contain
		a single protocol identifier serialized as an "ApplicationID" as described for the client "extension_data" protocol list.
		</t>
        
        <t>The additional content associated with this extension MUST be included in the hash calculations associated
        with the "Finished" messages.</t>
        
        <figure>
        <artwork align="left"><![CDATA[
enum {
	connection_protocol(TBD), (65535)
} ExtensionType;

struct {
    IdentifierType id_type;
    select (id_type) {
        case IANA_application_id: ApplicationID;
    } id;
} ProtocolIdentifier;

opaque ApplicationID<2^32-1>;

        ]]></artwork>
        </figure>
        
        <t>
        Therefore, a full handshake with the "application_layer_protocol_negotiation" and "connection_protocol" extensions
		has the following flow (contrast with section 7.3 of <xref target="RFC5246">RFC 5246</xref>):
        </t>
        
      <figure align="center" anchor="full_handshake">

        <artwork align="left"><![CDATA[
Client                                              Server

ClientHello                     -------->       ServerHello
  (ALPN extension &                               (connection protocol
   list of protocols)                              extension &
                                                   selected protocol)
                                                Certificate*
                                                ServerKeyExchange*
                                                CertificateRequest*
                                <--------       ServerHelloDone
Certificate*
ClientKeyExchange
CertificateVerify*
[ChangeCipherSpec]
Finished                        -------->
                                                [ChangeCipherSpec]
                                <--------       Finished
Application Data                <------->       Application Data
            ]]></artwork>

      </figure>
      
      <t>
      An abbreviated handshake with the "application_layer_protocol_negotiation" and "connection_protocol"
	  extensions the following flow:
	  </t>
	  
      <figure align="center" anchor="abbreviated_handshake">

        <artwork align="left"><![CDATA[
Client                                              Server

ClientHello                     -------->       ServerHello
  (ALPN extension &                               (connection protocol
   list of protocols)                              extension &
                                                   selected protocol)
                                                [ChangeCipherSpec]
                                <--------       Finished
[ChangeCipherSpec]
Finished                        -------->
Application Data                <------->       Application Data
            ]]></artwork>

      </figure>
        
		<t>Unlike many other TLS extension, this extension does not establish properties of the session,
		only of the connection.  When session resumption or session tickets <xref target="RFC5077">RFC 5077</xref>
		are used, the previous contents of this extension are irrelevant and only the values in the new 
		handshake messages are considered.</t>
		       
		<t>For the same reasons, after a handshake has been performed for a given connection, renegotiations on
		the same connection MUST NOT include the "application_layer_protocol_negotiation" or "connection_protocol" extensions.</t>
      </section>

      <section title="Protocol Selection">
      
        <t>It is expected that a server will have a list of protocols that it supports, in preference order, 
        and will only select a protocol if the client supports it.  In that case, the server SHOULD select
        the most highly preferred protocol it supports which is also advertised by the client.  In the event
        that the server supports no protocols that the client advertises, then the server SHOULD select
        the first protocol in its ordered list.</t>
        
        <t>The protocol identified in the "connection_protocol" extension type in the ServerHello SHALL be definitive for
        the connection.  The server SHALL NOT respond with a selected protocol and subsequently use a different
        protocol for application data exchange.</t>
        
      </section>

      <section title="Design Considerations">
        <t>
        The ALPN extension is intended to follow the typical design of TLS protocol extensions.  Specifically,
        the negotiation is performed entirely within the hello messages and the ClientHello and ServerHello extensions conform to
        the same general pattern used by other TLS extensions.  The "connection_protocol" extension is intended to
		be definitive for the connection and is sent in plaintext to permit network elements to provide
		differentiated service for the connection when the TCP/IP port number is not definitive for the
		application layer protocol to be used in the connection.  
        </t>
      </section>

      <section title="Security Considerations">
        <t>
        The ALPN extension does not impact the security of TLS session establishment or application data exchange.  ALPN
        serves to provide an externally visible marker for the application layer protocol associated with the TLS
        connection.  Historically, the application layer protocol associated with a connection could be ascertained from
        the TCP/IP port number in use.  
        </t>
      </section>

      <section title="IANA Considerations">
      
        <t>
		This document requires the IANA to update its registry of TLS extensions to assign two entries referred to
        here as "application_layer_protocol_negotiation" for extended ClientHello messages and "connection_protocol"
		for extended ServerHello messages.
		</t>
        
        <t>
		This document requires the IANA to create a new registry of application identifiers to serve as protocol
        identifiers for ALPN.  It is suggested this identifier be 32 bit numeric value with the bottom 16 bits associated
		with current IANA port numbers when the upper 16 bits are all set to zero.
		</t>
        
      </section>
    </section>
  
    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>
      This document benefitted specifically from the NPN extension draft authored by Adam Langley of Google and
      from discussions with Tom Wesselman and Cullen Jennings both of Cisco.
      </t>
    </section>
  </middle>


  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;
      
      &RFC5246;
      
      &RFC3264;
      
      &RFC6066;

    </references>

    <references title="Informative References">
      <!-- Here we use entities that we defined at the beginning. -->
      
      &RFC5077;
      
     <!-- A reference written by by an organization not a person. -->

      <reference anchor="spdy">
        <front>
          <title>SPDY Protocol (Internet Draft)</title>

          <author initials="M" surname="Belshe">
            <organization></organization>
          </author>

          <author initials="R" surname="Peon">
            <organization></organization>
          </author>

          <date year="2012" />
        </front>
      </reference>

    </references>

  </back>
</rfc>
