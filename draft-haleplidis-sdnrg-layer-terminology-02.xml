<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC3654 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3654.xml">
<!ENTITY RFC3746 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3746.xml">
<!ENTITY RFC5657 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5657.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
<!ENTITY OVSDB SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-pfaff-ovsdb-proto-03.xml">
<!ENTITY I2RSArch SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-liu-i2rs-architecture-02.xml">
<!ENTITY I2RSInfo SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-nitinb-i2rs-rib-info-model-02.xml">
<!ENTITY RFC5812 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5812.xml">
<!ENTITY RFC5810 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5810.xml">
<!ENTITY RFC6241 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6241.xml">
<!ENTITY RFC6020 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6020.xml">
<!ENTITY RFC3418 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3418.xml">
<!ENTITY RFC3411 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3411.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes"?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="no"?>
<!-- Start each main section on a new page -->
<?rfc subcompact="no"?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-haleplidis-sdnrg-layer-terminology-02" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title>SDN Layers and Architecture Terminology</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

	<author fullname="Evangelos Haleplidis" initials="E.H." surname="Haleplidis">
			<organization>University of Patras</organization>
			<address>
				<postal>
					<street>Department of Electrical and Computer Engineering</street>
					<!-- Reorder these if your country does things differently -->
					<city>Patras</city>
					<region/>
					<code>26500</code>
					<country>Greece</country>
				</postal>
				<email>ehalep@ece.upatras.gr</email>
				<!-- uri and facsimile elements may also be added -->
			</address>
		</author>

	<author fullname="Spyros Denazis" initials="S.D." surname="Denazis">
			<organization>University of Patras</organization>
			<address>
				<postal>
					<street>Department of Electrical and Computer Engineering</street>
					<!-- Reorder these if your country does things differently -->
					<city>Patras</city>
					<region/>
					<code>26500</code>
					<country>Greece</country>
				</postal>
				<email>sdena@upatras.gr</email>
				<!-- uri and facsimile elements may also be added -->
			</address>
		</author>

	<author fullname="Kostas Pentikousis" initials="K.P." surname="Pentikousis">
      <organization abbrev="EICT">EICT GmbH</organization>
      <address>
       <postal>
        <street>Torgauer Strasse 12-15</street>
        <city>10829 Berlin</city>
        <country>Germany</country>
       </postal>
       <email>k.pentikousis@eict.de</email>
      </address>
    </author>

    <author fullname="Jamal Hadi Salim" initials="J." surname="Hadi Salim">
      <organization>Mojatatu Networks</organization>
      <address>
        <postal>
          <street>Suite 400, 303 Moodie Dr.</street>
          <city>Ottawa, Ontario</city>
          <code>K2H 9R4</code>
          <country>Canada</country>
        </postal>
        <email>hadi@mojatatu.com</email>
      </address>
    </author>

	<author fullname="Odysseas Koufopavlou" initials="O.K." surname="Koufopavlou">
			<organization>University of Patras</organization>
			<address>
				<postal>
					<street>Department of Electrical and Computer Engineering</street>
					<!-- Reorder these if your country does things differently -->
					<city>Patras</city>
					<region/>
					<code>26500</code>
					<country>Greece</country>
				</postal>
				<email>odysseas@ece.upatras.gr</email>
				<!-- uri and facsimile elements may also be added -->
			</address>
		</author>


    <date year="2013" />

    <area>Routing</area>

    <workgroup>SDNRG</workgroup>

    <keyword>SDN</keyword>
    <keyword>Layer</keyword>
    <keyword>Terminology</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>Software-Defined Networking (SDN) is a new approach for network programmability. Network programmability refers to the ability to control, change, and manage network behavior dynamically through software via open interfaces as opposed to relying on closed boxes and propietary defined interfaces. SDN introduces an abstraction for the data forwarding plane and, by doing so, separates it from the control plane. This separation allows faster innovation cycles at both planes as experience has already shown. However, there is increasing confusion as to what exactly SDN is, what is the layer structure in an SDN architecture and how do layers interface with each other. This document does not aim to standardize any layers or interfaces but rather aims to answer these questions and provide a concise reference document for SDNRG in particular, and the SDN community in general.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
	<t>Software-Defined Networking (SDN) is a relevant new term for the programmable networks paradigm. In short, SDN refers to the ability to use software to program individual network devices dynamically and therefore control the behavior of the network as a whole. A key element in SDN is the introduction of an abstraction between the (traditional) Forwarding and the Control planes in order to separate them and provide applications with the necessary application programming interfaces (APIs) to programmatically control the network. The goal is to leverage on this separation, and the associated programmability, to enable faster innovation at both planes.</t>

	<t>Current and earlier research in SDN often focuses on varying aspects of programmability, and we are frequently confronted with conflicting points of view regarding what exactly SDN is. For instance, we find that for various reasons (e.g. work focusing on one domain and therefore not necessarily applicable as-is to other domains), certain well-accepted definitions do not corelate well with each other. For example, both <xref target="OpenFlow">OpenFlow</xref> and <xref target="RFC6241">NETCONF</xref> have been characterized as SDN, but they refer to control and management respectively.</t>
	
	<t>This motivates us to consolidate the defitions of SDN in the literature and correlate them with earlier work in IETF and the research community. Of particular interest, for example, is to determine which layers comprise the SDN architecture and which interfaces are to be used between them. As such, the aim of this document is not to standardize any particular layer or interface but rather to provide a concise reference document regarding the SDN layers architecture, which would be useful to upcoming work in SDNRG as well as future discussions within the SDN community as a whole.</t>
	
	<section title="Terminology">

	<t>This document uses the following terms:
	<list style="hanging">
		<t>Software-Defined Networking (SDN) - A programmable networks approach that supports the separation of Control and Forwarding Planes via standardized interfaces.</t>
		
		<t>Network Device - A device that performs one or more network operations related to packet manipulation and forwarding. A network device can be physical or virtual.</t>
		
		<t>Forwarding Plane (FP) - The network device part responsible for forwarding traffic.</t>
		
		<t>Operational Plane (OP) - The network device part responsible for managing device operation.</t>
		
		<t>Management Plane (MP) - Network functionality responsible for monitoring and maintaining network devices.</t>
		
		<t>Control Plane (CP) - Part of the network that is assigned to control one or more network devices.  CP instructs network devices on how to treat and forward packets.</t>
		
		<t>Device Abstraction Layer (DAL) - The device's abstraction layer based on one or more models. If it is a physical device it may be referred to as the Hardware Abstraction Layer (HAL). DAL provides a uniform point of reference for the device.</t>
		
		<t>Control Abstraction Layer (CAL) - The control plane's abstraction layer. CAL provides access to the control plane southbound interface.</t>
		
		<t>Management Abstraction Layer (MAL) - The management plane's abstraction layer. MAL provides access to the management plane southbound interface.</t>
		
		<t>Interface - A point of interaction between two parts. In case these parts are not in the same physical location, the interface is usually implemented as a network protocol.  In case these parts are collocated in the same physical location the interface can be a protocol or an open/proprietary software inter-process communication API.</t>
		
		<t>Application (App) - A piece of software that utilizes underlying services to perform a function. Application operation can be parametrized, typically by passing certain arguments at call time, but it is meant to be a standalone piece of software as it does not offer any interfaces to other applications or services.</t>
		
		<t>Service - A piece of software that performs one or more functions and provides one or more APIs to applications or other services of the same or different layers to make use of said functions and returns one or more results. Services can be aggregated with other services or called in a certain serialized manner to create a new service.</t>
		</list></t>
    </section>
    </section>

  <section title="SDN Layers and Architecture">
  
    <t><xref target="SDNLayers" /> provides a detailed high-level overview of the current SDN architecture abstractions. Note that planes can be collocated with other planes or can be physically separated, as we discuss below.</t>

    <figure title="SDN Layer Architecture" anchor="SDNLayers"> <artwork align="center"><![CDATA[
              o--------------------------------o
              |                                |
              | +-------------+   +----------+ |
              | | Application |   |  Service | |
              | +-------------+   +----------+ |
              |       Application Plane        |
              o---------------Y----------------o
                              |              
*-----------------------------Y---------------------------------*
|               Service Abstraction Layer (SAL)                 |
*------Y------------------------------------------------Y-------*
       |                                                |
       |               Service Interface                |
       |                                                |
o------Y------------------o       o---------------------Y------o
|      |    Control Plane |       | Management Plane    |      |
| +----Y----+   +-----+   |       |  +-----+       +----Y----+ |
| | Service |   | App |   |       |  | App |       | Service | |
| +----Y----+   +--Y--+   |       |  +--Y--+       +----Y----+ |
|      |           |      |       |     |               |      |
| *----Y-----------Y----* |       | *---Y---------------Y----* |
| | Control Abstraction | |       | | Management Abstraction | |
| |     Layer (CAL)     | |       | |      Layer (MAL)       | |
| *----------Y----------* |       | *----------Y-------------* |
|            |            |       |            |               |
o------------|------------o       o------------|---------------o
             |                                 |
             | CP                              | MP
             | Southbound                      | Southbound 
             | Interface                       | Interface
             |                                 |
*------------Y---------------------------------Y----------------*
|               Device Abstraction Layer (DAL)                  |
*------------Y---------------------------------Y----------------*
|            |                                 |                |
|    o-------Y----------o   +-----+  o---------Y---------o      |
|    | Forwarding Plane |   | App |  | Operational Plane |      |
|    o------------------o   +-----+  o-------------------o      |
|                       Network Device                          |
+---------------------------------------------------------------+
]]></artwork></figure>

    <section title="Overview">
      <t>SDN spans multiple planes as illustrated in <xref target="SDNLayers" />. Starting from the bottom part of the figure and moving towards the upper part, we identify the following planes:
	  
      <list style="symbols">
        <t>Forwarding Plane - Responsible for handling packets in the datapath. Actions of the forwarding plane include, but are not limited to, forwarding, dropping and changing packets. The Forwarding Plane is usually the termination point for control plane services and applications.</t>
		
        <t>Operational Plane - Responsible for managing the operational state of the Network Device, e.g. active/inactive, number of ports, port status, etc. The Operational Plane is usually the termination point for management plane services and applications.</t>
        
		<t>Control Plane - Responsible for taking decisions on how packets should be forwarded by one or more Network Devices and pushing such decisions down to the Network Devices to be executed.</t>
        
		<t>Management Plane - Responsible for managing devices, e.g. taking decisions on Network Device states.</t>
        
		<t>Application Plane - The plane where applications and services reside; applications may be implemented in a modular fashion and therefore span multiple planes.</t>
      </list></t>

      <t>All planes mentioned above are connected via Interfaces (as indicated with "Y" in <xref target="SDNLayers" />. The Interface may take multiple roles depending on whether connected planes reside on the same (physical or virtual) device. If the respective planes are designed so that they do not have to reside in the same device, then the Interface can only take the form of a protocol. If the planes are co-located on the same device, then the Interface could either be an open/proprietary protocol, an open/proprietary software inter-process communication API, or Kernel system calls.</t>
	  
      <t>Applications, i.e. software programs that perform specific computations that consume services without providing access to other applications, can be implemented natively inside a plane or can span multiple planes.</t>
	  
      <t>Services, i.e. software programs that provide APIs to other applications or services, can also be natively implemented in specific planes. Services that span multiple planes belong to the application plane as well.</t>
	  
      <t>This document considers four abstraction layers:
	  
      <list style="hanging">
        <t>The Device Abstraction Layer (DAL) abstracts the device forwarding and operational plane to the control and management plane, respectively. Variations of DAL may abstract both planes or either of the two.</t>
        
        <t>The Control Abstraction Layer (CAL) abstracts the CP southbound interface and the DAL from the applications and services of the Control Plane.</t>

        <t>The Management Abstraction Layer (MAL) abstracts the MP southbound interface and the DAL from the applications and services of the Management Plane.</t>
		
        <t>The Service Abstraction Layer (SAL) provides service abstractions for use by applications and other services.</t>
      </list></t>
    </section>
	
    <section title="Network Devices" anchor="ND">
      <t>A Network Device is any device on a network that performs a function over a packet that it receives via its input port. The network device could, for example, forward the packet, drop the packet, change and forward the packet, etc. NDs can be implemented in hardware or software and can be either a physical or virtual network element. Each network  network device has both a Forwarding Plane and an Operational Plane. The Forwarding Plane, commonly referred to as the "data path", is responsible for handling and forwarding packets. The Operational Plane is responsible for operational state of the ND, for example, with respect to status of network ports and interfaces.</t>
      
      <t>The Forwarding and the Operational Planes can be exposed via a Device Abstraction Layer (DAL), which may be comprised of one or more abstraction models. Examples of Forwarding Plane abstraction models are the <xref target="RFC5812">ForCES model</xref> and the <xref target="OpenFlow">OpenFlow switch model</xref>. Examples of the Operational Plane abstraction model include the <xref target="RFC5812">ForCES model</xref>, the <xref target="RFC6020">YANG model</xref> and <xref target="RFC3418">SNMP MIBs</xref>.</t>

      <t>Examples of Network Devices include switches and routers. Additional examples include network elements that may operate at a layer above IP, such as firewalls, load balancers and video transcoders.</t>

      <t>Note that applications can also reside in a network device. Examples of such applications include event monitoring, and handling (offloading) topology discovery or ARP in the device itself instead of forwarding such traffic to the control plane.</t>
    </section>
	
    <section title="Control Plane" anchor="CP">
      <t>The Control Plane communicates with the Forwarding Plane of devices using a Control Plane Southbound Interface (CPSI) with DAL as a point of reference. The Control Plane is responsible for instructing the Forwarding Plane about how to handle network packets.</t>
	  
      <t>Normally the CPSI is a time-critical interface and requires low latency and sometimes high bandwidth in order to perform many operations in short order. Examples include fast and high frequency of flow or table updates, high throughput and robustness for packet handling and events.</t>
	  
      <t>CPSI can be implemented using a protocol, an API or even interprocess communication. If the Control Plane and the Network Device are not collocated, then this interface is certainly a protocol. Examples of CPSIs are <xref target="RFC5810">ForCES</xref> and the <xref target="OpenFlow">Openflow protocol</xref>.</t>
      
      <t>The Control Abstraction Layer (CAL) provides access to control applications and services to various CPSIs. The Control Plane may support more than one CPSIs.</t>
	  
      <t>Control applications can use CAL to control a network device without providing any service to upper layers. Examples include applications that perform control functions, such as OSPF, BGP, etc.</t>
	  
      <t>Control Plane Services provide access to other Services or Applications above the control plane. Examples include a virtual private LAN service, service tunnels, etc.</t>
    </section>
	
    <section title="Management Plane" anchor="MP">
      <t>The Management Plane communicates with the network device Operational Plane using a Management Plane Southbound Interface (MPSI) with DAL as a point of reference.</t>
	  
      <t>Normally MSPI, in contrast to the CPSI, is not a time-critical interface and does not share the CPSI's requirements. The management plane is typically closer to human interaction than the control plane and therefore the MSPI is usually based more on usability than performance. Messages tend to be less frequent than in the CPSI.</t>
	  
      <t>The MPSI can range from a protocol, to an API or even interprocess communication. If the Management Plane is not embedded in the network device, the MSPI is certainly a protocol. Examples of MPSIs are <xref target="RFC5810">ForCES</xref>, <xref target="RFC6241">NETCONF</xref>, <xref target="I-D.pfaff-ovsdb-proto">OVSDB</xref> and <xref target="RFC3411">SNMP</xref>.</t>
	  
      <t>The Management Abstraction Layer (MAL) provides access to management applications and services to various MPSIs. The Management Plane may support more than one MPSI.</t>
	  
      <t>Management Applications can use MAL to manage the network device without providing any service to upper layers. Examples of management applications include network monitoring applications.</t>
	  
      <t>Management Plane Services provide access to other services or applications above the Management Plane.</t>
	  
    </section>

    <section title="Service Abstraction Layer" anchor="SAL">

	<t>The Service Abstraction Layer (SAL) provides access from services of the control, management and application planes to services and applications of the application plane.</t>
	
	<t>Service Interfaces can take many forms pertaining to their specific requirements. Examples of service interfaces include but are not limited to, RESTful APIs, open or proprietary protocols such as NETCONF, inter-process communications, CORBA interfaces, etc.</t>
	  
    </section>
	
    <section title="Application Plane" anchor="AP">
    <t>Applications and services that use services from the control and/or management plane form the Application Plane.</t>
	
    <t>Additionally, services residing in the Application Plane may provide services to other services and applications that reside in the application plane via the service interface.</t>
    
	<t>Examples of applications include network topology discovery, network provisioning, path reservation, etc.</t>
    </section>
  </section>
  
  <section title="SDN Model View" anchor="SDNView">
   
    <t>We advocate that the SDN southbound interface should encompass both CSPI and MSPI.</t>
	
    <t>The SDN northbound interface is implemented in the Service Abstraction Layer.</t>
    
    <t>The above model can be used to describe in a concise manner all prominent SDN-enabling technologies, as we explain in the following subsections.</t>
	
  <section title="ForCES">
    <t>The Forwarding and Control Element Separation (<xref target="RFC5810">ForCES</xref>) is an IETF framework consisting of a model and two protocols. ForCES separates the Forwarding from the Control Plane via an open interface, namely the ForCES protocol which operates on entities of the forwarding plane that have been modeled using the ForCES model.</t>
	
    <t>The ForCES model is based on the fact that a network element is composed of numerous logically separate entities that cooperate to provide a given functionality -such as routing or IP switching- and yet appear as a normal integrated network element to external entities and secondly with a protocol to transport information. </t>
	
    <t>ForCES models the Forwarding Plane using Logical Functional Blocks (LFBs) which are connected in a graph, consisting the Forwarding Element (FE). LFBs are described in an XML language, based on an XML schema.</t>
	
    <t>LFB definitions include:
      <list style="symbols">
        <t>Base and custom-defined datatypes</t>
        <t>Metadata definitions</t>
        <t>Input and Output ports</t>
        <t>Operational parameters, or components</t>
        <t>Capabilities</t>
        <t>Event definitions</t>
      </list>
    </t>
	
    <t>The ForCES model can be used to define LFBs from fine- to coarse-grained as needed.</t>
	
    <t>The ForCES protocol is agnostic to the model and can be used to monitor, configure and control any ForCES-modeled element. The protocol has very simple commands: Set, Get and Del. ForCES is a protocol designed for high throughput and fast updates.</t>
	
    <t><xref target="RFC5810">ForCES</xref> can be mapped to the framework illustrated in <xref target="SDNLayers" /> as follows:
    
	<list style="symbols">
		<t>The ForCES model can be used to describe the DAL, both for the Operational and the Forwarding Plane, using LFBs.</t>
		<t>The ForCES protocol can then be both the CPSI and the MPSI. ForCES is inherently specified for the CPSI and satisfies its requirements, however it can also be utilized for the MPSI.</t>
		<t>CAL and MAL must be able to utilize the ForCES protocol.</t>
	</list></t>
  </section>

  <section title="NETCONF">
  <t>The Network Configuration Protocol (<xref target="RFC6241">NETCONF</xref>), is an IETF-standardized network management protocol. NETCONF provides mechanisms to install, manipulate, and delete the configuration of network devices.</t>
  
  <t>NETCONF protocol operations are realized as remote procedure calls (RPCs). The NETCONF protocol uses an Extensible Markup Language (XML) based data encoding for the configuration data as well as the protocol messages.</t>
  
  <t>Additonally, the YANG data modeling language has been developed for specifying NETCONF data models and protocol operations. YANG is a data modeling language used to model configuration and state data manipulated by NETCONF, NETCONF remote procedure calls, and NETCONF notifications.</t>
  
  <t>YANG models the hierarchical organization of data as a tree, in which each node has either a value or a set of child nodes. Additionally, YANG structures data models into modules and submodules allowing reusability and augmentation. YANG models can describe constraints to be enforced on the data. Additionally YANG has a set of base datatype and allows custom defined datatypes as well.</t>
  
  <t>YANG allows the definition of NETCONF RPCs allowing the protocol to have an extensible number of commands. For RPC definition, the operations names, input parameters, and output parameters are defined using YANG data definition statements.</t>
  
    <t>NETCONF can be mapped to the framework illustrated in <xref target="SDNLayers" /> as follows:
	<list style="symbols">
		<t>The <xref target="RFC6020">YANG model</xref> is suitable for specifying DAL for the operational plane and <xref target="RFC6241">NETCONF</xref> for the MPSI.</t>
		
		<t>Technically, the <xref target="RFC6020">YANG model</xref> can be used to specify DAL for the Forwarding plane as well, but <xref target="RFC6241">NETCONF</xref> being a protocol not designed for fast updates is likely not suitable for the requirements of CPSI.</t>
	</list></t>	
  </section>

  <section title="OpenFlow">
  <t>OpenFlow is a framework developed by Standford, currently run by the Open Networking Foundation, initially to provide a way for researchers to run experimental protocols in the network. OpenFlow provides a protocol with which a controller may manage a static model of an OpenFlow switch.</t>
  
  <t>An OpenFlow Switch consists of one or more flow tables which perform packet lookups and forwarding, a group table and an OpenFlow channel to an external controller. The switch communicates with the controller which manages the switch via the OpenFlow protocol.</t>
  
    <t>OpenFlow can be mapped to the framework illustrated in <xref target="SDNLayers" /> as follows:
	<list style="symbols">
		<t>The <xref target="OpenFlow">Openflow switch specifications</xref> covers DAL for the Forwarding Plane and provides the specification for CPSI.</t>
		
		<t>The <xref target="OF-CONFIG">OF-CONFIG protocol</xref> based on the <xref target="RFC6020">YANG model</xref>, provides DAL for the Operational Plane and specifies <xref target="RFC6241">NETCONF</xref> as the MPSI. OF-CONFIG overlaps with the OpenFlow DAL, but with <xref target="RFC6241">NETCONF</xref> as the transport protocol it shares the limitations described in the previous section.</t>
		
		<t>CAL must be able to utilize the OpenFlow protocol.</t>
		
		<t>MAL must be able to utilize the NETCONF protocol.</t>
	</list></t>		
  </section>

  <section title="I2RS">
    <t>I2RS, although still work in progress at the IETF,  can be mapped to the framework illustrated in <xref target="SDNLayers" /> as follows:
	<list style="symbols">
		<t>The <xref target="I-D.liu-i2rs-architecture">I2RS architecture</xref> is concerned with the Control and Application Planes and uses whatever CPSI and DAL are available, whether that is ForCES, OpenFlow or another Interface.</t>
		
		<t>The I2RS agent is a Control Plane Service. All services or applications on top of that belong to either the Control or the Application plane.</t>
		
		<t>Currently the I2RS working group if developing an <xref target="I-D.nitinb-i2rs-rib-info-model">Information Model</xref> in regards to the Service Abstraction Layer for the I2RS agent.</t>
	</list></t>	
  </section>
  </section>

  <section anchor="Acknowledgements" title="Acknowledgements">
    <t>The authors would like to acknowledge David Meyer, Salvatore Loreto and Sudhir Modali for their discussion and comments that helped put this document in a better shape.</t>
  </section>


    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo makes no requests to IANA.</t>

    </section>

    <section anchor="Security" title="Security Considerations">
      <t>TBD</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Informative References">
     <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC5810;
      &RFC5812;
      &RFC6241;
      &RFC6020;
      &RFC3418;
      &RFC3411;
      &OVSDB;
      &I2RSArch;
      &I2RSInfo;
	  
      <reference anchor="OpenFlow" target="https://www.opennetworking.org/images/stories/downloads/sdn-resources/onf-specifications/openflow/openflow-spec-v1.3.1.pdf">
        <front>
          <title>The OpenFlow 1.3 Specification.</title>
          <author>
            <organization>Open Networking Foundation</organization>
          </author>
          <date/>
        </front>
      </reference>
      <reference anchor="OF-CONFIG" target="https://www.opennetworking.org/images/stories/downloads/sdn-resources/onf-specifications/openflow-config/of-config-1.1.pdf">
        <front>
          <title>OpenFlow Management and Configuration Protocol 1.1</title>
          <author>
            <organization>Open Networking Foundation</organization>
          </author>
          <date></date>
        </front>
      </reference>
    </references>
  </back>
</rfc>
