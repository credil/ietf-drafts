<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY __reference.I-D.ietf-fecframe-framework SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-fecframe-framework.xml">
<!ENTITY __reference.I-D.ietf-fecframe-sdp-elements SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-fecframe-sdp-elements.xml">
<!ENTITY __reference.I-D.ietf-fecframe-1d2d-parity-scheme SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-fecframe-1d2d-parity-scheme.xml">
<!ENTITY __reference.I-D.roca-fecframe-rs SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.roca-fecframe-rs.xml">

<!ENTITY __reference.I-D.ietf-fecframe-pseudo-cdp SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-fecframe-pseudo-cdp.xml">
<!--
<ENTITY __reference.I-D.ietf-fecframe-rtp-raptor SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-fecframe-rtp-raptor.xml">
-->

<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc3550 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3550.xml">
<!ENTITY rfc4566 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4566.xml">
<!ENTITY rfc4288 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4288.xml">
<!ENTITY rfc3555 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3555.xml">
<!ENTITY rfc4756 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4756.xml">
<!ENTITY rfc5109 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5109.xml">
<!ENTITY rfc5510 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5510.xml">
<!ENTITY rfc5052 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5052.xml">
<!--
<ENTITY rfc5053 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5053.xml">
-->


]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc='yes'?>
<?rfc symrefs="yes" ?>
<?rfc iprnotified="yes" ?>
<?rfc strict="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc sortrefs="no" ?>
<?rfc colonspace='yes' ?>
<?rfc tocindent='yes' ?>
<rfc category="std" docName="draft-galanos-fecframe-rtp-reedsolomon-02" ipr="trust200902">
  <front>
    <title abbrev="RTP Payload Format for RS FEC">RTP Payload Format for Reed Solomon FEC</title>

    <author fullname="Sarit Galanos" initials="S." surname="Galanos">
      <organization>RADVISION</organization>

      <address>
        <postal>
          <street>24 Raul Wallenberg St.</street>

          <city>Tel Aviv</city>

          <code>69719</code>

          <country>Israel</country>

        </postal>

        <email>sarit@radvision.com</email>
      </address>
    </author>

    <author fullname="Orly Peck" initials="O." surname="Peck">
      <organization>RADVISION</organization>

      <address>
        <postal>
          <street>24 Raul Wallenberg St.</street>

          <city>Tel Aviv</city>

          <code>69719</code>

          <country>Israel</country>

        </postal>

        <email>orlyp@radvision.com</email>
      </address>
    </author>

    <author fullname="Vincent Roca" initials="V." surname="Roca">
      <organization>INRIA</organization>

      <address>
        <postal>
          <street>655, av. de l'Europe</street>
          <street>Inovallee; Montbonnot</street>
          <city>ST ISMIER cedex</city>
          <code>38334</code>
          <country>France</country>
        </postal>
        <email>vincent.roca@inria.fr</email>
      </address>
    </author>


    <date day="31" month="August" year="2010" />

    <workgroup>FEC Framework</workgroup>

    <abstract>
      <t>
This document defines an RTP payload format for the Forward Error Correction (FEC) that uses Reed-Solomon codes.
The format defined by this document enables the protection of source media encapsulated in RTP with one or more repair flows and
is based on the FEC framework and the SDP Elements for FEC Framework. The Reed-Solomon codes used in this document belong to the class of Maximum Distance Separable (MDS) codes which means they offer optimal protection against random and bursty packet losses.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
     <t> This document defines new RTP payload formats for the Forward Error
   Correction (FEC) that is generated by the Reed-Solomon code.  </t>
     <t>By nature, interactive Real-time applications are extremely sensitive to delay and require very low
   latency.  As a result, retransmission of lost packets and using other
   closed-loop schemes are not valid options while the use of Forward
   Error Correction (FEC) is an effective approach.   </t>
     <t>A primary requirement from FEC for real time applications is the ability to
   correctly recover from both random and bursty packet losses.  The
   Reed-Solomon FEC codes used in this document belong to the class of
   Maximum Distance Separable (MDS) codes that are optimal in terms of
   erasure recovery capability for both situations. </t>  
     <t>The format defined by this document enables the protection of media source flow with
   one or more repair flows without adding additional information to the
   source packets.  Such behavior reduces the delay presented by any FEC
   scheme and maintains backwards compatibility with non FEC-enabled
   receivers.   </t>
    <t>Number of previous drafts were composed to draw different FEC schemes suitable for different applications. 
   The scheme defined in this draft is designed to compensate a burst of packet loss over RTP networks with minimum delay, 
   which is needed in interactive IP-based applications such as video conferencing.</t>
    <t>The method described in this document is generic to all media types and provides the sender with the flexibility of deciding if FEC protection is required and if so, how many protecting packets and how many source packets to use in a block according to network conditions. Furthermore it allows applying unequal error protection that provides different level of protection to different packets. For example, it can be combined with Scalable Video Coding to protect only the base layer packets of the video flow.
   At the receiver, both the FEC and original media are received.  If no media packets are lost, the FEC packets can be ignored.  In the event    of a loss, the FEC packets can be combined with other received media   to recover all or part of the missing media packets.  </t>
   
    <t>The Reed-Solomon codes used in this document have been specified in <xref target="RFC5510"/> and are compatible with Luigi Rizzo codec (see <xref target="Rizzo97"/>).
   This document is compliant with the Forward Error Correction (FEC) Framework (described in <xref target="I-D.ietf-fecframe-framework"/>) and SDP Elements for FEC Framework (described in <xref target="I-D.ietf-fecframe-sdp-elements"/> <xref target="RFC4566"/>).      
   This draft completes <xref target="I-D.roca-fecframe-rs"/> by defining Reed-Solomon usage for RTP transport (<xref target="RFC3550"/>) and specifies the appropriate media types (see <xref target="RFC4288"/> <xref target="RFC3555"/>).
    </t>
    </section>

    <section title="Requirements Notation">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref>.</t>
    </section>
  
  
     <section anchor="definitions_notations_abbreviations"
               title="Definitions, Notations and Abbreviations">
        <t>
        This document uses the following definitions and notations. 
        For further definitions that apply to FEC Framework in general, see <xref target="I-D.ietf-fecframe-framework"/>. 
        </t>
        <section anchor="definitions"
               title="Definitions">
<!--
	       <t>FEC:  Forward Error Correction.</t>

	        <t>Source Flow:  The packet flow to which FEC protection is to be applied.</t>

	        <t>Repair Flow:  The packet flow carrying FEC data.</t>

	        <t>Source Block:  The group of source data packets which are to be FEC protected as a single block.</t>

	        <t>Source Packets: Packets that are transmitted over a source flow</t>

	        <t>Repair/FEC Packets: Packets that are transmitted over a repair flow</t>
		<t>FEC header: The header information contained in an FEC packet</t>
-->

<t>This document uses the following terms and definitions.
Some of them are FEC scheme specific and are in line with <xref target="RFC5052"/>:
<list style="hanging">
<t hangText="Source symbol:">	unit of data used during the encoding process.</t>

<t hangText="Encoding symbol:">	unit of data generated by the encoding process.
				With systematic codes, source symbols are part
				of the encoding symbols.</t>

<t hangText="Repair symbol:">	encoding symbol that is not a source symbol.</t>

<t hangText="Code rate:">	the k/n ratio, i.e., the ratio between the number
				of source symbols and the number of encoding symbols.
				By definition, the code rate is such that: 0 &lt; code rate &le; 1.
				A code rate close to 1 indicates that a small number of repair
				symbols have been produced during the encoding process.</t>

<t hangText="Systematic code:">	FEC code in which the source symbols are part
				of the encoding symbols. The Reed-Solomon codes
				introduced in this document are systematic.</t>

<t hangText="Source block:">	a block of k source symbols that are considered
				together for the encoding.</t>

<t hangText="Packet Erasure Channel:"> 
				a communication path where packets are either
				dropped (e.g., by a congested router, or because the
				number of transmission errors exceeds the correction
				capabilities of the physical layer codes) or
				received. When a packet is received, it is assumed
				that this packet is not corrupted.</t>
</list>
</t>

<t>
Some of them are FECFRAME framework specific and are in line with <xref target="I-D.ietf-fecframe-framework"/>:
<list style="hanging">
<t hangText="Application Data Unit (ADU):">
				a unit of data coming from (sender) or given to (receiver)
				the media delivery application.
				In this document, an ADU MUST use an RTP encapsulation.</t>

<t hangText="(Source) ADU Flow:">
				a flow of ADUs from a media delivery application
				and to which FEC protection is applied.
				In this document, there MUST be a single ADU flow per FECFRAME
				framework instance.</t>

<t hangText="ADU Block:">	a set of ADUs that are considered together by the FECFRAME
				instance for the purpose of the FEC scheme.</t>

<t hangText="FEC Framework Configuration Information:">
				the FEC scheme specific information that enables the synchronization
				of the FECFRAME sender and receiver instances.</t>

<t hangText="FEC Source Packet:">
				an RTP data packet submitted to (sender) or received from
				(receiver) the transport protocol.
				In this document, FEC Source Packets and ADU MUST be the same
				(e.g., for backward compability purposes). </t>

<t hangText="FEC Repair Packet:">
				an RTP repair packet submitted to (sender) or received from
				(receiver) the transport protocol.
				It contains a repair symbol along with its Explicit Repair
				FEC Payload ID.</t>
</list>
</t>

        </section>

        <section anchor="Notations"
	               title="Notations">

<!--	               
			<t>K: The number of source symbols in a source block</t>
			<t>n-k: The number of repair FEC symbols generated from a single source block</t>
-->
	               
<t>This document uses the following notations:
Some of them are FEC scheme specific:
<list style="hanging" hangIndent="7">
<t hangText="k">	denotes the number of source symbols in a source block.</t>
<t hangText="max_k">	denotes the maximum number of source symbols for any source block.</t>
<t hangText="n_r">	denotes the number of repair symbols generated for a source block.</t>
<t hangText="n">	denotes the number of encoding symbols generated for a source block.
			Therefore: n = k + n_r.</t>
<t hangText="max_n">	denotes the maximum number of encoding symbols generated for any source block.</t>
<!--
<t hangText="E">	denotes the encoding symbol length in bytes.</t>
-->
<t hangText="S">	denotes the encoding symbol length in units of m-bit elements.
			When m = 8, then S and E are equal.</t>
<t hangText="GF(q)">	denotes a finite field (also known as Galois Field) with q elements.
			We assume that q = 2^^m in this document.</t>
<t hangText="m">	defines the length of the elements in the finite field, in bits.
			In this document, m belongs to {2..16}.</t>
<t hangText="q">	defines the number of elements in the finite field.
			We have: q = 2^^m in this specification.</t>
<t hangText="CR">	denotes the "code rate", i.e., the k/n ratio.</t>
<t hangText="a^^b">	denotes a raised to the power b.</t>
</list>
</t>
	</section> 

			<section anchor="Abbreviations" title="Abbreviations">
			<!-- =========================================== -->

<t>This document uses the following abbreviations:
<list style="hanging" hangIndent="7">
<t hangText="ADU">	stands for Application Data Unit.</t>
<t hangText="ESI">	stands for Encoding Symbol ID.</t>
<t hangText="FEC">	stands for Forward Error Correction code.</t>
<t hangText="FFCI">	stands for FEC Framework Configuration Information.</t>
<t hangText="RS">	stands for Reed-Solomon.</t>
<t hangText="MDS">	stands for Maximum Distance Separable code.</t>
</list>
</t>
			</section>

      </section>

  
  
    <section anchor="reed_solomon_codes"
             title="Reed Solomon Codes">
      <t>
   The detailed operation and theory behind Reed Solomon codes is out of
   the scope of this document.  In general a Reed Solomon code takes a
   group of k source symbols and generates n - k repair symbols.  A receiver
   needs to receive any k of the n source or repair symbols in order to
   recover the remaining n-k symbols.  As explained in RFC 5510, the Reed-Solomon algorithm operates over multiple
   elements each taken from a single source symbol. Symbols are composed of S "m-bit elements" where m is the Galois Field exponent GF(2^m).
   In the usual case of GF(2^8), elements are bytes, and the size S in terms of elements is of course equal to the symbol size in bytes.
   The symbol size can be different in different implementations.  Any symbol size can be used
   in the format offered by this document.  However, it is recommended
   in terms of implementation simplicity to use 8-bits elements.  For more  
   information on Reed Solomon codes, the reader is referred to
   <xref target="Rizzo97"/>.
   
   </t>
    </section>
    
    
    
    <section anchor="source_block_creation"
                   title="Source Block Creation">
    <t>
   This draft defines the protection of an RTP source flow using one or more FEC repair flows. </t>

    
  <t>A source block for the Reed-Solomon code contains k source symbols. In the scheme presented by this document, 
  each source symbol contains a single Application Data Unit (ADU, as defined in
  <xref target="I-D.ietf-fecframe-framework"/>), which is in our case an RTP packet.
  Therefore a source block contains exactly k RTP packets. 
  The Reed-Solomon code generates n_r = n - k repair symbols that are transmitted using n_r = n - k FEC repair packets. 
  Each FEC repair packet contains a single repair block.</t>
  <!--Such behavior is most suitable for packet-switched networks where errors are on packet boundaries </t>-->
  <t>To create a source block the steps outlined below should be followed:</t>
    <t>
      <list style="numbers">
	<t>Determine the largest RTP packet size (in bytes) of the source block. During this computation, both
		the RTP header and payload are considered</t>
      	<t>For each ADU of this source block, create a byte array (of size 2 + this largest RTP packet size), as follows:
  	<list style="letters">
  			<t>In the first two bytes, place the unsigned network-ordered 16-bit representation of the 
				RTP packet size in bytes (including RTP header size and payload size)</t>
  			<t>Append the entire RTP packet including its RTP header</t>
  			<t>Add zero padding so that the byte array is the size of the largest packet protected by this
				source block plus two (to consider the initial two bytes).
  				Therefore, the largest packet does not contain padding.</t>
  	</list>
	</t>

 	<t>Append all the byte arrays one after the other in the following way:
 	  	<list style="letters">
	 		<t>The packets are in an increasing order of the sequence number as it appears in the RTP packet header 
				   taking wraparound into account</t>
	  	</list>
 	</t>
      </list>
    </t>

    <t>Figure 1 demonstrates how a source block is created from 4 packets (P1, P2, P3, P4) with different sizes. 
	The largest packet protected in this source block has a size of 5 (L = 5) and therefore P1 and P3 are both padded with
	zeros to this size. 
	The source block contains the RTP packet size before each packet. (Note that this example is not a binary representation 
	of the source block. The Packet size spans over two bytes as stated above)</t>
  <figure anchor="sb_structure" title="Structure of a Source Block">
  <artwork>  

         P1          P2            P3            P4   
         L=3         L=5           L=4           L=5

         +---+       +-----+       +----+      +-----+
         |xxx|       |xxxxx|       |xxxx|      |xxxxx|       
         +---+       +-----+       +----+      +-----+
         
                  |--- Source Block (k=4) ----|
         
                  +------+------+------+------+
                  |3xxx00|5xxxxx|4xxxx0|5xxxxx|
                  +------+------+------+------+
  </artwork>
  </figure>


 <t>The FEC Reed-Solomon Scheme gets a source block created from k packets and generates n-k FEC repair packets 
 that protect the entire source block. These packets are then transmitted in the repair flow. Note that source packets padding is done 
 only for FEC packet calculation and the original payloads are transmitted without extra padding.</t>

    </section>
    

   <section anchor="packet_formats"
                   title="Packet Formats">

    <t>This section defines the formats of the source and repair packets</t>
     <section anchor="source_packets"
                   title="FEC Source Packets">
	<t>The FEC Framework requires that FEC source packets contain information identifying the source block 
	and the position within the source block occupied by the packet. However, in order to maintain backwards compatibility, 
	the scheme defined by this document enables the receiver to get this information without appending additional information 
	to the source packet. Specifically this information is obtained using the combination of sequence number found in the RTP
	header and information provided in the FEC header of each FEC repair packet. Such behavior enables both non-FEC-capable and 
	FEC-capable receivers to receive and interpret the same source packets sent in a multicast session.</t>
    </section>
    
         <section anchor="repair_packets"
                       title="FEC Repair Packets">

      <t>The FEC repair packets contain information that enables the receiver to reconstruct the source block in the remote end. 
	  This is done by using the RTP header of the FEC repair packets as well as another dedicated header that is placed within
	  the RTP payload. 
	  This header, referred to as the FEC header, complies with <xref target="I-D.ietf-fecframe-framework"/> (section 6.4.1), as shown in Figure 2.</t>
  <figure anchor="repair_packets_format" title="Format of repair packets">
  <artwork>  
       
             +------------------------------+
             |          IP Header           |
             +------------------------------+
             |       Transport Header       |
             +------------------------------+
             |          RTP Header          |
             +------------------------------+ ---
             |          FEC Header          |    \
             +------------------------------+     > RTP Payload
             |        Repair Data           |    /
             +------------------------------+ --- 
  </artwork>
  </figure>

         <section anchor="rtp_header_format"
                       title="RTP header format">
                       
    <t>The RTP header is formatted according to <xref target="RFC3550"/> with some further clarifications listed below:</t>
    <t>
      <list style="symbols">
 
    <t>	Marker (M) Bit:  This bit is not used for this payload type, and is set to 0.</t>
    <t>	Payload Type:  The (dynamic) payload type for the repair packets is determined through out-of-band means.
	Note that this document registers new payload formats for the repair packets (Refer to Section 5 for details).
	According to <xref target="RFC3550"/>, an RTP receiver that cannot recognize a payload type must discard it.
	This provides for backward compatibility. The FEC mechanisms can then be used in a multicast group with mixed FEC-capable
	and non-FEC-capable receivers. If a non-FEC-capable receiver receives a repair packet, it will not recognize the payload type,
	and hence, will discard the repair packet.
	In case more than one repair flow is used, different Payload Types will be used to distinguish between the different flows.</t>
    <t>	Sequence Number (SN):  The sequence number maintains the standard definition.
	It is one higher than the sequence number in the previously transmitted repair packet.
	The initial value of the sequence number is random (unpredictable) <xref target="RFC3550"/>.</t>
    <t>	Timestamp (TS):  The timestamp is set to a time corresponding to the repair packet's transmission time.
	Note that the timestamp value has no use in the actual FEC protection process and is usually useful for jitter calculations.
	FEC packets that are the result of the same FEC encoding operation will use the same value as their Timestamp.</t>
    <t>	Synchronization Source (SSRC):  The SSRC value is randomly assigned as suggested by <xref target="RFC3550"/>.</t>

    
    </list>
    </t>
        
        </section>

	 <section anchor="fec_header_format"
		       title="FEC header format">

	<t>The FEC header includes information that enables the receiver to reconstruct the source block and to identify 
	the FEC repair packets associated with each source block, in their correct order. </t>

	<t>The format of the FEC header is shown in figure 3.</t>
	
	  <figure anchor="FEC_header_format" title="FEC Header Format">
	  <artwork>  
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      n_r      |       i       |             SN_base           | 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|        reserved       |  BML  |            pkt_span           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
.                                                               .
.              bit-mask (optional, variable length)             .
.                                                               .
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	  </artwork>
	  </figure>

<t>The FEC header consists of the following general fields:
<list style="symbols">
    <t> n_r (8-bit field): the number of FEC repair packets used to protect this source block.</t>
    <t> i (8-bit field): the 0-based index in the sequence of n_r FEC repair packets.
	This index is equal to ESI - k, where ESI is the Encoding Symbol ID of the associated repair symbol.</t>
    <t> SN_base (16-bit field): the lowest RTP sequence number (taking wraparound into account) of the FEC source packets
	in the associated source block. This SN_base also identifies the source block.
	In order to avoid any risk of confusion, two consecutive source blocks MUST use different SN_base values, which
	is easily verified by the sender (this situation might happen with Reed-Solomon over GF(2^16)).</t>
    <t> pkt_span (16-bit field): the number of consecutive FEC Source Packets considered.
		A subset of these FEC Source Packets may be missing, as indicated by the 0 entries of the optional bit-mask.</t>
    <t> Reserved (12-bit field): reserved for future use. This field MUST be set to zero in this specification.</t>
    <t> Bit Mask Length, BML (4-bit field):
		when the pkt_span source packets of the source block don't have consecutive RTP sequence numbers,
		a bit-mask MUST be used to indicate which packets are protected by this FEC packet.
		This field indicates the length of the bit-mask in units of 32-bit words, as the following table shows.
		In any case, only the first pkt_span bits of this bit-field are meaningful, the remaining bits (if any) MUST
		be set to 0.</t>
    <t> bit-mask (Optional field, length multiple of 32 bits):
	When BML is set to a value different than 0000, a bit-mask field is added, whose length in term of number of 32-bit words
	is indicated by the BML field.
	The bit-mask indicates which source packets have been considered in the source block ("1" bit valude entry in the bit-field) and
	which source packets have been ignored ("0" bit valude entry in the bit-field) (usually this happens when a source packet
	has been erased (lost) before reaching the FECFRAME encoder).
	The first packet in the bit-mask (corresponding to bit position 0 of the first 32-bit word) corresponds to the source packet whose
	RTP sequence number is specified in field SN_base.</t>
</list>
</t>
	<texttable>
	<preamble></preamble>
		<ttcol align='right'>BML value</ttcol>
		<ttcol align='right'>bit-mask length (in bits)</ttcol>
		<ttcol align='right'>bit-mask length (in words)</ttcol>
		<c>0</c>	<c>0 (no mask)</c>	<c>0</c>
		<c>1</c>	<c>32 bits</c>		<c>1 x 32-bit word</c>
		<c>10</c>	<c>64 bits</c>		<c>2 x 32-bit word</c>
		<c>11</c>	<c>96 bits</c>		<c>3 x 32-bit word</c>
		<c>100</c>	<c>128 bits</c>		<c>4 x 32-bit word</c>
		<c>101</c>	<c>160 bits</c>		<c>5 x 32-bit word</c>
		<c>110</c>	<c>192 bits</c>		<c>6 x 32-bit word</c>
		<c>111</c>	<c>224 bits</c>		<c>7 x 32-bit word</c>
		<c>1000</c>	<c>256 bits</c>		<c>8 x 32-bit word</c>
		<c>...</c>	<c>...</c>		<c>...</c>
		<c>1111</c>	<c>480 bits</c>		<c>15 x 32-bit word</c>
	</texttable>
 
</section>

<section anchor="repair_data_format" title="Repair Data Format">

<t>The repair data follows the FEC header in the FEC repair packet. It includes the result of the Reed-Solomon encoding over 
the source block. Note that the first two bytes of the repair data contain the result of the Reed-Solomon encoding over 
the packet sizes in the source block and that the size of the repair data equals the size of the largest packet protected 
by this source block plus 2. Therefore, the size of an FEC repair packet (FEC header and data) is larger than the longest source packet.
This should be taken under consideration when deciding on the Maximum Transmission Unit (MTU) size used for the source packets.</t>
</section>

</section>

</section>
 
<section anchor="payload_formats_parameters" title="Payload Format Parameters">
<t>According to the FEC framework, when RTP is used as a transport for repair packet flows, 
the scheme must define an RTP Payload Format for the repair data. 
This section provides the media subtype registration for the Reed-Solomon FEC.  
The parameters that are required to configure the FEC encoding and decoding operations are also defined in this section.</t>

<section anchor="media_type_reg" title="Media Type Registration">
<t>This registration is done using the template defined in <xref target="RFC4288"/> and following the guidance provided in <xref target="RFC3555"/>.</t>

<section anchor="reg_audio_reed-solomon-fec" title="Registration of audio/reed-solomon-fec">

<t>Type name:  audio</t>

<t>Subtype name:  reed-solomon-fec</t>

<t>Required parameters: </t>
<t>
<list style="symbols">
	<t>max_n:  The upper limit for the sum of source and repair packets that belong to the same FEC block. max_n is a positive integer. 
	   The application can change both k and n-k. max_n is the upper limit for n. The value of max_n must be equal to or lower than the codec limitation (2^m).</t>
    <t>	repair-window:  The time that spans the source packets and the corresponding repair packets.  
	    The size of the repair window is specified in microseconds.</t>
	<t>	The repair-window impacts the maximum number of source packets in a FEC block at the sender side, and defines the time which the receiver should wait for the repair packets. 
		The repair-window value may be negotiated between the sender and receiver. the details of such negotiation are out-of-scope for this document.</t>
    <t>element-size: a non-negative integer indicating the length of each encoding elements in bits. This value equals to the "m" parameter in the GF (represented by 2^m).</t> 
</list>
</t>


<t>Optional parameters:  None.</t>

<t>Encoding considerations: This media type is framed and binary, see
   section 4.8 in <xref target="RFC4288"/></t>

<t>Security considerations: Please see security consideration in
   <xref target="I-D.ietf-fecframe-framework"/></t>


<t>Interoperability considerations: None.</t>

<t>Published specification: TBD</t>

<t>Applications that use this media type: Multimedia applications that   want to improve resiliency against packet loss by sending redundant   data in addition to the source media.</t>

<t>Additional information: None.</t>

<t>Magic number(s): none defined</t>

<t>File extension(s): none defined</t>

<t>Macintosh file type code(s): none defined</t>

<t>Person & email address to contact for further information: Sarit Galanos, sarit@radvision.com</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: This media type depends on RTP framing, and
   hence is only defined for transfer via RTP <xref target="RFC3550"/>.  Transport
   within other framing protocols is not defined at this time.</t>
</section>

<section anchor="reg_video_reed-solomon-fec" title="Registration of video/reed-solomon-fec">
<t>Type name:  video</t>

<t>Subtype name:  reed-solomon-fec</t>

<t>Required parameters: </t>
<t>
<list style="symbols">
	<t>max_n:  The upper limit for the sum of source and repair packets that belong to the same FEC block. max_n is a positive integer. 
	   The application can change both k and n-k. max_n is the upper limit for n. The value of max_n must be equal to or lower than the codec limitation (2^m).</t>
    <t>	repair-window:  The time that spans the source packets and the corresponding repair packets.  
	    The size of the repair window is specified in microseconds.</t>
	<t>	The repair-window impacts the maximum number of source packets in a FEC block at the sender side, and defines the time which the receiver should wait for the repair packets. 
		The repair-window value may be negotiated between the sender and receiver. the details of such negotiation are out-of-scope for this document.</t>
    <t>element-size: a non-negative integer indicating the length of each encoding elements in bits. This value equals to the "m" parameter in the GF (represented by 2^m).</t> 
</list>
</t>


<t>Optional parameters:  None.</t>

<t>Encoding considerations: This media type is framed and binary, see
   section 4.8 in <xref target="RFC4288"/></t>

<t>Security considerations: Please see security consideration in
   <xref target="I-D.ietf-fecframe-framework"/></t>

<t>Interoperability considerations: None.</t>

<t>Published specification: TBD</t>

<t>Applications that use this media type: Multimedia applications that   want to improve resiliency against packet loss by sending redundant   data in addition to the source media.</t>

<t>Additional information: None.</t>

<t>Magic number(s): none defined</t>

<t>File extension(s): none defined</t>

<t>Macintosh file type code(s): none defined</t>

<t>Person & email address to contact for further information: Sarit Galanos, sarit@radvision.com</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: This media type depends on RTP framing, and
   hence is only defined for transfer via RTP <xref target="RFC3550"/>.  Transport
   within other framing protocols is not defined at this time.</t>

</section>

<section anchor="reg_text_reed-solomon-fec" title="Registration of text/reed-solomon-fec">
<t>Type name:  text</t>

<t>Subtype name:  reed-solomon-fec</t>

<t>Required parameters: </t>
<t>
<list style="symbols">
	<t>max_n:  The upper limit for the sum of source and repair packets that belong to the same FEC block. max_n is a positive integer. 
	   The application can change both k and n-k. max_n is the upper limit for n. The value of max_n must be equal to or lower than the codec limitation (2^m).</t>
    <t>	repair-window:  The time that spans the source packets and the corresponding repair packets.  
	    The size of the repair window is specified in microseconds.</t>
	<t>	The repair-window impacts the maximum number of source packets in a FEC block at the sender side, and defines the time which the receiver should wait for the repair packets. 
		The repair-window value may be negotiated between the sender and receiver. the details of such negotiation are out-of-scope for this document.</t>
    <t>element-size: a non-negative integer indicating the length of each encoding elements in bits. This value equals to the "m" parameter in the GF (represented by 2^m).</t> 
</list>
</t>


<t>Optional parameters:  None.</t>

<t>Encoding considerations: This media type is framed and binary, see
   section 4.8 in <xref target="RFC4288"/></t>

<t>Security considerations: Please see security consideration in
   <xref target="I-D.ietf-fecframe-framework"/></t>

<t>Interoperability considerations: None.</t>

<t>Published specification: TBD</t>

<t>Applications that use this media type: Multimedia applications that   want to improve resiliency against packet loss by sending redundant   data in addition to the source media.</t>

<t>Additional information: None.</t>

<t>Magic number(s): none defined</t>

<t>File extension(s): none defined</t>

<t>Macintosh file type code(s): none defined</t>

<t>Person & email address to contact for further information: Sarit Galanos, sarit@radvision.com</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: This media type depends on RTP framing, and
   hence is only defined for transfer via RTP <xref target="RFC3550"/>.  Transport
   within other framing protocols is not defined at this time.</t>

</section>

<section anchor="reg_application_reed-solomon-fec" title="Registration of application/reed-solomon-fec">
<t>Type name:  application</t>

<t>Subtype name:  reed-solomon-fec</t>

<t>Required parameters: </t>
<t>
<list style="symbols">
	<t>max_n:  The upper limit for the sum of source and repair packets that belong to the same FEC block. max_n is a positive integer. 
	   The application can change both k and n-k. max_n is the upper limit for n. The value of max_n must be equal to or lower than the codec limitation (2^m).</t>
    <t>	repair-window:  The time that spans the source packets and the corresponding repair packets.  
	    The size of the repair window is specified in microseconds.</t>
	<t>	The repair-window impacts the maximum number of source packets in a FEC block at the sender side, and defines the time which the receiver should wait for the repair packets. 
		The repair-window value may be negotiated between the sender and receiver. the details of such negotiation are out-of-scope for this document.</t>
    <t>element-size: a non-negative integer indicating the length of each encoding elements in bits. This value equals to the "m" parameter in the GF (represented by 2^m).</t> 
</list>
</t>


<t>Optional parameters:  None.</t>

<t>Encoding considerations: This media type is framed and binary, see
   section 4.8 in <xref target="RFC4288"/></t>

<t>Security considerations: Please see security consideration in
   <xref target="I-D.ietf-fecframe-framework"/></t>

<t>Interoperability considerations: None.</t>

<t>Published specification: TBD</t>

<t>Applications that use this media type: Multimedia applications that   want to improve resiliency against packet loss by sending redundant   data in addition to the source media.</t>

<t>Additional information: None.</t>

<t>Magic number(s): none defined</t>

<t>File extension(s): none defined</t>

<t>Macintosh file type code(s): none defined</t>

<t>Person & email address to contact for further information: Sarit Galanos, sarit@radvision.com</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: This media type depends on RTP framing, and
   hence is only defined for transfer via RTP <xref target="RFC3550"/>.  Transport
   within other framing protocols is not defined at this time.</t>

</section>
</section>



<section anchor="mapping_of_SDP_parameters" title="Mapping of SDP Parameters">
<t>For a proper operation details of the FEC scheme have to be communicated between the sender and the receiver. 
Specifically, the receiver has to know the relationship between the source and the repair flows, how the sender 
applied protection to the source flow and how the repair flows can be used to recover the lost data. One way to provide 
this information is to use the Session Description Protocol (SDP) <xref target="RFC4566"/>.  </t>
<t>The mapping of the media type specification for "reed-solomon-fec" and their parameters in SDP is as follows:</t>
<t>
<list style="symbols">
   <t>  The media type (e.g., "application") goes into the "m=" line as
      the media name.</t>

   <t>  The media subtype ("reed-solomon-fec") goes into the "a=rtpmap" line as the encoding
      name.  </t>

   <t>  The remaining required payload-format-specific parameters ("max_n", "repair-window") go into
      the "a=fmtp" line by copying them directly from the media type
      string as a semicolon-separated list of parameter=value pairs.</t>

</list>
</t>
<t>See section 9 for SDP examples.</t>

</section>
</section>
    
    
<section anchor="protection_recovery_procedures"  title="Protection and Recovery Procedures">
<t>This section provides a complete specification of the protection and recovery procedures.</t>
<section anchor="overview"  title="Overview">
<t>The FEC repair packets allow end-systems to recover from a loss of media   packets. 
The following sections specify the steps involved in generating the FEC repair packets and reconstructing the
 missing source packets from the FEC repair packets.</t>
</section>

<section anchor="repair_packet_construction"  title="FEC Repair Packet Construction">
<t>The RTP header of a FEC repair packet is formed based on the guidelines given in <xref target="rtp_header_format"/>.
The FEC header is formed based on the guidelines given in <xref target="FEC_header_format"/>.
Before Reed-Solomon encoding, two bytes are prepended to each ADU (RTP source packet in our case) that contain
this ADU length in bytes, stored in network-order.
FEC encoding can then take place and the n_r = n - k repair symbols are created.
Each repair symbol is then appended to its FEC header. 
<!--Note that the repair data calculated over k source packets will span over n-k packets.-->
</t>
</section>


<section anchor="source_packet_reconstruction"  title="Source Packet Reconstruction">

<t>Recovery requires two distinct operations.
   The first operation determines which packets (source and repair) must be considered in order to recover the missing
   packets of a given block.
   Once this is done, the second step is the reconstruction of the missing data.</t> 


<section anchor="associating_source_and_repair_packets"  title="Associating the Source and Repair Packets">

<t>Association of the FEC source packets and FEC repair packets is done using a combination of the source packet sequence 
number and the information found in the RTP header and the FEC header of the FEC repair packets.
The first step is to accumulate some of the n_r = n - k repair packets that were generated in the protection operation. 
For that the application has to follow the steps listed below:
</t>
<t>
<list style="symbols">
<t>	For each received packet, retrieve the payload type parameter from the RTP header to identify the packet as a 
	repair packet of the reed-solomon scheme.
	In case multiple repair flows are used, different payload types will be used to distinguish between the different
	repair flows.</t>
<t>	If a FEC repair packet is received, retrieve the sequence number (SN) from the RTP header and the
	n_r and i parameters from the FEC header.
	With these parameters, identify the collection of FEC repair packets generated for the source block. 
	For example, if n_r = 4, i = 2 and SN = 1003, the receiver deduces that 4 FEC repair packets with sequence numbers 
	1001, 1002, 1003 and 1004 have been generated for this source block.</t>
<t>	Still in case of a FEC repair packet, retrieve the BML, pkt_span and optional bit-mask fields.
	If BML equals 0, then k = pkt_span and the source packets have sequence numbers SN_base up to SN_base + k.
	If BML is greater than 0, the first pkt_span bits of the bit-mask must be analyzed.
	k is then equal to the number of bits equal to 1 in this bit-mask.
	The sequence numbers of the source packets that are acutally part of the source block are equal to SN_base plus
	the offset of the bits equal to 1 in this bit-mask.</t>
</list>
</t>

</section>


<section anchor="recovering_the_source_packet"  title="Recovering the source packet">

<t>In order to recover the lost source packets, the application has to rebuild the source block according to the 
guidelines given in <xref target="source_block_creation"/> and append the repair data to it in the correct order. 
Zero padding will replace the lost packets in the constructed source block. The size of each source block data packet in 
bytes will be equal to the size of the repair data found in the repair packets. The repair data size is the size of the RTP payload 
in the repair packet without the FEC header information (see figure 2). The application will then append the repair data taken 
from each repair packet. This new block is provided to the Reed-Solomon code.</t>
<t>Reconstruction of lost packets (source or repair packets) is possible only if at least any k packets were received
(source or repair).</t>

<t>The Reed-Solomon code will reconstruct the lost data into the provided source block overriding 
the zero padded blocks. The application can then recover the lost packets as follows:</t>
<t>
<list style="symbols">
<t>	The first two bytes specify the RTP packet size.</t>
<t>	According to the RTP packet size the application can retrieve the RTP packet (RTP header and payload).</t>
<t>	Any extra padding bytes if exist are ignored. </t>

</list>
</t>


</section>

</section>

</section>

   
    <section anchor="sdp_examples"
                       title="SDP Examples">
    <t>The following example demonstrates source flow with flow ID of 0 that is protected by a single repair flow R1.</t>
<!-- VR: changed c=IN IP4 224.1.1.1/127 and c=IN IP4 224.1.2.1/127 by 233.252.0.1 and .2 respectively to comply with RFC5771 concerning generic multicast addresses for examples -->
<figure anchor="xml_example">
<artwork>  
v=0
o=sarit 1122334455 1122334466 IN IP4 fec.example.com
s= Reed Solomon FEC Example
t=0 0
a=group:FEC S1 R1
m=video 30000 RTP/AVP 100
c=IN IP4 233.252.0.1/127
a=rtpmap:100 MP2T/90000
a=fec-source-flow: id=0
a=mid:S1
m=application 30000 RTP/AVP 110 
c=IN IP4 233.252.0.2/127 
a=rtpmap:110 reed-solomon-fec /90000 
a=fmtp:110 max_n:16; repair-window:200000; symbol-size:8
a=mid:R1 
</artwork>    
</figure>

    </section>


    <section anchor="Implementation_considerations"
                       title="Implementation Considerations">
    <t>Using Reed-Solomon FEC protection over RTP may be useful for efficiently overcoming newtork packet losses in interactive communications where latency constraints apply. 
	Protection may be applied for small encoding blocks, and therefore latency caused by waiting for the FEC repair packets is minimized.</t>
	<t>This document allows the application to set the FEC strength dynamically according to the experienced and measured loss rate, for optimizing bandwidth utilization while recovering from network errors.</t>
	<t>When FEC protection is used due to network congestion conditions, it is important that the application will reduce the bandwidth used for FEC protection from the bandwidth used by the source flow, in order not to overload the already congested network with the additional FEC repair packets.</t>	
	<t>In order to minimize bandwidth overhead for repair packets, algorithm for applying FEC on source packets should be designed carefully.
	   Using source packets with similar lengths (when possible) can minimize the bandwidth overhead of the FEC repair packets.</t>
	<t>In order to maximize the FEC strength, when a ratio of k/n is chosen, the larger the source blocks size (n) is, the stronger the FEC protection is. 
	Of course, on the other hand the larger the source block size is, the larger the latency is (caused by waiting for the FEC repair packet). 
	The application should choose carefuly the FEC block size in order to maximize the FEC strength while keeping an acceptable latency at the receiver waiting for the FEC repair packets.</t>
	
    </section>

	
 
    <section anchor="offer_answer_considerations"
                       title="Offer/Answer considerations">
    <t>None.</t>
    </section>
 

<section anchor="sec_security_considerations" title="Security Considerations">
<!-- ==================================== -->

  <section title="Problem Statement">
  <!-- ================ -->

<t>
A content delivery system is potentially subject to many attacks.
Some of them target the network (e.g., to compromise the routing infrastructure,
by compromising the congestion control component), others target
the Content Delivery Protocol (CDP) (e.g., to compromise its normal behavior),
and finally some attacks target the content itself.
Since this document focuses on various FEC schemes, this
section only discusses the additional threats that their use within the
FECFRAME framework can create to an arbitrary CDP.
</t>

<t>
More specifically, these attacks may have several goals:
<list style="symbols">
	<t> those that are meant to give access to a confidential content (e.g., in
	  case of a non-free content),</t>
	<t> those that try to corrupt the ADU Flows being transmitted (e.g., to
	  prevent a receiver from using it),</t>
	<t> and those that try to compromise the receiver's behavior (e.g., by
	  making the decoding of an object computationally expensive).</t>
</list>
These attacks can be launched either against the data flow itself (e.g.,
by sending forged FEC Source/Repair Packets) or against the FEC parameters that are
sent either in-band (e.g., in the Repair FEC Payload ID) or out-of-band (e.g., in
a session description).
</t>

  </section>

  <section title="Attacks Against the Data Flow">
  <!-- ================ -->

<t>
First of all, let us consider the attacks against the data flow.
</t>

	<section title="Access to Confidential Contents">
	<!-- ================ -->

<t>
Access control to the ADU Flow being transmitted is typically provided by means
of encryption.
This encryption can be done within the content provider itself, by the
application (for instance by using the Secure Real-time Transport Protocol (SRTP)
<xref target="RFC3711"/>), or at the Network Layer, on a packet per packet basis
when IPSec/ESP is used <xref target="RFC4303"/>.
If confidentiality is a concern, it is RECOMMENDED that one of these solutions be used.
Even if we mention these attacks here, they are not related nor facilitated by
the use of FEC.
</t>

	</section>

	<section title="Content Corruption" anchor="sec_content_corruption">
	<!-- ================ -->

<t>
Protection against corruptions (e.g., after sending forged FEC Source/Repair Packets)
is achieved by means of a content integrity verification/sender authentication scheme.
This service is usually provided at the packet level. In this case, after 
removing all forged packets, the ADU Flow may be sometimes recovered.
Several techniques can provide this source authentication/content integrity
service:
<list style="symbols">
<t>	at the application level, the Secure Real-time Transport Protocol (SRTP)
	<xref target="RFC3711"/> provides several solutions to authenticate the source and
	check the integrity of RTP and RTCP messages, among other services.
	For instance, associated to the Timed Efficient Stream Loss-Tolerant Authentication (TESLA)
	<xref target="RFC4383"/>, SRTP is an attractive solution that is robust to losses, provides
	a true authentication/integrity service, and does not create any prohibitive processing
	load or transmission overhead.
	Yet, checking a packet requires a small delay (a second or more) after its reception with
	TESLA.
	Other building blocks can be used within SRTP to provide authentication/content
	integrity services.
</t>
<t>	at the Network Layer, IPSec/ESP offers (among other services) an integrity verification
	mechanism that can be used to provide authentication/content integrity services.
</t>
</list>
</t>

<t>
Techniques relying on public key cryptography (e.g., digital signatures)
require that public keys be securely associated to the entities.
This can be achieved by a Public Key Infrastructure (PKI), or by a
PGP Web of Trust, or by pre-distributing the public keys of each group member.
</t>

<t>
Techniques relying on symmetric key cryptography require that a
secret key be shared by all group members. This can be achieved by means of a
group key management protocol, or simply by pre-distributing the secret key
(but this manual solution has many limitations).
</t>

<t>
It is up to the developer and deployer, who know the security requirements and
features of the target application area, to define which solution is the most appropriate.
Nonetheless it is RECOMMENDED that at least one of these techniques be used.
</t>
	</section>

  </section>

  <section title="Attacks Against the FEC Parameters">
  <!-- ================ -->

<t>
Let us now consider attacks against the FEC parameters included in the FFCI that
are usually sent out-of-band (e.g., in a session description).
Attacks on these FEC parameters can prevent the decoding of the associated object.
For instance modifying the m field (when applicable) will lead a receiver to consider
a different code.
Modifying the E parameter will lead a receiver to consider bad Repair Symbols for
a received FEC Repair Packet.
</t>

<t>
It is therefore RECOMMENDED that security measures be taken to guarantee the
FFCI integrity.
When the FFCI is sent out-of-band in a session description,
this latter SHOULD be protected, for instance by digitally signing it.
</t>

<t>
Attacks are also possible against some FEC parameters included in the
Explicit Repair FEC Payload ID.
For instance modifying the SN_base of a FEC Repair Packet will lead a receiver
to assign this packet to a wrong block.
</t>

<t>
It is therefore RECOMMENDED that security measures be taken to guarantee the
Explicit Repair FEC Payload ID integrity.
To that purpose, one of the packet-level source authentication/content integrity
techniques of <xref target="sec_content_corruption"/> can be used.
</t>

  </section>
</section>


    <section title="IANA Considerations">
      <t>   New media subtypes are subject to IANA registration.  For the
   registration of the payload formats and their parameters introduced
   in this document, refer to Section 7.
</t>
    </section>

    <section title="Acknowledgments">
      <t>Some parts of this document are borrowed from the following documents: <xref target="RFC5109"/>, 
      <xref target="I-D.ietf-fecframe-1d2d-parity-scheme"/>, <xref target="I-D.roca-fecframe-rs"/>,
      <xref target="I-D.ietf-avt-reedsolomon"/>.  
      The author would like to thank the editors of these documents.
      The authors would also like to thank the members of the FP7 3DPresence project consortium for their contribution to this draft writing. </t>
    </section>
  </middle>

  <back>

	<references title="Normative References">

	&rfc2119;
	&rfc3550;
	&rfc4566;
	&rfc4288;
	&rfc3555;
	&rfc4756;
	&rfc5510;
	&__reference.I-D.ietf-fecframe-framework;

	</references>
   
	<references title="Informative References">

		&__reference.I-D.ietf-fecframe-1d2d-parity-scheme;
		&rfc5109;

		<reference anchor='I-D.ietf-avt-reedsolomon'>
			<front>
			  <title>An RTP Payload Format for Reed Solomon Codes</title>
			  <author initials='J.' surname='Rosenberg'> <organization abbrev=''> </organization> </author>
			  <author initials='H.' surname='Schulzrinne'> <organization abbrev=''> </organization> </author>
			 <date month='May' year='1999' />
			</front>
		</reference>

		<reference anchor='Rizzo97'>
			<front>
			    <title>Effective Erasure Codes for Reliable Computer Communication Protocols</title>
			    <author initials='L.' surname='Rizzo'> <organization abbrev=''> </organization> </author>
			   <date month='April' year='1997' />
		       </front>
		       <seriesInfo name="ACM SIGCOMM Computer Communication Review" value="Vol.27, No.2, pp.24-36" />
		</reference>

		<reference anchor="RFC4303">
			<front>
				<title>IP Encapsulating Security Payload (ESP)</title>
				<author initials="S." surname="Kent" fullname="S. Kent"> <organization/> </author>
				<date year="2005" month="December"/>
			</front>
			<seriesInfo name="RFC" value="4303"/>
			<format type="TXT" octets="114315" target="ftp://ftp.isi.edu/in-notes/rfc4303.txt"/>
		</reference>

		<reference anchor='RFC3711'>
			<front>
				<title>The Secure Real-time Transport Protocol (SRTP)</title>
				<author initials='M.' surname='Baugher' fullname='M. Baugher'><organization /></author>
				<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
				<author initials='M.' surname='Naslund' fullname='M. Naslund'><organization /></author>
				<author initials='E.' surname='Carrara' fullname='E. Carrara'><organization /></author>
				<author initials='K.' surname='Norrman' fullname='K. Norrman'><organization /></author>
				<date year='2004' month='March' />
			</front>
			<seriesInfo name='RFC' value='3711' />
			<format type='TXT' octets='134270' target='ftp://ftp.isi.edu/in-notes/rfc3711.txt' />
		</reference>

		<reference anchor="RFC4383">
			<front>
				<title>
				The Use of Timed Efficient Stream Loss-Tolerant Authentication (TESLA) in the Secure Real-
				time Transport Protocol (SRTP)
				</title>
				<author initials="M." surname="Baugher" fullname="M. Baugher"><organization/></author>
				<author initials="E." surname="Carrara" fullname="E. Carrara"><organization/></author>
				<date year="2006" month="February"/>
			</front>
			<seriesInfo name="RFC" value="4383"/>
			<format type="TXT" octets="41766" target="ftp://ftp.isi.edu/in-notes/rfc4383.txt"/>
		</reference>

		&__reference.I-D.ietf-fecframe-sdp-elements;
		&__reference.I-D.roca-fecframe-rs;
		<!-- &__reference.I-D.ietf-fecframe-pseudo-cdp; -->
		<!-- &__reference.I-D.ietf-fecframe-rtp-raptor; -->
		&rfc5052;
		<!-- &rfc5053; -->

    </references>
    
  </back>
</rfc>
