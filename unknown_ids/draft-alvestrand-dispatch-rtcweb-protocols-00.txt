


Network Working Group                                      H. Alvestrand
Internet-Draft                                                    Google
Intended status: Standards Track                       November 11, 2010
Expires: May 15, 2011


      Overview: Real Time Protocols for Brower-based Applications
             draft-alvestrand-dispatch-rtcweb-protocols-00

Abstract

   This document gives an overview of a protocol suite intended for use
   with real-time applications that can be deployed in browsers - "real
   time communication on the Web".

   It intends to serve as a starting and coordination point to make sure
   all the parts that are needed to achieve this goal are findable, and
   that the parts that belong in the Internet protocol suite are fully
   specified and on the right publication track.

   This work is an attempt to synthesize the input of many people, but
   makes no claims to fully represent the views of any of them.  All
   parts of the document should be regarded as open for discussion.

Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on May 15, 2011.

Copyright Notice



Alvestrand                Expires May 15, 2011                  [Page 1]

Internet-Draft                 Browser RTC                 November 2010


   Copyright (c) 2010 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . 3
   2.  Functionality groups  . . . . . . . . . . . . . . . . . . . . . 4
   3.  Data transport  . . . . . . . . . . . . . . . . . . . . . . . . 5
   4.  Data framing and securing . . . . . . . . . . . . . . . . . . . 5
   5.  Data formats  . . . . . . . . . . . . . . . . . . . . . . . . . 5
   6.  Connection management . . . . . . . . . . . . . . . . . . . . . 6
   7.  Presentation and control  . . . . . . . . . . . . . . . . . . . 6
   8.  Local system support functions  . . . . . . . . . . . . . . . . 7
   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . . . 7
   10. Security Considerations . . . . . . . . . . . . . . . . . . . . 7
   11. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . 8
   12. Normative References  . . . . . . . . . . . . . . . . . . . . . 8
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . . . 9






















Alvestrand                Expires May 15, 2011                  [Page 2]

Internet-Draft                 Browser RTC                 November 2010


1.  Introduction

   The Internet was, from very early in its lifetime, considered a
   possible veichle for the deployment of real-time, interactive
   applications - with the most easily imaginable being audio
   conversations (aka "Internet telephony") and videoconferencing.

   The first attempts to build this were dependent on special networks,
   special hardware and custom-built software, often at very high prices
   or at low quality, placing great demands on the infrastructure.

   As the available bandwidth has increased, and as processors and other
   hardware has become ever faster, the barriers to participation have
   decreased, and it is possible to deliver a satisfactory experience on
   commonly available computing hardware.

   Still, there are a number of barriers to the ability to communicate
   universally - one of these is that there are, as of yet, no single
   set of communication protocols that all agree should be made
   available for communication; another is the sheer lack of universal
   identification systems (such as is served by telephone numbers or
   email addresses in other communications systems).

   Development of The Universal Solution has proved hard, however, for
   all the usual reasons.  This memo aims to take a more building-block-
   oriented approach, and try to find consensus on a set of substrate
   components that we think will be useful in any real-time
   communications systems.

   The last few years have also seen a new platform rise for deployment
   of services: The browser-embedded application, or "Web application".
   It turns out that as long as the browser platform has the necessary
   interfaces, it is possible to deliver almost any kind of service on
   it.

   Traditionally, these interfaces have been delivered by plugins, which
   had to be downloaded and installed separately from the browser; in
   the development of HTML5, much promise is seen by the possiblitiy of
   making those interfaces available in a standardized way within the
   browser.

   Other efforts <insert reference to work with the W3C Device API WG
   and friends> focus on making standardized APIs and interfaces
   available, within or alongside the HTML5 effort, for those functions;
   this memo concentrates on specifying the protocols and subprotocols
   that are needed to specify the interactions that happen across the
   network.




Alvestrand                Expires May 15, 2011                  [Page 3]

Internet-Draft                 Browser RTC                 November 2010


2.  Functionality groups

   The functionallity groups that are needed can be specified, more or
   less from the bottom up, as:

   o  Data transport: TCP, UDP and the means to set up secure
      connections between entities.

   o  Data framing: RTP and other data formats that serve as containers.

   o  Data formats: Codec specifications, format specifications and
      functionality specifications for the data passed between systems.
      Audio and video codecs, as well as formats for data and document
      sharing, belong in this category.

   o  Connection management: Setting up connections, agreeing on data
      formats, changing data formats during the duration of a call; SIP
      and Jabber/XMPP belong in this category.

   o  Presentation and control: What needs to happen in order to ensure
      that interactions behave in a non-surprising manner.  This can
      include floor control, screen layout, voice activated image
      switching and other such functions - where part of the system
      require the cooperation between parties.  Cisco/Tandberg's TIP was
      one attempt at specifying this functionality.

   o  Local system support functions: These are things that need not be
      specified uniformly, because each participant may choose to do
      these in a way of the participant's choosing, without affecting
      the bits on the wire in a way that others have to be cognizant of.
      Examples in this category include echo cancellation (some forms of
      it), local authentication and authorization mechanisms, OS access
      control and the ability to do local recording of conversations.

   Within each functionality group, it is important to preserve both
   freedom to innovate and the ability for global communication.
   Freedom to innovate is helped by doing the specification in terms of
   interfaces, not implementaiton; any implementation able to
   communicate according to the interfaces is a valid implementation.
   Ability to communicate globally is helped both by having core
   specifications be unencumbered by IPR issues and by having the
   formats and protocols be fully enough specified to allow for
   independent implementation.

   One can think of the three first groups as forming a "media transport
   infrastructure", and of the three last groups as forming a "media
   service".  In many contexts, it makes sense to use a common
   specification for the media transport infrastructure, which can be



Alvestrand                Expires May 15, 2011                  [Page 4]

Internet-Draft                 Browser RTC                 November 2010


   embedded in browsers and accessed using standard interfaces, and "let
   a thousand flowers bloom" in the "media service" layer; to achieve
   interoperable services, however, at least the first five of the six
   groups need to be specified.


3.  Data transport

   Datagram transport is is the subject of a separate draft, "A Datagram
   Transport for the WEBM profile".[datagrams] The basic approach is to
   use ICE as a setup mechanism, and to specify mechanisms to use ICE
   over connections that utilize UDP and TCP if needed to support a
   basic datagram-passing function with adequate security.  In order to
   deal with complex NAT/firewall situations, relaying using TURN MUST
   be supported.

   For octet-stream transport, TCP is used.  (QUESTION: Do we need a TCP
   relay specification?)  (QUESTION: Do octet-streams need to be
   specified to be Web Sockets [I-D.ietf-hybi-thewebsocketprotocol]


4.  Data framing and securing

   RTP [RFC3550]and SRTP [RFC3711].  The RTP/SAVP profile, defined as
   part of SRTP, is supported, and "extended RTCP", RTP/SAVPF [RFC4585],
   with its secured version RTP/SAVPF [RFC5124]is used in order to
   support codec functionality that depends on this RTP profile, such as

   The implementation of SRTP used MUST support encryption using AES-CM
   with MIC, on both RTP and RTCP channels. <TODO: Add pointer to
   appropriate profile here> (Note that like for all mandatory-to-
   implement, there is no requirement that these protocols be used, just
   that it is possible to negotiate them.)

   [QUESTION: Should we say anything about use / support for TLS and/or
   DTLS?]


5.  Data formats

   The intent of this specification is to allow each communcations event
   to use the data formats that are best suited for that particular
   instance, where a format is supported by both sides of the
   connection.  However, a minimum standard is greatly helpful in order
   to ensure that communication can be achieved.  This document
   specifies a minimum baseline that will be supported by all
   implementations of this specification, and leaves further codecs to
   be included at the will of the implementor.



Alvestrand                Expires May 15, 2011                  [Page 5]

Internet-Draft                 Browser RTC                 November 2010


   In audio, the OPUS codec[I-D.ietf-codec-opus] MUST be supported.
   <NOTE IN DRAFT: NOT SETTLED> For ease of interoperability with
   gateways to older equipment, G.711 U-law, audio/PCMU, defined in RFC
   1890 [RFC1890] section 4.4.12, is also mandatory to implement.  There
   is no third mandatory to implement.

   In video, the VP8 codec [vp8] MUST be supported.

   The Theora codec is also freely available.  H.264/AVC and H.264/SVC
   [I-D.ietf-avt-rtp-svc] are widely enough used that it gives a wider
   range of communcations partners if they are supported.


6.  Connection management

   This specification is silent on the definition of connection
   management protocols.  It envisions that implementors will make a
   choice on whether to implement connection management protocols as a
   downloadable component, as a browser plug-in, or as a frontend/
   backend split, where a part of the protocol machinery is downloaded
   into the browser and uses some mechanism (for instance WebSockets) to
   communicate back to a backend implementing the rest of the connection
   management protocol.

   XMPP, and its Jabber component, has proved a versatile tool in
   building interoperable communities, and so has SIP.  This suite
   requires that the browser support establishing and describing
   connections using a data format capable of representing the
   information needed by these two protocols, such as one that can be
   one-to-one transformed into SDP.  The exact specification of this API
   is done elsewhere <insert reference when available>; this API is
   powerful enough that all interesting parameters of the transport
   mechanisms specified above are settable, and clear enough that how to
   connect the API to the protocols is obvious.


7.  Presentation and control

   The most important part of control is the user's control over the
   browser's interaction with input/output devices and communications
   channels.  It is important that the user have some way of figuring
   out where his audio, video or texting is being sent, for what
   purported reason, and what guarantees are made by the partis that
   form part of this control channel.  This is largely a local function
   between the browser, the underlying operating system and the user
   interface; this is being worked on in <insert reference here when
   available>.




Alvestrand                Expires May 15, 2011                  [Page 6]

Internet-Draft                 Browser RTC                 November 2010


8.  Local system support functions

   These do not need to be specified, but it is good to speak about
   available components here.

   Local functions include echo cancellation, volume control, camera
   management including focus, zoom, pan/tilt controls (if available),
   and more.

   Certain parts of the system SHOULD conform to certain properties, for
   instance:

   o  Echo cancellation should be good enough that feedback (defined as
      a rising volume of sound with no local sound input) does not
      occur.

   o  If remote control of camera is offered, the APIs should be
      available to figure out who's controlling the camera, and possibly
      deny permission.

   o  Automatic gain control, if present, should normalize a speaking
      voice into <whatever dB metrics makes sense here - most important
      that we have one only>


9.  IANA Considerations

   This document makes no request of IANA.

   Note to RFC Editor: this section may be removed on publication as an
   RFC.


10.  Security Considerations

   Security of the web-enabled real time communications comes in two
   pieces:

   o  Security of the components: The browsers, and other servers
      involved.  The most target-rich environment here is probably the
      browser; the aim here should be that the introduction of WEBM
      components introduces no additional vulnerability.

   o  Security of the communication channels: It should be easy for a
      participant to reassure himself of the security of his
      communication - by verifying the crypto parameters of the links he
      himself participates in, and to get reassurances from the other
      parties to the communication that they promise that appropriate



Alvestrand                Expires May 15, 2011                  [Page 7]

Internet-Draft                 Browser RTC                 November 2010


      measures are taken.

   o  Part of that last part is securing that the participants are who
      they say they are (when appropriate).

   o

   This specification addresses some, but not all, of these concerns,
   and makes some assumptions about the security considerations of other
   parts of the environment; it is up to the implementor to see that
   these security assumptions are warranted.  In particular:

   o  We assume that the ICE security mechanism is a necessary and
      sufficient criterion for accepting that a connection attempt is
      from a communications partner.  This means that we trust the
      randomness of ICE "usernames" and the security of ICE "passwords".

   o  We assume that the SRTP key exchange mechanisms and security
      profiles specified provide an adequate level of protection for
      audio and video media.

   (there needs to be more text here)


11.  Acknowledgements


12.  Normative References

   [I-D.ietf-avt-rtp-svc]
              Wenger, S., Wang, Y., Schierl, T., and A. Eleftheriadis,
              "RTP Payload Format for Scalable Video Coding",
              draft-ietf-avt-rtp-svc-23 (work in progress),
              October 2010.

   [I-D.ietf-codec-opus]
              Valin, J. and K. Vos, "Definition of the Opus Audio
              Codec", draft-ietf-codec-opus-00 (work in progress),
              October 2010.

   [I-D.ietf-hybi-thewebsocketprotocol]
              Fette, I., "The WebSocket protocol",
              draft-ietf-hybi-thewebsocketprotocol-03 (work in
              progress), October 2010.

   [RFC1890]  Schulzrinne, H., "RTP Profile for Audio and Video
              Conferences with Minimal Control", RFC 1890, January 1996.




Alvestrand                Expires May 15, 2011                  [Page 8]

Internet-Draft                 Browser RTC                 November 2010


   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.
              Jacobson, "RTP: A Transport Protocol for Real-Time
              Applications", STD 64, RFC 3550, July 2003.

   [RFC3711]  Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.
              Norrman, "The Secure Real-time Transport Protocol (SRTP)",
              RFC 3711, March 2004.

   [RFC4585]  Ott, J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,
              "Extended RTP Profile for Real-time Transport Control
              Protocol (RTCP)-Based Feedback (RTP/AVPF)", RFC 4585,
              July 2006.

   [RFC5124]  Ott, J. and E. Carrara, "Extended Secure RTP Profile for
              Real-time Transport Control Protocol (RTCP)-Based Feedback
              (RTP/SAVPF)", RFC 5124, February 2008.

   [datagrams]
              Alvestrand, H., "A Datagram Transport for the RTC-Web
              profile", November 2010.

   [vp8]      "The VP8 Codec Specification (not yet published)",
              December 2010.


Author's Address

   Harald T. Alvestrand
   Google
   Kungsbron 2
   Stockholm,   11122
   Sweden

   Email: harald@alvestrand.no














Alvestrand                Expires May 15, 2011                  [Page 9]

