<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->


<!ENTITY RFC5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC5050 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5050.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC3986 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC3986 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC3986 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648.xml">
<!ENTITY RFC3986 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2045.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>



<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->

<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>


<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->



<rfc category="exp" ipr="trust200902" submissionType="independent" docName="draft-farrell-kc-00">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="Public Key Checking Protocol">Public Key Checking Protocol</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Stephen Farrell" initials="S." 
            surname="Farrell">
      <organization>Trinity College Dublin</organization>
      <address>
        <postal>
          <street></street>
          <!-- Reorder these if your country does things differently -->
          <city>Dublin</city>
          <region></region>
          <code>2</code>
          <country>Ireland</country>
        </postal>
        <phone>+353-1-896-2354</phone>
        <email>stephen.farrell@cs.tcd.ie</email>
        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date month="February" year="2012" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>IETF</area>

    <workgroup>Network Working Group</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>public key checking</keyword>
    <keyword>weak key generation</keyword>
    <keyword>prng</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>
	
Some asymmetric
key generation implementations do not use sufficient randomness
giving rise to a number of bad public keys, for example with known factors,
being used on the Internet. This memo specifies [[for now: just
sketches]] an experimental
protocol that could be used by a private key holder 
to talk to a server that knows the values of (some of) those
bad keys that have been seen in the wild. The protocol only
allows a holder of the relevant private key to request
information, as doing otherwise could weaken the overall
security of the Internet and also considers confidentiality
and privacy as 
important requirements, as information that a given bad public
key is associated with a particular identifier could 
also weaken the security of the Internet.


      </t>
    </abstract>
  </front>
  
  <middle>

	<section title="Introduction">

	<t>[[Text in double square brackets (like this) is commentary.
So far this is just a sketch. I'll do more if there's interest.
I'm also happy to get some help if someone wants to.]]</t> 

        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
          document are to be interpreted as described in <xref target="RFC2119">RFC 2119</xref>.
        </t>

	<t>
Recent publications <xref target="blog"/><xref target="lenstra"/>
have found yet again that some asymmetric
key generation implementations do not use sufficient randomness
giving rise to a number of bad public keys, estimated to be
of the order of 0.2% of tested keys, being used on the Internet.
Nonetheless, this small percentage maps to some tens of thousands
of bad keys. And the distribution of bad keys is likely to 
be concentrated on specific devices or devices used in 
specific ways, so that their Pesudo Random Number Generators
(PRNG) for one reason or another have not produced sufficient
randomness at key generation time.
	</t>

	<t>
The publications referred to above involved acquiring 
large (in millions) sets of keys and then analysing those
for example looking for common factors. While that is a
computationally expensive process, once done, it should
be much quicker to incrementally check if for example a single new
RSA public key has one of the already known common factors
or if any public key is an exact match for a known-bad key. Thus if a server
were to store and analyse many public keys it could assist
key generators in knowing if they have inadvertently
produced a bad key. Note that such a server cannot, 
(especially in real-time), determine that a public key
is good, but only whether the public key is known to
be bad.
	</t>

	<t>
The entire set of known-bad keys cannot however be 
made available to all, as some of those keys are in real use
and simply publishing their values could put Internet
users at risk. However, if we have a server with the bad
keys and a protocol that only allows the relevant
private key holder to make requests then we may be able
to provide a useful service.
	</t>

	<t>
In addition to requiring that only private key holders
can query the server, we must also ensure that 
eavesdroppers cannot tell whether the answer to the 
query is that the key is known to be bad or not known to be bad.
For example, response packet sizes could expose this
information.
	</t>

	<t>
Servers implementing this protocol are REQUIRED to store
the public keys presented to them for offline analysis.
(Though they may also acquire public keys for analysis
in many other ways.)
Thus, the answer that a requestor receives might change
from not-known-bad to known-bad
in a matter of minutes or hours. Some requestors could
take advantage of this and not actually use a key until
they have gotten not-known-bad answers for a 
configured period.
	</t>

	<t>
Note also that my public key may be good now. But might
become known to be bad after someone else has posted e.g.
a public key with a common factor. In other words,
ever private key holder could benefit from periodally
checking with a responder for this protocol.
	</t>

	<t>
While a server may take hours to find new bad keys,
once a server has a set of e.g. factors of RSA 
moduli, then it can easily check if a supplied 
public key has one of those as a factor, and this
is one of the bad-key patterns seen in the wild. This will
not detect all bad keys however, a process that
does reqiure more computation. Similarly,
if there are blacklists of bad keys (e.g. as happened
in the Debian case <xref target="deb"/>) then those can be 
spotted immediately. So the server can 
in such cases give quick and accurate answers. Ultimately, the server can do 
anything it wants for any algorithm - the specific
checks are not a part of this protocol.
	</t>

	<t>
While a server here could lie and say that a key
is not-known-bad even if it is in fact known-bad,
using more than one server could mitigate that
and reduce the level of trust required in the
server's honesty.
Clients can also test any server for this kind of
dishonesty 
by occasionally generating and sending bad keys to check if
the server is honest. This is why we REQUIRE 
the servers to store and analyse the keys 
presented to it. [[Could be interesting games
to play here.]]
	</t>

	</section>
 	
	<section title="Protocol Overview">

	<t>
The abstract protocol is simple: 
	</t>

<t>

<list style="numbers">

<t>the requestor sends a message asking for a challenge</t>

<t>the responder replies with a challenge</t>

<t>the requestor sends a signed query containing the public 
key and challenge</t>

<t>the responder replies saying the public key is known to 
be bad, or not known to be bad</t>

</list>
</t>

	<t>
This protocol MUST be run over a server-authenticated
TLS <xref target="RFC5246"/> session using a 
TLS ciphersuite that provides strong confidentiality.
	</t>

	<t>
In order to ensure confidentiality even in the face
of traffic analysis, we ensure that all request messages
are the same size (for a given public key size) and
similarly for response messages. This can involve the
responder sending random bits to the requestor, and
those MUST be of sufficient quality to be useful as
input to key generation.

	</t>

	<t>
For additional privacy, a requestor might choose to
run this protocol over some onion routing network such
as Tor. <xref target="tor"/> 
The protocol is designed to allow for
such use-cases. [[not sure yet how to do that though,
help appreciated]]
	</t>

	<t>
Note that the challenge has no strucure from the 
requestor perspective but might have for the 
responder. For example, a responder could 
include encrypted values in order to ensure
that the challenge is valid and or fresh. 
[[we might want to make that a MUST but its
probably only useful if done so I could 
test it from outside.]]
	</t>

	</section>

	<section title="Message Formats">

	<t>TBD</t>

    </section>

	<section title="Responder Actions">

	<t>TBD</t>
    </section>

	<section title="Requestor Actions">

	<t>TBD</t>
    </section>

	<section title="Security Considerations">

	<t>You'd have to imagine there are:-)</t>
	</section>

	<section title="IANA Considerations">
	<t>Dunno</t>
	</section>


	<section title="Acknowledgements">
	</section>
  </middle>
  
  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">

      &RFC2119;

      &RFC5246;

    </references>
    
    <references title="Informative References">

	<reference anchor="lenstra" target="http://eprint.iacr.org/2012/064">
		<front>
		<title>Ron was wrong, Whit is right</title>
    	<author surname="Lenstra" initials="A" fullname="Arjen K. Lenstra"/> 
		<author surname="Hughes" initials="J" fullname="James P. Hughes"/> 
		<author surname="Augier" initials="M" fullname="Maxime Augier"/> 
		<author surname="Bos" initials="J" fullname="Joppe W. Bos"/> 
		<author surname="Kleinjung" initials="T" fullname="Thorsten Kleinjung"/> 
		<author surname="Wachter" initials="C" fullname="Christophe Wachter"/>
		<date month="February" year="2012"/>
		</front>
    	<seriesInfo name="Cryptology ePrint Archive" value="Report 2012/064"/>
	</reference>

	<reference anchor="blog"
		target="https://freedom-to-tinker.com/blog/nadiah/new-research-theres-no-need-panic-over-factorable-keys-just-mind-your-ps-and-qs">
		<front>
		<title>New research: There's no need to panic over factorable keys--just mind your Ps and Qs</title>
		<author surname="Heniger" initials="N" fullname="Nadia Heniger"/>
		<date month="February" year="2012"/>
		</front>
	</reference>

	<reference anchor="tor" target="http://www.torproject.org/">
		<front>
		<title>The Tor Project</title>
		<author/>
		<date/>
		</front>
	
	</reference>

	<reference anchor="deb" target="http://www.debian.org/security/2008/dsa-1571">
		<front>
		<title>Debian Security Advisory, DSA-1571-1: openssl -- predictable random number generator</title>
		<author/>
		<date month="May" year="2008"/>
		</front>

	</reference>
	
    </references>

  </back>
</rfc>


