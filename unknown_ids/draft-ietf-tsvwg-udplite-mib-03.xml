<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd' [
<!-- bibliographical data, inclusion required -->
<!ENTITY rfc0768 PUBLIC '' 'bib/reference.RFC.0768.xml'>
<!ENTITY rfc2119 PUBLIC '' 'bib/reference.RFC.2119.xml'>
<!ENTITY rfc2287 PUBLIC '' 'bib/reference.RFC.2287.xml'>
<!ENTITY rfc2787 PUBLIC '' 'bib/reference.RFC.2787.xml'>
<!ENTITY rfc2790 PUBLIC '' 'bib/reference.RFC.2790.xml'>
<!ENTITY rfc3410 PUBLIC '' 'bib/reference.RFC.3410.xml'>
<!ENTITY rfc3828 PUBLIC '' 'bib/reference.RFC.3828.xml'>
<!ENTITY rfc4001 PUBLIC '' 'bib/reference.RFC.4001.xml'>
<!ENTITY rfc4113 PUBLIC '' 'bib/reference.RFC.4113.xml'>
<!ENTITY rfc4340 PUBLIC '' 'bib/reference.RFC.4340.xml'>
] >

<rfc category="std" ipr="full3978" docName="draft-ietf-tsvwg-udplite-mib-03">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes" ?>
<!--
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>
-->

<front>
	<title abbrev="MIB for the UDP-Lite protocol">MIB for the UDP-Lite protocol</title>

        <author initials="G." surname="Renker"   fullname="Gerrit Renker">
		       <organization>University of Aberdeen</organization>
		       <address>
		       		<postal>
        			<street>School of Engineering</street>
        			<street>Fraser Noble Building</street>
				<city>Aberdeen</city>
        			<code>AB24 3UE</code>
        			<country>Scotland</country>
				</postal>
    				<email>gerrit@erg.abdn.ac.uk</email>
				<uri>http://www.erg.abdn.ac.uk</uri>
			</address>
	</author>
        <author initials="G." surname="Fairhurst" fullname="Godred Fairhurst">
		       <organization>University of Aberdeen</organization>
		       <address>
		       		<postal>
        			<street>School of Engineering</street>
        			<street>Fraser Noble Building</street>
				<city>Aberdeen</city>
        			<code>AB24 3UE</code>
        			<country>Scotland</country>
				</postal>
				<email>gorry@erg.abdn.ac.uk</email>
				<uri>http://www.erg.abdn.ac.uk</uri>
			</address>
	</author>

	<date month="October" year="2007" />

	<area>Management</area>
	<workgroup>Transport Area Working Group</workgroup>
	<keyword>UDP-Lite</keyword>
	<keyword>SMIv2</keyword>
	<keyword>Internet-Draft</keyword>

        <abstract>
	<t>This document specifies a Management Information Base (MIB) module for the Lightweight User Datagram Protocol. It defines a
	   set of new MIB objects to characterise the behaviour and performance of transport layer endpoints deploying UDP-Lite.
	   UDP-Lite resembles UDP, but differs from the semantics of UDP by the addition of a single option. This adds the capability
	   for variable-length data checksum coverage, which can benefit a class of applications that prefer delivery of (partially)
	   corrupted datagram payload data in preference to discarding the datagram.</t>
	</abstract>
</front>


<middle>
<section anchor="intro" title="Introduction">
	<t>The Lightweight User Datagram Protocol (UDP-Lite) <xref target='RFC3828'/> (also known as UDPLite) is an IETF standards-track
	   transport protocol. The operation of UDP-Lite is similar to the User Datagram Protocol (UDP) <xref target="RFC0768"/>, but can
	   also serve applications in error-prone network environments that prefer to have partially damaged payloads delivered rather
	   than discarded.  This is achieved by changing the semantics of the UDP Length field to that of a Checksum Coverage field.
	   If this feature is not used, UDP-Lite is semantically identical to UDP.</t>
	<t>The interface of UDP-Lite differs from that of UDP by the addition of a single option, which communicates a length value.
    	   At the sender this specifies the intended datagram checksum coverage; at the receiver it signifies a minimum coverage threshold for
	   incoming datagrams. This length value may also be modified during the lifetime of a connection. UDP-Lite does not provide mechanisms
	   to negotiate the checksum coverage between the sender and receiver. Where required, this needs to be communicated by another protocol.
	   DCCP <xref target='RFC4340'/> for instance includes a capability to negotiate checksum coverage values.</t>

	<t>This document defines a set of runtime statistics (variables) that facilitate both network management/monitoring as well as unified
	   comparisons between different protocol implementations and operating environments. To provide a common interface for users and
	   implementors of UDP-Lite modules, the definitions of these runtime statistics are provided as a MIB module using the SMIv2 format
	   <xref target="RFC2578" />.</t>


<section anchor="intro1" title="Relationship to the UDP-MIB">
	<t>The similarities between UDP and UDP-Lite suggest that the MIB module for UDP-Lite should resemble that of UDP <xref target="RFC4113"/>,
	   with extensions corresponding to the additional capabilities of UDP-Lite. The UDP-Lite MIB module is placed beneath the mib-2 subtree,
	   adhering to the familiar structure of the UDP-MIB module to ease integration.</t>
        <t>In particular, these well-known basic counters are supported:</t>
        <list style="symbols">
		<t>InDatagrams</t>
		<t>NoPorts</t>
		<t>InErrors</t>
		<t>OutDatagrams</t>
	</list>
	<t>The following read-only variables have been added to the basic structure used in the UDP-MIB module:</t>
	<list style="hanging">
		<t>InPartialCov: The number of received datagrams, with a valid format and checksum,
                   whose checksum coverage is strictly less than the datagram length.</t>

	        <t>InBadChecksum: The number of received datagrams with an invalid checksum (i.e. where
		   the receiver-recalculated UDP-Lite checksum does not match that in the Checksum field).
		   Unlike NoPorts, this error type also counts as InErrors.</t>

		<t>OutPartialCov: The number of sent datagrams with a valid format and checksum
                   whose checksum coverage is strictly less than the datagram length.</t>
	</list>

	<t>All non-error counters used in this document are 64-bit counters. This is a departure from UDP,
	   which traditionally used 32-bit counters and mandates 64-bit counters only on fast networks  <xref
           target="RFC4113" />.  This choice is justified by the fact that UDP-Lite is a more recent
           protocol,  and that network speeds continue to grow.</t>

	<t>Another difference from the UDP MIB module is that the UDP-Lite MIB module does not support an IPv4-only
	   listener table. This feature was present only for compatibility reasons and is superseded by the more
	   informative endpoint table.  Two columnar objects have been added to this table:</t>
	<list style="hanging">
		<t>udpliteEndpointMinCoverage: The minimum acceptable receiver checksum  coverage length  <xref target="RFC3828" />.
		   This value may be manipulated by the application attached to the receiving endpoint.</t>

     	        <t>udpliteEndpointViolCoverage: This object is optional and counts the number of valid datagrams with a checksum
		   coverage value less than the corresponding value of udpliteEndpointMinCoverage. Although being otherwise valid,
		   such datagrams are discarded rather than passed to the application. This object thus serves to separate cases
		   of violated coverage from other InErrors.</t>
	</list>
	<t>The second entry is not required to manage the transport protocol and hence is not mandatory.
           It may be implemented to assist in debugging application design and configuration.</t>

        <t>The UDP-Lite MIB module also provides a discontinuity object to help determine whether one or more of its counters 
           experienced a discontinuity event. This is an event, other than re-initialising the management system, which invalidates 
           the management entity's understanding of the counter values.</t>
        <t>For example, if UDP-Lite is  implemented as a loadable operating system module, a module load or unload would produce a 
           discontinuity. By querying the value of udpliteStatsDiscontinuityTime, a management entity can determine whether or not a 
           discontinuity event has occurred.</t>
</section>

<section anchor="intro2" title="Relationship to HOST-RESOURCES-MIB and SYSAPPL-MIB">

		<t>The UDP-Lite endpoint table contains one columnar object, udpliteEndpointProcess, reporting a unique value which
		identifies a distinct piece of software associated with this endpoint. (When more than one piece of software is
		associated with this endpoint, a representative is chosen; so that consecutive queries consistently refer to the
		same identifier, as long as the representative piece of software is running and still associated with the endpoint.)</t>

		<t>The value of udpliteEndpointProcess is reported as an Unsigned32; and it shares with the hrSWRunIndex
		of the <xref target="RFC2790">HOST-RESOURCES-MIB</xref> and the sysApplElmtRunIndex of the
		<xref target="RFC2287">SYSAPPL-MIB</xref> the requirement that, wherever possible, this should be the native
		and unique identification number employed by the system.</t>

		<t>If the SYSAPPL-MIB module is available, the value of udpliteEndpointProcess should correspond to the appropriate
		value of sysApplElmtRunIndex. If not available, an alternative should be used (e.g. the hrSWRunIndex of the
		HOST-RESOURCES-MIB module).</t>
</section>

<section anchor="intro3" title="Interpretation of the MIB Variables">
	<t><xref target='fig_counter_roles' /> shows an informal survey of the packet processing path, with
	   reference to counter names in brackets.</t>
	<figure anchor='fig_counter_roles' title="UDP-Lite Input Processing Path">
<artwork>
Received UDP-Lite Datagrams
  |
  |                +- Full Coverage ---------------------+-&gt; Deliver
  |                |                                     |
  +- Valid Header--+               +- &gt;= Rec. Coverage --+
  | (InDatagrams)  |               |
  |                +- Partial -----+
  |                (InPartialCov)  |
  |                                +-  &lt; Rec. Coverage --+
  |                               (EndpointViolCoverage) |
  |                                                      |
  |                                                      |
  +- Header Error ---+                                   |
  |                  |                                   |
  +- Checksum Error -+-----------------------------------+-&gt; Discard
  |  (InBadChecksum)                                       (InErrors)
  |
  +- Port Error -------------------------------------------&gt; Discard
     (NoPorts)
</artwork></figure>
	<t>A platform-independent test of the UDP-Lite implementations in two connected end hosts may be
           performed as follows.</t>
        <t>On the sending side, OutDatagrams and OutPartialCov are observed. The ratio OutPartialCov/OutDatagrams
    	   describes the fraction (between 0 and 1) of datagrams using partial checksum coverage.</t>
        <t>On the receiving side, InDatagrams, InPartialCov, and InErrors are monitored. If datagrams are
           received from the given sender, InErrors is close to zero, and InPartialCov is zero, no partial
           coverage is employed. If no datagrams are received and InErrors increases proportionally with the
           sending rate, a configuration error is likely (a wrong value of receiver minimum checksum coverage).
        </t>
	<t>The InBadChecksum counter reflects errors that may persist following end-host processing, router processing,
    	   or link processing (this includes illegal coverage values as defined in <xref target="RFC3828"/>, since
	   checksum and checksum coverage are mutually inter-dependent). In particular, InBadChecksum can serve as an
	   indicator of the residual link bit error rate: on links with higher bit error rates, a lower value of the
	   checksum coverage may help to reduce both the values of InErrors and InBadChecksum.
        </t>

	<t>By observing these values and adapting the configuration, a setting may then be found that is
           more adapted to the specific type of link, as well as the type of payload; indicated by a
           reduction of the number of discarded datagrams (InErrors), leading to an improved performance.
	</t>

	<t>The above statistics are elementary and can be used to derive the following information:</t>
	<list style="symbols">
		<t>The total number of incoming datagrams is InDatagrams + InErrors + NoPorts</t>
		<t>The number of InErrors that were discarded due to problems other than bad checksum is InErrors - InBadChecksum</t>
		<t>The number of InDatagrams that have full coverage is InDatagrams - InPartialCov.</t>
		<t>The number of OutDatagrams that have full coverage is OutDatagrams - OutPartialCov.</t>
	</list>
       <t>The following Case diagram <xref target='CASE'/> summarises the relationships between the counters
          on the input processing path.</t>
<figure anchor='fig_case' title="Counters for received UDP-Lite Datagrams">
<artwork>
       Transport Layer Interface
-------------------------------------------------------------
                  /\
                  ||
               ----------------------------- InDatagrams
                  ||                             ^
                  ||                             |
                  ||                             |
                  ||----------------------&gt; InPartialCov
                  ||                             |
                  ||                             |
                  ||                             v
                  ||                     EndpointViolCoverage
                  ||                             |
 NoPorts &lt;--------||                             |
                  ||                             |
                  ||------&gt; InBadChecksum ------&gt;|
                  ||                             |
                  ||                             |
                  ||                             v
                  ||------------------------&gt; InErrors
                  ||
                  ||
-------------------------------------------------------------
        Network Layer Interface
</artwork></figure>

	<t>A configuration error may occur when a sender chooses a coverage value for the datagrams that it
           sends that is less than the minimum coverage configured by the intended recipient. The minimum
           coverage is set on a per-session basis by the application associated with the listening endpoint,
           and its current value is recorded in the udpliteEndpointTable. Reception of valid datagrams with a
           checksum coverage value less than this threshold results in dropping the datagram <xref
           target="RFC3828"/> and incrementing InErrors.
           To improve debugging of such (misconfigured) cases, an implementer may choose to support the
           optional udpliteEndpointViolCoverage entry in the endpoint table (<xref target='intro1' />.) that
           specifically counts datagrams falling in this category. Without this feature, failure due to
	   misconfiguration can not be distinguished from datagram processing failure.</t>

</section>


<section anchor="intro4" title="Conventions">
	<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
     	   and "OPTIONAL" in this document are to be interpreted as described in BCP 14, <xref target="RFC2119"/>.
	</t>
</section>

</section> <!-- intro -->


<section anchor="istd" title="The Internet-Standard Management Framework">
      <t>For a detailed overview of the documents that describe the current Internet-Standard Management Framework,
 	   please refer to section 7 of <xref target="RFC3410">RFC 3410</xref>.</t>

      <t>Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
         MIB objects are generally accessed through the Simple Network Management Protocol (SNMP). Objects in the MIB
	 are defined using the mechanisms defined in the Structure of Management Information (SMI).
	 This memo specifies a MIB module that is compliant to the SMIv2, which is described in STD 58,
	 <xref target="RFC2578">RFC 2578</xref>, STD 58, <xref target="RFC2579">RFC 2579</xref> and STD 58,
	 <xref target="RFC2580">RFC 2580</xref>.
     </t>
</section> <!-- istd -->

<section anchor="themib" title="Definitions">

<figure><artwork>
UDPLITE-MIB DEFINITIONS ::= BEGIN

IMPORTS
    MODULE-IDENTITY,
    OBJECT-TYPE,
    mib-2, Unsigned32,
    Counter32, Counter64   FROM SNMPv2-SMI           -- [RFC2578]

    TimeStamp              FROM SNMPv2-TC            -- [RFC2579]

    MODULE-COMPLIANCE,
    OBJECT-GROUP           FROM SNMPv2-CONF          -- [RFC2580]

    InetAddress,
    InetAddressType,
    InetPortNumber         FROM INET-ADDRESS-MIB;    -- [RFC4001]
</artwork></figure>

<figure><artwork>
udpliteMIB MODULE-IDENTITY
    LAST-UPDATED "200710290000Z"       -- Mon, 29th Oct 2007
    ORGANIZATION "IETF TSV Working Group (TSVWG)"
    CONTACT-INFO
           "IETF TSV Working Group
            http://www.ietf.org/html.charters/tsvwg-charter.html
            Mailing List: tsvwg@ietf.org

            Gerrit Renker, Godred Fairhurst
            Electronics Research Group
            School of Engineering, University of Aberdeen
            Fraser Noble Building, Aberdeen AB24 3UE, UK"
    DESCRIPTION
           "The MIB module for managing UDP-Lite implementations.
            Copyright (C) The IETF Trust (2007). This version of
            this MIB module is part of RFC ZZZ; see the RFC
            itself for full legal notices."

    -- RFC Ed.: replace ZZZ with actual RFC number &amp; remove this note

    REVISION "200710290000Z"           -- Mon, 29th Oct 2007
    DESCRIPTION
           "Initial SMIv2 revision, based on the format of the UDP
            MIB module (RFC 4113) and published as RFC ZZZ."

    -- RFC Ed.: replace ZZZ with actual RFC number &amp; remove this note

    ::= { mib-2 XXX }

    -- RFC Ed.: replace XXX with OBJECT-IDENTIFIER &amp; remove this note
</artwork></figure>

<figure><artwork>
udplite      OBJECT IDENTIFIER ::= { udpliteMIB 1 }
</artwork></figure>

<figure><artwork>
udpliteInDatagrams OBJECT-TYPE         -- as in UDP-MIB
    SYNTAX     Counter64
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The total number of UDP-Lite datagrams that were
            delivered to UDP-Lite users.
            Discontinuities in the value of this counter can occur
            at re-initialisation of the management system, and at
            other times as indicated by the value of
            udpliteStatsDiscontinuityTime."
    ::= { udplite 1 }
</artwork></figure>

<figure><artwork>
udpliteInPartialCov OBJECT-TYPE        -- new in UDP-Lite
    SYNTAX     Counter64
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The total number of UDP-Lite datagrams that were
            delivered to UDP-Lite users (applications) and whose
            checksum coverage was strictly less than the datagram
            length.
            Discontinuities in the value of this counter can occur
            at re-initialisation of the management system, and at
            other times as indicated by the value of
            udpliteStatsDiscontinuityTime."
    ::= { udplite 2 }
</artwork></figure>

<figure><artwork>
udpliteNoPorts OBJECT-TYPE             -- as in UDP-MIB
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The total number of received UDP-Lite datagrams for
            which there was no listener at the destination port.

            Discontinuities in the value of this counter can occur
            at re-initialisation of the management system, and at
            other times as indicated by the value of
            udpliteStatsDiscontinuityTime."
    ::= { udplite 3 }
</artwork></figure>

<figure><artwork>
udpliteInErrors OBJECT-TYPE            -- as in UDP-MIB
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The number of received UDP-Lite datagrams that could not
            be delivered for reasons other than the lack of an
            application at the destination port.
            Discontinuities in the value of this counter can occur
            at re-initialisation of the management system, and at
            other times as indicated by the value of
            udpliteStatsDiscontinuityTime."
    ::= { udplite 4 }
</artwork></figure>

<figure><artwork>
udpliteInBadChecksum OBJECT-TYPE       -- new in UDP-Lite
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The number of received UDP-Lite datagrams whose checksum
            could not be validated. This includes illegal checksum
            coverage values, as their use would lead to incorrect
            checksums.
            Discontinuities in the value of this counter can occur
            at re-initialisation of the management system, and at
            other times as indicated by the value of
            udpliteStatsDiscontinuityTime."
    REFERENCE "RFC 3828, section 3.1"
    ::= { udplite 5 }
</artwork></figure>

<figure><artwork>
udpliteOutDatagrams OBJECT-TYPE        -- as in UDP-MIB
    SYNTAX     Counter64
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The total number of UDP-Lite datagrams sent from this
            entity.
            Discontinuities in the value of this counter can occur
            at re-initialisation of the management system, and at
            other times as indicated by the value of
            udpliteStatsDiscontinuityTime."
    ::= { udplite 6 }
</artwork></figure>

<figure><artwork>
udpliteOutPartialCov OBJECT-TYPE       -- new in UDP-Lite
    SYNTAX     Counter64
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The total number of udpliteOutDatagrams whose
            checksum coverage was strictly less than the
            datagram length.
            Discontinuities in the value of this counter can occur
            at re-initialisation of the management system, and at
            other times as indicated by the value of
            udpliteStatsDiscontinuityTime."
    ::= { udplite 7 }
</artwork></figure>

<figure><artwork>
udpliteEndpointTable OBJECT-TYPE
    SYNTAX     SEQUENCE OF UdpLiteEndpointEntry
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "A table containing information about this entity's
            UDP-Lite endpoints on which a local application is
            currently accepting or sending datagrams.

            The address type in this table represents the address
            type used for the communication, irrespective of the
            higher-layer abstraction.  For example, an application
            using IPv6 'sockets' to communicate via IPv4 between
            ::ffff:10.0.0.1 and ::ffff:10.0.0.2 would use
            InetAddressType ipv4(1).

            Like the udpTable in RFC 4113, this table also allows
            the representation of an application that completely
            specifies both local and remote addresses and ports. A
            listening application is represented in three possible
            ways:

            1) An application that is willing to accept both IPv4
               and IPv6 datagrams is represented by a
               udpliteEndpointLocalAddressType of unknown(0) and a
               udpliteEndpointLocalAddress of ''h (a zero-length
               octet-string).

            2) An application that is willing to accept only IPv4
               or only IPv6 datagrams is represented by a
               udpliteEndpointLocalAddressType of the appropriate
               address type and a udpliteEndpointLocalAddress of
               '0.0.0.0' or '::' respectively.

            3) An application that is listening for datagrams only
               for a specific IP address but from any remote
               system is represented by a
               udpliteEndpointLocalAddressType of the appropriate
               address type, with udpliteEndpointLocalAddress
               specifying the local address.

            In all cases where the remote address is a wildcard,
            the udpliteEndpointRemoteAddressType is unknown(0),
            the udpliteEndpointRemoteAddress is ''h (a zero-length
            octet-string), and the udpliteEndpointRemotePort is 0.

            If the operating system is demultiplexing UDP-Lite
            packets by remote address/port, or if the application
            has 'connected' the socket specifying a default remote
            address/port, the udpliteEndpointRemote* values should
            be used to reflect this."
    ::= { udplite 8 }
</artwork></figure>

<figure><artwork>
udpliteEndpointEntry OBJECT-TYPE
    SYNTAX     UdpLiteEndpointEntry
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "Information about a particular current UDP-Lite endpoint.

            Implementers need to pay attention to the sizes of
            udpliteEndpointLocalAddress/RemoteAddress, as OIDs of
            column instances in this table must have no more than
            128 sub-identifiers in order to remain accessible with
            SNMPv1, SNMPv2c, and SNMPv3."
    INDEX   { udpliteEndpointLocalAddressType,
              udpliteEndpointLocalAddress,
              udpliteEndpointLocalPort,
              udpliteEndpointRemoteAddressType,
              udpliteEndpointRemoteAddress,
              udpliteEndpointRemotePort,
              udpliteEndpointInstance }
    ::= { udpliteEndpointTable 1 }
</artwork></figure>


<figure><artwork>
UdpLiteEndpointEntry ::= SEQUENCE {
        udpliteEndpointLocalAddressType   InetAddressType,
        udpliteEndpointLocalAddress       InetAddress,
        udpliteEndpointLocalPort          InetPortNumber,
        udpliteEndpointRemoteAddressType  InetAddressType,
        udpliteEndpointRemoteAddress      InetAddress,
        udpliteEndpointRemotePort         InetPortNumber,
        udpliteEndpointInstance           Unsigned32,
        udpliteEndpointProcess            Unsigned32,
        udpliteEndpointMinCoverage        Unsigned32,
        udpliteEndpointViolCoverage       Counter32
}
</artwork></figure>


<figure><artwork>
udpliteEndpointLocalAddressType OBJECT-TYPE
    SYNTAX     InetAddressType
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "The address type of udpliteEndpointLocalAddress.  Only
            IPv4, IPv4z, IPv6, and IPv6z addresses are expected, or
            unknown(0) if datagrams for all local IP addresses are
            accepted."
    ::= { udpliteEndpointEntry 1 }
</artwork></figure>

<figure><artwork>
udpliteEndpointLocalAddress OBJECT-TYPE
    SYNTAX     InetAddress
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "The local IP address for this UDP-Lite endpoint.

            The value of this object can be represented in three
            possible ways, depending on the characteristics of the
            listening application:

            1. For an application that is willing to accept both
               IPv4 and IPv6 datagrams, the value of this object
               must be ''h (a zero-length octet-string), with
               the value of the corresponding instance of the
               EndpointLocalAddressType object being unknown(0).

            2. For an application that is willing to accept only
               IPv4 or only IPv6 datagrams, the value of this
               object must be '0.0.0.0' or '::', respectively,
               while the corresponding instance of the
               EndpointLocalAddressType object represents the
               appropriate address type.

            3. For an application that is listening for data
               destined only to a specific IP address, the value
               of this object is the specific IP address for
               which this node is receiving packets, with the
               corresponding instance of the
               EndpointLocalAddressType object representing the
               appropriate address type.

            As this object is used in the index for the
            udpliteEndpointTable, implementors should be careful
            not to create entries that would result in OIDs with
            more than 128 sub-identifiers; this is because of SNMP
            and SMI limitations."
    ::= { udpliteEndpointEntry 2 }
</artwork></figure>


<figure><artwork>
udpliteEndpointLocalPort OBJECT-TYPE
    SYNTAX     InetPortNumber
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "The local port number for this UDP-Lite endpoint."
    ::= { udpliteEndpointEntry 3 }
</artwork></figure>

<figure><artwork>
udpliteEndpointRemoteAddressType OBJECT-TYPE
    SYNTAX     InetAddressType
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "The address type of udpliteEndpointRemoteAddress.  Only
            IPv4, IPv4z, IPv6, and IPv6z addresses are expected, or
            unknown(0) if datagrams for all remote IP addresses are
            accepted.  Also, note that some combinations of
            udpliteEndpointLocalAdressType and
            udpliteEndpointRemoteAddressType are not supported.  In
            particular, if the value of this object is not
            unknown(0), it is expected to always refer to the
            same IP version as udpliteEndpointLocalAddressType."
    ::= { udpliteEndpointEntry 4 }
</artwork></figure>

<figure><artwork>
udpliteEndpointRemoteAddress OBJECT-TYPE
    SYNTAX     InetAddress
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "The remote IP address for this UDP-Lite endpoint.  If
            datagrams from any remote system are to be accepted,
            this value is ''h (a zero-length octet-string).
            Otherwise, it has the type described by
            udpliteEndpointRemoteAddressType and is the address of
            the remote system from which datagrams are to be
            accepted (or to which all datagrams will be sent).

            As this object is used in the index for the
            udpliteEndpointTable, implementors should be careful
            not to create entries that would result in OIDs with
            more than 128 sub-identifiers; this is because of SNMP
            and SMI limitations."
    ::= { udpliteEndpointEntry 5 }
</artwork></figure>

<figure><artwork>
udpliteEndpointRemotePort OBJECT-TYPE
    SYNTAX     InetPortNumber
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "The remote port number for this UDP-Lite endpoint. If
            datagrams from any remote system are to be accepted,
            this value is zero."
    ::= { udpliteEndpointEntry 6 }
</artwork></figure>

<figure><artwork>
udpliteEndpointInstance OBJECT-TYPE
    SYNTAX     Unsigned32 (1..'ffffffff'h)
    MAX-ACCESS not-accessible
    STATUS     current
    DESCRIPTION
           "The instance of this tuple. This object is used to
            distinguish among multiple processes 'connected' to
            the same UDP-Lite endpoint. For example, on a system
            implementing the BSD sockets interface, this would be
            used to support the SO_REUSEADDR and SO_REUSEPORT
            socket options."
    ::= { udpliteEndpointEntry 7 }
</artwork></figure>

<figure><artwork>
udpliteEndpointProcess OBJECT-TYPE
    SYNTAX     Unsigned32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "A unique value corresponding to a piece of software
            running on this endpoint.

            If this endpoint is associated with more than one piece
            of software, the agent should choose one of these; such
            that subsequent reads will consistently return the same
            value, as long as the representative piece of software
            is running and still associated with the endpoint. The
            implementation may use any algorithm satisfying these
            constraints (e.g. choosing the entity with the oldest
            start time).

            This identifier is platform-specific. Wherever possible,
            it should use the system's native, unique identification
            number as value.

            If the SYSAPPL-MIB module is available, the value should
            be the same as sysApplElmtRunIndex. If not available, an
            alternative should be used (e.g. the hrSWRunIndex of the
            HOST-RESOURCES-MIB module).

            If it is not possible to uniquely identify the pieces of
            software associated with this endpoint, then the value
            zero should be used. (Note that zero is otherwise a
            valid value for sysApplElmtRunIndex.)"
    ::= { udpliteEndpointEntry 8 }
</artwork></figure>


<figure><artwork>
udpliteEndpointMinCoverage OBJECT-TYPE -- new in UDP-Lite
    SYNTAX     Unsigned32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The minimum checksum coverage expected by this endpoint.
            A value of 0 indicates that only fully covered datagrams
            are accepted."
    REFERENCE "RFC 3828, section 3.1"
    ::= { udpliteEndpointEntry 9 }
</artwork></figure>

<figure><artwork>
udpliteEndpointViolCoverage OBJECT-TYPE -- new / optional in UDP-Lite
    SYNTAX     Counter32
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The number of datagrams received by this endpoint whose
            checksum coverage violated the minimum coverage threshold
            set for this connection (i.e. all valid datagrams whose
            checksum coverage was strictly smaller than the minimum,
            as defined in RFC 3828).
            Discontinuities in the value of this counter can occur
            at re-initialisation of the management system, and at
            other times as indicated by the value of
            udpliteStatsDiscontinuityTime."
    ::= { udpliteEndpointEntry 10 }
</artwork></figure>

<figure><artwork>
udpliteStatsDiscontinuityTime OBJECT-TYPE
    SYNTAX     TimeStamp
    MAX-ACCESS read-only
    STATUS     current
    DESCRIPTION
           "The value of sysUpTime at the most recent occasion at
            which one or more of the UDP-Lite counters suffered a
            discontinuity.
            A value of zero indicates no such discontinuity has
            occurred since the last re-initialisation of the local
            management subsystem."
    ::= { udplite 9 }
</artwork></figure>

<figure><artwork>
-- Conformance Information

udpliteMIBConformance OBJECT IDENTIFIER ::= { udpliteMIB 2 }

udpliteMIBCompliance MODULE-COMPLIANCE
    STATUS     current
    DESCRIPTION
           "The compliance statement for systems that implement
            UDP-Lite.

            There are a number of INDEX objects that cannot be
            represented in the form of OBJECT clauses in SMIv2,
            but for which we have the following compliance
            requirements, expressed in OBJECT clause form in this
            description clause:

            -- OBJECT      udpliteEndpointLocalAddressType
            -- SYNTAX      InetAddressType { unknown(0), ipv4(1),
            --                               ipv6(2), ipv4z(3),
            --                               ipv6z(4) }
            -- DESCRIPTION
            --     Support for dns(16) is not required.
            -- OBJECT      udpliteEndpointLocalAddress



            -- SYNTAX      InetAddress (SIZE(0|4|8|16|20))
            -- DESCRIPTION
            --     Support is only required for zero-length
            --     octet-strings, and for scoped and unscoped
            --     IPv4 and IPv6 addresses.
            -- OBJECT      udpliteEndpointRemoteAddressType
            -- SYNTAX      InetAddressType { unknown(0), ipv4(1),
            --                               ipv6(2), ipv4z(3),
            --                               ipv6z(4) }
            -- DESCRIPTION
            --     Support for dns(16) is not required.
            -- OBJECT      udpliteEndpointRemoteAddress
            -- SYNTAX      InetAddress (SIZE(0|4|8|16|20))
            -- DESCRIPTION
            --     Support is only required for zero-length
            --     octet-strings, and for scoped and unscoped
            --     IPv4 and IPv6 addresses.
           "
    MODULE  -- this module
         MANDATORY-GROUPS { udpliteBaseGroup,
                            udplitePartialCsumGroup,
                            udpliteEndpointGroup    }
     GROUP               udpliteAppGroup
     DESCRIPTION
            "This group is optional and provides supplementary
             information about the effectiveness of using minimum
             checksum coverage thresholds on endpoints."
    ::= { udpliteMIBConformance 1 }
</artwork></figure>

<figure><artwork>
udpliteMIBGroups OBJECT IDENTIFIER ::= { udpliteMIBConformance 2 }
</artwork></figure>

<figure><artwork>
udpliteBaseGroup OBJECT-GROUP          -- as in UDP
    OBJECTS   { udpliteInDatagrams, udpliteNoPorts, udpliteInErrors,
                udpliteOutDatagrams, udpliteStatsDiscontinuityTime }
    STATUS     current
    DESCRIPTION
           "The group of objects providing for counters of
            basic UDP-like statistics."
    ::= { udpliteMIBGroups 1 }
</artwork></figure>

<figure><artwork>
udplitePartialCsumGroup OBJECT-GROUP  -- specific to UDP-Lite
OBJECTS   { udpliteInPartialCov,
            udpliteInBadChecksum,
            udpliteOutPartialCov  }
    STATUS     current
    DESCRIPTION
           "The group of objects providing for counters of
            transport-layer statistics exclusive to UDP-Lite."
    ::= { udpliteMIBGroups 2 }
</artwork></figure>

<figure><artwork>
udpliteEndpointGroup OBJECT-GROUP
    OBJECTS    { udpliteEndpointProcess, udpliteEndpointMinCoverage }
    STATUS     current
    DESCRIPTION
           "The group of objects providing for the IP version
            independent management of UDP-Lite 'endpoints'."
    ::= { udpliteMIBGroups 3 }
</artwork></figure>

<figure><artwork>
udpliteAppGroup OBJECT-GROUP
    OBJECTS    { udpliteEndpointViolCoverage }
    STATUS     current
    DESCRIPTION
           "The group of objects that provide application-level
            information for the configuration management of
            UDP-Lite 'endpoints'."
    ::= { udpliteMIBGroups 4 }

END
</artwork></figure>

</section> <!-- themib -->


<section anchor="secur" title="Security Considerations">

	<t>There are no management objects defined in this MIB module that have a MAX-ACCESS clause of read-write and/or read-create.
  	   So, if this MIB module is implemented correctly, then there is no risk that an intruder can alter or create any management
	   objects of this MIB module via direct SNMP SET operations.</t>

	<t>Some of the readable objects in this MIB module (i.e., objects with a MAX-ACCESS other than not-accessible) may be considered sensitive or
    	   vulnerable in some network environments.  It is thus important to control even GET and/or NOTIFY access to these objects and possibly to
	   even encrypt the values of these objects when sending them over the network via SNMP.  These are the tables and objects and their
	   sensitivity/vulnerability:</t>

	<t>Since UDP-Lite permits the delivery of (partially) corrupted data to an end host, the counters defined in this MIB module may be used to
	   infer information about the characteristics of the end-to-end path over which the datagrams are communicated.</t>

	<t>The indices of the udpliteEndpointTable contain information about the listeners on an entity.  In particular, the udpliteEndpointLocalPort and udpliteLocalPort objects in the indices can be used to identify what ports are open on the machine and which attacks are likely to succeed, without the attacker having to run a port scanner. The table also identifies the currently listening UDP-Lite ports. This could be used to infer the type of application associated with the port at the receiver. The udpliteEndpointMinCoverage provides information about the requirements of the transport service associated with a specific UDP-Lite port. This provides additional detail concerning the type of application associated with the port at the receiver.</t>


	<t>SNMP versions prior to SNMPv3 did not include adequate security. Even if the network itself is secure (for example by using IPsec), even then, there is no control as to who on the secure network is allowed to access and GET/SET (read/change/create/delete) the objects in this MIB module.</t>

	<t>It is RECOMMENDED that implementers consider the security features as provided by the SNMPv3 framework (see <xref target="RFC3410">RFC 3410</xref>, section 8), including full support for the SNMPv3 cryptographic mechanisms (for authentication and privacy).</t>

	<t>Further, deployment of SNMP versions prior to SNMPv3 is NOT RECOMMENDED. Instead, it is RECOMMENDED to deploy SNMPv3 and to enable cryptographic security. It is then a customer/operator responsibility to ensure that the SNMP entity giving access to an instance of this MIB
	module is properly configured to give access to the objects only to those principals (users) that have legitimate rights to indeed GET or SET
	(change/create/delete) them.</t>
</section>


<section anchor="iana" title="IANA Considerations">
	<t> The MIB module in this document uses the following IANA-assigned OBJECT IDENTIFIER
	    values recorded in the SMI Numbers registry:</t>
	<!-- texttable anchor="ianamib1" title="UDP-Lite Object Identifier" -->
	<texttable >
		<ttcol align='center'>Descriptor</ttcol>
		<ttcol align='center'>OBJECT IDENTIFIER value</ttcol>
		<c>udpliteMIB</c>
		<c>{ mib-2 XXX }</c>
	</texttable>

    	<note title="==> Note to the RFC Editor (to be removed prior to publication):">
	<t>The IANA is requested to assign a value for "XXX" under the 'mib-2' subtree and to record the assignment in the SMI Numbers registry.
	   When the assignment has been made, the RFC Editor is asked to replace "XXX" (here and in the MIB module) with the assigned value
	   and to remove this note.</t>
	</note>
</section> <!-- iana -->


<section anchor="acks" title="Acknowledgments">
	<t>The design of the MIB module presented in this document owes much to the format of the module presented in <xref target="RFC4113"/>.</t>
</section>

</middle>


<back>

<!-- ChangeLog -->
<note title="==> NOTE TO THE RFC EDITOR: PLEASE REMOVE THIS LOG PRIOR TO PUBLICATION">
	<t>Revision 00 of draft-ietf-tsvwg-udplite-mib was obsoleted by revision 01 due to a syntax error
  	   (quote transposed with full-stop) in the MIB module, which is corrected in rev-01. Thanks to
	   Magnus Westerlund for identifying this.</t>

        <t>Draft draft-ietf-tsvwg-udplite-mib-00 was published as a work item of tsvwg, June 2007.</t>

	<t>The following changelog lists the changes up to revision 02 (which became rev-00/01 of this
	   document) of the preceding individual draft submission draft-renker-tsvwg-udplite-mib.</t>
	    <t>Changes introduced in rev-01:</t>
<list style="symbols">

	<t>General:
	<list style ="empty">
        	<t>- incremented revision number to 01</t>
	        <t>- updated date to November</t>
        	<t>- rephrased abstract</t>
	</list></t>

	<t>Section 1:
	<list style ="empty">
	        <t>- rephrased the beginning of the second paragraph</t>
	</list></t>

	<t>Section 1.1:
	<list style ="empty">
	        <t>- rephrased some items</t>
        	<t>- added missing InBadChecksum heading</t>
	        <t>- updated text to refer to 64bit counters</t>
	</list></t>

	<t>Section 1.3:
	<list style ="empty">
	        <t>- removed 'x' in 'datagrams'</t>
        	<t>- rephrased for clarity</t>
	        <t>- Figure 1: missing bracketed text should be InErrors</t>
        	<t>- Figure 1: correction - NoPorts are not counted as InDatagrams</t>
	</list></t>

	<t>Section 2:
	<list style ="empty">
        	<t>- made the "Editor's Note" stand out more</t>
	</list></t>

	<t>Section 3 / MIB:
	<list style ="empty">
        	<t>- upgraded 11 32bit counters to 64bit</t>
	        <t>- moved from experimental to mib-2</t>
	        <t>- updated revision date</t>
	</list></t>

	<t>Section 4:
	<list style ="empty">
	        <t>- some minor changes</t>
	</list></t>

	<t>Section 5:
	<list style ="empty">
	        <t>- again highlighted the Editor's Note by using `==>' to make it consistent</t>
	</list></t>
</list>

	    <t>Changes introduced in rev-02:</t>
<list style="symbols">

	<t>General:
	<list style ="empty">
		<t>- updated month, date, and revision</t>
   		<t>- changed `transport layer entities' to `endpoints' in abstract</t>
	</list></t>

	<t>Section 1:
	<list style ="empty">
    		<t>- added missing comma after `option'</t>
	    	<t>- split explanatory clause after colon into standalone clause</t>
	</list></t>

	<t>Section 1.1:
	<list style ="empty">
		<t>- added a bullet list of standard counters known from the UDP MIB</t>
		<t>- added a note that NoPorts does not increment InErrors</t>
		<t>- removed description of InBadCoverage (no longer in MIB, see below)</t>
		<t>- qualified note with on 64-bit counters wrt `non-error' counters, reflecting
                     the change that all error counters have been changed to Counter32</t>
		<t>- Nit: changed `fairly recent' -> `more recent'</t>
		<t>- removed traces of InBadCoverage (see below)</t>
	</list></t>

  	<t>Section 1.3:
	<list style ="empty">
		<t>- corrected figure 1 (NoPorts was inconsistent with text; Rec Coverage was incorrectly
          	     labelled, it didn't show EndpointViolCoverage; slight reformatting)</t>
	        <t>- Nit: `wrong value' -> `a wrong value'</t>
		<t>- clarified that InBadChecksum can also serve as indicator of path bit error rate</t>
		<t>- Nit: `which' -> `that' in `a setting may then ...' and `A configuration error may ...'</t>
		<t>- removed traces of InBadCoverage (see below)</t>
	</list></t>

  	<t>Section 3 (the MIB):
	<list style ="empty">
		<t>- updated LAST-UPDATED and REVISION to match the revision date</t>
		<t>- updated the Copyright in DESCRIPTION from 2006 to 2007</t>
		<t>- converted all error counters to Counter32, following IETF input for rev-01</t>
		<t>- added a required IMPORTS statement for Counter32 to UDPLITE-MIB DEFINITIONS</t>
		<t>- demoted the following error counters from Counter64 to Counter32:
     	             udpliteNoPorts, udpliteInErrors, updliteInBadChecksum, udpliteEndpointViolCoverage</t>
		<t>- removed second, redundant MIB-2 number of udplite, following suggestion by Bill Fenner.</t>
		<t>- updated warning about maximum number of sub-identifiers in udpliteEndpointEntry,
		     to reflect new structure</t>
		<t>- udplite now comes as entry number 1 in the udpliteMIB tree</t>
		<t>- accordingly changed the identifier of udpliteMIBConformance to 2</t>
		<t>- updated all RFC editor notes with regard to the assignment of mib-2 identifier numbers
		     (now only a single one required)</t>
		<t>- updated section `IANA Considerations' with regard to this change</t>
		<t>- removed the InBadCoverage counter since it is subsumed by  InBadChecksum (see below)</t>
		<t>- updated the following identifier numbers for consistency after removal:
                     udpliteInBadChecksum (6 -> 5), udpliteOutDatagrams  (7 -> 6), udpliteOutPartialCov (8 -> 7),
                     udpliteEndpointTable (9 -> 8)</t>
		<t>- removed udpliteInBadCoverage from udplitePartialCsumGroup</t>
		<t>- extended the definition of InBadChecksum to include invalid checksum coverage</t>
		<t>- added RFC 3828 references for udpliteEndpointMinCoverage and udpliteEndpointViolCoverage</t>
		<t>- updated the description of udpliteEndpointInstance with respect to
                     draft-persson-v6ops-mib-issue-01.txt, section 3.2</t>
	</list></t>

     	<t>Section 7 (References):
	<list style ="empty">
   		<t>- RFC 4113 (UDP MIB) becomes informative, not normative</t>
	</list></t>

   	<t>Note on the removal of InBadCoverage:
           Following rev-01, this counter has been removed since - with the exception
           of obviously buggy UDP-Lite stacks - it is subsumed by InBadChecksum. An
           illegal checksum value which is not the cause of a buggy implementation will
	   in practically all cases lead to an incorrect checksum value, so that one
	   counter implies information inherent in the other.</t>
</list>
<t>====&gt; END OF NOTE TO THE RFC EDITOR &lt;====</t>
</note>
    <references title='Normative References'>
	     &rfc2119;

     <!--   NOTE:   The following references have been edited
                    since the XML files forget the older authors
		    which causes a conflict with the MIB boilerplate.
      -->
<reference anchor='RFC2578'>
<front>
<title abbrev='SMIv2'>Structure of Management Information Version 2 (SMIv2)</title>
<author initials='K.' surname='McCloghrie' fullname='Keith McCloghrie' >
<organization>Cisco Systems, Inc.</organization></author>
<author initials='D.' surname='Perkins' fullname='David Perkins' >
<organization>SNMPinfo</organization></author>
<author initials='J.' surname='Schoenwaelder' fullname='Juergen Schoenwaelder' >
<organization>TU Braunschweig</organization></author>
<author initials='J.' surname='Case'><organization>unknown</organization></author>
<author initials='M.' surname='Rose'><organization>unknown</organization></author>
<author initials='S.' surname='Waldbusser'><organization>unknown</organization></author>
<date year='1999' month='April' /></front>
<seriesInfo name='STD' value='58' />
<seriesInfo name='RFC' value='2578' />
<format type='TXT' octets='89712' target='ftp://ftp.isi.edu/in-notes/rfc2578.txt' />
</reference>

<reference anchor='RFC2579'>
<front>
<title>Textual Conventions for SMIv2</title>
<author initials='K.' surname='McCloghrie' fullname='Keith McCloghrie' >
<organization>Cisco Systems, Inc.</organization></author>
<author initials='D.' surname='Perkins' fullname='David Perkins' ></author>
<author initials='J.' surname='Schoenwaelder' fullname='Juergen Schoenwaelder' >
<organization>TU Braunschweig</organization></author>
<author initials='J.' surname='Case'><organization>unknown</organization></author>
<author initials='M.' surname='Rose'><organization>unknown</organization></author>
<author initials='S.' surname='Waldbusser'><organization>unknown</organization></author>
<date year='1999' month='April' /></front>
<seriesInfo name='STD' value='58' />
<seriesInfo name='RFC' value='2579' />
<format type='TXT' octets='59039' target='ftp://ftp.isi.edu/in-notes/rfc2579.txt' />
</reference>

<reference anchor='RFC2580'>
<front>
<title>Conformance Statements for SMIv2</title>
<author initials='K.' surname='McCloghrie' fullname='Keith McCloghrie'>
<organization>Cisco Systems, Inc.</organization></author>
<author initials='D.' surname='Perkins' fullname='David Perkins'>
<organization>SNMPinfo</organization></author>
<author initials='J.' surname='Schoenwaelder' fullname='Juergen Schoenwaelder'>
<organization>TU Braunschweig</organization></author>
<author initials='J.' surname='Case'><organization>unknown</organization></author>
<author initials='M.' surname='Rose'><organization>unknown</organization></author>
<author initials='S.' surname='Waldbusser'><organization>unknown</organization></author>
<date year='1999' month='April' /></front>
<seriesInfo name='STD' value='58' />
<seriesInfo name='RFC' value='2580' />
<format type='TXT' octets='54253' target='ftp://ftp.isi.edu/in-notes/rfc2580.txt' />
</reference>
	     &rfc3828;
	     &rfc4001;
    </references>
    <!-- END NORMATIVE REFERENCES -->
    <references title='Informative References'>
	&rfc0768;
	&rfc2287;
	&rfc2790;
	&rfc3410;
	&rfc4113;
	&rfc4340;
	<reference anchor='CASE'>
	<front>
	<title>Case Diagrams: A First Step to Diagrammed Management Information Bases</title>
	<author initials='J.D.' surname='Case' fullname='Jeffrey D. Case'>
	<organization>yes</organization></author>
	<author initials='C.' surname='Partridge' fullname='Craig Partridge'>
	<organization>yes</organization></author>
	<date year='1989' month='January' /></front>
	<seriesInfo name='ACM Computer Communications Review,' value='19(1):13-16'/>
	<format type='TXT'/>
</reference>

    </references>
    </back>
</rfc>
