<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "http://xml.resource.org/authoring/rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY SYSLOG-PROTO SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-syslog-protocol.xml">
<!ENTITY ietf-pkix-rfc3280bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-pkix-rfc3280bis.xml">
<!ENTITY ietf-tls-rfc4346-bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-tls-rfc4346-bis.xml">
<!ENTITY rfc3280 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3280.xml">
<!ENTITY rfc3766 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3766.xml">
<!ENTITY rfc5234 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY __reference.RFC.4346__ev62ungb SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4346.xml">
<!ENTITY __reference.RFC.2818__eyo4wecx SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY __reference.RFC.4033__eyo4xhtj SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4033.xml">
]>
<!-- may be omitted for very short documents -->
<?rfc toc="yes"?>
<?rfc sortrefs="no"?>
<!-- these two save paper: start new sections from the same page etc. -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<!-- other categories: bcp, exp, historic, std -->
<rfc category="std" docName="draft-ietf-syslog-transport-tls-12.txt"
     ipr="full3978">
  <front>
    <title>TLS Transport Mapping for Syslog</title>

   

    <author fullname="Fuyou Miao" initials="F." surname="Miao" role="editor">
      <organization>Huawei Technologies</organization>

      <address>
        <postal>
          <street>No. 3, Xinxi Rd</street>

          <street>Shangdi Information Industry Base</street>

          <city>Haidian District</city>

          <region>Beijing</region>

          <code>100085</code>

          <country>P. R. China</country>
        </postal>

        <phone>+86 10 8288 2008</phone>

        <email>miaofy@huawei.com</email>

        <uri>www.huawei.com</uri>
      </address>
    </author>

    <author fullname="Yuzhi Ma" initials="Y." surname="Ma" role="editor">
      <organization>Huawei Technologies</organization>

      <address>
        <postal>
          <street>No. 3, Xinxi Rd</street>

          <street>Shangdi Information Industry Base</street>

          <city>Haidian District</city>

          <region>Beijing</region>

          <code>100085</code>

          <country>P. R. China</country>
        </postal>

        <phone>+86 10 8288 2008</phone>

        <email>myz@huawei.com</email>

        <uri>www.huawei.com</uri>
      </address>
    </author>

     <author fullname="Joseph Salowey" initials="J" surname="Salowey" role="editor">
      <organization> Cisco Systems, Inc. </organization>
      <address>
	<postal>
	  <street>2901 3rd. Ave</street>
	  <city>Seattle</city>
	  <code>98121</code>
	  <region>WA</region>
	  <country>USA</country>
	</postal>
	<email> jsalowey@cisco.com </email>
      </address>
    </author>

    <date  month="May" year="2008" />

    <area>Security</area>

    <workgroup>Syslog Working Group</workgroup>

    <keyword>RFC</keyword>

    <keyword>Request for Comments</keyword>

    <keyword>Syslog TLS Transport Security</keyword>

    <keyword>Internet-Draft</keyword>

    <keyword>XML</keyword>

    <keyword>Extensible Markup Language</keyword>

    <abstract>
      <t>This document describes the use of Transport Layer Security (TLS) to
      provide a secure connection for the transport of syslog messages. This
      document describes the security threats to syslog and how TLS can be
      used to counter such threats.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>This document describes the use of Transport Layer Security (<xref
      target="I-D.ietf-tls-rfc4346-bis">TLS</xref>) to provide a secure connection for the
      transport of <xref target="I-D.ietf-syslog-protocol">syslog</xref>
      messages. This document describes the security threats to syslog and how
      TLS can be used to counter such threats.</t>

      <section title="Terminology">
        <t>The following definitions are used in this document: <list
            style="symbols">
            <t>An "originator" generates syslog content to be carried in a
            message.</t>

            <t>A "collector" gathers syslog content for further analysis.</t>

            <t>A "relay" forwards messages, accepting messages from
            originators or other relays, and sending them to collectors or
            other relays.</t>

            <t>A "transport sender" passes syslog messages to a specific
            transport protocol.</t>

            <t>A "transport receiver" takes syslog messages from a specific
            transport protocol.</t>

            <t>A "TLS client" is an application that can initiate a TLS
            connection by sending a Client Hello to a peer.</t>

            <t>A "TLS server" is an application that can receive a Client
            Hello from a peer and reply with a Server Hello.</t>
          </list></t>

        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>

    <section title="Security Requirements for Syslog" anchor="reqs">
      <t>syslog messages may transit several hops to arrive at the intended
      collector. Some intermediary networks may not be trusted by the
      originator, relay, or receiver because the network is in a
      different security domain or at a different security level from the
      originator, relay, or collector. Another security concern is that the
      originator, relay, or receiver itself is in an insecure network.</t>

      <t>There are several threats to be addressed for syslog security. The
      primary threats are: <list style="symbols">
          <t>Masquerade. An unauthorized transport sender may send messages to
          a legitimate transport receiver, or an unauthorized transport
          receiver tries to deceive a legitimate transport sender into sending
          syslog messages to it.</t>

          <t>Modification. An attacker between the transport sender and the
          transport receiver may modify an in-transit syslog message and then
          forward the message to the transport receiver. Such modification may
          make the transport receiver misunderstand the message or cause it to
          behave in undesirable ways.</t>

          <t>Disclosure. An unauthorized entity may examine the contents of
          the syslog messages, gaining unauthorized access to the information.
          Some data in syslog messages is sensitive and may be useful to an
          attacker, such as the password of an authorized administrator or
          user.</t>
        </list></t>

      <t>The secondary threat is: <list style="symbols">
          <t>Message stream modification. An attacker may delete one or more
          syslog message from a series of messages, replay a message, or alter
          the delivery sequence. The syslog protocol itself is not based on
          message order, but an event in a syslog message may relate
          semantically to events in other messages, so message ordering may be
          important to understanding a sequence of events.</t>
        </list></t>

      <t>The following threats are deemed to be of lesser importance for
      syslog, and are not addressed in this document: <list style="symbols">
          <t>Denial of Service</t>

          <t>Traffic Analysis</t>
        </list></t>
    </section>

    <section title="TLS to Secure Syslog">
      <t>TLS can be used as a secure transport to counter all the primary
      threats to syslog described in section 2: <list style="symbols">
          <t>Confidentiality to counter disclosure of the message
          contents;</t>

          <t>Integrity checking to counter modifications to a message on a
          hop-by-hop basis;</t>

          <t>Server or mutual authentication to counter masquerade.</t>
        </list>Note: This secure transport (i.e. TLS) only secures syslog in a
      hop-by-hop manner, the threat of end-to-end message stream modification
      is not addressed in this document.</t>
    </section>

    <section title="Protocol Elements">
      <section title="Port Assignment">
        <t>A syslog transport sender is always a TLS client and a transport
        receiver is always a TLS server.</t>

        <t>The TCP port NNN has been allocated as the default port for syslog
        over TLS, as defined in this document.</t>

        <t>Note to RFC Editor: please replace NNN with the IANA-assigned
        value, and remove this note.</t>
      </section>

      <section title="Initiation">
        <t>The transport sender should initiate a connection to the transport
        receiver and then send the TLS Client Hello to begin the TLS
        handshake. When the TLS handshake has finished the transport sender
        MAY then send the first syslog message.</t>

        <t>TLS typically uses <xref target="I-D.ietf-pkix-rfc3280bis">certificates</xref> to authenticate
        peers. Authentication and authorization of the TLS server
   (transport receiver) is described in <xref target="serverauth" />; authentication
   and authorization of the TLS client (transport sender) is described
   in <xref target="clientauth" />.</t>
        <section title="Server Authentication and Basic Authorization" anchor="serverauth">
          <t>[Editor's Note: Text referencing RFC2818 was removed, it is not clear that it is all the relevant to SYSLOG.] </t>

	  <t>[Editor's Note: Option for certificate fingerprint added]</t>
<t>The transport sender (TLS client) has three different options for
   authenticating and authorizing the transport receiver (TLS server).</t>
<list style="symbols">
<t>Certification path validation and subject name verification: the  
      client is configured with one or more trust anchors, and for 
      each transport receiver, the name to be matched against the  
      certificate for authorization. This option MUST be supported.</t>
<t>Certificate fingerprints: For each transport receiver, the client 
      is configured with a fingerprint of the server's certificate
      (which can be self-signed). This option MUST be supported.</t>
<t>No server authentication/authorization: The client is configured 
      to accept any certificate from the server. This option
      MAY be supported, but MUST NOT be enabled by default.</t>
</list>

<t>For certification path validation, client implementations MUST
   provide a mechanism for configuring one or more trust anchors, and
   MUST perform certification path validation as specified in
   <xref target="I-D.ietf-pkix-rfc3280bis" />. </t>

<t>For subject name verification, client implementations MUST support
   configuring, for each transport receiver, the name to be matched
   against the certificate.  This name may be the host name or IP
   address used when opening the TCP connection.  Implementations 
   MUST support checking the hostname against a SubjectAltName field 
   with a type of dNSName and SHOULD support checking hostname against 
   the Common Name portion of the Subject Distinguished Name.  Matching 
   for certificate credentials is performed using the matching rules 
   specified by <xref target="I-D.ietf-pkix-rfc3280bis"></xref>.  
   If more than one identity of a given type is presented in the certificate 
   (e.g., more than one dNSName name), a match in any one of the 
   set is considered acceptable.  Implementations MAY support 
   other authorization processes matching against other fields in a 
   certificate.  Implementations also MAY support wildcards to match 
   a range of values.  For example, names to be matched against a 
   certificate may contain the wildcard character * which is 
   considered to match any single domain name component or 
   component fragment. E.g., *.a.com matches foo.a.com but not
   bar.foo.a.com. f*.com matches foo.com but not bar.com. </t>

<t>[Editor's Note: How useful is it to match against IP address?  Do we expect deployments to issue certificates with IP addresses in them? Are IP addresses typically used in configuration? ]</t>

<t>To support certificate fingerprints, client implementations MUST
   support configuring, for each transport receiver, a fingerprint of
   the server certificate. See <xref target="certfinger" /> for details.</t>
          
   <t>If the certificate fails authorization or validity checks,
          clients SHOULD log the error in some form or another (see next
          paragraph), and SHOULD terminate the connection with a bad
          certificate error.</t>

          <t>The application developer must take some care to consider the
          case when, for whatever reason, there is a problem with
          authenticating the other end of the connection. Since this problem
          will prevent log messages from being transmitted, each device having
          this problem should use whatever means are available to inform the
          administrator of the problem. This may include producing an error
          code on a console, returning an error to a user (if there is one),
          or writing a file to disk, being mindful that such writes should be
          rate limited in the case of attacks.</t>

       </section>

        <section title="Client Authentication and Authorization" anchor="clientauth">

<t>The transport receiver (TLS server) has three different options for
   authenticating and authorizing the transport sender (TLS client).</t>
 <t>[Editor's note: At least one one authorization mechanism should be mandatory to implement to protect against the threat of masquerade listed above.]</t>
<list style="symbols">
<t>Certification path validation and subject name verification:
      the server is configured with one or more trust anchors,
      and a set of names (or wildcard patterns) to be matched 
      against the certificates.  This option MUST be supported.</t>

<t>Certificate fingerprints: The server is configured with the 
      fingerprints of client certificates. This option MUST be
      supported.</t>

<t>No client authentication or authorization (or authorization
      based only on connection source IP address): This option MAY 
      be supported, but MUST NOT be enabled by default.</t>
</list>

<t>Certification path validation and subject name verification work
   as described in Section <xref target="clientauth" /> above.  A server may allow wild card names to match against the certificate which will result in a large number of clients with valid certificates to be authorized. Servers SHOULD provide a mechanism to log the identity and issuer of an accepted certificate to enable messages received from the client to be associated with an authenticated entity. </t>

<t> To support certificate fingerprints, server implementations MUST
   support configuring with a list of fingerprints of authorized
   certificates. See Section <xref target="certfinger" /> for details.</t>

   <t>[Editor's note: Removed section on using the same name for more that one host as it seems implementation specific. Removed section on discussion on who issues the certificate since it is out of scope.] </t>

  

	  
        </section>
<section title="Certificate Fingerprints" anchor="certfinger">
<t> Both client and server implementations MUST make the certificate
   fingerprint available through a management interface. If no other
   certificate is configured, both client and server implementations
   MUST support generating a key pair and self-signed certificate.</t>
<t>The RECOMMENDED mechanism to generate a fingerprint is to take the SHA-1 hash of the certificate and convert the 20 byte result into 20 colon separated, hexadecimal bytes, each represented by 2 uppercase ASCII characters.  When a fingerprint value is displayed or configured the algorithm used to generate the fingerprint SHOULD be indicated.</t>
</section>
        <section title="Cryptographic Level">
          <t>Syslog applications SHOULD be implemented in a manner that
          permits administrators, as a matter of local policy, to select the
          cryptographic level and authentication options they desire.</t>

          <t>TLS permits the resumption of an earlier TLS session or the use
          of another active session when a new session is requested, in order
          to save the expense of another full TLS handshake. The security
          parameters of the resumed session are reused for the requested
          session. The security parameters SHOULD be checked against the
          security requirement of the requested session to make sure that the
          resumed session provides proper security.</t>
        </section>
      </section>

      <section title="Sending data">
        <t>All syslog messages MUST be sent as TLS "application data". It is
        possible that multiple syslog messages be contained in one TLS record,
        or that a syslog message be transferred in multiple TLS records. The
        application data is defined with the following <xref
        target="RFC5234">ABNF</xref> expression:</t>

        <t>APPLICATION-DATA = 1*SYSLOG-FRAME</t>

        <t>SYSLOG-FRAME = MSG-LEN SP SYSLOG-MSG</t>

        <t>MSG-LEN = NONZERO-DIGIT *DIGIT</t>

        <t>SP = %d32</t>

        <t>NONZERO-DIGIT = %d49-57</t>

        <t>DIGIT = %d48 / NONZERO-DIGIT</t>

        <t>SYSLOG-MSG is defined in <xref
        target="I-D.ietf-syslog-protocol">syslog</xref> protocol.</t>

        <section title="Message Length">
          <t>The message length is the octet count of the SYSLOG-MSG in the
          SYSLOG-FRAME. A transport receiver MUST use the message length to
          delimit a syslog message. There is no upper limit for a message
          length per se. However, in order to establish a baseline for
          interoperability, this specification requires that a transport
          receiver MUST be able to process messages with a length up to and
          including 2048 octets. Transport receiver SHOULD be able to process
          messages with lengths up to and including 8192 octets.</t>
        </section>
      </section>

      <section title="Closure">
        <t>A TLS client MUST close the associated TLS connection if the
        connection is not expected to deliver any syslog messages later. It
        MUST send a TLS close_notify alert before closing the connection. A
        client MAY choose to not wait for the server's close_notify alert and
        simply close the connection, thus generating an incomplete close on
        the server side. Once the server gets a close_notify from the client,
        it MUST reply with a close_notify unless it becomes aware that the
        connection has already been closed by the client (e.g., the closure
        was indicated by TCP).</t>

        <t>When no data is received from a connection for a long time (where
        the application decides what "long" means), a server MAY close the
        connection. The server MUST attempt to initiate an exchange of
        close_notify alerts with the client before closing the connection.
        Servers that are unprepared to receive any more data MAY close the
        connection after sending the close_notify alert, thus generating an
        incomplete close on the client side. When the client has received the
        close_notify alert from the server and still has pending data to send,
        it SHOULD send the pending data before sending the close_notify
        alert.</t>
      </section>
    </section>

    <section title="Security Considerations">
      <section title="Authentication and Certificates">
        <t>In security sensitive environments, it is recommended that mutual
        authentication be deployed as that will prevent masquerade attacks,
        modification of the messages, and disclosure of the contents of the
        messages. Mutual authentication means the TLS client and server are
        provisioned with necessary trust anchors and must perform certificate
        validation.</t>
        
	<t>[Editor's Note: added text on self-signed certificate validation and removed text on caching.]</t>

	<t> The use of self-signed certificates with certificate 
        fingerprint authorization lists provides more protection 
        from masquerade and man-in-the-middle attacks than forgoing 
        certificate validation and authorization. </t>

<t>[Editor's Note: It may be useful to suggest some operational practice that facilitates the deployment of self-signed certificates.  For example, in order to initially populate an authorization list a client or server can display a certificate finger-print through a user interface to an administrator to be authorized and added to the authorization list.]</t>

	<t>If the client or server choose to forgo certificate validation then the threats listed in <xref target="reqs" /> may not be appropriately mitigated.  Malicious entities may masquerade as the client or server, or they may insert themselves as a man-in-the middle of the conversation.  This may result in modification and disclosure of data.  While this may be acceptable in a security insensitive environment, it is recommended that server and client are configured with certificates and validate received certificate against provisioned trust anchors and authorization lists.  </t> 


        <t>TLS authentication and the distribution of keys is based on
        certificates and asymmetric cryptography. This makes TLS transport
        more expensive than non-TLS plain transport. An attacker may
        initialize many TLS connections to a receiver as a denial of service
        attack. Since a receiver may act upon received data, for syslog over
        TLS, it is recommended that the server authenticate the client to
        ensure that information received is authentic.</t>
      </section>

      <section title="Cipher Suites">
        <t>This specification specifies the following cipher suite required
        for all compliant implementation for minimum interoperability
        purposes:</t>

        <t>TLS_RSA_WITH_AES_128_CBC_SHA</t>

        <t>Operators MAY choose to disable cipher suites for TLS that are
        regarded as too weak for the environment in which this specification
        is being used, especially older cipher suites. This MAY lead to a
        reduction of interoperability. It is likely that, in time, the cipher
        suite specified here will become subject to attack and the use of it
        will too be deprecated. This allows the future update of the
        specification to change mandatory-to-implement cipher requirement for
        interoperability. This also allows the TLS community to change its
        recommendations, and operators to follow those recommendations.</t>

        <t>The implementers and deployers should be aware of the strengths of
        the public keys algorithm in the suite for exchanging symmetric keys,
        which is elaborated in <xref target="RFC3766">BCP86</xref>. The
        implementers and deployers should also be aware of the latest TLS and
        other IETF cryptography standards including BCP86.</t>
      </section>
    </section>

    <section title="IANA Considerations">
      <section title="Port Number">
        <t>IANA is requested to assign a TCP port number in the range 1..1023
        in the http://www.iana.org/assignments/port-numbers registry which
        will be the default port for syslog over TLS, as defined in this
        document.</t>
      </section>
    </section>

    <section title="Acknowledgments">
      <t>Authors appreciate Eric Rescorla, Rainer Gerhards, Tom Petch, Anton
      Okmianski, Balazs Scheidler, Bert Wijnen, and Chris Lonvick for their
      effort on issues resolving discussion. Authors would also like to
      appreciate Balazs Scheidler, Tom Petch and other persons for their input
      on security threats of syslog. The authors would like to acknowledge
      David Harrington for his detailed reviews of the content and grammar of
      the document and Pasi Eronen for his contributions to certificate 
      authentication and authorization sections.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &rfc2119;

      &SYSLOG-PROTO;

      &ietf-pkix-rfc3280bis;

     

      &rfc5234;

      &ietf-tls-rfc4346-bis;
    </references>

    <references title="Informative References">
      &rfc3766;
    </references>
  </back>
</rfc>
