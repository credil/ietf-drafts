<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
        <!ENTITY rfc2119 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
        <!ENTITY rfc3688 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3688.xml">
        <!ENTITY rfc5486 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5486.xml">
         <!ENTITY rfc5246 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
        <!ENTITY rfc2617 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml">
]>


<rfc category="std" docName="draft-ietf-drinks-sppp-over-soap-01"  ipr="trust200902">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>

<front>
        <title abbrev="draft-ietf-drinks-sppp-over-soap">SPPP Over SOAP and HTTP</title>

        <author initials='K.C.' surname="Cartwright" fullname='Kenneth Cartwright'>
                <organization>TNS</organization>
                <address>
                        <postal>
                                <street>1939 Roland Clarke Place</street>
                                <city>Reston</city> <region>VA</region> 
                                <code>20191</code>
                                <country>USA</country>
                        </postal>
                        <email>kcartwright@tnsi.com</email>
                </address>
        </author>

        <date year="2010" month="October"/>

    <area>Real-time Applications and Infrastructure Area</area>

    <workgroup>DRINKS</workgroup>
    
    <abstract>
      <t>The Session Peering Provisioning Protocol (SPPP) is an XML protocol 
	  that exists to enable the provisioning of session establishment data into  
	  Session Data Registries or SIP Service Provider data stores.  Sending XML 
	  data structures over Simple Object Access Protocol (SOAP) and HTTP(s) is 
	  a widely used, de-facto standard for messaging between elements of 
	  provisioning systems.  Therefore the combination of SOAP and HTTP(s) as 
	  a transport for SPPP is a natural fit.  The obvious benefits include 
	  leveraging existing industry expertise, leveraging existing standards, 
	  and a higher probability that existing provisioning systems can be more 
	  easily integrated with this protocol.  This document describes the 
	  specification for transporting SPPP XML structures over SOAP and HTTP(s).
	  </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>SPPP, defined in <xref target="I-D.draft-ietf-drinks-spprov-03"/>,
      is best supported by a transport and messaging infrastructure 
	  that is connection oriented, request-response oriented, easily secured, 
	  supports propagation through firewalls in a standard fashion, and that 
	  is easily integrated into back-office systems.  This is the type of 
	  environment that inter-organization provisioning transactions typically 
	  take place.  Given the current state of industry practice and technologies, 
	  SOAP and HTTP(s) are ideal for this type of environment. This document 
	  describes the specification for transporting SPPP XML structures over 
	  SOAP and HTTP(s).</t>
      <t>The specification in this document for transporting SPPP XML structures 
	  over SOAP and HTTP(s) is primarily comprised of five subjects:  (1) a 
	  description of any applicable SOAP features, (2) any applicable HTTP 
	  features, (3) authentication and session management, (4) security 
	  considerations, and perhaps most importantly, (5) the Web Services 
	  Description Language (WSDL) definition.</t>
	</section>
  
    <section anchor="Terminology" title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref target="RFC2119"/>.</t>
    </section>

    <section anchor="SOAP Features and SPPP" title="SOAP Features and SPPP">
      <t>The list of SOAP features that are explicitly used and required for SPPP are limited.  Most SOAP features are not necessary for SPPP.  SPPP primarily uses SOAP simply as a standard message envelope technology.  The SOAP message envelope is comprised of the SOAP header and body.  As described in the SOAP specifications, the SOAP header can contain optional, application specific, information about the message.  The SOAP body contains the SPPP message itself, whose structure is defined by the combination of one of the WSDL operations defined in this document and the SPPP XML data structures defined in the SPPP protocol document.  SPPP does not rely on any data elements in the SOAP header.  All relevant data elements are defined in the SPPP XML schema described in <xref target="I-D.draft-ietf-drinks-spprov-03"/> and the SPPP WSDL specification described in this document.</t>
	  <t>WSDL is a widely standardized and adopted technology for defining the top-level structures of the messages that are transported within the body of a SOAP message.  The WSDL definition for the SPPP SOAP messages is defined later in this document, which imports by reference the XML data types contained in the SPPP schema.  The IANA registry where the SPPP schema resides is described in The IETF XML Registry <xref target="RFC3688"/>.</t>
	  <t>There are multiple structural styles that SOAP WSDL allows.  But the best practice for this type of application is what is often referred to as the Document Literal Wrapped style of designing SOAP WSDL.  This style is generally regarded as an optimal approach that enhances maintainability, comprehension, portability, and, to a certain extent, performance.  Figure 4 illustrates this high level technical structure.</t> 
	  
	 <figure anchor="Technical Structure of the SPPP SOAP Messages" 
	 title="Technical Structure of the SPPP SOAP Messages">
        <artwork align="left"><![CDATA[
                               +---------------+
                        +------|    SOAP       |------+
                       |       |  Operation    |      |
              Contains |      +----------------+      | Contains
                       |          Example:            |
                       V         submitRequest        V
               +--------------+           +-------------+
               |SOAP Request  |           |SOAP Response|
       Example:|  Message     |           |   Message   | Example:
 spppUpdate    | (Operation   |           | (Operation  |spppUpdate
    RequestMsg |   Input)     |           |  Output)    |   ResponseMsg
               +--------------+           +-------------+
                        |                       |
               Contains |                       | Contains
                        |                       |
                        V                       V
              +---------------+         +---------------+
      Example:|    Wrapped    |         |  Wrapped      | Example:
  spppUpdate  |Request Object |         |Response Object| spppUpdate
      Request +---------------+         +---------------+     Response
                        |                       |
               Contains |                       | Contains
                        |                       |
                        V                       V
              +---------------+        +---------------------+
      Example:|     SPPP      |        |       SPPP          | Example:
addDestGrpRqst|   XML Types   |        |     XML Types       | cmnRspns
              +---------------+        +---------------------+
        ]]></artwork>
     </figure>
	  
	  <t>The SOAP operations supported by SPPP are normatively defined later in this 
	  document.  Each SOAP operation defines a request/input message and a 
	  response/output message.  Each such request and response message then 
	  contains a single object that wraps the SPPP XML data types that comprise 
	  the inputs and the outputs, respectively, of the SOAP operation.</t>
	  <t>SOAP faults are not used by the SPPP SOAP mapping.  All SPPP success 
	  and error responses are specified within the SPPP protocol specification 
	  <xref target="I-D.draft-ietf-drinks-spprov-03"/>.</t>
	  <t>SOAP 1.1 [SOAP] or higher and WSDL1.1 [WSDL] or higher SHOULD be used.</t>
	</section>

    <section anchor="HTTP(s) Features and SPPP" title="HTTP(s) Features and SPPP">
      <t>SOAP is not tied to HTTP(s), however, for reasons described in the 
	  introduction, HTTP(s) is a good choice as the transport mechanism for 
	  the SPPP SOAP messages.  HTTP 1.1 includes the &quot;persistent connection&quot; 
	  feature, which allows multiple HTTP request/response pairs to be transported 
	  across a single HTTP connection.  This is an important performance 
	  optimization feature, particularly when the connections is an HTTPS 
	  connection where the relatively time consuming SSL handshake has occurred.  
	  Persistent connections SHOULD be used for the SPPP HTTP connections.</t> 
	  <t>HTTP 1.1 [HTTP] or higher SHOULD be used.</t>
   </section>

    <section anchor="Authentication and Session Management" title="Authentication and Session Management">
      
      <t>All SOAP and HTTP SPPP Clients and Servers MUST support Transport Layer Security (TLS) as defined in <xref target="RFC5246"/> as the secure transport mechanism.  All SOAP ESPP Clients and Servers MUST use HTTP Digest Authentication as defined in <xref target="RFC2617"/> as the secure authentication mechanism.  As a result, the communication session is established as a result of the initial HTTP connection setup, the digest authentication, handshake, and the TLS handshake.  When the HTTP connection is broken down, the communication session ends.</t>
    </section>

    <section anchor="SPPP SOAP WSDL Definition" title="SPPP SOAP WSDL Definition">
      <t>The SPPP WSDL is defined below.  The SPPP WSDL is what is commonly referred to as _Generic WSDL_.  It is generic in the sense that there is not a specific WSDL operation defined for each business action that is supported by the SPPP protocol.  There is a single WSDL update operation called submitUpdateRqst, and a single WSDL query operation called submitQueryRqst.  The submitUpdateRqst operation takes as input an spppUpdateRequestMsg object and returns as output an spppUpdateResponseMsg object.  These objects _wrap_ the spppUpdateRequest and spppUpdateResponse objects respectively.  These two object data structures are described in the SPPP protocol specification <xref target="I-D.draft-ietf-drinks-spprov-03"/>.  And finally, the spppSOAPBinding in the WSDL defines the binding style as _document_ and the encoding as _literal_.  It is this combination of _wrapped_ input and output data structures, _document_ binding style, and _literal_ encoding that characterized the Document Literal Wrapped style of WSDL specificaitons.</t>
<t>The advantage of generic WSDL is that the WSDL is more succinct, much simpler, and therfore more easily maintained.  As new types of protocol objects and actions are added into or removed from the SPPP protocol, the WSDL does not need to change.  This approach is made possible by the fact that the SPP XML data types and supported actions are defined in the SPPP XML schema, not in the WSDL.  As a result the supported actions do not need to be re-defined here inside the SPPP SOAP WSDL.</t>
<t> TBD Add information about versioning and namespaces for the WSDL. </t>
      <t>
	  	 <figure anchor="WSDL" title="WSDL">
        <artwork align="left"><![CDATA[

     <?xml version="1.0" encoding="UTF-8"?>
     <wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
        xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"     
        xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xmlns:spppb="urn:ietf:params:xml:ns:sppp:base:1" 
        xmlns:sppps="urn:ietf:params:xml:ns:sppp:soap:1" 
        targetNamespace="urn:ietf:params:xml:ns:sppp:soap:1" 
        xsi:schemaLocation="spppbase.xsd">
     <wsdl:types>
        <xsd:schema targetNamespace="urn:ietf:params:xml:ns:sppp:soap:1" 
           xmlns:sppps="urn:ietf:params:xml:ns:sppp:soap:1" 
           xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
           xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
           xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">
           <xsd:import namespace="urn:ietf:params:xml:ns:sppp:base:1"/>
	    </xsd:schema>
     </wsdl:types>

     <wsdl:message name="spppUpdateRequestMsg">
        <wsdl:part name="rqst" element="spppb:spppUpdateRequest"/>
     </wsdl:message>

     <wsdl:message name="spppUpdateResponseMsg">
        <wsdl:part name="rspns" element="spppb:spppUpdateResponse"/>
     </wsdl:message>

     <wsdl:message name="spppQueryRequestMsg">
        <wsdl:part name="rqst" element="spppb:spppQueryRequest"/>
     </wsdl:message>

     <wsdl:message name="spppQueryResponseMsg">
        <wsdl:part name="rspns" element="spppb:spppQueryResponse"/>
     </wsdl:message>

     <wsdl:message name="spppServerStatusRequestMsg">
        <wsdl:part name="rqst" element="spppb:spppServerStatusRequest"/>
     </wsdl:message>

     <wsdl:message name="spppServerStatusResponseMsg">
        <wsdl:part name="rspns" 
           element="spppb:spppServerStatusResponse"/>
     </wsdl:message>


     <wsdl:portType name="spppPortType">
        <wsdl:operation name="submitUpdateRqst">
           <wsdl:input message="spppUpdateRequestMsg"/>
           <wsdl:output message="spppUpdateResponseMsg"/>
        </wsdl:operation>
        <wsdl:operation name="submitQueryRqst">
           <wsdl:input message="spppQueryRequestMsg"/>
           <wsdl:output message="spppQueryResponseMsg"/>
        </wsdl:operation>
        <wsdl:operation name="submitServerStatusRqst">
           <wsdl:input message="spppServerStatusRequestMsg"/>
           <wsdl:output message="spppServerStatusResponseMsg"/>
        </wsdl:operation>
     </wsdl:portType>

    <wsdl:binding name="spppSoapBinding" type="spppPortType">
        <soap:binding style="document" 
                      transport="http://schemas.xmlsoap.org/soap/http"/>
        <wsdl:operation name="submitUpdateRqst">
           <soap:operation soapAction="submitUpdateRqst" 
              style="document"/>
           <wsdl:input>
               <soap:body use="literal"/>
           </wsdl:input>
           <wsdl:output>
               <soap:body use="literal"/>
           </wsdl:output>
        </wsdl:operation>
        
        <wsdl:operation name="submitQueryRqst">
           <soap:operation soapAction="submitQueryRqst" 
              style="document"/>
           <wsdl:input> 
               <soap:body use="literal"/>
           </wsdl:input>
           <wsdl:output>
               <soap:body use="literal"/>
           </wsdl:output>
        </wsdl:operation>
        
        <wsdl:operation name="submitServerStatusRqst">
           <soap:operation soapAction="submitServerStatusRqst" 
              style="document"/>
           <wsdl:input> 
               <soap:body use="literal"/>
           </wsdl:input>
           <wsdl:output>
               <soap:body use="literal"/>
           </wsdl:output>
        </wsdl:operation>

    </wsdl:binding>

    <wsdl:service name="spppService">
        <wsdl:port name="spppPort" binding="spppSoapBinding">
            <soap:address location="REPLACE_WITH_ACTUAL_URL"/>
        </wsdl:port>
    </wsdl:service>

</wsdl:definitions>
       ]]></artwork>
     </figure></t>
    </section>



    <section anchor="SPPP SOAP Message Examples" title="SPPP SOAP Message Examples">
      <t>TBD</t>
    </section>
	
    <section anchor="Security Considerations" title="Security Considerations">
      <t>TBD</t>
    </section>
	
    <section anchor="IANA Considerations" title="IANA Considerations">
      <t>This document uses URNs to describe XML namespaces and XML schemas
   conforming to a registry mechanism described in <xref target="RFC3688"/>.
    </t>
   <t>URI assignments are requested:  TBD</t>
    </section>
	
	<section anchor="Acknowledgements" title="Acknowledgements">
	   <t>
		This document is a result of various discussions held by the DRINKS design team, which is comprised of the following individuals, in no specific order: Syed Ali (NeuStar), Sumanth Channabasappa (Cable Labs), David Schwartz (XConnect), Jean-Francois Mule (CableLabs), Kenneth Cartwright (TNS, Inc.), Manjul Maharishi (TNS, Inc.), Alexander Mayrhofer (enum.at GmbH).
		</t>

    </section>

  </middle>

  <back>
    <references title="Normative References">
                &rfc2119;
                &rfc3688;
                &rfc5246;
                &rfc2617;
	  	        <reference anchor='I-D.draft-ietf-drinks-spprov-03'>
                        <front>
                                <title>Session Peering Provisioning Protocol </title>
									<author initials='J-F.M.' surname="Mule" fullname='Jean-Francois Mule'>
         							       <organization>CableLabs </organization>
         							       <address>
         							               <postal>
         							                       <street>858 Coal Creek Circle</street>
         							                       <city>Louisville</city> <region>CO</region> 
         							                       <code>80027</code>
         							                       <country>USA</country>
         							               </postal>
         							               <email>jfm@cablelabs.com</email>
         							       </address>
        							</author>
                                <date month='March' year='2009' />
                        </front>
                        <seriesInfo name="Internet-Draft" value="draft-ietf-drinks-spprov-03"/>
                        <format type='HTML' target='http://tools.ietf.org/html/draft-ietf-drinks-spprov-03' />
                </reference>

    </references>

    <references title="Informational References">
                &rfc5486;
                <reference anchor='I-D.drinks-usecases-requirements-00'>
                        <front>
                                <title>DRINKS Use cases and Protocol Requirements</title>
                                        <author initials='S.C.' surname="Channabasappa" fullname='Sumanth Channabasappa'>
                                                <organization>CableLabs</organization>
                                                <address>
                                                        <postal>
                                                                <street>858 Coal Creek Circle</street>
                                                                <city>Louisville</city> <region>CO</region> 
                                                                <code>80027</code>
                                                                <country>USA</country>
                                                        </postal>
                                                        <email>sumanth@cablelabs.com</email>
                                                </address>
                                        </author>
                                <date month='March' year='2009' />
                        </front>
                        <seriesInfo name="Internet-Draft" value="draft-ietf-drinks-usecases-requirements-00"/>
                        <format type='HTML' target='http://tools.ietf.org/html/draft-ietf-drinks-usecases-requirements' />
                </reference>
                
    </references>
    
  </back>
  
</rfc>
