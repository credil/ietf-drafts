<?xml version='1.0' encoding="UTF-8" ?>
<?rfc notedraftinprogress='yes'?>
<?rfc rfcprocack="yes"?>
<?rfc toc="yes"?>
<rfc ipr='trust200902' docName='draft-ietf-hybi-thewebsocketprotocol-02' category='std'>
  <front>
    <title>The WebSocket protocol</title>
    <author initials='I.F.' surname='Fette' fullname='Ian Fette'>
      <organization>Google, Inc.</organization>
      <address>
        <email>ifette+ietf@google.com</email>
        <uri>http://www.ianfette.com/</uri>
      </address>
    </author>
    <date day="24" month="September" year="2010"/>
    <area>Applications</area>
    <workgroup>HyBi Working Group</workgroup>
    <abstract>
      <t>The WebSocket protocol enables two-way communication between a user agent running untrusted code running in a controlled environment to a remote host that has opted-in to communications from that code. The security model used for this is the Origin-based security model commonly used by Web browsers. The protocol consists of an initial handshake followed by basic message framing, layered over TCP. The goal of this technology is to provide a mechanism for browser-based applications that need two-way communication with servers that does not rely on opening multiple HTTP connections (e.g. using XMLHttpRequest or &lt;iframe&gt;s and long polling).</t>
      <t>Please send feedback to the hybi@ietf.org mailing list.</t>
    </abstract>
    <note title="Note">
      <t>This draft is meant to reflect changes in direction in the HyBi working group. There is not yet consensus on everything in this draft. Specifically, details about the framing are still under discussion, however this draft is much closer to what the group is discussing than the previous draft. There have also been proposals to change the handshake, so the handshake is also not in a final form.</t>
    </note>
  </front>
  <middle>
    <section title='Introduction'>
      <section title='Background'>
        <t>
          <spanx style='emph'>This section is non-normative.</spanx>
        </t>
        <t>Historically, creating an instant messenger chat client as a Web application has required an abuse of HTTP to poll the server for updates while sending upstream notifications as distinct HTTP calls.</t>
        <t>This results in a variety of problems:
          <list style='symbols'>
            <t>The server is forced to use a number of different underlying TCP connections for each client: one for sending information to the client, and a new one for each incoming message.</t>
            <t>The wire protocol has a high overhead, with each client-to-server message having an HTTP header.</t>
            <t>The client-side script is forced to maintain a mapping from the outgoing connections to the incoming connection to track replies.</t>
          </list>
        </t>
        <t>
          A simpler solution would be to use a single TCP connection for traffic in both directions. This is what the WebSocket protocol provides. Combined with the WebSocket API, it provides an alternative to HTTP polling for two-way communication from a Web page to a remote server. <xref target='WSAPI'/>
        </t>
        <t>The same technique can be used for a variety of Web applications: games, stock tickers, multiuser applications with simultaneous editing, user interfaces exposing server-side services in real time, etc.</t>
      </section>
      <section title='Protocol overview'>
        <t>
          <spanx style='emph'>This section is non-normative.</spanx>
        </t>
        <t>The protocol has two parts: a handshake, and then the data transfer.</t>
        <t>
          The handshake from the client looks as follows:<vspace blankLines='1'/></t>
        <figure>
          <artwork>
     GET /demo HTTP/1.1
     Host: example.com
     Connection: Upgrade
     Sec-WebSocket-Key2: 12998 5 Y3 1  .P00
     Sec-WebSocket-Protocol: sample
     Upgrade: WebSocket
     Sec-WebSocket-Key1: 4 @1  46546xW%0l 1 5
     Origin: http://example.com

     ^n:ds[4U
          </artwork>
        </figure>
        <t>The handshake from the server looks as follows:<vspace blankLines='1'/></t>
        <figure>
          <artwork>
     HTTP/1.1 101 WebSocket Protocol Handshake
     Upgrade: WebSocket
     Connection: Upgrade
     Sec-WebSocket-Origin: http://example.com
     Sec-WebSocket-Location: ws://example.com/demo
     Sec-WebSocket-Protocol: sample

     8jKS&apos;y:G*Co,Wxa-
          </artwork>
        </figure>
        <t>The leading line from the client follows the Request-Line format. The leading line from the server follows the Status-Line format. The Request-Line and Status-Line productions are defined in the HTTP specification.</t>
        <t>
          After the leading line in both cases come an unordered ASCII case-insensitive set of fields, one per line, that each match the following non-normative ABNF: <xref target='RFC5234'/>
          <vspace blankLines='1'/>
        </t>
        <figure>
          <artwork>
 field         = 1*name-char colon [ space ] *any-char cr lf
 colon         = %x003A ; U+003A COLON (:)
 space         = %x0020 ; U+0020 SPACE
 cr            = %x000D ; U+000D CARRIAGE RETURN (CR)
 lf            = %x000A ; U+000A LINE FEED (LF)
 name-char     = %x0000-0009
                 / %x000B-000C
                 / %x000E-0039
                 / %x003B-10FFFF
                 ; a Unicode character other than
                 ; U+000A LINE FEED (LF),
                 ; U+000D CARRIAGE RETURN (CR),
                 ; or U+003A COLON (:)
 any-char      = %x0000-0009 / %x000B-000C / %x000E-10FFFF
                 ; a Unicode character other than
                 ; U+000A LINE FEED (LF)
                 ; or U+000D CARRIAGE RETURN (CR)
          </artwork>
        </figure>
        <t>NOTE: The character set for the above ABNF is Unicode. The fields themselves are encoded as UTF-8.</t>
        <t>Lines that don&apos;t match the above production cause the connection to be aborted.</t>
        <t>Finally, after the last field, the client sends 10 bytes starting with 0x0D 0x0A and followed by 8 random bytes, part of a challenge, and the server sends 18 bytes starting with 0x0D 0x0A and followed by 16 bytes consisting of a challenge response. The details of this challenge and other parts of the handshake are described in the next section.</t>
        <t><vspace blankLines='1'/></t>
        <t>Once the client and server have both sent their handshakes, and if the handshake was successful, then the data transfer part starts. This is a two-way communication channel where each side can, independently from the other, send data at will.</t>
        <t>Clients and servers, after a successful handshake, transfer data back and forth in conceptual units referred to in this specification as &quot;messages&quot;. A message is a complete unit of data at an application level, with the expectation that many or most applications implementing this protocol (such as web user agents) provide APIs in terms of sending and receiving messages. On the network layer, a message may be represented as one or more frames.</t>
        <t>Data is sent on the wire in the form of frames that have an associated type. Broadly speaking, there are types for textual data, which is interpreted as UTF-8 text, binary data (whose interpretation is left up to the application), and control frames, which are not intended to carry data for the application, but instead for protocol-level signalling, such as to signal that the connection should be closed.</t>
        <t>The WebSocket protocol uses this framing so that specifications that use the WebSocket protocol can expose such connections using an event-based mechanism instead of requiring users of those specifications to implement buffering and piecing together of messages manually.</t>
        <t>To close the connection cleanly, a control frame is sent from one peer to ask that the other peer close the connection. Details are specified in <xref target='closing_connection'/>.</t>
        <t>The protocol is designed to support other frame types in future. Currently only four frame types are defined -- continuation (used for fragmented messages), control frames, text frames, and binary data frames. Eight frame types are reserved for future use, and four frame types are reserved for private use.</t>
        <t>
          This wire format for the data transfer part is described by the ABNF given in detail in <xref target='framing' />. A high level overview of the framing is given in the following figure. <xref target='RFC5234'/>
          <vspace blankLines='1'/>
        </t>
        <figure>
          <artwork>
   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-------+-+-------------+-------------------------------+
  |M|R|R|R| opcode|R| Payload len |    Extended payload length    |
  |O|S|S|S|  (4)  |S|     (7)     |             (16/63)           |
  |R|V|V|V|       |V|             |   (if payload len==126/127)   |
  |E|1|2|3|       |4|             |                               |
  +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
  |     Extended payload length continued, if payload len == 127  |
  + - - - - - - - - - - - - - - - +-------------------------------+
  |                               |         Extension data        |
  +-------------------------------+ - - - - - - - - - - - - - - - +
  :                                                               :
  +---------------------------------------------------------------+
  :                       Application data                        :
  +---------------------------------------------------------------+
          </artwork>
        </figure>
        <t>
          <list style="hanging">
            <t hangText="MORE:">1 bit
              <vspace blankLines="1"/>
              Indicates more fragments follow in the current message
            </t>
            <t hangText="RSV1, RSV2, RSV3, RSV4:">1 bit each
              <vspace blankLines="1"/>
              Must be 0 unless an extension is negotiated which defines
              meanings for non-zero values
            </t>
            <t hangText="Opcode:">4 bits
              <vspace blankLines="1"/>
              Defines the interpretation of the payload data
            </t>
            <t hangText="Payload length:">7 bits
              <vspace blankLines="1"/>
              The length of the payload: if 0-125, that is the payload length.
              If 126, the following 2 bytes interpreted as a 16 bit unsigned
              integer are the payload length.  If 127, the following 8 bytes
              interpreted as a 64-bit unsigned integer (the high bit must be 0)
              are the payload length. The payload length is the length of the
              Extension data + the length of the Application Data. The length
              of the Extension data may be zero, in which case the Payload
              length is the length of the Application data.
            </t>
            <t hangText="Extension data:">n bytes 
              <vspace blankLines="1"/>
              Only present if an extension is negotiated during the handshake
              which defines it.  If present, it is included in the total payload
              length.
            </t>
            <t hangText="Application data:">n bytes
              <vspace blankLines="1"/>
              Arbitrary application data, taking up the remainder of the frame
              after any extension data. The length of the Application data is
              equal to the payload length minus the length of the Extension
              data.
            </t>
          </list>
        </t>
      </section>
      <section title='Opening handshake'>
        <t>
          <spanx style='emph'>This section is non-normative.</spanx>
        </t>
        <t>The opening handshake is intended to be compatible with HTTP-based server-side software, so that a single port can be used by both HTTP clients talking to that server and WebSocket clients talking to that server. To this end, the WebSocket client&apos;s handshake appears to HTTP servers to be a regular GET request with an Upgrade offer:<vspace blankLines='1'/></t>
        <figure>
          <artwork>
     GET / HTTP/1.1
     Upgrade: WebSocket
     Connection: Upgrade
          </artwork>
        </figure>
        <t>Fields in the handshake are sent by the client in a random order; the order is not meaningful.</t>
        <t>Additional fields are used to select options in the WebSocket protocol. The only options available in this version are the subprotocol selector, |Sec-WebSocket-Protocol|, and |Cookie|, which can used for sending cookies to the server (e.g. as an authentication mechanism). The |Sec-WebSocket-Protocol| field takes an arbitrary string:<vspace blankLines='1'/></t>
        <figure>
          <artwork>     Sec-WebSocket-Protocol: chat</artwork>
        </figure>
        <t>This field indicates the subprotocol (the application-level protocol layered over the WebSocket protocol) that the client intends to use. The server echoes this field in its handshake to indicate that it supports that subprotocol.</t>
        <t>The other fields in the handshake are all security-related. The |Host| field is used to protect against DNS rebinding attacks and to allow multiple domains to be served from one IP address.<vspace blankLines='1'/></t>
        <figure>
          <artwork>     Host: example.com</artwork>
        </figure>
        <t>The server includes the hostname in the |Sec-WebSocket-Location| field of its handshake, so that both the client and the server can verify that they agree on which host is in use.</t>
        <t>The |Origin| field is used to protect against unauthorized cross-origin use of a WebSocket server by scripts using the |WebSocket| API in a Web browser. The server specifies which origin it is willing to receive requests from by including a |Sec-WebSocket-Origin| field with that origin. If multiple origins are authorized, the server echoes the value in the |Origin| field of the client&apos;s handshake.<vspace blankLines='1'/></t>
        <figure>
          <artwork>     Origin: http://example.com</artwork>
        </figure>
        <t>Finally, the server has to prove to the client that it received the client&apos;s WebSocket handshake, so that the server doesn&apos;t accept connections that are not WebSocket connections. This prevents an attacker from tricking a WebSocket server by sending it carefully-crafted packets using |XMLHttpRequest| or a |form| submission.</t>
        <t>To prove that the handshake was received, the server has to take three pieces of information and combine them to form a response. The first two pieces of information come from the |Sec-WebSocket-Key1| and |Sec-WebSocket-Key2| fields in the client handshake:<vspace blankLines='1'/></t>
        <figure>
          <artwork>
     Sec-WebSocket-Key1: 18x 6]8vM;54 *(5:  {   U1]8  z [  8
     Sec-WebSocket-Key2: 1_ tx7X d  &lt;  nw  334J702) 7]o}` 0
          </artwork>
        </figure>
        <t>For each of these fields, the server has to take the digits from the value to obtain a number (in this case 1868545188 and 1733470270 respectively), then divide that number by the number of spaces characters in the value (in this case 12 and 10) to obtain a 32-bit number (155712099 and 173347027). These two resulting numbers are then used in the server handshake, as described below.</t>
        <t>
          The counting of spaces is intended to make it impossible to smuggle this field into the resource name; making this even harder is the presence of <spanx style='emph'>two</spanx> such fields, and the use of a newline as the only reliable indicator that the end of the key has been reached. The use of random characters interspersed with the spaces and the numbers ensures that the implementor actually looks for spaces and newlines, instead of being treating any character like a space, which would make it again easy to smuggle the fields into the path and trick the server. Finally, <spanx style='emph'>dividing</spanx> by this number of spaces is intended to make sure that even the most naïve of implementations will check for spaces, since if ther server does not verify that there are some spaces, the server will try to divide by zero, which is usually fatal (a correct handshake will always have at least one space).
        </t>
        <t>The third piece of information is given after the fields, in the last eight bytes of the handshake, expressed here as they would be seen if interpreted as UTF-8:<vspace blankLines='1'/></t>
        <figure>
          <artwork>     Tm[K T2u</artwork>
        </figure>
        <t>The concatenation of the number obtained from processing the |Sec-WebSocket-Key1| field, expressed as a big-endian 32 bit number, the number obtained from processing the |Sec-WebSocket-Key2| field, again expressed as a big-endian 32 bit number, and finally the eight bytes at the end of the handshake, form a 128 bit string whose MD5 sum is then used by the server to prove that it read the handshake.</t>
        <t>
          <vspace blankLines='1'/>
        </t>
        <t>The handshake from the server is much simpler than the client handshake. The first line is an HTTP Status-Line, with the status code 101 (the HTTP version and reason phrase aren&apos;t important):<vspace blankLines='1'/></t>
        <figure>
          <artwork>     HTTP/1.1 101 WebSocket Protocol Handshake</artwork>
        </figure>
        <t>The fields follow. Two of the fields are just for compatibility with HTTP:<vspace blankLines='1'/></t>
        <figure>
          <artwork>
     Upgrade: WebSocket
     Connection: Upgrade
          </artwork>
        </figure>
        <t>Two of the fields are part of the security model described above, echoing the origin and stating the exact host, port, resource name, and whether the connection is expected to be encrypted:<vspace blankLines='1'/></t>
        <figure>
          <artwork>
     Sec-WebSocket-Origin: http://example.com
     Sec-WebSocket-Location: ws://example.com/
          </artwork>
        </figure>
        <t>These fields are checked by the Web browser when it is acting as a |WebSocket| client for scripted pages. A server that only handles one origin and only serves one resource can therefore just return hard-coded values and does not need to parse the client&apos;s handshake to verify the correctness of the values.</t>
        <t>Option fields can also be included. In this version of the protocol, the main option field is |Sec-WebSocket-Protocol|, which indicates the subprotocol that the server speaks. Web browsers verify that the server included the same value as was specified in the |WebSocket| constructor, so a server that speaks multiple subprotocols has to make sure it selects one based on the client&apos;s handshake and specifies the right one in its handshake.<vspace blankLines='1'/></t>
        <figure>
          <artwork>     Sec-WebSocket-Protocol: chat</artwork>
        </figure>
        <t>
          The server can also set cookie-related option fields to <spanx style='emph'>set</spanx> cookies, as in HTTP.
        </t>
        <t>After the fields, the server sends the aforementioned MD5 sum, a 16 byte (128 bit) value, shown here as if interpreted as UTF-8:<vspace blankLines='1'/></t>
        <figure>
          <artwork>     fQJ,fN/4F4!~K~MH</artwork>
        </figure>
        <t>This value depends on what the client sends, as described above. If it doesn&apos;t match what the client is expecting, the client would disconnect.</t>
        <t>Having part of the handshake appear after the fields ensures that both the server and the client verify that the connection is not being interrupted by an HTTP intermediary such as a man-in-the-middle cache or proxy.</t>
      </section>
      <section title='Closing handshake'>
        <t>
          <spanx style='emph'>This section is non-normative.</spanx>
        </t>
        <t>The closing handshake is far simpler than the opening handshake.</t>
        <t>
          Either peer can send a control frame with data containing a specified control sequence to begin the closing handshake. Upon receiving such a frame, the other peer sends an identical frame in acknowledgement, if it hasn&apos;t already sent one. Upon receiving <spanx style='emph'>that</spanx> control frame, the first peer then closes the connection, safe in the knowledge that no further data is forthcoming.
        </t>
        <t>After sending a control frame indicating the connection should be closed, a peer does not send any further data; after receiving a control frame frame indicating the connection should be closed, a peer discards any further data received.</t>
        <t>It is safe for both peers to initiate this handshake simultaneously.</t>
        <t>The closing handshake is intended to replace the TCP closing handshake (FIN/ACK), on the basis that the TCP closing handshake is not always reliable end-to-end, especially in the presence of man-in-the-middle proxies and other intermediaries.</t>
      </section>
      <section title='Design philosophy'>
        <t>
          <spanx style='emph'>This section is non-normative.</spanx>
        </t>
        <t>The WebSocket protocol is designed on the principle that there should be minimal framing (the only framing that exists is to make the protocol frame-based instead of stream-based, and to support a distinction between Unicode text and binary frames). It is expected that metadata would be layered on top of WebSocket by the application layer, in the same way that metadata is layered on top of TCP by the application layer (HTTP).</t>
        <t>Conceptually, WebSocket is really just a layer on top of TCP that adds a Web &quot;origin&quot;-based security model for browsers; adds an addressing and protocol naming mechanism to support multiple services on one port and multiple host names on one IP address; layers a framing mechanism on top of TCP to get back to the IP packet mechanism that TCP is built on, but without length limits; and reimplements the closing handshake in-band. Other than that, it adds nothing. Basically it is intended to be as close to just exposing raw TCP to script as possible given the constraints of the Web. It&apos;s also designed in such a way that its servers can share a port with HTTP servers, by having its handshake be a valid HTTP Upgrade handshake also.</t>
        <t>The protocol is intended to be extensible; future versions will likely introduce a mechanism to compress data and might support sending binary data.</t>
      </section>
      <section title='Security model'>
        <t>
          <spanx style='emph'>This section is non-normative.</spanx>
        </t>
        <t>The WebSocket protocol uses the origin model used by Web browsers to restrict which Web pages can contact a WebSocket server when the WebSocket protocol is used from a Web page. Naturally, when the WebSocket protocol is used by a dedicated client directly (i.e. not from a Web page through a Web browser), the origin model is not useful, as the client can provide any arbitrary origin string.</t>
        <t>This protocol is intended to fail to establish a connection with servers of pre-existing protocols like SMTP or HTTP, while allowing HTTP servers to opt-in to supporting this protocol if desired. This is achieved by having a strict and elaborate handshake, and by limiting the data that can be inserted into the connection before the handshake is finished (thus limiting how much the server can be influenced).</t>
        <t>It is similarly intended to fail to establish a connection when data from other protocols, especially HTTP, is sent to a WebSocket server, for example as might happen if an HTML |form| were submitted to a WebSocket server. This is primarily achieved by requiring that the server prove that it read the handshake, which it can only do if the handshake contains the appropriate parts which themselves can only be sent by a WebSocket handshake; in particular, fields starting with |Sec-| cannot be set by an attacker from a Web browser, even when using |XMLHttpRequest|.</t>
      </section>
      <section title='Relationship to TCP and HTTP'>
        <t>
          <spanx style='emph'>This section is non-normative.</spanx>
        </t>
        <t>The WebSocket protocol is an independent TCP-based protocol. Its only relationship to HTTP is that its handshake is interpreted by HTTP servers as an Upgrade request.</t>
        <t>Based on the expert recommendation of the IANA, the WebSocket protocol by default uses port 80 for regular WebSocket connections and port 443 for WebSocket connections tunneled over TLS.</t>
      </section>
      <section title='Establishing a connection'>
        <t>
          <spanx style='emph'>This section is non-normative.</spanx>
        </t>
        <t>There are several options for establishing a WebSocket connection.</t>
        <t>On the face of it, the simplest method would seem to be to use port 80 to get a direct connection to a WebSocket server. Port 80 traffic, however, will often be intercepted by man-in-the-middle HTTP proxies, which can lead to the connection failing to be established.</t>
        <t>The most reliable method, therefore, is to use TLS encryption and port 443 to connect directly to a WebSocket server. This has the advantage of being more secure; however, TLS encryption can be computationally expensive.</t>
        <t>When a connection is to be made to a port that is shared by an HTTP server (a situation that is quite likely to occur with traffic to ports 80 and 443), the connection will appear to the HTTP server to be a regular GET request with an Upgrade offer. In relatively simple setups with just one IP address and a single server for all traffic to a single hostname, this might allow a practical way for systems based on the WebSocket protocol to be deployed. In more elaborate setups (e.g. with load balancers and multiple servers), a dedicated set of hosts for WebSocket connections separate from the HTTP servers is probably easier to manage.</t>
      </section>
      <section title='Subprotocols using the WebSocket protocol'>
        <t>
          <spanx style='emph'>This section is non-normative.</spanx>
        </t>
        <t>The client can request that the server use a specific subprotocol by including the |Sec-Websocket-Protocol| field in its handshake. If it is specified, the server needs to include the same field and value in its response for the connection to be established.</t>
        <t>These subprotocol names do not need to be registered, but if a subprotocol is intended to be implemented by multiple independent WebSocket servers, potential clashes with the names of subprotocols defined independently can be avoided by using names that contain the domain name of the subprotocol&apos;s originator. For example, if Example Corporation were to create a Chat subprotocol to be implemented by many servers around the Web, they could name it &quot;chat.example.com&quot;. If the Example Organisation called their competing subprotocol &quot;example.org&apos;s chat protocol&quot;, then the two subprotocols could be implemented by servers simultaneously, with the server dynamically selecting which subprotocol to use based on the value sent by the client.</t>
        <t>Subprotocols can be versioned in backwards-incompatible ways by changing the subprotocol name, eg. going from &quot;bookings.example.net&quot; to &quot;v2.bookings.example.net&quot;. These subprotocols would be considered completely separate by WebSocket clients. Backwards-compatible versioning can be implemented by reusing the same subprotocol string but carefully designing the actual subprotocol to support this kind of extensibility.</t>
      </section>
    </section>
    <section title='Conformance requirements'>
      <t>All diagrams, examples, and notes in this specification are non-normative, as are all sections explicitly marked non-normative. Everything else in this specification is normative.</t>
      <t>
        The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;MAY&quot;, and &quot;OPTIONAL&quot; in the normative parts of this document are to be interpreted as described in RFC2119. For readability, these words do not appear in all uppercase letters in this specification. <!-- would like to replace this with upper case versions. This is just confusing. -ifette 8/29/10 --><xref target='RFC2119'/>
      </t>
      <t>Requirements phrased in the imperative as part of algorithms (such as &quot;strip any leading space characters&quot; or &quot;return false and abort these steps&quot;) are to be interpreted with the meaning of the key word (&quot;must&quot;, &quot;should&quot;, &quot;may&quot;, etc) used in introducing the algorithm.</t>
      <t>Conformance requirements phrased as algorithms or specific steps may be implemented in any manner, so long as the end result is equivalent. (In particular, the algorithms defined in this specification are intended to be easy to follow, and not intended to be performant.)</t>
      <t>Implementations may impose implementation-specific limits on otherwise unconstrained inputs, e.g. to prevent denial of service attacks, to guard against running out of memory, or to work around platform-specific limitations.</t>
      <t>The conformance classes defined by this specification are user agents and servers.</t>
      <section title='Terminology'>
        <t>
          <spanx style='strong'>Converting a string to ASCII lowercase</spanx> means replacing all characters in the range U+0041 to U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z) with the corresponding characters in the range U+0061 to U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z).
        </t>
        <t>
          Comparing two strings in an <spanx style='strong'>ASCII case-insensitive</spanx> manner means comparing them exactly, code point for code point, except that the characters in the range U+0041 to U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z) and the corresponding characters in the range U+0061 to U+007A (i.e. LATIN SMALL LETTER A to LATIN SMALL LETTER Z) are considered to also match.
        </t>
        <t>
          The term &quot;URL&quot; is used in this section in a manner consistent with the terminology used in HTML, namely, to denote a string that might or might not be a valid URI or IRI and to which certain error handling behaviors will be applied when the string is parsed. <xref target='HTML'/>
        </t>
        <t>
          When an implementation is required to <spanx style='emph'>send</spanx> data as part of the WebSocket protocol, the implementation may delay the actual transmission arbitrarily, e.g. buffering data so as to send fewer IP packets.
        </t>
      </section>
    </section>
    <section title='WebSocket URLs'>
      <section title='Parsing WebSocket URLs' anchor='parsing_ws_urls'>
        <t>
          The steps to <spanx style='strong'>parse a WebSocket URL&apos;s components</spanx> from a string /url/ are as follows. These steps return either a /host/, a /port/, a /resource name/, and a /secure/ flag, or they fail.

          <list style='numbers'>
            <t>
              If the /url/ string is not an absolute URL, then fail this algorithm. <xref target='WEBADDRESSES'/>
            </t>
            <t>
              Resolve the /url/ string using the resolve a Web address algorithm defined by the Web addresses specification, with the URL character encoding set to UTF-8. <xref target='WEBADDRESSES'/> <xref target='RFC3629'/>
              <vspace blankLines='1'/>
              NOTE: It doesn&apos;t matter what it is resolved relative to, since we already know it is an absolute URL at this point.
            </t>
            <t>If /url/ does not have a &lt;scheme&gt; component whose value, when converted to ASCII lowercase, is either &quot;ws&quot; or &quot;wss&quot;, then fail this algorithm.</t>
            <t>If /url/ has a &lt;fragment&gt; component, then fail this algorithm.</t>
            <t>If the &lt;scheme&gt; component of /url/ is &quot;ws&quot;, set /secure/ to false; otherwise, the &lt;scheme&gt; component is &quot;wss&quot;, set /secure/ to true.</t>
            <t>Let /host/ be the value of the &lt;host&gt; component of /url/, converted to ASCII lowercase.</t>
            <t>If /url/ has a &lt;port&gt; component, then let /port/ be that component&apos;s value; otherwise, there is no explicit /port/.</t>
            <t>If there is no explicit /port/, then: if /secure/ is false, let /port/ be 80, otherwise let /port/ be 443.</t>
            <t>Let /resource name/ be the value of the &lt;path&gt; component (which might be empty) of /url/.</t>
            <t>If /resource name/ is the empty string, set it to a single character U+002F SOLIDUS (/).</t>
            <t>If /url/ has a &lt;query&gt; component, then append a single U+003F QUESTION MARK character (?) to /resource name/, followed by the value of the &lt;query&gt; component.</t>
            <t>Return /host/, /port/, /resource name/, and /secure/.</t>
          </list>
        </t>
      </section>
      <section title='Constructing WebSocket URLs'>
        <t>
          The steps to <spanx style='strong'>construct a WebSocket URL</spanx> from a /host/, a /port/, a /resource name/, and a /secure/ flag, are as follows:
          <list style='numbers'>
            <t>Let /url/ be the empty string.</t>
            <t>If the /secure/ flag is false, then append the string &quot;ws://&quot; to /url/. Otherwise, append the string &quot;wss://&quot; to /url/.</t>
            <t>Append /host/ to /url/.</t>
            <t>If the /secure/ flag is false and port is not 80, or if the /secure/ flag is true and port is not 443, then append the string &quot;:&quot; followed by /port/ to /url/.</t>
            <t>Append /resource name/ to /url/.</t>
            <t>Return /url/.</t>
          </list>
        </t>
      </section>
      <section title='Valid WebSocket URLs' anchor='valid_ws_urls'>
        <t>
          For a WebSocket URL to be considered valid, the following conditions MUST hold.
          <list style='symbols'>
            <t>The /host/ must be ASCII-only (i.e. it must have been punycode-encoded already if necessary, and MUST NOT contain any characters above U+007E).</t>
            <t>The /origin/ must not contain characters in the range U+0041 to U+005A (i.e. LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z).</t>
            <t>
              The /resource name/ string must be a non-empty string of characters in the range U+0021 to U+007E that starts with a U+002F SOLIDUS character (/).
            </t>
            <t>The various strings in /protocols/ MUST all be non-empty strings with characters in the range U+0021 to U+007E and MUST all be unique.
            </t>
          </list>
        </t>
        <t>Any WebSocket URLs not meeting the above criteria are considered invalid, and a client MUST NOT attempt to make a connection to an invalid WebSocket URL. A client SHOULD attempt to parse a URL obtained from any external source (such as a web site or a user) using the steps specified in <xref target='parsing_ws_urls'/> to obtain a valid WebSocket URL, but MUST NOT attempt to connect with such an unparsed URL, and instead only use the parsed version and only if that version is considered valid by the criteria above.
        </t>
      </section>
    </section>
    <section title='Data Framing' anchor='framing'>
      <section title='Overview'>
        <t>The base framing protocol is deliberately kept simple so that simple
        implementations may ignore advanced features.  In the absence of
        extensions negotiated during the opening handshake (<xref
        target='handshake'/>), all reserved bits must be 0 and no reserved
        opcode values may be used.
        </t>
      </section>
      <section title='Base Framing Protocol'>
        <t>The base framing protocol is defined by the following ABNF <xref target='RFC5234'/>:</t>
        <figure height="" suppress-title="false" width="" alt="" title="" align="left">
        <artwork type="abnf" height="" name="" width="" alt="" align="left" xml:space="preserve"><![CDATA[
   ws-frame               = frame-more
                            frame-rsv1
                            frame-rsv2
                            frame-rsv3
                            frame-opcode
                            frame-rsv4
                            frame-length
                            frame-extension
                            application-data;

   frame-more             = %x0 ; final frame of message
                          / %x1 ; more frames of this message follow

   frame-rsv1             = %x0 ; 1 bit, must be 0

   frame-rsv2             = %x0 ; 1 bit, must be 0

   frame-rsv3             = %x0 ; 1 bit, must be 0

   frame-opcode           = %x0 ; continuation frame
                          / %x1 ; connection close
                          / %x2 ; ping
                          / %x3 ; pong
                          / %x4 ; text frame
                          / %x5 ; binary frame
                          / %x6-F ; reserved

   frame-rsv4             = %x0 ; 1 bit, must be 0

   frame-length           = %x00-7D
                          / %x7E frame-length-16
                          / %x7F frame-length-63

   frame-length-16        = %x0000-FFFF

   frame-length-63        = %x0000000000000000-7FFFFFFFFFFFFFFF

   frame-extension        = *( %x00-FF ) ; to be defined later

   application-data       = *( %x00-FF )
]]></artwork></figure>
	<t>
	</t>
      </section>
      <section title="Fragmentation">
        <t>The following rules apply to fragmentation:
          <list style="symbols">
            <t>An unfragmented message consists of a single frame with the MORE
            bit clear and an opcode other than 0.</t>
            <t>A fragmented message consists of a single frame with the MORE
            bit set and an opcode other than 0, followed by zero or more frames
            with the MORE bit set and the opcode set to 0, and terminated by
            a single frame with the MORE bit clear and an opcode of 0.  Its
            content is the concatenation of the application data from each of
            those frames in order.</t>
            <t><spanx style="emph">Note: There is an open question as to whether
            control frames be
            interjected in the middle of a fragmented message.  If so, it must be decided
            whether they
            be fragmented (which would require keeping a stack of "in-progress"
            messages).</spanx></t>
            <t>A sender MAY arbitrarily fragment a single message (which allows
            generation of dynamic content without having to buffer the data in
            order to count it).</t>
            <t>Clients and servers MUST support receiving both fragmented and
			unfragmented messages. Messages sent as a single fragment may be
			fragmented by intermediaries as per the item below,
			and as such both sides must support
			receiving fragmented messages.</t>
            <t>An intermediary MAY fragment a message arbitrarily, except
            that it MUST NOT fragment or otherwise modify any message with any
            reserved bits set or using any reserved opcode, unless it observed
            the negotiation of an extension which it understands and which
            defines the interpretation of those values.</t>
          </list>
        </t>
      </section>
      <section title="Control Frames">
        <t>The Close (0x01), Ping (0x02), and Pong (0x03) frames are contol
        frames -- they do not supply data to the ultimate endpoint, but
        instead are used to carry out tasks related to the WebSocket connection
        itself. </t>
        <t>A receiver MUST take the following action upon receiving control
        frames:
          <list style="hanging">
            <t hangText="Close:">
              <vspace blankLines='1'/>
              Upon receipt of a close frame, an endpoint SHOULD send a Close
              frame to the remote recipient, if it has not already done so,
              deliver a close event to the application if necessary, and then
              close the WebSocket.</t>
            <t hangText="Ping">
              <vspace blankLines='1'/>
              Upon receipt of a Ping message, an endpoint SHOULD send a Pong
              response as soon as is practical.  The Pong response MUST contain
              the payload provided in the Ping message, though an implementation
              MAY truncate the message at an implementation-defined size which
              MUST be at least 8 <spanx style='emph'>(TBD)</spanx> bytes.
              <vspace blankLines='1'/>
              Ping frames MAY be sent as a keep-alive mechanism, but if so the
              interval SHOULD be configurable.  </t>
            <t hangText="Pong">
              <vspace blankLines='1'/>
              If a Pong message is received without a matching Ping message being
              sent, an endpoint MUST drop the connection.  Otherwise, the
              endpoint SHOULD update any liveness timer it may have for the
              connection.</t>
          </list>
        </t>
      </section>
      <section title="Data Frames">
        <t>
          All frame types not listed above are data frames, which transport
          application-layer data.  The opcode determines the interpretation of
          the application data:
          <list style="hanging">
            <t hangText="Text">
              <vspace blankLines='1'/>
              The payload data is text data encoded as UTF-8.
            </t>
            <t hangText="Binary">
              <vspace blankLines='1'/>
              The payload data is arbitrary binary data whose interpretation
              is solely up to the application layer.
            </t>
          </list>
        </t>
        <t>Additional data frame types will be defined in extensions or in a subsequent version of the protocol.</t>
      </section>
      <section title="Examples">
        <t>
          <spanx style='emph'>This section is non-normative.</spanx>
        </t>
        <t>
          <list style="symbols">
            <t>
              A single-frame text message
              <list style="symbols">
                <t>0x04 0x05 "Hello"</t>
              </list>
            </t>
            <t>
              A fragmented text message
              <list style="symbols">
                <t>0x84 0x03 "Hel"</t>
                <t>0x00 0x02 "lo"</t>
              </list>
            </t>
            <t>
              Ping request and response
              <list style="symbols">
                <t>0x02 0x05 "Hello"</t>
                <t>0x03 0x05 "Hello"</t>
              </list>
            </t>
            <t>
              256 bytes binary message in a single frame
              <list style="symbols">
                <t>0x05 0x7E 0x0100 [256 bytes of binary data]</t>
              </list>
            </t>
            <t>
              64KiB binary message in a single frame
              <list style="symbols">
                <t>0x05 0x7F 0x0000000000010000 [65536 bytes of binary data]</t>
              </list>
            </t>
          </list>
        </t>
      </section>
      <section title="Extensibility">
        <t>Extensions will be defined which extend the base protocol, but only
        if their use is negotiated during the handshake.  The following
        mechanisms will be used for extension:
          <list style="symbols">
            <t>Extension data may be placed in the payload before the
            application data.</t>
            <t>Reserved bits can be allocated for per-frame needs.</t>
            <t>Reserved opcode values can be defined.</t>
            <t>Reserved bits can be allocated to the opcode field if more
            opcode values are needed.</t>
            <t>A reserved bit or an "extension" opcode can be defined which
            allocates additional bits out of the payload area to define larger
            opcodes or more per-frame bits.</t>
          </list>
        </t>
      </section>
    </section>
    <section title='Opening Handshake' anchor='handshake'>
      <section title='Client Requirements'>
        <t>
          User agents running in controlled environments, e.g. browsers on
          mobile handsets tied to specific carriers, may offload the
          management of the connection to another agent on the network. In
          such a situation, the user agent for the purposes of conformance
          is considered to include both the handset software and any such
          agents.
        </t>
        <t>
          When the user agent is to <spanx style='strong'>establish a WebSocket connection</spanx> to a host /host/, on a port /port/, from an origin whose ASCII serialization is /origin/, with a flag /secure/, with a string giving a /resource name/, with a (possibly empty) list of strings giving the /protocols/, and optionally with a /defer cookies/ flag, it must run the following steps. <xref target='ORIGIN'/>
        </t>
        <t>
          <list style='numbers'>
            <t>
              Verify that the WebSocket URL and its components are valid according to <xref target='valid_ws_urls'/>. If any of the requirements are not met, the client MUST fail the WebSocket connection and abort these steps.
            </t>
            <t>
              If the user agent already has a WebSocket connection to the remote host (IP address) identified by /host/, even if known by another name, wait until that connection has been established or for that connection to have failed. If multiple connections to the same IP address are attempted simultaneously, the user agent must serialize them so that there is no more than one connection at a time running through the following steps.
              <vspace blankLines='1'/>
			  If the user agent cannot determine the IP address of the remote
              host (for example because all communication is being done through
              a proxy server that performs DNS queries itself), then the user
              agent must assume for the purposes of this step that each host
              name refers to a distinct remote host, but should instead limit
              the total number of simultaneous connections that are not
			  established to a reasonably low number (e.g., in a Web browser, to
			  the number of tabs the user has open).
			  <vspace blankLines='1'/>
              NOTE: This makes it harder for a script to perform a denial of
			  service attack by just opening a large number of WebSocket
			  connections to a remote host. A server can further
              reduce the load on itself when attacked by making use of this by
              pausing before closing the connection, as that will reduce the
              rate at which the client reconnects.
              <vspace blankLines='1'/>
              NOTE: There is no limit to the number of established WebSocket connections a user agent can have with a single remote host. Servers can refuse to connect users with an excessive number of connections, or disconnect resource-hogging users when suffering high load.
            </t>
            <t>
              <spanx style='emph'>Connect</spanx>: If the user agent is configured to use a proxy when using the WebSocket protocol to connect to host /host/ and/or port /port/, then connect to that proxy and ask it to open a TCP connection to the host given by /host/ and the port given by /port/.<list style='empty'>
                <t>
                  EXAMPLE: For example, if the user agent uses an HTTP proxy for all traffic, then if it was to try to connect to port 80 on server example.com, it might send the following lines to the proxy server:<vspace blankLines='1'/>
                  <figure>
                    <artwork>
           CONNECT example.com:80 HTTP/1.1
           Host: example.com
                    </artwork>
                  </figure>
                </t>
                <t>
                  If there was a password, the connection might look like:<vspace blankLines='1'/>
                  <figure>
                    <artwork>
           CONNECT example.com:80 HTTP/1.1
           Host: example.com
           Proxy-authorization: Basic ZWRuYW1vZGU6bm9jYXBlcyE=
                    </artwork>
                  </figure>
                </t>
              </list>
              Otherwise, if the user agent is not configured to use a proxy, then open a TCP connection to the host given by /host/ and the port given by /port/.
              <vspace blankLines='1'/>
              NOTE: Implementations that do not expose explicit UI for selecting a proxy for WebSocket connections separate from other proxies are encouraged to use a SOCKS proxy for WebSocket connections, if available, or failing that, to prefer the proxy configured for HTTPS connections over the proxy configured for HTTP connections.
              <vspace blankLines='1'/>
              For the purpose of proxy autoconfiguration scripts, the URL to pass the function must be constructed from /host/, /port/, /resource name/, and the /secure/ flag using the steps to construct a WebSocket URL.
              <vspace blankLines='1'/>
              NOTE: The WebSocket protocol can be identified in proxy autoconfiguration scripts from the scheme (&quot;ws:&quot; for unencrypted connections and &quot;wss:&quot; for encrypted connections).
            </t>
            <t>If the connection could not be opened, then fail the WebSocket connection and abort these steps.</t>
            <t>
              If /secure/ is true, perform a TLS handshake over the connection. If this fails (e.g. the server&apos;s certificate could not be verified), then fail the WebSocket connection and abort these steps. Otherwise, all further communication on this channel must run through the encrypted tunnel. <xref target='RFC2246'/>
              <vspace blankLines='1'/>
              User agents must use the Server Name Indication extension in the TLS handshake. <xref target='RFC4366'/>
            </t>
            <t>
              Send the UTF-8 string &quot;GET&quot; followed by a UTF-8-encoded U+0020 SPACE character to the remote side (the server).
              <vspace blankLines='1'/>
              Send the /resource name/ value, encoded as UTF-8.
              <vspace blankLines='1'/>
              Send another UTF-8-encoded U+0020 SPACE character, followed by the UTF-8 string &quot;HTTP/1.1&quot;, followed by a UTF-8-encoded U+000D CARRIAGE RETURN U+000A LINE FEED character pair (CRLF).
            </t>
            <t>Let /fields/ be an empty list of strings.</t>
            <t>Add the string &quot;Upgrade: WebSocket&quot; to /fields/.</t>
            <t>Add the string &quot;Connection: Upgrade&quot; to /fields/.</t>
            <t>Let /hostport/ be an empty string.</t>
            <t>Append the /host/ value, converted to ASCII lowercase, to /hostport/.</t>
            <t>If /secure/ is false, and /port/ is not 80, or if /secure/ is true, and /port/ is not 443, then append a U+003A COLON character (:) followed by the value of /port/, expressed as a base-ten integer, to /hostport/.</t>
            <t>Add the string consisting of the concatenation of the string &quot;Host:&quot;, a U+0020 SPACE character, and /hostport/, to /fields/.</t>
            <t>Add the string consisting of the concatenation of the string &quot;Origin:&quot;, a U+0020 SPACE character, and the /origin/ value, to /fields/.</t>
            <t>Add the string &quot;Sec-WebSocket-Draft: 2&quot; to /fields/.</t>
            <t>
              If there is no /protocol/, then skip this step.
              <vspace blankLines='1'/>
              Otherwise, add the string consisting of the concatenation of the string &quot;Sec-WebSocket-Protocol:&quot;, a U+0020 SPACE character, and the /protocol/ value, to /fields/.
            </t>
            <t>
              If the client has any  cookies that would be relevant to a resource accessed over HTTP, if /secure/ is false, or HTTPS, if it is true, on host /host/, port /port/, with /resource name/ as the path (and possibly query parameters), then add to /fields/ any HTTP headers that would be appropriate for that information. <xref target='RFC2616'/> <xref target='RFC2109'/> <xref target='RFC2965'/>
              <vspace blankLines='1'/>
              This includes &quot;HttpOnly&quot; cookies (cookies with the http-only-flag set to true); the WebSocket protocol is not considered a non-HTTP API for the purpose of cookie processing.
            </t>
            <t>
              When one or more HTTP headers are to be added to /fields/ for this step, each header must be added separately, and each header must be added as one entry consisting of the header&apos;s name in its canonical case, followed by a U+003A COLON character (:) and a U+0020 SPACE character, followed by the value with no use of continuation lines (e.g. containing no U+000A LINE FEED characters.)
            </t>
            <t>
              Let /spaces_1/ be a random integer from 1 to 12 inclusive.
              <vspace blankLines='1'/>
              Let /spaces_2/ be a random integer from 1 to 12 inclusive.
              <vspace blankLines='1'/>
              EXAMPLE: For example, 5 and 9.
            </t>
            <t>
              Let /max_1/ be the largest integer not greater than 4,294,967,295 divided by /spaces_1/.
              <vspace blankLines='1'/>
              Let /max_2/ be the largest integer not greater than 4,294,967,295 divided by /spaces_2/.
              <vspace blankLines='1'/>
              EXAMPLE: Continuing the example, 858,993,459 and 477,218,588.
            </t>
            <t>
              Let /number_1/ be a random integer from 0 to /max_1/ inclusive.
              <vspace blankLines='1'/>
              Let /number_2/ be a random integer from 0 to /max_2/ inclusive.
              <vspace blankLines='1'/>
              EXAMPLE: For example, 777,007,543 and 114,997,259.
            </t>
            <t>
              Let /product_1/ be the result of multiplying /number_1/ and /spaces_1/ together.
              <vspace blankLines='1'/>
              Let /product_2/ be the result of multiplying /number_2/ and /spaces_2/ together.
              <vspace blankLines='1'/>
              EXAMPLE: Continuing the example, 3,885,037,715 and 1,034,975,331.
            </t>
            <t>
              Let /key_1/ be a string consisting of /product_1/, expressed in base ten using the numerals in the range U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9).
              <vspace blankLines='1'/>
              Let /key_2/ be a string consisting of /product_2/, expressed in base ten using the numerals in the range U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9).
              <vspace blankLines='1'/>
              EXAMPLE: Continuing the example, &quot;3885037715&quot; and &quot;1034975331&quot;.
            </t>
            <t>
              Insert between one and twelve random characters from the ranges U+0021 to U+002F and U+003A to U+007E into /key_1/ at random positions.
              <vspace blankLines='1'/>
              Insert between one and twelve random characters from the ranges U+0021 to U+002F and U+003A to U+007E into /key_2/ at random positions.
              <vspace blankLines='1'/>
              NOTE: This corresponds to random printable ASCII characters other than the digits and the U+0020 SPACE character.
              <vspace blankLines='1'/>
              EXAMPLE: Continuing the example, this could lead to &quot;P388O503D&amp;ul7{K%gX(%715&quot; and &quot;1N?|kUT0or3o4I97N5-S3O31&quot;.
            </t>
            <t>
              Insert /spaces_1/ U+0020 SPACE characters into /key_1/ at random positions other than the start or end of the string.
              <vspace blankLines='1'/>
              Insert /spaces_2/ U+0020 SPACE characters into /key_2/ at random positions other than the start or end of the string.
              <vspace blankLines='1'/>
              EXAMPLE: Continuing the example, this could lead to &quot;P388 O503D&amp;ul7 {K%gX( %7  15&quot; and &quot;1 N ?|k UT0or 3o  4 I97N 5-S3O 31&quot;.
            </t>
            <t>
              Add the string consisting of the concatenation of the string &quot;Sec-WebSocket-Key1:&quot;, a U+0020 SPACE character, and the /key_1/ value, to /fields/.
              <vspace blankLines='1'/>
              Add the string consisting of the concatenation of the string &quot;Sec-WebSocket-Key2:&quot;, a U+0020 SPACE character, and the /key_2/ value, to /fields/.
            </t>
            <t>For each string in /fields/, in a random order: send the string, encoded as UTF-8, followed by a UTF-8-encoded U+000D CARRIAGE RETURN U+000A LINE FEED character pair (CRLF). It is important that the fields be output in a random order so that servers not depend on the particular order used by any particular client.</t>
            <t>Send a UTF-8-encoded U+000D CARRIAGE RETURN U+000A LINE FEED character pair (CRLF).</t>
            <t>
              Let /key_3/ be a string consisting of eight random bytes (or equivalently, a random 64 bit unsigned integer encoded in big-endian order).
              <vspace blankLines='1'/>
              EXAMPLE: For example, 0x47 0x30 0x22 0x2D 0x5A 0x3F 0x47 0x58.
            </t>
            <t>Send /key_3/ to the server.</t>
            <t>
              Read bytes from the server until either the connection closes, or a 0x0A byte is read. Let /field/ be these bytes, including the 0x0A byte.
              <vspace blankLines='1'/>
              If /field/ is not at least seven bytes long, or if the last two bytes aren&apos;t 0x0D and 0x0A respectively, or if /field/ contains any 0x0D bytes other than the penultimate byte, or if /field/ does not contain at least two 0x20 bytes, then <spanx style='emph'>fail the WebSocket connection</spanx> and abort these steps.
              <vspace blankLines='1'/>
              User agents may apply a timeout to this step, failing the WebSocket connection if the server does not send back data in a suitable time period.
            </t>
            <t>Let /code/ be the substring of /field/ that starts from the byte after the first 0x20 byte, and ends with the byte before the second 0x20 byte.</t>
            <t>
              If /code/, interpreted as UTF-8, is &quot;101&quot;, then move to the next step.
              <vspace blankLines='1'/>
              If /code/, interpreted as UTF-8, is &quot;407&quot;, then either close the connection and jump back to step 2, providing appropriate authentication information, or fail the WebSocket connection. 407 is the code used by HTTP meaning &quot;Proxy Authentication Required&quot;. User agents that support proxy authentication must interpret the response as defined by HTTP (e.g. to find and interpret the |Proxy-Authenticate| header).
              <vspace blankLines='1'/>
              Otherwise, fail the WebSocket connection and abort these steps.
            </t>
            <t>Let /fields/ be a list of name-value pairs, initially empty.</t>
            <t>
              <spanx style='emph'>Field</spanx>: Let /name/ and /value/ be empty byte arrays.
            </t>
            <t>
              Read a byte from the server.
              <vspace blankLines='1'/>
              If the connection closes before this byte is received, then fail the WebSocket connection and abort these steps.
              <vspace blankLines='1'/>
              Otherwise, handle the byte as described in the appropriate entry below:<list style='hanging'>
                <t hangText='-> If the byte is 0x0D (UTF-8 CR)'>
                  <vspace blankLines='0'/>If the /name/ byte array is empty, then jump to the fields processing step. Otherwise, fail the WebSocket connection and abort these steps.
                </t>
                <t hangText='-> If the byte is 0x0A (UTF-8 LF)'>
                  <vspace blankLines='0'/>Fail the WebSocket connection and abort these steps.
                </t>
                <t hangText='-> If the byte is 0x3A (UTF-8 :)'>
                  <vspace blankLines='0'/>Move on to the next step.
                </t>
                <t hangText='-> If the byte is in the range 0x41 to 0x5A (UTF-8 A-Z)'>
                  <vspace blankLines='0'/>Append a byte whose value is the byte&apos;s value plus 0x20 to the /name/ byte array and redo this step for the next byte.
                </t>
                <t hangText='-> Otherwise'>
                  <vspace blankLines='0'/>Append the byte to the /name/ byte array and redo this step for the next byte.
                </t>
              </list>
              NOTE: This reads a field name, terminated by a colon, converting upper-case  letters in the range A-Z to lowercase, and aborting if a stray CR or LF is found.
            </t>
            <t>
              Let /count/ equal 0.
              <vspace blankLines='1'/>
              NOTE: This is used in the next step to skip past a space character after the colon, if necessary.
            </t>
            <t>
              Read a byte from the server and increment /count/ by 1.
              <vspace blankLines='1'/>
              If the connection closes before this byte is received, then fail the WebSocket connection and abort these steps.
              <vspace blankLines='1'/>
              Otherwise, handle the byte as described in the appropriate entry below:<list style='hanging'>
                <t hangText='-> If the byte is 0x20 (UTF-8 space) and /count/ equals 1'>
                  <vspace blankLines='0'/>Ignore the byte and redo this step for the next byte.
                </t>
                <t hangText='-> If the byte is 0x0D (UTF-8 CR)'>
                  <vspace blankLines='0'/>Move on to the next step.
                </t>
                <t hangText='-> If the byte is 0x0A (UTF-8 LF)'>
                  <vspace blankLines='0'/>Fail the WebSocket connection and abort these steps.
                </t>
                <t hangText='-> Otherwise'>
                  <vspace blankLines='0'/>Append the byte to the /value/ byte array and redo this step for the next byte.
                </t>
              </list>
              NOTE: This reads a field value, terminated by a CRLF, skipping past a single space after the colon if there is one.
            </t>
            <t>
              Read a byte from the server.
              <vspace blankLines='1'/>
              If the connection closes before this byte is received, or if the byte is not a 0x0A byte (UTF-8 LF), then fail the WebSocket connection and abort these steps.
              <vspace blankLines='1'/>
              NOTE: This skips past the LF byte of the CRLF after the field.
            </t>
            <t>Append an entry to the /fields/ list that has the name given by the string obtained by interpreting the /name/ byte array as a UTF-8 byte stream and the value given by the string obtained by interpreting the /value/ byte array as a UTF-8 byte stream.</t>
            <t>Return to the &quot;Field&quot; step above.</t>
            <t>
              <spanx style='emph'>Fields processing</spanx>: Read a byte from the server.
              <vspace blankLines='1'/>
              If the connection closes before this byte is received, or if the byte is not a 0x0A byte (UTF-8 LF), then fail the WebSocket connection and abort these steps.
              <vspace blankLines='1'/>
              NOTE: This skips past the LF byte of the CRLF after the blank line after the fields.
            </t>
            <t>
              Let the /list of cookies/ be empty.
            </t>
            <t>
              If there is not exactly one entry in the /fields/ list whose name is &quot;upgrade&quot;, or if there is not exactly one entry in the /fields/ list whose name is &quot;connection&quot;, or if there is not exactly one entry in the /fields/ list whose name is &quot;sec-websocket-origin&quot;, or if there is not exactly one entry in the /fields/ list whose name is &quot;sec-websocket-location&quot;, or if the /protocol/ was specified but there is not exactly one entry in the /fields/ list whose name is &quot;sec-websocket-protocol&quot;, or if there are any entries in the /fields/ list whose names are the empty string, then fail the WebSocket connection and abort these steps. Otherwise, handle each entry in the /fields/ list as follows:<list style='hanging'>
                <t hangText='-> If the entry&apos;s name is &quot;upgrade&quot;'>
                  <vspace blankLines='0'/>If the value, converted to ASCII lowercase, is not exactly equal to the string &quot;websocket&quot;, then fail the WebSocket connection and abort these steps.
                </t>
                <t hangText='-> If the entry&apos;s name is &quot;connection&quot;'>
                  <vspace blankLines='0'/>If the value, converted to ASCII lowercase, is not exactly equal to the string &quot;upgrade&quot;, then fail the WebSocket connection and abort these steps.
                </t>
                <t hangText='-> If the entry&apos;s name is &quot;sec-websocket-origin&quot;'>
                  <vspace blankLines='0'/>If the value is not exactly equal to /origin/, then fail the WebSocket connection and abort these steps. <xref target='ORIGIN'/>
                </t>
                <t hangText='-> If the entry&apos;s name is &quot;sec-websocket-location&quot;'>
                  <vspace blankLines='0'/>If the value is not exactly equal to a string obtained from the steps to construct a WebSocket URL from /host/, /port/, /resource name/, and the /secure/ flag, then fail the WebSocket connection and abort these steps.
                </t>
                <t hangText='-> If the entry&apos;s name is &quot;sec-websocket-protocol&quot;'>
                  <vspace blankLines='0'/>If there was a /protocol/ specified, and the value is not exactly equal to /protocol/, then fail the WebSocket connection and abort these steps. (If no /protocol/ was specified, the field is ignored.)
                </t>
                <t hangText='-> If the entry&apos;s name is &quot;set-cookie&quot; or &quot;set-cookie2&quot; or another cookie-related field name'>
                  <vspace blankLines='0'/>If the relevant specification is supported by the user agent, add the cookie, interpreted as defined by the appropriate specification, to the /list of cookies/, with the resource being the one with the host /host/, the port /port/, the path (and possibly query parameters) /resource name/, and the scheme |http| if /secure/ is false and |https| if /secure/ is true. <xref target='RFC2109'/> <xref target='RFC2965'/>
                  <vspace blankLines='1'/>
                  If the relevant specification is not supported by the user agent, then the field must be ignored.
                  <vspace blankLines='1'/>
                  The cookies added to the /list of cookies/ are discarded if the connection fails to be established. Only if and when the connection is established do the cookies actually get applied.
                </t>
                <t hangText='-> Any other name'>
                  <vspace blankLines='0'/>Ignore it.
                </t>
              </list>
              <vspace blankLines='1'/>
            </t>
            <t>
              Let /challenge/ be the concatenation of /number_1/, expressed as a big-endian 32 bit integer, /number_2/, expressed as a big-endian 32 bit integer, and the eight bytes of /key_3/ in the order they were sent on the wire.
              <vspace blankLines='1'/>
              EXAMPLE: Using the examples given earlier, this leads to the 16 bytes 0x2E 0x50 0x31 0xB7 0x06 0xDA 0xB8 0x0B 0x47 0x30 0x22 0x2D 0x5A 0x3F 0x47 0x58.
            </t>
            <t>
              Let /expected/ be the MD5 fingerprint of /challenge/ as a big-endian 128 bit string. <xref target='RFC1321'/>
              <vspace blankLines='1'/>
              EXAMPLE: Using the examples given earlier, this leads to the 16 bytes 0x30 0x73 0x74 0x33 0x52 0x6C 0x26 0x71 0x2D 0x32 0x5A 0x55 0x5E 0x77 0x65 0x75. In UTF-8, these bytes correspond to the string &quot;0st3Rl&amp;q-2ZU^weu&quot;.
            </t>
            <t>
              Read sixteen bytes from the server. Let /reply/ be those bytes.
              <vspace blankLines='1'/>
              If the connection closes before these bytes are received, then fail the WebSocket connection and abort these steps.
            </t>
            <t>If /reply/ does not exactly equal /expected/, then fail the WebSocket connection and abort these steps.</t>
            <t>
              If the /defer cookies/ flag is not set, apply the cookies in the /list of cookies/.
            </t>
            <t>
              The <spanx style='strong'>WebSocket connection is established</spanx>. Now the user agent must send and receive to and from the connection as described in the next section.
            </t>
            <t>
              If the /defer cookies/ flag is set, store the /list of cookies/ for use by the component that invoked this algorithm.
            </t>
          </list>
        </t>

        <t>
          Where the algorithm above requires that a user agent
          fail the WebSocket connection,
          the user agent may first read an
          arbitrary number of further bytes from the connection (and then
          discard them) before actually <spanx style='strong'>failing the WebSocket connection</spanx>.
          Similarly, if a
          user agent can show that the bytes read from the connection so far
          are such that there is no subsequent sequence of bytes that the
          server can send that would not result in the user agent being
          required to <spanx style='strong'>fail the WebSocket connection</spanx>, the user
          agent may immediately <spanx style='strong'>fail the WebSocket connection</spanx>
          without waiting for those bytes.
        </t>

        <t>
          NOTE: The previous paragraph is intended to make it
          conforming for user agents to implement the algorithm in subtlely
          different ways that are equivalent in all ways except that they
          terminate the connection at earlier or later points. For example, it
          enables an implementation to buffer the entire handshake response
          before checking it, or to verify each field as it is received rather
          than collecting all the fields and then checking them as a
          block.
        </t>

        <t>
          When the user agent is to &quot;apply the cookies&quot; in a
          /list of cookies/, it must handle each cookie in the
          /list of cookies/ as defined by the appropriate
          specification. <xref target='RFC2109'/> <xref target='RFC2965'/>
        </t>

        
      </section>
      <section title='Server-side requirements'>
        <t>
          <spanx style='emph'>This section only applies to servers.</spanx>
        </t>

        <t>
          Servers may offload the management of the connection to other
          agents on the network, for example load balancers and reverse
          proxies. In such a situation, the server for the purposes of
          conformance is considered to include all parts of the server-side
          infrastructure from the first device to terminate the TCP connection
          all the way to the server that processes requests and sends
          responses.
        </t>

        <t>
          EXAMPLE: For example, a data center might have a server that responds to
          Web Socket requests with an appropriate handshake, and then passes
          the connection to another server to actually process the data
          frames. For the purposes of this specification, the "server" is the
          combination of both computers.
        </t>

        <section title='Reading the client&apos;s opening handshake'>
          <t>When a client starts a WebSocket connection, it sends its part of the opening handshake. The server must parse at least part of this handshake in order to obtain the necessary information to generate the server part of the handshake.</t>
          <t>
            The client handshake consists of the following parts. If the server, while reading the handshake, finds that the client did not send a handshake that matches the description below, the server should abort the WebSocket connection.
            <list style='numbers'>
              <t>The three-character UTF-8 string &quot;GET&quot;.</t>
              <t>A UTF-8-encoded U+0020 SPACE character (0x20 byte).</t>
              <t>A string consisting of all the bytes up to the next UTF-8-encoded U+0020 SPACE character (0x20 byte). The result of decoding this string as a UTF-8 string is the name of the resource requested by the server. If the server only supports one resource, then this can safely be ignored; the client verifies that the right resource is supported based on the information included in the server&apos;s own handshake. The resource name will begin with U+002F SOLIDUS character (/) and will only include characters in the range U+0021 to U+007E.</t>
              <t>A string of bytes terminated by a UTF-8-encoded U+000D CARRIAGE RETURN U+000A LINE FEED character pair (CRLF). All the characters from the second 0x20 byte up to the first 0x0D 0x0A byte pair in the data from the client can be safely ignored. (It will probably be the string &quot;HTTP/1.1&quot;.)</t>
              <t>
                A series of fields.
                <vspace blankLines='1'/>
                Each field is terminated by a UTF-8-encoded U+000D CARRIAGE RETURN U+000A LINE FEED character pair (CRLF). The end of the fields is denoted by the terminating CRLF pair being followed immediately by another CRLF pair.
                <vspace blankLines='1'/>
                NOTE: In other words, the fields start with the first 0x0D 0x0A byte pair, end with the first 0x0D 0x0A 0x0D 0x0A byte sequence, and are separate from each other by 0x0D 0x0A byte pairs.
                <vspace blankLines='1'/>
                The fields are encoded as UTF-8.
                <vspace blankLines='1'/>
                Each field consists of a name, consisting of one or more characters in the ranges U+0021 to U+0039 and U+003B to U+007E, followed by a U+003A COLON character (:) and a U+0020 SPACE character, followed by zero or more characters forming the value.
                <vspace blankLines='1'/>
                The expected field names, the meaning of their corresponding values, and the processing servers are required to apply to those fields, are described below, after the description of the client handshake.
              </t>
              <t>After the first 0x0D 0x0A 0x0D 0x0A byte sequence, indicating the end of the fields, the client sends eight random bytes. These are used in constructing the server handshake.</t>
            </list>
          </t>
          <t>
            The expected field names, and the meaning of their corresponding values, are as follows. Field names must be compared in an ASCII case-insensitive manner.
            <list style='hanging'>
              <t hangText='|Upgrade|'>
                <vspace blankLines='0'/>Invariant part of the handshake. Will always have a value that is an ASCII case-insensitive match for the string &quot;WebSocket&quot;.
                <vspace blankLines='1'/>
                Can be safely ignored, though the server should abort the WebSocket connection if this field is absent or has a different value, to avoid vulnerability to cross-protocol attacks.
              </t>
              <t hangText='|Connection|'>
                <vspace blankLines='0'/>Invariant part of the handshake. Will always have a value that is an ASCII case-insensitive match for the string &quot;Upgrade&quot;.
                <vspace blankLines='1'/>
                Can be safely ignored, though the server should abort the WebSocket connection if this field is absent or has a different value, to avoid vulnerability to cross-protocol attacks.
              </t>
              <t hangText='|Host|'>
                <vspace blankLines='0'/>The value gives the hostname that the client intended to use when opening the WebSocket. It would be of interest in particular to virtual hosting environments, where one server might serve multiple hosts, and might therefore want to return different data.
                <vspace blankLines='1'/>
                Can be safely ignored, though the server should abort the WebSocket connection if this field is absent or has a value that does not match the server&apos;s host name, to avoid vulnerability to cross-protocol attacks and DNS rebinding attacks.
              </t>
              <t hangText='|Origin|'>
                <vspace blankLines='0'/>The value gives the scheme, hostname, and port (if it&apos;s not the default port for the given scheme) of the page that asked the client to open the WebSocket. It would be interesting if the server&apos;s operator had deals with operators of other sites, since the server could then decide how to respond (or indeed, <spanx style='emph'>whether</spanx> to respond) based on which site was requesting a connection. <xref target='ORIGIN'/>
                <vspace blankLines='1'/>
                Can be safely ignored, though the server should abort the WebSocket connection if this field is absent or has a value that does not match one of the origins the server is expecting to communicate with, to avoid vulnerability to cross-protocol attacks and cross-site scripting attacks.
              </t>
              <t hangText='|Sec-WebSocket-Protocol|'>
                <vspace blankLines='0'/>The value gives the name of a subprotocol that the client is intending to select. It would be interesting if the server supports multiple protocols or protocol versions.
                <vspace blankLines='1'/>
                Can be safely ignored, though the server may abort the WebSocket connection if the field is absent but the conventions for communicating with the server are such that the field is expected; and the server should abort the WebSocket connection if the field has a value that does not match one of the subprotocols that the server supports, to avoid integrity errors once the connection is established.
              </t>
              <t hangText='|Sec-WebSocket-Key1|'>
                <vspace blankLines='0'/>
              </t>
              <t hangText='|Sec-WebSocket-Key2|'>
                <vspace blankLines='0'/>The values provide the information required for computing the server&apos;s handshake, as described in the next section.
              </t>
              <t hangText='|Sec-WebSocket-Draft|'>
                <vspace blankLines='0'/>The value provides the version of this draft protocol that the client is attempting to establish a connection using. If this value is not equal to a version of the draft protocol that the server understands, the server MUST abort the WebSocket connection.
              </t>
              <t hangText='Other fields'>
                <vspace blankLines='0'/>Other fields can be used, such as &quot;Cookie&quot;, for authentication purposes. Their semantics are equivalent to the semantics of the HTTP headers with the same names.
              </t>
            </list>
          </t>
          <t>Unrecognized fields can be safely ignored, and are probably either the result of intermediaries injecting fields unrelated to the operation of the WebSocket protocol, or clients that support future versions of the protocol offering options that the server doesn&apos;t support.</t>
        </section>
        <section title='Sending the server&apos;s opening handshake'>
          <t>
            When a client establishes a WebSocket connection to a server, the server must run the following steps.
            <list style='numbers'>
              <t>
                If the server supports encryption, perform a TLS handshake over the connection. If this fails (e.g. the client indicated a host name in the extended client hello &quot;server_name&quot; extension that the server does not host), then close the connection; otherwise, all further communication for the connection (including the server handshake) must run through the encrypted tunnel. <xref target='RFC2246'/>
              </t>
              <t>
                Establish the following information:<list style='hanging'>
                  <t hangText='/host/'>
                    <vspace blankLines='0'/>The host name or IP address of the WebSocket server, as it is to be addressed by clients. The host name must be punycode-encoded if necessary. If the server can respond to requests to multiple hosts (e.g. in a virtual hosting environment), then the value should be derived from the client&apos;s handshake, specifically from the &quot;Host&quot; field. The /host/ value must be lowercase (not containing characters in the range U+0041 LATIN CAPITAL LETTER A to U+005A LATIN CAPITAL LETTER Z).
                  </t>
                  <t hangText='/port/'>
                    <vspace blankLines='0'/>The port number on which the server expected and/or received the connection.
                  </t>
                  <t hangText='/resource name/'>
                    <vspace blankLines='0'/>An identifier for the service provided by the server. If the server provides multiple services, then the value should be derived from the resource name given in the client&apos;s handshake.
                  </t>
                  <t hangText='/secure flag/'>
                    <vspace blankLines='0'/>
                  </t>
                  <t hangText=''>
                    <vspace blankLines='0'/>True if the connection is encrypted or if the server expected it to be encrypted; false otherwise.
                  </t>
                  <t hangText='/origin/'>
                    <vspace blankLines='0'/>The ASCII serialization of the origin that the server is willing to communicate with, converted to ASCII lowercase. If the server can respond to requests from multiple origins (or indeed, all origins), then the value should be derived from the client&apos;s handshake, specifically from the &quot;Origin&quot; field. <xref target='ORIGIN'/>
                  </t>
                  <t hangText='/subprotocol/'>
                    <vspace blankLines='0'/>Either null, or a string representing the subprotocol the server is ready to use. If the server supports multiple subprotocols, then the value should be derived from the client&apos;s handshake, specifically from the &quot;Sec-WebSocket-Protocol&quot; field. The absence of such a field is equivalent to the null value. The empty string is not the same as the null value for these purposes.
                  </t>
                  <t hangText='/key_1/'>
                    <vspace blankLines='0'/>The value of the &quot;Sec-WebSocket-Key1&quot; field in the client&apos;s handshake.
                  </t>
                  <t hangText='/key_2/'>
                    <vspace blankLines='0'/>The value of the &quot;Sec-WebSocket-Key2&quot; field in the client&apos;s handshake.
                  </t>
                  <t hangText='/key_3/'>
                    <vspace blankLines='0'/>The eight random bytes sent after the first 0x0D 0x0A 0x0D 0x0A sequence in the client&apos;s handshake.
                  </t>
                </list>
              </t>
              <t>Let /location/ be the string that results from constructing a WebSocket URL from /host/, /port/, /resource name/, and /secure flag/.</t>
              <t>
                Let /key-number_1/ be the digits (characters in the range U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9)) in /key_1/, interpreted as a base ten integer, ignoring all other characters in /key_1/.
                <vspace blankLines='1'/>
                Let /key-number_2/ be the digits (characters in the range U+0030 DIGIT ZERO (0) to U+0039 DIGIT NINE (9)) in /key_2/, interpreted as a base ten integer, ignoring all other characters in /key_2/.<list style='empty'>
                  <t>
                    EXAMPLE: For example, assume that the client handshake was:<vspace blankLines='1'/>
                    <figure>
                      <artwork>
           GET / HTTP/1.1
           Connection: Upgrade
           Host: example.com
           Upgrade: WebSocket
           Sec-WebSocket-Key1: 3e6b263  4 17 80
           Origin: http://example.com
           Sec-WebSocket-Key2: 17  9 G`ZD9   2 2b 7X 3 /r90

           WjN}|M(6
                      </artwork>
                    </figure>
                  </t>
                  <t>The /key-number_1/ would be the number 3,626,341,780, and the /key-number_2/ would be the number 1,799,227,390.</t>
                  <t>In this example, incidentally, /key_3/ is &quot;WjN}|M(6&quot;, or 0x57 0x6A 0x4E 0x7D 0x7C 0x4D 0x28 0x36.</t>
                </list>
              </t>
              <t>
                Let /spaces_1/ be the number of U+0020 SPACE characters in /key_1/.
                <vspace blankLines='1'/>
                Let /spaces_2/ be the number of U+0020 SPACE characters in /key_2/.
                <vspace blankLines='1'/>
                If either /spaces_1/ or /spaces_2/ is zero, then abort the WebSocket connection. This is a symptom of a cross-protocol attack.
                <vspace blankLines='1'/>
                EXAMPLE: In the example above, /spaces_1/ would be 4 and /spaces_2/ would be 10.
              </t>
              <t>
                If /key-number_1/ is not an integral multiple of /spaces_1/, then abort the WebSocket connection.
                <vspace blankLines='1'/>
                If /key-number_2/ is not an integral multiple of /spaces_2/, then abort the WebSocket connection.
                <vspace blankLines='1'/>
                NOTE: This can only happen if the client is not a conforming WebSocket client.
              </t>
              <t>
                Let /part_1/ be /key-number_1/ divided by /spaces_1/.
                <vspace blankLines='1'/>
                Let /part_2/ be /key-number_2/ divided by /spaces_2/.
                <vspace blankLines='1'/>
                EXAMPLE: In the example above, /part_1/ would be 906,585,445 and /part_2/ would be 179,922,739.
              </t>
              <t>
                Let /challenge/ be the concatenation of /part_1/, expressed as a big-endian 32 bit integer, /part_2/, expressed as a big-endian 32 bit integer, and the eight bytes of /key_3/ in the order they were sent on the wire.
                <vspace blankLines='1'/>
                EXAMPLE: In the example above, this would be the 16 bytes 0x36 0x09 0x65 0x65 0x0A 0xB9 0x67 0x33 0x57 0x6A 0x4E 0x7D 0x7C 0x4D 0x28 0x36.
              </t>
              <t>
                Let /response/ be the MD5 fingerprint of /challenge/ as a big-endian 128 bit string. <xref target='RFC1321'/>
                <vspace blankLines='1'/>
                EXAMPLE: In the example above, this would be the 16 bytes 0x6E 0x60 0x39 0x65 0x42 0x6B 0x39 0x7A 0x24 0x52 0x38 0x70 0x4F 0x74 0x56 0x62, or &quot;n`9eBk9z$R8pOtVb&quot; in UTF-8.
              </t>
              <t>
                Send the following line, terminated by the two characters U+000D CARRIAGE RETURN and U+000A LINE FEED (CRLF) and encoded as UTF-8, to the client:<vspace blankLines='1'/>
                <figure>
                  <artwork>        HTTP/1.1 101 WebSocket Protocol Handshake</artwork>
                </figure>

                <vspace blankLines='1'/>
                This line may be sent differently if necessary, but must match the Status-Line production defined in the HTTP specification, with the Status-Code having the value 101.
              </t>
              <t>
                Send the following fields to the client. Each field must be sent as a line consisting of the field name, which must be an ASCII case-insensitive match for the field name in the list below, followed by a U+003A COLON character (:) and a U+0020 SPACE character, followed by the field value as specified in the list below, followed by the two characters U+000D CARRIAGE RETURN and U+000A LINE FEED (CRLF). The lines must be encoded as UTF-8. The lines may be sent in any order.<list style='hanging'>
                  <t hangText='|Upgrade|'>
                    <vspace blankLines='0'/>The value must be the string &quot;WebSocket&quot;.
                  </t>
                  <t hangText='|Connection|'>
                    <vspace blankLines='0'/>The value must be the string &quot;Upgrade&quot;.
                  </t>
                  <t hangText='|Sec-WebSocket-Location|'>
                    <vspace blankLines='0'/>The value must be /location/
                  </t>
                  <t hangText='|Sec-WebSocket-Origin|'>
                    <vspace blankLines='0'/>The value must be /origin/
                  </t>
                  <t hangText='|Sec-WebSocket-Protocol|'>
                    <vspace blankLines='0'/>This field must be included if /subprotocol/ is not null, and must not be included if /subprotocol/ is null.
                    <vspace blankLines='1'/>
                    If included, the value must be /subprotocol/
                  </t>
                </list>
                Optionally, include &quot;Set-Cookie&quot;, &quot;Set-Cookie2&quot;, or other cookie-related fields, with values equal to the values that would be used for the identically named HTTP headers. <xref target='RFC2109'/> <xref target='RFC2965'/>
              </t>
              <t>Send two bytes 0x0D 0x0A (UTF-8 CRLF).</t>
              <t>Send /response/.</t>
            </list>
          </t>
          <t>This completes the server&apos;s handshake. If the server finishes these steps without aborting the WebSocket connection, and if the client does not then fail the WebSocket connection, then the connection is established and the server may begin sending and receiving data, as described in the next section.</t>
        </section>
      </section>
    </section>
    <section title='Error Handling'>

      <section title='Handling errors in UTF-8 from the server'>
        <t>When a client is to interpret a byte stream as UTF-8 but finds that the byte stream is not in fact a valid UTF-8 stream, then any bytes or sequences of bytes that are not valid UTF-8 sequences must be interpreted as a U+FFFD REPLACEMENT CHARACTER.</t>
      </section>
    
      <section title='Handling errors in UTF-8 from the client'>
        <t>When a server is to interpret a byte stream as UTF-8 but finds that the byte stream is not in fact a valid UTF-8 stream, behavior is undefined. A server could close the connection, convert invalid byte sequences to U+FFFD REPLACEMENT CHARACTERs, store the data verbatim, or perform application-specific processing. Subprotocols layered on the WebSocket protocol might define specific behavior for servers.</t>
      </section>
    </section>
    <section title='Closing the connection' anchor='closing_connection'>
      <section title='Client-initiated closure'>
        <t>
          Certain algorithms require the user agent to <spanx style='strong'>fail the WebSocket connection</spanx>. To do so, the user agent must close the WebSocket connection, and may report the problem to the user (which would be especially useful for developers).
        </t>
        <t>Except as indicated above or as specified by the application layer (e.g. a script using the WebSocket API), user agents should not close the connection.</t>
        <t>
          User agents must not convey any failure information to scripts in a way that would allow a script to distinguish the following situations:
          <list style='symbols'>
            <t>A server whose host name could not be resolved.</t>
            <t>A server to which packets could not successfully be routed.</t>
            <t>A server that refused the connection on the specified port.</t>
            <t>A server that did not complete the opening handshake (e.g. because it was not a WebSocket server).</t>
            <t>A WebSocket server that sent a correct opening handshake, but that specified options that caused the client to drop the connection (e.g. the server specified an origin that differed from the script&apos;s).</t>
            <t>A WebSocket server that abruptly closed the connection after successfully completing the opening handshake.</t>
          </list>
        </t>
      </section>
      <section title='Server-initiated closure'>
        <t>
          Certain algorithms require or recommend that the server <spanx style='strong'>abort the WebSocket connection</spanx> during the opening handshake. To do so, the server must simply close the WebSocket connection.
        </t>
      </section>
      <section title='Closure'>
        <t>
          To <spanx style='strong'>close the WebSocket connection</spanx>, the user agent or server must close the TCP connection, using whatever mechanism possible (e.g. either the TCP RST or FIN mechanisms). When a user agent notices that the server has closed its connection, it must immediately close its side of the connection also. Whether the user agent or the server closes the connection first, it is said that the <spanx style='strong'>WebSocket connection is closed</spanx>. If the connection was closed after the client finished the WebSocket closing handshake, then the WebSocket connection is said to have been closed <spanx style='emph'>cleanly</spanx>.
        </t>
        <t>Servers may close the WebSocket connection whenever desired. User agents should not close the WebSocket connection arbitrarily.</t>
      </section>
    </section>
    <section title='Security considerations'>
      <t>While this protocol is intended to be used by scripts in Web pages, it can also be used directly by hosts. Such hosts are acting on their own behalf, and can therefore send fake &quot;Origin&quot; fields, misleading the server. Servers should therefore be careful about assuming that they are talking directly to scripts from known origins, and must consider that they might be accessed in unexpected ways. In particular, a server should not trust that any input is valid.</t>
      <t>EXAMPLE: For example, if the server uses input as part of SQL queries, all input text should be escaped before being passed to the SQL server, lest the server be susceptible to SQL injection.</t>
      <t>
        <vspace blankLines='1'/>
      </t>
      <t>Servers that are not intended to process input from any Web page but only for certain sites should verify the &quot;Origin&quot; field is an origin they expect, and should only respond with the corresponding &quot;Sec-WebSocket-Origin&quot; if it is an accepted origin. Servers that only accept input from one origin can just send back that value in the &quot;Sec-WebSocket-Origin&quot; field, without bothering to check the client&apos;s value.</t>
      <t>
        <vspace blankLines='1'/>
      </t>
      <t>If at any time a server is faced with data that it does not understand, or that violates some criteria by which the server determines safety of input, or when the server sees a handshake that does not correspond to the values the server is expecting (e.g. incorrect path or origin), the server should just disconnect. It is always safe to disconnect.</t>
      <t>
        <vspace blankLines='1'/>
      </t>
      <t>The biggest security risk when sending text data using this protocol is sending data using the wrong encoding. If an attacker can trick the server into sending data encoded as ISO-8859-1 verbatim (for instance), rather than encoded as UTF-8, then the attacker could inject arbitrary frames into the data stream.</t>
    </section>
    <section title='IANA considerations'>
      <section title='Registration of ws: scheme'>
        <t>
          A |ws:| URL identifies a WebSocket server and resource name.
          <list style='hanging'>
            <t hangText='URI scheme name.'>
              <vspace blankLines='0'/>ws
            </t>
            <t hangText='Status.'>
              <vspace blankLines='0'/>Permanent.
            </t>
            <t hangText='URI scheme syntax.'>
              <vspace blankLines='0'/>In ABNF terms using the terminals from the URI specifications: <xref target='RFC5234'/> <xref target='RFC3986'/><vspace blankLines='1'/><figure>
                <artwork>        &quot;ws&quot; &quot;:&quot; hier-part [ &quot;?&quot; query ]</artwork>
              </figure>

              <vspace blankLines='1'/>
              The path and query components form the resource name sent to the server to identify the kind of service desired. Other components have the meanings described in RFC3986.
            </t>
            <t hangText='URI scheme semantics.'>
              <vspace blankLines='0'/>The only operation for this scheme is to open a connection using the WebSocket protocol.
            </t>
            <t hangText='Encoding considerations.'>
              <vspace blankLines='0'/>Characters in the host component that are excluded by the syntax defined above must be converted from Unicode to ASCII by applying the IDNA ToASCII algorithm to the Unicode host name, with both the AllowUnassigned and UseSTD3ASCIIRules flags set, and using the result of this algorithm as the host in the URI. <xref target='RFC3490'/>
              <vspace blankLines='1'/>
              Characters in other components that are excluded by the syntax defined above must be converted from Unicode to ASCII by first encoding the characters as UTF-8 and then replacing the corresponding bytes using their percent-encoded form as defined in the URI and IRI specification. <xref target='RFC3986'/> <xref target='RFC3987'/>
            </t>
            <t hangText='Applications/protocols that use this URI scheme name.'>
              <vspace blankLines='0'/>WebSocket protocol.
            </t>
            <t hangText='Interoperability considerations.'>
              <vspace blankLines='0'/>None.
            </t>
            <t hangText='Security considerations.'>
              <vspace blankLines='0'/>See &quot;Security considerations&quot; section above.
            </t>
            <t hangText='Contact.'>
              <vspace blankLines='0'/>Ian Hickson &lt;ian@hixie.ch&gt;
            </t>
            <t hangText='Author/Change controller.'>
              <vspace blankLines='0'/>Ian Hickson &lt;ian@hixie.ch&gt;
            </t>
            <t hangText='References.'>
              <vspace blankLines='0'/>This document.
            </t>
          </list>
        </t>
      </section>
      <section title='Registration of wss: scheme'>
        <t>
          A |wss:| URL identifies a WebSocket server and resource name, and indicates that traffic over that connection is to be encrypted.
          <list style='hanging'>
            <t hangText='URI scheme name.'>
              <vspace blankLines='0'/>wss
            </t>
            <t hangText='Status.'>
              <vspace blankLines='0'/>Permanent.
            </t>
            <t hangText='URI scheme syntax.'>
              <vspace blankLines='0'/>In ABNF terms using the terminals from the URI specifications: <xref target='RFC5234'/> <xref target='RFC3986'/><vspace blankLines='1'/><figure>
                <artwork>        &quot;wss&quot; &quot;:&quot; hier-part [ &quot;?&quot; query ]</artwork>
              </figure>

              <vspace blankLines='1'/>
              The path and query components form the resource name sent to the server to identify the kind of service desired. Other components have the meanings described in RFC3986.
            </t>
            <t hangText='URI scheme semantics.'>
              <vspace blankLines='0'/>The only operation for this scheme is to open a connection using the WebSocket protocol, encrypted using TLS.
            </t>
            <t hangText='Encoding considerations.'>
              <vspace blankLines='0'/>Characters in the host component that are excluded by the syntax defined above must be converted from Unicode to ASCII by applying the IDNA ToASCII algorithm to the Unicode host name, with both the AllowUnassigned and UseSTD3ASCIIRules flags set, and using the result of this algorithm as the host in the URI. <xref target='RFC3490'/>
              <vspace blankLines='1'/>
              Characters in other components that are excluded by the syntax defined above must be converted from Unicode to ASCII by first encoding the characters as UTF-8 and then replacing the corresponding bytes using their percent-encoded form as defined in the URI and IRI specification. <xref target='RFC3986'/> <xref target='RFC3987'/>
            </t>
            <t hangText='Applications/protocols that use this URI scheme name.'>
              <vspace blankLines='0'/>WebSocket protocol over TLS.
            </t>
            <t hangText='Interoperability considerations.'>
              <vspace blankLines='0'/>None.
            </t>
            <t hangText='Security considerations.'>
              <vspace blankLines='0'/>See &quot;Security considerations&quot; section above.
            </t>
            <t hangText='Contact.'>
              <vspace blankLines='0'/>Ian Hickson &lt;ian@hixie.ch&gt;
            </t>
            <t hangText='Author/Change controller.'>
              <vspace blankLines='0'/>Ian Hickson &lt;ian@hixie.ch&gt;
            </t>
            <t hangText='References.'>
              <vspace blankLines='0'/>This document.
            </t>
          </list>
        </t>
      </section>
      <section title='Registration of the &quot;WebSocket&quot; HTTP Upgrade keyword'>
        <t>
          <list style='hanging'>
            <t hangText='Name of token.'>
              <vspace blankLines='0'/>WebSocket
            </t>
            <t hangText='Author/Change controller.'>
              <vspace blankLines='0'/>Ian Hickson &lt;ian@hixie.ch&gt;
            </t>
            <t hangText='Contact.'>
              <vspace blankLines='0'/>Ian Hickson &lt;ian@hixie.ch&gt;
            </t>
            <t hangText='References.'>
              <vspace blankLines='0'/>This document.
            </t>
          </list>
        </t>
      </section>
      <section title='Sec-WebSocket-Key1 and Sec-WebSocket-Key2'>
        <t>
          This section describes two header fields for registration in the Permanent Message Header Field Registry. <xref target='RFC3864'/>
        </t>
        <t>
          <list style='hanging'>
            <t hangText='Header field name'>
              <vspace blankLines='0'/>Sec-WebSocket-Key1
            </t>
            <t hangText='Applicable protocol'>
              <vspace blankLines='0'/>http
            </t>
            <t hangText='Status'>
              <vspace blankLines='0'/>reserved; do not use outside WebSocket handshake
            </t>
            <t hangText='Author/Change controller'>
              <vspace blankLines='0'/>IETF
            </t>
            <t hangText='Specification document(s)'>
              <vspace blankLines='0'/> This document is the relevant specification.
            </t>
            <t hangText='Related information'>
              <vspace blankLines='0'/>None.
            </t>
          </list>
        </t>
        <t>
          <list style='hanging'>
            <t hangText='Header field name'>
              <vspace blankLines='0'/>Sec-WebSocket-Key2
            </t>
            <t hangText='Applicable protocol'>
              <vspace blankLines='0'/>http
            </t>
            <t hangText='Status'>
              <vspace blankLines='0'/>reserved; do not use outside WebSocket handshake
            </t>
            <t hangText='Author/Change controller'>
              <vspace blankLines='0'/>IETF
            </t>
            <t hangText='Specification document(s)'>
              <vspace blankLines='0'/> This document is the relevant specification.
            </t>
            <t hangText='Related information'>
              <vspace blankLines='0'/>None.
            </t>
          </list>
        </t>
        <t>The |Sec-WebSocket-Key1| and |Sec-WebSocket-Key2| headers are used in the WebSocket handshake. They are sent from the client to the server to provide part of the information used by the server to prove that it received a valid WebSocket handshake. This helps ensure that the server does not accept connections from non-Web-Socket clients (e.g. HTTP clients) that are being abused to send data to unsuspecting WebSocket servers.</t>
      </section>
      <section title='Sec-WebSocket-Location'>
        <t>
          This section describes a header field for registration in the Permanent Message Header Field Registry. <xref target='RFC3864'/>
        </t>
        <t>
          <list style='hanging'>
            <t hangText='Header field name'>
              <vspace blankLines='0'/>Sec-WebSocket-Location
            </t>
            <t hangText='Applicable protocol'>
              <vspace blankLines='0'/>http
            </t>
            <t hangText='Status'>
              <vspace blankLines='0'/>reserved; do not use outside WebSocket handshake
            </t>
            <t hangText='Author/Change controller'>
              <vspace blankLines='0'/>IETF
            </t>
            <t hangText='Specification document(s)'>
              <vspace blankLines='0'/> This document is the relevant specification.
            </t>
            <t hangText='Related information'>
              <vspace blankLines='0'/>None.
            </t>
          </list>
        </t>
        <t>The |Sec-WebSocket-Location| header is used in the WebSocket handshake. It is sent from the server to the client to confirm the URL of the connection. This enables the client to verify that the connection was established to the right server, port, and path, instead of relying on the server to verify that the requested host, port, and path are correct.</t>
      </section>
      <section title='Sec-WebSocket-Origin'>
        <t>
          This section describes a header field for registration in the Permanent Message Header Field Registry. <xref target='RFC3864'/>
        </t>
        <t>
          <list style='hanging'>
            <t hangText='Header field name'>
              <vspace blankLines='0'/>Sec-WebSocket-Origin
            </t>
            <t hangText='Applicable protocol'>
              <vspace blankLines='0'/>http
            </t>
            <t hangText='Status'>
              <vspace blankLines='0'/>reserved; do not use outside WebSocket handshake
            </t>
            <t hangText='Author/Change controller'>
              <vspace blankLines='0'/>IETF
            </t>
            <t hangText='Specification document(s)'>
              <vspace blankLines='0'/> This document is the relevant specification.
            </t>
            <t hangText='Related information'>
              <vspace blankLines='0'/>None.
            </t>
          </list>
        </t>
        <t>The |Sec-WebSocket-Origin| header is used in the WebSocket handshake. It is sent from the server to the client to confirm the origin of the script that opened the connection. This enables user agents to verify that the server is willing to serve the script that opened the connection.</t>
      </section>
      <section title='Sec-WebSocket-Protocol'>
        <t>
          This section describes a header field for registration in the Permanent Message Header Field Registry. <xref target='RFC3864'/>
        </t>
        <t>
          <list style='hanging'>
            <t hangText='Header field name'>
              <vspace blankLines='0'/>Sec-WebSocket-Protocol
            </t>
            <t hangText='Applicable protocol'>
              <vspace blankLines='0'/>http
            </t>
            <t hangText='Status'>
              <vspace blankLines='0'/>reserved; do not use outside WebSocket handshake
            </t>
            <t hangText='Author/Change controller'>
              <vspace blankLines='0'/>IETF
            </t>
            <t hangText='Specification document(s)'>
              <vspace blankLines='0'/> This document is the relevant specification.
            </t>
            <t hangText='Related information'>
              <vspace blankLines='0'/>None.
            </t>
          </list>
        </t>
        <t>The |Sec-WebSocket-Protocol| header is used in the WebSocket handshake. It is sent from the client to the server and back from the server to the client to confirm the subprotocol of the connection. This enables scripts to both select a subprotocol and be sure that the server agreed to serve that subprotocol.</t>
      </section>


      <section title='Sec-WebSocket-Draft'>
        <t>
          This section describes a header field for registration in the Permanent Message Header Field Registry. <xref target='RFC3864'/>
        </t>
        <t>
          <list style='hanging'>
            <t hangText='Header field name'>
              <vspace blankLines='0'/>Sec-WebSocket-Draft
            </t>
            <t hangText='Applicable protocol'>
              <vspace blankLines='0'/>http
            </t>
            <t hangText='Status'>
              <vspace blankLines='0'/>reserved; do not use outside WebSocket handshake
            </t>
            <t hangText='Author/Change controller'>
              <vspace blankLines='0'/>IETF
            </t>
            <t hangText='Specification document(s)'>
              <vspace blankLines='0'/> This document is the relevant specification.
            </t>
            <t hangText='Related information'>
              <vspace blankLines='0'/>None.
            </t>
          </list>
        </t>
        <t>The |Sec-WebSocket-Draft| header is used in the WebSocket handshake. It is sent from the client to the server to indicate the draft protocol version of the connection. This enables servers to correctly interpret the handshake and subsequent data being sent from the data, and close the connection if the server cannot interpret that data in a safe manner.</t>
      </section>

    </section>
    <section title='Using the WebSocket protocol from other specifications'>
      <t>The WebSocket protocol is intended to be used by another specification to provide a generic mechanism for dynamic author-defined content, e.g. in a specification defining a scripted API.</t>
      <t>
        Such a specification first needs to &quot;establish a WebSocket connection&quot;, providing that algorithm with:
        <list style='symbols'>
          <t>The destination, consisting of a /host/ and a /port/.</t>
          <t>A /resource name/, which allows for multiple services to be identified at one host and port.</t>
          <t>A /secure/ flag, which is true if the connection is to be encrypted, and false otherwise.</t>
          <t>
            An ASCII serialization of an origin that is being made responsible for the connection. <xref target='ORIGIN'/>
          </t>
          <t>Optionally a string identifying a protocol that is to be layered over the WebSocket connection.</t>
        </list>
      </t>
      <t>The /host/, /port/, /resource name/, and /secure/ flag are usually obtained from a URL using the steps to parse a WebSocket URL&apos;s components. These steps fail if the URL does not specify a WebSocket.</t>
      <t>If a connection can be established, then it is said that the &quot;WebSocket connection is established&quot;.</t>
      <t>If at any time the connection is to be closed, then the specification needs to use the &quot;close the WebSocket connection&quot; algorithm.</t>
      <t>When the connection is closed, for any reason including failure to establish the connection in the first place, it is said that the &quot;WebSocket connection is closed&quot;.</t>
      <t>While a connection is open, the specification will need to handle the cases when &quot;a WebSocket message has been received&quot; with text /data/.</t>
      <t>To send some text /data/ to an open connection, the specification needs to &quot;send /data/ using the WebSocket&quot;.</t>
    </section>
    <section title='Acknowledgements'>
      <t>
        Special thanks are due to Ian Hickson, who was the original author and editor of this protocol. The initial design of this specification benefitted from the participation of many people in the WHATWG and WHATWG mailing list. Contributions to that specification are not tracked by section, but a list of all who contributed to that specification is given in the WHATWG HTML specification. <xref target='HTML'/>
      </t>
      <t>Special thanks also to John Tamplin for providing a significant amount of text for the Data Framing section of this specification.</t>
    </section>
  </middle>
  <back>
    <references title="Normative References">
      <reference anchor='HTML' target='http://whatwg.org/html5'>
        <front>
          <title>HTML</title>
          <author initials='I.E.' surname='Hickson' fullname='Ian Hickson'>
            <organization>Google, Inc.</organization>
          </author>
          <date day="18" month="August" year="2010"/>
        </front>
      </reference>
      <reference anchor='ORIGIN' target='http://tools.ietf.org/html/draft-abarth-origin'>
        <front>
          <title>The HTTP Origin Header</title>
          <author initials='A.' surname='Barth' fullname='Adam Barth'>
            <organization>U.C. Berkeley</organization>
          </author>
          <author initials='C.' surname='Jackson' fullname='Collin Jackson'>
            <organization>Stanford University</organization>
          </author>
          <author initials='I.E.' surname='Hickson' fullname='Ian Hickson'>
            <organization>Google, Inc.</organization>
          </author>
          <date day="24" month="September" year="2009"/>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-abarth-origin"/>
      </reference>
      <?rfc include='reference.RFC.1321.xml'?>
      <?rfc include='reference.RFC.2109.xml'?>
      <?rfc include='reference.RFC.2119.xml'?>
      <?rfc include='reference.RFC.2246.xml'?>
      <?rfc include='reference.RFC.2616.xml'?>
      <?rfc include='reference.RFC.2965.xml'?>
      <?rfc include='reference.RFC.3490.xml'?>
      <?rfc include='reference.RFC.3629.xml'?>
      <?rfc include='reference.RFC.3864.xml'?>
      <?rfc include='reference.RFC.3986.xml'?>
      <?rfc include='reference.RFC.3987.xml'?>
      <?rfc include='reference.RFC.4366.xml'?>
      <?rfc include='reference.RFC.5234.xml'?>
      <reference anchor='WEBADDRESSES' target='http://www.w3.org/html/wg/href/draft'>
        <front>
          <title>Web addresses in HTML 5</title>
          <author initials='D.' surname='Connolly' fullname='Dan Connolly'>
            <organization>Midwest Web Sense LLC and W3C</organization>
          </author>
          <author initials='C. M.' surname='Sperberg-McQueen' fullname='C. M. Sperberg-McQueen'>
            <organization>Black Mesa Technologies LLC</organization>
          </author>
          <date day="21" month="May" year="2009"/>
        </front>
      </reference>
      <reference anchor='WSAPI' target='http://dev.w3.org/html5/websockets/'>
        <front>
          <title>The Web Sockets API</title>
          <author initials='I.E.' surname='Hickson' fullname='Ian Hickson'>
            <organization>Google, Inc.</organization>
          </author>
          <date day="18" month="August" year="2010"/>
        </front>
      </reference>
    </references>
  </back>
</rfc>
