<?xml version='1.0' ?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<rfc ipr='trust200811' docName='draft-ietf-ecrit-lost-servicelistboundary-02' >
    <?rfc toc='yes' ?>
    <?rfc tocompact='no' ?>
    <?rfc compact='yes' ?>
    <?rfc subcompact='yes' ?>
    <front> 
      <title abbrev='serviceListBoundary'>
		Location-to-Service Translation Protocol (LoST) Extension: &lt;serviceListBoundary&gt;
      </title>

      <author initials='K. H.' surname='Wolf' fullname='Karl Heinz Wolf'>
        <organization abbrev='nic.at'>
          nic.at GmbH
        </organization>
        <address>
          <postal>
            <street>Karlsplatz 1/2/9</street>
            <city>Wien</city>
            <code>A-1010</code>
            <country>Austria</country>
          </postal>
          <phone>+43 1 5056416 37</phone>
          <email>karlheinz.wolf@nic.at</email>
          <uri>http://www.nic.at/</uri>
        </address>
      </author>

      


      <date month='February' year='2010' day='9'/>
      <area>RAI</area>
      <workgroup>ECRIT</workgroup>
      <keyword>LoST</keyword>
      <keyword>listservicesbylocation</keyword>
      <keyword>boundary</keyword>
      
      <abstract>

	<t>
                       LoST maps service identifiers and location information to service
                       contact URIs. If a LoST client wants to discover available services
                       for a particular location, it will perform a &lt;listServicesByLocation&gt;
                       query to the LoST server. However, the LoST server, in its response,
                       does not provide context information, that is, it does not provide
                 any additional information about the geographical region for which
                       the returned list of services is considered valid within. Therefore, this document
                       proposes a &lt;serviceListBoundary&gt; element that returns a local context along
                 with the list of services returned, in order to assist the client to not miss a
                       change in available services when moving.
	</t>

      </abstract>
    </front>


    <middle>

      <section anchor='intro' title='Introduction'>
        <t>
Location based service providers as well as Public Safety Answering Points (PSAPs) only serve a specific geographic region. Therefore the LoST protocol <xref target='RFC5222'></xref> defines the Service Boundary, which indicates the service region for a specific service URL.
However, not all services are available everywhere. Clients can discover available services for a particular location by the &lt;listServicesByLocation&gt; query in LoST. The LoST server returns a list of services that are available at this particular location. But the server does not inform the client as to the extent of coverage for which geographical region the returned Service List is valid. This may lead to the situation where a client initially discovers all available services by the &lt;listServicesByLocation&gt; query, and then moves to a different location (while refreshing the service mappings), but without noticing the availability of other services.
The following imaginary example illustrates the problem for emergency calling:
</t><t>
The client is powered-up, does location determination (resulting in location A) and performs an initial &lt;listServicesByLocation&gt; query with location A requesting urn:services:sos.
</t><t>
The LoST server returns the following list of services:
</t>

<artwork align="left"><![CDATA[
urn:service:sos.police
urn:service:sos.ambulance
urn:service:sos.fire
]]></artwork>

<t>
The client does the initial LoST mapping and discovers the dialstrings for each service. Then the client moves, refreshing the individual service mappings when necessary as told by the Service Boundary. However, when arriving in location B (close to a mountain), service sos.mountainrescue is available, which was not available in location A. Nevertheless, the client does not detect this, because only the mapping of the initially discovered services (police, ambulance, fire) are refreshed. Consequently, the dialstring for the mountain rescue is not known by the client. Hence, the client is unable to recognize an emergency call when the user enters the dialstring of the mountain rescue and thus the emergency call may fail altogether. 
</t><t>
Note that the Service Boundary (service region for an individual service) cannot be considered as an indicator for the region a specific Service List is valid for. The Service List may even change within the Service Boundary of another service. For example, the ambulance mapping is valid for a whole state, but for a part of the state there is an additional mountain rescue service.

</t> <t>

Consequently, there are two ways to tackle this issue:

</t>

  <list style='symbols'>
    <t>clients continuously ask for the Service List, although it may not have changed</t>
    <t>a boundary information (telling the client that the Service List does not change inside this area)</t>
  </list>

<t>
Since the LoST protocol employs the Service Boundary concept in order to
  avoid having clients continuously trying to refresh the mapping of a
  specific service, a Service List Boundary mechanism would provide similar
  advantages for Service Lists.
</t>


      </section>


      <section anchor='terminology' title='Terminology'>
	<t>
	The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
	"SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in 
	this document are to be interpreted as described in
	<xref target='RFC2119'>RFC 2119</xref>.
	</t>
      </section>


<section anchor='ext' title='LoST Extensions'>

  <t>This chapter describes the necessary modifications to the LoST protocol in order to support the proposed &lt;serviceListBoundary&gt; in a similar way as the &lt;serviceBoundary&gt;.
  </t>

	<section anchor='extListServicesByLocation' title='Extensions to &lt;listServicesByLocation&gt;'>

<t>
  The query &lt;listServicesByLocation&gt; may contain an additional
  &lt;serviceListBoundaryRequest&gt; element to additionally request the boundary for the service
  list based on the location provided, with the resulting location for the list to be presented either
in a by value or by reference form.
In the example below the value of the &lt;serviceListBoundaryRequest&gt; element is set to "value": 
</t>

<artwork align="left"><![CDATA[
   <?xml version="1.0" encoding="UTF-8"?>
   <listServicesByLocation
      xmlns="urn:ietf:params:xml:ns:lost1"
      xmlns:gml="http://www.opengis.net/gml"
      xmlns:slb="urn:ietf:params:xml:schema:lost1:slb"
      recursive="true">
     <location id="5415203asdf548" profile="civic">
       <civicAddress xml:lang="en"
         xmlns="urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr">
         <country>AT</country>
         <A1>Lower Austria</A1>
	 <A2>Bruck an der Leitha</A2>
         <A3>Wolfsthal</A3>
         <RD>Hauptplatz</RD>
         <HNO>1</HNO>
         <PC>2412</PC>
       </civicAddress>
     </location>
     <service>urn:service:sos</service>
     <slb:serviceListBoundaryRequest>value</slb:serviceListBoundaryRequest>
   </listServicesByLocation>
]]></artwork>


<t>
A possible response is shown below:
</t>

<artwork align="left"><![CDATA[
  <?xml version="1.0" encoding="UTF-8"?>
  <listServicesByLocationResponse
     xmlns="urn:ietf:params:xml:ns:lost1">
     xmlns:slb="urn:ietf:params:xml:schema:lost1:slb"
    <serviceList expires="2010-01-01T00:00:00Z">
      urn:service:sos.ambulance
      urn:service:sos.fire
      urn:service:sos.gas
      urn:service:sos.mountain
      urn:service:sos.poison
      urn:service:sos.police
    </serviceList>
    <path>
      <via source="resolver.example"/>
      <via source="authoritative.example"/>
    </path>
    <locationUsed id="5415203asdf548"/>
    <slb:serviceListBoundary profile="civic">
      <civicAddress xml:lang="en"
        xmlns="urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr">
        <country>AT</country>
        <A1>Lower Austria</A1>
      </civicAddress>
    </slb:serviceListBoundary>
  </listServicesByLocationResponse>

]]></artwork>

<t>
This response above indicates that the Service List is valid for Lower Austria. The &lt;listServicesByLocation&gt; request has to be repeated by the client only when moving out of Lower Austria. However, the mappings of the services itself may have other service boundaries. Additionally, the expires attribute indicates the absolute time when this Service List becomes invalid.
</t>
<t>The boundary can also be requested by reference when setting the value of the &lt;serviceListBoundaryRequest&gt; element to "reference". Then the response contains a &lt;serviceListBoundaryReference&gt; element, as shown below.

</t>

<artwork align="left"><![CDATA[
   <?xml version="1.0" encoding="UTF-8"?>
   <listServicesByLocationResponse
      xmlns="urn:ietf:params:xml:ns:lost1">
      xmlns:slb="urn:ietf:params:xml:schema:lost1:slb"
     <serviceList expires="2010-01-01T00:00:00Z">
       urn:service:sos.ambulance
       urn:service:sos.fire
       urn:service:sos.gas
       urn:service:sos.mountain
       urn:service:sos.poison
       urn:service:sos.police
     </serviceList>
     <path>
       <via source="resolver.example"/>
       <via source="authoritative.example"/>
     </path>
     <locationUsed id="5415203asdf548"/>
     <serviceListBoundaryReference
       source="authoritative.example"
       serviceListKey="123567890123567890123567890" />
   </listServicesByLocationResponse>
]]></artwork>


	</section>    

	<section anchor='extgetServiceListBoundary' title='Retrieving the &lt;serviceListBoundary&gt; via &lt;getServiceListBoundary&gt;'>

<t>In order to retrieve the boundary corresponding a specific 'serviceListKey', the client issues a &lt;getServiceListBoundary&gt; request to the server identified in the 'source' attribute of the &lt;serviceListBoundaryReference&gt; element, similar to the &lt;getServiceBoundary&gt; request.
</t>
<t>An example is shown below:
</t>

<artwork align="left"><![CDATA[
   <?xml version="1.0" encoding="UTF-8"?>
   <getServiceListBoundary xmlns="urn:ietf:params:xml:ns:lost1"
       serviceListKey="123567890123567890123567890"/>

]]></artwork>

<t>
The LoST server response is shown below:
</t>

<artwork align="left"><![CDATA[
   <?xml version="1.0" encoding="UTF-8"?>
   <getServiceListBoundaryResponse xmlns="urn:ietf:params:xml:schema:lost1:slb">
     <serviceListBoundary profile="civic" expires="2010-01-01T00:00:00Z">
       <civicAddress xml:lang="en"
          xmlns="urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr">
         <country>AT</country>
         <A1>Lower Austria</A1>
       </civicAddress>
     </serviceListBoundary>
     <path>
       <via source="resolver.example"/>
       <via source="authoritative.example"/>
     </path>
   </getServiceListBoundaryResponse>

]]></artwork>

<t>
The 'serviceListKey' uniquely identifies a Service List Boundary as the 'key' does for the service boundary (see Section 5.6 in RFC 5222). Therefore the 'serviceListKey' is a random token with at least 128 bits of entropy and can be assumed globally unique. Whenever the boundary changes, a new 'serviceListKey' MUST be assigned. 
</t>


<!--TBD: For &lt;getServiceListBoundary&gt; an attribute in the request could be used to indicate which profile the client understands (e.g. &lt;getServiceListBoundary profile="civic"... ) -->
<t>
Note: since LoST does not define an attribute to indicate which profile the clients understands in a &lt;getServiceListBoundary&gt; request, this document also does not define one for the &lt;getServiceListBoundary&gt; request.
</t>

	</section>

	<section anchor='extserviceListBoundary' title='&lt;serviceListBoundary&gt;'>
<t>
The &lt;serviceListBoundary&gt; information that gets returned, indicates the geographic region in which all the service identifiers returned from a &lt;serviceList&gt; element are the same, within a &lt;listServicesByLocation&gt; query.
A &lt;serviceListBoundary&gt; may consist of geometric shapes (both in civic and geodetic location format), and may be non-contiguous, like the Service Boundary.

</t><t>

The mapping of the specific services within the Service List Boundary may be different at different locations.

</t>


<t>
The server may return the boundary information in multiple profiles, but has to use at least one profile that the client used in the request in order to ensure that the client is able to process the boundary information. 
</t>

<t>
There is no need to include boundary information to a &lt;listServicesResponse&gt;. &lt;ListServices&gt; requests are purely for diagnostic purposes and do not contain location information at all, so no boundary information is reasonable.
</t>


<t>
Also note that the &lt;serviceListBoundary&gt; is optional and the LoST server may return it or not based on its local policy - like it is the case with the Service Boundary. However, especially for emergency services, the &lt;serviceListBoundary&gt; might be crucial to ensure that moving clients do not miss changes in the available services. 
</t>

</section>

<section anchor='impl' title='Implementation Considerations'>

<t>
The subsections below discuss implementation issues for the LoST server and client for the serviceListBoundary support. 
</t>

<section anchor='impls' title='Server Side'>

<t>
The mapping architecture and framework <xref target='RFC5582'></xref> describes that each tree announces its coverage region (for one type of service, e.g. sos.police) to one or more forest guides. Forest guides peer with each other and synchronize their data. Hence, a forest guide has sufficient knowledge (it knows all the services and their coverage regions) to answer a &lt;listServicesByLocation&gt; query and additionally add the &lt;serviceListBoundary&gt; as well. 
</t>

<t>
The calculation of the largest possible area for which the Service List stays the same might be a complex task. An alternative would be to return smaller areas that are easier to compute. In such a case some unneeded queries to the LoST server are the consequence, but still the main purpose of the &lt;serviceListBoundary&gt; is achieved: Never miss a change of available services. So a reasonable trade-off between the effort to generate the boundary information and the saved queries to the LoST server has to be considered. 
</t><t>
Probably for some countries the county (or disrict, canton, state, ...) borders would be suitable as &lt;serviceListBoundary&gt;. Some neighbouring counties may have implemented different services while a &lt;listServicesByLocation&gt; query in other neighbouring counties still results in the same Service List. So when moving across a county border, it is at least ensured, that every device fetches a new Service List from the LoST server.
</t><t>
Other countries might have different structures and the generation of the &lt;serviceListBoundary&gt; might follow other rules as long as it is ensured that a client is able to notice any change in the Service List when moving. 
</t>
</section>

<section anchor='implc' title='Client Side'>
<t>
A mobile client that already implements LoST and evaluates the &lt;serviceBoundary&gt; has almost everything that is needed to make use of the &lt;serviceListBoundary&gt;. Since the integration into LoST follows the concept of the &lt;serviceBoundary&gt; (and also makes use of the same location profiles), just the additional &lt;serviceListBoundary&gt; has to be evaluated. Whenever moving outside a &lt;serviceListBoundary&gt;, the client must perform a new &lt;listServicesByLocation&gt; query with the new location information in order to determine a change in available services.  
</t>
</section>



</section>

</section>


    <section anchor='security' title='Security & Privacy Considerations'>
        <t>
Security considerations for LoST are discussed in RFC5222. This
document extends LoST to also carry Service List Boundaries (and
requests for them). These Service List Boundaries are calculated by
the server based on the individual Service Boundaries and sent to
clients in case the local policy allows this. Therefore it is
generally considered to have the same level of sensitivity as for the
Service Boundary and thus the same access control and confidentiality
requirements as the base LoST protocol. As a result, the security
measures incorporated in the base LoST specification provide
sufficient protection for LoST messages that use the Service List
Boundary extension.
	</t>
    </section>

    <section anchor='iana' title='IANA Considerations'>
    
    <t>
    This document requests two actions by IANA: a XML schema registration and namespace registration, according to the description in the following sections.
    </t>
    
        <section anchor='iana_relax' title='Relax NG Schema Registration'>
        
        <t>
        This document requests registration of the following Relax NG Schema to the IETF XML Registry <xref target='RFC3688'></xref>: 
        </t>

<t>
URI:  urn:ietf:params:xml:schema:lost1:slb
</t>
<t>
Registrant Contact:  IETF ECRIT Working Group, Karl Heinz Wolf (karlheinz.wolf@nic.at)
</t>
<t>
Relax NG Schema:
</t>
       
          
    <artwork align="left"><![CDATA[   
BEGIN 
        
<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns="urn:ietf:params:xml:ns:lost1"
   xmlns:slb="urn:ietf:params:xml:ns:lost1:slb">

  <include href="lost.rng">
  <!-- redefinition of LoST elements -->

    <start>
      <choice>
        <ref name="findService"/>
        <ref name="listServices"/>
        <ref name="listServicesByLocation"/>
        <ref name="getServiceBoundary"/>
        <ref name="findServiceResponse"/>
        <ref name="listServicesResponse"/>
        <ref name="listServicesByLocationResponse"/>
        <ref name="getServiceBoundaryResponse"/>
        <ref name="errors"/>
        <ref name="redirect"/>
        <ref name="slb:getServiceListBoundary"/>
        <ref name="slb:getServiceListBoundaryResponse"/>
      </choice>
    </start>

    <define name="listServicesByLocation">
      <element name="listServicesByLocation">
        <ref name="commonRequestPattern"/>
          <ref name="slb:serviceListBoundaryRequest"/>
      </element>
    </define>

    <define name="listServicesByLocationResponse">
      <element name="listServicesByLocationResponse">
        <ref name="serviceList"/>
        <ref name="commonResponsePattern"/>
        <ref name="locationUsed"/>
        <choice>
          <ref name="slb:serviceListBoundaryResponse"/>
          <ref name="slb:serviceListBoundaryReference"/>
        </choice>
      </element>
    </define>

  </include>

    <define name="serviceListBoundaryRequest">
      <element name="serviceListBoundary">
        <ref name="slb:serviceListBoundary"/>
        <choice>
          <value>value</value>
          <value>reference</value>
        </choice>
      </element>
    </define>

    <define name="serviceListBoundaryResponse">
      <element name="serviceListBoundary">
        <ref name="slb:serviceListBoundary"/>
        <attribute name="profile"/>
          <ref name="locationInformation"/>
      </element>
    </define>

    <define name="serviceListBoundaryReference">
      <element name="serviceListBoundaryReference">
        <ref name="slb:serviceListBoundaryReference"/>
        <attribute name="source"/>
        <attribute name="serviceListKey"/>
      </element>
    </define>

    <define name="getServiceListBoundary">
      <element name="getServiceListBoundary">
        <ref name="slb:getServiceListBoundary"/>
        <attribute name="serviceListKey"/>
      </element>
    </define>

    <define name="getServiceListBoundaryResponse">
      <element name="getServiceListBoundaryResponse">
        <ref name="slb:getServiceListBoundaryResponse"/>
        <attribute name="serviceListKey"/>
        <ref name="slb:serviceListBoundary"/>
        <ref name="path"/>
      </element>
    </define>

</grammar>  
END
]]></artwork>
        
    
    </section> 
    <section anchor='iana_ns' title='Namespace Registration'>
        
    
        <t>
        This document requests registration of the following namespace (below the LoST namespace defined in <xref target='RFC5222'></xref>) to the IETF XML Registry <xref target='RFC3688'></xref>: 
        </t>    
        
        
<t>
URI:  urn:ietf:params:xml:ns:lost1:slb
</t>
<t>
Registrant Contact:  IETF ECRIT Working Group, Karl Heinz Wolf (karlheinz.wolf@nic.at)
</t>
<t>        
XML: 
  </t>         
<artwork align="left"><![CDATA[
BEGIN

<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.0//EN"
  "http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="content-type"
        content="text/html;charset=iso-8859-1"/>
  <title>LoST serviceListBoundary Namespace</title>
</head>
<body>
  <h1>Namespace for the LoST Service List Boundary</h1>
  <h2>urn:ietf:params:xml:ns:lost1:slb</h2>
<p>See <a href="http://www.rfc-editor.org/rfc/rfcXXXX.txt">
   RFCXXXX</a>.</p>
</body>
</html>

END
]]></artwork>
        
    </section>
    </section>

	<section anchor='ack' title='Acknowledgement'>
	<t>
The author would like to thank Henning Schulzrinne for the discussion on the draft and Martin Thomson, Richard Barnes and Roger Marshall for their valuable input and text suggestions during the WGLC.
	</t>
	</section>

  </middle>
  
  <back>
    <references title='Normative References'>

      <?rfc include="reference.RFC.5222" ?>
      <?rfc include="reference.RFC.5582" ?>
      <?rfc include="reference.RFC.2119" ?>
      <?rfc include="reference.RFC.3688" ?>

      
    </references>

  </back>
  
</rfc>

