


HTTPbis Working Group                                   R. Fielding, Ed.
Internet-Draft                                              Day Software
Obsoletes: 2616 (if approved)                                  J. Gettys
Intended status: Standards Track                    One Laptop per Child
Expires: January 14, 2010                                       J. Mogul
                                                                      HP
                                                              H. Frystyk
                                                               Microsoft
                                                             L. Masinter
                                                           Adobe Systems
                                                                P. Leach
                                                               Microsoft
                                                          T. Berners-Lee
                                                                 W3C/MIT
                                                           Y. Lafon, Ed.
                                                                     W3C
                                                         J. Reschke, Ed.
                                                              greenbytes
                                                           July 13, 2009


        HTTP/1.1, part 1: URIs, Connections, and Message Parsing
                   draft-ietf-httpbis-p1-messaging-07

Status of this Memo

   This Internet-Draft is submitted to IETF in full conformance with the
   provisions of BCP 78 and BCP 79.  This document may contain material
   from IETF Documents or IETF Contributions published or made publicly
   available before November 10, 2008.  The person(s) controlling the
   copyright in some of this material may not have granted the IETF
   Trust the right to allow modifications of such material outside the
   IETF Standards Process.  Without obtaining an adequate license from
   the person(s) controlling the copyright in such materials, this
   document may not be modified outside the IETF Standards Process, and
   derivative works of it may not be created outside the IETF Standards
   Process, except to format it for publication as an RFC or to
   translate it into languages other than English.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."



Fielding, et al.        Expires January 14, 2010                [Page 1]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on January 14, 2010.

Copyright Notice

   Copyright (c) 2009 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents in effect on the date of
   publication of this document (http://trustee.ietf.org/license-info).
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Abstract

   The Hypertext Transfer Protocol (HTTP) is an application-level
   protocol for distributed, collaborative, hypertext information
   systems.  HTTP has been in use by the World Wide Web global
   information initiative since 1990.  This document is Part 1 of the
   seven-part specification that defines the protocol referred to as
   "HTTP/1.1" and, taken together, obsoletes RFC 2616.  Part 1 provides
   an overview of HTTP and its associated terminology, defines the
   "http" and "https" Uniform Resource Identifier (URI) schemes, defines
   the generic message syntax and parsing requirements for HTTP message
   frames, and describes general security concerns for implementations.

Editorial Note (To be removed by RFC Editor)

   Discussion of this draft should take place on the HTTPBIS working
   group mailing list (ietf-http-wg@w3.org).  The current issues list is
   at <http://tools.ietf.org/wg/httpbis/trac/report/11> and related
   documents (including fancy diffs) can be found at
   <http://tools.ietf.org/wg/httpbis/>.

   The changes in this draft are summarized in Appendix E.8.










Fielding, et al.        Expires January 14, 2010                [Page 2]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  6
     1.1.  Requirements . . . . . . . . . . . . . . . . . . . . . . .  7
     1.2.  Syntax Notation  . . . . . . . . . . . . . . . . . . . . .  7
       1.2.1.  ABNF Extension: #rule  . . . . . . . . . . . . . . . .  7
       1.2.2.  Basic Rules  . . . . . . . . . . . . . . . . . . . . .  8
       1.2.3.  ABNF Rules defined in other Parts of the
               Specification  . . . . . . . . . . . . . . . . . . . .  9
   2.  HTTP architecture  . . . . . . . . . . . . . . . . . . . . . . 10
     2.1.  Uniform Resource Identifiers . . . . . . . . . . . . . . . 10
       2.1.1.  http URI scheme  . . . . . . . . . . . . . . . . . . . 11
       2.1.2.  https URI scheme . . . . . . . . . . . . . . . . . . . 11
       2.1.3.  URI Comparison . . . . . . . . . . . . . . . . . . . . 11
       2.1.4.  Scheme aliases considered harmful  . . . . . . . . . . 12
     2.2.  Overall Operation  . . . . . . . . . . . . . . . . . . . . 12
     2.3.  Use of HTTP for proxy communication  . . . . . . . . . . . 14
     2.4.  Interception of HTTP for access control  . . . . . . . . . 14
     2.5.  Use of HTTP by other protocols . . . . . . . . . . . . . . 14
     2.6.  Use of HTTP by media type specification  . . . . . . . . . 14
   3.  Protocol Parameters  . . . . . . . . . . . . . . . . . . . . . 14
     3.1.  HTTP Version . . . . . . . . . . . . . . . . . . . . . . . 14
     3.2.  Date/Time Formats: Full Date . . . . . . . . . . . . . . . 15
     3.3.  Transfer Codings . . . . . . . . . . . . . . . . . . . . . 18
       3.3.1.  Chunked Transfer Coding  . . . . . . . . . . . . . . . 19
     3.4.  Product Tokens . . . . . . . . . . . . . . . . . . . . . . 21
     3.5.  Quality Values . . . . . . . . . . . . . . . . . . . . . . 22
   4.  HTTP Message . . . . . . . . . . . . . . . . . . . . . . . . . 22
     4.1.  Message Types  . . . . . . . . . . . . . . . . . . . . . . 22
     4.2.  Message Headers  . . . . . . . . . . . . . . . . . . . . . 23
     4.3.  Message Body . . . . . . . . . . . . . . . . . . . . . . . 24
     4.4.  Message Length . . . . . . . . . . . . . . . . . . . . . . 25
     4.5.  General Header Fields  . . . . . . . . . . . . . . . . . . 27
   5.  Request  . . . . . . . . . . . . . . . . . . . . . . . . . . . 27
     5.1.  Request-Line . . . . . . . . . . . . . . . . . . . . . . . 27
       5.1.1.  Method . . . . . . . . . . . . . . . . . . . . . . . . 28
       5.1.2.  request-target . . . . . . . . . . . . . . . . . . . . 28
     5.2.  The Resource Identified by a Request . . . . . . . . . . . 30
   6.  Response . . . . . . . . . . . . . . . . . . . . . . . . . . . 30
     6.1.  Status-Line  . . . . . . . . . . . . . . . . . . . . . . . 31
       6.1.1.  Status Code and Reason Phrase  . . . . . . . . . . . . 31
   7.  Connections  . . . . . . . . . . . . . . . . . . . . . . . . . 32
     7.1.  Persistent Connections . . . . . . . . . . . . . . . . . . 32
       7.1.1.  Purpose  . . . . . . . . . . . . . . . . . . . . . . . 32
       7.1.2.  Overall Operation  . . . . . . . . . . . . . . . . . . 32
       7.1.3.  Proxy Servers  . . . . . . . . . . . . . . . . . . . . 34
       7.1.4.  Practical Considerations . . . . . . . . . . . . . . . 34
     7.2.  Message Transmission Requirements  . . . . . . . . . . . . 35



Fielding, et al.        Expires January 14, 2010                [Page 3]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


       7.2.1.  Persistent Connections and Flow Control  . . . . . . . 35
       7.2.2.  Monitoring Connections for Error Status Messages . . . 35
       7.2.3.  Use of the 100 (Continue) Status . . . . . . . . . . . 36
       7.2.4.  Client Behavior if Server Prematurely Closes
               Connection . . . . . . . . . . . . . . . . . . . . . . 38
   8.  Header Field Definitions . . . . . . . . . . . . . . . . . . . 38
     8.1.  Connection . . . . . . . . . . . . . . . . . . . . . . . . 39
     8.2.  Content-Length . . . . . . . . . . . . . . . . . . . . . . 40
     8.3.  Date . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
       8.3.1.  Clockless Origin Server Operation  . . . . . . . . . . 41
     8.4.  Host . . . . . . . . . . . . . . . . . . . . . . . . . . . 42
     8.5.  TE . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42
     8.6.  Trailer  . . . . . . . . . . . . . . . . . . . . . . . . . 44
     8.7.  Transfer-Encoding  . . . . . . . . . . . . . . . . . . . . 44
     8.8.  Upgrade  . . . . . . . . . . . . . . . . . . . . . . . . . 45
     8.9.  Via  . . . . . . . . . . . . . . . . . . . . . . . . . . . 46
   9.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 47
     9.1.  Message Header Registration  . . . . . . . . . . . . . . . 47
     9.2.  URI Scheme Registration  . . . . . . . . . . . . . . . . . 48
     9.3.  Internet Media Type Registrations  . . . . . . . . . . . . 48
       9.3.1.  Internet Media Type message/http . . . . . . . . . . . 48
       9.3.2.  Internet Media Type application/http . . . . . . . . . 49
   10. Security Considerations  . . . . . . . . . . . . . . . . . . . 50
     10.1. Personal Information . . . . . . . . . . . . . . . . . . . 51
     10.2. Abuse of Server Log Information  . . . . . . . . . . . . . 51
     10.3. Attacks Based On File and Path Names . . . . . . . . . . . 51
     10.4. DNS Spoofing . . . . . . . . . . . . . . . . . . . . . . . 51
     10.5. Proxies and Caching  . . . . . . . . . . . . . . . . . . . 52
     10.6. Denial of Service Attacks on Proxies . . . . . . . . . . . 53
   11. Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 53
   12. References . . . . . . . . . . . . . . . . . . . . . . . . . . 54
     12.1. Normative References . . . . . . . . . . . . . . . . . . . 54
     12.2. Informative References . . . . . . . . . . . . . . . . . . 55
   Appendix A.  Tolerant Applications . . . . . . . . . . . . . . . . 57
   Appendix B.  Compatibility with Previous Versions  . . . . . . . . 58
     B.1.  Changes from HTTP/1.0  . . . . . . . . . . . . . . . . . . 59
       B.1.1.  Changes to Simplify Multi-homed Web Servers and
               Conserve IP Addresses  . . . . . . . . . . . . . . . . 59
     B.2.  Compatibility with HTTP/1.0 Persistent Connections . . . . 59
     B.3.  Changes from RFC 2068  . . . . . . . . . . . . . . . . . . 60
     B.4.  Changes from RFC 2616  . . . . . . . . . . . . . . . . . . 61
   Appendix C.  Terminology . . . . . . . . . . . . . . . . . . . . . 61
   Appendix D.  Collected ABNF  . . . . . . . . . . . . . . . . . . . 64
   Appendix E.  Change Log (to be removed by RFC Editor before
                publication)  . . . . . . . . . . . . . . . . . . . . 69
     E.1.  Since RFC2616  . . . . . . . . . . . . . . . . . . . . . . 69
     E.2.  Since draft-ietf-httpbis-p1-messaging-00 . . . . . . . . . 69
     E.3.  Since draft-ietf-httpbis-p1-messaging-01 . . . . . . . . . 70



Fielding, et al.        Expires January 14, 2010                [Page 4]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


     E.4.  Since draft-ietf-httpbis-p1-messaging-02 . . . . . . . . . 71
     E.5.  Since draft-ietf-httpbis-p1-messaging-03 . . . . . . . . . 72
     E.6.  Since draft-ietf-httpbis-p1-messaging-04 . . . . . . . . . 72
     E.7.  Since draft-ietf-httpbis-p1-messaging-05 . . . . . . . . . 73
     E.8.  Since draft-ietf-httpbis-p1-messaging-06 . . . . . . . . . 74
   Index  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 78












































Fielding, et al.        Expires January 14, 2010                [Page 5]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


1.  Introduction

   The Hypertext Transfer Protocol (HTTP) is an application-level
   request/response protocol that uses extensible semantics and MIME-
   like message payloads for flexible interaction with network-based
   hypertext information systems.  HTTP relies upon the Uniform Resource
   Identifier (URI) standard [RFC3986] to indicate request targets and
   relationships between resources.  Messages are passed in a format
   similar to that used by Internet mail [RFC5322] and the Multipurpose
   Internet Mail Extensions (MIME) [RFC2045] (see Appendix A of [Part3]
   for the differences between HTTP and MIME messages).

   HTTP is a generic interface protocol for information systems.  It is
   designed to hide the details of how a service is implemented by
   presenting a uniform interface to clients that is independent of the
   types of resources provided.  Likewise, servers do not need to be
   aware of each client's purpose: an HTTP request can be considered in
   isolation rather than being associated with a specific type of client
   or a predetermined sequence of application steps.  The result is a
   protocol that can be used effectively in many different contexts and
   for which implementations can evolve independently over time.

   HTTP is also designed for use as a generic protocol for translating
   communication to and from other Internet information systems.  HTTP
   proxies and gateways provide access to alternative information
   services by translating their diverse protocols into a hypertext
   format that can be viewed and manipulated by clients in the same way
   as HTTP services.

   One consequence of HTTP flexibility is that the protocol cannot be
   defined in terms of what occurs behind the interface.  Instead, we
   are limited to defining the syntax of communication, the intent of
   received communication, and the expected behavior of recipients.  If
   the communication is considered in isolation, then successful actions
   should be reflected in corresponding changes to the observable
   interface provided by servers.  However, since multiple clients may
   act in parallel and perhaps at cross-purposes, we cannot require that
   such changes be observable beyond the scope of a single response.

   This document is Part 1 of the seven-part specification of HTTP,
   defining the protocol referred to as "HTTP/1.1" and obsoleting
   [RFC2616].  Part 1 describes the architectural elements that are used
   or referred to in HTTP and defines the URI schemes specific to HTTP-
   based resources, overall network operation, connection management,
   and HTTP message framing and forwarding requirements.  Our goal is to
   define all of the mechanisms necessary for HTTP message handling that
   are independent of message semantics, thereby defining the complete
   set of requirements for message parsers and message-forwarding



Fielding, et al.        Expires January 14, 2010                [Page 6]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   intermediaries.

1.1.  Requirements

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   An implementation is not compliant if it fails to satisfy one or more
   of the MUST or REQUIRED level requirements for the protocols it
   implements.  An implementation that satisfies all the MUST or
   REQUIRED level and all the SHOULD level requirements for its
   protocols is said to be "unconditionally compliant"; one that
   satisfies all the MUST level requirements but not all the SHOULD
   level requirements for its protocols is said to be "conditionally
   compliant."

1.2.  Syntax Notation

   This specification uses the Augmented Backus-Naur Form (ABNF)
   notation of [RFC5234].

   The following core rules are included by reference, as defined in
   [RFC5234], Appendix B.1: ALPHA (letters), CR (carriage return), CRLF
   (CR LF), CTL (controls), DIGIT (decimal 0-9), DQUOTE (double quote),
   HEXDIG (hexadecimal 0-9/A-F/a-f), LF (line feed), OCTET (any 8-bit
   sequence of data), SP (space), VCHAR (any visible [USASCII]
   character), and WSP (whitespace).

1.2.1.  ABNF Extension: #rule

   One extension to the ABNF rules of [RFC5234] is used to improve
   readability.

   A construct "#" is defined, similar to "*", for defining lists of
   elements.  The full form is "<n>#<m>element" indicating at least <n>
   and at most <m> elements, each separated by a single comma (",") and
   optional whitespace (OWS).

   Thus,

     1#element => element *( OWS "," OWS element )

   and:

     #element => [ 1#element ]





Fielding, et al.        Expires January 14, 2010                [Page 7]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   and for n >= 1 and m > 1:

     <n>#<m>element => element <n-1>*<m-1>( OWS "," OWS element )

   For compatibility with legacy list rules, recipients SHOULD accept
   empty list elements.  In other words, consumers would follow the list
   productions:

     #element => [ ( "," / element ) *( OWS "," [ OWS element ] ) ]

     1#element => *( "," OWS ) element *( OWS "," [ OWS element ] )

   Appendix D shows the collected ABNF, with the list rules expanded as
   explained above.

1.2.2.  Basic Rules

   HTTP/1.1 defines the sequence CR LF as the end-of-line marker for all
   protocol elements except the entity-body (see Appendix A for tolerant
   applications).  The end-of-line marker within an entity-body is
   defined by its associated media type, as described in Section 2.3 of
   [Part3].

   This specification uses three rules to denote the use of linear
   whitespace: OWS (optional whitespace), RWS (required whitespace), and
   BWS ("bad" whitespace).

   The OWS rule is used where zero or more linear whitespace characters
   may appear.  OWS SHOULD either not be produced or be produced as a
   single SP character.  Multiple OWS characters that occur within
   field-content SHOULD be replaced with a single SP before interpreting
   the field value or forwarding the message downstream.

   RWS is used when at least one linear whitespace character is required
   to separate field tokens.  RWS SHOULD be produced as a single SP
   character.  Multiple RWS characters that occur within field-content
   SHOULD be replaced with a single SP before interpreting the field
   value or forwarding the message downstream.

   BWS is used where the grammar allows optional whitespace for
   historical reasons but senders SHOULD NOT produce it in messages.
   HTTP/1.1 recipients MUST accept such bad optional whitespace and
   remove it before interpreting the field value or forwarding the
   message downstream.







Fielding, et al.        Expires January 14, 2010                [Page 8]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


     OWS            = *( [ obs-fold ] WSP )
                    ; "optional" whitespace
     RWS            = 1*( [ obs-fold ] WSP )
                    ; "required" whitespace
     BWS            = OWS
                    ; "bad" whitespace
     obs-fold       = CRLF
                    ; see Section 4.2

   Many HTTP/1.1 header field values consist of words separated by
   whitespace or special characters.  These special characters MUST be
   in a quoted string to be used within a parameter value (as defined in
   Section 3.3).

     tchar          = "!" / "#" / "$" / "%" / "&" / "'" / "*"
                    / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
                    / DIGIT / ALPHA

     token          = 1*tchar

   A string of text is parsed as a single word if it is quoted using
   double-quote marks.

     quoted-string  = DQUOTE *( qdtext / quoted-pair ) DQUOTE
     qdtext         = OWS / %x21 / %x23-5B / %x5D-7E / obs-text
                    ; OWS / <VCHAR except DQUOTE and "\"> / obs-text
     obs-text       = %x80-FF

   The backslash character ("\") MAY be used as a single-character
   quoting mechanism only within quoted-string and comment constructs.

     quoted-text    = %x01-09 /
                      %x0B-0C /
                      %x0E-FF ; Characters excluding NUL, CR and LF
     quoted-pair    = "\" quoted-text

1.2.3.  ABNF Rules defined in other Parts of the Specification

   The ABNF rules below are defined in other parts:

     request-header  = <request-header, defined in [Part2], Section 3>
     response-header = <response-header, defined in [Part2], Section 5>


     entity-body     = <entity-body, defined in [Part3], Section 3.2>
     entity-header   = <entity-header, defined in [Part3], Section 3.1>





Fielding, et al.        Expires January 14, 2010                [Page 9]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


     Cache-Control   = <Cache-Control, defined in [Part6], Section 3.4>
     Pragma          = <Pragma, defined in [Part6], Section 3.4>
     Warning         = <Warning, defined in [Part6], Section 3.6>


2.  HTTP architecture

   HTTP was created with a specific architecture in mind, the World Wide
   Web, and has evolved over time to support the scalability needs of a
   worldwide hypertext system.  Much of that architecture is reflected
   in the terminology and syntax productions used to define HTTP.

2.1.  Uniform Resource Identifiers

   Uniform Resource Identifiers (URIs) [RFC3986] are used throughout
   HTTP as the means for identifying resources.  URI references are used
   to target requests, redirect responses, and define relationships.
   HTTP does not limit what a resource may be; it merely defines an
   interface that can be used to interact with a resource via HTTP.
   More information on the scope of URIs and resources can be found in
   [RFC3986].

   This specification adopts the definitions of "URI-reference",
   "absolute-URI", "relative-part", "fragment", "port", "host", "path-
   abempty", "path-absolute", "query", and "authority" from [RFC3986].
   In addition, we define a partial-URI rule for protocol elements that
   allow a relative URI without a fragment.

     URI           = <URI, defined in [RFC3986], Section 3>
     URI-reference = <URI-reference, defined in [RFC3986], Section 4.1>
     absolute-URI  = <absolute-URI, defined in [RFC3986], Section 4.3>
     relative-part = <relative-part, defined in [RFC3986], Section 4.2>
     authority     = <authority, defined in [RFC3986], Section 3.2>
     fragment      = <fragment, defined in [RFC3986], Section 3.5>
     path-abempty  = <path-abempty, defined in [RFC3986], Section 3.3>
     path-absolute = <path-absolute, defined in [RFC3986], Section 3.3>
     port          = <port, defined in [RFC3986], Section 3.2.3>
     query         = <query, defined in [RFC3986], Section 3.4>
     uri-host      = <host, defined in [RFC3986], Section 3.2.2>

     partial-URI   = relative-part [ "?" query ]

   Each protocol element in HTTP that allows a URI reference will
   indicate in its ABNF production whether the element allows only a URI
   in absolute form (absolute-URI), any relative reference (relative-
   ref), or some other subset of the URI-reference grammar.  Unless
   otherwise indicated, URI references are parsed relative to the
   request target (the default base URI for both the request and its



Fielding, et al.        Expires January 14, 2010               [Page 10]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   corresponding response).

2.1.1.  http URI scheme

   The "http" scheme is used to locate network resources via the HTTP
   protocol.

     http-URI = "http:" "//" authority path-abempty [ "?" query ]

   If the port is empty or not given, port 80 is assumed.  The semantics
   are that the identified resource is located at the server listening
   for TCP connections on that port of that host, and the request-target
   for the resource is path-absolute (Section 5.1.2).  The use of IP
   addresses in URLs SHOULD be avoided whenever possible (see
   [RFC1900]).  If the path-absolute is not present in the URL, it MUST
   be given as "/" when used as a request-target for a resource
   (Section 5.1.2).  If a proxy receives a host name which is not a
   fully qualified domain name, it MAY add its domain to the host name
   it received.  If a proxy receives a fully qualified domain name, the
   proxy MUST NOT change the host name.

2.1.2.  https URI scheme

   [[anchor1: TBD: Define and explain purpose of https scheme.]]

      Note: the "https" scheme is defined in [RFC2818].

2.1.3.  URI Comparison

   When comparing two URIs to decide if they match or not, a client
   SHOULD use a case-sensitive octet-by-octet comparison of the entire
   URIs, with these exceptions:

   o  A port that is empty or not given is equivalent to the default
      port for that URI-reference;

   o  Comparisons of host names MUST be case-insensitive;

   o  Comparisons of scheme names MUST be case-insensitive;

   o  An empty path-absolute is equivalent to a path-absolute of "/".

   o  Characters other than those in the "reserved" set are equivalent
      to their percent-encoded octets (see [RFC3986], Section 2.1).

   For example, the following three URIs are equivalent:





Fielding, et al.        Expires January 14, 2010               [Page 11]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


      http://example.com:80/~smith/home.html
      http://EXAMPLE.com/%7Esmith/home.html
      http://EXAMPLE.com:/%7esmith/home.html

2.1.4.  Scheme aliases considered harmful

2.2.  Overall Operation

   HTTP is a request/response protocol.  A client sends a request to the
   server in the form of a request method, URI, and protocol version,
   followed by a MIME-like message containing request modifiers, client
   information, and possible body content over a connection with a
   server.  The server responds with a status line, including the
   message's protocol version and a success or error code, followed by a
   MIME-like message containing server information, entity
   metainformation, and possible entity-body content.

   Most HTTP communication is initiated by a user agent and consists of
   a request to be applied to a resource on some origin server.  In the
   simplest case, this may be accomplished via a single connection (v)
   between the user agent (UA) and the origin server (O).

          request chain ------------------------>
       UA -------------------v------------------- O
          <----------------------- response chain

   A more complicated situation occurs when one or more intermediaries
   are present in the request/response chain.  There are three common
   forms of intermediary: proxy, gateway, and tunnel.  A proxy is a
   forwarding agent, receiving requests for a URI in its absolute form,
   rewriting all or part of the message, and forwarding the reformatted
   request toward the server identified by the URI.  A gateway is a
   receiving agent, acting as a layer above some other server(s) and, if
   necessary, translating the requests to the underlying server's
   protocol.  A tunnel acts as a relay point between two connections
   without changing the messages; tunnels are used when the
   communication needs to pass through an intermediary (such as a
   firewall) even when the intermediary cannot understand the contents
   of the messages.

          request chain -------------------------------------->
       UA -----v----- A -----v----- B -----v----- C -----v----- O
          <------------------------------------- response chain

   The figure above shows three intermediaries (A, B, and C) between the
   user agent and origin server.  A request or response message that
   travels the whole chain will pass through four separate connections.
   This distinction is important because some HTTP communication options



Fielding, et al.        Expires January 14, 2010               [Page 12]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   may apply only to the connection with the nearest, non-tunnel
   neighbor, only to the end-points of the chain, or to all connections
   along the chain.  Although the diagram is linear, each participant
   may be engaged in multiple, simultaneous communications.  For
   example, B may be receiving requests from many clients other than A,
   and/or forwarding requests to servers other than C, at the same time
   that it is handling A's request.

   Any party to the communication which is not acting as a tunnel may
   employ an internal cache for handling requests.  The effect of a
   cache is that the request/response chain is shortened if one of the
   participants along the chain has a cached response applicable to that
   request.  The following illustrates the resulting chain if B has a
   cached copy of an earlier response from O (via C) for a request which
   has not been cached by UA or A.

             request chain ---------->
          UA -----v----- A -----v----- B - - - - - - C - - - - - - O
             <--------- response chain

   Not all responses are usefully cacheable, and some requests may
   contain modifiers which place special requirements on cache behavior.
   HTTP requirements for cache behavior and cacheable responses are
   defined in Section 1 of [Part6].

   In fact, there are a wide variety of architectures and configurations
   of caches and proxies currently being experimented with or deployed
   across the World Wide Web. These systems include national hierarchies
   of proxy caches to save transoceanic bandwidth, systems that
   broadcast or multicast cache entries, organizations that distribute
   subsets of cached data via CD-ROM, and so on.  HTTP systems are used
   in corporate intranets over high-bandwidth links, and for access via
   PDAs with low-power radio links and intermittent connectivity.  The
   goal of HTTP/1.1 is to support the wide diversity of configurations
   already deployed while introducing protocol constructs that meet the
   needs of those who build web applications that require high
   reliability and, failing that, at least reliable indications of
   failure.

   HTTP communication usually takes place over TCP/IP connections.  The
   default port is TCP 80
   (<http://www.iana.org/assignments/port-numbers>), but other ports can
   be used.  This does not preclude HTTP from being implemented on top
   of any other protocol on the Internet, or on other networks.  HTTP
   only presumes a reliable transport; any protocol that provides such
   guarantees can be used; the mapping of the HTTP/1.1 request and
   response structures onto the transport data units of the protocol in
   question is outside the scope of this specification.



Fielding, et al.        Expires January 14, 2010               [Page 13]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   In HTTP/1.0, most implementations used a new connection for each
   request/response exchange.  In HTTP/1.1, a connection may be used for
   one or more request/response exchanges, although connections may be
   closed for a variety of reasons (see Section 7.1).

2.3.  Use of HTTP for proxy communication

   [[anchor2: TBD: Configured to use HTTP to proxy HTTP or other
   protocols.]]

2.4.  Interception of HTTP for access control

   [[anchor3: TBD: Interception of HTTP traffic for initiating access
   control.]]

2.5.  Use of HTTP by other protocols

   [[anchor4: TBD: Profiles of HTTP defined by other protocol.
   Extensions of HTTP like WebDAV.]]

2.6.  Use of HTTP by media type specification

   [[anchor5: TBD: Instructions on composing HTTP requests via hypertext
   formats.]]


3.  Protocol Parameters

3.1.  HTTP Version

   HTTP uses a "<major>.<minor>" numbering scheme to indicate versions
   of the protocol.  The protocol versioning policy is intended to allow
   the sender to indicate the format of a message and its capacity for
   understanding further HTTP communication, rather than the features
   obtained via that communication.  No change is made to the version
   number for the addition of message components which do not affect
   communication behavior or which only add to extensible field values.
   The <minor> number is incremented when the changes made to the
   protocol add features which do not change the general message parsing
   algorithm, but which may add to the message semantics and imply
   additional capabilities of the sender.  The <major> number is
   incremented when the format of a message within the protocol is
   changed.  See [RFC2145] for a fuller explanation.

   The version of an HTTP message is indicated by an HTTP-Version field
   in the first line of the message.  HTTP-Version is case-sensitive.

     HTTP-Version   = HTTP-Prot-Name "/" 1*DIGIT "." 1*DIGIT



Fielding, et al.        Expires January 14, 2010               [Page 14]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


     HTTP-Prot-Name = %x48.54.54.50 ; "HTTP", case-sensitive

   Note that the major and minor numbers MUST be treated as separate
   integers and that each MAY be incremented higher than a single digit.
   Thus, HTTP/2.4 is a lower version than HTTP/2.13, which in turn is
   lower than HTTP/12.3.  Leading zeros MUST be ignored by recipients
   and MUST NOT be sent.

   An application that sends a request or response message that includes
   HTTP-Version of "HTTP/1.1" MUST be at least conditionally compliant
   with this specification.  Applications that are at least
   conditionally compliant with this specification SHOULD use an HTTP-
   Version of "HTTP/1.1" in their messages, and MUST do so for any
   message that is not compatible with HTTP/1.0.  For more details on
   when to send specific HTTP-Version values, see [RFC2145].

   The HTTP version of an application is the highest HTTP version for
   which the application is at least conditionally compliant.

   Proxy and gateway applications need to be careful when forwarding
   messages in protocol versions different from that of the application.
   Since the protocol version indicates the protocol capability of the
   sender, a proxy/gateway MUST NOT send a message with a version
   indicator which is greater than its actual version.  If a higher
   version request is received, the proxy/gateway MUST either downgrade
   the request version, or respond with an error, or switch to tunnel
   behavior.

   Due to interoperability problems with HTTP/1.0 proxies discovered
   since the publication of [RFC2068], caching proxies MUST, gateways
   MAY, and tunnels MUST NOT upgrade the request to the highest version
   they support.  The proxy/gateway's response to that request MUST be
   in the same major version as the request.

      Note: Converting between versions of HTTP may involve modification
      of header fields required or forbidden by the versions involved.

3.2.  Date/Time Formats: Full Date

   HTTP applications have historically allowed three different formats
   for the representation of date/time stamps:

     Sun, 06 Nov 1994 08:49:37 GMT  ; RFC 1123
     Sunday, 06-Nov-94 08:49:37 GMT ; obsolete RFC 850 format
     Sun Nov  6 08:49:37 1994       ; ANSI C's asctime() format

   The first format is preferred as an Internet standard and represents
   a fixed-length subset of that defined by [RFC1123].  The other



Fielding, et al.        Expires January 14, 2010               [Page 15]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   formats are described here only for compatibility with obsolete
   implementations.  HTTP/1.1 clients and servers that parse the date
   value MUST accept all three formats (for compatibility with
   HTTP/1.0), though they MUST only generate the RFC 1123 format for
   representing HTTP-date values in header fields.  See Appendix A for
   further information.

   All HTTP date/time stamps MUST be represented in Greenwich Mean Time
   (GMT), without exception.  For the purposes of HTTP, GMT is exactly
   equal to UTC (Coordinated Universal Time).  This is indicated in the
   first two formats by the inclusion of "GMT" as the three-letter
   abbreviation for time zone, and MUST be assumed when reading the
   asctime format.  HTTP-date is case sensitive and MUST NOT include
   additional whitespace beyond that specifically included as SP in the
   grammar.

     HTTP-date    = rfc1123-date / obs-date

   Preferred format:
































Fielding, et al.        Expires January 14, 2010               [Page 16]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


     rfc1123-date = day-name "," SP date1 SP time-of-day SP GMT

     day-name     = %x4D.6F.6E ; "Mon", case-sensitive
                  / %x54.75.65 ; "Tue", case-sensitive
                  / %x57.65.64 ; "Wed", case-sensitive
                  / %x54.68.75 ; "Thu", case-sensitive
                  / %x46.72.69 ; "Fri", case-sensitive
                  / %x53.61.74 ; "Sat", case-sensitive
                  / %x53.75.6E ; "Sun", case-sensitive

     date1        = day SP month SP year
                  ; e.g., 02 Jun 1982

     day          = 2DIGIT
     month        = %x4A.61.6E ; "Jan", case-sensitive
                  / %x46.65.62 ; "Feb", case-sensitive
                  / %x4D.61.72 ; "Mar", case-sensitive
                  / %x41.70.72 ; "Apr", case-sensitive
                  / %x4D.61.79 ; "May", case-sensitive
                  / %x4A.75.6E ; "Jun", case-sensitive
                  / %x4A.75.6C ; "Jul", case-sensitive
                  / %x41.75.67 ; "Aug", case-sensitive
                  / %x53.65.70 ; "Sep", case-sensitive
                  / %x4F.63.74 ; "Oct", case-sensitive
                  / %x4E.6F.76 ; "Nov", case-sensitive
                  / %x44.65.63 ; "Dec", case-sensitive
     year         = 4DIGIT

     GMT   = %x47.4D.54 ; "GMT", case-sensitive

     time-of-day  = hour ":" minute ":" second
                    ; 00:00:00 - 23:59:59

     hour         = 2DIGIT
     minute       = 2DIGIT
     second       = 2DIGIT

   The semantics of day-name, day, month, year, and time-of-day are the
   same as those defined for the RFC 5322 constructs with the
   corresponding name ([RFC5322], Section 3.3).

   Obsolete formats:

     obs-date     = rfc850-date / asctime-date







Fielding, et al.        Expires January 14, 2010               [Page 17]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


     rfc850-date  = day-name-l "," SP date2 SP time-of-day SP GMT
     date2        = day "-" month "-" 2DIGIT
                    ; day-month-year (e.g., 02-Jun-82)

     day-name-l   = %x4D.6F.6E.64.61.79 ; "Monday", case-sensitive
            / %x54.75.65.73.64.61.79 ; "Tuesday", case-sensitive
            / %x57.65.64.6E.65.73.64.61.79 ; "Wednesday", case-sensitive
            / %x54.68.75.72.73.64.61.79 ; "Thursday", case-sensitive
            / %x46.72.69.64.61.79 ; "Friday", case-sensitive
            / %x53.61.74.75.72.64.61.79 ; "Saturday", case-sensitive
            / %x53.75.6E.64.61.79 ; "Sunday", case-sensitive


     asctime-date = day-name SP date3 SP time-of-day SP year
     date3        = month SP ( 2DIGIT / ( SP 1DIGIT ))
                    ; month day (e.g., Jun  2)

      Note: Recipients of date values are encouraged to be robust in
      accepting date values that may have been sent by non-HTTP
      applications, as is sometimes the case when retrieving or posting
      messages via proxies/gateways to SMTP or NNTP.

      Note: HTTP requirements for the date/time stamp format apply only
      to their usage within the protocol stream.  Clients and servers
      are not required to use these formats for user presentation,
      request logging, etc.

3.3.  Transfer Codings

   Transfer-coding values are used to indicate an encoding
   transformation that has been, can be, or may need to be applied to an
   entity-body in order to ensure "safe transport" through the network.
   This differs from a content coding in that the transfer-coding is a
   property of the message, not of the original entity.

     transfer-coding         = "chunked" / transfer-extension
     transfer-extension      = token *( OWS ";" OWS transfer-parameter )

   Parameters are in the form of attribute/value pairs.

     transfer-parameter      = attribute BWS "=" BWS value
     attribute               = token
     value                   = token / quoted-string

   All transfer-coding values are case-insensitive.  HTTP/1.1 uses
   transfer-coding values in the TE header field (Section 8.5) and in
   the Transfer-Encoding header field (Section 8.7).




Fielding, et al.        Expires January 14, 2010               [Page 18]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   Whenever a transfer-coding is applied to a message-body, the set of
   transfer-codings MUST include "chunked", unless the message indicates
   it is terminated by closing the connection.  When the "chunked"
   transfer-coding is used, it MUST be the last transfer-coding applied
   to the message-body.  The "chunked" transfer-coding MUST NOT be
   applied more than once to a message-body.  These rules allow the
   recipient to determine the transfer-length of the message
   (Section 4.4).

   Transfer-codings are analogous to the Content-Transfer-Encoding
   values of MIME [RFC2045], which were designed to enable safe
   transport of binary data over a 7-bit transport service.  However,
   safe transport has a different focus for an 8bit-clean transfer
   protocol.  In HTTP, the only unsafe characteristic of message-bodies
   is the difficulty in determining the exact body length (Section 4.4),
   or the desire to encrypt data over a shared transport.

   The Internet Assigned Numbers Authority (IANA) acts as a registry for
   transfer-coding value tokens.  Initially, the registry contains the
   following tokens: "chunked" (Section 3.3.1), "gzip", "compress", and
   "deflate" (Section 2.2 of [Part3]).

   New transfer-coding value tokens SHOULD be registered in the same way
   as new content-coding value tokens (Section 2.2 of [Part3]).

   A server which receives an entity-body with a transfer-coding it does
   not understand SHOULD return 501 (Not Implemented), and close the
   connection.  A server MUST NOT send transfer-codings to an HTTP/1.0
   client.

3.3.1.  Chunked Transfer Coding

   The chunked encoding modifies the body of a message in order to
   transfer it as a series of chunks, each with its own size indicator,
   followed by an OPTIONAL trailer containing entity-header fields.
   This allows dynamically produced content to be transferred along with
   the information necessary for the recipient to verify that it has
   received the full message.













Fielding, et al.        Expires January 14, 2010               [Page 19]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


     Chunked-Body   = *chunk
                      last-chunk
                      trailer-part
                      CRLF

     chunk          = chunk-size *WSP [ chunk-ext ] CRLF
                      chunk-data CRLF
     chunk-size     = 1*HEXDIG
     last-chunk     = 1*("0") *WSP [ chunk-ext ] CRLF

     chunk-ext      = *( ";" *WSP chunk-ext-name
                         [ "=" chunk-ext-val ] *WSP )
     chunk-ext-name = token
     chunk-ext-val  = token / quoted-string
     chunk-data     = 1*OCTET ; a sequence of chunk-size octets
     trailer-part   = *( entity-header CRLF )

   The chunk-size field is a string of hex digits indicating the size of
   the chunk-data in octets.  The chunked encoding is ended by any chunk
   whose size is zero, followed by the trailer, which is terminated by
   an empty line.

   The trailer allows the sender to include additional HTTP header
   fields at the end of the message.  The Trailer header field can be
   used to indicate which header fields are included in a trailer (see
   Section 8.6).

   A server using chunked transfer-coding in a response MUST NOT use the
   trailer for any header fields unless at least one of the following is
   true:

   1.  the request included a TE header field that indicates "trailers"
       is acceptable in the transfer-coding of the response, as
       described in Section 8.5; or,

   2.  the server is the origin server for the response, the trailer
       fields consist entirely of optional metadata, and the recipient
       could use the message (in a manner acceptable to the origin
       server) without receiving this metadata.  In other words, the
       origin server is willing to accept the possibility that the
       trailer fields might be silently discarded along the path to the
       client.

   This requirement prevents an interoperability failure when the
   message is being received by an HTTP/1.1 (or later) proxy and
   forwarded to an HTTP/1.0 recipient.  It avoids a situation where
   compliance with the protocol would have necessitated a possibly
   infinite buffer on the proxy.



Fielding, et al.        Expires January 14, 2010               [Page 20]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   A process for decoding the "chunked" transfer-coding can be
   represented in pseudo-code as:

     length := 0
     read chunk-size, chunk-ext (if any) and CRLF
     while (chunk-size > 0) {
        read chunk-data and CRLF
        append chunk-data to entity-body
        length := length + chunk-size
        read chunk-size and CRLF
     }
     read entity-header
     while (entity-header not empty) {
        append entity-header to existing header fields
        read entity-header
     }
     Content-Length := length
     Remove "chunked" from Transfer-Encoding

   All HTTP/1.1 applications MUST be able to receive and decode the
   "chunked" transfer-coding, and MUST ignore chunk-ext extensions they
   do not understand.

3.4.  Product Tokens

   Product tokens are used to allow communicating applications to
   identify themselves by software name and version.  Most fields using
   product tokens also allow sub-products which form a significant part
   of the application to be listed, separated by whitespace.  By
   convention, the products are listed in order of their significance
   for identifying the application.

     product         = token ["/" product-version]
     product-version = token

   Examples:

     User-Agent: CERN-LineMode/2.15 libwww/2.17b3
     Server: Apache/0.8.4

   Product tokens SHOULD be short and to the point.  They MUST NOT be
   used for advertising or other non-essential information.  Although
   any token character MAY appear in a product-version, this token
   SHOULD only be used for a version identifier (i.e., successive
   versions of the same product SHOULD only differ in the product-
   version portion of the product value).





Fielding, et al.        Expires January 14, 2010               [Page 21]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


3.5.  Quality Values

   Both transfer codings (TE request header, Section 8.5) and content
   negotiation (Section 4 of [Part3]) use short "floating point" numbers
   to indicate the relative importance ("weight") of various negotiable
   parameters.  A weight is normalized to a real number in the range 0
   through 1, where 0 is the minimum and 1 the maximum value.  If a
   parameter has a quality value of 0, then content with this parameter
   is `not acceptable' for the client.  HTTP/1.1 applications MUST NOT
   generate more than three digits after the decimal point.  User
   configuration of these values SHOULD also be limited in this fashion.

     qvalue         = ( "0" [ "." 0*3DIGIT ] )
                    / ( "1" [ "." 0*3("0") ] )

      Note: "Quality values" is a misnomer, since these values merely
      represent relative degradation in desired quality.


4.  HTTP Message

4.1.  Message Types

   HTTP messages consist of requests from client to server and responses
   from server to client.

     HTTP-message   = Request / Response     ; HTTP/1.1 messages

   Request (Section 5) and Response (Section 6) messages use the generic
   message format of [RFC5322] for transferring entities (the payload of
   the message).  Both types of message consist of a start-line, zero or
   more header fields (also known as "headers"), an empty line (i.e., a
   line with nothing preceding the CRLF) indicating the end of the
   header fields, and possibly a message-body.

     generic-message = start-line
                       *( message-header CRLF )
                       CRLF
                       [ message-body ]
     start-line      = Request-Line / Status-Line

   In the interest of robustness, servers SHOULD ignore any empty
   line(s) received where a Request-Line is expected.  In other words,
   if the server is reading the protocol stream at the beginning of a
   message and receives a CRLF first, it should ignore the CRLF.

   Certain buggy HTTP/1.0 client implementations generate extra CRLF's
   after a POST request.  To restate what is explicitly forbidden by the



Fielding, et al.        Expires January 14, 2010               [Page 22]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   BNF, an HTTP/1.1 client MUST NOT preface or follow a request with an
   extra CRLF.

   Whitespace (WSP) MUST NOT be sent between the start-line and the
   first header field.  The presence of whitespace might be an attempt
   to trick a noncompliant implementation of HTTP into ignoring that
   field or processing the next line as a new request, either of which
   may result in security issues when implementations within the request
   chain interpret the same message differently.  HTTP/1.1 servers MUST
   reject such a message with a 400 (Bad Request) response.

4.2.  Message Headers

   HTTP header fields follow the same general format as Internet
   messages in Section 2.1 of [RFC5322].  Each header field consists of
   a name followed by a colon (":"), optional whitespace, and the field
   value.  Field names are case-insensitive.

     message-header = field-name ":" OWS [ field-value ] OWS
     field-name     = token
     field-value    = *( field-content / OWS )
     field-content  = *( WSP / VCHAR / obs-text )

   Historically, HTTP has allowed field-content with text in the ISO-
   8859-1 [ISO-8859-1] character encoding (allowing other character sets
   through use of [RFC2047] encoding).  In practice, most HTTP header
   field-values use only a subset of the US-ASCII charset [USASCII].
   Newly defined header fields SHOULD constrain their field-values to
   US-ASCII characters.  Recipients SHOULD treat other (obs-text) octets
   in field-content as opaque data.

   No whitespace is allowed between the header field-name and colon.
   For security reasons, any request message received containing such
   whitespace MUST be rejected with a response code of 400 (Bad Request)
   and any such whitespace in a response message MUST be removed.

   The field value MAY be preceded by optional whitespace; a single SP
   is preferred.  The field-value does not include any leading or
   trailing white space: OWS occurring before the first non-whitespace
   character of the field-value or after the last non-whitespace
   character of the field-value is ignored and MAY be removed without
   changing the meaning of the header field.

   Historically, HTTP header field values could be extended over
   multiple lines by preceding each extra line with at least one space
   or horizontal tab character (line folding).  This specification
   deprecates such line folding except within the message/http media
   type (Section 9.3.1).  HTTP/1.1 senders MUST NOT produce messages



Fielding, et al.        Expires January 14, 2010               [Page 23]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   that include line folding (i.e., that contain any field-content that
   matches the obs-fold rule) unless the message is intended for
   packaging within the message/http media type.  HTTP/1.1 recipients
   SHOULD accept line folding and replace any embedded obs-fold
   whitespace with a single SP prior to interpreting the field value or
   forwarding the message downstream.

   Comments can be included in some HTTP header fields by surrounding
   the comment text with parentheses.  Comments are only allowed in
   fields containing "comment" as part of their field value definition.
   In all other fields, parentheses are considered part of the field
   value.

     comment        = "(" *( ctext / quoted-pair / comment ) ")"
     ctext          = OWS / %x21-27 / %x2A-5B / %x5D-7E / obs-text
                    ; OWS / <VCHAR except "(", ")", and "\"> / obs-text

   The order in which header fields with differing field names are
   received is not significant.  However, it is "good practice" to send
   general-header fields first, followed by request-header or response-
   header fields, and ending with the entity-header fields.

   Multiple message-header fields with the same field-name MAY be
   present in a message if and only if the entire field-value for that
   header field is defined as a comma-separated list [i.e., #(values)].
   It MUST be possible to combine the multiple header fields into one
   "field-name: field-value" pair, without changing the semantics of the
   message, by appending each subsequent field-value to the first, each
   separated by a comma.  The order in which header fields with the same
   field-name are received is therefore significant to the
   interpretation of the combined field value, and thus a proxy MUST NOT
   change the order of these field values when a message is forwarded.

      Note: the "Set-Cookie" header as implemented in practice (as
      opposed to how it is specified in [RFC2109]) can occur multiple
      times, but does not use the list syntax, and thus cannot be
      combined into a single line.  (See Appendix A.2.3 of [Kri2001] for
      details.)  Also note that the Set-Cookie2 header specified in
      [RFC2965] does not share this problem.

4.3.  Message Body

   The message-body (if any) of an HTTP message is used to carry the
   entity-body associated with the request or response.  The message-
   body differs from the entity-body only when a transfer-coding has
   been applied, as indicated by the Transfer-Encoding header field
   (Section 8.7).




Fielding, et al.        Expires January 14, 2010               [Page 24]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


     message-body = entity-body
                  / <entity-body encoded as per Transfer-Encoding>

   Transfer-Encoding MUST be used to indicate any transfer-codings
   applied by an application to ensure safe and proper transfer of the
   message.  Transfer-Encoding is a property of the message, not of the
   entity, and thus MAY be added or removed by any application along the
   request/response chain.  (However, Section 3.3 places restrictions on
   when certain transfer-codings may be used.)

   The rules for when a message-body is allowed in a message differ for
   requests and responses.

   The presence of a message-body in a request is signaled by the
   inclusion of a Content-Length or Transfer-Encoding header field in
   the request's message-headers.  When a request message contains both
   a message-body of non-zero length and a method that does not define
   any semantics for that request message-body, then an origin server
   SHOULD either ignore the message-body or respond with an appropriate
   error message (e.g., 413).  A proxy or gateway, when presented the
   same request, SHOULD either forward the request inbound with the
   message-body or ignore the message-body when determining a response.

   For response messages, whether or not a message-body is included with
   a message is dependent on both the request method and the response
   status code (Section 6.1.1).  All responses to the HEAD request
   method MUST NOT include a message-body, even though the presence of
   entity-header fields might lead one to believe they do.  All 1xx
   (informational), 204 (No Content), and 304 (Not Modified) responses
   MUST NOT include a message-body.  All other responses do include a
   message-body, although it MAY be of zero length.

4.4.  Message Length

   The transfer-length of a message is the length of the message-body as
   it appears in the message; that is, after any transfer-codings have
   been applied.  When a message-body is included with a message, the
   transfer-length of that body is determined by one of the following
   (in order of precedence):

   1.  Any response message which "MUST NOT" include a message-body
       (such as the 1xx, 204, and 304 responses and any response to a
       HEAD request) is always terminated by the first empty line after
       the header fields, regardless of the entity-header fields present
       in the message.

   2.  If a Transfer-Encoding header field (Section 8.7) is present and
       the "chunked" transfer-coding (Section 3.3) is used, the



Fielding, et al.        Expires January 14, 2010               [Page 25]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


       transfer-length is defined by the use of this transfer-coding.
       If a Transfer-Encoding header field is present and the "chunked"
       transfer-coding is not present, the transfer-length is defined by
       the sender closing the connection.

   3.  If a Content-Length header field (Section 8.2) is present, its
       value in OCTETs represents both the entity-length and the
       transfer-length.  The Content-Length header field MUST NOT be
       sent if these two lengths are different (i.e., if a Transfer-
       Encoding header field is present).  If a message is received with
       both a Transfer-Encoding header field and a Content-Length header
       field, the latter MUST be ignored.

   4.  If the message uses the media type "multipart/byteranges", and
       the transfer-length is not otherwise specified, then this self-
       delimiting media type defines the transfer-length.  This media
       type MUST NOT be used unless the sender knows that the recipient
       can parse it; the presence in a request of a Range header with
       multiple byte-range specifiers from a 1.1 client implies that the
       client can parse multipart/byteranges responses.

          A range header might be forwarded by a 1.0 proxy that does not
          understand multipart/byteranges; in this case the server MUST
          delimit the message using methods defined in items 1, 3 or 5
          of this section.

   5.  By the server closing the connection.  (Closing the connection
       cannot be used to indicate the end of a request body, since that
       would leave no possibility for the server to send back a
       response.)

   For compatibility with HTTP/1.0 applications, HTTP/1.1 requests
   containing a message-body MUST include a valid Content-Length header
   field unless the server is known to be HTTP/1.1 compliant.  If a
   request contains a message-body and a Content-Length is not given,
   the server SHOULD respond with 400 (Bad Request) if it cannot
   determine the length of the message, or with 411 (Length Required) if
   it wishes to insist on receiving a valid Content-Length.

   All HTTP/1.1 applications that receive entities MUST accept the
   "chunked" transfer-coding (Section 3.3), thus allowing this mechanism
   to be used for messages when the message length cannot be determined
   in advance.

   Messages MUST NOT include both a Content-Length header field and a
   transfer-coding.  If the message does include a transfer-coding, the
   Content-Length MUST be ignored.




Fielding, et al.        Expires January 14, 2010               [Page 26]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   When a Content-Length is given in a message where a message-body is
   allowed, its field value MUST exactly match the number of OCTETs in
   the message-body.  HTTP/1.1 user agents MUST notify the user when an
   invalid length is received and detected.

4.5.  General Header Fields

   There are a few header fields which have general applicability for
   both request and response messages, but which do not apply to the
   entity being transferred.  These header fields apply only to the
   message being transmitted.

     general-header = Cache-Control            ; [Part6], Section 3.2
                    / Connection               ; Section 8.1
                    / Date                     ; Section 8.3
                    / Pragma                   ; [Part6], Section 3.4
                    / Trailer                  ; Section 8.6
                    / Transfer-Encoding        ; Section 8.7
                    / Upgrade                  ; Section 8.8
                    / Via                      ; Section 8.9
                    / Warning                  ; [Part6], Section 3.6

   General-header field names can be extended reliably only in
   combination with a change in the protocol version.  However, new or
   experimental header fields may be given the semantics of general
   header fields if all parties in the communication recognize them to
   be general-header fields.  Unrecognized header fields are treated as
   entity-header fields.


5.  Request

   A request message from a client to a server includes, within the
   first line of that message, the method to be applied to the resource,
   the identifier of the resource, and the protocol version in use.

     Request       = Request-Line              ; Section 5.1
                     *(( general-header        ; Section 4.5
                      / request-header         ; [Part2], Section 3
                      / entity-header ) CRLF )  ; [Part3], Section 3.1
                     CRLF
                     [ message-body ]          ; Section 4.3

5.1.  Request-Line

   The Request-Line begins with a method token, followed by the request-
   target and the protocol version, and ending with CRLF.  The elements
   are separated by SP characters.  No CR or LF is allowed except in the



Fielding, et al.        Expires January 14, 2010               [Page 27]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   final CRLF sequence.

     Request-Line   = Method SP request-target SP HTTP-Version CRLF

5.1.1.  Method

   The Method token indicates the method to be performed on the resource
   identified by the request-target.  The method is case-sensitive.

     Method         = token

5.1.2.  request-target

   The request-target identifies the resource upon which to apply the
   request.

     request-target = "*"
                    / absolute-URI
                    / ( path-absolute [ "?" query ] )
                    / authority

   The four options for request-target are dependent on the nature of
   the request.  The asterisk "*" means that the request does not apply
   to a particular resource, but to the server itself, and is only
   allowed when the method used does not necessarily apply to a
   resource.  One example would be

     OPTIONS * HTTP/1.1

   The absolute-URI form is REQUIRED when the request is being made to a
   proxy.  The proxy is requested to forward the request or service it
   from a valid cache, and return the response.  Note that the proxy MAY
   forward the request on to another proxy or directly to the server
   specified by the absolute-URI.  In order to avoid request loops, a
   proxy MUST be able to recognize all of its server names, including
   any aliases, local variations, and the numeric IP address.  An
   example Request-Line would be:

     GET http://www.example.org/pub/WWW/TheProject.html HTTP/1.1

   To allow for transition to absolute-URIs in all requests in future
   versions of HTTP, all HTTP/1.1 servers MUST accept the absolute-URI
   form in requests, even though HTTP/1.1 clients will only generate
   them in requests to proxies.

   The authority form is only used by the CONNECT method (Section 7.9 of
   [Part2]).




Fielding, et al.        Expires January 14, 2010               [Page 28]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   The most common form of request-target is that used to identify a
   resource on an origin server or gateway.  In this case the absolute
   path of the URI MUST be transmitted (see Section 2.1.1, path-
   absolute) as the request-target, and the network location of the URI
   (authority) MUST be transmitted in a Host header field.  For example,
   a client wishing to retrieve the resource above directly from the
   origin server would create a TCP connection to port 80 of the host
   "www.example.org" and send the lines:

     GET /pub/WWW/TheProject.html HTTP/1.1
     Host: www.example.org

   followed by the remainder of the Request.  Note that the absolute
   path cannot be empty; if none is present in the original URI, it MUST
   be given as "/" (the server root).

   If a proxy receives a request without any path in the request-target
   and the method specified is capable of supporting the asterisk form
   of request-target, then the last proxy on the request chain MUST
   forward the request with "*" as the final request-target.

   For example, the request

     OPTIONS http://www.example.org:8001 HTTP/1.1

   would be forwarded by the proxy as

     OPTIONS * HTTP/1.1
     Host: www.example.org:8001

   after connecting to port 8001 of host "www.example.org".

   The request-target is transmitted in the format specified in
   Section 2.1.1.  If the request-target is percent-encoded ([RFC3986],
   Section 2.1), the origin server MUST decode the request-target in
   order to properly interpret the request.  Servers SHOULD respond to
   invalid request-targets with an appropriate status code.

   A transparent proxy MUST NOT rewrite the "path-absolute" part of the
   received request-target when forwarding it to the next inbound
   server, except as noted above to replace a null path-absolute with
   "/".

      Note: The "no rewrite" rule prevents the proxy from changing the
      meaning of the request when the origin server is improperly using
      a non-reserved URI character for a reserved purpose.  Implementors
      should be aware that some pre-HTTP/1.1 proxies have been known to
      rewrite the request-target.



Fielding, et al.        Expires January 14, 2010               [Page 29]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   HTTP does not place a pre-defined limit on the length of a request-
   target.  A server MUST be prepared to receive URIs of unbounded
   length and respond with the 414 (URI Too Long) status if the received
   request-target would be longer than the server wishes to handle (see
   Section 8.4.15 of [Part2]).

   Various ad-hoc limitations on request-target length are found in
   practice.  It is RECOMMENDED that all HTTP senders and recipients
   support request-target lengths of 8000 or more OCTETs.

5.2.  The Resource Identified by a Request

   The exact resource identified by an Internet request is determined by
   examining both the request-target and the Host header field.

   An origin server that does not allow resources to differ by the
   requested host MAY ignore the Host header field value when
   determining the resource identified by an HTTP/1.1 request.  (But see
   Appendix B.1.1 for other requirements on Host support in HTTP/1.1.)

   An origin server that does differentiate resources based on the host
   requested (sometimes referred to as virtual hosts or vanity host
   names) MUST use the following rules for determining the requested
   resource on an HTTP/1.1 request:

   1.  If request-target is an absolute-URI, the host is part of the
       request-target.  Any Host header field value in the request MUST
       be ignored.

   2.  If the request-target is not an absolute-URI, and the request
       includes a Host header field, the host is determined by the Host
       header field value.

   3.  If the host as determined by rule 1 or 2 is not a valid host on
       the server, the response MUST be a 400 (Bad Request) error
       message.

   Recipients of an HTTP/1.0 request that lacks a Host header field MAY
   attempt to use heuristics (e.g., examination of the URI path for
   something unique to a particular host) in order to determine what
   exact resource is being requested.


6.  Response

   After receiving and interpreting a request message, a server responds
   with an HTTP response message.




Fielding, et al.        Expires January 14, 2010               [Page 30]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


     Response      = Status-Line               ; Section 6.1
                     *(( general-header        ; Section 4.5
                      / response-header        ; [Part2], Section 5
                      / entity-header ) CRLF )  ; [Part3], Section 3.1
                     CRLF
                     [ message-body ]          ; Section 4.3

6.1.  Status-Line

   The first line of a Response message is the Status-Line, consisting
   of the protocol version followed by a numeric status code and its
   associated textual phrase, with each element separated by SP
   characters.  No CR or LF is allowed except in the final CRLF
   sequence.

     Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF

6.1.1.  Status Code and Reason Phrase

   The Status-Code element is a 3-digit integer result code of the
   attempt to understand and satisfy the request.  These codes are fully
   defined in Section 8 of [Part2].  The Reason Phrase exists for the
   sole purpose of providing a textual description associated with the
   numeric status code, out of deference to earlier Internet application
   protocols that were more frequently used with interactive text
   clients.  A client SHOULD ignore the content of the Reason Phrase.

   The first digit of the Status-Code defines the class of response.
   The last two digits do not have any categorization role.  There are 5
   values for the first digit:

   o  1xx: Informational - Request received, continuing process

   o  2xx: Success - The action was successfully received, understood,
      and accepted

   o  3xx: Redirection - Further action must be taken in order to
      complete the request

   o  4xx: Client Error - The request contains bad syntax or cannot be
      fulfilled

   o  5xx: Server Error - The server failed to fulfill an apparently
      valid request


     Status-Code    = 3DIGIT
     Reason-Phrase  = *( WSP / VCHAR / obs-text )



Fielding, et al.        Expires January 14, 2010               [Page 31]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


7.  Connections

7.1.  Persistent Connections

7.1.1.  Purpose

   Prior to persistent connections, a separate TCP connection was
   established to fetch each URL, increasing the load on HTTP servers
   and causing congestion on the Internet.  The use of inline images and
   other associated data often require a client to make multiple
   requests of the same server in a short amount of time.  Analysis of
   these performance problems and results from a prototype
   implementation are available [Pad1995] [Spe].  Implementation
   experience and measurements of actual HTTP/1.1 implementations show
   good results [Nie1997].  Alternatives have also been explored, for
   example, T/TCP [Tou1998].

   Persistent HTTP connections have a number of advantages:

   o  By opening and closing fewer TCP connections, CPU time is saved in
      routers and hosts (clients, servers, proxies, gateways, tunnels,
      or caches), and memory used for TCP protocol control blocks can be
      saved in hosts.

   o  HTTP requests and responses can be pipelined on a connection.
      Pipelining allows a client to make multiple requests without
      waiting for each response, allowing a single TCP connection to be
      used much more efficiently, with much lower elapsed time.

   o  Network congestion is reduced by reducing the number of packets
      caused by TCP opens, and by allowing TCP sufficient time to
      determine the congestion state of the network.

   o  Latency on subsequent requests is reduced since there is no time
      spent in TCP's connection opening handshake.

   o  HTTP can evolve more gracefully, since errors can be reported
      without the penalty of closing the TCP connection.  Clients using
      future versions of HTTP might optimistically try a new feature,
      but if communicating with an older server, retry with old
      semantics after an error is reported.

   HTTP implementations SHOULD implement persistent connections.

7.1.2.  Overall Operation

   A significant difference between HTTP/1.1 and earlier versions of
   HTTP is that persistent connections are the default behavior of any



Fielding, et al.        Expires January 14, 2010               [Page 32]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   HTTP connection.  That is, unless otherwise indicated, the client
   SHOULD assume that the server will maintain a persistent connection,
   even after error responses from the server.

   Persistent connections provide a mechanism by which a client and a
   server can signal the close of a TCP connection.  This signaling
   takes place using the Connection header field (Section 8.1).  Once a
   close has been signaled, the client MUST NOT send any more requests
   on that connection.

7.1.2.1.  Negotiation

   An HTTP/1.1 server MAY assume that a HTTP/1.1 client intends to
   maintain a persistent connection unless a Connection header including
   the connection-token "close" was sent in the request.  If the server
   chooses to close the connection immediately after sending the
   response, it SHOULD send a Connection header including the
   connection-token close.

   An HTTP/1.1 client MAY expect a connection to remain open, but would
   decide to keep it open based on whether the response from a server
   contains a Connection header with the connection-token close.  In
   case the client does not want to maintain a connection for more than
   that request, it SHOULD send a Connection header including the
   connection-token close.

   If either the client or the server sends the close token in the
   Connection header, that request becomes the last one for the
   connection.

   Clients and servers SHOULD NOT assume that a persistent connection is
   maintained for HTTP versions less than 1.1 unless it is explicitly
   signaled.  See Appendix B.2 for more information on backward
   compatibility with HTTP/1.0 clients.

   In order to remain persistent, all messages on the connection MUST
   have a self-defined message length (i.e., one not defined by closure
   of the connection), as described in Section 4.4.

7.1.2.2.  Pipelining

   A client that supports persistent connections MAY "pipeline" its
   requests (i.e., send multiple requests without waiting for each
   response).  A server MUST send its responses to those requests in the
   same order that the requests were received.

   Clients which assume persistent connections and pipeline immediately
   after connection establishment SHOULD be prepared to retry their



Fielding, et al.        Expires January 14, 2010               [Page 33]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   connection if the first pipelined attempt fails.  If a client does
   such a retry, it MUST NOT pipeline before it knows the connection is
   persistent.  Clients MUST also be prepared to resend their requests
   if the server closes the connection before sending all of the
   corresponding responses.

   Clients SHOULD NOT pipeline requests using non-idempotent methods or
   non-idempotent sequences of methods (see Section 7.1.2 of [Part2]).
   Otherwise, a premature termination of the transport connection could
   lead to indeterminate results.  A client wishing to send a non-
   idempotent request SHOULD wait to send that request until it has
   received the response status for the previous request.

7.1.3.  Proxy Servers

   It is especially important that proxies correctly implement the
   properties of the Connection header field as specified in
   Section 8.1.

   The proxy server MUST signal persistent connections separately with
   its clients and the origin servers (or other proxy servers) that it
   connects to.  Each persistent connection applies to only one
   transport link.

   A proxy server MUST NOT establish a HTTP/1.1 persistent connection
   with an HTTP/1.0 client (but see Section 19.7.1 of [RFC2068] for
   information and discussion of the problems with the Keep-Alive header
   implemented by many HTTP/1.0 clients).

7.1.4.  Practical Considerations

   Servers will usually have some time-out value beyond which they will
   no longer maintain an inactive connection.  Proxy servers might make
   this a higher value since it is likely that the client will be making
   more connections through the same server.  The use of persistent
   connections places no requirements on the length (or existence) of
   this time-out for either the client or the server.

   When a client or server wishes to time-out it SHOULD issue a graceful
   close on the transport connection.  Clients and servers SHOULD both
   constantly watch for the other side of the transport close, and
   respond to it as appropriate.  If a client or server does not detect
   the other side's close promptly it could cause unnecessary resource
   drain on the network.

   A client, server, or proxy MAY close the transport connection at any
   time.  For example, a client might have started to send a new request
   at the same time that the server has decided to close the "idle"



Fielding, et al.        Expires January 14, 2010               [Page 34]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   connection.  From the server's point of view, the connection is being
   closed while it was idle, but from the client's point of view, a
   request is in progress.

   This means that clients, servers, and proxies MUST be able to recover
   from asynchronous close events.  Client software SHOULD reopen the
   transport connection and retransmit the aborted sequence of requests
   without user interaction so long as the request sequence is
   idempotent (see Section 7.1.2 of [Part2]).  Non-idempotent methods or
   sequences MUST NOT be automatically retried, although user agents MAY
   offer a human operator the choice of retrying the request(s).
   Confirmation by user-agent software with semantic understanding of
   the application MAY substitute for user confirmation.  The automatic
   retry SHOULD NOT be repeated if the second sequence of requests
   fails.

   Servers SHOULD always respond to at least one request per connection,
   if at all possible.  Servers SHOULD NOT close a connection in the
   middle of transmitting a response, unless a network or client failure
   is suspected.

   Clients that use persistent connections SHOULD limit the number of
   simultaneous connections that they maintain to a given server.  A
   single-user client SHOULD NOT maintain more than 2 connections with
   any server or proxy.  A proxy SHOULD use up to 2*N connections to
   another server or proxy, where N is the number of simultaneously
   active users.  These guidelines are intended to improve HTTP response
   times and avoid congestion.

7.2.  Message Transmission Requirements

7.2.1.  Persistent Connections and Flow Control

   HTTP/1.1 servers SHOULD maintain persistent connections and use TCP's
   flow control mechanisms to resolve temporary overloads, rather than
   terminating connections with the expectation that clients will retry.
   The latter technique can exacerbate network congestion.

7.2.2.  Monitoring Connections for Error Status Messages

   An HTTP/1.1 (or later) client sending a message-body SHOULD monitor
   the network connection for an error status while it is transmitting
   the request.  If the client sees an error status, it SHOULD
   immediately cease transmitting the body.  If the body is being sent
   using a "chunked" encoding (Section 3.3), a zero length chunk and
   empty trailer MAY be used to prematurely mark the end of the message.
   If the body was preceded by a Content-Length header, the client MUST
   close the connection.



Fielding, et al.        Expires January 14, 2010               [Page 35]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


7.2.3.  Use of the 100 (Continue) Status

   The purpose of the 100 (Continue) status (see Section 8.1.1 of
   [Part2]) is to allow a client that is sending a request message with
   a request body to determine if the origin server is willing to accept
   the request (based on the request headers) before the client sends
   the request body.  In some cases, it might either be inappropriate or
   highly inefficient for the client to send the body if the server will
   reject the message without looking at the body.

   Requirements for HTTP/1.1 clients:

   o  If a client will wait for a 100 (Continue) response before sending
      the request body, it MUST send an Expect request-header field
      (Section 9.2 of [Part2]) with the "100-continue" expectation.

   o  A client MUST NOT send an Expect request-header field (Section 9.2
      of [Part2]) with the "100-continue" expectation if it does not
      intend to send a request body.

   Because of the presence of older implementations, the protocol allows
   ambiguous situations in which a client may send "Expect: 100-
   continue" without receiving either a 417 (Expectation Failed) status
   or a 100 (Continue) status.  Therefore, when a client sends this
   header field to an origin server (possibly via a proxy) from which it
   has never seen a 100 (Continue) status, the client SHOULD NOT wait
   for an indefinite period before sending the request body.

   Requirements for HTTP/1.1 origin servers:

   o  Upon receiving a request which includes an Expect request-header
      field with the "100-continue" expectation, an origin server MUST
      either respond with 100 (Continue) status and continue to read
      from the input stream, or respond with a final status code.  The
      origin server MUST NOT wait for the request body before sending
      the 100 (Continue) response.  If it responds with a final status
      code, it MAY close the transport connection or it MAY continue to
      read and discard the rest of the request.  It MUST NOT perform the
      requested method if it returns a final status code.

   o  An origin server SHOULD NOT send a 100 (Continue) response if the
      request message does not include an Expect request-header field
      with the "100-continue" expectation, and MUST NOT send a 100
      (Continue) response if such a request comes from an HTTP/1.0 (or
      earlier) client.  There is an exception to this rule: for
      compatibility with [RFC2068], a server MAY send a 100 (Continue)
      status in response to an HTTP/1.1 PUT or POST request that does
      not include an Expect request-header field with the "100-continue"



Fielding, et al.        Expires January 14, 2010               [Page 36]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


      expectation.  This exception, the purpose of which is to minimize
      any client processing delays associated with an undeclared wait
      for 100 (Continue) status, applies only to HTTP/1.1 requests, and
      not to requests with any other HTTP-version value.

   o  An origin server MAY omit a 100 (Continue) response if it has
      already received some or all of the request body for the
      corresponding request.

   o  An origin server that sends a 100 (Continue) response MUST
      ultimately send a final status code, once the request body is
      received and processed, unless it terminates the transport
      connection prematurely.

   o  If an origin server receives a request that does not include an
      Expect request-header field with the "100-continue" expectation,
      the request includes a request body, and the server responds with
      a final status code before reading the entire request body from
      the transport connection, then the server SHOULD NOT close the
      transport connection until it has read the entire request, or
      until the client closes the connection.  Otherwise, the client
      might not reliably receive the response message.  However, this
      requirement is not be construed as preventing a server from
      defending itself against denial-of-service attacks, or from badly
      broken client implementations.

   Requirements for HTTP/1.1 proxies:

   o  If a proxy receives a request that includes an Expect request-
      header field with the "100-continue" expectation, and the proxy
      either knows that the next-hop server complies with HTTP/1.1 or
      higher, or does not know the HTTP version of the next-hop server,
      it MUST forward the request, including the Expect header field.

   o  If the proxy knows that the version of the next-hop server is
      HTTP/1.0 or lower, it MUST NOT forward the request, and it MUST
      respond with a 417 (Expectation Failed) status.

   o  Proxies SHOULD maintain a cache recording the HTTP version numbers
      received from recently-referenced next-hop servers.

   o  A proxy MUST NOT forward a 100 (Continue) response if the request
      message was received from an HTTP/1.0 (or earlier) client and did
      not include an Expect request-header field with the "100-continue"
      expectation.  This requirement overrides the general rule for
      forwarding of 1xx responses (see Section 8.1 of [Part2]).





Fielding, et al.        Expires January 14, 2010               [Page 37]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


7.2.4.  Client Behavior if Server Prematurely Closes Connection

   If an HTTP/1.1 client sends a request which includes a request body,
   but which does not include an Expect request-header field with the
   "100-continue" expectation, and if the client is not directly
   connected to an HTTP/1.1 origin server, and if the client sees the
   connection close before receiving any status from the server, the
   client SHOULD retry the request.  If the client does retry this
   request, it MAY use the following "binary exponential backoff"
   algorithm to be assured of obtaining a reliable response:

   1.  Initiate a new connection to the server

   2.  Transmit the request-headers

   3.  Initialize a variable R to the estimated round-trip time to the
       server (e.g., based on the time it took to establish the
       connection), or to a constant value of 5 seconds if the round-
       trip time is not available.

   4.  Compute T = R * (2**N), where N is the number of previous retries
       of this request.

   5.  Wait either for an error response from the server, or for T
       seconds (whichever comes first)

   6.  If no error response is received, after T seconds transmit the
       body of the request.

   7.  If client sees that the connection is closed prematurely, repeat
       from step 1 until the request is accepted, an error response is
       received, or the user becomes impatient and terminates the retry
       process.

   If at any point an error status is received, the client

   o  SHOULD NOT continue and

   o  SHOULD close the connection if it has not completed sending the
      request message.


8.  Header Field Definitions

   This section defines the syntax and semantics of HTTP/1.1 header
   fields related to message framing and transport protocols.

   For entity-header fields, both sender and recipient refer to either



Fielding, et al.        Expires January 14, 2010               [Page 38]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   the client or the server, depending on who sends and who receives the
   entity.

8.1.  Connection

   The general-header field "Connection" allows the sender to specify
   options that are desired for that particular connection and MUST NOT
   be communicated by proxies over further connections.

   The Connection header's value has the following grammar:

     Connection       = "Connection" ":" OWS Connection-v
     Connection-v     = 1#connection-token
     connection-token = token

   HTTP/1.1 proxies MUST parse the Connection header field before a
   message is forwarded and, for each connection-token in this field,
   remove any header field(s) from the message with the same name as the
   connection-token.  Connection options are signaled by the presence of
   a connection-token in the Connection header field, not by any
   corresponding additional header field(s), since the additional header
   field may not be sent if there are no parameters associated with that
   connection option.

   Message headers listed in the Connection header MUST NOT include end-
   to-end headers, such as Cache-Control.

   HTTP/1.1 defines the "close" connection option for the sender to
   signal that the connection will be closed after completion of the
   response.  For example,

     Connection: close

   in either the request or the response header fields indicates that
   the connection SHOULD NOT be considered `persistent' (Section 7.1)
   after the current request/response is complete.

   An HTTP/1.1 client that does not support persistent connections MUST
   include the "close" connection option in every request message.

   An HTTP/1.1 server that does not support persistent connections MUST
   include the "close" connection option in every response message that
   does not have a 1xx (informational) status code.

   A system receiving an HTTP/1.0 (or lower-version) message that
   includes a Connection header MUST, for each connection-token in this
   field, remove and ignore any header field(s) from the message with
   the same name as the connection-token.  This protects against



Fielding, et al.        Expires January 14, 2010               [Page 39]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   mistaken forwarding of such header fields by pre-HTTP/1.1 proxies.
   See Appendix B.2.

8.2.  Content-Length

   The entity-header field "Content-Length" indicates the size of the
   entity-body, in number of OCTETs, sent to the recipient or, in the
   case of the HEAD method, the size of the entity-body that would have
   been sent had the request been a GET.

     Content-Length   = "Content-Length" ":" OWS 1*Content-Length-v
     Content-Length-v = 1*DIGIT

   An example is

     Content-Length: 3495

   Applications SHOULD use this field to indicate the transfer-length of
   the message-body, unless this is prohibited by the rules in
   Section 4.4.

   Any Content-Length greater than or equal to zero is a valid value.
   Section 4.4 describes how to determine the length of a message-body
   if a Content-Length is not given.

   Note that the meaning of this field is significantly different from
   the corresponding definition in MIME, where it is an optional field
   used within the "message/external-body" content-type.  In HTTP, it
   SHOULD be sent whenever the message's length can be determined prior
   to being transferred, unless this is prohibited by the rules in
   Section 4.4.

8.3.  Date

   The general-header field "Date" represents the date and time at which
   the message was originated, having the same semantics as orig-date in
   Section 3.6.1 of [RFC5322].  The field value is an HTTP-date, as
   described in Section 3.2; it MUST be sent in rfc1123-date format.

     Date   = "Date" ":" OWS Date-v
     Date-v = HTTP-date

   An example is

     Date: Tue, 15 Nov 1994 08:12:31 GMT

   Origin servers MUST include a Date header field in all responses,
   except in these cases:



Fielding, et al.        Expires January 14, 2010               [Page 40]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   1.  If the response status code is 100 (Continue) or 101 (Switching
       Protocols), the response MAY include a Date header field, at the
       server's option.

   2.  If the response status code conveys a server error, e.g. 500
       (Internal Server Error) or 503 (Service Unavailable), and it is
       inconvenient or impossible to generate a valid Date.

   3.  If the server does not have a clock that can provide a reasonable
       approximation of the current time, its responses MUST NOT include
       a Date header field.  In this case, the rules in Section 8.3.1
       MUST be followed.

   A received message that does not have a Date header field MUST be
   assigned one by the recipient if the message will be cached by that
   recipient or gatewayed via a protocol which requires a Date.  An HTTP
   implementation without a clock MUST NOT cache responses without
   revalidating them on every use.  An HTTP cache, especially a shared
   cache, SHOULD use a mechanism, such as NTP [RFC1305], to synchronize
   its clock with a reliable external standard.

   Clients SHOULD only send a Date header field in messages that include
   an entity-body, as in the case of the PUT and POST requests, and even
   then it is optional.  A client without a clock MUST NOT send a Date
   header field in a request.

   The HTTP-date sent in a Date header SHOULD NOT represent a date and
   time subsequent to the generation of the message.  It SHOULD
   represent the best available approximation of the date and time of
   message generation, unless the implementation has no means of
   generating a reasonably accurate date and time.  In theory, the date
   ought to represent the moment just before the entity is generated.
   In practice, the date can be generated at any time during the message
   origination without affecting its semantic value.

8.3.1.  Clockless Origin Server Operation

   Some origin server implementations might not have a clock available.
   An origin server without a clock MUST NOT assign Expires or Last-
   Modified values to a response, unless these values were associated
   with the resource by a system or user with a reliable clock.  It MAY
   assign an Expires value that is known, at or before server
   configuration time, to be in the past (this allows "pre-expiration"
   of responses without storing separate Expires values for each
   resource).






Fielding, et al.        Expires January 14, 2010               [Page 41]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


8.4.  Host

   The request-header field "Host" specifies the Internet host and port
   number of the resource being requested, as obtained from the original
   URI given by the user or referring resource (generally an http URI,
   as described in Section 2.1.1).  The Host field value MUST represent
   the naming authority of the origin server or gateway given by the
   original URL.  This allows the origin server or gateway to
   differentiate between internally-ambiguous URLs, such as the root "/"
   URL of a server for multiple host names on a single IP address.

     Host   = "Host" ":" OWS Host-v
     Host-v = uri-host [ ":" port ] ; Section 2.1.1

   A "host" without any trailing port information implies the default
   port for the service requested (e.g., "80" for an HTTP URL).  For
   example, a request on the origin server for
   <http://www.example.org/pub/WWW/> would properly include:

     GET /pub/WWW/ HTTP/1.1
     Host: www.example.org

   A client MUST include a Host header field in all HTTP/1.1 request
   messages.  If the requested URI does not include an Internet host
   name for the service being requested, then the Host header field MUST
   be given with an empty value.  An HTTP/1.1 proxy MUST ensure that any
   request message it forwards does contain an appropriate Host header
   field that identifies the service being requested by the proxy.  All
   Internet-based HTTP/1.1 servers MUST respond with a 400 (Bad Request)
   status code to any HTTP/1.1 request message which lacks a Host header
   field.

   See Sections 5.2 and B.1.1 for other requirements relating to Host.

8.5.  TE

   The request-header field "TE" indicates what extension transfer-
   codings it is willing to accept in the response and whether or not it
   is willing to accept trailer fields in a chunked transfer-coding.
   Its value may consist of the keyword "trailers" and/or a comma-
   separated list of extension transfer-coding names with optional
   accept parameters (as described in Section 3.3).

     TE        = "TE" ":" OWS TE-v
     TE-v      = #t-codings
     t-codings = "trailers" / ( transfer-extension [ te-params ] )
     te-params = OWS ";" OWS "q=" qvalue *( te-ext )
     te-ext    = OWS ";" OWS token [ "=" ( token / quoted-string ) ]



Fielding, et al.        Expires January 14, 2010               [Page 42]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   The presence of the keyword "trailers" indicates that the client is
   willing to accept trailer fields in a chunked transfer-coding, as
   defined in Section 3.3.1.  This keyword is reserved for use with
   transfer-coding values even though it does not itself represent a
   transfer-coding.

   Examples of its use are:

     TE: deflate
     TE:
     TE: trailers, deflate;q=0.5

   The TE header field only applies to the immediate connection.
   Therefore, the keyword MUST be supplied within a Connection header
   field (Section 8.1) whenever TE is present in an HTTP/1.1 message.

   A server tests whether a transfer-coding is acceptable, according to
   a TE field, using these rules:

   1.  The "chunked" transfer-coding is always acceptable.  If the
       keyword "trailers" is listed, the client indicates that it is
       willing to accept trailer fields in the chunked response on
       behalf of itself and any downstream clients.  The implication is
       that, if given, the client is stating that either all downstream
       clients are willing to accept trailer fields in the forwarded
       response, or that it will attempt to buffer the response on
       behalf of downstream recipients.

       Note: HTTP/1.1 does not define any means to limit the size of a
       chunked response such that a client can be assured of buffering
       the entire response.

   2.  If the transfer-coding being tested is one of the transfer-
       codings listed in the TE field, then it is acceptable unless it
       is accompanied by a qvalue of 0.  (As defined in Section 3.5, a
       qvalue of 0 means "not acceptable.")

   3.  If multiple transfer-codings are acceptable, then the acceptable
       transfer-coding with the highest non-zero qvalue is preferred.
       The "chunked" transfer-coding always has a qvalue of 1.

   If the TE field-value is empty or if no TE field is present, the only
   transfer-coding is "chunked".  A message with no transfer-coding is
   always acceptable.







Fielding, et al.        Expires January 14, 2010               [Page 43]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


8.6.  Trailer

   The general field "Trailer" indicates that the given set of header
   fields is present in the trailer of a message encoded with chunked
   transfer-coding.

     Trailer   = "Trailer" ":" OWS Trailer-v
     Trailer-v = 1#field-name

   An HTTP/1.1 message SHOULD include a Trailer header field in a
   message using chunked transfer-coding with a non-empty trailer.
   Doing so allows the recipient to know which header fields to expect
   in the trailer.

   If no Trailer header field is present, the trailer SHOULD NOT include
   any header fields.  See Section 3.3.1 for restrictions on the use of
   trailer fields in a "chunked" transfer-coding.

   Message header fields listed in the Trailer header field MUST NOT
   include the following header fields:

   o  Transfer-Encoding

   o  Content-Length

   o  Trailer

8.7.  Transfer-Encoding

   The general-header "Transfer-Encoding" field indicates what (if any)
   type of transformation has been applied to the message body in order
   to safely transfer it between the sender and the recipient.  This
   differs from the content-coding in that the transfer-coding is a
   property of the message, not of the entity.

     Transfer-Encoding   = "Transfer-Encoding" ":" OWS
                           Transfer-Encoding-v
     Transfer-Encoding-v = 1#transfer-coding

   Transfer-codings are defined in Section 3.3.  An example is:

     Transfer-Encoding: chunked

   If multiple encodings have been applied to an entity, the transfer-
   codings MUST be listed in the order in which they were applied.
   Additional information about the encoding parameters MAY be provided
   by other entity-header fields not defined by this specification.




Fielding, et al.        Expires January 14, 2010               [Page 44]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   Many older HTTP/1.0 applications do not understand the Transfer-
   Encoding header.

8.8.  Upgrade

   The general-header "Upgrade" allows the client to specify what
   additional communication protocols it supports and would like to use
   if the server finds it appropriate to switch protocols.  The server
   MUST use the Upgrade header field within a 101 (Switching Protocols)
   response to indicate which protocol(s) are being switched.

     Upgrade   = "Upgrade" ":" OWS Upgrade-v
     Upgrade-v = 1#product

   For example,

     Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11

   The Upgrade header field is intended to provide a simple mechanism
   for transition from HTTP/1.1 to some other, incompatible protocol.
   It does so by allowing the client to advertise its desire to use
   another protocol, such as a later version of HTTP with a higher major
   version number, even though the current request has been made using
   HTTP/1.1.  This eases the difficult transition between incompatible
   protocols by allowing the client to initiate a request in the more
   commonly supported protocol while indicating to the server that it
   would like to use a "better" protocol if available (where "better" is
   determined by the server, possibly according to the nature of the
   method and/or resource being requested).

   The Upgrade header field only applies to switching application-layer
   protocols upon the existing transport-layer connection.  Upgrade
   cannot be used to insist on a protocol change; its acceptance and use
   by the server is optional.  The capabilities and nature of the
   application-layer communication after the protocol change is entirely
   dependent upon the new protocol chosen, although the first action
   after changing the protocol MUST be a response to the initial HTTP
   request containing the Upgrade header field.

   The Upgrade header field only applies to the immediate connection.
   Therefore, the upgrade keyword MUST be supplied within a Connection
   header field (Section 8.1) whenever Upgrade is present in an HTTP/1.1
   message.

   The Upgrade header field cannot be used to indicate a switch to a
   protocol on a different connection.  For that purpose, it is more
   appropriate to use a 301, 302, 303, or 305 redirection response.




Fielding, et al.        Expires January 14, 2010               [Page 45]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   This specification only defines the protocol name "HTTP" for use by
   the family of Hypertext Transfer Protocols, as defined by the HTTP
   version rules of Section 3.1 and future updates to this
   specification.  Any token can be used as a protocol name; however, it
   will only be useful if both the client and server associate the name
   with the same protocol.

8.9.  Via

   The general-header field "Via" MUST be used by gateways and proxies
   to indicate the intermediate protocols and recipients between the
   user agent and the server on requests, and between the origin server
   and the client on responses.  It is analogous to the "Received" field
   defined in Section 3.6.7 of [RFC5322] and is intended to be used for
   tracking message forwards, avoiding request loops, and identifying
   the protocol capabilities of all senders along the request/response
   chain.

     Via               = "Via" ":" OWS Via-v
     Via-v             = 1#( received-protocol RWS received-by
                             [ RWS comment ] )
     received-protocol = [ protocol-name "/" ] protocol-version
     protocol-name     = token
     protocol-version  = token
     received-by       = ( uri-host [ ":" port ] ) / pseudonym
     pseudonym         = token

   The received-protocol indicates the protocol version of the message
   received by the server or client along each segment of the request/
   response chain.  The received-protocol version is appended to the Via
   field value when the message is forwarded so that information about
   the protocol capabilities of upstream applications remains visible to
   all recipients.

   The protocol-name is optional if and only if it would be "HTTP".  The
   received-by field is normally the host and optional port number of a
   recipient server or client that subsequently forwarded the message.
   However, if the real host is considered to be sensitive information,
   it MAY be replaced by a pseudonym.  If the port is not given, it MAY
   be assumed to be the default port of the received-protocol.

   Multiple Via field values represents each proxy or gateway that has
   forwarded the message.  Each recipient MUST append its information
   such that the end result is ordered according to the sequence of
   forwarding applications.

   Comments MAY be used in the Via header field to identify the software
   of the recipient proxy or gateway, analogous to the User-Agent and



Fielding, et al.        Expires January 14, 2010               [Page 46]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   Server header fields.  However, all comments in the Via field are
   optional and MAY be removed by any recipient prior to forwarding the
   message.

   For example, a request message could be sent from an HTTP/1.0 user
   agent to an internal proxy code-named "fred", which uses HTTP/1.1 to
   forward the request to a public proxy at p.example.net, which
   completes the request by forwarding it to the origin server at
   www.example.com.  The request received by www.example.com would then
   have the following Via header field:

     Via: 1.0 fred, 1.1 p.example.net (Apache/1.1)

   Proxies and gateways used as a portal through a network firewall
   SHOULD NOT, by default, forward the names and ports of hosts within
   the firewall region.  This information SHOULD only be propagated if
   explicitly enabled.  If not enabled, the received-by host of any host
   behind the firewall SHOULD be replaced by an appropriate pseudonym
   for that host.

   For organizations that have strong privacy requirements for hiding
   internal structures, a proxy MAY combine an ordered subsequence of
   Via header field entries with identical received-protocol values into
   a single such entry.  For example,

     Via: 1.0 ricky, 1.1 ethel, 1.1 fred, 1.0 lucy

   could be collapsed to

     Via: 1.0 ricky, 1.1 mertz, 1.0 lucy

   Applications SHOULD NOT combine multiple entries unless they are all
   under the same organizational control and the hosts have already been
   replaced by pseudonyms.  Applications MUST NOT combine entries which
   have different received-protocol values.


9.  IANA Considerations

9.1.  Message Header Registration

   The Message Header Registry located at <http://www.iana.org/
   assignments/message-headers/message-header-index.html> should be
   updated with the permanent registrations below (see [RFC3864]):







Fielding, et al.        Expires January 14, 2010               [Page 47]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   +-------------------+----------+----------+-------------+
   | Header Field Name | Protocol | Status   | Reference   |
   +-------------------+----------+----------+-------------+
   | Connection        | http     | standard | Section 8.1 |
   | Content-Length    | http     | standard | Section 8.2 |
   | Date              | http     | standard | Section 8.3 |
   | Host              | http     | standard | Section 8.4 |
   | TE                | http     | standard | Section 8.5 |
   | Trailer           | http     | standard | Section 8.6 |
   | Transfer-Encoding | http     | standard | Section 8.7 |
   | Upgrade           | http     | standard | Section 8.8 |
   | Via               | http     | standard | Section 8.9 |
   +-------------------+----------+----------+-------------+

   The change controller is: "IETF (iesg@ietf.org) - Internet
   Engineering Task Force".

9.2.  URI Scheme Registration

   The entry for the "http" URI Scheme in the registry located at
   <http://www.iana.org/assignments/uri-schemes.html> should be updated
   to point to Section 2.1.1 of this document (see [RFC4395]).

9.3.  Internet Media Type Registrations

   This document serves as the specification for the Internet media
   types "message/http" and "application/http".  The following is to be
   registered with IANA (see [RFC4288]).

9.3.1.  Internet Media Type message/http

   The message/http type can be used to enclose a single HTTP request or
   response message, provided that it obeys the MIME restrictions for
   all "message" types regarding line length and encodings.

   Type name:  message

   Subtype name:  http

   Required parameters:  none

   Optional parameters:  version, msgtype

      version:  The HTTP-Version number of the enclosed message (e.g.,
         "1.1").  If not present, the version can be determined from the
         first line of the body.





Fielding, et al.        Expires January 14, 2010               [Page 48]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


      msgtype:  The message type -- "request" or "response".  If not
         present, the type can be determined from the first line of the
         body.

   Encoding considerations:  only "7bit", "8bit", or "binary" are
      permitted

   Security considerations:  none

   Interoperability considerations:  none

   Published specification:  This specification (see Section 9.3.1).

   Applications that use this media type:

   Additional information:

      Magic number(s):  none

      File extension(s):  none

      Macintosh file type code(s):  none

   Person and email address to contact for further information:  See
      Authors Section.

   Intended usage:  COMMON

   Restrictions on usage:  none

   Author/Change controller:  IESG

9.3.2.  Internet Media Type application/http

   The application/http type can be used to enclose a pipeline of one or
   more HTTP request or response messages (not intermixed).

   Type name:  application

   Subtype name:  http

   Required parameters:  none

   Optional parameters:  version, msgtype







Fielding, et al.        Expires January 14, 2010               [Page 49]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


      version:  The HTTP-Version number of the enclosed messages (e.g.,
         "1.1").  If not present, the version can be determined from the
         first line of the body.

      msgtype:  The message type -- "request" or "response".  If not
         present, the type can be determined from the first line of the
         body.

   Encoding considerations:  HTTP messages enclosed by this type are in
      "binary" format; use of an appropriate Content-Transfer-Encoding
      is required when transmitted via E-mail.

   Security considerations:  none

   Interoperability considerations:  none

   Published specification:  This specification (see Section 9.3.2).

   Applications that use this media type:

   Additional information:

      Magic number(s):  none

      File extension(s):  none

      Macintosh file type code(s):  none

   Person and email address to contact for further information:  See
      Authors Section.

   Intended usage:  COMMON

   Restrictions on usage:  none

   Author/Change controller:  IESG


10.  Security Considerations

   This section is meant to inform application developers, information
   providers, and users of the security limitations in HTTP/1.1 as
   described by this document.  The discussion does not include
   definitive solutions to the problems revealed, though it does make
   some suggestions for reducing security risks.






Fielding, et al.        Expires January 14, 2010               [Page 50]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


10.1.  Personal Information

   HTTP clients are often privy to large amounts of personal information
   (e.g. the user's name, location, mail address, passwords, encryption
   keys, etc.), and SHOULD be very careful to prevent unintentional
   leakage of this information.  We very strongly recommend that a
   convenient interface be provided for the user to control
   dissemination of such information, and that designers and
   implementors be particularly careful in this area.  History shows
   that errors in this area often create serious security and/or privacy
   problems and generate highly adverse publicity for the implementor's
   company.

10.2.  Abuse of Server Log Information

   A server is in the position to save personal data about a user's
   requests which might identify their reading patterns or subjects of
   interest.  This information is clearly confidential in nature and its
   handling can be constrained by law in certain countries.  People
   using HTTP to provide data are responsible for ensuring that such
   material is not distributed without the permission of any individuals
   that are identifiable by the published results.

10.3.  Attacks Based On File and Path Names

   Implementations of HTTP origin servers SHOULD be careful to restrict
   the documents returned by HTTP requests to be only those that were
   intended by the server administrators.  If an HTTP server translates
   HTTP URIs directly into file system calls, the server MUST take
   special care not to serve files that were not intended to be
   delivered to HTTP clients.  For example, UNIX, Microsoft Windows, and
   other operating systems use ".." as a path component to indicate a
   directory level above the current one.  On such a system, an HTTP
   server MUST disallow any such construct in the request-target if it
   would otherwise allow access to a resource outside those intended to
   be accessible via the HTTP server.  Similarly, files intended for
   reference only internally to the server (such as access control
   files, configuration files, and script code) MUST be protected from
   inappropriate retrieval, since they might contain sensitive
   information.  Experience has shown that minor bugs in such HTTP
   server implementations have turned into security risks.

10.4.  DNS Spoofing

   Clients using HTTP rely heavily on the Domain Name Service, and are
   thus generally prone to security attacks based on the deliberate mis-
   association of IP addresses and DNS names.  Clients need to be
   cautious in assuming the continuing validity of an IP number/DNS name



Fielding, et al.        Expires January 14, 2010               [Page 51]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   association.

   In particular, HTTP clients SHOULD rely on their name resolver for
   confirmation of an IP number/DNS name association, rather than
   caching the result of previous host name lookups.  Many platforms
   already can cache host name lookups locally when appropriate, and
   they SHOULD be configured to do so.  It is proper for these lookups
   to be cached, however, only when the TTL (Time To Live) information
   reported by the name server makes it likely that the cached
   information will remain useful.

   If HTTP clients cache the results of host name lookups in order to
   achieve a performance improvement, they MUST observe the TTL
   information reported by DNS.

   If HTTP clients do not observe this rule, they could be spoofed when
   a previously-accessed server's IP address changes.  As network
   renumbering is expected to become increasingly common [RFC1900], the
   possibility of this form of attack will grow.  Observing this
   requirement thus reduces this potential security vulnerability.

   This requirement also improves the load-balancing behavior of clients
   for replicated servers using the same DNS name and reduces the
   likelihood of a user's experiencing failure in accessing sites which
   use that strategy.

10.5.  Proxies and Caching

   By their very nature, HTTP proxies are men-in-the-middle, and
   represent an opportunity for man-in-the-middle attacks.  Compromise
   of the systems on which the proxies run can result in serious
   security and privacy problems.  Proxies have access to security-
   related information, personal information about individual users and
   organizations, and proprietary information belonging to users and
   content providers.  A compromised proxy, or a proxy implemented or
   configured without regard to security and privacy considerations,
   might be used in the commission of a wide range of potential attacks.

   Proxy operators should protect the systems on which proxies run as
   they would protect any system that contains or transports sensitive
   information.  In particular, log information gathered at proxies
   often contains highly sensitive personal information, and/or
   information about organizations.  Log information should be carefully
   guarded, and appropriate guidelines for use developed and followed.
   (Section 10.2).

   Proxy implementors should consider the privacy and security
   implications of their design and coding decisions, and of the



Fielding, et al.        Expires January 14, 2010               [Page 52]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   configuration options they provide to proxy operators (especially the
   default configuration).

   Users of a proxy need to be aware that they are no trustworthier than
   the people who run the proxy; HTTP itself cannot solve this problem.

   The judicious use of cryptography, when appropriate, may suffice to
   protect against a broad range of security and privacy attacks.  Such
   cryptography is beyond the scope of the HTTP/1.1 specification.

10.6.  Denial of Service Attacks on Proxies

   They exist.  They are hard to defend against.  Research continues.
   Beware.


11.  Acknowledgments

   HTTP has evolved considerably over the years.  It has benefited from
   a large and active developer community--the many people who have
   participated on the www-talk mailing list--and it is that community
   which has been most responsible for the success of HTTP and of the
   World-Wide Web in general.  Marc Andreessen, Robert Cailliau, Daniel
   W. Connolly, Bob Denny, John Franks, Jean-Francois Groff, Phillip M.
   Hallam-Baker, Hakon W. Lie, Ari Luotonen, Rob McCool, Lou Montulli,
   Dave Raggett, Tony Sanders, and Marc VanHeyningen deserve special
   recognition for their efforts in defining early aspects of the
   protocol.

   This document has benefited greatly from the comments of all those
   participating in the HTTP-WG.  In addition to those already
   mentioned, the following individuals have contributed to this
   specification:

   Gary Adams, Harald Tveit Alvestrand, Keith Ball, Brian Behlendorf,
   Paul Burchard, Maurizio Codogno, Mike Cowlishaw, Roman Czyborra,
   Michael A. Dolan, Daniel DuBois, David J. Fiander, Alan Freier, Marc
   Hedlund, Greg Herlihy, Koen Holtman, Alex Hopmann, Bob Jernigan, Shel
   Kaphan, Rohit Khare, John Klensin, Martijn Koster, Alexei Kosut,
   David M. Kristol, Daniel LaLiberte, Ben Laurie, Paul J. Leach, Albert
   Lunde, John C. Mallery, Jean-Philippe Martin-Flatin, Mitra, David
   Morris, Gavin Nicol, Ross Patterson, Bill Perry, Jeffrey Perry, Scott
   Powers, Owen Rees, Luigi Rizzo, David Robinson, Marc Salomon, Rich
   Salz, Allan M. Schiffman, Jim Seidman, Chuck Shotton, Eric W. Sink,
   Simon E. Spero, Richard N. Taylor, Robert S. Thau, Bill (BearHeart)
   Weinman, Francois Yergeau, Mary Ellen Zurko, Josh Cohen.

   Thanks to the "cave men" of Palo Alto.  You know who you are.



Fielding, et al.        Expires January 14, 2010               [Page 53]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   Jim Gettys (the editor of [RFC2616]) wishes particularly to thank Roy
   Fielding, the editor of [RFC2068], along with John Klensin, Jeff
   Mogul, Paul Leach, Dave Kristol, Koen Holtman, John Franks, Josh
   Cohen, Alex Hopmann, Scott Lawrence, and Larry Masinter for their
   help.  And thanks go particularly to Jeff Mogul and Scott Lawrence
   for performing the "MUST/MAY/SHOULD" audit.

   The Apache Group, Anselm Baird-Smith, author of Jigsaw, and Henrik
   Frystyk implemented RFC 2068 early, and we wish to thank them for the
   discovery of many of the problems that this document attempts to
   rectify.

   This specification makes heavy use of the augmented BNF and generic
   constructs defined by David H. Crocker for [RFC5234].  Similarly, it
   reuses many of the definitions provided by Nathaniel Borenstein and
   Ned Freed for MIME [RFC2045].  We hope that their inclusion in this
   specification will help reduce past confusion over the relationship
   between HTTP and Internet mail message formats.


12.  References

12.1.  Normative References

   [ISO-8859-1]
              International Organization for Standardization,
              "Information technology -- 8-bit single-byte coded graphic
              character sets -- Part 1: Latin alphabet No. 1", ISO/
              IEC 8859-1:1998, 1998.

   [Part2]    Fielding, R., Ed., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., Berners-Lee, T., Lafon, Y., Ed.,
              and J. Reschke, Ed., "HTTP/1.1, part 2: Message
              Semantics", draft-ietf-httpbis-p2-semantics-07 (work in
              progress), July 2009.

   [Part3]    Fielding, R., Ed., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., Berners-Lee, T., Lafon, Y., Ed.,
              and J. Reschke, Ed., "HTTP/1.1, part 3: Message Payload
              and Content Negotiation", draft-ietf-httpbis-p3-payload-07
              (work in progress), July 2009.

   [Part5]    Fielding, R., Ed., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., Berners-Lee, T., Lafon, Y., Ed.,
              and J. Reschke, Ed., "HTTP/1.1, part 5: Range Requests and
              Partial Responses", draft-ietf-httpbis-p5-range-07 (work
              in progress), July 2009.




Fielding, et al.        Expires January 14, 2010               [Page 54]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   [Part6]    Fielding, R., Ed., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., Berners-Lee, T., Lafon, Y., Ed.,
              Nottingham, M., Ed., and J. Reschke, Ed., "HTTP/1.1, part
              6: Caching", draft-ietf-httpbis-p6-cache-07 (work in
              progress), July 2009.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", RFC 3986,
              STD 66, January 2005.

   [RFC5234]  Crocker, D., Ed. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234, January 2008.

   [USASCII]  American National Standards Institute, "Coded Character
              Set -- 7-bit American Standard Code for Information
              Interchange", ANSI X3.4, 1986.

12.2.  Informative References

   [Kri2001]  Kristol, D., "HTTP Cookies: Standards, Privacy, and
              Politics", ACM Transactions on Internet Technology Vol. 1,
              #2, November 2001, <http://arxiv.org/abs/cs.SE/0105018>.

   [Nie1997]  Nielsen, H., Gettys, J., Prud'hommeaux, E., Lie, H., and
              C. Lilley, "Network Performance Effects of HTTP/1.1, CSS1,
              and PNG", ACM Proceedings of the ACM SIGCOMM '97
              conference on Applications, technologies, architectures,
              and protocols for computer communication SIGCOMM '97,
              September 1997,
              <http://doi.acm.org/10.1145/263105.263157>.

   [Pad1995]  Padmanabhan, V. and J. Mogul, "Improving HTTP Latency",
              Computer Networks and ISDN Systems v. 28, pp. 25-35,
              December 1995,
              <http://portal.acm.org/citation.cfm?id=219094>.

   [RFC1123]  Braden, R., "Requirements for Internet Hosts - Application
              and Support", STD 3, RFC 1123, October 1989.

   [RFC1305]  Mills, D., "Network Time Protocol (Version 3)
              Specification, Implementation", RFC 1305, March 1992.

   [RFC1900]  Carpenter, B. and Y. Rekhter, "Renumbering Needs Work",
              RFC 1900, February 1996.




Fielding, et al.        Expires January 14, 2010               [Page 55]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   [RFC1945]  Berners-Lee, T., Fielding, R., and H. Nielsen, "Hypertext
              Transfer Protocol -- HTTP/1.0", RFC 1945, May 1996.

   [RFC2045]  Freed, N. and N. Borenstein, "Multipurpose Internet Mail
              Extensions (MIME) Part One: Format of Internet Message
              Bodies", RFC 2045, November 1996.

   [RFC2047]  Moore, K., "MIME (Multipurpose Internet Mail Extensions)
              Part Three: Message Header Extensions for Non-ASCII Text",
              RFC 2047, November 1996.

   [RFC2068]  Fielding, R., Gettys, J., Mogul, J., Nielsen, H., and T.
              Berners-Lee, "Hypertext Transfer Protocol -- HTTP/1.1",
              RFC 2068, January 1997.

   [RFC2109]  Kristol, D. and L. Montulli, "HTTP State Management
              Mechanism", RFC 2109, February 1997.

   [RFC2145]  Mogul, J., Fielding, R., Gettys, J., and H. Nielsen, "Use
              and Interpretation of HTTP Version Numbers", RFC 2145,
              May 1997.

   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616, June 1999.

   [RFC2818]  Rescorla, E., "HTTP Over TLS", RFC 2818, May 2000.

   [RFC2965]  Kristol, D. and L. Montulli, "HTTP State Management
              Mechanism", RFC 2965, October 2000.

   [RFC3864]  Klyne, G., Nottingham, M., and J. Mogul, "Registration
              Procedures for Message Header Fields", BCP 90, RFC 3864,
              September 2004.

   [RFC4288]  Freed, N. and J. Klensin, "Media Type Specifications and
              Registration Procedures", BCP 13, RFC 4288, December 2005.

   [RFC4395]  Hansen, T., Hardie, T., and L. Masinter, "Guidelines and
              Registration Procedures for New URI Schemes", BCP 115,
              RFC 4395, February 2006.

   [RFC5322]  Resnick, P., "Internet Message Format", RFC 5322,
              October 2008.

   [Spe]      Spero, S., "Analysis of HTTP Performance Problems",
              <http://sunsite.unc.edu/mdma-release/http-prob.html>.




Fielding, et al.        Expires January 14, 2010               [Page 56]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   [Tou1998]  Touch, J., Heidemann, J., and K. Obraczka, "Analysis of
              HTTP Performance", ISI Research Report ISI/RR-98-463,
              Aug 1998, <http://www.isi.edu/touch/pubs/http-perf96/>.

              (original report dated Aug. 1996)


Appendix A.  Tolerant Applications

   Although this document specifies the requirements for the generation
   of HTTP/1.1 messages, not all applications will be correct in their
   implementation.  We therefore recommend that operational applications
   be tolerant of deviations whenever those deviations can be
   interpreted unambiguously.

   Clients SHOULD be tolerant in parsing the Status-Line and servers
   tolerant when parsing the Request-Line.  In particular, they SHOULD
   accept any amount of WSP characters between fields, even though only
   a single SP is required.

   The line terminator for message-header fields is the sequence CRLF.
   However, we recommend that applications, when parsing such headers,
   recognize a single LF as a line terminator and ignore the leading CR.

   The character set of an entity-body SHOULD be labeled as the lowest
   common denominator of the character codes used within that body, with
   the exception that not labeling the entity is preferred over labeling
   the entity with the labels US-ASCII or ISO-8859-1.  See [Part3].

   Additional rules for requirements on parsing and encoding of dates
   and other potential problems with date encodings include:

   o  HTTP/1.1 clients and caches SHOULD assume that an RFC-850 date
      which appears to be more than 50 years in the future is in fact in
      the past (this helps solve the "year 2000" problem).

   o  An HTTP/1.1 implementation MAY internally represent a parsed
      Expires date as earlier than the proper value, but MUST NOT
      internally represent a parsed Expires date as later than the
      proper value.

   o  All expiration-related calculations MUST be done in GMT.  The
      local time zone MUST NOT influence the calculation or comparison
      of an age or expiration time.

   o  If an HTTP header incorrectly carries a date value with a time
      zone other than GMT, it MUST be converted into GMT using the most
      conservative possible conversion.



Fielding, et al.        Expires January 14, 2010               [Page 57]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


Appendix B.  Compatibility with Previous Versions

   HTTP has been in use by the World-Wide Web global information
   initiative since 1990.  The first version of HTTP, later referred to
   as HTTP/0.9, was a simple protocol for hypertext data transfer across
   the Internet with only a single method and no metadata.  HTTP/1.0, as
   defined by [RFC1945], added a range of request methods and MIME-like
   messaging that could include metadata about the data transferred and
   modifiers on the request/response semantics.  However, HTTP/1.0 did
   not sufficiently take into consideration the effects of hierarchical
   proxies, caching, the need for persistent connections, or name-based
   virtual hosts.  The proliferation of incompletely-implemented
   applications calling themselves "HTTP/1.0" further necessitated a
   protocol version change in order for two communicating applications
   to determine each other's true capabilities.

   HTTP/1.1 remains compatible with HTTP/1.0 by including more stringent
   requirements that enable reliable implementations, adding only those
   new features that will either be safely ignored by an HTTP/1.0
   recipient or only sent when communicating with a party advertising
   compliance with HTTP/1.1.

   It is beyond the scope of a protocol specification to mandate
   compliance with previous versions.  HTTP/1.1 was deliberately
   designed, however, to make supporting previous versions easy.  It is
   worth noting that, at the time of composing this specification
   (1996), we would expect commercial HTTP/1.1 servers to:

   o  recognize the format of the Request-Line for HTTP/0.9, 1.0, and
      1.1 requests;

   o  understand any valid request in the format of HTTP/0.9, 1.0, or
      1.1;

   o  respond appropriately with a message in the same major version
      used by the client.

   And we would expect HTTP/1.1 clients to:

   o  recognize the format of the Status-Line for HTTP/1.0 and 1.1
      responses;

   o  understand any valid response in the format of HTTP/0.9, 1.0, or
      1.1.

   For most implementations of HTTP/1.0, each connection is established
   by the client prior to the request and closed by the server after
   sending the response.  Some implementations implement the Keep-Alive



Fielding, et al.        Expires January 14, 2010               [Page 58]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   version of persistent connections described in Section 19.7.1 of
   [RFC2068].

B.1.  Changes from HTTP/1.0

   This section summarizes major differences between versions HTTP/1.0
   and HTTP/1.1.

B.1.1.  Changes to Simplify Multi-homed Web Servers and Conserve IP
        Addresses

   The requirements that clients and servers support the Host request-
   header, report an error if the Host request-header (Section 8.4) is
   missing from an HTTP/1.1 request, and accept absolute URIs
   (Section 5.1.2) are among the most important changes defined by this
   specification.

   Older HTTP/1.0 clients assumed a one-to-one relationship of IP
   addresses and servers; there was no other established mechanism for
   distinguishing the intended server of a request than the IP address
   to which that request was directed.  The changes outlined above will
   allow the Internet, once older HTTP clients are no longer common, to
   support multiple Web sites from a single IP address, greatly
   simplifying large operational Web servers, where allocation of many
   IP addresses to a single host has created serious problems.  The
   Internet will also be able to recover the IP addresses that have been
   allocated for the sole purpose of allowing special-purpose domain
   names to be used in root-level HTTP URLs.  Given the rate of growth
   of the Web, and the number of servers already deployed, it is
   extremely important that all implementations of HTTP (including
   updates to existing HTTP/1.0 applications) correctly implement these
   requirements:

   o  Both clients and servers MUST support the Host request-header.

   o  A client that sends an HTTP/1.1 request MUST send a Host header.

   o  Servers MUST report a 400 (Bad Request) error if an HTTP/1.1
      request does not include a Host request-header.

   o  Servers MUST accept absolute URIs.

B.2.  Compatibility with HTTP/1.0 Persistent Connections

   Some clients and servers might wish to be compatible with some
   previous implementations of persistent connections in HTTP/1.0
   clients and servers.  Persistent connections in HTTP/1.0 are
   explicitly negotiated as they are not the default behavior.  HTTP/1.0



Fielding, et al.        Expires January 14, 2010               [Page 59]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   experimental implementations of persistent connections are faulty,
   and the new facilities in HTTP/1.1 are designed to rectify these
   problems.  The problem was that some existing 1.0 clients may be
   sending Keep-Alive to a proxy server that doesn't understand
   Connection, which would then erroneously forward it to the next
   inbound server, which would establish the Keep-Alive connection and
   result in a hung HTTP/1.0 proxy waiting for the close on the
   response.  The result is that HTTP/1.0 clients must be prevented from
   using Keep-Alive when talking to proxies.

   However, talking to proxies is the most important use of persistent
   connections, so that prohibition is clearly unacceptable.  Therefore,
   we need some other mechanism for indicating a persistent connection
   is desired, which is safe to use even when talking to an old proxy
   that ignores Connection.  Persistent connections are the default for
   HTTP/1.1 messages; we introduce a new keyword (Connection: close) for
   declaring non-persistence.  See Section 8.1.

   The original HTTP/1.0 form of persistent connections (the Connection:
   Keep-Alive and Keep-Alive header) is documented in Section 19.7.1 of
   [RFC2068].

B.3.  Changes from RFC 2068

   This specification has been carefully audited to correct and
   disambiguate key word usage; RFC 2068 had many problems in respect to
   the conventions laid out in [RFC2119].

   Transfer-coding and message lengths all interact in ways that
   required fixing exactly when chunked encoding is used (to allow for
   transfer encoding that may not be self delimiting); it was important
   to straighten out exactly how message lengths are computed.
   (Sections 3.3, 4.4, 8.2, see also [Part3], [Part5] and [Part6])

   The use and interpretation of HTTP version numbers has been clarified
   by [RFC2145].  Require proxies to upgrade requests to highest
   protocol version they support to deal with problems discovered in
   HTTP/1.0 implementations (Section 3.1)

   Quality Values of zero should indicate that "I don't want something"
   to allow clients to refuse a representation.  (Section 3.5)

   Transfer-coding had significant problems, particularly with
   interactions with chunked encoding.  The solution is that transfer-
   codings become as full fledged as content-codings.  This involves
   adding an IANA registry for transfer-codings (separate from content
   codings), a new header field (TE) and enabling trailer headers in the
   future.  Transfer encoding is a major performance benefit, so it was



Fielding, et al.        Expires January 14, 2010               [Page 60]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   worth fixing [Nie1997].  TE also solves another, obscure, downward
   interoperability problem that could have occurred due to interactions
   between authentication trailers, chunked encoding and HTTP/1.0
   clients.(Section 3.3, 3.3.1, and 8.5)

B.4.  Changes from RFC 2616

   Empty list elements in list productions have been deprecated.
   (Section 1.2.1)

   Rules about implicit linear whitespace between certain grammar
   productions have been removed; now it's only allowed when
   specifically pointed out in the ABNF.  The NUL character is no longer
   allowed in comment and quoted-string text.  The quoted-pair rule no
   longer allows escaping NUL, CR or LF.  Non-ASCII content in header
   fields and reason phrase has been obsoleted and made opaque (the TEXT
   rule was removed) (Section 1.2.2)

   Clarify that HTTP-Version is case sensitive.  (Section 3.1)

   Remove reference to non-existant identity transfer-coding value
   tokens.  (Sections 3.3 and 4.4)

   Clarification that the chunk length does not include the count of the
   octets in the chunk header and trailer.  (Section 3.3.1)

   Require that invalid whitespace around field-names be rejected.
   (Section 4.2)

   Update use of abs_path production from RFC1808 to the path-absolute +
   query components of RFC3986.  (Section 5.1.2)

   Clarify exactly when close connection options must be sent.
   (Section 8.1)


Appendix C.  Terminology

   This specification uses a number of terms to refer to the roles
   played by participants in, and objects of, the HTTP communication.

   cache

      A program's local store of response messages and the subsystem
      that controls its message storage, retrieval, and deletion.  A
      cache stores cacheable responses in order to reduce the response
      time and network bandwidth consumption on future, equivalent
      requests.  Any client or server may include a cache, though a



Fielding, et al.        Expires January 14, 2010               [Page 61]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


      cache cannot be used by a server that is acting as a tunnel.

   cacheable

      A response is cacheable if a cache is allowed to store a copy of
      the response message for use in answering subsequent requests.
      The rules for determining the cacheability of HTTP responses are
      defined in Section 1 of [Part6].  Even if a resource is cacheable,
      there may be additional constraints on whether a cache can use the
      cached copy for a particular request.

   client

      A program that establishes connections for the purpose of sending
      requests.

   connection

      A transport layer virtual circuit established between two programs
      for the purpose of communication.

   content negotiation

      The mechanism for selecting the appropriate representation when
      servicing a request, as described in Section 4 of [Part3].  The
      representation of entities in any response can be negotiated
      (including error responses).

   entity

      The information transferred as the payload of a request or
      response.  An entity consists of metainformation in the form of
      entity-header fields and content in the form of an entity-body, as
      described in Section 3 of [Part3].

   gateway

      A server which acts as an intermediary for some other server.
      Unlike a proxy, a gateway receives requests as if it were the
      origin server for the requested resource; the requesting client
      may not be aware that it is communicating with a gateway.

   inbound/outbound

      Inbound and outbound refer to the request and response paths for
      messages: "inbound" means "traveling toward the origin server",
      and "outbound" means "traveling toward the user agent"




Fielding, et al.        Expires January 14, 2010               [Page 62]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   message

      The basic unit of HTTP communication, consisting of a structured
      sequence of octets matching the syntax defined in Section 4 and
      transmitted via the connection.

   origin server

      The server on which a given resource resides or is to be created.

   proxy

      An intermediary program which acts as both a server and a client
      for the purpose of making requests on behalf of other clients.
      Requests are serviced internally or by passing them on, with
      possible translation, to other servers.  A proxy MUST implement
      both the client and server requirements of this specification.  A
      "transparent proxy" is a proxy that does not modify the request or
      response beyond what is required for proxy authentication and
      identification.  A "non-transparent proxy" is a proxy that
      modifies the request or response in order to provide some added
      service to the user agent, such as group annotation services,
      media type transformation, protocol reduction, or anonymity
      filtering.  Except where either transparent or non-transparent
      behavior is explicitly stated, the HTTP proxy requirements apply
      to both types of proxies.

   request

      An HTTP request message, as defined in Section 5.

   resource

      A network data object or service that can be identified by a URI,
      as defined in Section 2.1.  Resources may be available in multiple
      representations (e.g. multiple languages, data formats, size, and
      resolutions) or vary in other ways.

   response

      An HTTP response message, as defined in Section 6.

   representation

      An entity included with a response that is subject to content
      negotiation, as described in Section 4 of [Part3].  There may
      exist multiple representations associated with a particular
      response status.



Fielding, et al.        Expires January 14, 2010               [Page 63]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   server

      An application program that accepts connections in order to
      service requests by sending back responses.  Any given program may
      be capable of being both a client and a server; our use of these
      terms refers only to the role being performed by the program for a
      particular connection, rather than to the program's capabilities
      in general.  Likewise, any server may act as an origin server,
      proxy, gateway, or tunnel, switching behavior based on the nature
      of each request.

   tunnel

      An intermediary program which is acting as a blind relay between
      two connections.  Once active, a tunnel is not considered a party
      to the HTTP communication, though the tunnel may have been
      initiated by an HTTP request.  The tunnel ceases to exist when
      both ends of the relayed connections are closed.

   upstream/downstream

      Upstream and downstream describe the flow of a message: all
      messages flow from upstream to downstream.

   user agent

      The client which initiates a request.  These are often browsers,
      editors, spiders (web-traversing robots), or other end user tools.

   variant

      A resource may have one, or more than one, representation(s)
      associated with it at any given instant.  Each of these
      representations is termed a `variant'.  Use of the term `variant'
      does not necessarily imply that the resource is subject to content
      negotiation.


Appendix D.  Collected ABNF

   BWS = OWS

   Cache-Control = <Cache-Control, defined in [Part6], Section 3.4>
   Chunked-Body = *chunk last-chunk trailer-part CRLF
   Connection = "Connection:" OWS Connection-v
   Connection-v = *( "," OWS ) connection-token *( OWS "," [ OWS
    connection-token ] )
   Content-Length = "Content-Length:" OWS 1*Content-Length-v



Fielding, et al.        Expires January 14, 2010               [Page 64]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   Content-Length-v = 1*DIGIT

   Date = "Date:" OWS Date-v
   Date-v = HTTP-date

   GMT = %x47.4D.54 ; GMT

   HTTP-Prot-Name = %x48.54.54.50 ; HTTP
   HTTP-Version = HTTP-Prot-Name "/" 1*DIGIT "." 1*DIGIT
   HTTP-date = rfc1123-date / obs-date
   HTTP-message = Request / Response
   Host = "Host:" OWS Host-v
   Host-v = uri-host [ ":" port ]

   Method = token

   OWS = *( [ obs-fold ] WSP )

   Pragma = <Pragma, defined in [Part6], Section 3.4>

   RWS = 1*( [ obs-fold ] WSP )
   Reason-Phrase = *( WSP / VCHAR / obs-text )
   Request = Request-Line *( ( general-header / request-header /
    entity-header ) CRLF ) CRLF [ message-body ]
   Request-Line = Method SP request-target SP HTTP-Version CRLF
   Response = Status-Line *( ( general-header / response-header /
    entity-header ) CRLF ) CRLF [ message-body ]

   Status-Code = 3DIGIT
   Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF

   TE = "TE:" OWS TE-v
   TE-v = [ ( "," / t-codings ) *( OWS "," [ OWS t-codings ] ) ]
   Trailer = "Trailer:" OWS Trailer-v
   Trailer-v = *( "," OWS ) field-name *( OWS "," [ OWS field-name ] )
   Transfer-Encoding = "Transfer-Encoding:" OWS Transfer-Encoding-v
   Transfer-Encoding-v = *( "," OWS ) transfer-coding *( OWS "," [ OWS
    transfer-coding ] )

   URI = <URI, defined in [RFC3986], Section 3>
   URI-reference = <URI-reference, defined in [RFC3986], Section 4.1>
   Upgrade = "Upgrade:" OWS Upgrade-v
   Upgrade-v = *( "," OWS ) product *( OWS "," [ OWS product ] )

   Via = "Via:" OWS Via-v
   Via-v = *( "," OWS ) received-protocol RWS received-by [ RWS comment
    ] *( OWS "," [ OWS received-protocol RWS received-by [ RWS comment ]
    ] )



Fielding, et al.        Expires January 14, 2010               [Page 65]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   Warning = <Warning, defined in [Part6], Section 3.6>

   absolute-URI = <absolute-URI, defined in [RFC3986], Section 4.3>
   asctime-date = day-name SP date3 SP time-of-day SP year
   attribute = token
   authority = <authority, defined in [RFC3986], Section 3.2>

   chunk = chunk-size *WSP [ chunk-ext ] CRLF chunk-data CRLF
   chunk-data = 1*OCTET
   chunk-ext = *( ";" *WSP chunk-ext-name [ "=" chunk-ext-val ] *WSP )
   chunk-ext-name = token
   chunk-ext-val = token / quoted-string
   chunk-size = 1*HEXDIG
   comment = "(" *( ctext / quoted-pair / comment ) ")"
   connection-token = token
   ctext = OWS / %x21-27 ; '!'-'''
    / %x2A-5B ; '*'-'['
    / %x5D-7E ; ']'-'~'
    / obs-text

   date1 = day SP month SP year
   date2 = day "-" month "-" 2DIGIT
   date3 = month SP ( 2DIGIT / ( SP DIGIT ) )
   day = 2DIGIT
   day-name = %x4D.6F.6E ; Mon
    / %x54.75.65 ; Tue
    / %x57.65.64 ; Wed
    / %x54.68.75 ; Thu
    / %x46.72.69 ; Fri
    / %x53.61.74 ; Sat
    / %x53.75.6E ; Sun
   day-name-l = %x4D.6F.6E.64.61.79 ; Monday
    / %x54.75.65.73.64.61.79 ; Tuesday
    / %x57.65.64.6E.65.73.64.61.79 ; Wednesday
    / %x54.68.75.72.73.64.61.79 ; Thursday
    / %x46.72.69.64.61.79 ; Friday
    / %x53.61.74.75.72.64.61.79 ; Saturday
    / %x53.75.6E.64.61.79 ; Sunday

   entity-body = <entity-body, defined in [Part3], Section 3.2>
   entity-header = <entity-header, defined in [Part3], Section 3.1>

   field-content = *( WSP / VCHAR / obs-text )
   field-name = token
   field-value = *( field-content / OWS )
   fragment = <fragment, defined in [RFC3986], Section 3.5>





Fielding, et al.        Expires January 14, 2010               [Page 66]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   general-header = Cache-Control / Connection / Date / Pragma / Trailer
    / Transfer-Encoding / Upgrade / Via / Warning
   generic-message = start-line *( message-header CRLF ) CRLF [
    message-body ]

   hour = 2DIGIT
   http-URI = "http://" authority path-abempty [ "?" query ]

   last-chunk = 1*"0" *WSP [ chunk-ext ] CRLF

   message-body = entity-body /
    <entity-body encoded as per Transfer-Encoding>
   message-header = field-name ":" OWS [ field-value ] OWS
   minute = 2DIGIT
   month = %x4A.61.6E ; Jan
    / %x46.65.62 ; Feb
    / %x4D.61.72 ; Mar
    / %x41.70.72 ; Apr
    / %x4D.61.79 ; May
    / %x4A.75.6E ; Jun
    / %x4A.75.6C ; Jul
    / %x41.75.67 ; Aug
    / %x53.65.70 ; Sep
    / %x4F.63.74 ; Oct
    / %x4E.6F.76 ; Nov
    / %x44.65.63 ; Dec

   obs-date = rfc850-date / asctime-date
   obs-fold = CRLF
   obs-text = %x80-FF

   partial-URI = relative-part [ "?" query ]
   path-abempty = <path-abempty, defined in [RFC3986], Section 3.3>
   path-absolute = <path-absolute, defined in [RFC3986], Section 3.3>
   port = <port, defined in [RFC3986], Section 3.2.3>
   product = token [ "/" product-version ]
   product-version = token
   protocol-name = token
   protocol-version = token
   pseudonym = token

   qdtext = OWS / "!" / %x23-5B ; '#'-'['
    / %x5D-7E ; ']'-'~'
    / obs-text
   query = <query, defined in [RFC3986], Section 3.4>
   quoted-pair = "\" quoted-text
   quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
   quoted-text = %x01-09 / %x0B-0C / %x0E-FF



Fielding, et al.        Expires January 14, 2010               [Page 67]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   qvalue = ( "0" [ "." *3DIGIT ] ) / ( "1" [ "." *3"0" ] )

   received-by = ( uri-host [ ":" port ] ) / pseudonym
   received-protocol = [ protocol-name "/" ] protocol-version
   relative-part = <relative-part, defined in [RFC3986], Section 4.2>
   request-header = <request-header, defined in [Part2], Section 3>
   request-target = "*" / absolute-URI / ( path-absolute [ "?" query ] )
    / authority
   response-header = <response-header, defined in [Part2], Section 5>
   rfc1123-date = day-name "," SP date1 SP time-of-day SP GMT
   rfc850-date = day-name-l "," SP date2 SP time-of-day SP GMT

   second = 2DIGIT
   start-line = Request-Line / Status-Line

   t-codings = "trailers" / ( transfer-extension [ te-params ] )
   tchar = "!" / "#" / "$" / "%" / "&" / "'" / "*" / "+" / "-" / "." /
    "^" / "_" / "`" / "|" / "~" / DIGIT / ALPHA
   te-ext = OWS ";" OWS token [ "=" ( token / quoted-string ) ]
   te-params = OWS ";" OWS "q=" qvalue *te-ext
   time-of-day = hour ":" minute ":" second
   token = 1*tchar
   trailer-part = *( entity-header CRLF )
   transfer-coding = "chunked" / transfer-extension
   transfer-extension = token *( OWS ";" OWS transfer-parameter )
   transfer-parameter = attribute BWS "=" BWS value

   uri-host = <host, defined in [RFC3986], Section 3.2.2>

   value = token / quoted-string

   year = 4DIGIT

   ABNF diagnostics:

   ; Chunked-Body defined but not used
   ; Content-Length defined but not used
   ; HTTP-message defined but not used
   ; Host defined but not used
   ; TE defined but not used
   ; URI defined but not used
   ; URI-reference defined but not used
   ; fragment defined but not used
   ; generic-message defined but not used
   ; http-URI defined but not used
   ; partial-URI defined but not used





Fielding, et al.        Expires January 14, 2010               [Page 68]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


Appendix E.  Change Log (to be removed by RFC Editor before publication)

E.1.  Since RFC2616

   Extracted relevant partitions from [RFC2616].

E.2.  Since draft-ietf-httpbis-p1-messaging-00

   Closed issues:

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/1>: "HTTP Version
      should be case sensitive"
      (<http://purl.org/NET/http-errata#verscase>)

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/2>: "'unsafe'
      characters" (<http://purl.org/NET/http-errata#unsafe-uri>)

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/3>: "Chunk Size
      Definition" (<http://purl.org/NET/http-errata#chunk-size>)

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/4>: "Message Length"
      (<http://purl.org/NET/http-errata#msg-len-chars>)

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/8>: "Media Type
      Registrations" (<http://purl.org/NET/http-errata#media-reg>)

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/11>: "URI includes
      query" (<http://purl.org/NET/http-errata#uriquery>)

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/15>: "No close on
      1xx responses" (<http://purl.org/NET/http-errata#noclose1xx>)

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/16>: "Remove
      'identity' token references"
      (<http://purl.org/NET/http-errata#identity>)

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/26>: "Import query
      BNF"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/31>: "qdtext BNF"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/35>: "Normative and
      Informative references"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/42>: "RFC2606
      Compliance"





Fielding, et al.        Expires January 14, 2010               [Page 69]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/45>: "RFC977
      reference"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/46>: "RFC1700
      references"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/47>: "inconsistency
      in date format explanation"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/48>: "Date reference
      typo"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/65>: "Informative
      references"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/66>: "ISO-8859-1
      Reference"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/86>: "Normative up-
      to-date references"

   Other changes:

   o  Update media type registrations to use RFC4288 template.

   o  Use names of RFC4234 core rules DQUOTE and WSP, fix broken ABNF
      for chunk-data (work in progress on
      <http://tools.ietf.org/wg/httpbis/trac/ticket/36>)

E.3.  Since draft-ietf-httpbis-p1-messaging-01

   Closed issues:

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/19>: "Bodies on GET
      (and other) requests"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/55>: "Updating to
      RFC4288"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/57>: "Status Code
      and Reason Phrase"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/82>: "rel_path not
      used"

   Ongoing work on ABNF conversion
   (<http://tools.ietf.org/wg/httpbis/trac/ticket/36>):




Fielding, et al.        Expires January 14, 2010               [Page 70]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   o  Get rid of duplicate BNF rule names ("host" -> "uri-host",
      "trailer" -> "trailer-part").

   o  Avoid underscore character in rule names ("http_URL" -> "http-
      URL", "abs_path" -> "path-absolute").

   o  Add rules for terms imported from URI spec ("absoluteURI",
      "authority", "path-absolute", "port", "query", "relativeURI",
      "host) -- these will have to be updated when switching over to
      RFC3986.

   o  Synchronize core rules with RFC5234.

   o  Get rid of prose rules that span multiple lines.

   o  Get rid of unused rules LOALPHA and UPALPHA.

   o  Move "Product Tokens" section (back) into Part 1, as "token" is
      used in the definition of the Upgrade header.

   o  Add explicit references to BNF syntax and rules imported from
      other parts of the specification.

   o  Rewrite prose rule "token" in terms of "tchar", rewrite prose rule
      "TEXT".

E.4.  Since draft-ietf-httpbis-p1-messaging-02

   Closed issues:

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/51>: "HTTP-date vs.
      rfc1123-date"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/64>: "WS in quoted-
      pair"

   Ongoing work on IANA Message Header Registration
   (<http://tools.ietf.org/wg/httpbis/trac/ticket/40>):

   o  Reference RFC 3984, and update header registrations for headers
      defined in this document.

   Ongoing work on ABNF conversion
   (<http://tools.ietf.org/wg/httpbis/trac/ticket/36>):

   o  Replace string literals when the string really is case-sensitive
      (HTTP-Version).




Fielding, et al.        Expires January 14, 2010               [Page 71]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


E.5.  Since draft-ietf-httpbis-p1-messaging-03

   Closed issues:

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/28>: "Connection
      closing"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/97>: "Move
      registrations and registry information to IANA Considerations"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/120>: "need new URL
      for PAD1995 reference"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/127>: "IANA
      Considerations: update HTTP URI scheme registration"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/128>: "Cite HTTPS
      URI scheme definition"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/129>: "List-type
      headers vs Set-Cookie"

   Ongoing work on ABNF conversion
   (<http://tools.ietf.org/wg/httpbis/trac/ticket/36>):

   o  Replace string literals when the string really is case-sensitive
      (HTTP-Date).

   o  Replace HEX by HEXDIG for future consistence with RFC 5234's core
      rules.

E.6.  Since draft-ietf-httpbis-p1-messaging-04

   Closed issues:

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/34>: "Out-of-date
      reference for URIs"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/132>: "RFC 2822 is
      updated by RFC 5322"

   Ongoing work on ABNF conversion
   (<http://tools.ietf.org/wg/httpbis/trac/ticket/36>):

   o  Use "/" instead of "|" for alternatives.

   o  Get rid of RFC822 dependency; use RFC5234 plus extensions instead.




Fielding, et al.        Expires January 14, 2010               [Page 72]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   o  Only reference RFC 5234's core rules.

   o  Introduce new ABNF rules for "bad" whitespace ("BWS"), optional
      whitespace ("OWS") and required whitespace ("RWS").

   o  Rewrite ABNFs to spell out whitespace rules, factor out header
      value format definitions.

E.7.  Since draft-ietf-httpbis-p1-messaging-05

   Closed issues:

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/30>: "Header LWS"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/52>: "Sort 1.3
      Terminology"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/63>: "RFC2047
      encoded words"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/74>: "Character
      Encodings in TEXT"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/77>: "Line Folding"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/83>: "OPTIONS * and
      proxies"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/94>: "Reason-Phrase
      BNF"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/111>: "Use of TEXT"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/118>: "Join
      "Differences Between HTTP Entities and RFC 2045 Entities"?"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/134>: "RFC822
      reference left in discussion of date formats"

   Final work on ABNF conversion
   (<http://tools.ietf.org/wg/httpbis/trac/ticket/36>):

   o  Rewrite definition of list rules, deprecate empty list elements.

   o  Add appendix containing collected and expanded ABNF.

   Other changes:




Fielding, et al.        Expires January 14, 2010               [Page 73]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   o  Rewrite introduction; add mostly new Architecture Section.

   o  Move definition of quality values from Part 3 into Part 1; make TE
      request header grammar independent of accept-params (defined in
      Part 3).

E.8.  Since draft-ietf-httpbis-p1-messaging-06

   Closed issues:

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/161>: "base for
      numeric protocol elements"

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/162>: "comment ABNF"

   Partly resolved issues:

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/88>: "205 Bodies"
      (took out language that implied that there may be methods for
      which a request body MUST NOT be included)

   o  <http://tools.ietf.org/wg/httpbis/trac/ticket/163>: "editorial
      improvements around HTTP-date"


Index

   A
      application/http Media Type  49

   C
      cache  61
      cacheable  62
      client  62
      connection  62
      Connection header  39
      content negotiation  62
      Content-Length header  40

   D
      Date header  40
      downstream  64

   E
      entity  62

   G
      gateway  62



Fielding, et al.        Expires January 14, 2010               [Page 74]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


      Grammar
         absolute-URI  10
         ALPHA  7
         asctime-date  18
         attribute  18
         authority  10
         BWS  9
         chunk  20
         chunk-data  20
         chunk-ext  20
         chunk-ext-name  20
         chunk-ext-val  20
         chunk-size  20
         Chunked-Body  20
         comment  24
         Connection  39
         connection-token  39
         Connection-v  39
         Content-Length  40
         Content-Length-v  40
         CR  7
         CRLF  7
         ctext  24
         CTL  7
         Date  40
         Date-v  40
         date1  17
         date2  18
         date3  18
         day  17
         day-name  17
         day-name-l  17
         DIGIT  7
         DQUOTE  7
         extension-code  31
         extension-method  28
         field-content  23
         field-name  23
         field-value  23
         general-header  27
         generic-message  22
         GMT  17
         HEXDIG  7
         Host  42
         Host-v  42
         hour  17
         HTTP-date  16
         HTTP-message  22



Fielding, et al.        Expires January 14, 2010               [Page 75]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


         HTTP-Prot-Name  14
         http-URI  11
         HTTP-Version  14
         last-chunk  20
         LF  7
         message-body  25
         message-header  23
         Method  28
         minute  17
         month  17
         obs-date  17
         obs-text  9
         OCTET  7
         OWS  9
         path-absolute  10
         port  10
         product  21
         product-version  21
         protocol-name  46
         protocol-version  46
         pseudonym  46
         qdtext  9
         query  10
         quoted-pair  9
         quoted-string  9
         quoted-text  9
         qvalue  22
         Reason-Phrase  31
         received-by  46
         received-protocol  46
         Request  27
         Request-Line  28
         request-target  28
         Response  31
         rfc850-date  18
         rfc1123-date  17
         RWS  9
         second  17
         SP  7
         start-line  22
         Status-Code  31
         Status-Line  31
         t-codings  42
         tchar  9
         TE  42
         te-ext  42
         te-params  42
         TE-v  42



Fielding, et al.        Expires January 14, 2010               [Page 76]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


         time-of-day  17
         token  9
         Trailer  44
         trailer-part  20
         Trailer-v  44
         transfer-coding  18
         Transfer-Encoding  44
         Transfer-Encoding-v  44
         transfer-extension  18
         transfer-parameter  18
         Upgrade  45
         Upgrade-v  45
         uri-host  10
         URI-reference  10
         value  18
         VCHAR  7
         Via  46
         Via-v  46
         WSP  7
         year  17

   H
      Headers
         Connection  39
         Content-Length  40
         Date  40
         Host  42
         TE  42
         Trailer  44
         Transfer-Encoding  44
         Upgrade  45
         Via  46
      Host header  42
      http URI scheme  11
      https URI scheme  11

   I
      inbound  62

   M
      Media Type
         application/http  49
         message/http  48
      message  63
      message/http Media Type  48

   O
      origin server  63



Fielding, et al.        Expires January 14, 2010               [Page 77]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


      outbound  62

   P
      proxy  63

   R
      representation  63
      request  63
      resource  63
      response  63

   S
      server  64

   T
      TE header  42
      Trailer header  44
      Transfer-Encoding header  44
      tunnel  64

   U
      Upgrade header  45
      upstream  64
      URI scheme
         http  11
         https  11
      user agent  64

   V
      variant  64
      Via header  46


Authors' Addresses

   Roy T. Fielding (editor)
   Day Software
   23 Corporate Plaza DR, Suite 280
   Newport Beach, CA  92660
   USA

   Phone: +1-949-706-5300
   Fax:   +1-949-706-5305
   Email: fielding@gbiv.com
   URI:   http://roy.gbiv.com/






Fielding, et al.        Expires January 14, 2010               [Page 78]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   Jim Gettys
   One Laptop per Child
   21 Oak Knoll Road
   Carlisle, MA  01741
   USA

   Email: jg@laptop.org
   URI:   http://www.laptop.org/


   Jeffrey C. Mogul
   Hewlett-Packard Company
   HP Labs, Large Scale Systems Group
   1501 Page Mill Road, MS 1177
   Palo Alto, CA  94304
   USA

   Email: JeffMogul@acm.org


   Henrik Frystyk Nielsen
   Microsoft Corporation
   1 Microsoft Way
   Redmond, WA  98052
   USA

   Email: henrikn@microsoft.com


   Larry Masinter
   Adobe Systems, Incorporated
   345 Park Ave
   San Jose, CA  95110
   USA

   Email: LMM@acm.org
   URI:   http://larry.masinter.net/


   Paul J. Leach
   Microsoft Corporation
   1 Microsoft Way
   Redmond, WA  98052

   Email: paulle@microsoft.com






Fielding, et al.        Expires January 14, 2010               [Page 79]

Internet-Draft              HTTP/1.1, Part 1                   July 2009


   Tim Berners-Lee
   World Wide Web Consortium
   MIT Computer Science and Artificial Intelligence Laboratory
   The Stata Center, Building 32
   32 Vassar Street
   Cambridge, MA  02139
   USA

   Email: timbl@w3.org
   URI:   http://www.w3.org/People/Berners-Lee/


   Yves Lafon (editor)
   World Wide Web Consortium
   W3C / ERCIM
   2004, rte des Lucioles
   Sophia-Antipolis, AM  06902
   France

   Email: ylafon@w3.org
   URI:   http://www.raubacapeu.net/people/yves/


   Julian F. Reschke (editor)
   greenbytes GmbH
   Hafenweg 16
   Muenster, NW  48155
   Germany

   Phone: +49 251 2807760
   Fax:   +49 251 2807761
   Email: julian.reschke@greenbytes.de
   URI:   http://greenbytes.de/tech/webdav/


















Fielding, et al.        Expires January 14, 2010               [Page 80]

