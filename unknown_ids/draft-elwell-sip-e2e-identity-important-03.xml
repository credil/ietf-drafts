<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2015 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2015.xml">
<!ENTITY rfc2543 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2543.xml">
<!ENTITY rfc3851 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3851.xml">
<!ENTITY rfc3261 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3261.xml">
<!ENTITY rfc3325 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3325.xml">
<!ENTITY rfc3711 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3711.xml">
<!ENTITY rfc3893 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3893.xml">
<!ENTITY rfc3966 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3966.xml">
<!ENTITY rfc4474 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4474.xml">
<!ENTITY rfc4916 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4916.xml">
<!ENTITY draft-e164 SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-elwell-sip-e164-problem-statement-01.xml">
<!ENTITY draft-dtls-srtp SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-sip-dtls-srtp-framework-05.xml">
<!ENTITY draft-uri-change SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-kaplan-sip-uris-change-00.xml">
<!ENTITY draft-sbc-funcs SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-sipping-sbc-funcs-08.xml">
<!ENTITY draft-sip-certs SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-sip-certs-07.xml">
<!ENTITY draft-sip-derive SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-kuthan-sip-derive-00.xml">
<!ENTITY draft-rfc4474-concerns SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-rosenberg-sip-rfc4474-concerns-00.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc sortrefs="no" ?>
<?rfc colonspace='yes' ?>
<?rfc tocindent='yes' ?>

<rfc category="info" docName="draft-elwell-sip-e2e-identity-important-03.txt" ipr="trust200811" obsoletes="" updates="">
<front>
  <title abbrev="End-to-End Identity Important">End-to-End Identity Important in the Session Initiation Protocol (SIP)</title>
  <author fullname="John Elwell" initials="J." surname="Elwell">
    <organization>Siemens Enterprise Communications</organization>
    <address>
      <phone>+44 1908 855608</phone>
      <email>john.elwell@siemens.com</email>
    </address>
  </author>
  <date year="2009"></date>
  <area>RAI</area>
  <workgroup>SIP WG</workgroup>
  <keyword>I-D</keyword>
  <keyword>Internet-Draft</keyword>
  <keyword>SIP</keyword>
  <keyword>Identity</keyword>
  <keyword>Authentication</keyword>
  <abstract>
    <t>This document surveys existing mechanisms in the Session Initiation Protocol (SIP) for identifying and authenticating the source of a SIP request (or caller identification). It describes how identification and authentication are not always end-to-end and the problems that this can lead to, particularly since media security based on techniques such as DTLS-SRTP is dependent on end-to-end authenticated identification of parties.</t>
<t>This work is being discussed on the sip@ietf.org mailing list.</t>
  </abstract>
</front>
<middle>
  <section title="Introduction">
    <t>The Session Initiation Protocol (SIP) <xref target="RFC3261"/> provides two basic mechanisms for identifying users involved in a session or call: the From header field URI <xref target="RFC3261"/> and the P-Asserted-Identity header field <xref target="RFC3325"/>. Used alone, these are vulnerable to misuse, but two mechanisms exist for providing authentication of the From header field URI: Authenticated Identity Body <xref target="RFC3893"/> and the Identity and Identity-Info header fields (SIP Identity, <xref target="RFC4474"/>). These various mechanisms provide to the recipient of a SIP request (the User Agent Server, UAS, and its user) identification (with or without authentication) of the source of a SIP request (the User Agent Client, UAC). The identifier given as the source of a request is generally assigned to a user. However, a UAC will have been given the necessary credentials to use this identifier on behalf of a user, so the use of such an identifier to indicate the source of a request strictly speaking means that the request has come from a UAC with the credentials of the user. Implicitly it means the request has come from the user, assuming that the user concerned really is the user of the UAC. This depends on the UAC's user interface (e.g., whether it requires the user to enter a PIN to unlock the user's credentials) and also on human behaviour (e.g., whether the user refuses to allow his/her unlocked device to be used by somebody else).</t>
    <t>Further, by binding an end of a secure bidirectional medium using SRTP <xref target="RFC3711"/> to a SIP request whose source has been identified, the recipient of that SIP request can know the identity of the user who is the source and sink of that medium. This is the principle behind DTLS-SRTP <xref target="I-D.ietf-sip-dtls-srtp-framework"/>, which uses certificates in the endpoints to agree a security context for SRTP. DTLS-SRTP also exchanges fingerprints of those certificates in SIP messages, thereby binding the media to those SIP messages. If a SIP message carrying such a certificate fingerprint also includes the authenticated identification of the user on behalf of which the SIP message has been sent, the secure media are bound to that user. DTLS-SRTP currently relies on the From header field URI and SIP Identity to achieve this.</t>
    <t>This is the theory, but there are a number of practical considerations that make this very difficult to deploy in many situations, particularly when there are intermediaries that change identification information or break signatures. This has led to a number of proposed work-arounds, but has also has led to a questioning of the need for end-to-end authenticated identification. This document explains why end-to-end authenticated identification is important.</t>
    <t>Although the primary function of SIP is to initiate sessions (Session Initiation Protocol), it also includes some methods for use outside the context of a session, e.g., MESSAGE, SUBSCRIBE, NOTIFY, PUBLISH. Although the main focus of this document is on identifying users involved in sessions, many of the considerations apply equally to other uses of SIP.</t>
  </section>
  <section title="Terminology">
    <t>This document uses the following terms:</t>
    <t><list style="hanging">
      <t hangText="end-to-end">In the context of a SIP request, operating from the domain of the UAC to the domain of the UAS.</t>
      <t hangText="end-to-end identification">The delivery of an identifier representing the source of a request unchanged from the domain of the UAC to the domain of the UAS.</t>
      <t hangText="end-to-end authenticated identification">The delivery of an identifier representing the source of a request together with evidence of authenticity unchanged from the domain of the UAC to the domain of the UAS.</t>
    </list></t>
    <t>End-to-end identification or end-to-end authenticated identification can originate at the UAC and terminate at the UAS, in which case it is truly end-to-end. However, for the use cases considered in this document, it is generally sufficient that end-to-end identification or end-to-end authenticated identification originate within the domain of the UAC. For example, a proxy or B2BUA in that domain can insert the correct identifier, based on digest authentication of the UAC, and (in the case of authenticated identification) can provide evidence of authenticity. On the receiving side, it might be sufficient for the domain of the UAS to verify the evidence of authenticity and communicate that somehow to the UAS. In such cases, the term end-to-end is, strictly speaking, shorthand for end-domain-to-end-domain. With end-to-end identification or end-to-end authenticated identification, the important thing is that intermediate domains play no part in providing the identifier or evidence of authenticity.</t>
    <t>In contrast to end-to-end identification or end-to-end authenticated authentication, hop-by-hop identification or hop-by-hop authenticated identification involves an intermediate domain modifying the identifier or providing evidence of authenticity, leading to the need for transitive trust.</t>
    <t>It should also be noted that end-to-end identification or authenticated identification operates only within the SIP environment. Where PSTN interworking is involved, the end domain is the domain of the SIP-PSTN gateway. True end-to-end operation depends on the PSTN, is outside the scope of this document, and in practice is probably unachievable.</t>
  </section>
  <section title="Overview of existing mechanisms and their shortcomings">
    <section title="The From header field URI ">
      <t>Although a UAC should place its Address of Record (AoR) in the From header field of a SIP request, it is a well known fact that in practice a UAC is free to place any value there. SIP proxies are not allowed to change the value, but a SIP proxy could demand that the UAC authenticate itself (using SIP digest authentication) and reject a request if the From URI does not match the authenticated user. A B2BUA could also do this, or could rectify the From URI and forward the request, as an alternative to rejecting the request.</t>
      <t>However, a user is likely to have a SIP digest authentication shared secret only with a SIP entity (proxy or B2BUA) in the same domain, and any downstream SIP entities (in other domains) will not be in a position to challenge for digest authentication. Those SIP entities will have no means of knowing whether the request has been validated by an entity in the source user's domain, and therefore no means of trusting the From URI.</t>
    </section>
    <section title="The P-Asserted-Identity (PAI) header field ">
      <t>This was introduced to counter some of the problems with the From URI. A SIP entity that has validated the source of a SIP request can include a PAI header field containing the validated URI, which may differ from the From URI. A downstream entity in the same trust domain will place some trust in this value. Entities within the same trust domain must exchange SIP messages over a secure transport (e.g., TLS), so that the upstream entity is authenticated. That upstream entity is then trusted to provide a correct identifier in the PAI header field. In the context of a session or call, PAI in the INVITE request can assert the identifier of the calling user and PAI in a request in the reverse direction can assert the identifier of the connected user.</t>
      <t>This mechanism was introduced for use in closed environments where a trust domain could be established, rather than for use on the Internet. However, it has seen very considerable deployment.</t>
      <t>The problem lies in its notion of transitive trust, i.e., A asserts an identifier and sends it over a secure transport to B. B trusts the assertion, and passes the assertion on over a secure transport to C. C trusts B, and passes the assertion on over a secure transport to D, and so on. D trusts C, and has to rely on C's trust of any upstream entities (in this case B). C has to rely on B's trust of any upstream entities (in this case A). The problem is, a downstream entity does not know the entire upstream path of trust, so in trusting its neighbour it does not know who else it is being forced to trust. As SIP continues to grow, eventually a bad actor or malicious site will be trusted by another party many hops away.</t>
      <t>Furthermore, when an entity receives a request from outside its trust domain it can place a default value in the PAI header field when forwarding the request. For example, when a service provider receives a request from an enterprise, if it does not trust the PAI received from the enterprise it is common practice to insert the default number for the enterprise, e.g., that of an attendant or reception desk. This can be misleading, particularly if the request originated outside the enterprise and has been forwarded by the enterprise to the service provider. Arguably it also violates <xref target="RFC3325"/>, since the default number is being placed into PAI without having authenticated that number as the source of the SIP request. This practice can also cause the PAI URI to deviate from the From URI (typically they are the same in many simple situations), causing a dilemma for the UAS - which one to present to the user (or a dilemma for the user if both are presented).</t>
    </section>
    <section title="Authenticated Identity Body (AIB)">
      <t>With AIB <xref target="RFC3893"/>, the UAC copies the From URI and some other header fields into a body of the SIP request and signs it using S/MIME <xref target="RFC3851"/>. The ability to include S/MIME in <xref target="RFC3261"/> (and likewise PGP <xref target="RFC2015"/> in the original version of SIP <xref target="RFC2543"/>) demonstrates that end-to-end security has always been considered important in SIP, and AIB binds the From URI to the end-to-end authentication that S/MIME provides. In the context of a session or call, AIB in the INVITE request can provide authenticated identification of the calling user and AIB in the 200 response or in a request in the reverse direction can provide authenticated identification of the connected user.</t>
      <t>AIB has not been deployed because S/MIME has not been deployed, and that in turn can probably be blamed on the need for each SIP UA to have its own certificate and private key and the infrastructure needed to manage that. However, the mechanism is in theory capable of true end-to-end authenticated identification.</t>
    </section>
    <section title="SIP Certs" anchor="sip-certs">
      <t>A partial solution to the certificate problem associated with S/MIME and hence AIB is available in <xref target="I-D.ietf-sip-certs"/>. This allows a SIP UA to retrieve its user's certificate from a certificate store. However, a certificate per user is still required, and this appears to be a barrier.</t>
    </section>
    <section title="SIP Identity" anchor="sip-identity">
      <t>SIP Identity addresses the impracticalities of AIB by having a SIP entity that has validated the source of a SIP request (e.g., using SIP digest authentication) place a signature over the From header field URI and other parts of the message to assert the correctness of the From URI and provide integrity protection over the signed parts. The signature is placed in the Identity header field and information needed for validating the signature is placed in the Identity-Info header field. This provides authenticated identification between the source domain and the UAS, or between the source domain and a verifying entity in the destination domain. Therefore it can be considered to provide end-domain-to-end-domain authentication. In the context of a session or call, SIP Identity in the INVITE request can provide authenticated identification of the calling user and SIP Identity in the reverse direction <xref target="RFC4916"/> can provide authenticated identification of the connected user. DTLS-SRTP relies on SIP Identity to bind SRTP media to a calling or connected user.</t>
      <t>However, SIP Identity has seen little (if any) deployment, and that is partly due to lack of a perceived need (many regard PAI as sufficient) and partly because it has been shown not to work in many common situations. Concerning the need for SIP Identity (or a similar mechanism), sections <xref target="examples" format="counter"/>, <xref target="why-e2e" format="counter"/> and <xref target="why-e2e-auth" format="counter"/> show why end-to-end (or end-domain-to-end-domain) authenticated identification is important, and therefore why PAI is insufficient.</t>
      <t>The reason SIP Identity does not work in common situations is that B2BUAs, and in particular Session Border Controllers (SBCs), have reasons to change some parts of the signed information when forwarding a SIP request, thus breaking the signature. The broken signature can either be forwarded as is (which has no value), can be removed, or can be replaced with a new signature. This last option, if carried out by an intermediate domain, means that authenticated identification is no longer end-domain-to-end-domain. Moreover, an entity can generate a new signature only if the domain part of the From URI matches the domain's certificate, and hence the From URI will need to change to match the new signing domain (an action that in principle is feasible with E.164-based SIP URIs), so the identifier is now no longer end-to-end. The breaking of signatures by intermediaries is discussed further in <xref target="why-broken-signatures"/>.</t>
    </section>
    <section title="Return routability checks" anchor="return-route">
      <t>In the absence of a means for delivering authenticated identification to a UAS, the UAS (or its domain proxy or B2BUA) can gain some measure of confidence in the delivered identifier by attempting to send a return request, using the received identifier as target. The result of the return request should provide some evidence that the source of the original request (the UAS or its domain) has been reached. This assumes that intermediate domains are not malicious, and will route correctly even though they are unable to cooperate in the provision of end-to-end authenticated identification.</t>
      <t>One proposal for a return routability check is in <xref target="I-D.kuthan-sip-derive"/>. In that proposal, the return request is a SUBSCRIBE request for the dialog event package with a filter for information about the dialog that the original request is attempting to establish. Evidence that the source of the request has been reached is achieved if the SUBSCRIBE request is successful and if a NOTIFY request identifying that same dialog is received, the assumption being that any other recipient of the SUBSCRIBE request would know nothing about that dialog. This particular proposal has some limitations. For example, it requires the UAC to support filtering, it will not work through B2BUAs that change dialog identifiers and it does not apply to requests that do not involve dialogs. However, the principle of return routability checking may yield a solution that gives a better-than-nothing assertion of the correctness of an identifier.</t>
    </section>
    <section title="Problems with SIP URIs based on E.164 numbers" anchor="e164">
      <t>If a user receives a caller or connected identifier in the form of a SIP URI containing a global E.164 number (e.g., sip:+123456789@example.com;user=phone), and if this information is made available to the user, how would the user interpret it? The user might recognise the telephone number and ignore the domain part. The user might treat the domain part as significant and disregard the number (particularly if she fails to recognise the number). Or the user might take account of both items of information.</t>
      <t>Problems arise when the user attaches importance to the domain part, because there is no defined meaning for the domain part (other than that by routing a request to that URI to that domain, that domain should be able to route it onwards towards the user of the telephone number). In practice, the domain part is often changed by intermediate domains (typically to reflect their own domain), so a request starting out with sip:+123456789@mybank.com;user=phone in the From or PAI header field could end up with sip:+123456789@serviceprovider.net;user=phone in that header field when delivered to the UAS, where serviceprovider.net is the last domain it passed through. The recipient would not see that the request really originated in mybank.com, and this information may have been important to the recipient.</t>
      <t>Moreover, any such change of From URI breaks the SIP Identity signature, as described earlier.</t>
      <t>Clearly these problems do not exist with tel URIs <xref target="RFC3966"/> since there is no domain part and therefore no scope for change. Therefore they have the advantage of not providing a false or misleading domain part, but the disadvantage of not providing a domain part at all for users who would benefit from this information. Also tel URIs cannot be used with SIP Identity.</t>
      <t>The E.164 problem is described in more detail in <xref target="I-D.elwell-sip-e164-problem-statement"/>.</t>
    </section>
    <section title="Other causes of URI change at intermediate domains" anchor="other-changes">
      <t>As described in <xref target="e164"/>, intermediate domains can change a URI based on an E.164 number, such that the recipient does not receive the original identifier. This is not the sole circumstance in which intermediate domains are known to change an identifier identifying the source of a SIP request. Another circumstance is where a domain does not accept a received identifier as a valid source and substitutes a default value. This often occurs when an enterprise submits an identifier to a service provider, the identifier not being within the range recognised by the service provider as belonging to that enterprise. There are legitimate reasons why an enterprise might submit an identifier outside the recognised range, as highlighted by some of the examples in <xref target="examples"/>. When delivered to the UAS, the new identifier might be misleading.</t>
    </section>
    <section title="Problems with PSTN interworking" anchor="pstn">
      <t>A PSTN gateway will generally deliver a number received from PSTN as the From or PAI URI. The gateway has no means of validating that number and has either to trust the PSTN or disregard the number (placing its own identifier or an anonymous value in the From URI). There are known means of a false caller number in PSTN (depending on country), and therefore trusting a number from PSTN can be dangerous.</t>
      <t>Furthermore, from a DTLS-SRTP perspective, it can be dangerous to assume that media are secured all the way to a PSTN user. First, the PSTN has known vulnerabilities in terms of interception of calls for legal or other reasons. Second, there is no way of detecting whether the PSTN user is attached to the PSTN via an unsecured IP network. Therefore, at best, a call can be considered secure only as far as the gateway and true end-to-end (or end-domain-to-end-domain) security is not achievable. Solutions are required to the problem of misleading the user concerning the end-to-end security status of a call to/from PSTN, but this issue is not discussed further in this document.</t>
    </section>
  </section>
  <section title="Examples" anchor="examples">
    <t>In <xref target="e164"/> and <xref target="other-changes"/> it was shown how the identifier representing the source of SIP request can be modified by SIP intermediaries before being delivered to the UAS. Furthermore, <xref target="sip-identity"/> mentioned how an intermediate domain could change the From URI in order to "fix" a broken RFC 4474 signature. In these cases, identification delivery is not end-to-end and often fails to deliver information needed by the recipient. In this section a number of example use cases are given, only some of which deliver end-to-end identification.</t>
    <t>Where a SIP intermediary modifies the From URI, it can do so in several ways:
      <list style="symbols">
        <t>conversion, whereby a SIP intermediary substitutes an identifier that does not identify the original source of the SIP request (e.g., substituting a default identifier for the enterprise concerned);</t>
        <t>translation, whereby a SIP intermediary substitutes a form of identifier that still identifies the original source of the SIP request (e.g., by adding prefix digits or a phone-context parameter to make it globally unique, or by changing the domain part of an E.164-based SIP URI);</t>
        <t>normalisation (e.g., removing whitespace, adding "+", converting from dial string by removing prefix digits such as "0").</t>
      </list></t>
    <t>Of these, conversion is the most problematic, because it results in an identifier that no longer identifies the originator of the request. This means that it will probably prevent a return SIP request (e.g., a return call) reaching the user who originated the original request.</t>
    <t>Translation might cause difficulties for the user recognizing the source of the request or for the UAS trying to match entries in a phone book or white list. It might also cause return routability to fail if the result is not globally unique.</t>
    <t>Normalisation might actually help recognition and matching. Note that the addition of removal or "user=phone" in practice might be considered normalisation, although in theory two URIs differing only in the presence or absence of user=phone identify different entities.</t>
    <t>All three forms of modification break any SIP Identity signature, so even if they do not prevent end-to-end identification, they prevent end-to-end authenticated identification (see <xref target="why-e2e-auth"/>.</t>
    <t>In the figures associated with the examples below, caller identification is shown in the From header field URI, but a similar problem can arise with PAI.</t>
    <t>The examples are all to do with caller identification (where the called user wants to know who is calling), but corresponding examples can be derived for connected identification (where the caller wants some assurance that the correct called party has been reached).</t>
    <section title="Example 1">
      <t>Consider a call from an employee Bob at bank.com to Alice, who obtains a SIP service from service provider sp.net. Alice would be prepared to accept a call from her bank. Bob's identifier is sip:bob@bank.com. In this case, hopefully Alice would receive this identifier unchanged. She might not know Bob, but at least she knows the call is from her bank and can accept the call on that basis.
      <figure><artwork><![CDATA[
  bank.com                    sp.net                        Alice
      From:sip:bob@bank.com          From:sip:bob@bank.com
      ----------------------->      ------------------------>
      ]]></artwork></figure></t>
      <t>This example delivers end-to-end identification, but in practice it is likely that any RFC 4474 signature provided by the originating domain will be broken because an intermediate B2BUA modifies signed information.</t>
    </section>
    <section title="Example 2">
      <t>Suppose the service provider removes Bob's identifier and substitutes the default for the bank, based on the bank's default telephone number +123456000 and the bank's domain name. Alice would receive sip:+123456000@bank.com;user=phone. This is an example of conversion.
      <figure><artwork><![CDATA[
  bank.com               sp.net                                Alice
    From:sip:bob@bank.com   From:sip:+123456000@bank.com;user=phone
    -------------------->     ---------------------------------->
      ]]></artwork></figure></t>
      <t>This example does not deliver end-to-end identification. In this case Alice still knows the call is from her bank but there is no indication of who at the bank is calling. Furthermore, if she were to make a return call to the bank, it would arrive at a default user (e.g., attendant, receptionist) and would not reach Bob. This may be what the bank desires (in which case it would not disclose Bob's identifier to the service provider), but in many cases it may not be what the bank desires.</t>
    </section>
    <section title="Example 3">
      <t>Suppose the service provider removes Bob's identifier and substitutes the default for the bank, based on the bank's default telephone number +123456000 and the service provider's domain name. Alice would receive sip:+123456000@sp.net;user=phone. This is an example of conversion.
      <figure><artwork><![CDATA[
  bank.com               sp.net                                Alice
    From:sip:bob@bank.com     From:sip:+123456000@sp.net;user=phone
    -------------------->     ---------------------------------->
      ]]></artwork></figure></t>
      <t>This example does not deliver end-to-end identification. In this case Alice cannot tell from the received identifier that the call is from her bank, unless she happens to recognise the telephone number. This is no worse than PSTN (or no worse than if a tel: URI were used in SIP), but SIP has the potential to be better than PSTN. As for example 2, there is also a problem with return calls.</t>
    </section>
    <section title="Example 4">
      <t>Bob's identifier is sip:+123456789@bank.com;user=phone. If the service provider delivers this to Alice she will see it is from her bank. She may or may not recognise the telephone number as belonging to Bob or to the bank.
      <figure><artwork><![CDATA[
  bank.com               sp.net                     Alice
     From:sip:+123456789       From:sip:+123456789
     @bank.com;user=phone      @bank.com;user=phone
    -------------------->      ---------------------->
      ]]></artwork></figure></t>
      <t>This example delivers end-to-end identification, but in practice it is likely that any RFC 4474 signature provided by the originating domain will be broken because an intermediate B2BUA modifies signed information.</t>
    </section>
    <section title="Example 5">
      <t>Suppose the service provider substitutes its own domain name for the bank's domain name. Alice would receive sip:+123456789@sp.net;user=phone. This is an example of translation.
      <figure><artwork><![CDATA[
  bank.com               sp.net                     Alice
     From:sip:+123456789       From:sip:+123456789
     @bank.com;user=phone      @sp.net;user=phone
    -------------------->      ---------------------->
      ]]></artwork></figure></t>
      <t>This example does not deliver end-to-end identification. In this case Alice cannot see that the call is from her bank, unless she happens to recognise the telephone number. However, the number is delivered end-to-end, which may be sufficient for some purposes.</t>
    </section>
    <section title="Example 6">
      <t>Suppose the service provider substitutes its own domain name for the bank's domain name, and also substitutes the default telephone number for the bank. Alice would receive sip:+123456000@sp.net;user=phone. This is an example of conversion.
      <figure><artwork><![CDATA[
  bank.com               sp.net                     Alice
     From:sip:+123456789       From:sip:+123456000
     @bank.com;user=phone      @sp.net;user=phone
    -------------------->      ---------------------->
      ]]></artwork></figure></t>
      <t>This example does not deliver end-to-end identification. Alice receives the same identifier as in example 3, and the same considerations apply.</t>
    </section>
    <section title="Example 7">
      <t>Consider a call from Carol at client.org to Dave at example.com. Dave is working at home and has arranged for calls to be forwarded to him via his SIP service provider sp.net. Suppose Carol's identifier is carol@client.org and this identifier reaches example.com, where it is forwarded, with the INVITE request, to sp.net. If sp.net delivers this unchanged to Dave at home, Dave will see that the call is from Carol at his client and can accept the call on that basis. Also he can make a return call, e.g., if he is unable to answer at the time and Carol's identifier is stored in his missed call log.
      <figure><artwork><![CDATA[
  client.org       example.com            sp.net               Alice
     From:sip:carol          From:sip:carol     From:sip:carol
     @client.org             @client.org        @client.org
     ------------->          -------------->    --------------->
      ]]></artwork></figure></t>
      <t>This example delivers end-to-end identification, but in practice it is likely that any RFC 4474 signature provided by the originating domain will be broken because an intermediate B2BUA modifies signed information.</t>
    </section>
    <section title="Example 8">
      <t>Suppose the service provider does not accept sip:carol@client.org as an identifier received from example.com and substitutes the default identifier for example.com, based on its default number and its domain name (sip:+123456000@example.com;user=phone). This is an example of conversion.
      <figure><artwork><![CDATA[
  client.org       example.com          sp.net                 Alice
     From:sip:carol        From:sip:carol     From:sip:+123456000
     @client.org           @client.org        @example.com
                                              ;user=phone
     ------------->        -------------->    ------------------>
      ]]></artwork></figure></t>
      <t>This example does not deliver end-to-end identification. Dave will now see that the call comes from his own company, and will not have a clue that it comes from his client. Similarly if the service provider's domain name is used (sip:+123456000@sp.net;user=phone), Dave would presumably recognise his company's own default telephone number but would not see that the call is from his client. Also any attempted return call would just go to his company's default answering point.</t>
    </section>
    <section title="Example 9">
      <t>Suppose Carol's identifier is E.164-based: sip:+123498765@client.org;user=phone. If this is delivered to Dave, he will see the calling telephone number, which he may recognise (or software in his phone may match it with an existing contact) and he will also see that it is from client.org.
      <figure><artwork><![CDATA[
  client.org         example.com           sp.net             Alice
    From:sip:+123498765   From:sip:+123498765   From:sip:+123498765
    @client.org           @client.org           @client.org
    ;user=phone           ;user=phone           ;user=phone
    ------------------>   ------------------>   ------------------>
      ]]></artwork></figure></t>
      <t>This example delivers end-to-end identification, but in practice it is likely that any RFC 4474 signature provided by the originating domain will be broken because an intermediate B2BUA modifies signed information.</t>
    </section>
    <section title="Example 10">
      <t>Suppose the identifier in the last example is not accepted by the service provider, not only because of the domain part (client.org rather than example.com) but also because the telephone number does not fall within the range assigned to example.com. As in example 8 it might substitute a default identifier. This is an example of conversion.
      <figure><artwork><![CDATA[
  client.org         example.com           sp.net             Alice
    From:sip:+123498765   From:sip:+123498765   From:sip:+123456000
    @client.org           @client.org           @sp.net
    ;user=phone           ;user=phone           ;user=phone
    ------------------>   ------------------>   ------------------>
      ]]></artwork></figure></t>
      <t>This example does not deliver end-to-end identification. Consequences are similar to those in example 8.</t>
    </section>
    <section title="Example 11">
      <t>Eve in the US office of enterprise e.com (sip:+123456789@e.com;user=phone) makes a call to Fred, who has a UK telephone number (+44...) and is served by UK service provider uksp.net. The US proxy in e.com forwards the request to the UK proxy of e.com, where the call "breaks out" to uksp.net. The service provider does not accept a non-UK identifier and substitutes a default value for the enterprise (sip:+445678000@e.com;user=phone). This is an example of conversion.
      <figure><artwork><![CDATA[
  e.com                      uksp.net                        Fred
      From:sip:+123456789             From:sip:+445678000
      @e.com;user=phone               @e.com;user=phone
     -------------------->           ------------------------>
      ]]></artwork></figure></t>
      <t>This example does not deliver end-to-end identification. In this case Fred still knows the call is from e.com, but is not aware that Eve is calling or that that the caller is in the US.</t>
    </section>
    <section title="Example 12">
      <t>Suppose the service provider uses its own domain name in the modified SIP URI.
      <figure><artwork><![CDATA[
  e.com                      uksp.net                        Fred
      From:sip:+123456789             From:sip:+445678000
      @e.com;user=phone               @uksp.net;user=phone
     -------------------->           ------------------------>
      ]]></artwork></figure></t>
      <t>This example does not deliver end-to-end identification and is another example of conversion. In this case Fred does not know that the call is from e.com (unless he happens to recognise the UK telephone number). Also Fred is not aware that Eve is calling or that that the caller is in the US.</t>
    </section>
  </section>
  <section title="Why end-to-end identification is important" anchor="why-e2e">
    <t>The conclusions from the different examples above can be summarized as follows.</t>
    <t><vspace blankLines="100"/>
    <figure><artwork><![CDATA[
   +------------+-------------------------------------------------+
   | Example 1  | Delivers end-to-end identification              |
   +------------+-------------------------------------------------+
   | Example 2  | Delivers end-to-end identification, but only    |
   |            | domain, not user                                |
   +------------+-------------------------------------------------+
   | Example 3  | Fails to deliver end-to-end identification      |
   |            | (substitutes telephone number instead)          |
   +------------+-------------------------------------------------+
   | Example 4  | Delivers end-to-end identification              |
   +------------+-------------------------------------------------+
   | Example 5  | Delivers end-to-end identification, but only    |
   |            | the telephone number, not the domain            |
   +------------+-------------------------------------------------+
   | Example 6  | Fails to deliver end-to-end identification      |
   |            | (changes telephone number and domain)           |
   +------------+-------------------------------------------------+
   | Example 7  | Delivers end-to-end identification              |
   +------------+-------------------------------------------------+
   | Example 8  | Fails to deliver end-to-end identification      |
   |            | (forwarding enterprise's identity instead)      |
   +------------+-------------------------------------------------+
   | Example 9  | Delivers end-to-end identification              |
   +------------+-------------------------------------------------+
   | Example 10 | Fails to deliver end-to-end identification      |
   |            | (forwarding enterprise's identity instead)      |
   +------------+-------------------------------------------------+
   | Example 11 | Fails to deliver end-to-end identification      |
   |            | (delivers domain but changes telephone number)  |
   +------------+-------------------------------------------------+
   | Example 12 | Fails to deliver end-to-end identification      |
   |            | (changes telephone number and domain)           |
   +------------+-------------------------------------------------+
    ]]></artwork></figure></t>
    <t>Examples 1, 4, 7 and 9 are fine, because identification of the caller is end-to-end (although, as pointed out, any RFC 4474 signature might be broken). In the remaining examples, identification is not end-to-end, leading to problems.</t>
    <t>More complex examples can be derived with more domains involved. Clearly the more domains involved, the more there is scope for failure to deliver an identifier end-to-end, and the greater the consequences for the recipient, both in terms of recognising the source of the call and being able to make a return call. These examples illustrate the importance of delivering an identifier end-to-end, without changing it at intermediate domains.</t>
  </section>
  <section title="Why end-to-end authenticated identification is important" anchor="why-e2e-auth">
    <t>Assuming an identifier is delivered end-to-end, where authenticated identification is required it is important that the assertion of authenticity is provided at source, or at least in the originating domain. This is what SIP Identity aims to achieve. However, because of the difficulties with SIP Identity, as described in <xref target="sip-identity"/>, some have asked why hop-by-hop assertions are insufficient. PAI is one solution to hop-by-hop assertions. Another possibility would be for each domain to provide its own cryptographic signature. Note that SIP Identity does not allow this, because the signer has to have the same domain name as that in the From URI, so only the originating domain can sign (unless the identifier is also changed, which would mean that requirements for end-to-end identification would not be met).</t>
    <t>With end-to-end authentication, the relying party has to trust the originating domain, which also means trusting the certificate chain up to the top level certification authority. This is similar to other applications using PKI-based security, such as secure web pages. In many cases there will just be the signing domain's certificate and a single CA certificate. The relying party can see the whole chain and make its own judgements.</t>
    <t>With hop-by-hop authentication based on PAI, the relying party knows only that the upstream neighbour domain is asserting that domain. It does not know how many further upstream domains there are, what those domains are, and how far the trust domain extends. Just because the relying party trusts its own domain and perhaps its upstream neighbour domain, does not mean that it would trust further domains that its upstream neighbour domain trusts.</t>
    <t>For example, consider a call from Alice in enterprise1.biz (sip:alice@enterprise1.biz), via service provider sp1.net, via second service provider sp2.org, and terminating at Bob in enterprise2.com (sip:bob@enterprise2.com). The call is routed that way because enterprise1.biz routes all external calls through sp1.net, and enterprise2.com only accepts external calls that have arrived via sp2.org. Bob is happy to accept a secure call from enterprise1.biz. With hop-by-hop authentication, Bob would have to rely on an assertion by enterprise2.com, which in turn would rely on an assertion by sp2.org, and so on. Bob has no visibility of the upstream entities, although he would probably be aware of his enterprise's own service provider (sp2.org). He would be unlikely to be aware of sp1.net, and even if he were aware, he may not have heard of sp1.net and may not wish to trust such an assertion. It could be that sp1.net is located in a country where practices are not of the standard expected in Bob's country.</t>
    <t>Suppose also that DTLS-SRTP is to be used to secure media between Alice and Bob. If authentication is hop-by hop, Bob can be sure that media is secured as far as sp2.org, but cannot be sure that there is no man-in-the-middle between sp2.org and enterpise1.biz. End-to-end authentication is required to give Bob the assurance he needs.</t>
    <t>Referring back to the examples in <xref target="examples"/>, those that deliver end-to-end identification have the potential to deliver end-to-end authentication, but in practice, SIP Identity as specified in <xref target="RFC4474"/> is often broken by the actions of B2BUAs. The remaining examples, because they do not deliver end-to-end identification, cannot deliver end-to-end authentication. In addition, normlisation of the From URI breaks SIP Identity.</t>
  </section>
  <section title="Why B2BUAs break SIP Identity signatures" anchor="why-broken-signatures">
    <t>As mentioned in <xref target="sip-identity"/>, SIP Identity signatures are broken when B2BUAs (in particular SBCs) modify signed parts of a SIP request when forwarding. This prevents the provision of end-to-end (or end-domain-to-end-domain) authenticated identification.</t>
    <t>Common functions of SBCs are described in <xref target="I-D.ietf-sipping-sbc-funcs"/>. To achieve some of these functions, an SBC could act as a proxy, but to achieve other function an SBC might need to act as a B2BUA in a way that is harmful to end-to-end authenticated identification.</t>
    <section title="Changing the SDP body part">
      <t>Because SIP Identity signs the entire body of a SIP request, this includes any SDP body part, which typically is present in an INVITE request, for example. For reasons of media steering, SBCs frequently modify IP addresses and ports in SDP in order to force media to take a particular path, e.g., to ensure it does indeed pass through the operator's network, or to force it along a route that can provide appropriate quality of service. Also an SBC might modify SDP in order to limit bandwidth to what is available or authorised, e.g., by stripping out bandwidth-hungry codecs and forcing endpoints to select low bandwidth codecs. SBCs, together with an associated media relay, often carry out NAT traversal functions, resulting in a need to modify SDP. Although NAT traversal can be achieved by other means such as ICE, which does not require modification of SDP at the point of NAT traversal, such means are dependent on endpoint support. Furthermore SBCs sometimes use an associated media relay to perform conversion between IP versions (IPv4 and IPv6), again requiring modifications to SDP. More details are given in <xref target="I-D.ietf-sipping-sbc-funcs"/>, but the result is that SBCs frequently modify SDP and will therefore break a SIP Identity signature.</t>
      <t>It should be noted that end-to-end authenticated identification does not necessarily need to traverse some SDP-modifying functions that SBCs or other intermediaries perform. For example, if an SBC steers media through a media relay that decrypts and re-encrypts media (e.g., for call recording purposes), media encryption is not end-to-end, and therefore end-to-end authenticated identification can be considered inappropriate. If SIP Identity is used to bind media security to the source of a SIP request, the identified source should correspond to the place where media security terminates, which is the media relay. Any attempt at trying to pretend security is end-to-end would conceal the possibility of a man-in-the-middle attack. Similarly, if an SBC steers media through a transcoder, the transcoder can potentially change the media, so again end-to-end authenticated identification can be considered inappropriate. In this case, if the media is secured, the transcoder would also need to decrypt and re-encrypt.</t>
    </section>
    <section title="Changing the Contact and Call-Id header fields">
      <t>B2BUAs, including SBCs, often modify Contact and Call-Id header fields. One reason is for topology hiding, if these fields convey information that might reveal information about the rest of an operator's network (e.g., by identifying specific gateways behind the SBC). Another reason for changing Contact is to replace IP addresses by host names.</t>
      <t>Another reason is because of 3rd party call control (3PCC) functions performed by an SBC. For example, if a B2BUA uses 3PCC techniques to perform transfer, a call leg on one side will be joined to a call leg on the other side, that was not part of the original call, and therefore it will necessarily have a different Call-Id value, as well as different To and From tags. The resulting call will have different Call-Id and tag values on either side of the B2BUA. In other words, it will comprise a concatenation of two different dialogs, even if the original call comprised only a single dialog. Therefore when a request is sent end-to-end along the new call, Call-Id and tag values will need to be changed as the request passes through the B2BUA. Also the Contact URI might need to change. These actions will break any SIP Identity signature.</t>
    </section>
    <section title="Changing the From URI">
      <t>Changing the From header field URI when forwarding a request will break a SIP Identity signature. Reasons for changing the URI are discussed in <xref target="I-D.kaplan-sip-uris-change"/>. In particular, it is common practice to modify the host part to reflect a domain's own domain name when entering a domain, or to reflect the next domain's name when exiting a domain. Reasons are not entirely clear, but one reason might be to adapt to broken implementations that cannot accept other domain names. Another reason might be to hide a domain's relationship with other domains. Changing the host part of a SIP URI based on a fully qualified E.164 number does not necessarily invalidate the user part, i.e., the E.164 number can still be considered valid, whatever the domain part. However, some of the examples in <xref target="examples"/> require the original domain part to be delivered, and therefore by changing the domain part, end-to-end identification cannot be claimed. With SIP URIs not based on E.164 numbers (e.g., based on a name), changing is less straightforward, although it can in theory be done by encapsulating the entire original URI in the user part of the new URI, together with a new domain part, resulting in a complex URI that might not be interpreted correctly by the UAS or its user.</t>
      <t>Other reasons for From URI changing are given in <xref target="I-D.kaplan-sip-uris-change"/>, but some of these disappear if good practices are observed, such as avoiding IP addresses in host parts, avoiding non-normalised forms of user parts (e.g., containing prefix digits or without country code), and avoiding identifiers based on host names rather than domain names.</t>
      <t>Although on the one hand, changing a From URI can break a SIP Identity signature, changing the From URI can also be part of the solution for rectifying a broken SIP Identity signature, since re-signing the request requires the From URI to have a domain part the same as the signing domain. Therefore whether or not the From URI has changed anyway, re-signing a request will involve changing the From URI unless the request is still within the original domain. Although re-signing can rectify a broken SIP Identity signature, it does not lead to end-to-end authenticated identification. Also, for URIs not based on E.164 numbers, changes result in complex URIs that might not be interpreted correctly. Furthermore, re-signing by an intermediate domain imposes greater computational costs on that domain, for the benefit of end domains.</t>
    </section>
    <section title="Changing the To URI">
      <t> Changing the To header field URI when forwarding a request will break a SIP Identity signature. Reasons for change are similar to some of the reasons for changing the From URI.</t>
    </section>
    <section title="Protocol repair">
      <t>Protocol repair by an SBC or B2BUA can break a SIP Identity signature if the repair impacts any of the signed elements. Of the signed elements, SDP is certainly an area that has attracted many bad implementations and is a prime target for repair, to avoid an error being perpetuated as a SIP request traverses domains. Whilst this can be seen as beneficial in some circumstances, cosmetic repairs are unnecessary and some repairs can be harmful in other ways (e.g., "repairing" a valid new extension to SIP or SDP that is not supported and therefore not understood by the SBC).</t>
    </section>
  </section>
  <section title="Analysis of changes to SIP requests by B2BUAs" anchor="analysis">
    <t>This section analyses in more detail those parts of a SIP request that are signed by RFC 4474 to see which parts really need to be allowed to be changed by B2BUAs (i.e., any mechanism for end-to-end authenticated identification needs to be tolerant of such changes) and which do not need to be changed (i.e., any mechanism for end-to-end authenticated identification can expect to fail in the presence of such changes). Any identity-related header fields not signed by RFC 4474 (e.g., History-Info, Geolocation) are not considered.</t>
    <section title="addr-spec of From header field">
      <t>Conversion of the From URI is generally harmful, in that after conversion the From URI no longer identifies the source of the request. Conversion might involve just a change of user-info part, such that the domain is still correct, or might involve a change of domain too. Therefore it is not required that a mechanism for end-to-end authenticated identification be tolerant of conversion of the From URI.</t>
      <t>Translation of the From URI is generally less harmful, in that after translation it still identifies the source of the request. However, there are several sub-categories of translation, each with different consequences:
        <list style="symbols">
          <t>Translating from a non-global URI to a global URI is generally helpful, but on the other hand could and should be done by the originating domain before signing the request, thereby removing the need for this form of translation by B2BUAs in intermediate domains.</t>
          <t>Translation involving changing the domain part of an E.164-based SIP URI is harmful, since the domain from which the request originated is lost.</t>
          <t>Translation of a name-based SIP URI to an alias number-based SIP URI or vice versa with the same domain part may or may not be harmful, depending on whether the translated URI is meaningful to the UAS its user.</t>
          <t>Translation of a name- or number-based SIP URI to a TEL URI is harmful in that the domain is lost. Effectively this is what has to be done at PSTN gateways, where it cannot be avoided, but it should not be done by B2BUAs. In any case, RFC 4474 cannot be used with a TEL URI.</t>
        </list></t>
      <t>Normalisation in general is not harmful, although it should be carried out at the originating domain before signing.</t>
      <t>Any form of modification of the From URI (conversion, translation or normalization) is either harmful if carried out by an intermediate domain or is better carried out by the originating domain. Therefore a mechanism for end-to-end authenticated identification does not need to be tolerant of changes to the From URI by intermediate domains.</t>
      <t>TODO. Do changes to phone-context or to any URI parameters need to be considered explicitly, or are they all covered by conversion, translation or normalisation?</t>
    </section>
    <section title="addr-spec of To header field">
      <t>Although the To URI does not identify the caller, it does identify the original targeted user. Any normalisation or translation to a globally unique identifier should be carried out by the originating domain, in which case there should be no reason for modification by an intermediate domain. Therefore a mechanism for end-to-end authenticated identification does not need to be tolerant of changes to the To URI by intermediate domains.</t>
    </section>
    <section title="call-id of Call-Id header field and digit of CSeq header field">
      <t>These do not impact the identity characteristics of a request. For topology hiding and 3PCC reasons, B2BUAs on the path of a call may modify call-id and digit when forwarding a request. Therefore a mechanism for end-to-end authenticated identification needs to be tolerant of changes to call-id and digit by intermediate domains.</t>
      <t>Note that although call-id and digit were apparently included in the RFC 4474 signature for replay prevention purposes, it is not clear that this would work. There are cases related to forking, redirection and retransmission over UDP transport where the verifier could legitimately receive repeated requests with the same call-id and digit values, perhaps with different values in the Request-URI by intermediate domains.</t>
    </section>
    <section title="method of CSeq header field">
      <t>This does not impact the identity characteristics of a request. It seems very unlikely that an SBC would modify this field. Therefore a mechanism for end-to-end authenticated identification does not need to be tolerant of changes to method by intermediate domains.</t>
    </section>
    <section title="Date header field">
      <t> This does not impact the identity characteristics of a request, but in RFC 4474 it is essential to provisions for preventing replay attacks. Therefore a mechanism for end-to-end authenticated identification does not need to be tolerant of changes to method by intermediate domains.</t>
    </section>
    <section title="addr-spec of Contact header field">
      <t> Substitution of a B2BUA's own contact URI (e.g., for topology hiding or 3PCC reasons) does not impact the identity characteristics of a request, as far as the current call is concerned. If a substituted contact URI is subsequently used as the target of a separate request, outside the context of the original dialog, the B2BUA would need to be able to restore the original contact URI and forward the request, even if the original dialog has terminated, which requires some stateful or algorithmic mechanism at the B2BUA, but B2BUAs should be able to do this.</t>
      <t>Although substitution of the Contact URI does not impact end-to-end identification, it was apparently included in the RFC 4474 signature for replay prevention purposes. It is not clear whether it really helps prevent replay, since a man-in-the-middle can pervert the routing of subsequent mid-dialog requests by manipulating Record-Route (which is not signed) rather than Contact.</t>
    </section>
    <section title="SDP body part">
      <t>For media steering purposes, B2BUAs in intermediate domains need to modify the IP address c-lines and the port in m-lines. This does not impact the identity characteristics of a request, although it means that the IP address and port for media cannot be assumed to relate to the source of the SIP request. In that sense, media steering in this way is harmful, in that a man-in-the-middle could become the media terminator. This is not a problem if SRTP is used and there is a mechanism for authenticating the media terminator during key establishment (e.g., by binding the media terminator to authenticated source of a SIP request) - in this situation the IP address and port are unimportant.</t>
      <t>Clearly an a=fingerprint line should not be modified by intermediate domains, since this would destroy authentication for the media concerned (whether this uses SRTP, TLS or some other secure transport).</t>
      <t>Insertion of m-lines can be harmful, since this introduces media that does not potentially does not terminate where the request originated (unless they use the same IP addresses and ports as existing media). Adding media to provide alternatives to what is already proposed can sometimes be helpful (e.g., RTP/AVP as an alternative to or instead of RTP/AVPF, to assist interoperability) but can also be harmful (e.g., adding RTP/AVP as an alternative to or instead of RTP/SAVP, since that could also be seen as a bid-down attack).</t>
      <t>SDP capability negotiation complicates the picture even further, since the various attribute lines (e.g., a=pcfg, a=tcap, etc.) can modify the meaning of the SDP in very many ways, some of which might be harmful and others might be helpful. For example, if providing media steering, a B2BUA might legitimately want to modify ports and IP addresses related to media being negotiated.</t>
      <t>Formatting changes to SDP (e.g., removal or insertion of white space), although in most respects harmless, but on the other hand there is no justification for an intermediate domain to do this.</t>
      <t>This seems to indicate that a mechanism for end-to-end authenticated identification needs to be tolerant of some types of change to SDP by intermediate domains but should be intolerant of others types of change. Any mechanism must take account of future evolution of SDP, perhaps by being tolerant of specific changes (e.g., IP address in c-line and port in m-line) but intolerant of changes to the rest, including any future extensions.</t>
    </section>
    <section title="Other body parts">
      <t>There is generally no justification for an intermediate domain to add, modify or delete other body parts (e.g., PIDF-LO, SAML assertions), and therefore any mechanism for end-to-end authenticated identification should be intolerant of such changes.</t>
    </section>
  </section>
  <section title="Conclusions">
    <t>This document has demonstrated the importance of end-to-end (or at least end-domain-to-end-domain) identification and authenticated identification in SIP. Although in many simple cases hop-by-hop identification or hop-by-hop assertions can be shown to be adequate, there are many cases where this is simply not the case.</t>
    <t>This document has also illustrated why current mechanisms are unable to deliver end-to-end authenticated identification in many practical situations. In particular, SIP Identity <xref target="RFC4474"/> will not work in practical situations, because B2BUAs in intermediate domains modify certain aspects of SIP requests, resulting in the signature being broken. A good example of a change that breaks the signature is media steering, whereby a B2BUA modifies IP addresses and ports in SDP to ensure that media is steered onto a path that can provide the appropriate quality of service.</t>
    <t>The problem can be broken down into two parts:
      <list style="symbols">
        <t>Loss of end-to-end authenticated identification caused by the breaking of SIP Identity signatures on non-E.164-based SIP URIs by B2BUAs in intermediate domains performing legitimate functions such as media steering.</t>
        <t> Loss of end-to-end authenticated identification caused by the breaking of SIP Identity signatures on E.164-based SIP URIs by B2BUAs in intermediate domains performing legitimate functions such as media steering, and also by B2BUAs modifying the URI by changing the domain part and possibly creating a new SIP Identity signature.</t>
      </list></t>
    <t>The second part may be harder to solve than the first part. This is discussed further in <xref target="I-D.rosenberg-sip-rfc4474-concerns"/>, which concludes that there is no simple remedy and instead just the problems associated with phone numbers and RFC 4474 be documented.</t>
    <t>It is assumed that end-to-end authenticated identification is not achievable when PSTN is involved, as discussed in <xref target="pstn"/>.</t>
    <t>Any solution for end-to-end authenticated identification must be tolerant of certain legitimate changes to SIP requests as they traverse intermediate domains. Details of which changes are to be tolerant need further work, although <xref target="analysis"/> provides some considerations.</t>
  </section>
  <section title="Requirements for end-to-end authenticated identification">
    <t>Consider the following legitimate call from user1 at UA1 in enterprise1 to user2 at UA2 in enterprise2, via intermediate domains ITSP-A, ITSP-B and ITSP-C:
      <figure><artwork><![CDATA[

           +----------+   +----------+   +----------+
       +---+ SBC  SBC +---+ SBC  SBC +---+ SBC  SBC +---+
       |   +----------+   +----------+   +----------+   |
       |      ITSP-A         ITSP-B         ITSP-C      |
       |                                                |
+------+------+                                  +------+------+
| enterprise1 |                                  | enterprise2 |
+------+------+                                  +------+------+
       |                                                |
  user1/UA1                                        user2/UA2
From:sip:user1@enterprise1.com
To:sip:user2@enterprise2.com

      ]]></artwork></figure></t>
    <t>We need to differentiate the above legitimate call from the following illegitimate call where user3 at UA3 in enterprise3 is calling UA2 and is spoofing the identity of user1:
      <figure><artwork><![CDATA[

                          user3/UA3
                               |
                        +------+------+
                        | enterprise3 |
                        +------+------+
                               |
           +----------+   +----+-----+   +----------+
       +---+ SBC  SBC +---+ SBC  SBC +---+ SBC  SBC +---+
       |   +----------+   +----------+   +----------+   |
       |      ITSP-A         ITSP-B         ITSP-C      |
       |                                                |
+------+------+                                  +------+------+
| enterprise1 |                                  | enterprise2 |
+------+------+                                  +------+------+
       |                                                |
  user1/UA1                                        user2/UA2

      ]]></artwork></figure></t>
    <t>This needs to work both where user1's AoR is not E.164-based (as shown in the figures) and preferably also where user1's AoR is E.164-based (e.g., sip:+123456789@enterprise1.com;user=phone). However, the latter may not be achievable.</t>
    <t>TODO: Add specific requirements.</t>
  </section>

  <section title="IANA considerations">
    <t>This document requires no IANA actions.</t>
  </section>
  <section title="Security considerations" anchor="section-security">
    <t>Authentication of parties involved in a call is an essential part of this document and is fully discussed in the preceding sections. There are no other security considerations. </t>
  </section>
  <section title="Acknowledgements">
    <t>The author received valuable comments from Keith Drage, Kai Fischer, Cullen Jennings, Hadriel Kaplan, Eric Rescorla, Hannes Tschofenig, Adam Uzelac, Dean Willis, Dan Wing and Dan York during drafting.</t>
  </section>
</middle>

<back>
  <references title="Informative References">
    &rfc2015;
    &rfc2543;
    &rfc3851;
    &rfc3261;
    &rfc3325;
    &rfc3711;
    &rfc3893;
    &rfc3966;
    &rfc4474;
    &rfc4916;
    &draft-e164;
    &draft-uri-change;
    &draft-dtls-srtp;
    &draft-sbc-funcs;
    &draft-sip-certs;
    &draft-sip-derive;
    &draft-rfc4474-concerns;
  </references>
</back>
</rfc>
