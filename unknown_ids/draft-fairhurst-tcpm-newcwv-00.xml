<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<rfc category="std" docName="draft-fairhurst-tcpm-newcwv" ipr="trust200902">
   updates="2861"

  <!-- Updates SDP -->

   

  <?rfc toc="yes"?>

   

  <!-- generate a table of contents -->

   

  <?rfc symrefs="yes"?>

   

  <!-- use anchors instead of numbers for references -->

   

  <?rfc sortrefs="yes" ?>

   

  <!-- alphabetize the references -->

   

  <?rfc compact="yes" ?>

   

  <!-- conserve vertical whitespace -->

   

  <?rfc subcompact="no" ?>

   

  <!-- but keep a blank line between list items -->

   

  <front>
    <title abbrev="TCP  support for  Variable-Rate Traffic">Updating TCP to
    support Variable-Rate Traffic</title>

    <author fullname="Godred Fairhurst" initials="G." surname="Fairhurst">
      <organization>University of Aberdeen</organization>

      <address>
        <postal>
          <street>School of Engineering</street>

          <street>Fraser Noble Building</street>

          <city>Aberdeen</city>

          <region>Scotland</region>

          <code>AB24 3UE</code>

          <country>UK</country>
        </postal>

        <email>gorry@erg.abdn.ac.uk</email>

        <uri>http://www.erg.abdn.ac.uk</uri>
      </address>
    </author>

    <author fullname="Israfil Biswas" initials="I." surname="Biswas">
      <organization>University of Aberdeen</organization>

      <address>
        <postal>
          <street>School of Engineering</street>

          <street>Fraser Noble Building</street>

          <city>Aberdeen</city>

          <region>Scotland</region>

          <code>AB24 3UE</code>

          <country>UK</country>
        </postal>

        <email>israfil@erg.abdn.ac.uk</email>

        <uri>http://www.erg.abdn.ac.uk</uri>
      </address>
    </author>

    <date day="07" month="March" year="2011" />

    <area>Transport</area>

    <workgroup>TCPM Working Group</workgroup>

    <keyword>CWV</keyword>

    <keyword>TCP</keyword>

    <abstract>
      <t>This document addresses issues that arise when TCP is used to support
      variable-rate traffic that includes periods where the transmission rate
      is limited by the application. It evaluates TCP Congestion Window
      Validation (TCP-CWV), an IETF experimental specification defined in RFC
      2581, and concludes that TCP-CWV sought to address important issues, but
      failed to deliver a widely used solution. </t>

      <t>The document recommends that the IETF should consider moving RFC 2861
      from Experimental to Historic status, and replacing this with the
      current specification, which updates TCP to allow a TCP sender to
      restart quickly following either an idle or data-limited period. The
      method is expected to benefit variable-rate TCP applications, while also
      providing an appropriate response if congestion is experienced. </t>
    </abstract>
  </front>

   

  <middle>
    <!-- text starts here -->

    <section title="Introduction" toc="include">
      <t>TCP's congestion window (cwnd) controls the number of packets a TCP
      flow may have in the network at any time. A bulk application that always
      sends as fast as possible, will continue to grow the cwnd, and increase
      its transmission rate until it reaches the maximum permitted. In
      contrast, a variable-rate application may experience long periods when
      the sender is either idle or application-limited. </t>

      <t>Standard TCP requires the cwnd to be reset to the restart window (rw)
      when an application becomes idle. RFC 2861 noted that this behaviour was
      not always observed in current implementations. Recent experiments
      [Bis08] confirm this to still be the case. Standard TCP does not control
      growth of the cwnd when an application is data-limited. A data-limited
      application may therefore grow a cwnd that does not reflect any current
      information about the state of the network. Use of an invalid cwnd may
      result in reduced application performance or could significantly
      contribute to network congestion. These issues were noted in [RFC 2861].
      </t>

      <t>TCP-CWV proposed a solution to help reduce the cases where TCP
      experienced an invalid cwnd. The use of TCP-CWV is discussed in Section
      2. </t>

      <t>Section 4 discusses an alternative to TCP-CWV that seeks to address
      the same issues, but does so in a way that is expected to mitigate the
      impact on an application that varies its transmission rate. The proposal
      described applies to both a data limited and an idle condition. .</t>
    </section>

    <section title="Reviewing experience with TCP-CWV">
      <t>RFC 2861 described a simple modification to the TCP congestion
      control algorithms that decayed the cwnd after the transition from a
      &ldquo;sufficiently-long&rdquo; application-limited period, while using
      the slow-start threshold ssthresh to save information about the previous
      value of the congestion window. This approach relaxed the standard TCP
      behaviour [RFC5681] for an idle session, intended to improve application
      performance. It did not modify the behaviour for an application-limited
      session where a sender continues to transmit at a rate less than allowed
      by cwnd. </t>

      <t>RFC 2861 has been implemented in some mainstream operating systems as
      the default behaviour [Bis08]. Experience from using applications with
      TCP-CWV suggests that this mechanism does not offer the desirable
      increase in application performance for &ldquo;bursty&rdquo;
      applications and it is unclear that applications actually use the
      mechanism. Analysis (e.g. [Bis10]) has shown that TCP-CWV is able to use
      the available capacity after an idle period over a shared path and that
      this can have benefit, especially over long delay paths, when compared
      to slow-start restart specified by standard TCP, but this behaviour can
      be too conservative to be attractive to many common variable-rate
      applications. </t>

      <t>TCP-CWV offer a benefit, compared to standard TCP, for an application
      that exhibits regular idleness. However TCP-CWV would only benefit the
      application if the idle period was greater than several RTOs, since the
      behaviour would be the same as for standard TCP. Although TCP-CWV
      benefits the network in an application-limited scenario, the
      conservative approach of TCP-CWV does not provide an incentive to
      application to use this. It is therefore suggested that TCP-CWV is often
      a poor solution for many variable rate applications. In summary, TCP-CWV
      has the correct motivation, but has the wrong approach to solving this
      problem </t>
    </section>

    <section title="Terminology" toc="include">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119" />.</t>

      <t>The document also assumes familiarity with the terminology of TCP
      congestion control [RFC5681]. </t>
    </section>

    <section title="An updated TCP response to idle and application-limited periods  "
             toc="include">
      <t>This section proposes an update to the TCP congestion control
      behaviour during an idle or data limited period. The new method allows a
      TCP sender to preserve the cwnd when an application becomes idle for a
      period of time (set in this specification to 6 minutes). This period
      where actual usage is less than allowed by cwnd is called the
      nonvalidation phase. This allows an application to resume transmission
      at a previous rate without incurring the delay of slow-start. However,
      if the TCP sender experiences congestion using the preserved cwnd, it is
      required to immediately reset the cwnd to an appropriate value. If a
      sender does not take advantage of the preserved cwnd within 6 minutes,
      the value of cwnd is updated, ensuring the value then reflects the
      capacity was recently used. </t>

      <t>The new method does not differentiate between times when the sender
      has become idle or application-limited. It recognises that applications
      can result in variable-rate transmission. This therefore reduces the
      incentive for an application to send data, simply to keep transport
      congestion state. The method requires SACK to be enabled. This allows a
      sender to select a cwnd following a congestion event that is based on
      the measured path capacity path, better reflecting the fair-share. A
      similar approach was proposed by TCP Jump Start [Liu07], as a congestion
      response after more rapid opening of a connection.</t>

      <t>It is expected that the proposed TCP modification will satisfy the
      requirements of many variable rate applications and at the same time
      provide an appropriate method for use in the Internet. This change may
      also serve to encourage application </t>

      <section title="A method for preserving cwnd in idle and application-limited periods."
               toc="include">
        <t>The method described in this document updates RFC 5681. Use of the
        method REQUIRES a TCP sender and the corresponding receiver to enable
        the SACK option [RFC 3517]. </t>

        <t>RFC 5681 define a variable FlightSize, that indicates the amount of
        outstanding data in the network. In RFC 5681 this is used during loss
        recovery, whereas in this method it is also used in normal data
        transfer. A sender is not required to accurately record this value,
        but must be able to measure the volume of data in the network at least
        each RTT period. </t>
      </section>

      <section title="The nonvalidated phase" toc="include">
        <t>The updated method creates a new TCP phase that captures where the
        cwnd reflects a valid or nonvalidated value. The phases are defined
        as: </t>

        <t>
          <list style="symbols">
            <t>Valid phase: FlightSize &gt;=(2/3)*cwnd - In this phase the
            sender is in the normal phase, where cwnd is an approximate
            indication of available capacity currently available along the
            network path. </t>

            <t>Nonvalidated phase: FlightSize &lt;(2/3)*cwnd - In this phase
            the sender is in the nonvalidated phase, where the cwnd was based
            on a previous approximation of the available capacity, and the
            usage of this capacity has not been validated in the previous RTT.
            That is, the transmission rate is not being constrained by the
            cwnd.</t>
          </list>

          
        </t>
      </section>

      <section title="TCP congestion control during the nonvalidated phase"
               toc="include">
        <t>A TCP sender that enters the non-validated phase preserves the cwnd
        (i.e., this neither grows nor reduces). The phase is concluded after a
        fixed period of time (6 minutes, as explained in section 4.4) or when
        the sender transmits using the full cwnd (i.e. it is no longer
        data-limited). </t>

        <t>The behaviour in the non-validated phase is specified as: </t>

        <t>
          <list style="symbols">
            <t>If the sender consumes all the available space within the cwnd
            (i.e. the remaining cwnd is less than one SMSS), then the sender
            MUST exit the nonvalidated phase. (The conditions for entering and
            leaving this phase are intentionally different to introduce
            hysteresis, although the change between phases is not impacted to
            impact the application.) If the Retransmission Time Out (RTO)
            expires during the nonvalidated phase, the sender MUST exit the
            nonvalidated phase. It then uses the Standard TCP mechanism (in
            this case the path history is considered unreliable). </t>
          </list>
        </t>

        <t />

        <section title="Adjustment at the end of the nonvalidated phase  "
                 toc="default">
          <t>An application that remains in the nonvalidated phase for a
          period greater than six minutes is required to adjust its congestion
          control state.</t>

          <t>During the non-validated phase, an application may produce bursts
          of data at up to the cwnd in size. This is no different to normal
          TCP, however it is desirable to control the maximum burst size, e.g.
          by setting a burst size limit, using a pacing algorithm, or some
          other method.</t>

          <t>At the end of the nonvalidated phase, the sender MUST update
          cwnd:</t>

          <t> cwnd = max(FlightSize*2, IW).</t>

          <t>Where IW is the TCP initial window.</t>

          <t>The sender also MUST reset the ssthresh:</t>

          <t> ssthresh = max(ssthresh, 3*cwnd/4).</t>

          <t>The adjustment of ssthresh ensures that the sender records that
          it has safely sustained the present rate. This change is beneficial
          to applications-limited flows that encounter occasional congestion,
          and could otherwise suffer an unwanted additional delay in
          recovering the transmission rate.</t>

          <t>The sender MAY re-enter the nonvalidated phase if required (see
          section 4.2).</t>
        </section>

        <section title="Response to congestion in the nonvalidated phase"
                 toc="include">
          <t>If the sender receives congestion feedback while in the
          nonvalidated phase, i.e. it detects a packet-drop or receives an
          Explicit Congestion Notification (ECN), this indicates that it was
          unsafe to start with the preserved cwnd, and TCP is required to
          quickly reduce the rate to avoid further congestion.</t>

          <t>When loss is detected, the sender MUST calculate a safe cwnd:</t>

          <t> cwnd = FlightSize&ndash; R.</t>

          <t>Where, R is the volume of data reported as unacknowledged by the
          SACK information. Following the method proposed for JumpStart
          {Liu07].</t>

          <t>At the end of the recovery phase, the TCP sender MUST reset the
          cwnd:</t>

          <t> cwnd = (FlightSize/2).</t>
        </section>
      </section>

      <section title="Determining a safe period to preserve cwnd"
               toc="include">
        <t>Setting a limit to the period that cwnd is preserved avoids the
        undesirable side effects that would result if cwnd were preserved for
        an arbitrary long period, which was a part of the problem that TCP-CWV
        originally attempted to address. The period a sender may safely
        preserve the cwnd, is a function of the period that a network path is
        expected to sustain capacity reflected by cwnd. There is no perfect
        choice for this time. The period of 6 minutes was chosen as a
        compromise that was larger than the idle intervals of common
        applications, but not sufficiently larger than the period for which an
        Internet path may commonly be regarded as stable. </t>

        <t>The capacity of wired networks is usually relatively stable for
        periods of several minutes and that load stability increases with the
        capacity. This suggests that cwnd may be preserved for at least a few
        minutes. </t>

        <t>There are cases where the TCP throughput exhibits significant
        variability over a time less than 6 minutes. Examples could include
        many wireless topologies, where TCP rate variations may fluctuate on
        the order of a few seconds as a consequence of medium access protocol
        instabilities. Mobility changes may also impact TCP performance over
        short time scales. Senders that observe such rapid changes in the path
        characteristic may also experience increased congestion with the new
        method, however such variation would likely also impact TCP&rsquo;s
        behaviour when supporting interactive and bulk applications. </t>

        <t>Routing algorithms may modify the network path, disrupting the RTT
        measurement and changing the capacity available to a TCP connection,
        however such changes do not often occur within a time frame of a few
        minutes. </t>

        <t>The value of 6 minutes is expected to be sufficient for most
        current applications. Simulation studies also suggest that for most
        practical applications, the performance using this value will not be
        significantly different to that observed using a non-standard method
        that does not reset cwnd after idle. </t>
      </section>
    </section>

    <section title="Security Considerations" toc="include">
      <t>General security considerations concerning TCP congestion control are
      discussed in RFC 5681. This document describes a algorithm for one
      aspect of those congestion control procedures, and so the considerations
      described in RFC 5681 apply to this algorithm also.</t>
    </section>

    <section title="IANA Considerations" toc="include">
      <t>None.</t>
    </section>

    <section title="Acknowledgments">
      <t>The authors acknowledge the contributions of Dr A Sathiaseelan and Dr
      R Secchi in supporting the evaluation of TCP-CWV and for their help in
      developing the protocol proposed in this draft. </t>

      <t>
        <!-- -->

        
      </t>
    </section>
  </middle>

   

  <back>
    <references title="Normative References">
      <?rfc sortrefs="yes"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2861.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.3517.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5681.xml"?>
    </references>

    <references title="Informative References">
      <reference anchor="Bis08">
        <front>
          <title>A Practical Evaluation of Congestion Window Validation
          Behaviour, 9th Annual Postgraduate Symposium in the Convergence of
          Telecommunications, Networking and Broadcasting (PGNet), Liverpool,
          UK, Jun. 2008.</title>

          <author fullname="I." surname="Biswas">
            <organization />
          </author>

          <author fullname="G." surname="Fairhurst">
            <organization />
          </author>
        </front>
      </reference>

      <reference anchor="Liu07">
        <front>
          <title>Congestion Control without a Startup Phase, 5th International
          Workshop on Protocols for Fast Long-Distance Networks (PFLDnet), Los
          Angeles, California, USA, Feb. 2007.</title>

          <author fullname="D" surname="Liu">
            <organization />
          </author>

          <author fullname="M." surname="Allman">
            <organization />
          </author>

          <author fullname="S" surname="Jiny">
            <organization />
          </author>

          <author fullname="L." surname="Wang">
            <organization />
          </author>
        </front>
      </reference>

      <reference anchor="Bis10">
        <front>
          <title>Analysing TCP for Bursty Traffic, Int'l J. of Communications,
          Network and System Sciences, 7(3), July 2010.</title>

          <author fullname="I." surname="Biswas">
            <organization />
          </author>

          <author fullname="A." surname="Sathiaseelan">
            <organization />
          </author>

          <author fullname="R." surname="Secchi">
            <organization />
          </author>

          <author fullname="G." surname="Fairhurst">
            <organization />
          </author>
        </front>
      </reference>
    </references>
  </back>

   
</rfc>
