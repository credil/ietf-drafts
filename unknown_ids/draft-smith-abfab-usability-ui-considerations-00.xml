<?xml version="1.0" encoding="US-ASCII"?>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc strict="no"?>
<?rfc rfcedstyle="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc4282 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4282.xml">
]>

<rfc category="info" docName="draft-smith-abfab-usability-ui-considerations-00" ipr="trust200902">
    <front>
        <title abbrev="ABFAB UI Considerations">Application Bridging for Federated Access Beyond web (ABFAB) Usability and User Interface Considerations</title>
        <author fullname="Dr. Rhys Smith" surname="Smith" initials="R">
            <organization>Cardiff University</organization>
            <address>
                <postal>
                    <street>39-41 Park Place</street>
                    <city>Cardiff</city>
                    <code>CF10 3BB</code>
                    <country>United Kingdom</country>
                </postal>
                <phone>+44 29 2087 0126</phone>
                <email>smith@cardiff.ac.uk</email>
            </address>
        </author>
        
        <date year="2011" />

        <area>Security Area</area>

        <workgroup>ABFAB</workgroup>

        <keyword>Internet-Draft</keyword>
        <keyword>Federated Authentication</keyword>
        <keyword>AAA</keyword>
        <keyword>RADIUS</keyword>
        <keyword>Diameter</keyword>
        <keyword>GSS-API</keyword>
        <keyword>EAP</keyword>
        <keyword>SASL</keyword>

        <abstract>
            <t>
                The use of ABFAB-based technologies requires that each user's machine is configured with the user's identities. This will require something on that machine which will manage the user's identities and services. Anyone designing that "something" will face the same set of challenges. This document aims to document these challenges with the aim of producing well-thought out UIs with some consistency.
            </t>
        </abstract>
    </front>

    <middle>
        
        <section title="Introduction">
            <t>
                The use of ABFAB-based technologies requires that each user's machine is configured with the user's identities. This will require something on that machine which will manage the user's identities and services. Anyone designing that "something" will face the same set of challenges. This document aims to document these challenges with the aim of producing well-thought out UIs with some consistency.
            </t>
        </section>
        
        <section title="Conventions">
            <t>
                The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", 
                "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted 
                as described in <xref target="RFC2119" />.
            </t>
        </section>
        
        <section title="Terminology">
            <t>
                TODO:
                <list style="symbols">
                    <t>
                        Identity: TODO.
                    </t>
                    <t>
                        Identity Selector: TODO.
                    </t>
                    <t>
                        NAI: Network Access Identifier; see <xref target="RFC4282" />.
                    </t>
                    <t>
                        Service: TODO.
                    </t>
                    <t>
                        Trust anchor: TODO.
                    </t>
                </list>
               
            </t>
        </section>
        
        <section title="Context">
            <t>
                When using the ABFAB architecture to perform federated authentication in a non-web environment, when a user attempts to authenticate to an ABFAB secured application they will be prompted to provide an identity that they wish to authenticate with. This will happen through a process of the application calling the GSS-API, which will in turn gather the users credentials through whatever mechanism it has been configured to do so. We will call this the "identity selector" in this document, though that in no way is a recommendation on terminology for the mechanism!
            </t>
            <t>
                Any designer of an identity selector will share a common set of usability considerations inherent to the context.
            </t>
            <t>
                It is assumed that identity selector will attempt to gather a set of identities that belong to its user, and allow that user to manage them in some manner.
            </t>
        </section>
        
        <section title="Considerations around Terminology">
            <t>
                Anyone designing an identity selector will have to grapple with choosing terminology that the average user has some chance of understanding. This section will have some discussion around choosing the correct terminology.
            </t>
            
            <section title="Identity">
                <t>
                    Users are used to a variety of terms for aspects of their identity in the ABFAB sense; some of these terms include "username", "login", "network account", "home organisation account", "credentials" and a myriad of other such terms. NAI is unlikely to be one of these terms they are used to.
                </t>
                <t>
                    Careful thought needs to be given to the terminology used in the UI.
                </t>
                <t>
                    Also what paradigm to use when presenting identity to users. Examples that have been deployed include the idea of reality-based paradigms such as "Identity Cards" that are held in the user's "Wallet".
                </t>
            </section>
            
            <section title="Services">
                <t>
                    TODO.
                </t>
            </section>
        </section>
        
        <section title="Considerations around Management of Identities">
            <t>
                A core feature of an identity selector is in management of a user's identities. This section looks at various usability considerations of this area.
            </t>
            
            <section title="Information associated with each Identity" anchor="Identity_Information">
                <t>
                    Before we can discuss usability considerations around management of a user's identities, we should first look at what information will be a part of the user's identities.
                </t>
                <t>
                    There is going to be a minimal set of information that should be stored about each identity. 
                    <list style="symbols">
                        <t>
                            Friendly name of Identity - To allow the user to differentiate between the set of identities they have they should be able to give each identity a "friendly" identifier. The only restriction on this name is that it MUST be unique within that particular user's set of identities. For example "My University Login".
                        </t>
                        <t>
                            Issuing Organisation - Shows the organisation that issued this particular credential. This should be... what? For example "Sandford University".
                        </t>
                        <t>
                            NAI - The user's Network Access Identifier (see <xref target="RFC4282" />) for this particular credentials. For example, "joe@example.com".
                        </t>
                        <t>
                            Password - The password associated with this particular NAI.
                        </t>
                        <t>
                            Trust Anchor - For a user to be able to verify (whether they understand what is happening or not) the identity of the service they are accessing, or where their identity is held and verified, each identity will need trust anchor information so that the identity selector can be sure that the server they are talking to is legit. This will either be an X509 certificate or 
                        </t>
                    </list>
                </t>
                <t>
                    There is also going to be a set of optional information that would be very useful. 
                    <list style="symbols">
                        <t>
                            Password changing URL - The URL the user should visit should they need to change their password for this particular identity. For example, "http://www.example.com/passwordreset".
                        </t>
                    </list>
                </t>
            </section>

            <section title="Adding/Association of an Identity" anchor="Identity_Addition">
                <t>
                    Users will have identities given to them by the organisation the user has a relationship with. One of the core tasks of an identity selector will be to associate to these identities. This could be done in one of three ways: user manually adds, manually triggered automated provisioning, completely automated provisioning. Each of these is discussed in more detail.
                </t>
                <t>
                    Note that the term "association" or "addition" of an identity is used rather than "provisioning" of an identity, because while we actually are provisioning identities into the UI, provisioning is an overloaded term in the space and could easily be confused with identity provisioning in the sense of the creation of the identity by the home organisation's identity management procedures.
                </t>
                
                <section title="Manual Addition" anchor="Identity_Addition_Manual">
                    <t>
                        Allowing users to manually associate an identity represents the easiest method of achieving the goal, but it is a method that has the greatest usability drawbacks. Most of the information required is relatively technical and finding some way of explaining what each field is to an untechnical audience is challenging, to say the least.
                    </t>
                    <t>
                        Thus, this method should be considered as a power-user option only, or as a fall-back should the other methods not be applicable.
                    </t>
                    <t>
                        When this method is used, careful consideration should be given to the UI presented to the user. The UI will have to ask for all of the information detailed in <xref target="Identity_Information" />.
                    </t>
                    <t>
                        There are two points where a user could manually add an identity:
                        <list style="numbers">
                            <t>
                                Randomly - the user could be allowed to, at any time, trigger a workflow of manually adding an identity. This represents the most flexible way of adding an identity as a user can perform this at any time. It does, however, have inherent issues when it comes to verifying the newly added identity (see <xref target="Identity_Verification" />).
                            </t>
                            <t>
                                When connecting to a service - the user could be given an option when connecting to a service which has no mapping to any existing associated identity to add a new one. This presents a better user experience when it comes to verifying the newly added identity (see <xref target="Identity_Verification" />), however, represents a less direct method of adding an identity. Users who have not yet added the appropriate identity to their identity selector may find it difficult to understand that they must try to access a particular service in order to add an identity.
                            </t>
                        </list>
                    </t>
                    <t>
                        Of course, both styles of identity addition could be enabled, thus gaining the benefits of both. However, this would also result in the drawbacks of each also being present.
                    </t>
                    <t>
                        Something about choosing an appropriate trust anchor and verifying your IdP...
                    </t>
                </section>
                
                <section title="Manually Triggered Automated Addition" anchor="Identity_Addition_Automated_Manually_Triggered">
                    <t>
                        One way to bypass the need for manual addition of a user's identity, and all of the usability issues inherent in that approach, is to provide some sort of manually triggered, but automated, provisioning process.
                    </t>
                    <t>
                        One approach to accomplishing this, for example, could be for an organisation to have a section on their website where their users could visit, enter the user part of their NAI, and be given a file that automatically sets up many or all of the identity information for that identity.
                    </t>
                    <t>
                        It is reasonable to assume that any such provisioning service is likely to be organisation specific, so that the Issuing Organisation and realm part of the NAI will be constant. The user part of their NAI will have been input on the web service. The password MAY be provided as a part of the provisioning file.
                    </t>
                    <t>
                        Thus, all required information should be contained within this provisioning file. The identity selector should import this information, and ask the user to provide the correct password for that identity (if a password was not provided).
                    </t>
                    <t>
                        Additionally, the user SHOULD be given the opportunity to:
                        <list style="symbols">
                            <t>
                                Supply or change the default friendly name for that identity - to allow the user to customise the identifier they use for that identity;
                            </t>
                            <t>
                                Indicate whether or not the identity selector should always ask before using services with this identity - to customise the way in which the identity selector interacts with the user with this particular identity;
                            </t>
                            <t>
                                Reject the addition of the identity completely - to allow the user to back out of the association process tidily.
                            </t>
                        </list>
                    </t>
                    <t>
                        In this case, trust anchors could be directly provided in the file to help establish the trust relationship...
                    </t>
                </section>
            
                <section title="Fully Automated Addition" anchor="Identity_Addition_Automated">
                    <t>
                        Many organisations manage the machines of their users using enterprise management tools. Such organisations may wish to be able to automatically add a particular user's identity to the identity selector on their machine/network account so that the user has to do nothing. 
                    </t>
                    <t>
                        This represents the best usability for the user - they don't actually have to do anything. However, it can only work on machines centrally managed by the organisation.
                    </t>
                    <t>
                        Additionally, having an identity automatically provided, including its password, does have some particular usability issues. Users are used to having to provide their username and password to access services. When attempting to access services, authenticating to them completely transparently to the user could represent a source of confusion. User training within an organisation to explain that automated provisioning of their identity has been enabled is the only way to counter this.
                    </t>
                    <t>
                        In this case, trust anchors could be directly provided in the file to help establish the trust relationship...
                    </t>
                </section>
            </section>
            
            <section title="Modifying Identity Information">
                <t>
                    This is fairly similar to adding an identity, and thus shares many of the usability issues with that process. Some particular things are discussed here.
                </t>
                
                <section title="Manual Modification">
                    <t>
                        An identity selector may allow a user to manually modify some or all of the information associated with each identity.
                    </t>
                    <t>
                        
                    </t>
                </section>
                
                <section title="Automated Modification">
                    <t>
                        To ease usability, organisations may wish to automatically provide updates to identity information. For example, if the user's password changes, it could automatically update the password for the identity in the user's identity selector.
                    </t>
                </section>
            </section>
            
            <section title="Verifying an identity" anchor="Identity_Verification">
                <t>
                    An inherent by-product of the ABFAB architecture is that an identity cannot be verified during its addition, or directly after; it can only be verified while it is in use with a real service. This represents a definite usability issue no matter which method of identity addition is used (see <xref target="Identity_Addition" />) as:
                    <list style="symbols">
                        <t>
                            If the user has manually added the identity (see <xref target="Identity_Addition" />) they will have gone through the whole manual process with no errors and so believe the identity has been set up correctly. However, when they attempt to access a service, they may be given an error message, thus causing some amount of confusion.
                        </t>
                        <t>
                            If the user has had the identity provisioned into their identity selector, then there is a much greater chance of the identity information being correct. However, if any of the information is not correct, then there is the potential for confusion as the user did not add the information in the first place.
                        </t>
                    </list>
                </t>       
                <t>
                    Also, if the identity information is incorrect the user may not know where the error lies, and the error messages provided by the mechanism may not be helpful enough to indicate the error and how to fix it (see <xref target="Handling_Errors" />).
                </t>
            </section>
            
            <section title="Removing an Identity">
                <t>
                    This is fairly similar to adding or modifying an identity, and thus shares many of the usability issues with those processes. Some particular things are discussed here.
                </t>
                
                <section title="Manual Removal">
                    <t>
                        TODO.
                    </t>
                </section>
                
                <section title="Automated Removal">
                    <t>
                        TODO.
                    </t>
                </section>
            </section>
                            
        </section>
        
        <section title="Considerations around Service to Identity Mapping">
            <t>
                There is a many to many association between Identities and Services. This association is not easily comprehended by the user. Representing this association and allowing the user to both manipulate it and control it is challenging. These obstacles are especially common when errors occur after an association has been made. In this scenario it is important to make it easy for the user to disassociate the Identity from the service.
            </t>
            
            <section title="Listing Services and Identities">
                <t>
                    A service list should be considered in the client which is both searchable and editable by the user. 
                </t>
            </section>
            
            <section title="Associating a Service with an Identity">
                <t>
                    In addition to that there needs to be a way for the user to create the service to Identity association, however this should only occur once the identity has authenticated with the service without any error.  
                </t>
                <t>
                    There are a few ways this association could happen.
                </t>
                
                <section title="User-driven Manual Association">
                    <t>
                        The user could manually associate a particular service with a particular identity. Lots of UI issues.
                    </t>
                </section>
                
                <section title="Automated Rules-based Association">
                    <t>
                        It would be benefical from a usability perspective to minimise - or avoid entirely  - situations where the user has to pick an identity for a particular service. This could be accomplished by having rules to describe services and their mapping to identities. Such a rule could match, for example, a particular identity for all IMAP servers, or a particular identity for all services in a given service realm.
                    </t>
                </section>
            </section>
            
            <section title="Dis-associating a Service with an Identity">
                <t>
                    It is also good practice to allow for the associated Identity to be visible to the user while he/she is using a specific service. The user would then be able to identify the Identity and disassociate it if there is an error.
                </t>
            </section>

        </section>
                
        <section title="Handling of Errors" anchor="Handling_Errors">
            <t>
                All GSS-API calls need to be instantiated from the application. For this reason when an error occurs the user needs to be sent back to the application to re-initiate the GSS-API call. This can get tedious and cause the user to opt out of what they are trying to accomplish. In addition to this the error messages themselves may not be useful enough for the user to decipher what has gone wrong. 
            </t>
            <t>
                It is important to try and avoid error cases all together while using GSS-API as error messages and error handling can really effect usability.  Another solution would be to alter the application to handle the errors as it is instantiating the GSS-API communication.
            </t>
            <t>
                Lots more to discuss here...
            </t>
            
            <section title="Identity Association/Verification Errors">
                <t>
                    e.g. wrong password, bad trust anchors, etc. TODO.
                </t>
            </section>
            
            <section title="Service Errors">
                <t>
                    e.g. identity is correct but no authorisation. TODO.
                </t>
            </section>
            
            <section title="Other Errors.">
                <t>
                    e.g. network errors. TODO.
                </t>
            </section>
        </section>

       
        
        <section title="Contributors">
            <t>
                The following individuals made important contributions to the text of this document: Sam Hartman (Painless Security LLC), and Maria Turk (Codethink Ltd).
            </t>
        </section>

        <section title="Acknowledgements">
            <t>
                TODO
            </t>
        </section>
          
        <section title="Security Considerations">
            <t>
                TODO
            </t>
        </section>
        
        <section title="IANA Considerations">
            <t>
                This document does not require actions by IANA.
            </t>
        </section>        
        
    </middle>

    <back>
        <references title="Normative References">
            &rfc2119;
            &rfc4282;
        </references>

        <references title="Informative References">
        </references>
    </back>
</rfc>
