<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "http://xml.resource.org/authoring/rfc2629.dtd"
[
  <!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY RFC4960 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4960.xml">
  <!ENTITY RFC5043 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5043.xml">
  <!ENTITY RFC5044 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5044.xml">
  <!ENTITY RFC5061 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5061.xml">
]
>

<rfc category="std" docName="draft-ietf-storm-mpa-peer-connect-02" ipr="trust200902" updates="5043, 5044">
  <?rfc strict="no" ?>
  <?rfc toc="yes" ?>
  <?rfc tocdepth="4" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes" ?>
  <?rfc subcompact="no" ?>
    <?rfc compact="yes" ?>
	
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?-- end of list of popular I-D processing instructions --?>


  <!-- ***** FRONT MATTER ***** -->

  <?rfc?>Enhanced RDMA Connection Establishment<?rfc?>

	   
<front>
<title>Enhanced RDMA Connection Establishment</title>
    <author initials='A.' surname='Kanevsky' fullname='Arkady Kanevsky' role='editor'>
      <organization>VMware</organization>
      <address>
        <postal>
          <street>5 Cambridge Center</street>
          <city>Cambridge</city>
          <region>MA</region>
          <code>02142</code>
          <country>USA</country>
        </postal>
        <phone>+1-617-528-7721</phone>
        <email>arkady@vmware.com</email>
     </address>
    </author>
	
	<author initials='C.' surname='Bestler' fullname='Caitlin Bestler' role='editor'>
      <organization>Consultant</organization>
      <address>
        <postal>
          <street>555 E El Camino Real #104</street>
          <city>Sunnyvale</city>
          <region>CA</region>
          <code>94087</code>
          <country>USA</country>
        </postal>
        <phone>+1-949-528-3085</phone>
        <email>cait@asomi.com</email>
     </address>
    </author>

    <author initials='R.O.' surname='Sharp' fullname='Robert Sharp'>
      <organization>Intel</organization>
      <address>
        <postal>
		<street>LAD High Performance Message Passing, Mailstop: AN1-WTR1</street>
          <street>1501 South Mopac, Suite 400</street>
          <city>Austin</city>
          <region>TX</region>
          <code>78746</code>
          <country>USA</country>
        </postal>
        <phone>+1-512-493-3242</phone>
        <email>robert.o.sharp@intel.com</email>
     </address>
    </author>

    <author initials='S.' surname='Wise' fullname='Steve Wise'>
      <organization>Open Grid Computing</organization>
      <address>
        <postal>
          <street>4030 Braker Lane STE 130</street>
          <city>Austin</city>
          <region>TX</region>
          <code>78759</code>
          <country>USA</country>
        </postal>
        <phone>+1-512-343-9196 x101</phone>
        <email>swise@opengridcomputing.com</email>
     </address>
    </author>
	
	<date/>
    <area>Transport</area>
    <workgroup>STORM</workgroup>
    <keyword>RDDP</keyword>
    <keyword>RDMA</keyword>
    <keyword>MPA</keyword>
    <keyword>MPACS</keyword>
    <abstract>
      <t> 
      Extensions to MPA are specified for RDMA Connection establishment.
      The first extension extends RFC5043, enabling peer-to-peer connection establishment over MPA/TCP.
      The second extension extends both RFC5043 and RFC5044, by providing an option for standardized exchange of RDMA-layer connection configuration.
      </t>
    </abstract>
  </front>

  <middle>
<section title="Introduction" >
      <t>When used over TCP, the current RDDP suite of protocols relies
      on Marker PDU Alignment (MPA) <xref target="RFC5044" /> protocol for both
      connection establishment and for markers for TCP layering.
      Currently MPA only supports a client-server model for connection establishment, forcing
      peer-to-peer applications to interact as though they had a 
      client/server relationship.
      In addition negotiation of some of Remote Direct Memory Access Protocol (RDMAP) <xref target="RFC5040" /> specific parameters are left to ULP negotiation.
      Providing an optional ULP-independent format for exchanging these
      parameters would be of benefit to transport neutral RDMA applications.
      </t>
	  <section title="Summary of changes from RFC 5044">
	  <t> This draft extends <xref target="RFC5044" />
	  MPA connection setup protocol.
	  First, it add exchange and negotiation of
	  maximum number of RDMA Read Incoming (IRD) and Outgoing messages (ORD).
	  Second, it adds one more
	  Ready to Receive (RTR) frame from requestor to responder as the last message of connection
	  establishment and adds negotiation of RTR frame message type into MPA request/response
	  frames.
	  </t>
	  </section>
	  <section title="Summary of changes from RFC 5043" >
	  <t> This draft extends <xref target="RFC5043" /> by adding new
	  Enhanced Session Control Chunks that extend the currently defined Chunks
	  with the addition of IRD and ORD negotiation.
	  </t>
	  </section>
	  </section>
<section title="Requirements Language" >
        <t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;,
        &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;MAY&quot;, and &quot;OPTIONAL&quot; in this
        document are to be interpreted as described in
        <xref target="RFC2119" />.</t>
      </section>
<section title="Definitions" >
      <t>
      <list style='hanging'>
      <t hangText="FULPDU:">Framed Upper Layer Protocol PDU. See <xref target="RFC5044" />.</t>
      <t hangText="Completion Queue (CQ):">A consumer accessible queue where the RDMA device reports completions of Work Requests. A Consumer is able to
      reap completions from a CQ without requiring per transaction support
      from the kernel or other privileged entity. See <xref target="RDMAC" />.
      </t>
      <t hangText="Completion Queue Entry (CQE):">Transport and device specific
      representation of a Work Completion. A Completion Queue holds CQEs.
      See <xref target="RDMAC" />.
      </t>
      <t hangText="Inbound RDMA Read Queue Depth (IRD):">The maximum number of incoming outstanding RDMA Read Request Messages an RDMA connection can 
      handle. See <xref target="RDMAC" />.
      </t>
      <t hangText="IRD:">See Inbound RDMA Read Queue Depth.</t>
      <t hangText="ORD:">See Outbound RDMA Read Queue Depth.</t>
      <t hangText="Outbound RDMA Read Queue Depth (ORD):">The maximum number of
      outstanding RDMA Read Requests that can be issued for the RDMA connection.
      This should be less than or equal to the peer's IRD.
      See <xref target="RDMAC" />.
      </t>
      <t hangText="Queue Pair (QP):">The traditional name for a local Endpoint in a <xref target="VIA" /> derived local interface. A Queue Pair is the
      set of Work Queues associated exclusively with a single Endpoint. The
      Send Queue (SQ), Receive Queue (RQ) and Inbound RDMA Read Queue (IRQ)
      are considered to be part of the Queue Pair. The potentially shared
      Completion Queue (CQ) and Shared Receive Queue (SRQ) are not.
      See <xref target="RDMAC" />.
      </t>
      <t hangText="Shared Receive Queue(SRQ):">A shared pool of Receive Work
      Requests posted by the Consumer that can be allocated by multiple RDMA endpoints (Queue Pair). See <xref target="DAPL" />.
      </t>
      <t hangText="Work Queue:">An element of a <xref target="VIA" /> derived local interface that allows user-space applications to submit Work Requests directly to network hardware. Specific Work Queues include
      the Send Queue (SQ) for transmit requests, Receive Queue (RQ) for
      receive requests specific to a single Endpoint and Shared Receive Queues
      (SRQs) for receive requests that can be allocated by one or more
      Endpoints.
      See <xref target="RDMAC" />.
      </t>
      <t hangText="Work Queue Element (WQE):">Transport and device specific
      representation of a Work Request.
      See <xref target="RDMAC" /></t>
      <t hangText="Work Request:">An elementary object used by Consumers
      to enqueue a requested operation (WQEs) onto a Work Queue.
      See <xref target="RDMAC" />.
      </t>
      </list>
      </t>
      </section>
<section title="Motivations">
	<t>The goal of this draft is twofold. One is to extend support from the
	current client-server model for RDMA connection setup to a peer-to-peer model.
	The second is to add negotiation of RDMA Read queue size for both sides of an RDMA connection. 
</t>
        <section title="Enabling MPA Mode">
        <t>MPA defines encoding of DDP Segments in FULPDUs (Framed Upper
        Layer Protocol PDUs). Generation of FULPDUs requires the ability
        to periodically insert MPA Markers and to generate the MPA CRC-32c
        for each frame. Reception may require parsing/removing the markers
        after using them to identify MPA Frame boundaries, and validation
        of the MPA-CRC32c.
        </t>
        <t>A major design objective for MPA was to ensure that the resulting
        TCP stream would be a fully compliant TCP stream for any and
        all TCP-aware middle-boxes. The challenge is that while only some
        TCP payload streams are a valid stream of MPA FULPDUs, any sequence
        of bytes is a valid TCP payload stream. The determination
        that a given stream is in a specific MPA mode cannot be made at the
        MPA or TCP layer. Therefore enabling of MPA mode is handled by
        the ULP.
        </t>
	<t>The MPA protocol can be viewed as having two parts.
	<list style='symbols'>
	<t>a specification of generation and reception of MPA FULPDUs.
	This is unchanged by Enhanced RDMA Connection Establishment.
	</t>
	<t>
	a pre-MPA exchange of messages to enable a specific MPA mode for the TCP connection.
	Enhanced RDMA Connection Establishment extends this protocol with two new features.
        </t>
        </list>
        </t>
        <t>In typical implementations, generation and reception of MPA FULPDUs
        is handled by hardware. The exchange of the MPA Request and Reply
        frames is then handled by host software. As will be explained,
        this implementation split prevents applications from working around
        the client-server assumptions in the current MPA Request/Reply exchange.
        </t>
        </section>
        <section title="Lack of Explicit RTR in MPA Request/Reply Exchange" >
        <t>The exchange of MPA Request and Reply messages to place a TCP
        connection in MPA mode is specified in
        <xref target="RFC5044" />.
        This protocol provides many benefits to the design of MPA FULPDU
        hardware:
        <list style='symbols'>
        <t>The ULP is responsible for specifying the exact MPA Mode (Markers
        enabled or disabled, CRC-32c enabled or suppressed) and the point in
        the TCP streams (inbound and outbound) where MPA frames will begin.
        </t>
        <t>Before the first MPA frame is transmitted, all pre-MPA mode TCP
        payload will have been acknowledged by the peer. Therefore it is never
        necessary to generate a retransmission that mixes pre-MPA and MPA payload.
        </t>
        <t>Before MPA reception is enabled, all incoming pre-MPA mode TCP
        payload will have been acknowledged. Therefore the host will never
        receive a TCP segment that mixes pre-MPA and MPA payload.
        </t>
        </list>
        </t>
        <t>The limitation of the current MPA Request/Reply exchange is
        that it does not define a Ready to Receive (RTR) message that the
        active side would send, so that the passive side can know that the last
        non-MPA payload (the MPA Reply) had been received.
        </t>
        <t>Instead, the role of an RTR message is piggy-backed on the first
        MPA FULPDU sent by the active side. This is actually a valuable 
        optimization for all applications that fit the classic client/server
        model. The client only initiates the connection when it has a request
        to send to the server, and the server has nothing to send until it
        has received and processed the client request.
        </t>
        <t>Even applications where the server sends some configuration data
        immediately can easily send the same information as application private
        data in the MPA Reply. So the currently defined exchange works for
        almost all applications.
        </t>
        <t>Many peer-to-peer applications, especially those involving cluster
        calculations (frequently using MPI <xref target="UsingMPI" />,
		or <xref target="RDS" />), have no natural
        client or server roles (<xref target="PPMPI" />, <xref target="OpenMP" />).
	Typically one member of the cluster is arbitrarily selected to initiate the connection when the distributed
        task is launched, while the other accepts it. At startup time, however,
        there is no way to predict which node will have the first message to
        actually send. Establishing the connections immediately, however,
        is valuable because it reduces latency once results are ready to
        transmit and it validates connectivity throughout the cluster.
        </t>
        <t>The lack of an explicit RTR message in the MPA Request/Reply exchange
        forces all applications to have a first message from the connection
        initiator, whether this matches the application communication model
        or not.
        </t>
        </section>
        <section title="Limitations on ULP Workaround">
        <t>The requirement that the RDMA connection initiator sends the first
        message does not appear to be that onerous on first examination.
        The natural question is why the application layer would not simply
        generate a &quot;nop&quot; message when there was no other message to
        submit.
        </t>
        <t>There are three factors that make this workaround unsuitable for
        many peer-to-peer applications.
        <list style='symbols'>
        <t>Transport Neutral APIs.</t>
        <t>Work/Completion Queue Accounting.</t>
        <t>Host-based implementation of MPA Fencing.</t>
        </list>
        </t>
        <section title="Transport Neutral APIs">
        <t>Many of these applications access RDMA services using a transport
        neutral API such as <xref target="DAPL" /> or <xref target="OFA" />.
        Only MPA has a first message requirement. Other RDMA transports,
        including SCTP and InfiniBand, do not.
        </t>
        <t>Application or middleware communications can be expressed as
        transport neutral RDMA operations, allowing lower software layers
        to translate to transport and device specifics. Having a distinct
        extra message that is required only for one transport undermines
        the application's goal of being transport neutral.
        </t>
        </section>
        <section title="Work/Completion Queue Accounting">
        <t>RDMA local APIs conventionally use work queues to submit requests
        (work queue elements or WQEs) and to asynchronously receive completions
        (in completion queues or CQs).
        </t>
        <t>Each work request can generate a completion queue entries (CQE).
        Completions for successful transmit work requests are frequently
        suppressed, but the completion queue capacity must account for the
        possibility that each will complete in error.
        A completion queue can receive completions from multiple work queues.
        </t>
        <t>Completion Queues are defined so as to allow hardware RDMA implementations
        to generate CQEs directly to a user-space mapped
        buffer. This enables a user-space RDMA consumer to reap completions
        without requiring kernel intervention.
        </t>
        <t>A hardware RDMA implementation cannot reasonably wait for an
        available slot in the completion queue. The queue must be sized
        such that an overflow will not occur. When an overflow does occur
        it is considered catastrophic and will typically require tearing
        down all RDMA connections using that CQ.
        </t>
        <t>
        This style of interface is very efficient, but places a burden
        on the application to properly size each Completion Queue to match
        the Work Queues that feed it.
        </t>
        <t>While the format of both WQEs
        and CQEs is transport and device dependent, a transport neutral API
        can deal with WQEs and CQEs as abstract transport and device neutral
        objects. Therefore the number of WQEs and CQEs required for
        an application can be transport and device neutral.
        </t>
        <t>The capacity of the work queues and completion queues
        can be calculated in an abstract transport/device neutral fashion. Lower
        layers of the protocol stack cannot disrupt these calculations by
        inserting a dummy &quot;nop&quot; Work Request and filtering out the matching
        completion. The lower layer does not know the usage model on which
        the queue sizes are built, nor does it know how frequently an
        insertion will be required.
        </t>
	</section>
	<section title="Host-based Implementation of MPA Fencing">
	<t>Many hardware implementations of iWARP using MPA/TCP do not handle
	the MPA Request/Reply exchange in hardware, rather they are handled by the host
	processor in software.
	With such designs it is common for the MPA Fencing to be implemented
	in the user-space device-specific library (commonly referred to as a
	'User Verbs' library or module).</t>
	<t>
	When the generation and reception of MPA FULPDUs is already
        dedicated to hardware, a Work Completion can only be generated
        by an untagged message.
	</t>
	</section>
        </section>     
	<section title="Standardized RDMA Parameter Negotiation">
	<t>Most RDMA applications are developed using a transport neutral API
	to access RDMA services based on a &quot;queue pair&quot; paradigm as originally defined
	by the Virtual Interface Architecture <xref target="VIA" />,
	refined by the Direct Access Programming Library <xref target="DAPL" />
	and most commonly deployed with
	the OpenFabrics API <xref target="OFA" />.
	</t>
	<t>These transport neutral APIs seek to provide a common set of RDMA
	services whether the underlying transport is, for example, iWARP over MPA,
        iWARP over SCTP or InfiniBand.
	</t>
	<t>The common model for establishing an RDMA connection has the following steps:</t>
	<t>
	<list style='symbols'>
	<t>The passive side ULP listens for connection requests.</t>
	<t>The active side ULP submits a connection request using an RDMA endpoint (&quot;queue pair&quot;),
        the desired destination and the parameters
	to be used for the connection. Those parameters include both RDMA
	layer characteristics, such as the RDMA Read credits to be allowed
	and application specific data (typically referred to as &quot;private
	data&quot;).
	</t>
	<t>The passive side ULP receives the Connection Request, which includes
	the identity of the active side and the requested connection characteristics.
        The passive side ULP uses this information to decide
	whether to accept the connection, and if it is to be accepted, how to
	create and/or configure the RDMA endpoint.
	</t>
	<t>If accepting, the passive side ULP submits its acceptance of the
	Connection Request. This local accept operation includes the RDMA endpoint to
        be used and the connection characteristics (both the RDMA configuration and
	any application specific private data to be returned).
	</t>
	<t>The active side receives confirmation that the connection has
	been accepted, what the configured connection characteristics are,
	and any application supplied private data.
	</t>
	</list>
	</t>
	<t>As currently defined, DDP connection establishment requires
	the ULP to encode the RDMA configuration in the application specific
	private data. This results undesirable duplication of logic to cover
	both InfiniBand and iWARP, and to specify the extraction of the RDMA
	characteristics from the ULP for each specific Upper Layer Protocol.
	</t>
	<t>A standard definition of the RDMA characteristics within the private
	data section would enable common connection establishment APIs to format
	the RDMA characteristics based on the same API information used when
	establishing an InfiniBand connection. The application would then only
	have to indicate that it was using this standard format to enable 
	common connection establishment procedures to apply common code
	to properly parse these fields and configure the RDMA endpoints
	accordingly.
	</t>
	</section>
	</section>
<section title="MPA Connection Setup">
<t>Below we provide overview of Enhanced Connection Setup.
The goal is to allow standard negotiation of ORD/IRD setting on both sides
of the RDMA connection and/or to negotiate the initial data transfer operation
by an initiator when the existing 'client sends first' rule does not match application
requirements.</t>
<t>The RDMA connection initiator sends an MPA Request, as specified in
<xref target="RFC5044" />; the new format defined here allows for:</t>
<t><list style='symbols'>
<t>Standardized negotiation of ORD and IRD.</t>
<t>Negotiation of an RTR message.</t>
</list>
</t>
<t>The RDMA connection responder processes the MPA Request and generates
an MPA Reply, as specified in <xref target="RFC5044" />; the new format
completes the negotiation.
</t>
<t>The local interface SHOULD require the ULP to explicitly configure on
a per-application or per-connection basis when an explicit RTR message will
be required. Piggy-backing the RTR on a Client's first message is a
valuable optimization for most connections.
</t>
<t>The RDMA connection initiator MUST NOT allow any later FULPDUs to be
transmitted before the RTR message.  One method to achieve that is to
delay notifying the ULP that the RDMA connection has been established
until after any required RTR Message has been transmitted.
</t>
<t>All MPA exchanges are performed via TCP prior to RDMA establishment,
 and are therefore signaled via TCP and not via RDMA completion.</t>
</section>
<section title="Enhanced MPA Request/Reply Frames">
<t>Enhanced RDMA Connection Establishment uses an alternate format
for MPA Requests and Replies, as follows:
</t>
<figure>
<artwork>
    0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 0  |                                                               |
    +         Key (16 bytes containing &quot;MPA ID Req Frame&quot;)          +
 4  |      (4D 50 41 20 49 44 20 52 65 71 20 46 72 61 6D 65)        |
    +         Or  (16 bytes containing &quot;MPA ID Rep Frame&quot;)          +
 8  |      (4D 50 41 20 49 44 20 52 65 70 20 46 72 61 6D 65)        |
    +                                                               +
 12 |                                                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 16 |M|C|R|S| Res   |     Rev       |          PD_Length            |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                                                               |
    ~                                                               ~
    ~                   Private Data                                ~
    |                                                               |
    |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
</figure>
<t>
<list style='hanging'>
<t hangText="Key:">
Unchanged from <xref target="RFC5044" />.
</t>
<t hangText="M:">
Unchanged from <xref target="RFC5044" />.
</t>
<t hangText="C:">
Unchanged from <xref target="RFC5044" />.
</t>
<t hangText="R:">
Unchanged from <xref target="RFC5044" />.
</t>
<t hangText="S:">
One if the Private Data begins with the Enhanced RDMA Connection
Establishment Data. Zero otherwise.
</t>
<t hangText="Res:">
One bit smaller than in <xref target="RFC5044" />, otherwise unchanged.
</t>
<t hangText="Rev:">
This field contains the revision of MPA. To use any Enhanced Connection
Establishment feature this MUST be set to two, If no Enhanced Connection
Establishment features are desired it MAY be set to one. A host accepting
MPA connections SHOULD continue to accept MPA Requests with version one
even if it supports version two.
</t>
<t hangText="PD_Length:">
Unchanged from <xref target="RFC5044" />.
This is the total length of the Private Data field, including the Enhanced
RDMA Connection Establishment Data if present.
</t>
<t hangText="Private Data:">
Unchanged from <xref target="RFC5044" />.
However, if the 'S' flag is set, Private Data begins with Enhanced RDMA 
Connection Establishment Data.
</t>
</list>
</t>
</section>
<section title="Enhanced SCTP Session Control Chunks">
<t>The type of the SCTP Session Control Chunk is defined by a Function Code.
<xref target="RFC5043" /> already defines codes for 'DDP Stream Session Initiate' and
'DDP Stream Session Accept', which are equivalent to a MPA
Request Frame and an accepting MPA Reply Frame.
</t>
<t>Enhanced RDMA Connection Establishment requires three additional Function
codes, as follows:
<list style='hanging'>
<t hangText="Enhanced DDP Stream Session Initiate:">0x05</t>
<t hangText="Enhanced DDP Stream Session Accept:">0x06</t>
<t hangText="Enhanced DDP Stream Session Reject:">0x07</t>
</list>
</t>
<t>The Enhanced Reject function code SHOULD be used to indicate a configuration
that would have been accepted.
</t>
<t>It should be noted that <xref target="RFC5043" /> already supports either
side sending the first DDP Message. The Payload Protocol Identifier (PPID)
already distinguishes between Session Establishment and DDP Segments.
</t>
</section>
<section title="Enhanced RDMA Connection Establishment Data">
<figure>
<artwork>
    0                   1                   2                   3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 0  |A|B|        IRD                |C|D|        ORD                |
 4  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


</artwork>
</figure>
<t>
<list style='hanging'>
<t hangText="IRD:">In request: the Initiator requested responder IRD
for the connection. In reply: the depth the Responder will support.
An all ones value (0x3FFF) indicates that automatic negotiation of
the IRD is not desired,
and that the ULP will be responsible for doing this configuration.
</t>
<t hangText="ORD:">In request: the Initiator initial ORD setting for the connection.
In reply: the depth the Responder will support.
An all ones value (0x3FFF) indicates that automatic negotiation of the IRD is not desired,
and that the ULP will be responsible for doing this configuration.</t>
<t hangText="A:">Control Flag for using a zero length ULPDU as the
RTR message.
</t>
<t hangText="B:">Control Flag for using a zero length RDMA Write as the RTR message.
</t>
<t hangText="C:">Control Flag for using a zero length RDMA Read as the RTR message.
</t>
<t hangText="D:">Reserved. Must be sent as zero and ignored when received.
</t>
</list>
</t>
<t>In the MPA Request, the Initiator SHOULD set the A, B and C Control Flags respectively to TRUE
 for each of the options it supports.
</t>
<t>In the MPA Reply, the Control Flag is set for the set of options that the
passive side will accept as an RTR message. This response MUST include all
options that the responder will support without requiring a connection specific
enabling action. For example, if the responder will always unblock an MPA
connection when it receives a zero length MPA Write, it should indicate so
without regard to what was in the MPA Request. Options which require connection
specific enabling actions SHOULD NOT be set unless the corresponding flag was
set in the MPA Request. The respondent MAY choose to limit the number of
modes that it enables.
</t>
<t>If there is no Standard RDMAP Configuration Data in the MPA Reply Frame,
and the Enhanced Connection Establishment version number is used, it
is the equivalent of setting 'A', 'B' and 'C'.</t>
<t>Setting no Control Flags in the MPA Reply indicates that an RDMA Send
message will be required. As this option will require the initiator
ULP to be involved it SHOULD NOT be used unless necessary.</t>
</section>
<section title="Interoperability">
<t>An initiator SHOULD NOT use the Enhanced DDP Connection Establishment formats
or function codes when no enhanced functionality is desired.</t>
<t>A responder SHOULD continue to accept the unenhanced connection requests.</t>
</section>


       <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->

    <?rfc?>

    <section title="IANA Considerations">
      <t>This document has no IANA considerations.</t>
    </section>

    <section title="Security Considerations">
      <t>The security considerations from RFC 5044 apply and the changes
	   in this document do not introduce new security considerations.</t>
    </section>
 
    <section title="Acknowledgements">
      <t>The authors wish to thank Sean Hefty, Dave Minturn, Tom Talpey and David Black
	  for their valuable contributions and review of this document.</t>
    </section>

    <!-- Possibly a 'Contributors' section ... -->
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

<references title="Normative References">
<?rfc include="reference.RFC.2119.xml"?>
<?rfc include="reference.RFC.5043.xml"?>
<?rfc include="reference.RFC.5044.xml"?>
</references>

<references title="Informative References">
<?rfc include="reference.RFC.5040.xml"?>

<reference anchor='OpenMP'>
<front>
<title>Parallel Programming in C with MPI and OpenMP</title>
<author>
<organization>McGraw-Hill</organization>
</author>
<date year='2003' />
</front>

</reference>
<reference anchor='PPMPI'>
<front>
<title>Parallel Programming with MPI</title>
<author>
<organization>Morgan Kaufmann Publishers Inc.</organization>
</author>
<date year='2008' />
</front>
</reference>
<reference anchor='UsingMPI'>
<front>
<title>Using MPI-2: Advanced Features of the Message Passing Interface</title>
<author>
<organization>MIT Press</organization>
</author>
<date year='1999' />
</front>
</reference>
      <reference anchor='VIA' target='http://pllab.cs.nthu.edu.tw/cs5403/Readings/EJB/san_10.pdf' >
      	<front>
      	<title>
      	Virtual Interface Architecture Specification
      	</title>
      	<author>
      	<organization>Compaq, Intel, Microsoft</organization>
      	</author>
		<date year='1997' />
      	</front>
      	</reference>
      	
<reference anchor='DAPL' target='http://www.datcollaborative.org'>
<front>
      	<title>Direct Access Programming Library</title>
      	<author>DAT Collaborative</author>
		<date />
		</front>
		<format type='TXT' octets='94506'
	target='http://www.datcollaborative.org' />

</reference>
      	
<reference  anchor='OFA' target='http://www.openfabrics.org/'>
<front>
	<title>OFA verbs & APIs</title>
	<author>Open Fabrics Alliance</author>
</front>
</reference>
	
<reference anchor='RDMAC' target='http://www.rdmaconsortium.org/home/draft-hilland-iwarp-verbs-v1.0-RDMA.pdf'>
<front>
	<title>RDMA Protocol Verbs Specification (Version 1.0)</title>
<author>
</author>
</front>
</reference>
	
<reference anchor='RDS' target='http://www.openfabrics.org/archives/spring2008sonoma/Tuesday/sonoma_2008_0408%20Oracle.ppt' >
<front>
          <title>Reliable Datagram Socket</title>
<author>
            <organization>Open Fabrics Association</organization>
</author>
	<date year='2008' />
</front>
</reference>
</references>

<!-- Change Log
 V05 2010-11-01  AK	-02 draft, cleaned up typos, formatting and clarify language, Intel author change, Tom's comments
 V04 2010-xx-xx  xx   -01 draft, cleaned up typos, formatting and clarify language
 V03 2010-02-10  AK   -00 draft
 V02 2009-10-05  CB   Citations, MPA Request/Reply Formats
 V01 2009-10-03  CB   Restructure justification
 v00 2009-06-01  AK   Initial version
-->

</back>
</rfc>