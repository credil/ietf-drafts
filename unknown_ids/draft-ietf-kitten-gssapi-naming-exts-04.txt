


KITTEN WORKING GROUP                                         N. Williams
Internet-Draft                                                       Sun
Intended status: Standards Track                            L. Johansson
Expires: September 9, 2009                          Stockholm university
                                                           March 8, 2009


                       GSS-API Naming Extensions
              draft-ietf-kitten-gssapi-naming-exts-04.txt

Status of this Memo

   This Internet-Draft is submitted to IETF in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on September 9, 2009.

Copyright Notice

   Copyright (c) 2009 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents in effect on the date of
   publication of this document (http://trustee.ietf.org/license-info).
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Abstract

   The Generic Security Services API (GSS-API) provides a simple naming
   architecture that supports name-based authorization.  This document



Williams & Johansson    Expires September 9, 2009               [Page 1]

Internet-Draft          GSS-API Naming Extensions             March 2009


   introduces new APIs that extend the GSS-API naming model to support
   name attribute transfer between GSS-API peers.


Table of Contents

   1.      Conventions used in this document  . . . . . . . . . . . .  3
   2.      Introduction . . . . . . . . . . . . . . . . . . . . . . .  3
   3.      Name Attribute Sources and Criticality . . . . . . . . . .  3
   4.      Name Attributes/Values as ACL Subjects . . . . . . . . . .  4
   5.      Mapping Mechanism Facilities to Name Attributes  . . . . .  4
   5.1.    Kerberos V and SPKM Authorization-Data . . . . . . . . . .  5
   5.2.    PKIX Certificate Extensions  . . . . . . . . . . . . . . .  5
   5.2.1.  PKIX EKUs  . . . . . . . . . . . . . . . . . . . . . . . .  6
   5.2.2.  PKIX Certificate Alternative Names . . . . . . . . . . . .  6
   5.2.3.  Other PKIX Certificate Extensions and Attributes . . . . .  6
   5.2.4.  SAML attribute assertions  . . . . . . . . . . . . . . . .  6
   6.      GSS_Display_name_ext() . . . . . . . . . . . . . . . . . .  6
   6.1.    C-Bindings . . . . . . . . . . . . . . . . . . . . . . . .  7
   7.      GSS_Inquire_name() . . . . . . . . . . . . . . . . . . . .  7
   7.1.    C-Bindings . . . . . . . . . . . . . . . . . . . . . . . .  8
   8.      GSS_Get_name_attribute() . . . . . . . . . . . . . . . . .  8
   8.1.    C-Bindings . . . . . . . . . . . . . . . . . . . . . . . .  9
   9.      GSS_Set_name_attribute() . . . . . . . . . . . . . . . . . 10
   9.1.    C-Bindings . . . . . . . . . . . . . . . . . . . . . . . . 11
   10.     GSS_Delete_name_attribute()  . . . . . . . . . . . . . . . 11
   10.1.   C-Bindings . . . . . . . . . . . . . . . . . . . . . . . . 12
   11.     GSS_Export_name_composite()  . . . . . . . . . . . . . . . 12
   11.1.   C-Bindings . . . . . . . . . . . . . . . . . . . . . . . . 13
   12.     GSS_Map_name_to_any()  . . . . . . . . . . . . . . . . . . 13
   12.1.   C-Bindings . . . . . . . . . . . . . . . . . . . . . . . . 13
   13.     GSS_Release_any_name_mapping() . . . . . . . . . . . . . . 14
   13.1.   C-Bindings . . . . . . . . . . . . . . . . . . . . . . . . 15
   14.     IANA Considerations  . . . . . . . . . . . . . . . . . . . 15
   15.     Security Considerations  . . . . . . . . . . . . . . . . . 15
   16.     Normative References . . . . . . . . . . . . . . . . . . . 16
           Authors' Addresses . . . . . . . . . . . . . . . . . . . . 17














Williams & Johansson    Expires September 9, 2009               [Page 2]

Internet-Draft          GSS-API Naming Extensions             March 2009


1.  Conventions used in this document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].


2.  Introduction

   As described in [I-D.GSS-NAMING] the GSS-API's naming architecture
   suffers from certain limitations.  This document proposes concrete
   GSS-API extensions as outlined in [I-D.GSS-NAMING].

   A number of extensions to the GSS-API [RFC2743] and its C Bindings
   [RFC2744] are described herein with the goal of making authorization
   information, and other information that can be modeled as "name
   attributes" available as such to applications.  For example, Kerberos
   V authorization data elements, both, in their raw forms as well as
   mapped to more useful value types, can be made available to GSS-API
   applications through these interfaces.

   The model is that GSS names have attributes.  The attributes of a
   name may be authenticated by the credential whence the name comes, or
   may have been set locally on a GSS name for the purpose of
   "asserting" the attribute during credential acquisition or security
   context exchange.  Name attributes' values are network
   representations thereof (e.g., the actual value octets of the
   contents of an X.509 certificate extension, for example) and are
   intended to be useful for constructing portable access control
   facilities.  Applications may often require language- or platform-
   specific data types, rather than network representations of name
   attributes, so a function is provided to obtain objects of such types
   associated with names and name attributes.


3.  Name Attribute Sources and Criticality

   A given GSS name object's name attributes may be authenticated,
   mapped and/or critical.  These flags are explained below.

   An attribute is 'authenticated' iff there is a secure association
   between the attribute (and its values) and the trusted source of the
   peer credential.  Examples of authenticated attributes are (any part
   of) the signed portion of an X.509 certificate or AD-KDCIssued
   authorization-data elements in Kerberos V Tickets.  Note that the
   fact that an attribute is authenticated does not imply anything about
   the semantics of the attribute nor that the trusted credential source
   authorized any one semantic of the attribute.  Such interpretations



Williams & Johansson    Expires September 9, 2009               [Page 3]

Internet-Draft          GSS-API Naming Extensions             March 2009


   MAY be the result of applying local policy to the attribute.

   That a given name's given attribute is 'mapped' means that it was
   obtained through some mapping mechanism applied to another attribute
   of the name that was not, itself, mapped.  For example, such
   attributes as platform-specific internal identifiers may sometimes be
   mapped from other name attributes.

   Name attributes may be "critical," meaning that applications that do
   not understand them MUST reject security contexts where the peer has
   such unknown, critical attributes.

   [NOTE(leifj): The criticality flag seems to have limited
   applicability in practice.  As written the security context should
   not be established unless all critically marked naming attributes are
   supported and understood.  But what happens if the peer doesn't
   understand naming extensions at all.  It seems more reasonable to
   state that name attribute extensions MUST only be used to as a basis
   for authorization decisions.]

   [NOTE(leifj): The mapped flag also seems to have limited
   applicability in practice - interpretation of the attribute will be
   entierly up to the peer anyway which will need to know much more
   about the attribute than the fact than its value is derived.]


4.  Name Attributes/Values as ACL Subjects

   Some name attributes (e.g., numeric user or group identifiers) may be
   useful as subjects of access control list (ACL) entries, some may not
   (e.g., time of day login restrictions).  The
   GSS_Inquire_name_attribute() function indicates this.

   To facilitate the development of portable applications that make use
   of name attributes to construct and evaluate portable ACLs the GSS-
   API makes name attribute values available in canonical network
   encodings thereof.

   To facilitate the development of platform- or language-specific
   applications that need access to native types of representations of
   name attributes an optional facility is provided,
   GSS_Map_name_to_any().


5.  Mapping Mechanism Facilities to Name Attributes

   [NOTE: This entire section should probably be split into one or more
   separate Internet-Drafts.  It is here in the -00 of this I-D to help



Williams & Johansson    Expires September 9, 2009               [Page 4]

Internet-Draft          GSS-API Naming Extensions             March 2009


   readers understand how to mechanism-specific name attributes would be
   accessed through these GSS-API extensions.]

   Kerberos V [I-D.ietf-krb-wg-kerberos-clarifications] and the Simple
   Public-Key GSS-API Mechanism, SPKM [RFC2025], both support the
   concept and encoding of containers of "authorization-data" as
   described in [I-D.ietf-krb-wg-kerberos-clarifications].

   PKIX [RFC3280] supports a number of authorization-data-like features,
   like Extended Key Usage values (EKUs) and certificate extensions.

   The authorization data can be accessed through the GSS-API name
   attributes facility defined herein.

5.1.  Kerberos V and SPKM Authorization-Data

   Authorization-data non-container elements asserted in Kerberos V AP-
   REQ Authenticators MUST be mapped into *asserted* GSS-API name
   attributes; if not contained in AD-IF-RELEVANT then they MUST be
   mapped into *critical* GSS-API name attributes.  AD-AND-OR
   authorization-data elements MUST be mapped into a single *critical*
   attribute, (TBD).

   Authorization-data included in Kerberos V Tickets that is not
   contained in AD-KDCIssued (with valid signature) MUST be mapped into
   *asserted* GSS-API name attributes.  Conversely, authorization-data
   elements in Kerberos V Tickets contained by AD-KDCIssued MUST be
   mapped into *authenticated* GSS-API name attributes

   As with authorization-data elements in Authenticators, authorization-
   data elements in Tickets not contained in AD-IF-RELEVANT are to be
   mapped to *critical* name attributes, and similarly with AD-AND-OR
   (see above).

   The OIDs for authorization-data elements are to be the authorization-
   data element's 'ad-type' positive integer ID, relative to the base
   OID <TBD> Negative values are reserved for local experiments.  [NOTE:
   what about negative ad-type's?  OID arcs are positive integers... ad-
   type is an Int32, so clearly something can be done.]

5.2.  PKIX Certificate Extensions

   PKI certificate extensions MAY/SHOULD/MUST (see comment above) be
   represented as *authenticated* GSS-API name attributes with the
   _same_ OIDs, and if they be marked critical in the certificate then
   they MUST be mapped as *critical* GSS-API name attributes.
   SubjectAltNames and EKUs, specifically, MUST be represented as
   *authenticated* GSS-API name attributes; see below.  Certificate



Williams & Johansson    Expires September 9, 2009               [Page 5]

Internet-Draft          GSS-API Naming Extensions             March 2009


   extensions MUST be represented as GSS-API name attributes whose OIDs
   are the same as the extensions'

5.2.1.  PKIX EKUs

   Extended Key Usage extensions, specifically, MUST be mapped as
   described above, except that GSS-API name attributes for EKUs MUST
   have NULL values (i.e., zero-length OCTET STRINGs).

   PKI certificate key usages (KUs, but not EKUs), MUST NOT be
   represented as GSS-API name attributes.

5.2.2.  PKIX Certificate Alternative Names

   PKI certificate subjectAltNames MUST be mapped as *authenticated*,
   *non-critical* GSS-API name attributes.

   PKI certificate extensions MUST be represented as *authenticated*
   GSS-API name attributes with the _same_ OIDs, and if they be marked
   critical in the certificate then they MUST be mapped as *critical*
   GSS-API name attributes.

   Extended Key Usage extensions, specifically, MUST be mapped as
   described above, except that GSS-API name attributes for EKUs MUST
   have NULL values (i.e., zero-length OCTET STRINGs).

5.2.3.  Other PKIX Certificate Extensions and Attributes

   Any X.509 certificate extension not covered above SHOULD be
   represented as GSS-AOI name attributes with the OID of the X.509
   extension and with OCTET STRING values containing the encoded value
   of the extension.

5.2.4.  SAML attribute assertions

   Attributes contained in SAML attribute assertions are mapped to GSS-
   API name attributes with OIDs derived from the SAML attributes:

      If the SAML attribute is an OID the same OID is used.

      If the SAML attribute is a URN or a URI then the name MUST be
      mapped to a corresponding OID by means of an IANA registry.


6.  GSS_Display_name_ext()

   Inputs:




Williams & Johansson    Expires September 9, 2009               [Page 6]

Internet-Draft          GSS-API Naming Extensions             March 2009


   o  name NAME,

   o  display_as_name_type OBJECT IDENTIFIER

   Outputs:


   o  major_status INTEGER,

   o  minor_status INTEGER,

   o  display_name STRING

   Return major_status codes:

   o  GSS_S_COMPLETE indicates no error.

   o  GSS_S_UNAVAILABLE indicates that the given name could not be
      displayed using the syntax of the given name type.

   o  GSS_S_FAILURE indicates a general error.

   This function displays a given name using the given name syntax, if
   possible.  This operation may require mapping MNs to generic name
   syntaxes or generic name syntaxes to mechanism-specific name
   syntaxes; such mappings may not always be feasible and MAY be inexact
   or lossy, therefore this function may fail.

6.1.  C-Bindings

   OM_uint32 GSS_Display_name_ext(
     OM_uint32                     *minor_status,
     gss_name_t                    name,
     gss_OID                       display_as_name_type,
     gss_buffer_t                  display_name
   );


7.  GSS_Inquire_name()

   Inputs:


   o  name NAME

   Outputs:





Williams & Johansson    Expires September 9, 2009               [Page 7]

Internet-Draft          GSS-API Naming Extensions             March 2009


   o  major_status INTEGER,

   o  minor_status INTEGER,

   o  name_is_MN BOOLEAN,

   o  mn_mech OBJECT IDENTIFIER,

   o  asserted_attrs SET OF OBJECT IDENTIFIER,

   o  authenticated_attrs SET OF OBJECT IDENTIFIER,

   o  critical_attrs SET OF OBJECT IDENTIFIER,

   o  all_attrs SET OF OBJECT IDENTIFIER,

   Return major_status codes:

   o  GSS_S_COMPLETE indicates no error.

   o  GSS_S_FAILURE indicates a general error.

   This function outputs the sets of attributes of a name, that are
   authenticated, asserted or critical.  It also indicates if a given
   NAME is an MN or not and, if it is, what mechanism it's an MN of.

7.1.  C-Bindings

   OM_uint32 gss_inquire_name(
     OM_uint32                     *minor_status,
     gss_name_t                    name,
     int                           name_is_MN,
     gss_OID                       *MN_mech,
     gss_OID_set                   *authenticated,
     gss_OID_set                   *asserted,
     gss_OID_set                   *critical,
     gss_OID_set                   *all_attrs
   );


8.  GSS_Get_name_attribute()

   Inputs:


   o  name NAME,

   o  attr OBJECT IDENTIFIER



Williams & Johansson    Expires September 9, 2009               [Page 8]

Internet-Draft          GSS-API Naming Extensions             March 2009


   Outputs:


   o  major_status INTEGER,

   o  minor_status INTEGER,

   o  authenticated BOOLEAN, -- TRUE iff authenticated by the trusted
      peer credential source.

   o  negative BOOLEAN,

   o  mapped BOOLEAN,

   o  critical BOOLEAN,

   o  values SET OF OCTET STRING,

   o  display_values SET OF STRING

   Return major_status codes:

   o  GSS_S_COMPLETE indicates no error.

   o  GSS_S_UNAVAILABLE indicates that the given attribute OID is not
      known or set.

   o  GSS_S_FAILURE indicates a general error.

   This function outputs the value(s) associated with a given GSS name
   object for a given name attribute.

   NOTE: This function relies on the GSS-API notion of "SET OF" allowing
   for order preservation; this has been discussed on the KITTEN WG
   mailing list and the consensus seems to be that, indeed, that was
   always the intention.  It should be noted however that the order
   presented does not always reflect an underlying order of the
   mechanism specific source of the attribute values.

8.1.  C-Bindings

   The C-bindings of GSS_Get_name_attribute() requires one function call
   per-attribute value, for multi-valued name attributes.  This is done
   by using a single gss_buffer_t for each value and an input/output
   integer parameter to distinguish initial and subsequent calls and to
   indicate when all values have been obtained.

   The 'more' input/output parameter should point to an integer variable



Williams & Johansson    Expires September 9, 2009               [Page 9]

Internet-Draft          GSS-API Naming Extensions             March 2009


   whose value, on first call to gss_name_attribute_get() MUST be -1,
   and whose value upon function call return will be non-zero to
   indicate that additional values remain, or zero to indicate that no
   values remain.  The caller should not modify this parameter after the
   initial call.

   OM_uint32 gss_get_name_attribute(
     OM_uint32                     *minor_status,
     gss_name_t                    name,
     gss_OID                       attr,
     int                           *authenticated,
     int                           *negative,
     int                           *mapped,
     int                           *critical,
     gss_buffer_t                  value,
     gss_buffer_t                  display_value,
     int                           *more
   );


9.  GSS_Set_name_attribute()

   Inputs:


   o  name NAME,

   o  critical BOOLEAN,

   o  negative BOOLEAN,

   o  attr OBJECT IDENTIFIER,

   o  values SET OF OCTET STRING

   Outputs:


   o  major_status INTEGER,

   o  minor_status INTEGER

   Return major_status codes:

   o  GSS_S_COMPLETE indicates no error.

   o  GSS_S_UNAVAILABLE indicates that the given attribute OID is not
      known or could not be set.



Williams & Johansson    Expires September 9, 2009              [Page 10]

Internet-Draft          GSS-API Naming Extensions             March 2009


   o  GSS_S_FAILURE indicates a general error.

   NOTE: This function relies on the GSS-API notion of "SET OF" allowing
   for order preservation; this has been discussed on the KITTEN WG
   mailing list and the consensus seems to be that, indeed, that was
   always the intention.  It should be noted that underlying mechanisms
   may not respect the given order.

9.1.  C-Bindings

   The C-bindings of GSS_Set_name_attribute() requires one function call
   per-attribute value, for multi-valued name attributes -- each call
   adds one value.  To replace an attribute's every value delete the
   attribute's values first with GSS_Delete_name_attribute().

   OM_uint32 gss_set_name_attribute(
     OM_uint32                     *minor_status,
     gss_name_t                    name,
     int                           critical,
     int                           negative,
     gss_OID                       attr,
     gss_buffer_t                  value
   );


10.  GSS_Delete_name_attribute()

   Inputs:


   o  name NAME,

   o  attr OBJECT IDENTIFIER,

   Outputs:


   o  major_status INTEGER,

   o  minor_status INTEGER

   Return major_status codes:

   o  GSS_S_COMPLETE indicates no error.

   o  GSS_S_UNAVAILABLE indicates that the given attribute OID is not
      known.




Williams & Johansson    Expires September 9, 2009              [Page 11]

Internet-Draft          GSS-API Naming Extensions             March 2009


   o  GSS_S_UNAUTHORIZED indicates that a forbidden delete operation was
      attempted eg deleting a negative attribute.

   o  GSS_S_FAILURE indicates a general error.

   Deletion of negative authenticated attributes from NAME objects MUST
   NOT be allowed and must result in a GSS_S_UNAUTHORIZED.

10.1.  C-Bindings

   OM_uint32 gss_delete_name_attribute(
     OM_uint32                     *minor_status,
     gss_name_t                    name,
     gss_OID                       attr
   );


11.  GSS_Export_name_composite()

   Inputs:


   o  name NAME

   Outputs:


   o  major_status INTEGER,

   o  minor_status INTEGER,

   o  exp_composite_name OCTET STRING

   Return major_status codes:

   o  GSS_S_COMPLETE indicates no error.

   o  GSS_S_FAILURE indicates a general error.

   This function outputs a token which can be imported with
   GSS_Import_name(), using GSS_C_NT_COMPOSITE_EXPORT as the name type
   and which preserves any name attribute information associated with
   the input name (which GSS_Export_name() may well not).  The token
   format is no specified here as this facility is intended for inter-
   process communication only; however, all such tokens MUST start with
   a two-octet token ID, hex 04 02, in network byte order.

   The OID for GSS_C_NT_COMPOSITE_EXPORT is <TBD>.



Williams & Johansson    Expires September 9, 2009              [Page 12]

Internet-Draft          GSS-API Naming Extensions             March 2009


11.1.  C-Bindings

   OM_uint32 gss_export_name_composite(
     OM_uint32                     *minor_status,
     gss_name_t                    name,
     gss_buffer_t                  exp_composite_name
   );


12.  GSS_Map_name_to_any()

   Inputs:


   o  name NAME,

   o  authenticated BOOLEAN, -- if TRUE only authenticated attributes
      will be included

   o  type_id OBJECT IDENTIFIER

   Outputs:


   o  major_status INTEGER,

   o  minor_status INTEGER,

   o  output ANY DEFINED BY type_id

   Return major_status codes:

   o  GSS_S_COMPLETE indicates no error.

   o  GSS_S_UNAVAILABLE indicates that the mapping or conversion could
      not be done.  The minor status code may provide additional
      information.

   o  GSS_S_FAILURE indicates a general error.  The minor status code
      may provide additional information.

   Whereas name attribute's values are encoded in some network
   representation applications often require native, language- and/or
   platform-specific data types.  This function provides access to such
   types.

12.1.  C-Bindings




Williams & Johansson    Expires September 9, 2009              [Page 13]

Internet-Draft          GSS-API Naming Extensions             March 2009


   typedef struct gss_any *gss_any_t;
   OM_uint32 gss_map_name_to_any(
     OM_uint32                     *minor_status,
     gss_name_t                    name,
     int                           authenticated,
     gss_OID                       type_id,
     gss_any_t                     output
   );

   Note the new C bindings type, gss_any_t.  We define it as a pointer
   to an incompletely declared struct.


13.  GSS_Release_any_name_mapping()

   Inputs:


   o  name NAME,

   o  type_id OBJECT IDENTIFIER,

   o  input ANY DEFINED BY type_id

   Outputs:


   o  major_status INTEGER,

   o  minor_status INTEGER,

   Return major_status codes:

   o  GSS_S_COMPLETE indicates no error.

   o  GSS_S_UNAVAILABLE indicates that the mapping or conversion could
      not be done.  The minor status code may provide additional
      information.

   o  GSS_S_FAILURE indicates a general error.  The minor status code
      may provide additional information.

   This function releases, if possible, the objects of language- and/or
   platform-specific types output by GSS_Map_name_to_any().  If such
   types have native release functions applications MAY use either those
   or this function to release the given object.

13.1.  C-Bindings



Williams & Johansson    Expires September 9, 2009              [Page 14]

Internet-Draft          GSS-API Naming Extensions             March 2009


   typedef struct gss_any *gss_any_t;
   OM_uint32 gss_release_any_name_mapping(
     OM_uint32                     *minor_status,
     gss_name_t                    name,
     gss_OID                       type_id,
     gss_any_t                     *input
   );


14.  IANA Considerations

   This document creates a namespace of GSS-API name attributes.
   Attributes are named by OID, so no single authority might be needed
   for allocation, however, in the interest of providing the community
   with an authority for name attribute OID allocation and a way to find
   the existing set of name attributes, the IANA should establish both,
   a single OID off of which name attributes could be allocated, and a
   registry of known GSS name attributes.

   GSS-API name attribute registry entries should contain all the
   information that GSS_Inquire_name_attribute() may return about the
   given name attributes and their OIDs:

   o  a name attribute OID (this is a unique key)

   o  a name attribute symbolic name, starting with "GSS_C_NA_" (this is
      a unique key)

   o  a brief description, in English

   o  whether the attribute is useful as the subject of access control
      list entries

   o  whether the attribute is useful as an indicator of trust

   o  an optional normative reference to documentation for the given
      name attribute

   The allocation and registration policy should be first come, first
   served.  Registry entries' OIDs need not be based on the base OID
   given above.


15.  Security Considerations

   This document extends the GSS-API naming model to include support for
   name attributes.  The intention is that name attributes are to be
   used as a basis for (among other things) authorization decisions or



Williams & Johansson    Expires September 9, 2009              [Page 15]

Internet-Draft          GSS-API Naming Extensions             March 2009


   application personalization for applications relying on GSS-API
   security contexts.

   The security of the application may be critically dependent on the
   security of the attributes.  This document classifies attributes as
   asserted or authenticated.  Only authenticated attributes MUST be
   used if the attribute has security implications for the application
   (eg authorization decisions) since asserted attributes may easily be
   controlled by the peer directly.

   It is important to understand the meaning of 'authenticated' in this
   setting.  It does not mean that any semantic of the attribute is
   claimed to be true.  The only implication is that a trusted third
   party has asserted the attribute as opposed to the attribute being
   asserte by the peer itself.  Any additional semantics is always the
   result of applying policy.  For instance in a given deployment the
   mail attribute of the subject may be authenticated and sourced from
   an email system where 'correct' values are kept.  In another setting
   users may be allowed to modify their mail addresses freely.  In both
   cases the 'mail' attribute may be authenticated by virtue of being
   included in signed SAML attribute assertions lor by other means
   authenticated by the underlying mechanism.

   When the underlying security mechanism does not provide a permanent
   unique identity (eg anonymous kerberos) the GSS-API naming extensions
   may be used to provide a replacement permanent unique identity
   attribute which in this case may be unique for each relying party.
   This is analogous to the Liberty Alliance targetedID attribute and
   has similar security implications.


16.  Normative References

   [I-D.GSS-NAMING]
              Hartman, S., "Desired Enhancements to GSSAPI Naming",
              draft-ietf-kitten-gss-naming-01.txt (work in progress),
              February 2005.

   [I-D.ietf-krb-wg-kerberos-clarifications]
              Neuman, C., "The Kerberos Network Authentication Service
              (V5)", draft-ietf-krb-wg-kerberos-clarifications-07 (work
              in progress), September 2004.

   [RFC0854]  Postel, J. and J. Reynolds, "Telnet Protocol
              Specification", STD 8, RFC 854, May 1983.

   [RFC1035]  Mockapetris, P., "Domain names - implementation and
              specification", STD 13, RFC 1035, November 1987.



Williams & Johansson    Expires September 9, 2009              [Page 16]

Internet-Draft          GSS-API Naming Extensions             March 2009


   [RFC2025]  Adams, C., "The Simple Public-Key GSS-API Mechanism
              (SPKM)", RFC 2025, October 1996.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2203]  Eisler, M., Chiu, A., and L. Ling, "RPCSEC_GSS Protocol
              Specification", RFC 2203, September 1997.

   [RFC2478]  Baize, E. and D. Pinkas, "The Simple and Protected GSS-API
              Negotiation Mechanism", RFC 2478, December 1998.

   [RFC2623]  Eisler, M., "NFS Version 2 and Version 3 Security Issues
              and the NFS Protocol's Use of RPCSEC_GSS and Kerberos V5",
              RFC 2623, June 1999.

   [RFC2743]  Linn, J., "Generic Security Service Application Program
              Interface Version 2, Update 1", RFC 2743, January 2000.

   [RFC2744]  Wray, J., "Generic Security Service API Version 2 :
              C-bindings", RFC 2744, January 2000.

   [RFC3008]  Wellington, B., "Domain Name System Security (DNSSEC)
              Signing Authority", RFC 3008, November 2000.

   [RFC3280]  Housley, R., Polk, W., Ford, W., and D. Solo, "Internet
              X.509 Public Key Infrastructure Certificate and
              Certificate Revocation List (CRL) Profile", RFC 3280,
              April 2002.

   [RFC3530]  Shepler, S., Callaghan, B., Robinson, D., Thurlow, R.,
              Beame, C., Eisler, M., and D. Noveck, "Network File System
              (NFS) version 4 Protocol", RFC 3530, April 2003.


Authors' Addresses

   Nicolas Williams
   Sun Microsystems
   5300 Riata Trace Ct
   Austin, TX  78727
   US

   Email: Nicolas.Williams@sun.com


   Leif Johansson
   Stockholm university



Williams & Johansson    Expires September 9, 2009              [Page 17]

Internet-Draft          GSS-API Naming Extensions             March 2009


   Avdelningen foer IT och Media
   Stockholm  SE-106 91

   Email: leifj@it.su.se
   URI:   http://people.su.se/~leifj/














































Williams & Johansson    Expires September 9, 2009              [Page 18]

