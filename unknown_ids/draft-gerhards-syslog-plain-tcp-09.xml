<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes" compact="yes" symrefs="yes" ?>
<rfc ipr="trust200902" category="info" docName="draft-gerhards-syslog-plain-tcp-09.txt">
	<front>
		<title>Transmission of Syslog Messages over TCP</title>
		<author initials="R" surname="Gerhards" fullname="Rainer Gerhards">
			<organization>Adiscon GmbH</organization>
			<address>
				<postal>
					<street>Mozartstrasse 21</street>
					<city>Grossrinderfeld</city>
					<region>BW</region>
					<code>97950</code>
					<country>Germany</country>
				</postal>
				<email>rgerhards@adiscon.com</email>
			</address>
		</author>

		<author initials="C" surname="Lonvick" fullname="Chris Lonvick">
			<organization>Cisco Systems, Inc</organization>
			<address>
				<postal>
					<street>12515 Research Blvd.</street>
					<city>Austin</city>
					<region>TX</region>
					<code>78759</code>
					<country>USA</country>
				</postal>
				<email>clonvick@cisco.com</email>
			</address>
		</author>

		<date month="July" year="2011" />

		<keyword>SYSLOG</keyword>
		<keyword>SYSLOG transport TCP</keyword>

		<abstract>
		<t>
		There have been many implementations and deployments of legacy syslog over TCP for many 
		years.  That protocol has evolved without being standardized and has proven to be quite 
		interoperable in practice.  The aim of this specification is to explain how TCP has been 
		used as a transport for syslog messages.
		</t>
		</abstract>
	</front>

	<middle>
		<section anchor="intro" title="Introduction">
		<t>
		Historically, the <xref target="RFC3164">syslog protocol</xref> has been run over UDP.
		This has been replaced with the <xref target="RFC5424">standardized syslog protocol</xref>
		in which the <xref target="RFC5425">TLS transport</xref> is required.  Even so, there are 
		many instances of syslog running atop TCP <xref target="RFC0793" />.  
		</t>
		<t>
		Two primary format options have been observed with legacy 
		syslog being transported over TCP.  These have been called octet-stuffing and 
		octet-counting.  The octet-stuffing mechanism has some inherent problems.
		</t>
		<t>
		Diagram 1 shows how all of these syslog transports relate to each other.
		In this diagram three originators are seen, labeled A, B, and C, along with one collector.
		Originator A is using the TCP transport which is described in this document.  Originator
		B is using the UDP transport which is described in <xref target="RFC5426" />.  Originator
		C is using the TLS transport which is described in <xref target="RFC5425" />.  The 
		collector is shown with the capability to accept all three transports.
		</t>
                <figure>
		<artwork><![CDATA[
 +---------------------+
 | Originator A        |
 |---------------------|
 |  syslog application |
 |                     |
 |---------------------|
 |  syslog transport   |
 |        TCP          |
 |---------------------|
           v
           |
          /                            +---------------------+
         /                             | Originator B        |
        /                              |---------------------|
       /   +----------------------+    |  syslog application |
      /    | Collector            |    |                     |
     |     |----------------------|    |---------------------|
     |     |  syslog application  |    |  syslog transport   |
     |     |                      |    |        UDP          |
     |     |----------------------|    |---------------------|
     |     |  syslog transport    |              v
     |     |  TCP |  TLS  |  UDP  |              |
     |     |----------------------|              |
     |         ^      ^       ^                  |
     |         |      |       |                  |
     \         /      |       \                  /
      ---------       |        ------------------ 
                      |
                      |
                      |     +---------------------+
                      |     | Originator C        |
                      |     |---------------------|
                      |     |  syslog application |
                      |     |                     |
                      |     |---------------------|
                      |     |  syslog transport   |
                      |     |        TLS          |
                      |     |---------------------|
                      |               v
                      \               /
                       --------------- 

             Diagram 1.  Syslog Layers
                        ]]></artwork>
        </figure>

		</section>


		<section anchor="conventions" title="Conventions Used in This Document">
			<t>
			The terminology defined in Section 3 of <xref target="RFC5424" /> is
			used throughout this specification.  The reader should be familiar with
			that to follow this discussion.
			</t>
			<t>
			This document also references devices that use the syslog message format
			as described in <xref target="RFC3164" />.  Devices that continue to use that 
			message format (regardless of transport) will be described as &quot;legacy
			syslog devices&quot;.  Similarly, devices that use the 
			message format as described in <xref target="RFC5424" /> will be described
			as &quot;standardized syslog devices&quot;.
			</t>
		</section>
		
		<section anchor="using" title="Message Transmission">
			<t>
			Syslog is simplex in nature.  It has been observed that implementations of syslog over 
			TCP also do not use any backchannel mechanism to convey information to the transport 
			sender, and consequently do not use any application-level acknowledgement for syslog 
			receiver to sender signaling.  Message receipt acknowledgement, reliability, and flow 
			control are provided by the capabilities of TCP.
			</t>
		<section anchor="session" title="Session">
			<t>
			A syslog over TCP session is a TCP connection between a syslog transport sender
			and a syslog transport receiver.  The syslog transport sender is the TCP host that
			initiates the TCP session.  After initiation, messages are sent from the transport
			sender to the transport receiver.  No application-level data is transmitted
			from the transport receiver to the transport sender.  The roles of transport
			sender and receiver seem to be fixed once the session is established.
			</t>
			<t>
			If an error occurs that cannot be corrected by TCP, the host detecting the error  
			gracefully closes the TCP session.  There have been no application level messages seen
			that were
			sent to notify the other host about the state of the host syslog application.
			</t>
		</section>
		<section anchor="sessionInit" title="Session Initiation">
			<t>
			The TCP host that intends to act as a syslog transport receiver listens to TCP port 
			&lt;TBD&gt;.  The TCP host that intends to act as the transport sender initiates a 
			TCP session to the syslog transport receiver as specified in <xref target="RFC0793" />.  
			</t>
		</section>
		<section anchor="msgxfer" title="Message Transfer">
			<t>
			Syslog over TCP has been around for a number of years.  Just like legacy syslog over 
			UDP, different implementations exist.  The older method of octet-stuffing has 
			problems.  The newer method of octet-counting is reliable and is usually preferred.
			</t>
			<t>
			In both of these methods, during the message transfer phase, the syslog transport 
			sender sends a stream of messages to the transport receiver.  These are sent in 
			sequence and one message is encapsulated inside each TCP frame.  Either of the TCP 
			hosts may initiate session closure at any time as specified in Section 3.5 
			of <xref target="RFC0793" />.  In practice, this is often seen
			after a prolonged period of inactivity.
			</t>
			<section anchor="octcount" title="Octet Counting">
				<t>
                This framing allows for the transmission of all characters inside a syslog message
                and is similar to the method used in <xref target="RFC5425" />. 
				A transport receiver uses the defined message length to
				delimit a syslog message.  As noted in <xref target="RFC3164" /> the upper 
				limit for a legacy syslog message length is 1024 octets.  That length has been
				expanded for standardized syslog.
				</t>
				<t>
				It can be assume that octet-counting framing is used
				if a syslog frame starts with a digit.
				</t>
				<t>
				All syslog messages can be considered to be TCP "data" as per 
				<xref target="RFC0793">Transmission Control Protocol</xref>.
				The syslog message stream has the following <xref target="RFC5234">ABNF</xref>
				definition:
				<figure>
				<artwork><![CDATA[
    TCP-DATA = *SYSLOG-FRAME

    SYSLOG-FRAME = MSG-LEN SP SYSLOG-MSG   ; Octet-counting method

    MSG-LEN = NONZERO-DIGIT *DIGIT

    SP = %d32

    NONZERO-DIGIT = %d49-57

    DIGIT = %d48 / NONZERO-DIGIT

    SYSLOG-MSG is defined in the syslog protocol [RFC5424] and may
               also be considered to be the payload in [RFC3164]

				]]></artwork>
				</figure>
				</t>
				<t>
				MSG-LEN is the octet count of the SYSLOG-MSG in the SYSLOG-FRAME.
				</t>
			</section>
			<section anchor="octstuff" title="Octet Stuffing">
			<t>
			The octet stuffing method inserts a syslog message into a frame and terminates it 
			with a TRAILER character.  The TRAILER has usually been a single
			character and most often is USASCII LF (%d10).  However, other characters have also 
			been seen, with USASCII NUL (%d00) being a prominent example.  Some devices have also
			been seen to emit a two-character TRAILER, which is usually CR and LF.  
			</t>
			<t>
			The problem with octet-stuffing framing comes from the use of a TRAILER character.
			In that, the traditional trailer character
			is not escaped within the message which causes problems for the receiver.  
			For example, a message in the style of <xref target="RFC3164" />
			containing one or more LF characters may
			be misinterpreted as multiple messages by the receiving syslog application.
			</t>

				<t>
				The ABNF for this is shown here:
                        <figure>
                        <artwork><![CDATA[
    TCP-DATA = *SYSLOG-FRAME

    SYSLOG-FRAME = SYSLOG-MSG TRAILER     ; Octet-stuffing method

    TRAILER = LF | APP-DEFINED

    LF = %d10

    APP-DEFINED = 1*2OCTET

    SYSLOG-MSG is defined in the syslog protocol [RFC5424] and may
               also be considered to be the payload in [RFC3164]

                        ]]></artwork>
                        </figure>
				</t>
				<t>
				A transport receiver can assume that octet-stuffing framing is used if a syslog 
				frame starts with the USASCII character "&lt;" (%d60).
				</t>
			</section>
			<section anchor="change" title="Method Change">
				<t>
				It has been observed in legacy implementations that the framing may change on a 
				frame-by-frame basis.  This is probably not a good idea, but it's been seen.  
				</t>
			</section>
		</section>
		<section anchor="sessionClose" title="Session Closure">
			<t>
			The SYSLOG session is closed when one of the TCP hosts decides to do so.  It then 
			initiates a local TCP session closure.  Following <xref target="RFC0793">TCP</xref> 
			it doesn't need to notify the remote TCP host of its intention to close the session, 
			nor does it accept any messages that are still in transit.
			</t>
		</section>
		</section>
		<section anchor="appst" title="Applicability Statement">
			<t>
			As per the standards track documents in the syslog series, it is recommended to use 
			the <xref target="RFC5425">TLS transport</xref> to transport syslog messages.  This 
			document is provided to document what has been seen in hopes that interoperability 
			for transporting syslog over TCP may be achieved.
			</t>
			<t>
			There are several advantages to using TCP: flow control, error recovery, and 
			reliability, to name a few.  These reasons and the ease of programming have lead 
			people to use this transmission protocol to transmit syslog.
			</t>
			<t>
			One potential disadvantage is the buffering mechanism used by TCP.  Ordinarily, TCP 
			decides when enough data has been received from the application to form a segment for 
			transmission.  This may be adjusted through timers but still, some application data 
			may wait in a buffer for a relatively long time.  Syslog data is not normally 
			time-sensitive but if this delay is a concern, the syslog transport sender may utilize 
			the PUSH Flag as described in <xref target="RFC0793" /> to have the sending TCP 
			immediately send all buffered data.
			</t>
		</section>

		<section anchor="security" title="Security Considerations">
			<t>
			Even though it is recommended to use the <xref target="RFC5425">TLS transport</xref> to
            convey syslog messages, it is expected that people will still use the TCP transport. 
			</t><t>
			Several syslog security considerations are discussed in <xref target="RFC5424" />.
			This section focuses on security considerations specific to the syslog transport over 
			TCP.  Some of the security issues raised in this section can be mitigated through the 
			use of TLS as defined in <xref target="RFC5425" />
			</t>
			<t>
			It should be noted that the syslog transport specified in this document does not use 
			application-layer acknowledgments.  TCP uses retransmissions to provide protection 
			against some forms of data loss.  However, if the TCP connection is broken for some 
			reason (or closed by the transport receiver), the syslog transport sender cannot 
			always know what messages were successfully delivered to the syslog application at 
			the other end.
			</t>
			<t>
			Implementors should be aware of vulnerabilities in the transport layer that they 
			choose.  In some cases, these vulnerabilities will be in the implementation, such as 
			in the case of the UDP checksum error <xref target="RFC1122" />.  In other cases, the 
			vulnerability will be in the specification, such as in the case of the SSL/TLS 
			renegotiation as described in <xref target="RFC5746" />.  Specific to this transport, 
			implementers may wish to review any known vulnerabilities of TCP prior to writing code.
			A good start to this investigation may be found in an article by Steve Bellovin in the 
			Association for Computing Machinery (ACM) publication <xref target="Bellovin" />.
			</t>
		</section>


<section anchor="iana" title="IANA Considerations">
	<t>
	IANA is requested to provide a TCP port for this protocol.
	</t>
	<t>
	After that port has been assigned, this section will be revised to 
	list that port.
	</t>

</section>

		<section anchor="acks" title="Acknowledgments">
			<t>
			The authors wish to thank David Harrington, Tom Petch, Richard Graveman,
			and all other people who commented on various versions of this proposal.
			</t>
		</section>

		<section anchor="NoteToEditor" title="Notes to the RFC Editor and Change Log">
			<t>
				These are notes to the RFC editor. Please delete this section
				after the notes have been followed.
			</t>
			   <t>
			   Please replace the instances of &lt;TBD> with the port number assigned by IANA.
			   </t>
			<t>
			Version -09 was put together based on IESG member feedback.
			The appendixes were removed and things were consolidated to be more appropriate for
			an informational document.  
			It was submitted in August of 2011.
			Dan Romascanu is actually the IESG member who will watch this document.
			</t>
			<t>
			Version -08 included a reference to vulnerabilities of TCP.  It was submitted in 
			February of 2011.
			</t>
			<t>
			Version -07 was submitted in January, 2011.  This clarified what was really expected 
			from what was optional.  Appendix B was added for further clarification.  
			Additionally, the security Considerations section was edited to include a discussion 
			about transport layer issues.
			</t>
			<t>
			Version -06 was submitted in October, 2010.  The 2119 language was removed.  Also, we
			compared notes and couldn't find any implementations that stacked multiple messages
			in a frame in the octet-counting method.  That paragraph was removed.
			</t>
			<t>
			Version -05 was submitted in September, 2010 to address some items that David 
			Harrington noted as he is becoming the document shepherd.
			</t>
			<t>
			Version -04 was submitted in April, 2010 to clean up some items.
			</t>
			<t>
			Version -03 was submitted in April, 2010 based upon further review comments from 
			Tom Petch.
			</t>
			<t>
			Version -02 was submitted in March, 2010 based upon review comments from Tom Petch.
			</t>
			<t>
			Version -01 was submitted based upon review comments from David Harrington.
			</t>
			<t>
			Version -00 was created in November, 2009.
			</t>
		</section>


	</middle>

	<back>
		<references title="Normative">
			<?rfc include="reference.RFC.0793" ?>
			<?rfc include="reference.RFC.5234" ?>
			<?rfc include="reference.RFC.5424" ?>
			<?rfc include="reference.RFC.5425" ?>
			<?rfc include="reference.RFC.5426" ?>
		</references>
		<references title="Informative">
			<?rfc include="reference.RFC.1122" ?>
			<?rfc include="reference.RFC.3164" ?>
			<?rfc include="reference.RFC.5746" ?>
			<?rfc include="reference.ACM.Bellovin" ?>
		</references>
	</back>
</rfc>
