<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [


    <!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
    <!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
    <!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
    <!ENTITY RFC4055 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4055.xml">    
    <!ENTITY RFC5280 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml">
    <!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="exp" docName="draft-hallambaker-donotissue-00" ipr="noModificationTrust200902">

    <front>


        <title abbrev="Certification Authority Authorization">DNS Certification Authority Authorization (CAA) Resource Record</title>
        <author fullname="Phillip Hallam-Baker" initials="P. M." surname="Hallam-Baker">
            <organization>Comodo Group Inc.</organization>
            <address>
                <email>philliph@comodo.com</email>
            </address>
        </author>
        <author fullname="Rob Stradling" initials="R." surname="Stradling">
            <organization>Comodo CA, Ltd.</organization>
            <address>
                <email>rob.stradling@comodo.com</email>
            </address>
        </author>
        <date month="October" year="2010" />

        <area>General</area>

        <workgroup>Internet Engineering Task Force</workgroup>

        <keyword>DNS</keyword>


        <abstract>
            <t>
                The Certification Authority Authorization (CAA) DNS Resource Record allows a
                DNS domain name holder to specify the certificate signing certificate(s)
                authorized to issue certificates for that domain.
                CAA resource records allow a public Certification Authority to implement additional
                controls to reduce the risk of unintended certificate mis-issue. In
                additon, the CAA mechanism may be extended in future revisions to
                allow for use client enforcement of issuing restrictions.
            </t>
        </abstract>
    </front>

    <middle>
        <section title="Definitions">
            <section title="Requirements Language">
                <t>
                    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
                    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
                    document are to be interpreted as described in <xref target="RFC2119">RFC 2119</xref>.
                </t>
            </section>
        </section>
        <section title="Requirements">
            <t>
                The Certification Authority Authorization (CAA) DNS Resource Record allows a
                DNS domain name holder to specify the certificate signing certificate(s)
                authorized to issue certificates for that domain.
                CAA resource records allow a public Certification Authority (CA) to implement additional
                controls to reduce the risk of unintended certificate mis-issue.
            </t>
            <t>
                Before issuing a certificate, a PKIX CA is required to validate the 
                request according to the policies set out in its Certificate Policy 
                Statement. In the case of a public CA that validates certificate requests
                as a third party, the certificate will be typically issued under 
                a public root certificate embedded in one or more relevant reliant applications.
            </t>
            <t>
                Criteria for inclusion of embedded root certificates in applications 
                are outside the scope of this document but typically require the CA to publish a 
                Certificate Practices Statement (CPS) that specifies how the requirements
                of the Certificate Policy (CP) are achieved and provide an annual
                audit statement of their performance against their CPS performed by
                an independent third party auditor.
            </t>
            <t>
                It is the intention of the authors to propose the CAA record defined
                in this document as the basis for CA validation requirements to be
                proposed in organizations that publish validation requirements such
                as the CA-Browser forum. 
            </t>
            <section title="The CAA RR type">
                <t>
                    A CAA RR consists of a sequence of properties. The following
                    properties are defined:
                    
                </t>
                <t>
                    <list style="hanging">
                        <t hangText="dauth">
                        Identifies authorized issuers or end entity certificates by means of 
                        an Object Digest Identifier
                        </t>
                        <t>An issuer is identified by means of an Object Digest Identifier
                        that corresponds to a certificate signing certificate under which 
                        the issuer is authorized to issue certificates. An end entity certificate
                        is identified by the digest of the certificate itself.
                        </t>
                        <t hangText="pauth">
                            Identifies authorized issuers or end entity certificates
                            by means of a PKIX certificate policy OID.</t>
                        <t>
                        A pauth property states that an issuer is authorized to issue
                        certificates for the corresponding domain that contain a 
                        policy OID within the specified polic arc, provided that this 
                        is consitent with both 
                        the CPS of the issuer and the requirements of the specified policy.
                        </t>
                        <t hangText="app">Is used to inform clients that they MAY 
                        or MUST NOT use information in the CAA record to enforce
                        CA issuing restrictions at the application level. </t>
                    </list>
                </t>
                <t>
                    Authorization to act as an issuer for a domain does not entail
                    authorization to issue a certificate in response to a specific
                    request. An authorized issuer MUST comply with the requirements
                    of its Certificate Policy and Certificate Practices Statement 
                    regardless of whether a CAA record is specified in a corresponding 
                    DNS domain or not.
                </t>
                <t>
                    The authorizations specified in the dauth and pauth properties are
                    additive. If multiple authorization properties are specified it is
                    sufficient for a single authorization property to match. If no
                    authorization property grants an issuer authorization, an issuer is 
                    not authorized and MUST NOT issue a certificate for that domain.
                </t>


                <t>
                    For efficiency, certificates are identified in the dauth property
                    by means of an
                    Object Digest Identifier, a triple consisting of an ASN.1
                    object identifier specifying the type of the referenced object,
                    an ASN.1 object identifier specifying a digest algorithm
                    and the digest value obtained by applying the specified
                    digest algorithm to the referenced object.
                </t>


            </section>
            <section title="Certification Authority Processing">
                <t>
                    Before issue of a certificate a compliant CA MUST check for publication
                    of a relevant CAA Resource Record and if a record is published that 
                    the certificate requested is consistent with it. If the  certificate 
                    requested is not consistent with the CAA RR authorization, the CA MUST 
                    NOT issue the certificate.
                </t>
                <t>
                    A certificate request is consistent with a relevant CAA Resource Record 
                    if and only if a valid certificate chain can be formed that: 
                </t>
                <t>
                    <list>
                        <t>
                            Includes the certificate to be issued as an end entity certificate.
                        </t>
                        <t>
                            Contains at least one certificate specified as the object digest
                            identifier value in an auth property.
                        </t>
                    </list>
                </t>
                <t>
                    Note that while it MUST be possible to form a certificate validation path
                    that contains at least one certificate that is so specified, it MAY also be 
                    possible to form valid certificate paths that are not.
                </t>
                <t>
                    For example, a CA that has updated its root certificate to extend the
                    expiry date is entitled to issue certificates for domains where the
                    CAA record only specifies the older root certificate provided that the 
                    older root certificate has not actually expired and it is thus possible 
                    to form a valid certificate path.
                </t>
                <section title="Corresponding Domain Name">
                    <t>
                        A CA MUST observe constraints published in a CAA record corresponding
                        to any domain name specified as a subject name or subjectAltName
                        in the requested certificate.
                    </t>
                    <t>
                        A CA MUST observe constraints published in any CAA record that
                        corresponds to a public DNS domain name issuing point for any
                        domain name superior in the DNS hierarchy to any domain name 
                        specified as a subject name or subjectAltName
                        in the requested certificate.
                    </t>
                    <t>
                        For example, if a certificate is for an SSL server for the domain
                        name www.example.com the CA MUST observe the constraints of 
                        any CAA record published at www.example.com and observe
                        the constraints of any CAA record published at example.com.
                    </t>
                </section>

                <section title="Archive">
                    <t>
                        A compliant CA SHOULD maintain an archive of the DNS transactions
                        used to verify CAA eligibility.
                    </t>
                    <t>
                        In particular a CA SHOULD ensure that where DNSSEC data is 
                        available that the corresponding signature and NSEC/NSEC3 records
                        are preserved so as to enable later compliance audits.
                    </t>
                </section>                
            </section>
            <section title="Application Processing">
                <t>
                    While it is in theory possible to apply information contained 
                    in a CAA record to enforce certificate issue constraints at the 
                    application level, support for such processing is not a design
                    goal for this version of the specification.
                </t>
                <t>
                    The information provided in the CAA record MAY be used for application
                    level enforcement of the CA authorization restrictions if the 
                    CAA RR property app=true is specified.
                </t>
                <t>
                    An application MUST NOT use the information specified in a CAA RR
                    if the app property is not specified or has the value false. Use of 
                    app property values other than true or false is not defined.
                </t>
                <t>
                    Application level enforcement of CAA restrictions faces the
                    practical difficulty that different clients frequently use different
                    trust chains to verify the same certificate chain. 
                </t>
                <t>For example,
                    a CA root embedded in 1995 might be replaced by a 'roll-over'
                    certificate for the same subject and public key and a later
                    expiry date in 2000, 2005 and 2010.
                </t>
                <t>
                    While tracking such details is a requirement for a well run CA,
                    a certificate subject rarely knows if or when a public CA root their 
                    certificate is issued under has been rolled over and has no means
                    of predicting when it might be rolled over in the future.
                </t>
            </section>


        </section>

        <section title="Mechanism">
            <section title="Syntax">
                <t>
                    A CAA RR contains a sequence of tag value pairs. Each tag represents
                    a property of the CAA record. The value of a CAA property is that
                    specified in the corresponding value field.
                </t>
                <t>
                    A domain name MAY have multiple CAA RRs associated with it and
                    each CAA RR MAY have multiple properties and a given property MAY
                    be specified more than once. 
                </t>
                <t>
                    This version of the specification makes no distinction as to 
                    whether properties are expressed as one record or many, nor are 
                    the properties defined sensitive with respect to order.
                </t>


                <t> 
                    The CAA data field consists of a sequence of at least one property 
                    entry. Each property entry consists of a sequence of:
                </t>
                <t>
                    <list style="hanging">
                        <t hangText="Tag Length">One octet containing an unsigned integer 
                        specifying the tag length
                        in octets. The tag length MUST be 15 octets or less.</t>
                        <t hangText="Tag">The property identifier, a sequence of lower 
                        case ascii characters</t>
                        <t hangText="Value Length">
                            Two octets containing an unsigned integer in network byte order 
                            specifying the
                            length of the value field in octets.</t>
                        <t hangText="Value">A sequence of octets representing the property
                        value. Property values are encoded as binary values and MAY employ
                        sub-formats.</t>
                    </list>
                </t>
                <t>
                    It is suggested that CAA records be represented in DNS configuration 
                    files (somehow).
                </t>
                <t>
                    Implementations MUST allow CAA records to specify unknown tag values 
                    provided that they meet the tag length criteria. In such cases 
                    implementations MUST allow tag values to be specified as Base64 
                    representations of binary strings and SHOULD allow tag values to be
                    encoded as ASCII strings.
                </t>
                <t>
                    Examples...
                </t>
                <section title="dauth Property value">
                    <t>
                        Each dauth property specifies a single Object Digest Identifier 
                        value. If dauth properties are to be declared for multiple
                        certificates, a separate dauth property is required for each one.
                    </t>
                    <section title="Object Digest Identifier Calculation">
                        <t>
                            An Object Digest is a binary structure with three components:
                        </t>
                        <t>
                            <list>
                                <t>An ASN.1 Object Identifier specifying the object type of the referenced object</t>
                                <t>An ASN.1 Object Identifier specifying the digest algorithm</t>
                                <t>
                                    An ASN.1 DER encoded data field containing the digest value of the
                                    referenced object processed using the specified digest algorithm.
                                </t>
                            </list>
                        </t>
                        <t>
                            Examples...
                        </t>
                        <t>
                            The Object Digest Identifier construction is designed to facilitate
                            implementation in applications that already require ASN.1 handling
                            mechanisms (i.e. most cryptographic applications) without causing an
                            undue coding burden in cases where ASN.1 code is not already supported.
                            Appendix A provides all the necessary information to create a fully
                            compliant Object Digest Identifier implementation.
                        </t>

                    </section>
                </section>
                <section title="pauth Property value">
                    <t>
                        Each pauth property specifies a single ASN.1 OID value consisting 
                        of the ASN.1 type, length specifier and OID data.
                    </t>
                    <t>
                        The pauth property applies to the specified policy OID and all
                        policy OIDs that fall within the same OID arc. If the OID arc 
                        1.2.3 is specified, then the policy OIDs 1.2.3, 1.2.3.1, 
                        1.2.3.1.2 etc. are all authorized.
                    </t>
                </section>
                <section title="app Property value">
                    <t>
                        Tha app property is a case insensitive ASCII string. Currently 
                        defined values are:
                    </t>
                    <t>
                        <list style="hanging">
                            <t hangText="true">
                                Applications MAY use the pauth and dauth properties 
                                to enforce issuer authorization restrictions as certificate
                                validity restrictions.
                            </t>
                            <t hangText="false (default)">
                                Applications MUST NOT use the data specified in the
                                CAA record to enforce issuer authorization restrictions as 
                                certificate validity restrictions.
                            </t>
                            
                        </list>
                    </t>
                </section>                                
            </section>
           
            <section title="Use of DNS Security">
                <t>
                    Use of DNSSEC to authenticate CAA RRs is strongly recommended but
                    not required. A CA MUST observe a CAA RR that is returned whether 
                    it is signed using DNSSEC or not.
                </t>
                <t>
                    Use of DNSSEC allows a CA to acquire and archive a non-repudiable proof that
                    they were authorized to issue certificates for the domain
                </t>
            </section>            

        </section>
        <section title="Security Considerations">

            <section title="Mis-Issue by Authorized Certification Authority">
                <t>
                    Use of CAA records does not provide protection against mis-issue
                    by an authorized Certification Authority. 
                </t>
                <t>
                    Domain name holders SHOULD ensure that the CAs they authorize to issue
                    certificates for their domains employ appropriate controls to ensure
                    that certificates are only issued to authorized parties within their
                    organization.
                </t>
                <t>
                    Such controls are most appropriately determined by the domain name
                    holder and the authorized CA(s) directly and are thus out of scope 
                    of this document.
                </t>
            </section>
            <section title="Suppression or spoofing of CAA records">
                <t>
                    Suppression of the CAA record or insertion of a bogus CAA record could
                    enable an attacker to obtain a certificate from a CA that was not 
                    authorized to issue for that domain name.
                </t>
                <section title="Applications">
                    <t>
                        Applications performing CAA checking SHOULD mitigate the risk of 
                        suppresion or spoofing of CAA records by means of DNSSEC validation
                        where present. In cases where DNSSEC validation is not available,
                        CAA checking is of limited security value.
                    </t>
                </section>
                <section title="Certification Authorities">
                    <t>
                        Since a certificate issued by a CA can be valid for several years,
                        the consequences of a spoofing or suppression attack are much
                        greater for Certification Authorities and so additional countermeasures
                        are justified.
                    </t>
                <t>
                    A CA MUST mitigate this risk by employing DNSSEC verification whenever
                    possible and rejecting certificate requests in any case where it is
                    not possible to verify the non-existence or contents of a relevant
                    CAA record.
                </t>
                <t>
                    In cases where DNSSEC is not deployed in a corresponding domain, a 
                    CA SHOULD attempt to mitigate this risk by employing appropriate
                    DNS security controls. For example all portions of the DNS lookup
                    process SHOULD be performed against the authoritative name server.
                    Cached data MUST NOT be relied on but MAY be used to support additional
                    anti-spoofing or anti-suppression controls.
                </t>
                </section>

            </section>
            <section title="Denial of Service">
                <t>
                    Introduction of a malformed or malicious CAA RR could in theory
                    enable a Denial of Service attack.
                </t>
                <t>
                    This specific threat is not considered to add significantly to 
                    the risk of running an insecure DNS service.
                </t>
            </section>            
        </section>

        <section title="IANA Considerations">


            <section title="Registration of the CAA Resource Record Type">
                <t>
                    IANA has assigned Resource Record Type TBD1 for the CAA Resource
                    Record Type and added the line depicted below to the registry named
                    Resource Record (RR) TYPEs and QTYPEs as defined in BCP 42 RFC 5395
                    [RFC5395] and located at
                    http://www.iana.org/assignments/dns-parameters.
                </t>
                <figure>
                    <artwork>
<<![CDATA[             Value and meaning                              Reference
-----------  ---------------------------------------------  ---------
CAA          TBD1 Certification Authority Restriction         [RFCXXXX]]]>
</artwork>
                </figure>
            </section>
            <section title="Certification Authority Authorization Properties">
                <t>
                    IANA has created the Certification Authority Authorization Properties
                    registry with the following initial values:
                </t>
                <figure>
                    <artwork>
<<![CDATA[
             Meaning                                          Reference
-----------  -----------------------------------------------  ---------
dauth        Object digest of authorized signing certificate  [RFCXXXX]
pauth        Object Identifier of authorized policy           [RFCXXXX]
app          Application Processing Flag                      [RFCXXXX]]]>
                    </artwork>
                </figure>

                <t>
                    Addition of tag identifiers requires a public specification 
                    and expert review.
                </t>
            </section>
            <section title="Certification Authority Authorization Application Properties">
                <t>
                    IANA has created the Certification Authority Authorization
                    Application Properties
                    registry with the following initial values:
                </t>
                <figure>
                    <artwork>
<<![CDATA[
             Meaning                                          Reference
-----------  -----------------------------------------------  ---------
true         Applications MAY process pauth and dauth data    [RFCXXXX]
false        Applications MUST NOT process CAA records        [RFCXXXX]]]>
                    </artwork>
                </figure>

                <t>
                    Addition of tag identifiers requires a public specification
                    and expert review.
                </t>
            </section>
        </section>

    </middle>



    <back>
        <references title="Normative References">
            &RFC2119;
            &RFC4055;

        </references>
        <references title="Non Normative References">
            &RFC5280;

            <reference anchor="NIST-ALGS">
                <front>
                    <title>Cryptographic Algorithm Registration</title>
                    <author>
                        <organization abbrev="NIST">
                            National Institute of Standards and Technology
                        </organization>
                    </author>
                    <date day="11" month="March" year="2009"/>
                </front>
                <format type="HTML" target="http://csrc.nist.gov/groups/ST/crypto_apps_infra/csor/algorithms.html"/>
            </reference>
        </references>

        <section title="ASN.1 Values (Non-Normative)">
            <t>
                Although the Object Digest Identifier form employs ASN.1 DER encoding
                only a small subset of ASN.1 features are used and a full ASN.1 stack
                is not necessary.
            </t>
            <t>
                This appendix provides sufficient information to implement an Object 
                Digest Identifier constructor or parser for the common 
            </t>

            <section title="Object Identifiers for Certificate Types">
                <t>

                    OIDs have been defined in connection with the X.500 directory for
                    user certificates, certification authority certificates, revocations
                    of certification authority, and revocations of user certificates.
                    The following table lists the OIDs, their BER encoding, and their
                    type identifier and length-prefixed hex format for use in Object
                    Digest Identifiers.
                </t>
                <t>
                    <list>
                        <t hangText="id-at-userCertificate">
                            <list>
                                <t hangText="= { joint-iso-ccitt(2) ds(5) at(4) 36 }">
                                    == 06 03 55 04 24
                                </t>
                            </list>
                        </t>
                    </list>
                    <list>
                        <t hangText="id-at-cACertificate">
                            <list>
                                <t hangText="= { joint-iso-ccitt(2) ds(5) at(4) 37 }">
                                    == 06 03 55 04 25
                                </t>
                            </list>
                        </t>
                    </list>
            
                </t>
            </section>
            <section title="Object Identifiers for Digest Algorithms">
                <t>
                    OIDS have been assigned by NIST for the SHA2 digest algorithms
                    <xref target="NIST-ALGS"/> <xref target="RFC4055"/>
                    Use of the SHA1 digest algorithm is not recommended due to concerns 
                    for the security of the algorithm.
                </t>
                <t>
                    The OID arc in each case is
                    hashAlgs OBJECT IDENTIFIER ::= {joint-iso-itu-t(2) country(16) us(840) 
                    organization(1) gov(101) csor(3) nistAlgorithm(4)
                    hashAlgs (2)}
                </t>

                <t>
                    <list>
                        <t hangText="SHA2 256 bit">
                            <list>
                                <t hangText="= id-sha256 OBJECT IDENTIFIER ::= { hashAlgs 1 }">
                                    == 06 09 60 86 48 01 65 03 04 02 01
                                </t>
                            </list>
                        </t>
                    </list>
                    <list>
                        <t hangText="SHA2 384 bit">
                            <list>
                                <t hangText="id-sha384 OBJECT IDENTIFIER ::= { hashAlgs 2 }">
                                    == 06 09 60 86 48 01 65 03 04 02 02
                                </t>
                            </list>
                        </t>
                    </list>
                    <list>
                        <t hangText="SHA2 512 bit">
                            <list>
                                <t hangText="id-sha512 OBJECT IDENTIFIER ::= { hashAlgs 3 }">
                                    == 06 09 60 86 48 01 65 03 04 02 03
                                </t>
                            </list>
                        </t>
                    </list>
                    <list>
                        <t hangText="SHA2 224 bit">
                            <list>
                                <t hangText="id-sha224 OBJECT IDENTIFIER ::= { hashAlgs 4 }">
                                    == 06 09 60 86 48 01 65 03 04 02 04
                                </t>
                            </list>
                        </t>
                    </list>
                </t>


            </section>
            <section title="DER Data Encoding Prefixes">
                <t>
                    The rules of ASN.1 encoding state that every data value is preceded
                    by a data type identifier and a length identifier. In the case of 
                    an Object Digest Identifier the data type identifier is always
                    OCTET STRING (04) and the length for all currently defined digest algorithms 
                    will be less than 128 bytes (1024 bits) and thus use the single
                    byte encoding form in which bit 7 is set to 0 and the lower 7 bits 
                    specify the length.
                </t>
                <t>
                    The length prefixes for commonly used digest lengths in
                    hexadecimal notation are thus:
                </t>
                <t>
                    <list style="hanging">
                        <t hangText="160 bits">04 14</t>
                        <t hangText="224 bits">04 1C</t>
                        <t hangText="256 bits">04 20</t>
                        <t hangText="384 bits">04 30</t>
                        <t hangText="512 bits">04 40</t>                        
                    </list>
                </t>

                <section title="Examples">
                    <t>
                        The following examples demonstrate the formation of Object
                        Digest Identifiers for the string 'test' using the ASN.1 OID
                        value id-at-description = { joint-iso-ccitt(2) ds(5) at(4) 13 }
                    </t>

                    <section title="SHA2-256 Bit">
                        <t>
                            The SHA2-256 digest value is 9F 86... 08
                        </t>
                        <t>
                            The OID data in hexadecimal notation is:
                        </t>
                        <t>
                            <list>
                                <t hangText="Object Type (2.5.4.13)">
                                    06 03 55 04 0D</t>
                                <t hangText="Digest Algorithm (SHA2-256)">
                                    06 09 60 86 48 01 65 03 04 02 01</t>
                                <t hangText="Digest Value">
                                    04 20
                                    9F 86 D0 81 88 4C 7D 65 9A 2F EA A0 C5 5A D0 15
                                    A3 BF 4F 1B 2B 0B 82 2C D1 5D 6C 15 B0 F0 0A 08
                                </t>
                            </list>
                        </t>
                        <t>
                            The Base64 encoded digest value is:
                            
                        </t>
                        <figure>
                            <artwork>
<![CDATA[BgNVBA0GCWCGSAFlAwQCAQMgn4bQgYhMfWWaL+qgxVrQFaO
/TxsrC4Is0V1sFbDwCgg=
]]>
                            </artwork>
                        </figure>

                    </section>
                    <section title="SHA2-512 Bit">
                        <t>
                            The SHA2-256 digest value is EE 26 ... FF
                        </t>
                        <t>
                            The OID data in hexadecimal notation is:
                        </t>
                        <t>
                            <list>
                                <t hangText="Object Type (2.5.4.13)">
                                    06 03 55 04 0D</t>
                                <t hangText="Digest Algorithm (SHA2-512)">
                                    06 09 60 86 48 01 65 03 04 02 03</t>
                                <t hangText="Digest Value">
                                    04 40
                                    EE 26 B0 DD 4A F7 E7 49 AA 1A 8E E3 C1 0A E9 92
                                    3F 61 89 80 77 2E 47 3F 88 19 A5 D4 94 0E 0D B2
                                    7A C1 85 F8 A0 E1 D5 F8 4F 88 BC 88 7F D6 7B 14
                                    37 32 C3 04 CC 5F A9 AD 8E 6F 57 F5 00 28 A8 FF
                                </t>
                            </list>
                        </t>
                        <t>
                            The Base64 encoded digest value is:
                            
                        </t>
                        <figure>
                            <artwork>
<![CDATA[BgNVBA0GCWCGSAFlAwQCAwNA7iaw3Ur350mqGo7jwQrpkj9
hiYB3Lkc/iBml1JQODbJ6wYX4oOHV+E+IvIh/1nsUNzLDBM
xfqa2Ob1f1ACio/w==]]>
                            </artwork>
                        </figure>
                    </section>

                </section>

            </section>
        </section>



    </back>
</rfc>
