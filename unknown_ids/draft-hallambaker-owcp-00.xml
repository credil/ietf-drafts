<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

  <!ENTITY RFC1035 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1035.xml">
  <!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
  <!ENTITY RFC5280 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml">
  <!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
  <!ENTITY RFC3642 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3642.xml">
  <!ENTITY RFC4033 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4033.xml">
  <!ENTITY RFC4055 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4055.xml">
  <!ENTITY RFC4648 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648.xml">
  <!ENTITY RFC5395 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5395.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" docName="draft-hallambaker-owcp-00" ipr="trust200902">

  <front>
    <title abbrev="Open Web Confirmation Protocol">Open Web Confirmation Protocol (OWCP)</title>
    <author fullname="Phillip Hallam-Baker" initials="P. M." surname="Hallam-Baker">
      <organization>Comodo Group Inc.</organization>
      <address>
        <email>philliph@comodo.com</email>
      </address>
    </author>
 
    <date day="22" month="June" year="2011" />

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <keyword>DNS</keyword>
    <keyword>DNSSEC</keyword>
    <keyword>PKIX</keyword>

    <abstract>
      <t>
        Open Web Confirmation Protocol (OWCP) is a three party
        Web Service that supports a transactional second factor
        confirmation mechanism that provides a superset of the
        capabilities of traditional second factor authentication
        schemes.
      </t>
    </abstract>
  </front>

  <middle>

    <section title="Background">
      <t>
        Authentication of end users is one of the biggest challenges 
        for Internet and Web security today. Despite an abundance of
        technology that offers authentication mechanisms that are
        more robust, more secure and easier to use, the default 
        mechanism for user authentication is the use of usernames 
        and passwords.
      </t>
      <t>
        Unlike traditional schemes, OWCP is designed for implementation
        on a device that has at least the capabilities of a modern
        'smartphone'. In particular an OWCP client device must support
        a display, a means of accepting text input from the user and
        a connection to the Internet.
      </t>
      <t>
        While mobile devices offering this degree of functionality 
        were rare in 2007, they have since become ubiquitous. It 
        is thus now a practical proposition for a site requiring
        second factor authentication to support at least a part of
        its users using a technology that requires this level
        of capability. Indeed software applications that emulate 
        traditional second factor authentication protocols on 
        such devices have been available for some time.
      </t>
      <section title="Second Factor Authentication">
        <t>
          Second factor authentication mechanisms offer greater
          security over the use of passwords alone by combining
          a first factor (typically a password) with a biometric
          or proof of possession of a physical token.
        </t>
        <t>
          Traditional second factor authentication techniques
          have suffered from the need to distribute physical
          tokens and the difficulty of ensuring that a biometric
          authentication is presented to a trustworthy terminal.
        </t>
        <t>
          The usability of traditional second factor authentication
          techniques has been poor or worse. Even the simplest scheme
          in which the user is required to read in a 'one time use'
          numeric code from the authentication token device and enter
          it into a password field. While such operations are relatively
          simple they require the user to engage in a sequence of
          operations that bears no necessary or natural relationship
          to the underlying task for which the authentication is
          required.
        </t>
        <t>
          Nor does the act of engaging in a traditional second 
          factor scheme offer proof of anything other than that
          the user was authenticated. Any correspondence between the act of 
          authentication and the purpose for which the
          authentication was provided must be maintained separately.
        </t>
      </section>
      <section title="Confirmation vs. Authentication">
        <t>
          A second factor confirmation service addresses the limitations
          of traditional second factor authentication schemes.
        </t>
        <t>
          A confirmation service allows the user experience to be precisely
          matched to the action that the user is attempted. Instead of
          beinf asked to read a random number from one device and enter 
          it into another, the user is asked if they really want to perform
          the action for which authentication is requested.
        </t>
        <t>
          A confirmation service offers better accountability for end
          users than a traditional authentication service.
          An authentication service only provides an assertion that
          the user was present. A confirmation service provides an assertion
          that the user was present and that they confirmed a specific 
          transaction.
        </t>
        <t>
          For example, Alice has been granted access to a machine
          storing classified data. If an authentication service is
          used for access control, the authentication service log will 
          only record the dates and times that Alice accessed the 
          system. to find out if Alice accessed a particular file on
          a particular day it is necessary to consult and correlate
          both the authentication log of the system and the activity log
          for the application. 
        </t>
        <t>
          If instead a confirmation service is used the confirmation
          log contains an authenticated record of both the authentication 
          events and the transactions for which the authentication was 
          requested.
        </t>
      </section>
      <section title="Use Scenarios">
        <t>
          A confirmation service complements rather than replaces a 
          traditional authentication scheme. Providing a highly secure 
          and convenient means of authenticating requests that carry
          a high degree of risk mitigates the risk of using convenient
          but intrinsically low security techniques for other actions.
        </t>

        <section title="Use in Financial Services">
          <t>
            If an attacker is to profit from breaching a
            an account with a financial service such as a bank or a
            brokerage they must find a way to move money out of the
            account. Thus adding bill payment recipients, initiating wire
            transfers and trading in low volume 'penny stocks' represent
            high risk activities.
          </t>
          <t>
            For example: Bank of Ethel might permit customers to use a simple
            username and password scheme to gain access to their account
            for the purpose of checking their balance or paying bills
            to existing reciepients but require use of the second factor
            confirmation device for a high risk transaction such as paying
            a bill.
          </t>
        </section>
        <section title="Machine Binding">
          <t>
            A second factor confirmation service may be combined with 
            a machine level authentication scheme to permit a transparent
            form of authentication for low risk transactions.
          </t>
          <t>
            For example: Alice stores her low risk authentication credentials
            (e.g usernames and passwords) using a 'cloud' service. When she
            wishes to use those credentials an agent on her personal machine
            fetches credentials from the cloud service as necessary. When Alice
            wishes to access a site from a different machine she receives a 
            confirmation request on her mobile device to grant access from
            that machine.
          </t>
          <t>
            Use of such a mechanism is clearly more satisfactory when
            suitable cryptographic protocols such as SAML or Kerberos are
            employed to limit the disclosure and hence possible compromise
            of the credentials. The specification of such protocols is
            outside the scope of this document.
          </t>
        </section>
        <section title="Tethered Use">
          <t>
            Although OWCP is designed for use in a three party scenario,
            there are situations in which a two party mode may be
            preferred.
          </t>
          <t>
            For example: Bob is a roadwarrior who requires access to 
            confidential documents stored on his laptop device from 
            anywhere in the world, including locations where Internet 
            access is not possible. To permit access in such circumstances,
            Bob's OWCP client supports use of a tethered mode in which
            the mobile device is plugged into his laptop via a USB port.
          </t>
          <t>
            For example: Carol is a network manager of a large computing
            facility that uses OWCP to authenticate and track all changes
            to critical resources. Since OWCP is itself a network resource 
            a bootstrap consideration arises: How can Carol confirm her
            network configuration requests using OWCP when the network itself
            is down? Support for a tethered mode in which the OWCP device
            communicates via USB or similar wired protocol allows
            this use case to be supported.
          </t>
          <t>
            While availability of a tethered mode is clearly essential 
            if OWCP is to be used in certain applications, support for this
            feature outside the scope of this version of the specification.
          </t>
        </section>
        <section title="Co-Browser">
          <t>
            While OWCP is designed for deployment on a secondary device, 
            deployment on the same device as the one for which confirmation 
            is being requested is also possible and can provide 
            security benefits.
          </t>
          <t>
            Modern Web browsers are large and complex with many features
            such as support for mobile code that are incompatible with
            a high security environment. Separating the confirmation protocol 
            from the Web Browsing protocol permits implementation in a 
            minimal client designed to permit detailed security analysis.
            Such a client might be embedded in or support means of secure 
            interaction with a trustworthy operating system component.
          </t>
          <t>
            While this means of deployment does not provide a true second 
            factor confirmation, it is likely to provide a sufficient 
            degree of authentication for many transactions.
          </t>
        </section>
      </section>
    </section>

    <section title="Description">

      <t>
        OWCP is a Web Service that permits a Requestor to request
        that a User confirm or reject a specified action. If the
        user responds, the response is signed with a digital signature
        under a key that is unique to the user account, the client and
        the device.
      </t>
      <section title="Parties">
        <t>
          Each OWCP protocol interaction takes place between
          a connection pair of the following parties:
        </t>
        <t>
          <list>
            <t hangText="Requestor">
              A party that initiates a confirmation request.
            </t>
            <t hangText="Dispatcher">
              A clearing house that stores and forwards requests
              from requestors and responses from Clients. The
              dispatcher is only trusted to perform routing
              filtering and recording of requests and responses.
              The dispatcher is not trusted with respect to the
              responses returned.
            </t>
            <t>
              A Dispatcher Service MAY impose a use policy on
              Requestors, Clients and Users.
            </t>
            <t hangText="PKI">
              Issue and maintenance of Client Device credentials
              is a trusted function that is logically independent
              of the store and forward operation of the Dispatcher.
            </t>
            <t hangText="Client">
              The Client interacts with the User and the Dispatcher.
              If Dispatcher policy permits,
              a User MAY register multiple Devices to serve as
              confirmation devices for the same account. In this case
              each Device MUST have a separate signature key.
            </t>
            <t hangText="User">
              The User is the person being asked to grant or refuse
              confirmation. A User MAY have multiple accounts with
              multiple Dispatcher Services.
            </t>
          </list>
        </t>

        <figure>
          <artwork>
            <![CDATA[
+-------------+         +------------+         +-------------+
|  Requestor  | <-----> | Dispatcher | <------ |   Client    |
+-------------+         +------------+         +-------------+
                               ^                      ^
                               |                      |
                               V                      V
                        +------------+         +-------------+
                        |     PKI    |         |     User    |
                        +------------+         +-------------+
]]>
          </artwork>
        </figure>
        <section title="Accounts">
          <t>
            Users and Requestors are identified by means of an
            account identifier. The display presentation of an
            account identifier is the
            form of an RFC2822 email address identifier without
            the enclosing angle braces, for example:
          </t>
          <t>
            alice@example.com
          </t>
          <t>
            The account identifier is used by the User when
            registering the use of the confirmation service
            with a dispatcher.
          </t>
          <section title="Dispatcher Discovery">
            <t>
              The domain component of the account identifier is the
              DNS name of the corresponding Dispatcher Web Service.
            </t>
            <t>
              DNS Service discovery is used by Requestors and Clients
              to discover the Dispatcher service corresponding to
              a specified account.
            </t>

          </section>
          <section title="Third Party Domain Names">
            <t>
              OWCP requires that the provider of a Dispatcher service
              have control over the DNS names used in the corresponding
              account identifiers.
            </t>
            <t>
              It is thus not possible for any party other than the holder
              of the domain name example.com to provide OWCP service for
              alice@example.com. If Alice, the holder of the alice@example.com
              email address wishes to use an OWCP confirmation
              service, her choices are limited to persuading the holder
              of example.com to provide an OWCP dispatcher service and
              allow her to use her email identifier or registering with
              another confirmation service provider and accepting
              a different identifier.
            </t>
            <t>
              Requiring a strong binding between the Dispatcher service
              and the account identifier permits the use of the
              account identifier to be used as a proxy for authorization.
            </t>
          </section>
          <section title="Open and Closed Services">
            <t>
              An OWCP service MAY be Open or Closed. An Open service provider
              provides OWCP service to the general public. A Closed service
              provider only provides service to a specific community.
            </t>
            <t>
              For example: An Internet Service Provider or DNS Registrar might
              provide an open OWCP service as a part of their standard service offering
              to customers. An employer might operate a closed OWCP service
              to be used for company business.
            </t>
          </section>
        </section>

        <section title="User Experience">
          <t>
            Since the purpose of OWCP is to support user interaction, the
            user experience is an important part of the OWCP specification.
          </t>
          <t>
            While the realization of the User Experience is outside the
            scope of the specification, the specification will inevitably
            constrain the User Experiences that an implementer can provide.
          </t>
          <section title="Dispatcher Subscription">
            <t>
              Dispatcher Subscription is the procedure whereby a User creates an
              account with a new account identifier.
            </t>
            <t>
              OWCP Dispatcher Subscription is equivalent to establishing an account
              for email or for computer access.
            </t>
          </section>

          <section title="Registration">
            <t>
              To make use of a Client, A User must register it for use with
              at least one OWCP account.
            </t>
            <t>
              If the User is attempting to register a Client for use with an
              existing account, the registration request SHOULD be authenticated
              to ensure that the it comes from
              the authorized account holder. A One Time Use authentication
              code or a confirmation from a device that has already been
              registered MAY be used for this purpose.
            </t>
            <t>
              A Client MAY support a mode in which the Dispatcher Subscription
              procedure is combined with registration. In this case the
              Dispatcher service policy MAY permit registration without additional
              authentication if the account has never existed before.
            </t>

          </section>
          <section title="Requestor Subscription">
            <t>
              To make use of OWCP with a requestor, a User simply provides
              their OWCP account identifier.
            </t>
            <t>
              In the case that the OWCP account identifier is also the
              email address supplied when the User established an account
              with the Requestor, the Requestor MAY perform the subscription
              process automatically.
            </t>
          </section>
          <section title="Confirmation">
            <t>
              In the typical case, use of the Confirmation service is
              triggered by a User request to the Requestor or an event
              that requires the User's attention.
            </t>
            <t>
              For example: Alice attempts to access the personnel
              file causing the access control system to generate
              a confirmation request that is received on Alice's mobile
              device. Alice accepts the confirmation and access is
              granted.
            </t>
            <t>
              For example: Bob is working as a network manager and
              the datacenter cooling system has started leaking. He
              attempts to engage an emergency plumming service which
              in turn requires authorization from Carol, the Finance
              Director.
            </t>
          </section>
        </section>
        <section title="Examples of Use [Non Normative]">
          <t>
            For clarity, only the XML Message component of the requests are shown.
            The HTTP Headers and CMS packaging is omitted.
          </t>
          <section title="Access Control">
            <t>
              Alice (alice@example.com) is an employee of Example Corp.
              She is attempting to
              log into the corporporate network from the laptop (#234)
              issued by her employer.
            </t>
            <t>
              When Alice attempts to connect to the VPN, the VPN
              generates the following request and sends it to the
              Dispatcher service that services example.com:
            </t>

            <figure>
              <artwork>
                <![CDATA[
<?xml version="1.0" encoding="utf-8" ?>
<Request xmlns="http://schema.comodo.com/2011/owcp/0.1">
  <Header issued="2011-06-08T09:30:10Z" 
          identifier="http://access.example.com/2737827178"
          type="Access">
    <From>access@example.com</From>
    <To>alice@example.com</To>
    <Verification>PIN</Verification>
    <Summary>Do you wish to connect to the corporate network from 
    Laptop #234 issued to Alice?</Summary>
  </Header>
</Request>
]]>
              </artwork>
            </figure>
            <t>
              If Alice's mobile device supports a notification service
              this MAY be used to alert Alice to the fact that a new
              confirmation request is pending. Alternatively, Alice
              picks up her mobile device and starts the confirmation
              client manualy. In either case, Alice is shown the
              following dialog:
            </t>
            <figure>
              <artwork>
                <![CDATA[
From:  access@example.com
To:    alice@example.com

Do you wish to connect to the corporate 
network from Laptop #234 issued to Alice?

      [Accept]   [Reject]
]]>
              </artwork>
            </figure>
            <t>
              Since the request specifies PIN verification, Alice is
              asked to provide her PIN before a response can be generated.
              Note that the
              PIN MUST be supplied regardless of whether the action is
              accepted or rejected.
            </t>

            <t>
              Alice accepts the request and the client generates a
              receipt message that contains
              the original request message and Alice's response. The
              receipt message is then digitally signed using a signature
              key that is unique to the account, device and the client.
            </t>
            <figure>
              <artwork>
                <![CDATA[
[TBS response]
]]>
              </artwork>
            </figure>
            <t>
              The reciept is sent to the dispatcher which forwards
              at least the result of the request to the Requestor.
            </t>
            <t>
              In this case the Requestor is trusted to receive
              digitally signed responses for the specific action
              requested and the original request and signature is forwarded
              to the Requestor.
            </t>
          </section>
          <section title="Payment">
            <t>
              A confirmation service MAY be used to support
              payment transactions. In this use case there is
              often a need to present the User with both a
              high level summary of the action being requested and
              a more detailed description.
            </t>
            <t>
              The following message asks Alice if she wishes to
              transfer a sum of money to a person she met in an
              Internet chat room.
            </t>
            <figure>
              <artwork>
                <![CDATA[
<?xml version="1.0" encoding="utf-8" ?>
<Request xmlns="http://schema.comodo.com/2011/owcp/0.1">
  <Header issued="2011-06-08T09:30:10Z" 
          identifier="http://access.example.com/2737827178"
          type="Payment">
    <From>access@example.com</From>
    <To>alice@example.com</To>
    <Verification>PIN</Verification>
    <Summary>Do you wish to transfer <Money currency="usd" 
    amount="9825.00"/> to the account of Barrister Mugu 
    #666-201919 at Bank of Nigeria?
  </Summary>
  </Header>
  <Body>
    <P>
      Form of transfer: Wire
    </P>
    <Table>
      <TH>
        <TD>
          Item
        </TD>
        <TD>
          Amount
        </TD>
      </TH>
      <TR>
        <TD>
          Expeditiary Fee
        </TD>
        <TD>
          <Money currency="usd" amount="9825.00"/>
        </TD>
      </TR>
    </Table>
  </Body>
</Request>
]]>
              </artwork>
            </figure>
            <t>
              In this case Alice (wisely) declines the request.
            </t>
            <figure>
              <artwork>
                <![CDATA[
[TBS response]
]]>
              </artwork>
            </figure>
          </section>
          <section title="Ticket and Transaction Acknowledgement">
            <t>
              In the case that the confirmation service is used
              to authenticate a purchase for non-tangible goods,
              it is in some cases convenient to deliver the goods
              themselves through the confirmation service client.
              In this case the receipt is also the ticket.
            </t>
            <t>
              Alice purchases tickets for a concert tour. The ticket
              and the instructions to find her seat are returned
              to her through the confirmation service.
            </t>
            <t>
              The Requestor sends the following message to the
              dispatcher:
            </t>
            <figure>
              <artwork>
                <![CDATA[
<?xml version="1.0" encoding="utf-8" ?>
<Request xmlns="http://schema.comodo.com/2011/owcp/0.1">
  <Header issued="2011-06-08T09:30:10Z" 
          identifier="http://tickets.example.com/23iudi2u"
          type="Acknowledgement">
    <From>concerts@example.com</From>
    <To>alice@example.com</To>
    <Summary>
      Tickets for Spinal Tap Reonion Tour DC 24th June Seats A15+A16
    </Summary>
  </Header>
  <Body>
    <P>
      This is your ticket.
    </P>
    <P>
      Present the barcode to the barcode reader at the turnstile.
    </P>
    <Barcode width="33" height="33" data="wusdjkw2owehofwoih=="/>

  </Body>
</Request>
]]>
              </artwork>
            </figure>
            <t>
              When Alice receives the message on her mobile device
              it displays a 2D barcode that can be read at
              the turnstile. Alice gains admission to the concert
              without the need to queue at the ticket booth.
            </t>
          </section>
        </section>
      </section>
    </section>
    <section title="Protocol Messages">
      <t>
        OWCP protocol messages are defined here in an 
        abstract form to permit them to be expressed in
        different protocol bindings. OWCP 0.1 services 
        MUST support the HTTP+CMS binding defined in
        section [].
      </t>
      <t>
        OWCP messages MUST be exchanged over an encrypted,
        authenticated transport such as TLS or IPSEC. 
        OWCP 0.1 services MUST support use of TLS transport.
      </t>
      <t>
        Since the function of the Dispatcher is to store and
        forward messages, a sequence of OWCP messages will 
        always be initiated by either a Requestor or a Client.
      </t>
      <section title="Common Format">
        <section title="Request">
          <t>
            All OWCP request messages specify an operation code.
          </t>
          <t>
            The following parameters are common to all requests.
          </t>
          <t>
            <list style="hanging">
              <t hangText="Transaction [Transaction Identifier][Required]">
                The transaction identifier is unique for all requests
                except for RD-Status, RD-Final and DR-Complete in which case the
                transaction identifier of the original transaction for
                which status is being requested is used.
              </t>
              <t hangText="Certificate Chain [Attachment][Optional]">
                Certificate chain for the public key used in the Signature.
              </t>
              <t hangText="Authentication [Authentication Code][Optional]">
                Digital Signature or Message Authentication Code of the Request.
              </t>

            </list>
          </t>
        </section>
        <section title="Response">
          <t>
            All responses return a response code. The following response codes
            are defined:
          </t>
          <t>
            <list style="hanging">
              <t hangText="200 Success">
                The operation succeeded and the result of the operation is returned.
              </t>
              <t hangText="303 Incomplete">
                The operation requested by the Requestor has not completed
                and the result of the operation will be returned asynchronously.
              </t>
              <t hangText="400 Bad Request">
              </t>
              <t hangText="401 Unauthorized">
                The Requestor or Client is not permitted to perform the 
                requested operation..
              </t>
              <t hangText="404 Not Found">
                The requested User account or Transaction ID was not found.
              </t>
              <t hangText="408 Timeout">
                The requested operation did not complete in the specified 
                time or status was requested for a transaction that has
                expired.
              </t>
            </list>
          </t>
          <t>
            In addition an OWCP service MAY return any error or status code
            defined by the protocol binding and/or the transport layer.
          </t>

          <t>
            The following parameters are common to all responses:
          </t>
          <t>
            <list style="hanging">
              <t hangText="Transaction [Transaction Identifier][Required]">
                The transaction identifier 
                of the original request.
              </t>
              <t>
                Note that the transaction identifier is a required parameter
                for the protocol even though its value might be implicit
                from the context in many protocol bindings (e.g. HTTP).
                This is necessary to ensure that the authentication of 
                the response also covers the request.
              </t>
              <t hangText="Certificate Chain [Attachment][Optional]">
                Certificate chain for the public key used in the Signature.
              </t>
              <t hangText="Authentication [Authentication Code][Optional]">
                Digital Signature or Message Authentication Code of the Request.
              </t>             
              <t hangText="Request-Link [Digest][Optional]">
                Message Digest of the Request. This is only relevant
                when a response is digitally signed and allows the response
                to be cryptographically linked to the original request.
              </t>
            </list>
          </t>
        </section>
      </section>
      <section title="Requestor to Dispatcher">
        <t>
          Operations initiated by the Responder are logically a
          single request followed by a single response but may
          take longer to complete than it is desiable for the
          Responder to wait for a status code. Support for
          asynchronous completion is therefore necessary.
        </t>
        <t>
          If the Dispatcher is unable to complete an operation
          immediately it MUST return the Incomplete response code.
          A Responder MAY recover the result of an incomplete
          operation by polling using the STATUS operation or by
          accepting asynchronous completion by means of the
          Complete operation.
        </t>
        <t>
          In order to accept asynchronous completion of a request,
          a dispatcher specifies the
        </t>
        <t>
          Dispatchers MUST support completion of incomplete
          operations by use of the polling mechanism and MAY
          support asynchronous completion by means of the
          Complete operation.
        </t>
        <figure>
          <artwork>
            <![CDATA[
+------------+         +-------------+
| Requestor  | ....... |  Dispatcher |
+------------+         +-------------+

               Request
               ------>
               Resonse
               <------

              [Complete]
               <------
             [Acknolwedge]
               ------>
]]>
          </artwork>
        </figure>
        <t>
          The following parameters are common to all RD-Operation requests:
        </t>

        <t>
          <list style="hanging">
            <t hangText="Reply-To [DNS Name][Optional]">
              DNS Name of a server that will accept completion of
              the request via the DR-Complete operation.
            </t>
            <t hangText="Expiry [Date Time][Optional]">
              A date and time beyond which the result of the request
              is no longer relevant. A Dispatcher MAY refuse to recognize
              the expiry term
              requested by Requestor and impose its own limit which MAY
              be shorter or longer.
            </t>
            <t>
              A Responder SHOULD NOT rely on an expiry
              time of less than ten minutes for any operation
              that requires User interaction. Machines should
              serve people, not the other way round.
            </t>
          </list>
        </t>
        <section title="Operation RD-Confirm">
          <t>
            The RD-Confirm operation is used to present a confirmation
            request to the User with the Dispatcher and Client(s)
            acting as intermediaries.
          </t>
          <section title="RD-Confirm Request">
            <t>
              The RD-Confirm request takes the following parameters:
            </t>
            <t>
              <list style="hanging">
                <t hangText="Registration [Registrarion Identifier][Optional]">
                  Registration identifier assigned by the Dispatcher to represent
                  the Dispatcher-Responder relationship in a prior
                  Registration operation.
                </t>
                <t hangText="Expiry [Date Time][Optional]">
                  Date and Time at which the confirmation request will expire.

                </t>

                <t hangText="Message [Attachment/XML][Optional]">
                  The Confirmation request message formatted according to the
                  XML schema specified in section [XXX]
                </t>
              </list>
            </t>
          </section>
          <section title="RD-Confirm Response">
            <t>
              <list style="hanging">
                <t hangText="Reply [Attachment/XML][Optional]">
                  The Confirmation response message formatted according to the
                  XML schema specified in section [XXX]
                </t>
              </list>
            </t>
          </section>
        </section>
          <section title="Operation RD-Register">
            <t>
              The RD-Register operation allows a Requestor to
              pre-register with a Dispatcher. This allows the
              Responder to check that it is likely to be able
              to use the confirmation service before relying on it.
            </t>
            <t>
              The RD-Register operation is essentially a
              confirmation request without the actual confirmation.
            </t>
            <t>
              Use of the RD-Register operation is optional according
              to the OWCP protocol but MAY be required by the
              dispatcher policy.
            </t>
            <section title="RD-Register Request">
              <t>
                Operation Code: RD-Register
              </t>
              <t>
                <list style="hanging">
                  <t hangText="Responder [Account Identifier][Optional]">
                    The account identifier the responder is attempting to
                    register. This is only required in cases where the
                    dispatcher needs to check the responder account
                    against the certificate chain.
                  </t>
                  <t hangText="User [Account Identifier][Optional]">
                    The account identifier a specific user that the responder
                    is attempting to register. If no account is specified
                    the Responder is attempting to register for all accounts.
                  </t>
                </list>
              </t>
            </section>
            <section title="RD-Register Response">

              <t>
                <list style="hanging">
                  <t hangText="Registration [Registrarion Identifier][Required]">
                    Registration identifier assigned by the Dispatcher to represent
                    the Dispatcher-Responder relationship.
                  </t>

                  <t hangText="Scope [Scope][Optional]">
                    If the Scope is specified as 'User', the registration is
                    accepted for that specific user alone. If the scope is
                    specified as 'global' the registration is applies to
                    all User accounts held by the dispatcher.
                  </t>
                  <t hangText="Policy [Attachment/XML][Optional]">
                    Dispatcher policy statement.
                  </t>
                </list>
              </t>
            </section>
          </section>
          <section title="Operation RD-Deregister">
            <t>
              The RD-Deregister operation cancels a previous registration
              request.
            </t>

            <section title="RD-Deregister Request">
              <t>
                Operation Code: RD-Deregister
              </t>
              <t>
                <list style="hanging">
                  <t hangText="Registration [Registrarion Identifier][Required]">
                    Registration identifier assigned by the Dispatcher to represent
                    the Dispatcher-Responder relationship in the original
                    RD-Register operation.
                  </t>
                </list>
              </t>
            </section>
            <section title="RD-Deregister Response">
              <t>
                No additional data is returned if the operation succeeds
              </t>
            </section>
          </section>

          <section title="Operation RD-Status">
            <t>
              The operation RD-Status is used to request the result of
              an earlier request made by that Responder.

            </t>
            <section title="RD-Status Request">
              <t>
                No additional parameters are specified.
              </t>
            </section>
            <section title="RD-Status Response">
              <t>
                If successful the RD-Status response returns the parameters
                defined for the original transaction request.
              </t>
            </section>
          </section>
          <section title="Operation RD-Final">
            <t>
              The operation RD-Final is used to request the result of
              an earlier request made by that Responder and cancel the
              request if it has not yet completed.
            </t>
            <section title="RD-Final Request">
              <t>
                No additional parameters are specified.
              </t>
            </section>
            <section title="RD-Final Response">
              <t>
                If the original operation completed successfully,
                the RD-Final response returns the parameters
                defined for the original transaction request.
              </t>
              <t>
                If the Dispatcher accepts the request to attempt to
                cancel the operation the response code 408 Timeout
                is returned. But returning this response code
                in an RD-Final response does not guarantee that the
                operation will not be completed subsequently.
              </t>
            </section>
          </section>
        </section>
      <section title="Dispatcher to Requestor">
        <t>
          The only circumstance in which a Dispatcher initiates a protocol 
          exchange is when it is providing an asynchronous completion 
          response for a previous request.
        </t>
        <section title="Operation DR-Complete">
          <t>
            The DR-Complete operation returns the result of a previously
            requested operation for which an Incomplete status was returned.
          </t>
          <section title="DR-Complete Request">
            <t>The request contains the result of the original 
            response:</t>
            <t>
              <list style="hanging">
                <t hangText="Status [Response Code][Required]">
                  The response code of the request.
                </t>
              </list>
            </t>
            <t>
              If the operation was successful,
              the DR-Complete response returns the parameters
              defined for the original transaction request.
            </t>
          </section>
          <section title="DR-Complete Response">
            <t>
              No additional parameters are specified.
            </t>
          </section>
        </section>


      </section>
      <section title="Client to Dispatcher">

        <t>
          Protocol exchanges between the Dispatcher and the
          Client consist of a single request from the
          Client followed by a single response from the Dispatcher.
        </t>
        <figure>
          <artwork>
<![CDATA[
+------------+         +-------------+
| Dispatcher | ....... |   Client    |
+------------+         +-------------+

               Request
               <------
               Resonse
               ------>

]]>
          </artwork>
        </figure>
        <section title="Operation CD-Register">
          <t>
            The CD-Register operation is used to register a Client
            to a Dispatcher.
          </t>
          <section title="CD-Register Request">
            <t>
              The CD-Register request specifies the following parameters:
            </t>
            <t>
              <list style="hanging">
                <t hangText="Account [Account Identifier][Required]">
                  Account identifier for the account being requested.
                </t>
                <t hangText="Passphrase [String][Optional]">
                  Optional Passphrase value that MAY be used 
                  by the Dispatcher to authenticate the registration 
                  request.
                </t>
                <t hangText="Key [Attachment][Required]">
                    Key to be used to authenticate messages from
                    the client to the Dispatcher.
                </t>
                <t hangText="Client [Client Identifier][Optional]">
                  Client identifier returned in a previous 
                  registration request.
                </t>
                <t>
                  The client identifier is only specified by a
                  client in the case of a rekeying operation.
                </t>
              </list>
            </t>
          </section>
          <section title="CD-Register Response">
            <t>
              The CD-Register response specifies the following parameters:
            </t>
            <t>

              <list style="hanging">
                <t hangText="Client [Client Identifier][Optional]">
                  Identifier that the Client MUST use in future
                  interactions with the dispatcher under this account.
                </t>
                <t hangText="">
                </t>
              </list>
            </t>
          </section>
        </section>
        <section title="Operation CD-Deregister">
          <t>
            The CD-Deregister operation is used to unregister a 
            previously registered Client.
          </t>
          <t>
            Note that a Client may also be deregistered through
            other, out of band mechsanisms. For example 
            through an account management interface for the
            account.
          </t>
          <section title="CD-Deregister Request">
            <t>
              The Deregister request specifies only the client 
              identifier.
            </t>
            <t>
              <list style="hanging">
                <t hangText="Client [Client Identifier][Optional]">
                  Client identifier.
                </t>
              </list>
            </t>            
          </section>
          <section title="CD-Deregister Response">
            <t>
              The Deregister response only reports success or failure.
            </t>
            <t>
              [TBS Should it tell the user that they have other 
              devices?]
            </t>
          </section>
        </section>


        <section title="Operation CD-List">
          <t>
            The CD-List operation is used to request that the Dispatcher
            return all pending confirmations.
          </t>
          <section title="CD-List Request">
            <t>
              The CD-List request takes the following parameters:
            </t>
            <t>
              <list style="hanging">
                <t hangText="Client [Client Identifier][Required]">
                  Registration identifier assigned by the Dispatcher to represent
                  the Client-Responder relationship in a prior
                  Registration operation.
                </t>
                <t hangText="Since [Transaction Identifier][Optional]">
                  If specified directs the server to only return confirmation
                  messages recieved since the specified transaction identifier.
                </t>
              </list>
            </t>
          </section>
          <section title="RD-List Response">
            <t>
              If successful, the CD-List response takes the following parameters:
            </t>            
            <t>
              <list style="hanging">
                <t hangText="Now [Transaction Identifier][Optional]">
                  Specifies an identifier that the client can specify in a
                  request to indicate that the 
                </t>
                <t hangText="Requests [Attachment/Multipart][Required]">
                  A sequence of confirmation requests packaged as a multipart
                  object.
                </t>
              </list>
            </t>
          </section>
        </section>


        <section title="Operation CD-Reply">
          <t>
            The CD-Reply Operation is used by the client to notify the
            Dispatcher that the user has responded to a confirmation
            request.
          </t>
          <section title="CD-Reply Request">
            <t>
              The CD-Reply Request specifies the transaction identifier
              of the confirmation for which a reply is being given and
              a response value.
            </t>
            <t>
              <list style="hanging">
                <t hangText="Transaction [Transaction Identifier][Required]">
                  The transaction identifier being responded to.
                </t>
                <t hangText="Response [String][Required]">
                  The response value.
                </t>
              </list>
            </t>
          </section>
          <section title="CD-Reply Response">
            <t>
              The CD-Reply operation only returns a status
              code value. No additional parameters are returned.
            </t>
            <t>
              [TBS May want to revist this. Wouldn't a client want to be able to
              confirm that an asyn completion has in fact been delivered?]
            </t>
          </section>
        </section>

      </section>

    </section>
    <section title="Service Discovery">
      <t>
        Requestors and Clients discover the client using DNS service 
        discovery.
      </t>
      <section title="ESRV Discovery">

        <t>
          Requestors and Clients MUST support the ESRV discovery
          Mechanism and the SRV and URI extended discovery mechanisms.
        </t>
        <section title="ESRV Properties">
          <t>
            ESRV properties permit clients and servers to negotiate 
            service protocol and properties such as the protocol
            version and/or protocol binding.
          </t>
        </section>
      </section>
      <section title="Manual Discovery">
        <t>
          ESRV service discovery depends on support for new DNS 
          Resource Record types at the DNS Resolver used. 
          Clients SHOULD and Requestors MAY support manual 
          configuration of the Dispatcher service.
        </t>
        <t>
          Manual configuration does not provide the support
          for redundancy or fault tolerance provided in the
          ESRV discovery mechanism.
        </t>
      </section>
    </section>
    <section title="Bindings">
      <t>
        The abstract OWCP protocol is mapped to the wire-transport
        by means of a binding. Currently only one binding is 
        defined.
      </t>
      <t>
        OWCP Responders and Dispatchers MUST support the HTTP/JSON 
        binding and MAY support other bindings.
      </t>
      <t>
        OWCP Clients SHOULD support the HTTP/JSON
        binding and MAY support other bindings.
      </t>
      <t>
        
      </t>
      <section title="HTTP/JSON Binding">
        <t>
          The HTTP/JSON binding is designed to permit efficient
          implementation of an OWCP Requestor or Dispatcher
          without the need for XML support beyond the ability
          to generate Confirmation messages.
        </t>
        <section title="Transport">
        </section>
        <section title="HTTP Encapsulation">
          <t>
            The service discovery process returns the Web Service 
            Endpoint og the OWCP service as a URI.
          </t>
          <t>
            OWCP requests are mapped to HTTP Requests as follows:
          </t>
          <t>
            <list style="hanging">
              <t hangText="Method">
                The request method is always POST.
              </t>
              <t hangText="Request URI">
                The request URI consists of the web service endpoint
                concatenated with a '/' character concatenated with 
                the OWCP operation code.
              </t>
              <t hangText="Content-Encoding">
                The Content Encoding type MUST be either "8bit" or
                "Binary".
              </t>
              <t hangText="Content">
                The content of the request message is a 
                Binary Multipart Container in which the first data 
                segment MUST be the JSON parameter block.
              </t>
            </list>
          </t>
        </section>
        <section title="Binary Multipart Container">
          <t>
            An OWCP message typically contains X.509 certificate
            chains, XML data objects and other data objects most 
            suitably exchanged in binary form. The Binary Multipart
            representation is used to encapsulate the message parameter
            object and related attachments as binary objects.
          </t>
          <t>
            A Binary Multipart Container consists of a sequence of
            data segments.
          </t>
          <section title="Data Segment Format">
            <t>
              A Data Segment consists of a sequence of a segment
              type identifier followed by a sequence of sections
              as specified by the segment type identifier.
            </t>
            <t>
              <list>
                <t hangText="Bit 0">
                  Indicates that a parameter label item is present.
                </t>
                <t hangText="Bit 1">
                  Indicates that a MIME Content-Type item is present.
                </t>
                <t hangText="Bit 2">
                  Indicates that an Identifier is present.
                </t>
                <t hangText="Bit 3">
                  Indicates that a Data section is present.
                </t>
                <t hangText="Bit 4">
                  Indicates that an Object Digest Identifier of the 
                  Data section is present.
                </t>
                <t hangText="Bit 5-6">
                  Reserved for future use.
                </t>
                <t hangText="Bit 7">
                  If set the data segment is the final segment in the
                  container. Otherwise at least one more data segment 
                  follows.
                </t>
              </list>
            </t>
          </section>
          <section title="Data Section Format">
            <t>
              Data sections are presented in the same order as the 
              segment type identifier bits starting with the low
              order bit.
            </t>
            <t>
              Each data section consists of a length specifier followed 
              by the corresponding data. 
            </t>
            <t>
              ASN.1 length encoding format is used to represent 
              the length specifier.
            </t>
            <t>
              For length values less than 128 octets, the length is
              represented as a single octet and consists of the length
              value.
            </t>
            <t>
              For longer lengths, the high order bit of the first order
              octet is 1 and the remaining 7 bits specify the number
              of octets following used to specify the length.
            </t>
            <t>
              For example: A data segment that contains a MIME Content-Type
              section and a Data section will have the segment type
              specifier 5 (00000101 in binary). The first section will
              contain the Content-Type and the Second section the Data 
              value.
            </t>
            <t>
              Contrary to the practice in ASN.1 DER encoding, the length
              specifier MAY contain leading zeros. Thus the octet sequence 
              '0x13', the octext sequence '0x11 0x13' and the octet 
              sequence '0x14 0x00 0x00 0x00 0x13' are all valid and 
              each specifies that the length of the following 
              data is 19 octets.
            </t>
          </section>

        </section>
        <section title="JSON Object Syntax">
          <t>
            OWCP data objects are encoded using the JSON syntax [TBS].
          </t>
          <t>
            The correspondance between OWCP data types and JSON object
            types is given below:
          </t>
          <t>
            [TBS]
          </t>
        </section>
      </section>

    </section>
    <section title="Request Schema">
      <section title="Namespace">
        <t>
          The OWCP Request schema is defined in W3C XML Schema notation.
          The version specified in this document has the following 
          namespace assigned:
        </t>
        <t>
          XML Namespace: http://schema.comodo.com/2011/owcp/0.1
        </t>
        <figure>
          <artwork>
<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<schema id="XMLSchema1"
    targetNamespace="http://schema.comodo.com/2011/owcp/0.1"
    elementFormDefault="qualified"
    xmlns:owcp="http://schema.comodo.com/2011/owcp/0.1"
    xmlns="http://www.w3.org/2001/XMLSchema">
]]>
          </artwork>
        </figure>
      </section>
      <section title="Request">
        <t>
          The  &lt;Request&gt; element
        </t>
        <t>
          The  &lt;Request&gt; element contains the following sequence
          of elements:
        </t>
        <t>
          <list style="hanging">
            <t hangText="&lt;Header&gt;">
            </t>

            <t hangText="&lt;Body&gt;">
            </t>
          </list>
        </t>        <t>
          The following XML Schema declares the &lt;Request&gt; element:
        </t>
        <figure>
          <artwork>
<![CDATA[
  <complexType name="RequestType">
    <sequence>
      <element ref="owcp:Header" minOccurs="1" maxOccurs="1"/>
      <element ref="owcp:Body" minOccurs="0" maxOccurs="1"/>
    </sequence>
  </complexType>
  <element name="Request" type="owcp:RequestType"/>
]]>
          </artwork>
        </figure>
      </section>
      
      <section title="&lt;Header&gt;">
        <t>
          The  &lt;Header&gt; element
        </t>
        <t>
          The  &lt;Header&gt; element contains the following attributes and 
          sequence of elements:
        </t>
        <t>
          <list style="hanging">
            <t hangText="issued [Required]" >
            </t>
            <t hangText="identifier [Required]">
            </t>
            <t hangText="type [Required]">
            </t>
            <t hangText="&lt;From&gt;">
            </t>
            <t hangText="&lt;To&gt;">
            </t>
            <t hangText="&lt;Verification&gt;">
            </t>
            <t hangText="&lt;Summary&gt;">
            </t>
            <t hangText="Reference* [Optional]">
              Identifier of previous confirmation messages that this
              confirmation message is cross-referenced to.
            </t>
          </list>
        </t>        <t>
          The following XML Schema declares the &lt;Header&gt; element:
        </t>
        <figure>
          <artwork>
<![CDATA[
  <complexType name="HeaderType">
    <sequence>
      <element ref="owcp:From" minOccurs="1" maxOccurs="1"/>
      <element ref="owcp:To" minOccurs="1" maxOccurs="1"/>
      <element ref="owcp:Verification" minOccurs="0" 
            maxOccurs="unbounded"/>
      <element ref="owcp:Summary" minOccurs="1" maxOccurs="1"/>
      <element ref="owcp:Reference" minOccurs="0" 
            maxOccurs="unbounded"/>      
    </sequence>
    <attribute name="issued" type="dateTime"/>
    <attribute name="identifier" type="anyURI"/>
    <attribute name="type" type="string"/>
  </complexType>
  <element name="Header" type="owcp:HeaderType"/>
]]>
          </artwork>
        </figure>
        <section title="&lt;From&gt; and &lt;To&gt;">
          <t>
            The  &lt;From&gt; and &lt;To&gt; elements
          </t>
          <t>
            The  &lt;From&gt; and &lt;To&gt; elements are of type string.
          </t>
          <t>
            The following XML Schema declares the &lt;From&gt; element:
          </t>
          <figure>
            <artwork>
<![CDATA[
  <element name="From" type="string"/>
]]>

            </artwork>
          </figure>
        </section>      
        <section title="&lt;Verification&gt;">
          <t>
            The  &lt;Verification&gt; element
          </t>
          <t>
            The  &lt;Verification&gt; element is of type string and contains
            an OWCP verification mechansim identifier as registered by IANA.
            [TBS extensions by RFC]
          </t>
          <t>
            The following
            Verification methods are initially defined:
          </t>
          <t>
            <list style="hanging">
              <t hangText="PIN">
              </t>
              <t hangText="GPS">
              </t>
              <t hangText="Photo">
              </t>
              <t hangText="Voice">
              </t>
            </list>
          </t>
          <t>
            If a client encounters an unknown Verification element, the request 
            MUST be refused with the error return 'Unknown Verification Type'.
          </t>
          <t>
            [TBS: Should it be possible to specify Verification mechanisms as
            being required/optional or can this be handled in the negotiation
            profile?]
          </t>
          <t>
            The following XML Schema declares the &lt;Verification&gt; element:
          </t>
          <figure>
            <artwork>
<![CDATA[
  <element name="Verification" type="string"/>
]]>

            </artwork>
          </figure>
        </section>
        <section title="&lt;Summary&gt;">
          <t>
            The  &lt;Summary&gt; element
          </t>
          <t>
            The  &lt;Summary&gt; element is of type TextType and contains
            formatted text as described below.
          </t>
          <t>
            The following XML Schema declares the &lt;Summary&gt; element:
          </t>
          <figure>
            <artwork>
<![CDATA[
  <element name="Summary" type="owcp:TextType"/>
]]>

            </artwork>
          </figure>
        </section>
        <section title="&lt;Reference&gt;">
          <t>
            The  &lt;Reference&gt; element
          </t>
          <t>
            The  &lt;Reference&gt; element is of type string.
          </t>
          <t>
            The following XML Schema declares the &lt;Reference&gt; element:
          </t>
          <figure>
            <artwork>
              <![CDATA[
  <element name="Reference" type="string"/>
]]>

            </artwork>
          </figure>
        </section>
      </section>
      <section title="&lt;Body&gt;">
        <t>
          The  &lt;Body&gt; element
        </t>
        <t>
          The  &lt;Body&gt; element:
        </t>
        <t>
          <list style="hanging">
            <t hangText="&lt;P&gt;">
            </t>
            <t hangText="&lt;Table&gt;">
            </t>
            <t hangText="&lt;Barcode&gt;">
            </t>
          </list>
        </t>
        <t>
          The following XML Schema declares the &lt;Body&gt; element:
        </t>
        <figure>
          <artwork>
<![CDATA[
  <complexType name="BodyType">
    <choice minOccurs="0" maxOccurs="unbounded">
      <element ref="owcp:P" minOccurs="1" maxOccurs="1"/>
      <element ref="owcp:Table" minOccurs="1" maxOccurs="1"/>
      <element ref="owcp:Barcode" minOccurs="1" maxOccurs="1"/>
    </choice>
  </complexType>
  <element name="Body" type="owcp:BodyType"/>
]]>
          </artwork>
        </figure>


        <section title="&lt;P&gt;">
          <t>
            The  &lt;P&gt; element
          </t>
          <t>
            The  &lt;P&gt; element is of type TextType and contains
            formatted text as described below.:
          </t>
          <t>
            The following XML Schema declares the &lt;P&gt; element:
          </t>
          <figure>
            <artwork>
<![CDATA[
  <element name="P" type="owcp:TextType"/>
]]>
            </artwork>
          </figure>
        </section>

        <section title="&lt;Barcode&gt;">
          <t>
            The  &lt;&gt; element
          </t>
          <t>
            In order to minimize the complexity of the client while maximizing
            the range of barcode formats that can be supported, the barcode is 
            represented as a bitstring corresponding to the values of pixels in
            a grid of the specified size.
          </t>
          <t>
            Note that this mechanism is NOT intended to provide a mechanism 
            for display of arbitrary images. While the format described is capable
            of supporting the most comonly used 1D and 2D barcode formats, 
            support for arbitrary formats is considered to be a non-requirement.
          </t>
          <t>
            The low order bit (0) of the first octect in the bitstream corresponds to
            the top left corner of the barcode image which is by definition
            the origin. A bit value of 1 corresponds
            to a black pixel and a bit value of 0 to a white pixel.
          </t>
          <t>The next bit, bit 1 corresponds to the pixel immediately to the right 
          of the origin and so on. Octects are read from the bitstream as needed.
          Until the entire first row of pixels is presented.
          </t>
          <t>
            The low order bit of the next octet in the bitstream represents the pixel 
            immediately below the origin and so on for the remainder of the row.
          </t>
          <t>
            A QR code Version 4 barcode is displayed in a 33x33 grid of pixels. 
            Thus the bitstream representation of such a bitstream will require
            5 octets per row for each of the 33 rows, a total of 155 octets.
          </t>
          <t>
            [TBS: decide whether this is acceptable and if it may lead to GIF
            abuse type issues with the barcode being used as a substitute for
            an icon.]
          </t>
          <t>
            The  &lt;&gt; element:
          </t>
          <t>
            <list style="hanging">
              <t hangText="width">
              </t>
              <t hangText="height">
              </t>
              <t hangText="data">
              </t>
            </list>
          </t>

          <t>
            The following XML Schema declares the &lt;Barcode&gt; element:
          </t>
          <figure>
            <artwork>
<![CDATA[
  <complexType name="BarcodeType" >
    <attribute name="width" type="integer"/>
    <attribute name="height" type="integer"/>
    <attribute name="data" type="base64Binary"/>
  </complexType>
  <element name="Barcode" type="owcp:BarcodeType"/>
]]>
            </artwork>
          </figure>
        </section>
      </section>
      <section title="&lt;Table&gt;">
        <t>
          The  &lt;Table&gt; element
        </t>
        <t>
          The  &lt;Table&gt; element:
        </t>
        <t>
          <list style="hanging">
            <t hangText="&lt;TH&gt;">
            </t>
            <t hangText="&lt;TR&gt;">
            </t>
          </list>
        </t>
        <t>
          The following XML Schema declares the &lt;Table&gt; element:
        </t>
        <figure>
          <artwork>

<![CDATA[
  <complexType name="TableType">
    <choice minOccurs="0" maxOccurs="unbounded">

      <element ref="owcp:TH" minOccurs="1" maxOccurs="1"/>
      <element ref="owcp:TR" minOccurs="1" maxOccurs="1"/>
    </choice>
  </complexType>
  <element name="Table" type="owcp:TableType"/>
]]>
          </artwork>
        </figure>
        <section title="&lt;TH&gt; and &lt;TR&gt;">
          <t>
            The  &lt;TH&gt; and &lt;TR&gt; element
          </t>
          <t>
            The  &lt;TH&gt; and &lt;TR&gt; elements are of RowType and may contain
            the following element:
          </t>
          <t>
            <list style="hanging">
              <t hangText="&lt;TD&gt;">
              </t>
            </list>
          </t>
          
          <t>
            The following XML Schema declares the &lt;TH&gt; and &lt;TR&gt; elements:
          </t>
          <figure>
            <artwork>
<![CDATA[
  <complexType name="RowType">
    <choice minOccurs="0" maxOccurs="unbounded">
      <element ref="owcp:TD" minOccurs="1" maxOccurs="1"/>
    </choice>
  </complexType>  
  <element name="TH" type="owcp:RowType"/>
  <element name="TR" type="owcp:RowType"/>
]]>
            </artwork>
          </figure>
        </section>
      </section>
      <section title="&lt;TD&gt;">
        <t>
          The &lt;TD&gt; element is of type TextType and MAY contain
          formatted text content.
        </t>
        <t>
          The following XML Schema declares the &lt;TD&gt; element:
        </t>
        <figure>
          <artwork>
<![CDATA[
  <element name="TD" type="owcp:TextType"/>
]]>
          </artwork>
        </figure>
      </section>
      
      <section title="Text">
        <t>
          The &lt;Summary> &lt;P> and &lt;TD> elements are used to 
          present free form text. Each of these elements are of the 
          type TextType which is the only type of mixed content in
          the OWCP message markup.
        </t>
        <t>
          An element of type TextType MAY contain the following content
          and elements:
        </t>
        <t>
          <list>
            <t>
              Text data.
            </t>
            <t>
              &lt;Money&gt; elements used to represent quantities
              of money.
            </t>
            <t>
              &lt;B&gt; elements used to highlight regions of the
              text with bold font.
            </t>
            <t>
              &lt;I&gt; elements used to highlight regions of the
              text with italic font.
            </t>
            <t>
              &lt;U&gt; elements used to highlight regions of the
              text with underlining.
            </t>
          </list>
        </t>
        <t>
          The following XML Schema declares the TextType:
        </t>
        <figure>
          <artwork>
<![CDATA[
  <complexType name="TextType" mixed="true">
    <choice minOccurs="0" maxOccurs="unbounded">
      <element ref="owcp:Money" maxOccurs="1"/>
      <element ref="owcp:B" maxOccurs="1"/>
      <element ref="owcp:I" maxOccurs="1"/>
      <element ref="owcp:U" maxOccurs="1"/>
    </choice>
  </complexType>
]]>
          </artwork>
        </figure>
        <section title="&lt;Money>">
          <t>The &lt;Money> element is used to specify a sum of money in
          a specified currency within an element of type TextType.
          This permits the client to assit the user by providing an
        instant conversion into the currency of the user's choice.</t>
          <t>The following attributes are defined for the &lt;Money> element:
          </t>
          <t>
            <list style="hanging">
              <t hangText="currency [Required]">
                The ISO 4217 currency code for the amount specified.
              </t>
              <t hangText="amount [Required]">
                The amount specified in the currency indicated.
              </t>
            </list>
          </t>
          <t>
            The following XML Schema declares the &lt;Money> element:
        </t>
          <figure>
            <artwork>
<![CDATA[
  <complexType name="MoneyType">
    <attribute name="currency" type="string" use="required"/>
    <attribute name="amount" type="decimal" use="required"/>
  </complexType>
  <element name="Money" type="owcp:MoneyType"/>
]]>
            </artwork>
          </figure>
        </section>
        <section title="&lt;B>, &lt;I> and &lt;U>">
          <t>
            The &lt;B>, &lt;I> and &lt;U> elements are used to identify spans of text
            to be presented with Bold, Italic and Underline emphasis 
            respectively. Each element is of type TextType and permit the 
            same content to be used inside the element as is permitted in the
            enclosing element.
          </t>
          <t>
            The following XML Schema declares the &lt;B>, &lt;I> and &lt;U> elements:
          </t>
          <figure>
            <artwork>
              <![CDATA[
  <element name="B" type="owcp:TextType"/>
  <element name="I" type="owcp:TextType"/>
  <element name="U" type="owcp:TextType"/>
]]>
            </artwork>
          </figure>
        </section>
      </section>
      <section title="End">
        <t>
          The following XML Schema completes the OWCP schema declarations:
        </t>
        <figure>
          <artwork>
<![CDATA[
</schema>
]]>               </artwork>
        </figure>    
      </section>
    </section>

    <section title="Internationalization Considerations">
      <t>
        Might want to consider how a requestor can attempt to provide
        a request that is presented in a language that the requestor
        understands.
      </t>
      <t>
        Any such feature would have to be presented outside the XML
        Request message format since this needs to be kept as clean and 
        compact and with as little room for ambiguity as possible.
      </t>
    </section>
    
    <section title="Security Considerations">
      <t>
        Consider spam control, how do users prevent unwanted
        requests? (EV accreditatio, filtering at dispatcher)
      </t>
      <t>
        People deploying OWCP as a means of controlling access to 
        networking infrastructure must consider the bootstrap 
        issue. In particular since OWCP requires Internet access the
        network administrator must ensure that it is possible to 
        manage the network resources necessary to support an 
        OXCP service when that service is down.
      </t>
    </section>
    
    <section title="IANA Considerations">
      <t>Mention the following:</t>
      <t>Registry of barcode encoding types (QR/DataMatrix/Bitfield)</t>
      <t>Register Schema URI</t>
      <t>Mime type for OWCP message?</t>
    </section>

  </middle>



  <back>
    <references title="Normative References">
            &RFC1035;
    </references>
    <references title="Non Normative References">
      &RFC5395;
    </references>

    <section title="Collected Schema">
      <figure>
        <artwork>
          
          <![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<schema id="XMLSchema1"
    targetNamespace="http://schema.comodo.com/2011/owcp/0.1"
    elementFormDefault="qualified"
    xmlns:owcp="http://schema.comodo.com/2011/owcp/0.1"
    xmlns="http://www.w3.org/2001/XMLSchema">

  <complexType name="RequestType">
    <sequence>
      <element ref="owcp:Header" minOccurs="1" maxOccurs="1"/>
      <element ref="owcp:Body" minOccurs="0" maxOccurs="1"/>
    </sequence>
  </complexType>
  <element name="Request" type="owcp:RequestType"/>

  <complexType name="HeaderType">
    <sequence>
      <element ref="owcp:From" minOccurs="1" maxOccurs="1"/>
      <element ref="owcp:To" minOccurs="1" maxOccurs="1"/>
      <element ref="owcp:Verification" minOccurs="0" 
          maxOccurs="unbounded"/>
      <element ref="owcp:Summary" minOccurs="1" maxOccurs="1"/>
      <element ref="owcp:Reference" minOccurs="0" 
          maxOccurs="unbounded"/>
    </sequence>
    <attribute name="issued" type="dateTime"/>
    <attribute name="identifier" type="anyURI"/>
    <attribute name="type" type="string"/>
  </complexType>
  <element name="Header" type="owcp:HeaderType"/>
  
  <element name="From" type="string"/>
  <element name="To" type="string"/>
  <element name="Verification" type="string"/>
  <element name="Summary" type="owcp:TextType"/>
  <element name="Reference" type="string"/>
  
  <complexType name="BodyType">
    <choice minOccurs="0" maxOccurs="unbounded">
      <element ref="owcp:P" minOccurs="1" maxOccurs="1"/>
      <element ref="owcp:Table" minOccurs="1" maxOccurs="1"/>
      <element ref="owcp:Barcode" minOccurs="1" maxOccurs="1"/>
    </choice>
  </complexType>
  <element name="Body" type="owcp:BodyType"/>

  <element name="P" type="owcp:TextType"/>

  <complexType name="BarcodeType" >
    <attribute name="width" type="integer"/>
    <attribute name="height" type="integer"/>
    <attribute name="data" type="base64Binary"/>
  </complexType>
  <element name="Barcode" type="owcp:BarcodeType"/>
  
  <complexType name="TableType">
    <choice minOccurs="0" maxOccurs="unbounded">

      <element ref="owcp:TH" minOccurs="1" maxOccurs="1"/>
      <element ref="owcp:TR" minOccurs="1" maxOccurs="1"/>
    </choice>
  </complexType>
  <element name="Table" type="owcp:TableType"/>

  <complexType name="RowType">
    <choice minOccurs="0" maxOccurs="unbounded">
      <element ref="owcp:TD" minOccurs="1" maxOccurs="1"/>
    </choice>
  </complexType>  
  <element name="TH" type="owcp:RowType"/>
  <element name="TR" type="owcp:RowType"/>
  
  <element name="TD" type="owcp:TextType"/>


  <complexType name="TextType" mixed="true">
    <choice minOccurs="0" maxOccurs="unbounded">
      <element ref="owcp:Money" maxOccurs="1"/>
      <element ref="owcp:B" maxOccurs="1"/>
      <element ref="owcp:I" maxOccurs="1"/>
      <element ref="owcp:U" maxOccurs="1"/>
    </choice>
  </complexType>
  
  <complexType name="MoneyType">
    <attribute name="currency" type="string" use="required"/>
    <attribute name="amount" type="decimal" use="required"/>
  </complexType>
  <element name="Money" type="owcp:MoneyType"/>

  <element name="B" type="owcp:TextType"/>
  <element name="I" type="owcp:TextType"/>
  <element name="U" type="owcp:TextType"/>  

</schema>
]]>
        </artwork>
      </figure>
      
    </section>
    



  </back>
</rfc>

