Internet Draft                                             A. Melnikov
Expires: December 2008                                      Isode Ltd.
Intended status: Standard Track                          June 21, 2008
                                            
                                            
         The SIEVE mail filtering language - extension for accessing
                             mailbox metadata
              draft-melnikov-sieve-imapext-metadata-04.txt
   
Status of this Memo
   
   By submitting this Internet-Draft, each author represents that any
   applicable patent or other IPR claims of which he or she is aware
   have been or will be disclosed, and any of which he or she becomes
   aware will be disclosed, in accordance with Section 6 of BCP 79.
   
   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as
   Internet-Drafts.
   
   Internet-Drafts are draft documents valid for a maximum of six
   months and may be updated, replaced, or obsoleted by other
   documents at any time. It is inappropriate to use Internet-Drafts
   as reference material or to cite them other than as "work in
   progress."
   
   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/1id-abstracts.txt

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html
   
   A revised version of this draft document will be submitted to the
   RFC editor as a Proposed Standard for the Internet Community.
   Discussion and suggestions for improvement are requested.
   Distribution of this draft is unlimited.
   

Copyright Notice

   Copyright (C) The IETF Trust (2008).

   
Abstract
   
   This memo defines an extension to the SIEVE mail filtering language
   (RFC 3028) for accessing mailbox and server annotations (variables).


1.   Introduction
   
   This memo defines an extension to the SIEVE mail filtering language
   (RFC 3028) for accessing mailbox and server annotations (variables).
   This allows to customize Sieve engine behaviour based on variables
   set using [METADATA], [ACAP], [LDAP], etc.

   An implementation of this extension doesn't need to implement
   [METADATA] or even [IMAP], however it has to use the same data model
   as described in Section 3 of [METADATA]. For example, it should be
   possible to implement the "servermetadata" extension defined in this
   document by making Sieve engine read values from user's LDAP entry.


2.   Conventions Used in this Document
   
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in
   this document are to be interpreted as described in RFC 2119
   [KEYWORDS].
   
   Conventions for notations are as in [SIEVE] section 1.1.

   This document is written with an assumption that readers are familiar
   with data model and terms defined in Section 3 of [METADATA].


3.  mailbox and mboxmetadata Sieve extensions

3.1.  Test mailbox_exists

      Usage:   mailbox_exists <mailbox-names: string-list>

   The "mailbox_exists" test is true if all mailboxes listed in the
   mailbox-names argument exist in the mailstore.
   Note that this test MUST return false for a mailbox which exists
   but is not accessible (for example due to access control
   restrictions) to the user in whose context the Sieve script runs.

   The capability string for use with the require command is "mailbox"
   or "mboxmetadata".

   Example: The following example assumes that the Sieve engine
    also supports "reject" [REJECT] and "fileinto" [SIEVE]. However
    these extensions are not required in order to implement the
    "mailbox".

             require ["fileinto", "reject", "mailbox"];
             if mailbox_exists "Partners" {
                fileinto "Partners";
             } else {
                reject "This message was not accepted by the Mailstore";
             }


3.2 ":create" argument to "fileinto" command

     Usage: fileinto [:create] <mailbox: string>

   If the optional :create argument is specified with "fileinto"
   it instructs Sieve interpreter to create the specified mailbox
   before attempting to deliver the message into the specified
   mailbox. If the mailbox already exists, this argument is ignored.
   Failure to create the specified mailbox is considered to be
   an error.

   The capability string for use with the :create parameter is
   "mailbox".


3.3  Test metadata

      Usage:   metadata [MATCH-TYPE] [COMPARATOR]
               <mailbox: string>
               <annotation-name: string> <key-list: string-list>

   This test retrieves the value of the mailbox
   annotation "annotation-name" for the mailbox "mailbox"
   [METADATA]. The retrieved value is compared to the
   "key-list". The test returns true if the annotation (of the specified
   type) exists and its value matches any of the keys.

   The default match type is ":is". The default comparator is
   "i;ascii-casemap".

   The capability string for use with the require command is
   "mboxmetadata".

   Example: The following example assumes that the Sieve engine
    also supports the "vacation" [VACATION] extension. However
    this extension is not required in order to implement
    the "mboxmetadata" extension.

        require ["mboxmetadata", "vacation"];

        if metadata :is "INBOX"
           "/private/vendor/vendor.isode/auto-replies" "on" {

            vacation text:
        I'm away on holidays till March 2009.
        Expect a delay.
        .
        }


3.4  Test metadata_exists

      Usage:   metadata_exists
               <mailbox: string>
               <annotation-names: string-list>

   The "metadata_exists" test is true if all of the annotations listed
   in the annotation-names argument exist (have non NIL value) for the
   specified mailbox.

   The capability string for use with the require command is
   "mboxmetadata".


4.  servermetadata Sieve extension

4.1  Test server_metadata

      Usage:   server_metadata [MATCH-TYPE] [COMPARATOR]
               <annotation-name: string> <key-list: string-list>

   This test retrieves the value of the server
   annotation "annotation-name" [METADATA]. The retrieved value
   is compared to the "key-list". The test returns true if the
   annotation (of the specified type) exists and its value matches any
   of the keys.

   The default match type is ":is". The default comparator is
   "i;ascii-casemap".

   The capability string for use with the require command is
   "servermetadata".

   Example: The following example assumes that the Sieve engine
    also supports "variables" [Variables] and "enotify" [NOTIFY] and
    "envelope" [SIEVE] extensions. However these extensions are not
    required in order to implement the "servermetadata".
    
        require ["enotify", "servermetadata", "variables", "envelope"];

        if server_metadata :matches
           "/private/vendor/vendor.isode/notification-uri" "*" {
            set "notif_uri" "${0}";
        }

        if not string :is "${notif_uri}" "none" {
            # :matches is used to get the MAIL FROM address
            if envelope :all :matches "from" "*" {
                set "env_from" " [really: ${1}]";
            }

            # :matches is used to get the value of the Subject header
            if header :matches "Subject" "*" {
                set "subject" "${1}";
            }

            # :matches is used to get the address from the From header
            if address :matches :all "from" "*" {
                set "from_addr" "${1}";
            }

            notify :message "${from_addr}${env_from}: ${subject}"
                   "${notif_uri}";
        }


4.2  Test server_metadata_exists

      Usage:   server_metadata_exists
               <annotation-names: string-list>

   Usage:   exists <header-names: string-list>

   The "server_metadata_exists" test is true if server annotations
   with names listed in the annotation-names
   argument exist. All of the annotations must exist or the test
   is false.

   The capability string for use with the require command is
   "servermetadata".


5.   Security Considerations

   Extensions defined in this document deliberately don't provide a way
   to modify per-user (per-server) or per-mailbox data.

   A failure to retrieve data due to server storing annotations being
   down or otherwise inaccessible may alter the result of Sieve
   processing. So implementations SHOULD treat temporary failures to
   retrieve annotations in the same manner they would treat temporary
   failures to retrieve the whole Sieve script.

   Protocols/APIs used to retrive annotations MUST provide the same
   level of confidentiality as protocols/APIs used to retrieve Sieve
   scripts.


6.   IANA Considerations
   
   IANA is requested to add the following registrations to the list of
   Sieve extensions:

   Capability name: "mailbox"
   Description:     adds test for checking for mailbox existence and
                    a new optional argument to fileinto for creating
                    a mailbox before attempting mail delivery.
   RFC number:      this RFC
   Contact address: The Sieve discussion list <ietf-mta-filters@imc.org>
   
   Capability name: "mboxmetadata"
   Description:     adds tests for checking for mailbox existence,
                    checking for mailbox metadata item existence
                    and for retrieving of a mailbox metadata value.
   RFC number:      this RFC
   Contact address: The Sieve discussion list <ietf-mta-filters@imc.org>

   Capability name: "servermetadata"
   Description:     adds tests for checking for server metadata item
                    existence and for retrieving of a server metadata
                    value.
   RFC number:      this RFC
   Contact address: The Sieve discussion list <ietf-mta-filters@imc.org>


6.   References

6.1  Normative References
   
   [KEYWORDS] Bradner, S., "Key words for use in RFCs to Indicate
   Requirement Levels", RFC 2119, March 1997.

   [SIEVE] Guenther, P. and T. Showalter, "Sieve: An Email Filtering
   Language", RFC 5228, January 2008.

   [METADATA] Daboo, C., "IMAP METADATA Extension",
   work in progress, draft-daboo-imap-annotatemore-13.txt


6.2  Informative References

   [IMAP] Crispin, M., "Internet Message Access Protocol - Version
   4rev1", RFC 3501, University of Washington, March 2003.

   [Variables] Homme, K., "Sieve Extension: Variables Extension",
   RFC 5229, January 2008.

   [NOTIFY] Melnikov, A. (Ed.), Leiba, B. (Ed.), Segmuller, W. and
   T. Martin, "Sieve Extension: Notifications", work in progress,
   draft-ietf-sieve-notify-12.txt

   [REJECT] Stone, A. (Ed.), "The SIEVE mail filtering language
   - reject extension", work in progress,
   draft-ietf-sieve-refuse-reject-07.txt

   [VACATION] Showalter, T. and N. Freed, "Sieve Email Filtering:
   Vacation Extension", RFC 5230, January 2008.

   [ACAP] Newman, C. and J. G. Myers, "ACAP -- Application
   Configuration Access Protocol", RFC 2244, November 1997.

   [LDAP] Zeilenga, K. (Ed.), "Lightweight Directory Access
   Protocol (LDAP): Technical Specification Road Map", RFC 4510,
   June 2006.


7.   Acknowledgments
   
   Thanks to Cyrus Daboo for initial motivation for this draft.

   The author would also like to thank the OMA MEM working group
   for providing a set of requirements that made the author realise
   that they can be partially fulfilled by this document.


8.   Author's Addresses
   
   Alexey Melnikov
   Isode Limited
   5 Castle Business Village
   36 Station Road
   Hampton, Middlesex, TW12 2BX
   UK
   
   Email: Alexey.Melnikov@isode.com
   
   
9.   Intellectual Property Rights Statement
   
   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed
   to pertain to the implementation or use of the technology described
   in this document or the extent to which any license under such
   rights might or might not be available; nor does it represent that
   it has made any independent effort to identify any such rights.
   Information on the procedures with respect to rights in RFC
   documents can be found in BCP 78 and BCP 79.
   
   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use
   of such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository
   at http://www.ietf.org/ipr.
   
   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at ietf-
   ipr@ietf.org.
   
10.  Full Copyright Statement
   
   Copyright (C) The IETF Trust (2008).

   This document is subject to the rights, licenses and restrictions
   contained in BCP 78, and except as set forth therein, the authors
   retain all their rights.

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND
   THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
   
Acknowledgement
   
   Funding for the RFC Editor function is provided by the IETF
   Administrative Support Activity (IASA).
   
   
11.  Change Log and Open Issues

  <<NOTE to the RFC editor: please delete this section before
  publication.>>
  
11.1 Change Log
  
   00   First revision
   01   Added :create argument to the fileinto action.
        Added metadata_exists test.
        Added :any tagged argument to specify both "value.shared"
         and "value.priv".
   02   Added servermetadata extension.
   03   Added more examples, minor editorial changes.
   04   Fixed examples, updated the text/examples to match the latest
        METADATA draft, updated references, minor editorial changes.
