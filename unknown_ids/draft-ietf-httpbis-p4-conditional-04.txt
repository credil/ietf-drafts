


Network Working Group                                   R. Fielding, Ed.
Internet-Draft                                              Day Software
Obsoletes: 2616 (if approved)                                  J. Gettys
Intended status: Standards Track                    One Laptop per Child
Expires: March 2, 2009                                          J. Mogul
                                                                      HP
                                                              H. Frystyk
                                                               Microsoft
                                                             L. Masinter
                                                           Adobe Systems
                                                                P. Leach
                                                               Microsoft
                                                          T. Berners-Lee
                                                                 W3C/MIT
                                                           Y. Lafon, Ed.
                                                                     W3C
                                                         J. Reschke, Ed.
                                                              greenbytes
                                                         August 29, 2008


                 HTTP/1.1, part 4: Conditional Requests
                  draft-ietf-httpbis-p4-conditional-04

Status of this Memo

   By submitting this Internet-Draft, each author represents that any
   applicable patent or other IPR claims of which he or she is aware
   have been or will be disclosed, and any of which he or she becomes
   aware will be disclosed, in accordance with Section 6 of BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on March 2, 2009.



Fielding, et al.          Expires March 2, 2009                 [Page 1]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


Abstract

   The Hypertext Transfer Protocol (HTTP) is an application-level
   protocol for distributed, collaborative, hypermedia information
   systems.  HTTP has been in use by the World Wide Web global
   information initiative since 1990.  This document is Part 4 of the
   seven-part specification that defines the protocol referred to as
   "HTTP/1.1" and, taken together, obsoletes RFC 2616.  Part 4 defines
   request header fields for indicating conditional requests and the
   rules for constructing responses to those requests.

Editorial Note (To be removed by RFC Editor)

   Discussion of this draft should take place on the HTTPBIS working
   group mailing list (ietf-http-wg@w3.org).  The current issues list is
   at <http://www.tools.ietf.org/wg/httpbis/trac/report/11> and related
   documents (including fancy diffs) can be found at
   <http://www.tools.ietf.org/wg/httpbis/>.

   The changes in this draft are summarized in Appendix B.4.































Fielding, et al.          Expires March 2, 2009                 [Page 2]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
     1.1.  Requirements . . . . . . . . . . . . . . . . . . . . . . .  4
   2.  Notational Conventions and Generic Grammar . . . . . . . . . .  4
   3.  Entity Tags  . . . . . . . . . . . . . . . . . . . . . . . . .  5
   4.  Status Code Definitions  . . . . . . . . . . . . . . . . . . .  5
     4.1.  304 Not Modified . . . . . . . . . . . . . . . . . . . . .  5
     4.2.  412 Precondition Failed  . . . . . . . . . . . . . . . . .  6
   5.  Weak and Strong Validators . . . . . . . . . . . . . . . . . .  6
   6.  Rules for When to Use Entity Tags and Last-Modified Dates  . .  9
   7.  Header Field Definitions . . . . . . . . . . . . . . . . . . . 11
     7.1.  ETag . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
     7.2.  If-Match . . . . . . . . . . . . . . . . . . . . . . . . . 12
     7.3.  If-Modified-Since  . . . . . . . . . . . . . . . . . . . . 13
     7.4.  If-None-Match  . . . . . . . . . . . . . . . . . . . . . . 14
     7.5.  If-Unmodified-Since  . . . . . . . . . . . . . . . . . . . 16
     7.6.  Last-Modified  . . . . . . . . . . . . . . . . . . . . . . 16
   8.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 17
     8.1.  Message Header Registration  . . . . . . . . . . . . . . . 17
   9.  Security Considerations  . . . . . . . . . . . . . . . . . . . 17
   10. Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 18
   11. References . . . . . . . . . . . . . . . . . . . . . . . . . . 18
     11.1. Normative References . . . . . . . . . . . . . . . . . . . 18
     11.2. Informative References . . . . . . . . . . . . . . . . . . 18
   Appendix A.  Compatibility with Previous Versions  . . . . . . . . 18
     A.1.  Changes from RFC 2616  . . . . . . . . . . . . . . . . . . 18
   Appendix B.  Change Log (to be removed by RFC Editor before
                publication)  . . . . . . . . . . . . . . . . . . . . 19
     B.1.  Since RFC2616  . . . . . . . . . . . . . . . . . . . . . . 19
     B.2.  Since draft-ietf-httpbis-p4-conditional-00 . . . . . . . . 19
     B.3.  Since draft-ietf-httpbis-p4-conditional-01 . . . . . . . . 19
     B.4.  Since draft-ietf-httpbis-p4-conditional-02 . . . . . . . . 19
     B.5.  Since draft-ietf-httpbis-p4-conditional-03 . . . . . . . . 19
   Index  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 21
   Intellectual Property and Copyright Statements . . . . . . . . . . 24














Fielding, et al.          Expires March 2, 2009                 [Page 3]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


1.  Introduction

   This document defines HTTP/1.1 response metadata for indicating
   potential changes to payload content, including modification time
   stamps and opaque entity-tags, and the HTTP conditional request
   mechanisms that allow preconditions to be placed on a request method.
   Conditional GET requests allow for efficient cache updates.  Other
   conditional request methods are used to protect against overwriting
   or misunderstanding the state of a resource that has been changed
   unbeknownst to the requesting client.

   This document is currently disorganized in order to minimize the
   changes between drafts and enable reviewers to see the smaller errata
   changes.  The next draft will reorganize the sections to better
   reflect the content.  In particular, the sections on resource
   metadata will be discussed first and then followed by each
   conditional request-header, concluding with a definition of
   precedence and the expectation of ordering strong validator checks
   before weak validator checks.  It is likely that more content from
   [Part6] will migrate to this part, where appropriate.  The current
   mess reflects how widely dispersed these topics and associated
   requirements had become in [RFC2616].

1.1.  Requirements

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   An implementation is not compliant if it fails to satisfy one or more
   of the MUST or REQUIRED level requirements for the protocols it
   implements.  An implementation that satisfies all the MUST or
   REQUIRED level and all the SHOULD level requirements for its
   protocols is said to be "unconditionally compliant"; one that
   satisfies all the MUST level requirements but not all the SHOULD
   level requirements for its protocols is said to be "conditionally
   compliant."


2.  Notational Conventions and Generic Grammar

   This specification uses the ABNF syntax defined in Section 2.1 of
   [Part1] and the core rules defined in Section 2.2 of [Part1]:
   [[abnf.dep: ABNF syntax and basic rules will be adopted from RFC
   5234, see <http://tools.ietf.org/wg/httpbis/trac/ticket/36>.]]

     quoted-string = <quoted-string, defined in [Part1], Section 2.2>




Fielding, et al.          Expires March 2, 2009                 [Page 4]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


   The ABNF rules below are defined in other parts:

     HTTP-date     = <HTTP-date, defined in [Part1], Section 3.3.1>


3.  Entity Tags

   Entity tags are used for comparing two or more entities from the same
   requested resource.  HTTP/1.1 uses entity tags in the ETag
   (Section 7.1), If-Match (Section 7.2), If-None-Match (Section 7.4),
   and If-Range (Section 6.3 of [Part5]) header fields.  The definition
   of how they are used and compared as cache validators is in
   Section 5.  An entity tag consists of an opaque quoted string,
   possibly prefixed by a weakness indicator.

     entity-tag = [ weak ] opaque-tag
     weak       = "W/"
     opaque-tag = quoted-string

   A "strong entity tag" MAY be shared by two entities of a resource
   only if they are equivalent by octet equality.

   A "weak entity tag," indicated by the "W/" prefix, MAY be shared by
   two entities of a resource only if the entities are equivalent and
   could be substituted for each other with no significant change in
   semantics.  A weak entity tag can only be used for weak comparison.

   An entity tag MUST be unique across all versions of all entities
   associated with a particular resource.  A given entity tag value MAY
   be used for entities obtained by requests on different URIs.  The use
   of the same entity tag value in conjunction with entities obtained by
   requests on different URIs does not imply the equivalence of those
   entities.


4.  Status Code Definitions

4.1.  304 Not Modified

   If the client has performed a conditional GET request and access is
   allowed, but the document has not been modified, the server SHOULD
   respond with this status code.  The 304 response MUST NOT contain a
   message-body, and thus is always terminated by the first empty line
   after the header fields.

   The response MUST include the following header fields:





Fielding, et al.          Expires March 2, 2009                 [Page 5]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


   o  Date, unless its omission is required by Section 8.3.1 of [Part1].

      If a clockless origin server obeys these rules, and proxies and
      clients add their own Date to any response received without one
      (as already specified by Section 8.3 of [Part1], caches will
      operate correctly.

   o  ETag and/or Content-Location, if the header would have been sent
      in a 200 response to the same request.

   o  Expires, Cache-Control, and/or Vary, if the field-value might
      differ from that sent in any previous response for the same
      variant.

   If the conditional GET used a strong cache validator (see Section 5),
   the response SHOULD NOT include other entity-headers.  Otherwise
   (i.e., the conditional GET used a weak validator), the response MUST
   NOT include other entity-headers; this prevents inconsistencies
   between cached entity-bodies and updated headers.

   If a 304 response indicates an entity not currently cached, then the
   cache MUST disregard the response and repeat the request without the
   conditional.

   If a cache uses a received 304 response to update a cache entry, the
   cache MUST update the entry to reflect any new field values given in
   the response.

4.2.  412 Precondition Failed

   The precondition given in one or more of the request-header fields
   evaluated to false when it was tested on the server.  This response
   code allows the client to place preconditions on the current resource
   metainformation (header field data) and thus prevent the requested
   method from being applied to a resource other than the one intended.


5.  Weak and Strong Validators

   Since both origin servers and caches will compare two validators to
   decide if they represent the same or different entities, one normally
   would expect that if the entity (the entity-body or any entity-
   headers) changes in any way, then the associated validator would
   change as well.  If this is true, then we call this validator a
   "strong validator."

   However, there might be cases when a server prefers to change the
   validator only on semantically significant changes, and not when



Fielding, et al.          Expires March 2, 2009                 [Page 6]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


   insignificant aspects of the entity change.  A validator that does
   not always change when the resource changes is a "weak validator."

   Entity tags are normally "strong validators," but the protocol
   provides a mechanism to tag an entity tag as "weak."  One can think
   of a strong validator as one that changes whenever the bits of an
   entity changes, while a weak value changes whenever the meaning of an
   entity changes.  Alternatively, one can think of a strong validator
   as part of an identifier for a specific entity, while a weak
   validator is part of an identifier for a set of semantically
   equivalent entities.

      Note: One example of a strong validator is an integer that is
      incremented in stable storage every time an entity is changed.

      An entity's modification time, if represented with one-second
      resolution, could be a weak validator, since it is possible that
      the resource might be modified twice during a single second.

      Support for weak validators is optional.  However, weak validators
      allow for more efficient caching of equivalent objects; for
      example, a hit counter on a site is probably good enough if it is
      updated every few days or weeks, and any value during that period
      is likely "good enough" to be equivalent.

   A "use" of a validator is either when a client generates a request
   and includes the validator in a validating header field, or when a
   server compares two validators.

   Strong validators are usable in any context.  Weak validators are
   only usable in contexts that do not depend on exact equality of an
   entity.  For example, either kind is usable for a conditional GET of
   a full entity.  However, only a strong validator is usable for a sub-
   range retrieval, since otherwise the client might end up with an
   internally inconsistent entity.

   Clients MUST NOT use weak validators in range requests ([Part5]).

   The only function that HTTP/1.1 defines on validators is comparison.
   There are two validator comparison functions, depending on whether
   the comparison context allows the use of weak validators or not:

   o  The strong comparison function: in order to be considered equal,
      both opaque-tags MUST be identical character-by-character, and
      both MUST NOT be weak.

   o  The weak comparison function: in order to be considered equal,
      both opaque-tags MUST be identical character-by-character.



Fielding, et al.          Expires March 2, 2009                 [Page 7]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


   The example below shows the results for a set of entity tag pairs,
   and both the weak and strong comparison function results:

   +--------+--------+-------------------+-----------------+
   | ETag 1 | ETag 2 | Strong Comparison | Weak Comparison |
   +--------+--------+-------------------+-----------------+
   | W/"1"  | W/"1"  | no match          | match           |
   | W/"1"  | W/"2"  | no match          | no match        |
   | W/"1"  | "1"    | no match          | match           |
   | "1"    | "1"    | match             | match           |
   +--------+--------+-------------------+-----------------+

   An entity tag is strong unless it is explicitly tagged as weak.
   Section 3 gives the syntax for entity tags.

   A Last-Modified time, when used as a validator in a request, is
   implicitly weak unless it is possible to deduce that it is strong,
   using the following rules:

   o  The validator is being compared by an origin server to the actual
      current validator for the entity and,

   o  That origin server reliably knows that the associated entity did
      not change twice during the second covered by the presented
      validator.

   or

   o  The validator is about to be used by a client in an If-Modified-
      Since or If-Unmodified-Since header, because the client has a
      cache entry for the associated entity, and

   o  That cache entry includes a Date value, which gives the time when
      the origin server sent the original response, and

   o  The presented Last-Modified time is at least 60 seconds before the
      Date value.

   or

   o  The validator is being compared by an intermediate cache to the
      validator stored in its cache entry for the entity, and

   o  That cache entry includes a Date value, which gives the time when
      the origin server sent the original response, and

   o  The presented Last-Modified time is at least 60 seconds before the
      Date value.



Fielding, et al.          Expires March 2, 2009                 [Page 8]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


   This method relies on the fact that if two different responses were
   sent by the origin server during the same second, but both had the
   same Last-Modified time, then at least one of those responses would
   have a Date value equal to its Last-Modified time.  The arbitrary 60-
   second limit guards against the possibility that the Date and Last-
   Modified values are generated from different clocks, or at somewhat
   different times during the preparation of the response.  An
   implementation MAY use a value larger than 60 seconds, if it is
   believed that 60 seconds is too short.

   If a client wishes to perform a sub-range retrieval on a value for
   which it has only a Last-Modified time and no opaque validator, it
   MAY do this only if the Last-Modified time is strong in the sense
   described here.

   A cache or origin server receiving a conditional range request
   ([Part5]) MUST use the strong comparison function to evaluate the
   condition.

   These rules allow HTTP/1.1 caches and clients to safely perform sub-
   range retrievals on values that have been obtained from HTTP/1.0
   servers.


6.  Rules for When to Use Entity Tags and Last-Modified Dates

   We adopt a set of rules and recommendations for origin servers,
   clients, and caches regarding when various validator types ought to
   be used, and for what purposes.

   HTTP/1.1 origin servers:

   o  SHOULD send an entity tag validator unless it is not feasible to
      generate one.

   o  MAY send a weak entity tag instead of a strong entity tag, if
      performance considerations support the use of weak entity tags, or
      if it is unfeasible to send a strong entity tag.

   o  SHOULD send a Last-Modified value if it is feasible to send one,
      unless the risk of a breakdown in semantic transparency that could
      result from using this date in an If-Modified-Since header would
      lead to serious problems.

   In other words, the preferred behavior for an HTTP/1.1 origin server
   is to send both a strong entity tag and a Last-Modified value.

   In order to be legal, a strong entity tag MUST change whenever the



Fielding, et al.          Expires March 2, 2009                 [Page 9]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


   associated entity changes in any way.  A weak entity tag SHOULD
   change whenever the associated entity changes in a semantically
   significant way.

      Note: in order to provide semantically transparent caching, an
      origin server must avoid reusing a specific strong entity tag
      value for two different entities, or reusing a specific weak
      entity tag value for two semantically different entities.  Cache
      entries might persist for arbitrarily long periods, regardless of
      expiration times, so it might be inappropriate to expect that a
      cache will never again attempt to validate an entry using a
      validator that it obtained at some point in the past.

   HTTP/1.1 clients:

   o  If an entity tag has been provided by the origin server, MUST use
      that entity tag in any cache-conditional request (using If-Match
      or If-None-Match).

   o  If only a Last-Modified value has been provided by the origin
      server, SHOULD use that value in non-subrange cache-conditional
      requests (using If-Modified-Since).

   o  If only a Last-Modified value has been provided by an HTTP/1.0
      origin server, MAY use that value in subrange cache-conditional
      requests (using If-Unmodified-Since:).  The user agent SHOULD
      provide a way to disable this, in case of difficulty.

   o  If both an entity tag and a Last-Modified value have been provided
      by the origin server, SHOULD use both validators in cache-
      conditional requests.  This allows both HTTP/1.0 and HTTP/1.1
      caches to respond appropriately.

   An HTTP/1.1 origin server, upon receiving a conditional request that
   includes both a Last-Modified date (e.g., in an If-Modified-Since or
   If-Unmodified-Since header field) and one or more entity tags (e.g.,
   in an If-Match, If-None-Match, or If-Range header field) as cache
   validators, MUST NOT return a response status of 304 (Not Modified)
   unless doing so is consistent with all of the conditional header
   fields in the request.

   An HTTP/1.1 caching proxy, upon receiving a conditional request that
   includes both a Last-Modified date and one or more entity tags as
   cache validators, MUST NOT return a locally cached response to the
   client unless that cached response is consistent with all of the
   conditional header fields in the request.





Fielding, et al.          Expires March 2, 2009                [Page 10]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


      Note: The general principle behind these rules is that HTTP/1.1
      servers and clients should transmit as much non-redundant
      information as is available in their responses and requests.
      HTTP/1.1 systems receiving this information will make the most
      conservative assumptions about the validators they receive.

      HTTP/1.0 clients and caches will ignore entity tags.  Generally,
      last-modified values received or used by these systems will
      support transparent and efficient caching, and so HTTP/1.1 origin
      servers should provide Last-Modified values.  In those rare cases
      where the use of a Last-Modified value as a validator by an
      HTTP/1.0 system could result in a serious problem, then HTTP/1.1
      origin servers should not provide one.


7.  Header Field Definitions

   This section defines the syntax and semantics of HTTP/1.1 header
   fields related to conditional requests.

   For entity-header fields, both sender and recipient refer to either
   the client or the server, depending on who sends and who receives the
   entity.

7.1.  ETag

   The ETag response-header field provides the current value of the
   entity tag for the requested variant.  The headers used with entity
   tags are described in Sections 7.2 and 7.4 of this document, and in
   Section 6.3 of [Part5].  The entity tag MAY be used for comparison
   with other entities from the same resource (see Section 5).

     ETag = "ETag" ":" entity-tag

   Examples:

      ETag: "xyzzy"
      ETag: W/"xyzzy"
      ETag: ""

   The ETag response-header field value, an entity tag, provides for an
   "opaque" cache validator.  This might allow more reliable validation
   in situations where it is inconvenient to store modification dates,
   where the one-second resolution of HTTP date values is not
   sufficient, or where the origin server wishes to avoid certain
   paradoxes that might arise from the use of modification dates.

   The principle behind entity tags is that only the service author



Fielding, et al.          Expires March 2, 2009                [Page 11]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


   knows the semantics of a resource well enough to select an
   appropriate cache validation mechanism, and the specification of any
   validator comparison function more complex than byte-equality would
   open up a can of worms.  Thus, comparisons of any other headers
   (except Last-Modified, for compatibility with HTTP/1.0) are never
   used for purposes of validating a cache entry.

7.2.  If-Match

   The If-Match request-header field is used with a method to make it
   conditional.  A client that has one or more entities previously
   obtained from the resource can verify that one of those entities is
   current by including a list of their associated entity tags in the
   If-Match header field.  Entity tags are defined in Section 3.  The
   purpose of this feature is to allow efficient updates of cached
   information with a minimum amount of transaction overhead.  It is
   also used, on updating requests, to prevent inadvertent modification
   of the wrong version of a resource.  As a special case, the value "*"
   matches any current entity of the resource.

     If-Match = "If-Match" ":" ( "*" | 1#entity-tag )

   If any of the entity tags match the entity tag of the entity that
   would have been returned in the response to a similar GET request
   (without the If-Match header) on that resource, or if "*" is given
   and any current entity exists for that resource, then the server MAY
   perform the requested method as if the If-Match header field did not
   exist.

   A server MUST use the strong comparison function (see Section 5) to
   compare the entity tags in If-Match.

   If none of the entity tags match, or if "*" is given and no current
   entity exists, the server MUST NOT perform the requested method, and
   MUST return a 412 (Precondition Failed) response.  This behavior is
   most useful when the client wants to prevent an updating method, such
   as PUT, from modifying a resource that has changed since the client
   last retrieved it.

   If the request would, without the If-Match header field, result in
   anything other than a 2xx or 412 status, then the If-Match header
   MUST be ignored.

   The meaning of "If-Match: *" is that the method SHOULD be performed
   if the representation selected by the origin server (or by a cache,
   possibly using the Vary mechanism, see Section 16.5 of [Part6])
   exists, and MUST NOT be performed if the representation does not
   exist.



Fielding, et al.          Expires March 2, 2009                [Page 12]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


   A request intended to update a resource (e.g., a PUT) MAY include an
   If-Match header field to signal that the request method MUST NOT be
   applied if the entity corresponding to the If-Match value (a single
   entity tag) is no longer a representation of that resource.  This
   allows the user to indicate that they do not wish the request to be
   successful if the resource has been changed without their knowledge.
   Examples:

       If-Match: "xyzzy"
       If-Match: "xyzzy", "r2d2xxxx", "c3piozzzz"
       If-Match: *

   The result of a request having both an If-Match header field and
   either an If-None-Match or an If-Modified-Since header fields is
   undefined by this specification.

7.3.  If-Modified-Since

   The If-Modified-Since request-header field is used with a method to
   make it conditional: if the requested variant has not been modified
   since the time specified in this field, an entity will not be
   returned from the server; instead, a 304 (Not Modified) response will
   be returned without any message-body.

     If-Modified-Since = "If-Modified-Since" ":" HTTP-date

   An example of the field is:

       If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT

   A GET method with an If-Modified-Since header and no Range header
   requests that the identified entity be transferred only if it has
   been modified since the date given by the If-Modified-Since header.
   The algorithm for determining this includes the following cases:

   1.  If the request would normally result in anything other than a 200
       (OK) status, or if the passed If-Modified-Since date is invalid,
       the response is exactly the same as for a normal GET.  A date
       which is later than the server's current time is invalid.

   2.  If the variant has been modified since the If-Modified-Since
       date, the response is exactly the same as for a normal GET.

   3.  If the variant has not been modified since a valid If-Modified-
       Since date, the server SHOULD return a 304 (Not Modified)
       response.

   The purpose of this feature is to allow efficient updates of cached



Fielding, et al.          Expires March 2, 2009                [Page 13]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


   information with a minimum amount of transaction overhead.

      Note: The Range request-header field modifies the meaning of If-
      Modified-Since; see Section 6.4 of [Part5] for full details.

      Note: If-Modified-Since times are interpreted by the server, whose
      clock might not be synchronized with the client.

      Note: When handling an If-Modified-Since header field, some
      servers will use an exact date comparison function, rather than a
      less-than function, for deciding whether to send a 304 (Not
      Modified) response.  To get best results when sending an If-
      Modified-Since header field for cache validation, clients are
      advised to use the exact date string received in a previous Last-
      Modified header field whenever possible.

      Note: If a client uses an arbitrary date in the If-Modified-Since
      header instead of a date taken from the Last-Modified header for
      the same request, the client should be aware of the fact that this
      date is interpreted in the server's understanding of time.  The
      client should consider unsynchronized clocks and rounding problems
      due to the different encodings of time between the client and
      server.  This includes the possibility of race conditions if the
      document has changed between the time it was first requested and
      the If-Modified-Since date of a subsequent request, and the
      possibility of clock-skew-related problems if the If-Modified-
      Since date is derived from the client's clock without correction
      to the server's clock.  Corrections for different time bases
      between client and server are at best approximate due to network
      latency.

   The result of a request having both an If-Modified-Since header field
   and either an If-Match or an If-Unmodified-Since header fields is
   undefined by this specification.

7.4.  If-None-Match

   The If-None-Match request-header field is used with a method to make
   it conditional.  A client that has one or more entities previously
   obtained from the resource can verify that none of those entities is
   current by including a list of their associated entity tags in the
   If-None-Match header field.  The purpose of this feature is to allow
   efficient updates of cached information with a minimum amount of
   transaction overhead.  It is also used to prevent a method (e.g.
   PUT) from inadvertently modifying an existing resource when the
   client believes that the resource does not exist.

   As a special case, the value "*" matches any current entity of the



Fielding, et al.          Expires March 2, 2009                [Page 14]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


   resource.

     If-None-Match = "If-None-Match" ":" ( "*" | 1#entity-tag )

   If any of the entity tags match the entity tag of the entity that
   would have been returned in the response to a similar GET request
   (without the If-None-Match header) on that resource, or if "*" is
   given and any current entity exists for that resource, then the
   server MUST NOT perform the requested method, unless required to do
   so because the resource's modification date fails to match that
   supplied in an If-Modified-Since header field in the request.
   Instead, if the request method was GET or HEAD, the server SHOULD
   respond with a 304 (Not Modified) response, including the cache-
   related header fields (particularly ETag) of one of the entities that
   matched.  For all other request methods, the server MUST respond with
   a status of 412 (Precondition Failed).

   See Section 5 for rules on how to determine if two entity tags match.

   If none of the entity tags match, then the server MAY perform the
   requested method as if the If-None-Match header field did not exist,
   but MUST also ignore any If-Modified-Since header field(s) in the
   request.  That is, if no entity tags match, then the server MUST NOT
   return a 304 (Not Modified) response.

   If the request would, without the If-None-Match header field, result
   in anything other than a 2xx or 304 status, then the If-None-Match
   header MUST be ignored.  (See Section 6 for a discussion of server
   behavior when both If-Modified-Since and If-None-Match appear in the
   same request.)

   The meaning of "If-None-Match: *" is that the method MUST NOT be
   performed if the representation selected by the origin server (or by
   a cache, possibly using the Vary mechanism, see Section 16.5 of
   [Part6]) exists, and SHOULD be performed if the representation does
   not exist.  This feature is intended to be useful in preventing races
   between PUT operations.

   Examples:

       If-None-Match: "xyzzy"
       If-None-Match: W/"xyzzy"
       If-None-Match: "xyzzy", "r2d2xxxx", "c3piozzzz"
       If-None-Match: W/"xyzzy", W/"r2d2xxxx", W/"c3piozzzz"
       If-None-Match: *

   The result of a request having both an If-None-Match header field and
   either an If-Match or an If-Unmodified-Since header fields is



Fielding, et al.          Expires March 2, 2009                [Page 15]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


   undefined by this specification.

7.5.  If-Unmodified-Since

   The If-Unmodified-Since request-header field is used with a method to
   make it conditional.  If the requested resource has not been modified
   since the time specified in this field, the server SHOULD perform the
   requested operation as if the If-Unmodified-Since header were not
   present.

   If the requested variant has been modified since the specified time,
   the server MUST NOT perform the requested operation, and MUST return
   a 412 (Precondition Failed).

     If-Unmodified-Since = "If-Unmodified-Since" ":" HTTP-date

   An example of the field is:

       If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT

   If the request normally (i.e., without the If-Unmodified-Since
   header) would result in anything other than a 2xx or 412 status, the
   If-Unmodified-Since header SHOULD be ignored.

   If the specified date is invalid, the header is ignored.

   The result of a request having both an If-Unmodified-Since header
   field and either an If-None-Match or an If-Modified-Since header
   fields is undefined by this specification.

7.6.  Last-Modified

   The Last-Modified entity-header field indicates the date and time at
   which the origin server believes the variant was last modified.

     Last-Modified  = "Last-Modified" ":" HTTP-date

   An example of its use is

       Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT

   The exact meaning of this header field depends on the implementation
   of the origin server and the nature of the original resource.  For
   files, it may be just the file system last-modified time.  For
   entities with dynamically included parts, it may be the most recent
   of the set of last-modify times for its component parts.  For
   database gateways, it may be the last-update time stamp of the
   record.  For virtual objects, it may be the last time the internal



Fielding, et al.          Expires March 2, 2009                [Page 16]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


   state changed.

   An origin server MUST NOT send a Last-Modified date which is later
   than the server's time of message origination.  In such cases, where
   the resource's last modification would indicate some time in the
   future, the server MUST replace that date with the message
   origination date.

   An origin server SHOULD obtain the Last-Modified value of the entity
   as close as possible to the time that it generates the Date value of
   its response.  This allows a recipient to make an accurate assessment
   of the entity's modification time, especially if the entity changes
   near the time that the response is generated.

   HTTP/1.1 servers SHOULD send Last-Modified whenever feasible.

   The Last-Modified entity-header field value is often used as a cache
   validator.  In simple terms, a cache entry is considered to be valid
   if the entity has not been modified since the Last-Modified value.


8.  IANA Considerations

8.1.  Message Header Registration

   The Message Header Registry located at <http://www.iana.org/
   assignments/message-headers/message-header-index.html> should be
   updated with the permanent registrations below (see [RFC3864]):

   +---------------------+----------+----------+-------------+
   | Header Field Name   | Protocol | Status   | Reference   |
   +---------------------+----------+----------+-------------+
   | ETag                | http     | standard | Section 7.1 |
   | If-Match            | http     | standard | Section 7.2 |
   | If-Modified-Since   | http     | standard | Section 7.3 |
   | If-None-Match       | http     | standard | Section 7.4 |
   | If-Unmodified-Since | http     | standard | Section 7.5 |
   | Last-Modified       | http     | standard | Section 7.6 |
   +---------------------+----------+----------+-------------+

   The change controller is: "IETF (iesg@ietf.org) - Internet
   Engineering Task Force".


9.  Security Considerations

   No additional security considerations have been identified beyond
   those applicable to HTTP in general [Part1].



Fielding, et al.          Expires March 2, 2009                [Page 17]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


10.  Acknowledgments


11.  References

11.1.  Normative References

   [Part1]    Fielding, R., Ed., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., Berners-Lee, T., Lafon, Y., Ed.,
              and J. Reschke, Ed., "HTTP/1.1, part 1: URIs, Connections,
              and Message Parsing", draft-ietf-httpbis-p1-messaging-04
              (work in progress), August 2008.

   [Part5]    Fielding, R., Ed., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., Berners-Lee, T., Lafon, Y., Ed.,
              and J. Reschke, Ed., "HTTP/1.1, part 5: Range Requests and
              Partial Responses", draft-ietf-httpbis-p5-range-04 (work
              in progress), August 2008.

   [Part6]    Fielding, R., Ed., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., Berners-Lee, T., Lafon, Y., Ed.,
              and J. Reschke, Ed., "HTTP/1.1, part 6: Caching",
              draft-ietf-httpbis-p6-cache-04 (work in progress),
              August 2008.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

11.2.  Informative References

   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616, June 1999.

   [RFC3864]  Klyne, G., Nottingham, M., and J. Mogul, "Registration
              Procedures for Message Header Fields", BCP 90, RFC 3864,
              September 2004.


Appendix A.  Compatibility with Previous Versions

A.1.  Changes from RFC 2616

   Allow weak entity tags in all requests except range requests
   (Sections 5 and 7.4).






Fielding, et al.          Expires March 2, 2009                [Page 18]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


Appendix B.  Change Log (to be removed by RFC Editor before publication)

B.1.  Since RFC2616

   Extracted relevant partitions from [RFC2616].

B.2.  Since draft-ietf-httpbis-p4-conditional-00

   Closed issues:

   o  <http://www3.tools.ietf.org/wg/httpbis/trac/ticket/35>: "Normative
      and Informative references"

   Other changes:

   o  Move definitions of 304 and 412 condition codes from Part2.

B.3.  Since draft-ietf-httpbis-p4-conditional-01

   Ongoing work on ABNF conversion
   (<http://www3.tools.ietf.org/wg/httpbis/trac/ticket/36>):

   o  Add explicit references to BNF syntax and rules imported from
      other parts of the specification.

B.4.  Since draft-ietf-httpbis-p4-conditional-02

   Closed issues:

   o  <http://www3.tools.ietf.org/wg/httpbis/trac/ticket/116>: "Weak
      ETags on non-GET requests"

   Ongoing work on IANA Message Header Registration
   (<http://www3.tools.ietf.org/wg/httpbis/trac/ticket/40>):

   o  Reference RFC 3984, and update header registrations for headers
      defined in this document.

B.5.  Since draft-ietf-httpbis-p4-conditional-03

   Closed issues:

   o  <http://www3.tools.ietf.org/wg/httpbis/trac/ticket/71>: "Examples
      for ETag matching"

   o  <http://www3.tools.ietf.org/wg/httpbis/trac/ticket/124>: "'entity
      value' undefined"




Fielding, et al.          Expires March 2, 2009                [Page 19]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


   o  <http://www3.tools.ietf.org/wg/httpbis/trac/ticket/126>: "bogus
      2068 Date header reference"


Index

   3
      304 Not Modified (status code)  5

   4
      412 Precondition Failed (status code)  6

   E
      ETag header  11

   G
      Grammar
         entity-tag  5
         ETag  11
         If-Match  12
         If-Modified-Since  13
         If-None-Match  15
         If-Unmodified-Since  16
         Last-Modified  16
         opaque-tag  5
         weak  5

   H
      Headers
         ETag  11
         If-Match  12
         If-Modified-Since  13
         If-None-Match  14
         If-Unmodified-Since  16
         Last-Modified  16

   I
      If-Match header  12
      If-Modified-Since header  13
      If-None-Match header  14
      If-Unmodified-Since header  16

   L
      Last-Modified header  16

   S
      Status Codes
         304 Not Modified  5



Fielding, et al.          Expires March 2, 2009                [Page 20]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


         412 Precondition Failed  6


Authors' Addresses

   Roy T. Fielding (editor)
   Day Software
   23 Corporate Plaza DR, Suite 280
   Newport Beach, CA  92660
   USA

   Phone: +1-949-706-5300
   Fax:   +1-949-706-5305
   Email: fielding@gbiv.com
   URI:   http://roy.gbiv.com/


   Jim Gettys
   One Laptop per Child
   21 Oak Knoll Road
   Carlisle, MA  01741
   USA

   Email: jg@laptop.org
   URI:   http://www.laptop.org/


   Jeffrey C. Mogul
   Hewlett-Packard Company
   HP Labs, Large Scale Systems Group
   1501 Page Mill Road, MS 1177
   Palo Alto, CA  94304
   USA

   Email: JeffMogul@acm.org


   Henrik Frystyk Nielsen
   Microsoft Corporation
   1 Microsoft Way
   Redmond, WA  98052
   USA

   Email: henrikn@microsoft.com







Fielding, et al.          Expires March 2, 2009                [Page 21]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


   Larry Masinter
   Adobe Systems, Incorporated
   345 Park Ave
   San Jose, CA  95110
   USA

   Email: LMM@acm.org
   URI:   http://larry.masinter.net/


   Paul J. Leach
   Microsoft Corporation
   1 Microsoft Way
   Redmond, WA  98052

   Email: paulle@microsoft.com


   Tim Berners-Lee
   World Wide Web Consortium
   MIT Computer Science and Artificial Intelligence Laboratory
   The Stata Center, Building 32
   32 Vassar Street
   Cambridge, MA  02139
   USA

   Email: timbl@w3.org
   URI:   http://www.w3.org/People/Berners-Lee/


   Yves Lafon (editor)
   World Wide Web Consortium
   W3C / ERCIM
   2004, rte des Lucioles
   Sophia-Antipolis, AM  06902
   France

   Email: ylafon@w3.org
   URI:   http://www.raubacapeu.net/people/yves/












Fielding, et al.          Expires March 2, 2009                [Page 22]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


   Julian F. Reschke (editor)
   greenbytes GmbH
   Hafenweg 16
   Muenster, NW  48155
   Germany

   Phone: +49 251 2807760
   Fax:   +49 251 2807761
   Email: julian.reschke@greenbytes.de
   URI:   http://greenbytes.de/tech/webdav/









































Fielding, et al.          Expires March 2, 2009                [Page 23]

Internet-Draft              HTTP/1.1, Part 4                 August 2008


Full Copyright Statement

   Copyright (C) The IETF Trust (2008).

   This document is subject to the rights, licenses and restrictions
   contained in BCP 78, and except as set forth therein, the authors
   retain all their rights.

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND
   THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Intellectual Property

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.











Fielding, et al.          Expires March 2, 2009                [Page 24]

