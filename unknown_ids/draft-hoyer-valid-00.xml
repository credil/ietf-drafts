<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
	<!ENTITY rfc2119 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
 ]>
<rfc category="std" ipr="trust200902" docName="draft-hoyer-valid-00">
	<?rfc toc="yes" ?>
	<?rfc symrefs="yes" ?>
	<?rfc sortrefs="yes"?>
	<?rfc iprnotified="no" ?>
	<?rfc strict="yes" ?>
	<front>
		<title>VALID</title>
		<author initials="P." surname="Hoyer" fullname="Philip Hoyer">
			<organization abbrev="ActivIdentity"> ActivIdentity, Inc. </organization>
			<address>
				<postal>
					<street>117 Waterloo Road</street>
					<city>London</city>
					<region>SE1</region>
					<code>8UL</code>
					<country>UK</country>
				</postal>
				<phone>+44 (0) 20 7744 6455</phone>
				<email>phoyer@actividentity.com</email>
			</address>
		</author>
		<author initials="T." surname="Moses" fullname="Tim Moses">
			<organization abbrev="Entrust"> Entrust, Inc. </organization>
			<address>
				<postal>
					<street>1000 Innovation Drive</street>
					<city>Ottawa</city>
					<region>Ontario</region>
					<code>K2K 3E7</code>
					<country>Canada</country>
				</postal>
				<phone>+1 (613) 270-3400</phone>
				<email>tim.mosesi@entrust.com</email>
			</address>
		</author>		<author initials="M." surname="Pei" fullname="Mingliang Pei">
			<organization abbrev="VeriSign"> VeriSign, Inc. </organization>
			<address>
				<postal>
					<street>487 E. Middlefield Road</street>
					<city>Mountain View</city>
					<region>CA</region>
					<code>94043</code>
					<country>USA</country>
				</postal>
				<phone>+1 650 426 5173</phone>
				<email>mpei@verisign.com</email>
			</address>
		</author>
		<author initials="S." surname="Machani" fullname="Salah Machani">
			<organization abbrev="Diversinet"> Diversinet, Inc. </organization>
			<address>
				<postal>
					<street>2225 Sheppard Avenue East</street>
					<street>Suite 1801</street>
					<city>Toronto</city>
					<region>Ontario</region>
					<code>M2J 5C2</code>
					<country>Canada</country>
				</postal>
				<phone>+1 416 756 2324 Ext. 321</phone>
				<email>smachani@diversinet.com</email>
			</address>
		</author>
		<date month="July" year="2009"/>
		<abstract>
			<t>This document describes a Web-service interface standard for an authentication-data validation service that supports risk-based, multi-factor authentication.This standard enables enterprises to
				deploy best-of-breed solutions combining components from different vendors into the
				same infrastructure. </t>
		</abstract>
	</front>
	<middle>
		<section title="Introduction">
			<t>The Authentication-Data Validation Service Interface definition (VALID) describes a Web-service interface for a validation server.  The specification reuses data definitions from <xref target="SAML"/>, <xref target="WS-Security"/> and <xref target="WS-Trust"/> and operates over version 1.2 of <xref target="SOAP"/>.  Upon successful validation, the validation server returns a SAML assertion containing verified attributes of the authenticated end-user or a hardware or software device under the end-user's control.  Communications between the end-user and the application are not required to follow the Web-services programming model.</t>
				
				<section title="Key Words">
					<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD
						NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as
						described in <xref target="RFC2119"/>.</t>
				</section>				
				
				<section title="Notation">
					<t>This specification uses the following syntax to define outlines for messages:</t>
					<t>
					<list style="hanging">
					<t>The syntax appears as an XML instance.</t>
					<t>Characters are appended to elements and attributes to indicate cardinality:</t>
					<t>"?" (0 or 1)</t>
					<t>"*" (0 or more)</t>
					<t>"+" (1 or more)</t>
					<t>The character "|" is used to indicate a choice between alternatives.</t>
					<t>The characters "(" and ")" are used to indicate that contained items are to be treated as a group with respect to cardinality or choice.</t>
					<t>The characters "[" and "]" are used to call out references and property names.</t>
					<t>Additional child elements and/or attributes MAY be added at the indicated extension points (see <xref target="Extensibility"/>) but MUST NOT contradict the semantics of the parent and/or owner, respectively. By default, if a receiver does not recognize an extension, the receiver SHOULD ignore the extension; exceptions to this processing rule, if any, are clearly indicated below.</t>
					<t>XML namespace prefixes (see Table 1) are used to indicate the namespace of the element being defined.</t>
					<t>Elements and Attributes defined by this specification are referred to in the text of this document using XPath 1.0 expressions. Extensibility points are referred to using an extended version of this syntax:</t>
					<t>
					<list style="hanging">
					<t>An element extensibility point is referred to using {any} in place of the element name. This indicates that any element name can be used, from any namespace other than the namespace of this specification.</t>
					<t>An attribute extensibility point is referred to using @{any} in place of the attribute name. This indicates that any attribute name can be used, from any namespace other than the namespace of this specification</t>
						</list>
						</t>
					</list>
					</t>
				</section>				
			
		<section title="Namespaces">
			<t>The following XML namespace prefixes are used in the specification.</t>		
					<figure>
						<artwork><![CDATA[
env:    http://www.w3.org/2003/05/soap-envelope
saml:   urn:oasis:names:tc:SAML:2.0:assertion
valid:  urn:ietf:params:xml:ns:valid
wsp:    http://www.w3.org/ns/ws-policy
wss:    http://docs.oasis-open.org/wss/2004/01/
         oasis-200401-wss-wssecurity-secext-1.0
wst:    http://docs.oasis-open.org/ws-sx/ws-trust/200512
wst14:  http://docs.oasis-open.org/ws-sx/ws-trust/200802
xsd:    http://www.w3.org/2001/XMLSchema
					]]></artwork>
					</figure>				
		</section>
		
		<section title="Terminology">
			<t>The following terms are used in this document. <list style="hanging">
					<t hangText="Application:">The system component that controls access to sensitive resources by authenticated end-users.</t>
					<t hangText="Authentication data:">Information exchanged between the end-user and the validation server as part of the authentication process. For example a password, an OTP, the response to a challenge, etc.</t>
					<t hangText="Authentication policy:">The combination of authentication mechanisms required to complete successfully before access may be granted.</t>
					<t hangText="Client :">See "Application".</t>
					<t hangText="End-user:">The authentication subject.</t>
					<t hangText="Moving factor:">The factor that makes a one time password computationally unique in combination with a fixed key. For example the increasing event counter value in <xref target="HOTP"/>.</t>
					<t hangText="Server:">See "Validation server".</t>
					<t hangText="Validation server:">The system component that validates authentication data.</t>
				</list></t>
			
		</section>
		
		</section>

		<section title="Authentication-Data Validation Service Interface overview">
			<t>The Authentication-Data Validation Service Interface allows communication of the following data elements in several different communication patterns as described in <xref target="communicationPatterns"/>. The interface is based mainly on <xref target="WS-Trust"/>. The following sections apply terminologies and concepts defined in <xref target="WS-Trust"/>.</t>

		<section title="Authentication data communication">
			<t>The specific requirements for authentication data communication depend upon the specific authentication mechanism.</t>
			<t>In-band authentication data SHALL be passed in the body of &lt;wst:RequestSecurityToken&gt; and &lt;wst:RequestSecurityTokenResponse&gt; elements.</t>
		</section>

		<section title="Verified attributes">
		<t>Upon successful validation of the authentication data, the validation server SHALL issue a SAML assertion containing verified end-user or token attributes, depending if the server is validating user identities (user centric authentication) or device/token (pseudonomous - token centric authentication) . The client MAY provide a &lt;wsp:Policy&gt; element indicating which attributes it requires.  Required attributes SHALL be referenced using the &lt;saml:Attribute&gt; element, with the &lt;saml:AttributeValue&gt; child element omitted.
		</t>
		<t> The validation server MAY include the sub-set of the requested attributes whose verified values are known to it.  Otherwise, the validation server SHALL include all verified attributes whose values are known to it.  These attributes MUST be included in the SAML assertion.  They MUST also be included in a separate &lt;wst:Claims&gt; element.  In this way, the application may treat the assertion as opaque data, extracting any attributes it requires from the &lt;wst:Claims&gt; element.</t>
		<t>Attributes SHALL be expressed as &lt;saml:Attribute&gt; elements in accordance with the SAML V2.0 X.500/LDAP Attribute Profile.
		</t>
		</section>
		<section title="Challenge/response">
		<t>Multi-step authentication mechanisms are supported as shown here.</t>
					<figure>
						<artwork><![CDATA[
Message     Direction            Cardinality

Request     Client  -> Server    Exactly one
Response    Client <-> Server    (Zero or more request-response pairs) 
Response    Client <-  Server    Exactly one
					]]></artwork>
					</figure>				
				<t>The protocol terminates when the validation server either includes at least one security token according to <xref target="WS-Trust"/> in the response or returns an &lt;env:Body/env:Fault&gt; element.
				</t>		
		</section>

		<section title="Token collections">
			<t> A set of tokens MAY be requested and issued in a single set of exchanges with the validation server using the "token collection" features of WS-Trust.
			</t>
		</section>

		</section>

		<section title="Communication patterns" anchor="communicationPatterns">
			<t>The folllowing communication patterns are supported:</t>
			
		<section title="In-band authentication" anchor="InBandAuthentication">
								<figure  title="In-band authentication">
						<artwork><![CDATA[
 __________                            _____________
|          |                          |             |
| End-user |------------------------->| Application |
|__________|  1. Access application   |_____________|
                                             |        \
                                             |         |
                        2. Obtain assertion  |          > VALID
                                             |         |
                                       _____\|/____   /
                                      |            |
                                      | Validation | 
                                      |   server   | 
                                      |____________| 
 

					]]></artwork>
					</figure>	
			<t>The end-user accesses the application (1).  The application supplies the authentication data to the validation server and receives an assertion in return (2).</t>
			<t>For in-band challenge/response authentication mechanisms, additional messages between the end-user and the validation server MUST be relayed by the application.</t>
		</section>
			
		<section title="Out-of-band challenge" anchor="OutOfBandChallenge">
	
								<figure title="Out-of-band challenge">
						<artwork><![CDATA[
     __________                        _____________
    |          |                      |             |
 -->| End-user |--------------------->| Application |
|   |__________|   1. Access          |_____________|
|                     application            |     \
|                                            |      |
|                  4. In-band                |      |
|                     Response               |      |
|                               2. Request   |      |
|                                  assertion |       >VALID
| 3. Out-of-band                             |      | 
|    challenge                  5. Obtain    |      |
|                                  assertion |      |
|                                            |      |
|                                      _____\|/____/
|                                     |            |
|                                     | Validation |
 -------------------------------------|   server   |
                                      |____________|
  

					]]></artwork>
					</figure>	
			<t>The "out-of-band challenge" pattern is shown in Figure 2.  The application invokes the validation server (2).  The validation server then contacts the end-user out-of-band with a challenge (3).  The end-user may or may not transform the challenge and then passes it back to the application (4), which then passes it to the validation server and obtains an assertion in response (5).</t>
		</section>
			
		<section title="Out-of-band response" anchor="OutOfBandResponse">
	
								<figure title="Out-of-band response">
						<artwork><![CDATA[
     __________                        _____________
    |          |                      |             |
 ---| End-user |<-------------------->| Application |
|   |__________|   1. Access          |_____________|
|                     application           /|\     \
|                                            |       |
|                  4. In-band                |       |
|                     challenge 2. Request   |       |
|                                  assertion |       |
| 5. Out-of-band                             |       |
|    response                   3. Return    |        >VALID
|                                  challenge |       |
|                                            |       |
|                               6. Send      |       |
|                                  assertion |       |
|                                            |       |
|                                      _____\|/____ /
|                                     |            |
|                                     | Validation | 
 ------------------------------------>|   server   | 
                                      |____________| 

					]]></artwork>
					</figure>	
			<t>The "out-of-band response" pattern is shown in Figure 3.  The application invokes the validation server (2).  The validation server returns a challenge (3).  The application passes the challenge to the end-user (4).  The end-user may or may not transform the challenge and sends the result to the validation server out-of-band (5).  The validation server sends the assertion to the application (6).</t>
		</section>

		<section title="Client supplies challenge">
	
								<figure title="Client supplies challenge">
						<artwork><![CDATA[
     __________                       _____________
    |          |                     |             |
 -->| End-user |-------------------->| Application |
|   |__________|  2. Supply          |_____________|
|                    challenge              |      \
|                    and response           |       |
|                                           |       |
|                              3. Obtain    |       |
|                                 assertion |       |
|    1. Obtain                              |        >VALID
|       challenge                           |       |
|                                           |       |
|                                           |       |
|                                           |       |
|                                     _____\|/____ /
|                                    |            |
|                                    | Validation | 
 ------------------------------------|   server   | 
                                     |____________| 


					]]></artwork>
					</figure>	
			<t>The "client supplies challenge" pattern is shown in Figure 4.  The end-user obtains a challenge out-of-band (1), calculates the response and send both challenge and response to the application (2).  The application then uses the challenge and response to obtain an assertion from the validation server (3).</t>
		</section>

		<section title="End-user obtains assertions Out-of-band from server">
								<figure  title="Out-of-band from server authentication">
						<artwork><![CDATA[
 __________                            _____________
|          |                          |             |
| End-user |------------------------->| Application |
|__________|  2. Access application   |_____________|
   /    |        (passing assertion)            
  |V    |                                                
  |A    |                            
  |L    |                                             
  |I    |                              ____________   
  |D    |     1. Obtain assertion     |            |
  |      ---------------------------->| Validation | 
   \                                  |   server   | 
                                      |____________| 
					]]></artwork>
					</figure>	
			<t>The End-user obtains the assertion directly or though a proxy from the validation server (1) then passes the assertion to the Application for authentication (2).</t>
		</section>

		</section>

	<section title="Asynchronous communication">
	<t>The out-of-band communication patterns (<xref target="OutOfBandChallenge"/> and <xref target="OutOfBandResponse"/>) require asynchronous behavior, so that the application thread is not blocked while the challenge is being processed by the end-user.
	</t>
	<section title="Out-of-band challenge">
			<t>In the case of the "out-of-band challenge" pattern (<xref target="OutOfBandChallenge"/>), the validation server SHALL return an &lt;env:Body/env:Fault&gt; element with the value:
			</t>
			<t><list style="hanging">
				<t>valid:Pending</t>
			</list>
			</t>
			<t>The validation server, upon sending this value, and the application, upon receiving it, SHALL terminate the current session.</t>
			<t>Once the application receives the response from the end-user, it SHALL initiate a new session with the validation server.
			</t>
<!--			<t> (TODO: change to polling model) The application MAY register a call-back interface to which the validation server MAY send status messages.  The call-back interface SHALL present a Web-service 'one-way' operation.
			</t>
-->	
	</section>
		
	<section title="Out-of-band response">
			<t>In the case of the "out-of-band response" pattern (<xref target="OutOfBandResponse"/>), the validation server SHALL return an &lt;env:Body/env:Fault&gt; element with the value:
			</t>
			<t><list style="hanging">
				<t>valid:Pending</t>
			</list>
			</t>
			<t>The validation server, upon sending this value, and the application, upon receiving it, SHALL terminate the current session.</t>
<!--
			<t>TODO change to polling.
			</t>
-->
			<t>Both parties MUST maintain the &lt;wst:RequestSecurityToken/@Context&gt; attribute as metadata associated with the initial session.  In the subsequent session, they MUST use this &lt;wst:RequestSecurityToken/@Context&gt; attribute value to correlate the challenge and response. 
			</t>
		</section>
		
	</section>

	<section title="Authentication moving factor resync">
	<t>Some authentication schemes gradually lose synchronization between client and server.  In order to compensate for this, the server must accept authentication data values within a range, or window of the moving factor (e.g. the event counter used in event based one time password algorithms, see <xref target="HOTP"/>).  When an authentication moving factor drifts to the edge of, or beyond, the server's window for a particular end-user, the server has to adjust its window.  This process is known as resyncing.
	</t>
	<t>Resyncing erodes assurance in the authentication event.  So, following a resync event, the validation server commonly requests a second authentication data value, which effectively restores the level of assurance provided by the authentication.
	</t>
	<t>The following two approaches to resyncing exist:</t>
	<section title="Automatic re-sync based on authentication data">
		<t>In this approach, the resynchronisation is based only on the authentication data. In this apporach the server searches through an extended window of the moving factor(s) to see if it can match the presented authentication data. In this apporach two OTPs MUST be transmitted so that the server MUST try to match the first OTP with the extended window and also MUST match the second OTP with a normal window.
		</t>
	</section>
	<section title="Manual re-sync based on presenting moving factor values">
		<t>In this approach to resynchronisation, the server is given the exact value of the moving factor (e.g. the event counter value in <xref target="HOTP"/>) together with the OTP. The server MUST only set the moving factor(s) to the received value if the OTP matches successfully (given the new moving factor values).
		</t>
	</section>	
	</section>

	<section title="Policy models">
		<t>Authentication policy defines the requirements for accessing a resource in terms of mechanisms and their strengths, expressible in disjunctive normal form (that is a disjunction ("OR") of conjunctions ("AND"s)).  This approach supports risk-based multi-factor authentication.</t>
		<t>Two policy models are supported.  In the first model (see figuer below), the application is responsible for invoking the right combination of validation servers in order to satisfy the authentication policy.
		</t>
								<figure title="Policy aware application">
						<artwork><![CDATA[
               _____________
              |             |
              | Application |
              |_____________|
                     |                      \
        _____________|______________         |
       |             |              |         > VALID
       |             |              |        |
 ______|_____   _____|______   _____|______ / 
|            | |            | |            |
| Validation | | Validation | | Validation |    
|   server   | |   server   | |   server   |    
|____________| |____________| |____________|    

					]]></artwork>
					</figure>	
					
		<t>In the second model (see figure below), the authentication policy is managed through a choreography component, which appears to the application as a validation server and to the validation server as an application.
		</t>
								<figure title="Policy aware application">
						<artwork><![CDATA[
               _____________
              |             |
              | Application |
              |_____________|
                     |                     \
                     |                      |
                     |                       >VALID
                     |                      |
               ______|_______              /
              |              |
              | Choreography |
              |______________|
                     |                     \
       ______________|______________        |
      |              |              |        >VALID
      |              |              |       |
 _____|______   _____|______   _____|______/ 
|            | |            | |            |
| Validation | | Validation | | Validation |    
|   server   | |   server   | |   server   |    
|____________| |____________| |____________|    

					]]></artwork>
					</figure>			
					
		<t>In either model, the application MAY supply information about the resource to which access is requested in a &lt;wsp:AppliesTo&gt; element.  The validation server MAY restrict the resources to which the application SHALL limit access by including a &lt;wsp:AppliesTo&gt; element in its response.  This is not intended as an access-control solution; it is intended only to enforce an appropriate level of authentication assurance, based on the sensitivity of the resource, where the sensitivity is not uniform across all the resources accessible by the application.
		</t>
	</section>

<section title="Common message contents">
	<t>This section describes the mechanism-independent requirements for message contents.
	</t>
	<section title="Request Security Token">
		<t>The message-independent requirements for "request security token" messages are shown in this example:
		</t>
								<figure >
						<artwork><![CDATA[
<wst:RequestSecurityToken Context=" ... ">
    <wst:TokenType>
http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0
    </wst:TokenType>
    <wst:RequestType>
http://www.docs.oasis-open.org/ws-sx/ws-trust/200512/Issue
    </wst:RequestType>
    <wsp:AppliesTo> ... </wsp:AppliesTo> ?
    <wsp:Policy> ?
        <saml:Attribute> +
    </wsp:Policy>
    <wst:Lifetime> ... </wst:Lifetime> ?
</wst:RequestSecurityToken>
					]]></artwork>
					</figure>			
		<t> <list style="hanging">
			<t hangText="&lt;wst:TokenType&gt; - MANDATORY">The client SHALL set the value 'http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0'.  If the server detects a different value it MAY return a fault.</t>
			<t hangText="&lt;wst:RequestType&gt; - MANDATORY">The client SHALL set the value 'http://www.docs.oasis-open.org/ws-sx/ws-trust/200512/Issue'  If the server detects a different value it SHALL return a fault.
			</t>
			<t hangText="&lt;wsp:AppliesTo&gt; - OPTIONAL">If present, the client MUST set the value to a URI identifying the resource, or class of resource, to which access is requested.	If the validation server is policy-aware, it SHOULD use this value to select the applicable authentication policy.  Otherwise, it MUST ignore it.
			</t>
			<t hangText="&lt;wsp:Policy/saml:Attribute&gt; - OPTIONAL">If present, this element MUST identify a verified end-user attribute requested from the validation server.  Even if the validation server cannot provide all the requested attributes, it SHOULD proceed with the validation process. 
			</t>
			<t hangText="&lt;wst:Lifetime&gt; - OPTIONAL">The client MAY specify the lifetime of the requested assertion using this element.  The server MUST verify that the requested lifetime conforms with its own policy for assertion lifetimes.
			</t>
			<t hangText="&lt;wst:RequestSecurityToken/@Context&gt; - MANDATORY">This attribute MUST be set by the client.  The server MUST use the value as the &lt;wst:RequestSecurityToken/@Context&gt; value in the response.
			</t>
		</list>
		</t>
	</section>


	<section title="Request Security Token Response">
		<t>The common requirements for the final "request security token response" message are shown in this example:
		</t>
								<figure >
						<artwork><![CDATA[
<wst:RequestSecurityTokenResponse Context=" ... ">
    <wst:RequestedSecurityToken>
          ...
    </wst:RequestedSecurityToken>
    <wst:Claims Dialect="...">
        <saml:Attribute/> +
    </wst:Claims> ?
    <wsp:AppliesTo> ... </wsp:AppliesTo> ?
    <wsp:Policy> ?
        <wsp:RequiredElement> +
    </wsp:Policy>
</wst:RequestSecurityTokenResponse>
					]]></artwork>
					</figure>			
		<t>If the authentication data failed to validate, then the server MUST include the &lt;env:Body/env:Fault&gt; element containing the value wst:FailedAuthentication.  In this case, it SHALL NOT include any other elements.</t>
		<t>If the authentication data failed to validate due to missing authentication data, then the server MUST include the &lt;env:Body/env:Fault&gt; element containing the value valid:MissingAuthenticationData.  In this case, it SHALL NOT include any other elements.</t>
		<t> <list style="hanging">
			<t hangText="&lt;wst:RequestedSecurityToken&gt; - OPTIONAL -  Zero or more">If validation is complete and successful, then the server SHALL include a SAML assertion containing verified end-user attributes. Otherwise this element SHALL be omitted. The server SHOULD set the assertion lifetime in accordance with the lifetime specified in the request, or its own policy, whichever is more restrictive.</t>
			<t hangText="&lt;wst:RequestType&gt; - MANDATORY">The client SHALL set the value 'http://www.docs.oasis-open.org/ws-sx/ws-trust/200512/Issue'  If the server detects a different value it SHALL return a fault.
			</t>
			<t hangText="&lt;wst:Claims&gt; - OPTIONAL">If present, the server SHALL populate this element with verified end-user attributes.
			</t>
			<t hangText="&lt;wst:Claims/@Dialect&gt; - OPTIONAL">The server SHALL set the value "urn:oasis:names:tc:SAML:2.0".  The client MAY reject responses containing a different value.
			</t>
			<t hangText="&lt;wpt:AppliesTo&gt; - OPTIONAL">If the authentication assurance level achieved is suitable only for a sub-set of resources, the validation server MUST set a value that identifies that sub-set.The client SHOULD restrict access to resources falling within the sub-set defined by this element.</t>			
			<t hangText="&lt;wst:RequestSecurityToken/@Context&gt; - MANDATORY">The server MUST include the @Context value from the request.  The client SHOULD load the context identified by the value.
			</t>
		</list>
		</t>
	</section>
</section>

<section title="Mechanism-specific message contents">
	<t>The mechanism-specific requirements for message contents are described in the appendices.  These MAY be used in any combination.</t>
</section>




		<section title="Extensibility" anchor="Extensibility">
			<t>This section lists a few common extension points provided by VALID: </t>
			<t>
				<list style="hanging">
					<t hangText="New VALID Version:">Whenever it is necessary to define a new version
						of this document then a new version number has to be allocated to refer to
						the new specification version. The rules
						for extensibililty are defined in <xref target="iana"/>.</t>

				</list>
			</t>
		</section>

		<!-- ****************************************************************************************** -->

		<section anchor="iana" title="IANA Considerations">

		<section title="XML namespace registration">
				<t> This section registers a new XML namespace,
					"urn:ietf:params:xml:ns:valid", per the guidelines in <xref
						target="RFC3688"/>. </t>

				<t>
					<list style="hanging">
						<t hangText="URI:">urn:ietf:params:xml:ns:valid</t>

						<t hangText="Registrant Contact:">Philip Hoyer
							(phoyer@actividentity.com).</t>

						<t hangText="XML:">
							<figure>
								<artwork><![CDATA[
BEGIN
<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.0//EN"
  "http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="content-type"
        content="text/html;charset=iso-8859-1"/>
  <title>VALID Namespace</title>
</head>
<body>
  <h1>Namespace for VALID</h1>
  <h2>urn:ietf:params:xml:ns:valid</h2>
<p>See <a href="[URL of published RFC]">RFCXXXX
    [NOTE TO IANA/RFC-EDITOR:
     Please replace XXXX with the RFC number of this
    specification.]</a>.</p>
</body>
</html>
END
]]></artwork>
							</figure>
						</t>
					</list>
				</t>
			</section>

			<section title="VALID Version Registry">

				<t>IANA is requested to create a registry for VALID version numbers. The registry has
					the following structure: <figure>
						<artwork><![CDATA[
  VALID Version              | Specification
+---------------------------+----------------
| 1.0                       | [This document]
      ]]></artwork>
					</figure>
				</t>
				<t> Standards action is required to define new versions of VALID. It is not
					envisioned to depreciate, delete, or modify existing VALID versions. </t>

			</section>

		</section>

		<!-- ****************************************************************************************** -->

		<section title="Security Considerations">
			<t>The validation server SHOULD authenticate the client and limit access to the validation service only to authorized clients.  This MAY be achieved by object level security (e.g xml signatures as defined in <xref target="XMLDSIG"/> applied to the &lt;env:Header&gt; and &lt;env:Body&gt; elements), transport layer security (e.g. [TLS]) or network layer security (e.g. isolated network segment).</t>
			<t>The application MAY authenticate the validation server.  This MAY be achieved by object level security (e.g. xml signatures as defined in <xref target="XMLDSIG"/> applied to the &lt;env:Header&gt; and &lt;env:Body&gt; elements or assertion), transport layer security (e.g. TLS) or network layer security (e.g. isolated network segment).</t>
			<t>The chosen authentication mechanism MUST ensure freshness of the exchanges in order to detect replay attacks.</t>
			<t>Privacy of the authentication data and end-user attributes MAY also require protection.</t>

		</section>

		<!-- ****************************************************************************************** -->

		<section title="Acknowledgements">
			<t> The authors of this draft would like to thank the following people for their
				feedback: Siddharth Bajaj, David M'Raihi, Mike Davis and Peter Tapling. </t>
			<t>This work is based on earlier work by the members of OATH (Initiative for Open
				AuTHentication), see <xref target="OATH"/>, to specify a format that can be freely
				distributed to the technical community.</t>
		</section>

		<!-- ****************************************************************************************** -->

	</middle>
	<back>
		<references title="Normative References">
			<reference anchor="RFC2119">
				<front>
					<title>Key words for use in RFCs to Indicate Requirement Levels</title>
					<author fullname="">
						<organization/>
					</author>
					<date month="March" year="1997"/>
				</front>
				<seriesInfo name="BCP" value="14"/>
				<seriesInfo name="RFC" value="2119"/>
			</reference>
			<reference anchor="XMLDSIG">
				<front>
					<title>XML-Signature Syntax and Processing</title>
					<author initials="D., at al." surname="Eastlake"
						fullname="David Eastlake, at al.">
						<organization> </organization>
					</author>
					<date month="February" year="2002"/>
				</front>
				<seriesInfo name="URL:" value="http://www.w3.org/TR/2002/REC-xmldsig-core-20020212/"/>
				<seriesInfo name="W3C" value="Recommendation"/>
			</reference>
			
			<reference anchor="SOAP">
				<front>
					<title>Simple Object Access Protocol 1.2</title>
					<author initials="M., at al." surname="Gudgin"
						fullname="Martin Gudgin, at al.">
						<organization> </organization>
					</author>
					<date month="April" year="2007"/>
				</front>
				<seriesInfo name="URL:" value="http://www.w3.org/TR/soap12-part1/"/>
				<seriesInfo name="W3C" value="Recommendation"/>
			</reference>

			<reference anchor="WS-Security">
				<front>
					<title>Web Services Security: SOAP Message Security 1.1</title>
					<author initials="A" surname="Nadalin"
						fullname="Anthony Nadalin">
						<organization>IBM </organization>
					</author>
					<author initials="C" surname="Kaler"
						fullname="Chris Kaler">
						<organization>Microsoft</organization>
					</author>
					<author initials="R" surname="Monzillo"
						fullname="Ronald Monzillo">
						<organization>Sun</organization>
					</author>
					<author initials="P" surname="Hallam-Baker"
						fullname="Phillip Hallam-Baker">
						<organization>Verisign</organization>
					</author>
					<date month="Feb" year="2006"/>
				</front>
				<seriesInfo name="URL:" value="http://www.oasis-open.org/committees/download.php/16790/wss-v1.1-spec-os-SOAPMessageSecurity.pdf"/>
				<seriesInfo name="OASIS" value="Standard Specification"/>
			</reference>

			<reference anchor="WSS_UsernameTokenProfile">
				<front>
					<title>Web Services Security UsernameToken Profile 1.1</title>
					<author initials="A" surname="Nadalin"
						fullname="Anthony Nadalin">
						<organization>IBM </organization>
					</author>
					<author initials="C" surname="Kaler"
						fullname="Chris Kaler">
						<organization>Microsoft</organization>
					</author>
					<author initials="R" surname="Monzillo"
						fullname="Ronald Monzillo">
						<organization>Sun</organization>
					</author>
					<author initials="P" surname="Hallam-Baker"
						fullname="Phillip Hallam-Baker">
						<organization>Verisign</organization>
					</author>
					<date month="Feb" year="2006"/>
				</front>
				<seriesInfo name="URL:" value="http://docs.oasis-open.org/wss/v1.1/wss-v1.1-spec-os-UsernameTokenProfile.pdf"/>
				<seriesInfo name="OASIS" value="Standard Specification"/>
			</reference>		

			<reference anchor="WS-Trust">
				<front>
					<title>WS-Trust 1.4</title>
					<author initials="A" surname="Nadalin"
						fullname="Anthony Nadalin">
						<organization>IBM </organization>
					</author>
					<author initials="M" surname="Goodner"
						fullname="Marc Goodner">
						<organization>Microsoft</organization>
					</author>
					<author initials="M" surname="Gudgin"
						fullname="Martin Gudgin">
						<organization>Microsoft</organization>
					</author>
					<author initials="A" surname="Barbir"
						fullname="Abbie Barbir">
						<organization>Nortel</organization>
					</author>
					<author initials="H" surname="Granqvist"
						fullname="Hans Granqvist">
						<organization>Verisign</organization>
					</author>
					<date month="Feb" year="2009"/>
				</front>
				<seriesInfo name="URL:" value="http://docs.oasis-open.org/ws-sx/ws-trust/v1.4/ws-trust.html"/>
				<seriesInfo name="OASIS" value="Standard Specification"/>
			</reference>
			
			
			<reference anchor="SAML">
				<front>
					<title>WS-Trust 1.4</title>
					<author initials="S" surname="Cantor"
						fullname="Scott Cantor">
						<organization>Internet2 </organization>
					</author>
					<author initials="J" surname="Kemp"
						fullname="John Kemp">
						<organization>Nokia</organization>
					</author>
					<author initials="R" surname="Philpott"
						fullname="Robert Philpott">
						<organization>RSA Security</organization>
					</author>
					<author initials="E" surname="Maler"
						fullname="Eve Maler">
						<organization>Sun Microsystems</organization>
					</author>
					<date month="March" year="2005"/>
				</front>
				<seriesInfo name="URL:" value="http://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf"/>
				<seriesInfo name="OASIS" value="Standard Specification"/>
			</reference>
			
			
			<reference anchor="XMLENC">
				<front>
					<title>XML Encryption Syntax and Processing.</title>
					<author initials="D. Eastlake and J. Reagle." surname="Eastlake"
						fullname="D. Eastlake and J. Reagle.">
						<organization> </organization>
					</author>
					<date month="December" year="2002"/>
				</front>
				<seriesInfo name="URL:" value="http://www.w3.org/TR/xmlenc-core/"/>
				<seriesInfo name="W3C" value="Recommendation"/>
			</reference>

			<reference anchor="RFC4288">
				<front>
					<title>Media Type Specifications and Registration Procedures</title>
					<author initials="N." surname="Freed" fullname="N. Freed">
						<organization/>
					</author>
					<author initials="J." surname="Klensin" fullname="J. Klensin">
						<organization/>
					</author>
					<date year="2005" month="December"/>
					<abstract>
						<t>This document defines procedures for the specification and registration
							of media types for use in MIME and other Internet protocols. This
							document specifies an Internet Best Current Practices for the Internet
							Community, and requests discussion and suggestions for improvements.</t>
					</abstract>
				</front>

				<seriesInfo name="BCP" value="13"/>
				<seriesInfo name="RFC" value="4288"/>
			</reference>

			<reference anchor="RFC3023">
				<front>
					<title>XML Media Types</title>
					<author initials="M." surname="Murata" fullname="M. Murata">
						<organization/>
					</author>
					<author initials="S." surname="St. Laurent" fullname="S. St. Laurent">
						<organization/>
					</author>
					<author initials="D." surname="Kohn" fullname="D. Kohn">
						<organization/>
					</author>
					<date year="2001" month="January"/>
				</front>
				<seriesInfo name="RFC" value="3023"/>
			</reference>

			<reference anchor="RFC3688">
				<front>
					<title>The IETF XML Registry</title>
					<author initials="M." surname="Mealling" fullname="M. Mealling">
						<organization/>
					</author>
					<date year="2004" month="January"/>
					<abstract>
						<t>This document describes an IANA maintained registry for IETF standards
							which use Extensible Markup Language (XML) related items such as
							Namespaces, Document Type Declarations (DTDs), Schemas, and Resource
							Description Framework (RDF) Schemas.</t>
					</abstract>
				</front>
				<seriesInfo name="BCP" value="81"/>
				<seriesInfo name="RFC" value="3688"/>
			</reference>


		</references>
		
		<references title="Informative References">		
			<reference anchor="RFC5226">
				<front>
					<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
					<author initials="T." surname="Narten" fullname="T. Narten">
						<organization/>
					</author>
					<author initials="H." surname="Alvestrand" fullname="H. Alvestrand">
						<organization/>
					</author>
					<date year="2008" month="May"/>
					<abstract>
						<t>This document specifies an Internet Best Current Practices for the
							Internet Community, and requests discussion and suggestions for
							improvements. Distribution of this memo is unlimited.</t>
					</abstract>
				</front>
				<seriesInfo name="BCP" value="26"/>
				<seriesInfo name="RFC" value="5226"/>
			</reference>
			<reference anchor="RFC2396">
				<front>
					<title>Uniform Resource Identifiers (URI): Generic Syntax</title>
					<author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
						<organization/>
					</author>
					<author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
						<organization/>
					</author>
					<author initials="R." surname="Fielding" fullname="R. Fielding">
						<organization/>
					</author>					
					<author initials="L." surname="Masinter" fullname="L. Masinter">
						<organization/>
					</author>					
					<date year="1998" month="August"/>
				</front>
				<seriesInfo name="BCP" value="26"/>
				<seriesInfo name="RFC" value="2396"/>
			</reference>			

			<reference anchor="HOTP">
				<front>
					<title>HOTP: An HMAC-Based One Time Password Algorithm</title>
					<author initials="D." surname="MRaihi" fullname="David MRaihi">
						<organization/>
					</author>
					<author initials="M." surname="Bellare" fullname="M. Bellare">
						<organization/>
					</author>
					<author initials="F." surname="Hoornaert" fullname="F. Hoornaert">
						<organization/>
					</author>
					<author initials="D." surname="Naccache" fullname="D. Naccache">
						<organization/>
					</author>
					<author initials="O." surname="Ranen" fullname="O. Ranen">
						<organization/>
					</author>
					<date month="December" year="2005"/>
				</front>
				<seriesInfo name="RFC" value="4226"/>
			</reference>
			
			<reference anchor="OCRA">
				<front>
					<title>OCRA: OATH Challenge-Response Algorithms</title>
					<author initials="D." surname="MRaihi" fullname="David MRaihi">
						<organization/>
					</author>
					<author initials="J." surname="Rydell" fullname="Johan Rydell">
						<organization/>
					</author>
					<author initials="D." surname="Naccache" fullname="D. Naccache">
						<organization/>
					</author>
					<author initials="S." surname="Machani" fullname="Salah Machani">
						<organization/>
					</author>
					<author initials="S." surname="Bhajaj" fullname="Siddharth Bajaj">
						<organization/>
					</author>
					<date month="January" year="2008"/>
				</front>
				<seriesInfo name="URL:" value="http://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf"/>
				<seriesInfo name="IETF" value="Standard draft"/>
			</reference>			
			
			<reference anchor="OATH">
				<front>
					<title>Initiative for Open AuTHentication</title>
					<author>
						<organization> </organization>
					</author>
					<date year=""/>
				</front>
				<seriesInfo name="URL:" value="http://www.openauthentication.org"/>

			</reference>
			<reference anchor="XMLNS">
				<front>
					<title>Namespaces in XML</title>
					<author>
						<organization></organization>
					</author>				
					<date year="1999" month="January"/>
				</front>
				<seriesInfo name="W3C Recommendation" value=""/>
				<seriesInfo name="URL:" value="http://www.w3.org/TR/1999/REC-xml-names-19990114"/>
			</reference>			
		</references>

	
		<section title="WSDL" anchor="WSDL">
		<t>The validation server WSDL is shown here.
		</t>
	<figure>
						<artwork><![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<definitions targetNamespace="urn:ietf:params:xml:ns:valid"
xmlns:valid="urn:ietf:params:xml:ns:valid"
xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
xmlns:SOAP="http://schemas.xmlsoap.org/wsdl/soap/"
xmlns:wss="http://docs.oasis-open.org/wss/2004/01/
oasis-200401-wss-wssecurity-secext-1.0"
xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512"
xmlns:wst14="http://docs.oasis-open.org/ws-sx/ws-trust/200802"
xmlns:wsp="http://www.w3.org/ns/ws-policy" 
xmlns="http://schemas.xmlsoap.org/wsdl/">
 <types>
  <xsd:schema xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:SOAP="http://schemas.xmlsoap.org/wsdl/soap/" 
  xmlns:valid="urn:ietf:params:xml:ns:valid"
  xmlns:wss="http://docs.oasis-open.org/wss/2004/01/
  oasis-200401-wss-wssecurity-secext-1.0"
  xmlns:wst="http://docs.oasis-open.org/ws-sx/ws-trust/200512"
  xmlns:wst14="http://docs.oasis-open.org/ws-sx/ws-trust/200802"
  xmlns:wsp="http://www.w3.org/ns/ws-policy" 
  xmlns:WSDL="http://schemas.xmlsoap.org/wsdl/" 
  targetNamespace="urn:ietf:params:xml:ns:valid" 
  elementFormDefault="unqualified"
  attributeFormDefault="unqualified">
   <xsd:element name="RequestSecurityToken" 
   ref="wst:RequestSecurityTokenType"/>
   <xsd:element name="RequestSecurityTokenResponse"
   ref="wst:RequestSecurityTokenResponseType"/>
   <xsd:element name="OTP" type="xsd:string"/>
   <xsd:element name="KeyId" type="xsd:string"/>			
  </xsd:schema>
 </types>
 <message name="RequestSecurityToken">
  <part name="request" type="valid:RequestSecurityTokenType"/>
 </message>
 <message name="RequestSecurityTokenResponse">
  <part name="response" type="valid:RequestSecurityTokenResponseType"/>
 </message>
 <portType name="RequestSecurityToken">
  <operation name="RequestSecurityTokenStart">
   <input message="RequestSecurityToken"/>
   <output message="RequestSecurityTokenResponse"/>
  </operation>
  <operation name="RequestSecurityTokenContinue">
   <input message="RequestSecurityTokenResponse"/>
   <output message="RequestSecurityTokenResponse"/>
  </operation>
 </portType>
 <binding name="RequestSecurityTokenBinding">
  <SOAP:binding style="rpc" 
  transport="http://schemas.xmlsoap.org/soap/http"/>
  <operation name="RequestSecurityTokenStart">
   <SOAP:operation style="rpc"/>
   <input>
    <SOAP:body use="literal" namespace="urn:ietf:params:xml:ns:valid"/>
   </input>
   <output>
    <SOAP:body use="literal" namespace="urn:ietf:params:xml:ns:valid"/>
   </output>
  </operation>
  <operation name="RequestSecurityTokenContinue">
   <SOAP:operation style="rpc"/>
   <input>
    <SOAP:body use="literal" namespace="urn:ietf:params:xml:ns:valid"/>
   </input>
   <output>
    <SOAP:body use="literal" namespace="urn:ietf:params:xml:ns:valid"/>
   </output>
  </operation>
 </binding>
 <service name="RequestSecurityToken">
  <port name="RequestSecurityTokenStart" 
  binding="RequestSecurityTokenBinding">
   <SOAP:address 
   location="http://localhost:8080/RequestSecurityTokenService"/>
  </port>
  <port name="RequestSecurityTokenContinue" 
  binding="RequestSecurityTokenBinding">
   <SOAP:address 
   location="http://localhost:8080/RequestSecurityTokenService"/>
  </port>
 </service>
</definitions>
     ]]></artwork>
					</figure>
		
		</section>

	<section title="Mechanism specific message contents">
		<t>The follwing subsections describe the mechanism specific message contents for each considered mechanism:</t>
	
		<section title="Username/password">
			<t>This section describes the mechanism-specific message contents username/password transferred in-band.  There are no semantics implied by the order of the elements. The username and password transmission uses the web services security Username Token Profile <xref target="WSS_UsernameTokenProfile"/>. 
			</t>
			<t>There are two steps to the protocol.</t>
			<t>Step 1 - Client sends "request security token" message containing authentication data to the validation server.</t>
<figure>
						<artwork><![CDATA[
 <wst:RequestSecurityToken Context="...">
    <wst:TokenType>
http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0
    </wst:TokenType>
    <wst:RequestType>
http://www.docs.oasis-open.org/ws-sx/ws-trust/200512/Issue
    </wst:RequestType>
    <wsp:AppliesTo> ... </wsp:AppliesTo> ?
    <wsp:Policy> ?
        <saml:Attribute> +
    </wsp:Policy>
    <wst:Lifetime> ... </wst:Lifetime> ?
    <wss:UsernameToken>
        <wss:Username> ... </wss:Username> ?
	<wss:Password Type="...">Password</wss:Password>
    </wss:UsernameToken>
</wst:RequestSecurityToken>
     ]]></artwork>
					</figure>			
	
	<t>
		<list style="hanging">
			<t hangText="&lt;wst:RequestSecuityToken/wss:UsernameToken/wss:Username&gt;">If present, the client MUST set the value to the claimed username.  The server MUST load the corresponding end-user record.  Either the &lt;wss:Username&gt; element or the &lt;valid:KeyId&gt; element or both MUST be present.</t>
			<t hangText="&lt;wst:RequestSecuityToken/wss:UsernameToken/wss:Password&gt;">The client MUST set the value to password entered by the end user.  The server MUST validate the password.</t>
		</list>
	</t>		
		<t>The server MUST confirm that all the supplied authentication data are valid for a single end-user.</t>
		<t>Step 2 - Validation server sends "request security token response" message containing the authentication result to the client.</t>
<figure>
						<artwork><![CDATA[
<wst:RequestSecurityTokenResponse Context="...">
    <wst:RequestedSecurityToken>
        <saml:Assertion> ... </saml:Assertion>
    </wst:RequestedSecurityToken>
    <wst:Claims> ... </wst:Claims>
</wst:RequestSecurityTokenResponse>
     ]]></artwork>
					</figure>			

		</section>
	
		<section title="In band one-time-password (OTP)">
			<t>This section describes the mechanism-specific message contents for both time-based and event-based OTP protocols in which the OTP is transferred in-band.  There are no semantics implied by the order of the elements.
			</t>
			<t>There are two steps to the protocol.</t>
			<t>Step 1 - Client sends "request security token" message containing authentication data to the validation server.</t>
<figure>
						<artwork><![CDATA[
 <wst:RequestSecurityToken Context="...">
    <wst:TokenType>
http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0
    </wst:TokenType>
    <wst:RequestType>
http://www.docs.oasis-open.org/ws-sx/ws-trust/200512/Issue
    </wst:RequestType>
    <wsp:AppliesTo> ... </wsp:AppliesTo> ?
    <wsp:Policy> ?
        <saml:Attribute> +
    </wsp:Policy>
    <wst:Lifetime> ... </wst:Lifetime> ?
    <wss:UsernameToken>
        <wss:Username> ... </wss:Username> ?
        <valid:KeyId> ... </valid:KeyId> ?
        <valid:OTP> ... </valid:OTP>
    </wss:UsernameToken>
</wst:RequestSecurityToken>
     ]]></artwork>
					</figure>			
	
	<t>
		<list style="hanging">
			<t hangText="&lt;wst:RequestSecuityToken/wss:UsernameToken/wss:Username&gt;">If present, the client MUST set the value to the claimed username.  The server MUST load the corresponding end-user record.  Either the &lt;wss:Username&gt; element or the &lt;valid:KeyId&gt; element or both MUST be present.</t>
			<t hangText="&lt;wst:RequestSecuityToken/wss:UsernameToken/valid:KeyId&gt;">If present, the client MUST set the value to the OTP token identifier.  The server MUST load the corresponding token record..</t>
			<t hangText="&lt;wst:RequestSecuityToken/wss:Security/valid:OTP&gt;">The client MUST set the value to the OTP value.  The server MUST validate the OTP.</t>
		</list>
	</t>		
		<t>The server MUST confirm that all the supplied authentication data are valid for a single end-user.</t>
		<t>Step 2 - Validation server sends "request security token response" message containing the authentication result to the client.</t>
<figure>
						<artwork><![CDATA[
<wst:RequestSecurityTokenResponse Context="...">
    <wst:RequestedSecurityToken>
        <saml:Assertion> ... </saml:Assertion>
    </wst:RequestedSecurityToken>
    <wst:Claims> ... </wst:Claims>
</wst:RequestSecurityTokenResponse>
     ]]></artwork>
					</figure>			
	<t>The following authentication data are defined by this specification.</t>
	
	<t><list>
		<t>Name: valid:OTP</t>
		<t>Type: xsd:string</t>
		<t>Description: The output value of an end-user OTP token</t>
	</list></t>
	<t><list>
		<t>Name: valid:KeyId</t>
		<t>Type: xsd:string</t>
		<t>Description: The globally-unique identifier for the OTP token</t>
	</list></t>				
		</section>


		<section title="In band challenge/response">
			<t>This appendix describes the mechanism-specific message contents for challenge/response authentication mechanisms in which both the challenge and response are transferred in-band.  Mechanisms of this type include: knowledge-based schemes, matrix card schemes and cryptographic token schemes.  There are no semantics implied by the order of the elements.</t>
			<t>There are four steps to the protocol.</t>
			<t>Step 1 - Client sends "request security token" message containingthe claimed identity to the validation server.</t>
<figure>
						<artwork><![CDATA[
 <wst:RequestSecurityToken Context="...">
    <wst:TokenType>
http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0
    </wst:TokenType>
    <wst:RequestType>
http://www.docs.oasis-open.org/ws-sx/ws-trust/200512/Issue
    </wst:RequestType>
    <wsp:AppliesTo> ... </wsp:AppliesTo> ?
    <wsp:Policy> ?
        <saml:Attribute> +
    </wsp:Policy>
    <wst:Lifetime> ... </wst:Lifetime> ?
    <wss:UsernameToken>
        <wss:Username> ... </wss:Username> ?
        <valid:KeyId> ... </valid:KeyId> ?
    </wss:UsernameToken>
</wst:RequestSecurityToken>
     ]]></artwork>
					</figure>			
	
		<t>Step 2 - Validation server sends "request security token response" message containing the challenge to the client.</t>
<figure>
						<artwork><![CDATA[
<wst:RequestSecurityTokenResponse Context="...">
    <wst14:InteractiveChallenge>
        ...
    </wst14:InteractiveChallenge>
</wst:RequestSecurityTokenResponse>
     ]]></artwork>
					</figure>			
					
	<t>
		<list style="hanging">
			<t hangText="&lt;wst:RequestSecurityTokenResponse/wst14:InteractiveChallenge&gt;">The server MUST set the contents to the value of the challenge.</t>
		</list>
	</t>		
					
		<t>Step 3 - Client sends "request security token response" message containing the response to the server.</t>
<figure>
						<artwork><![CDATA[
<wst:RequestSecurityTokenResponse Context="...">
    <wst14:InteractiveChallengeResponse>
        ... 
    </wst14:InteractiveChallengeResponse>
</wst:RequestSecurityTokenResponse>
     ]]></artwork>
					</figure>			
					
	<t>
		<list style="hanging">
			<t hangText="&lt;wst:RequestSecurityTokenReponse/wst14:InteractiveChallengeResponse&gt;">The client MUST set the value to the transformed challenge.  The server MUST validate the transformed challenge.</t>
		</list>
	</t>		

		<t>Step 4 - Server sends "request security token response" message containing the authentication result to the client.</t>
<figure>
						<artwork><![CDATA[
<wst:RequestSecurityTokenResponse Context="...">
    <wst:RequestedSecurityToken>
        <saml:Assertion> ... </saml:Assertion>
    </wst:RequestedSecurityToken>
    <wst:Claims> ... </wst:Claims>
</wst:RequestSecurityTokenResponse>
     ]]></artwork>
					</figure>			
					
		</section>

		<section title="Out-of-band challenge">
			<t>This appendix describes the mechanism-specific message contents for challenge/response mechanisms in which the challenge is passed to the end-user out-of-band.  Such mechanisms involve a separate communication channel, such as voice telephone, email or SMS.  There are no semantics implied by the order of the elements.</t>
			<t>There are four steps to the protocol.</t>
			<t>Step 1 - Client sends "request security token" message containing claimed identity to the server.</t>
<figure>
						<artwork><![CDATA[
<wst:RequestSecurityToken Context="...">
    <wst:TokenType>
http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0
    </wst:TokenType>
    <wst:RequestType>
http://www.docs.oasis-open.org/ws-sx/ws-trust/200512/Issue
    </wst:RequestType>
    <wsp:AppliesTo> ... </wsp:AppliesTo> ?
    <wsp:Policy> ?
        <saml:Attribute> +
    </wsp:Policy>
    <wst:Lifetime> ... </wst:Lifetime> ?
    <wss:UsernameToken>
        <wss:Username> ... </wss:Username>
        <valid:KeyId> ... </valid:KeyId> ?
    </wss:UsernameToken>
</wst:RequestSecurityToken>
     ]]></artwork>
					</figure>			
	
		<t>Step 2 - (Optional, in the asynchronous case) Server sends "pending" to the client.</t>
<figure>
						<artwork><![CDATA[
<env:Body/env:Fault>
	valid:Pending
</env:Body/env:Fault>
     ]]></artwork>
					</figure>			

	<t>Both the client and server close the session.</t>		
					
		<t>Step 3 - Once the client receives the response, it sends the "request security token response" message to the server..</t>
<figure>
						<artwork><![CDATA[
<wst:RequestSecurityTokenResponse Context="...">
    <wst14:InteractiveChallengeResponse>
        ... 
    </wst14:InteractiveChallengeResponse>
</wst:RequestSecurityTokenResponse>
     ]]></artwork>
					</figure>			
					
		<t>Step 4 - Server sends "request security token response" message containing the authentication result to the client.</t>
<figure>
						<artwork><![CDATA[
<wst:RequestSecurityTokenResponse Context="...">
    <wst:RequestedSecurityToken>
        <saml:Assertion> ... </saml:Assertion>
    </wst:RequestedSecurityToken>
    <wst:Claims> ... </wst:Claims>
</wst:RequestSecurityTokenResponse>
     ]]></artwork>
					</figure>			
					
		<t>The &lt;wst:RequestSecurityTokenResponse/@Context&gt; attribute value MUST be the same as that used in steps 1, 2 and 3.</t>
		</section>

		<section title="Out-of-band response">
			<t>This appendix describes the mechanism-specific message contents for challenge/response mechanisms in which the response is returned to the validation server out-of-band.  Such mechanisms involve a separate communication channel, such as voice telephone, email or SMS.  There are no semantics implied by the order of the elements.</t>
			<t>There are four steps to the protocol.</t>
			<t>Step 1 - Client sends "request security token" message containing the claimed identity to the server.</t>
<figure>
						<artwork><![CDATA[
<wst:RequestSecurityToken Context="...">
    <wst:TokenType>
http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0
    </wst:TokenType>
    <wst:RequestType>
http://www.docs.oasis-open.org/ws-sx/ws-trust/200512/Issue
    </wst:RequestType>
    <wsp:AppliesTo> ... </wsp:AppliesTo> ?
    <wsp:Policy> ?
        <saml:Attribute> +
    </wsp:Policy>
    <wst:Lifetime> ... </wst:Lifetime> ?
    <wss:UsernameToken>
        <wss:Username> ... </wss:Username>
        <valid:KeyId> ... </valid:KeyId> ?
    </wss:UsernameToken>
</wst:RequestSecurityToken>
     ]]></artwork>
					</figure>			
	
		<t>Step 2 - Server sends "request security token response" message containing the challenge to the client.</t>
<figure>
						<artwork><![CDATA[
<wst:RequestSecurityTokenResponse Context="...">
    <wst14:InteractiveChallenge>
        ...
    </wst14:InteractiveChallenge>
</wst:RequestSecurityTokenResponse>
     ]]></artwork>
					</figure>			


					
		<t>Step 3 - (Optional - in the asynchronous case) Client sends "pending" to the server.</t>
<figure>
						<artwork><![CDATA[
<env:Body/env:Fault>
	valid:Pending
</env:Body/env:Fault>
     ]]></artwork>
					</figure>			
	<t>Both the client and server close the session.</t>		
						
		<t>Step 4 - Server sends "request security token response" message containing the authentication result to the client at the registered call-back interface.</t>
<figure>
						<artwork><![CDATA[
<wst:RequestSecurityTokenResponse Context="...">
    <wst:RequestedSecurityToken>
        <saml:Assertion> ... </saml:Assertion>
    </wst:RequestedSecurityToken>
    <wst:Claims> ... </wst:Claims>
</wst:RequestSecurityTokenResponse>
     ]]></artwork>
					</figure>			
					
		<t>The &lt;wst:RequestSecurityTokenResponse/@Context&gt; attribute value MUST be the same as that used in steps 1, 2 and 3.</t>
		</section>

		<section title="Client supplies challenge">
			<t>This appendix describes the mechanism-specific message contents for challenge/response mechanisms in which the client supplies the challenge. There are no semantics implied by the order of the elements.</t>
			<t>There are two steps to the protocol.</t>
			<t>Step 1 - Client sends "request security token" message to the validation server, passing both the challenge and the response.</t>
<figure>
						<artwork><![CDATA[
<wst:RequestSecurityToken Context="...">
    <wst:TokenType>
http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0
    </wst:TokenType>
    <wst:RequestType>
http://www.docs.oasis-open.org/ws-sx/ws-trust/200512/Issue
    </wst:RequestType>
    <wsp:AppliesTo> ... </wsp:AppliesTo> ?
    <wsp:Policy> ?
        <saml:Attribute> +
    </wsp:Policy>
    <wst:Lifetime> ... </wst:Lifetime> ?
    <wst14:InteractiveChallenge> ... 
    </ wst14:InteractiveChallenge>
    <wst14:InteractiveChallengeResponse> ... 
    </ wst14:InteractiveChallengeResponse>
</wst:RequestSecurityToken>
     ]]></artwork>
					</figure>			
		<t>
		<list style="hanging">
			<t hangText="&lt;wst14:InteractiveChallenge&gt;">The challenge.  This may have been obtained from the validation server by means of another interface; one not specified here.</t>
			<t hangText="&lt;wst14:InteractiveChallengeResponse&gt;">The client MUST set the value to the transformed challenge.  The server MUST validate the transformed challenge.</t>
		</list>
	</t>		
	
		<t>Step 2 - Validation server returns "request security token response" message containing the assertion and claims to the client.</t>
<figure>
						<artwork><![CDATA[
<wst:RequestSecurityTokenResponse Context="...">
    <wst:RequestedSecurityToken>
        <saml:Assertion> ... </saml:Assertion>
    </wst:RequestedSecurityToken>
    <wst:Claims> ... </wst:Claims>
</wst:RequestSecurityTokenResponse>
     ]]></artwork>
					</figure>			
		</section>

	<section title="Challenge/response with signature">
			<t>This appendix describes the mechanism-specific message contents for challenge/response authentication mechanisms in which both the challenge and response are transferred in-band additionally to other parameters that are used in a signature (such as the simmetric signature in <xref target="OCRA"/>. There are no semantics implied by the order of the elements.</t>
			<t>There are four steps to the protocol.</t>
			<t>Step 1 - Client sends "request security token" message containingthe claimed identity to the validation server.</t>
<figure>
						<artwork><![CDATA[
 <wst:RequestSecurityToken Context="...">
    <wst:TokenType>
http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0
    </wst:TokenType>
    <wst:RequestType>
http://www.docs.oasis-open.org/ws-sx/ws-trust/200512/Issue
    </wst:RequestType>
    <wsp:AppliesTo> ... </wsp:AppliesTo> ?
    <wsp:Policy> ?
        <saml:Attribute> +
    </wsp:Policy>
    <wst:Lifetime> ... </wst:Lifetime> ?
    <wss:UsernameToken>
        <wss:Username> ... </wss:Username> ?
        <valid:KeyId> ... </valid:KeyId> ?
    </wss:UsernameToken>
</wst:RequestSecurityToken>
     ]]></artwork>
					</figure>			
	
		<t>Step 2 - Validation server sends "request security token response" message containing the set of challenges to the client.</t>
<figure>
						<artwork><![CDATA[
<wst:RequestSecurityTokenResponse Context="...">
    <wst14:InteractiveChallenge> +
        ...
    </wst14:InteractiveChallenge>
</wst:RequestSecurityTokenResponse>
     ]]></artwork>
					</figure>			
					
	<t>
		<list style="hanging">
			<t hangText="&lt;wst:RequestSecurityTokenResponse/wst14:InteractiveChallenge&gt;">The server MUST set the contents to the value of the challenge(s).</t>
		</list>
	</t>		
					
		<t>Step 3 - Client sends "request security token response" message containing the response(s) to the server.</t>
<figure>
						<artwork><![CDATA[
<wst:RequestSecurityTokenResponse Context="...">
    <wst14:InteractiveChallengeResponse> +
        ... 
    </wst14:InteractiveChallengeResponse>
</wst:RequestSecurityTokenResponse>
     ]]></artwork>
					</figure>			
					
	<t>
		<list style="hanging">
			<t hangText="&lt;wst:RequestSecurityTokenReponse/wst14:InteractiveChallengeResponse&gt;">The client MUST set the value to the parameters of the signature (e.g. amount is set to '10000').  The server MUST validate the transformed challenge.</t>
		</list>
	</t>		

		<t>Step 4 - Server sends "request security token response" message containing the authentication result to the client.</t>
<figure>
						<artwork><![CDATA[
<wst:RequestSecurityTokenResponse Context="...">
    <wst:RequestedSecurityToken>
        <saml:Assertion> ... </saml:Assertion>
    </wst:RequestedSecurityToken>
    <wst:Claims> ... </wst:Claims>
</wst:RequestSecurityTokenResponse>
     ]]></artwork>
					</figure>			
					

	</section>

	</section>


		<section title="Use Cases">

			<t>This section describes a comprehensive list of use cases that inspired the
				development of this specification. These requirements were used to derive the
				primary requirement that drove the design. These requirements are covered in the
				next section.</t>
			<t>These use cases also help in understanding the applicability of this specification to
				real world situations.</t>
			<section title="Validation">

				<section title="OTP Validation">
					<t>An application needs to validate an OTP obtained from an end-user, before providing the end-user with access to the requested resource(s).
The validation request may pass through several SOAP intermediaries. If this is the case, the application message needs to specify the ultimate validation server endpoint via SOAP addressing means, e.g., by using SOAP actors, to avoid the OTP being evaluated several times.
The response may include additional instructions to the token, for example that it needs to be resynchronized. This information must be defined inside a SOAP message.
</t>
<t>Valid credentials that can be passed in the valildation request:
<list style="symbols">
	<t>Username, PIN + OTP</t>
	<t>Username, OTP</t>
	<t>TokenId + OTP</t>
	<t>Array of TokenId + OTP</t>
</list>
</t>
				</section>

				<section title="Challenge/Response Validation – Server generated challenge">
					<t>An application needs to be able to use a token implementing the OCRA challenge/response algorithm for identifying the end user. 

The application requests from the validation server the challenge to be presented to the token (with the end-user keying the challenge into the token by means of a PINPad) or the challenge presented to the API of the connected token 

The application then uses the protocol to verify the response from the token
</t>
				</section>

				<section title="Challenge/Response Validation – User generated challenge">
					<t>An application needs to be able to use a token implementing the OCRA challenge/response algorithm for identifying the end user. 

The application generates the challenge to be presented to the token (with the end-user keying the challenge into the token by means of a PINPad) or the challenge presented to the API of the connected token 

The application then uses the protocol to verify the challenge and the response from the token.
</t>
				</section>

				<section title="OTP Validation + Server managed PIN">
					<t>An application needs to be able to use a token implementing the TOTP algorithm as one factor and a server managed PIN as a second factor, for indetifying the end user.

The verification of both factors should occur within one message request/response pair of the protocol. 
 </t>

				</section>
				<section title="MatrixCardValidation – Server generated challenge">
					<t>An application needs to be able to use MatrixCard challenge/response algorithm for identifying the end user. 

The application will request from the validation server the challenge to be presented to the user via the user interface and the user response entered into a webform

The application will then use the protocol to verify the response from the token
</t>

				</section>				
			</section>

			<section title="Synchornisation Use Cases">
				<t>This section describes the use cases relating to synchronisation of the token and the server.</t>

				<section title="OTP Token Auto-Resync (NextOTP)">
					<t>An application needs to validate an OTP. The OTP could not be validated and the application decides that a re-sync is necessary.
It uses the next generated OTP from the token in the protocol to re-sync the token
</t>
				</section>
				<section title="OTP Token Manual-resync">
				<t>An application needs to validate an OTP. The OTP could not be validated and the application decides that a re-sync is necessary.
It uses values that can be read by the user of the token (e.g. event counter value, time interval counter value) to re-sync the token together with the next generated OTP of the token..
</t>
				</section>
 
			</section>
		</section>
		<section title="Requirements">
			<t>This section outlines the most relevant requirements that are the basis of this work.
				Several of the requirements were derived from use cases described above. <list
					style="format R%d:">
					<t>The protocol must support authentication of request originator.</t>
					<t>The protocol must support  management data flows (e.g., related to token synchronization)</t>
					<t>The protocol needs to support the following algorithms <list style="symbols">
							<t>HOTP</t>
							<t>OCRA</t>
							<t>TOTP</t>
							<t>Proprietary OTP</t>
							<t>Proprietary Challenge/Response</t>
							<t>Matrix cards</t>
							<t>SMS OTP</t>
						</list>
					</t>
					<t>The protocol must be XML/Web Services based.</t>
					<t>The protocol must support SOAP intermediaries.</t>
				</list>
			</t>
		</section>
	</back>

</rfc>
