<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
<!ENTITY I-D.ietf-roll-protocols-survey SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-roll-protocols-survey-07">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-goyal-roll-dv-00" ipr="trust200811">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="draft-goyal-roll-dv">A Distance Vector Protocol for Routing Over Low Power and Lossy Networks</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Mukul Goyal" initials="M.G." surname="Goyal">
      <organization>University of Wisconsin Milwaukee</organization>

      <address>
        <postal>
          <street>3200 N Cramer Street</street>

          <!-- Reorder these if your country does things differently -->

          <city>Milwaukee</city>

          <region>Wisconsin</region>

          <code>53201</code>

          <country>USA</country>
        </postal>

        <phone>+1 414 229 5001</phone>

        <email>mukul@uwm.edu</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date month="June" year="2009" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>Routing, Low Power Lossy Networks</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>This draft describes a distance vector protocol for routing over low power and lossy networks.
In this protocol, each node periodically advertises its minimum hop distance and "current" end-to-end
reliability of reaching a destination in the network via local broadcast of Hello messages. One Hello message
may contain several such advertisements. The inter-Hello time period is determined using an adaptive scheme
designed to speed up routing convergence to both good and bad news while avoiding unnecessary transmissions.
A node maintains hop distance and end-to-end reliability information for a subset of its
neighbors and for a subset of destinations in the network. For each such destination, the node also maintains
the set of neighbors that it would use to forward packets going to that destination. These neighbors are
selected such that they are closest to the destination in terms of hops among neighbors that satisfy a certain minimum
reliability criterion.
      </t>
    </abstract>
  </front>

  <middle>
<section title="Introduction">
<t>This draft describes a distance vector protocol for routing over low power and lossy networks (LLN).
In this protocol, each node periodically advertises its minimum hop distance and "current" end-to-end
reliability of reaching a destination in the network via local broadcast of Hello messages. One Hello message
may contain several such advertisements. The inter-Hello time period is determined using an adaptive scheme
designed to speed up routing convergence to both good and bad news while avoiding unnecessary transmissions.
A node maintains hop distance and end-to-end reliability information for a subset of its
neighbors and for a subset of destinations in the network. For each such destination, the node also maintains
the set of neighbors that it would use to forward packets going to that destination. These neighbors are
selected such that they are closest to the destination in terms of hops and satisfy a certain minimum
reliability criterion.</t>

<t>The protocol is designed to automatically determine highly reliable routes to a destination node in face
of dynamic network conditions, such as changes in network topology, traffic loads and link-level reliabilities.
The protocol satisfies the routing state, loss response and control cost criteria listed in
<xref target="I-D.ietf-roll-protocols-survey">I-D.ietf-roll-protocols-survey</xref>. In the following description,
we have used link-level reliability, defined as the link-level packet success rate, as the link-level cost metric
and consequently determine the path-level cost metric, which is the end-to-end reliability of the path, as a
multiplicative function of link-level metric values. However, the protocol can be modified to use any other
link-level cost metric as well and an additive function may be used to determine the path-level cost metric
if considered more appropriate. The protocol, as described next, does not consider any node-level cost metric
in making routing decisions. As described later, a node controls its level of participation in packet routing
by manipulating the reliability values it advertises in its Hello messages. However, the protocol can be modified
to explicitly take in account the node-level costs also while making the routing decisions.</t>

<t>The following discussion assumes that a node knows about its current link-level reliability to reach the
neighbors that it selects as next hops on routes to destinations it serves. Such reliability values can be
maintained easily if the underlying layers support MAC-level acknowledgements. Otherwise, a node may need to
communicate with the neighbor node to determine the fraction of its transmitted packets successfully received
by the neighbor in a given time interval and thus determine the link-level reliability of reaching the neighbor.
The following discussion does not specify a mechanism for such communication. As mentioned before, the routing protocol
described in this draft does not depend on the use of link-level reliability as the link-level cost metric and
can be modified to use any other link-level cost metric as well.</t>

<t>The following sections describe various aspects of the protocol's operation.</t>

</section>

<section anchor="selection" title="Selection of Next Hop Neighbors for a Destination">
<t>Consider a node X that is willing to route packets going to the destination node D.
For this purpose, node X maintains a subset, NextHops(D), of its neighbors among the ones that are similarly willing
to route packets headed towards destination D. On receiving such a packet, the node forwards
it to a randomly selected neighbor belonging to subset NextHops(D). This section describes the procedure used
by a node to select the subset, NextHops(D), of its neighbors among the ones willing to route packets
to destination D.
</t>

<section anchor="metrics" title="Metrics Used">
<t>A node selects the subset, NextHops(D), of its neighbors  based on the values of the following metrics advertised by the neighbors in their
Hello messages:</t>

<t><list style="symbols">
<t>Minimum hop distance from node D:
The minimum hop distance of node A from node D is the smallest
number of hops a packet would need to travel to reach node D starting from node A such that the link-level reliability
of each hop is non-zero. In other words, the minimum hop distance of node A from node D is the hop-count
of the minimum hop route from node A to node D as long as the end-to-end reliability along this route is non-zero.
</t>

<t>Current end-to-end reliability to reach node D:
The current end-to-end reliability of node A to reach node D is calculated as follows.<list style="symbols">
<t>If node A is node D itself, the reliability value is 1.</t>
<t>If node D is a direct neighbor of node A then the end-to-end reliability is same as node A's link-level reliability, linkR(D), of reaching node D.</t>
<t>Otherwise, suppose node B is node A's neighbor that belongs to subset NextHops(D) maintained by node A and advertises the highest reliability
(to reach node D) among all neighbors in node A's NextHops(D). Let maxRel(D) denote the value of this reliability and
linkR(B) denote node A's link-level reliability of reaching node B. Then, the end-to-end reliability (to reach node D)
advertised by node A is maxRel(D)*linkR(B).</t>
<t>A node is allowed to advertise a smaller value as its end-to-end reliability to reach D, rather than the one calculated using above mentioned
rules, in order to control its participation in routing packets going to destination D.</t>
</list></t>

</list></t>

<t>Note that the minimum hop distance of a node from a destination D is a relatively static value that depends on the
underlying network topology. This value does not change as long as the underlying topology does not change and
the minimum hop route from the node to the destination D has non-zero reliability. On the other hand, a node's
current end-to-end reliability of reaching destination D is a highly dynamic parameter whose value changes with
changes in the composition of NextHops(D) subset of neighbors, the maximum reliability (to reach D) advertised by
these neighbors and the node's link-level reliability of reaching these neighbors. 
</t>

</section>

<section anchor="nexthops" title="Selecting NextHops(D)">
<t>
Based on the information contained in the Hello messages from its neighbors, a node maintains the following data structures:
</t>

<t><list style="symbols">
<t>R(A,D): Node A's end-to-end reliability to reach node D as advertised in the last Hello received from A.</t>
<t>Hops(A,D): The minimum hop distance of neighbor A from node D as advertised in the last Hello received from A.</t>
<t>NeighborAtHops(i,D): The list of neighbors 'i' hops away from node D.</t>
</list></t>

<t>
Note that a node need not maintain this information about all destinations in the network or all neighbors willing
to route packets going to a particular destination. The destinations to be supported by a node may be decided as a matter
of policy. Otherwise, within the constraints imposed by available memory, a node should support routing to destinations
that are direct neighbors or, based on neighbor Hellos, known to be close by or reachable with high reliability.
Similarly, for a supported destination, the node should maintain above information for neighbors that advertise
a small hop distance from the destination or high reliability of reaching it.
</t>

<t>The process of determining NextHops(D) consists of the following steps:<list style="symbols">
<t>The current NextHops(D) is invalidated. NextHops(D) is always rebuilt from scratch.</t>
<t>If no neighbor has advertised reachability to D, a preconfigured number of randomly selected neighbors are
included in NextHops(D) and the procedure terminates.</t>
<t>The node determines the maximum among all R(A,D)*linkR(A) values where A is a neighbor node. Let this maximum value be maxRel(D).</t>
<t>The node examines the lists of neighbors, NeighborAtHops(*,D), in increasing order of the hop distance from D.
Starting with the list of neighbors closest to D, the node checks the R(A,D) value of each neighbor A in the list and adds the
neighbor A to NextHops(D) if R(A,D)*linkR(A) value is greater than a certain fraction of maxRel(D). In other words, a node A in the list
being examined is added to NextHops(D) if R(A,D)*linkR(A) >= x*maxRel(D), where x is a pre-configured value less than 1.
If the node did not add any neighbor from a list in NextHops(D), it examines the next list. Otherwise, the process
of determining NextHops(D) concludes.</t>
</list></t>

<t>Thus, NextHops(D) consists of neighbors that are closest to D in terms of hops among the ones that satisfy a certain
minimum reliability criterion. The reliability criterion listed above can be replaced with a different
criterion if desired. Note that the emphasis on selecting neighbors closest to D in terms of hops provides
significant protection against routing loops.</t>

</section>
</section>

<section anchor="hellos" title="Sending Hello Messages">
<t>A node periodically sends a Hello message via local broadcast to inform its neighbors regarding its reachability
to various destinations in the network. The reachability information for a particular destination consists of
the node's minimum hop distance and current end-to-end reliability to reach that destination. The node may advertise
the reachability to only a few destinations in a single Hello message. Additionally, a Hello message may also
contain</t>
<t><list style="symbols">
<t>the remaining time interval before the node goes to sleep</t>
<t>a request to one or more explicitly identified neighbors to send a Hello message advertising its reachability to an explicitly identified destination.</t>
</list></t>

<t>Before sending a Hello message advertising reachability to node D, the node recalculates NextHops(D) as described
<xref target="nexthops">above</xref>. This is followed by the calculation of the node's end-to-end reliability to reach D
(<xref target="metrics"></xref>) and its minimum hop distance from D, which is simply one plus the minimum hop distance
advertised by a neighbor that also reports a non-zero reliability of reaching D.</t>

<t>When a node receives a Hello from neighbor A carrying reachability information regarding destination D, it replaces
the old values of R(A,D) and Hops(A,D) with new values contained in the Hello message, updates the affected
NeighborAtHops(,D) lists accordingly and recomputes NextHops(D). If the Hello message from neighbor A specifies a time interval before the
neighbor goes to sleep, the node must ensure that R(A,*) values are set to zero and all affected NextHops() recalculated
when this time interval expires.</t>

<t>Generation of Hello messages by a node is governed by the following set of rules. The destinations to be advertised in
a Hello can be chosen by the node as per the local policy unless one of the rules listed below specifically
requires a particular destination to be advertised.</t>

<t><list style="symbols">
<t>When a node wakes up, it schedules a pre-configured number of Hello messages to be sent. The interval between
two Hello messages is selected in a random fashion from a certain range of values around a pre-configured value
- helloIntervalSmall.</t>
<t>When a node receives a Hello from a neighbor A advertising <list style="symbols">
<t>a minimum hop distance from D that is more than one plus the node's own minimum hop distance from D, OR</t>
<t>a minimum hop distance from D that is one plus the node's own minimum hop distance from D AND an end-to-end
reliability of reaching D that is less than the product of node's link-level reliability to reach A and the node's end-to-end
reliability to reach D (calculated as per <xref target="metrics"></xref>)</t>
</list>
it immediately schedules a Hello to be sent within the helloIntervalSmall duration. This Hello must
advertise information regarding the node's reachability to destination D.</t>
<t>When a node notices <list style="symbols">
<t>any change in its minimum hop distance from D OR</t>
<t>a significant change in its end-to-end reliability of reaching D(calculated as per <xref target="metrics"></xref>)</t>
</list>
it immediately schedules a Hello to be sent within the helloIntervalSmall duration. This Hello must
advertise information regarding the node's reachability to destination D.</t>
<t>When a node has forwarded a certain number of packets going to destination D without receiving a Hello from some neighbors in
NextHops(D), it schedules a Hello to be sent within the helloIntervalSmall duration to request these neighbors to send
their current reachability information regarding destination D. If the node does not receive a Hello from such a neighbor
within helloIntervalSmall duration, it reduces the R(,D) value of that neighbor by a multiplicative factor and recomputes NextHops(D).</t>
<t>When a node receives a Hello message requesting the node to send its reachability to destination D, the node
immediately schedules a Hello to be sent within helloIntervalSmall duration and includes the information regarding its reachability to D
in that Hello.</t> 
<t>Otherwise, a node sends a Hello message helloIntervalLarge, which is much larger than helloIntervalSmall, duration after sending the previous
Hello. If this Hello can not advertise all reachable destinations, subsequent Hellos should be generated at randomly selected
intervals less than helloIntervalSmall until reachability to all destinations has been advertised.</t> 
</list></t>
    
<t>Note that the Hello generation follows an adaptive scheme that allows a Hello to be quickly generated (within helloIntervalSmall)
when it is obvious that neighbors do not have correct reachability information for some destinations. Otherwise, the Hellos are originated
relatively infrequently. It is possible that a neighbor currently being used to forward packets is no longer
reliable enough but the failure to receive its Hello messages, e.g. due to connectivity problems, are preventing an update of its reliability.
To allow timely reduction in the reachability reliability of such neighbors in such situations, a node is allowed to explicitly request reachability
updates from their neighbors. Failure to receive such updates within helloIntervalSmall duration causes a node to reduce the reachability
reliability of such neighbors by a multiplicative factor that may cause such neighbors to drop out of NextHops() sets.
</t>

    </section>

    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->

    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>

    </section>

    <section anchor="Security" title="Security Considerations">
      <t>TBD</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Informative References">
      <!-- Here we use entities that we defined at the beginning. -->

      &I-D.ietf-roll-protocols-survey;

      <!-- A reference written by by an organization not a person. -->

    </references>

    <!-- Change Log

v00 2006-03-15  EBD   Initial version

v01 2006-04-03  EBD   Moved PI location back to position 1 -
                      v3.1 of XMLmind is better with them at this location.
v02 2007-03-07  AH    removed extraneous nested_list attribute,
                      other minor corrections
v03 2007-03-09  EBD   Added comments on null IANA sections and fixed heading capitalization.
                      Modified comments around figure to reflect non-implementation of
                      figure indent control.  Put in reference using anchor="DOMINATION".
                      Fixed up the date specification comments to reflect current truth.
v04 2007-03-09 AH     Major changes: shortened discussion of PIs,
                      added discussion of rfc include.
v05 2007-03-10 EBD    Added preamble to C program example to tell about ABNF and alternative 
                      images. Removed meta-characters from comments (causes problems).  -->
  </back>
</rfc>
