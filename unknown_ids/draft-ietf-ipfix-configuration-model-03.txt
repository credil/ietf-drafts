


IP Flow Information Export WG                                   G. Muenz
Internet-Draft                                               TU Muenchen
Intended status: Standards Track                               B. Claise
Expires: January 11, 2010                            Cisco Systems, Inc.
                                                               P. Aitken
                                           Cisco Systems (Scotland) Ltd.
                                                           July 10, 2009


              Configuration Data Model for IPFIX and PSAMP
               <draft-ietf-ipfix-configuration-model-03>

Status of this Memo

   This Internet-Draft is submitted to IETF in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on January 11, 2010.

Copyright Notice

   Copyright (c) 2009 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents in effect on the date of
   publication of this document (http://trustee.ietf.org/license-info).
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.






Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt      [Page 1]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


Abstract

   This document specifies a data model for the configuration of
   selection processes, caches, exporting processes, and collecting
   processes of IPFIX and PSAMP compliant monitoring devices using UML
   (Unified Modeling Language) class diagrams.  The configuration data
   is encoded in Extensible Markup Language (XML).  The structure of the
   data model is specified in a YANG module to ensure compatibility with
   the NETCONF protocol.










































Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt      [Page 2]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  5
     1.1.  IPFIX Documents Overview . . . . . . . . . . . . . . . . .  6
     1.2.  PSAMP Documents Overview . . . . . . . . . . . . . . . . .  6

   2.  Terminology  . . . . . . . . . . . . . . . . . . . . . . . . .  6

   3.  Structure of the Configuration Data Model  . . . . . . . . . .  8
     3.1.  UML Representation . . . . . . . . . . . . . . . . . . . . 10
     3.2.  Exporter Configuration . . . . . . . . . . . . . . . . . . 14
     3.3.  Collector Configuration  . . . . . . . . . . . . . . . . . 16

   4.  Configuration Parameters . . . . . . . . . . . . . . . . . . . 17
     4.1.  ObservationPoint Class . . . . . . . . . . . . . . . . . . 17
     4.2.  SelectionProcess Class . . . . . . . . . . . . . . . . . . 18
       4.2.1.  Selector Class . . . . . . . . . . . . . . . . . . . . 19
       4.2.2.  Sampler Classes  . . . . . . . . . . . . . . . . . . . 20
       4.2.3.  Filter Classes . . . . . . . . . . . . . . . . . . . . 20
     4.3.  Cache Class  . . . . . . . . . . . . . . . . . . . . . . . 21
       4.3.1.  CacheLayout Class  . . . . . . . . . . . . . . . . . . 22
     4.4.  ExportingProcess Class . . . . . . . . . . . . . . . . . . 23
       4.4.1.  Destination Class  . . . . . . . . . . . . . . . . . . 24
       4.4.2.  FileWriter Class . . . . . . . . . . . . . . . . . . . 26
       4.4.3.  Options Class  . . . . . . . . . . . . . . . . . . . . 26
       4.4.4.  OptionsTemplate Class  . . . . . . . . . . . . . . . . 27
     4.5.  CollectingProcess Class  . . . . . . . . . . . . . . . . . 28
       4.5.1.  Receiver Class . . . . . . . . . . . . . . . . . . . . 29
       4.5.2.  FileReader Class . . . . . . . . . . . . . . . . . . . 29
     4.6.  Transport Layer Security Class . . . . . . . . . . . . . . 30
     4.7.  Transport Session Class  . . . . . . . . . . . . . . . . . 34
       4.7.1.  Template Class . . . . . . . . . . . . . . . . . . . . 35

   5.  Adaptation to Device Capabilities  . . . . . . . . . . . . . . 35

   6.  YANG Module of the IPFIX/PSAMP Configuration Data Model  . . . 37

   7.  Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . 62
     7.1.  PSAMP Device . . . . . . . . . . . . . . . . . . . . . . . 62
     7.2.  IPFIX Device . . . . . . . . . . . . . . . . . . . . . . . 65
     7.3.  Export of Flow Records and Packet Reports  . . . . . . . . 68
     7.4.  Collector and File Writer  . . . . . . . . . . . . . . . . 73
     7.5.  Deviations . . . . . . . . . . . . . . . . . . . . . . . . 73

   8.  Security Considerations  . . . . . . . . . . . . . . . . . . . 74

   9.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 74




Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt      [Page 3]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   Appendix A.  Acknowledgements  . . . . . . . . . . . . . . . . . . 74

   10. References . . . . . . . . . . . . . . . . . . . . . . . . . . 75
     10.1. Normative References . . . . . . . . . . . . . . . . . . . 75
     10.2. Informative References . . . . . . . . . . . . . . . . . . 75

   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 77












































Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt      [Page 4]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


1.  Introduction

   IPFIX and PSAMP compliant Monitoring Devices (routers, switches,
   monitoring probes, Collectors etc.) offer various configuration
   possibilities that allow adapting network monitoring to the goals and
   purposes of the application, such as accounting and charging, traffic
   analysis, performance monitoring, security monitoring.  The use of a
   common vendor-independent configuration data model for IPFIX and
   PSAMP compliant Monitoring Devices facilitates network management and
   configuration, especially if Monitoring Devices of different
   implementers and/or manufacturers are deployed simultaneously.  On
   the one hand, a vendor-independent configuration data model helps
   storing and managing the configuration data of Monitoring Devices in
   a consistent format.  On the other hand, it can be used for local and
   remote configuration of Monitoring Devices.  However, this requires
   that Monitoring Devices natively support the configuration data
   model, or that a mapping between the configuration data model and the
   device-specific representation of configuration data is provided.

   The purpose of this document is the specification of a vendor-
   independent configuration data model that covers the commonly
   available configuration parameters of Selection Processes, Caches,
   Exporting Processes, and Collecting Processes.  The configuration
   data model is defined using UML (Unified Modeling Language) class
   diagrams [UML] while the actual configuration data is encoded in
   Extensible Markup Language (XML) [W3C.REC-xml-20040204].  An XML
   document conforming to the configuration data model contains the
   configuration data of one Monitoring Device.  In order to ensure
   compatibility with the NETCONF protocol [RFC4741], YANG
   [I-D.ietf-netmod-yang] is used as the modeling language.  If
   required, the YANG specification of the configuration data model can
   be converted into XML Schema language [W3C.REC-xmlschema-0-20041028]
   using the pyang tool [YANG-WEB].  YANG provides mechanisms to adapt
   the configuration data model to device-specific constraints and to
   augment the model with additional device-specific or vendor-specific
   parameters.

   For the configuration of remote Monitoring Devices, an appropriate
   protocol is needed to transfer the XML encoded configuration data.
   The configuration data model is compatible with the NETCONF protocol
   [RFC4741].  However, alternative protocols, such as the Simple Object
   Access Protocol (SOAP) [W3C.REC-soap12-part1-20070427], are also
   suitable for transferring XML data from a network management system
   to a Monitoring Device.

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt      [Page 5]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


1.1.  IPFIX Documents Overview

   The IPFIX protocol [RFC5101] provides network administrators with
   access to IP Flow information.  The architecture for the export of
   measured IP Flow information out of an IPFIX Exporting Process to a
   Collecting Process is defined in [RFC5470], per the requirements
   defined in [RFC3917].  The IPFIX protocol [RFC5101] specifies how
   IPFIX Data Records and Templates are carried via a number of
   transport protocols from IPFIX Exporting Processes to IPFIX
   Collecting Process.  IPFIX has a formal description of IPFIX
   Information Elements, their name, type and additional semantic
   information, as specified in [RFC5102].  [I-D.ietf-ipfix-mib]
   specifies the IPFIX Management Information Base (IPFIX MIB).
   Finally, [RFC5472] describes what type of applications can use the
   IPFIX protocol and how they can use the information provided.  It
   furthermore shows how the IPFIX framework relates to other
   architectures and frameworks.  The storage of IPFIX Messages in a
   file is specified in [I-D.ietf-ipfix-file].

1.2.  PSAMP Documents Overview

   The framework for packet selection and reporting [RFC5474] enables
   network elements to select subsets of packets by statistical and
   other methods, and to export a stream of reports on the selected
   packets to a Collector.  The set of packet selection techniques
   (Sampling, Filtering, and hashing) standardized by PSAMP are
   described in [RFC5475].  The PSAMP protocol [RFC5476] specifies the
   export of packet information from a PSAMP Exporting Process to a
   PSAMP Collector.  Instead of exporting PSAMP Packet Reports, the
   stream of selected packets may also serve as input to the generation
   of IPFIX Flow Records.  Like IPFIX, PSAMP has a formal description of
   its Information Elements, their name, type and additional semantic
   information.  The PSAMP information model is defined in [RFC5477].
   [I-D.ietf-psamp-mib] describes the PSAMP Management Information Base
   (PSAMP MIB).


2.  Terminology

   This document adopts the terminologies used in [RFC5101],
   [I-D.ietf-ipfix-file], and [RFC5476].  As in these documents, all
   specific terms have the first letter of a word capitalized when used
   in this document.  The following listing indicates in which
   references the definitions of those terms that are commonly used
   throughout this document can be found:






Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt      [Page 6]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   o  Definitions adopted from [RFC5101]:
      *  Collection Process
      *  Collector
      *  Data Record
      *  Exporter
      *  Flow Record
      *  Information Element
      *  IPFIX Device
      *  IPFIX Message
      *  Observation Domain
      *  Observation Point
      *  (Options) Template

   o  Definitions adopted from [I-D.ietf-ipfix-file]:
      *  File Reader
      *  File Writer

   o  Definitions adopted from [RFC5476]:
      *  Filtering
      *  Observed Packet Stream
      *  Packet Report
      *  PSAMP Device
      *  Sampling
      *  Selection Process
      *  Selection Sequence
      *  Selection Sequence Report Interpretation
      *  Selector, Primitive Selector, Composite Selector

   The terms Metering Process and Exporting Process have different
   definitions in [RFC5101] and [RFC5476].  In the scope of this
   document, these terms are used according to the following definitions
   which cover the deployment in both PSAMP Devices and IPFIX Devices:

   Metering Process:  The Metering Process generates IPFIX Flow Records
      or PSAMP Packet Reports, depending on its deployment as part of an
      IPFIX Device or PSAMP Device.  Inputs to the process are packets
      observed at one or multiple Observation Points belonging to a
      single Observation Domain, as well as characteristics describing
      the packet treatment at these Observation Points.  The function of
      the Metering Process is split into two types of functional blocks:
      Selection Processes and Caches.

   Exporting Process:  Depending on its deployment as part of an IPFIX
      Device or PSAMP Device, the Exporting Process sends IPFIX Flow
      Records or PSAMP Packet Reports to one or more Collecting
      Processes.  The IPFIX Flow Records or PSAMP Packet Reports are
      generated by one or more Metering Processes.




Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt      [Page 7]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   In addition to the existing IPFIX and PSAMP terminology, the
   following terms are defined:

   Cache:  The Cache is a functional block in a Metering Process which
      maintains IPFIX Flow Records or PSAMP Packet Reports.  According
      to [RFC5101], the maintenance of Flow Records may include creating
      new records, updating existing ones, computing Flow statistics,
      deriving further Flow properties, detecting Flow expiration,
      passing Flow Records to the Exporting Process, and deleting Flow
      Records.  The maintenance of Packet Reports covers the same set of
      functions.

   Cache Layout:  The Cache Layout defines the superset of fields that
      are included in the Packet Reports or Flow Records maintained by
      the Cache.  The fields are specified by the corresponding
      Information Elements.  In general, the largest possible subset of
      the specified fields is derived for every Packet Report or Flow
      Record.  More specific rules about which fields must be included
      are given in Section 4.3.1.

   Cache Mode:  The Cache Mode specifies whether Packet Reports or Flow
      Records are generated by the Cache.  In the case of Flow Records,
      it also specifies the Flow expiration policy.

   Monitoring Device:  A Monitoring Device implements at least one of
      the functional blocks specified in the context of IPFIX or PSAMP.
      In particular, the term Monitoring Device encompasses Exporters,
      Collectors, IPFIX Devices, and PSAMP Devices.

   Selected Packet Stream:  The Selected Packet Stream is the set of all
      packets selected by a Selection Process.


3.  Structure of the Configuration Data Model

   The IPFIX reference model in [RFC5470] describes Metering Processes,
   Exporting Processes, and Collecting Processes as functional blocks of
   IPFIX Devices.  The PSAMP framework [RFC5474] provides the
   corresponding information for PSAMP Devices and introduces Selection
   Processes as functional blocks within Metering Processes.  In
   Section 2 of the document, the Cache is defined as another functional
   block within Metering Processes.  Further explanations about the
   relationship between Selection Processes and Caches are given later
   on in this section.  IPFIX File Reader and File Writer are defined as
   specific kinds of Exporting and Collecting Processes in
   [I-D.ietf-ipfix-file].

   Monitoring Device implementations usually maintain the separation of



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt      [Page 8]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   various functional blocks although they do not necessarily implement
   all of them.  Furthermore, they provide various configuration
   possibilities; some of them are specified as mandatory by the IPFIX
   protocol [RFC5101] or PSAMP protocol [RFC5476].  The configuration
   data model enables the setting of commonly available configuration
   parameters for Selection Processes, Caches, Exporting Processes, and
   Collecting Processes.  In addition, it allows specifying the
   composition of functional blocks within a Monitoring Device
   configuration and their linkage with Observation Points.

   In a Monitoring Device implementation, the functionality of the
   Metering Process is commonly split into packet Sampling and Filtering
   functions performed by Selection Processes, and the maintenance of
   Flow Records and Packet Reports performed by Caches.  Figure 1
   illustrates this separation with the example of a basic Metering
   Process consisting of one Selection Process and one Cache.

               +-----------------------------------+
               | Metering Process                  |
               | +-----------+ Selected            |
      Observed | | Selection | Packet    +-------+ |  Stream of
      Packet  -->| Process   |---------->| Cache |--> Flow Records or
      Stream   | +-----------+ Stream    +-------+ |  Packet Reports
               +-----------------------------------+

     Figure 1: Selection Process and Cache forming a Metering Process

   The configuration data model adopts the separation of Selection
   Processes and Caches in order to support the flexible configuration
   and combination of these functional blocks.  As defined in [RFC5476],
   the Selection Process takes the Observed Packet Stream as its input
   and selects a subset of that stream as its output (Selected Packet
   Stream).  The action of the Selection Process on a single packet of
   its input is defined by a Primitive Selector or a Composite Selector.
   The Cache generates Flow Records or Packet Reports from the Selected
   Packet Stream, depending on the configured Cache Mode.

   The Observed Packet Stream at the input of a Selection Process MUST
   only contain packets originating from a single Observation Domain.
   Similarly, the Selected Packet Stream at the input of a Cache MUST
   only contain packets originating from a single Observation Domain.
   Packets from Observation Points belonging to different Observation
   Domains MUST NOT enter the same Selection Process or the same Cache.

   Beyond the basic Metering Process shown in Figure 1, the
   configuration data model enables the specification of more complex
   configurations.  A single Cache may process the output of multiple
   Selection Processes.  The Selected Packet Stream may be copied to



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt      [Page 9]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   enter several Caches, for example one Cache that generates Flow
   Records and another Cache that generates Packet Reports.  Selection
   Processes can also be cascaded, such that the Selected Packet Stream
   at the output of one Selection Process is passed to another Selection
   Process.  Cascading Selection Processes can be useful in specific
   contexts such as the example in Section 7.3.

   The selection of parameters in the configuration data model is based
   on configuration issues discussed in the IPFIX and PSAMP documents
   [RFC3917], [RFC5101], [RFC5470], [RFC5476], [RFC5474], and [RFC5475].
   Furthermore, the structure and content of the IPFIX MIB module
   [I-D.ietf-ipfix-mib] and the PSAMP MIB module [I-D.ietf-psamp-mib]
   have been taken into consideration.  Consistency between the
   configuration data model and the IPFIX and PSAMP MIB modules is an
   intended goal.  Therefore, parameters in the configuration data model
   are named according to corresponding managed objects.  Certain IPFIX
   MIB objects containing state data have been adopted as state
   parameters in the configuration data model.  State parameters cannot
   be configured, yet their values can be queried from the Monitoring
   Device.

   The next section explains how UML class diagrams are deployed to
   illustrate the structure of the configuration data model.
   Thereafter, Section 3.2 and Section 3.3 explain the class diagrams
   for the configuration of Exporters and Collectors, respectively.
   Each of the presented classes contains specific configuration
   parameters which are specified in Section 4.  The formal definition
   of the configuration data model in YANG is given in Section 6.
   Section 7 illustrates the usage of the model with example
   configurations in XML.  Section 5 gives a short introduction to YANG
   concepts that allow adapting the configuration data model to the
   capabilities of a device.

3.1.  UML Representation

   We use UML class diagrams [UML] to explain the structure of the
   configuration data model.  The attributes of the classes are the
   configuration or state parameters of the Monitoring Device.













Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 10]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


         +----------------------------+
         | Selector                   |
         +----------------------------+      1 +-----------------+
         | name                       |<>------+ SelectAll/      |
         | selectorId[0..1]           |        | SampCountBased/ |
         | packetsObserved {readOnly} |        | SampTimeBased/  |
         | packetsDropped {readOnly}  |        | SampRandOutOfN/ |
         |                            |        | SampUniProb/    |
         |                            |        | SampNonUniProb/ |
         |                            |        | SampFlowState/  |
         |                            |        | FilterMatch/    |
         |                            |        | FilterHash/     |
         |                            |        | FilterRState    |
         +----------------------------+        +-----------------+

                   Figure 2: UML example: Selector class

   As an example, Figure 2 shows the UML diagram of the Selector class,
   which is specified in more detail in Section 4.2.1.  The upper box
   contains the name of the class.  The lower box lists the attributes
   of the class.  Attributes with property "{readOnly}" (i.e.,
   packetsObserved and packetsDropped) are state parameters which cannot
   be configured by the user.

   The attribute selectorId has a multiplicity indicator of "[0..1]",
   which means that the user MAY configure the corresponding parameter.
   In some cases, not configuring a parameter has a specific meaning for
   the configuration, such as in the case of isFlowKey parameter in the
   CacheField class (see Section 4.3.1).  In other cases, the parameter
   will be set to a default value or to a value chosen by the device,
   depending on the parameter specification.  The later will happen for
   selectorId.  A multiplicity indicator of "[0..*]" (not shown in the
   example) means that this parameter can be configured multiple times
   with different values.  Attributes without multiplicity indicator
   appear exactly once.  In the case of configuration parameters (i.e.,
   attributes without property "{readOnly}", such as name in the
   example), these parameters MUST be configured by the user.

   If some parameters are related to each other, it can make sense to
   group these parameters in a subclass.  This is especially useful if
   different subclasses represent choices of different parameter sets,
   or if the parameters of a subclass may appear multiple times.  For
   example, the Selector class contains the parameters of one of the
   subclasses SelectAll, SampCountBased, SampTimeBased,sampRandOutOfN,
   SampUniProb, SampNonUniProb, SampFlowState, FilterMatch, FilterHash,
   and FilterRState.  As another example, the OptionsTemplate class may
   contain multiple times the parameters of the OptionsField subclass
   (see Section 4.4.4).



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 11]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   Classes define the structure of the objects of a specific
   configuration.  Objects and their parameters are encoded as XML
   elements.  So, one object of the Selector class corresponds to one
   occurrence of

     <selector>
       <name>my-selector</name>
       ...
     </selector>

   There are various possibilities how objects of classes can be related
   to each other.  In the scope of this document, we use two different
   types of relationship between objects: aggregation and unidirectional
   association.  In UML class diagrams, two different arrow types are
   used as shown in Figure 3.

            +---+   0..* +---+         +---+ 0..*  1 +---+
            | A |<>------| B |         | A |-------->| B |
            +---+        +---+         +---+         +---+
             (a) Aggregation     (b) Unidirectional association

            Figure 3: Class relationships in UML class diagrams

   Aggregation means that one object is part of the other object.  In
   Figure 3 (a), an object of class B is part of an object of class A.
   This corresponds to nested XML elements:

     <a>
       <b>
         ...
       </b>
       ...
     </a>

   Note that we write class names starting with a capital letter
   throughout this document.  The corresponding XML elements use
   identical names starting with an uncapitalized letter because they
   represent objects, not classes.

   A unidirectional association is a reference to an object.  In
   Figure 3 (b), an object of class A contains a reference to an object
   of class B. This corresponds to separate XML elements that are not
   nested.  To distinguish different objects of class B, class B must
   have a key.  In the configuration data model, all keys are string
   parameters called "name", corresponding to XML elements <name>.  The
   names must be unique within the XML document.  The reference to a
   specific object of class B is encoded with an XML element <b> which
   contains the corresponding object name.  In the given example, this



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 12]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   may look as follows:

     <a>
       ...
       <b>foo</b>
       ...
     </a>

     <b>
       <name>foo</name>
       ...
     </b>

   In Figure 3, the indicated numbers define the multiplicity:

      "1": one only
      "0..*": zero or more
      "1..*": one or more

   In the case of aggregation, the multiplicity indicates how many
   objects of one class may be included in one object of the other
   class.  In Figure 3 (a), an object of class A may contain an
   arbitrary number of objects of class B. In the case of unidirectional
   association, the multiplicity at the arrowhead specifies the number
   of objects of a given class that may be referred to.  The
   multiplicity at the arrowtail specifies how many different objects of
   one class may refer to a single object of the other class.  In
   Figure 3 (b), an object of class A refers to single object of class
   B. One object of class B can be referred to from an arbitrary number
   of objects of class A.

   Similar to classes that are referenced in UML associations, classes
   which contain configuration parameters and which occur with
   multiplicity greater than one in an aggregation relationship must
   have a key which allows distinguishing different objects.  This key
   is necessary because every configuration parameter must be
   addressable in order to manipulate or delete it.  The values of the
   key must be unique in the scope of the aggregating object.  Hence,
   under the assumption that class B in Figure 3 (a) contains at least
   one configuration parameter, all objects of class B belonging to the
   same object of class A must have different key values.  Again, the
   key appears as an attribute called "name" in all concerned classes.

   A class which contains state parameters but no configuration
   parameters, such as the Template class (see Section 4.7.1), does not
   have a key.  This is because state parameters cannot be manipulated
   or deleted, and therefore do not need to be addressable.




Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 13]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   Note that the usage of keys as described above is also required by
   YANG [I-D.ietf-netmod-yang] which mandates the existence of a key for
   all elements which appear in lists of configuration data.

   The configuration data model for IPFIX and PSAMP makes use of
   unidirectional associations to specify the data flow between
   different functional blocks.  For example, if the output of a
   Selection Process is processed by a Cache, this corresponds to an
   object of the SelectionProcess class that contains a reference to an
   object of the Cache class.  The configuration data model does not
   mandate that such a reference exists for every functional block that
   has an output.  If such a reference is absent, the output is dropped
   without any further processing.  Although such configurations are
   incomplete, we do not consider them as invalid as they may
   temporarily occur if a Monitoring Device is configured in multiple
   steps.  Also, it might be useful to pre-configure certain functions
   of a Monitoring Device in order to be able to switch to a new
   configuration more quickly.

3.2.  Exporter Configuration

   Figure 4 below shows the main classes of the configuration data model
   which are involved in the configuration of an IPFIX or PSAMP
   Exporter.  The role of the classes can be briefly summarized as
   follows:

   o  The ObservationPoint class specifies an Observation Point (i.e.,
      an interface or linecard) of the Monitoring Device at which
      packets are captured for traffic measurements.  An object of the
      ObservationPoint class may be associated with one or more objects
      of the SelectionProcess class configuring Selection Processes that
      process the observed packets in parallel.  As long as an
      ObservationPoint object is specified without any references to
      SelectionProcess objects, the Observation Point is not deployed
      for traffic measurements.

   o  The SelectionProcess class contains the configuration parameters
      of a Selection Process.  The Selection Process may be composed of
      a single Selector or a sequence of Selectors, defining a Primitive
      or Composite Selector, respectively.

      The Selection Process selects packets from an Observed Packet
      Stream originating from one or multiple Observation Points.
      Therefore, a SelectionProcess object MAY be referred to from
      multiple ObservationPoint objects.  The corresponding Observation
      Points must belong to the same Observation Domain.

      A Selection Process MAY pass the Selected Packet Stream to one or



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 14]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


      multiple Caches.  Therefore, the SelectionProcess class enables
      references to objects of the Cache class.

      It is possible to cascade different Selection Processes.  In this
      case, the Selected Packet Stream at the output of one or multiple
      Selection Processes is passed to the input of another Selection
      Process.  Therefore, a SelectionProcess object MAY be referred to
      from multiple SelectionProcess objects.  For the same reason, one
      SelectionProcess object may refer to other objects of the same
      class.  When cascading multiple Selection Processes, it must be
      ensured that all packets entering a Selection Process have been
      observed at Observation Points belonging to the same Observation
      Domain.  A configuration example is given later in Section 7.3.

      If a Selection Process is configured without any reference to
      Selection Processes or Caches that receive the selected packets,
      the selected packets are not accounted in any Packet Report or
      Flow Record.

   o  The Cache class contains configuration parameters of a Cache.  A
      Cache may receive the output of one or more Selection Processes
      and maintains corresponding Packet Reports or Flow Records.
      Therefore, an object of the Cache class MAY be referred to from
      multiple SelectionProcess objects.  However, the configuration
      MUST ensure that all packets entering the Selection Process have
      been observed at Observation Points belonging to the same
      Observation Domain.

      Configuration parameters of the Cache class specify the size of
      the Cache, the Cache Mode and Layout, and expiration parameters.
      The Cache Mode determines if Packet Reports or Flow Records are
      generated.

      A Cache MAY pass its output to one or multiple Exporting Process.
      Therefore, the Cache class enables references to one or multiple
      objects of the ExportingProcess class.  If a Cache object does not
      specify any reference to an ExportingProcess object, the Cache
      output is dropped.

   o  The ExportingProcess class contains configuration parameters of an
      Exporting Process.  It includes various transport protocol
      specific parameters and the export destinations.  An object of the
      ExportingProcess class MAY be referred to from multiple objects of
      the Cache class.

      An Exporting Process MAY be configured as a File Writer according
      to [I-D.ietf-ipfix-file].




Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 15]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


                        +------------------+
                        | ObservationPoint |
                        +------------------+
                             0..* |
                                  |
                             0..* V
                        +------------------+
                        | SelectionProcess |
                        +------------------+<-+
                             0..* |  0..* |   | 0..*
                                  |       +---+
                             0..* V
                        +------------------+
                        | Cache            |
                        +------------------+
                             0..* |
                                  |
                             0..* V
                        +------------------+
                        | ExportingProcess |
                        +------------------+

             Figure 4: Class diagram of Exporter configuration

3.3.  Collector Configuration

   Figure 5 below shows the main classes of the configuration data model
   which are involved in the configuration of a Collector.  An object of
   the CollectingProcess class specifies the local IP addresses,
   transport protocols and port numbers of a Collecting Process.
   Alternatively, the Collecting Process MAY be configured as a File
   Reader according to [I-D.ietf-ipfix-file].

   An object of the CollectingProcess class may refer to one or multiple
   ExportingProcess objects configuring Exporting Processes that
   reexport the received data.  As an example, an Exporting Process can
   be configured as a File Writer in order to save the received IPFIX
   Messages in a file.

           +-------------------+ 0..*  0..* +------------------+
           | CollectingProcess |----------->| ExportingProcess |
           +-------------------+            +------------------+

            Figure 5: Class diagram of Collector configuration







Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 16]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


4.  Configuration Parameters

   This section specifies the configuration and state parameters of the
   configuration data model separately for each class.  Parameters
   serving as keys are depicted in brackets.

4.1.  ObservationPoint Class

       +--------------------------+
       | ObservationPoint         |
       +--------------------------+          1 +--------------------+
       | name                     |<>----------| Interface/Linecard |
       | observationPointId[0..1] |            +--------------------+
       | observationDomainId      |
       |                          | 0..*  0..* +--------------------+
       |                          |----------->| SelectionProcess   |
       +--------------------------+            +--------------------+

       +------------------+   +----------------------------------+
       | Interface        |   | Linecard                         |
       +------------------+   +----------------------------------+
       | ifIndex/ifName   |   | entPhysicalIndex/entPhysicalName |
       | direction[0..1]  |   | direction[0..1]                  |
       +------------------+   +----------------------------------+

                     Figure 6: ObservationPoint class

   Figure 6 shows the ObservationPoint class that identifies an
   Observation Point of the Monitoring Device.  The Observation Point
   can either be an interface or a linecard.

   An object of the ObservationPoint class MUST specify the ID of the
   Observation Domain the Observation Point belongs to.  Observation
   Points that are configured with the same Observation Domain ID belong
   to the same Observation Domain.  The configuration of the Observation
   Point ID (i.e., the value of the Information Element
   observationPointId [RFC5102]) is OPTIONAL.  If this parameter is
   missing in the configuration data, it is set by the Monitoring
   Device.

   The configuration parameters to identify an interface or a linecard
   are as follows:

   ifIndex/ifName (interface only):  Either the index or name of the
      interface MUST be specified according to corresponding objects in
      the IF-MIB [RFC2863].





Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 17]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   entPhysicalIndex/entPhysicalName (linecard only):  Either the index
      or name of the linecard MUST be specified according to
      corresponding objects in the ENTITY-MIB [RFC4133].
   direction:  This parameter specifies if ingress traffic, egress
      traffic, or both ingress and egress traffic is captured.  If not
      configured, ingress and egress traffic is captured.  If not
      applicable (e.g., in the case of a sniffing interface in
      promiscuous mode), the value of this parameter is ignored.

   An ObservationPoint object MAY refer to one or multiple
   SelectionProcess objects configuring Selection Processes that process
   the observed packets in parallel.

4.2.  SelectionProcess Class

           +---------------------------+
           | SelectionProcess          |
           +---------------------------+       1..* +----------+
           | name                      |<>----------| Selector |
           | selectionSequenceId[0..1] |            +----------+
           |                           | 0..*
           |                           |<---+
           |                           |    |
           |                           |----+
           |                           | 0..*
           |                           |
           |                           | 0..*  0..* +----------+
           |                           |----------->| Cache    |
           +---------------------------+            +----------+

                     Figure 7: SelectionProcess class

   Figure 7 shows the SelectionProcess class.  The SelectionProcess
   class contains the configuration parameters of a Selection Process
   which selects packets from the Observed Packet Stream at its input
   and outputs the Selected Packet Stream to one or multiple other
   Selection Processes or Caches.  A non-empty ordered list defines a
   sequence of Selectors.  The actions defined by the Selectors are
   applied to the stream of incoming packet in the specified order.

   The parameter selectionSequenceId configures the Selection Sequence
   ID (i.e., the value of the Information Element selectionSequenceId
   [RFC5477]).  If not configured, the Selection Sequence ID is assigned
   by the Monitoring Device.  In both cases, the Selection Sequence ID
   MUST be unique within the Observation Domain as required by
   [RFC5477].

   The output of one Selection Process MAY be processed by other



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 18]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   Selection Processes.  Therefore, the SelectionProcess class allows
   references to itself, meaning that one SelectionProcess object MAY
   refer to other SelectionProcess objects.

   A SelectionProcess object MAY include references to one or more
   objects of the Cache class configuring Caches that receive the
   Selected Packet Stream and generate corresponding Packet Reports or
   Flow Records.

4.2.1.  Selector Class

         +----------------------------+
         | Selector                   |
         +----------------------------+      1 +-----------------+
         | name                       |<>------+ SelectAll/      |
         | selectorId[0..1]           |        | SampCountBased/ |
         | packetsObserved {readOnly} |        | SampTimeBased/  |
         | packetsDropped {readOnly}  |        | SampRandOutOfN/ |
         |                            |        | SampUniProb/    |
         |                            |        | SampNonUniProb/ |
         |                            |        | SampFlowState/  |
         |                            |        | FilterMatch/    |
         |                            |        | FilterHash/     |
         |                            |        | FilterRState    |
         +----------------------------+        +-----------------+

                         Figure 8: Selector class

   The Selector class in Figure 8 contains the configuration and state
   parameters of a Selector.  Standardized PSAMP Sampling and Filtering
   methods are described in [RFC5475]; their configuration parameters
   are specified in corresponding sampler (SampCountBased,
   SampTimeBased, SampRandOutOfN, SampUniProb, SampNonUniProb,
   SampFlowState) or filter (FilterMatch, FilterHash, FilterRState)
   classes.  In addition, the SelectAll class, which has no parameters,
   is used for a Selector that selects all packets.  The Selector class
   includes exactly one of these sampler and filter classes, depending
   on the applied method.

   The parameter selectorId configures the Selector ID (i.e., the value
   of the Information Element selectorId [RFC5477]).  If not configured,
   the Selector ID is assigned by the Monitoring Device.  The Selector
   ID MUST be unique within the Observation Domain as required by
   [RFC5477].

   As state parameters, the Selector class contains the Selector
   statistics packetsObserved and packetsDropped that correspond to the
   objects of the ipfixSelectorStatsTable in the IPFIX MIB module



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 19]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   [I-D.ietf-ipfix-mib].

4.2.2.  Sampler Classes

        +----------------+   +----------------+   +----------------+
        | SampCountBased |   | SampTimeBased  |   | SampRandOutOfN |
        +----------------+   +----------------+   +----------------+
        | interval       |   | interval       |   | population     |
        | spacing        |   | spacing        |   | sample         |
        +----------------+   +----------------+   +----------------+

        +----------------+   +----------------+   +----------------+
        | SampUniProb    |   | SampNonUniProb |   | SampFlowState  |
        +----------------+   +----------------+   +----------------+
        | probability    |   | function       |   | func           |
        |                |   | funcParam      |   | funcParam      |
        +----------------+   +----------------+   +----------------+

                         Figure 9: Sampler classes

   The Sampler classes in Figure 9 contain the configuration parameters
   of specific Sampling algorithms.  The names and semantics of the
   parameters correspond to the managed objects in the PSAMP MIB module
   [I-D.ietf-psamp-mib].

4.2.3.  Filter Classes

   +------------------------+   +--------------------+   +------------------+
   | FilterMatch            |   | FilterHash         |   | FilterRState     |
   +------------------------+   +--------------------+   +------------------+
   | ieId/ieName            |   | addrType           |   | function         |
   | enterpriseNumber[0..1] |   | headerBits         |   | negate[0..1]     |
   | startValue             |   | payloadBytes[0..1] |   | ifIndex          |
   | stopValue              |   | payloadBits[0..1]  |   | startAS[0..1]    |
   | mask[0..1]             |   | function           |   | stopAS[0..1]     |
   |                        |   | inputBits          |   | vendorFunc[0..1] |
   |                        |   | outputBits         |   |                  |
   |                        |   | outputMask         |   |                  |
   |                        |   | selection          |   |                  |
   +------------------------+   +--------------------+   +------------------+

                         Figure 10: Filter classes

   The Filter classes in Figure 10 contain the configuration parameters
   of specific Filtering methods.  The names and semantics of the
   parameters correspond to the managed objects in the PSAMP MIB module
   [I-D.ietf-psamp-mib].  In the case of the FilterMatch class, the
   configuration data model deviates from the PSAMP MIB module allowing



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 20]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   the specification of a field by either ID or name of the Information
   Element.  An enterprise number MAY be specified to define an
   enterprise-specific Information Element.

4.3.  Cache Class

        +--------------------------+
        | Cache                    |
        +--------------------------+          1 +-------------+
        | name                     |<>----------| CacheLayout |
        | cacheMode                |            +-------------+
        | maxRecords[0..1]         |
        | activeTimeout[0..1]      | 0..*  0..* +------------------+
        | inactiveTimeout[0..1]    |----------->| ExportingProcess |
        | activeFlows {readOnly}   |            +------------------+
        | inactiveFlows {readOnly} |
        | dataRecords {readOnly}   |
        +--------------------------+

                          Figure 11: Cache class

   Figure 11 shows the Cache class that contains the configuration and
   state parameters of a Cache.  The configuration parameters of the
   Cache class are as follows:

   cacheMode:  Configures the Cache Mode.  The value of this parameter
      MUST be one of the following:
      *  immediate: Data Records expire after the first packet
      *  timeout: Data Records expire after active or inactive timeout
      *  permanent: Data Records never expire, but are periodically
         exported with interval set by the active timeout
      In the case of "immediate", PSAMP Packet Reports are generated.
      Otherwise, IPFIX Flow Records are generated.
   maxRecords:  Maximum number of Data Records in the Cache.
   activeTimeout:  Timeout in seconds after which an active Flow is
      timed out anyway even if there is still a continuous flow of
      packets.  If not configured, the Monitoring Devices sets this
      parameter.
   inactiveTimeout:  A Flow is considered to be timed out if no packets
      belonging to the Flow have been observed for the amount of time
      specified by this parameter.  The unit is seconds.  If not
      configured, the Monitoring Devices sets this parameter.

   The parameters activeTimeout and inactiveTimeout MUST NOT be
   specified if the Cache Mode is "immediate".  The parameter
   inactiveTimeout MUST NOT be specified if the Cache Mode is
   "permanent".




Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 21]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   An object of the Cache class includes an object of the CacheLayout
   class that defines which fields are included in the Packet Reports or
   Flow Records.  A Cache object MAY refer to one or multiple
   ExportingProcess objects configuring different Exporting Processes.

   As state parameters, the Cache class contains the Metering Process
   statistics activeFlows, inactiveFlows, and dataRecords that
   correspond to the objects of the ipfixMeteringProcessStatsTable of
   the IPFIX MIB module [I-D.ietf-ipfix-mib].

4.3.1.  CacheLayout Class

             +--------------+
             | CacheLayout  |
             +--------------+   1..* +------------------------+
             |              |<>------| CacheField             |
             |              |        +------------------------+
             |              |        | name                   |
             |              |        | ieId/ieName            |
             |              |        | ieLength[0..1]         |
             |              |        | enterpriseNumber[0..1] |
             |              |        | isFlowKey[0..1]        |
             +--------------+        +------------------------+

                       Figure 12: CacheLayout class

   A Cache generates and maintains Packet Reports or Flow Records
   containing information that has been extracted from the incoming
   stream of packets.  Using the CacheField class, the CacheLayout class
   specifies the superset of fields that are included in the Packet
   Reports or Flow Records (see Figure 12).

   If Packet Reports are generated (i.e., if Cache Mode is "immediate"),
   every field specified by the Cache Layout MUST be included in the
   resulting Packet Report unless the corresponding Information Element
   is not applicable or cannot be derived from the content or treatment
   of the incoming packet.

   If Flow Records are generated (i.e., if Cache Mode is "timeout" or
   "permanent"), every Flow Key field specified by the Cache Layout MUST
   be included as Flow Key in the resulting Flow Record unless the
   corresponding Information Element is not applicable or cannot be
   derived from the content or treatment of the incoming packet.  Two
   packets MUST be accounted by different Flow Records if different
   subsets of the Flow Key fields are applicable or derivable.  Every
   non-key field specified by the Cache Layout MUST be included in the
   resulting Flow Record unless the corresponding Information Element is
   not applicable or cannot be derived for the given Flow.



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 22]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   For example, if a non-key field specifies an Information Element
   whose value is determined by the first packet observed within a Flow
   (which is the default rule according to [RFC5102]), this field MUST
   be included in the resulting Flow Record if it can be determined from
   the first packet of the Flow.

   The CacheLayout class does not have any parameters.  The
   configuration parameters of the CacheField class are as follows:

   ieId, ieName, ieLength, enterpriseNumber:  These parameters specify a
      field by the combination of the Information Element identifier or
      name, the Information Element length, and the Information Element
      enterprise number.  Either ieId or ieName MUST be specified.
      ieLength MAY be omitted if a default length exists for the
      specified Information Element.  If ieLength is set to 65535, the
      field is exported as variable-length Information Element.
      enterpriseNumber is only used for enterprise-specific Information
      Elements.
   isFlowKey:  If present, this field is a Flow Key.

4.4.  ExportingProcess Class

             +--------------------+
             | ExportingProcess   |
             +--------------------+   0..* +------------------+
             | name               |<>------| Destination      |
             |                    |        +------------------+
             |                    |
             |                    |   0..* +------------------+
             |                    |<>------| FileWriter       |
             |                    |        +------------------+
             |                    |
             |                    |   0..* +------------------+
             |                    |<>------| Options          |
             |                    |        +------------------+
             |                    |
             |                    |   0..* +------------------+
             |                    |<>------| TransportSession |
             +--------------------+        +------------------+

                     Figure 13: ExportingProcess class

   The ExportingProcess class in Figure 13 specifies export destinations
   and files to which the IPFIX Messages are exported using objects of
   the Destination class and the FileWriter, respectively.  These two
   classes are described in Section 4.4.1 and Section 4.4.2.  If not
   configured, the Exporting Process ID is assigned by the Monitoring
   Device.  The reporting of specific information with Options Templates



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 23]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   is defined with objects of the Options class.

   As state data, the ExportingProcess class contains the list of
   Transport Sessions that originate from the Exporting Process.  The
   TransportSession class is specified in Section 4.7.

4.4.1.  Destination Class

    +------------------------------------------------+
    | Destination                                    |
    +------------------------------------------------+
    | name                                           |<>-----+
    | exportMemberType[0..1]                         |       | 0..1
    | ipfixVersion[0..1]                             |       |
    | transportProtocol                              |   +------------+
    | destinationIpAddress                           |   | Transport- |
    | destinationPort[0..1]                          |   | Layer-     |
    | sourceIpAddress[0..1] {UDP only}               |   | Security   |
    | localIpAddress[0..*] {SCTP only}               |   +------------+
    | sendBufferSize[0..1]                           |
    | rateLimit[0..1]                                |
    | timedReliability[0..1] {SCTP only}             |
    | numberOfStreams[0..1] {SCTP only}              |
    | orderedDelivery[0..1] {SCTP only}              |
    | templateRefreshTimeout[0..1] {UDP only}        |
    | optionsTemplateRefreshTimeout[0..1] {UDP only} |
    | templateRefreshPacket[0..1] {UDP only}         |
    | optionsTemplateRefreshPacket[0..1] {UDP only}  |
    +------------------------------------------------+

                       Figure 14: Destination class

   The Destination class shown in Figure 14 contains the configuration
   parameters of one export destination (i.e., Collector) the Exporting
   Process sends IPFIX Messages to.  Some of the parameters are only
   applicable if a specific transport protocol (SCTP, UDP, or TCP) is
   used.  The following parameters apply to all transport protocols:

   exportMemberType:  Configures the export member type that corresponds
      to the ipfixTransportSessionGroupMemberType object in
      [I-D.ietf-ipfix-mib].  The value of this parameter MUST be one of
      the following:
      *  primary: primary target of the Exporting Process
      *  secondary: secondary target of the Exporting Process used when
         the primary target is not reachable
      *  parallel: parallel exporting to all destinations and files of
         the Exporting Process




Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 24]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


      *  loadBalancing: load-balancing between different destinations
      At most one destination or file may be configured with type
      "primary".  If "parallel" or "loadBalancing" is used, the same
      type must be configured for all destinations and File Writers of
      the Exporting Process.
   ipfixVersion:  Version number of the IPFIX protocol used.  If
      omitted, version 10 (=0x000a) is used as specified in [RFC5101].
   transportProtocol:  One of "sctp", "udp", and "tcp".
   destinationIpAddress, destinationPort:  Destination IP address and
      destination port number to be used. destinationIpAddress is a
      mandatory parameter.  If destinationPort is omitted, standard port
      4739 (IPFIX without TLS and DTLS) or 4740 (IPFIX over TLS or DTLS)
      is used.
   sendBufferSize:  Size of the socket send buffer in bytes.
   rateLimit:  Maximum number of bytes per second the Exporting Process
      may export to the given destination as required by [RFC5476].  The
      number of bytes is calculated from the lengths of the IPFIX
      Messages exported.

   The following parameters are applicable if SCTP is transport
   protocol:

   localIpAddress:  This optional parameter MAY appear multiple times to
      specify the list of eligible local IP addresses of the SCTP
      association [RFC4960].  If omitted, all locally assigned IP
      addresses are used by the SCTP endpoint.
   timedReliability:  Lifetime in timeticks (i.e., hundredths of a
      second) until an IPFIX Message containing Data Sets only is
      "abandoned" due to the timed reliability mechanism of PR-SCTP
      [RFC3758].  If this parameter is omitted or set to zero, reliable
      SCTP transport is used.
   numberOfStreams:  Number of outbound streams requested for SCTP
      associations [RFC4960].
   orderedDelivery:  Boolean parameter controlling the ordered delivery
      of IPFIX Messages containing Data Sets [RFC4960].  If this
      parameter is omitted, ordered delivery is enabled.

   The following parameters are applicable if UDP is transport protocol:

   sourceIpAddress:  This OPTIONAL parameter sets the source IP address.
      If this parameter is omitted, the address assigned to the outgoing
      interface is used.
   templateRefreshTimeout, optionsTemplateRefreshTimeout,
   templateRefreshPacket, optionsTemplateRefreshPacket:  Template
      refresh parameters when using UDP as transport protocol.
      templateRefreshTimeout and optionsTemplateRefreshTimeout are
      specified in seconds between resendings of (Options) Templates.
      If omitted, the default value of 600 seconds (10 minutes) is used



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 25]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


      [RFC5101]. templateRefreshPacket and optionsTemplateRefreshPacket
      are specified in number of IPFIX Messages.  If omitted, the
      (Options) Templates are only resent after timeout.

   Using the TransportLayerSecurity class, transport layer security is
   enabled and configured for this export destination.  If the transport
   protocol is SCTP or UDP, transport layer security is realized using
   DTLS.  In the case of TCP, TLS is used instead.

4.4.2.  FileWriter Class

                         +------------------------+
                         | FileWriter             |
                         +------------------------+
                         | name                   |
                         | exportMemberType[0..1] |
                         | ipfixVersion[0..1]     |
                         | file                   |
                         +------------------------+

                       Figure 15: FileWriter classes

   Instead of exporting IPFIX Messages to remote destinations, the
   Exporting Process can write them to a file as proposed in
   [I-D.ietf-ipfix-file].  The FileWriter class contains the
   configuration parameters for writing the IPFIX Messages to a specific
   file:

   exportMemberType:  Same parameter as in the Destination class.  The
      File Writers of an Exporting Process belong to the same Transport
      Session group as any destination configured for the same Exporting
      Process.
   ipfixVersion:  Version number of the IPFIX protocol used.  If
      omitted, version 10 (=0x000a) is used as specified in [RFC5101].
   file:  File name and location specified as URI.

4.4.3.  Options Class

                +---------------+
                | Options       |
                +---------------+   0..1 +-----------------+
                | name          |<>------| OptionsTemplate |
                | optionsType   |        +-----------------+
                | timeout[0..1] |
                +---------------+

                         Figure 16: Options class




Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 26]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   The Options class in Figure 16 defines the type of specific
   information to be reported, such as statistics, flow keys, Sampling
   and Filtering parameters etc.  [RFC5101] and [RFC5476] specify
   several types of reporting information which may be exported.  The
   optionsType parameter MUST be set to one of the following values:

   meteringStatistics:  Export of Metering Process statistics using the
      Metering Process Statistics Options Template [RFC5101].
   meteringReliability:  Export of Metering Process reliability
      statistics using the Metering Process Reliability Statistics
      Options Template [RFC5101].
   exportingReliability:  Export of Exporting Process reliability
      statistics using the Exporting Process Reliability Statistics
      Options Template [RFC5101].
   flowKeys:  Export of the Flow Key specification using the Flow Keys
      Options Template [RFC5101].
   selectionSequence:  Export of Selection Sequence Report
      Interpretation and Selector Report Interpretation [RFC5476].
   selectionStatistics:  Export of Selection Sequence Statistics Report
      Interpretation [RFC5476].
   accuracy:  Export of Accuracy Report Interpretation [RFC5476].
   reducingRedundancy:  Export of common properties according to
      [RFC5473].

   optionsType is a mandatory parameter.  The Options Template MAY be
   configured, using the OptionsTemplate class.  If no Options Template
   is specified, the Exporter MUST choose a template definition
   according to the options type and available options data.

   The timeout parameter specifies the reporting interval.  If the
   timeout parameter is omitted or set to zero, the corresponding
   reporting information will be exported only once.  Otherwise, the
   information is exported periodically.

4.4.4.  OptionsTemplate Class

           +-----------------+
           | OptionsTemplate |
           +-----------------+   0..* +------------------------+
           |                 |<>------| OptionsField           |
           |                 |        +------------------------+
           |                 |        | name                   |
           |                 |        | ieId/ieName            |
           |                 |        | ieLength[0..1]         |
           |                 |        | enterpriseNumber[0..1] |
           |                 |        | isScope[0..1]          |
           +-----------------+        +------------------------+




Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 27]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


                     Figure 17: OptionsTemplate class

   The Options Template class specifies the fields of an Options
   Template using the OptionsField class.  The configuration parameters
   of the OptionsField class are the same as for the CacheField class
   (see Section 4.3.1), except for the isFlowKey parameter which does
   not exist.  If the additional parameter isScope is present, the field
   is a scope field.

4.5.  CollectingProcess Class

           +-------------------+
           | CollectingProcess |
           +-------------------+
           | name              |       0..* +------------------+
           |                   |<>----------| Receiver         |
           |                   |            +------------------+
           |                   |
           |                   |       0..* +------------------+
           |                   |<>----------| FileReader       |
           |                   |            +------------------+
           |                   |
           |                   | 0..*  0..* +------------------+
           |                   |----------->| ExportingProcess |
           |                   |            +------------------+
           |                   |
           |                   |       0..* +------------------+
           |                   |<>----------| TransportSession |
           +-------------------+            +------------------+

                    Figure 18: CollectingProcess class

   Figure 18 shows the CollectingProcess class that contains the
   configuration and state parameters of a Collecting Process.  Objects
   of the Receiver class specify how IPFIX Messages are received from
   remote Exporters.  The Collecting Process can also be configured as a
   File Reader using objects of the FileReader class.

   As state data, the CollectingProcess class contains the list of
   Transport Sessions that terminate at the Collecting Process.  The
   TransportSession class is specified in Section 4.7.

   An CollectingProcess object MAY refer to one or multiple
   ExportingProcess objects configuring Exporting Processes that export
   the received data without modifications to a file or to another
   Collector.





Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 28]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


4.5.1.  Receiver Class

       +-------------------------------------+
       | Receiver                            |
       +-------------------------------------+   0..1 +------------+
       | name                                |<>------| Transport- |
       | transportProtocol                   |        | Layer-     |
       | localIpAddress[0..*]                |        | Security   |
       | localPort[0..1]                     |        +------------+
       | maxAllowedStreams[0..1] {SCTP only} |
       | templateLifetime[0..1] {UDP only}   |
       +-------------------------------------+

                         Figure 19: Receiver class

   The Receiver class contains the configuration parameters of a
   listening socket of the Collecting Process.  Some of the parameters
   are specific to the transport protocol.  The parameters are as
   follows:

   transportProtocol:  One of "sctp", "udp", and "tcp".
   localIpAddress:  Local IP addresses the socket is bound to.  If
      ipAddress is omitted, the socket is bound to all local IP
      addresses.  In the case of SCTP, the local IP addresses correspond
      to the eligible local IP addresses used by the local SCTP endpoint
      [RFC4960].
   localPort:  Local port number.  If omitted, standard port 4739 (IPFIX
      without TLS and DTLS) or 4740 (IPFIX over TLS or DTLS) is used.
   maxAllowedStreams (available if transport protocol is SCTP):  Maximum
      number of allowed inbound streams per SCTP association.
   templateLifetime (available if transport protocol is UDP):  Template
      lifetime if UDP is used as transport protocol.

   Using the TransportLayerSecurity class, transport layer security
   using DTLS and TLS is enabled and configured for this listening
   socket of the Collecting Process.  If the transport protocol is SCTP
   or UDP, transport layer security is realized using DTLS.  In the case
   of TCP, TLS is used instead.

4.5.2.  FileReader Class

                               +------------+
                               | FileReader |
                               +------------+
                               | name       |
                               | file       |
                               +------------+




Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 29]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


                       Figure 20: FileReader classes

   The Collecting Process may import IPFIX Messages from a file as
   proposed in [I-D.ietf-ipfix-file].  The FileReader class defines the
   configuration parameter:

   file:  File name and location specified as URI.

4.6.  Transport Layer Security Class

                  +--------------------------------------+
                  | TransportLayerSecurity               |
                  +--------------------------------------+
                  | localCertificationAuthorityDN[0..*]  |
                  | localSubjectDN[0..*]                 |
                  | localSubjectFQDN[0..*]               |
                  | remoteCertificationAuthorityDN[0..*] |
                  | remoteSubjectDN[0..*]                |
                  | remoteSubjectFQDN[0..*]              |
                  +-------------------------------------+

                  Figure 21: TransportLayerSecurity class

   The TransportLayerSecurity class is used in the Exporting Process's
   Destination class and the Collecting Process's Receiver class to
   enable and configure transport layer security for IPFIX.  Transport
   layer security can be enabled without configuring any additional
   parameters.  In this case, an empty XML element
   <transportLayerSecurity /> appears in the configuration.  If
   transport layer security is enabled, the endpoint must use DTLS
   [RFC4347] if the transport protocol is SCTP or UDP, and TLS [RFC4346]
   if the transport protocol is TCP.

   [RFC5101] mandates strong mutual authentication of Exporting
   Processes and Collecting Process:

      "IPFIX Exporting Processes and IPFIX Collecting Processes are
      identified by the fully qualified domain name of the interface on
      which IPFIX Messages are sent or received, for purposes of X.509
      client and server certificates as in [RFC3280].

      To prevent man-in-the-middle attacks from impostor Exporting or
      Collecting Processes, the acceptance of data from an unauthorized
      Exporting Process, or the export of data to an unauthorized
      Collecting Process, strong mutual authentication via asymmetric
      keys MUST be used for both TLS and DTLS.  Each of the IPFIX
      Exporting and Collecting Processes MUST verify the identity of its
      peer against its authorized certificates, and MUST verify that the



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 30]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


      peer's certificate matches its fully qualified domain name, or, in
      the case of SCTP, the fully qualified domain name of one of its
      endpoints.

      The fully qualified domain name used to identify an IPFIX
      Collecting Process or Exporting Process may be stored either in a
      subjectAltName extension of type dNSName, or in the most specific
      Common Name field of the Subject field of the X.509 certificate.
      If both are present, the subjectAltName extension is given
      preference."

   In order to use transport layer security, appropriate certificates
   and keys have to be previously installed on the Monitoring Devices.
   For security reasons, the configuration data model does not offer the
   possibility to upload any certificates or keys on a Monitoring
   Device.  If transport layer security is enabled on a Monitoring
   Device which does not dispose of appropriate certificates and keys,
   the configuration MUST be rejected with an error.

   The configuration data model allows restricting the authorization of
   remote endpoints to certificates issued by specific certification
   authorities or identifying specific fully qualified domain names for
   authorization.  Furthermore, the configuration data model allows
   restricting the utilization of certificates identifying the local
   endpoint.  This is useful if the Monitoring Devices disposes of more
   than one certificate for the given local endpoint.

   The configuration parameters are defined as follows:

   localCertificationAuthorityDN:  This parameter MAY appear one or
      multiple times to restrict the identification of the local
      endpoint during the TLS/DTLS handshake to certificates issued by
      the configured certification authorities.  Each occurrence of this
      parameter contains the distinguished name of one certification
      authority.
      To identify the local endpoint, the Exporting Process or
      Collecting Process MUST use a certificate issued by one of the
      configured certification authority.  Certificates issued by any
      other certification authority MUST NOT be sent to the remote peer
      during TLS/DTLS handshake.  If none of the certificates installed
      on the Monitoring Device fulfills the specified restrictions, the
      configuration MUST be rejected with an error.
      If localCertificationAuthorityDN is not configured, the choice of
      certificates identifying the local endpoint is not restricted with
      respect to the issuing certification authority.






Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 31]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   localSubjectDN, localSubjectFQDN:  Each of these parameters MAY
      appear one or multiple times to restrict the identification of the
      local endpoint during the TLS/DTLS handshake to certificates
      issued for specific subjects or for specific fully qualified
      domain names.  Each occurrence of localSubjectDN contains a
      distinguished name identifying the local endpoint.  Each
      occurrence of localSubjectFQDN contains a fully qualified domain
      name which is assigned to the local endpoint.
      To identify the local endpoint, the Exporting Process or
      Collecting Process MUST use a certificate that contains either one
      of the configured distinguished names in the subject field or at
      least one of the configured fully qualified domain names in a
      dNSName component of the subject alternative extension field or in
      the most specific commonName component of the subject field.  If
      none of the certificates installed on the Monitoring Device
      fulfills the specified restrictions, the configuration MUST be
      rejected with an error.
      If any of the parameters localSubjectDN and localSubjectFQDN is
      configured at the same time as the localCertificationAuthorityDN
      parameter, certificates MUST also fulfill the specified
      restrictions regarding the certification authority.
      If localSubjectDN and localSubjectFQDN are not configured, the
      choice of certificates identifying the local endpoint is not
      restricted with respect to the subject's distinguished name or
      fully qualified domain name.
   remoteCertificationAuthorityDN:  This parameter MAY appear one or
      multiple times to restrict the authentication of remote endpoints
      during the TLS/DTLS handshake to certificates issued by the
      configured certification authorities.  Each occurrence of this
      parameter contains the distinguished name of one certification
      authority.
      To authenticate the remote endpoint, the remote Exporting Process
      or Collecting Process MUST provide a certificate issued by one of
      the configured certification authority.  Certificates issued by
      any other certification authority MUST be rejected during TLS/DTLS
      handshake.
      If the Monitoring Devices is not able to validate certificates
      issued by the configured certification authorities (e.g., because
      of missing public keys), the configuration must be rejected with
      an error.
      If remoteCertificationAuthorityDN is not configured, the
      authorization of remote endpoints is not restricted with respect
      to the issuing certification authority of the delivered
      certificate.







Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 32]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   remoteSubjectDN, remoteSubjectFQDN:  Each of these parameters MAY
      appear one or multiple times to restrict the authentication of
      remote endpoints during the TLS/DTLS handshake to certificates
      issued for specific subjects or for specific fully qualified
      domain names.  Each occurrence of remoteSubjectDN contains a
      distinguished name identifying a remote endpoint.  Each occurrence
      of remoteSubjectFQDN contains a fully qualified domain name which
      is assigned to a remote endpoint.
      To authenticate a remote endpoint, the remote Exporting Process or
      Collecting Process MUST provide a certificate that contains either
      one of the configured distinguished names in the subject field or
      at least one of the configured fully qualified domain names in a
      dNSName component of the subject alternative extension field or in
      the most specific commonName component of the subject field.
      Certificates not fulfilling this condition MUST be rejected during
      TLS/DTLS handshake.
      If any of the parameters remoteSubjectDN and remoteSubjectFQDN is
      configured at the same time as the remoteCertificationAuthorityDN
      parameter, certificates MUST also fulfill the specified
      restrictions regarding the certification authority in order to be
      accepted.
      If remoteSubjectDN and remoteSubjectFQDN are not configured, the
      authorization of remote endpoints is not restricted with respect
      to the subject's distinguished name or fully qualified domain name
      of the delivered certificate.


























Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 33]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


4.7.  Transport Session Class

     +------------------------------------------+
     | TransportSession                         |
     +------------------------------------------+    0..* +----------+
     | ipfixVersion {readOnly}                  |<>-------| Template |
     | protocol {readOnly}                      |         +----------+
     | sourceAddress {readOnly}                 |
     | destinationAddress {readOnly}            |
     | sourcePort {readOnly}                    |
     | destinationPort {readOnly}               |
     | sctpAssocId {readOnly}                   |
     | file {readOnly}                          |
     | templateRefreshTimeout {readOnly}        |
     | optionsTemplateRefreshTimeout {readOnly} |
     | templateRefreshPacket {readOnly}         |
     | optionsTemplateRefreshPacket {readOnly}  |
     | status {readOnly}                        |
     | rate {readOnly}                          |
     | packets {readOnly}                       |
     | bytes {readOnly}                         |
     | messages {readOnly}                      |
     | discardedMessages {readOnly}             |
     | records {readOnly}                       |
     | templates {readOnly}                     |
     | optionsTemplates {readOnly}              |
     +------------------------------------------+

                     Figure 22: TransportSession class

   The TransportSession class contains state data about Transport
   Sessions originating from an Exporting Process or terminating at a
   Collecting Process.  The names and semantics of the state parameters
   correspond to the managed objects in the ipfixTransportSessionTable
   and ipfixTransportSessionStatsTable of the IPFIX MIB module
   [I-D.ietf-ipfix-mib].  Hence, if these state parameters are queried
   from the Monitoring Device, the corresponding IPFIX MIB values can be
   returned without any further processing.  The scope in which a
   TransportSession object appears (i.e., as part of an ExportingProcess
   object or a CollectingProcess object) indicates if the Monitoring
   Device is at the source or destination of the Transport Session.
   Therefore, the MIB object ipfixTransportSessionDeviceMode is not
   included.

   The TransportSession class is also used for state data of File
   Readers and File Writers.  In this case, the "file" parameter
   specifies the name and location of the file as URI.  To avoid
   ambiguities, the parameters "protocol", "sourceAddress",



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 34]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   "destinationAddress", "sourcePort", "destinationPort", and
   "sctpAssocId" MUST NOT appear if the parameter "file" is present.
   The parameter "file" MUST NOT appear if at least one of the
   parameters "protocol", "sourceAddress", "destinationAddress",
   "sourcePort", "destinationPort", and "sctpAssocId" is present.  Note
   that the parameter "file" is currently not included in the IPFIX MIB.

4.7.1.  Template Class

    +--------------------------------+
    | Template                       |
    +--------------------------------+   0..* +-----------------------+
    | observationDomainId {readOnly} |<>------| Field                 |
    | templateId {readOnly}          |        +-----------------------+
    | setId {readOnly}               |        | ieId {readOnly}       |
    | accessTime {readOnly}          |        | ieLength {readOnly}   |
    | dataRecords {readOnly}         |        | enterprise {readOnly} |
    |                                |        | flags {readOnly}      |
    +--------------------------------+        +-----------------------+

                         Figure 23: Template class

   The Template class contains state data about Templates used by an
   Exporting Process or received by a Collecting Process in a specific
   Transport Session.  The Field class defines one field of the
   Template.  The names and semantics of the state parameters correspond
   to the managed objects in the ipfixTemplateTable,
   ipfixTemplateDefinitionTable, and ipfixTemplateStatsTable of the
   IPFIX MIB module [I-D.ietf-ipfix-mib].  Hence, if these state
   parameters are queried from the Monitoring Device, the corresponding
   IPFIX MIB values can be returned without any further processing.


5.  Adaptation to Device Capabilities

   The configuration data model standardizes a superset of common IPFIX
   and PSAMP configuration parameters.  A typical Monitoring Device
   implementation will not support the entire range of possible
   configurations.  Certain functions may not be supported, such as the
   Collecting Process that does not exist on a Monitoring Device
   conceived as Exporter only.  The configuration of other functions may
   be subject to resource limitations.  For example, the Cache size is
   typically limited according to the available memory on the device.

   YANG [I-D.ietf-netmod-yang] offers several possibilities to restrict
   and adapt a configuration data model.  The current version of YANG
   defines the concepts of "features" and "deviations".




Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 35]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   The feature concept allows the modeler to make proportions of the
   model conditional in a manner that is controlled by the device.
   Devices do not have to support these conditional parts to conform to
   the model.  Those features that are supported by a device must be
   announced in the <hello> message of the NETCONF protocol [RFC4741].

   The configuration data model for IPFIX and PSAMP covers the
   configuration of Exporters, Collectors, and devices that may act as
   both.  As Exporters and Collectors implement different functions, the
   corresponding proportions of the model are conditional on the
   following features:

   exporter:  If this feature is supported, Exporting Processes can be
      configured.
   collector:  If this feature is supported, Collecting Processes can be
      configured.

   Exporters do not necessarily implement any Selection Processes,
   Caches, or even Observation Points in particular cases.  Therefore,
   the corresponding proportions of the model are conditional on the
   following feature:

   meter:  If this feature is supported, Observation Points, Selection
      Processes, and Caches can be configured.

   Additional features refer to different PSAMP Sampling and Filtering
   methods:

   psampSampCountBased:  If this feature is supported, Sampling method
      sampCountBased can be configured.
   psampSampTimeBased:  If this feature is supported, Sampling method
      sampTimeBased can be configured.
   psampSampRandOutOfN:  If this feature is supported, Sampling method
      sampRandOutOfN can be configured.
   psampSampUniProb:  If this feature is supported, Sampling method
      sampUniProb can be configured.
   psampSampNonUniProb:  If this feature is supported, Sampling method
      sampNonUniProb can be configured.
   psampSampFlowState:  If this feature is supported, Sampling method
      sampFlowState can be configured.
   psampFilterMatch:  If this feature is supported, Filtering method
      filterMatch can be configured.
   psampFilterHash:  If this feature is supported, Filtering method
      filterHash can be configured.







Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 36]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   psampFilterRState:  If this feature is supported, Filtering method
      filterRState can be configured.

   The following features concern the support of UDP and TCP as
   transport protocols and the support of File Readers and File Writers:

   udpTransport:  If this feature is supported, UDP can be used as
      transport protocol by Exporting Processes and Collecting
      Processes.
   tcpTransport:  If this feature is supported, TCP can be used as
      transport protocol by Exporting Processes and Collecting
      Processes.
   fileReader:  If this feature is supported, Collecting Processes can
      be configured as File Readers.
   fileReader:  If this feature is supported, Exporting Processes can be
      configured as File Writers.

   The deviation concept enables a device to announce deviations from
   the standard model.  Deviations are typically used to specify
   limitations due to resource constraints.  Deviations concern existing
   parameters of the standard model and must not be confused with model
   extensions that are realized with the YANG statement "augment".  Just
   like features, deviations are announced in NETCONF's <hello> message.
   A usage example of deviations is given in Section 7.5.


6.  YANG Module of the IPFIX/PSAMP Configuration Data Model

   The YANG module specification of the configuration data model is
   listed below.  It makes use of common YANG types defined in
   [I-D.ietf-netmod-yang-types].

module ietf-ipfix-psamp {
  namespace "urn:ietf:params:xml:ns:ietf-ipfix-psamp";
  prefix ipfix;

  import ietf-yang-types { prefix yang; }
  import ietf-inet-types { prefix inet; }

  organization "IPFIX WG";
  contact "muenz@net.in.tum.de";

  description "IPFIX/PSAMP Configuration Data Model";

  revision 2009-07-10 {
    description "Version of draft-ietf-ipfix-configuration-model-03
      Changes in draft-ietf-ipfix-configuration-model-03:
      - list of used or received templates now inside transport session



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 37]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


        container because templates are defined per transport session
      - transport session: removed 'index', added missing 'protocol'
      - exportingProcessId removed
      - Transport Session state data can be used for File Readers and
        File Writers
      - module name changed
      - Renaming: cacheType => cacheMode, Options' type => optionsType,
        Destination's/FileWriter's type => exportMemberType, uri => file,
        optionTemplate => optionsTemplate, optionField => optionsField
      - transport layer security parameters added to Destination class
        and Receiver class
      - must statements ensure that Selection Processes and Caches
        process packets of a single Observation Domain (as long as
        Selection Processes are not cascaded)
      - replaced default value of port by description because the value
        differs in the case of DTLS/TLS
      Changes in draft-ietf-ipfix-configuration-model-02:
      - conformance to draft-ietf-netmod-yang-03 and
        draft-ietf-netmod-yang-types-01
      - canonical form
      - observationDomainId is now mandatory parameter
      - usage of YANG features
      - renamed parameter 'idleTimeout' in 'inactiveTimeout'
      - state data: Selector statistics, Cache statistics, Templates,
        Transport Sessions
      - Exporting Process: new structure of destination, fileWriter
      - Collecting Process: new structure of receiver, fileReader
      - more groupings and typedefs
      - options configured per Exporting Process, not per destination
      - verified optional parameters, added default values or
        description clause if necessary
      Changes in draft-ietf-ipfix-configuration-model-01:
      - separation of Selectors and Selection Processes as in PSAMP
        documents
      - parameter modifications in filterMatch
      - new rateLimit parameter in destinations of Exporting Process
      - Cache Type 'normal' now called 'timeout'
      Changes in draft-ietf-ipfix-configuration-model-00:
      - Metering Process container replaced by direct reference to
        Selection Process
      - meteringProcessId parameter disappears together with the
        Metering Process container
      - concatenation of Selection Processes realize Selection Sequence
      - removal of premature support of IPFIX Mediators/Concentrators.
      - more SCTP parameters in SctpReceiver and SctpExport classes
      - sendBufferSize parameter for all *Export classes
      - templateId no longer configuration parameter
      Changes in draft-muenz-ipfix-configuration-04:



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 38]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


      - first version in yang
      - Collecting Process can be configured for file import
      - Collecting Process can be configured to export received
        records without modifications (e.g., to file or other
        collectors)
      - SCTP export parameter timedReliability
      - parameter for eligible local IP addresses for SCTP endpoint
      - all tags names uncapitalized, types names etc. capitalized
      - CacheParameters renamed as Cache
      - description attribute removed
      Changes in -03:
      - Linecard and Interface classes now have direction element
      - sec => s (SI unit)
      - optional description attribute for annotations
      - simplifications in ExportingProcess class
      - new parameters: observationPointId, meteringProcessId,
        selectorId, exportingProcessId (note that devices do not
        have to support the configuration of these parameters)
      - new FileExport class for exporting into a file
      - Reporting class renamed Options Class
      Changes in -02:
      - new structure without next pointers
      - packet reporting and flow metering replaced by record cache
      - added reporting with options";
  }

  feature exporter {
    description "If supported, the device can be used as an Exporter.
      Exporting Processes can be configured.";
  }

  feature collector {
    description "If supported, the device can be used as a Collector.
      Collecting Processes can be configured.";
  }

  feature meter {
    description "If supported, Observation Points, Selection
      Processes, and Caches can be configured.";
  }

  feature psampSampCountBased {
    description "If supported, the device supports count-based Sampling.
      The Selector method sampCountBased can be configured.";
  }

  feature psampSampTimeBased {
    description "If supported, the device supports time-based Sampling.



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 39]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


      The Selector method sampTimeBased can be configured.";
  }

  feature psampSampRandOutOfN {
    description "If supported, the device supports random n-out-of-N
      Sampling. The Selector method sampRandOutOfN can be configured.";
  }

  feature psampSampUniProb {
    description "If supported, the device supports uniform probabilistic
      Sampling. The Selector method sampUniProb can be configured.";
  }

  feature psampSampNonUniProb {
    description "If supported, the device supports non-uniform
      probabilistic Sampling. The Selector method sampNonUniProb can be
      configured.";
  }

  feature psampSampFlowState {
    description "If supported, the device supports flow state dependent
      Sampling. The Selector method sampFlowState can be configured.";
  }

  feature psampFilterMatch {
    description "If supported, the device supports property match
      Filtering. The Selector method filterMatch can be configured.";
  }

  feature psampFilterHash {
    description "If supported, the device supports hash-based Filtering.
      The Selector method filterHash can be configured.";
  }

  feature psampFilterRState {
    description "If supported, the device supports router state
      Filtering. The Selector method filterRState can be configured.";
  }

  feature udpTransport {
    description "If supported, the device supports UDP as transport
      protocol.";
  }

  feature tcpTransport {
    description "If supported, the device supports TCP as transport
      protocol.";
  }



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 40]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


  feature fileReader {
    description "If supported, the device supports the configuration
      of Collecting Processes as File Readers.";
  }

  feature fileWriter {
    description "If supported, the device supports the configuration
      of Exporting Processes as File Writers.";
  }

  typedef direction {
    type enumeration {
      enum ingress;
      enum egress;
      enum both;
    }
    description "Direction of packets going through an interface or
      linecard.";
  }

  typedef cacheMode {
    type enumeration {
      enum immediate {
        description "Flow expiration after the first packet,
          generation of Packet Records.";
      }
      enum timeout {
        description "Flow expiration after active and inactive timeout,
          generation of Flow Records.";
      }
      enum permanent {
        description "No flow expiration, periodical export after
          active timeout, generation of Flow Records.";
      }
    }
    description "Cache Mode specifies the Flow expiration policy of a
      Cache.";
  }

  typedef exportMemberType {
    type enumeration {
      enum primary;
      enum secondary;
      enum parallel;
      enum loadBalancing;
      enum unused;
    }
    description "This type defines different usages of an export



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 41]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


      destination among all destinations of an Exporting Process.
      It corresponds to ipfixExportMemberType in IPFIX-MIB.";
    reference "draft-ietf-ipfix-mib-06.";
  }

  typedef optionsType {
    type enumeration {
      enum meteringStatistics {
        description "Metering Process Statistics.";
        reference "RFC 5101, section 4.1.";
      }
      enum meteringReliability {
        description "Metering Process Reliability Statistics.";
        reference "RFC 5101, section 4.2.";
      }
      enum exportingReliability {
        description "Exporting Process Reliability
          Statistics.";
        reference "RFC 5101, section 4.3.";
      }
      enum flowKeys {
        description "Flow Keys.";
        reference "RFC 5101, section 4.4.";
      }
      enum selectionSequence {
        description "Selection Sequence and Selector Reports.";
        reference "RFC5476, sections 6.5.1 and 6.5.2.";
      }
      enum selectionStatistics {
        description "Selection Sequence Statistics Report.";
        reference "RFC5476, sections 6.5.3.";
      }
      enum accuracy {
        description "Accuracy Report.";
        reference "RFC5476, section 6.5.4.";
      }
      enum reducingRedundancy {
        description "Application of ipfix-reducing-redundancy.";
        reference "RFC5473";
      }
    }
    description "Options Templates specified by IPFIX and PSAMP.";
  }

  typedef transportSessionStatus {
    type enumeration {
      enum inactive;
      enum active;



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 42]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


      enum unknown;
    }
    description "Status of a Transport Session.";
    reference "draft-ietf-ipfix-mib-06, section 7
      (ipfixTransportSessionStatus).";
  }

  typedef ipfixTransportProtocol {
    type enumeration {
      enum sctp;
      enum udp {
        description "only applicable if the feature udpTransport is
          supported";
      }
      enum tcp {
        description "only applicable if the feature tcpTransport is
          supported";
      }
    }
    description "Transport protocols of IPFIX.";
    reference "RFC5101.";
  }

  typedef templateFieldFlags {
    type bits {
      bit scope {
        position 0;
      }
      bit flowKey {
        position 1;
      }
    }
    description "Attributes of a field in a Template.";
    reference "draft-ietf-ipfix-mib-06, section 7
      (ipfixTemplateDefinitionFlags)";
  }

  typedef filterRStateFunction {
    type enumeration {
      enum other;
      enum ingressIf;
      enum egressIf;
      enum aclViolation;
      enum rpfFailure;
      enum noResources;
      enum noRoute;
      enum originAS;
      enum destAS;



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 43]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


    }
    description "Filter function applied to router state.";
    reference "draft-ietf-psamp-mib-06, section 5.2.3.";
  }

  grouping informationElement {
    description "Parameters of an Information Element.";
    choice nameOrId {
      mandatory true;
      description "Name or ID of the Information Element.";
      reference "RFC5102";
      leaf ieName { type string; }
      leaf ieId { type uint16; }
    }
    leaf ieLength {
      type uint16;
      description "Length can be omitted if a default length exists
        for the specified Information Element. A value of 65535
        specifies a variable-length Information Element.";
      reference "RFC5102";
    }
    leaf ieEnterpriseNumber {
      type uint32;
      description "If present, this is an enterprise-specific
        Information Element.";
      reference "RFC5101, RFC5102";
    }
  }

  grouping interfaceParameters {
    description "Interface as input to Observation Point.";
    choice indexOrName {
      mandatory true;
      description "Index or name of the interface as stored in the
        ifTable of IF-MIB.";
      reference "RFC 1229.";
      leaf ifIndex { type uint32; }
      leaf ifName { type string; }
    }
    leaf direction {
      type direction;
      default both;
      description "Direction of packets. If not applicable (e.g., in
        the case of a sniffing interface in promiscuous mode), this
        parameter is ignored.";
    }
  }




Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 44]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


  grouping linecardParameters {
    description "Linecard as input to Observation Point.";
    choice indexOrName {
      mandatory true;
      description "Index or name of the linecard as stored in the
        entPhysicalTable of ENTITY-MIB.";
      reference "RFC 4133.";
      leaf entPhysicalIndex { type uint32; }
      leaf entPhysicalName { type string; }
    }
    leaf direction {
      type direction;
      default both;
      description "Direction of packets. If not applicable (e.g., in
        the case of a sniffing interface in promiscuous mode), this
        parameter is ignored.";
    }
  }

  grouping selectorParameters {
    description "Configuration and state parameters of a Selector.";
    leaf selectorId {
      type uint16;
      description "The Selector ID must be unique within the
        Observation Domain.
        If not configured, this parameter is set by the monitoring
        device.";
      reference "RFC5477";
    }
    choice Method {
      mandatory true;
      description "See PSAMP-MIB for details about the selection
        methods and their parameters.";
      reference "draft-ietf-psamp-mib-06.";
      leaf selectAll { type empty; }
      container sampCountBased {
        if-feature psampSampCountBased;
        leaf interval {
          type uint32;
          mandatory true;
        }
        leaf spacing {
          type uint32;
          mandatory true;
        }
      }
      container sampTimeBased {
        if-feature psampSampTimeBased;



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 45]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


        leaf interval {
          type uint32;
          mandatory true;
        }
        leaf spacing {
          type uint32;
          mandatory true;
        }
      }
      container sampRandOutOfN {
        if-feature psampSampRandOutOfN;
        leaf population {
          type uint32;
          mandatory true;
        }
        leaf sample {
          type uint32;
          mandatory true;
        }
      }
      container sampUniProb {
        if-feature psampSampUniProb;
        leaf probability {
          type uint32;
          mandatory true;
          description "The given value must be divided by
            4294967295.";
        }
      }
      container sampNonUniProb {
        if-feature psampSampNonUniProb;
        leaf function {
          type yang:object-identifier;
          mandatory true;
        }
        leaf funcParam {
          type yang:object-identifier;
          mandatory true;
        }
      }
      container sampFlowState {
        if-feature psampSampFlowState;
        leaf function {
          type yang:object-identifier;
          mandatory true;
        }
        leaf funcParam {
          type yang:object-identifier;



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 46]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


          mandatory true;
        }
      }
      container filterMatch {
        if-feature psampFilterMatch;
        choice nameOrId {
          mandatory true;
          description "Deviating from the PSAMP MIB, the field is
            specified by either the name or the ID of the
            Information Element.";
          leaf ieName {
            type string;
          }
          leaf ieId {
            type uint16;
          }
        }
        leaf ieEnterpriseNumber {
          type uint32;
          description "Deviating from the PSAMP MIB, an enterprise
            number may be specified to refer to an
            enterprise-specific Information Element.";
        }
        leaf startValue {
          type string;
          mandatory true;
        }
        leaf stopValue {
          type string;
          mandatory true;
        }
        leaf mask {
          type string;
          description "If not configured, no mask is applied.";
        }
      }
      container filterHash {
        if-feature psampFilterHash;
        leaf addrType {
          type inet:ip-version;
          mandatory true;
        }
        leaf headerBits {
          type string {
            length 40;
          }
          mandatory true;
          description "If addrType is 'ipv4', only the first 20 bytes



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 47]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


            are used.";
        }
        leaf payloadBytes {
          type uint32;
          default 0;
        }
        leaf payloadBits {
          type string;
          description "If not configured, all bits included in the
            payload section defined by payloadBytes are used.";
        }
        leaf function {
          type yang:object-identifier;
          mandatory true;
        }
        leaf funcParam {
          type yang:object-identifier;
          mandatory true;
        }
        leaf inputBits {
          type uint32;
          mandatory true;
        }
        leaf outputBits {
          type uint32;
          mandatory true;
        }
        leaf outputMask {
          type string;
          mandatory true;
        }
        leaf selection {
          type string;
          mandatory true;
        }
      }
      container filterRState {
        if-feature psampFilterRState;
        leaf function {
          type filterRStateFunction;
          mandatory true;
        }
        leaf negate {
          type boolean;
          default false;
        }
        leaf ifIndex {
          type uint32;



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 48]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


          mandatory true;
          description "Index of the interface as stored in the
            ifTable of IF-MIB.";
          reference "RFC 2863.";
        }
        leaf startAS {
          type inet:as-number;
          must "../function='originAS' or ../function='destAS'";
        }
        leaf stopAS {
          type inet:as-number;
          must "../function='originAS' or ../function='destAS'";
        }
        leaf vendorFunc {
          type yang:object-identifier;
          must "../function='other'";
        }
      }
    }
    leaf packetsObserved {
      type yang:counter64;
      config false;
      description "Corresponds to ipfixSelectorStatsPacketsObserved
        in IPFIX-MIB.";
      reference "draft-ietf-ipfix-mib-06, section 7
        (ipfixSelectorStatsPacketsObserved).";
    }
    leaf packetsDropped {
      type yang:counter64;
      config false;
      description "Corresponds to ipfixSelectorStatsPacketsDropped
        in IPFIX-MIB.";
      reference "draft-ietf-ipfix-mib-06, section 7
        (ipfixSelectorStatsPacketsDropped).";
    }
  }

  grouping cacheLayoutParameters {
    description "Fields of a Cache Layout.";
    list cacheField {
      key name;
      min-elements 1;
      leaf name { type string; }
      uses informationElement;
      leaf isFlowKey {
        type empty;
        description "If present, this is a flow key.";
      }



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 49]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


    }
  }

  grouping destinationParameters {
    description "Parameters specifying an export destination.";
    leaf exportMemberType {
      type exportMemberType;
      default primary;
      description "Member type within the Transport Session group
        which is composed of all destinations and fileWriters of the
        Exporting Process.";
    }
    leaf ipfixVersion {
      type int16;
      default 10;
      description "IPFIX version number.";
    }
    leaf transportProtocol {
      type ipfixTransportProtocol;
      mandatory true;
    }
    leaf destinationIpAddress {
      type inet:ip-address;
      mandatory true;
    }
    leaf destinationPort {
      type inet:port-number;
      description "If not configured, the device uses the default port
        number for IPFIX, which is 4739 without transport layer
        security and 4740 if transport layer security is activated.";
    }
    leaf sourceIpAddress {
      type inet:ip-address;
      must "../transportProtocol='udp'";
      description "Sets source IP address if UDP is transport
        protocol. If not configured, the IP address assigned to the
        outgoing interface is used.";
    }
    leaf-list localIpAddress {
      type inet:ip-address;
      must "../transportProtocol='sctp'";
      description "List of eligible local IP addresses to be
        used by the SCTP endpoint. If not configured, all locally
        assigned IP addresses are used by the local endpoint.";
      reference "RFC 3758, RFC 4960.";
    }
    leaf sendBufferSize {
      type uint32;



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 50]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


      units bytes;
      description "Size of the socket send buffer.
        If not configured, this parameter is set by the monitoring
        device";
    }
    leaf rateLimit {
      type uint32;
      units "bytes per second";
      description "Maximum number of bytes per second the Exporting
        Process may export to the given destination. The number of
        bytes is calculated from the lengths of the IPFIX Messages
        exported. If not configured, no rate limiting is performed.";
      reference "RFC5476, section 6.3.";
    }
    leaf timedReliability {
      type yang:timeticks;
      must "../transportProtocol='sctp'";
      default 0;
      description "PR-SCTP lifetime for IPFIX Messages
        containing Data Sets only. Zero means reliable transport.";
      reference "RFC 3758, RFC 4960.";
    }
    leaf numberOfStreams {
      type uint16;
      must "../transportProtocol='sctp'";
      description "Number of outbound streams requested for the
        SCTP association.
        If not configured, this parameter is set by the monitoring
        device.";
      reference "RFC 3758, RFC 4960.";
    }
    leaf orderedDelivery {
      type boolean;
      must "../transportProtocol='sctp'";
      default true;
      description "Ordered delivery of IPFIX Messages
        containing Data Sets.";
      reference "RFC 3758, RFC 4960.";
    }
    leaf templateRefreshTimeout {
      type uint32;
      units seconds;
      must "../transportProtocol='udp'";
      default 600;
      description "Sets time after which Templates are resent if UDP
        is transport protocol.";
      reference "RFC5101.";
    }



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 51]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


    leaf optionsTemplateRefreshTimeout {
      type uint32;
      units seconds;
      must "../transportProtocol='udp'";
      default 600;
      description "Sets time after which Options Templates are resent
        if UDP is transport protocol.";
      reference "RFC5101.";
    }
    leaf templateRefreshPacket {
      type uint32;
      units "IPFIX Messages";
      must "../transportProtocol='udp'";
      description "Sets number of IPFIX Messages after which
        Templates are resent if UDP is transport protocol.
        If omitted, Templates are only resent after timeout.";
      reference "RFC5101.";
    }
    leaf optionsTemplateRefreshPacket {
      type uint32;
      units "IPFIX Messages";
      must "../transportProtocol='udp'";
      description "Sets number of IPFIX Messages after which
        Options Templates are resent if UDP is transport protocol.
        If omitted, Templates are only resent after timeout.";
      reference "RFC5101.";
    }
    container transportLayerSecurity {
      presence "If transportLayerSecurity is present, DTLS is enabled
        if the transport protocol is SCTP or UDP, and TLS is enabled
        if the transport protocol is TCP.";
      uses transportLayerSecurityParameters;
    }
  }

  grouping optionsParameters {
    description "Parameters specifying the data export using an
      Options Template.";
    leaf optionsType {
      type optionsType;
      mandatory true;
    }
    leaf timeout {
      type yang:timeticks;
      default 0;
      description "Time interval for exporting options data.
        If set to zero, the options data is sent once.";
    }



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 52]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


    container optionsTemplate {
      description "If no Options Template is specified, the
        Exporter defines a template according to options type and
        available options data.";
      list optionsField {
        key name;
        ordered-by user;
        leaf name { type string; }
        uses informationElement;
        leaf isScope {
          type empty;
          description "If present, this is a scope field.";
        }
      }
    }
  }

  grouping receiverParameters {
    leaf transportProtocol {
      type ipfixTransportProtocol;
      mandatory true;
    }
    leaf-list localIpAddress {
      type inet:ip-address;
      description "List of local IP addresses on which the Collecting
        Process listens for IPFIX Messages. If not configured, all
        locally assigned IP addresses are used. In the case of SCTP,
        these IP addresses correspond to the eligible local IP
        addresses to be used by the SCTP endpoint.";
      reference "RFC 4960.";
    }
    leaf localPort {
      type inet:port-number;
      description "If not configured, the device uses the default port
        number for IPFIX, which is 4739 without transport layer
        security and 4740 if transport layer security is activated.";
    }
    leaf maxAllowedStreams {
      type uint16;
      must "../transportProtocol='sctp'";
      description "Maximum number of allowed inbound streams
        per SCTP association. If not configured, the maximum number of
        inbound streams is not restricted.";
    }
    leaf templateLifetime {
      type uint32;
      units seconds;
      must "../transportProtocol='udp'";



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 53]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


      default 1800;
      description "Template lifetime if UDP is transport protocol.";
      reference "RFC5101, section 10.3.7";
    }
    container transportLayerSecurity {
      presence "If transportLayerSecurity is present, DTLS is enabled
        if the transport protocol is SCTP or UDP, and TLS is enabled
        if the transport protocol is TCP.";
      uses transportLayerSecurityParameters;
    }
  }

  grouping fileWriterParameters {
    description "File Writer parameters.";
    leaf exportMemberType {
      type exportMemberType;
      must "current()!='loadBalancing'";
      default primary;
      description "Member type within the Transport Session group
        which is composed of all destinations and fileWriters of the
        Exporting Process.";
    }
    leaf ipfixVersion {
      type int16;
      default 10;
      description "IPFIX version number.";
    }
    leaf file {
      type inet:uri;
      mandatory true;
      description "URI specifying the location of the file.";
    }
  }

  grouping fileReaderParameters {
    description "File Reader parameters.";
    leaf file {
      type inet:uri;
      mandatory true;
      description "URI specifying the location of the file.";
    }
  }

  grouping transportLayerSecurityParameters {
    description "Transport layer security parameters.";
    leaf-list localCertificationAuthorityDN {
      type string;
      description "Distinguished names of certification authorities



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 54]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


        whose certificates may be used to identify the local
        endpoint.";
    }
    leaf-list localSubjectDN {
      type string;
      description "Distinguished names which may be used in the
        certificates to identify the local endpoint.";
    }
    leaf-list localSubjectFQDN {
      type inet:domain-name;
      description "Fully qualified domain names which may be used to
        in the certificates to identify the local endpoint.";
    }
    leaf-list remoteCertificationAuthorityDN {
      type string;
      description "Distinguished names of certification authorities
        whose certificates are accepted to authorize remote
        endpoints.";
    }
    leaf-list remoteSubjectDN {
      type string;
      description "Distinguished names which are accepted in
        certificates to authorize remote endpoints.";
    }
    leaf-list remoteSubjectFQDN {
      type inet:domain-name;
      description "Fully qualified domain name which are accepted in
        certificates to authorize remote endpoints.";
    }
  }

  grouping templateParameters {
    description "State parameters of a Template used by an Exporting
      Process or received by a Collecting Process in a specific
      Transport Session. Parameter names and semantics correspond to
      the managed objects in IPFIX-MIB";
    reference "draft-ietf-ipfix-mib-06, section 7
      (ipfixTemplateEntry, ipfixTemplateDefinitionEntry,
      ipfixTemplateStatsEntry)";
    leaf observationDomainId { type uint32; }
    leaf templateId { type uint16; }
    leaf setId { type uint16; }
    leaf accessTime { type yang:date-and-time; }
    leaf dataRecords { type yang:counter64; }
    list field {
      leaf ieId { type uint16; }
      leaf ieLength { type uint16; }
      leaf enterprise { type uint32; }



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 55]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


      leaf flags { type templateFieldFlags; }
    }
  }

  grouping transportSessionParameters {
    description "State parameters of a Transport Session originating
      from an Exporting or terminating at a Collecting Process.
      Parameter names and semantics correspond to the managed
      objects in IPFIX-MIB. The additional file parameter, which does
      not exist in IPFIX-MIB, allows describing a Transport Session
      terminating or originating in a file.";
    reference "draft-ietf-ipfix-mib-06, section 7
      (ipfixTransportSessionEntry, ipfixTransportSessionStatsEntry)";
    leaf ipfixVersion {
      type int16;
      description "IPFIX version number.";
    }
    choice transportOrFile {
      description "If the Transport Session terminates or originates
        in a file, the location of the file is specified instead of
        transport protocol, addresses, ports etc.";
      case transport {
        leaf protocol { type int32; }
        leaf sourceAddress { type inet:ip-address; }
        leaf destinationAddress { type inet:ip-address; }
        leaf sourcePort { type inet:port-number; }
        leaf destinationPort { type inet:port-number; }
        leaf sctpAssocId { type uint32; }
      }
      case file {
        leaf file {
          type inet:uri;
          description "URI specifying the location of the file.";
        }
      }
    }
    leaf templateRefreshTimeout {
      type uint32;
      units seconds;
    }
    leaf optionsTemplateRefreshTimeout {
      type uint32;
      units seconds;
    }
    leaf templateRefreshPacket {
      type uint32;
      units "IPFIX Messages";
    }



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 56]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


    leaf optionsTemplateRefreshPacket {
      type uint32;
      units "IPFIX Messages";
    }
    leaf status { type transportSessionStatus; }
    leaf rate {
      type int32;
      units "bytes per second";
    }
    leaf packets {
      type yang:counter64;
      units packets;
    }
    leaf bytes {
      type yang:counter64;
      units bytes;
    }
    leaf messages {
      type yang:counter64;
      units "IPFIX Messages";
    }
    leaf discardedMessages {
      type yang:counter64;
      units "IPFIX Messages";
    }
    leaf records {
      type yang:counter64;
      units "Data Records";
    }
    leaf templates {
      type yang:counter32;
      units "Templates";
    }
    leaf optionsTemplates {
      type yang:counter32;
      units "Options Templates";
    }
    list template {
      uses templateParameters;
    }
  }

  container ipfix {
    list collectingProcess {
      if-feature collector;
      key name;
      description "Parameters of a Collecting Process.";
      leaf name { type string; }



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 57]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


      list receiver {
        key name;
        description "List of receivers (sockets) on which the
          Collecting Process receives IPFIX Messages.";
        leaf name { type string; }
        uses receiverParameters;
      }
      list fileReader {
        if-feature fileReader;
        key name;
        description "List of File Readers from which the Collecting
          Process reads IPFIX Messages.";
        leaf name { type string; }
        uses fileReaderParameters;
      }
      leaf-list exportingProcess {
        type leafref { path "/ipfix/exportingProcess/name"; }
        description "Export of received records without any
          modifications. Records are processed by all Exporting
          Processes in the list.";
      }
      list transportSession {
        config false;
        uses transportSessionParameters;
      }
    }

    list observationPoint {
      if-feature meter;
      key name;
      description "Parameters of an Observation Point.";
      leaf name { type string; }
      leaf observationPointId {
        type uint32;
        description "If not configured, this parameter is set by the
          Monitoring Device.";
      }
      leaf observationDomainId {
        type uint32;
        mandatory true;
        description "The Observation Domain ID associates the
          Observation Point to an Observation Domain. Observation
          Points with identical Observation Domain ID belong to the
          same Observation Domain.";
      }
      choice OPType {
        mandatory true;
        container interface { uses interfaceParameters; }



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 58]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


        container linecard { uses linecardParameters; }
      }
      leaf-list selectionProcess {
        type leafref { path "/ipfix/selectionProcess/name"; }
        description "Selection Processes in this list process packets
          in parallel.";
      }
    }

    list selectionProcess {
      if-feature meter;
      must
        "not(
          /ipfix/observationPoint[selectionProcess = current()/name]
            /observationDomainId[1] !=
          /ipfix/observationPoint[selectionProcess = current()/name]
            /observationDomainId
         )" {
        description "If the input of this Selection Process is an
          Observed Packet Stream originating from different
          Observation Points, the must statement ensures that all
          Observation Points belong to the same Observation Domain.
          Note that this must statement does not ensure that cascaded
          Selection Processes process packets from a single
          Observation Domain only.";
      }
      key name;
      description "Parameters of a Selection Process.";
      leaf name { type string; }
      leaf selectionSequenceId {
        type uint64;
        description "The Selection Sequence ID must be unique within
          the Observation Domain.
          If not configured, this parameter is set by the monitoring
          device.";
        reference "RFC5477";
      }
      list selector {
        key name;
        min-elements 1;
        ordered-by user;
        description "List of Selectors that define the action of the
          Selection Process on a single packet. The Selectors are
          serially invoked in the same order as they appear in this
          list.";
        leaf name { type string; }
        uses selectorParameters;
      }



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 59]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


      leaf-list selectionProcess {
        type leafref { path "/ipfix/selectionProcess/name"; }
        description "Selection Processes in this list receive the
          selected packets in parallel.";
      }
      leaf-list cache {
        type leafref { path "/ipfix/cache/name"; }
        description "Caches in this list receive the selected packets
          in parallel.";
      }
    }

    list cache {
      if-feature meter;
      must
        "not(
          /ipfix/observationPoint[selectionProcess =
            /ipfix/selectionProcess[cache = current()/name]/name]
            /observationDomainId[1] !=
          /ipfix/observationPoint[selectionProcess =
            /ipfix/selectionProcess[cache = current()/name]/name]
            /observationDomainId
        )" {
        description "For configurations where there are no cascaded
          Selection Processes between Observation Points and this
          Cache, the must statement ensures that all Observation
          Points belong to the same Observation Domain.
          Note that this must statement does not ensure that
          cascaded Selection Processes between the Observation
          Points and this Cache process packets from a single
          Observation Domain.";
      }
      key name;
      description "Parameters of a Cache.";
      leaf name { type string; }
      leaf cacheMode {
        type cacheMode;
        mandatory true;
      }
      leaf maxRecords {
        type uint32;
        description "If not configured, this parameter is set by the
          Monitoring Device.";
      }
      leaf activeTimeout {
        type uint32;
        units seconds;
        must "../cacheMode!='immediate'";



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 60]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


        description "If not configured, this parameter is set by the
          Monitoring Device.";
      }
      leaf inactiveTimeout {
        type uint32;
        units seconds;
        must "../cacheMode!='permanent'";
        description "If not configured, this parameter is set by the
          Monitoring Device.";
      }
      container cacheLayout { uses cacheLayoutParameters; }
      leaf-list exportingProcess {
        type leafref { path "/ipfix/exportingProcess/name"; }
        description "Records are exported by all Exporting Processes
          in the list.";
      }
      leaf activeFlows {
        type uint32;
        units flows;
        config false;
        description "Corresponds to
          ipfixMeteringProcessCacheActiveFlows in IPFIX-MIB.";
        reference "ietf-draft-ipfix-mib-06, section 7
          (ipfixMeteringProcessCacheActiveFlows)";
      }
      leaf inactiveFlows {
        type uint32;
        units flows;
        config false;
        description "Corresponds to
            ipfixMeteringProcessCacheInactiveFlows in IPFIX-MIB.";
        reference "ietf-draft-ipfix-mib-06, section 7
          (ipfixMeteringProcessCacheInactiveFlows)";
      }
      leaf dataRecords {
        type yang:counter64;
        units "Data Records";
        config false;
        description "Corresponds to
            ipfixMeteringProcessDataRecords in IPFIX-MIB.";
        reference "ietf-draft-ipfix-mib-06, section 7
          (ipfixMeteringProcessDataRecords)";
      }
    }

    list exportingProcess {
      if-feature exporter;
      key name;



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 61]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


      description "Parameters of an Exporting Process.";
      leaf name { type string; }
      list destination {
        key name;

        leaf name { type string; }
        uses destinationParameters;
      }
      list fileWriter {
        if-feature fileWriter;
        key name;
        leaf name { type string; }
        uses fileWriterParameters;
      }
      list options {
        key name;
        leaf name { type string; }
        uses optionsParameters;
      }
      list transportSession {
        config false;
        uses transportSessionParameters;
      }
    }
  }
}


7.  Examples

   This section shows example configurations conforming to the YANG
   module specified in Section 6.

7.1.  PSAMP Device

   This configuration example contains two Selection Processes
   configured for the same Observation Point.  The first Selection
   Process implements two Selectors: a filter for UDP packets and a
   random sampler.  The second Selection Process implements an ICMP
   filter.  The outputs of both Selection Processes enter the same
   Cache.  The Cache Mode is "immediate" resulting in the creation of a
   PSAMP Packet Report for every selected packet.

   The associated Exporting Process exports to one Collector using PR-
   SCTP and DTLS.  The transport layer security parameters specify that
   the collector must supply a certificate for the fully qualilfied
   domain name collector.example.net.  Valid certificates from any
   certification authority will be accepted.  As the destination



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 62]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   transport port is omitted, the standard IPFIX-over-DTLS port 4740 is
   used.  Exporting Process reliability statistics are reported using a
   user-defined Options Template.

   <ipfix xmlns="urn:ietf:params:xml:ns:ietf-ipfix-psamp">

     <observationPoint>
       <name>OP at linecard 3</name>
       <observationPointId>1</observationPointId>
       <observationDomainId>12345</observationDomainId>
       <linecard>
         <entPhysicalIndex>3</entPhysicalIndex>
       </linecard>
       <selectionProcess>Sampled UDP packets</selectionProcess>
       <selectionProcess>ICMP packets</selectionProcess>
     </observationPoint>

     <selectionProcess>
       <name>Sampled UDP packets</name>
       <selectionSequenceId>1</selectionSequenceId>
       <selector>
         <name>UDP filter</name>
         <selectorId>1</selectorId>
         <filterMatch>
           <ieId>4</ieId>
           <startValue>17</startValue>
           <stopValue>17</stopValue>
         </filterMatch>
       </selector>
       <selector>
         <name>10-out-of-100 sampler</name>
         <selectorId>2</selectorId>
         <sampRandOutOfN>
           <population>100</population>
           <sample>10</sample>
         </sampRandOutOfN>
       </selector>
       <cache>PSAMP cache</cache>
     </selectionProcess>

     <selectionProcess>
       <name>ICMP packets</name>
       <selectionSequenceId>2</selectionSequenceId>
       <selector>
         <name>ICMP filter</name>
         <selectorId>3</selectorId>
         <filterMatch>
           <ieId>4</ieId>



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 63]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


           <startValue>1</startValue>
           <stopValue>1</stopValue>
         </filterMatch>
       </selector>
       <cache>PSAMP cache</cache>
     </selectionProcess>

     <cache>
       <name>PSAMP cache</name>
       <cacheMode>immediate</cacheMode>
       <maxRecords>512</maxRecords>
       <cacheLayout>
         <cacheField>
           <name>Field 1</name>
           <ieId>313</ieId>
           <ieLength>64</ieLength>
         </cacheField>
         <cacheField>
           <name>Field 2</name>
           <ieId>154</ieId>
         </cacheField>
       </cacheLayout>
       <exportingProcess>The only exporter</exportingProcess>
     </cache>

     <exportingProcess>
       <name>The only exporter</name>
       <destination>
         <name>PR-SCTP collector</name>
         <exportMemberType>primary</exportMemberType>
         <transportProtocol>sctp</transportProtocol>
         <destinationIpAddress>192.0.2.1</destinationIpAddress>
         <rateLimit>1000000</rateLimit>
         <timedReliability>500</timedReliability>
         <numberOfStreams>1</numberOfStreams>
         <transportLayerSecurity>
           <remoteSubjectFQDN>collector.example.net</remoteSubjectFQDN>
         </transportLayerSecurity>
       </destination>
       <options>
         <name>Options 1</name>
         <optionsType>exportingReliability</optionsType>
         <timeout>30000</timeout>
         <optionsTemplate>
           <optionsField>
             <name>Field 1</name>
             <ieName>exportingProcessId</ieName>
             <isScope/>



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 64]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


           </optionsField>
           <optionsField>
             <name>Field 2</name>
             <ieName>notSentPacketTotalCount</ieName>
           </optionsField>
         </optionsTemplate>
       </options>
     </exportingProcess>

   </ipfix>

7.2.  IPFIX Device

   This configuration example demonstrates the shared usage of a Cache
   for maintaining Flow Records from two different Observation Points.
   Packets are selected using different Sampling techniques: count-based
   Sampling for the first Observation Point and selection of all packets
   for the second Observation Point.  Note that both Observation Points
   belong to the same Observation Domain, as required.  The Exporting
   Process sends the Flow Records to a primary destination using SCTP.
   A UDP Collector is specified as secondary destination.  Exporting
   Process reliability statistics [RFC5101] and Selection Sequence
   Report Interpretation and Selector Report Interpretation [RFC5476]
   are exported periodically using Options Templates chosen by the
   Monitoring Device.

<ipfix xmlns="urn:ietf:params:xml:ns:ietf-ipfix-psamp">

  <observationPoint>
    <name>OP at eth0 (ingress)</name>
    <observationDomainId>123</observationDomainId>
    <interface>
      <ifName>eth0</ifName>
      <direction>ingress</direction>
    </interface>
    <selectionProcess>Count-based packet selection</selectionProcess>
  </observationPoint>

  <observationPoint>
    <name>OP at eth1</name>
    <observationDomainId>123</observationDomainId>
    <interface>
      <ifName>eth1</ifName>
    </interface>
    <selectionProcess>All packet selection</selectionProcess>
  </observationPoint>

  <selectionProcess>



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 65]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


    <name>Count-based packet selection</name>
    <selector>
      <name>Count-based sampler</name>
      <sampCountBased>
        <interval>1</interval>
        <spacing>99</spacing>
      </sampCountBased>
    </selector>
    <cache>Flow cache</cache>
  </selectionProcess>

  <selectionProcess>
    <name>All packet selection</name>
    <selector>
      <name>Select all</name>
      <selectAll/>
    </selector>
    <cache>Flow cache</cache>
  </selectionProcess>

  <cache>
    <name>Flow cache</name>
    <cacheMode>timeout</cacheMode>
    <maxRecords>4096</maxRecords>
    <activeTimeout>5</activeTimeout>
    <inactiveTimeout>10</inactiveTimeout>
    <cacheLayout>
      <cacheField>
        <name>Field 1</name>
        <ieName>sourceIPv4Address</ieName>
        <isFlowKey/>
      </cacheField>
      <cacheField>
        <name>Field 2</name>
        <ieName>destinationIPv4Address</ieName>
        <isFlowKey/>
      </cacheField>
      <cacheField>
        <name>Field 3</name>
        <ieName>transportProtocol</ieName>
        <isFlowKey/>
      </cacheField>
      <cacheField>
        <name>Field 4</name>
        <ieName>sourceTransportPort</ieName>
        <isFlowKey/>
      </cacheField>
      <cacheField>



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 66]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


        <name>Field 5</name>
        <ieName>destinationTransportPort</ieName>
        <isFlowKey/>
      </cacheField>
      <cacheField>
        <name>Field 6</name>
        <ieName>flowStartMilliSeconds</ieName>
      </cacheField>
      <cacheField>
        <name>Field 7</name>
        <ieName>flowEndSeconds</ieName>
      </cacheField>
      <cacheField>
        <name>Field 8</name>
        <ieName>octetDeltaCount</ieName>
      </cacheField>
      <cacheField>
        <name>Field 9</name>
        <ieName>packetDeltaCount</ieName>
      </cacheField>
    </cacheLayout>
    <exportingProcess>SCTP export with UDP backup</exportingProcess>
  </cache>

  <exportingProcess>
    <name>SCTP export with UDP backup</name>
    <destination>
      <name>SCTP destination</name>
      <exportMemberType>primary</exportMemberType>
      <transportProtocol>sctp</transportProtocol>
      <destinationIpAddress>192.0.2.1</destinationIpAddress>
      <destinationPort>4739</destinationPort>
      <orderedDelivery>true</orderedDelivery>
    </destination>
    <destination>
      <name>UDP destination</name>
      <exportMemberType>secondary</exportMemberType>
      <transportProtocol>udp</transportProtocol>
      <destinationIpAddress>192.0.2.2</destinationIpAddress>
      <destinationPort>4739</destinationPort>
      <sourceIpAddress>127.0.0.1</sourceIpAddress>
      <templateRefreshTimeout>300</templateRefreshTimeout>
      <optionsTemplateRefreshTimeout>300</optionsTemplateRefreshTimeout>
    </destination>
    <options>
      <name>Options 1</name>
      <optionsType>selectionSequence</optionsType>
      <timeout>30000</timeout>



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 67]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


    </options>
    <options>
      <name>Options 2</name>
      <optionsType>exportingReliability</optionsType>
      <timeout>6000</timeout>
    </options>
  </exportingProcess>

</ipfix>

7.3.  Export of Flow Records and Packet Reports

   This configuration example demonstrates the combined export of Flow
   Records and Packet Reports for a single Observation Point.  A
   Selection Process (Selection Sequence ID = 1) applies random Sampling
   to the stream of observed packets.  The output is passed to a Cache
   generating Flow Records.  In parallel, the output is passed to a
   second Selection Process (Selection Sequence ID = 2) which discards
   all non-ICMP packets.  A second Cache generates Packet Reports of the
   retained ICMP packets.  The output of both caches is exported to a
   single Collector using SCTP.

   <ipfix xmlns="urn:ietf:params:xml:ns:ietf-ipfix-psamp">

     <observationPoint>
       <name>OP at linecard 3</name>
       <observationDomainId>9876</observationDomainId>
       <interface>
         <ifIndex>4</ifIndex>
         <direction>ingress</direction>
       </interface>
       <selectionProcess>Sampling</selectionProcess>
     </observationPoint>

     <selectionProcess>
       <name>Sampling</name>
       <selectionSequenceId>1</selectionSequenceId>
       <selector>
         <name>Random sampler</name>
         <selectorId>1</selectorId>
         <sampUniProb>
           <probability>4294967</probability>
         </sampUniProb>
       </selector>
       <selectionProcess>ICMP</selectionProcess>
       <cache>Flow cache</cache>
     </selectionProcess>




Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 68]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


     <selectionProcess>
       <name>ICMP</name>
       <selectionSequenceId>2</selectionSequenceId>
       <selector>
         <name>ICMP filter</name>
         <selectorId>2</selectorId>
         <filterMatch>
           <ieId>4</ieId>
           <startValue>1</startValue>
           <stopValue>1</stopValue>
         </filterMatch>
       </selector>
       <cache>Packet cache</cache>
     </selectionProcess>

     <cache>
       <name>Flow cache</name>
       <cacheMode>timeout</cacheMode>
       <maxRecords>4096</maxRecords>
       <activeTimeout>5</activeTimeout>
       <inactiveTimeout>10</inactiveTimeout>
       <cacheLayout>
         <cacheField>
           <name>Field 1</name>
           <ieName>sourceIPv4Address</ieName>
           <isFlowKey/>
         </cacheField>
         <cacheField>
           <name>Field 2</name>
           <ieName>destinationIPv4Address</ieName>
           <isFlowKey/>
         </cacheField>
         <cacheField>
           <name>Field 6</name>
           <ieName>flowStartMilliSeconds</ieName>
         </cacheField>
         <cacheField>
           <name>Field 7</name>
           <ieName>flowEndSeconds</ieName>
         </cacheField>
         <cacheField>
           <name>Field 8</name>
           <ieName>octetDeltaCount</ieName>
         </cacheField>
         <cacheField>
           <name>Field 9</name>
           <ieName>packetDeltaCount</ieName>
         </cacheField>



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 69]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


       </cacheLayout>
       <exportingProcess>Export</exportingProcess>
     </cache>

     <cache>
       <name>Packet cache</name>
       <cacheMode>immediate</cacheMode>
       <maxRecords>512</maxRecords>
       <cacheLayout>
         <cacheField>
           <name>Field 1</name>
           <ieId>313</ieId>
           <ieLength>64</ieLength>
         </cacheField>
         <cacheField>
           <name>Field 2</name>
           <ieId>154</ieId>
         </cacheField>
       </cacheLayout>
       <exportingProcess>Export</exportingProcess>
     </cache>

     <exportingProcess>
       <name>Export</name>
       <destination>
         <name>SCTP collector</name>
         <transportProtocol>sctp</transportProtocol>
         <destinationIpAddress>192.0.2.1</destinationIpAddress>
         <timedReliability>0</timedReliability>
         <numberOfStreams>2</numberOfStreams>
       </destination>
     </exportingProcess>

   </ipfix>

   The Observed Packet Stream at the input of the Selection Process
   "ICMP" originates from the Selection Process "Sampling", which thus
   constitutes a pseudo Observation Point.  In order to inform the
   Collector about the cascaded Selection Processes, the Exporting
   Process exports two Selection Sequence Report Interpretations as
   defined in [RFC5476], section 6.5.1, including the following fields:

   Selection Process "Sampling":

     Scope:      selectionSequenceId = 1
     Non-scope:  ingressInterface = 4
                 selectorId = 1




Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 70]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   Selection Process "ICMP":

     Scope:      selectionSequenceId = 2
     Non-scope:  selectionSequenceId = 1
                 selectorId = 2

   One possibility to link the Selection Sequence Report Interpretation
   of Selection Process "Sampling" to the Flow Record generated by the
   Cache named "Flow cache" is to include a field selectionSequenceId =
   1 to each Data Record.  Similarly, the Selection Sequence Report
   Interpretation of Selection Process "ICMP" can be linked to the
   Packet Reports generated by the Cache named "Packet cache" by
   including a field selectionSequenceId = 2 to each Data Record.

   The following modifications lead to a similar but not identical
   configuration of the Monitoring Device:



































Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 71]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


     ...
     <observationPoint>
       <name>OP at linecard 3</name>
       <linecard>
         <entPhysicalIndex>3</entPhysicalIndex>
       </linecard>
       <selectionProcess>Sampling</selectionProcess>
       <selectionProcess>Sampled ICMP packets</selectionProcess>
     </observationPoint>
     ...
     <selectionProcess>
       <name>Sampling</name>
       <selector>
         <name>Random sampler</name>
         <sampUniProb>
           <probability>4294967</probability>
         </sampUniProb>
       </selector>
       <cache>Flow cache</cache>
     </selectionProcess>

     <selectionProcess>
       <name>Sampled ICMP packets</name>
       <selector>
         <name>Random sampler</name>
         <sampUniProb>
           <probability>4294967</probability>
         </sampUniProb>
       </selector>
       <selector>
         <name>ICMP filter</name>
         <filterMatch>
           <ieId>4</ieId>
           <startValue>1</startValue>
           <stopValue>1</stopValue>
         </filterMatch>
       </selector>
       <cache>Packet cache</cache>
     </selectionProcess>
     ...

   In this case, the random sampler is implemented in two different
   Selection Processes, leading to different sets of selected packets.
   As a consequence, the set of packets accounted in the Flow Cache is
   not identical to the set of packets from which the ICMP Packet
   Reports are generated.





Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 72]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


7.4.  Collector and File Writer

   This configuration example configures a Collector which writes the
   received data to a file.

   <ipfix xmlns="urn:ietf:params:xml:ns:ietf-ipfix-psamp">

     <collectingProcess>
       <name>SCTP collector</name>
       <receiver>
         <name>Listening port 4739</name>
         <transportProtocol>sctp</transportProtocol>
         <localIpAddress>192.0.2.1</localIpAddress>
         <localPort>4739</localPort>
         <maxAllowedStreams>64</maxAllowedStreams>
       </receiver>
       <exportingProcess>File writer</exportingProcess>
     </collectingProcess>

     <exportingProcess>
       <name>File writer</name>
       <fileWriter>
         <name>Write to /tmp folder</name>
         <exportMemberType>primary</exportMemberType>
         <file>file://tmp/collected-records.ipfix</file>
       </fileWriter>
     </exportingProcess>

   </ipfix>

7.5.  Deviations

   Assume that a Monitoring Devices does not support the configuration
   of Observation Domain ID and Observation Point ID.  It supports a
   single Observation Domain with ID=1 to which two interfaces can be
   assigned.  The Observation Point ID is identical to the ifIndex.
   Linecards are not installed.

   The following YANG module specifies these deviations.












Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 73]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   module my-ipfix-psamp-deviation {
     namespace "urn:my-company:xml:ns:ietf-ipfix-psamp";
     prefix my;

     import ipfix-psamp { prefix ipfix; }

     deviation /ipfix:ipfix/ipfix:observationPoint/ipfix:linecard {
       deviate not-supported;
     }
     deviation /ipfix:ipfix/ipfix:observationPoint {
       deviate add {
         must "ipfix:observationDomainId=1";
       }
       deviate add {
         must "ipfix:interface/ipfix:ifIndex=1
           or ipfix:interface/ipfix:ifIndex=2";
       }
     }
     deviation
         /ipfix:ipfix/ipfix:observationPoint/ipfix:observationPointId {
       deviate add {
         must "current()=../ipfix:interface/ipfix:ifIndex";
       }
     }
   }


8.  Security Considerations

   The IPFIX/PSAMP configuration data model does not introduce security
   issues.  Configuration data encoded according to the configuration
   data model may contain sensitive information.  Therefore, if
   configuration data is transmitted, the underlying protocol must apply
   appropriate procedures to guarantee the integrity and confidentiality
   of the data.  Particularly, if the NETCONF protocol is used to
   configure Monitoring Devices, the security considerations of the
   NETCONF protocol apply [RFC4741].


9.  IANA Considerations

   This document has no actions for IANA.


Appendix A.  Acknowledgements

   The authors thank Martin Bjorklund, Andy Bierman, and Ladislav Lhotka
   for helping specifying the configuration data model in YANG.



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 74]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


10.  References

10.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC5101]  Claise, B., "Specification of the IP Flow Information
              Export (IPFIX) Protocol for the Exchange of IP Traffic
              Flow Information", RFC 5101, January 2008.

   [RFC5102]  Quittek, J., Bryant, S., Claise, B., Aitken, P., and J.
              Meyer, "Information Model for IP Flow Information Export",
              RFC 5102, January 2008.

   [RFC5476]  Claise, B., Johnson, A., and J. Quittek, "Packet Sampling
              (PSAMP) Protocol Specifications", RFC 5476, March 2009.

   [RFC5477]  Dietz, T., Claise, B., Aitken, P., Dressler, F., and G.
              Carle, "Information Model for Packet Sampling Exports",
              RFC 5477, March 2009.

   [I-D.ietf-netmod-yang]
              Bjorklund, M., "YANG - A data modeling language for
              NETCONF", draft-ietf-netmod-yang-06 (work in progress),
              June 2009.

   [I-D.ietf-netmod-yang-types]
              Schoenwaelder, J., "Common YANG Data Types",
              draft-ietf-netmod-yang-types-03 (work in progress),
              May 2009.

   [UML]      "OMG Unified Modeling Language (OMG UML), Superstructure,
              V2.1.2", OMG formal/2007-11-02, November 2007.

10.2.  Informative References

   [W3C.REC-xml-20040204]
              Yergeau, F., Maler, E., Bray, T., Paoli, J., and C.
              Sperberg-McQueen, "Extensible Markup Language (XML) 1.0
              (Third Edition)", World Wide Web Consortium
              FirstEdition REC-xml-20040204, February 2004,
              <http://www.w3.org/TR/2004/REC-xml-20040204>.

   [W3C.REC-xmlschema-0-20041028]
              Walmsley, P. and D. Fallside, "XML Schema Part 0: Primer
              Second Edition", World Wide Web Consortium
              Recommendation REC-xmlschema-0-20041028, October 2004,



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 75]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


              <http://www.w3.org/TR/2004/REC-xmlschema-0-20041028>.

   [RFC4741]  Enns, R., "NETCONF Configuration Protocol", RFC 4741,
              December 2006.

   [W3C.REC-soap12-part1-20070427]
              Lafon, Y., Hadley, M., Moreau, J., Mendelsohn, N., Gudgin,
              M., Karmarkar, A., and H. Nielsen, "SOAP Version 1.2 Part
              1: Messaging Framework (Second Edition)", World Wide Web
              Consortium Recommendation REC-soap12-part1-20070427,
              April 2007,
              <http://www.w3.org/TR/2007/REC-soap12-part1-20070427>.

   [RFC5472]  Zseby, T., Boschi, E., Brownlee, N., and B. Claise, "IP
              Flow Information Export (IPFIX) Applicability", RFC 5472,
              March 2009.

   [RFC5470]  Sadasivan, G., Brownlee, N., Claise, B., and J. Quittek,
              "Architecture for IP Flow Information Export", RFC 5470,
              March 2009.

   [I-D.ietf-ipfix-mib]
              Dietz, T., Kobayashi, A., and B. Claise, "Definitions of
              Managed Objects for IP Flow Information Export",
              draft-ietf-ipfix-mib-06 (work in progress), March 2009.

   [I-D.ietf-ipfix-file]
              Trammell, B., Boschi, E., Mark, L., Zseby, T., and A.
              Wagner, "Specification of the IPFIX File Format",
              draft-ietf-ipfix-file-04 (work in progress), July 2009.

   [RFC5473]  Boschi, E., Mark, L., and B. Claise, "Reducing Redundancy
              in IP Flow Information Export (IPFIX) and Packet Sampling
              (PSAMP) Reports", RFC 5473, March 2009.

   [RFC3917]  Quittek, J., Zseby, T., Claise, B., and S. Zander,
              "Requirements for IP Flow Information Export (IPFIX)",
              RFC 3917, October 2004.

   [RFC3758]  Stewart, R., Ramalho, M., Xie, Q., Tuexen, M., and P.
              Conrad, "Stream Control Transmission Protocol (SCTP)
              Partial Reliability Extension", RFC 3758, May 2004.

   [RFC4960]  Stewart, R., "Stream Control Transmission Protocol",
              RFC 4960, September 2007.

   [RFC5474]  Duffield, N., Chiou, D., Claise, B., Greenberg, A.,
              Grossglauser, M., and J. Rexford, "A Framework for Packet



Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 76]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


              Selection and Reporting", RFC 5474, March 2009.

   [I-D.ietf-psamp-mib]
              Dietz, T. and B. Claise, "Definitions of Managed Objects
              for Packet Sampling", draft-ietf-psamp-mib-06 (work in
              progress), June 2006.

   [RFC5475]  Zseby, T., Molina, M., Duffield, N., Niccolini, S., and F.
              Raspall, "Sampling and Filtering Techniques for IP Packet
              Selection", RFC 5475, March 2009.

   [RFC2863]  McCloghrie, K. and F. Kastenholz, "The Interfaces Group
              MIB", RFC 2863, June 2000.

   [RFC4133]  Bierman, A. and K. McCloghrie, "Entity MIB (Version 3)",
              RFC 4133, August 2005.

   [RFC4347]  Rescorla, E. and N. Modadugu, "Datagram Transport Layer
              Security", RFC 4347, April 2006.

   [RFC4346]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.1", RFC 4346, April 2006.

   [RFC3280]  Housley, R., Polk, W., Ford, W., and D. Solo, "Internet
              X.509 Public Key Infrastructure Certificate and
              Certificate Revocation List (CRL) Profile", RFC 3280,
              April 2002.

   [YANG-WEB]
              Bjoerklund, M., "YANG WebHome",
              Homepage http://www.yang-central.org, March 2009.


Authors' Addresses

   Gerhard Muenz
   Technische Universitaet Muenchen
   Department of Informatics
   Chair for Network Architectures and Services (I8)
   Boltzmannstr. 3
   Garching  D-85748
   DE

   Phone: +49 89 289-18008
   Email: muenz@net.in.tum.de
   URI:   http://www.net.in.tum.de/~muenz





Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 77]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2009


   Benoit Claise
   Cisco Systems, Inc.
   De Kleetlaan 6a b1
   Diegem  1831
   Belgium

   Phone: +32 2 704 5622
   Email: bclaise@cisco.com


   Paul Aitken
   Cisco Systems (Scotland) Ltd.
   96 Commercial Quay
   Commercial Street
   Edinburgh  EH6 6LX
   United Kingdom

   Phone: +44 131 561 3616
   Email: paitken@cisco.com
































Muenz, et al.  draft-ietf-ipfix-configuration-model-03.txt     [Page 78]


