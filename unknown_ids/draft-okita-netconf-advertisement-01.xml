<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt'?>
<?rfc toc='yes' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd"
[
  <!ENTITY rfc3288  PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3288.xml'>
  <!ENTITY rfc4741  PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4741.xml'>
  <!ENTITY rfc4742  PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4742.xml'>
  <!ENTITY rfc4743  PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4743.xml'>
  <!ENTITY rfc4744  PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4744.xml'>
  <!ENTITY netmod		PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.chisholm-netconf-model.xml'>
  <!ENTITY netnotif	PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-netconf-notification.xml'>
  <!ENTITY w3cxml    PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-xml-20060816.xml'>
  <!ENTITY w3cschema PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-xmlschema-0-20010502.xml'>
  <!ENTITY w3csoap12 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-soap12-part1-20030624.xml'>
  <!ENTITY w3cwsdl20-pri PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-wsdl20-primer-20070626.xml'>
  <!ENTITY w3cwsdl20 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-wsdl20-20070626.xml'>
  <!ENTITY w3cwsdl20-adj PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-wsdl20-adjuncts-20070626.xml'>
  <!ENTITY vlanmodel	PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.iijima-ngo-vlandatamodel.xml'>
  <!ENTITY diffservmodel	PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.okita-ngo-diffservdatamodel.xml'>
  <!ENTITY aclmodel	PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.iijima-ngo-acldatamodel.xml'>
  <!ENTITY soapimpl	PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.iijima-netconf-soap-implementation.xml'>
]
>
<rfc category="info" ipr="full3978">
	<front>
		<title abbrev="NETCONF Interface Advertisement">
			NETCONF Configuration Interface Advertisement with WSDL and
			XSD
		</title>
		<author initials="H.O." fullname="Hideki Okita"
			surname="Okita">
			<organization abbrev="Hitachi, Ltd.">
				Central Research Laboratory, Hitachi, Ltd.
			</organization>
			<address>
				<postal>
					<street>1-280 Higashi-Koigakubo</street>
					<city>Kokubunji</city>
					<region>Tokyo</region>
					<code>185-8601</code>
					<country>Japan</country>
				</postal>
				<phone>+81-42-323-1111</phone>
				<facsimile>+81-42-327-7868</facsimile>
				<email>hideki.okita.pf@hitachi.com</email>
			</address>
		</author>
		<author initials="T.I." fullname="Tomoyuki Iijima"
			surname="Iijima">
			<organization abbrev="Alaxala Corp.">
				Alaxala Networks Corp.
			</organization>
			<address>
				<postal>
					<street>Shin-Kawasaki Mitsui Bldg.</street>
					<street>890 Saiwai-ku Kashimada</street>
					<city>Kawasaki</city>
					<region>Kanagawa</region>
					<code>212-0058</code>
					<country>Japan</country>
				</postal>
				<phone>+81-44-549-1735</phone>
				<facsimile>+81-44-549-1272</facsimile>
				<email>tomoyuki.iijima@alaxala.com</email>
			</address>
		</author>
		<author initials="Y.A." fullname="Yoshifumi Atarashi"
			surname="Atarashi">
			<organization abbrev="Alaxala Corp.">
				Alaxala Networks Corp.
			</organization>
			<address>
				<postal>
					<street>Shin-Kawasaki Mitsui Bldg.</street>
					<street>890 Saiwai-ku Kashimada</street>
					<city>Kawasaki</city>
					<region>Kanagawa</region>
					<code>212-0058</code>
					<country>Japan</country>
				</postal>
				<phone>+81-44-549-1735</phone>
				<facsimile>+81-44-549-1272</facsimile>
				<email>atarashi@alaxala.net</email>
			</address>
		</author>
		<date month="March" year="2008"></date>
		<area>Operation and Management</area>
		<workgroup>Network Working Group</workgroup>
		<abstract>
			<t>
				This memo describes a configuration interface
				advertisement method for NETCONF device developers. In
				the proposal, the developers take a configuration
				interface definition information of target NETCONF
				devices. On their development environment, they generate
				stab classes to control the devices. The NETCONF device
				advertises their configuration interface by a WSDL file.
				The WSDL file describes message type of each NETCONF
				operation of the device. The WSDL file contains XML
				Schema in its types element and describes definition of
				the types definition used to configuration data. By this
				configuration interface advertisement, Network
				management System (NMS) developers can improve their
				development efficiency of the NMS.
			</t>
		</abstract>
	</front>
	<middle>
		<section title="Introduction">
			<t>
				IETF netconf WG made up
				<xref target='RFC4741'>NETCONF protocol</xref>
				, standard configuration protocol between a network
				management system and network devices. By using this
				unified management/configuration protocol, operators can
				reduce management/configuration cost.
			</t>
			<t>
				Now, the NETCONF protocol has a new additional
				requirement that NETCONF users would like to know
				configuration datamodels and interfaces supported by
				NETCONF devices. There are two situations,
				pre-deployment and post-deployment. In the
				pre-deployment case, software engineers would like to
				know NETCONF devices' datamodels and interfaces to
				develop their NMS. To implement the NETCONF NMS, the
				developers should check the Schema that defines the
				configuration data of the target NETCONF device. They
				should know XML tree construction of the configuration
				data and type definition of the each element in the XML
				tree.
			</t>
			<t>
				In the post-deployment case, a NETCONF client (manager)
				takes dinamically information about supported datamodels
				from a NETCONF server (device). For example, an operator
				applies a patch to a target NETCONF device to update
				supported datamodels from a NETCONF NMS, and check the
				update later.
			</t>
			<t>
				<xref target='W3C.REC-xmlschema-0-20010502'>
					XML Schema
				</xref>
				or other XML schema language is used to describe the
				structure of configuration data. NETCONF users can know
				supported datamodels by taking schemas from target
				devices. However, today there are no standard way to
				take the schema from a target NETCONF device.
			</t>
			<t>
				This document provides standard way to take information
				of datamodels and interfaces supported by a NETCONF
				device to improve NMS development process in the
				pre-deployment case. First, this document standardizes
				how to describe the configuration interface of NETCONF
				devices. Second, this document standardizes how to
				describe the type definition of the XML elements that
				occur in the NETCONF protocol messages. Last, this
				document standardizes how to advertise the above
				configuration interface definition information.
			</t>
			<t>
				This document also describe how NETCONF NMS developers
				automeate the construction of NETCONF stack during the
				development of a NETCONF NMS.
			</t>
		</section>
		<section title="NETCONF Protocol">
			<t>
				Characteristics of the NETCONF protocol are (1)
				XML-format, (2) RPC- style, and (3) separation of
				operation and datamodel.
			</t>
			<t>
				The NETCONF protocol has protocol messages described in
				XML format. XML-format makes it easy for operators to
				read configuration data. It also improves machine
				readability of the configuration data since XML
				documents are well-formed. From a different viewpoint,
				various XML related tools eases development of devices
				compliant to the NETCONF protocol.
			</t>
			<t>
				The NETCONF protocol is a Remote Procedure Call (RPC)
				style protocol. RPC-style protocols have sets of a
				request message and a corresponding reply message. It is
				easy to implement on a management software, since each
				RPC of the protocol corresponds to a function call of
				the programs.
			</t>
			<figure anchor="NetconfLayer">
				<title>NETCONF Protocol Layers</title>
				<artwork>
					<![CDATA[
              Layer                      Example
         +-------------+      +-----------------------------+
     (4) |   Content   |      |     Configuration data      |
         +-------------+      +-----------------------------+
                |                           |
         +-------------+      +-----------------------------+
     (3) | Operations  |      | <get-config>, <edit-config> |
         +-------------+      +-----------------------------+
                |                           |
         +-------------+      +-----------------------------+
     (2) |     RPC     |      |    <rpc>, <rpc-reply>       |
         +-------------+      +-----------------------------+
                |                           |
         +-------------+      +-----------------------------+
     (1) |  Transport  |      |     SSH, SSL, console,      |
         |   Protocol  |      |     SOAP/HTTP, BEEP         |
         +-------------+      +-----------------------------+
						]]>
				</artwork>
			</figure>
			<t>
				The NETCONF protocol defines protocol operations and
				datamodels separately. The NETCONF protocol has four
				layers. Figure 1 shows the NETCONF protocol structure.
				It contains Transport Protocol Layer, RPC Layer,
				Operations Layer and Content Layer.
			</t>
			<t>
				In the RPC Layer and Operations Layer, the netconf WG
				defined RPC message and basic protocol operations
				<xref target='RFC4741'></xref>
				. These NETCONF operations carry configuration data
				inside &lt;config&gt; element. The WG also defined the
				transport mapping of the NETCONF protocol for
				<xref target='RFC4742'>SSH</xref>
				,
				<xref target='RFC4743'>SOAP/HTTP</xref>
				and
				<xref target='RFC4744'>BEEP</xref>
				.
			</t>
			<t>
				The Content Layer defines model of the NETCONF content
				carried by NETCONF operations such as &lt;get-config&gt;
				and &lt;edit-config&gt;. The structure of the
				configuration data is defined by schema language such as
				<xref target='W3C.REC-xml-20060816'>DTD</xref>
				,
				<xref target='W3C.REC-xmlschema-0-20010502'>
					XML Schema
				</xref>
				or RelaxNG for the each model.
			</t>
		</section>
		<section title="Proposal">
			<t>
				To fulfill the above requirements, we propose adoption
				of Web-Service architecture to the NETCONF system
				architecture. The proposed NETCONF system uses
				<xref target='W3C.REC-wsdl20-20070626'>
					Web Service Description Language (WSDL)
				</xref>
				and XML Schema (XSD) widely deployed in Web-service
				system.
			</t>
			<t>Features of this proposal:</t>
			<list>
				<t>- WSDL for interface description</t>
				<t>- XSD for type definition</t>
				<t>
					- WSDL file transfer on mapping-depend transport
					with fixed URI
				</t>
			</list>
			<section title="Target Architecture">
				<t>
					This proposal assumes the following NETCONF system
					architecture. Developers implement their NMS as a
					NETCONF manager on their development environment
					with help of the NETCONF configuration interface
					information provided by NETCONF device developers
					via the direct access to the NETCONF device or via
					indirect access with Web server. The implemented NMS
					works on a runtime environment and access NETCONF
					devices via NETCONF protocol.
				</t>
				<list>
					<t>- NETCONF Device</t>
					<t>- Development Environment NETCONF Manager</t>
					<t>- Runtime Environment NETCONF Manager</t>
					<t>- Device vendor's Web server</t>
				</list>
			</section>
			<section
				title="NETCONF Operation Interface Description by WSDL">
				<t>
					NETCONF devices advertise their configuration
					interface to the NETCONF NMS developers. The
					developers know name of the operation, number and
					type of arguments, and type of return value from the
					interface advertisement.
				</t>
				<t>
					In this proposal, NETCONF system use WSDL file to
					advertise their configuration interface to the NMS
					developers. Somehow the NMS developers takes a WSDL
					file corresponding to a target NETCONF device, and
					read the WSDL file. Then the developers know NETCONF
					operations implemented in the NETCONF device.
				</t>
				<t>
					The WSDL file SHOULD include two ordinary NETCONF
					protocol message exchanges: hello exchange and RPC
					exchange. In the hello exchange, a NETCONF Manager
					throws &lt;hello&gt; element to a NETCONF devices as
					a NETCONF request, and then get &lt;hello&gt;
					element from the NETCONF device as a NETCONF
					response. In the RPC exchange, the NETCONF manager
					throws &lt;rpc&gt; element and get &lt;rpc-reply&gt;
					element.
				</t>
				<t>
					Below is a recommended WSDL file example to
					advertise NETCONF device configuration interface
					proposed in RFC4743. In this example, SOAP over HTTP
					is selected as its transport protocol binding.
					NETCONF device developers can choose their favorite
					transport binding and modify the binding part of
					this WSDL file.
				</t>
				<t>
					The WSDL file describes type definition of the
					argument and return value of each operation by XML
					Schema. Developers MAY prepare external XML Schema
					as separate file or inline Schema in this WSDL file.
					In this example, an external XML Schema defines the
					types. When developers prepare inline schema, they
					make types element under the definition element of
					this WSDL file and place schema element same with
					external schema under the types element.
				</t>
				<figure>
					<artwork>
						<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
   <definitions
     xmlns="http://schemas.xmlsoap.org/wsdl/"
     xmlns:SOAP="http://schemas.xmlsoap.org/wsdl/soap/"
     xmlns:tns="urn:ietf:params:xml:ns:netconf:soap:1.0"
     xmlns:netb="urn:ietf:params:xml:ns:netconf:base:1.0"
     targetNamespace="urn:ietf:params:xml:ns:netconf:soap:1.0"
     name="netconf-soap_1.0.wsdl">

     <import namespace="urn:ietf:params:xml:ns:netconf:base:1.0"
             location="netconf-base_1.0.xsd"/>

     <message name="helloRequest">
       <part name="in" element="netb:hello"/>
     </message>
     <message name="helloResponse">
       <part name="out" element="netb:hello"/>
     </message>

     <message name="rpcRequest">
       <part name="in" element="netb:rpc"/>
     </message>
     <message name="rpcResponse">
       <part name="out" element="netb:rpc-reply"/>
     </message>

     <portType name="netconfPortType">
       <operation name="rpc">
         <input message="tns:rpcRequest"/>
         <output message="tns:rpcResponse"/>
       </operation>
       <operation name="hello">
         <input message="tns:helloRequest"/>
         <output message="tns:helloResponse"/>
       </operation>
     </portType>

     <binding name="netconfBinding" type="tns:netconfPortType">
       <SOAP:binding style="document"
            transport="http://schemas.xmlsoap.org/soap/http"/>
       <operation name="hello">
         <SOAP:operation/>
         <input>
           <SOAP:body use="literal"
                namespace="urn:ietf:params:xml:ns:netconf:base:1.0"/>
         </input>
         <output>
           <SOAP:body use="literal"
                namespace="urn:ietf:params:xml:ns:netconf:base:1.0"/>
         </output>
       </operation>
       <operation name="rpc">
         <SOAP:operation/>
         <input>
           <SOAP:body use="literal"
                namespace="urn:ietf:params:xml:ns:netconf:base:1.0"/>
         </input>
         <output>
           <SOAP:body use="literal"
                namespace="urn:ietf:params:xml:ns:netconf:base:1.0"/>
         </output>
       </operation>
     </binding>

     <service name="netconf">
       <port binding="tns:netconfBinding" name="netconfBinding">
         <SOAP:address location="http://localhost:8080/netconf/"/>
       </port>
     </service>

  </definitions>
						]]>
					</artwork>
				</figure>
				<t>
					When device developers choose SOAP over HTTP binding
					for the NETCONF configuration service, the WSDL file
					should select "document-literal" as its transport
					binding and message encoding. In the WSDL file,
					style attribute of the binding element SHOULD be
					"document". input and output element in binding
					element SHOULD include body element that has
					attribute with "literal" value.
				</t>
			</section>
			<section
				title="Operation and Datamodel Type Definition by XSD">
				<t>
					The NETCONF system should prepare XML Schema
					describing the type of argument and return value of
					rpc request. As described above, a WSDL file
					describes interface of a NETCONF device. In addition
					to the interface, the NETCONF device should
					advertise the type definition.
				</t>
				<t>
					The XSD file SHOULD include ordinary NETCONF
					operations described in NETCONF Protocol as the
					argument of rpc operation defined in the above WSDL
					file. The XSD file MAY also include NETCONF
					notification subscription operation described in
					<xref target='I-D.ietf-netconf-notification'>
						NETCONF Notification
					</xref>
					. The XSD file MAY also include additional NETCONF
					operations added by vendors.
				</t>

				<t>Ordinary NETCONF operations:</t>
				<list>
					<t>- get</t>
					<t>- getConfig</t>
					<t>- editConfig</t>
					<t>- lock</t>
					<t>- unlock</t>
					<t>- subscribe</t>
				</list>
				<t>
					NETCONF device developers can add configuration
					datamodel as additional type definition in this XSD
					file. They can add import element for the pointer to
					an external schema defining configuration item
					elements, for example, interfaceType, vlanType, and
					etc. They can use proposed configuration datamodels
					like
					<xref target='I-D.iijima-ngo-vlandatamodel'>
						VLAN datamodel
					</xref>
					,
					<xref target='I-D.okita-ngo-diffservdatamodel'>
						Diff-Serv datamodel
					</xref>
					, and
					<xref target='I-D.iijima-ngo-acldatamodel'>
						ACL datamodel
					</xref>
					. They can also include these type definitions as an
					inline schema in this XSD file.
				</t>
				<t>
					Following describes an example XML Schema
					advertising the type definition of the NETCONF
					operation messages. It contains following type
					definitions as an example. This XML Schema contains
					types for edit-config operation message, interface
					configuration message, and vlan configuration
					message. The two types are described by inline
					schema.
				</t>

				<list>
					<t>- rpcType</t>
					<t>- rpcOperationType</t>
					<t>- interfaceType</t>
					<t>- vlanType</t>
					<t>- configInlineType</t>
					<t>- editConfigType</t>
				</list>
				<figure>
					<artwork>
						<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
   <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
              xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
              targetNamespace="urn:ietf:params:xml:ns:netconf:base:1.0"
              elementFormDefault="qualified"
              attributeFormDefault="qualified"
              xml:lang="en">
     <!--
       <rpc> element
       -->
     <xs:complexType name="rpcType">
       <xs:sequence>
         <xs:element ref="rpcOperation"/>
       </xs:sequence>
       <xs:attribute name="message-id" type="xs:string" use="required"/>
     </xs:complexType>
     <xs:element name="rpc" type="rpcType"/>

     <!--
       rpcOperationType: abstraction type
       -->
     <xs:complexType name="rpcOperationType"/>
     <xs:element name="rpcOperation"
                 type="rpcOperationType" abstract="true"/>

     <!--
       Type for <interface> element
       -->
     <xs:complexType name="interfaceType">
       <xs:sequence>
         <xs:element name="IfId"   type="xs:integer"
         <xs:element name="IfName" type="xs:string"
       </xs:sequence>
     </xs:complexType>
     <xs:element name="interface" type="interfaceType">

     <!--
       Type for <vlan> element
       -->
     <xs:complexType name="vlanType">
       <xs:sequence>
         <xs:element name="VlanId"   type="xs:integer"
         <xs:element name="VlanName" type="xs:string"
       </xs:sequence>
     </xs:complexType>
     <xs:element name="vlan" type="vlanType">

     <!--
       Type for <config> element
       -->
     <xs:complexType name="configInlineType">
       <xs:complexContent>
         <xs:extension base="xs:anyType"/>
       </xs:complexContent>
     </xs:complexType>

     <!--
       <edit-config> operation
       -->
     <xs:complexType name="editConfigType">
       <xs:complexContent>
         <xs:extension base="rpcOperationType">
           <xs:sequence>
             <xs:element name="config"
                         type="configInlineType"/>
           </xs:sequence>
         </xs:extension>
       </xs:complexContent>
     </xs:complexType>
     <xs:element name="edit-config" type="editConfigType"
                 substitutionGroup="rpcOperation"/>
   </xs:schema>
						]]>
					</artwork>
				</figure>

			</section>

			<section title="Original RPC definition">
				<t>
					<xref target='RFC4741'>NETCONF Protocol</xref>
					defines standard NETCONF RPCs, get, get-config,
					edit-config, and so on. NETCONF device developers
					who would like to add a new original RPC should
					define new datatype used in this new RPC
					transaction. The developers should define the
					datatype as the extension of rpcOperationType, which
					represents abstracted RPC operation datatype that
					placed in the &lt;rpc&gt; element.
				</t>
				<t>
					Following example is a definition of a new Reset
					operation that uses &lt;reset&gt; element in
					&lt;rpc&gt; element without child element. Since RPC
					operations are abstracted to rpcOperationType, the
					developers have only to define extended datatype.
				</t>
				<figure>
					<artwork>
						<![CDATA[
     <!--
       <reset> operation
       -->
     <xs:complexType name="resetType">
       <xs:complexContent>
         <xs:extension base="rpcOperationType"/>
       </xs:complexContent>
     </xs:complexType>
     <xs:element name="reset" type="resetType"
                 substitutionGroup="rpcOperation"/>
						]]>
					</artwork>
				</figure>
			</section>

			<section title="Schema list retrieval">
				<t>
					In the post-deployment phase, there is an another
					requirement that users would like to retrieve only
					the list of supported configuration datamodels on a
					NETCONF device. In this requirement, users do not
					require the body of the schemas describing the
					datamodels. For this requirement, importing external
					schema into a WSDL file would be a solution.
				</t>
				<t>
					To avoid schema body, the WSDL describing datamodels
					and interfaces of a NETCONF device MAY contain
					external reference in its &lt;wsdl:types&gt;
					element. Each reference is described by
					&lt;import&gt; element that have each namespace and
					schemaLocation attribute. The schemaLocation
					attribute represents its actual location.
				</t>
				<figure>
					<artwork>
						<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
   <wsdl:definitions
     xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
     targetNamespace="urn:ietf:params:xml:ns:netconf:soap:1.0"
     name="netconf-soap_1.0.wsdl">

     <wsdl:types>
       <import namespace="urn:ietf:params:xml:ns:netconf:vlan:1.0"
               schemaLocation="vlan.xsd"/>
       <import namespace="urn:ietf:params:xml:ns:netconf:diffserv:1.0"
               schemaLocation="diffserv.xsd"/>
       <import namespace="urn:ietf:params:xml:ns:netconf:acl:1.0"
               schemaLocation="acl.xsd"/>
       <import namespace="urn:ietf:params:xml:ns:netconf:base:1.0"
               schemaLocation="netconf-base_1.0.xsd"/>
     </wsdl:types>
     
     (Operation definitions)
   </wsdl:definitions>
						]]>
					</artwork>
				</figure>
			</section>
			<section
				title="Publishment of datamodels and interfaces information">
				<t>
					NETCONF device developers can publish the
					device's datamodels and interfaces described by WSDL
					and XSD by several methods as described below.
				</t>
				<list>
					<t>Datastore on a target NETCONF device</t>
					<t>HTTP or FTP server on a vendor's Web site.</t>
					<t>Paper document for NMS developers</t>
				</list>

				<t>
					NETCONF device SHOULD use each transport protocol to
					transfer datamodels and interfaces information. In
					the pre-deployment case, users take the
					configuration information through their development
					environments. These development environments do not
					necessarily have NETCONF features. A NETCONF device
					cannot presuppose existence of the NETCONF session.
					For example, Web-Service development environments
					normally use HTTP to take service information
					described by WSDL and XSD.
				</t>
				<t>
					The NETCONF device that supports SSH mapping MUST
					store a WSDL file on its SFTP datastore related to
					an published URI. It MUST transfer the WSDL file on
					a SFTP session for a request to the URI from the
					NETCONF device. Following is an example URI for the
					WSDL file on SFTP tree.
				</t>
				<t>sftp://netconf.device/netconf.wsdl</t>
				<t>
					The NETCONF device that supports SOAP/HTTP mapping
					MUST store a WSDL file on its HTTP datastore related
					to an published URI. It MUST transfer the WSDL file
					on a HTTP session for a request to the URI from the
					NETCONF device. Following is an example URI for the
					WSDL file on HTTP tree.
				</t>
				<t>http://netconf.device/netconf.wsdl</t>
				<t>
					(TBD) The NETCONF device that supports BEEP mapping
					MUST transfer a WSDL file on the BEEP channel that
					supports file transfer mechanism.
					<xref target='RFC3288'>SOAP/BEEP</xref>
					could be a solution.
				</t>
			</section>
			<section
				title="Reference Programming Model with Web-Service Middleware">
				<t>
					When a NETCONF device support NETCONF over SOAP and
					publish its WSDL, NMS developers can reduce much of
					their implementation time. They can utilize
					Web-Service middleware to construct their NMS code.
				</t>
				<t>
					From the WSDL file published by the NETCONF device,
					the Web-Service middleware generate automatically
					stub classes for NMS code to access configuration
					interface of the NETCONF device via SOAP over HTTP
					transport. The NMS developers have only to implement
					NMS logic using the stub classes.
				</t>
				<t>
					Using WSDL and Web-Service middleware, NMS
					developers might follow the sequence described
					below.
				</t>
				<list>
					<t>- prepare a NETCONF device</t>
					<t>- take a WSDL file from the device via HTTP</t>
					<t>
						- extract XML Schema from the WSDL file for
						reference
					</t>
					<t>
						- generate stub class source file from the WSDL
						file by Web-Service middleware
					</t>
					<t>
						- take the stub class in their development
						environment
					</t>
				</list>
			</section>
		</section>
		<section title="Security Consideration">
			<t>
				In the NETCONF architecture, the transport protocol
				layer is responsible for the security between a network
				manager and network devices.
			</t>
		</section>
		<section title="IANA Consideration">
			<t>This document has no actions for IANA.</t>
		</section>
	</middle>
	<back>
		<references title="Normative References">
			&rfc4741;
			&rfc4742;
			&rfc4743;
			&rfc4744;
		</references>
		<references title="Informative References">
			&netmod;
			&netnotif;
			&vlanmodel;
			&diffservmodel;
			&aclmodel;
			&soapimpl;
			&rfc3288;
			&w3cxml;
			&w3cschema;
			&w3csoap12;
			&w3cwsdl20-pri;
			&w3cwsdl20;
			&w3cwsdl20-adj;
		</references>
	</back>
</rfc>