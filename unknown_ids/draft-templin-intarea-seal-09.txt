


Network Working Group                                    F. Templin, Ed.
Internet-Draft                              Boeing Research & Technology
Intended status: Standards Track                       February 12, 2010
Expires: August 16, 2010


        The Subnetwork Encapsulation and Adaptation Layer (SEAL)
                   draft-templin-intarea-seal-09.txt

Abstract

   For the purpose of this document, a subnetwork is defined as a
   virtual topology configured over a connected IP network routing
   region and bounded by encapsulating border nodes.  These virtual
   topologies may span multiple IP and/or sub-IP layer forwarding hops,
   and can introduce failure modes due to packet duplication and/or
   links with diverse Maximum Transmission Units (MTUs).  This document
   specifies a Subnetwork Encapsulation and Adaptation Layer (SEAL) that
   accommodates such virtual topologies over diverse underlying link
   technologies.

Status of this Memo

   This Internet-Draft is submitted to IETF in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on August 16, 2010.

Copyright Notice

   Copyright (c) 2010 IETF Trust and the persons identified as the
   document authors.  All rights reserved.



Templin                  Expires August 16, 2010                [Page 1]

Internet-Draft                    SEAL                     February 2010


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the BSD License.


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
     1.1.  Motivation . . . . . . . . . . . . . . . . . . . . . . . .  4
     1.2.  Approach . . . . . . . . . . . . . . . . . . . . . . . . .  6
   2.  Terminology and Requirements . . . . . . . . . . . . . . . . .  7
   3.  Applicability Statement  . . . . . . . . . . . . . . . . . . .  8
   4.  SEAL with Segmentation and Reassembly (SEAL-SR) Protocol
       Specification  . . . . . . . . . . . . . . . . . . . . . . . . 10
     4.1.  Model of Operation . . . . . . . . . . . . . . . . . . . . 10
     4.2.  SEAL-SR Header Format (Mode 1) . . . . . . . . . . . . . . 12
     4.3.  ITE Specification  . . . . . . . . . . . . . . . . . . . . 13
       4.3.1.  Tunnel Interface MTU . . . . . . . . . . . . . . . . . 13
       4.3.2.  Admitting Packets into the Tunnel Interface  . . . . . 14
       4.3.3.  Segmentation . . . . . . . . . . . . . . . . . . . . . 14
       4.3.4.  Encapsulation  . . . . . . . . . . . . . . . . . . . . 16
       4.3.5.  Probing Strategy and Information Exchanges . . . . . . 16
       4.3.6.  Packet Identification  . . . . . . . . . . . . . . . . 17
       4.3.7.  Sending SEAL Protocol Packets  . . . . . . . . . . . . 17
       4.3.8.  Processing Raw ICMP Messages . . . . . . . . . . . . . 17
       4.3.9.  Processing SEAL Control Message Protocol (SCMP)
               Messages . . . . . . . . . . . . . . . . . . . . . . . 18
     4.4.  ETE Specification  . . . . . . . . . . . . . . . . . . . . 19
       4.4.1.  Reassembly Buffer Requirements . . . . . . . . . . . . 19
       4.4.2.  IP-Layer Reassembly  . . . . . . . . . . . . . . . . . 20
       4.4.3.  SEAL-Layer Reassembly  . . . . . . . . . . . . . . . . 20
       4.4.4.  Decapsulation and Delivery to Upper Layers . . . . . . 21
       4.4.5.  The SEAL Control Message Protocol (SCMP) . . . . . . . 21
   5.  SEAL with Fragmentation Sensing (SEAL-FS) Protocol
       Specification  . . . . . . . . . . . . . . . . . . . . . . . . 24
     5.1.  Model of Operation . . . . . . . . . . . . . . . . . . . . 25
     5.2.  SEAL-FS Header Format (Version 0)  . . . . . . . . . . . . 25
     5.3.  ITE Specification  . . . . . . . . . . . . . . . . . . . . 25
       5.3.1.  Tunnel Interface MTU . . . . . . . . . . . . . . . . . 25
       5.3.2.  Admitting Packets into the Tunnel Interface  . . . . . 26
       5.3.3.  Segmentation . . . . . . . . . . . . . . . . . . . . . 26
       5.3.4.  Encapsulation  . . . . . . . . . . . . . . . . . . . . 26



Templin                  Expires August 16, 2010                [Page 2]

Internet-Draft                    SEAL                     February 2010


       5.3.5.  Probing Strategy . . . . . . . . . . . . . . . . . . . 27
       5.3.6.  Packet Identification  . . . . . . . . . . . . . . . . 27
       5.3.7.  Sending SEAL Protocol Packets  . . . . . . . . . . . . 27
       5.3.8.  Processing Raw ICMP Messages . . . . . . . . . . . . . 27
       5.3.9.  Processing SEAL Control Message Protocol (SCMP)
               Messages . . . . . . . . . . . . . . . . . . . . . . . 27
     5.4.  ETE Specification  . . . . . . . . . . . . . . . . . . . . 27
       5.4.1.  Reassembly Buffer Requirements . . . . . . . . . . . . 27
       5.4.2.  IP-Layer Reassembly  . . . . . . . . . . . . . . . . . 27
       5.4.3.  SEAL-Layer Reassembly  . . . . . . . . . . . . . . . . 27
       5.4.4.  Decapsulation and Delivery to Upper Layers . . . . . . 28
       5.4.5.  Sending SEAL Control Message Protocol (SCMP)
               Messages . . . . . . . . . . . . . . . . . . . . . . . 28
   6.  Link Requirements  . . . . . . . . . . . . . . . . . . . . . . 28
   7.  End System Requirements  . . . . . . . . . . . . . . . . . . . 28
   8.  Router Requirements  . . . . . . . . . . . . . . . . . . . . . 28
   9.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 28
   10. Security Considerations  . . . . . . . . . . . . . . . . . . . 29
   11. Related Work . . . . . . . . . . . . . . . . . . . . . . . . . 29
   12. SEAL Advantages over Classical Methods . . . . . . . . . . . . 30
   13. Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 31
   14. References . . . . . . . . . . . . . . . . . . . . . . . . . . 31
     14.1. Normative References . . . . . . . . . . . . . . . . . . . 31
     14.2. Informative References . . . . . . . . . . . . . . . . . . 32
   Appendix A.  Reliability . . . . . . . . . . . . . . . . . . . . . 34
   Appendix B.  Integrity . . . . . . . . . . . . . . . . . . . . . . 35
   Appendix C.  Transport Mode  . . . . . . . . . . . . . . . . . . . 36
   Appendix D.  Historic Evolution of PMTUD . . . . . . . . . . . . . 36
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . . 38






















Templin                  Expires August 16, 2010                [Page 3]

Internet-Draft                    SEAL                     February 2010


1.  Introduction

   As Internet technology and communication has grown and matured, many
   techniques have developed that use virtual topologies (including
   tunnels of one form or another) over an actual network that supports
   the Internet Protocol (IP) [RFC0791][RFC2460].  Those virtual
   topologies have elements that appear as one hop in the virtual
   topology, but are actually multiple IP or sub-IP layer hops.  These
   multiple hops often have quite diverse properties that are often not
   even visible to the endpoints of the virtual hop.  This introduces
   failure modes that are not dealt with well in current approaches.

   The use of IP encapsulation has long been considered as the means for
   creating such virtual topologies.  However, the insertion of an outer
   IP header reduces the effective path MTU as-seen by the IP layer.
   When IPv4 is used, this reduced MTU can be accommodated through the
   use of IPv4 fragmentation, but unmitigated in-the-network
   fragmentation has been found to be harmful through operational
   experience and studies conducted over the course of many years
   [FRAG][FOLK][RFC4963].  Additionally, classical path MTU discovery
   [RFC1191] has known operational issues that are exacerbated by in-
   the-network tunnels [RFC2923][RFC4459].  The following subsections
   present further details on the motivation and approach for addressing
   these issues.

1.1.  Motivation

   Before discussing the approach, it is necessary to first understand
   the problems.  In both the Internet and private-use networks today,
   IPv4 is ubiquitously deployed as the Layer 3 protocol.  The two
   primary functions of IPv4 are to provide for 1) addressing, and 2) a
   fragmentation and reassembly capability used to accommodate links
   with diverse MTUs.  While it is well known that the IPv4 address
   space is rapidly becoming depleted, there is a lesser-known but
   growing consensus that other IPv4 protocol limitations have already
   or may soon become problematic.

   First, the IPv4 header Identification field is only 16 bits in
   length, meaning that at most 2^16 unique packets with the same
   (source, destination, protocol)-tuple may be active in the Internet
   at a given time.  Due to the escalating deployment of high-speed
   links (e.g., 1Gbps Ethernet), however, this number may soon become
   too small by several orders of magnitude for high data rate packet
   sources such as tunnel endpoints [RFC4963].  Furthermore, there are
   many well-known limitations pertaining to IPv4 fragmentation and
   reassembly - even to the point that it has been deemed "harmful" in
   both classic and modern-day studies (cited above).  In particular,
   IPv4 fragmentation raises issues ranging from minor annoyances (e.g.,



Templin                  Expires August 16, 2010                [Page 4]

Internet-Draft                    SEAL                     February 2010


   in-the-network router fragmentation) to the potential for major
   integrity issues (e.g., mis-association of the fragments of multiple
   IP packets during reassembly [RFC4963]).

   As a result of these perceived limitations, a fragmentation-avoiding
   technique for discovering the MTU of the forward path from a source
   to a destination node was devised through the deliberations of the
   Path MTU Discovery Working Group (PMTUDWG) during the late 1980's
   through early 1990's (see Appendix D).  In this method, the source
   node provides explicit instructions to routers in the path to discard
   the packet and return an ICMP error message if an MTU restriction is
   encountered.  However, this approach has several serious shortcomings
   that lead to an overall "brittleness" [RFC2923].

   In particular, site border routers in the Internet are being
   configured more and more to discard ICMP error messages coming from
   the outside world.  This is due in large part to the fact that
   malicious spoofing of error messages in the Internet is made simple
   since there is no way to authenticate the source of the messages
   [I-D.ietf-tcpm-icmp-attacks].  Furthermore, when a source node that
   requires ICMP error message feedback when a packet is dropped due to
   an MTU restriction does not receive the messages, a path MTU-related
   black hole occurs.  This means that the source will continue to send
   packets that are too large and never receive an indication from the
   network that they are being discarded.

   The issues with both IPv4 fragmentation and this "classical" method
   of path MTU discovery are exacerbated further when IP-in-IP tunneling
   is used [RFC4459].  For example, ingress tunnel endpoints (ITEs) may
   be required to forward encapsulated packets into the subnetwork on
   behalf of hundreds, thousands, or even more original sources in the
   end site.  If the ITE allows IPv4 fragmentation on the encapsulated
   packets, persistent fragmentation could lead to undetected data
   corruption due to Identification field wrapping.  If the ITE instead
   uses classical IPv4 path MTU discovery, it may be inconvenienced by
   excessive ICMP error messages coming from the subnetwork that may be
   either suspect or contain insufficient information for translation
   into error messages to be returned to the original sources.

   The situation is exacerbated further still by IPsec tunnels, since
   only the first IPv4 fragment of a fragmented packet contains the
   transport protocol selectors (e.g., the source and destination ports)
   required for identifying the correct security association rendering
   fragmentation useless under certain circumstances.  Even worse, there
   may be no way for a site border router that configures an IPsec
   tunnel to transcribe the encrypted packet fragment contained in an
   ICMP error message into a suitable ICMP error message to return to
   the original source.



Templin                  Expires August 16, 2010                [Page 5]

Internet-Draft                    SEAL                     February 2010


   Although recent works have led to the development of a robust end-to-
   end MTU determination scheme [RFC4821], this approach requires
   tunnels to present a consistent MTU the same as for ordinary links on
   the end-to-end path.  Moreover, in current practice existing
   tunneling protocols mask the MTU issues by selecting a "lowest common
   denominator" MTU that may be much smaller than necessary for most
   paths and difficult to change at a later date.  Due to these many
   consideration, a new approach to accommodate tunnels over links with
   diverse MTUs is necessary.

1.2.  Approach

   For the purpose of this document, a subnetwork is defined as a
   virtual topology configured over a connected network routing region
   and bounded by encapsulating border nodes.  Examples include the
   global Internet interdomain routing core, Mobile Ad hoc Networks
   (MANETs) and enterprise networks.  Subnetwork border nodes forward
   unicast and multicast IP packets over the virtual topology across
   multiple IP and/or sub-IP layer forwarding hops that may introduce
   packet duplication and/or traverse links with diverse Maximum
   Transmission Units (MTUs).

   This document introduces a Subnetwork Encapsulation and Adaptation
   Layer (SEAL) for tunnel-mode operation of network layer protocols
   (e.g., IP, OSI, etc.) over IP subnetworks that connect Ingress and
   Egress Tunnel Endpoints (ITEs/ETEs) of border nodes.  It provides a
   modular specification designed to be tailored to specific associated
   IP tunneling protocols.  A transport-mode of operation is also
   possible, and described in Appendix C.  SEAL accommodates links with
   diverse MTUs, protects against off-path denial-of-service attacks,
   and supports efficient duplicate packet detection through the use of
   a minimal mid-layer encapsulation.

   SEAL specifically treats tunnels that traverse the subnetwork as
   unidirectional links that must support IP services.  As for any link,
   tunnels that use SEAL must provide suitable IP services including
   best-effort datagram delivery, integrity and consistent handling of
   packets of various sizes.  As for any link whose media cannot provide
   suitable services natively, tunnels that use SEAL employ link-level
   adaptation functions to meet the legitimate expectations of the IP
   Service.  As this is essentially a link level adaptation, SEAL is
   therefore permitted to alter packets within the subnetwork as long as
   it restores them to their original form when they exit the
   subnetwork.  The mechanisms described within this document are
   designed precisely for this purpose.

   SEAL encapsulation introduces an extended Identification field for
   packet identification and a mid-layer segmentation and reassembly



Templin                  Expires August 16, 2010                [Page 6]

Internet-Draft                    SEAL                     February 2010


   capability that allows simplified cutting and pasting of packets.
   Moreover, SEAL senses in-the-network IPv4 fragmentation as a "noise"
   indication that packet sizing parameters are "out of tune" with
   respect to the network path.  As a result, SEAL can naturally tune
   its packet sizing parameters to eliminate the in-the-network
   fragmentation.  This approach is in contrast to existing tunneling
   protocol practices which seek to avoid MTU issues by selecting a
   "lowest common denominator" MTU that may be overly conservative for
   many tunnels and difficult to change even when larger MTUs become
   available.

   The following sections provide the SEAL normative specifications,
   while the appendices present non-normative additional considerations.


2.  Terminology and Requirements

   The following terms are defined within the scope of this document:

   subnetwork
      a virtual topology configured over a connected network routing
      region and bounded by encapsulating border nodes.

   Ingress Tunnel Endpoint (ITE)
      a virtual interface over which an encapsulating border node (host
      or router) sends encapsulated packets into the subnetwork.

   Egress Tunnel Endpoint (ETE)
      a virtual interface over which an encapsulating border node (host
      or router) receives encapsulated packets from the subnetwork.

   inner packet
      an unencapsulated Layer 3 protocol packet before any mid-layer or
      outer encapsulations are added.  Note that not only IPv6 and IPv4,
      but also any other Layer 3 protocol type packet (e.g., OSI/CLNP
      [RFC1070]) can appear as an inner packet.  Internet protocol
      numbers that identify inner packets are found in the IANA Internet
      Protocol registry [RFC3232].

   mid-layer packet
      a packet resulting from adding mid-layer encapsulating headers to
      an inner packet.

   outer IP packet
      a packet resulting from adding an outer IP header to a mid-layer
      packet.





Templin                  Expires August 16, 2010                [Page 7]

Internet-Draft                    SEAL                     February 2010


   IP, IPvX, IPvY
      used to generically refer to either IP protocol version, i.e.,
      IPv4 or IPv6.

   The following abbreviations correspond to terms used within this
   document and elsewhere in common Internetworking nomenclature:

      PTB - an ICMPv6 "Packet Too Big" [RFC4443]or an ICMPv4
      "Fragmentation Needed" [RFC0792] message.

      DF - the IPv4 header "Don't Fragment" flag [RFC0791]

      MHLEN - the length of the UDP and SEAL encapsulation headers

      OHLEN - the length of the outer IP encapsulation header.

      HLEN - the sum of MHLEN and OHLEN

      S_MRU - the SEAL Maximum Reassembly Unit

      S_MSS - the SEAL Maximum Segment Size

      SCMP - the SEAL Control Message Protocol

      SEAL_ID - a 48-bit Identification value, randomly initialized and
      monotonically incremented for each SEAL protocol packet

      SEAL_PROTO - an IPv4 protocol number used for SEAL

      SEAL_PORT - a TCP/UDP service port number used for SEAL

      SEAL-FS - SEAL with Fragmentation Sensing

      SEAL-SR - SEAL with Segmentation and Reassembly

   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,
   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this
   document, are to be interpreted as described in [RFC2119].  When used
   in lower case (e.g., must, must not, etc.), these words MUST NOT be
   interpreted as described in [RFC2119], but are rather interpreted as
   they would be in common English.


3.  Applicability Statement

   SEAL was motivated by the specific case of subnetwork abstraction for
   Mobile Ad hoc Networks (MANETs); however, the domain of applicability
   also extends to subnetwork abstractions of enterprise networks, ISP



Templin                  Expires August 16, 2010                [Page 8]

Internet-Draft                    SEAL                     February 2010


   networks, SOHO networks, the interdomain routing core, and many
   others.  In particular, SEAL is a natural complement to the
   enterprise network abstraction manifested through the VET mechanism
   [I-D.templin-intarea-vet] and the RANGER architecture
   [I-D.templin-ranger][I-D.russert-rangers].

   SEAL can be used as an IP protocol sublayer for encapsulation of an
   inner packet within outer encapsulating headers.  For example, for
   IPvX in IPvY encapsulation (e.g., as IPv4/SEAL/IPv6), the SEAL header
   appears as a subnetwork encapsulation as seen by the inner IP layer.
   SEAL can also be used as a sublayer within a UDP data payload (e.g.,
   as IPv4/UDP/SEAL/IPv6) similar to Teredo [RFC4380], where UDP
   encapsulation is typically used for operation over subnetworks that
   give preferential treatment to the "core" Internet protocols (i.e.,
   TCP and UDP).  The SEAL header is processed the same as for IPv6
   extension headers, i.e., it is not part of the outer IP header but
   rather allows for the creation of an arbitrarily extensible chain of
   headers in the same way that IPv6 does.

   This document specifies two modes of operation for the SEAL protocol
   known as "SEAL with Fragmentation Sensing (SEAL-FS)" and "SEAL with
   Segmentation and Reassembly (SEAL-SR)".  SEAL-FS provides a minimal
   mechanism through which the egress tunnel endpoint (ETE) acts as a
   passive observer that simply informs the ingress tunnel endpoint
   (ITE) of any fragmentation.  SEAL-FS therefore determines the tunnel
   MTU based on the MTU of the smallest link in the path.  It is useful
   for determining an appropriate MTU for tunnels between performance-
   critical routers over robust links, as well as for other uses in
   which packet segmentation and reassembly would present too great of a
   burden for the routers or end systems.

   SEAL-SR is a functional superset of SEAL-FS, and requires that the
   tunnel endpoints support segmentation and reassembly of packets that
   are too large to traverse the tunnel without fragmentation.  SEAL-SR
   determines the tunnel MTU based on the largest packet the ETE is
   capable of receiving rather than on the MTU of the smallest link in
   the path.  Therefore, SEAL-SR can transport packets that are much
   larger than the underlying links themselves can carry in a single
   piece, i.e., even if IPv6 jumbograms are used [RFC2675].

   SEAL-SR tunnels may be configured over paths that include only
   ordinary links, but they may also be configured over paths that
   include SEAL-FS tunnels or even other SEAL-SR tunnels.  An example
   application would be linking two geographically remote supercomputer
   centers with large MTU links by configuring a SEAL_TE tunnel across
   the Internet.  A second example would be support for sub-IP
   segmentation over low-end links, i.e., especially over wireless
   transmission media such as IEEE 802.15.4, broadcast radio links in



Templin                  Expires August 16, 2010                [Page 9]

Internet-Draft                    SEAL                     February 2010


   Mobile Ad-hoc Networks (MANETs), Very High Frequency (VHF) civil
   aviation data links, etc.

   Many other use case examples for both SEAL-FS and SEAL-SR are
   anticipated, and will be identified as further experience is gained.


4.  SEAL with Segmentation and Reassembly (SEAL-SR) Protocol
    Specification

   This section specifies the fully-functioned mode of SEAL known as
   "SEAL with Segmentation and Reassembly (SEAL-SR)"; a minimal mode
   known as "SEAL with Fragmentation Sensing (SEAL-FS)" is specified in
   Section 5.  SEAL-SR is a superset of SEAL-FS, and differs only in its
   segmentation and reassembly requirements.  SEAL-SR and SEAL-FS are
   distinguished simply by a mode value in the SEAL header.  The
   following sections therefore specify SEAL-SR, but use the simple term
   "SEAL" since the same formats and mechanisms apply also to SEAL-FS.

4.1.  Model of Operation

   SEAL is an encapsulation sublayer that supports a multi-level
   segmentation and reassembly capability for the transmission of
   unicast and multicast packets across an underlying IP subnetwork with
   heterogeneous links.  First, the ITE can use IPv4 fragmentation to
   fragment inner IPv4 packets before SEAL encapsulation if necessary.
   Secondly, the SEAL layer itself provides a simple cutting-and-pasting
   capability for mid-layer packets to avoid IP fragmentation on the
   outer packet.  Finally, ordinary IP fragmentation is permitted on the
   outer packet after SEAL encapsulation and is used to detect and tune
   out any in-the-network fragmentation.

   SEAL-enabled ITEs segment each inner packet into multiple segments if
   necessary, then append a SEAL header and (if necessary) a UDP header
   to each segment.  The ITE then adds the outer IP encapsulation header
   to each segment.  For example, a single-segment inner IPv6 packet
   encapsulated in UDP/SEAL headers and an outer IPv4 header would
   appear as shown in Figure 1:













Templin                  Expires August 16, 2010               [Page 10]

Internet-Draft                    SEAL                     February 2010


   I                                   +--------------------+
   n                                   ~  outer IPv4 header ~
   n      +--------------------+       +--------------------+
   e      ~     UDP header     ~       ~     UDP header     ~
   r      +--------------------+       +--------------------+
          ~    SEAL header     ~       ~    SEAL header     ~
   I      +--------------------+       +--------------------+
   P      |                    |       |                    |
   v -->  ~     inner IPv6     ~  -->  ~     inner IPv6     ~
   6 -->  ~       Packet       ~  -->  ~       Packet       ~
          |                    |       |                    |
   P      +--------------------+       +--------------------+
   a
   c         Mid-layer packet             Outer IPv4 packet
   k      after UDP/SEAL encaps.         after outer encaps.
   e
   t

               Figure 1: SEAL Encapsulation - Single Segment

   In a second example, an inner IPv4 packet of length 'M' requiring
   three SEAL segments with segment length 'N' would appear as three
   separate outer IPv4 packets as shown in Figure 2:

   +------------------+   +------------------+   +------------------+
   ~  outer IPv4 hdr  ~   ~  outer IPv4 hdr  ~   ~  outer IPv4 hdr  ~
   +------------------+   +------------------+   +------------------+
   ~    UDP header    ~   ~    UDP header    ~   ~    UDP header    ~
   +------------------+   +------------------+   +------------------+
   ~ SEAL hdr (SEG=0) ~   ~ SEAL hdr (SEG=1) ~   ~ SEAL hdr (SEG=2) ~
   +------------------+   +------------------+   +------------------+
   |    inner IPv4    |   |    inner IPv4    |   |    inner IPv4    |
   ~  Packet Segment  ~   ~  Packet Segment  ~   ~  Packet Segment  ~
   | Bytes 0 to (N-1) |   | Bytes N to (2N-1)|   |   Bytes 2N to M  |
   +------------------+   +------------------+   +------------------+

             Figure 2: SEAL Encapsulation - Multiple Segments

   In all cases, after SEAL segmentation the SEAL header is inserted
   immediately before each segment of the inner packet.  When UDP
   encapsulation is used, the SEAL header in each segment is immediately
   preceded by a UDP header.  Next, each such resulting mid-layer packet
   is encapsulated in an outer IPvX header.  This implies that SEAL is
   not used with tunnel-mode IPsec [RFC4301], since tunnel-mode IPsec
   would place the {AH, ESP} header immediately before the outer IPvX
   header and with no intervening UDP/SEAL headers.  Instead, SEAL
   expects that inner packets that require IPsec coverage will use
   transport-mode IPsec.



Templin                  Expires August 16, 2010               [Page 11]

Internet-Draft                    SEAL                     February 2010


   SEAL-encapsulated packets include a SEAL_ID to uniquely identify each
   packet.  Routers within the subnetwork use the SEAL_ID for duplicate
   packet detection, and {ITEs; ETEs} use the SEAL_ID for SEAL
   segmentation/reassembly and protection against off-path attacks.  The
   following sections specify the SEAL header format and SEAL-related
   operations of the ITE and ETE, respectively.

4.2.  SEAL-SR Header Format (Mode 1)

   The SEAL mode 1 header (i.e., the SEAL-SR header) is formatted as
   follows:

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      | MODE|A|F|M|RSV|  NEXTHDR/SEG  |    SEAL_ID (bits 48 - 32)     |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                   SEAL_ID (bits 31 - 0)                       |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                    Figure 3: SEAL Mode 1 Header Format

   where the header fields are defined as:

   MODE (3)
      a 3-bit value that encodes the SEAL protocol mode.  This section
      describes Mode 1 of the SEAL protocol, i.e., the MODE field
      encodes the value 1.

   A (1)
      the "Acknowledgement Requested" bit.  Set to 1 if the ITE wishes
      to receive an explicit acknowledgement from the ETE.

   F (1)
      the "First Segment" bit.  Set to 1 if this SEAL protocol packet
      contains the first segment (i.e., Segment #0) of a mid-layer
      packet.

   M (1)
      the "More Segments" bit.  Set to 1 if this SEAL protocol packet
      contains a non-final segment of a multi-segment mid-layer packet.

   RSV (2)
      a 2-bit Reserved field.  Set to 0 for the purpose of this
      specification.






Templin                  Expires August 16, 2010               [Page 12]

Internet-Draft                    SEAL                     February 2010


   NEXTHDR/SEG (8)  an 8-bit field.  When 'F'=1, encodes the next header
      Internet Protocol number the same as for the IPv4 protocol and
      IPv6 next header fields.  When 'F'=0, encodes a segment number of
      a multi-segment mid-layer packet.  (The segment number 0 is
      reserved.)

   SEAL_ID (48)
      a 48-bit Identification field.

4.3.  ITE Specification

4.3.1.  Tunnel Interface MTU

   The ITE configures a tunnel virtual interface over one or more
   underlying links that connect the border node to the subnetwork.  The
   tunnel interface must present a fixed MTU to Layer 3 as the size for
   admission of inner packets into the tunnel.  Since the tunnel
   interface may support a large set of ETEs that accept widely varying
   maximum packet sizes, however, a number of factors should be taken
   into consideration when selecting a tunnel interface MTU.

   Due to the ubiquitous deployment of standard Ethernet and similar
   networking gear, the nominal Internet cell size has become 1500
   bytes; this is the de facto size that end systems have come to expect
   will either be delivered by the network without loss due to an MTU
   restriction on the path or a suitable ICMP Packet Too Big (PTB)
   message returned.  When the 1500 byte packets sent by end systems
   incur additional encapsulation at an ITE, however, they may be
   dropped silently since the network may not always deliver the
   necessary PTBs [RFC2923].

   The ITE should therefore set a tunnel virtual interface MTU of at
   least 1500 bytes plus extra room to accommodate any additional
   encapsulations that may occur on the path from the original source.
   The ITE can set larger MTU values still, but should select a value
   that is not so large as to cause excessive PTBs coming from within
   the tunnel interface (see Sections 4.3.3 and 4.3.8).  The ITE can
   also set smaller MTU values; however, care must be taken not to set
   so small a value that original sources would experience an MTU
   underflow.  In particular, IPv6 sources must see a minimum path MTU
   of 1280 bytes, and IPv4 sources should see a minimum path MTU of 576
   bytes.

   The ITE can alternatively set an indefinite MTU on the tunnel virtual
   interface such that all inner packets are admitted into the interface
   without regard to size.  For ITEs that host applications, this option
   must be carefully coordinated with protocol stack upper layers, since
   some upper layer protocols (e.g., TCP) derive their packet sizing



Templin                  Expires August 16, 2010               [Page 13]

Internet-Draft                    SEAL                     February 2010


   parameters from the MTU of the underlying interface and as such may
   select too large an initial size.  This is not a problem for upper
   layers that use conservative initial maximum segment size estimates
   and/or when the tunnel interface can reduce the upper layer's maximum
   segment size (e.g., the size advertised in the TCP MSS option) based
   on the per-neighbor MTU.

   In light of the above considerations, it is RECOMMENDED that the ITE
   configure an indefinite MTU on the tunnel virtual interface and
   handle any per-neighbor MTU mismatches within the tunnel virtual
   interface.

4.3.2.  Admitting Packets into the Tunnel Interface

   The inner network layer protocol consults the tunnel interface MTU
   when admitting a packet into the interface.  For inner IPv4 packets
   with the IPv4 Don't Fragment (DF) bit set to 0, if the packet is
   larger than the tunnel interface MTU the inner IP layer uses IP
   fragmentation to break the packet into fragments no larger than the
   tunnel interface MTU.  The ITE then admits each fragment into the
   tunnel as an independent packet.

   For all other inner packets, the ITE admits the packet if it is no
   larger than the tunnel interface MTU; otherwise, it drops the packet
   and sends a PTB error message to the source with the MTU value set to
   the tunnel interface MTU.  The message must contain as much of the
   invoking packet as possible without the entire message exceeding the
   minimum IP MTU (e.g., 576 bytes for IPv4, 1280 bytes for IPv6, etc.).

   Note that when the tunnel interface sets an indefinite MTU all
   packets are unconditionally admitted into the interface without
   fragmentation.

4.3.3.  Segmentation

   For each ETE, the ITE maintains soft state within the tunnel
   interface (e.g., in a neighbor cache) used to support inner
   fragmentation and SEAL segmentation.  The soft state includes the
   following:

   o  a Mid-layer Header Length (MHLEN); set to the length of the SEAL
      header plus the length of the UDP header if UDP encapsulation is
      used.

   o  an Outer Header Length (OHLEN); set to the length of the outer IP
      header.





Templin                  Expires August 16, 2010               [Page 14]

Internet-Draft                    SEAL                     February 2010


   o  a total Header Length (HLEN); set to MHLEN plus OHLEN.

   o  a SEAL Maximum Segment Size (S_MSS); initialized to a value that
      is no larger than the smallest MTU among the underlying IP
      interfaces.  The ITE decreases or increases S_MSS based on any
      SEAL Control Message Protocol (SCMP) Fragmentation Report messages
      received (see Section 4.3.9).

   o  a SEAL Maximum Reassembly Unit (S_MRU); initialized to "infinity",
      i.e., the largest-possible inner IP packet size.  The ITE
      decreases or increases S_MRU based on any Packet Too Big messages
      received (see Section 4.3.9).  When (S_MRU>((S_MSS-HLEN)*256))),
      the ITE uses ((S_MSS-HLEN)*256) as the effective S_MRU value.

   Note that here as well as in the SEAL control message protocol (see
   Section 4.4.5), S_MSS and S_MRU are maintained as 32-bit values
   specifically for the purpose of supporting IPv6 jumbograms.  In that
   case, the length of the inner IPv6 packet is determined through
   examining the Jumbo Payload Option [RFC2675].

   After an inner packet/fragment has been admitted into the tunnel
   interface the ITE uses the following algorithm to determine whether
   the packet can be accommodated and (if so) whether (further) inner IP
   fragmentation is needed:

   o  if the inner packet is an IPv6 packet or an IPv4 packet with DF=1,
      and the packet is larger than S_MRU, the ITE drops the packet and
      sends a PTB message to the original source with an MTU value of
      S_MRU the same as described in Section 4.3.2; else,

   o  if the inner packet is an IPv4 packet with DF=0, and the packet is
      larger than MIN(S_MRU, (S_MSS - HLEN)), the ITE uses inner IPv4
      fragmentation to break the packet into fragments no larger than
      MIN(S_MRU, (S_MSS - HLEN)); else,

   o  if the inner packet is a non-IP protocol packet, packet sizing
      considerations specific to the inner protocol are observed; else,

   o  the ITE processes the packet without inner fragmentation.

   (Note that in the above the ITE must also track whether the tunnel
   interface is using header compression on the inner headers.  If so,
   the ITE must include the length of the uncompressed inner headers
   when calculating the total length of the inner packet.)

   The ITE next performs SEAL segmentation on each inner packet/fragment
   if necessary.  If the length of the inner packet/fragment plus the
   length of the mid-layer and outer headers (i.e., HLEN) is greater



Templin                  Expires August 16, 2010               [Page 15]

Internet-Draft                    SEAL                     February 2010


   than S_MSS, the ITE must first perform SEAL segmentation.  To do so,
   it breaks the inner packet into N segments (N <= 256) that are no
   larger than (S_MSS - HLEN) bytes each.  Each segment, except the
   final one, MUST be of equal length.  The first byte of each segment
   MUST begin immediately after the final byte of the previous segment,
   i.e., the segments MUST NOT overlap.  The ITE SHOULD generate the
   smallest number of segments possible, e.g., it SHOULD NOT generate 6
   smaller segments when the packet could be accommodated with 4 larger
   segments.

   Note that this SEAL segmentation ignores the fact that the inner
   packet may be unfragmentable outside of the subnetwork.  This
   segmentation process is a mid-layer (not an IP layer) operation
   employed by the ITE to adapt the mid-layer packet to the subnetwork
   path characteristics, and the ETE will restore the packet to its
   original form during reassembly.  Therefore, the fact that the packet
   may have been segmented within the subnetwork is not observable
   outside of the subnetwork.

4.3.4.  Encapsulation

   Following SEAL segmentation, the ITE encapsulates each segment in a
   SEAL header formatted as specified in Section 4.3.2 with MODE=1,
   RSV=0.  For the first segment, the ITE sets F=1, then sets NEXTHDR to
   the Internet Protocol number of the encapsulated inner packet, and
   finally sets M=1 if there are more segments or sets M=0 otherwise.
   For each non-initial segment of an N-segment inner packet (N <= 256),
   the ITE sets (F=0; M=1; SEG=1) in the SEAL header of the first non-
   initial segment, sets (F=0; M=1; SEG=2) in the next non-initial
   segment, etc., and sets (F=0; M=0; SEG=N-1) in the final segment.
   (Note that the value SEG=0 is not used, since the initial segment
   encodes a NEXTHDR value and not a SEG value.)

   The ITE next encapsulates each segment in the requisite outer and
   mid-layer headers according to the specific encapsulation format
   (e.g., [RFC2003], [RFC2473], [RFC4213], [RFC4380], etc.), except that
   it writes 'SEAL_PROTO' in the protocol field of the outer IP header
   (when simple IP encapsulation is used) or writes 'SEAL_PORT' in the
   outer destination service port field (e.g., when IP/UDP encapsulation
   is used).  The ITE finally sets the A bit as specified in Section
   4.3.5, sets the packet identification values as specified in Section
   4.3.6 and sends the packets as specified in Section 4.3.7.

4.3.5.  Probing Strategy and Information Exchanges

   All SEAL encapsulated packets sent by the ITE are considered implicit
   probes, and will elicit SCMP Fragmentation Report messages from the
   ETE (see: Section 4.4.5) with a new value for S_MSS if any IP



Templin                  Expires August 16, 2010               [Page 16]

Internet-Draft                    SEAL                     February 2010


   fragmentation occurs in the path.  Thereafter, the ITE can
   periodically reset S_MSS to a larger value (e.g., the underlying IP
   interface MTU minus OHLEN bytes) to detect path MTU increases.

   The ITE should also send explicit probes, periodically, to verify
   that the ETE is still reachable and to manage a window of SEAL_IDs.
   The ITE sets A=1 in the SEAL header of a segment to be used as an
   explicit probe, where the probe can be either an ordinary data packet
   or a NULL packet created by setting the 'Next Header' field to a
   value of "No Next Header" (see Section 4.7 of [RFC2460]).  The probe
   will elicit an "Segment Acknowledged" message from the ETE as an
   acknowledgement.  Finally, the ITE MAY send "expendable" outer IP
   probe packets (see Section 4.3.7) as explicit probes in order to
   generate PTB messages from routers on the path to the ETE.

   In all cases, the ITE MUST be conservative in its use of the A bit in
   order to limit the resultant control message overhead.

4.3.6.  Packet Identification

   The ITE maintains a randomly-initialized 48-bit SEAL_ID value as per-
   ETE soft state (e.g., in the neighbor cache) and monotonically
   increments it for each successive SEAL protocol packet it sends to
   the ETE.  For each successive SEAL protocol packet, the ITE writes
   the current SEAL_ID value into the header field of the same name in
   the SEAL header.

4.3.7.  Sending SEAL Protocol Packets

   Following SEAL segmentation and encapsulation, the ITE sets DF=0 in
   the header of each outer IPv4 packet to ensure that they will be
   delivered to the ETE even if they are fragmented within the
   subnetwork.  (The ITE can instead set DF=1 for "expendable" outer
   IPv4 packets (e.g., for NULL packets used as probes -- see Section
   4.3.5), but these may be lost due to an MTU restriction).  For outer
   IPv6 packets, the "DF" bit is always implicitly set to 1; hence, they
   will not be fragmented within the subnetwork.

   The ITE sends each outer packet that encapsulates a segment of the
   same mid-layer packet into the tunnel in canonical order, i.e.,
   segment 0 first, followed by segment 1, etc., and finally segment
   N-1.

4.3.8.  Processing Raw ICMP Messages

   The ITE may receive "raw" ICMP error messages [RFC0792][RFC4443] from
   either the ETE or routers within the subnetwork that comprise an
   outer IP header, followed by an ICMP header, followed by a portion of



Templin                  Expires August 16, 2010               [Page 17]

Internet-Draft                    SEAL                     February 2010


   the SEAL packet that generated the error (also known as the "packet-
   in-error").  The ITE can use the SEAL_ID encoded in the packet-in-
   error as a nonce to confirm that the ICMP message came from either
   the ETE or an on-path router, and can use any additional information
   to determine whether to accept or discard the message.

   The ITE should specifically process raw ICMPv4 Protocol Unreachable
   messages and ICMPv6 Parameter Problem messages with Code
   "Unrecognized Next Header type encountered" as a hint that the ETE
   does not implement the SEAL protocol; specific actions that the ITE
   may take in this case are out of scope.

4.3.9.  Processing SEAL Control Message Protocol (SCMP) Messages

   In addition to any raw ICMP messages, the ITE may receive SEAL
   Control Message Protocol (SCMP) messages from the ETE as specified in
   Section 4.4.5.  These SCMP messages are identical to the ICMPv6
   messages specified in [RFC4443][RFC4191][RFC4861] and other IPv6
   specifications.  In order to detect off-path spoofing attempts, the
   ITE maintains a window of outstanding SEAL_IDs of packets that it has
   sent recently.  (The window may be maintained as a sliding time-based
   window or in some other manner specific to the implementation.)

   For each SCMP message, the ITE first verifies that the SEAL_ID in the
   packet-in-error is within the current window of transmitted SEAL_IDs
   for this ETE and also verifies that the checksum in the message is
   correct.  If the SEAL_ID is outside of the window and/or the checksum
   is incorrect, the ITE discards the message; otherwise, it processes
   the message the same as for ordinary ICMPv6 messages.

   In addition to the currently-defined ICMPv6 message types, SEAL adds
   two new ICMPv6 message types (see: Section 4.4.5) which the ITE
   processes as follows:

4.3.9.1.  Segment Acknowledged

   When the ITE sends SEAL a packet with the A bit set to 1 (see:
   Section 4.3.5), it may receive a "Segment Acknowledged" SCMP message
   from the ETE as an explicit acknowledgement that the ETE received the
   packet.  The ITE uses this message to determine whether the ETE is
   still reachable, whether packets of a certain size are being
   delivered without loss due to an MTU restriction, etc.

4.3.9.2.  Fragmentation Report

   When the ITE sends a SEAL data packet with DF=0 in the outer IPv4
   header, the packet may be fragmented in the network on the path to
   the ETE.  In that case, the ETE will return an SCMP "Fragmentation



Templin                  Expires August 16, 2010               [Page 18]

Internet-Draft                    SEAL                     February 2010


   Report" message.

   When the ITE receives a Fragmentation Report message, it records the
   value in the S_MRU field in its soft state for this ETE.  The ITE
   then adjusts the S_MSS value in its soft state.  If the S_MSS value
   in the Fragmentation Report message is greater than 576 (i.e., the
   nominal minimum MTU for IPv4 links), the ITE records this new value
   in its soft state.  If the S_MSS value in the message is less than
   the current soft state value and also less than 576, the ITE can
   discern that IP fragmentation is occurring but it cannot determine
   the true MTU of the restricting link due to a router on the path
   generating runt first fragments.

   The ITE should therefore search for a reduced S_MSS value through an
   iterative searching strategy that parallels (Section 5 of [RFC1191]).
   This searching strategy may require multiple iterations of sending
   SEAL data packets using a reduced S_MSS and receiving additional
   Fragmentation Report messages, but it will soon converge to a stable
   value.  During this process, it is essential that the ITE reduce
   S_MSS based on the first Fragmentation Report message received, and
   refrain from further reducing S_MSS until Fragmentation Report
   messages pertaining to packets sent under the new S_MSS are received.

4.4.  ETE Specification

4.4.1.  Reassembly Buffer Requirements

   ETEs MUST be capable of performing IP-layer reassembly for SEAL
   protocol IP packets of at least 2KB in length, and MUST also be
   capable of performing SEAL-layer reassembly for inner packets of at
   least (2KB -HLEN).  Hence, ETEs:

   o  MUST configure an outer IP reassembly buffer size of at least 2KB

   o  MUST configure a SEAL layer reassembly buffer size (i.e., SEAL
      Maximum Reassembly Unit (S_MRU)) of at least 2KB-HLEN

   o  MUST be capable of discarding SEAL packets that are larger than
      S_MRU

   The ETE can also maintain S_MRU as a per-ITE value that can be
   reduced if the current value becomes to too large, e.g., based on
   excessive reassembly timeouts.  If so, the ETE SHOULD ensure that the
   per-ITE S_MRU converges to a stable value as quickly as possible.

   Note that the ETE must retain the outer IP, SEAL and other outer
   headers during both IP-layer and SEAL-layer reassembly for the
   purpose of associating the fragments/segments of the same packet.



Templin                  Expires August 16, 2010               [Page 19]

Internet-Draft                    SEAL                     February 2010


4.4.2.  IP-Layer Reassembly

   ETEs perform standard IP-layer reassembly for SEAL protocol IP
   fragments, and should maintain a conservative reassembly cache high-
   and low-water mark.  When the size of the reassembly cache exceeds
   this high-water mark, the ETE should actively discard incomplete
   reassemblies (e.g., using an Active Queue Management (AQM) strategy)
   until the size falls below the low-water mark.  The ETE should also
   actively discard any pending reassemblies that clearly have no
   opportunity for completion, e.g., when a considerable number of new
   fragments have been received before a fragment that completes a
   pending reassembly has arrived.

   When the ETE processes the IP first fragment (i.e., one with MF=1 and
   Offset=0 in the IP header) of a fragmented SEAL packet, it sends an
   SCMP Fragmentation Report message back to the ITE with the S_MSS
   field set to the length of the first fragment and with the S_MRU
   field set to no more than the size of the SEAL layer reassembly
   buffer (see Section 4.4.5).

4.4.3.  SEAL-Layer Reassembly

   Following IP reassembly of a SEAL segment, the ETE adds the segment
   to a SEAL-Layer pending-reassembly queue according to the (Source,
   Destination, SEAL_ID)-tuple found in the outer IP and SEAL headers.
   The ETE performs SEAL-layer reassembly through simple in-order
   concatenation of the encapsulated segments of the same mid-layer
   packet from N consecutive SEAL packets.  SEAL-layer reassembly
   requires the ETE to maintain a cache of recently received segments
   for a hold time that would allow for nominal inter-segment delays.
   When a SEAL reassembly times out, the ETE discards the incomplete
   reassembly and returns an SCMP "Time Exceeded" message to the ITE
   (see Section 4.4.5).  As for IP-layer reassembly, the ETE should also
   maintain a conservative reassembly cache high- and low-water mark and
   should actively discard any pending reassemblies that clearly have no
   opportunity for completion, e.g., when a considerable number of new
   SEAL packets have been received before a packet that completes a
   pending reassembly has arrived.

   When the ETE receives a SEAL packet with an incorrect value in the
   SEAL header, it discards the packet and returns an SCMP "Parameter
   Problem" message (see Section 4.4.5).  If the ETE receives a SEAL
   packet for which a segment with the same (Source, Destination,
   SEAL_ID)-tuple is already in the queue, it must determine whether to
   accept the new segment and release the old, or drop the new segment.
   If accepting the new segment would cause an inconsistency with other
   segments already in the queue (e.g., differing segment lengths), the
   ETE drops the segment that is least likely to complete the



Templin                  Expires August 16, 2010               [Page 20]

Internet-Draft                    SEAL                     February 2010


   reassembly.

   After all segments are gathered, the ETE reassembles the mid-layer
   packet by discarding the outer and mid-layer headers and
   concatenating the segments encapsulated in the N consecutive SEAL
   packets beginning with the initial segment (i.e., SEG=0) and followed
   by any non-initial segments 1 through N-1.  That is, for an N-segment
   mid-layer packet, reassembly entails the concatenation of the SEAL-
   encapsulated packet segments with (F=1, M=1, SEAL_ID=j) in the first
   SEAL header, followed by (F=0, M=1, SEG=1, SEAL_ID=(j+1)) in the next
   SEAL header, followed by (F=0, M=1, SEG=2, SEAL_ID=(j+2)), etc., up
   to (F=0, M=0, SEG=(N-1), SEAL_ID=(j + N-1)) in the final SEAL header.
   (Note that modulo arithmetic based on the length of the SEAL_ID field
   is used).

4.4.4.  Decapsulation and Delivery to Upper Layers

   Following IP- and SEAL-layer reassembly, if the reassembled SEAL
   packet is larger than S_MRU, the ETE discards the packet and sends a
   "Packet Too Big" message with the S_MRU field set to the maximum-
   sized inner packet it is willing to accept from this ITE (see Section
   4.4.5).

   Next, the ETE discards the encapsulating headers, and delivers the
   inner packet to the upper-layer protocol indicated in the SEAL Next
   Header field.  The ETE instead silently discards the inner packet if
   it was a NULL packet (see Section 4.3.4).

4.4.5.  The SEAL Control Message Protocol (SCMP)

   SEAL provides a SEAL Control Message Protocol (SCMP) that is
   identical in nearly all respects to the Internet Control Message
   Protocol for IPv6 (ICMPv6).  In particular, SCMP supports the same
   ICMPv6 messages specified in [RFC4443][RFC4191][RFC4861] and other
   IPv6 specifications in exactly the same format as specified in those
   documents.  An ETE sends SCMP messages in response to certain SEAL
   data and SCMP messages it receives from the ITE.  An ITE sends SCMP
   messages whenever it needs to inform the ETE of new information,
   e.g., new routing information.  The SCMP message body is formatted
   the same as for ICMPv6 [RFC4443] messages, i.e., as shown in
   Figure 4:










Templin                  Expires August 16, 2010               [Page 21]

Internet-Draft                    SEAL                     February 2010


       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     Type      |     Code      |          Checksum             |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                                                               |
      +                         Message Body                          +
      |                                                               |

                   Figure 4: SEAL Control Message Format

   As for ICMPv4 and ICMPv6 messages, the {ITE, ETE} prepares the
   message beginning with 8-bit Type and Code fields followed by a 16-
   bit Checksum field followed by the message body.  When the outer IP
   protocol is IPv4, the Checksum is calculated exactly the same as
   specified for ICMPv4 messages in [RFC0792], i.e., the checksum does
   not include a pseudo-header of the outer IPv4 header.  When the outer
   IP protocol is IPv6, the Checksum is calculated exactly the same as
   specified in Section 2.3 of [RFC4443], i.e., the checksum includes a
   pseudo-header of the outer IPv6 header.

   The {ITE, ETE} prepares the SCMP message body exactly as specified
   for ICMPv6 messages in their respective specifications.  However,
   when the {ITE, ETE} includes the leading portion of the SEAL packet
   that triggered the SCMP message, it MUST include as much of the SEAL
   packet as possible without the total size of the SCMP message
   exceeding 576 bytes.  The {ITE, ETE} then encapsulates the SCMP
   message body in an outer IP header, UDP header (if necessary) and
   SEAL header the same as for the encapsulation of an ordinary inner IP
   packet (see Section 4.3).

   During encapsulation, the {ITE, ETE} sets the outer IP destination
   and source addresses of the SCMP message to the source and
   destination addresses (respectively) of the invoking SEAL packet.  If
   the destination address in the SEAL packet was multicast, the {ITE,
   ETE} instead sets the outer IP source address of the SCMP message to
   an address assigned to the underlying IP interface.  The {ITE, ETE}
   finally sets the NEXTHDR field in the SCMP message SEAL header to the
   value '58', i.e., the official IANA protocol number for the ICMPv6
   protocol.

   In addition to the ICMPv6 message types already specified in existing
   Internet standards, SEAL adds the following additional SCMP message
   types:







Templin                  Expires August 16, 2010               [Page 22]

Internet-Draft                    SEAL                     February 2010


4.4.5.1.  Segment Acknowledged

   When an ETE receives a SEAL segment following IP reassembly that has
   the 'A' bit set in the SEAL header, it prepares a "Segment
   Acknowledged" message with Type=TBD and Code=0.  The message body is
   formatted as follows:

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |    Type=TBD   |     Code=0    |            Checksum           |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                             S_MRU                             |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                   As much of invoking packet                  |
      ~                as possible without the message                ~
      |                       exceeding 576 bytes                     |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

               Figure 5: Segment Acknowledged Message Format

   The ETE writes the maximum-sized inner packet it is willing to
   receive from this ITE in a 32-bit S_MRU field.  The ETE then writes
   as much of the invoking packet in the reassembly buffer as possible
   at the end of the message body, adds the encapsulating headers, and
   sends the message to the ITE.

4.4.5.2.  Fragmentation Report

   When an ETE receives an IP first fragment of a SEAL segment that
   experienced outer IP fragmentation, it uses the IP first fragment to
   prepare a "Fragmentation Report" message with Type=TBD and Code=0.
   The message body is formatted as follows:


















Templin                  Expires August 16, 2010               [Page 23]

Internet-Draft                    SEAL                     February 2010


       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |    Type=TBD   |     Code=0    |            Checksum           |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                             S_MRU                             |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                             S_MSS                             |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                    As much of invoking packet                 |
      ~                as possible without the message                ~
      |                       exceeding 576 bytes                     |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

           Figure 6: IP Fragmentation Experienced Message Format

   The ETE writes the maximum-sized inner packet it is willing to
   receive from this ITE in the S_MRU field then writes the length of
   the first IP fragment in the S_MSS field.  The ETE then writes as
   much of the invoking packet as possible at the end of the message
   body, adds the encapsulating headers, and sends the message to the
   ITE.


5.  SEAL with Fragmentation Sensing (SEAL-FS) Protocol Specification

   This section specifies a minimal mode of SEAL known as "SEAL with
   Fragmentation Sensing (SEAL-FS)".  SEAL-FS observes the same protocol
   specifications as for "SEAL with Segmentation and Reassembly
   (SEAL-SR)" (see Section 4) except that the ETE unilaterally drops any
   SEAL-FS packets that arrive as multiple IP fragments and/or multiple
   SEAL segments.

   SEAL-FS can be considered for use by associated tunneling protocol
   specifications when there is operational assurance that "marginal"
   links are rare, e.g., when it is known that the vast majority of
   links configure MTUs that are appreciably larger than a constant
   value 'M' (e.g., 1500 bytes).  SEAL-FS can also be used in instances
   when it is acceptable for the ITE to return PTB messages for packet
   sizes smaller than 'M', however SEAL-SR should be used instead if
   excessive PTB messages would result.

   With respect to Section 4, the SEAL-FS protocol corresponds to
   SEAL-SR as follows:







Templin                  Expires August 16, 2010               [Page 24]

Internet-Draft                    SEAL                     February 2010


5.1.  Model of Operation

   SEAL-FS follows the same model of operation as for SEAL-SR as
   described in Section 4.1 except as noted in the following sections.

5.2.  SEAL-FS Header Format (Version 0)

   The SEAL-FS header is formatted as follows:

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      | MODE|A|  RSV  |    NEXTHDR    |     SEAL_ID (bits 47 - 32)    |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                   SEAL_ID (bits 31 - 0)                       |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                  Figure 7: SEAL Version 1 Header Format

   where the header fields are defined as:

   MODE (3)
      a 3-bit value that encodes the SEAL protocol mode.  This section
      describes Mode 0 of the SEAL protocol, i.e., the MODE field
      encodes the value '0'.

   A (1)
      the "Acknowledgement Requested" bit.  Set to 1 if the ITE wishes
      to receive an explicit acknowledgement from the ETE.

   RSV (4)
      a 4-bit Reserved field.  Set to 0 for the purpose of this
      specification.

   NEXTHDR (8)
      an 8-bit field that encodes the next header Internet Protocol
      number the same as for the IPv4 protocol and IPv6 next header
      fields.

   SEAL_ID (48)
      a 48-bit Identification field.

5.3.  ITE Specification

5.3.1.  Tunnel Interface MTU

   SEAL-FS observes the SEAL-SR specification found in Section 4.3.1.




Templin                  Expires August 16, 2010               [Page 25]

Internet-Draft                    SEAL                     February 2010


5.3.2.  Admitting Packets into the Tunnel Interface

   SEAL-FS observes the SEAL-SR specification found in Section 4.3.2.

5.3.3.  Segmentation

   SEAL-FS observes the SEAL-SR specification found in Section 4.3.3,
   except that the inner fragmentation algorithm is adjusted to avoid
   all outer IP fragmentation and SEAL segmentation within the tunnel.
   For this purpose, the SEAL-FS ITE maintains S_MSS as a value that
   would be unlikely to incur fragmentation within the tunnel, e.g., 576
   bytes for IPv4 and 1280 bytes for IPv6.  The ITE may also set S_MSS
   to a larger value if there is assurance that the vast majority of
   links that may occur within the tunnel configure a larger MTU, and/or
   may use explicit probes (e.g., dummy packets with the 'A' bit set in
   the SEAL header) to dynamically discover a larger S_MSS value.

   The ITE uses S_MRU and S_MSS in the following algorithm to determine
   when to discard, fragment or admit the inner packets into the tunnel
   without inner fragmentation:

   o  if the inner packet is an IPv6 packet or an IPv4 packet with DF=1,
      and the packet is larger than MIN(S_MRU, (S_MSS - HLEN)), the ITE
      drops the packet and sends a PTB message to the original source
      with an MTU value of MIN(S_MRU, (S_MSS - HLEN)) the same as
      described in Section 4.3.2; else,

   o  if the inner packet is an IPv4 packet with DF=0, and the packet is
      larger than MIN(S_MRU, (S_MSS - HLEN)), the ITE uses inner IPv4
      fragmentation to break the packet into fragments no larger than
      MIN(S_MRU - (S_MSS - HLEN)); else,

   o  the ITE admits the packet without inner fragmentation.

   If the inner packet is an IPv6 packet or an IPv4 packet with DF=1,
   the ITE can instead employ a stateless strategy by simply
   encapsulating and sending the packet as specified in Section 4.3.4
   through 4.3.7.  The ITE then translates any SCMP "Fragmentation
   Needed" and "Packet Too big" messages into PTB messages to return to
   the original source (where the translation is based on the
   encapsulated portion of the invoking packet at the end of the SCMP
   message).  In this method, the ITE need not retain per-ETE S_MRU and
   S_MSS state.

5.3.4.  Encapsulation

   SEAL-FS observes the SEAL-SR specification found in Section 4.3.4,
   except that it uses the header format defined in this section and



Templin                  Expires August 16, 2010               [Page 26]

Internet-Draft                    SEAL                     February 2010


   with the MODE field set to '0'.  SEAL-FS uses the C, A and I bits the
   same as specified for SEAL-SR.

5.3.5.  Probing Strategy

   SEAL-FS observes the SEAL-SR specification found in Section 4.3.5.

5.3.6.  Packet Identification

   SEAL-FS observes the SEAL-SR soft state specifications found in
   Section 4.3.6.

5.3.7.  Sending SEAL Protocol Packets

   SEAL-FS observes the SEAL-SR specification found in Section 4.3.7.

5.3.8.  Processing Raw ICMP Messages

   SEAL-FS observes the SEAL-SR specification found in Section 4.3.8.

5.3.9.  Processing SEAL Control Message Protocol (SCMP) Messages

   SEAL-FS observes the SEAL-SR specification found in Section 4.3.9.

5.4.  ETE Specification

5.4.1.  Reassembly Buffer Requirements

   SEAL-FS does not maintain a reassembly buffer for SEAL reassembly,
   but still maintains a value for S_MRU as the largest packet size the
   ETE is willing to receive.

5.4.2.  IP-Layer Reassembly

   SEAL-FS uses SEAL-protocol IP first fragments solely for the purpose
   of generating SCMP Fragmentation Report messages as specified in
   Section 4.4.2, but otherwise discards all SEAL-protocol packets that
   arrived as multiple IP fragments.

5.4.3.  SEAL-Layer Reassembly

   SEAL-FS does not observe the SEAL-SR reassembly procedures in Section
   4.4.3, since SEAL-FS headers contain no segmentation and reassembly
   information.

   As for SEAL-SR, SEAL-FS returns a Parameter Problem for SEAL packets
   with unrecognized values in the SEAL header.




Templin                  Expires August 16, 2010               [Page 27]

Internet-Draft                    SEAL                     February 2010


5.4.4.  Decapsulation and Delivery to Upper Layers

   SEAL-FS observes the SEAL-SR specification found in Section 4.4.4.

5.4.5.  Sending SEAL Control Message Protocol (SCMP) Messages

   SEAL-FS observes the SEAL-SR specification found in Section 4.4.5.


6.  Link Requirements

   Subnetwork designers are expected to follow the recommendations in
   Section 2 of [RFC3819] when configuring link MTUs.


7.  End System Requirements

   SEAL provides robust mechanisms for returning PTB messages; however,
   end systems that send unfragmentable IP packets larger than 1500
   bytes are strongly encouraged to use Packetization Layer Path MTU
   Discovery per [RFC4821].


8.  Router Requirements

   IPv4 routers within the subnetwork are strongly encouraged to
   implement IPv4 fragmentation such that the first fragment is the
   largest and approximately the size of the underlying link MTU, i.e.,
   they should avoid generating runt first fragments.


9.  IANA Considerations

   The IANA is instructed to allocate an IP protocol number for
   'SEAL_PROTO' in the 'protocol-numbers' registry.

   The IANA is instructed to allocate a Well-Known Port number for
   'SEAL_PORT' in the 'port-numbers' registry.

   The IANA is instructed to allocate new ICMPv6 Type values in the
   "icmpv6-parameters" registry for the SCMP "Segment Acknowledged" and
   "Fragmentation Report" messages specified in Section 4.4.5

   The IANA is instructed to establish a "SEAL Protocol" registry to
   record SEAL Mode values.  This registry should be initialized to
   include the Mode values defined in Sections 4.2 and 5.2, and the Code
   and Type values defined in Section 4.4.5.




Templin                  Expires August 16, 2010               [Page 28]

Internet-Draft                    SEAL                     February 2010


10.  Security Considerations

   Unlike IPv4 fragmentation, overlapping fragment attacks are not
   possible due to the requirement that SEAL segments be non-
   overlapping.  This condition is naturally enforced due to the fact
   that each consecutive SEAL segment begins at offset 0 wrt the
   previous SEAL segment.

   An amplification/reflection attack is possible when an attacker sends
   IP first fragments with spoofed source addresses to an ETE, resulting
   in a stream of SCMP messages returned to a victim ITE.  The SEAL_ID
   in the encapsulated segment of the spoofed IP first fragment provides
   mitigation for the ITE to detect and discard spurious SCMP messages.

   The SEAL header is sent in-the-clear (outside of any IPsec/ESP
   encapsulations) the same as for the outer IP and other outer headers.
   In this respect, the threat model is no different than for IPv6
   extension headers.  As for IPv6 extension headers, the SEAL header is
   protected only by L2 integrity checks and is not covered under any L3
   integrity checks.

   SEAL control messages carry the SEAL_ID of the packet-in-error.
   Therefore, when an ITE receives a SEAL control message it can
   unambiguously associate the message with the data packet that
   triggered the error.

   Security issues that apply to tunneling in general are discussed in
   [I-D.ietf-v6ops-tunnel-security-concerns].


11.  Related Work

   Section 3.1.7 of [RFC2764] provides a high-level sketch for
   supporting large tunnel MTUs via a tunnel-level segmentation and
   reassembly capability to avoid IP level fragmentation, which is in
   part the same approach used by tunnel-mode SEAL.  SEAL could
   therefore be considered as a fully functioned manifestation of the
   method postulated by that informational reference.

   Section 3 of [RFC4459] describes inner and outer fragmentation at the
   tunnel endpoints as alternatives for accommodating the tunnel MTU;
   however, the SEAL protocol specifies a mid-layer segmentation and
   reassembly capability that is distinct from both inner and outer
   fragmentation.

   Section 4 of [RFC2460] specifies a method for inserting and
   processing extension headers between the base IPv6 header and
   transport layer protocol data.  The SEAL header is inserted and



Templin                  Expires August 16, 2010               [Page 29]

Internet-Draft                    SEAL                     February 2010


   processed in exactly the same manner.

   The concepts of path MTU determination through the report of
   fragmentation and extending the IP Identification field were first
   proposed in deliberations of the TCP-IP mailing list and the Path MTU
   Discovery Working Group (MTUDWG) during the late 1980's and early
   1990's.  SEAL supports a report fragmentation capability using bits
   in an extension header (the original proposal used a spare bit in the
   IP header) and supports ID extension through a 16-bit field in an
   extension header (the original proposal used a new IP option).  A
   historical analysis of the evolution of these concepts, as well as
   the development of the eventual path MTU discovery mechanism for IP,
   appears in Appendix D of this document.


12.  SEAL Advantages over Classical Methods

   The SEAL approach offers a number of distinct advantages over the
   classical path MTU discovery methods [RFC1191] [RFC1981]:

   1.  Classical path MTU discovery always results in packet loss when
       an MTU restriction is encountered.  Using SEAL, IP fragmentation
       provides a short-term interim mechanism for ensuring that packets
       are delivered while SEAL adjusts its packet sizing parameters.

   2.  Classical path MTU may require several iterations of dropping
       packets and returning PTB messages until an acceptable path MTU
       value is determined.  Under normal circumstances, SEAL determines
       the correct packet sizing parameters in a single iteration.

   3.  Using SEAL, ordinary packets serve as implicit probes without
       exposing data to unnecessary loss.  SEAL also provides an
       explicit probing mode not available in the classic methods.

   4.  Using SEAL, ETEs encapsulate error messages in an outer UDP/IP
       header such that packet-filtering network middleboxes will not
       filter them the same as for "raw" ICMP messages that may be
       generated by an attacker.

   5.  The SEAL approach ensures that the tunnel either delivers or
       deterministically drops packets according to their size, which is
       a required characteristic of any IP link.

   6.  Most importantly, all SEAL packets have an Identification field
       that is sufficiently long to be used for duplicate packet
       detection purposes and to match ICMP error messages with actual
       packets sent without requiring per-packet state; hence, SEAL
       avoids certain denial-of-service attack vectors open to the



Templin                  Expires August 16, 2010               [Page 30]

Internet-Draft                    SEAL                     February 2010


       classical methods.


13.  Acknowledgments

   The following individuals are acknowledged for helpful comments and
   suggestions: Jari Arkko, Fred Baker, Iljitsch van Beijnum, Oliver
   Bonaventure, Teco Boot, Bob Braden, Brian Carpenter, Steve Casner,
   Ian Chakeres, Noel Chiappa, Remi Denis-Courmont, Aurnaud Ebalard,
   Gorry Fairhurst, Dino Farinacci, Joel Halpern, Sam Hartman, John
   Heffner, Thomas Henderson, Bob Hinden, Christian Huitema, Eliot Lear,
   Darrel Lewis, Joe Macker, Matt Mathis, Erik Nordmark, Dan Romascanu,
   Dave Thaler, Joe Touch, Margaret Wasserman, Magnus Westerlund, Robin
   Whittle, James Woodyatt, and members of the Boeing Research &
   Technology NST DC&NT group.

   Path MTU determination through the report of fragmentation was first
   proposed by Charles Lynn on the TCP-IP mailing list in 1987.
   Extending the IP identification field was first proposed by Steve
   Deering on the MTUDWG mailing list in 1989.


14.  References

14.1.  Normative References

   [RFC0791]  Postel, J., "Internet Protocol", STD 5, RFC 791,
              September 1981.

   [RFC0792]  Postel, J., "Internet Control Message Protocol", STD 5,
              RFC 792, September 1981.

   [RFC1146]  Zweig, J. and C. Partridge, "TCP alternate checksum
              options", RFC 1146, March 1990.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2460]  Deering, S. and R. Hinden, "Internet Protocol, Version 6
              (IPv6) Specification", RFC 2460, December 1998.

   [RFC4443]  Conta, A., Deering, S., and M. Gupta, "Internet Control
              Message Protocol (ICMPv6) for the Internet Protocol
              Version 6 (IPv6) Specification", RFC 4443, March 2006.







Templin                  Expires August 16, 2010               [Page 31]

Internet-Draft                    SEAL                     February 2010


14.2.  Informative References

   [FOLK]     C, C., D, D., and k. k, "Beyond Folklore: Observations on
              Fragmented Traffic", December 2002.

   [FRAG]     Kent, C. and J. Mogul, "Fragmentation Considered Harmful",
              October 1987.

   [I-D.ietf-lisp]
              Farinacci, D., Fuller, V., Meyer, D., and D. Lewis,
              "Locator/ID Separation Protocol (LISP)",
              draft-ietf-lisp-06 (work in progress), January 2010.

   [I-D.ietf-tcpm-icmp-attacks]
              Gont, F., "ICMP attacks against TCP",
              draft-ietf-tcpm-icmp-attacks-10 (work in progress),
              January 2010.

   [I-D.ietf-v6ops-tunnel-security-concerns]
              Hoagland, J., Krishnan, S., and D. Thaler, "Security
              Concerns With IP Tunneling",
              draft-ietf-v6ops-tunnel-security-concerns-01 (work in
              progress), October 2008.

   [I-D.russert-rangers]
              Russert, S., Fleischman, E., and F. Templin, "RANGER
              Scenarios", draft-russert-rangers-01 (work in progress),
              September 2009.

   [I-D.templin-intarea-vet]
              Templin, F., "Virtual Enterprise Traversal (VET)",
              draft-templin-intarea-vet-09 (work in progress),
              February 2010.

   [I-D.templin-ranger]
              Templin, F., "Routing and Addressing in Next-Generation
              EnteRprises (RANGER)", draft-templin-ranger-09 (work in
              progress), October 2009.

   [MTUDWG]   "IETF MTU Discovery Working Group mailing list,
              gatekeeper.dec.com/pub/DEC/WRL/mogul/mtudwg-log, November
              1989 - February 1995.".

   [RFC1063]  Mogul, J., Kent, C., Partridge, C., and K. McCloghrie, "IP
              MTU discovery options", RFC 1063, July 1988.

   [RFC1070]  Hagens, R., Hall, N., and M. Rose, "Use of the Internet as
              a subnetwork for experimentation with the OSI network



Templin                  Expires August 16, 2010               [Page 32]

Internet-Draft                    SEAL                     February 2010


              layer", RFC 1070, February 1989.

   [RFC1191]  Mogul, J. and S. Deering, "Path MTU discovery", RFC 1191,
              November 1990.

   [RFC1981]  McCann, J., Deering, S., and J. Mogul, "Path MTU Discovery
              for IP version 6", RFC 1981, August 1996.

   [RFC2003]  Perkins, C., "IP Encapsulation within IP", RFC 2003,
              October 1996.

   [RFC2004]  Perkins, C., "Minimal Encapsulation within IP", RFC 2004,
              October 1996.

   [RFC2473]  Conta, A. and S. Deering, "Generic Packet Tunneling in
              IPv6 Specification", RFC 2473, December 1998.

   [RFC2675]  Borman, D., Deering, S., and R. Hinden, "IPv6 Jumbograms",
              RFC 2675, August 1999.

   [RFC2764]  Gleeson, B., Heinanen, J., Lin, A., Armitage, G., and A.
              Malis, "A Framework for IP Based Virtual Private
              Networks", RFC 2764, February 2000.

   [RFC2923]  Lahey, K., "TCP Problems with Path MTU Discovery",
              RFC 2923, September 2000.

   [RFC3232]  Reynolds, J., "Assigned Numbers: RFC 1700 is Replaced by
              an On-line Database", RFC 3232, January 2002.

   [RFC3366]  Fairhurst, G. and L. Wood, "Advice to link designers on
              link Automatic Repeat reQuest (ARQ)", BCP 62, RFC 3366,
              August 2002.

   [RFC3692]  Narten, T., "Assigning Experimental and Testing Numbers
              Considered Useful", BCP 82, RFC 3692, January 2004.

   [RFC3819]  Karn, P., Bormann, C., Fairhurst, G., Grossman, D.,
              Ludwig, R., Mahdavi, J., Montenegro, G., Touch, J., and L.
              Wood, "Advice for Internet Subnetwork Designers", BCP 89,
              RFC 3819, July 2004.

   [RFC4191]  Draves, R. and D. Thaler, "Default Router Preferences and
              More-Specific Routes", RFC 4191, November 2005.

   [RFC4213]  Nordmark, E. and R. Gilligan, "Basic Transition Mechanisms
              for IPv6 Hosts and Routers", RFC 4213, October 2005.




Templin                  Expires August 16, 2010               [Page 33]

Internet-Draft                    SEAL                     February 2010


   [RFC4301]  Kent, S. and K. Seo, "Security Architecture for the
              Internet Protocol", RFC 4301, December 2005.

   [RFC4380]  Huitema, C., "Teredo: Tunneling IPv6 over UDP through
              Network Address Translations (NATs)", RFC 4380,
              February 2006.

   [RFC4459]  Savola, P., "MTU and Fragmentation Issues with In-the-
              Network Tunneling", RFC 4459, April 2006.

   [RFC4727]  Fenner, B., "Experimental Values In IPv4, IPv6, ICMPv4,
              ICMPv6, UDP, and TCP Headers", RFC 4727, November 2006.

   [RFC4821]  Mathis, M. and J. Heffner, "Packetization Layer Path MTU
              Discovery", RFC 4821, March 2007.

   [RFC4861]  Narten, T., Nordmark, E., Simpson, W., and H. Soliman,
              "Neighbor Discovery for IP version 6 (IPv6)", RFC 4861,
              September 2007.

   [RFC4963]  Heffner, J., Mathis, M., and B. Chandler, "IPv4 Reassembly
              Errors at High Data Rates", RFC 4963, July 2007.

   [RFC5445]  Watson, M., "Basic Forward Error Correction (FEC)
              Schemes", RFC 5445, March 2009.

   [TCP-IP]   "Archive/Hypermail of Early TCP-IP Mail List,
              http://www-mice.cs.ucl.ac.uk/multimedia/misc/tcp_ip/, May
              1987 - May 1990.".


Appendix A.  Reliability

   Although a SEAL-SR tunnel may span an arbitrarily-large subnetwork
   expanse, the IP layer sees the tunnel as a simple link that supports
   the IP service model.  Since SEAL-SR supports segmentation at a layer
   below IP, SEAL-SR therefore presents a case in which the link unit of
   loss (i.e., a SEAL segment) is smaller than the end-to-end
   retransmission unit (e.g., a TCP segment).

   Links with high bit error rates (BERs) (e.g., IEEE 802.11) use
   Automatic Repeat-ReQuest (ARQ) mechanisms [RFC3366] to increase
   packet delivery ratios, while links with much lower BERs typically
   omit such mechanisms.  Since SEAL-SR tunnels may traverse
   arbitrarily-long paths over links of various types that are already
   either performing or omitting ARQ as appropriate, it would therefore
   be inefficient to also require the tunnel to perform ARQ in the
   general sense.



Templin                  Expires August 16, 2010               [Page 34]

Internet-Draft                    SEAL                     February 2010


   When the SEAL-SR ITE has knowledge that the tunnel will traverse a
   subnetwork with non-negligible loss due to, e.g., interference, link
   errors, congestion, etc., it can solicit Fragmentation Reports from
   the ETE periodically to discover missing segments for retransmission
   within a single round-trip time.  However, retransmission of missing
   segments may require the ITE to maintain considerable state and may
   also result in considerable delay variance and packet reordering.

   SEAL-SR may also use alternate reliability mechanisms such as Forward
   Error Correction (FEC).  A simple FEC mechanism may merely entail
   gratuitous retransmissions of duplicate data, however more efficient
   alternatives are also possible.  Basic FEC schemes are discussed in
   [RFC5445].

   The use of ARQ and FEC mechanisms for improved reliability are for
   further study.


Appendix B.  Integrity

   Each link in the path over which a SEAL tunnel is configured is
   responsible for first-pass integrity verification for packets that
   traverse the link.  As such, when a multi-segment SEAL packet with N
   segments is reassembled, its segments will have been inspected by N
   independent link layer integrity check streams instead of a single
   stream that a single segment SEAL packet of the same size would have
   received.  Intuitively, a reassembled packet subjected to N
   independent integrity check streams of shorter-length segments would
   seem to have integrity assurance that is no worse than a single-
   segment packet subjected to only a single integrity check steam,
   since the integrity check strength diminishes in inverse proportion
   with segment length.  In any case, the link-layer integrity assurance
   for a multi-segment SEAL packet is no different than for a multi-
   fragment IPv6 packet.

   Fragmentation and reassembly schemes must also consider packet-
   splicing errors, e.g., when two segments from the same packet are
   concatenated incorrectly, when a segment from packet X is reassembled
   with segments from packet Y, etc.  The primary sources of such errors
   include implementation bugs and wrapping IP ID fields.  In terms of
   implementation bugs, the SEAL segmentation and reassembly algorithm
   is much simpler than IP fragmentation resulting in simplified
   implementations.  In terms of wrapping ID fields, when IPv4 is used
   as the outer IP protocol, the 16-bit IP ID field can wrap with only
   64K packets with the same (src, dst, protocol)-tuple alive in the
   system at a given time [RFC4963] increasing the likelihood of
   reassembly mis-associations.  However, SEAL ensures that any outer
   IPv4 fragmentation and reassembly will be short-lived and tuned out



Templin                  Expires August 16, 2010               [Page 35]

Internet-Draft                    SEAL                     February 2010


   as soon as the ITE receives a Reassembly Repot, and SEAL segmentation
   and reassembly uses a much longer ID field.  Therefore, reassembly
   mis-associations of IP fragments nor of SEAL segments should be
   prohibitively rare.


Appendix C.  Transport Mode

   SEAL can also be used in "transport-mode", e.g., when the inner layer
   includes upper-layer protocol data rather than an encapsulated IP
   packet.  For instance, TCP peers can negotiate the use of SEAL for
   the carriage of protocol data encapsulated as IPv4/SEAL/TCP.  In this
   sense, the "subnetwork" becomes the entire end-to-end path between
   the TCP peers and may potentially span the entire Internet.

   Sections 4 and 5 specify the operation of SEAL in "tunnel mode",
   i.e., when there are both an inner and outer IP layer with a SEAL
   encapsulation layer between.  However, the SEAL protocol can also be
   used in a "transport mode" of operation within a subnetwork region in
   which the inner-layer corresponds to a transport layer protocol
   (e.g., UDP, TCP, etc.) instead of an inner IP layer.

   For example, two TCP endpoints connected to the same subnetwork
   region can negotiate the use of transport-mode SEAL for a connection
   by inserting a 'SEAL_OPTION' TCP option during the connection
   establishment phase.  If both TCPs agree on the use of SEAL, their
   protocol messages will be carried as TCP/SEAL/IPv4 and the connection
   will be serviced by the SEAL protocol using TCP (instead of an
   encapsulating tunnel endpoint) as the transport layer protocol.  The
   SEAL protocol for transport mode otherwise observes the same
   specifications as for Sections 4 and 5.


Appendix D.  Historic Evolution of PMTUD

   The topic of Path MTU discovery (PMTUD) saw a flurry of discussion
   and numerous proposals in the late 1980's through early 1990.  The
   initial problem was posed by Art Berggreen on May 22, 1987 in a
   message to the TCP-IP discussion group [TCP-IP].  The discussion that
   followed provided significant reference material for [FRAG].  An IETF
   Path MTU Discovery Working Group [MTUDWG] was formed in late 1989
   with charter to produce an RFC.  Several variations on a very few
   basic proposals were entertained, including:

   1.  Routers record the PMTUD estimate in ICMP-like path probe
       messages (proposed in [FRAG] and later [RFC1063])





Templin                  Expires August 16, 2010               [Page 36]

Internet-Draft                    SEAL                     February 2010


   2.  The destination reports any fragmentation that occurs for packets
       received with the "RF" (Report Fragmentation) bit set (Steve
       Deering's 1989 adaptation of Charles Lynn's Nov. 1987 proposal)

   3.  A hybrid combination of 1) and Charles Lynn's Nov. 1987 (straw
       RFC draft by McCloughrie, Fox and Mogul on Jan 12, 1990)

   4.  Combination of the Lynn proposal with TCP (Fred Bohle, Jan 30,
       1990)

   5.  Fragmentation avoidance by setting "IP_DF" flag on all packets
       and retransmitting if ICMPv4 "fragmentation needed" messages
       occur (Geof Cooper's 1987 proposal; later adapted into [RFC1191]
       by Mogul and Deering).

   Option 1) seemed attractive to the group at the time, since it was
   believed that routers would migrate more quickly than hosts.  Option
   2) was a strong contender, but repeated attempts to secure an "RF"
   bit in the IPv4 header from the IESG failed and the proponents became
   discouraged. 3) was abandoned because it was perceived as too
   complicated, and 4) never received any apparent serious
   consideration.  Proposal 5) was a late entry into the discussion from
   Steve Deering on Feb. 24th, 1990.  The discussion group soon
   thereafter seemingly lost track of all other proposals and adopted
   5), which eventually evolved into [RFC1191] and later [RFC1981].

   In retrospect, the "RF" bit postulated in 2) is not needed if a
   "contract" is first established between the peers, as in proposal 4)
   and a message to the MTUDWG mailing list from jrd@PTT.LCS.MIT.EDU on
   Feb 19. 1990.  These proposals saw little discussion or rebuttal, and
   were dismissed based on the following the assertions:

   o  routers upgrade their software faster than hosts

   o  PCs could not reassemble fragmented packets

   o  Proteon and Wellfleet routers did not reproduce the "RF" bit
      properly in fragmented packets

   o  Ethernet-FDDI bridges would need to perform fragmentation (i.e.,
      "translucent" not "transparent" bridging)

   o  the 16-bit IP_ID field could wrap around and disrupt reassembly at
      high packet arrival rates

   The first four assertions, although perhaps valid at the time, have
   been overcome by historical events.  The final assertion is addressed
   by the mechanisms specified in SEAL.



Templin                  Expires August 16, 2010               [Page 37]

Internet-Draft                    SEAL                     February 2010


Author's Address

   Fred L. Templin (editor)
   Boeing Research & Technology
   P.O. Box 3707
   Seattle, WA  98124
   USA

   Email: fltemplin@acm.org










































Templin                  Expires August 16, 2010               [Page 38]


