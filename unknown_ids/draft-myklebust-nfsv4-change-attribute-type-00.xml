<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<rfc category="std" ipr="trust200902">
<?rfc iprnotified="no" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc toc="yes" ?>
<?rfc compact="no"?>
<?rfc subcompact="yes"?>

<front>
	<title abbrev="NFSv4 change_attribute_type">
		Sharing change attribute implementation details with NFSv4 clients
	</title>
	<author initials="T." surname="Myklebust"
		fullname="Trond Myklebust">
		<organization>
			NetApp
		</organization>
		<address>
			<postal>
				<street>3215 Bellflower Ct</street>
				<city>Ann Arbor</city>
				<region>MI</region>
				<code>48103</code>
				<country>USA</country>
			</postal>
			<phone>+1-734-662-6608</phone>
			<email>Trond.Myklebust@netapp.com</email>
		</address>
	</author>
	<date month="March" year="2011" />
	<area>Transport</area>
	<workgroup>NFSv4</workgroup>
	<keyword>RFC</keyword>
	<keyword>Request for Comments</keyword>
	<keyword>NFSv4</keyword>
	<keyword>Network File System</keyword>
	<keyword>change_attribute</keyword>
	<keyword>change_attribute_type</keyword>
	<abstract>
		<t>
			This document describes an extension to the
			NFSv4 protocol that allows the server to
			share information about the implementation of its
			change attribute with the client. The aim is to
			improve the client's ability to determine the order
			in which parallel updates to the same file were
			processed.
		</t>
	</abstract>
	<note title="Keywords">
		<t>
			The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
			"SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
			and "OPTIONAL" in this document are to be interpreted as
			described in <xref target="RFC2119"/>.
		</t>
	</note>
</front>
<middle>
	<section title="Introduction">
		<t>
			Although both the NFSv4 <xref target="RFC3530" />
			and NFSv4.1 protocol <xref target="RFC5661" />,
			define the change attribute as being mandatory
			to implement, there is little in the way of
			guidance. The only feature that is mandated by
			the spec is that the value must change
			whenever the file data or metadata change.
		</t>
		<t>
			While this allows for a wide range of implementations,
			it also leaves the client with a conundrum: how does
			it determine which is the most recent value for the
			change attribute in a case where several RPC calls
			have been issued in parallel?
			In other words if two COMPOUNDs, both containing
			WRITE and GETATTR requests for the same file, have
			been issued in parallel, how does the client determine
			which of the two change attribute values
			returned in the replies to the GETATTR requests
			corresponds to the most recent state of the file? In
			some cases, the only recourse may be to send another
			COMPOUND containing a third GETATTR that is fully
			serialised with the first two.
		</t>
		<t>
			In order to avoid this kind of inefficiency, we
			propose a method to allow the server to share details
			about how the change attribute is expected to evolve,
			so that the client may immediately determine which, out
			of the several change attribute values returned by the
			server, is the most recent.
		</t>
	</section>
	<section title="Definition of the 'change_attr_type' per-file system attribute">
		<figure><artwork>
enum change_attr_typeinfo = {
        NFS4_CHANGE_TYPE_IS_MONOTONIC_INCR         = 0,
        NFS4_CHANGE_TYPE_IS_VERSION_COUNTER        = 1,
        NFS4_CHANGE_TYPE_IS_VERSION_COUNTER_NOPNFS = 2,
        NFS4_CHANGE_TYPE_IS_TIME_METADATA          = 3,
        NFS4_CHANGE_TYPE_IS_UNDEFINED              = 4
};
		</artwork></figure>
		<texttable>
			<ttcol align="left">Name</ttcol>
			<ttcol align="center">Id</ttcol>
			<ttcol align="left">Data Type</ttcol>
			<ttcol align="left">Acc</ttcol>
			<c>change_attr_type</c>
			<c>XX</c>
			<c>enum change_attr_typeinfo</c>
			<c>R</c>
		</texttable>
		<t>
			The proposed solution is to enable the NFS server to
			provide additional information about how it
			expects the change attribute value to evolve after
			the file data or metadata has changed.
			To do so, we define a new recommended attribute,
			'change_attr_type', which may take values from
			enum change_attr_typeinfo as follows:
		</t>
		<t>
			<list style="hanging">
				<t hangText="NFS4_CHANGE_TYPE_IS_MONOTONIC_INCR:">
					The change attribute value MUST monotonically
					increase for every atomic change to the
					file attributes, data or directory contents.
				</t>
				<t hangText="NFS4_CHANGE_TYPE_IS_VERSION_COUNTER:">
					The change attribute value MUST be incremented
					by one unit for every atomic change to the
					file attributes, data or directory
					contents. This property is preserved
					when writing to pNFS data servers.
				</t>
				<t hangText="NFS4_CHANGE_TYPE_IS_VERSION_COUNTER_NOPNFS:">
					The change attribute value MUST be incremented
					by one unit for every atomic change to the
					file attributes, data or directory
					contents. In the case where the client
					is writing to pNFS data servers, the
					number of increments is not guaranteed
					to exactly match the number of writes.
				</t>
				<t hangText="NFS4_CHANGE_TYPE_IS_TIME_METADATA:">
					The change attribute is implemented as
					suggested in the NFSv4 spec
					<xref target="RFC3530" /> in terms of
					the time_metadata attribute.
				</t>
				<t hangText="NFS4_CHANGE_TYPE_IS_UNDEFINED:">
					The change attribute does not take
					values that fit into any of these
					categories.
				</t>
			</list>
		</t>
		<t>
			If either NFS4_CHANGE_TYPE_IS_MONOTONIC_INCR,
			NFS4_CHANGE_TYPE_IS_VERSION_COUNTER, or
			NFS4_CHANGE_TYPE_IS_TIME_METADATA are set, then
			the client knows at the very least that the
			change attribute is monotonically increasing, which
			is sufficient to resolve the question of which
			value is the most recent.
		</t>
		<t>
			If the client sees the value
			NFS4_CHANGE_TYPE_IS_TIME_METADATA, then by inspecting
			the value of the 'time_delta' attribute it
			additionally has the option of detecting rogue server
			implementations that use time_metadata in violation
			of the spec.
		</t>
		<t>
			Finally, if the client sees NFS4_CHANGE_TYPE_IS_VERSION_COUNTER,
			it has the ability to predict what the resulting change
			attribute value should be after a COMPOUND containing
			a SETATTR, WRITE, or CREATE. This again allows it to
			detect changes made in parallel by another client.
			The value NFS4_CHANGE_TYPE_IS_VERSION_COUNTER_NOPNFS
			permits the same, but only if the client is not
			doing pNFS WRITEs.
		</t>
	</section>
</middle>
<back>
	<references>
		<reference anchor="RFC2119">
			<front>
				<title>
					Key words for use in RFCs to Indicate Requirement Levels
				</title>
				<author initials="S." surname="Bradner" fullname="S. Bradner">
					<organization abbrev="Harvard University">
						Harvard University
					</organization>
				</author>
			</front>
			<seriesInfo name="RFC" value="2119" />
		</reference>
		<reference anchor="RFC5661">
			<front>
				<title>
					Network File System (NFS) Version 4 Minor Version 1 Protocol
				</title>
				<author initials="S." surname="Shepler" fullname="S. Shepler, Ed">
					<organization abbrev="Speedstor">
						Speedstor, Inc.
					</organization>
				</author>
				<author initials="M." surname="Eisler" fullname="M. Eisler, Ed">
					<organization abbrev="NetApp">
						NetApp
					</organization>
				</author>
				<author initials="D." surname="Noveck" fullname="D. Noveck, Ed">
					<organization abbrev="NetApp">
						NetApp
					</organization>
				</author>
			</front>
			<seriesInfo name="RFC" value="5661" />
		</reference>
		<reference anchor="RFC3530">
			<front>
				<title>
					Network File System (NFS) version 4 Protocol
				</title>
				<author initials="S." surname="Shepler" fullname="S. Shepler, Ed">
					<organization abbrev="Sun Microsystems">
						Sun Microsystems, Inc.
					</organization>
				</author>
				<author initials="B." surname="Callaghan" fullname="B. Callaghan">
					<organization abbrev="Sun Microsystems">
						Sun Microsystems, Inc.
					</organization>
				</author>
				<author initials="D." surname="Robinson" fullname="D. Robinson">
					<organization abbrev="Sun Microsystems">
						Sun Microsystems, Inc.
					</organization>
				</author>
				<author initials="R." surname="Thurlow" fullname="R. Thurlow">
					<organization abbrev="Sun Microsystems">
						Sun Microsystems, Inc.
					</organization>
				</author>
				<author initials="C." surname="Beame" fullname="C. Beame">
					<organization abbrev="Hummingbird">
						Hummingbird, Inc.
					</organization>
				</author>
				<author initials="M." surname="Eisler" fullname="M. Eisler">
					<organization abbrev="Network Appliance">
						Network Appliance, Inc
					</organization>
				</author>
				<author initials="D." surname="Noveck" fullname="D. Noveck">
					<organization abbrev="Network Appliance">
						Network Appliance, Inc
					</organization>
				</author>
			</front>
			<seriesInfo name="RFC" value="3530" />
		</reference>
	</references>
</back>
</rfc>
