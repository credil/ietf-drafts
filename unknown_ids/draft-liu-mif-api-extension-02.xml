<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
    <!ENTITY rfc2119 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>
<?rfc compact="yes" ?> 
<?rfc subcompact="yes" ?>


<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3493 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3493.xml">


<rfc category="info" ipr="trust200902" docName="draft-liu-mif-api-extension-02">
<front>
<title abbrev="MIF API Extension"> Socket API Extension for Multiple Connection Support </title>

<author initials="D."surname="Liu"fullname="Dapeng Liu"><organization>China Mobile</organization><address>
<postal>
<street>Unit2, 28 Xuanwumenxi Ave,Xuanwu District</street><city>Beijing 100053</city><country>China</country></postal>
<email>liudapeng@chinamobile.com</email></address>
</author>

<author initials="Z."surname="Cao"fullname="Zhen Cao"><organization>China Mobile</organization><address>
<postal>
<street>Unit2, 28 Xuanwumenxi Ave,Xuanwu District</street><city>Beijing 100053</city><country>China</country></postal>
<email>caozhen@chinamobile.com</email></address>
</author>


<date month="July"year="2010"/><area></area><workgroup></workgroup>
 <abstract><t>The Socket API is the de facto standard of network API for many UNIX-
like and non-UNIX OSes. Many APIs that are exported to the user space is
either direct use or encapsulates the Socket API. The Socket API has
been extended to support IPv6. Recently, multiple interfaces or multiple
connection capable devices become more and more common. But due to the
limitation of the default route of the host and other issues such as DNS
selection etc prevent the utilization of multiple interfaces/connections
benefit. Moreover, there is no API level support for the application
developer to utilize the benefit of the host's multiple
interfaces/connections. Starting with the requirement of MIF API
extension, this document introduces a new set of APIs to support
multiple interfaces/connections. </t></abstract>
</front>

<middle>
<section anchor="intro" title="Introduction">

   <t>Socket API was first used in UNIX operating system as network API for
   application developers to develop network applications. Then it is
   introduced to many other operating systems and become a de facto
   standard of network APIs.</t>

   <t>The Socket API needs to be extended according to the evolution of
   TCP/IP protocol stack. For example, the Socket API was extended to
   make it support IPv6 in RFC 3493 [RFC3493]. Nowadays, there are more
   and more devices that have multiple interfaces/connections, but due
   to the limitation of Socket API and other issues such as default
   route and DNS selection, the application developer can not direct use
   the multiple interfaces/connection capability of the devices. This
   document describes a Generic Connection based MIF host architecture and discusses
   how to extend the Socket API to make it support multiple
   interfaces/connection while remain compatibility with current Socket.</t>
</section>

<section title="Conventions used in this document">
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL","SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document 
are to be interpreted as described in <xref target="RFC2119">RFC 2119</xref>.</t>
</section>


<section title="Generic Connection based MIF host architecture">

<t>Figure 1 demostrates the architecture of "Generic Connection" based MIF host.MIF Generic Connection
is an abstratcion module in the IP layer of the TCP/IP stack. It could be consided as enhancement of 
standard TCP/IP stack. The function of MIF Generic Connection module includes:</t>

<t>1.Interface selection</t>
<t>The application can bind to Generic Connection. The Generic Connection provides the service of
physical interface selection and corresponding source address selection. Generic Connection handles the
mapping of phsysical interface to the Genric Connection,it decides the which physical interface will acturely be used.</t>
<t>2.Routing enhancement</t>
<t>Noramlly, host only has a default route which points to one default gateway. for MIF host,
there may be different connections using multiple interfaces and each connection has its own default gateway.
MIF Generic Connection provides enhancement for the stand host routing function of TCP/IP protocol stack. It provides
soure address based policy routing function. The enhanced routing function in MIF host is not only based on the destination
address but also based on soure address and other metrics.</t>
<t>3.Control interface to the uper layer</t>
<t>The service of Generic Connection could be invoked by the upper layer. Generic Connection provides interface to upper layer for 
service invoking.The interface could based on extended MIF socket APIs</t>

<figure align="center" anchor="GC based MIF">
        <preamble></preamble>

        <artwork align="center"><![CDATA[

+-------------------------------------+
|            Application              |
+-------------------------------------+
|            MIF Socket               |
+-----------------------------+       |
|              TCP/UDP        |       |            
+-----------------------------+-------+ 
|              |MIF Generic Connection|   
|              +----------------------+   
|                  IP                 |
+-------------------------------------+
|         Physical Interface          |
|  +----+  +-----+  +-----+  +----+   |
|  |IF#1|  |IF#2 |  |IF#3 |  |IF#4|   |
|  +----+  +-----+  +-----+  +----+   |
+-------------------------------------+
Figure 1. Generic Connection Based MIF Host Architecture

            ]]></artwork>

        <postamble></postamble>
      </figure>

</section>


<section title="Sokcet API extension for Generic Connection architecture">
<t>This section discusses the possible ways to implement the Generic Connection architeture by extending standard Socket data struture
and APIs.</t>

<section title="API Extension Requirement">

	<t>R1: Compatible with existing Socket APIs</t>
	
	<t>The extension of Socket APIs should remain compatible with current
   existing Socket APIs which means this extension will not affect the
   existing application and the application developer can chose whether
   to use this extension or not.</t>
	
		<t>R2: Support for multiple Connections</t>
		<t> The newly introduced APIs can support the host applications to utilize multiple connections. If some connections fail to work,
    applications can failover to other available interfaces.</t>
		
		<t>R3: No Changes to Existing Socket APIs</t>
		<t>The newly introduced APIs cannot change the behavior of existing
   network APIs available on the host operating system.</t>
   
   <t>R4: Easy for Implementation</t>
   <t>The implementation details for the newly introduced APIs should be as
   neat as possible. It keeps the underlying implementation details
   simple, and makes the application developers easy to use these APIs.</t>
</section>

<section title="Data structure need to be extended"> 

<t>This section introduces a new data structure named Generic_connection in addition to the current Socket API. This is an
abstraction of the physical connections of the host. The definition of this data structure is as follows:</t>

<t>Struct GenericConnection  {</t>

<t>               struct GenericConnection *next; </t>

<t>               int index;                      </t> 

<t>               struct Netdevice *dev;          </t>

<t>               int priority;                   </t>

<t>               char status;                    </t>

<t>               struct socket *sock;            </t>

<t>                }
</t>

<t>   This structure has many data items defined as follows:</t>

<t>    o next: this is an pointer that points to another GenericConnection
      structure. This means that many GenericConnection structure can
      form a link list.</t> 

<t>    o index: the index indicates the position of a particular
      GenericConnection item of the GenericConnection structure link
      list.</t> 

<t>    o dev: this is a pointer that points to a particular physical
      interface structure.</t> 

<t>    o Priority: priority indicates the priority of the connection.</t> 

<t>    o status: status indicates the status of current connection.</t> 

<t>    o Sock: sock is a pointer that points to a socket structure.</t> 

</section>

<section title="Definition of New Socket APIs">

	<t>	To make it compatible with existing Socket API, this document will not define new parameters to existing Socket API. Instead, this
   document defines a set of new socket APIs that used to support multiple connections feature.</t>		
    
	<section title ="Physical interface/connection status acquiring API">
	 <t>For the host that has multiple interfaces/connections, by invoking
   this API, it can return the current interfaces/connections that the
   host has. The definition of this API is:</t>

   <t>int ListPhysicalConnection(struct Netdevice *dev, int
   connectionNumber), the parameter's definition is:</t>

   <t>o dev: this is a pointer that points to a link list of Netdevice
      structure.</t>

   <t>o connectionNumber: this is the number of the physical connections.</t>
   </section>
   
   
  <section title ="Connection mapping API">
  
   <t>To map a physical API to the GenericConnection structure, this
   subsection introduces a new API named ConnectionMap() to the current
   Socket API. The definition of this API is as follows:</t>

   <t>int ConnectionMap(struct GenericConnection *G_connection, struct
   Netdevice *dev, int priority, struct socket *sock )</t>

  <t> The definition of the parameters are:</t>

   <t>o G_connection: this is a pointer that points to a GenericConnection
      link list;</t>

   <t>o dev: this is a pointer that points to a physical connection.</t>

   <t>o priority: this parameter defines the priority of this connection.</t>

   <t>o sock: this is a pointer that points to a socket structure.</t>

   <t>This API makes the mapping between the GenericConnection and the
   physical connections. Many physical connections can be mapped to one
   GenericConnection. For example, a host may has a WiFi interface and a
   Ethernet interface, the application developer can first invoke
   ListPhysicalConnection() to acquire the list of physical interfaces,
   then the application can map both WiFi and Ethernet interfaces to the
   same GenericConnection structure.</t>

  <t>Further more, by using this mechanism the OS vender can implement
  their own APIs that supports connection polices. For example, the OS
  vender can provide connection policy API to the application developer
  to enforce connection polices.</t>

  <t>The application developer can also use these functions to implement
  their own connection polices directly. This design gives the
  flexibility of the implementation of connection policies.</t>
  </section>
  
  <section title ="Connection status query API">

   <t>This subsection introduces a new API name ConnectionSatusQuery()used
   to query the status of the connections, the definition of this API is
   as follows:</t>

   <t>ConnectionStatusQuery() function returns the current status of the
   GenricConnection, the definition of this API is as follows:</t>

   <t>int ConnectionStatusQuery(struct GenericConnection *G_connection,int
   index, int status),the definition of the parameters are:</t>

   <t>o G_connection a pointer that points to a GenericConnection link
      list.</t>

   <t>o index: the index of the connection that the caller what to query</t>

   <t>o status: the status of the connection that the caller queries</t>

   <t>When the physical connection's status changes, the change will
   reflects by the parameter "status". By invoking this API, the
   application can monitor the status of the physical connections or
   when the physical connection status changes will notify the
   application by setting the "status" parameter to the according value.</t>
   </section>
   
   <section title ="Socket and GenericConnection bind API">
   
   <t>This subsection introduces an API to bind the Socket structure to the
   GenericConnection structure. The definition of this API is as follows:</t>

   <t>BindToConnection(Struct socket *sock, Struct GenericConnection
   *GConnection ), the definition of the parameters are:</t>

   <t>o sock: a pointer that points to a socket structure.
      o GConnection: a pointer that points to a GenericConnection
      structure.</t>

   <t>The purposes of this bind API is to make the GenericConnection
   structure has the socket information.</t>
   </section>


	<section title ="Using the extended APIs">
		<section title="An Example">
	  <t>To enjoy the benefit of multiple interfaces, the developers can write
   programs according to the APIs introduced in this document.</t>

   <t>For example, if the application wants to bind to both the Ethernet
   and WiFi interfaces, it can follow the following steps:</t>

  <t>1. create a GenericConnection variable, say gconn;</t>

  <t>2. create two sockets binding to these two interfaces separately,
      sock_wired and sock_wifi;</t>

   <t>3. use the connection mapping API introduced in Sec.5.2 to map the
      sock_wired and sock_wifi to the generic connection struct *gconn;</t>

   <t>4. now that gconn consists of a list of sockets that maps to the
      wired socket and wireless socket separately, the application can
      start data connection using the generic connection class.
   </t>
   </section>
      
   <section title="Implementation Details">
   <t>The implementation details of these newly introduced APIs are to be
   introduced later.</t></section>
   
 </section>
 </section> 
</section>


<section anchor="security" title="Security Considerations">
<t>TBD</t>
</section>

<section title="IANA Considerations">
<t>None</t>
</section>


<section title="Acknowledgments">
<t>The authors want to thank Teemu Savolainen from Nokia, Dayi Zhao from 
Bitway and others for their useful suggestions and discussions.</t>
</section>

</middle>

<back>

<references title="Normative References">
      &RFC2119;
      
     
      
</references>
          
    
<references title="Informative References">
     
       &RFC3493;
    
      <reference anchor="I-D.draft-yokota-netlmm-pmipv6-mn-itho-support"
                 target="http://tools.ietf.org/html/draft-yokota-netlmm-pmipv6-mn-itho-support-03">
        <front>
          <title>Virtual Interface Support for IP Hosts</title>

          <author>
            <organization> H. Yokota,KDDI Lab</organization>
          </author>

          <date year="2010" />
        </front>
      </reference>


</references>

</back>
</rfc>