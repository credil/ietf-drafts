<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC '' 
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
]>

<rfc category="info" ipr="trust200902" docName="draft-fiorelli-weirds-rws-00">

    <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
    <?rfc toc="yes"?>
    <?rfc strict="yes"?>
    <?rfc tocompact="yes"?>
    <?rfc compact="yes"?>
    <?rfc subcompact="no"?>
    <?rfc tocdepth="2"?>
    <?rfc symrefs="yes"?>
    <?rfc comments="yes" ?>
    <?rfc sortrefs="yes" ?>

    <front>
        
        <title abbrev="RIPE-RWS">
            
            The RIPE Database REST API     
        </title>
                
        <author initials="B." surname="Fiorelli" fullname="Benedetto Fiorelli">
            <organization abbrev="RIPE">
                RIPE NCC
            </organization>
            <address>
                <postal>
                    <street>P.O. Box 10096</street>
                    <country>The Netherlands</country>
                    <code>1001EB</code> <city>Amsterdam</city>
                </postal>
                <phone>+31.20.535.4444</phone>
                <email>bfiorell@ripe.net</email>
            </address>
        </author>
        
        <date month="June" year="2011"/>
        
        <area> Applications </area>
        
        <keyword>Whois</keyword>       
        <keyword>CRUD</keyword>
        <keyword>RESTful</keyword>
        <keyword>Directory Service</keyword>
               
        <abstract>
            <t>
                This document describes the RIPE Database REST API. 
            </t>
            <t>
                The purpose of this document is to facilitate discussion and serve as
                input into a standards process in this area, currently being
                discussed on the WHOIS-based Extensible Internet Registration Data
                Service (WEIRDS) mailing list
                (https://www.ietf.org/mailman/listinfo/weirds).
            </t>
        </abstract>
                
    </front>
    
    <middle>

        <section title="Introduction">
            <t>
                This document describes a pilot service for querying and displaying data in the RIPE database. The service is implemented using the HTTP protocol <xref target="RFC2616"/> 
                and conforms to the architectural constraints of REST  <xref target="REST"/>. 
                
                In this document, we explain our reasons for new interfaces (and limits of
                existing ones) as well as high level functionalities of the API. We did not include technical details of our implementation,
                which can be found as a separate document and is available at:  http://labs.ripe.net/Members/bfiorell/api-documentation.               
            </t>
  
           <section title="Why REST?">
               
               
               <t>The RIPE Database has a large number of power users: organisations and individuals that make or 
                   maintain software which depends on the RIPE Database. The way these specialized clients interact 
                   with the RIPE Database is dictated by historical and technical aspects of RPSL and the Whois protocol.
</t>               
               <t> RPSL (<xref target="RFC2622"/>) is the routing policy specification language, but for historical and convenience reasons it 
                   actually specifies much more than routing policies, there are many RFCs related to the RPSL 
                   (see <xref target="RFC2622"/>, <xref target="RFC2650"/>, <xref target="RFC4012"/>)  and in 
                   practice the language describes more than 20 different types of RPSL objects, it is more a 
                   formalisation of the way policy records have been stored and exchanged in the existing Whois systems
                   since to the late 80's instead of a high level domain language specification. </t>
               
               <t>The result is that the policy specification language and its extensions are tightly coupled with 
                   the way policies are stored in the existing Whois systems and vice versa, so any new system that is
                   implementing the language ends up reproducing a Whois system. </t>
               
               <t>The qualities of RPSL and Whois are well known. In this section we highlight their limits by describing the way a 
                   client would interact with the two Whois interfaces of query and update.</t>
               
               <t> First scenario, a client needs to extract sensible information from one or more Internet Registries
                   like the RIPE Database, the steps are:</t>
                <t><list>               
               <t>    prepare one or more queries and invoke a command line Whois client program or open a TCP socket 
               connection to one or more Whois servers, </t>
               
               <t> parse and post-process the RPSL responses, facing many intricacies like continuation lines, 
               end of line comments, comma separated values, attribute values that can reference to different types 
               of RPSL objects depending on various conditions, etc., </t>
               
               <t> if object references need to be resolved, extract referenced primary keys, execute other queries, 
               parse again RPSL  to identify the right referenced objects; this step can be recursive, </t>
               
               <t> merge results from multiple queries, maybe queries from multiple internet registries that may 
               adopt different RPSL flavours, </t>
               
               <t> extract subsets of objects, by applying various criteria, </t>
               
               <t> extract subsets of attributes from set of objects, by applying various criteria. </t>
               
               </list>

</t>
               <t> The other standard scenarios is that of update: </t>

<t>
<list>     <t> 
    in case of update or delete, fetch the object, this operation may require several of the steps described in the 
    previous workflow, </t>
               
    <t> in case of a new object, build RPSL text, maybe starting converting business data into RPSL text, </t>
                   
    <t> decorate the object with authorisation credentials, adding password hashes to the RPSL text or signing the 
    RPSL text with a PGP key,</t>
               
    <t> send the text data via mail to the Mail Update interface or via HTTP post to the Syncupdates interface, </t>
               
    <t> in case of error, parse a human readable text response if specific error conditions must be handled in 
        a special way.</t>
              
</list> 
</t>              
              
              <t> As shown above, such processes are modeled on a human centered workflow, they are
                  not the optimal to build new services, extend existing ones or build tools on top of them.</t> 
               
               <t> Concretely, this means clients have to handle too much complexity, many clients have problems
                   at handling all the complexity of RPSL, many are too expensive to be extended and difficult to 
                   maintain. </t> 
               
               <t> RPSL and Whois are still invaluable but itâ€™s evident that there is a need for simpler interfaces 
                   and machine ready data formats in order to simplify the development of services and tools and increase
                   the value of Registries by exposing new domain specific interfaces. </t>
               
               <t>The first step can be the identification of a layer of Service Provider Interfaces and a data schema 
                   simple enough to be agnostic of the underlying Registry implementation. </t>
               
               <t>The SPI would sit on top of a Registry Database allowing the composition of domain specific Services
                   but also making real-time interoperation between Registries and services on multiple authoritative  
                   Databases possible to achieve. </t> 
               
               <t> With these forces and this vision the RIPE Database Group has been prototyping the RIPE Whois RESTful
                   Query and CRUD API and the related XML schemas. </t> 
               
               <t> The choice of REST has been quite obvious, HTTP is nowadays the most accessible protocol and it
                   represents a good architectural blueprint for stateless services, with its different HTTP methods, 
                   the resource locator protocol, the HTTPS, etc. </t>
               
               <t> For the representation schema we have designed a very relaxed attribute oriented XML Schema. We only 
                   apply a structural validation via XSD, after some testing we decided to remove any form of attribute 
                   or type validation in order to reuse the same schema on different RPSL flavors. </t>
               
               <t> The services support representational styles JSON, HTML and plain text, all derived via XSL transformation, 
                   with the latter two to showcase the transformation powers of XML and also to demo resource navigation via 
                   lookup references on any HTML browser. </t>
               
               <t> Content negotiation can be done using HTTP headers or appending a file extension to the request URL. </t>
               
               <t> The query services can be used on any RPSL based Whois server or mirror. </t>

                <t> For example in one request it is possible to execute the same Lookup or Search request on all 
                    the Regional Internet Registries and return all the responses as a unique set of resources. </t> 
               
               <t>Similarly can be done for the CRUD interfaces, building adapter modules for the different update
                   mechanisms provided by different Registries given that they adopt the same set of resource types. </t> 
               
               <t> Actually we implemented an adapter for the Whois Syncupdates interface in the form of an HTTP proxy. </t>
               
                      
            </section>                       
        </section>
        
        <section title="Some features of the Query Services">
            <t>
              
                <list>
                    
                    <t>
                        Single resource Lookup Service, given a  primary key a type and a registry it always return one
                        and only one object. It can also be used to identify resources by URL bookmark.         
                    </t>
  
                    <t>
                       Resolution of referenced resources. Given a resource, all the attribute values that represent 
                       references to other resource contain an xlink anchor that can be followed to navigate and browse
                       networks of resources.
                    </t>
                    <t>
                        HATEOAS, the client can navigate through any network of resources via xlinks without requiring
                        any stateful information to be stored on the servers, this comes as a benefit of the two previous
                        features. 
                    </t>
                    <t>
                        Normalisation of comma separated values, when they represent references to multiple resources.
                    </t>
                    <t>
                        Normalisation of continuation lines, end of line comments and other RPSL intricacies. 
                        This is still a work in progress and still not complete because is difficult to test all
                        the side effects of this operation. The only real solution would be to deprecate continuation
                        lines in RPSL and split them into multiple attribute value pairs.
                    </t>
                    
                    <t> All the Query Services are available also on HTTPS. </t>
                </list>
            </t>
        </section>
                
        <section title="Some sample invocation of the query services">

            <t>
                A Lookup Service URL for an organization object:
                http://apps.db.ripe.net/whois/lookup/ripe/organisation/ORG-BME1-RIPE
            </t>
            <t>
                A Lookup Service URL for a route object:
                http://apps.db.ripe.net/whois/lookup/ripe/route/193.6.23.0/24/AS2547
            </t>

            <t>
                A Search Service URL on multiple registries:
                http://apps.db.ripe.net/whois/search.xml?flags=r&amp;source=ripe&amp;source=apnic&amp;source=afrinic&amp;query-string=AS2547
               
            </t>
            
        </section>
            
        <section title="Some details on the CRUD Services" anchor="CRUD">
                <t>
                    The CRUD Services are an attempt to split the single overloaded generic update interface provided by Mail
                    Updates and Syncupdates into separate low level interfaces, each defining a simpler contract, designed for 
                    programmatic use rather than for human interaction.
                </t> 
                <t>
                    For example the existing update interfaces always require clients to provide the entire RPSL resource in 
                    exactly the same text-format as it is stored in the Whois database, even if the requested operation is 
                    just a deletion. A client will have to fetch the RPSL object from the RIPE Database doing an appropriate query,
                    than extract ony the text blob that represent the resource to be deleted and finally it will have to execute a 
                    request to the update service providing the entire text and adding delete attributes and authorisation credentials.
                </t>
                
                <t>

                    The new CRUD Services on the other hand provide a Delete interface that only requires a primary key, 
                    a type, a registry identifier and one or more passwords. It is the equivalent of a lookup but is 
                    executed with the HTTP Delete method. It is exposed only on HTTPS.


                </t>
            <t>The client will just have to send a request like:
                HTTP DELETE: https://lab.db.ripe.net/whois/delete/test/person/pp16-test?password=123 </t>
                
            <t>The server will just respond with an HTTP Status code indicating success or failure, in case of failure different
            status codes will indicate different error conditions.</t>
            
            <t>On top of Create, Update and Delete methods we also prototyped some attribute modification services that in one only
                request can implement complex update workflow. </t>

            <t>For example with one only HTTP request will be possible to execute commands like:</t>
            <t><list>
                <t> replace all the attributes of a given type with a new set of attribute</t>
                <t> remove all the attributes that have value matching the given regular expression </t>
                <t> add this set of attributes after the Nth attribute of type X </t>
                
            </list></t>


                </section>

        
    
        <section title="Internationalization Considerations">
            <t>
                TBA
            </t>
        </section>


        <section title="IANA Considerations">
            <t>
                TBA
            </t>
        </section>


        <section title="Security Considerations">
      
            
                <t>
                    TBA.
                </t>
            
        </section>
                                        
    </middle>

    <back>
        
        <references title='Normative References'>	
            
            <?rfc include="reference.RFC.2616" ?>
            <?rfc include="reference.RFC.3986" ?>
            <?rfc include="reference.RFC.3987" ?>
           
            
            <reference anchor="REST">
                <front>
                    <title>
                        Principled Design of the Modern Web Architecture
                    </title>
                    <author initials="R." surname="Fielding" fullname="Roy T. Fielding"/> 
                    <author initials="R." surname="Taylor" fullname="Soy T. Fielding"/> 
                    <date month="May" year="2002"/>
                </front>
                <seriesInfo name="ACM Transactions on Internet Technology" value="Vol. 2, No. 2"/>	
            </reference>
            
        </references>
        
        <references title='Informative References'>
            
            <?rfc include="reference.RFC.3707" ?>
            <?rfc include="reference.RFC.3912" ?>
            <?rfc include="reference.RFC.2622" ?>
            <?rfc include="reference.RFC.2650" ?>
            <?rfc include="reference.RFC.4012" ?>
            
            
        </references>

        
    </back>


</rfc>
