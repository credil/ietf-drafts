<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<rfc category='std' ipr='trust200902' docName='draft-ietf-oauth-v2-bearer-04'>
  <?rfc strict='yes' ?>
  <?rfc toc='yes' ?>
  <?rfc tocdepth='3' ?>
  <?rfc symrefs='yes' ?>
  <?rfc sortrefs='yes' ?>
  <?rfc compact='yes' ?>
  <?rfc subcompact='no' ?>

  <front>
    <title abbrev='OAuth 2.0 Bearer Tokens'>The OAuth 2.0 Protocol: Bearer Tokens</title>

    <author fullname="Michael B. Jones" surname="Jones" initials="M.B."> <!-- role="editor" -->
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>
    <author fullname='Dick Hardt' surname='Hardt' initials='D'>
      <organization>independent</organization>
      <address>
        <email>dick.hardt@gmail.com</email>
        <uri>http://dickhardt.org/</uri>
      </address>
    </author>
    <author fullname='David Recordon' surname='Recordon' initials='D'>
      <organization>Facebook</organization>
      <address>
        <email>dr@fb.com</email>
        <uri>http://www.davidrecordon.com/</uri>
      </address>
    </author>

    <date year="2011" month="March" day="31" />

    <abstract>
      <t>
        This specification describes how to use bearer tokens when accessing OAuth 2.0
        protected resources.
      </t>
    </abstract>
  </front>

  <middle>

    <section title='Introduction'>
      <t>
        OAuth enables clients to access protected resources by
        obtaining an access token, which is defined in <xref
        target="I-D.ietf-oauth-v2"/> as "a string representing an access
        authorization issued to the client", rather than using the
        resource owner's credentials.
      </t>
      <t>
        Tokens are issued to clients by an authorization server with the approval of
        the resource owner. The client uses the access token to access the protected resources
        hosted by the resource server. This specification describes how to make protected resource
        requests when the OAuth access token is a bearer token.
      </t>
      <t>
        This specification defines the use of bearer tokens with OAuth
        over <xref target='RFC2616'>HTTP</xref> using <xref
        target='RFC5246'>TLS</xref>. Other specifications may extend
        it for use with other transport protocols.
      </t>

      <section title='Notational Conventions'>
        <t>
          The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD
          NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this document are to be interpreted as
          described in <xref target='RFC2119' />.
        </t>
        <t>
          This document uses the Augmented Backus-Naur Form (ABNF)
          notation of <xref target='I-D.ietf-httpbis-p1-messaging'
          />. Additionally, the following rules are included from
          <xref target='RFC2617' />: realm; from
          <xref target='RFC3986' />: URI-Reference; and from
	  <xref target='I-D.ietf-httpbis-p1-messaging' />: RWS
	  and quoted-string.
        </t>
        <t>
          Unless otherwise noted, all the protocol parameter names and values are case sensitive.
        </t>
      </section>

      <section title='Terminology'>
        <t>
          <list style='hanging'>
            <t hangText="Bearer Token">
              <vspace />
              A security token with the property that any party in
              possession of the token (a "bearer") can use the token
              in any way that any other party in possession of it can.
              Using a bearer token does not require a bearer to prove
              possession of cryptographic key material
              (proof-of-possession).
            </t>
          </list>
        </t>
        <t>
          All other terms are as defined in <xref target="I-D.ietf-oauth-v2" />.
        </t>
      </section>

      <section title='Overview'>
        <t>
          OAuth provides a method for clients to access a protected resource on behalf of a
          resource owner. Before a client can access a protected resource, it must first obtain
          authorization (access grant) from the resource owner and then exchange the access grant for
          an access token (representing the grant's scope, duration, and other attributes). The
          client accesses the protected resource by presenting the access token to the resource
          server.
        </t>
        <t>
          The access token provides an abstraction layer, replacing different authorization
          constructs (e.g. username and password, assertion) for a single token understood by the
          resource server. This abstraction enables issuing access tokens valid for a short time
          period, as well as removing the resource server's need to understand a wide range of
          authentication schemes.
        </t>
        <figure title='Abstract Protocol Flow' anchor='Figure 1'>
          <artwork>
<![CDATA[+--------+                               +---------------+
|        |--(A)- Authorization Request ->|   Resource    |
|        |                               |     Owner     |
|        |<-(B)----- Access Grant -------|               |
|        |                               +---------------+
|        |
|        |           Access Grant &      +---------------+
|        |--(C)--- Client Credentials -->| Authorization |
| Client |                               |     Server    |
|        |<-(D)----- Access Token -------|               |
|        |                               +---------------+
|        |
|        |                               +---------------+
|        |--(E)----- Access Token ------>|    Resource   |
|        |                               |     Server    |
|        |<-(F)--- Protected Resource ---|               |
+--------+                               +---------------+]]>
          </artwork>
        </figure>
        <t>
          The abstract flow illustrated in <xref target='Figure 1' /> describes the overall
          OAuth 2.0 protocol architecture. The following steps are specified within this
          document:

          <list>
            <t>
              E) The client makes a protected resource request to the resource server by presenting
              the access token.
            </t>
            <t>
              F) The resource server validates the access token, and if valid, serves the request.
            </t>
          </list>
        </t>
      </section>
    </section>

    <section title='Authenticated Requests'>
      <t>
        Clients SHOULD make authenticated requests with a bearer token
        using the <spanx style='verb'>Authorization</spanx> request
        header field defined by <xref target='RFC2617' />.
	Resource servers MUST accept authenticated
        requests using the <spanx style='verb'>Bearer</spanx> HTTP
        authorization scheme as described in <xref
        target='authz-header' />, and MAY support additional methods.
      </t>
      <t>
        Alternatively, clients MAY transmit the access token in the
        HTTP body when using the <spanx
        style='verb'>application/x-www-form-urlencoded</spanx> content
        type as described in <xref target='body-param' />; or clients
        MAY transmit the access token in the HTTP request URI in the
        query component as described in <xref target='query-param'
        />. Resource servers MAY support these alternative methods.
      </t>
      <t>
	Clients SHOULD NOT use the request body or URI unless the
	<spanx style='verb'>Authorization</spanx> request header field
	is not available, and MUST NOT use more than one method to
	transmit the token in each request.  Because of the <xref
	target="sec-con">Security Considerations</xref> associated
	with the URI method, it SHOULD NOT be used unless no other
	method is feasible.
      </t>

      <section title='The Authorization Request Header Field' anchor='authz-header'>
        <t>
          The <spanx style='verb'>Authorization</spanx> request header
          field is used by clients to make authenticated requests with
          bearer tokens.  The client uses the <spanx
          style='verb'>Bearer</spanx> authentication scheme to transmit
          the access token in the request.
        </t>
        <figure>
          <preamble>
            For example:
          </preamble>
          <artwork>
<![CDATA[GET /resource HTTP/1.1
Host: server.example.com
Authorization: Bearer vF9dft4qmT]]>
          </artwork>
        </figure>
        <t>
          The <spanx style='verb'>Authorization</spanx> header field uses the framework defined by
          <xref target='RFC2617' /> as follows:
        </t>
        <figure>
          <artwork>
<![CDATA[credentials    = "Bearer" RWS access-token
access-token   = 1*( quoted-char / <"> )

quoted-char    =   "!" / "#" / "$" / "%" / "&" / "'" / "("
                 / ")" / "*" / "+" / "-" / "." / "/" / DIGIT
                 / ":" / "<" / "=" / ">" / "?" / "@" / ALPHA
                 / "[" / "]" / "^" / "_" / "`" / "{" / "|"
                 / "}" / "~" / "\" / "," / ";"]]>
          </artwork>
        </figure>
      </section>

      <section title='Form-Encoded Body Parameter' anchor='body-param'>
        <t>
          When including the access token in the HTTP request
          entity-body, the client adds the access token to the request
          body using the <spanx style='verb'>bearer_token</spanx>
          parameter.  The client MUST NOT use this method unless the
          following conditions are met:
          <list style='symbols'>
            <t>
              The HTTP request entity-body is single-part.
            </t>
            <t>
              The entity-body follows the encoding requirements of the
              <spanx style='verb'>application/x-www-form-urlencoded</spanx> content-type as
              defined by <xref target='W3C.REC-html401-19991224' />.
            </t>
            <t>
              The HTTP request entity-header includes the <spanx style='verb'>Content-Type</spanx>
              header field set to <spanx style='verb'>application/x-www-form-urlencoded</spanx>.
            </t>
            <t>
              The HTTP request method is one for which a body is
              permitted to be present in the request.  In particular,
              this means that the <spanx style='verb'>GET</spanx>
              method MUST NOT be used.
            </t>
          </list>
        </t>
        <t>
          The entity-body can include other request-specific
          parameters, in which case, the <spanx
          style='verb'>bearer_token</spanx> parameter MUST be properly
          separated from the request-specific parameters by an <spanx
          style='verb'>&amp;</spanx> character (ASCII code 38).
        </t>
        <figure>
          <preamble>
            For example, the client makes the following HTTP request using transport-layer
            security:
          </preamble>
          <artwork>
<![CDATA[POST /resource HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

bearer_token=vF9dft4qmT]]>
          </artwork>
        </figure>
	<t>
	  The <spanx style='verb'>application/x-www-form-urlencoded</spanx>
	  method SHOULD NOT be used except in application contexts
	  where participating browsers do not have access to the
	  <spanx style='verb'>Authorization</spanx> request header
	  field.
	</t>
      </section>

      <section title='URI Query Parameter' anchor='query-param'>
        <t>
          When including the access token in the HTTP request URI, the client adds the access
          token to the request URI query component as defined by <xref target='RFC3986' /> using
          the <spanx style='verb'>bearer_token</spanx> parameter.
        </t>
        <figure>
          <preamble>
            For example, the client makes the following HTTP request using transport-layer
            security:
          </preamble>
          <artwork>
<![CDATA[GET /resource?bearer_token=vF9dft4qmT HTTP/1.1
Host: server.example.com]]>
          </artwork>
        </figure>
        <t>
          The HTTP request URI query can include other
          request-specific parameters, in which case, the <spanx
          style='verb'>bearer_token</spanx> parameter MUST be properly
          separated from the request-specific parameters by an <spanx
          style='verb'>&amp;</spanx> character (ASCII code 38).
        </t>
        <figure>
          <preamble>
            For example:
          </preamble>
          <artwork>
<![CDATA[http://example.com/resource?x=y&bearer_token=vF9dft4qmT]]>
          </artwork>
        </figure>
	<t>
	  Because of the <xref target="sec-con">Security
	  Considerations</xref> associated with the URI method, it
	  SHOULD NOT be used unless no other method is feasible.
	</t>
      </section>

      <section title='The WWW-Authenticate Response Header Field' anchor='authn-header'>
        <t>
          If the protected resource request does not include
          authentication credentials or contains an invalid access
          token, the resource server MUST include the HTTP <spanx
          style='verb'>WWW-Authenticate</spanx> response header field;
          it MAY include it in response to other conditions as well.
          The <spanx style='verb'>WWW-Authenticate</spanx> header
          field uses the framework defined by <xref target='RFC2617'
          /> as follows:
        </t>
        <figure>
          <artwork>
<![CDATA[challenge       = "Bearer" [ RWS 1#param ]

param           = realm / scope /
                  error / error-desc / error-uri /
                  ( token "=" ( token / quoted-string ) )

scope           = "scope" "=" <"> scope-v *( SP scope-v ) <">
scope-v         = 1*quoted-char

quoted-char     = ALPHA / DIGIT /
                  "!" / "#" / "$" / "%" / "&" / "'" / "(" / ")" /
                  "*" / "+" / "-" / "." / "/" / ":" / "<" / "=" /
                  ">" / "?" / "@" / "[" / "]" / "^" / "_" / "`" /
                  "{" / "|" / "}" / "~" / "\" / "," / ";"

error           = "error" "=" quoted-string
error-desc      = "error_description" "=" quoted-string
error-uri       = "error_uri" = <"> URI-reference <">]]>
          </artwork>
        </figure>
        <t>
          The <spanx style='verb'>scope</spanx> attribute is a space-delimited list of scope values
          indicating the required scope of the access token for accessing the requested resource.
          The <spanx style='verb'>scope</spanx> attribute MUST NOT appear more than once.
        </t>
        <t>
          If the protected resource request included an access token and failed authentication, the
          resource server SHOULD include the <spanx style='verb'>error</spanx> attribute to provide
          the client with the reason why the access request was declined. The parameter value is
          described in <xref target='resource-error-codes' />. In addition, the resource server MAY
          include the <spanx style='verb'>error_description</spanx> attribute to provide a
          human-readable explanation, and the <spanx style='verb'>error_uri</spanx> attribute with
          an absolute URI identifying a human-readable web page explaining the error.
          The <spanx style='verb'>error</spanx>, <spanx style='verb'>error_description</spanx>, and
          <spanx style='verb'>error_uri</spanx> attribute MUST NOT appear more than once.
        </t>
        <figure>
          <preamble>
            For example, in response to a protected resource request without authentication:
          </preamble>
          <artwork>
<![CDATA[HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"]]>
          </artwork>
        </figure>
        <figure>
          <preamble>
            And in response to a protected resource request with an authentication attempt using an
            expired access token:
          </preamble>
          <artwork>
<![CDATA[HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
                  error="invalid_token",
                  error_description="The access token expired"]]>
          </artwork>
        </figure>

        <section title='Error Codes' anchor='resource-error-codes'>
          <t>
            When a request fails, the resource server responds using the appropriate HTTP status
            code (typically, 400, 401, or 403), and includes one of the following error codes in
            the response:

            <list style='hanging' hangIndent='6'>
              <t hangText='invalid_request'>
                <vspace />
                The request is missing a required parameter, includes an unsupported parameter or
                parameter value, repeats the same parameter, uses more than one method for
                including an access token, or is otherwise malformed. The resource server SHOULD
                respond with the HTTP 400 (Bad Request) status code.
              </t>
              <t hangText='invalid_token'>
                <vspace />
                The access token provided is expired, revoked, malformed, or invalid for other
                reasons. The resource SHOULD respond with the HTTP 401 (Unauthorized) status
                code. The client MAY request a new access token and retry the protected resource
                request.
              </t>
              <t hangText='insufficient_scope'>
                <vspace />
                The request requires higher privileges than provided by the access token. The
                resource server SHOULD respond with the HTTP 403 (Forbidden) status code and MAY
                include the <spanx style='verb'>scope</spanx> attribute with the scope necessary to
                access the protected resource.
              </t>
            </list>
          </t>
          <t>
	    New errors MUST be separately registered in the OAuth
	    Errors registry as described by <xref
	    target='errors-registry' />.
          </t>
          <t>
            If the request lacks any authentication information (i.e. the client was unaware
            authentication is necessary or attempted using an unsupported authentication method),
            the resource server SHOULD NOT include an error code or other error information.
          </t>
          <figure>
            <preamble>
              For example:
            </preamble>
            <artwork>
<![CDATA[HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"]]>
            </artwork>
          </figure>
        </section>

      </section>

    </section>

    <section title='Security Considerations' anchor="sec-con">

      <t>
	This section describes the relevant security threats regarding
	token handling when using bearer tokens and describes how to
	mitigate these threats.
      </t>

      <section anchor="threats" title="Security Threats">

	<t>
	  The following list presents several common threats against
	  protocols utilizing some form of tokens. This list of
	  threats is based on NIST Special Publication 800-63 <xref
	  target="NIST800-63"/>. Since this document builds on the
	  OAuth 2.0 specification, we exclude a discussion of threats
	  that are described there or in related documents.
	</t>

	<t>
	  <list style="hanging">
	    <t hangText="Token manufacture/modification:">
	      An attacker may generate a bogus token or modify the
	      token contents (such as the authentication or attribute
	      statements) of an existing token, causing the resource
	      server to grant inappropriate access to the client.
	      For example, an attacker may modify the token to extend
	      the validity period; a malicious client may modify the
	      assertion to gain access to information that they
	      should not be able to view.
	    </t>
	    <t hangText="Token disclosure:">
	      Tokens may contain authentication and attribute
	      statements that include sensitive information.
	    </t>
	    <t hangText="Token redirect:">
	      An attacker uses the token generated for consumption by
	      resource server to obtain access to another resource
	      server.
	    </t>
	    <t hangText="Token replay:">
	      An attacker attempts to use a token that has already
	      been used with that resource server in the past.
	    </t>
	  </list> 
	</t>
      </section> 

      <section anchor="mitigation" title="Threat Mitigation"> 

	<t>
	  A large range of threats can be mitigated by protecting the
	  contents of the token by using a digital signature or a
	  Message Authentication Code (MAC).
	  Alternatively, a bearer token can contain a reference to
	  authorization information, rather than encoding the
	  information directly. Such references MUST be infeasible for
	  an attacker to guess; using a reference may require an extra
	  interaction between a server and the token issuer to resolve
	  the reference to the authorization information.
	</t>
	<t>
	  This document does not specify the encoding or the contents
	  of the token; hence detailed recommendations for token
	  integrity protection are outside the scope of this document.
	  We assume that the token integrity protection is sufficient
	  to prevent the token from being modified.
	</t>
	<t>
	  To deal with token redirect, it is important for the
	  authorization server to include the identity of the intended
	  recipients, namely a single resource server (or a list of
	  resource servers).  Restricting the use of the token to a
	  specific scope is also recommended.
	</t>
	<t>
	  To provide protection against token disclosure,
	  confidentiality protection is applied via <xref
	  target='RFC5246'>TLS</xref> with a
	  ciphersuite that offers confidentiality protection.  This
	  requires that the communication interaction between the
	  client and the authorization server, as well as the
	  interaction between the client and the resource server,
	  utilize confidentiality protection.
	  Since TLS is mandatory to
	  implement and to use with this specification, it is the
	  preferred approach for preventing token disclosure via the
	  communication channel. For those cases where the client
	  is prevented from observing the contents of the token, token
	  encryption has to be applied in addition to the usage of TLS
	  protection.
	</t>
	<t>
	  To deal with token capture and replay,
	  the following recommendations are
	  made: First, the lifetime of the token has to be limited by
	  putting a validity time field inside the protected part of
	  the token.  Note that using short-lived (one hour or less)
	  tokens significantly reduces the impact of one of them being
	  leaked.  Second, confidentiality protection of the exchanges
	  between the client and the authorization server and between
	  the client and the resource server MUST be applied, for instance,
	  through the use of <xref target='RFC5246'>TLS</xref>.  As a
	  consequence, no eavesdropper along the communication path is
	  able to observe the token exchange. Consequently, such an
	  on-path adversary cannot replay the token.
	  Furthermore, when
	  presenting the token to a resource server, the client MUST
	  verify the identity of that resource server, as per <xref target="RFC2818" />.
	  Note that the
	  client MUST validate the TLS certificate chain when making
	  these requests to protected resources.  Presenting the token
	  to an unauthenticated and unauthorized resource server or
	  failing to validate the certificate chain will allow
	  adversaries to steal the token and gain unauthorized access
	  to protected resources.
	</t>
      </section> 
 
      <section title="Summary of Recommendations">
	<t>
	  <list style="hanging">
	    <t hangText="Safeguard bearer tokens">
	      Client implementations MUST ensure that bearer tokens
	      are not leaked to unintended parties, as they will be
	      able to use them to gain access to protected resources.
	      This is the primary security consideration when using
	      bearer tokens and underlies all the more
	      specific recommendations that follow.
	    </t>
	    <t hangText="Validate SSL certificate chains">
	      The client must validate the TLS certificate chain when
	      making requests to protected resources.  Failing to do
	      so may enable DNS hijacking attacks to steal the token
	      and gain unintended access.
	    </t>
	    <t hangText="Always use TLS (https)">
	      Clients MUST always use <xref target='RFC5246'>TLS</xref>
	      (https) when making requests
	      with bearer tokens.  Failing to do so exposes the token
	      to numerous attacks that could give attackers unintended
	      access.
	    </t>
	    <t hangText="Don't store bearer tokens in cookies">
	      Implementations MUST NOT store bearer tokens within
	      cookies that can be sent in the clear (which is the
	      default transmission mode for cookies).
	    </t>
	    <t hangText="Issue short-lived bearer tokens">
	      Using short-lived (one hour or less) bearer tokens can
	      reduce the impact of one of them being leaked.  In
	      particular, only short-lived bearer tokens should be
	      issued to clients that run within a web browser or other
	      environments where information leakage may occur.
	    </t>
	    <t hangText="Don't pass bearer tokens in page URLs">
	      Browsers, web servers, and other software may not
	      adequately secure URLs in the browser history, web
	      server logs, and other data structures.  If bearer
	      tokens are passed in page URLs (typically as query
	      string parameters), attackers might be able to steal
	      them from the history data, logs, or other unsecured
	      locations.  Instead, pass bearer tokens in HTTP message
	      headers or message bodies for which confidentiality
	      measures are taken.
	    </t>
	  </list>
	</t>
      </section>
    </section>

    <section title='IANA Considerations'>   

      <section title='OAuth Access Token Type Registration'>
        <t>
          This specification registers the following access token type in the OAuth Access Token
          Type Registry.
        </t>

        <section title='The "Bearer" OAuth Access Token Type'>
          <t>
            <list style='hanging'>
              <t hangText='Type name:'>
                <vspace />
                Bearer
              </t>
              <t hangText='Additional Token Endpoint Response Parameters:'>
                <vspace />
                (none)
              </t>
              <t hangText='HTTP Authentication Scheme(s):'>
                <vspace />
                Bearer
              </t>
              <t hangText='Change controller:'>
                <vspace />
                IETF
              </t>
              <t hangText='Specification document(s):'>
                <vspace />
                [[ this document ]]
              </t>
            </list>
          </t>
        </section>
      </section>

      <section title='The OAuth Errors Registry' anchor='errors-registry'>
        <t>
          This specification establishes the OAuth Errors registry.
        </t>
        <t>
          Additional errors for inclusion in the authorization endpoint response,
	  the token endpoint response, or the resource endpoint response
	  are registered on the advice of one or more Designated Experts (appointed by
          the IESG or their delegate), with a Specification Required (using terminology from
          <xref target='RFC5226' />). However, to allow for the allocation of values prior to
          publication, the Designated Expert(s) may approve registration once they are satisfied
          that such a specification will be published.
        </t>
        <t>
          Registration requests should be sent to the [TBD]@ietf.org mailing list for review and
          comment, with an appropriate subject (e.g., "Request for error: example").
          [[ Note to RFC-EDITOR: The name of the mailing list should be determined in consultation
          with the IESG and IANA. Suggested name: oauth-ext-review. ]]
        </t>
        <t>
          Before a period of 14 days has passed, the Designated Expert(s) will either approve or
          deny the registration request, communicating this decision both to the review list and to
          IANA. Denials should include an explanation and, if applicable, suggestions as to how to
          make the request successful. Registration requests that are undetermined for a period
          longer than 21 days can be brought to the IESG's attention (using the iesg@iesg.org
          mailing list) for resolution.
        </t>

        <section title='Registration Template'>
          <t>
            <list style='hanging'>
              <t hangText='Error name:'>
                <vspace />
                The name requested (e.g., "example").
              </t>
              <t hangText='Error usage location:'>
                <vspace />
                The location(s) where the error can be used. The possible locations are:
                authorization response, token response, resource response.
              </t>
              <t hangText='Change controller:'>
                <vspace />
                For standards-track RFCs, state "IETF". For others, give the name of the
                responsible party. Other details (e.g., postal address, e-mail address, home page
                URI) may also be included.
              </t>
              <t hangText='Specification document(s):'>
                <vspace />
                Reference to document that specifies the error, preferably including a URI that
                can be used to retrieve a copy of the document. An indication of the relevant
                sections may also be included, but is not required.
              </t>
            </list>
          </t>
        </section>

        <section title='Initial Registry Contents'>
          <t>
            The OAuth Errors Registry's initial contents are:
          </t>
          <t>
            <list style='symbols'>
              <t>
                Error name: invalid_request
              </t>
              <t>
                Error usage location: resource response
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Error name: invalid_token
              </t>
              <t>
                Error usage location: resource response
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Error name: insufficient_scope
              </t>
              <t>
                Error usage location: resource response
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
        </section>

      </section>

    </section> 

  </middle>

  <back>

    <references title='Normative References'>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2818.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5226.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-httpbis-p1-messaging-13.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-v2-13.xml' ?>

    </references>

    <references title="Informative References">

      <reference anchor="NIST800-63">
        <front>
          <title>NIST Special Publication 800-63-1, INFORMATION SECURITY</title>
          <author fullname="William E. Burr" initials="W." surname="Burr">
            <organization>NIST</organization>
          </author>
          <author fullname="Donna F. Dodson" initials="D." surname="Dodson">
            <organization>NIST</organization>
          </author>
          <author fullname="Ray A. Perlner" initials="R." surname="Perlner">
            <organization>NIST</organization>
          </author>
          <author fullname="W. Timothy Polk" initials="T." surname="Polk">
            <organization>NIST</organization>
          </author>
          <author fullname="Sarbari Gupta" initials="S." surname="Gupta">
            <organization>NIST</organization>
          </author>
          <author fullname="Emad A. Nabbus" initials="E." surname="Nabbus">
            <organization>NIST</organization>
          </author>
          <date month="December" year="2008"/>
        </front>
        <format target="http://csrc.nist.gov/publications/PubsDrafts.html#SP-800-63-Rev.%201" type="HTML"/>
      </reference>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-httpbis-p7-auth-13.xml'?>

    </references> 

    <section title='Acknowledgements'>
      <t>
        The following people contributed to preliminary versions of this document:
        Blaine Cook (BT), Brian Eaton (Google), Yaron Goland (Microsoft), Brent Goldman (Facebook),
        Raffi Krikorian (Twitter), Luke Shepard (Facebook), and Allen Tom (Yahoo!). The content and
        concepts within are a product of the OAuth community, the WRAP community, and the OAuth Working
        Group.
      </t>
      <t>
        The OAuth Working Group has dozens of very active contributors who proposed ideas and
        wording for this document, including:
        Michael Adams, Andrew Arnott, Dirk Balfanz, Brian Campbell, Leah Culver, Bill de hÓra,
        Brian Ellin, Igor Faynberg, George Fletcher, Tim Freeman, Evan Gilbert, Justin Hart,
        John Kemp, Eran Hammer-Lahav, Chasen Le Hara, Michael B. Jones, Torsten Lodderstedt,
	Eve Maler, James Manger, Laurence Miao,
        Chuck Mortimore, Anthony Nadalin, Justin Richer, Peter Saint-Andre, Nat Sakimura, Rob Sayre,
        Marius Scurtescu, Naitik Shah, Justin Smith, Jeremy Suriel, Christian Stübner, Paul Tarjan,
        and Franklin Tse.
      </t>
    </section>

    <section title='Document History'>
      <t>
        [[ to be removed by the RFC editor before publication as an RFC ]]
      </t>
      <t>
        -04
        <list style='symbols'>
	  <t>
	    Edits responding to working group last call feedback on
	    -03.  Specific edits enumerated below.
	  </t>
	  <t>
	    Added Bearer Token definition in Terminology section.
	  </t>
          <t>
            Changed parameter name <spanx
            style="verb">oauth_token</spanx> to <spanx
            style="verb">bearer_token</spanx>.
	  </t>
	  <t>
	    Added realm parameter to <spanx
	    style='verb'>WWW-Authenticate</spanx> response to comply
	    with <xref target='RFC2617' />.
	  </t>
	  <t>
	    Removed "[ RWS 1#auth-param ]" from <spanx
	    style="verb">credentials</spanx> definition since it did
	    not comply with the ABNF in <xref
	    target='I-D.ietf-httpbis-p7-auth' />.
	  </t>
	  <t>
	    Removed restriction that the <spanx
	    style="verb">bearer_token</spanx> (formerly <spanx
	    style="verb">oauth_token</spanx>) parameter be the last
	    parameter in the entity-body and the HTTP request URI
	    query.
	  </t>
	  <t>
	    Do not require WWW-Authenticate Response in a reply to a
	    malformed request, as an HTTP 400 Bad Request response
	    without a WWW-Authenticate header is likely the right
	    response in some cases of malformed requests.
	  </t>
	  <t>
	    Removed OAuth Parameters registry extension.
	  </t>
	  <t>
	    Numerous editorial improvements suggested by working group
	    members.
	  </t>
        </list>
      </t>
       <t>
        -03
        <list style='symbols'>
	  <t>
	    Restored the WWW-Authenticate response header
	    functionality deleted from the framework specification in
	    draft 12 based upon the specification text from draft 11.
	  </t>
	  <t>
	    Augmented the OAuth Parameters registry by adding two
	    additional parameter usage locations: "resource request"
	    and "resource response".
	  </t>
          <t>
            Registered the "oauth_token" OAuth parameter with usage
            location "resource request".
          </t>
          <t>
            Registered the "error" OAuth parameter.
          </t>
	  <t>
	    Created the OAuth Error registry and registered errors.
	  </t>
	  <t>
	    Changed the "OAuth2" OAuth access token type name to
	    "Bearer".
	  </t>
        </list>
      </t>
      <t>
        -02
        <list style='symbols'>
          <t>
            Incorporated feedback received on draft 01.  Most changes
            were to the security considerations section.  No normative
            changes were made.  Specific changes included:
          </t>
	  <t>
	    Changed terminology from "token reuse" to "token capture
	    and replay".
	  </t>
	  <t>
	    Removed sentence "Encrypting the token contents is another
	    alternative" from the security considerations since it was
	    redundant and potentially confusing.
	  </t>
	  <t>
	    Corrected some references to "resource server" to be
	    "authorization server" in the security considerations.
	  </t>
	  <t>
	    Generalized security considerations language about
	    obtaining consent of the resource owner.
	  </t>
	  <t>
	    Broadened scope of security considerations description for
	    recommendation "Don't pass bearer tokens in page URLs".
	  </t>
	  <t>
	    Removed unused reference to OAuth 1.0.
	  </t>
	  <t>
	    Updated reference to framework specification and updated
	    David Recordon's e-mail address.
	  </t>
	  <t>
	    Removed security considerations text on authenticating
	    clients.
	  </t>
	  <t>
	    Registered the "OAuth2" OAuth access token type and
	    "oauth_token" parameter.
	  </t>
        </list>
      </t>
      <t>
        -01
        <list style='symbols'>
          <t>
            First public draft, which incorporates feedback received
            on -00 including enhanced Security Considerations content.
            This version is intended to accompany OAuth 2.0 draft 11.
          </t>
        </list>
      </t>
      <t>
        -00
        <list style='symbols'>
          <t>
            Initial draft based on preliminary version of OAuth 2.0 draft 11.
          </t>
        </list>
      </t>
    </section>     

  </back>

</rfc>
