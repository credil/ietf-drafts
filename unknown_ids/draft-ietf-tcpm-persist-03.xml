<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<rfc category="info" docName="draft-ietf-tcpm-persist-03.txt"
     ipr="trust200902">
  <front>
    <title abbrev="TCP persist condition">Clarification of sender behavior in
    persist condition.</title>

    <author fullname="Murali Bashyam" initials="M." surname="Bashyam">
      <organization>Ocarina Networks, Inc</organization>

      <address>
        <postal>
          <street>42 Airport Parkway</street>

          <city>San Jose</city>

          <region>CA</region>

          <code>95110</code>

          <country>USA</country>
        </postal>

        <phone>+1 (408) 512-2966</phone>

        <email>mbashyam@ocarinanetworks.com</email>
      </address>
    </author>

    <author fullname="Mahesh Jethanandani" initials="M."
            surname="Jethanandani">
      <organization>Cisco</organization>

      <address>
        <postal>
          <street>170 Tasman Drive</street>

          <city>San Jose</city>

          <region>CA</region>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <phone>+1 (408) 527-8230</phone>

        <email>mahesh@cisco.com</email>
      </address>
    </author>

    <author fullname="Anantha Ramaiah" initials="A." surname="Ramaiah">
      <organization>Cisco</organization>

      <address>
        <postal>
          <street>170 Tasman Drive</street>

          <city>San Jose</city>

          <region>CA</region>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <phone>+1 (408) 525-6486</phone>

        <email>ananth@cisco.com</email>
      </address>
    </author>

    <date day="14" month="February" year="2011" />

    <area>Transport</area>

    <workgroup>TCP Maintenance and Minor Extensions Working Group</workgroup>

    <keyword>Internet-Draft</keyword>

    <abstract>
      <t>This document clarifies the Zero Window Probes (ZWP) described in
      <xref target="RFC1122">Requirements for Internet Hosts</xref>. In
      particular, it clarifies the actions that can be taken on connections
      which are experiencing the ZWP condition.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>Section 4.2.2.17 of <xref target="RFC1122">Requirements for Internet
      Hosts </xref> says:<list style="empty">
          <t>"A TCP MAY keep its offered receive window closed indefinitely.
          As long as the receiving TCP continues to send acknowledgments in
          response to the probe segments, the sending TCP MUST allow the
          connection to stay open."</t>

          <t>DISCUSSION:<list style="empty">
              <t>It is extremely important to remember that ACK
              (acknowledgment) segments that contain no data are not reliably
              transmitted by TCP.</t>
            </list></t>
        </list></t>

      <t>Therefore zero window probing SHOULD be supported to prevent a
      connection from hanging forever if ACK segments that re-opens the window
      is lost. The condition where the sender goes into the Zero-Window Probe
      (ZWP) mode is typically known as the 'persist condition'.</t>

      <t>This guidance is not intended to preclude resource management by the
      operating system or application, which may request connections to be
      aborted regardless of them being in the persist condition, and the TCP
      implementation should, of course, comply by aborting such connections.
      TCP implementations strictly adhering to Section 4.2.2.17 of <xref
      target="RFC1122">Requirements for Internet Hosts</xref> have the
      potential to make systems vulnerable to Denial of Service (DoS)
      scenarios where attackers tie up resources by keeping connections in the
      persist condition, if such resource management is not performed external
      to the protocol implementation.</t>

      <t>Section 3 of this document describes why implementations must not
      close connections merely because they are in the persist condition, yet
      must still allow such connections to be closed on command. Section 4
      outlines a simple attack on systems that do not sufficiently manage
      connections in this state. Section 5 concludes with a
      requirements-language clarification to the RFC 1122 requirement.</t>
    </section>

    <section title="Requirements">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in RFC 2119.</t>

      <t>When used in lowercase, these words convey their typical use in
      common language, and they are not to be interpreted as described in
      <xref target="RFC2119">Key words for use in RFCs </xref>.</t>
    </section>

    <section title="Discussion on RFC 1122 Requirement">
      <t>Per <xref target="RFC1122">Requirements for Internet Hosts</xref> as
      long as the ACK's are being received for window probes, a connection can
      continue to stay in the persist condition. This is an important feature
      because typically applications would want the TCP connection to stay
      open unless an application explicitly closes the connection.</t>

      <t>For example take the case of user running a network print job during
      which the printer runs out of paper and is waiting for the user
      intervention to reload the paper tray. The printer may not be reading
      data from the printing application during this time. Although this may
      result in a prolonged ZWP state, it would be premature for TCP to take
      action on its own and close the printer connecting merely due to its
      lack of progress. Once the printer&rsquo;s paper tray is reloaded (which
      may be minutes, hours, or days later), the print job should be able to
      continue uninterrupted over the same TCP connection.</t>

      <t>Systems that adhere too strictly to the above verbiage of <xref
      target="RFC1122">Requirements for Internet Hosts</xref> may fall victim
      to DoS attacks, by not supporting sufficient mechanisms to allow release
      of system resources tied up by connections in the persist condition
      during times of resource exhaustion. For example, if we take the case of
      a busy server where multiple (attacker) clients can advertise a zero
      window forever (by reliably acknowledging the ZWPs). This could
      eventually lead to the resource exhaustion in the server system. In such
      cases the application or operating system would need to take appropriate
      action on the TCP connection to reclaim their resources and continue to
      persist legitimate connections.</t>

      <t>The problem is applicable to TCP and TCP derived flow-controlled
      transport protocols like SCTP.</t>

      <t>Clearly, a system should be robust to such attacks and allow
      connections in the persist condition to be aborted in the same way as
      any other connection. Section 5 of this document provides the requisite
      clarification, in standards language, to permit such resource
      management</t>
    </section>

    <section title="Description of one Simple Attack">
      <t>To illustrate a potential DoS scenario, consider the case where many
      client applications open TCP connection with a <xref
      target="RFC2616">HTTP</xref> server, and each sends a GET request for a
      large page and stops reading the response partway through. This causes
      the client's TCP implementation to advertise a zero window to the
      server. For every large HTTP response, the server is left holding on to
      the response data in its sending queue. The amount of response data held
      will depend on the size of the send buffer and the advertised window. If
      the clients never read the data in their receive queues in order to
      clear the persist condition, the server will continue to hold that data
      indefinitely. Since there may be a limit to the operating system kernel
      memory available for TCP buffers, this may result in DoS to legitimate
      connections by locking up the necessary resources. If the above scenario
      persists for an extended period of time, it will lead to TCP buffers and
      connection blocks starvation causing legitimate existing connections and
      new connection attempts to fail.</t>

      <t>A clever application might detect such attacks with connections that
      are not making progress, and could close these connections. However,
      some applications might have transferred all the data to the TCP socket
      and subsequently closed the socket leaving the connection with no
      controlling process, hereby referred to as orphaned connections. Such
      orphaned connections might be left holding the data indefinitely in
      their sending queue.</t>

      <t>CERT has released an advisory in this regard<xref target="VU723308">
      </xref> and is making vendors aware of this DoS scenario.</t>

      <t>Appendix A of this document provides a simple mitigation to such
      attacks. More sophisticated attacks are possible which can build on this
      vulnerability and may remain effective even when mitigated with the
      mechanism prescribed in Appendix A of this document.</t>
    </section>

    <section title="Clarification Regarding RFC 1122 Requirements">
      <t>As stated in <xref target="RFC1122">Requirements for Internet
      Hosts</xref>, a TCP implementation MUST NOT close a connection merely
      because it seems to be stuck in the ZWP or persist condition. Unstated
      in RFC 1122, but implicit for system robustness, a TCP implementation
      MUST allow connections in the ZWP or persist condition to be closed or
      aborted by their applications or other resource management routines in
      the operating system.</t>

      <t>In order to provide some level of robustness to DoS attacks, a TCP
      implementation MAY provide a feedback regarding the persist condition to
      the application if requested to do so or an application or other
      resource manager can query the health of the TCP connection allowing it
      to take the desired action. All such techniques are in complete
      compliance of <xref target="RFC0793">TCP</xref> and <xref
      target="RFC1122">Requirements for Internet Hosts</xref>.</t>
    </section>

    <section title="IANA Considerations">
      <t>This document has no actions for IANA.</t>
    </section>

    <section title="Security Considerations">
      <t>This document discusses one system security consideration as
      described in <xref target="RFC3552">Security Considerations
      Guidelines</xref>. In particular it describes a inappropriate use of a
      system that is acting as a server for many users. That and a possible
      DoS attack is discussed in Section 3.</t>
    </section>

    <section title="Acknowledgments">
      <t>This document was inspired by the recent discussions that took place
      regarding the TCP persist condition issue in the TCPM WG mailing list
      <xref target="TCPM"></xref>. The outcome of those discussions was to
      come up with a draft that would clarify the intentions of the ZWP
      referred by RFC 1122. We would like to thank Mark Allman, Ted Faber and
      David Borman for clarifying the objective behind this draft. To Wesley
      Eddy for his extensive editorial comments and to Dan Wing, Mark Allman
      and Fernando Gont on providing feedback on the document.</t>
    </section>

    <section title="Appendix A, Programming Considerations">
      <t>As a potential implementation guideline, the authors are documenting
      some of the programming considerations. This should not be in any way
      construed as the only way that the mitigation against the DoS condition
      can be achieved. Applications can choose their own implementations on
      how to deal with this DoS scenario, and should be aware that this
      mitigation is only effective at combating the simple attack scenario
      described in this document, and does not handle even slightly more
      sophisticated attacks based on the same or similar concepts.</t>

      <t>Note, this persist condition is mutually exclusive from a persist
      condition where we are not getting zero windows acknowledgement for the
      probes.</t>

      <t>The technique described here allows an application to specify to the
      operating system that it consents to aborting such connections.
      Implementers can choose to in addition provide an asynchronous
      notification interface to inform the application of the connection in
      the persist condition, if they want the application to abort the
      connection. In the case where the application has terminated or orphaned
      the connection, the TCP or kernel code will go ahead and clear the
      connection and reclaim its resources.</t>

      <t>The key consideration in putting a solution together is to be able to
      detect a connection that is in persist condition. The application
      through the socket interface will be able to inform TCP implementation
      or kernel of how long they are willing to have connections wait in the
      persist condition.</t>

      <t>PERSIST_TIMEOUT</t>

      <t>Format:</t>

      <t>int setsockopt (sockfd, SOL_TCP, SO_PERSISTTIMEO,
      persist_timeout_value, length)</t>

      <t>int getsockopt (sockfd, SOL_TCP, SO_PERSISTTIMEO,
      persist_timeout_value, length)</t>

      <t>where persist_timeout_value recorded in seconds is of type int, the
      length is set to four.</t>

      <t>The above interface allows applications to inform TCP what to do when
      the local connection stays in the persist condition. Note that the
      default value of persist_timeout_value is -1 which implies it is
      infinite.</t>

      <t>TCP sender will save the current time in the connection block when it
      receives a zero window ACK. This time is referred to as the persist
      entry time. Thereafter every time the probe timer expires and before it
      sends another probe or an ACK carrying zero window is received a check
      will be done to see how long the connection has been in persist
      condition by comparing the current time to the persist entry time. If
      the timeout has been exceeded, the connection will be aborted.</t>

      <t>Any time a ACK is received that advertises a non-zero window, the
      persist entry time is cleared to take the connection out of the persist
      condition.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.0793'?>

      <?rfc include='reference.RFC.1122'?>

      <?rfc include='reference.RFC.2119'?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.2616"?>

      <?rfc include='reference.RFC.3552'?>

      <reference anchor="TCPM">
        <front>
          <title>IETF TCPM Working Group and mailing list
          http://www.ietf.org/html.charters/tcpm.charter.html</title>

          <author fullname="TCPM" surname="TCPM">
            <organization></organization>
          </author>

          <date />
        </front>
      </reference>

      <reference anchor="VU723308">
        <front>
          <title>Vulnerability in Web Servers
          http://www.kb.cert.org/vuls/id/723308</title>

          <author fullname="Art Manion" surname="Manion">
            <organization>CERT</organization>

            <address>
              <uri>http://www.cert.org</uri>
            </address>
          </author>

          <date day="10" month="July" year="2009" />
        </front>
      </reference>
    </references>
  </back>
</rfc>
