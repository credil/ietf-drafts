<?xml version="1.0"?>
<?rfc symrefs="yes"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes" ?>
<?rfc compact="yes" ?>
<?rfc sortrefs="no" ?>

<rfc ipr="trust200902"
     docName="draft-jesup-rtcweb-data-00.txt" category='info'>
<front>
    <title abbrev="data P2P in RTCWEB">
       RTCWeb Datagram Connection
    </title>


    <author initials="R." surname="Jesup" fullname="Randell Jesup">
      <organization>Mozilla</organization>
      <address>
	<postal>
          <street></street>
	  <code></code> 
	  <city></city> 
	  <country></country>
 	</postal>
	<email>randell-ietf@jesup.org</email>
      </address>
    </author>



   <author initials="S." surname="Loreto" fullname="Salvatore Loreto">
    <organization>Ericsson</organization>
    <address>
    	<postal>
        <street>Hirsalantie 11</street>
        <code>02420</code> 
     	  <city>Jorvas</city> 
    	  <country>Finland</country>
     	</postal>
    	<email>salvatore.loreto@ericsson.com</email>
    </address>
  </author>


    <author initials="M." surname="Tuexen" fullname="Michael Tuexen">
      <organization>Muenster University of Applied Sciences</organization>
      <address>
	<postal>
          <street>Stegerwaldstrasse 39</street>
	  <code>48565</code> 
	  <city> Steinfurt</city> 
	  <country>Germany</country>
 	</postal>
	<email>tuexen@fh-muenster.de</email>
      </address>
    </author>



    <date year="2011" />
    <area>RAI</area>
    <workgroup>RTCWeb Working Group</workgroup>
    <keyword></keyword>
    <keyword></keyword>
    <abstract>
    <t>
This document investigates the possibilities for designing a generic transport
service that allows Web Browser to exchange generic data in a peer to peer way.
Different transport protocols and their properties are investigated in order
to identify the most appropriate one.
    </t>
    <t>

    </t>

    </abstract>
</front>
<middle>

<section title="Introduction">
<t>The issue of how best to handle non-media data types in the context of RTCWEB is still under discussion
in the mailing list; there have been several proposal on how to address this problem, but there is not yet a clear consensus 
on the actual solution.</t>

<t>However it seems to be a general agreement that for NAT traversal purpose it has to be:</t>
<t>FOO/UDP/IP</t>
<t>or most likely:</t> 
<t>FOO/DTLS/UDP/IP (for confidentiality, source authenticated, integrity protected transfers)</t>
<t>where FOO is a protocol that is supposed to provide congestion control and possible some type of framing or stream concept.</t>

<t>Moreover there has been a clear interest for both an unreliable and a reliable peer to peer datagram based channel.</t>

<t>This document provides Requirement and use cases for both unreliable and reliable peer to peer datagram base channel,
provide an overview of the pro and cons of the different proposed solutions, and finally analyze in more detail the SCTP
based solution.</t>



</section>


<section title="Requirements">

<t>
This section lists the requirements for P2P data connections between two browsers.
</t>

<t><list style="hanging">
   <t hangText="Req. 1">Multiple simultaneous datagram streams must be supported.  Note that there may 0 or more media streams in parallel with the data streams, and the number and state (active/inactive) of the media streams may change at any time.</t><t></t>

   <t hangText="Req. 2">Both reliable and unreliable datagram streams must be supported.</t><t></t>

   <t hangText="Req. 3">Data streams must be congestion controlled; either individually,
     as a class, or in conjunction with the media streams, to ensure
     that datagram exchanges don't cause congestion problems for the
     media streams, and that the rtcweb PeerConnection as a whole is
     fair with competing streams such as TCP.</t><t></t>

   <t hangText="Req. 4">The application should be able to provide guidance as to the 
     relative priority of each datagram stream relative to each other,
     and relative to the media streams. [ TBD: how this is encoded and
     what the impact of this is. ]  This will interact with the
     congestion control.</t><t></t>

   <t hangText="Req. 5">Datagram streams must be encrypted; allowing for confidentiality, 
     integrity and source authentication. See the security spec [xxx] for detailed info.</t><t></t>


   <t hangText="Req. 6">Consent and NAT traversal mechanism:  These are handled by the 
     PeerConnection's ICE <xref target="RFC5245"/> connectivity checks and
     optional TURN servers.</t><t></t>

</list></t>

</section>


<section title="Use cases." anchor="sec-use-cases">

<section title="Use cases for unreliable datagram based channel" anchor="sec-use-cases-unreliable">

<t><list style="hanging">

   <t hangText="U-C 1">A real-time game where position and object state information is
   sent via one or more unreliable data channels.  Note that at any time there may be no media channels, or all media channels may be inactive.</t><t></t>
	
   <t hangText="U-C 2">Non-critical state updates about a user in a video chat or 
   conference, such as Mute state.</t><t></t>

</list></t>


</section>

<section title="Use cases for reliable channels (datagram or stream)." anchor="sec-use-cases-reliable">

<t>Note that either reliable datagrams or streams are possible; reliable streams would be fairly simple to layer on top of SCTP reliable datagrams with in-order delivery.</t><t></t>

<t><list style="hanging">

   <t hangText="U-C 3"> A real-time game where critical state information needs to be
   transferred, such as control information.  Typically this would be datagrams.</t><t></t>
	
   <t hangText="U-C 4">Non-realtime file transfers between people chatting.  This could be datagrams or streaming; streaming might be an easier fit</t><t></t>

   <t hangText="U-C 5">Realtime text chat while talking with multiple people in a 
   conference.  Typically this would be datagrams.</t><t></t>

   <t hangText="U-C 6">Renegotiation of the set of media streams in the PeerConnection.  Typically this would be datagrams</t><t></t>


</list></t>

</section>


</section>


<section title="Protocol alternatives"  anchor="sec-p-a">

<section title="Datagrams over DTLS over DCCP over UDP." anchor="sec-p-a-1">

        <figure title="stack diagram" anchor="fig-1"><artwork>
    <![CDATA[
                 +------+
                 |WEBAPP|
                 +------+
                 | DTLS |
          +-------------+
          | STUN | DCCP |
          +-------------+
          |    UDP      |
          +-------------+              
    ]]>
        </artwork></figure>



<t>DCCP <xref target="RFC4340"/> adds to a UDP-like foundation the minimum mechanisms necessary to support congestion control.
It is a unicast, connection-oriented protocol with bidirectional data flow.</t>

<t>The main downside of DCCP is the uncertainty of the DCCP implementations. Moreover DCCP only
meets the requirements for the unreliable data channel, so in order to satisfy the reliable data channel requirements
there is a need to build a new mechanism on top of DCCP or use a different protocol for it.</t>

<t>The main advantage of DCCP is that the Congestion Control (CC) methods are modularly separated from its core, 
that allows each application to choose a method it prefers.</t>

</section>


<section title="Datagrams over SCTP over DTLS over UDP." anchor="sec-p-a-2">

        <figure title="stack diagram" anchor="fig-2"><artwork>
    <![CDATA[
                 +------+
                 |WEBAPP|
                 +------+
                 | SCTP |
          +-------------+
          | STUN | DTLS |
          +-------------+
          |    UDP      |
          +-------------+              
    ]]>
        </artwork></figure>

<t>An SCTP <xref target="RFC4960"/> based solution will provide several interesting features among the others: Multistreaming, Ordered and Unordered delivery,
Reliability and partial-Reliability <xref target="RFC3758"/>, and Dynamic Address Reconfiguration <xref target="RFC5061"/>. The SCTP feature so seems to satisfy all the requirements for both
the unreliable and the reliable scenario.</t>

<t>TBD: any downside for SCTP??? </t>

<t>There are SCTP implementations for all the different OS: Linux (mainline kernel 2.6.36), FreeBSD (release kernel 8.2), Mac OS X, Windows (SctpDrv4) and Solaris (OpenSolaris 2009.06),
as well as a user-land SCTP implementation based on the FreeBSD implementation).</t>

<t>The SCTP solution is analyzed in more detail in <xref target='sec-sctp'/>.</t>

</section>

<section title="A new protocol on top of UDP." anchor="sec-p-a-3">
<t>This option requires to at least build a congestion control (CC) mechanism on top
of the plain UDP.</t>

<t>In designing it we have to follow carefully the guidelines provided in <xref target="RFC5405"/>.</t>


        <figure title="stack diagram UDP" anchor="fig-3"><artwork>
    <![CDATA[
                 +------+
                 |WEBAPP|
                 +------+
                 |  CC  |
          +-------------+
          | STUN | DTLS |
          +-------------+
          |    UDP      |
          +-------------+              
    ]]>
        </artwork></figure>

<t> TBD: describe here the proposal to implement in the userspace TCP/DTLS/UDP for reliable data channels, 
and UDP-with-TFRC/DTLS/UDP for unreliable data channels (e.g.  libjingle).</t>

</section>

<section title="A RTP compatible protocol." anchor="sec-p-a-4">

<t> TBD </t>
</section>




</section>


<section title="Datagrams over SCTP over DTLS over UDP." anchor="sec-sctp">



<section title="User Space vs Kernel implementation." anchor="sec-sctp-1">
<t>Even kernel implementation of SCTP are already available for all the different platforms (see <xref target='sec-p-a-2'/> ),
there are compelling reasons that incline towards for a SCTP stack that works well in user land.</t>

<t>The main reason is deployability.</t>

<t>TBD..</t>

</section>

<section title="The envisioned usage of SCTP in the RTCWeb context" anchor="sec-sctp-2">
<t>The appealing features of SCTP in the RTCWeb context are:</t>
<t><list style="hanging">
   <t hangText="-">the congestion control which is TCP friendly.</t>
   <t hangText="-">the congestion control is modifiable for integration with media stream congestion control.</t>
   <t hangText="-">support for multiple channels with different characteristics.</t>
   <t hangText="-">support for out-of-order delivery.</t>
   <t hangText="-">support for large datagrams and PMTU-discovery and fragmentation.</t>
   <t hangText="-">the reliable or partial reliability support.</t>
</list></t>

<t>Multi streaming is probably also of interest.</t>

<t>Multihoming will not be used in this scenario. The SCTP layer would simply act as if it were running on a single-homed host, 
since that is the abstraction that the lower layers (e.g. UDP) would expose.</t>

</section>


<section title="SCTP/DTLS/UDP vs DTLS/SCTP/UDP" anchor="sec-sctp-3">
<t>The two alternatives being discussed in this subsection are shown
in the following <xref target='fig-sctp-layering'/>.</t>
<figure title='Two variants of SCTP and DTLS usage' anchor='fig-sctp-layering'>
<artwork>
                    +------+                    +------+
                    |WEBAPP|                    |WEBAPP|
                    +------+                    +------+
                    | DTLS |                    | SCTP |
             +-------------+             +-------------+
             | STUN | SCTP |             | STUN | DTLS |
             +-------------+             +-------------+
             |    UDP      |             |    UDP      |
             +-------------+             +-------------+
</artwork>
</figure>
<t>The UDP encapsulation of SCTP used in the protocol stack
shown on the left hand side of <xref target='fig-sctp-layering'/>
is specified in <xref target='I-D.ietf-tsvwg-sctp-udp-encaps'/> and the
usage of DTLS over SCTP is specified in <xref target='RFC6083'/>.
Using the UDP encapsulation of SCTP allows SCTP implementations
to run in user-land without any special privileges, but still allows
the support of SCTP kernel implementations.
This also requires no SCTP specific support in middleboxes like firewalls and
NATs. However, if multihoming is required, SCTP needs to setup the
associations iteratively, which requires support at the SCTP implementations.
If WEBAPP does not use multihoming, the support of the iterative association
setup procedure is not required. The SCTP payload is protected by DTLS, which
provides confidentiality, integrity and source authentication. SCTP-AUTH as
specified in <xref target='RFC4895'/> is used to provide integrity of
SCTP control information related to the user messages like the SCTP stream
identifier. Please note that the SCTP control information
(like the SCTP stream identifier) is sent unencrypted.</t>

<t>Considering the protocol stack on the right hand side of
<xref target='fig-sctp-layering'/>, the usage of DTLS over UDP is specified in
<xref target='I-D.ietf-tls-rfc4347-bis'/>. Using SCTP on top of DTLS is
currently unspecified. Since DTLS is typically implemented in user-land,
an SCTP user-land implementation has also to be used. Kernel SCTP implementations
can't be used. When using DTLS as the lower layer, only single homed SCTP
associations can be used, since DTLS does not expose any any address management
to its upper layer. DTLS implementations used for this stack must support
controlling fields of the IP layer like the DF-bit in case of IPv4 and the
DSCP field. This is required for performing path MTU discovery.
The DTLS implementation must also support sending user messages exceeding
the path MTU. When supporting multiple SCTP associations over a single DTLS
connection, incoming ICMP or ICMPv6 messages can't be processed by the SCTP
layer, since there is no way to identify the corresponding association.
Therefore the number of SCTP associations should be limited to one or ICMP and
ICMPv6 messages should be ignored.
In general, the lower layer interface of an SCTP implementation has to be
adopted to address the differences between IPv4 or IPv6 (being connection-less)
or DTLS (being connection-oriented).
When this stack is used, DTLS protects the complete SCTP packet, so it
provides confidentiality, integrity and source authentication
of the complete SCTP packet.</t>

<t>It should be noted that both stack alternatives support the usage of
multiple SCTP streams. A user message can be sent ordered or unordered
and, if the SCTP implementations support <xref target='RFC3758'/>,
with partial reliability. When using partial reliability, it might make
sense to use a policy limiting the number of retransmissions. Limiting
the number of retransmissions to zero provides a UDP like service where
each user messages is sent exactly once.</t>
<t>SCTP provides congestion control on a per-association base. This means
that all SCTP streams within a single SCTP association share the same
congestion window. Traffic not being sent over SCTP is not covered by
the SCTP congestion control.</t>
</section>




</section>





<section title="Message Format." anchor="sec-mes-format">

<t> TBD if we need also to design a framing or not.</t>

<t> At time of writing nobody has identified a real need for masking of UDP,
and DTLS is a much-preferred solution for encryption/authentication.</t>

<t>More SCTP already provides sequence number information (e.g. stream sequence numbers).
However there could be a need to support different kind of message (link in WebSocket where there is support
to distinguish between Unicode text and binary frames), since for SCTP they are all user message.
In the case there is this need a possibility is to map types to streams.</t>


</section>


<section title="Security Considerations" anchor="sec-security">
<t>
To be done.
</t>
</section>


<section title="IANA Considerations" anchor="sec-IANA">
<t>
This document does not require any actions by the IANA.
</t>
</section>


<section title="Acknowledgments">
<t>Many thanks for comments, ideas, and text from Cullen Jennings, Eric Rescorla,
Randall Stewart and Justin Uberti.</t>
</section>


</middle>

<back>
<references title="Informational References">
	<?rfc include="reference.RFC.3758"?>
	<?rfc include="reference.RFC.4340"?>
	<?rfc include="reference.RFC.4895"?>
	<?rfc include="reference.RFC.4960"?>
	<?rfc include="reference.RFC.5061"?>
	<?rfc include="reference.RFC.5245"?>
	<?rfc include="reference.RFC.5389"?>
	<?rfc include="reference.RFC.5405"?>
	<?rfc include="reference.RFC.6083"?>
	<?rfc include="reference.I-D.ietf-tls-rfc4347-bis"?>
	<?rfc include="reference.I-D.ietf-tsvwg-sctp-udp-encaps"?>
</references>
</back>

</rfc>

<!-- Change log 


-->


