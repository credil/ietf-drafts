<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>
<?rfc compact="yes" ?>
<rfc category="info" docName="draft-niccolini-sipclf-ipfix-03"
     ipr="trust200902">
  <front>
   <title abbrev="IPFIX file format for SIPCLF">
     IPFIX File Format for SIPCLF
   </title>

   <author fullname="Saverio Niccolini" initials="S.." surname="Niccolini">
    <organization abbrev="NEC">
      NEC Laboratories Europe, NEC Europe Ltd.
    </organization>
      <address>
        <postal>
          <street>Kurfuersten-Anlage 36</street>
          <city>Heidelberg</city>
          <code>69115</code>
          <country>Germany</country>
        </postal>
        <phone>+49 (0) 6221 4342 118</phone>
        <email>niccolini@neclab.eu</email>
        <uri>http://www.neclab.eu</uri>
      </address>
    </author>
    <author fullname="Benoit Claise" initials="B." surname="Claise">
      <organization>Cisco Systems Inc.</organization>
      <address>
        <postal>
          <street>De Kleetlaan 6a b1</street>
          <city>Diegem</city>
          <region></region>
          <code>1813</code>
          <country>Belgium</country>
        </postal>
        <phone>+32 2 704 5622</phone>
        <facsimile></facsimile>
        <email>bclaise@cisco.com</email>
        <uri></uri>
      </address>
    </author>
    
    <author initials="B." surname="Trammell" fullname="Brian Trammell">
      <organization abbrev="ETH Zurich">
        ETH Zurich 
      </organization>
      <address>
        <postal>
          <street>Gloriastrasse 35</street>
          <city>8092 Zurich</city>
          <country>Switzerland</country>
        </postal>
        <email>trammell@tik.ee.ethz.ch</email>
      </address>
    </author>
    
    <author initials="H." surname="Kaplan" fullname="Hadriel Kaplan">
      <organization abbrev="Acme Packet">Acme Packet</organization>
      <address>
        <postal>
          <street>71 Third Ave.</street>
          <city>Burlington</city>
          <region>MA</region>
          <code>01803</code>
          <country>USA</country>
        </postal>
        <phone></phone>
        <email>hkaplan@acmepacket.com</email>
      </address>
    </author>

    <date month="July" day="6" year="2010" />

    <abstract>
      <t>
        This draft defines an log file format conforming to the information 
        model defined in the SIP-CLF problem statement based upon
        the IPFIX File Format. It details the creation and intepretation of
        these files, and provides examples based on common SIP situations.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">

      <t>The SIPCLF WG is chartered to produce a format suitable for logging
      at any SIP element. The charter explicitly addresses the need to search,
      merge and summarize log records from one or more possibly diverse
      elements as well as the need to correlate messages from multiple
      elements. An additional consideration to be taken into account when
      defining the file format is the extensibility of SIP. SIPCLF is
      additionally chartered to identify the fields to appear in a log record
      and provide one or more formats for encoding those fields. As the <xref
      target="RFC5655">IPFIX File format</xref> meets these requirements,
      SIPCLF is presently considering an IPFIX File-based binary logging
      format, in addition to an ASCII text-based format. This document
      describes the IPFIX format.</t>

      <t>Specifically, this document defines new information elements for the
      SIPCLF IPFIX file format (based on the data model detailed in <xref
      target="I-D.gurbani-sipclf-problem-statement"></xref>), proposes common
      IPFIX Templates for this data model, and presents examples of an IPFIX
      File logging format for SIPCLF. For this purpose examples were taken
      from <xref target="RFC3665"></xref>. </t>

    </section>

    <section anchor="IM-IE" title="Information Elements for SIPCLF">
      <t>
        This section formally defines information elements for 
        SIPCLF based on (and extending) the data model initially proposed 
        in <xref target="I-D.gurbani-sipclf-problem-statement"></xref>.
      </t>
      <t>
        The information appearing in a SIPCLF log record is largely already
        defined in other documents, e.g., in <xref target="RFC3261"></xref>.
      </t>
      <t>
        The information elements are shown in the table below; new 
        Information Elements necessary for SIPCLF that are not yet
        registered with IANA are provisionally located within the 
        number space assigned to Private Enterprise Number (PEN),
        here registered within the private enterprise number 35566, 
        which belongs to one of the authors of this draft. It is intended 
        that these Information Elements be registered within the IANA number 
        space, should this draft become a Proposed Standard; however, it is
        necessary to define real Information Elements in order to provide
        examples for experimentation.
      </t>

      <texttable> 
        <ttcol align="left">Name</ttcol> 
        <ttcol align="left">PEN/Number</ttcol> 
        <ttcol align="left">&lt;Type&gt;/Description</ttcol>

        <c>observationTimeSeconds</c><c>322</c><c>&lt;dateTimeSeconds&gt;
        Timestamp of the request or response represented as the
        number of seconds since the Unix epoch</c>

        <c>sourceIPv4Address</c><c>8</c><c>&lt;ipv4Address&gt;
        The IPv4 address of the source of the SIP message</c>

        <c>sourceIPv6Address</c><c>27</c><c>&lt;ipv6Address&gt;
        The IPv6 address of the source of the SIP message</c>

        <c>sourceTransportPort</c><c>7</c><c>&lt;unsigned16&gt;
        The source port number of source of the SIP message</c>

        <c>destinationIPv4Address</c><c>12</c><c>&lt;ipv4Address&gt;
        The IPv4 destination address for the SIP message</c>

        <c>destinationIPv6Address</c><c>28</c><c>&lt;ipv6Address&gt;
        The IPv6 destination address for the SIP message</c>

        <c>destinationTransportPort</c><c>11</c><c>&lt;unsigned16&gt;
        The destination port number for the SIP message</c>
        
        <c>transportType</c><c>4</c><c>&lt;unsigned8&gt;
        The type of transport for the SIP message (UDP vs. TCP vs. SCTP)</c>
        
        <c>sipAuthUsername</c><c>35566/401</c><c>&lt;string&gt;
        The SIP user name by which the user has been authenticated</c>
        
        <c>sipMethod</c><c>35566/402</c><c>&lt;unsigned8&gt;
        The SIP method from the CSeq header, as per the sipMethod subregistry defined below.</c>
        
        <c>sipRequestURI</c><c>35566/403</c><c>&lt;string&gt;
        The Request URI, including any parameters</c>

        <c>sipFromURI</c><c>35566/404</c><c>&lt;string&gt;
        The From URI</c>

        <c>sipFromTag</c><c>35566/405</c><c>&lt;string&gt;
        The From header field tag parameter value</c>

        <c>sipToURI</c><c>35566/406</c><c>&lt;string&gt;
        The To URI.</c>

        <c>sipToTag</c><c>35566/407</c><c>&lt;string&gt;
        The To header field tag parameter value, if present</c>

        <c>sipCallId</c><c>35566/408</c><c>&lt;string&gt;
        The Call-ID header field value</c>
        
        <c>sipSequenceNumber</c><c>35566/409</c><c>&lt;unsigned32&gt;
        The sequence number from the CSeq header.</c>
        
        <c>sipContactURI</c><c>35566/410</c><c>&lt;string&gt;
        The Contact URI, possibly multiple</c>
        
        <c>sipPaiURI</c><c>35566/411</c><c>&lt;string&gt;
        The P-Asserted-Identity URI</c>
        
        <c>sipResponseStatus</c><c>35566/412</c><c>&lt;unsigned16&gt;
        The SIP response code returned upstream</c>

        <c>sipServerTransaction</c><c>35566/413</c><c>&lt;string&gt;
        The transaction identifier associated with the server transaction</c>

        <c>sipClientTransaction</c><c>35566/414</c><c>&lt;string&gt;
        The transaction identifier associated with the server transaction</c>
        
        <c>sipSessionId</c><c>35566/415</c><c>&lt;string&gt;
        Session identification code - the value received in a Session-ID 
        header field, or generated if one is inserted</c>
        </texttable>

      <t>The sipMethod IE encodes the supported methods from <xref
      target="RFC3261"/> as integers, by the order in which they appear in the
      IANA SIP Parameters Methods registry at
      http://www.iana.org/assignments/sip-parameters:</t>

      <texttable> 
        <ttcol align="left">Number</ttcol> 
        <ttcol align="left">Method</ttcol> 
        <ttcol align="left">Notes</ttcol>
        
  <c>0 </c><c>Unknown</c><c>The logging process did not recognize the SIP method.</c>
  <c>1 </c><c>ACK      </c><c>defined in RFC3261</c>
  <c>2 </c><c>BYE      </c><c>defined in RFC3261</c>
  <c>3 </c><c>CANCEL   </c><c>defined in RFC3261</c>
  <c>4 </c><c>INFO     </c><c>defined in RFC2976</c>
  <c>5 </c><c>INVITE   </c><c>defined in RFC3261</c>
  <c>6 </c><c>MESSAGE  </c><c>defined in RFC3428</c>
  <c>7 </c><c>NOTIFY   </c><c>defined in RFC3265</c>
  <c>8 </c><c>OPTIONS  </c><c>defined in RFC3261</c>
  <c>9 </c><c>PRACK    </c><c>defined in RFC3262</c>
  <c>10</c><c>PUBLISH  </c><c>defined in RFC3903</c>
  <c>11</c><c>REFER    </c><c>defined in RFC3515</c>
  <c>12</c><c>REGISTER </c><c>defined in RFC3261</c>
  <c>13</c><c>SUBSCRIBE</c><c>defined in RFC3265</c>
  <c>14</c><c>UPDATE   </c><c>defined in RFC3311</c>
    </texttable>

        
    </section>

    <section anchor="IPFIX-file" title="IPFIX File Format for SIPCLF">

      <t>The IPFIX File format is defined in <xref target="RFC5655"/> as a
      serialized set of IPFIX Messages containing Data Records organized in
      Sets defined by Templates; these are in turn defined in <xref
      target="RFC5101">the IPFIX Protocol specification</xref>. The file
      format is designed to facilitate interoperability, flexibility, and
      reusability among a wide variety of storage, processing, and analysis
      tools. In defining an IPFIX File format for SIPCLF, we seek to leverage
      this work. All that is necessary to define, then, are any Information
      Elements not yet defined in the IPFIX Information Model, as in the
      previous section; and a set of recommended Templates for representing
      the records required by SIPCLF. This is done in the examples below.</t>

    <section anchor="IPFIX-example" title="Example">

      <t>This section presents several views of an example IPFIX-based SIPCLF
      log, in order to increase understanding of what IPFIX would mean for
      SIPCLF. We present both binary and textual forms. The tools to generate
      this section are based upon the open-source <xref
      target="ripfix">ripfix</xref> implementation of IPFIX, maintined by one
      of the authors of this draft.</t>

      <t>The information model in <xref
      target="I-D.trammell-ipfix-text-iespec">textual IE specification
      format</xref> is as follows; IE numbers appear in parentheses, IPFIX
      types in angle brackets, and sizes ("v" for variable-length) in square
      brackets:</t>

      <figure title="Information Model" anchor="sipclf-fim">
        <artwork><![CDATA[
sipAuthUsername(35566/401)<string>[v]
sipMethod(35566/402)<unsigned8>[1]
sipRequestURI(35566/403)<string>[v]
sipFromURI(35566/404)<string>[v]
sipFromTag(35566/405)<string>[v]
sipToURI(35566/406)<string>[v]
sipToTag(35566/407)<string>[v]
sipCallId(35566/408)<string>[v]
sipSequenceNumber(35566/409)<unsigned32>[4]
sipContactURI(35566/410)<string>[v]
sipPaiURI(35566/411)<string>[v]
sipResponseStatus(35566/412)<unsigned16>[2]
sipServerTransaction(35566/413)<string>[v]
sipClientTransaction(35566/414)<string>[v]
sipSessionId(35566/415)<string>[v]
        ]]></artwork>
      </figure>
      
      <t>In accordance wth version -02 of
      <xref target="I-D.gurbani-sipclf-problem-statement"></xref>,
      when a UAC generates a request, the SIPCLF record generated follows the
      template (given in textual IE specification format; IE numbers and
      sizes are given for convenience):</t>

      <figure title="Request Template, IPv4" anchor="sipclf-reqtmpl-v4">
        <artwork><![CDATA[
observationTimeSeconds(322)[4]
sourceIPv4Address(8)[4]
destinationIPv4Address(12)[4]
sourceTransportPort(7)[2]
destinationTransportPort(11)[2]
sipSequenceNumber(35566/409)[4]
sipMethod(35566/402)[1]
sipRequestURI(35566/403)[v]
sipClientTransaction(35566/414)[v]
sipToURI(35566/406)[v]
sipToTag(35566/407)[v]
sipFromURI(35566/404)[v]
sipFromTag(35566/405)[v]
sipCallId(35566/408)[v]
        ]]></artwork>
      </figure>

      <t>If, instead, the request is sent via IPv6, the addresses are
      replaced as follows:</t>

      <figure title="Request Template, IPv6" anchor="sipclf-reqtmpl-v6">
        <artwork><![CDATA[
observationTimeSeconds(322)[4]
sourceIPv6Address(27)[16]
destinationIPv6Address(28)[16]
sourceTransportPort(7)[2]
destinationTransportPort(11)[2]
sipSequenceNumber(35566/409)[4]
sipMethod(35566/402)[1]
sipRequestURI(35566/403)[v]
sipClientTransaction(35566/414)[v]
sipToURI(35566/406)[v]
sipToTag(35566/407)[v]
sipFromURI(35566/404)[v]
sipFromTag(35566/405)[v]
sipCallId(35566/408)[v]
        ]]></artwork>
      </figure>
    
      <t>Similarly, when a UAC receives a response, the SIPCLF record 
      that is subsequently logged follows the template:</t>
    
      <figure title="Response Template, IPv4" anchor="sipclf-resptmpl-v4">
        <artwork><![CDATA[
observationTimeSeconds(322)[4]
sourceIPv4Address(8)[4]
destinationIPv4Address(12)[4]
sourceTransportPort(7)[2]
destinationTransportPort(11)[2]
sipSequenceNumber(35566/409)[4]
sipResponseStatus(35566/412)[2]
sipMethod(35566/402)[1]
sipServerTransaction(35566/413)[v]
sipToURI(35566/406)[v]
sipToTag(35566/407)[v]
        ]]></artwork>
      </figure>

      <t>and the IPv6 response template is modified similarly to the request template:</t>

      <figure title="Response Template, IPv6" anchor="sipclf-resptmpl-v6">
        <artwork><![CDATA[
observationTimeSeconds(322)[4]
sourceIPv6Address(27)[16]
destinationIPv6Address(28)[16]
sourceTransportPort(7)[2]
destinationTransportPort(11)[2]
sipSequenceNumber(35566/409)[4]
sipResponseStatus(35566/412)[2]
sipMethod(35566/402)[1]
sipServerTransaction(35566/413)[v]
sipToURI(35566/406)[v]
sipToTag(35566/407)[v]
        ]]></artwork>
      </figure>

      <t>Please note that the information model here defined currently
      uses only mandatory fields, additional optional fields will
      be added as this draft develops.</t>    
    
      <t>Other examples are also possible following what detailed in
      in <xref target="I-D.gurbani-sipclf-problem-statement"></xref>,
      and will elaborated further as this document is extended and when
      the reference data model stabilizes.</t>
    
<!--
      <t>A SIPCLF IPFIX file then consists of an IPFIX Message containing the
      template definitions above, followed by multiple IPFIX Messages containing 
      the records in Data Sets corresponding to those template definitions, 
      as in the figure below:</t>

      <figure title="File Example Structure" anchor="ex-structure">
        <artwork><![CDATA[
          +=================================================+
          | IPFIX Message                       seq. 0      |
          | +---------------------------------------------+ |
          | | Message Header (16 bytes)                   | |
          | +---------------------------------------------+ |
          | | Template Set (ID 2)                  5 recs | |
          | |   SIPCLF IPv4 request tmpl          ID 256  | |
          | |   SIPCLF IPv4 auth request tmpl     ID 257  | |
          | |   SIPCLF IPv6 request tmpl          ID 258  | |
          | |   SIPCLF IPv6 auth request tmpl     ID 259  | |
          | |   SIPCLF response tmpl              ID 260  | |
          | +---------------------------------------------+ |
          +=================================================+
          | IPFIX Message                       seq. 0      |
          | +---------------------------------------------+ |
          | | Message Header (16 bytes)                   | |
          | +---------------------------------------------+ |
          | | Data Set (ID 256)                    1 rec  | |
          | |  contains an unauthenticated IPv4 request   | |
          | +---------------------------------------------+ |
          | | Data Set (ID 260)                    1 rec  | |
          | |  contains a response                        | |
          | +---------------------------------------------+ |
          | | Data Set (ID 259)                    2 recs | |
          | |  contains authenticated IPv6 requests       | |
          | +---------------------------------------------+ |
          | | Data Set (ID 260)                    1 rec  | |
          | |  contains a response                        | |
          | +---------------------------------------------+ |
          +=================================================+
          | IPFIX Message                       seq. 5      |
          |                    . . .                        |
        ]]></artwork>
      </figure>
      
      <t>Within each data set is one or more records, packed and encoded according
      to the template. Fixed length fields appear in place without additional
      framing or length prefixing. Variable length fields use length prefixing.
      Values 0-254 bytes long can be represented using a single-byte length prefix,
      0x00 - 0xFE. Values 0-65516 bytes long can be represented using a three-byte
      length prefix, 0xFF followed by the length in network byte order. All SIPCLF
      variable-length fields are strings, and all IPFIX strings are encoded using
      UTF8.</t>
      
      <t>[Note that the placement of data set and message boundaries are implementation
      dependent; some implementations may group and emit records by template, some
      may have only one record per data set or data set per message. If SIPCLF
      requires strict ordering of records by time, this can be specified, but is not
      mandatory IPFIX or IPFIX File behavior.]</t>
-->

      <t>Now that we have defined an information model and templates using
      them, we can define a request log record and a response log record, and
      generate example IPFIX output using our ripfix-based Assuming that our
      IPv4 request template has a template ID of 1234, we can create the
      request log record with the following input to our tool, which accepts
      colon-separated Information Element, value pairs (the _ipfix_tid
      "special" IE selects a pre-exported template):</t>

      <figure title="Request record example input" anchor="sipclf-reqrec-in">
        <artwork><![CDATA[
_ipfix_tid: 1234
observationTimeSeconds: 2010-04-01 01:10:12 +0000
sipMethod: 5 # INVITE
sipSequenceNumber: 1
sipRequestURI: sip:bob@biloxi.example.com
sourceIPv4Address: 192.168.0.3
sourceTransportPort: 37920
destinationIPv4Address: 192.168.0.2
destinationTransportPort: 5060
sipClientTransaction: ABC
sipToURI: sip:bob@biloxi.example.com
sipToTag: 
sipFromURI: sip:alice@atlanta.example.com
sipFromTag: 9fxced76sl
sipCallId: 3848276298220188511@atlanta.example.com
        ]]></artwork>
      </figure>
  
      <t>and the response record a follows:</t>
      <figure title="Response record example input" anchor="sipclf-resprec-in">
        <artwork><![CDATA[
_ipfix_tid: 4321
observationTimeSeconds: 2010-04-01 01:10:14 +0000
sipMethod: 5 # INVITE
sipSequenceNumber: 1
sourceIPv4Address: 192.168.0.2
sourceTransportPort: 5060 
destinationIPv4Address: 192.168.0.3
destinationTransportPort: 37920
sipResponseStatus: 180
sipServerTransaction: 123
sipToURI: sip:bob@biloxi.example.com
sipToTag: 8321234356
        ]]></artwork>
      </figure>

      <t>Bringing it all together: request and response records, templates,
      and IPFIX File format framing, we have the following file in Base64
      format:</t>

      <figure title="SIPCLF log file, base64" anchor="sipclf-base64">
        <artwork><![CDATA[
AAoBp0wzRUMAAAAAAADd1QACAKwE0gAOAUIABAAIAAQADAAEAAcAAgALAAKB
mQAEAACK7oGSAAEAAIrugZP//wAAiu6Bnv//AACK7oGW//8AAIrugZf//wAA
iu6BlP//AACK7oGV//8AAIrugZj//wAAiu4Q4QALAUIABAAIAAQADAAEAAcA
AgALAAKBmQAEAACK7oGcAAIAAIrugZIAAQAAiu6Bnf//AACK7oGW//8AAIru
gZf//wAAiu4E0gCmS7PydMCoAAPAqAAClCATxAAAAAEFGnNpcDpib2JAYmls
b3hpLmV4YW1wbGUuY29tA0FCQxpzaXA6Ym9iQGJpbG94aS5leGFtcGxlLmNv
bQEAHXNpcDphbGljZUBhdGxhbnRhLmV4YW1wbGUuY29tCjlmeGNlZDc2c2wn
Mzg0ODI3NjI5ODIyMDE4ODUxMUBhdGxhbnRhLmV4YW1wbGUuY29tEOEARUuz
8nbAqAACwKgAAxPElCAAAAABALQFAzEyMxpzaXA6Ym9iQGJpbG94aS5leGFt
cGxlLmNvbQo4MzIxMjM0MzU2
        ]]></artwork>
      </figure>

      <t>This is not a particularly useful representation for explaining the
      example, but does demonstrate the binary nature of the format. Here is a
      debug hex dump of the same file, annotated below each line or block 
      to show the interesting structures:</t>

      <figure title="SIPCLF log file, annotated hex dump" anchor="sipclf-out">
        <artwork><![CDATA[
0000: 00 0a 01 a7 4c 33 45 43 00 00 00 00 00 00 dd d5  ....L3EC........
     [ IPFIX message header, length 423              ]
0010: 00 02 00 ac                                      ....
     [ Template set header, set length 172 ] 
                  04 d2 00 0e 01 42 00 04 00 08 00 04      .....B......
0020: 00 0c 00 04 00 07 00 02 00 0b 00 02 81 99 00 04  ................
0030: 00 00 8a ee 81 92 00 01 00 00 8a ee 81 93 ff ff  ................
0040: 00 00 8a ee 81 9e ff ff 00 00 8a ee 81 96 ff ff  ................
0050: 00 00 8a ee 81 97 ff ff 00 00 8a ee 81 94 ff ff  ................
0060: 00 00 8a ee 81 95 ff ff 00 00 8a ee 81 98 ff ff  ................
0070: 00 00 8a ee                                      ....
     [ Template 1234 (0x04d2), 14 elements ] 
                  10 e1 00 0b 01 42 00 04 00 08 00 04      .....B......
0080: 00 0c 00 04 00 07 00 02 00 0b 00 02 81 99 00 04  ................
0090: 00 00 8a ee 81 9c 00 02 00 00 8a ee 81 92 00 01  ................
00a0: 00 00 8a ee 81 9d ff ff 00 00 8a ee 81 96 ff ff  ................
00b0: 00 00 8a ee 81 97 ff ff 00 00 8a ee 
     [ Template 4321 (0x10e1), 11 elements ] 
                                          04 d2 00 a6  ................
     [ Data set header, ID 1234 (0x04d2), length 166 ]
00c0: 4b b3 f2 74 c0 a8 00 03 c0 a8 00 02 94 20 13 c4  K..t......... ..
00d0: 00 00 00 01 05 1a 73 69 70 3a 62 6f 62 40 62 69  ......sip:bob@bi
00e0: 6c 6f 78 69 2e 65 78 61 6d 70 6c 65 2e 63 6f 6d  loxi.example.com
00f0: 03 41 42 43 1a 73 69 70 3a 62 6f 62 40 62 69 6c  .ABC.sip:bob@bil
0100: 6f 78 69 2e 65 78 61 6d 70 6c 65 2e 63 6f 6d 01  oxi.example.com.
0110: 00 1d 73 69 70 3a 61 6c 69 63 65 40 61 74 6c 61  ..sip:alice@atla
0120: 6e 74 61 2e 65 78 61 6d 70 6c 65 2e 63 6f 6d 0a  nta.example.com.
0130: 39 66 78 63 65 64 37 36 73 6c 27 33 38 34 38 32  9fxced76sl'38482
0140: 37 36 32 39 38 32 32 30 31 38 38 35 31 31 40 61  76298220188511@a
0150: 74 6c 61 6e 74 61 2e 65 78 61 6d 70 6c 65 2e 63  tlanta.example.c
0160: 6f 6d                                            om
     [ First record ]
            10 e1 00 45                                  ...E
     [ Data set header, ID 4321 (0x10e1), length 69 ]
                        4b b3 f2 76 c0 a8 00 02 c0 a8        K..v......
0170: 00 03 13 c4 94 20 00 00 00 01 00 b4 05 03 31 32  ..... ........12
0180: 33 1a 73 69 70 3a 62 6f 62 40 62 69 6c 6f 78 69  3.sip:bob@biloxi
0190: 2e 65 78 61 6d 70 6c 65 2e 63 6f 6d 0a 38 33 32  .example.com.832
01a0: 31 32 33 34 33 35 36                             1234356
     [ Second record ]
        ]]></artwork>
      </figure>

      <t>Notice here that although in this example, more than a third of the
      size of the file is templates, that templates need only appear once per
      log file; in real applications, the overhead of the templates is
      amortized over thousands to millions of records.</t>

      <t>To demonstrate convertability between text and binary
      representations, here we show the output of the rfdump tool provided
      with ripfix, which prints templates and records in human-readable form
      (note here that the observation domain ID of the message exported by our
      tool is 56789):</t>

      <figure title="SIPCLF log file, rfdump output" anchor="sipclf-out-dump">
        <artwork><![CDATA[
----- template 56789/1234 -----
observationTimeSeconds(322)<dateTimeSeconds>[4]
sourceIPv4Address(8)<ipv4Address>[4]
destinationIPv4Address(12)<ipv4Address>[4]
sourceTransportPort(7)<unsigned16>[2]
destinationTransportPort(11)<unsigned16>[2]
sipSequenceNumber(35566/409)<unsigned32>[4]
sipMethod(35566/402)<unsigned8>[1]
sipRequestURI(35566/403)<string>[v]
sipClientTransaction(35566/414)<string>[v]
sipToURI(35566/406)<string>[v]
sipToTag(35566/407)<string>[v]
sipFromURI(35566/404)<string>[v]
sipFromTag(35566/405)<string>[v]
sipCallId(35566/408)<string>[v]
----- template 56789/4321 -----
observationTimeSeconds(322)<dateTimeSeconds>[4]
sourceIPv4Address(8)<ipv4Address>[4]
destinationIPv4Address(12)<ipv4Address>[4]
sourceTransportPort(7)<unsigned16>[2]
destinationTransportPort(11)<unsigned16>[2]
sipSequenceNumber(35566/409)<unsigned32>[4]
sipResponseStatus(35566/412)<unsigned16>[2]
sipMethod(35566/402)<unsigned8>[1]
sipServerTransaction(35566/413)<string>[v]
sipToURI(35566/406)<string>[v]
sipToTag(35566/407)<string>[v]
----- record 56789/1234 -----
observationTimeSeconds => 2010-04-01 03:10:12 +0200
sourceIPv4Address => 192.168.0.3
destinationIPv4Address => 192.168.0.2
sourceTransportPort => 37920
destinationTransportPort => 5060
sipSequenceNumber => 1
sipMethod => 5
sipRequestURI => sip:bob@biloxi.example.com
sipClientTransaction => ABC
sipToURI => sip:bob@biloxi.example.com
sipToTag => 
sipFromURI => sip:alice@atlanta.example.com
sipFromTag => 9fxced76sl
sipCallId => 3848276298220188511@atlanta.example.com
----- record 56789/4321 -----
observationTimeSeconds => 2010-04-01 03:10:14 +0200
sourceIPv4Address => 192.168.0.2
destinationIPv4Address => 192.168.0.3
sourceTransportPort => 5060
destinationTransportPort => 37920
sipSequenceNumber => 1
sipResponseStatus => 180
sipMethod => 5
sipServerTransaction => 123
sipToURI => sip:bob@biloxi.example.com
sipToTag => 8321234356
        ]]></artwork>
      </figure>
    </section>
    </section>
        

    <section title="Security Considerations">
      <t>
        [TODO]
      </t>
    </section>

    <section title="IANA Considerations">
      <t>
        [TODO: add new SIP IEs to, create new SIP Method registry, or add numbering to existing registry.]
      </t>
    </section>

    <section title="Acknowledgments">
      <t>
        Cullen Jennings has provided insightful discussions, 
        specific comments and much needed corrections.
        Nico d'Heureuse helped with the RFC 3665 examples.
      </t>
    </section>
    
    <section title="Open Issues">
        <t><list style="symbols">
          <t>Need an example showing how to store a realistically large log record sets to highlight the low overhead of the chosen approach</t>
          <t>Need an example showing cross-conversion with indexed ASCII format</t>
          <t>Need a analysis of space efficiency</t>
        </list></t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.5101" ?>
      <?rfc include="reference.RFC.5655" ?>
    </references>
    
    <references title="Informative References">
    
      <?rfc include="reference.I-D.gurbani-sipclf-problem-statement" ?>
      <?rfc include="reference.I-D.trammell-ipfix-text-iespec" ?>
      <?rfc include="reference.RFC.3261" ?>
      <?rfc include="reference.RFC.3665" ?>
     
      <reference anchor="ripfix">
        <front>
          <title>
            ripfix: IPFIX for Ruby
          </title>

          <author fullname="B. Trammell" initials="B." surname="Trammell">
            <organization>ETH Zurich</organization>
          </author>

        </front>
        
        <seriesInfo name="" value="available at http://ripfix.rubyforge.org/" />
      </reference>

            
    </references>
  </back>
</rfc>




