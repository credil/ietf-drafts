<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC4648 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648.xml">
<!ENTITY RFC1951 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1951.xml">
<!ENTITY RFC4086 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4086.xml">
<!ENTITY RFC2104 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2104.xml">
<!ENTITY RFC5652 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5652.xml">
<!ENTITY RFC5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC3740 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3740.xml">
<!ENTITY RFC4301 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4301.xml">
<!ENTITY RFC4418 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4418.xml">
<!ENTITY I-D.ietf-httpstate-cookie SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-httpstate-cookie-22.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="info" docName="draft-secure-cookie-session-protocol-00"
     ipr="trust200902">
  <front>
    <title abbrev="">SCS: Secure Cookie Sessions for HTTP</title>

    <author fullname="Stefano Barbato" initials="S.B." surname="Barbato">
      <organization>KoanLogic</organization>

      <address>
        <postal>
          <street>Via Marmolada, 4</street>

          <city>Vitorchiano (VT)</city>

          <region></region>

          <code>01030</code>

          <country>Italy</country>
        </postal>

        <email>tat@koanlogic.com</email>
      </address>
    </author>

    <author fullname="Steven Dorigotti" initials="S.D." surname="Dorigotti">
      <organization>KoanLogic</organization>

      <address>
        <postal>
          <street>Via Maso della Pieve 25/C</street>

          <city>Bolzano</city>

          <region></region>

          <code>39100</code>

          <country>Italy</country>
        </postal>

        <email>stewy@koanlogic.com</email>
      </address>
    </author>

    <author fullname="Thomas Fossati" initials="T.F." role="editor"
            surname="Fossati">
      <organization>KoanLogic</organization>

      <address>
        <postal>
          <street>Via di Sabbiuno 11/5</street>

          <city>Bologna</city>

          <region></region>

          <code>40139</code>

          <country>Italy</country>
        </postal>

        <phone>+39 051 644 82 68</phone>

        <email>tho@koanlogic.com</email>
      </address>
    </author>

    <date year="2011" />

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <keyword>HTTP Secure Cookies</keyword>

    <abstract>
    <!-- 
      <t>This document provides an overview of SCS, a cryptographic protocol
      aimed at the protection of client-side HTTP sessions, i.e. sessions in
      which the application state is held entirely on the client in the form
      of HTTP cookies.</t>
     -->

      <t>This document provides an overview of SCS, a cryptographic protocol
      layered on top of the HTTP cookie facility, that allows an origin server
      to handle session state without storing it locally.</t>

      <t>Its typical use cases include devices with little or no storage
      offering some functionality via an HTTP interface, and web applications
      with High Availability or load balancing requirements which may want to
      handle application state without the need to synchronize the pool through
      shared storage or peering.</t>

      <t>Nevertheless, its security properties allow it to be used whenever
      privacy and integrity of cookies is a concern, at the cost of increased
      server CPU and bandwidth usage, and of some "credential-ownership"
      implications which will be thoroughly analysed.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="sec_intro" title="Introduction">
    <!--
      <t>SCS is a cryptographic protocol aimed at protecting client-side HTTP
      sessions, i.e. sessions in which the application state (for example,
      whether or not authentication credentials have been provided) is held
      entirely by the client in the form of <xref
      target="I-D.ietf-httpstate-cookie">cookies</xref></t>
     -->

      <t>SCS is a cryptographic protocol layered on top of the HTTP cookie 
      facility <xref target="I-D.ietf-httpstate-cookie" />, that allows an 
      origin server to handle clients' session state without storing it 
      locally.</t>

      <t>An SCS enabled server delegates the application state storage to the
      client (e.g. a browser) - which basically acts as a remote storage
      device. A set of cryptographic transformations is used to ensure that
      information authenticity and confidentiality attributes of state data
      have the same characteristics as for typical "server-side" sessions.</t>

      <t>Anyway, a peculiar difference between SCS and "server-side" cookie
      sessions arises when we carefully consider the roles of the playing
      entities. In the "server-side" model, the Server acts a triple role as
      the "generator", the "owner", and the "verifier" of cookie credentials.
      Instead, a server implementing SCS acts the "generator" and "verifier"
      roles only -- the "owner" being inapplicable as long as we have imposed
      the no-storage requirement.</t>

      <t>In all respects, the Server grants the custody of the generated
      cookie to the Client, whose trust model needs to be taken into
      consideration when designing applications using SCS. The consequences of
      such discrepancy (e.g. deliberate deletion of a cookie, explicit
      privilege revocation, etc.) will be explored and analyzed in <xref
      target="sec_impact_of_scs_cookie_model"></xref>.</t>

      <t>The no-storage requirement, which is the key design constraint of
      SCS, makes it an ideal candidate in the following settings: <list
          style="letters">
          <t>devices with little or no storage -- typically embedded devices
          which provide functionality such as software updates, configuration,
          device monitoring, etc. via an HTTP interface;</t>

          <t>web applications with HA or load balancing requirements, which
          may delegate handling of the application state to clients instead of
          using shared storage or forced peering, to enhance overall
          parallelism.</t>
        </list></t>

      <t>An SCS server can be implemented within a web application by means of a
      user library that exposes the core SCS functionality and leaves explicit
      control over SCS cookies to the programmer, or transparently, by hiding 
      the "diskless session" facility behind a generic session API 
      abstraction.</t>
    </section>

    <section title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in 
      <xref target="RFC2119" />.</t>
    </section>

    <section anchor="sec_scs_protocol" title="SCS Protocol">
      <t>The SCS protocol defines: <list style="symbols">
          <t>a PDU, as a well-defined aggregate of cookies (<xref
          target="sec_pdu_description"></xref>);</t>

          <t>the cryptographic transformations which manipulate the PDU field
          (<xref target="sec_crypto_transform"></xref>);</t>

          <t>the HTTP-based PDU exchange model (<xref
          target="sec_pdu_exchange"></xref>).</t>
        </list></t>

      <t>Note that the PDU is transmitted to the client as an opaque data
      block, hence no interpretation nor validation is necessary.</t>

      <t>The single requirement for client-side support of SCS is cookie
      activation on the browser. Only the server is involved in the PDU
      manipulation process.</t>

      <t>In the following sections we assume S to be one or more
      interchangeable HTTP server entities (e.g. a server pool in a
      load-balanced or HA environment) and C to be the client with a
      cookie-enabled browser, or User Agent with equivalent capabilities.</t>

      <section anchor="sec_pdu_description" title="PDU Description">
        <t>S and C exchange the same PDU (<xref
        target="sec_pdu_exchange"></xref>), which consists of a set of
        interdependent cookies tied together by cryptographic
        transformations.</t>

        <t>Confidentiality is limited to the application state information
        (i.e. SCS_DATA cookie), while integrity and authentication apply to
        the entire PDU.</t>

        <t>The following subsections describe the syntax and semantics of
        of each SCS cookie.</t>

        <section anchor="sec_scs_atime" title="SCS_ATIME">
          <t>Timestamp relating to the last read or write operation performed
          on session data, encoded a numeric string holding the number of 
          seconds since UNIX epoch.</t>

          <t>This value is updated with each client contact and is used to
          identify expired sessions.</t>

          <t>If the received SCS_ATIME value is older than a predefined
          "session_max_age" (which is chosen by S as an application-level
          parameter), a session is considered to be no longer valid, and
          is therefore rejected.</t>
        </section>

        <!-- end of SCS_ATIME -->

        <section anchor="sec_scs_data" title="SCS_DATA">
          <t>Block of encrypted and optionally compressed data, containing 
          session state.  Note that no restriction is imposed on plain text 
          structure: the protocol is completely agnostic as to state data 
          layout.</t>

          <t>If the total size of the SCS_DATA cookie, including name, value
          and attributes, exceeds 4096 bytes (see Section 6.1. of <xref
          target="I-D.ietf-httpstate-cookie"></xref>), it is sliced into n
          SCS_DATA{n} cookies, each 4KB in size, so that the concatenation of
          their values ordered by cookie name (1, 2, ..., N) yields the
          original SCS_DATA.</t>

          <t>It is suggested <xref target="I-D.ietf-httpstate-cookie"></xref>
          that browsers accept at least 50 cookies per domain, which could
          lead to a theoretical limit of 184 KB as the maximum allowed state
          data block.</t>

          <t>Anyway, in order to minimize both network bandwidth and client
          cookie store consumption, applications should try to upper bound
          state data to some sensible value. Also, an SCS implementation MAY
          decide to limit the accepted state data to any value greater than
          or equal to 4KB.</t>
        </section>

        <!-- end of SCS_DATA -->

        <section anchor="sec_scs_tid" title="SCS_TID">
          <t>ASCII string that uniquely identifies the transform set (keys 
          and algorithms) used to generate this PDU.</t>

          <t>SCS assumes that a key-agreement/distribution mechanism exists
          for environments in which S consists of multiple servers (it may
          consist of a simple key-refresh in the case |S|=1), which provides a
          unique external identifier for each transform set defined and shared
          amongst pool members.</t>

          <t>This identifier (equivalent to a SPI in a Data Security SA <xref
          target="RFC3740"></xref>) is represented in the cookie value.</t>
        </section>

        <!-- end of SCS_TID -->

        <section anchor="sec_scs_iv" title="SCS_IV">
          <t>Initialization Vector used for the encryption algorithm (<xref
          target="sec_crypto_transform"></xref>).</t>

          <t>In order to avoid providing correlation information to a possible
          attacker with access to a sample of SCS PDUs, the IV MUST be created
          randomly for each PDU.</t>
        </section>

        <!-- end of SCS_IV -->

        <section anchor="sec_scs_authtag" title="SCS_AUTHTAG">
          <t>Authentication tag based on the concatenation of SCS_ATIME,
          SCS_DATA, SCS_TID and SCS_IV.</t>

          <t>The concatenation operation is done by packing the four strings
          containing the base64 encoded values in order (e.g.:
          "ZGF0YQ==YXRpbWU=dGlkaXY="), and supplying the resulting string to
          HMAC.</t>
        </section>

        <!-- end of SCS_AUTHTAG -->
      </section>

      <!-- end PDU description -->

      <section anchor="sec_crypto_transform" title="Crypto Transform">
        <t>SCS could potentially use any combination of primitives capable of
        performing authenticated encryption. In practice an encrypt-then-mac
        approach <xref target="Kohno"></xref> with CBC-mode encryption and
        <xref target="RFC2104">HMAC</xref> authentication was chosen.</t>

        <t>The two algorithms MUST be associated with two independent
        keys.</t>

        <t>The possibility of using UMAC for authentication <xref
        target="RFC4418"></xref> has been taken into consideration, but
        priority was given to space over performance: the nonce field transfer
        would require an extra cookie, therefore reducing the space reserved
        to state information by another 4KB.</t>

        <t>The following conventions will be used in the algorithm description
        (<xref target="sec_outbound_transform"></xref> and <xref
        target="sec_inbound_transform"></xref>): <list style="symbols">
            <t>Enc/Dec(): block encryption/decryption functions (<xref
            target="sec_cipher_set"></xref>);</t>

            <t>HMAC(): authentication function (<xref
            target="sec_cipher_set"></xref>);</t>

            <t>Comp/Uncomp(): compression/decompression functions (<xref
            target="sec_compression"></xref>);</t>

            <t>e/d(): cookie value encoding/decoding functions (<xref
            target="sec_cookie_encoding"></xref>);</t>

            <t>RAND(): random number generator <xref
            target="RFC4086"></xref>.</t>
          </list></t>

        <section anchor="sec_cipher_set" title="Cipher Set">
          <t>Implementors MUST support at least the following algorithms:
          <list style="symbols">
              <t>AES-CBC-128 for encryption;</t>

              <t>HMAC-SHA1 with a 128 bit key for authenticity and
              integrity,</t>
            </list> which appear to be sufficiently secure in a wide range of
          use cases <xref target="Bellare"></xref>, are widely available, and
          can be implemented in a few kilobytes of memory, providing an
          extremely valuable feature in constrained devices.</t>

          <t>One should consider using larger cryptographic key lengths (192
          or 256 bit) according to the actual security and overall system
          performance requirements.</t>
        </section>

        <!-- end Cipher Set -->

        <section anchor="sec_compression" title="Compression">
          <t>Compression, which may be useful or even necessary when handling
          large quantities of data, is not compulsory (in such case
          Comp/Uncomp are replaced by an identity matrix). If this function is
          enabled, <xref target="RFC1951">DEFLATE</xref> format MUST be
          supported.</t>

          <t>Compression should not be enabled when handling relatively short
          and entropic state (e.g. pseudo random session identifiers).
          Instead, large and quite regular state blobs could get a significant
          boost when compressed.</t>
        </section>

        <!-- end Compression -->

        <section anchor="sec_cookie_encoding" title="Cookie Encoding">
          <t><xref target="RFC4648">Base-64</xref> is used for
          encoding/decoding of SCS cookie values. It is 
          <!--
          quite efficient in terms of space occupation, is 
          -->
          very wide-spread, and falls smoothly into
          the encoding rules defined in Section 4.1.1 of <xref
          target="I-D.ietf-httpstate-cookie"></xref>.</t>
        </section>

        <!-- end Cookie Encoding -->

        <section anchor="sec_outbound_transform" title="Outbound Transform">
          <t>The output data transformation as seen by the server (the only
          actor which manipulates PDUs) is illustrated by the pseudo-code in
          <xref target="fig_outbound_transform"></xref>.</t>

          <figure anchor="fig_outbound_transform">
            <artwork align="center"><![CDATA[
1.  iv = RAND()
2.  atime = NOW
3.  data = Enc(Comp(state))
4.  tag = HMAC(e(data)||e(atime)||e(tid)||e(iv))
                ]]></artwork>
          </figure>

          <t>NOW is defined as the current timestamp of the server clock.</t>

          <t>Since the only user of the atime field is the server, it is
          unnecessary for it to be synchronized with the client. However, if
          multiple servers are active in a load-balancing configuration,
          clocks SHOULD be synchronized to avoid errors in the calculation of
          session expiry.</t>

          <t>If the length of (compressed) state is not a multiple of the
          block size, its value MUST be filled with padding bytes of equal
          value as the pad length -- equivalent to the scheme defined in
          Section 6.3 of <xref target="RFC5652"></xref>.</t>

          <t>Hence the SCS PDU fields are created as follows:</t>

          <?rfc subcompact="yes" ?>

          <t><list style="empty">
              <t>SCS_ATIME = e(atime)</t>

              <t>SCS_AUTHTAG = e(tag)</t>

              <t>SCS_DATA = e(data)</t>

              <t>SCS_TID = e(tid)</t>

              <t>SCS_IV = e(iv)</t>
            </list></t>

          <?rfc subcompact="no" ?>
        </section>

        <!-- end Outbound Transform -->

        <section anchor="sec_inbound_transform" title="Inbound Transform">
          <t>The inbound transformation is described in <xref
          target="fig_inbound_transform"></xref>.</t>

          <figure anchor="fig_inbound_transform">
            <artwork align="center"><![CDATA[
1.  If (tid is available)
2.      data' = d($SCS_DATA)
        atime' = d($SCS_ATIME)
        tid' = d($SCS_TID)
        iv' = d($SCS_IV)
        tag' = d($SCS_AUTHTAG)
3.      tag = HMAC(<data'>||<atime'>||<tid'>||<iv'>)
4.      If (tag == tag' && NOW - atime' <= session_max_age)
5.          state = Uncomp(Dec(data'))
6.      Else discard PDU
7.  Else discard PDU
                ]]></artwork>
          </figure>

          <t>If the cryptographic credentials (encryption and authentication
          algorithms and keys identified by SCS_TID) are unavailable (step 7.),
          the inbound PDU cannot be interpreted correctly.</t>

          <t>This may happen for several reasons: e.g., if a device without 
          storage has been reset and loses the credentials stored in RAM, if 
          a server pool node desynchronizes, or in case of a key compromise 
          that forces the invalidation of all available TIDs, etc.</t>

          <t>Note that step 4. allows any altered packets or expired sessions
          to be discarded, hence avoiding unnecessary state decryption and
          decompression.</t>
        </section>

        <!-- end Inbound Transform -->
      </section>

      <!-- end Crypto Transform -->

      <section anchor="sec_pdu_exchange" title="PDU Exchange">
        <t>SCS can be modeled in the same manner as a typical
        store-and-forward protocol, in which the endpoints are S, consisting
        of one or more HTTP servers, and the client C, an intermediate node
        used to "temporarily" store the data to be successively forwarded to
        S.</t>

        <t>In brief, S and C exchange an immutable cookie data block (<xref
        target="sec_pdu_description"></xref>): the state is stored on the
        client at the first hop and then restored on the server at the second,
        as in <xref target="fig_pdu_exchange"></xref>.</t>

        <figure anchor="fig_pdu_exchange">
          <artwork align="center"><![CDATA[
1.  dump-state:
           Set-Cookie: SCS_DATA=...;
           Expires=...; Path=...;
           Domain=...;
    S -->                           --> C
           Set-Cookie: SCS_TID=...;
           Expires=...; Path=...;
           Domain=...;
           ...

2.  restore-state:
           Cookie: SCS_DATA=...;
    C -->  Cookie: SCS_TID=...;     --> S
           ...
            ]]></artwork>
        </figure>

        <t>Note that although SCS cookies always have the same naming, there
        can be multiple active SCS sessions in use at a given user-agent as
        long as the tuple &lt;SCS PDU, Domain, Path&gt; is different.</t>

        <t>SCS cookies MUST NOT be folded into a single HTTP header field, see
        Section 3 of <xref target="I-D.ietf-httpstate-cookie"></xref>.</t>

        <section anchor="sec_cookie_attributes" title="Cookie Attributes">
          <t>All SCS cookies belonging to the same PDU MUST carry the same
          attributes' set. This is not elegant nor bandwidth-friendly
          solution, but it is necessary in order to guarantee PDU
          coherence.</t>

          <t>In the following sub paragraphs a series of recommendations is
          provided in order to maximize SCS PDU fitness in the generic cookie
          ecosystem.</t>

          <section anchor="sec_expires" title="Expires">
            <t>SCS cookies MUST include an Expires attribute which shall be
            set to a value consistent with session_max_age.</t>

            <t>For maximum compatibility with existing user agents the
            timestamp value MUST be encoded in rfc1123-date format which
            requires a 4-digit year.</t>
          </section>

          <section anchor="sec_max_age" title="Max-Age">
            <t>Since not all UAs support this attribute, it MUST NOT be
            present in any SCS cookie.</t>
          </section>

          <section anchor="sec_domain" title="Domain">
            <t>SCS cookies MUST include a Domain attribute compatible with
            application usage.</t>

            <t>A trailing '.' MUST NOT be present in order to minimize the
            possibility of a user-agent ignoring the attribute value.</t>
          </section>

          <section anchor="sec_secure" title="Secure">
            <t>This attribute MUST always be asserted when SCS sessions are
            carried over a TLS channel.</t>
          </section>
        </section>

        <!-- end Cookie Attributes -->
      </section>

      <!-- end PDU Exchange -->
    </section>

    <!-- end Protocol -->

    <section anchor="sec_key_management"
             title="Key Management and Session State">
      <t>This specification provides some common recommendations and praxis
      relevant to cryptographic key management.</t>

      <t>In the following, the term 'key' references both encryption and HMAC
      keys. <list style="symbols">
          <t>The key SHOULD be generated securely following the randomness
          recommendations in <xref target="RFC4086"></xref>;</t>

          <t>the key length SHOULD be at least 128 bits;</t>

          <t>the key SHOULD only be used to generate and verify SCS PDUs;</t>

          <t>the key SHOULD be replaced regularly as well as any time the
          format of SCS PDUs or cryptographic algorithms changes.</t>
        </list></t>

      <t>Furthermore, to preserve the validity of active HTTP sessions upon
      renewal of cryptographic credentials (whenever the value of SCS_TID
      changes), an SCS server MUST be capable of managing at least two
      transforms contemporarily: the currently instantiated one, and its
      predecessor.</t>

      <t>Each transform set SHOULD be associated with an attribute pair:
      "refresh" and "expiry", which is used to identify the exposure limits
      (in terms of time or quantity of encrypted and/or authenticated bytes,
      etc) of related cryptographic material.</t>

      <t>In particular, the "refresh" attribute specifies the time limit for
      substitution of transform set T with new material T'. From that moment
      onwards, and for an amount of time determined by "expiry", all new
      sessions will be created using T', while the active T-protected ones go
      through a translation phase in which: <list style="symbols">
          <t>the inbound transformation authenticates and
          decrypts/decompresses using T (identified by SCS_TID);</t>

          <t>the outbound transformation encrypts/compresses and authenticates
          using T'.</t>
        </list></t>

      <figure anchor="fig_keylifetime">
        <artwork align="center"><![CDATA[
T' {not valid yet} |---------------------|----------------
                   |  translation stage  |
T  ----------------|---------------------| {no longer valid}
                 refresh         refresh + expiry
        ]]></artwork>
      </figure>

      <t>As shown in <xref target="fig_keylifetime"></xref>, the duration of the
      HTTP session MUST fit within the lifetime of a given transform set (i.e.
      from creation time until "refresh" + "expiry").</t>

      <t>In practice, this should not be an obstacle because the longevity of
      the two entities (HTTP session and SCS transform set) should differ by
      one or two orders of magnitude.</t>

      <t>An SCS server may take this into account by determining the duration
      of a session adaptively according to the expected deletion time of the
      active T, or by setting the "expiry" value to at least the maximum
      lifetime allowed by an HTTP session.</t>

      <t>Since there is only one refresh attribute also in situations with
      more than one key (e.g. one for encryption and one for authentication)
      within the same T, the smallest value is chosen.</t>
    </section>

    <section anchor="sec_ack" title="Acknowledgements">
      <t>We would like to thank David Wagner and Lorenzo Cavallaro for their
      valuable feedback on this document.</t>
    </section>

    <section anchor="sec_iana" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>
    </section>

    <section anchor="sec_security_considerations"
             title="Security Considerations">
      <section anchor="sec_security_of_the_crypto_protocol"
               title="Security of the Cryptographic Protocol">
        <t>From a cryptographic architecture perspective, the described
        mechanism can be easily traced to an Encode-then-EtM scheme described
        in <xref target="Kohno"></xref>.</t>

        <t>Given a "provably-secure" encryption scheme and MAC (as for the
        algorithms mandated in <xref target="sec_cipher_set"></xref>),
        Kohno et al. <xref target="Kohno"></xref> demonstrate that their
        composition results in a secure authenticated encryption scheme.</t>
      </section>

      <section anchor="sec_impact_of_scs_cookie_model"
               title="Impact of the SCS Cookie Model">
        <t>The fact that the server does not own the cookie it produces, gives
        rise to a series of consequences that must be clearly understood when
        one envisages the use of SCS as a cookie provider and validator for
        his/her application.</t>

        <t>In the following paragraphs, a set of different attack scenarios
        (together with corresponding countermeasures where applicable) are
        identified and analyzed.</t>

        <section anchor="sec_old_cookie_replay" title="Old cookie replay">
          <t>SCS doesn't address replay of old cookie values.</t>

          <t>In fact, there is nothing that guarantees an SCS application
          about the client having returned the most recent version of the
          cookie.</t>

          <t>As with "server-side" sessions, if an attacker gains possession
          of a given user's cookies - via simple passive interception or
          another technique - he/she will always be able to restore the state
          of an intercepted session by representing the captured data to the
          server.</t>

          <t>The SCS_ATIME value along with the session_max_age configuration
          parameter allow SCS to mitigate the chances of an attack (by forcing
          a time window outside of which a given cookie is no longer valid),
          but cannot exclude it completely.</t>

          <t>A countermeasure against the "passive interception and replay"
          scenario can be applied at transport/network level using the
          anti-replay services provided by e.g., <xref
          target="RFC5246">SSL/TLS</xref> or <xref
          target="RFC4301">IPsec</xref>.</t>

          <t>Anyway, a generic solution is still out of scope: an SCS
          application wishing to be replay-resistant must put in place some ad
          hoc mechanism to prevent clients (both rogue and legitimate) from
          (a) being able to replay old cookies as valid credentials and/or (b)
          getting any advantage by replaying them.</t>

          <t>In the following, some typical use cases are illustrated: <list
              style="symbols">
              <t>Session inactivity timeout scenario (implicit invalidation):
              use the session_max_age parameter if a global setting is viable,
              else place an explicit TTL in the cookie (e.g.
              validity_period="start_time, duration") that can be verified by
              the application each time the Client presents the SCS
              cookie.</t>

              <t>Session voidance scenario (explicit invalidation): put a
              randomly chosen string into each SCS cookie (cid="$(random())")
              and keep a list of valid session cid's against which the SCS
              cookie presented by the client can be checked. When a cookie
              needs to be invalidated, delete the corresponding cid from the
              list. The described method has the drawback that, in case a
              non-permanent storage is used to archive valid cid's, a
              reboot/restart would invalidate all sessions (It can't be used
              when |S| &gt; 1).</t>

              <t>One-shot transaction scenario (ephemeral): this is a
              variation on the previous theme when sessions are consumed
              within a single request/response. Put a nonce="$(random())"
              within the state information and keep a list of not-yet-consumed
              nonces in RAM. Once the client presents its cookie credential,
              the embodied nonce is deleted from the list and will be
              therefore discarded whenever replayed.</t>
            </list></t>

          <t>It may be noteworthy that despite the chances of preventing
          replay in some well established circumstances by using
          aforementioned mechanisms, if the attacker is able to use the cookie
          before the legitimate client gets a chance to, then the
          impersonation attack will always succeed.</t>
        </section>

        <section anchor="sec_cookie_deletion" title="Cookie Deletion">
          <t>A direct, and important, consequence of the missing owner role in
          SCS is that a client could intentionally delete its cookie and
          return nothing.</t>

          <t>The application protocol has to be designed so there is no
          incentive to do so, for instance: <list style="symbols">
              <t>it is safe for the cookie to represent some kind of positive
              capability - the possession of which increases the client's
              powers;</t>

              <t>It is not safe to use the cookie to represent negative
              capabilities - where possession reduces the client's powers-, or
              for revocation.</t>
            </list></t>

          <t>Note that this behavior is not equivalent to cookie removal in
          the "server-side" cookie model, because in case of missing cookie
          backup by other parties (e.g. the application using SCS), the Client
          could simply make it disappear once and for all.</t>
        </section>

        <section anchor="sec_cookie_sharing_or_theft"
                 title="Cookie Sharing or Theft">
          <t>SCS doesn't prevent sharing (both voluntary and illegitimate) of
          cookies between multiple clients.</t>

          <t>In the context of voluntary cookie sharing, using HTTPS is
          useless: Client certificates are just as shareable as cookies, hence
          equivalently to the "server-side" cookie model, there seems to be no
          way to prevent this threat.</t>

          <t>The theft could be mitigated by securing the wire (e.g. via
          HTTPS, IPsec, VPN, ...), thus reducing the opportunity of cookie
          stealing to a successful attack on the protocol endpoints.</t>
        </section>
      </section>

      <section anchor="sec_advantages"
               title="Advantages of SCS over Server-side Sessions">

        <t>Note that all the abovementioned vulnerabilities also apply to
        typical server-side sessions, making SCS at least as secure (based on
        the current analysis), but there are a few good reasons to
        consider its security level enhanced.</t>

        <t>First of all, the confidentiality feature provided by SCS protects
        cookie state information which is normally plain-text.</t>

        <t>Furthermore, none of the common vulnerabilities of server-side 
        sessions (SID prediction, SID brute forcing, session fixation <xref
        target="Kolsec"></xref>) can be exploited when using SCS, unless the
        attacker possesses encryption and HMAC keys (both current ones and
        those relating to the previous set of credentials).</t>

        <t>More generally no slicing nor altering operations can be done over
        an SCS PDU without controlling the cryptographic keyset and
        cipherset.</t>
      </section>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &RFC2119;

      &RFC4648;

      &RFC1951;

      &RFC4086;

      &RFC2104;

      &RFC5652;

      &I-D.ietf-httpstate-cookie;
    </references>

    <references title="Informative References">
      &RFC5246;

      &RFC3740;

      &RFC4418;

      &RFC4301;

      <reference anchor="Bellare">
        <front>
          <title>New Proofs for NMAC and HMAC: Security Without
          Collision-Resistance</title>

          <author initials="M.B." surname="Bellare"></author>

          <date year="2006" />
        </front>
      </reference>

      <reference anchor="Kohno">
        <front>
          <title>Building Secure Cryptographic Transforms, or How to Encrypt
          and MAC</title>

          <author initials="T.K." surname="Kohno"></author>

          <author initials="A.P." surname="Palacio"></author>

          <author initials="J.B." surname="Black"></author>

          <date year="2003" />
        </front>
      </reference>

      <reference anchor="Kolsec">
        <front>
          <title>Session Fixation Vulnerability in Web-based
          Applications</title>

          <author initials="M.K." surname="Kolsec"></author>

          <date year="2002" />
        </front>
      </reference>
    </references>

    <section anchor="ref-impl" title="Reference Implementation">
      <t>A reference implementation (at present in very early stage) of the
      SCS protocol can be found at <eref
      target="http://github.com/koanlogic/libscs"></eref>.</t>
    </section>
  </back>
</rfc>
