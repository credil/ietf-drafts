<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes" symrefs="no" ?>
<rfc ipr="pre5378Trust200902" docName="draft-xu-ipfrr-tunnelat-01">
  <front>
    <title>IP Fast Reroute Using Tunnel-AT</title>
    <author surname="M. Xu"
            fullname="Mingwei Xu">
      <organization>Tsinghua University</organization>
      
      <address>
        <postal>
          <street>Department of Computer Science</street>
          <city>Beijing</city>
          <code>100084</code>
          <country>China</country>
        </postal>
        
        <email>xmw@csnet1.cs.tsinghua.edu.cn</email>
      </address>
    </author>
    <author surname="L. Pan"
            fullname="Lingtao Pan">
      <organization>Tsinghua University</organization>
      
      <address>
        <postal>
          <street>Department of Computer Science</street>
          <city>Beijing</city>
          <code>100084</code>
          <country>China</country>
        </postal>
        
        <email>freeplant@gmail.com</email>
      </address>
    </author>

    <author surname="S. Yang" fullname="Sijie Yang">
      <organization>Beijing University of Posts and Telecommunications
      </organization>

      <address>
        <postal>
          <street>Department of Computer Science</street>
          <city>Beijing</city>
          <code>100876</code>
          <country>China</country>
        </postal>
        <email>iyangsj@gmail.com</email>
      </address>
    </author>

    <author surname="Q. Li"
            fullname="Qing Li">
      <organization>Tsinghua University</organization>
      
      <address>
        <postal>
          <street>Department of Computer Science</street>
          <city>Beijing</city>
          <code>100084</code>
          <country>China</country>
        </postal>
        
        <email>liqing@csnet1.cs.tsinghua.edu.cn</email>
      </address>
    </author>
    
    <date month="March" year="2010" />
    
    <area>Network Working Group</area>
    <workgroup>Network Working Group</workgroup>
    <keyword>IPFRR</keyword>
    <keyword>Tunnel</keyword>
    <keyword>iSPF</keyword>
    <abstract>
      <t>This draft decribes Tunnel-AT mechanism that improves the
      Tunnel IP fast re-route mechanism. Tunnel-AT provides 100% node
      protection coverage in a symmetric biconnected network at a
      computational cost of less than one full SPT calculation.</t>
    </abstract>
  </front>
  
  <middle>
    <section anchor="intro" title="Introduction">
      <t>
      When a link or node failure occurs in an IP network, there is a
      period of disruption to the delivery of traffic until the
      network re-converges on a new topology. IP fast reroute (IPFRR)
      mechanisms are methods used in pure IP networks to provide
      protection from such disruptions.  This is done by having
      failure-adjacent nodes compute backup routes in advance that
      allow them to repair failures immediately upon detection of
      failures.  Traffic can be delivered to their correct
      destinations even before the network has re-converged on a new
      topology.
      </t>

      <t>
      Thus far, there are three different IPFRR mechanisms that are
      documented in RFCs or IETF drafts: LFA
      in <xref target="refs.RFC5286" format="default"
      pageno="false">RFC 5286</xref>, <xref target="refs.Tunnels"
      format="default" pageno="false">Tunnels</xref> in
      [I-D.ietf-bryant-ipfrr-tunnels], and <xref target="refs.Tunnels"
      format="default" pageno="false">NotVia</xref> in
      [I-D.ietf-rtgwg-ipfrr-notvia-addresses]. However, LFA only
      provides 50~80% single-node failure protection coverage; routers
      running NotVia must maintain extra NotVia addresses, which
      causes high address management burden. In addition, NotVia also
      can cause packets to be forwarded through unnecessary
      tracebacks. The original Tunnel can not provide 100% protection
      coverage for single node failures and the original draft does
      not describes an efficient method to calculate tunnel endpoints.
      </t>

      <t>
      This draft presents Tunnel-AT to improve Tunnel. Tunnel-AT
      requires less than one full SPT computation, provides 100%
      single node protection, and does not require routers to maintain
      extra addresses. In addition, the length of the backup paths
      computed under Tunnel-AT are always exactly or very close to the
      length of the shortest working path to the destination.
      </t>
    </section>

    <section anchor="term" title="Terminology">
      <t>This section defines the terms and symbols used in this draft.
      </t>
      <t>
        <list style="hanging">
          <t hangText="Directed Forwarding:">The ability of the
            repairing router (S) to specify the next hop (Q) on
            exit from a tunnel end-point (P).</t>
          <t hangText="T:">The original shortest path tree of S.</t>
          <t hangText="T':">The new shortest path tree of S after
          removing a supposed failed neighbor (F) and associated edges
          from original topology.</t>
          <t hangText="Affected node:">A node in the subtree of T
          rooted at F.</t>
          <t hangText="Incremental SPT:">Algorithms to build new
          shortest path tree based on the original shortest path tree
          upon topological change.</t>
        </list>
      </t>
    </section>

    <section anchor="overview" title="Tunnel-AT Overview">
      <t>
        When a failure occurs in an IP network, there is no way for the
        failure-adjacent routers to tell whether the failure was caused by a
        node failures or simply a link failure. To cope with the worst case,
        routers will first try to use the backup paths precalculated for a
        node failure. If no such routes are available, they will try to use
        the backup paths for a link failure. 
      </t>

      <t>
        The backup paths are used until the completion of the routing
        transition. Only routers adjacent to the failed component are
        aware of the nature of the failure.  Once all the routers
        compute new shortest path based on the new topology, the
        backup paths will not be used anymore since packets are no
        longer forwarded through the failed components. At this time,
        the computation of new backup paths for the new topology are
        scheduled.
      </t>

      <t>
        The forwarding plane mechanism of Tunnel-AT is similar to
        <xref target="refs.Tunnels" format="default"
        pageno="false">Tunnels</xref>. It uses tunnel and
        directed forwarding to implement repair paths, too. But
        in the routing plane, Tunnel-AT is totally different
        from Tunnels.  The routing algorithm is based on the
        incremental SPF (<xref target="refs.iSPF"
        format="default" pageno="false">(iSPF)</xref>) algorithm in
        and the concept of Attaching Tree (thus comes the name
        Tunnel-AT).
      </t>

      <t>
        A simple example is given in Figure 1 to demonstrate
        Tunnel-AT. In Figure 1, the default link cost is 1, and link P-H
        and link H-I have a high cost (20). For destination H, and
        supposed failed neighbor F, S can reroute packets to H by
        first using the S-P tunnel to reroute packets to P. S also
        makes extra marks on the packets so that P would directed
        forwarding these packets to H.
      </t>

        <figure height="" width="" alt="" title="" align="left">
          <artwork height="" name="" width="" type="" alt=""
                   align="left" xml:space="preserve">
                                   --------[I]
                              +---/         |   
                 [S]---------[F]            | 20
                  +           +----------\  | 
                  |                       \ |
                  +---[N]---[P]------------[H]
                                   20

         Figure 1: A case shows how Tunnel-AT works. The default 
         link cost is 1. And the cost of link N-H and link H-I 
         is 20, much higher than the others.
          </artwork>
        </figure>
      
        <t>
          To reroute packets to node I, S would forward packets with
          destination I to P and tell P to directly forward it to H.
          Since H also notices the failure of F and also performs
          Tunnel-AT, it would forward packets to I directly instead of
          using the original next hop F. So, packets have been
          protected more than once. We call the subsequent protections
          re-protections. Using re-protection, Tunnel-AT achieves 100%
          protection coverage.
        </t>
      
      </section>

    <section title="Tunnel-AT Routing Algorithm">
      <t>
        Under the link weight routing protocol, repairing node S has
        already computed an original shortest path tree T based on the
        current topology. Next, for each neighbor N, S deletes N and
        associated links from the original topology and computes
        repair paths for every affected destination. The remaining
        part of this section describes how S computes repair paths for
        a specific supposed failed neighbor F.
      </t>

      <t>
        Tunnel-AT is based on the incremental SPF algorithm.
        Intuitively, the process of the iSPF algorithm can be viewed
        as attaching subtrees of the original shortest path tree back
        one by one and finally forming a new shortest path tree. We
        name the subtrees Attaching Trees.  An attaching tree may be
        attached to a node of another attaching tree. In this way,
        they form a super attaching tree. The root of the super
        attaching tree attached to a node that is not affected by the
        changing of tolopogy. We call the root the traffic incoming
        node, or simply the incoming node. Given a node S and a
        supposed failed neighbor F, to deliver a packet to an affected
        destination D, it is sufficient to reroute it to D's incoming
        node. From the original shortest path tree, the iSPF algorithm
        can be used to compute the new shortest path tree after
        removing F from the topology, and the incoming node of each
        affected node can be determined during the process.
       </t>

      <section title="Rerouting to the Incoming Node">
      <t>
        To reroute a packet with destination D to the incoming node I,
        the parent of I, denoted as P, can be used as the tunnel
        endpoint. It is also needed to determine whether directed
        forwarding is necessary to ensure P forwarding the packet to
        I. The original distance from S to P and from S to D,
        i.e. dist(S, P) and dist(S, D), can be obtained from the
        original tree T; the new distance from P to D, dist'(P, D),
        can be obtained from tree T'. If the network is symmetric,
        dist(P, S) equals to dist(S, P). At a first glance, the
        following condition seems works:
        <artwork height="" name="" width="" type="" alt=""
                 align="left" xml:space="preserve"> 
          dist'(P, D) &lt; dist(P, S) + dist(S, D)
        </artwork>
        However this condition only guarantees P does not forward the
        packet back to S. Figure 2 shows a very simple
        counter-example. Here, D's incoming node is D itself and
        <artwork height="" name="" width="" type="" alt=""
                 align="left" xml:space="preserve"> 
          dist'(P, D) = 7 &lt; 8 = dist(P, S) + dist(S, D)
        </artwork>
        But P will send the packet to N if directed forwarding is not
        used because P->N->F->D is a shorter path and P is not aware
        of the failure. The packet will still reach D via
        the protection by N for the second time, but it takes a longer
        path that it has to.
      </t>
     
      <figure height="" width="" alt="" title="" align="left">
        <artwork height="" name="" width="" type="" alt=""
                  align="left" xml:space="preserve">


                       +---[D]----+ 3
                       |          | 
                       |      1   |
                     7 |   +-----[F]
                       |  [N]     |
                       |  /       |
                       | / 2      | 2
                       |/         |
                      [P]--------[S]
                           3  

          Figure 2: An example: If S does not tell P to
          directly forwarding a packet with destination
          D to D, the packet will take the long path
          S->P->N->P->D.
        </artwork>
      </figure>

      <t>
        To avoid P routing packets back to F, another more rigorous
        condition can be used: 
        <artwork height="" name="" width="" type="" alt=""
                 align="left" xml:space="preserve"> 
          dist'(P, D) - dist(F, D) &lt;= dist(S, P) - dist(S, F) .
        </artwork>
        It can be proved that this condition ensures that P forwords
        packets with destination D to nieghbor I, so no mark for
        directed forwording is needed. 

        To see how this equation works, let's assume the above
        condition holds but P routing packet back to F, so
        <artwork height="" name="" width="" type="" alt=""
                 align="left" xml:space="preserve"> 
          dist(P, D) >= dist(P, N) + dist(N, F) + dist(F, D)
        </artwork>
        since the shortest path from S to P does not traverse F, we have
        <artwork height="" name="" width="" type="" alt=""
                 align="left" xml:space="preserve"> 
          dist(S, P) &lt; dist(S, F) + dist(F, N) + dist(N, P)
        </artwork>
        Combining the two inequalities yields:
        <artwork height="" name="" width="" type="" alt=""
                 align="left" xml:space="preserve"> 
          dist(P, D) - dist(F, D) > dist(S, P) - dist(S, F)
        </artwork>
        Since dist'(P, D) >= dist(P, D), we have
        <artwork height="" name="" width="" type="" alt=""
                 align="left" xml:space="preserve"> 
          dist'(P, D) - dist(F, D) > dist(S, P) - dist(S, F)
        </artwork>
        A contridiction.
      </t>
      </section>

      <section title="Complexity">
        <t>
        Based on the original shortest path tree T calculated by the
        normal link state routing protocol, every node has to perform
        k times incremental shortest path tree (iSPT) (k is the number
        of neighbors) to construct backup routes for all
        destinations. The core of these algorithms are queue
        operations. The full SPT algorithm (Dijkstra's algorithm)
        invokes three types of queue operations: ADD, EXTRACT-MIN, and
        DECREASE-KEY. The iSPT algorithm invokes one extra type of
        operation -- REMOVE.  If the queue is implemented as a binary
        heap, in a network of V nodes and E edges, the complexity
        of full SPT is O(ElgV). Let V_i denote the number of
        affected nodes if neighbor i fails, let E_i denote the
        number of edges attached to one of these nodes, the number of
        operations in the iSPT for this neighbor i
        can be expressed as follows:  
        <list style="symbols">
          <t> Maximum number of EXTRACT-MIN: the iteration number l in
          iSPT. </t>
          <t> Maximum number of ADD: V_i.</t>
          <t> Maximum number of REMOVE: V_i - l.</t>
          <t> Maximum number of DECREASE-KEY: E_i. </t>
        </list>
        The main component is DECREASE-KEY. For a node, the
        Tunnel-AT algorithm complexity is 
        <artwork height="" name="" width="" type="" alt=""
                 align="left" xml:space="preserve"> 
           O(E_1 lg V_1) + ... + O(E_k lg V_k) 
                = O (E_1 lg V) + ... + O(E_k lg V) 
                = O (ElgV)
        </artwork>
        the same as one full SPT. 
        </t>
        </section>
    </section>
    
    <section title="Forwarding Plane Mechanism">
	  <t>
	    Tunnel-AT routes are pre-computed in anticipation of later
	    failures by the routing algorithm described above. When a
	    router detects an adjacent failure, it uses these routes
	    to reroute packets until the completion of the routing transition.
	  </t>

	  <t>
        A Tunnel-AT route contains two extra fields, Tunnel IP
        address(Tunnel adrresss) and directed forwarding IP address
        (DF address). The Tunnel address is the IP address of the
        tunnel end point router. The DF address is the next hop IP
        address when the tunnel end point router needs to perform
        directed forwarding.  If tunnel or directed forwarding is not
        needed, the corresponding field is not set.
	  </t>

	  <t>
		Here we describe a way to implement tunnel and directed
		forwarding.  It is not required that an implementation follow
		exactly the method given in the following section.
	  </t>


      <t>
        When a router receives a packet, it will perform general IP forwarding.
        If a tunnel-at route is chosen for a packet: 

        <list style="numbers">
		<t>If DF address is set, a new IP header (DF header)
	    is prepend to the packet. The DST field of the prepended IP header is
		set to the DF address.</t>

	    <t>If Tunnel address is set, another new IP header (tunnel
	    header) is prepended, while its DST field is set to tunnel IP
	    address. </t>

	    <t> The TOS fields of these prepended headers are set to 2 and the 
		PROTOCOL fields are also set to a special value IP_TUNAT. We also 
		increase the value of TOS field of the original packet by 1. </t>
          

	    <t> In the case of IP fragmentation, the above operations are
		performed on all fragments. </t>
        </list>
	  </t>

	  <t>
	    TOS field is used to avoid routing loops, which may occur in the 
		scenarios of multi-link failures.  When a route receives a packet 
		with TOS field being value 2 and find it need another protection,
		it simply drop the packet. So if a packet is being protected, it 
		will not be protected again.  If a packet has been protected twice,
		the TOS field of the original packet will be 2, it will not be
		protected for another time.
	  </t>

	  <t>
		If the packet is delivered locally to the router:
		
        <list style="numbers">
          <t>
		    If the packet has a tunnel header, i.e. the field of PROTOCOL equals
		IP_TUNAT, and the router is the destination of the tunnel, it drops the 
		tunnel header and check the next header. 
          </t>

          <t>
		    If the nested header is a df header, it forwards the
		    packet by the corresponding interface.
          </t>
        </list>
	  </t>

    </section>
    

    <section title="IANA Considerations">
      <t>
      There are no IANA considerations that arise from this architectural
      description of IPFRR.  However there will be changes to the IGPs to
      support IPFRR in which there will be IANA considerations.
      </t>
    </section>
    
    <section title=" Security Considerations">
      <t>
        Changes to the IGPs to support IPFRR do not introduce any additional
        security risks.
      </t>
    </section>

  </middle>

  <back>
    <references>
    <reference anchor="refs.RFC5286">
      <front>
        <title>Basic Specification for IP Fast-Reroute: Loop-free
        Alternates
        </title>
        <author initials="A." surname="Atlas"
                fullname="Alia K. Atlas">
        </author>
        <author initials="A." surname="Zinin"
                fullname="Alex Zinin">
        </author>
        <author initials="R." surname="Torvi"
                fullname="Raveendra Torvi">
        </author>
        <author initials="G." surname="Choudhury"
                fullname="Gagan Choudhury">
        </author>
        <author initials="C." surname="Martin"
                fullname="Christian Martin">
        </author>
        <author initials="B." surname="Imhoff"
                fullname="Brent Imhoff">
        </author>
        <author initials="D." surname="Fedyk"
                fullname="Don Fedyk">
        </author>
        
        <date month="September" year="2008" />
      </front>
      <seriesInfo name="RFC" value="5286" />
    </reference>
    <reference anchor="refs.iSPF">
      <front>
        <title>
        New dynamic SPT algorithm based on a ball-and-string model
        </title>
        <author surname="Narvaez"
                fullname="Paolo Narvaez">
        </author>
        <author surname="Siu"
                fullname="Kai-Yeung Siy">
        </author>
        <author surname="Tzeng"
                fullname="Hong-Yi Tzeng">
        </author>
        <date year="2001" />
      </front>
      <seriesInfo name="IEEE/ACM" value="Trans. Netw." />
    </reference>
    <reference anchor="refs.Tunnels">
      <front>
        <title>
          IP Fast Reroute using tunnels
        </title>
        <author  initials="S." surname="Bryant"
                fullname="S. Bryant">
        </author>
        <author initials="C." surname="Filsfils"
                fullname="C. Filsfils">
        </author>
        <author initials="S." surname="Previdi"
                fullname="S. Previdi">
        </author>
        <author initials="M." surname="Shand"
                fullname="M. Shand">
        </author>
        <date year="2008" />
      </front>
      <seriesInfo name="Internet draft" value="draft-bryant-ipfrr-tunnels-03" />
    </reference>
    <reference anchor="refs.Notvia">
      <front>
        <title>
          IP Fast Reroute Using Not-via Addresses
        </title>
        <author initials="M." surname="Shand"
                fullname="M. Shand">
        </author>
        <author initials="S." surname="Bryant"
                fullname="S. Bryant">
        </author>
        <author initials="S." surname="Previdi"
                fullname="S. Previdi">
        </author>
        <date year="2009" />
      </front>
      <seriesInfo name="Internet draft" value="draft-ietf-rtgwg-ipfrr-notvia-addresses-04" />
    </reference>
    </references>
  </back>
</rfc>
