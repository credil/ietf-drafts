<?xml version='1.0' ?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd' [ 
  <!ENTITY rfc2119 SYSTEM "reference.RFC.2119.xml">
  <!ENTITY rfc3261 SYSTEM "reference.RFC.3261.xml">
  <!ENTITY rfc3263 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3263.xml'>
  <!ENTITY rfc2782 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2782.xml'>
  <!ENTITY i-d.ietf-soc-overload-control PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-soc-overload-control.xml'>
]>

<rfc ipr='trust200902' category='std' docName="DOCNAME">

<?rfc toc='yes'?>
<?rfc compact='yes'?>
<?rfc sortrefs='yes'?>
<?rfc symrefs="yes"?>

<front>
  <title abbrev='Adaptive load balancing'>Adaptive load balancing in the
  Session Initiation Protocol (SIP)</title>

  <author initials='T.B.' surname='Bessis' fullname='Thierry Bessis'>
    <organization>Alcatel-Lucent</organization>
    <address>
      <postal>
	<street>1960 Lucent Lane, Rm 9D-418</street>
	<city>Naperville</city> <region>IL</region>
	<code>60653</code>
	<country>USA</country>
      </postal> 
      <email>Thierry.Bessis@alcatel-lucent.com</email>
    </address>
  </author>

  <author initials="V.K.G." surname="Gurbani" fullname="Vijay K. Gurbani">
    <organization>Alcatel-Lucent</organization>
    <address>
      <postal>
	<street>1960 Lucent Lane, Rm 9C-533</street>
	<city>Naperville</city> <region>IL</region>
	<code>60563</code>
	<country>USA</country>
      </postal> 
      <email>vkg@bell-labs.com</email>
    </address>
  </author>

  <date year='2011' />
  <area>RAI</area>
  <workgroup>Dispatch Working Group</workgroup>
  <keyword>SIP</keyword>
  <keyword>Overload control</keyword>
  <keyword>Load balancing</keyword>

  <abstract>
    <t>A Session Initiation Protocol (SIP) proxy, distributing traffic to 
    a cluster of multiple downstream
    servers, can use the DNS SRV mechanism to perform load balancing.  
    However, the "weight" field in the DNS SRV mechanism is intended for static
    server selection.  Over time, the traffic arriving at the downstream
    SIP servers may cause them to enter an overload condition, adversely
    impacting the throughput of the SIP cluster.  This document proposes
    to impart the dynamic load of each SIP server to the load distributing
    SIP proxy, thereby allowing it to load balance the traffic so as to
    reduce --- or even prevent --- an overload condition.</t>
  </abstract>
</front>

<middle>

  <section title="Problem statement" anchor="sec:problem-statement">

    <t>In SIP <xref target="RFC3261"/> networks, resolution of a target 
    URI may result in a
    set of more than one SIP server to which the request can be
    sent.  This set defines a logical cluster of servers, one of which
    can serve as the next hop server.  The standard manner to choose one 
    one of the downstream SIP servers from the set is specified in
    RFC 3263 <xref target="RFC3263"/>, which in turn, employs RFC 2782 
    <xref target="RFC2782"/> to perform load balancing.  RFC 2782
    <xref target="RFC2782"/> proposes a simple and effective algorithm
    to distribute the traffic using the "weight" field.  RRs with
    larger "weight" value have a higher probability of being selected.</t>

    <t>This mechanism works well, however, since the load arriving at
    a cluster changes over time, the "weight" field is unable to reflect
    this change dynamically.  The result is that when the offered load
    increases, the SIP proxy will proportionally send a higher fraction
    of the load to the downstream SIP server with a higher "weight",
    thereby causing congestion collapse at that SIP server.</t>

    <t>It would be beneficial if the real-time load information from
    the cluster is made available to the SIP proxy so it can adjust its
    distribution accordingly.  This document proposes such a mechanism.</t>

  </section> <!-- sec:problem-statement -->

  <section title="Terminology">

    <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
    "OPTIONAL" in this document are to be interpreted as described in
    <xref target="RFC2119">RFC 2119</xref>.</t>

  </section>

  <section title="Solution: imparting information for load balancing"
           anchor="sec:solution">

    <t>One way to impart dynamic server load information to the SIP
    proxy is to assign short TTLs to SRV RRs, thereby causing the 
    resolver at the SIP proxy to expire its cache frequently.  However,
    the disadvantage to such a solution is two-fold: one, the operational
    overhead to change the RRs frequently is often understood to be a
    sizable barrier, and two, frequently changing RRs will increase
    overall network load.</t>

    <t>It is necessary to provide load feedback at an interval
    that will allow the SIP servers in the cluster to rapidly rebalance
    the load in the cluster.  If the rebalancing is not done
    promptly and continuously, the most loaded of the servers (the one
    with a higher "weight" field value) will enter overload state
    and start shedding requests, even though the cluster itself has
    resources to process the load currently being shed.</t>

    <t>Furthermore, the DNS SRV RR "weight" field, as envisioned by
    the authors of RFC 2782, is intended to express a static 
    context through which to interpret the meaning.  For instance, a
    server with a higher value --- say 3 --- in the "weight" field 
    imparts that it is 3 times as efficient as a server that has
    a "weight" value of 1 (for some definition of efficiency that is
    understood by the DNS zone owner.  For example, a server with a
    "weight" of 3 may be three times as fast --- more memory, more
    CPU cores, gigabit interfaces, etc. --- as the one with a "weight"
    of 1).</t>

    <t>Thus, it appears that the "weight" value as used in RFC 2782 
    is not well suited to
    provide dynamic load status at a server processing SIP requests.
    Many operational SIP service providers are loathe to frequently
    change the value of the "weight" field for load balancing.</t>

    <t>The proposal in this document is simple, and in fact, a 
    default implementation of the load balance algorithm can be entirely 
    based on the server selection algorithm specified in RFC 2782 
    <xref target="RFC2782"/>, albeit with the load balance weights being 
    updated continuously as described next.</t>
 
    <t>Each SIP server in a cluster sends load information in the form 
    of a weight continuously to the SIP proxy by piggybacking on the 
    normal signaling messages being exchanged between the SIP proxy and 
    the SIP server in the cluster (to 
    this extent, a "Via" header parameter to transport load information is 
    attractive).  Load information is imparted as an integral value
    with a range between 0-65535 (this mirrors the range of the
    "weight" field in RFC 2782).  This is a 16-bit unsigned integer
    in network-byte order form.  Larger weights are given higher
    probability of being selected to receive a request.  When a request
    is to be sent downstream, the SIP proxy recomputes the probability of 
    sending a request downstream based on the latest load balance 
    information that was returned to it by the SIP servers in the
    cluster.</t>

    <t>As a SIP server in the cluster starts to process traffic,
    it will reduce the load control information going to its upstream 
    SIP proxy.  If the cluster has capacity, other
    load control weights will be higher, and will thus get a proportionate
    share of the traffic.  As all SIP servers in the cluster reach
    capacity, the load distribution algorithm arranges for a uniform
    load distribution to all of the SIP servers until either the offered
    load subsides or the SIP servers enter into overload mode and start
    shedding traffic using the mechanism defined in the overload control
    draft <xref target="I-D.ietf-soc-overload-control"/>.</t>

    <t>Such a mechanism has the following benefits:</t>
    <t><list style="symbols">
     <t>There is no need to repeat the request at an alternate server,
     as is currently done.  (Today, once a server set is computed using
     RFC 2782, the first server in this list is contacted.  If that
     server does not respond in a timely manner, the next server is
     contacted.  Thus, the same request is sent to multiple servers
     in the same cluster.  With the approach outlined in this document, 
     the SIP proxy has an authoritative view to
     the load on each of the downstream SIP servers and can automatically
     choose one that is better able to process the request.)</t>
     <t>There is no need to synchronize the load control parameter
     across each SIP server in the cluster.  Each server operates
     independently of others in the cluster.</t>
     <t>Even if one SIP server in the cluster is operating at 
     capacity, incoming traffic will be processed as long as the
     aggregate cluster has enough processing capacity.</t>
     <t>If all SIP servers are operating at maximum capacity, the
     algorithm will distribute traffic uniformly.</t>
    </list></t>
    
  </section> <!-- sec:solution -->

  <section title="Relationship with IETF protocols"
           anchor="sec:relationship">

  <section title="Relationship with RFC 2782" 
           anchor="sub:sec:rfc2782">

    <t>The usage and range of the load control parameter here mimics the 
    usage and range of the "weight" parameter in RFC 2782.  However, 
    because the weights in RFC 2782 are static, a SIP proxy can use 
    these weights as initialization vectors when the cluster is put
    into service.  As the offered load increases (or decreases), the
    load control algorithm updates the weights in real time at the SIP
    proxy.</t>

  </section> <!-- sub:sec:rfc2782 -->

  <section title="Relationship with overload control mechanism"
           anchor="sub:sec:oc">

   <t>There is a natural inclination to conflate load balancing 
   with overload control.  While one can reduce overload control at a 
   certain SIP server in the cluster by load balancing the traffic, 
   overload control (as being defined by the SOC working group) by 
   itself operates independent of load balancing.</t>
 
   <t>Essentially, overload control is the ability of a SIP server in
   the cluster to recognize that it is under overload and ask its 
   upstream neighbour to quench traffic arriving to the overloaded SIP
   server by some percentage <xref target="I-D.ietf-soc-overload-control"/>.
   As all SIP servers in the cluster reach capacity, the load distribution 
   algorithm arranges for a uniform load distribution to all of the 
   SIP servers until either the offered load subsides or the SIP servers 
   enter into overload mode and start shedding traffic using the 
   mechanism defined in the overload control draft 
   <xref target="I-D.ietf-soc-overload-control"/>.</t>

  </section> <!-- sub:sec:oc -->

  </section> <!-- sec:relationship -->

  <section anchor="sec:security" title="Security Considerations">
 
    <t>An attacker that has access to the communication channel
    can mount a man-in-the-middle attack by unduly changing the
    value of the load balancing parameter to affect the downstream
    SIP server.</t>

    <t>A SIP operator can ostensibly leak private information to
    an attacker that is observing the signaling messages.  It becomes
    relatively easy to know which SIP server in a cluster is more
    capable than others by observing messages over a long period.
    However, this seeming leak of privacy is no different than what
    the same attacker can observe by querying DNS SRV RRs for a 
    domain directly.</t>

    <t>A SIP operator can prevent both of the above security issues
    by requiring TLS to be used between a SIP proxy and the individual
    SIP servers in a cluster. Furthermore, since load balancing feedback 
    has no meaning beyond the next hop, there is no need to secure 
    the communication over multiple hops.</t>

  </section> <!-- sec:security --> 

  <section anchor="sec:iana" title="IANA Considerations">
  
    <t>TBD.</t>

  </section> <!-- sec:iana -->

</middle>

<back>
 <references title='Normative References'>

   &rfc2119;

   &rfc3261;

 </references>

 <references title="Informative References">

   &rfc3263;
   &rfc2782;
   &i-d.ietf-soc-overload-control;

 </references>

 <section title="Acknowledgements">

   <t>The authors thank Keith Drage and Volker Hilt for discussions
   related to load balancing that resulted in this draft.</t>

 </section> 

</back>

</rfc>
