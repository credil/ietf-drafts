<?xml version="1.0" encoding="UTF-8"?>
<!--
    This XML document is the output of clean-for-DTD.xslt; a tool that strips
    extensions to RFC2629(bis) from documents for processing with xml2rfc.
-->
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<!DOCTYPE rfc
  PUBLIC "" "rfc2629.dtd">
<rfc ipr="full3978" docName="draft-reschke-webdav-search-15" category="exp">
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

<front>
  <title abbrev="WebDAV SEARCH">Web Distributed Authoring and Versioning (WebDAV) SEARCH</title>
		
  <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
  	<organization abbrev="greenbytes">greenbytes GmbH</organization>
		<address>
      <postal>
        <street>Hafenweg 16</street>
        <city>Muenster</city><region>NW</region><code>48155</code>
        <country>Germany</country>
      </postal>
		  <phone>+49 251 2807760</phone>	
			<email>julian.reschke@greenbytes.de</email>	
			<uri>http://greenbytes.de/tech/webdav/</uri>	
		</address>
	</author>
    
	<author initials="S." surname="Reddy" fullname="Surendra Reddy">
		<organization abbrev="Optena">Optena Corporation</organization>
		<address>
	    <postal>
   	    <street>2860 Zanker Road, Suite 201</street>
       	<city>San Jose</city><region>CA</region><code>95134</code>
        <country>U.S.A.</country>
      </postal>
      <phone>+1 408 321 9006</phone>
      <email>skreddy@optena.com</email>
	  </address>
  </author>
    
  <author initials="J." surname="Davis" fullname="Jim Davis">
    <organization/>
		<address>
      <postal>
        <street>27 Borden Street</street>
        <city>Toronto</city><region>Ontario</region><code>M5S 2M8</code>
        <country>Canada</country>
      </postal>
      <phone>+1 416 929 5854</phone>
      <email>jrd3@alum.mit.edu</email>
      <uri>http://www.econetwork.net/~jdavis</uri>
    </address>
  </author>

	<author initials="A." surname="Babich" fullname="Alan Babich">
		<organization abbrev="Filenet">Filenet, an IBM company</organization>
    <address>
			<postal>
        <street>3565 Harbor Blvd.</street>
        <city>Costa Mesa</city><region>CA</region><code>92626</code>
        <country>U.S.A.</country>
      </postal>
      <phone>+1 714 327 3403</phone>
      <email>ababich@us.ibm.com</email>
    </address>
  </author>    

  <date month="February" year="2008" day="19"/>

<abstract>
<t>
  This document specifies a set of methods, headers, properties and content-types
  composing WebDAV SEARCH, an application of the HTTP/1.1 protocol to efficiently search for DAV 
  resources based upon a set of client-supplied criteria.   
</t>
</abstract>

<note title="Editorial Note (To be removed by RFC Editor before publication)">
  <t>
    Please send comments to the Distributed Authoring and Versioning (WebDAV)
    DASL mailing list at <eref target="mailto:www-webdav-dasl@w3.org"/>,
    which may be joined by sending a message with subject "subscribe" to
    <eref target="mailto:www-webdav-dasl-request@w3.org"/>.
    Discussions of the WebDAV DASL mailing list are archived at
    <eref target="http://lists.w3.org/Archives/Public/www-webdav-dasl/"/>.       
  </t>
  <t>
    An issues list and XML and HTML versions of this draft are available from
    <eref target="http://greenbytes.de/tech/webdav/#draft-reschke-webdav-search"/>.
  </t>
</note>


	</front><middle>











<section title="Introduction">

<section title="DASL">
<t>
  This document defines Web Distributed Authoring and Versioning (WebDAV) SEARCH, an application
  of HTTP/1.1 forming a lightweight search protocol to transport queries
  and result sets that allows clients to make use of server-side search facilities.
  It is based on the expired internet draft for DAV Searching &amp; Locating <xref target="DASL"/>.
  <xref target="DASLREQ"/> describes the motivation for DASL.
  In this specification,
  the terms "WebDAV SEARCH" and "DASL" are used interchangeably.
</t>
<t>
  DASL minimizes the complexity of clients so as to facilitate widespread
  deployment of applications capable of utilizing the DASL search mechanisms.
</t>

<t>
  DASL consists of:
	<list style="symbols">
		<t>the SEARCH method and the request/response formats defined for it (<xref target="METHOD_SEARCH"/>),</t>
		<t>feature discovery through the "DASL" response header and
    the optional DAV:supported-grammar-set property (<xref target="discovery.of.supported.query.grammars"/>),</t>
		<t>optional grammar schema discovery (<xref target="QSD"/>) and</t>
    <t>one mandatory grammar: DAV:basicsearch (<xref target="basicsearch"/>).</t>
  </list>
</t>

</section>

<section title="Relationship to DAV">
<t>
  DASL relies on the resource and property model defined by <xref target="RFC4918"/>.
  DASL does not alter this model. Instead, DASL allows clients to access DAV-modeled
  resources through server-side search.
</t>
</section>



<section title="Terms">



<t>
   This document uses the terms defined in <xref target="RFC2616"/>, in
   <xref target="RFC4918"/>, in <xref target="RFC3253"/> and in this section.
</t>
<t>Criteria<iref item="Criteria" primary="true"/>
  <list><t>
    An expression against which each resource in the search scope is evaluated.
  </t></list>
</t>
<t>Query<iref item="Query" primary="true"/>
  <list><t>
    A query is a combination of a search scope, search criteria, result record
    definition, sort specification, and a search modifier.
  </t></list>
</t>
<t>Query Grammar<iref item="Query Grammar" primary="true"/>
  <list><t>
    A set of definitions of XML elements, attributes, and constraints on their
    relations and values that defines a set of queries and the intended semantics. 
  </t></list>
</t>
<t>Query Schema<iref item="Query Schema" primary="true"/>
  <list><t>
    A listing, for any given grammar and scope, of the properties and operators
    that may be used in a query with that grammar and scope. 
  </t></list>
</t>
<t>Result<iref item="Result" primary="true"/>
  <list><t>
    A result is a result set, optionally augmented with other information describing the search as a whole.
  </t></list>
</t>
<t>Result Record<iref item="Result Record" primary="true"/>
  <list><t>
    A description of a resource. A result record is a set of properties, and possibly other descriptive information.
  </t></list>
</t>
<t>Result Record Definition<iref item="Result Record Definition" primary="true"/>
  <list><t>
    A specification of the set of properties to be returned in the result record.
  </t></list>
</t>
<t>Result Set<iref item="Result Set" primary="true"/>
  <list><t>
    A set of records, one for each resource for which the search criteria evaluated to True. 
  </t></list>
</t>
<t>Scope<iref item="Scope" primary="true"/>
  <list><t>
    A set of resources to be searched. 
  </t></list>
</t>
<t>Search Modifier<iref item="Search Modifier" primary="true"/>
  <list><t>
    An instruction that governs the execution of the query but is not part of
    the search scope, result record definition, the search criteria, or the sort
    specification. An example of a search modifier is one that controls how
    much time the server can spend on the query before giving a response. 
  </t></list>
</t>
<t>Sort Specification<iref item="Sort Specification" primary="true"/>
  <list><t>
    A specification of an ordering on the result records in the result set. 
  </t></list>
</t>

</section>

<section title="Notational Conventions">

<t>
  This specification uses the Augmented Backus-Naur Form (ABNF) notation of <xref target="RFC5234"/>,
  unless explicitly stated otherwise.
</t>

<t>
  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document
  are to be interpreted as described in <xref target="RFC2119"/>.
</t>
<t>
  This document uses XML DTD fragments as a purely notational convention. WebDAV
  request and response bodies can not be validated due to the specific
  extensibility rules defined in Section 17 of <xref target="RFC4918"/> and
  due to the fact that all XML elements defined by this specification use the 
  XML namespace name "DAV:". In particular:
  <list style="numbers">
    <t>element names use the "DAV:" namespace,</t>  
    <t>element ordering is irrelevant unless explicitly stated,</t>  
    <t>extension elements (elements not already defined as valid child
    elements) may be added anywhere, except when explicitly stated otherwise,</t>  
    <t>extension attributes (attributes not already defined as valid for this
    element) may be added anywhere, except when explicitly stated otherwise.</t>  
  </list>
</t>
<t>
  When an XML element type in the "DAV:" namespace is referenced in this document
  outside of the context of an XML fragment, the string "DAV:" will be prefixed to
  the element type.
</t>
<t>
  Similarly, when an XML element type in the namespace "http://www.w3.org/2001/XMLSchema"
  is referenced in this document outside of the context of an XML fragment, the
  string "xs:" will be prefixed to the element type.
</t>
</section>

<section title="Note on Usage of 'DAV:' XML Namespace">
<t>

  This specification defines elements, properties and condition names in the
  XML namespace "DAV:". In general, only specifications authored by IETF
  working groups are supposed to do this. In this case an exception was made,
  because WebDAV SEARCH started its life in the IETF DASL working group
  (<eref target="http://www.webdav.org/dasl/"/>, and at the time the working
  group closed down there was already significant deployment of this specification.
  
</t>
</section>


<section title="An Overview of DASL at Work">
<t>
One can express the basic usage of DASL in the following steps:
<list style="symbols">
  <t>The client constructs a query using the DAV:basicsearch grammar.</t>
  <t>The client invokes the SEARCH method on a resource that will perform the
     search (the search arbiter) and includes a text/xml or application/xml request entity that
     contains the query.</t>
  <t>The search arbiter performs the query.</t>
  <t>The search arbiter sends the results of the query back to the client in
     the response. The server MUST send an entity
     that matches the 
     WebDAV multistatus format (<xref target="RFC4918"/>, Section 13).</t>
</list>
</t>
</section>

</section>

<section title="The SEARCH Method" anchor="METHOD_SEARCH">
<iref item="SEARCH method" primary="true"/>
<iref item="Methods" subitem="SEARCH" primary="true"/>

<section title="Overview">
<t>
  The client invokes the SEARCH method to initiate a server-side search.
  The body of the request defines the query. The server MUST emit
  an entity matching the 
     WebDAV multistatus format (<xref target="RFC4918"/>, Section 13).
</t>
<t>
  The SEARCH method plays the role of transport mechanism for the query
  and the result set. It does not define the semantics of the query. The
  type of the query defines the semantics.
</t>
</section>

<section title="The Request">
<t>
  The client invokes the SEARCH method on the resource named by the Request-URI.
</t>

<section title="The Request-URI">
<t>
  The Request-URI identifies the search arbiter.
  Any HTTP resource may function as search arbiter. It is not a new type of
  resource (in the sense of DAV:resourcetype as defined in 
  <xref target="RFC4918"/>, Section 15.9),
  nor does it have to be a WebDAV-compliant resource.
</t>
<t>
  The SEARCH method defines no relationship between the arbiter and the
  scope of the search, rather the particular query grammar used in the query
  defines the relationship. For example, a query grammar may force
  the Request-URI to correspond exactly to the search scope.
</t>
</section>

<section title="The Request Body" anchor="request.body">
<t>
  The server MUST process a text/xml or application/xml request body, and
  MAY process request bodies in other formats. See <xref target="RFC3023"/> for guidance
  on packaging XML in requests.
</t>
<t>
  Marshalling:
  <list>
    <t>
      If a request body with content type text/xml or application/xml is included,
      it MUST be either a DAV:searchrequest or a DAV:query-schema-discovery XML
      element. Its single child element identifies the query grammar.
    </t>
    <t>
      For DAV:searchrequest, the definition of search criteria, the result record,
      and any other details needed to perform the search depend on the individual
      search grammar.
    </t>
    <t>
      For DAV:query-schema-discovery, the semantics is defined in
      <xref target="QSD"/>.
    </t>
  </list>
</t>
<t>
  Preconditions:
  <list>
    <t>
      <iref item="DAV:search-grammar-discovery-supported precondition" primary="true"/>
      <iref item="Condition Names" subitem="DAV:search-grammar-discovery-supported (pre)" primary="true"/>
      (DAV:search-grammar-discovery-supported): when an XML request body is present
      and has a DAV:query-schema-discovery document element, the server MUST
      support the query schema discovery mechanism described in <xref target="QSD"/>.
    </t>
    <t>
      <iref item="DAV:search-grammar-supported precondition" primary="true"/>
      <iref item="Condition Names" subitem="DAV:search-grammar-supported (pre)" primary="true"/>
      (DAV:search-grammar-supported): when an XML request body is present,
      the search grammar identified by the document element's child element
      must be a supported search grammar.
    </t>
    
    <t>
      <iref item="DAV:search-multiple-scope-supported precondition" primary="true"/>
      <iref item="Condition Names" subitem="DAV:search-multiple-scope-supported (pre)" primary="true"/>
      (DAV:search-multiple-scope-supported): if the SEARCH request specified
      multiple scopes, the server MUST support this optional feature.
    </t>
    
    <t>
      <iref item="DAV:search-scope-valid precondition" primary="true"/>
      <iref item="Condition Names" subitem="DAV:search-scope-valid (pre)" primary="true"/>
      (DAV:search-scope-valid): the supplied search scope must be valid. There
      can be various reasons for a search scope to be invalid, including
      unsupported URI schemes and communication problems. Servers MAY add
      <xref target="RFC4918"/> compliant DAV:response elements as content to the
      condition element indicating the precise reason for the failure.
    </t>
  </list>
</t>
</section>
</section>

<section title="The Successful 207 (Multistatus) Response">
<t>
  If the server returns 207 (Multistatus), then the search proceeded successfully
  and the response MUST 
  use the WebDAV multistatus format (<xref target="RFC4918"/>, Section 13).
  The results of this method SHOULD NOT be cached. 
</t>
<t>
  There MUST be one DAV:response for each resource that matched
  the search criteria. For each such response, the DAV:href element
  contains the URI of the resource, and the response MUST include a DAV:propstat
  element.
</t>
<t><list><t>
  Note: the WebDAV multistatus format requires at least one
  DAV:response child element. This specification relaxes that restriction
  so that empty results can be represented.
</t></list></t>
<t>
  Note that for each matching resource found there may be multiple URIs
  within the search scope mapped to it. In this case, a server SHOULD report
  only one of these URIs. Clients can use the live property DAV:resource-id defined
  in Section 3.1 of <xref target="draft-ietf-webdav-bind"/> to identify possible duplicates. 
</t>

<iref item="Result Set Truncation" subitem="Example" primary="true"/>
<section title="Result Set Truncation">
<t>
  A server MAY limit the number of resources in a reply, for example to limit
  the amount of resources expended in processing a query. If it does so,
  the reply MUST use status code 207, return a DAV:multistatus response
  body and indicate a status of 507 (Insufficient Storage) for the search
  arbiter URI. It SHOULD include the partial results.
</t>
<t>
  When a result set is truncated, there may be many more resources that
  satisfy the search criteria but that were not examined.
</t>
<t>
  If partial results are included and the client requested an ordered
  result set in the original request, then any partial results that are returned
  MUST be ordered as the client directed.
</t>
<t>
  Note that the partial results returned MAY be any subset of the result
  set that would have satisfied the original query.
</t>
</section>



<section title="Extending the PROPFIND Response">
<t>
  A response MAY include more information than PROPFIND defines so long as
  the extra information does not invalidate the PROPFIND response. Query
  grammars SHOULD define how the response matches the PROPFIND response.
</t>
</section>

<section title="Example: A Simple Request and Response">
<t>
  This example demonstrates the request and response framework. The following
  XML document shows a simple (hypothetical) natural language query. 
  The name of the query element is natural-language-query in the XML namespace
  "http://example.com/foo". The actual query is "Find the
  locations of good Thai restaurants in Los Angeles". For this hypothetical
  query, the arbiter returns two properties for each selected resource.
</t>
<figure>

<preamble>
&gt;&gt; Request:</preamble>
<artwork type="message/http; msgtype=&#34;request&#34;" xml:space="preserve"><![CDATA[
SEARCH / HTTP/1.1
Host: example.org
Content-Type: application/xml
Content-Length: 252

<?xml version="1.0" encoding="UTF-8"?>
<D:searchrequest xmlns:D="DAV:" xmlns:F="http://example.com/foo">
  <F:natural-language-query>
    Find the locations of good Thai restaurants in Los Angeles
  </F:natural-language-query>
</D:searchrequest>
]]></artwork>
</figure>
<figure><preamble>
&gt;&gt; Response:</preamble>
<artwork type="message/http; msgtype=&#34;response&#34;" xml:space="preserve"><![CDATA[
HTTP/1.1 207 Multi-Status
Content-Type: text/xml; charset="utf-8"
Content-Length: 429

<?xml version="1.0" encoding="UTF-8"?>
<D:multistatus xmlns:D="DAV:"
   xmlns:R="http://example.org/propschema">
  <D:response>
    <D:href>http://siamiam.example/</D:href>
    <D:propstat>
      <D:prop>
        <R:location>259 W. Hollywood</R:location>
        <R:rating><R:stars>4</R:stars></R:rating>
      </D:prop>
      <D:status>HTTP/1.1 200 OK</D:status>
    </D:propstat>
  </D:response>
</D:multistatus>
]]></artwork>
</figure>


</section>


<section title="Example: Result Set Truncation">
<t>
  In the example below, the server returns just two results, and then
  indicates that the result is truncated by adding a DAV:response element
  for the search arbiter resource with 507 (Insufficient Storage) status.
</t>

<figure><preamble>
&gt;&gt; Request:</preamble>
<artwork type="message/http; msgtype=&#34;request&#34;"><![CDATA[
SEARCH / HTTP/1.1
Host: example.net
Content-Type: text/xml; charset="utf-8"
Content-Length: xxx

 ... the query goes here ...
]]></artwork></figure>
<figure><preamble>
&gt;&gt; Response:</preamble>
<artwork type="message/http; msgtype=&#34;response&#34;" xml:space="preserve"><![CDATA[
HTTP/1.1 207 Multistatus
Content-Type: text/xml; charset="utf-8"
Content-Length: 640

<?xml version="1.0" encoding="utf-8"?>
<D:multistatus xmlns:D="DAV:">
  <D:response>
    <D:href>http://www.example.net/sounds/unbrokenchain.au</D:href>
    <D:status>HTTP/1.1 200 OK</D:status>
  </D:response>
  <D:response>
    <D:href>http://tech.mit.example/arch96/photos/Lesh1.jpg</D:href>
    <D:status>HTTP/1.1 200 OK</D:status>
  </D:response>
  <D:response>
    <D:href>http://example.net</D:href>
    <D:status>HTTP/1.1 507 Insufficient Storage</D:status>
    <D:responsedescription xml:lang="en">
       Only first two matching records were returned
    </D:responsedescription>
  </D:response>
</D:multistatus>
]]></artwork></figure>
</section>
</section>

<section title="Unsuccessful Responses">
<t>
  If a SEARCH request could not be executed or the attempt to execute it
  resulted in an error, the server MUST indicate the failure with an
  appropriate status code and SHOULD add a response body as defined in
  <xref target="RFC3253"/>, Section 1.6. Unless otherwise stated, condition
  elements are empty, however specific conditions element MAY include
  additional child elements that describe the error condition in more detail.
</t>

<section title="Example of an Invalid Scope">
<t>
  In the example below, a request failed because the scope identifies a 
  HTTP resource that was not found.
</t>
<figure><preamble>
&gt;&gt; Response:</preamble>
<artwork type="message/http; msgtype=&#34;response&#34;" xml:space="preserve"><![CDATA[
HTTP/1.1 409 Conflict
Content-Type: text/xml; charset="utf-8"   
Content-Length: 275

<?xml version="1.0" encoding="UTF-8"?>
<d:error xmlns:d="DAV:">
  <d:search-scope-valid>
    <d:response>
      <d:href>http://www.example.com/X</d:href>
      <d:status>HTTP/1.1 404 Object Not Found</d:status>
    </d:response>
  </d:search-scope-valid>
</d:error>
]]></artwork></figure>
</section>
</section>
</section>
  
<section title="Discovery of Supported Query Grammars" anchor="discovery.of.supported.query.grammars">
<iref item="Query Grammar Discovery" primary="true"/>
<t>
  Servers MUST support discovery of the query grammars supported by a search
  arbiter resource.
</t>
<t>
  Clients can determine which query grammars are supported by an arbiter
  by invoking OPTIONS on the search arbiter. If the resource supports SEARCH,
  then the DASL response header will appear in the response. The DASL response
  header lists the supported grammars.
</t>
<t>
  Servers supporting the WebDAV extensions <xref target="RFC3253"/> and/or 
  <xref target="RFC3744"/> MUST also
  <list style="symbols">
    <t>report SEARCH in the live property DAV:supported-method-set for all search arbiter resources and</t>
    <t>support the live property DAV:supported-query-grammar-set as defined in <xref target="PROPERTY_supported-query-grammar-set"/>.</t>
  </list>
</t>

<section title="The OPTIONS Method">
<iref item="Query Grammar Discovery" subitem="using OPTIONS" primary="true"/>
<iref item="OPTIONS method" primary="true"/>
<t>
  The OPTIONS method allows the client to discover if a resource supports
  the SEARCH method and to determine the list of search grammars supported
  for that resource.
</t>
<t>
  The client issues the OPTIONS method against a resource named by the
  Request-URI. This is a normal invocation of OPTIONS as defined in Section 9.2 of <xref target="RFC2616"/>.
</t>
<t>
  If a resource supports the SEARCH method, then the server MUST list
  SEARCH in the Allow header
  defined in Section 14.7 of <xref target="RFC2616"/>.
</t>
<t>
  DASL servers MUST include the DASL header in the OPTIONS response. This
  header identifies the search grammars supported by that resource.
</t>
</section>

<section title="The DASL Response Header" anchor="header.dasl">
<iref item="OPTIONS method" subitem="DASL response header" primary="true"/>

<figure>
<artwork type="abnf2616"><![CDATA[
DASLHeader = "DASL" ":" 1#Coded-URL
Coded-URL  = <defined in Section 10.1 of [RFC4918]>
]]></artwork>
<postamble>
(This grammar uses the augmented BNF format defined in Section 2.1 of <xref target="RFC2616"/>)
</postamble>
</figure>
<t>
  The DASL response header indicates server support for a query grammar in
  the OPTIONS method. The value is a URI that indicates the type of grammar.
  Note that although the URI can be used to identify each supported search
  grammar, there is not necessarily a direct relationship between the URI and the
  XML element name that can be used in XML based SEARCH requests (the element 
  name itself is identified by its namespace name (a URI reference) and 
  the element's local name).
</t>
<t>
  This header MAY be repeated.
</t>
<figure><preamble>
For example:</preamble>
<artwork type="example"><![CDATA[
DASL: <http://foobar.example/syntax1> 
DASL: <http://akuma.example/syntax2>
DASL: <DAV:basicsearch>
DASL: <http://example.com/foo/natural-language-query>
]]></artwork></figure>
</section>


<section title="DAV:supported-query-grammar-set (protected)" anchor="PROPERTY_supported-query-grammar-set">
<iref item="DAV:supported-query-grammar-set property" primary="true"/>
<iref item="Properties" subitem="DAV:supported-query-grammar-set" primary="true"/>
<iref item="Query Grammar Discovery" subitem="using live property" primary="true"/>
<t>
  This WebDAV property is required for any server supporting either
  <xref target="RFC3253"/> and/or <xref target="RFC3744"/> and
  identifies the XML based query grammars that are supported by the search arbiter resource.
</t>
<figure>
<artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT supported-query-grammar-set (supported-query-grammar*)>
<!ELEMENT supported-query-grammar (grammar)>
<!ELEMENT grammar ANY>
]]></artwork></figure>
<t>
  ANY value: a query grammar element type
</t>

</section>


<section title="Example: Grammar Discovery">
<t>
  This example shows that the server supports search on the /somefolder
  resource with the query grammars: DAV:basicsearch, http://foobar.example/syntax1
  and http://akuma.example/syntax2. Note that every server MUST support
  DAV:basicsearch.
</t>
<figure><preamble>
&gt;&gt; Request:</preamble>
<artwork type="message/http; msgtype=&#34;request&#34;"><![CDATA[
OPTIONS /somefolder HTTP/1.1
Host: example.org
]]></artwork></figure>
<figure><preamble>
&gt;&gt; Response:</preamble>
<artwork type="message/http; msgtype=&#34;response&#34;"><![CDATA[
HTTP/1.1 200 OK
Allow: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE
Allow: MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, SEARCH
DASL: <DAV:basicsearch>
DASL: <http://foobar.example/syntax1> 
DASL: <http://akuma.example/syntax2>
]]></artwork></figure>
<t>
  This example shows the equivalent taking advantage of a server's support for
  DAV:supported-method-set and DAV:supported-query-grammar-set.
</t>
<figure><preamble>
&gt;&gt; Request:</preamble>
<artwork type="message/http; msgtype=&#34;request&#34;" xml:space="preserve"><![CDATA[
PROPFIND /somefolder HTTP/1.1
Host: example.org
Depth: 0
Content-Type: text/xml; charset="utf-8"
Content-Length: 165

<?xml version="1.0" encoding="UTF-8" ?>
<propfind xmlns="DAV:">
  <prop>
    <supported-query-grammar-set/>
    <supported-method-set/>
  </prop>
</propfind>
]]></artwork></figure>
<figure><preamble>
&gt;&gt; Response:</preamble>
<artwork type="message/http; msgtype=&#34;response&#34;" xml:space="preserve"><![CDATA[
HTTP/1.1 207 Multi-Status
Content-Type: text/xml; charset="utf-8"
Content-Length: 1349

<?xml version="1.0" encoding="utf-8" ?>
<multistatus xmlns="DAV:">
 <response>
  <href>http://example.org/somefolder</href>
  <propstat>
   <prop>
    <supported-query-grammar-set>
     <supported-query-grammar>
      <grammar><basicsearch/></grammar>
     </supported-query-grammar>
     <supported-query-grammar>
      <grammar><syntax1 xmlns="http://foobar.example/"/></grammar>
     </supported-query-grammar>
     <supported-query-grammar>
      <grammar><syntax2 xmlns="http://akuma.example/"/></grammar>
     </supported-query-grammar>
    </supported-query-grammar-set>
    <supported-method-set>
     <supported-method name="COPY" />
     <supported-method name="DELETE" />
     <supported-method name="GET" />
     <supported-method name="HEAD" />
     <supported-method name="LOCK" />
     <supported-method name="MKCOL" />
     <supported-method name="MOVE" />
     <supported-method name="OPTIONS" />
     <supported-method name="POST" />
     <supported-method name="PROPFIND" />
     <supported-method name="PROPPATCH" />
     <supported-method name="PUT" />
     <supported-method name="SEARCH" />
     <supported-method name="TRACE" />
     <supported-method name="UNLOCK" />
    </supported-method-set>
   </prop>
   <status>HTTP/1.1 200 OK</status>
  </propstat>
 </response>
</multistatus>
]]></artwork></figure>
<t>
  Note that the query grammar element names marshalled as part of the 
  DAV:supported-query-grammar-set can be directly used as element names in
  an XML based query.
</t>
</section>
</section>
  
<section title="Query Schema Discovery: QSD" anchor="QSD">

<t>
  Servers MAY support the discovery of the schema for a query grammar.
</t>
<t>
  The DASL response header and the DAV:supported-query-grammar-set property
  provide means for clients to discover the
  set of query grammars supported by a resource. This alone is not sufficient
  information for a client to generate a query. For example, the DAV:basicsearch
  grammar defines a set of queries consisting of a set of operators applied
  to a set of properties and values, but the grammar itself does not specify
  which properties may be used in the query. QSD for the DAV:basicsearch
  grammar allows a client to discover the set of properties that are searchable,
  selectable, and sortable. Moreover, although the DAV:basicsearch
  grammar defines a minimal set of operators, it is possible that a resource
  might support additional operators in a query. For example, a resource
  might support a optional operator that can be used to express content-based
  queries in a proprietary syntax. QSD allows a client to discover these
  operators and their syntax. The set of discoverable quantities will differ
  from grammar to grammar, but each grammar can define a means for a client
  to discover what can be discovered.
</t>
<t>
  In general, the schema for a given query grammar depends on both the
  resource (the arbiter) and the scope. A given resource might have access
  to one set of properties for one potential scope, and another set for a
  different scope. For example, consider a server able to search two distinct
  collections, one holding cooking recipes, the other design documents for
  nuclear weapons. While both collections might support properties such as
  author, title, and date, the first might also define properties such as
  calories and preparation time, while the second defined properties such
  as yield and applicable patents. Two distinct arbiters indexing the same
  collection might also have access to different properties. For example,
  the recipe collection mentioned above might also indexed by a value-added
  server that also stored the names of chefs who had tested the recipe. Note
  also that the available query schema might also depend on other factors,
  such as the identity of the principal conducting the search, but these
  factors are not exposed in this protocol.
</t>


<section title="Additional SEARCH Semantics">
<t>
  Each query grammar supported by DASL defines its own syntax for expressing
  the possible query schema. A client retrieves the schema for a given query
  grammar on an arbiter resource with a given scope by invoking the SEARCH
  method on that arbiter with that grammar and scope and with a root element
  of DAV:query-schema-discovery rather than DAV:searchrequest.
</t>

<t>
  Marshalling:
  <list style="empty"> 
    <t>
      The request body MUST be a DAV:query-schema-discovery element.
<figure><artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT query-schema-discovery ANY>
<!-- ANY value: XML element specifying the query grammar
                and the scope -->
]]></artwork></figure>
    </t>
    <t>
      The response body takes the form of a DAV:multistatus element (<xref target="RFC4918"/>, Section 13),
      where DAV:response is extended to hold the returned query grammar
      inside a DAV:query-schema container element.
<figure><artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT response (href, status, query-schema?,
  responsedescription? >
<!ELEMENT query-schema ANY>
]]></artwork></figure>
    </t>
  </list>
</t>
<t>
  The content of this container is an XML element whose name and syntax depend upon the grammar,
  and whose value may (and likely will) vary depending upon the grammar,
  arbiter, and scope.
</t>

<section title="Example of Query Schema Discovery">
<t>
  In this example, the arbiter is recipes.example, the grammar is DAV:basicsearch,
  the scope is also recipes.example.
</t>
<figure><preamble>
&gt;&gt; Request:</preamble>
<artwork type="message/http; msgtype=&#34;request&#34;" xml:space="preserve"><![CDATA[
SEARCH / HTTP/1.1
Host: recipes.example
Content-Type: application/xml
Content-Length: 258

<?xml version="1.0"?>
<query-schema-discovery xmlns="DAV:">
  <basicsearch>
    <from>
      <scope>
        <href>http://recipes.example</href>
        <depth>infinity</depth>
      </scope>
    </from>
  </basicsearch>
</query-schema-discovery>
]]></artwork></figure>
<figure><preamble>
&gt;&gt; Response:</preamble>
<artwork type="message/http; msgtype=&#34;response&#34;"><![CDATA[
HTTP/1.1 207 Multistatus
Content-Type: application/xml
Content-Length: xxx

<?xml version="1.0"?>
<multistatus xmlns="DAV:">
  <response>  
    <href>http://recipes.example</href>
    <status>HTTP/1.1 200 OK</status>
    <query-schema>
      <basicsearchschema>
        <!-- (See Section 5.19 for
        the actual contents) -->
      </basicsearchschema>
    </query-schema>
  </response>
</multistatus>
]]></artwork></figure>
<t>
  The query schema for DAV:basicsearch is defined in <xref target="qs-basicsearch"/>.
</t>
</section>
</section>
</section>

<section title="The DAV:basicsearch Grammar" anchor="basicsearch">

<section title="Introduction">


<t>
  DAV:basicsearch uses an extensible XML syntax that allows clients
  to express search requests that are generally useful for WebDAV scenarios.
  DASL-extended servers MUST accept this grammar, and MAY accept other grammars.
</t>
<t>
  DAV:basicsearch has several components:
</t>
<t><list style="symbols">
  <t>DAV:select provides the result record definition.</t>
  <t>DAV:from defines the scope.</t>
  <t>DAV:where defines the criteria.</t>
  <t>DAV:orderby defines the sort order of the result set.</t>
  <t>DAV:limit provides constraints on the query as a whole.</t>
</list>
</t>


</section>

<section title="The DAV:basicsearch DTD">


<figure>
<preamble>&lt;!-- "basicsearch" element --&gt;</preamble>
<artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT basicsearch   (select, from, where?, orderby?, limit?) >
]]></artwork></figure>
<figure>
<preamble>&lt;!-- "select" element --&gt;</preamble>
<artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT select        (allprop | prop) >
]]></artwork></figure>
<figure>
<preamble>&lt;!-- "from" element --&gt;</preamble>

<artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT from          (scope+) >
<!ELEMENT scope         (href, depth, include-versions?) >
<!ELEMENT include-versions EMPTY >
]]></artwork>

</figure>
<figure>
<preamble>&lt;!-- "where" element --&gt;</preamble>
<artwork type="application/xml-dtd"><![CDATA[
<!ENTITY % comp_ops     "eq | lt | gt| lte | gte">
<!ENTITY % log_ops      "and | or | not">
<!ENTITY % special_ops  "is-collection | is-defined | 
                         language-defined | language-matches">
<!ENTITY % string_ops   "like">
<!ENTITY % content_ops  "contains">

<!ENTITY % all_ops      "%comp_ops; | %log_ops; | %special_ops; |
                         %string_ops; | %content_ops;">

<!ELEMENT where         ( %all_ops; ) >

<!ELEMENT and           ( %all_ops; )+ >

<!ELEMENT or            ( %all_ops; )+ >

<!ELEMENT not           ( %all_ops; ) >

<!ELEMENT lt            (prop, (literal|typed-literal)) >
<!ATTLIST lt            caseless   (yes|no) #IMPLIED>

<!ELEMENT lte           (prop, (literal|typed-literal)) >
<!ATTLIST lte           caseless   (yes|no) #IMPLIED>

<!ELEMENT gt            (prop, (literal|typed-literal)) >
<!ATTLIST gt            caseless   (yes|no) #IMPLIED>

<!ELEMENT gte           (prop, (literal|typed-literal)) >
<!ATTLIST gte           caseless   (yes|no) #IMPLIED>

<!ELEMENT eq            (prop, (literal|typed-literal)) >
<!ATTLIST eq            caseless   (yes|no) #IMPLIED>

<!ELEMENT literal       (#PCDATA)>
<!ELEMENT typed-literal (#PCDATA)>
<!ATTLIST typed-literal xsi:type CDATA #IMPLIED>

<!ELEMENT is-collection EMPTY >
<!ELEMENT is-defined    (prop) >

<!ELEMENT language-defined    (prop) >
<!ELEMENT language-matches    (prop, literal) >

<!ELEMENT like          (prop, literal) >
<!ATTLIST like          caseless   (yes|no) #IMPLIED>

<!ELEMENT contains      (#PCDATA)>
]]></artwork>
</figure>
<figure>
<preamble>&lt;!-- "orderby" element --&gt;</preamble>
<artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT orderby       (order+) >
<!ELEMENT order         ((prop | score), (ascending | descending)?)>
<!ATTLIST order         caseless   (yes|no) #IMPLIED>
<!ELEMENT ascending     EMPTY>
<!ELEMENT descending    EMPTY>
]]></artwork></figure>
<figure>
<preamble>&lt;!-- "limit" element --&gt;</preamble>
<artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT limit         (nresults) >
<!ELEMENT nresults      (#PCDATA) >
]]></artwork></figure>



<section title="Example Query">
<t>
  This query retrieves the content length values for all resources located
  under the server's "/container1/" URI namespace whose length exceeds 10000.
</t>
<figure><artwork type="example"><![CDATA[
<d:searchrequest xmlns:d="DAV:">
  <d:basicsearch>
    <d:select>
      <d:prop><d:getcontentlength/></d:prop>
    </d:select>
    <d:from>
      <d:scope>
        <d:href>/container1/</d:href>
        <d:depth>infinity</d:depth>
      </d:scope>
    </d:from>
    <d:where>
      <d:gt> 
        <d:prop><d:getcontentlength/></d:prop>
        <d:literal>10000</d:literal>
      </d:gt>
    </d:where>
      <d:orderby>
        <d:order>
        <d:prop><d:getcontentlength/></d:prop>
        <d:ascending/>
      </d:order>
    </d:orderby>
  </d:basicsearch>
</d:searchrequest>
]]></artwork></figure>

</section>
</section>

<section title="DAV:select">
<iref item="DAV:select" primary="true"/>
<t>
  DAV:select defines the result record, which is a set of properties
  and values. This document defines two possible values: DAV:allprop
  and DAV:prop, both defined in Section 14 of <xref target="RFC4918"/>.
</t>

</section>

<section title="DAV:from">

<iref item="DAV:from" primary="true"/>
<iref item="DAV:scope" primary="true"/>
<iref item="DAV:depth" primary="true"/>
<iref item="DAV:include-versions" primary="true"/>
<figure><artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT scope            (href, depth, include-versions?) >
<!ELEMENT include-versions EMPTY >
]]></artwork></figure>
<t>
  DAV:from defines the query scope.
  This contains one or more DAV:scope elements. Support for multiple scope
  elements is optional, however servers MUST fail a request specifying
  multiple DAV:scope elements if they can't support it (see <xref target="request.body"/>,
  precondition DAV:search-multiple-scope-supported).
  The scope element contains mandatory DAV:href and DAV:depth elements.
</t>
<t>
  DAV:href indicates the URI to use as a scope.
</t>
<t>
  When the scope is a collection, if DAV:depth is "0", the search
  includes only the collection. 
  When it is "1", the search includes the collection and its immediate
  children. When it is "infinity", it includes the collection and all its progeny.
</t>
<t>
  When the scope is not a collection, the
  depth is ignored and the search applies just to the resource itself.
</t>

<t>
  If the search includes a redirect reference resource (see <xref target="RFC4437"/>),
  it applies only to that resource, not to its target.
</t>

<t>
  When the child element DAV:include-versions is present, the search scope
  will include all versions (see <xref target="RFC3253"/>, Section 2.2.1) of all
  version-controlled resources in scope. Servers that do support versioning
  but do not support the DAV:include-versions feature MUST signal an 
  error if it is used in a query.
</t>


<section title="Relationship to the Request-URI">
<t>
  If the DAV:scope element is an absolute URI, the scope is exactly
  that URI.
</t>
<t>
  If the DAV:scope element is  is an absolute URI reference, the scope is taken
  to be relative to the Request-URI.
</t>
</section>

<section title="Scope">
<t>
  A Scope can be an arbitrary URI.
</t>
<t>
  Servers, of course, may support only particular scopes. This may include
  limitations for particular schemes such as "http:" or "ftp:" or certain
  URI namespaces.
</t>
</section>
</section>


<section title="DAV:where">
<iref item="DAV:where" primary="true"/>
<t>
  The DAV:where element defines the search condition for inclusion of
  resources in the result set. The value of this element is an XML element
  that defines a search operator that evaluates to one of the Boolean truth
  values TRUE, FALSE, or UNKNOWN. The search operator contained by DAV:where
  may itself contain and evaluate additional search operators as operands,
  which in turn may contain and evaluate additional search operators as operands,
  etc. recursively.
</t>


<section title="Use of Three-Valued Logic in Queries">
<t>
  Each operator defined for use in the where clause that returns a Boolean
  value MUST evaluate to TRUE, FALSE, or UNKNOWN. The resource under scan
  is included as a member of the result set if and only if the search condition
  evaluates to TRUE.
</t>
<t>
  Consult <xref target="three-valued-logic"/> for details on the application of three-valued logic
  in query expressions.
</t>
</section>

<section title="Handling Optional Operators">
<t>
  If a query contains an operator that is not supported by the server, then 
  the server MUST respond with a 422 (Unprocessable Entity) status code.
</t>
</section>

<section title="Treatment of NULL Values" anchor="null-values">
<t>
  If a PROPFIND for a property value would yield a
  non-2xx (see <xref target="RFC2616"/>, Section 10.2)
  response for that property, then that property is considered NULL.
</t>
<t>
  NULL values are "less than" all other values in comparisons.
</t>
<t>
  Empty strings (zero length strings) are not NULL values. An empty string
  is "less than" a string with length greater than zero.
</t>
<t>
  The DAV:is-defined operator is defined to test if the value
  of a property is NULL.
</t>
</section>


<section title="Treatment of Properties with mixed/element Content" anchor="non-simple-types">
<t>
  Comparisons of properties that do not have simple types (text-only content) is
  out-of-scope for the standard operators defined for DAV:basicsearch and therefore is defined
  to be UNKNOWN (as per <xref target="three-valued-logic"/>).
  For querying the DAV:resourcetype property, see <xref target="OPERATOR_is-collection"/>.
</t>
</section>

<section title="Example: Testing for Equality">
<t>
  The example shows a single operator (DAV:eq) applied in the criteria.
</t>
<figure><artwork type="example"><![CDATA[
<d:where>
  <d:eq>
    <d:prop>
      <d:getcontentlength/>
    </d:prop>
    <d:literal>100</d:literal>
  </d:eq>
</d:where>]]></artwork></figure>
</section>

<section title="Example: Relative Comparisons">
<t>
  The example shows a more complex operation involving several operators
  (DAV:and, DAV:eq, DAV:gt) applied in the criteria.
  This DAV:where expression matches those resources that are "image/gifs"
  over 4K in size.
</t>
<figure><artwork type="example"><![CDATA[
<D:where>
  <D:and>
    <D:eq>
      <D:prop>
        <D:getcontenttype/>
      </D:prop>
      <D:literal>image/gif</D:literal>
    </D:eq>
    <D:gt>
      <D:prop>
        <D:getcontentlength/>
      </D:prop>
      <D:literal>4096</D:literal>
    </D:gt>
  </D:and>
</D:where>]]></artwork></figure>
</section>
</section>

<section title="DAV:orderby">
<iref item="DAV:orderby" primary="true"/>
<t>
  The DAV:orderby element specifies the ordering of the result set. It contains
  one or more DAV:order elements, each of which specifies a comparison between
  two items in the result set. Informally, a comparison specifies a test that
  determines whether one resource appears before another in the result set.
  Comparisons are applied in the order they occur in the DAV:orderby element,
  earlier comparisons being more significant.
</t>
<t>
  The comparisons defined here use only a single property from each resource,
  compared using the same ordering as the DAV:lt operator
  (ascending<iref item="DAV:ascending" primary="true"/>) or DAV:gt operator
  (descending<iref item="DAV:descending" primary="true"/>).
  If neither direction is specified, the default is DAV:ascending.
</t>
<t>
  In the context of the DAV:orderby element, null values are
  considered to collate before any actual (i.e., non null) value, including
  strings of zero length (this is compatible with <xref target="SQL99"/>).
</t>



<t>
  The "caseless" attribute may be used to indicate case-sensitivity
  for comparisons.
</t>



<section title="Example of Sorting">
<t>
  This sort orders first by last name of the author, and then by size, in
  descending order, so that for each author, the largest works appear first.
</t>
<figure><artwork type="example"><![CDATA[
<d:orderby>
  <d:order>
    <d:prop><r:lastname/></d:prop>
    <d:ascending/>
  </d:order>
  <d:order>
    <d:prop><d:getcontentlength/></d:prop>
    <d:descending/>
  </d:order>
</d:orderby>]]></artwork></figure>
</section>
</section>


<section title="Boolean Operators: DAV:and, DAV:or, and DAV:not">
<iref item="DAV:and" primary="true"/>
<t>
  The DAV:and operator performs a logical AND operation on the expressions
  it contains.
</t>
<iref item="DAV:or" primary="true"/>
<t>
  The DAV:or operator performs a logical OR operation on the values it contains.
</t>
<iref item="DAV:not" primary="true"/>
<t>
  The DAV:not operator performs a logical NOT operation on the
  values it contains.
</t>
</section>

<section title="DAV:eq">
<iref item="DAV:eq" primary="true"/>
<t>
  The DAV:eq operator provides simple equality matching on property values.
</t>
<iref item="DAV:eq" subitem="caseless attribute"/>
<iref item="caseless attribute"/>
<t>
  The "caseless" attribute may be used with this element.
</t>
</section>

<section title="DAV:lt, DAV:lte, DAV:gt, DAV:gte">

<iref item="DAV:lt" primary="true"/>
<iref item="DAV:lte" primary="true"/>
<iref item="DAV:gt" primary="true"/>
<iref item="DAV:gte" primary="true"/>
<t>
  The DAV:lt, DAV:lte, DAV:gt, and DAV:gte
  operators provide comparisons on property values, using less-than, less-than
  or equal, greater-than, and greater-than or equal respectively. The "caseless"
  attribute may be used with these elements.
</t>
</section>

<section title="DAV:literal">
<iref item="DAV:literal" primary="true"/>

<t>
  DAV:literal allows literal values to be placed in an expression.
</t>
<t>
  White space in literal values is significant in comparisons. For consistency
  with <xref target="RFC4918"/>, clients SHOULD NOT specify the attribute "xml:space"
  (Section 2.10 of <xref target="XML"/>) to override this behavior.
</t>
<t>
  In comparisons, the contents of DAV:literal SHOULD be treated as string, with
  the following exceptions:
  <list style="symbols">
    <t>when operand for a comparison with a DAV:getcontentlength property,
    it SHOULD be treated as an integer value (the behavior for non-integer values
    is undefined),
    </t>
    <t>when operand for a comparison with a DAV:creationdate or DAV:getlastmodified property,
    it SHOULD be treated as a date value in the ISO-8601 subset defined for
    the DAV:creationdate property (see <xref target="RFC4918"/>, Section 15.1;
    the behavior of values not in this format is undefined).
    </t>
    <t>when operand for a comparison with a property for which the type is known and when compatible with that type,
    it MAY be treated according to this type.
    </t>
  </list>
</t>


</section>




<section title="DAV:typed-literal (optional)">
<iref item="DAV:typed-literal" primary="true"/>
<t>
  There are situations in which a client may want to force a comparison not to
  be string-based (as defined for DAV:literal). In these cases, a typed
  comparison can be enforced by using DAV:typed-literal instead.
</t>
<figure><artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT typed-literal (#PCDATA)>
]]></artwork></figure>
<t>
  The data type is specified using the xsi:type attribute defined in
  <xref target="XS1"/>, Section 2.6.1. If the type is not specified, it
  defaults to "xs:string".
</t>
<t>
  A server MUST reject a request with an unknown type.

  It SHOULD reject a request if the value provided in DAV:typed-literal can not be cast to the specified type.

</t>
<t>
  The comparison evaluates to UNKNOWN if the property value can not be
  cast to the specified datatype (see <xref target="XPATHFUNC"/>, Section 17).
</t>




<section title="Example for Typed Numerical Comparison">
<t>
  Consider a set of resources with the dead property "edits" in the namespace
  "http://ns.example.org":
</t>
<texttable>
  <ttcol>URI</ttcol><ttcol>property value</ttcol>
  <c>/a</c><c>"-1"</c>
  <c>/b</c><c>"01"</c>
  <c>/c</c><c>"3"</c>
  <c>/d</c><c>"test"</c>
  <c>/e</c><c>(undefined)</c>
</texttable>
<t>
  The expression
</t>
<figure><artwork type="example"><![CDATA[
<lt xmlns="DAV:"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <prop><edits xmlns="http://ns.example.org"/></prop>
  <typed-literal xsi:type="xs:integer">3</typed-literal>
</lt>
]]></artwork></figure>
<t>
  will evaluate to TRUE for the resources "/a" and "/b" (their property values
  can be parsed as type xs:number, and the numerical comparison evaluates to
  true), to FALSE for "/c" (property value is compatible, but numerical comparison
  evaluates to false) and UNKNOWN for "/d" and "/e" (the property either is
  undefined, or its value can not be parsed as xs:number).
</t>
</section>
</section>





<section title="Support for Matching xml:lang Attributes on Properties">
<t>
  The following two optional operators can be used to express conditions
  on the language of a property value (as expressed using the xml:lang
  attribute).
</t>
<section title="DAV:language-defined (optional)" anchor="operator.language-defined">
<iref item="DAV:language-defined" primary="true"/>
<figure><artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT language-defined (prop)>
]]></artwork></figure>
<t>
  This operator evaluates to TRUE if the language for the value of
  the given property is known, FALSE if it isn't and UNKNOWN if the property itself
  is not defined.
</t>
</section>

<section title="DAV:language-matches (optional)" anchor="operator.language-matches">
<iref item="DAV:language-matches" primary="true"/>
<figure><artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT language-matches (prop, literal)>
]]></artwork></figure>
<t>
  This operator evaluates to TRUE if the language for the value of the 
  given property is known and matches the language name given in the
  &lt;literal&gt; element, FALSE if it doesn't match and UNKNOWN
  if the property itself is not defined.
</t>
<t>
  Languages are considered to match if they are the same, or if the
  language of the property value is a sublanguage of the language
  specified in the &lt;literal&gt; element (see <xref target="XPATH"/>, Section 4.3,
  "lang function"). 
</t>
</section>

<section title="Example of Language-Aware Matching">
<t>
  The expression below will evaluate to TRUE if the property "foobar" exists
  and its language is either unknown, English or a sublanguage of English. 
</t>
<figure><artwork type="example"><![CDATA[
<or xmlns="DAV:">
  <not>
    <language-defined>
      <prop><foobar/></prop>
    </language-defined>
  </not>
  <language-matches>
    <prop><foobar/></prop>
    <literal>en</literal>
  </language-matches>
</or>
]]></artwork></figure>
</section>
</section>





<section title="DAV:is-collection" anchor="OPERATOR_is-collection">
<iref item="DAV:is-collection" primary="true"/>
<t>
  The DAV:is-collection operator allows clients to determine whether a resource is
  a collection (that is, whether its DAV:resourcetype element contains the
  element DAV:collection). 
</t>
<t>
  Rationale: This operator is provided in lieu of defining generic
  structure queries, which would suffice for this and for many more powerful
  queries, but seems inappropriate to standardize at this time.
</t>

<section title="Example of DAV:is-collection">
<t>
  This example shows a search criterion that picks out all and only the resources
  in the scope that are collections.
</t>
<figure><artwork type="example"><![CDATA[
<where xmlns="DAV:">
  <is-collection/>
</where>]]></artwork></figure>
</section>
</section>




<section title="DAV:is-defined">
<iref item="DAV:is-defined" primary="true"/>
<t>
  The DAV:is-defined operator allows clients to determine whether
  a property is defined on a resource. The meaning of "defined on a resource"
  is found in <xref target="null-values"/>.
</t>
<figure><preamble>Example:</preamble><artwork type="example"><![CDATA[
<d:is-defined>
  <d:prop><x:someprop/></d:prop>
</d:is-defined>]]></artwork></figure>
</section>



<section title="DAV:like">
<iref item="DAV:like" primary="true"/>
<t>
  The DAV:like is an optional operator intended to give simple wildcard-based
  pattern matching ability to clients.
</t>
<t>
  The operator takes two arguments.
</t>
<t>
  The first argument is a DAV:prop element identifying a single
  property to evaluate.
</t>
<t>
  The second argument is a DAV:literal element that gives the
  pattern matching string.
</t>

<section title="Syntax for the Literal Pattern">
<figure>

<artwork type="abnf"><![CDATA[
pattern       = [wildcard] 0*( text [wildcard] )

wildcard      = exactlyone / zeroormore
text          = 1*( character / escapeseq )

exactlyone    = "_"
zeroormore    = "%"
escapechar    = "\"
escapeseq     = "\" ( exactlyone / zeroormore / escapechar ) 

; character: see [XML], Section 2.2, minus wildcard / escapechar
character     = HTAB / LF / CR ; whitespace
character     =/ %x20-24 / %x26-5B / %x5D-5E / %x60-D7FF
character     =/ %xE000-FFFD / %x10000-10FFFF
]]></artwork>

</figure>
<t>
  The value for the literal is composed of wildcards separated by segments
  of text. Wildcards may begin or end the literal.
</t>
<t>
  The "_" wildcard matches exactly one character.
</t>
<t>
  The "%" wildcard matches zero or more characters
</t>
<t>
  The "\" character is an escape sequence so that the literal can include
  "_" and "%". To include the "\" character in the pattern, the escape sequence
  "\\" is used.
</t>
</section>

<section title="Example of DAV:like">
<t>
  This example shows how a client might use DAV:like to identify
  those resources whose content type was a subtype of image.
</t>
<figure><artwork type="example"><![CDATA[
<D:where>
  <D:like caseless="yes">
    <D:prop><D:getcontenttype/></D:prop>
    <D:literal>image/%</D:literal>
  </D:like>
</D:where>]]></artwork></figure>
</section>
</section>



<section title="DAV:contains" anchor="contains">
<iref item="DAV:contains" primary="true"/>
<t>
  The DAV:contains operator is an optional operator that provides
  content-based search capability. This operator implicitly searches against
  the text content of a resource, not against content of properties. The
  DAV:contains operator is intentionally not overly constrained, in order to allow the
  server to do the best job it can in performing the search.
</t>
<t>
  The DAV:contains operator evaluates to a Boolean value. It
  evaluates to TRUE if the content of the resource satisfies the search.
  Otherwise, it evaluates to FALSE.
</t>
<t>
  Within the DAV:contains XML element, the client provides a
  phrase: a single word or whitespace delimited sequence of words. Servers
  MAY ignore punctuation in a phrase. Case-sensitivity is left to the server.
</t>
<t>
  The following things may or may not be done as part of the search: Phonetic
  methods such as "soundex" may or may not be used. Word stemming may or
  may not be performed. Thesaurus expansion of words may or may not be done.
  Right or left truncation may or may not be performed. The search may be
  case insensitive or case sensitive. The word or words may or may not be
  interpreted as names. Multiple words may or may not be required to be adjacent
  or "near" each other. Multiple words may or may not be required to occur
  in the same order. Multiple words may or may not be treated as a phrase.
  The search may or may not be interpreted as a request to find documents
  "similar" to the string operand.
</t>


<section title="Result Scoring (DAV:score Element)" anchor="score">
<iref item="DAV:score" primary="true"/>
<t>
  Servers SHOULD indicate scores for the DAV:contains condition by adding a
  DAV:score XML element to the DAV:response element. Its value is defined only
  in the context of a particular query result. The value is a string representing
  the score, an integer from zero to 10000 inclusive, where a higher value
  indicates a higher score (e.g. more relevant).
</t>
<figure>
<preamble>Modified DTD fragment for DAV:propstat:</preamble><artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT response (href, ((href*, status)|(propstat+)),
                    responsedescription?, score?) >
<!ELEMENT score    (#PCDATA) >
]]></artwork></figure>
<t>
  Clients should note that, in general, it is not meaningful to compare
  the numeric values of scores from two different query results unless both were
  executed by the same underlying search system on the same collection of
  resources.
</t>
</section>

<section title="Ordering by Score">
<t>
  To order search results by their score, the DAV:score element may be added
  as child to the DAV:orderby element (in place of a DAV:prop element).
</t>
</section>

<section title="Examples">
<t>
  The example below shows a search for the phrase "Peter Forsberg".
</t>
<t>
  Depending on its support for content-based searching, a server MAY treat
  this as a search for documents that contain the words "Peter" and "Forsberg".
</t>
<figure><artwork type="example"><![CDATA[
<D:where>
  <D:contains>Peter Forsberg</D:contains>
</D:where>]]></artwork></figure>
<t>
  The example below shows a search for resources that contain "Peter" and
  "Forsberg".
</t>
<figure><artwork type="example"><![CDATA[
<D:where>
  <D:and>
    <D:contains>Peter</D:contains>
    <D:contains>Forsberg</D:contains>
  </D:and>
</D:where>]]></artwork></figure>
</section>
</section>

<section title="Limiting the Result Set" anchor="limiting.the.result.set">
<iref item="DAV:limit" primary="true"/>
<iref item="DAV:nresults" primary="true"/>
<figure><artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT limit (nresults) >
<!ELEMENT nresults (#PCDATA)> <!-- only digits -->]]></artwork></figure>
<t>
  The DAV:limit XML element contains requested limits from the client
  to limit the size of the reply or amount of effort expended by the server.
  The DAV:nresults XML element contains a requested maximum number
  of DAV:response elements to be returned in the response body.
  The server MAY disregard this limit.
  The value of this element is an integer.
</t>

<section title="Relationship to Result Ordering">
<iref item="DAV:score" subitem="relationship to DAV:orderby" primary="true"/>
<t>
  If the result set is both limited by DAV:limit and ordered according to
  DAV:orderby, the results that are included in the response document must be
  those that order highest.
</t>
</section>
</section>


<section title="The 'caseless' XML Attribute">
<iref item="caseless attribute" primary="true"/>
<t>
  The "caseless" attribute allows clients to specify caseless matching behavior
  instead of character-by-character matching for DAV:basicsearch operators.
</t>
<t>
  The possible values for "caseless" are "yes" or "no". The default value is
  server-specified. Caseless matching SHOULD be implemented as defined in
  
  <eref target="http://www.unicode.org/versions/Unicode4.0.0/ch05.pdf#G21180">section 5.18</eref>
  of the Unicode Standard (<xref target="UNICODE4"/>).
</t>
<t>
  Support for the "caseless" attribute is optional. A server should
  respond with a status of 422 if it is used but cannot be supported.
</t>
</section>



<section title="Query Schema for DAV:basicsearch" anchor="qs-basicsearch">
<t>
  The DAV:basicsearch grammar defines a search criteria that is
  a Boolean-valued expression, and allows for an arbitrary set of properties
  to be included in the result record. The result set may be sorted on a
  set of property values. Accordingly the DTD for schema discovery for this
  grammar allows the server to express:
</t>
<t>
  <list style="numbers">
    <t>the set of properties that may be either searched, returned, or used
    to sort, and a hint about the data type of such properties</t>
    <t>the set of optional operators defined by the resource.</t>
  </list>
</t>

<section title="DTD for DAV:basicsearch QSD">
<figure><artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT basicsearchschema  (properties, operators)>
<!ELEMENT any-other-property EMPTY>
<!ELEMENT properties         (propdesc*)>
<!ELEMENT propdesc           ((prop|any-other-property), datatype?,
                              searchable?, selectable?, sortable?,
                              caseless?)>
<!ELEMENT operators          (opdesc*)>
<!ELEMENT opdesc             ANY>
<!ATTLIST opdesc             allow-pcdata (yes|no) #IMPLIED>
<!ELEMENT operand-literal    EMPTY>
<!ELEMENT operand-typed-literal EMPTY>
<!ELEMENT operand-property   EMPTY>
]]></artwork></figure>
<t>
  The DAV:properties element holds a list of descriptions of properties.
</t>
<t>
  The DAV:operators element describes the optional operators
  that may be used in a DAV:where element.
</t>
</section>

<section title="DAV:propdesc Element">
<t>
  Each instance of a DAV:propdesc element describes the property
  or properties in the DAV:prop element it contains. All subsequent
  elements are descriptions that apply to those properties. All descriptions
  are optional and may appear in any order. Servers SHOULD support all the
  descriptions defined here, and MAY define others.
</t>
<t>
  DASL defines five descriptions. The first, DAV:datatype, provides
  a hint about the type of the property value, and may be useful to a user
  interface prompting for a value. The remaining four (DAV:searchable,
  DAV:selectable, DAV:sortable, and DAV:caseless)
  identify portions of the query (DAV:where, DAV:select,
  and DAV:orderby, respectively). If a property has a description
  for a section, then the server MUST allow the property to be used in that
  section. These descriptions are optional. If a property does not have such
  a description, or is not described at all, then the server MAY still allow
  the property to be used in the corresponding section.
</t>

<section title="DAV:any-other-property">
<t>
  This element can be used in place of DAV:prop to describe properties of
  WebDAV properties not mentioned in any other DAV:prop element. For instance,
  this can be used to indicate that all other properties are searchable and selectable
  without giving details about their types (a typical scenario for dead properties).
</t>
</section>

</section>

<section title="The DAV:datatype Property Description">
<t>
  The DAV:datatype element contains a single XML element that provides
  a hint about the domain of the property, which may be useful to a user
  interface prompting for a value to be used in a query.
  Data types are identified by an element name. Where appropriate, a server SHOULD
  use the simple data types defined in <xref target="XS2"/>.
</t>
<figure><artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT datatype ANY >]]></artwork></figure>
<t>
  Examples from <xref target="XS2"/>, Section 3:
</t>

<texttable>
<ttcol>Qualified name</ttcol><ttcol>Example</ttcol>
<c>xs:boolean</c><c>true, false, 1, 0</c>
<c>xs:string</c><c>Foobar</c>
<c>xs:dateTime</c><c>1994-11-05T08:15:5Z</c>
<c>xs:float</c><c>.314159265358979E+1</c>
<c>xs:integer</c><c>-259, 23</c>
</texttable>

<t>
  If the data type of a property is not given, then the data type defaults
  to xs:string.
</t>
</section>

<section title="The DAV:searchable Property Description">
<figure><artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT searchable EMPTY>]]></artwork></figure>
<t>
  If this element is present, then the server MUST allow this property to
  appear within a DAV:where element where an operator allows a property.
  Allowing a search does not mean that the property is guaranteed to be defined
  on every resource in the scope, it only indicates the server's willingness
  to check.
</t>
</section>

<section title="The DAV:selectable Property Description">
<figure><artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT selectable EMPTY>]]></artwork></figure>
<t>
  This element indicates that the property may appear in the DAV:select
  element.
</t>
</section>

<section title="The DAV:sortable Property Description">
<t>
  This element indicates that the property may appear in the DAV:orderby
  element.
</t>
<figure><artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT sortable EMPTY>]]></artwork></figure>
</section>




<section title="The DAV:caseless Property Description">
<t>
  This element only applies to properties whose data type is "xs:string" 
  and derived data types as per the DAV:datatype property description. Its presence indicates
  that compares performed for searches, and the comparisons for ordering
  results on the string property will be caseless (the default is
  character-by-character).
</t>
<figure><artwork type="application/xml-dtd"><![CDATA[
<!ELEMENT caseless EMPTY>]]></artwork></figure>
</section>



<section title="The DAV:operators XML Element">

<t>
  The DAV:operators element describes every optional operator supported
  in a query. (Mandatory operators are not listed since they are mandatory
  and permit no variation in syntax.). All optional operators that are supported
  MUST be listed in the DAV:operators element.
</t>
<t>
  The listing for an operator, contained in an DAV:opdesc element,
  consists of the operator (as an empty element), followed by one
  element for each operand. The operand MUST be either DAV:operand-property,
  DAV:operand-literal or DAV:operand-typed-literal, which indicate that the
  operand in the corresponding position is a property, a literal value or
  a typed literal value, respectively.
  If an operator is polymorphic (allows more than one operand syntax) then
  each permitted syntax MUST be listed separately.
</t>
<t>
  The DAV:opdesc element MAY have a "allow-pcdata" attribute (defaulting to
  "no"). A value of "yes" indicates that the operator can contain character
  data, as it is the case with DAV:contains (see <xref target="contains"/>).
  Definition of additional operators using this format is NOT RECOMMENDED.
</t>

<figure><artwork type="example"><![CDATA[
<operators xmlns='DAV:'>
  <opdesc>
    <like/><operand-property/><operand-literal/>
  </opdesc>
</operators>
]]></artwork></figure>
</section>

<section title="Example of Query Schema for DAV:basicsearch">

<figure><artwork type="example"><![CDATA[
<D:basicsearchschema xmlns:D="DAV:"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"">
  <D:properties>
    <D:propdesc>
      <D:prop><D:getcontentlength/></D:prop>
      <D:datatype><xs:nonNegativeInteger/></D:datatype>
      <D:searchable/><D:selectable/><D:sortable/>
    </D:propdesc>
    <D:propdesc>
      <D:prop><D:getcontenttype/><D:displayname/></D:prop>
      <D:searchable/><D:selectable/><D:sortable/>
    </D:propdesc>
    <D:propdesc>
      <D:prop><fstop xmlns="http://jennicam.org"/></D:prop>
      <D:selectable/>
    </D:propdesc>
    <D:propdesc>
      <D:any-other-property/>
      <D:searchable/><D:selectable/>
    </D:propdesc>
  </D:properties>
  <D:operators>
    <D:opdesc>
      <D:like/><D:operand-property/><D:operand-literal/>
    </D:opdesc>
    <D:opdesc allow-pcdata="yes">
      <D:contains/>
    </D:opdesc>
  </D:operators>
</D:basicsearchschema>]]></artwork></figure>
<t>
  This response lists four properties. The data type of the last three properties
  is not given, so it defaults to xs:string. All are selectable, and the first
  three may be searched. All but the last may be used in a sort. Of the optional
  DAV operators, DAV:contains and DAV:like are supported.
</t>
<t>
  Note: The schema discovery defined here does not provide for discovery of
  supported values of the "caseless" attribute. This may require that the reply
  also list the mandatory operators.
</t>
</section>
</section>
</section>

<section title="Internationalization Considerations">
<t>
  Properties may be language-tagged using the xml:lang attribute (see
  <xref target="RFC4918"/>, Section 4.3). The optional operators
  DAV:language-defined (<xref target="operator.language-defined"/>) 
  and DAV:language-matches (<xref target="operator.language-matches"/>)
  allow to express conditions on the language tagging information.
</t>
</section>

<section title="Security Considerations">
<t>
  This section is provided to detail issues concerning security implications
  of which DASL applications need to be aware. All of the security considerations
  of HTTP/1.1 also apply to DASL. In addition, this section will include
  security risks inherent in searching and retrieval of resource properties
  and content.
</t>
<t>
  A query must not allow one to retrieve information about values or existence
  of properties that one could not obtain via PROPFIND. (e.g. by use in DAV:orderby,
  or in expressions on properties.)
</t>
<t>
  A server should prepare for denial of service attacks. For example a
  client may issue a query for which the result set is expensive to calculate
  or transmit because many resources match or must be evaluated.
</t>

<section title="Implications of XML External Entities">
<t>
  XML supports a facility known as "external entities", defined in
  Section 4.2.2 of <xref target="XML"/>, which instruct an XML processor to retrieve and perform
  an inline include of XML located at a particular URI. An external XML entity
  can be used to append or modify the document type declaration (DTD) associated
  with an XML document. An external XML entity can also be used to include
  XML within the content of an XML document. For non-validating XML, such
  as the XML used in this specification, including an external XML entity
  is not required by <xref target="XML"/>. However, <xref target="XML"/> does state that an XML
  processor may, at its discretion, include the external XML entity.
</t>
<t>
  External XML entities have no inherent trustworthiness and are subject
  to all the attacks that are endemic to any HTTP GET request. Furthermore,
  it is possible for an external XML entity to modify the DTD, and hence
  affect the final form of an XML document, in the worst case significantly
  modifying its semantics, or exposing the XML processor to the security
  risks discussed in <xref target="RFC3023"/>. Therefore, implementers must be aware that
  external XML entities should be treated as untrustworthy.
</t>
<t>
  There is also the scalability risk that would accompany a widely deployed
  application which made use of external XML entities. In this situation,
  it is possible that there would be significant numbers of requests for
  one external XML entity, potentially overloading any server which fields
  requests for the resource containing the external XML entity.
</t>
</section>
</section>

<section title="Scalability">
<t>
  Query grammars are identified by URIs. Applications SHOULD not attempt
  to retrieve these URIs even if they appear to be retrievable (for example,
  those that begin with "http://")
</t>
</section>




<section title="IANA Considerations">

<t>
  This document uses the namespace defined in Section 21 of <xref target="RFC4918"/> for XML
  elements.
</t>

<section title="HTTP Headers">
<t>
  This document specifies the HTTP header listed below, to be added to the
  HTTP header registry defined in <xref target="RFC3864"/>.
</t>
<section title="DASL">
<t>
<list style="hanging">
  <t hangText="Header field name:">DASL</t>
  <t hangText="Applicable protocol:">http</t>
  <t hangText="Status:">Experimental</t>
  <t hangText="Author/Change controller:">IETF</t>
  <t hangText="Specification document:">this specification (<xref target="header.dasl"/>)</t>
</list>
</t>
</section>
</section>

</section>

<section title="Contributors">
<t>
  This document is based on prior work on the DASL protocol done by the WebDAV
  DASL working group until the year 2000 -- namely by Alan Babich, Jim Davis,
  Rick Henderson, Dale Lowry, Saveen Reddy and Surendra Reddy.
</t>
</section>

<section title="Acknowledgements">
<t>
  This document has benefited from thoughtful discussion by Lisa Dusseault,
  Javier Godoy, 
  Sung Kim, Elias Sinderson, Martin Wallmer, Keith Wannamaker, Jim Whitehead
  and Kevin Wiggen.
</t>
</section>
</middle>

<back>
<references title="Normative References">

  <reference anchor="RFC2616">
  
  <front>
  <title abbrev="HTTP/1.1">Hypertext Transfer Protocol -- HTTP/1.1</title>
  <author initials="R.T." surname="Fielding" fullname="Roy T. Fielding">
  <organization>University of California, Irvine, Information and Computer Science</organization>
  <address>
  <postal>
  <street/>
  <city>Irvine</city>
  <region>CA</region>
  <code>92697-3425</code>
  <country>US</country></postal>
  <phone>+1 949 824 1715</phone>
  <email>fielding@ics.uci.edu</email></address></author>
  <author initials="J." surname="Gettys" fullname="James Gettys">
  <organization>World Wide Web Consortium, MIT Laboratory for Computer Science</organization>
  <address>
  <postal>
  <street>545 Technology Square</street>
  <city>Cambridge</city>
  <region>MA</region>
  <code>02139</code>
  <country>US</country></postal>
  <phone/>
  <facsimile>+1 617 258 8682</facsimile>
  <email>jg@w3.org</email></address></author>
  <author initials="J.C." surname="Mogul" fullname="Jeffrey C. Mogul">
  <organization>Compaq Computer Corporation, Western Research Laboratory</organization>
  <address>
  <postal>
  <street>250 University Avenue</street>
  <city>Palo Alto</city>
  <region>CA</region>
  <code>94301</code>
  <country>US</country></postal>
  <phone/>
  <email>mogul@wrl.dec.com</email></address></author>
  <author initials="H.F." surname="Nielsen" fullname="Henrik Frystyk Nielsen">
  <organization>World Wide Web Consortium, MIT Laboratory for Computer Science</organization>
  <address>
  <postal>
  <street>545 Technology Square</street>
  <city>Cambridge</city>
  <region>MA</region>
  <code>02139</code>
  <country>US</country></postal>
  <phone/>
  <facsimile>+1 617 258 8682</facsimile>
  <email>frystyk@w3.org</email></address></author>
  <author initials="L." surname="Masinter" fullname="Larry Masinter">
  <organization>Xerox Corporation</organization>
  <address>
  <postal>
  <street>3333 Coyote Hill Road</street>
  <city>Palo Alto</city>
  <region>CA</region>
  <code>94034</code>
  <country>US</country></postal>
  <phone/>
  <email>masinter@parc.xerox.com</email></address></author>
  <author initials="P.J." surname="Leach" fullname="Paul J. Leach">
  <organization>Microsoft Corporation</organization>
  <address>
  <postal>
  <street>1 Microsoft Way</street>
  <city>Redmond</city>
  <region>WA</region>
  <code>98052</code>
  <country>US</country></postal>
  <phone/>
  <email>paulle@microsoft.com</email></address></author>
  <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
  <organization>World Wide Web Consortium, MIT Laboratory for Computer Science</organization>
  <address>
  <postal>
  <street>545 Technology Square</street>
  <city>Cambridge</city>
  <region>MA</region>
  <code>02139</code>
  <country>US</country></postal>
  <phone>+1 617 258 8682</phone>
  <facsimile/>
  <email>timbl@w3.org</email></address></author>
  <date month="June" year="1999"/>
  </front>
  <seriesInfo name="RFC" value="2616"/>
  </reference>

  <reference anchor="RFC2119">
    <front>
      <title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement Levels</title>
      <author initials="S." surname="Bradner" fullname="Scott Bradner">
        <organization>Harvard University</organization>
        <address><email>sob@harvard.edu</email></address>
      </author>
      <date month="March" year="1997"/>
      <area>General</area>
      <keyword>keyword</keyword>
    </front>
    <seriesInfo name="BCP" value="14"/>
    <seriesInfo name="RFC" value="2119"/>
  </reference>


  <reference anchor="RFC5234">
    <front>
      <title abbrev="ABNF for Syntax Specifications">Augmented BNF for Syntax Specifications: ABNF</title>
      <author initials="D." surname="Crocker" fullname="Dave Crocker" role="editor">
        <organization>Brandenburg InternetWorking</organization>
        <address>
        <postal>
        <street>675 Spruce Dr.</street>
        <city>Sunnyvale</city>
        <region>CA</region>
        <code>94086</code>
        <country>US</country></postal>
        <phone>+1.408.246.8253</phone>
        <email>dcrocker@bbiw.net</email></address>  
      </author>
      <author initials="P." surname="Overell" fullname="Paul Overell">
        <organization>THUS plc.</organization>
        <address>
        <postal>
        <street>1/2 Berkeley Square</street>
        <street>99 Berkely Street</street>
        <city>Glasgow</city>
        <code>G3 7HR</code>
        <country>UK</country></postal>
        <email>paul.overell@thus.net</email></address>
      </author>
      <date month="January" year="2008"/>
    </front>
    <seriesInfo name="STD" value="68"/>
    <seriesInfo name="RFC" value="5234"/>
  </reference>


  <reference anchor="XML" target="http://www.w3.org/TR/2006/REC-xml-20060816">
    <front>
      <title>Extensible Markup Language (XML) 1.0 (Fourth Edition)</title>
      <author initials="T." surname="Bray" fullname="Tim Bray">
        <organization>Textuality and Netscape</organization>
        <address>
          <email>tbray@textuality.com</email>
        </address>
      </author>
      <author initials="J." surname="Paoli" fullname="Jean Paoli">
        <organization>Microsoft</organization>
        <address>
          <email>jeanpa@microsoft.com</email>
        </address>
      </author>
      <author initials="C.M." surname="Sperberg-McQueen" fullname="C. M. Sperberg-McQueen">
        <organization>University of Illinois at Chicago and Text Encoding Initiative</organization>
        <address>
          <email>cmsmcq@uic.edu</email>
        </address>
      </author>
      <author initials="E." surname="Maler" fullname="Eve Maler">
        <organization>Sun Microsystems</organization>
        <address>
          <email>eve.maler@east.sun.com</email>
        </address>
      </author>
      <author initials="F." surname="Yergeau" fullname="Francois Yergeau">
        <organization/>
        <address>
          <email>francois@yergeau.com</email>
        </address>
      </author>
      <date day="16" month="August" year="2006"/>
    </front>
    <seriesInfo name="W3C" value="REC-xml-20060816"/>
  </reference>

  <reference anchor="XS1" target="http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/">
    <front>
      <title>XML Schema Part 1: Structures</title>
      <author initials="H. S." surname="Thompson" fullname="Henry S. Thompson">
        <organization>University of Edinburgh</organization>
        <address><email>ht@cogsci.ed.ac.uk</email></address>
      </author>
      <author initials="D." surname="Beech" fullname="David Beech">
        <organization>Oracle</organization>
        <address><email>David.Beech@oracle.com</email></address>
      </author>
      <author initials="M." surname="Maloney" fullname="Murray Maloney">
        <organization>(for) Commerce One</organization>
        <address><email>murray@muzmo.com</email></address>
      </author>
      <author initials="N." surname="Mendelsohn" fullname="Noah Mendelsohn">
        <organization>Lotus Development Corporation</organization>
        <address><email>Noah_Mendelsohn@lotus.com</email></address>
      </author>
      <author>
        <organization abbrev="W3C">World Wide Web Consortium</organization>
        <address>
        <postal>
        <street>MIT Laboratory for Computer Science</street>
        <street>545 Technology Square</street>
        <city>Cambridge</city> <region>MA</region> <code>02139</code>
        <country>US</country>
        </postal>
        <phone>+ 1 617 253 2613</phone>
        <facsimile>+ 1 617 258 5999</facsimile>
        <email>timbl@w3.org</email>
        <uri>http://www.w3c.org</uri>
        </address>
      </author>
      <date month="October" year="2004"/>
    </front>
    <seriesInfo name="W3C" value="REC-xmlschema-1-20041028"/>
  </reference>

  <reference anchor="XS2" target="http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/">
    <front>
      <title>XML Schema Part 2: Datatypes Second Edition</title>
      <author initials="P. V." surname="Biron" fullname="Paul V. Biron">
        <organization>Kaiser Permanente, for Health Level Seven</organization>
        <address><email>Paul.V.Biron@kp.org</email></address>
      </author>
      <author initials="A." surname="Malhotra" fullname="Ashok Malhotra">
        <organization>Microsoft, formerly of IBM</organization>
        <address><email>ashokma@microsoft.com</email></address>
      </author>
      <author>
        <organization abbrev="W3C">World Wide Web Consortium</organization>
        <address>
        <postal>
        <street>MIT Laboratory for Computer Science</street>
        <street>545 Technology Square</street>
        <city>Cambridge</city> <region>MA</region> <code>02139</code>
        <country>US</country>
        </postal>
        <phone>+ 1 617 253 2613</phone>
        <facsimile>+ 1 617 258 5999</facsimile>
        <email>timbl@w3.org</email>
        <uri>http://www.w3c.org</uri>
        </address>
      </author>
      <date month="October" year="2004"/>
    </front>
    <seriesInfo name="W3C" value="REC-xmlschema-2-20041028"/>
  </reference>


  <reference anchor="RFC4918">
    <front>
      <title>HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV)</title>
      <author initials="L." surname="Dusseault" fullname="Lisa Dusseault" role="editor">
        <organization>CommerceNet</organization>
        <address>
          <postal>
            <street>2064 Edgewood Dr.</street>
            <city>Palo Alto</city> <region>CA</region> <code>94303</code>
            <country>US</country>
          </postal>
          <email>ldusseault@commerce.net</email>
        </address>
      </author>
      <date month="June" year="2007"/>
    </front>
    <seriesInfo name="RFC" value="4918"/>
  </reference>


  <reference anchor="RFC3253">
    <front>
      <title>Versioning Extensions to WebDAV</title>
      <author initials="G." surname="Clemm" fullname="G. Clemm">
        <organization>Rational Software</organization>
        <address><email>geoffrey.clemm@rational.com</email></address>
      </author>
      <author initials="J." surname="Amsden" fullname="J. Amsden">
        <organization>IBM</organization>
        <address><email>jamsden@us.ibm.com</email></address>
      </author>
      <author initials="T." surname="Ellison" fullname="T. Ellison">
        <organization>IBM</organization>
        <address><email>tim_ellison@uk.ibm.com</email></address>
      </author>
      <author initials="C." surname="Kaler" fullname="C. Kaler">
        <organization>Microsoft</organization>
        <address><email>ckaler@microsoft.com</email></address>
      </author>
      <author initials="J." surname="Whitehead" fullname="J. Whitehead">
        <organization>UC Santa Cruz, Dept. of Computer Science</organization>
        <address><email>ejw@cse.ucsc.edu</email></address>
      </author>
      <date month="March" year="2002"/>
    </front>
    <seriesInfo name="RFC" value="3253"/>
  </reference>

  <reference anchor="RFC3023">
    <front>
      <title>XML Media Types</title>
      <author initials="M." surname="Makoto" fullname="Murata Makoto">
        <organization>IBM Tokyo Research Laboratory</organization>
        <address><email>mmurata@trl.ibm.co.jp</email></address>
      </author>
      <author initials="S." surname="St.Laurent" fullname="Simon St.Laurent">
        <organization>simonstl.com</organization>
        <address><email>simonstl@simonstl.com</email></address>
      </author>
      <author initials="D." surname="Kohn" fullname="Dan Kohn">
        <organization>Skymoon Ventures</organization>
        <address><email>dan@dankohn.com</email></address>
      </author>
      <date month="January" year="2001"/>
    </front>
    <seriesInfo name="RFC" value="3023"/>
  </reference>

  <reference anchor="RFC3744">
    <front>
      <title abbrev="WebDAV Access Control Protocol">Web Distributed Authoring and Versioning (WebDAV) Access Control Protocol</title>
      <author initials="G." surname="Clemm" fullname="Geoffrey Clemm">
        <organization>IBM</organization>
        <address>
          <postal>
            <street>20 Maguire Road</street>
            <city>Lexington</city>
            <region>MA</region>
            <code>02421</code>
          </postal>
          <email>geoffrey.clemm@us.ibm.com</email>
        </address>
      </author>
      <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke">
        <organization abbrev="greenbytes">greenbytes GmbH</organization>
        <address>
          <postal>
            <street>Salzmannstrasse 152</street>
            <city>Muenster</city><region>NW</region><code>48159</code>
            <country>Germany</country>
          </postal>
          <email>julian.reschke@greenbytes.de</email>
        </address>
      </author>
      <author initials="E." surname="Sedlar" fullname="Eric Sedlar">
        <organization>Oracle Corporation</organization>
        <address>
          <postal>
            <street>500 Oracle Parkway</street>
            <city>Redwood Shores</city>
            <region>CA</region>
            <code>94065</code>
          </postal>
          <email>eric.sedlar@oracle.com</email>
        </address>
      </author>
      <author initials="J." surname="Whitehead" fullname="Jim Whitehead">
        <organization abbrev="U.C. Santa Cruz">U.C. Santa Cruz, Dept. of Computer Science</organization>
        <address>
          <postal>
            <street>1156 High Street</street>
            <city>Santa Cruz</city>
            <region>CA</region>
            <code>95064</code>
          </postal>
          <email>ejw@cse.ucsc.edu</email>
        </address>
      </author>
      <date month="May" year="2004"/>
    </front>
    <seriesInfo name="RFC" value="3744"/>
  </reference>


  <reference anchor="RFC4437">
    <front>
      <title abbrev="WebDAV Redirect Reference Resources">Web Distributed Authoring and Versioning (WebDAV) Redirect Reference Resources</title>
      <author initials="J." surname="Whitehead" fullname="Jim Whitehead">
        <organization abbrev="U.C. Santa Cruz">UC Santa Cruz, Dept. of Computer Science</organization>
        <address>
          <postal>
            <street>1156 High Street</street>
            <city>Santa Cruz</city>
            <region>CA</region>
            <code>95064</code>
            <country>US</country>
          </postal>
          <email>ejw@cse.ucsc.edu</email>
        </address>
      </author>
      <author initials="G." surname="Clemm" fullname="Geoff Clemm">
        <organization>IBM</organization>
        <address>
          <postal>
            <street>20 Maguire Road</street>
            <city>Lexington</city><region>MA</region><code>02421</code>
            <country>US</country>
          </postal>
          <email>geoffrey.clemm@us.ibm.com</email>
        </address>
      </author>
      <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
        <organization abbrev="greenbytes">greenbytes GmbH</organization>
        <address>
          <postal>
            <street>Hafenweg 16</street>
            <city>Muenster</city><region>NW</region><code>48155</code>
            <country>Germany</country>
          </postal>
          <phone>+49 251 2807760</phone>
          <facsimile>+49 251 2807761</facsimile>
         <email>julian.reschke@greenbytes.de</email>
          <uri>http://greenbytes.de/tech/webdav/</uri>
        </address>
      </author>
      <date month="March" year="2006"/>
    </front>
    <seriesInfo name="RFC" value="4437"/>
  </reference>  

  
  
  <reference anchor="XPATH" target="http://www.w3.org/TR/1999/REC-xpath-19991116">
    <front>
      <title>XML Path Language (XPath) Version 1.0</title>
      <author initials="J." surname="Clark" fullname="James Clark">
        <organization/>
        <address><email>jjc@jclark.com</email></address>
      </author>
      <author initials="S." surname="DeRose" fullname="Steven DeRose">
        <organization>Inso Corp. and Brown University</organization>
        <address><email>Steven_DeRose@Brown.edu</email></address>
      </author>
      <date month="November" day="16" year="1999"/>
    </front>
    <seriesInfo name="W3C" value="REC-xpath-19991116"/>
  </reference>


  <reference anchor="XPATHFUNC" target="http://www.w3.org/TR/2007/REC-xpath-functions-20070123/">
    <front>
      <title>XQuery 1.0 and XPath 2.0 Functions and Operators</title>
      <author initials="A." surname="Malhotra" fullname="Ashok Malhotra">
        <organization>Oracle Corporation</organization>
        <address><email>ashok.malhotra@alum.mit.edu</email></address>
      </author>
      <author initials="J." surname="Melton" fullname="Jim Melton">
        <organization>Oracle Corporation</organization>
        <address><email>jim.melton@acm.org</email></address>
      </author>
      <author initials="N." surname="Walsh" fullname="Norman Walsh">
        <organization>Sun Microsystems</organization>
        <address><email>Norman.Walsh@Sun.COM</email></address>
      </author>
      <date month="January" day="23" year="2007"/>
    </front>
    <seriesInfo name="W3C" value="REC-xpath-functions-20070123"/>
  </reference>
  
  
</references>

<references title="Informative References">

<reference anchor="SQL99">
<front>
<title>Database Language SQL Part 2: Foundation (SQL/Foundation)</title>
<author initials="J." surname="Milton" fullname="J. Milton">
<organization>International Organization for Standardization</organization>
</author>
<date month="July" year="1999"/>
</front>
<seriesInfo name="ISO" value="ISO/IEC 9075-2:1999 (E)"/>
</reference>

<reference anchor="UNICODE4" target="http://www.unicode.org/versions/Unicode4.0.0/">
  <front>
    <title>The Unicode Standard - Version 4.0</title>
    <author>
      <organization>The Unicode Consortium</organization>
    </author>
    <date month="August" year="2003"/>
  </front>
  <seriesInfo name="Addison-Wesley" value=""/>
  <annotation><eref target="urn:isbn:0321185781">ISBN 0321185781</eref></annotation>
</reference>


<reference anchor="DASLREQ" target="http://www.webdav.org/dasl/requirements/draft-dasl-requirements-01.html">
  <front>
    <title>Requirements for DAV Searching and Locating</title>    
    <author initials="J." surname="Davis" fullname="J. Davis">
			<organization abbrev="CourseNet">CourseNet Systems</organization>
			<address>
        <postal>
          <street>170 Capp Street</street>
          <city>San Francisco</city><region>CA</region><code>94110</code>
        </postal>
        <email>jrd3@alum.mit.edu</email>
      </address>
		</author>
    <author initials="S." surname="Reddy" fullname="S. Reddy">
			<organization abbrev="Microsoft">Microsoft</organization>
			<address>
        <postal>
          <street>One Microsoft Way</street>
          <city>Redmond</city><region>WA</region><code>9085-6933</code>
          </postal>
				<email>saveenr@microsoft.com</email>	
			</address>
		</author>
    <author initials="J." surname="Slein" fullname="Judith Slein">
      <organization>Xerox Corporation</organization>
      <address>
        <postal>
          <street>800 Phillips Road 128-29E</street>
        </postal>
        <email>slein@wrc.xerox.com</email>
      </address>
    </author>
    <date month="February" year="1999"/>        
  </front>
  <annotation>
    This is an updated version of the Internet Draft "draft-ietf-dasl-requirements-00",
    but obviously never was submitted to the IETF.
  </annotation>
</reference>


<reference anchor="draft-ietf-webdav-bind">
  <front>
    <title>Binding Extensions to Web Distributed Authoring and Versioning (WebDAV)</title>
    
    <author initials="G." surname="Clemm" fullname="Geoffrey Clemm">
      <organization>IBM</organization>
      <address>
        <postal>
          <street>20 Maguire Road</street>
          <city>Lexington</city>
          <region>MA</region>
          <code>02421</code>
        </postal>
        <email>geoffrey.clemm@us.ibm.com</email>
      </address>
    </author>
    <author initials="J." surname="Crawford" fullname="Jason Crawford">
      <organization>IBM Research</organization>
      <address>
        <postal>
          <street>P.O. Box 704</street>
          <city>Yorktown Heights</city>
          <region>NY</region>
          <code>10598</code>
        </postal>
        <email>ccjason@us.ibm.com</email>
      </address>
    </author>
  	<author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
  		<organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address>
        <postal>
          <street>Hafenweg 16</street>
          <city>Muenster</city><region>NW</region><code>48155</code>
          <country>Germany</country>
        </postal>
  		  <email>julian.reschke@greenbytes.de</email>	
  		</address>
  	</author>
    <author initials="J." surname="Whitehead" fullname="Jim Whitehead">
      <organization abbrev="U.C. Santa Cruz">UC Santa Cruz, Dept. of Computer Science</organization>
      <address>
        <postal>
          <street>1156 High Street</street>
          <city>Santa Cruz</city>
          <region>CA</region>
          <code>95064</code>
        </postal>
        <email>ejw@cse.ucsc.edu</email>
      </address>
    </author>

    <date month="November" year="2007"/>        
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-webdav-bind-20"/>
</reference>



<reference anchor="DASL">
<front>
  <title>DAV Searching &amp; Locating</title>
    <author initials="S." surname="Reddy" fullname="S. Reddy">
			<organization abbrev="Microsoft">Microsoft</organization>
			<address>
        <postal>
          <street>One Microsoft Way</street>
          <city>Redmond</city><region>WA</region><code>9085-6933</code>
        </postal>
				<email>saveenr@microsoft.com</email>	
			</address>
		</author>
		<author initials="D." surname="Lowry" fullname="D. Lowry">
			<organization abbrev="Novell">Novell</organization>
			<address>
        <postal>
          <street>1555 N. Technology Way, M/S ORM-M-314</street>
          <city>Orem</city><region>UT</region><code>84097</code>
        </postal>
        <email>dlowry@novell.com</email>
      </address>
		</author>
		<author initials="S." surname="Reddy" fullname="S. Reddy">
			<organization abbrev="Oracle">Oracle Corporation</organization>
			<address>
	      <postal>
    	    <street>600 Oracle Parkway, M/S 6op3</street>
        	<city>Redwoodshores</city><region>CA</region><code>94065</code>
        </postal>
        <phone>+1 650 506 5441</phone>
        <email>skreddy@us.oracle.com</email>
			</address>
		</author>
		<author initials="R." surname="Henderson" fullname="R. Henderson">
			<organization abbrev="Netscape">Netscape</organization>
			<address>
        <email>rickh@netscape.com</email>
			</address>
    </author>
    <author initials="J." surname="Davis" fullname="J. Davis">
			<organization abbrev="Intelligent Markets">Intelligent Markets</organization>
			<address>
        <postal>
          <street>410 Jessie Street 6th floor</street>
          <city>San Francisco</city><region>CA</region><code>94103</code>
        </postal>
        <email>jrd3@alum.mit.edu</email>
      </address>
		</author>
		<author initials="A." surname="Babich" fullname="A. Babich">
			<organization abbrev="Filenet">Filenet</organization>
      <address>
				<postal>
          <street>3565 Harbor Blvd.</street>
          <city>Costa Mesa</city><region>CA</region><code>92626</code>
        </postal>
	      <phone>+1 714 966 3403</phone>
        <email>ababich@filenet.com</email>
      </address>
		</author>
    <date month="July" year="1999"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-ietf-dasl-protocol-00"/>
</reference>

<reference anchor="RFC3864">
  <front>
    <title>Registration Procedures for Message Header Fields</title>
    <author initials="G." surname="Klyne" fullname="G. Klyne">
    <organization/></author>
    <author initials="M." surname="Nottingham" fullname="M. Nottingham">
    <organization/></author>
    <author initials="J." surname="Mogul" fullname="J. Mogul">
    <organization/></author>
    <date year="2004" month="September"/>
  </front>
  <seriesInfo name="BCP" value="90"/>
  <seriesInfo name="RFC" value="3864"/>
</reference>


  <reference anchor="RFC4790">
    <front>
      <title>Internet Application Protocol Collation Registry</title>
      <author initials="C." surname="Newman" fullname="Chris Newman">
        <organization>Sun Microsystems</organization>
        <address>
          <email>chris.newman@sun.com</email>
        </address>
      </author>
      <author initials="M." surname="Duerst" fullname="Martin Duerst">
        <organization abbrev="AGU">Aoyama Gakuin University</organization>
        <address>
          <email>duerst@it.aoyama.ac.jp</email>
        </address>
      </author>
      <author initials="A." surname="Gulbrandsen" fullname="A. Gulbrandsen">
        <organization abbrev="Oryx">Oryx Mail Systems GmbH</organization>
        <address>
          <email>arnt@oryx.com</email>
        </address>
      </author>
      <date month="March" year="2007"/>
    </front>
    <seriesInfo name="RFC" value="4790"/>
  </reference>


</references>

<section title="Three-Valued Logic in DAV:basicsearch" anchor="three-valued-logic">
<t>
  ANSI standard three valued logic is used when evaluating the search condition
  (as defined in the ANSI standard SQL specifications, for example in ANSI
  X3.135-1992, section 8.12, pp. 188-189, section 8.2, p. 169, General Rule
  1)a), etc.).
</t>
<t>
  ANSI standard three valued logic is undoubtedly the most widely practiced
  method of dealing with the issues of properties in the search condition
  not having a value (e.g., being null or not defined) for the resource under
  scan, and with undefined expressions in the search condition (e.g., division
  by zero, etc.). Three valued logic works as follows.
</t>
<t>
  Undefined expressions are expressions for which the value of the expression
  is not defined. Undefined expressions are a completely separate concept
  from the truth value UNKNOWN, which is, in fact, well defined. Property
  names and literal constants are considered expressions for purposes of
  this section. If a property in the current resource under scan has not
  been set to a value, then
  the value of that property is undefined for the resource under scan. DASL
  1.0 has no arithmetic division operator, but if it did, division by zero
  would be an undefined arithmetic expression.
</t>
<t>
  If any subpart of an arithmetic, string, or datetime subexpression is
  undefined, the whole arithmetic, string, or datetime subexpression is undefined.
</t>
<t>
  There are no manifest constants to explicitly represent undefined number,
  string, or datetime values.
</t>
<t>
  Since a Boolean value is ultimately returned by the search condition,
  arithmetic, string, and datetime expressions are always arguments to other
  operators. Examples of operators that convert arithmetic, string, and datetime
  expressions to Boolean values are the six relational operators ("greater
  than", "less than", "equals", etc.). If either or both operands of a relational
  operator have undefined values, then the relational operator evaluates
  to UNKNOWN. Otherwise, the relational operator evaluates to TRUE or FALSE,
  depending upon the outcome of the comparison.
</t>
<t>
  The Boolean operators DAV:and, DAV:or and DAV:not
  are evaluated according to the following rules:
</t>

<t>
  not UNKNOWN = UNKNOWN
</t>
<t>
  UNKNOWN and TRUE = UNKNOWN
</t>
<t>
  UNKNOWN and FALSE = FALSE
</t>
<t>
  UNKNOWN and UNKNOWN = UNKNOWN
</t>
<t>
  UNKNOWN or TRUE = TRUE
</t>
<t>
  UNKNOWN or FALSE = UNKNOWN
</t>
<t>
  UNKNOWN or UNKNOWN = UNKNOWN
</t>
</section>


<section title="Unresolved Issues" anchor="unresolved.issues">
  <t>
    This Section summarizes issues which have been raised during the development
    of this specification, but for which no resolution could be found with the
    constraints in place. At the time of this writing, not resolving these
    issues and publishing as "Experimental" seemed to make more sense than
    not publishing at all. Future revisions of this specification should revisit
    these issues, though.
  </t>


<section title="Collation Support" anchor="unresolved.issues.collations">
  <t>
    Matching and sorting of textual data relies on collations. With respect
    to WebDAV SEARCH, a combination of various design approaches could be used:
    <list style="symbols">
      <t>
        Require server support for specific collations.
      </t>
      <t>
        Require that the server can advertise which collations it supports.
      </t>
      <t>
        Allow a client to select the collation to be used.
      </t>
    </list>
  </t>
  <t>
    In practice, the current implementations of WebDAV SEARCH usually rely
    on backends they do not control, and for which collation information may
    not be available. To make things worse, implementations of the DAV:basicsearch grammar
    frequently need to combine data from multiple underlying stores (such as
    properties and full text content), and thus collation support may vary based
    on the operator or property.
  </t>
  <t>
    Another open issue is what collation formalism to support. At the time of
    this writing, the two specifications below seem to provide the
    necessary framework and thus may be the base for future work on collation
    support in WebDAV SEARCH:
    <list style="numbers">
      <t>
        "Internet Application Protocol Collation Registry" (<xref target="RFC4790"/>). 
      </t>
      <t>
        "XQuery 1.0 and XPath 2.0 Functions and Operators" (<xref target="XPATHFUNC"/>, Section 7.3.1). 
      </t>
    </list>
  </t>
</section>



<section title="Count" anchor="unresolved.issues.count">
<t>
  DAV:basicsearch does not allow a request that returns the count of matching
  resources.
</t>
<t>
  A protocol extension would need to extend DAV:select, and also modify the
  DAV:multistatus response format.
</t>
</section>



<section title="Matching Media Types" anchor="unresolved.issues.mediatype-match">
<t>
  Matching media types using the DAV:getcontenttype property and the DAV:like
  operator is hard due to DAV:getcontenttype also allowing parameters.
  A new operator specifically designed for the purpose of matching media types
  probably would simplify things a lot. See <eref target="http://lists.w3.org/Archives/Public/www-webdav-dasl/2003OctDec/0109.html"/>
  for a specific proposal.
</t>
</section>



<section title="Query by Name" anchor="unresolved.issues.query-by-name">
<t>
  DAV:basicsearch operates on the properties (and optionally the contents)
  of resources, and thus doesn't really allow matching on parts of the
  resource's URI. See <eref target="http://lists.w3.org/Archives/Public/www-webdav-dasl/2003OctDec/0100.html"/>
  for a proposed extension covering this use case.
</t>
</section>


<section title="Result Paging" anchor="unresolved.issues.result-paging">
<t>
  A frequently discussed feature is the ability to specifically request
  the "next" set of results, when either the server decided to truncate
  the result, or the client explicitly asked for a limited set (for
  instance, using the DAV:limit element defined in <xref target="limiting.the.result.set"/>).
</t>
<t>
  In this case, it would be desirable if the server could keep the full
  query result, and provide a new URI identifying a separate result resource,
  allowing the client to retrieve additional data through GET requests,
  and remove the result through a DELETE request.
</t>
</section>



</section>



<section title="Change Log (to be removed by RFC Editor before publication)">

<section title="From draft-davis-dasl-protocol-xxx">
<t>
<list style="hanging">
  <t hangText="Feb 14, 1998">Initial Draft</t>
  <t hangText="Feb 28, 1998">
    Referring to DASL as an extension to HTTP/1.1 rather than DAV.<vspace blankLines="0"/>
    Added new sections "Notational Conventions", "Protocol Model", "Security
    Considerations".<vspace blankLines="0"/>
    Changed section 3 to "Elements of Protocol".<vspace blankLines="0"/>
    Added some stuff to introduction.<vspace blankLines="0"/>
    Added "result set" terminology.<vspace blankLines="0"/>
    Added "IANA Considerations".
  </t>
  <t hangText="Mar 9, 1998">
    Moved sub-headings of "Elements of Protocol" to first level and removed
    "Elements of Protocol" Heading.<vspace blankLines="0"/>
    Added an sentence in introduction explaining that this is a "sketch"
    of a protocol.
  </t>
  <t hangText="Mar 11, 1998">
    Added orderby, data typing, three valued logic, query schema property,
    and element definitions for schema for basicsearch.</t>
  <t hangText="April 8, 1998">
    - made changes based on last week's DASL BOF.</t>
  <t hangText="May 8, 1998">
    Removed most of DAV:searcherror; converted to DAV:searchredirect<vspace blankLines="0"/>
    Altered DAV:basicsearch grammar to use avoid use of ANY in DTD</t>
  <t hangText="June 17, 1998">
    -Added details on Query Schema Discovery<vspace blankLines="0"/>
    -Shortened list of data types</t>
  <t hangText="June 23, 1998">
    moved data types before change history
    <vspace blankLines="0"/>rewrote the data types section
    <vspace blankLines="0"/>removed the casesensitive element and replace with the casesensitive
    attribute
    <vspace blankLines="0"/>added the casesensitive attribute to the DTD for all operations that
    might work on a string
  </t>
  <t hangText="Jul 20, 1998">
    A series of changes. See Author's meeting minutes for details.</t>
  <t hangText="July 28, 1998">
    Changes as per author's meeting. QSD uses SEARCH, not PROPFIND.
    <vspace blankLines="0"/>Moved text around to keep concepts nearby.
    <vspace blankLines="0"/>Boolean literals are 1 and 0, not T and F.
    <vspace blankLines="0"/>contains changed to contentspassthrough.
    <vspace blankLines="0"/>Renamed rank to score.</t>
  <t hangText="July 28, 1998">
    Added Dale Lowry as Author</t>
  <t hangText="September 4, 1998">
    Added 422 as response when query lists unimplemented operators.
    <vspace blankLines="0"/>DAV:literal declares a default value for xml:space, 'preserve'
    (see XML spec, section 2.10)
    <vspace blankLines="0"/>moved to new XML namespace syntax
  </t>
  <t hangText="September 22, 1998">
    Changed "simplesearch" to "basicsearch"
    <vspace blankLines="0"/>Changed isnull to isdefined
    <vspace blankLines="0"/>Defined NULLness as having a 404 or 403 response
    <vspace blankLines="0"/>used ENTITY syntax in DTD
    <vspace blankLines="0"/>Added redirect
  </t>
  <t hangText="October 9, 1998">
    Fixed a series of typographical and formatting errors.
    <vspace blankLines="0"/>Modified the section of three-valued logic to use a table rather than
    a text description of the role of UNKNOWN in expressions.
  </t>
  <t hangText="November 2, 1998">
    Added the DAV:contains operator.
    <vspace blankLines="0"/>Removed the DAV:contentpassthrough operator.
  </t>
  <t hangText="November 18, 1998">
    Various author comments for submission</t>
  <t hangText="June 3, 1999">
    Cosmetic and minor editorial changes only. Fix nits reported by Jim Whitehead
    in email of April 26, 1999. Converted to HTML from Word 97, manually.</t>
  <t hangText="April 20, 2000">
    Removed redirection feature, since 301/302 suffices. Removed Query Schema Discovery (former chapter 4). Everyone agrees this is a useful feature, but it is apparently too difficult to define at this time, and it is not essential for DASL. 
  </t>
</list>
</t>
</section>

<section title="since start of draft-reschke-webdav-search">
<t>
<list style="hanging">
  <t hangText="October 09, 2001">
    Added Julian Reschke as author.<vspace blankLines="0"/>
    Chapter about QSD re-added.<vspace blankLines="0"/>
    Formatted into RFC2629-compliant XML document.<vspace blankLines="0"/>
    Added first comments.<vspace blankLines="0"/>
    ID version number kicked up to draft-dasl-protocol-03.
  </t>
  <t hangText="October 17, 2001">
    Updated address information for Jim Davis.<vspace blankLines="0"/>
    Added issue of datatype vocabularies.<vspace blankLines="0"/>
    Updated issue descriptions for grammar discovery,
    added issues on query schema DTD.<vspace blankLines="0"/>
    Fixed typos in XML examples.
  </t>
  <t hangText="December 17, 2001">
    Re-introduced split between normative and non-normative references.
  </t>
  <t hangText="January 05, 2002">
    Version bumped up to 04. Started work on resolving the issues identified
    in the previous version.
  </t>
  <t hangText="January 14, 2002">
    Fixed some XML typos.
  </t>
  <t hangText="January 22, 2002">
    Closed issues naming-of-elements. Fixed query search DTD and added option
    to discover properties of "other" (non-listed) properties.
  </t>
  <t hangText="January 25, 2002">
    Changed into private submission and added reference to historic DASL draft.
    Marked reference to DASL requirements non-normative.<vspace blankLines="0"/>
    Updated reference to latest deltav spec. 
  </t>
  <t hangText="January 29, 2002">
    Added feedback from and updated contact info for Alan Babich.<vspace/>
    Included open issues collected in <eref target="http://www.webdav.org/dasl/protocol/issues.html">http://www.webdav.org/dasl/protocol/issues.html</eref>.
  </t>
  <t hangText="February 8, 2002">
    Made sure that all artwork fits into 72 characters wide text.
  </t>
  <t hangText="February 18, 2002">
    Changed Insufficient storage handling (multistatus). Moved is-collection to
    operators and added to DTD. Made scope/depth mandatory.
  </t>
  <t hangText="February 20, 2002">
    Updated reference to SQL99.
  </t>
  <t hangText="February 28, 2002">
    "Non-normative References" -&gt; "Informative References". Abstract updated.
    Consistently specify a charset when using text/xml (no change bars). Do
    not attempt to define PROPFIND's entity encoding (take out specific references
    to text/xml). Remove irrelevant headers (Connection:) from examples (no
    change bars). Added issue on querying based on DAV:href. Updated introduction
    to indicate relationship to DASL draft. Updated HTTP reference from
    RFC2068 to RFC2616. Updated XML reference to XML 1.0 2nd edition.
  </t>
  <t hangText="March 1, 2002">
    Removed superfluous namespace decl in 2.4.2. Reopened JW14 and suggest
    to drop xml:space support.
  </t>
  <t hangText="March 3, 2002">
    Removed "xml:space" feature on DAV:literal. Added issue about string
    comparison vs. collations vs. xml:lang. Updated some of the open issues
    with details from JimW's original mail in April 1999. Resolved scope vs
    relative URI references. Resolved issues about DAV:ascending (added to
    index) and the BNF for DAV:like (changed "octets" to "characters").
  </t>
  <t hangText="March 8, 2002">
    Updated reference to DeltaV (now RFC3253). Added Martin Wallmer's comments,
    moved JW5 into DAV:basicsearch section.
  </t>
  <t hangText="March 11, 2002">
    Closed open issues regaring the type of search arbiters (JW3) and their
    discovery (JW9). Rephrased requirements on multistatus response bodies
    (propstat only if properties were selected, removed requirement for
    responsedescription).
  </t>
  <t hangText="March 23, 2002">
    RFC2376 -&gt; RFC3023. Added missing first names of authors. OPTIONS added
    to example for DAV:supported-method-set.
  </t>
</list></t>
</section>

<section title="since draft-reschke-webdav-search-00">
<t>
<list style="hanging">
  <t hangText="March 29, 2002">
    Abstract doesn't refer to DASL WG anymore.
  </t>
  <t hangText="April 7, 2002">
    Fixed section title (wrong property name supported-search-grammar-set.
    Changed DAV:casesensitve to "casesensitive" (it wasn't in the DAV:
    namespace after all).
  </t>
  <t hangText="May 28, 2002">
    Updated some issues with Jim Davis's comments.
  </t>
  <t hangText="June 10, 2002">
    Added proposal for different method for query schema discovery, not
    using pseudo-properties.
  </t>
  <t hangText="June 25, 2002">
    QSD marshalling rewritten. Added issue "isdefined-optional".
  </t>
</list>
</t>
</section>

<section title="since draft-reschke-webdav-search-01">
<t>
<list style="hanging">
  <t hangText="July 04, 2002">
    Added issue "scope-collection".
  </t>
  <t hangText="July 08, 2002">
    Closed issue "scope-collection".
  </t>
  <t hangText="August 12, 2002">
    Added issues "results-vs-binds" and "select-allprop".
  </t>
  <t hangText="October 22, 2002">
    Added issue "undefined-expressions".
  </t>
  <t hangText="November 18, 2002">
    Changed example host names (no change tracking).
  </t>
  <t hangText="November 25, 2002">
    Updated issue "DB2/DB7". Closed issues "undefined expressions",
    "isdefined-optional" and "select-allprop".
  </t>
</list>
</t>
</section>


<section title="since draft-reschke-webdav-search-02">
<t>
<list style="hanging">
  <t hangText="November 27, 2002">
    Added issues "undefined-properties", "like-exactlyone" and "like-wildcard-adjacent".
    Closed issue "query-on-href". Added acknowledgments section.
  </t>
  <t hangText="November 28, 2002">
    Closed issue "like-exactlyone". Added issue "mixed-content-properties".
  </t>
  <t hangText="December 14, 2002">
    Closed issues "undefined-properties", "results-vs-binds",
    "mixed-content-properties".
    Updated issue "like-wildcard-adjacent".
    Added informative reference to BIND draft. Updated reference to ACL
    draft.
  </t>
  <t hangText="January 9, 2003">
    Removed duplicate section on invalid scopes. Added comments to some 
    open issues. Closed issues JW25/26, score-pseudo-property and null-ordering. 
  </t>
  <t hangText="January 10, 2003">
    Issue limit-vs-ordering plus resolution. Closed issue JW17/JW24b.
  </t>
  <t hangText="January 14, 2003">
    New issue order-precedence. Started resolution of DB2/DB7.
  </t>
  <t hangText="January 15, 2003">
    Started spec of DAV:typed-literal.
  </t>
  <t hangText="January 17, 2003">
    Fix one DAV:like/DAV:getcontenttype example (add / to like expression,
    make case-insensitive).
  </t>
  <t hangText="January 28, 2003">
    Update issue(s) result-truncation, JW24d.
    Fixed response headers in OPTIONS example.
    Added issue qsd-optional.
    Closed issue(s) order-precedence, case-insensitivity-name.
  </t>
  <t hangText="February 07, 2003">
    Added issue scope-vs-versions. score-pseudo-property: allow DAV:orderby
    to explicitly specify DAV:score.
  </t>
</list>
</t>
</section>

<section title="since draft-reschke-webdav-search-03">
<t>
<list style="hanging">
  <t hangText="April 24, 2003">
    Fixed two "?" vs "_" issues (not updated in last draft).
  </t>
  <t hangText="June 13, 2003">
    Improve index.
  </t>
</list>
</t>
</section>


<section title="since draft-reschke-webdav-search-04">
<t>
<list style="hanging">
  <t hangText="July 7, 2003">
    Typo fixed (propstat without status element).
  </t>
  <t hangText="August 11, 2003">
    Remove superfluous IP and copyright sections.
  </t>
  <t hangText="September 09, 2003">
    Added issues "2.4-multiple-uris" and "5.1-name-filtering".
  </t>
  <t hangText="October 06, 2003">
    Fix misplaced section end in 5.11, add table formatting. Enhance table
    formatting in 5.18.3. Updated ACL and BIND references. Added XPATH
    reference. Closed issue JW24d by adding new optional operators. Updated more
    open issues, added issues from January meeting. Add K. Wiggen to Acknowledgements.
    Add Contributors section for the authors of the original draft.
    Close issue "scope-vs-versions" (optional feature added). Close (new)
    issue "1.3-import-DTD-terminology". Add issue "1.3-import-requirements-terminology".
  </t>
  <t hangText="October 07, 2003">
    Typos fixed. Moved statement about DAV: namespace usage into separate
    (sub-)section. Closed "1.3-import-requirements-terminology". Update
    I18N Considerations with new xml:lang support info (see issue JW24d).
    Close issue "DB2/DB7" (remaining typing issues are now summarized
    in issue "typed-literal"). Fix misplaced section end in section 7.
    Started change to use RFC3253-style method definitions and error
    marshalling.
  </t>
  <t hangText="October 08, 2003">
    Remove obsolete language that allowed reporting invalid scopes and such
    inside multistatus. Add new issue "5.4.2-scope-vs-redirects".
  </t>
</list>
</t>
</section>

<section title="since draft-reschke-webdav-search-05">
<t>
<list style="hanging">
  <t hangText="October 11, 2003">
    Separate DAV:basicsearch DTD into separate figures for better maintainability.
    Update DTD with language-* operators and typed-literal element (optional).
  </t>
  <t hangText="October 14, 2003">
    Close issue "5.4.2-multiple-scope".
  </t>
  <t hangText="November 04, 2003">
    Update reference from CaseMap to UNICODE4, section 5.18.
  </t>
  <t hangText="November 16, 2003">
    Updated issue "5.1-name-filtering".
  </t>
  <t hangText="November 24, 2003">
    Reformatted scope description (collection vs. non-collection).
  </t>
  <t hangText="November 30, 2003">
    Add issue "5_media_type_match".
  </t>
  <t hangText="February 6, 2004">
    Updated all references.
  </t>
</list>
</t>
</section>

<section title="since draft-reschke-webdav-search-06">
<t>
<list style="hanging">
  <t hangText="July 05, 2004">
    Fix table in Appendix "Three-Valued Logic in DAV:basicsearch".
  </t>
  <t hangText="September 14, 2004">
    Fix inconsistent DTD in section 5.2 and 5.4 for scope element.
  </t>
  <t hangText="September 30, 2004">
    Rewrite editorial note and abstract.  Update references (remove unneeded
    XMLNS, update ref to ACL and BIND specs).
  </t>
</list>
</t>
</section>


<section title="since draft-reschke-webdav-search-07">
<t>
<list style="hanging">
  <t hangText="October 01, 2004">
    Fix previous section heading (no change tracking).
  </t>
  <t hangText="October 13, 2004">
    Fix DTD entry for is-collection.
  </t>
  <t hangText="November 1, 2004">
    Fix DTD fragment query-schema-discovery.
  </t>
  <t hangText="December 11, 2004">
    Update BIND reference.
  </t>
  <t hangText="January 01, 2005">
    Fix DASL and DASLREQ references.
  </t>
  <t hangText="February 06, 2005">
    Update XS2 reference.
  </t>
  <t hangText="February 11, 2005">
    Rewrite "like" and "DASL" (response header) grammar in ABNF.
  </t>
  <t hangText="May 5, 2005">
    Update references. Close issue "abnf" (only use ABNF when applicable).
  </t>
</list>
</t>
</section>


<section title="since draft-reschke-webdav-search-08">
<t>
<list style="hanging">
  <t hangText="May 06, 2005">
    Fix document title.
  </t>
  <t hangText="September 25, 2005">
    Update BIND reference.
  </t>
  <t hangText="October 05, 2005">
    Update RFC4234 reference.
  </t>
  <t hangText="October 22, 2005">
    Author's address update.
  </t>
  <t hangText="February 12, 2006">
    Update BIND reference.
  </t>
  <t hangText="March 16, 2006">
    Add typed literals to QSD.
  </t>
  <t hangText="August 20, 2006">
  Update XML reference.
  </t>
  <t hangText="August 28, 2006">
  Add issues "5.3-select-count" (open) and "5.4-clarify-depth" (resolved).
  Update BIND reference (again).
  </t>
</list>
</t>
</section>


<section title="since draft-reschke-webdav-search-09">
<t>
<list style="hanging">
  <t hangText="December 1, 2006">
  Fix ABNF for DASL header.
  </t>
  <t hangText="December 16, 2006">
  Close issue "qsd-optional", leave QSD optional. Close issue "2.4-multiple-uris",
  suggesting that servers should only return one response element per resource in
  case of multiple bindings.
  Add and resolve issues "authentication" and "cleanup-iana" (adding the header registration for
  "DASL").
  Re-write rational for using the DAV: namespace, although this is a non-WG
  submission.
  </t>
  <t hangText="January 4, 2007">
  Close issue "JW16b/JW24a", being related to "language-comparison".
  Add <xref target="unresolved.issues"/>.
  Close issues "language-comparison", "5_media_type_match",
  "5.1-name-filtering" and "5.3-select-count" as "won't fix", and add appendices accordingly.
  </t>
  <t hangText="January 24, 2007">
  Update BIND reference. Close issue "5.4.2-scope-vs-redirects".
  Close issue "typed-literal": specify in terms of the XPATH 2.9 casting mechanism.
  Close issue "1.3-apply-condition-code-terminology" (no changes).
  </t>
</list></t>
</section>


<section title="since draft-reschke-webdav-search-10">
<t>
<list style="hanging">
  <t hangText="January 29, 2007">
    Issue "result-truncation": Add appendix describing the open issue of
    Result Paging. Describe the mechanism of marshalling truncated results
    in a new normative subsection (leave the actual example where it was).
    Add and resolve issues "rfc2606-compliance" and "response-format".
    Update contact information for Alan Babich, Jim Davis and Surendra Reddy (no change tracking).
  </t>
  <t hangText="February 8, 2007">
    Update BIND reference.
  </t>
</list>
</t>
</section>


<section title="since draft-reschke-webdav-search-11">
<t>
  Update: draft-newman-i18n-comparator-14 is RFC4790.
  Update: RFC2518 replaced by draft-ietf-webdav-rfc2518bis.
  Updated BIND reference.
  Minor tweaks to intro (document organization and relation to DASL).
</t>
</section>


<section title="since draft-reschke-webdav-search-12">
<t>
  Update: draft-ietf-webdav-rfc2518bis replaced by RFC4918.
  Updated BIND reference.
</t>
</section>


<section title="since draft-reschke-webdav-search-13">
<t>
  Open and close issue "qsd-req-validity".
  Updated BIND reference.
</t>
</section>

<section title="since draft-reschke-webdav-search-14">
<t>
  RFC4234 obsoleted by RFC5234.
</t>
<t>
  Add and resolve issues "5.19.8-opdesc-vs-contains" and "dtd".
</t>
<t>
  Add clarifications about the behaviour when literal values are not compatible
  with the type of a comparison.
</t>
</section>

</section>

<section title="Resolved issues (to be removed by RFC Editor before publication)"><t>
          Issues that were either rejected or resolved in this version of this
          document.
        </t><section title="dtd"><t>
      Type: edit</t><t>julian.reschke@greenbytes.de (2008-02-11): 
    Fix various bugs in DTD fragments.
  </t><t>Resolution (2008-02-11): 
    Done.
  </t></section><section title="5.19.8-opdesc-vs-contains"><t>
        In Section 5.19.8:
      </t><t>
      Type: change</t><t>rjgodoy@fich.unl.edu.ar (2008-02-04): 
    ...
    But the optional operator DAV:contains cannot be described in these terms, 
because
its content model is defined to be (#PCDATA) and there is no operand 
descriptor for #PCDATA content.
...
  </t><t>Resolution (2008-02-11): 
    Introduce an attribute on opdesc for that; but discourage its use
    except for DAV:contains.
  </t></section></section><section title="Open issues (to be removed by RFC Editor prior to publication)"><section title="edit"><t>
      Type: edit</t><t>julian.reschke@greenbytes.de (2004-07-05): 
    Umbrella issue for editorial fixes/enhancements.
  </t></section></section></back></rfc>