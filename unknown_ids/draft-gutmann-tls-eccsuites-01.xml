<?xml version="1.0"?>
<?xml-stylesheet type='text/xsl' href='./rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc symrefs="no"?>
<?rfc compact="no" ?>
<?rfc sortrefs="yes" ?>
<?rfc strict="yes" ?>
<?rfc linkmailto="yes" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" >

<?xml-stylesheet type='text/xsl' href='./rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="no" ?>
<?rfc subcompact="yes" ?>
<?rfc sortrefs="yes" ?>
<rfc ipr="trust200902" docName="draft-gutmann-tls-eccsuites-01.txt" category="std">

  <!-- ======================================================================== -->
  <front>
    <title abbrev="ECC-Suites-for-TLS">Standardised ECC Cipher Suites for TLS</title>
    <author initials="P." surname="Gutmann" fullname="Peter Gutmann">
      <organization abbrev="University of Auckland">University of Auckland</organization>
      <address>
        <postal>
          <street>Department of Computer Science</street>
          <city>University of Auckland</city>
          <city>Auckland</city>
          <country>New Zealand</country>
        </postal>
        <email>pgut001@cs.auckland.ac.nz</email>
      </address>
    </author>
    <date year="2011"/>
    <area>Security Area</area>
    <workgroup>TLS Working Group</workgroup>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>

This document describes a set of standard ECC cipher suites for TLS that
simplify the complex selection procedure described in the existing ECC RFC,
simplifying implementation and easing interoperability problems.

      </t>
    </abstract>

  </front>
  <!-- ======================================================================== -->
  <middle>

    <!-- ====================================================================== -->
    <section anchor="introduction" title="Introduction">
      <t>

<xref target="TLS-ECC"/> provides an extremely flexible, and by extension
extremely complex means of specifying a large number of options involving the
use of ECC algorithms for <xref target="TLS"/>.  As such the "cipher suites"
in <xref target="TLS-ECC"/> aren't suites in the conventional TLS sense but
more an indication of intent to negotiate a Chinese menu, with details to be
decided on later via various TLS extensions and parameter settings.  This
makes deciding on a particular suite nondeterministic, since later parameter
choices and settings can negate the initial "cipher suite" choice, requiring
returning to the suite list to try with another Chinese-menu suite in the hope
that later parameter choices allow it to be used.

      </t>
      <t>

In practice no deployed implementation actually does this, either dropping the
connection or aborting the handshake with a handshake-failure if the expected
parameters aren't present throughout the various locations in the TLS
handshake in which ECC parameters can be specified.  This means that
establishing a TLS connection using ECC often requires trial-and-error probing
to ascertain what the other side is expecting to see before a connection can
be established.

      </t>
      <t>

Experience with deployed implementations indicates that all of them appear to
implement a common subset of fixed ECC parameters that work in all cases
(alongside the more obscure options), representing a de facto profile of
standard cipher suites rather than Chinese-menu selection options.  This
document standardises this de facto usage by defining a small number of
standard ECC cipher suites with unambiguous parameters and settings.

      </t>
      <section anchor="mustshouldmay" title="Conventions Used in This Document">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
          "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described
          in <xref target="RFC2119"/>.</t>
      </section>

    </section>
    <!-- ====================================================================== -->
    <section anchor="suites" title="Cipher Suites">
      <t>

The table below defines standard ECC cipher suites with fixed, unambiguous
parameters, based on the de facto profiles of suites seen in use in practice.
Since the form of these suites match the existing non-ECC suites, they follow
the existing suites in the { 0x00, 0xXX } range rather than being placed
with the Chinese-menu suites at { 0xC0, 0xXX }.

        <figure><artwork><![CDATA[
CipherSuite TLS_ECDHE_ECDSA_P256_WITH_AES_128_CBC_SHA = { 0x00, 0xXX }
CipherSuite TLS_ECDHE_ECDSA_P256_WITH_AES_256_CBC_SHA = { 0x00, 0xXX }
CipherSuite TLS_ECDHE_ECDSA_P384_WITH_AES_128_CBC_SHA = { 0x00, 0xXX }
CipherSuite TLS_ECDHE_ECDSA_P384_WITH_AES_256_CBC_SHA = { 0x00, 0xXX }

CipherSuite TLS_ECDHE_ECDSA_P256_WITH_AES_128_CBC_SHA256 =
  { 0x00, 0xXX }
CipherSuite TLS_ECDHE_ECDSA_P256_WITH_AES_256_CBC_SHA256 =
  { 0x00, 0xXX }
CipherSuite TLS_ECDHE_ECDSA_P384_WITH_AES_128_CBC_SHA384 =
  { 0x00, 0xXX }
CipherSuite TLS_ECDHE_ECDSA_P384_WITH_AES_256_CBC_SHA384 =
  { 0x00, 0xXX }

CipherSuite TLS_ECDHE_ECDSA_P256_WITH_AES_128_GCM_SHA256 =
  { 0x00, 0xXX }
CipherSuite TLS_ECDHE_ECDSA_P256_WITH_AES_256_GCM_SHA256 =
  { 0x00, 0xXX }
CipherSuite TLS_ECDHE_ECDSA_P384_WITH_AES_128_GCM_SHA384 =
  { 0x00, 0xXX }
CipherSuite TLS_ECDHE_ECDSA_P384_WITH_AES_256_GCM_SHA384 =
  { 0x00, 0xXX }
        ]]></artwork></figure>

      </t>
      <t>

In the above lists, the first set of suites allows use with TLS 1.0 and 1.1,
the second set allows use with TLS 1.2, and the third set allows use with
Suite B.

      </t>

<t>
[[[At least one major implementation, Microsoft's SChannel, already does this,
see <eref
target="http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx"/>.
For example it lists 'suites' like
TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256_P256 and
TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256_P256.  The above choices happen to
coincide with the Microsoft ones not because of any explicit attempt to copy
the Microsoft options but because they represent the obvious, logical
choices]]].
</t>

      <t>

For each cipher suite with their ECC parameters denoted 'P256' or 'P384', the
ECC parameters are:

      <list style="symbols">
        <t>

ECDH key agreement in Server Key Exchange/Client Key Exchange message: NIST
P-256/X9.62 p256r1/SECG p256r1 or NIST P-384/SECG p384r1 curve with
uncompressed points as indicated in the suite name.

        </t>
        <t>

ECDSA signature in Server Key Exchange message: P256 or P384 curve as for ECDH
with uncompressed points and SHA1, SHA256 or SHA384 as indicated in the suite
name.

        </t>
        <t>

Client authentication in Certificate Request/Certificate Verify messages:
SHA1, SHA256, or SHA384 as indicated in the suite name.
        </t>
      </list>

      </t>
      <t>

If no additional Chinese-menu ECC suites are used, implementations SHOULD NOT
send the Supported Elliptic Curves or Supported Point Formats extensions since
these parameters are fully specified by the suite choice.  If additional
Chinese-menu suites are used, implementations MUST send the Supported Elliptic
Curves and Supported Point Formats extensions as per <xref target="TLS-ECC"/>.
The parameters specified in these extensions apply only to the Chinese-menu
suites, not the fixed suites defined above.

      </t>
      <t>

<xref target="TLS"/> states that if the client does not send the
signature_algorithms extension then the hash algorithm defaults to SHA1.  This
is required in order to provide a fall-back default if no other means of
specifying the hash algorithm to be used is available.  Since this document
makes the use of the hash algorithm explicit in the cipher suite, the fall-
back to the SHA1 default is never triggered.

      </t>
      <t>

Note that the suites defined in this document augment, rather than supplant,
the existing Chinese-menu suites options.  Anyone requiring the use of more
unusual ECC parameters and options can use the Chinese-menu capability to
specify and select any parameters that they require.

      </t>
      <section anchor="discussion" title="Discussion">
        <t>

The issue that this document is intended to address may be more easily seen by
considering how the parts of the Client Hello are processed.  For standard
cipher suites the server iterates through a list of suites proposed by the
client and selects the most cromulent one.  For example a server may have a
list of suite IDs and parameters sorted in order of preference and select the
lowest-ranked suite in the list from the ones proposed by the client.

        </t>
        <t>

For the Chinese-menu suites on the other hand, the server sees a Chinese menu
selector sent by the client and then has to skip the remaining suites and
other parts of the hello and process the extensions to see whether what's in
there matches up with that the Chinese-menu selector requested.  For example
if the Chinese menu said TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 but the
supported-curves says P256 then the server has to either hope that the other
side does the special-case X9.62 handling for hash truncation and gets it
right (experience with current implementations indicates that they don't even
support this capability, let alone get it right), or not take the gamble and
go back to the cipher suites and look for another Chinese-menu option, and
then skip the rest of the hello and process the extensions again to see if
things work out this time, and if that doesn't work either then go back ...

        </t>
        <t>

In practice with currently-deployed implementations it's hard enough just
trying to figure out which basic combinations of parameters they support (the
usual response is a dropped connection or aborted handshake, requiring the use
of trial-and-error probing to find out what's possible), and even getting to
the point of being able to interop-test any of the more exotic combinations
like hash truncation becomes more or less impossible.  So the purpose of this
document is to try and identify the common combinations of parameters that
everyone seems to implement anyway and list them as conventional cipher
suites, with no further parameterisation required.

      </t>
      <t>

An additional problem with the Chinese-menu selection process is the fact that
although it allows the specification of arbitrary numbers of handshake
parameters, it never nails down how and where these parameters should be
applied.  Practical experience with implementations indicates that only the
most straightforward combinations of algorithm parameters are likely to work.
For example although it's possible to specify both P256 and P384 as acceptable
curves, what this tends to mean in practice is that { ECDH P256 + ECDSA P256 }
or { ECDH P384 + ECDSA P384 } are acceptable but { ECDH P256 + ECDSA P384 } or
{ ECDH P384 + ECDSA P256 } aren't.  In the interests of interoperability it's
recommended that, despite the apparent flexibility implied by the Chinese
menu, implementations stick to the most straightforward application of
algorithm parameters, using the same algorithm or parameters throughout the
handshake even if it's implied by the Chinese-menu that mix-and-match
combinations are possible.  For example if the overall cipher suite is
TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 then use SHA256 everywhere a hash
function is used; if the curve types are P256 or P384 then use either P256
everywhere or P384 everywhere.  This design principle is captured in the
requirements given in <xref target="suites"/>.

        </t>
        <t>

The term "Chinese menu" comes from the US, where Chinese restaurants
traditionally had columns for ordering food, and orders were put together in a
mix-and-match manner by ordering an item from column A, two from column B, and
so on.  Any process that involves picking a selection from different columns
has become described as a "Chinese menu system".

        </t>
      </section>
    </section>
    <!-- ====================================================================== -->
    <section anchor="security" title="Security Considerations">
      <t>

This document is a profile of, and simplifcation of, <xref target="TLS-ECC"/>.
No further security considerations are introduced beyond those present in
<xref target="TLS-ECC"/> .

      </t>
    </section>
    <!-- ====================================================================== -->
    <section anchor="iana" title="IANA Considerations">
      <t>

This document defines new cipher suites for TLS [to be allocated in the currently
unallocated range { 0x00, 0xC6 } - { 0x00, 0xD1 }].

      </t>
    </section>
    <!-- ====================================================================== -->

  </middle>
  <!-- ======================================================================== -->
  <back>

    <references title="Normative References">

      <reference anchor='RFC2119'>
        <front>
          <title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
          <author initials='S.' surname='Bradner' fullname='Scott Bradner'>
            <organization>Harvard University</organization>
          </author>
          <date year='1997' month='March' />
          <area>General</area>
          <keyword>keyword</keyword>
        </front>
        <seriesInfo name='BCP' value='14' />
        <seriesInfo name='RFC' value='2119' />
        <format type='TXT' target='ftp://ftp.isi.edu/in-notes/rfc2119.txt' />
        <format type='HTML' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
        <format type='XML' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
      </reference>

      <reference anchor='TLS'>
        <front>
          <title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
          <author fullname="Tim Dierks" initials="T" surname="Dierks">
            <organization>Independent</organization>
          </author>
          <author fullname="Eric Rescorla" initials="E" surname="Rescorla">
            <organization>RTFM, Inc.</organization>
          </author>
          <date year='2008' month='August' />
        </front>
        <seriesInfo name='RFC' value='5246' />
        <format type='TXT' target='http://www.ietf.org/rfc/rfc5246.txt' />
      </reference>

      <reference anchor='TLS-ECC'>
        <front>
          <title>Elliptic Curve Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS)</title>
          <author fullname="Simon Blake-Wilson" initials="S" surname="Blake-Wilson">
            <organization>SafeNet Technologies BV</organization>
          </author>
          <author fullname="Nelson Bolyard" initials="N" surname="Bolyard">
            <organization>Sun Microsystems Inc.</organization>
          </author>
          <author fullname="Vipul Gupta" initials="V" surname="Gupta">
            <organization>Sun Microsystems Laboratories</organization>
          </author>
          <author fullname="Chris Hawk" initials="C" surname="Hawk">
            <organization>Corriente Networks LLC</organization>
          </author>
          <date year='2006' month='May' />
        </front>
        <seriesInfo name='RFC' value='4492' />
        <format type='TXT' target='http://www.ietf.org/rfc/rfc4492.txt' />
      </reference>

    </references>
    <!-- ====================================================================== -->
  </back>
</rfc>
