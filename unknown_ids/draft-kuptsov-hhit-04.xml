<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC5201  SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5201.xml">

]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-kuptsov-hhit-04" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="HHIT">Hierarchical Host Identity Tags (HHIT) Verification Architecture</title>


    <author fullname="Dmitriy Kuptsov" initials="D.K." 
            surname="Kuptsov">
      <organization>Helsinki Institute for Information Technology, Aalto University</organization>

      <address>
 		<postal>
          <street>PO Box 19215</street>

          <city>Espoo</city>

          <code>00076 Aalto</code>


          <country>Finland</country>
        </postal>
        <phone></phone>

        <email>dmitriy.kuptsov@hiit.fi</email>

      </address>
    </author>

        <author fullname="Andrei Gurtov" initials="A.G." 
            surname="Gurtov">
      <organization>Helsinki Institute for Information Technology, Aalto University</organization>
      <address>
        <postal>
          <street>PO Box 19215</street>

          <city>Espoo</city>

          <code>00076 Aalto</code>

          <country>Finland</country>
        </postal>

        <phone></phone>

        <email>gurtov@hiit.fi</email>

      </address>
    </author>
	<author fullname="Dacheng Zhang" initials="D.Z" surname="Zhang">
		<organization>Huawei Technologies Co.,Ltd</organization>
		<address>
        <postal>
          <street>PO Box 19215</street>

          <city>Beijing</city>

          <code></code>

          <country>China</country>
        </postal>

        <phone></phone>

        <email>zhangdacheng@huawei.com</email>

      </address>

	</author>

   <date year="2011" />

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <keyword></keyword>

    <abstract>
      <t>
		This document describes the architecture for hierarchical host identity tags (HHIT) vrification for HIP protocol. 
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t> 
		This document describes the architecture for hierarchical host identity tags (HHIT) vrification 
		for Host Identity Protocol (HIP) <xref target="RFC5201">RFC 5201</xref>. 
      </t>
      <t>
		The purpose of HHIT architecture is to enable online verification of flat identifiers (in a scalable way), such as Host Identity Tags (HIT),
		by corresponding organizations that are responsible for clients holding such identifiers. While one way of 
		verifying whether HIT belongs to a client that is affiliated with some organization (or unit within organization) 
		is to use certificates; such approach can be undesired because it (i) introduces high cost for certificate verification, and (ii) 
		does not directly allow certificate status verification (consider the situation when private key of a particular host was stolen
		and firewall enforcing certificate verification does not check the revocation status of host's certificate). 
      </t>
    </section>

    <section anchor="Overview" title="Structure of HHIT">
      <t>
		The following are the goals of HHIT: (i) allow any on the path security gateway to distinguish to which authority 
		the identifier belongs, and later ask corresponding authority whether given HHIT is valid; (ii) prevent misuse 
		of HHIT by attackers (specifically, the design allows to prevent replaying and constructing "fake" HHITs that will 
		enable attackers to bypass the security gateways).
      </t>
      
      <t>
      	The structure of hierarchical HHIT:
      	
      	<figure align="center" anchor="structure">
          <artwork align="left"><![CDATA[

 0                   1                   2                   3   
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            OID                                |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            HHIT                               |
+                                                               |
|                                                               |
+                                                               +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|             Type            |C|             Length            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        ENC_HHIT_TIMESTAMP                     |
+                                                               +
|                                                               |
+                                                               +
|                                                               |
+                                                               +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         Padding (4 bytes)                     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]></artwork>    
		</figure>
		
		<list style="symbols">
	  		<t>
		    OID is organization identifier that depending of the application of 
		    HHIT can be globally unique (e.g., assigned by Internet Assigned 
		    Numbers Authority (IANA)), or unique within certain scope (e.g.,  
		    within organization and assigned on per department or unit granularity).
		    
		    Length of OID is 32 bits.
		  </t>
		  <t>
			HHIT is an output of a pseudo-random function (PRF) under one-time secret key 
			and input taken as a concatenation of OID and flat identifier (HIT):
			
			HHIT=PRF(OID || HIT, secret)
			
			The length of HHIT field is 96 bits to guarantee sufficient level of security.
								
		  </t>	  
		  <t>
		    ENC_HHIT_TIMESTAMP parameter guarantees freshness of HHIT, it contains the timestamp 
		    when particular HHIT was generated. This field is encrypted (using symmetric
		    encryption function) under the same one-time secret as HHIT:
	    
		    ENC_HHIT_TIMESTAMP = ENC(HHIT || #epoc || padding (96 bits), secret),
	    
		    where HHIT is as described above, #epoc is a timestamp indicating the time 
		    when HHIT was constructed, and secret is the next yet unused secret key 
		    from a key pull, assigned to a client by its authority. 
		    
		    Because the usage of block cipher is assumed for encryption, the length of 
		    ENC_HHIT_TIMESTAMP field is a multiple of the block size of a particular encryption 
		    algorithm. Length of #epoch is 64 bits to allow encode timestamp in microseconds. As a result, 
			the length of ENC_HHIT_TIMESTAMP when used together with AES-CBC algorithm, is 2*128 bits.
		  </t>

		</list>
      </t>
      <t>
      	Because total length of OID||HHIT||ENC_HHIT_TIMESTAMP exceeds reserved 128 bits for source address in HIP 
      	protocol, the Sender's Host Identity Tag should contain only OID||HHIT, while ENC_HHIT_TIMESTAMP should be carried as 
      	mandatory HIP parameter in I1 packet.
      </t>
    </section>
    
    <section anchor="Usecase" title="Use case">
    	<t>
    		Next we describe a possible use case - access control with HHIT:
      		<figure align="center" anchor="usecase">
          		<artwork align="left"><![CDATA[    								 
                       Register HHIT (offline)
+----------------------+------------------>+-------------+ 
|                      |                   |  Domain 1   |
|Client (from domain 1)|    Secret keys    |  authority  |
+----------------------+<------------------+-------+-----+
                       |                  HHIT /\  | OK
                       |                       |   v 
                       |   I1              +---+---------+ 
                       +------------------>|  Security   |-->...
                       +------------------>|  gateway    |
                       |   I1              +---+---+-----+
                       |                  HHIT |   /\   
                       |   Register HHIT       v   |  Ok
+----------------------+------------------>+-------------+ 
|Client (from domain 2)|                   |  Domain 2   |
|                      |    Secret keys    |  authority  |
+----------------------+<------------------+-------+-----+
            	]]></artwork>    
			</figure>
			We outline the protocol interaction:
    		<list style="symbols">
	  			<t>
					Each end-host that belongs to some organization, or organizational unit, 
					constructs its HIT (using the procedure described in 
					<xref target="RFC5201">RFC 5201</xref>), and registers it
					in an offline manner in its organizational repository.
					Depending on the application, the registration itself can involve authentication, e.g. 
					using passwords, certificates, biometric information, passport, etc.				
					Upon verification, domain authority generates set of one-time-passwords 
					(the number of such passwords again depends on the application needs), and for each secret s
					populates its database with the following records: HHIT = PRF(OID || HIT, s)
					Domain authority then returns list of secrets to client over secure channel (how this is 
					achieved is out of scope).
				</t>
			  	<t>
			  		When a client wants to access the service that is behind security gateway, 
			  		it chooses next unused one-time secret "unused secret" and constructs the 
			  		HHIT as PRF(OID || HIT, "unused secret"), it also takes the current #epoch
			  		"now" and constructs  ENC_HHIT_TIMESTAMP parameter as ENC(HHIT || "now", "unused secret").
				</t><t>
			  		Every I1 packet then contains: sender's Host Identity Tag field as (OID || HHIT), 
					also parameter ENC_HHIT_TIMESTAMP is added such that domain authority can verify 
					the freshness of HHIT.
				</t>
				<t>
					When security gateway receives such I1 packet, it will look-up the domain authority 
					using OID found in the sender's Host Identity Tag, and submit OID, HHIT, and ENC_HHIT_TIMESTAMP to 
					corresponding domain authority. Security gateway will buffer I1 until it will receive 
					(positive or negative) response from corresponding domain authority.
				</t>
				<t>
					Last, when domain authority receives OID, HHIT, and ENC_HHIT_TIMESTAMP for verification 
					it looks up for the proper secret using HHIT as index. If the record was not found, 
					the domain authority immediately responds to a gateway that information is not valid.
					Else, domain authority attempts to decrypt ENC_HHIT_TIMESTAMP field to find #epoch. It also retrieves
					the last registered I1 timestamp (if any) -- "#epoch last". To mitigate possible replays, 
					for every received I1 packet domain authority should check the timestamp found in ENC_HHIT_TIMESTAMP, and the timestamp 
					of previously seen I1 packet for the same source. Optimally, timestamp found in 
					received I1 packet should be grater then the last registered timestamp, i.e., 
					the timestamps for the same source should be monotonically increasing #epoch &gt; "#epoch last". However, 
					consecutive I1s can be reordered, i.e., #epoch &lt; "#epoch last". In this case 
					if "#epoch last" - #epoch &gt; Delta, the HHIT will be considered as invalid, 
					and negative response will be sent to security gateway.
				</t>
				
				<t>
					Security gateway will make a forwarding decision regarding particular buffered I1
					packet based on the response it receives from domain authority: if the response
					is negative I1 packet is dropped, otherwise the state will be created 
					and I1 will be forwarded. Note, for	consequent R1, I2, R2 packets the forwarding 
					decisions by security gateway are done solely based on the stored internal state:
					if it exists the packets are forwarded, otherwise dropped.
				</t>
			</list>
	    </t>
    </section>
	<section anchor="experimental" title="Experimental observations">
      <t>
		To grasp what would be the performance implications, we measured HHIT verification using 
		2 DHTs deployed in the Internet and single security gateway. Each DHT was mimic single domain authority. We generated 
		storms of I1 packets towards security gateway, using exponential distribution for interarrival times with different 
		lambda parameter (10,100,1000,10000,100000). Correspondingly, for all traffic patterns we have observed 
		that in 50% of cases  verification time was approx. 600-700 ms, and the queue sizes observed on the gateway were 	
		varying from 5-300 packets correspondingly.
      </t>
    </section>
     <section anchor="Security" title="Security Considerations">
      <t>
		We mentioned earlier that for every sent I1 packet, sender picks next unused 
		one-time secret to produce HHIT and ENC_HHIT_TIMESTAMP. However, it can be sufficient 
		for domain authority and particular client to share a single secret which is rotated 
		every time T (where T can be on the scale of days). 
      </t>
	  <t>
		The Delta threshold should be relatively small to prevent replays. Thus, Delta should 
		be of order of few hundred milliseconds to guarantee sufficient level of security.
	  </t>
    </section>

     
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>

    <references title="Normative References">
      &RFC5201;
    </references>
  </back>
</rfc>
