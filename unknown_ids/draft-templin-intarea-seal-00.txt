


Network Working Group                                    F. Templin, Ed.
Internet-Draft                              Boeing Research & Technology
Intended status: Standards Track                           June 12, 2009
Expires: December 14, 2009


        The Subnetwork Encapsulation and Adaptation Layer (SEAL)
                   draft-templin-intarea-seal-00.txt

Status of this Memo

   This Internet-Draft is submitted to IETF in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on December 14, 2009.

Copyright Notice

   Copyright (c) 2009 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents in effect on the date of
   publication of this document (http://trustee.ietf.org/license-info).
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Abstract

   For the purpose of this document, subnetworks are defined as virtual
   topologies that span connected network regions bounded by
   encapsulating border nodes.  These virtual topologies may span



Templin                 Expires December 14, 2009               [Page 1]

Internet-Draft                    SEAL                         June 2009


   multiple IP and/or sub-IP layer forwarding hops, and can introduce
   failure modes due to packet duplication and/or links with diverse
   Maximum Transmission Units (MTUs).  This document specifies a
   Subnetwork Encapsulation and Adaptation Layer (SEAL) that
   accommodates such virtual topologies over diverse underlying link
   technologies.


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
     1.1.  Motivation . . . . . . . . . . . . . . . . . . . . . . . .  4
     1.2.  Approach . . . . . . . . . . . . . . . . . . . . . . . . .  6
   2.  Terminology and Requirements . . . . . . . . . . . . . . . . .  6
   3.  Applicability Statement  . . . . . . . . . . . . . . . . . . .  7
   4.  SEAL Protocol Specification (Version 0)  . . . . . . . . . . .  8
     4.1.  Model of Operation . . . . . . . . . . . . . . . . . . . .  8
     4.2.  SEAL Header Format (Version 0) . . . . . . . . . . . . . . 10
     4.3.  ITE Specification  . . . . . . . . . . . . . . . . . . . . 11
       4.3.1.  Tunnel Interface MTU . . . . . . . . . . . . . . . . . 11
       4.3.2.  Admitting Packets into the Tunnel Interface  . . . . . 12
       4.3.3.  Inner Fragmentation and Segmentation . . . . . . . . . 12
       4.3.4.  Encapsulation  . . . . . . . . . . . . . . . . . . . . 14
       4.3.5.  Probing Strategy . . . . . . . . . . . . . . . . . . . 14
       4.3.6.  Packet Identification  . . . . . . . . . . . . . . . . 15
       4.3.7.  Sending SEAL Protocol Packets  . . . . . . . . . . . . 15
       4.3.8.  Processing Raw ICMPv4 Messages . . . . . . . . . . . . 15
       4.3.9.  Processing SEAL Errors . . . . . . . . . . . . . . . . 16
     4.4.  ETE Specification  . . . . . . . . . . . . . . . . . . . . 17
       4.4.1.  Reassembly Buffer Requirements . . . . . . . . . . . . 17
       4.4.2.  IPv4-Layer Reassembly  . . . . . . . . . . . . . . . . 17
       4.4.3.  Sending SEAL Fragmentation Reports . . . . . . . . . . 18
       4.4.4.  SEAL-Layer Reassembly  . . . . . . . . . . . . . . . . 18
       4.4.5.  Decapsulation and Delivery to Upper Layers . . . . . . 19
       4.4.6.  Generating SEAL Error Messages . . . . . . . . . . . . 19
   5.  SEAL Protocol Specification (Version 1)  . . . . . . . . . . . 21
     5.1.  Model of Operation . . . . . . . . . . . . . . . . . . . . 21
     5.2.  SEAL Header Format (Version 1) . . . . . . . . . . . . . . 21
     5.3.  ITE Specification  . . . . . . . . . . . . . . . . . . . . 22
       5.3.1.  Tunnel Interface MTU . . . . . . . . . . . . . . . . . 22
       5.3.2.  Admitting Packets into the Tunnel Interface  . . . . . 22
       5.3.3.  Inner Fragmentation and Segmentation . . . . . . . . . 23
       5.3.4.  Encapsulation  . . . . . . . . . . . . . . . . . . . . 23
       5.3.5.  Probing Strategy . . . . . . . . . . . . . . . . . . . 23
       5.3.6.  Packet Identification  . . . . . . . . . . . . . . . . 23
       5.3.7.  Sending SEAL Protocol Packets  . . . . . . . . . . . . 23
       5.3.8.  Processing Raw ICMPv4 Messages . . . . . . . . . . . . 23
       5.3.9.  Processing SEAL Errors . . . . . . . . . . . . . . . . 24



Templin                 Expires December 14, 2009               [Page 2]

Internet-Draft                    SEAL                         June 2009


     5.4.  ETE Specification  . . . . . . . . . . . . . . . . . . . . 24
       5.4.1.  Reassembly Buffer Requirements . . . . . . . . . . . . 24
       5.4.2.  IP-Layer Reassembly  . . . . . . . . . . . . . . . . . 24
       5.4.3.  Sending SEAL Fragmentation Reports . . . . . . . . . . 24
       5.4.4.  SEAL-Layer Reassembly  . . . . . . . . . . . . . . . . 24
       5.4.5.  Decapsulation and Delivery to Upper Layers . . . . . . 24
       5.4.6.  Sending SEAL Error Messages  . . . . . . . . . . . . . 24
   6.  Link Requirements  . . . . . . . . . . . . . . . . . . . . . . 24
   7.  End System Requirements  . . . . . . . . . . . . . . . . . . . 25
   8.  Router Requirements  . . . . . . . . . . . . . . . . . . . . . 25
   9.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 25
   10. Security Considerations  . . . . . . . . . . . . . . . . . . . 25
   11. Related Work . . . . . . . . . . . . . . . . . . . . . . . . . 26
   12. SEAL Advantages over Classical Methods . . . . . . . . . . . . 26
   13. Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 27
   14. References . . . . . . . . . . . . . . . . . . . . . . . . . . 28
     14.1. Normative References . . . . . . . . . . . . . . . . . . . 28
     14.2. Informative References . . . . . . . . . . . . . . . . . . 28
   Appendix A.  Reliability Extensions  . . . . . . . . . . . . . . . 30
   Appendix B.  Transport Mode  . . . . . . . . . . . . . . . . . . . 30
   Appendix C.  Historic Evolution of PMTUD . . . . . . . . . . . . . 31
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . . 32





























Templin                 Expires December 14, 2009               [Page 3]

Internet-Draft                    SEAL                         June 2009


1.  Introduction

   As Internet technology and communication has grown and matured, many
   techniques have developed that use virtual topologies (including
   tunnels of one form or another) over an actual network that supports
   the Internet Protocol (IP) [RFC0791][RFC2460].  Those virtual
   topologies have elements that appear as one hop in the virtual
   topology, but are actually multiple IP or sub-IP layer hops.  These
   multiple hops often have quite diverse properties that are often not
   even visible to the endpoints of the virtual hop.  This introduces
   failure modes that are not dealt with well in current approaches.

   The use of IP encapsulation has long been considered as the means for
   creating such virtual topologies.  However, the insertion of an outer
   IP header reduces the effective path MTU as-seen by the IP layer.
   When IPv4 is used, this reduced MTU can be accommodated through the
   use of IPv4 fragmentation, but unmitigated in-the-network
   fragmentation has been found to be harmful through operational
   experience and studies conducted over the course of many years
   [FRAG][FOLK][RFC4963].  Additionally, classical path MTU discovery
   [RFC1191] has known operational issues that are exacerbated by in-
   the-network tunnels [RFC2923][RFC4459].  In the following
   subsections, we present further details on the motivation and
   approach for addressing these issues.

1.1.  Motivation

   Before discussing the approach, it is necessary to first understand
   the problems.  In both the Internet and private-use networks today,
   IPv4 is ubiquitously deployed as the Layer 3 protocol.  The two
   primary functions of IPv4 are to provide for 1) addressing, and 2) a
   fragmentation and reassembly capability used to accommodate links
   with diverse MTUs.  While it is well known that the addressing
   properties of IPv4 are limited (hence, the larger address space
   provided by IPv6), there is a lesser-known but growing consensus that
   other limitations may be unable to sustain continued growth.

   First, the IPv4 header Identification field is only 16 bits in
   length, meaning that at most 2^16 packets pertaining to the same
   (source, destination, protocol, Identification)-tuple may be active
   in the Internet at a given time.  Due to the escalating deployment of
   high-speed links (e.g., 1Gbps Ethernet), however, this number may
   soon become too small by several orders of magnitude.  Furthermore,
   there are many well-known limitations pertaining to IPv4
   fragmentation and reassembly - even to the point that it has been
   deemed "harmful" in both classic and modern-day studies (cited
   above).  In particular, IPv4 fragmentation raises issues ranging from
   minor annoyances (e.g., in-the-network router fragmentation) to the



Templin                 Expires December 14, 2009               [Page 4]

Internet-Draft                    SEAL                         June 2009


   potential for major integrity issues (e.g., mis-association of the
   fragments of multiple IP packets during reassembly).

   As a result of these perceived limitations, a fragmentation-avoiding
   technique for discovering the MTU of the forward path from a source
   to a destination node was devised through the deliberations of the
   Path MTU Discovery Working Group (PMTUDWG) during the late 1980's
   through early 1990's (see Appendix C).  In this method, the source
   node provides explicit instructions to routers in the path to discard
   the packet and return an ICMP error message if an MTU restriction is
   encountered.  However, this approach has several serious shortcomings
   that lead to an overall "brittleness".

   In particular, site border routers in the Internet are being
   configured more and more to discard ICMP error messages coming from
   the outside world.  This is due in large part to the fact that
   malicious spoofing of error messages in the Internet is made simple
   since there is no way to authenticate the source of the messages.
   Furthermore, when a source node that requires ICMP error message
   feedback when a packet is dropped due to an MTU restriction does not
   receive the messages, a path MTU-related black hole occurs.  This
   means that the source will continue to send packets that are too
   large and never receive an indication from the network that they are
   being discarded.

   The issues with both IPv4 fragmentation and this "classical" method
   of path MTU discovery are exacerbated further when IP-in-IP tunneling
   is used.  For example, site border routers that are configured as
   ingress tunnel endpoints may be required to forward packets into the
   subnetwork on behalf of hundreds, thousands, or even more original
   sources located within the site.  If IPv4 fragmentation were used,
   this would quickly wrap the 16-bit Identification field and could
   lead to undetected data corruption.  If classical IPv4 path MTU
   discovery were used instead, the site border router may be
   inconvenienced by excessive ICMP error messages coming from the
   subnetwork that may be either untrustworthy or insufficiently
   provisioned to allow translation into error messages to be returned
   to the original sources.

   The situation is exacerbated further still by IPsec tunnels, since
   only the first IPv4 fragment of a fragmented packet contains the
   transport protocol selectors (e.g., the source and destination ports)
   required for identifying the correct security association rendering
   fragmentation useless under certain circumstances.  Even worse, there
   may be no way for a site border router that configures an IPsec
   tunnel to transcribe the encrypted packet fragment contained in an
   ICMP error message into a suitable ICMP error message to return to
   the original source.  Due to these many limitations, a new approach



Templin                 Expires December 14, 2009               [Page 5]

Internet-Draft                    SEAL                         June 2009


   to accommodate links with diverse MTUs is necessary.

1.2.  Approach

   For the purpose of this document, subnetworks are defined as virtual
   topologies that span connected network regions bounded by
   encapsulating border nodes.  Subnetworks in this sense correspond
   exactly to the "enterprise" abstraction defined in Virtual Enterprise
   Traversal (VET) [I-D.templin-autoconf-dhcp] and Routing and
   Addressing in Next-Generation EnteRprises (RANGER)
   [I-D.templin-ranger][I-D.russert-rangers].  Examples include the
   global Internet interdomain routing core, Mobile Ad hoc Networks
   (MANETs) and enterprise networks.  Subnetwork border nodes forward
   unicast and multicast IP packets over the virtual topology across
   multiple IP and/or sub-IP layer forwarding hops that may introduce
   packet duplication and/or traverse links with diverse Maximum
   Transmission Units (MTUs).

   This document introduces a Subnetwork Encapsulation and Adaptation
   Layer (SEAL) for tunnel-mode operation of IP over subnetworks that
   connect Ingress and Egress Tunnel Endpoints (ITEs/ETEs) of border
   nodes.  It provides a standalone specification designed to be
   tailored to specific associated tunneling protocols such as VET
   [I-D.templin-autoconf-dhcp], the Locator-Identifier Split Protocol
   (LISP) [I-D.ietf-lisp] and others.  A transport-mode of operation is
   also possible, and described in Appendix B.  SEAL accommodates links
   with diverse MTUs, protects against off-path denail-of-service
   attacks, and supports efficient duplicate packet detection through
   the use of a minimal mid-layer encapsulation.

   SEAL encapsulation introduces an extended Identification field for
   packet identification and a mid-layer segmentation and reassembly
   capability that allows simplified cutting and pasting of packets.
   Moreover, SEAL senses in-the-network IPv4 fragmentation as a "noise"
   indication that packet sizing parameters are "out of tune" with
   respect to the network path.  As a result, SEAL can naturally tune
   its packet sizing parameters to eliminate the in-the-network
   fragmentation.

   SEAL encapsulation additionally includes a 2-bit version number to
   accommodate future protocol versions.  This document specifies SEAL
   protocol versions 0 and 1.


2.  Terminology and Requirements

   The terms "inner", "mid-layer", and "outer", respectively, refer to
   the innermost IP (layer, protocol, header, packet, etc.) before any



Templin                 Expires December 14, 2009               [Page 6]

Internet-Draft                    SEAL                         June 2009


   encapsulation, the mid-layer IP (protocol, header, packet, etc.)
   after any mid-layer '*' encapsulation, and the outermost IP (layer,
   protocol, header, packet etc.) after SEAL/*/IPv4 encapsulation.

   The term "IP" used throughout the document refers to either Internet
   Protocol version (IPv4 or IPv6).  Additionally, the notation IPvX/*/
   SEAL/*/IPvY refers to an inner IPvX packet encapsulated in any mid-
   layer '*' encapsulations, followed by the SEAL header, followed by
   any outer '*' encapsulations, followed by an outer IPvY header, where
   the notation "IPvX" means either IP protocol version (IPv4 or IPv6).

   The following abbreviations correspond to terms used within this
   document and elsewhere in common Internetworking nomenclature:

      ITE - Ingress Tunnel Endpoint

      ETE - Egress Tunnel Endpoint

      PTB - an ICMPv6 "Packet Too Big", an ICMPv4 "Fragmentation Needed"
      or a SEAL "Fragmentation Report" message

      DF - the IPv4 header "Don't Fragment" flag

      MHLEN - the length of any mid-layer '*' headers and trailers

      OHLEN - the length of the outer encapsulating SEAL/*/IPv4 headers

      HLEN - the sum of MHLEN and OHLEN

      S_MRU - the per-ETE SEAL Maximum Reassembly Unit

      S_MSS - the SEAL Maximum Segment Size

      SEAL_ID - a 32-bit Identification value, randomly initialized and
      monotonically incremented for each SEAL protocol packet

      SEAL_PROTO - an IPv4 protocol number used for SEAL
      SEAL_PORT - a TCP/UDP service port number used for SEAL

   The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD,
   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they appear in this
   document, are to be interpreted as described in [RFC2119].


3.  Applicability Statement

   SEAL was motivated by the specific case of subnetwork abstraction for
   Mobile Ad hoc Networks (MANETs); however, the domain of applicability



Templin                 Expires December 14, 2009               [Page 7]

Internet-Draft                    SEAL                         June 2009


   also extends to subnetwork abstractions of enterprise networks, ISP
   networks, SOHO networks, the interdomain routing core, and many
   others.  In particular, SEAL is a natural complement to the
   enterprise network abstraction manifested through the VET mechanism
   [I-D.templin-autoconf-dhcp], the RANGER architecture
   [I-D.templin-ranger][I-D.russert-rangers] and the LISP protocol
   [I-D.ietf-lisp].  Indeed, the term "subnetwork" within this document
   is used synonymously with the term "enterprise" that appears in these
   references.

   SEAL introduces a minimal new sublayer for IPvX in IPvY encapsulation
   (e.g., as IPv6/SEAL/IPv4), and appears as a subnetwork encapsulation
   as seen by the inner IP layer.  SEAL can also be used as a sublayer
   for encapsulating inner IP packets within outer UDP/IPv4 headers
   (e.g., as IPv6/SEAL/UDP/IPv4) such as for the Teredo domain of
   applicability [RFC4380].  When it appears immediately after the outer
   IPv4 header, the SEAL header is processed exactly as for IPv6
   extension headers.

   This document discusses the use of IPv4 as the outer encapsulation
   layer; however, the same principles apply when IPv6 is used as the
   outer layer.


4.  SEAL Protocol Specification (Version 0)

   This section specifies the fully-functioned version of SEAL known as
   "SEAL Version 0", or "Classical SEAL".  A minimal version of SEAL
   known as "SEAL Version 1", or "SEAL-lite", is specified in Section 5.

4.1.  Model of Operation

   SEAL provides an encapsulation sublayer that supports the
   transmission of unicast and multicast packets across an underlying IP
   network.  SEAL-enabled ITEs insert a SEAL header during the
   encapsulation of inner IP packets in mid-layer and outer
   encapsulating headers/trailers.  For example, an inner IPv6 packet
   would appear as IPv6/*/SEAL/*/IPv4 after mid-layer and outer
   encapsulations, where '*' denotes zero or more additional
   encapsulation sublayers.

   SEAL-enabled ITEs add mid-layer '*' and outer SEAL/*/IPv4
   encapsulations to the inner packets they inject into a subnetwork,
   where the outermost IPv4 header contains the source and destination
   addresses of the subnetwork entry/exit points (i.e., the ITE/ETE),
   respectively.  ITEs encapsulate each inner IP packet in mid-layer and
   outer encapsulations as shown in Figure 1:




Templin                 Expires December 14, 2009               [Page 8]

Internet-Draft                    SEAL                         June 2009


                                            +-------------------------+
                                            |                         |
                                            ~   Outer */IPv4 headers  ~
                                            |                         |
   I                                        +-------------------------+
   n                                        |       SEAL Header       |
   n      +-------------------------+       +-------------------------+
   e      ~ Any mid-layer * headers ~       ~ Any mid-layer * headers ~
   r      +-------------------------+       +-------------------------+
          |                         |       |                         |
   I -->  ~         Inner IP        ~  -->  ~         Inner IP        ~
   P -->  ~         Packet          ~  -->  ~         Packet          ~
          |                         |       |                         |
   P      +-------------------------+       +-------------------------+
   a      ~  Any mid-layer trailers ~       ~  Any mid-layer trailers ~
   c      +-------------------------+       +-------------------------+
   k                                        ~    Any outer trailers   ~
   e                                        +-------------------------+
   t
           (After mid-layer encaps.)        (After SEAL/*/IPv4 encaps.)

                       Figure 1: SEAL Encapsulation

   where the SEAL header is inserted as follows:

   o  For simple IPvX/IPv4 encapsulations (e.g.,
      [RFC2003][RFC2004][RFC4213]), the SEAL header is inserted between
      the inner IP and outer IPv4 headers as: IPvX/SEAL/IPv4.

   o  For tunnel-mode IPsec encapsulations over IPv4, [RFC4301], the
      SEAL header is inserted between the {AH,ESP} header and outer IPv4
      headers as: IPvX/*/{AH,ESP}/SEAL/IPv4.

   o  For IP encapsulations over transports such as UDP, the SEAL header
      is inserted immediately after the outer transport layer header,
      e.g., as IPvX/*/SEAL/UDP/IPv4.

   SEAL-encapsulated packets include a 32-bit SEAL_ID formed from the
   concatenation of the 16-bit ID Extension field in the SEAL header as
   the most-significant bits, and with the 16-bit Identification value
   in the outer IPv4 header as the least-significant bits.  (For tunnels
   that traverse middleboxes that might rewrite the IPv4 ID field, e.g.,
   a Network Address Translator, the SEAL_ID is instead maintained only
   within the ID field in the SEAL header.)  Routers within the
   subnetwork use the SEAL_ID for duplicate packet detection, and ITEs/
   ETEs use the SEAL_ID for SEAL segmentation/reassembly and protection
   against off-path attacks.




Templin                 Expires December 14, 2009               [Page 9]

Internet-Draft                    SEAL                         June 2009


   SEAL enables a multi-level segmentation and reassembly capability.
   First, the ITE can use IPv4 fragmentation to fragment inner IPv4
   packets with DF=0 before SEAL encapsulation.  Secondly, the SEAL
   layer itself provides a simple cutting-and-pasting capability for
   mid-layer packets to avoid IPv4 fragmentation on the outer packet.
   Finally, ordinary IPv4 fragmentation is permitted on the outer packet
   after SEAL encapsulation and used to detect and dampen any in-the-
   network fragmentation as quickly as possible.

   The following sections specify the SEAL header format and SEAL-
   related operations of the ITE and ETE, respectively.

4.2.  SEAL Header Format (Version 0)

   The SEAL version 0 header is formatted as follows:

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |VER|A|D|M| SEG |  Next Header  |         ID Extension          |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                  Figure 2: SEAL Version 0 Header Format

   where the header fields are defined as:

   VER (2)
      a 2-bit value that encodes the SEAL protocol version number.  This
      section describes Version 0 of the SEAL protocol, i.e., the VER
      field encodes the value '00'.

   A (1)
      the "Acknowledgement Requested" bit.  Set to 1 if the ITE wishes
      to receive an explicit acknowledgement from the ETE.

   D (1)
      the "Don't Fragment" bit.  Copied from the D flag in the SEAL
      header of the inner packet if the inner packet is itself a SEAL/IP
      packet.  Otherwise, set to 0 if the inner packet is an IPv4 packet
      with DF=0.  Otherwise, set to 1.

   M (1)
      the "More Segments" bit.  Set to 1 if this SEAL protocol packet
      contains a non-final segment of a multi-segment mid-layer packet.







Templin                 Expires December 14, 2009              [Page 10]

Internet-Draft                    SEAL                         June 2009


   R (1)
      the "reserved" bit.  Set to 0 for the purpose of this
      specification.

   SEG (2)
      a 2-bit segment number.  Encodes a segment number between 0 - 3.

   Next Header (8)  an 8-bit field that encodes an Internet Protocol
      number the same as for the IPv4 protocol and IPv6 next header
      fields.

   ID Extension (16)
      a 16-bit extension of the Identification field in the outer IPv4
      header; encodes the most-significant 16 bits of a 32 bit SEAL_ID
      value.

4.3.  ITE Specification

4.3.1.  Tunnel Interface MTU

   The ITE configures a tunnel virtual interface over one or more
   underlying links that connect the border node to the subnetwork.  The
   tunnel interface must present a fixed MTU to the inner IP layer
   (i.e., Layer 3) as the size for admission of inner IP packets into
   the tunnel.  Since the tunnel interface may support a potentially
   large set of ETEs, however, care must be taken in setting a large-
   enough MTU for all ETEs while still upholding end system
   expectations.

   Due to the ubiquitous deployment of standard Ethernet and similar
   networking gear, the nominal Internet cell size has become 1500
   bytes; this is the de facto size that end systems have come to expect
   will either be delivered by the network without loss due to an MTU
   restriction on the path or a suitable PTB message returned.  However,
   the network may not always deliver the necessary PTBs, leading to
   MTU-related black holes [RFC2923].  The ITE therefore requires a
   means for conveying 1500 byte (or smaller) packets to the ETE without
   loss due to MTU restrictions and without dependence on PTB messages
   from within the subnetwork.

   In common deployments, there may be many forwarding hops between the
   original source and the ITE.  Within those hops, there may be
   additional encapsulations (IPSec, L2TP, other SEAL encapsulations,
   etc.) such that a 1500 byte packet sent by the original source might
   grow to a larger size by the time it reaches the ITE for
   encapsulation as an inner IP packet.  Similarly, additional
   encapsulations on the path from the ITE to the ETE could cause the
   encapsulated packet to become larger still and trigger in-the-network



Templin                 Expires December 14, 2009              [Page 11]

Internet-Draft                    SEAL                         June 2009


   fragmentation.  In order to preserve the end system expectations, the
   ITE therefore requires a means for conveying these larger packets to
   the ETE even though there may be links within the subnetwork that
   configure a smaller MTU.

   The ITE should therefore set a tunnel virtual interface MTU of 1500
   bytes plus extra room to accommodate any additional encapsulations
   that may occur on the path from the original source (i.e., even if
   the path to the ETE does not support an MTU of this size).  The ITE
   can set larger MTU values still, but should select a value that is
   not so large as to cause excessive PTBs coming from within the tunnel
   interface (see Sections 4.3.3 and 4.3.8).  The ITE can also set
   smaller MTU values; however, care must be taken not to set so small a
   value that original sources would experience an MTU underflow.  In
   particular, IPv6 sources must see a minimum path MTU of 1280 bytes,
   and IPv4 sources should see a minimum path MTU of 576 bytes.

4.3.2.  Admitting Packets into the Tunnel Interface

   The inner IP layer consults the tunnel interface MTU when admitting a
   packet into the interface.  For IPv4 packets with the IPv4 Don't
   Fragment (DF) bit set to 0, if the packet is larger than the tunnel
   interface MTU the inner IP layer uses IP fragmentation to break the
   packet into fragments no larger than the tunnel interface MTU.  The
   ITE then admits each fragment into the tunnel as an independent
   packet.

   For all other packets, the ITE admits the packet if it is no larger
   than the tunnel interface MTU; otherwise, it drops the packet and
   sends an ICMP PTB error message to the source with the MTU value set
   to the tunnel interface MTU.  The message must contain as much of the
   invoking packet as possible without the entire message exceeding the
   minimum IP MTU (i.e., 576 bytes for IPv4 and 1280 bytes for IPv6).

4.3.3.  Inner Fragmentation and Segmentation

   For each ETE, the maintains soft state within the tunnel interface
   (e.g., in a destination cache) used to support inner fragmentation
   and/or SEAL segmentation.  The soft state includes the following:

   o  a Mid-layer Header Length (MHLEN); set to the length of any mid-
      layer '*' encapsulation headers and trailers (e.g., for '*' = AH,
      ESP, NULL, etc.).

   o  an Outer Header Length (OHLEN); set to the length of the outer
      SEAL/*/IP encapsulation headers.





Templin                 Expires December 14, 2009              [Page 12]

Internet-Draft                    SEAL                         June 2009


   o  a total Header Lenght (HLEN); set to MHLEN plus OHLEN.

   o  a SEAL Maximum Reassembly Unit (S_MRU); initialized to a value no
      larger than 2KB and used to determine the maximum-sized packet the
      ITE will require the ETE to reassemble.

   o  a SEAL Maximum Segment Size (S_MSS); initialized to a value that
      is no larger than the maximum of (the underlying IPv4 interface
      MTU minus OHLEN) and S_MRU/4 bytes.  The ITE decreases or
      increases S_MSS based on any Fragmentation Report messages
      received (see Section 4.3.9).

   After an inner packet/fragment has been admitted into the tunnel
   interface the ITE first determines whether the packet can be
   accommodated and (if so) whether inner IP fragmentation is needed.
   The ITE processes each inner packet/fragment as follows:

   o  if the inner packet is the first IP fragment of a SEAL packet with
      D=1, and the packet is larger than (MAX(S_MRU, S_MSS) - HLEN), the
      ITE drops the packet and sends a SEAL Fragmentation Report message
      to the original source with an MTU value of (MAX(S_MRU, S_MSS) -
      HLEN) the same as described in Section 4.4.3; else,

   o  if the inner packet is an IPv6 packet or an IPv4 packet with DF=1,
      and the packet is larger than (MAX(S_MRU, S_MSS) - HLEN), the ITE
      drops the packet and sends an ICMP PTB message to the original
      source with an MTU value of (MAX(S_MRU, S_MSS) - HLEN) the same as
      described in Section 4.3.2; else,

   o  if the inner packet is an IPv4 packet with DF=0, and the packet is
      larger than (S_MRU - HLEN), the ITE uses inner IP fragmentation to
      break the packet into fragments no larger than (S_MRU - HLEN);
      else, no inner fragmentation is required.

   Note that this final case would constitute a second instance of inner
   packet fragmentation, which implementations may elect to combine with
   the first instance specified in Section 4.3.2 above.

   The ITE next encapsulates each inner packet/fragment in the MHLEN
   bytes of mid-layer '*' headers and trailers.  For each such resulting
   mid-layer packet of length 'M', if (S_MRU >= (M + OHLEN) > S_MSS),
   the ITE must perform SEAL segmentation.  To do so, it breaks the mid-
   layer packet into N segments (N <= 4) that are no larger than
   (MIN(1KB, S_MSS) - OHLEN) bytes each.  Each segment, except the final
   one, MUST be of equal length, while the final segment includes the
   remainder of the packet and MAY be of different length.  The first
   byte of each segment MUST begin immediately after the final byte of
   the previous segment, i.e., the segments MUST NOT overlap.  The ITE



Templin                 Expires December 14, 2009              [Page 13]

Internet-Draft                    SEAL                         June 2009


   SHOULD generate non-final segments that are as large as possible (see
   above) and SHOULD generate the smallest number of segments possible,
   e.g., it SHOULD NOT generate 4 smaller segments when the packet could
   be accommodated with 2 larger segments.

   Note that this SEAL segmentation ignores the fact that the mid-layer
   packet may be unfragmentable.  This segmentation process is a mid-
   layer (not an IP layer) operation employed by the ITE to adapt the
   mid-layer packet to the subnetwork path characteristics, and the ETE
   will restore the packet to its original form during reassembly.
   Therefore, the fact that the packet may have been segmented within
   the subnetwork is not observable outside of the subnetwork.

4.3.4.  Encapsulation

   Following SEAL segmentation, the ITE encapsulates each segment in a
   SEAL header formatted as specified in Section 4.3.2 and sets VER='00'
   and R=0.  For single-segment packets, the ITE sets (M=0; SEG=0) in
   the SEAL header; for N-segment mid-layer packets (N <= 4), the ITE
   sets (M=1; SEG=0) for the first segment, (M=1; SEG=1) for the second
   segment, etc., with the final segment setting (M=0; SEG=N-1).  If the
   inner packet (i.e., before mid-layer encapsulation and SEAL
   segmentation) was also the first IP fragment of a SEAL packet, the
   ITE copies the D value that appeared in the inner SEAL header into
   the outer SEAL header of each segment.  Otherwise, if the inner
   packet was an IPv4 packet with DF=0, the ITE sets D=0; otherwise, it
   sets D=1.  The ITE also writes the Internet Protocol number
   corresponding to the mid-layer packet in the 'Next-Header' field of
   each segment.

   The ITE next encapsulates each segment in the requisite */IPv4 outer
   headers according to the specific encapsulation format (e.g.,
   [RFC2003], [RFC4213], [RFC4380], etc.), except that it writes
   'SEAL_PROTO' in the protocol field of the outer IPv4 header (when
   simple IPv4 encapsulation is used) or writes 'SEAL_PORT' in the outer
   destination service port field (e.g., when UDP/IPv4 encapsulation is
   used).  The ITE finally sets the A bit as specified in Section 4.3.5
   (if necessary), sets the packet identification values as specified in
   Section 4.3.5 and sends the packets as specified in Section 4.3.6.

4.3.5.  Probing Strategy

   All SEAL packets sent by the ITE except those with (M=0; SEG!=0) are
   used as implicit probes, and will elicit a Fragmentation Report from
   an ETE/ITE if an MTU restriction is encountered.

   The ITE should additionally send explicit probes, periodically, to
   ping the ETE and to manage a window of SEAL_IDs of outstanding



Templin                 Expires December 14, 2009              [Page 14]

Internet-Draft                    SEAL                         June 2009


   probes.  The ITE sets A=1 in the SEAL header of a packet to be used
   as an explicit probe, where the probe can be either an ordinary data
   packet or a NULL packet created by setting the 'Next Header' field in
   the SEAL header to a value of "No Next Header" (see Section 4.7 of
   [RFC2460]).

   The ITE should further send probes, periodically, to detect S_MSS
   increases by resetting S_MSS to a larger value (e.g., the underlying
   IPv4 interface MTU minus OHLEN bytes), and/or by sending explicit
   probes that are larger than the current S_MSS.

   Finally, the ITE MAY send "expendable" probe packets with DF=1 in the
   outer IPv4 header (see Section 4.3.6) in order to generate ICMPv4
   Fragmentation Needed messages from routers on the path to the ETE.

4.3.6.  Packet Identification

   For the purpose of packet identification, the ITE maintains a SEAL_ID
   value as per-ETE soft state, e.g., in the IPv4 destination cache.
   The ITE randomly initializes SEAL_ID when the soft state is created
   and monotonically increments it for each successive SEAL protocol
   packet it sends to the ETE.  For each packet, the ITE writes the
   least-significant 16 bits of the SEAL_ID value in the Identification
   field in the outer IPv4 header, and writes the most-significant 16
   bits in the ID Extension field in the SEAL header.

   For SEAL encapsulations specifically designed for the traversal of
   IPv4 Network Address Translators (NATs) and other middleboxes that
   may rewrite the outer IPv4 ID field, the ITE instead writes SEAL_ID
   in the ID field of the SEAL header and writes a random 16-bit value
   in the Identification field in the outer IPv4 header.

4.3.7.  Sending SEAL Protocol Packets

   Following SEAL segmentation and encapsulation, the ITE sets DF=0 in
   the outer IPv4 header of every SEAL packet it sends.  For
   "expendable" packets (e.g., for NULL packets used as probes -- see
   Section 4.3.4), the ITE may instead set DF=1.

   The ITE then sends each outer packet that encapsulates a segment of
   the same mid-layer packet into the tunnel in canonical order, i.e.,
   segment 0 first, followed by segment 1, etc. and finally segment N-1.

4.3.8.  Processing Raw ICMPv4 Messages

   The ITE may receive "raw" ICMPv4 error messages from either the ETE
   or routers within the subnetwork that comprise an outer IPv4 header,
   followed by an ICMPv4 header, followed by a portion of the SEAL



Templin                 Expires December 14, 2009              [Page 15]

Internet-Draft                    SEAL                         June 2009


   packet that generated the error (also known as the "packet-in-
   error").  For such messages, the ITE can use the SEAL ID encoded in
   the packet-in-error as a nonce to confirm that the ICMP message came
   from either the ETE or an on-path router.  The ITE MAY process raw
   ICMPv4 messages as soft errors indicating that the path to the ETE
   may be failing.

   The ITE should specifically process raw ICMPv4 Protocol Unreachable
   messages as a hint that the ETE does not implement the SEAL protocol.

4.3.9.  Processing SEAL Errors

   In addition to any raw ICMPv4 messages, the ITE may receive SEAL
   error messages from either the ETE or an intermediate ITE on the path
   to the ETE with 'SEAL_PORT' as the UDP destination port.  The ITE
   must therefore monitor the 'SEAL_PORT' UDP port and process any
   messages that arrive on that port.  Each SEAL error message is
   formatted as specified in Section 4.4.6.

   For each error message, the ITE can use the SEAL_ID as well as
   addresses, etc. encoded in the packet-in-error as nonces to confirm
   that the message came from a legitimate on-path source.  The ITE can
   then verify that the SEAL_ID encoded in the packet-in-error is within
   the current window of transmitted SEAL_IDs for this ETE.  If the
   SEAL_ID is outside of the window, the ITE discards the message;
   otherwise, it advances the window and processes the message.

   The ITE processes SEAL error messages other than IPv4 Fragmentation
   Reports according to [RFC0792] and [RFC4443].  (Processing
   considerations for additional error types may be specified in a
   future document.)

   For IPv4 Fragmentation Report messages, the ITE sets 'L' to the value
   encoded in the MTU field minus OHLEN.  If (L > S_MSS), or if the
   packet-in-error is an IPv4 first-fragment (i.e., with MF=1; Offset=0)
   and (L >= (576 - OHLEN)), the ITE sets (S_MSS = L).

   Note that 576 in the above corresponds to the nominal minimum MTU for
   IPv4 links.  When an ITE instead receives an IPv4 first-fragment
   packet-in-error with (L < (576 - OHLEN)), it discovers that IPv4
   fragmentation is occurring in the network but it cannot determine the
   true MTU of the restricting link due to a router on the path
   generating runt first-fragments.  The ITE should therefore search for
   a reduced S_MSS value through an iterative searching strategy that
   parallels (Section 5 of [RFC1191]).

   This searching strategy may require multiple iterations of sending
   SEAL packets using a reduced S_MSS and receiving additional



Templin                 Expires December 14, 2009              [Page 16]

Internet-Draft                    SEAL                         June 2009


   Fragmentation Report messages, but it will soon converge to a stable
   value.  During this process, it is essential that the ITE reduce
   S_MSS based on the first Fragmentation Report message received, and
   refrain from further reducing S_MSS until Fragmentation Report
   messages pertaining to packets sent under the new S_MSS are received.

4.4.  ETE Specification

4.4.1.  Reassembly Buffer Requirements

   ETEs must be capable of performing IPv4-layer reassembly for SEAL
   protocol outer IPv4 packets up to 2KB in length, and must also be
   capable of performing SEAL-layer reassembly for mid-layer packets up
   to (2KB - OHLEN).

   Note that the ETE must retain the SEAL/*/IPv4 header during both
   IPv4-layer and SEAL-layer reassembly for the purpose of associating
   the fragments/segments of the same packet.

4.4.2.  IPv4-Layer Reassembly

   ETEs perform IPv4 reassembly as normal, and should maintain a
   conservative high- and low-water mark for the number of outstanding
   reassemblies pending for each ITE.  When the size of the reassembly
   buffer exceeds this high-water mark, the ETE actively discards
   incomplete reassemblies (e.g., using an Active Queue Management (AQM)
   strategy) until the size falls below the low-water mark.  The ETE
   should also use a reduced IPv4 maximum segment lifetime value (e.g.,
   15 seconds) as the time after which it will discard an incomplete
   IPv4 reassembly for a SEAL protocol packet.  Finally, the ETE should
   also actively discard any pending reassemblies that clearly have no
   opportunity for completion, e.g., when a considerable number of new
   IPv4 fragments have been received before a fragment that completes a
   pending reassembly has arrived.

   After reassembly, the ETE either accepts or discards the reassembled
   packet based on the current status of the IPv4 reassembly cache
   (congested versus uncongested).  The SEAL_ID included in the IPv4
   first-fragment provides an additional level of reassembly assurance,
   since it can record a distinct arrival timestamp useful for
   associating the first-fragment with its corresponding non-initial
   fragments.  The choice of accepting/discarding a reassembly may also
   depend on the strength of the upper-layer integrity check if known
   (e.g., IPSec/ESP provides a strong upper-layer integrity check)
   and/or the corruption tolerance of the data (e.g., multicast
   streaming audio/video may be more corruption-tolerant than file
   transfer, etc.).  In the limiting case, the ETE may choose to discard
   all IPv4 reassemblies and process only the IPv4 first-fragment for



Templin                 Expires December 14, 2009              [Page 17]

Internet-Draft                    SEAL                         June 2009


   SEAL-encapsulated error generation purposes (see the following
   sections).

4.4.3.  Sending SEAL Fragmentation Reports

   When the ETE processes the IP first-fragment (i.e, one with MF=1 and
   Offset=0 in the IP header) of a fragmented SEAL packet that does not
   have (M=0; SEG!=0), it sends a Fragmentation Report message back to
   the ITE with the MTU field set to the length of the first-fragment.
   When an intermediate ITE on the path to the ETE is unable to
   accommodate a SEAL packet with D=1 (see Section 4.3.3), it drops the
   packet and also sends a Fragmentation Report back to the original
   ITE.

   Additionally, when the ETE processes a SEAL protocol packet with A=1
   in the SEAL header following IP reassembly, it sends a Fragmentation
   Report message back to the ITE with the MTU value set to the IP
   length of the packet.  Note therefore that when A=1, and IP
   reassembly was required, the ETE only sends a single Fragmentation
   Report message, i.e., it does not send two separate messages (one for
   the first-fragment and a second for the reassembled whole SEAL
   packet).

   The Fragmentation Report message is formatted as either an ICMPv4
   Fragmentation Needed or an ICMPv6 Packet Too Big message, as
   specified in Section 4.4.6.

4.4.4.  SEAL-Layer Reassembly

   Following IP reassembly of a SEAL packet with VER set to an
   unrecognized value or with R=1, the ETE generates an Parameter
   Problem message (with pointer set to the flags field in the SEAL
   header) as specified in Section 4.4.6, and discards the packet
   following SEAL reassembly.  For all other SEAL packets, the ETE adds
   the packet to a SEAL-Layer pending-reassembly queue.

   The ETE performs SEAL-layer reassembly through simple in-order
   concatenation of the encapsulated segments from N consecutive SEAL
   protocol packets from the same mid-layer packet.  SEAL-layer
   reassembly requires the ETE to maintain a cache of recently received
   segments for a hold time that would allow for reasonable inter-
   segment delays.  The ETE uses a SEAL maximum segment lifetime of 15
   seconds for this purpose, i.e., the time after which it will discard
   an incomplete reassembly.  However, the ETE should also actively
   discard any pending reassemblies that clearly have no opportunity for
   completion, e.g., when a considerable number of new SEAL packets have
   been received before a packet that completes a pending reassembly has
   arrived.



Templin                 Expires December 14, 2009              [Page 18]

Internet-Draft                    SEAL                         June 2009


   The ETE reassembles the mid-layer packet segments in SEAL protocol
   packets that contain segment numbers 0 through N-1, with M=1/0 in
   non-final/final segments, respectively, and with consecutive SEAL_ID
   values.  That is, for an N-segment mid-layer packet, reassembly
   entails the concatenation of the SEAL-encapsulated segments with
   (SEG=0, SEAL_ID=i), followed by (SEG=1, SEAL_ID=((i + 1) mod 2^32)),
   etc. up to (SEG=(N-1), SEAL_ID=((i + N-1) mod 2^32)).  (For SEAL
   encapsulations that use only an M-bit SEAL_ID value, the ETE instead
   uses mod 2^M arithmetic to associate the segments of the same
   packet.)

4.4.5.  Decapsulation and Delivery to Upper Layers

   Following SEAL-layer reassembly, the ETE silently discards the
   reassembled packet if it was a NULL packet (see Section 4.3.4).  In
   the same manner, the ETE silently discards any (reassembled) mid-
   layer packet larger than (2KB - OHLEN) that either experienced IPv4
   fragmentation or did not arrive as a single SEAL segment.

   Next, the ETE begins the decapsulation process.  During this process,
   if the ETE determines that the inner packet would cause an error
   message to be generated it prepares an error message sends it back to
   the ITE as specified in Section 4.4.6.  The ETE then either accepts
   or drops the packet according to the type of error.

   Note that errors can occur through any stage of inner packet
   decapsulation, i.e., before, during or after decapsulation.  For
   example, if IPv4 and IPv6 are used as the outer and inner IP
   protocols, respectively, the ETE may generate ICMPv4-formatted error
   messages before and during decapsulation, and it may generate ICMPv6-
   formatted error messages during and after decapsulation.  This can be
   understood as a continuum along which the ETE transforms an IPv4
   packet into an IPv6 packet, where the ETE must generate an error
   message that is appropriate for the particular point in the continuum
   at which the error occurs.

   In all cases, the packet-in-error includes all IP/*/SEAL/*IPv4
   headers, i.e., even if the error occurred at the very last stage of
   decapsulation.

   Finally, if the packet is accepted, the ETE discards the outer
   */SEAL/*/IPv4 headers and delivers the inner packet to the upper-
   layer protocol indicated in the SEAL Next Header field.

4.4.6.  Generating SEAL Error Messages

   The ETE or intermediate ITE reporting the error prepares the message
   as shown in Figure 3:



Templin                 Expires December 14, 2009              [Page 19]

Internet-Draft                    SEAL                         June 2009


   +-------------------------+ -
   |                         |   \
   ~    Outer UDP/IP hdrs    ~   |
   |   (dport='SEAL_PORT')   |   |
   +--------+----------------+   |
   | Nxthdr |    Reserved    |   |
   +--------+----------------+   |
   |        ICMP Header      |   |
   +-------------------------+    > Up to 576 bytes for IPv4,
   |                         |    >  or 1280 bytes for IPv6
   ~     IP/*/SEAL/*/IP      ~   |
   ~ hdrs of packet/fragment ~   |
   |                         |   |
   +-------------------------+   |
   |                         |   |
   ~ Data of packet/fragment ~   |
   |                         |   /
   +-------------------------+ -

                    Figure 3: SEAL Error Message Format

   The error message consists of outer UDP/IP headers followed by a 32
   bit shim header.  The shim header includes an 8-bit "Next Header"
   field in bits 0 thru 7 and a 24-bit Reserved field in bits 8 thru 31.
   The shim header is followed by the body of an ICMP error message
   formatted exactly as specified for ICMPv4 [RFC0792] or [RFC4443].

   The ETE/ITE reporting the error sets the outer IP destination and
   source addresses of the error message to the source and destination
   addresses (respectively) of the SEAL packet.  If the destination
   address in the SEAL packet was multicast, the ETE/ITE instead sets
   the outer IP source address to an address assigned to the underlying
   IP interface.

   The ETE/ITE next sets the UDP destination port to 'SEAL_PORT'' and
   sets the UDP source port to a constant value of its choosing.  It
   then sets the "Next Header" field to the IP protocol type of the
   header that follows (e.g., to the value '1' for an ICMPv4 message,
   the value '58' for an ICMPv6 message, etc.) and sets the Reserved
   field to 0.  Associated tunneling mechanisms may instead set the
   Next-Header field to a different value (e.g., '59' for No-Next-
   Header) and define their own protocol specific coding in the Reserved
   field.

   The shim header is followed by an ICMP header of the correct IP
   protocol version and with fields filled out as specified in [RFC0792]
   or [RFC4443].  The ICMP header is followed by as much of the invoking
   packet as possible without the entire message exceeding the minimum



Templin                 Expires December 14, 2009              [Page 20]

Internet-Draft                    SEAL                         June 2009


   IP MTU (i.e., 576 bytes for IPv4 and 1280 bytes for IPv6) .

   The ETE/ITE finally sends the error message to the original ITE.
   When the A bit in the packet/fragment is not set, the message is sent
   subject to rate limiting.


5.  SEAL Protocol Specification (Version 1)

   This section specifies a minimal version of SEAL known as "SEAL
   Version 1", or "SEAL-lite".  SEAL-lite observes the same protocol
   specifications as for Classical SEAL (see Section 4) with the
   exception that the ITE/ETE do not perform segmentation and
   reassembly.  In particular, the ETE unilaterally drops any SEAL-lite
   packets that arrive as multiple IPv4 fragments and/or multiple SEAL
   segments.

   SEAL-lite can be considered for use by associated tunneling protocol
   specifications when it highly unlikely that "marginal" links will
   occur in any path, e.g., when it is known that the vast majority of
   links configure MTUs that are appreciably larger than 1500 bytes.
   SEAL-lite can also be used in instances when it is acceptable for the
   ITE to return ICMP PTB messages for packet sizes smaller than 1500
   bytes.  Finally, the use of SEAL-lite requires that the associated
   tunneling protocol specification either defines a next header field
   or ensures that the data immediately following the SEAL header is an
   IP header (i.e., either IPv4 or IPv6).  The use of SEAL-lite must
   therefore be carefully examined in relation to the particular use
   case.

   With respect to Section 4, the SEAL-lite protocol corresponds to
   Classical SEAL as follows:

5.1.  Model of Operation

   SEAL-lite follows the same model of operation as for Classical SEAL
   as described in Section 4.1 except as noted in the following
   sections.

5.2.  SEAL Header Format (Version 1)

   The SEAL-lite header is formatted as follows:









Templin                 Expires December 14, 2009              [Page 21]

Internet-Draft                    SEAL                         June 2009


       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |VER|A|D|        Reserved       /         Identification        |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                  Figure 4: SEAL Version 1 Header Format

   where the header fields are defined as:

   VER (2)
      a 2-bit value that encodes the SEAL protocol version number.  This
      section describes Version 1 of the SEAL protocol, i.e., the VER
      field encodes the value '01'.

   A (1)
      the "Acknowledgement Requested" bit.  Set to 1 if the ITE wishes
      to receive an explicit acknowledgement from the ETE.

   D (1)
      the "Don't Fragment" bit.  Set to 1 if the inner packet is an IPv6
      packet, an IPv4 packet with DF=1, or a SEAL packet with D=1.  Set
      to 0 otherwise.

   Reserved (12 or fewer)
      a reserved field; used in a manner defined in the associated
      tunneling protocol specification.

   Identification (16 or more)
      an identification field; used either as an extension to the IPv4
      ID field or as an independent Identification field as defined in
      the associated tunneling protocol specification.

5.3.  ITE Specification

5.3.1.  Tunnel Interface MTU

   SEAL-lite observes the Classical SEAL specification found in Section
   4.3.1.

5.3.2.  Admitting Packets into the Tunnel Interface

   SEAL-lite observes the Classical SEAL specification found in Section
   4.3.2.







Templin                 Expires December 14, 2009              [Page 22]

Internet-Draft                    SEAL                         June 2009


5.3.3.  Inner Fragmentation and Segmentation

   SEAL-lite observes the Classical SEAL specification found in Section
   4.3.3, except that S_MRU is set to 0.  The ITE must therefore break
   inner IP packets that are to undergo inner fragmentation into
   fragments that are no larger than would both provide a reasonably-
   large fragment size 'S' and avoid further fragmentation in the
   network.  In that case, it is recommended that the ITE select an
   initial value for S between 1280 and (1500 - HLEN) unless it is known
   that all links in the path to the ETE configure an MTU that is
   significantly larger than this.

5.3.4.  Encapsulation

   SEAL-lite observes the Classical SEAL specification found in Section
   4.3.4, except that it uses the header format defined in this section
   and with the VER field set to '01'.  SEAL-lite further uses the A and
   D bits the same as specified for Classical SEAL, but the Reserved and
   Identification fields are used in the manner specified by the
   associated tunneling protocol.

5.3.5.  Probing Strategy

   SEAL-lite observes the Classical SEAL specification found in Section
   4.3.5.

5.3.6.  Packet Identification

   SEAL-lite observes the Classical SEAL soft state specifications found
   in Section 4.3.6, but configures and sets the Identification field in
   a manner specified by the associated tunneling protocol.

   As for the Classical SEAL specification in Section 4.3.6, SEAL-lite
   increments the Identification field modulo the field length for each
   consecutive SEAL packet.

5.3.7.  Sending SEAL Protocol Packets

   SEAL-lite observes the Classical SEAL specification found in Section
   4.3.7.

5.3.8.  Processing Raw ICMPv4 Messages

   SEAL-lite observes the Classical SEAL specification found in Section
   4.3.8.






Templin                 Expires December 14, 2009              [Page 23]

Internet-Draft                    SEAL                         June 2009


5.3.9.  Processing SEAL Errors

   SEAL-lite observes the Classical SEAL specification found in Section
   4.3.9.

5.4.  ETE Specification

5.4.1.  Reassembly Buffer Requirements

   SEAL-lite *does not* observe the Classical SEAL specification found
   in Section 4.4.1, i.e., it does not maintain a reassembly buffer for
   SEAL reassembly.

5.4.2.  IP-Layer Reassembly

   SEAL-lite uses SEAL-protocol IP first-fragments solely for the
   purpose of generating fragmentation reports as specified in Section
   4.4.2, but thereafter discards all SEAL-protocol IP fragments.

5.4.3.  Sending SEAL Fragmentation Reports

   SEAL-lite observes the Classical SEAL specification found in Section
   4.4.3.

5.4.4.  SEAL-Layer Reassembly

   SEAL-lite observes the Classical SEAL error checking procedures in
   Section 4.4.4, i.e., SEAL-lite returns a Parameter Problem for SEAL
   packets with an unrecognized VER value.

   SEAL-lite *does not* observe the Classical SEAL reassembly procedures
   in Section 4.4.4; Instead, SEAL-lite discards all SEAL packets with
   (M!=0 || SEG!=0) following IP layer reassembly.

5.4.5.  Decapsulation and Delivery to Upper Layers

   SEAL-lite observes the Classical SEAL specification found in Section
   4.4.5.

5.4.6.  Sending SEAL Error Messages

   SEAL-lite observes the Classical SEAL specification found in Section
   4.4.6.


6.  Link Requirements

   Subnetwork designers are expected to follow the recommendations in



Templin                 Expires December 14, 2009              [Page 24]

Internet-Draft                    SEAL                         June 2009


   Section 2 of [RFC3819] when configuring link MTUs.


7.  End System Requirements

   SEAL provides robust mechanisms for returning PTB messages; however,
   end systems that send unfragmentable IP packets larger than 1500
   bytes are strongly encouraged to use Packetization Layer Path MTU
   Discovery per [RFC4821].


8.  Router Requirements

   IPv4 routers within the subnetwork are strongly encouraged to
   implement IPv4 fragmentation such that the first-fragment is the
   largest and approximately the size of the underlying link MTU, i.e.,
   they should avoid generating runt first-fragments.


9.  IANA Considerations

   The IANA is instructed to allocate an IP protocol number for
   'SEAL_PROTO' in the 'protocol-numbers' registry.

   The IANA is instructed to allocate a Well-Known Port number for
   'SEAL_PORT' in the 'port-numbers' registry.


10.  Security Considerations

   Unlike IPv4 fragmentation, overlapping fragment attacks are not
   possible due to the requirement that SEAL segments be non-
   overlapping.

   An amplification/reflection attack is possible when an attacker sends
   IPv4 first-fragments with spoofed source addresses to an ETE,
   resulting in a stream of ICMPv4 Fragmentation Needed messages
   returned to a victim ITE.  The encapsulated segment of the spoofed
   IPv4 first-fragment provides mitigation for the ITE to detect and
   discard spurious ICMPv4 Fragmentation Needed messages.

   The SEAL header is sent in-the-clear (outside of any IPsec/ESP
   encapsulations) the same as for the outer */IPv4 headers.  As for
   IPv6 extension headers, the SEAL header is protected only by L2
   integrity checks and is not covered under any L3 integrity checks.






Templin                 Expires December 14, 2009              [Page 25]

Internet-Draft                    SEAL                         June 2009


11.  Related Work

   Section 3.1.7 of [RFC2764] provides a high-level sketch for
   supporting large tunnel MTUs via a tunnel-level segmentation and
   reassembly capability to avoid IP level fragmentation, which is in
   part the same approach used by tunnel-mode SEAL.  SEAL could
   therefore be considered as a fully functioned manifestation of the
   method postulated by that informational reference.

   Section 3 of [RFC4459] describes inner and outer fragmentation at the
   tunnel endpoints as alternatives for accommodating the tunnel MTU;
   however, the SEAL protocol specifies a mid-layer segmentation and
   reassembly capability that is distinct from both inner and outer
   fragmentation.

   Section 4 of [RFC2460] specifies a method for inserting and
   processing extension headers between the base IPv6 header and
   transport layer protocol data.  The SEAL header is inserted and
   processed in exactly the same manner.

   The concepts of path MTU determination through the report of
   fragmentation and extending the IP Identification field were first
   proposed in deliberations of the TCP-IP mailing list and the Path MTU
   Discovery Working Group (MTUDWG) during the late 1980's and early
   1990's.  SEAL supports a report fragmentation capability using bits
   in an extension header (the original proposal used a spare bit in the
   IP header) and supports ID extension through a 16-bit field in an
   extension header (the original proposal used a new IP option).  A
   historical analysis of the evolution of these concepts, as well as
   the development of the eventual path MTU discovery mechanism for IP,
   appears in Appendix A of this document.


12.  SEAL Advantages over Classical Methods

   The SEAL approach offers a number of distinct advantages over the
   classical path MTU discovery methods [RFC1191] [RFC1981]:

   1.  Classical path MTU discovery *always* results in packet loss when
       an MTU restriction is encountered.  Using SEAL, IPv4
       fragmentation provides a short-term interim mechanism for
       ensuring that packets are delivered while SEAL adjusts its packet
       sizing parameters.

   2.  Classical path MTU discovery requires that routers generate an
       ICMP PTB message for *all* packets lost due to an MTU
       restriction; this situation is exacerbated at high data rates and
       becomes severe for in-the-network tunnels that service many



Templin                 Expires December 14, 2009              [Page 26]

Internet-Draft                    SEAL                         June 2009


       communicating end systems.  Since SEAL ensures that packets no
       larger than S_MRU are delivered, however, it is sufficient for
       the ETE to return ICMP PTB messages subject to rate limiting and
       not for every packet-in-error.

   3.  Classical path MTU may require several iterations of dropping
       packets and returning ICMP PTB messages until an acceptable path
       MTU value is determined.  Under normal circumstances, SEAL
       determines the correct packet sizing parameters in a single
       iteration.

   4.  Using SEAL, ordinary packets serve as implicit probes without
       exposing data to unnecessary loss.  SEAL also provides an
       explicit probing mode not available in the classic methods.

   5.  Using SEAL, ETEs encapsulate ICMP error messages in an outer
       UDP/IP header such that packet-filtering network middleboxes will
       not filter them the same as for"raw" ICMP messages that may be
       generated by an attacker.

   6.  Most importantly, all SEAL packets have a 32-bit Identification
       value that can be used for duplicate packet detection purposes
       and to match ICMP error messages with actual packets sent without
       requiring per-packet state; hence, certain denial-of-service
       attack vectors open to the classical methods are eliminated.

   In summary, the SEAL approach represents an architecturally superior
   method for ensuring that packets of various sizes are either
   delivered or deterministically dropped.  When end systems use their
   own end-to-end MTU determination mechanisms [RFC4821], the SEAL
   advantages are further enhanced.


13.  Acknowledgments

   The following individuals are acknowledged for helpful comments and
   suggestions: Jari Arkko, Fred Baker, Iljitsch van Beijnum, Oliver
   Bonaventure, Teco Boot, Bob Braden, Brian Carpenter, Steve Casner,
   Ian Chakeres, Noel Chiappa, Remi Denis-Courmont, Aurnaud Ebalard,
   Gorry Fairhurst, DIno Farinacci, Joel Halpern, Sam Hartman, John
   Heffner, Thomas Henderson, Bob Hinden, Christian Huitema, Darrel
   Lewis, Joe Macker, Matt Mathis, Erik Nordmark, Dan Romascanu, Dave
   Thaler, Joe Touch, Margaret Wasserman, Magnus Westerlund, Robin
   Whittle, James Woodyatt, and members of the Boeing Research &
   Technology NST DC&NT group.

   Path MTU determination through the report of fragmentation was first
   proposed by Charles Lynn on the TCP-IP mailing list in 1987.



Templin                 Expires December 14, 2009              [Page 27]

Internet-Draft                    SEAL                         June 2009


   Extending the IP identification field was first proposed by Steve
   Deering on the MTUDWG mailing list in 1989.


14.  References

14.1.  Normative References

   [RFC0791]  Postel, J., "Internet Protocol", STD 5, RFC 791,
              September 1981.

   [RFC0792]  Postel, J., "Internet Control Message Protocol", STD 5,
              RFC 792, September 1981.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2460]  Deering, S. and R. Hinden, "Internet Protocol, Version 6
              (IPv6) Specification", RFC 2460, December 1998.

   [RFC4443]  Conta, A., Deering, S., and M. Gupta, "Internet Control
              Message Protocol (ICMPv6) for the Internet Protocol
              Version 6 (IPv6) Specification", RFC 4443, March 2006.

14.2.  Informative References

   [FOLK]     C, C., D, D., and k. k, "Beyond Folklore: Observations on
              Fragmented Traffic", December 2002.

   [FRAG]     Kent, C. and J. Mogul, "Fragmentation Considered Harmful",
              October 1987.

   [I-D.ietf-lisp]
              Farinacci, D., Fuller, V., Meyer, D., and D. Lewis,
              "Locator/ID Separation Protocol (LISP)",
              draft-ietf-lisp-01 (work in progress), May 2009.

   [I-D.russert-rangers]
              Russert, S., Fleischman, E., and F. Templin, "RANGER
              Scenarios", draft-russert-rangers-00 (work in progress),
              May 2009.

   [I-D.templin-autoconf-dhcp]
              Templin, F., "Virtual Enterprise Traversal (VET)",
              draft-templin-autoconf-dhcp-38 (work in progress),
              April 2009.

   [I-D.templin-ranger]



Templin                 Expires December 14, 2009              [Page 28]

Internet-Draft                    SEAL                         June 2009


              Templin, F., "Routing and Addressing in Next-Generation
              EnteRprises (RANGER)", draft-templin-ranger-07 (work in
              progress), February 2009.

   [MTUDWG]   "IETF MTU Discovery Working Group mailing list,
              gatekeeper.dec.com/pub/DEC/WRL/mogul/mtudwg-log, November
              1989 - February 1995.".

   [RFC1063]  Mogul, J., Kent, C., Partridge, C., and K. McCloghrie, "IP
              MTU discovery options", RFC 1063, July 1988.

   [RFC1191]  Mogul, J. and S. Deering, "Path MTU discovery", RFC 1191,
              November 1990.

   [RFC1981]  McCann, J., Deering, S., and J. Mogul, "Path MTU Discovery
              for IP version 6", RFC 1981, August 1996.

   [RFC2003]  Perkins, C., "IP Encapsulation within IP", RFC 2003,
              October 1996.

   [RFC2004]  Perkins, C., "Minimal Encapsulation within IP", RFC 2004,
              October 1996.

   [RFC2764]  Gleeson, B., Heinanen, J., Lin, A., Armitage, G., and A.
              Malis, "A Framework for IP Based Virtual Private
              Networks", RFC 2764, February 2000.

   [RFC2923]  Lahey, K., "TCP Problems with Path MTU Discovery",
              RFC 2923, September 2000.

   [RFC3366]  Fairhurst, G. and L. Wood, "Advice to link designers on
              link Automatic Repeat reQuest (ARQ)", BCP 62, RFC 3366,
              August 2002.

   [RFC3692]  Narten, T., "Assigning Experimental and Testing Numbers
              Considered Useful", BCP 82, RFC 3692, January 2004.

   [RFC3819]  Karn, P., Bormann, C., Fairhurst, G., Grossman, D.,
              Ludwig, R., Mahdavi, J., Montenegro, G., Touch, J., and L.
              Wood, "Advice for Internet Subnetwork Designers", BCP 89,
              RFC 3819, July 2004.

   [RFC4213]  Nordmark, E. and R. Gilligan, "Basic Transition Mechanisms
              for IPv6 Hosts and Routers", RFC 4213, October 2005.

   [RFC4301]  Kent, S. and K. Seo, "Security Architecture for the
              Internet Protocol", RFC 4301, December 2005.




Templin                 Expires December 14, 2009              [Page 29]

Internet-Draft                    SEAL                         June 2009


   [RFC4380]  Huitema, C., "Teredo: Tunneling IPv6 over UDP through
              Network Address Translations (NATs)", RFC 4380,
              February 2006.

   [RFC4459]  Savola, P., "MTU and Fragmentation Issues with In-the-
              Network Tunneling", RFC 4459, April 2006.

   [RFC4727]  Fenner, B., "Experimental Values In IPv4, IPv6, ICMPv4,
              ICMPv6, UDP, and TCP Headers", RFC 4727, November 2006.

   [RFC4821]  Mathis, M. and J. Heffner, "Packetization Layer Path MTU
              Discovery", RFC 4821, March 2007.

   [RFC4963]  Heffner, J., Mathis, M., and B. Chandler, "IPv4 Reassembly
              Errors at High Data Rates", RFC 4963, July 2007.

   [TCP-IP]   "Archive/Hypermail of Early TCP-IP Mail List,
              http://www-mice.cs.ucl.ac.uk/multimedia/misc/tcp_ip/, May
              1987 - May 1990.".


Appendix A.  Reliability Extensions

   Future updates to this specification will examine improved
   reliability in the face of loss due to congestion, signal
   intermittence, etc.  Automatic Repeat-ReQuest (ARQ) mechanisms are
   used to ensure reliable delivery between the endpoints of links
   [RFC3366] (e.g., on-link neighbors in an IEEE 802.11 network) as well
   as between the endpoints of an end-to-end transport (e.g., the
   endpoints of a TCP connection).  However, ARQ mechanisms may not be
   ideally sutiable for all SEAL use cases, since retransmission of lost
   segments may require considerable state maintenance at the ITE and
   would result in considerable delay variance and packet reordering
   within the subnetwork.

   Alternate reliability mechanisms such as Forward Error Correction
   (FEC) may also be examined in future updates to this specification
   for the purpose of improved reliability.  Such mechanisms may entail
   the ITE performing proactive transmissions of redundant data, e.g.,
   by sending multiple copies of the same data.  Signaling from the ETE
   (e.g., by sending Source Quench messages) may also be considered as a
   means for the ETE to dynamically inform the ITE of changing FEC
   conditions.


Appendix B.  Transport Mode

   SEAL can also be used in "transport-mode", e.g., when the inner layer



Templin                 Expires December 14, 2009              [Page 30]

Internet-Draft                    SEAL                         June 2009


   includes upper-layer protocol data rather than an encapsulated IP
   packet.  For instance, TCP peers can negotiate the use of SEAL for
   the carriage of protocol data encapsulated as TCP/SEAL/IPv4.  In this
   sense, the "subnetwork" becomes the entire end-to-end path between
   the TCP peers and may potentially span the entire Internet.

   Sections 4 and 5 specify the operation of SEAL in "tunnel mode",
   i.e., when there are both an inner and outer IP layer with a SEAL
   encapsulation layer between.  However, the SEAL protocol can also be
   used in a "transport mode" of operation within a subnetwork region in
   which the inner-layer corresponds to a transport layer protocol
   (e.g., UDP, TCP, etc.) instead of an inner IP layer.

   For example, two TCP endpoints connected to the same subnetwork
   region can negotiate the use of transport-mode SEAL for a connection
   by inserting a 'SEAL_OPTION' TCP option during the connection
   establishment phase.  If both TCPs agree on the use of SEAL, their
   protocol messages will be carried as TCP/SEAL/IPv4 and the connection
   will be serviced by the SEAL protocol using TCP (instead of an
   encapsulating tunnel endpoint) as the transport layer protocol.  The
   SEAL protocol for transport mode otherwise observes the same
   specifications as for Sections 4 and 5.


Appendix C.  Historic Evolution of PMTUD

   (Taken from "Neighbor Affiliation Protocol for IPv6-over-(foo)-over-
   IPv4"; written 10/30/2002):

   The topic of Path MTU discovery (PMTUD) saw a flurry of discussion
   and numerous proposals in the late 1980's through early 1990.  The
   initial problem was posed by Art Berggreen on May 22, 1987 in a
   message to the TCP-IP discussion group [TCP-IP].  The discussion that
   followed provided significant reference material for [FRAG].  An IETF
   Path MTU Discovery Working Group [MTUDWG] was formed in late 1989
   with charter to produce an RFC.  Several variations on a very few
   basic proposals were entertained, including:

   1.  Routers record the PMTUD estimate in ICMP-like path probe
       messages (proposed in [FRAG] and later [RFC1063])

   2.  The destination reports any fragmentation that occurs for packets
       received with the "RF" (Report Fragmentation) bit set (Steve
       Deering's 1989 adaptation of Charles Lynn's Nov. 1987 proposal)

   3.  A hybrid combination of 1) and Charles Lynn's Nov. 1987 (straw
       RFC draft by McCloughrie, Fox and Mogul on Jan 12, 1990)




Templin                 Expires December 14, 2009              [Page 31]

Internet-Draft                    SEAL                         June 2009


   4.  Combination of the Lynn proposal with TCP (Fred Bohle, Jan 30,
       1990)

   5.  Fragmentation avoidance by setting "IP_DF" flag on all packets
       and retransmitting if ICMPv4 "fragmentation needed" messages
       occur (Geof Cooper's 1987 proposal; later adapted into [RFC1191]
       by Mogul and Deering).

   Option 1) seemed attractive to the group at the time, since it was
   believed that routers would migrate more quickly than hosts.  Option
   2) was a strong contender, but repeated attempts to secure an "RF"
   bit in the IPv4 header from the IESG failed and the proponents became
   discouraged. 3) was abandoned because it was perceived as too
   complicated, and 4) never received any apparent serious
   consideration.  Proposal 5) was a late entry into the discussion from
   Steve Deering on Feb. 24th, 1990.  The discussion group soon
   thereafter seemingly lost track of all other proposals and adopted
   5), which eventually evolved into [RFC1191] and later [RFC1981].

   In retrospect, the "RF" bit postulated in 2) is not needed if a
   "contract" is first established between the peers, as in proposal 4)
   and a message to the MTUDWG mailing list from jrd@PTT.LCS.MIT.EDU on
   Feb 19. 1990.  These proposals saw little discussion or rebuttal, and
   were dismissed based on the following the assertions:

   o  routers upgrade their software faster than hosts

   o  PCs could not reassemble fragmented packets

   o  Proteon and Wellfleet routers did not reproduce the "RF" bit
      properly in fragmented packets

   o  Ethernet-FDDI bridges would need to perform fragmentation (i.e.,
      "translucent" not "transparent" bridging)

   o  the 16-bit IP_ID field could wrap around and disrupt reassembly at
      high packet arrival rates

   The first four assertions, although perhaps valid at the time, have
   been overcome by historical events.  The final assertion is addressed
   by the mechanisms specified in SEAL.










Templin                 Expires December 14, 2009              [Page 32]

Internet-Draft                    SEAL                         June 2009


Author's Address

   Fred L. Templin (editor)
   Boeing Research & Technology
   P.O. Box 3707
   Seattle, WA  98124
   USA

   Email: fltemplin@acm.org










































Templin                 Expires December 14, 2009              [Page 33]


