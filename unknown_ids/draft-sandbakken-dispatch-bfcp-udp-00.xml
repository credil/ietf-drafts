<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<rfc 
   category="std" 
   ipr="trust200902" 
   docName="draft-sandbakken-dispatch-bfcp-udp-00"
   updates="4582, 4583">

<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<!-- for I-D stage only -->
<?rfc strict="no" ?> <!-- as we have no 'Security Considerations' in isolation,
                          but one per -bis we're proposing -->
<?rfc comments="yes" ?>
<?rfc inline="no" ?>

<front>
  <title abbrev="BFCP-Unreliable">Revision of the Binary Floor Control Protocol (BFCP) for use over an unreliable transport</title>
  <!-- Editor role will be appointed when actual bis-drafts are made. Add: role="editor" -->

  <author fullname="Mark K. Thompson" initials="M.K." surname="Thompson">
    <organization>Cisco</organization>
    <address>
      <postal>
        <street>Ruscombe Business Park</street>
        <city>Ruscombe, England</city>
	<country>UK</country>
      </postal>
      <email>markth2@cisco.com <!--mark.thompson@tandberg.com--></email>
    </address>
  </author>
  
  <author fullname="Tom Kristensen" initials="T." surname="Kristensen">
    <organization>Cisco</organization>
    <address>
      <postal>
        <street>Philip Pedersens vei 22</street>
        <city>N-1366 Lysaker</city>
	<country>Norway</country>
      </postal>
      <email>tomkrist@cisco.com <!--tom.kristensen@tandberg.com-->, tomkri@ifi.uio.no</email>
    </address>
  </author>
  
  <author fullname="Geir A. Sandbakken" initials="G.A." surname="Sandbakken">
    <organization>Cisco</organization>
    <address>
      <postal>
        <street>Philip Pedersens vei 22</street>
        <city>N-1366 Lysaker</city>
	<country>Norway</country>
      </postal>
      <email>geirsand@cisco.com <!--geir.sandbakken@tandberg.com--></email>
    </address>
  </author>

  <author fullname="Trond G. Andersen" initials="T.G." surname="Andersen">
    <organization>Cisco</organization>
    <address>
      <postal>
        <street>Philip Pedersens vei 22</street>
        <city>N-1366 Lysaker</city>
	<country>Norway</country>
      </postal>
      <email>trondand@cisco.com <!--trond.andersen@tandberg.com--></email>
    </address>
  </author>

  <author fullname="Eoin McLeod" initials="E." surname="McLeod">
    <organization>Cisco</organization>
    <address>
      <postal>
        <street>Ruscombe Business Park</street>
        <city>Ruscombe, England</city>
	<country>UK</country>
      </postal>
      <email>eoimcleo@cisco.com <!--eoin.mcleod@tandberg.com--></email>
    </address>
  </author>

  <date month="September" year="2010" />

  <area>Real-time Applications and Infrastructure</area>
  <workgroup>Dispatch Working Group</workgroup>
  
  <abstract>
    <t>This memo extends the Binary Floor Control Protocol (BFCP) for use over an unreliable transport. It details a set of revisions to the protocol definition document and the specification of Session Description Protocol (SDP) format for BFCP streams.</t>
  </abstract>
</front>

<middle>
  <section title="Introduction">
    <t>The motivation for using an unreliable transports for BFCP <xref target="RFC4582"/> messages is fuelled by network deployments where middleboxes or media relays are present for NAT and firewall traversal. In these deployments, TCP may neither be applicable nor appropriate, for example, due to lack of support for TCP media relay, ICE-TCP <xref target="I-D.ietf-mmusic-ice-tcp"/> or a standard UDP tunneling approach. In <xref target="rationale"/> the rationale for and scoping of the approach chosen in this draft is described.</t>
    <t>This memo extends the BFCP protocol to support unreliable transport. Minor changes to the transaction model are introduced in that all requests now have an appropriate response to complete the transaction. The requests are sent with a retransmit timer associated with the response to achieve reliability.</t>
    <t>The intention is not to change the semantics of BFCP, but to present a trivial and workable extension that permits UDP as a transport. Existing implementations in the spirit of the approach detailed in earlier versions of this draft (cf. <xref target="chghist"/>), have demonstrated the approach to be feasible. The purpose of this document is to formalize the deviations from the baseline specification enabling interoperability between implementations.</t>
    <t>The content of this draft relates to the BFCP protocol specification <xref target="RFC4582"/> and the SDP format for describing BFCP streams <xref target="RFC4583"/>. This memo is written with the goal of being incorporated into an upcoming revision of those documents without requiring additional protocol and stream specification documents. These two future bis drafts will also deal with known issues not related to the extensions described in this draft.</t>
    <t>Earlier versions of this draft was submitted to the XCON working group. As XCON is closing the draft is now moved and associated with the Dispatch working group. The draft is in progress and notable remaining work is detailed in <xref target="futurework"/>.</t>
  </section>

  <section title="Terminology">
    <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119" />.</t>
  </section>

  <section anchor="rationale" title="Rationale and Scope">
    <!-- motivation, rationale and scoping of this approach. position wrt. the more general approach -->
    <t>BFCP over TCP according to <xref target="RFC4582"/> is used by a number of vendors and works well in some environments. In scenarios where the floor control server has a public IP address, the client will have no problem establishing the TCP connection towards the server.</t>

    <t>On the other hand, in existing, deployed video-conferencing scenarios the floor control server will be placed behind a NAT, as the floor control server functionality is implemented in one of the communicating endpoints. Roles are negotiated in the offer/answer exchange, as specified in <xref target="RFC4583"/>, and either endpoint may end up being the floor control server. The session between these endpoints typically consists of a number of RTP media streams for audio and video and the BFCP connection. NAT traversal will be a problem for BFCP over TCP. The RTP streams works fine as ICE is used to provide connectivity. This draft defines UDP as an alternative transport for BFCP, this enables usage of ICE in the same fashion as for the RTP streams and utilizing the same infrastructure.</t>
    <t>The progress and maybe real interest in finishing the specification of ICE-TCP has been low, the ICE-TCP draft <xref target="I-D.ietf-mmusic-ice-tcp"/> is currently expired. As a new editor of the draft presented his roadmap at IETF-78, this will hopefully change. However, the most important reason for not embracing ICE-TCP and throwing away this draft is the low success rate.</t>

    <t>Another option would be to keep the current BFCP specification as is and tunnel it over UDP. No generic, general purpose UDP tunneling protocol is specified within the IETF. Several approaches exist as personal internet drafts, comprising UDT <xref target="I-D.gg-udt"/> which has been around for some years, the expired TCP-over-UDP (ToU) <xref target="I-D.baset-tsvwg-tcp-over-udp"/> draft and GUT <xref target="I-D.manner-tsvwg-gut"/> that recently was chosen for the DCCP and SCTP encapsulation work.</t>

    <t>The authors of this draft acknowledge the arguments in favor of a general solution to support NAT and firewall traversal of existing TCP-based protocols. This is also in line with the recommendations in <xref target="RFC5405"/>. Currently, the quite simple and straight forward extensions for BFCP over UDP specified in this draft is believed to represent the best way forward in order to support existing products and deployments in a timely manner. The progress with regard to specifying a general purpose UDP tunneling protocol and the outcome of the re-started work on the ICE-TCP specification will be monitored and evaluated as results are available.</t>
  </section>

  <!-- ===================== start rfc4582bis ===================== -->
  <section anchor="rfc4582bis" title="Revision of RFC4582">
    <t>This section details revisions to <xref target="RFC4582"/>, the base protocol specification of BFCP. The section number to which updates apply are indicated in parentheses in the titles of the sub-sections below.</t>
    
    <section title="Overview of Operation (4)">
      <t>Fourth paragraph change:</t>
      <t><list>
	  <t>There are two types of transaction in BFCP: client-initiated transactions and server-initiated transactions. Client-initiated transactions consist of a message from a client to the floor control server and a response from the floor control server to the client. Correspondingly, server-initiated transactions consist of a message from the floor control server to a client and the associated acknowledgement message from the client to the floor control server. Both messages can be related because they carry the same Transaction ID value in their common headers.</t>
      </list></t>
    </section>
    
    <section title="Floor Participant to Floor Control Server Interface (4.1)">
      <t>Before seventh paragraph (page 9), insert:</t>
      <t><list>
	  <t>Figures 2 and 3 below show call flows for two sample BFCP interactions when used over reliable transport. Appendix A (Editorial Note: here-in <xref target="unrelcallflow"/>) shows the same sample interactions but over an unreliable transport.</t>
      </list></t>
    </section>
    
    <section title="COMMON-HEADER Format (5.1)">
      <t>The figure below should replace Figure 5: COMMON-HEADER format.</t>
      <t>
	<figure align="left" anchor="common_header" title="COMMON-HEADER format">
	  <artwork align="left"><![CDATA[
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | Ver |I|  Res  |  Primitive    |        Payload Length         |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                         Conference ID                         |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |         Transaction ID        |            User ID            |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ]]></artwork>
	</figure>
      </t>
      <t>The following text preceeds "Reserved" on page 15:</t>
      <t><list>
	  <t>I: The Transaction Initiator (I) flag-bit has relevance only for use of BFCP over unreliable media. When clear, it signifies that the transaction was opened by the client (floor participant, chair) and that the Transaction ID that follows has been generated by the client; when set, the transaction is a server-initiated transaction and the Transaction ID that follows is pertinent to the floor control server.  Where BFCP is used over reliable transports, the flag has no significance and SHOULD be cleared.</t>
      </list></t>
      <t>The Reserved field changes name to Res due to limited space in the ASCII graphic in <xref target="common_header"/>. In the description of the Reserved field "the 5 bits" is changed to "the 4 bits".</t>
      <t>The description of Transaction ID should have the final clause deleted with the reference to Section 8 remaining. The value used for server-initiated transactions shall be non-zero when BFCP is used over unreliable transports, and this qualification shall be described in the updated Section 8.</t>
      <t>The values below should be appended to the end of Table 1: BFCP primitives.</t>
      <texttable anchor="headerprimitives" title="BFCP primitives">
	<ttcol align='center'>Value</ttcol>
	<ttcol align='left'>Primitive</ttcol>
	<ttcol align='left'>Direction</ttcol>
	<c>14</c><c>FloorRequestStatusAck</c><c><![CDATA[P -> S ; Ch -> S]]></c>
	<c>15</c><c>ErrorAck</c><c><![CDATA[P -> S ; Ch -> S]]></c>
	<c>16</c><c>FloorStatusAck</c><c><![CDATA[P -> S ; Ch -> S]]></c>
	<c>17</c><c>Goodbye</c><c><![CDATA[P -> S ; Ch -> S ; ]]></c>
        <c>  </c><c>       </c><c><![CDATA[S -> P ; S]]>&nbsp;<![CDATA[ -> Ch]]></c>
	<c>18</c><c>GoodbyeAck</c><c><![CDATA[P -> S ; Ch -> S ; ]]></c>
        <c>  </c><c>       </c><c><![CDATA[S -> P ; S]]>&nbsp;<![CDATA[ -> Ch]]></c>
      </texttable>
    </section>

    <section title="ERROR-CODE (5.2.6)">
      <t>The value below should be appended to the end of Table 5: Error Code meaning.</t>
      <texttable anchor="errorcode" title="Error Code meaning">
	<ttcol align='center'>Value</ttcol>
	<ttcol align='left'>Meaning</ttcol>
	<c>10</c>
	<c>Unable to parse message</c>
      </texttable>
    </section>

    <section title="FloorRequestStatusAck (5.3.14)">
      <t>This new subsection should be added to specify the normative ABNF for the new primitive, FloorRequestStatusAck.</t>
      <t><list>
	  <t>Floor participants and chairs acknowledge the receipt of a FloorRequestStatus message from the floor control server when communicating over unreliable transport. The following is the format of the FloorRequestStatusAck message:</t>
	  <t>
	    <figure align="left" anchor="FloorRequestStatusAck" title="FloorRequestStatusAck format">
	      <artwork align="left"><![CDATA[
FloorRequestStatusAck          =    (COMMON-HEADER)
                                   *[EXTENSION-ATTRIBUTE] ]]></artwork>
	    </figure>
	  </t>
      </list></t>
    </section>
    
    <section title="ErrorAck (5.3.15)">
      <t>This new subsection should be added to specify the normative ABNF for the new primitive, ErrorAck.</t>
      <t><list>
	  <t>Floor participants and chairs acknowledge the receipt of an Error message from the floor control server when communicating over unreliable transport. The following is the format of the ErrorAck message:</t>
	  <t>
	    <figure align="left" anchor="ErrorAck" title="ErrorAck format">
	      <artwork align="left"><![CDATA[
ErrorAck                       =    (COMMON-HEADER)
                                   *[EXTENSION-ATTRIBUTE] ]]></artwork>
	    </figure>
	  </t>
      </list></t>
    </section>
    
    <section title="FloorStatusAck (5.3.16)">
      <t>This new subsection should be added to specify the normative ABNF for the new primitive, FloorStatusAck.</t>
      <t><list>
	  <t>Floor participants and chairs acknowledge the receipt of a FloorStatus message from the floor control server when communicating over unreliable transport. The following is the format of the FloorStatusAck message:</t>
	  <t>
	    <figure align="left" anchor="FloorStatusAck" title="FloorStatusAck format">
	      <artwork align="left"><![CDATA[
FloorStatusAck                 =    (COMMON-HEADER)
                                   *[EXTENSION-ATTRIBUTE] ]]></artwork>
	    </figure>
	  </t>
      </list></t>
    </section>
    
    <section title="Goodbye (5.3.17)">
      <t>This new subsection should be added to specify the normative ABNF for the new primitive, Goodbye.</t>
      <t><list>
	  <t>BFCP entities that wish to dissociate themselves from their remote participant do so through the transmission of a Goodbye. The following is the format of the Goodbye message:</t>
	  <t>
	    <figure align="left" anchor="Goodbye" title="Goodbye format">
	      <artwork align="left"><![CDATA[
Goodbye                        =    (COMMON-HEADER)
                                   *[EXTENSION-ATTRIBUTE] ]]></artwork>
	    </figure>
	  </t>
      </list></t>
    </section>
    
    <section title="GoodbyeAck (5.3.18)">
      <t>This new subsection should be added to specify the normative ABNF for the new primitive, GoodbyeAck.</t>
      <t><list>
	  <t>BFCP entities communicating over an unreliable transport should acknowledge the receipt of a Goodbye message from a peer. The following is the format of the GoodbyeAck message:</t>
	  <t>
	    <figure align="left" anchor="GoodbyeAck" title="GoodbyeAck format">
	      <artwork align="left"><![CDATA[
GoodbyeAck                     =    (COMMON-HEADER)
                                   *[EXTENSION-ATTRIBUTE] ]]></artwork>
	    </figure>
	  </t>
      </list></t>
    </section>

    <section title="Transport (6)">
      <t>Much of the existing text remains but demoted to become subsection 6.1. This draft recommends an additional behavior for entities participating in communication over a reliable transport that either wish to leave or are asked to leave an established BFCP connection, as detailed in the revised section introduction text below.</t>
      <t><list>
	  <t>The transport over which BFCP entities exchange messages depends on how clients obtain information to contact the floor control server (e.g. using an SDP offer/answer exchange <xref target="RFC4583"/>). Two transports are supported: TCP, appropriate where entities can be sure that their connectivity is not impeded by NAT devices, media relays or firewalls; and UDP for those deployments where TCP may not be applicable or appropriate.</t>
	  <t>If a client wishes to end its BFCP association with a floor control server, it is RECOMMENDED that the client send a Goodbye message to dissociate itself from any allocated resources. If a floor control server wishes to end its BFCP association with a client (e.g. the Focus of the conference informs the floor control server that the client has been kicked out from the conference), it is RECOMMENDED that the floor control server send a Goodbye message towards the client.</t>
      </list></t>
    </section>

    <section anchor="tcp_transport" title="Reliable Transport (6.1)">
      <t>BFCP entities may elect to exchange BFCP messages using TCP connections. TCP provides an in-order reliable delivery of a stream of bytes. Consequently, message framing is implemented in the application layer. BFCP implements application-layer framing using TLV-encoded attributes.</t>
      <t>A client MUST NOT use more than one TCP connection to communicate with a given floor control server within a conference. Nevertheless, if the same physical box handles different clients (e.g. a floor chair and a floor participant), which are identified by different User IDs, a separate connection per client is allowed.</t>
      <t>If a BFCP entity (a client or a floor control server) receives data that cannot be parsed, the entity MUST close the TCP connection, and the connection SHOULD be reestablished. Similarly, if a TCP connection cannot deliver a BFCP message and times out, the TCP connection SHOULD be reestablished.</t>
      <t>The way connection reestablishment is handled depends on how the client obtains information to contact the floor control server. Once the TCP connection is reestablished, the client MAY resend those messages for which it did not get a response from the floor control server.</t>
      <t>If a floor control server detects that the TCP connection towards one of the floor participants is lost, it is up to the local policy of the floor control server what to do with the pending floor requests of the floor participant. In any case, it is RECOMMENDED that the floor control server keep the floor requests (i.e., that it does not cancel them) while the TCP connection is reestablished.</t>
      <t>To maintain backwards compatibility with older implementations of <xref target="RFC4583"/>, BFCP entities MUST interpret the graceful close of their TCP connection from their associated participant as an implicit Goodbye message.</t>
    </section>

    <section anchor="udp_transport" title="Unreliable Transport (6.2)">
      <t>BFCP entities may elect to exchange BFCP messages using UDP datagrams. UDP is an unreliable transport where neither delivery nor delivery order is assured. Each BFCP UDP datagram MUST contain only one BFCP message. The message format for exchange of BFCP in UDP datagrams is the same as for a TCP stream above.</t>
      <t>Clients MUST announce their presence to the floor control server by transmission of a Hello message. This Hello message MUST be responded to with a HelloAck message and only upon receipt can the client consider the floor control service as present and available.</t>
      <t>As described in Section 8, each request sent by a floor participant or chair shall form a client transaction that expects an acknowledgement message back from the floor control server within a retransmission window. Concordantly, messages sent by the floor control server that are not transaction-completing (e.g. FloorStatus announcements as part of a FloorQuery subscription) are server-initiated transactions that require acknowledgement messages from the floor participant and chair entities to which they were sent.</t>
      <t>If a BFCP entity receives data that cannot be parsed, the receiving participant MAY send an Error message with parameter value 10 indicating receipt of a malformed message. If the message can be parsed to the extent that it is able to discern that it was a response to an outstanding request transaction, the client MAY discard the message and await retransmission. BFCP entities receiving an Error message with value 10 SHOULD acknowledge the error and act accordingly.</t>
      <t>Transaction ID values are non-sequential and entities are at liberty to select values at random. Entities MUST only have at most one outstanding request transaction at any one time. Implicit subscriptions, such as FloorRequest messages that have multiple responses as the floor control server processes intermediate states until Granted or Denied terminal states attained, can be characterized by a client-initiated request transaction whose acknowledgement is implied by the first FloorRequestStatus response from the floor control server. The subsequent changes in state for the request are new transactions whose Transaction ID is determined by the floor control server and whose receipt by the client participant shall be acknowledged with a FloorRequestStatusAck message.</t>
      <t>By restricting entities to having at most one pending transaction open, the out-of-order receipt of messages is mitigated. A server-initiated request (e.g. a FloorStatus with an update from the floor control server) received by a participant before the initial FloorRequestStatus message that closes the client-initiated transaction that was instigated by the FloorRequest clearly supercedes the information conveyed in the delinquent response. As the floor control server cannot send a second update to the implicit floor status subscription until the first is acknowledged, ordinality is maintained.</t>
      <t>BFCP may be characterized to generate "low data-volume" traffic, after the classification in <xref target="RFC5405"/>. Nevertheless is it necessary to ensure suitable and necessary congestion control mechanisms are used for BFCP over UDP. As described in previous paragraph every entity - client or server - is only allowed to send one request at a time, and await the acknowledging response. This way at most one datagram is sent per RTT given the message is not lost during transmission. In case the message is lost, the request retransmission timer T1 specified in <xref target="timers_retrans"/> will fire and the message is retransmitted up to three times. The default initial interval is set to 500ms and the interval is doubled after each retransmission attempt, <!-- tki: may very well skip this reference to SIP, but keep during initial discussion of Congestion Control for UDP/BFCP!--> this is identical to the specification of the T1 timer in SIP as described in Section 17.1.1.2 of <xref target="RFC3261"/>. <!-- tki: Need to provide a bullet proof congestion control handling and get Transport AD/Eggert "signature" --></t>
      <t>BFCP entities SHOULD ensure that their messages are smaller than the recommended MTU size of 1300 bytes when encoded to minimise likelihood of fragmentation en route to their peer entity. <!-- tki: Might need to add text elaborating on this. In case MTU is known .. do blah blah. --></t>
      <t>If a BFCP entity receives an ICMP port unreachable message mid-conversation, the entity SHOULD treat the conversation as closed (e.g. an implicit Goodbye message from the peer) and behave accordingly. The entity MAY attempt to re-establish the conversation afresh. The new connection will appear as a wholly new floor participant, chair or floor control server with all state previously held about that participant lost.</t>
      <t>Note: This is because the peer entities cannot rely on IP and port tuple to uniquely identify the participant, nor would extending Hello to include an attribute that advertised what the entity previously was assigned as a User ID be acceptable due to session hijacking.</t>
      <t>In deployments where NAT appliances, firewalls or other such devices are present and affecting port reachability for each entity, peer connectivity checks, relay use and NAT pinhole maintenance SHALL be achieved through the mechanisms defined in ICE <xref target="RFC5245"/>.</t>
    </section>

    <section anchor="lowerlayersec" title="Lower-Layer Security (7)">
      <t>Add the following to the second sentence, change period ('.') with comma:</t>
      <t><list>
          <t>, if transport over UDP is implemented, DTLS <xref target="RFC4347"/> MUST be supported.</t>
      </list></t>
      <t>Editorial Note: More details needed. The DTLS details to be added are modelled after their counterpart for RTP streams specified in <xref target="RFC5763"/>. The normative text needed are either referenced or copied across to this draft.</t>
    </section>

    <section title="Protocol Transactions (8)"> <!-- mkt one in flight; top bit; pecking order reference -->
      <t>The final clause of the introduction to section 8 shall be changed to read:</t>
      <t><list>
	  <t>Since they do not trigger any response, their Transaction ID is set to 0 when used over reliable transports, but must be non-zero and unique in the context of outstanding transactions over unreliable transports.</t>
	  <t>When using BFCP over unreliable transports, all requests will use retransmit timer T1 (see <xref target="timers"/>) until the transaction is completed.</t>
      </list></t>
    </section>
      
    <section title="Server Behavior (8.2)">
      <t>The final clause of this section shall be changed to read:</t>
      <t><list>
	  <t>Server-initiated transactions MUST contain a Transaction ID equal to 0 when BFCP is used over reliable transports. Over unreliable transport, the Transaction ID shall have the same properties as for client-initiated transactions: the server MUST set the Transaction ID value in the common header to a number that is different from 0 and that MUST NOT be reused in another message from the server until the appropriate response from the client is received for the transaction.  The server uses the Transaction ID value to match this message with the response from the floor participant or floor chair.</t>
      </list></t>
    </section>

    <section anchor="timers" title="Timers (8.3)">
      <t>New section:</t>
      <t><list>
	  <t>When BFCP entities are communicating over an unreliable transport, two retransmission timers are employed to help mitigate against loss of datagrams. Retransmission and response caching are not required when BFCP entities communicate over reliable transports.</t>
      </list></t>
    </section>
      
    <section anchor="timers_retrans" title="Request Retransmission Timer, T1 (8.3.1)">
      <t>T1 is a timer that schedules retransmission of a request until an appropriate response is received or until the maximum number of retransmissions have occurred. The timer doubles on each re-transmit, failing after three unacknowledged transmission attempts.</t>
      <t>If a valid respone is not received for a client- or server-initiated transaction, the implementation MUST consider the BFCP association as failed. Implementations SHOULD follow the reestablishment procedure described in section 6 (e.g. initiate a new offer/answer <xref target="RFC3264"/> exchange). Alternatively, they MAY continue without BFCP and therefore not be participant in any floor control actions.</t>
    </section>

    <section anchor="timers_cache" title="Response Retransmission Timer, T2 (8.3.2)">
      <t>T2 is a timer that, when fires, signals that the BFCP entity can release knowledge of the transaction against which it is running. It is started upon the first transmission of the response to a request and is the only mechanism by which that response is released by the BFCP entity. Any subsequent retransmissions of the same request can be responded to by replaying the cached response, whilst that value is retained until the timer has fired.</t>
      <t>T2 shall be set such that it encompasses all legal retransmissions per T1 plus a factor to accommodate network latency between BFCP entities.</t>
    </section>

    <section anchor="timers_values" title="Timer Values (8.3.3)">
      <t>The table below defines the different timers required when BFCP entities communicate over an unreliable transport.</t>
      <texttable anchor="timertable" title="Timers">
	<ttcol align='center'>Timer</ttcol>
	<ttcol align='left'>Description</ttcol>
	<ttcol align='center'>Value/s</ttcol>
	<c>T1</c><c>Initial request retransmission timer</c><c>0.5s</c>
	<c>T2</c><c>Response retransmission timer</c><c>10s</c>
      </texttable>
      <t></t>
      <t>The default value for T1 is 500 ms, this is an estimate of the RTT for completing the transaction. T1 MAY be chosen larget,  and this is RECOMMENDED if it is known in advance that the RTT is larget. Regardless of the value of T1, the exponential backoffs on retransmissions described in <xref target="timers_retrans"/> MUST be used.</t>
      </section>

    <section title="Receiving a Response [to a FloorRequest Message] (10.1.2)">
      <t>Prepend the sentence below at the start of this subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a FloorRequest from a participant, the floor control server MUST respond with a FloorRequestStatus message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>

    <section title="Receiving a Response [to a FloorRelease Message] (10.2.2)">
      <t>Prepend the sentence below at the start of this subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a FloorRelease from a participant, the floor control server MUST respond with a FloorRequestStatus message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section title="Receiving a Response [to a ChairAction Message] (11.2)">
      <t>Prepend the sentence below at the start of this subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a ChairAction from a participant, the floor control server MUST respond with a ChairActionAck message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section title="Receiving a Response [to a FloorQuery Message] (12.1.2)">
      <t>Prepend the sentence below at the start of this subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a FloorQuery from a participant, the floor control server MUST respond with a FloorStatus message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section title="Receiving a Response [to a FloorRequestQuery Message] (12.2.2)">
      <t>Prepend the sentence below at the start of this subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a FloorRequestQuery from a participant, the floor control server MUST respond with a FloorRequestStatus message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section title="Receiving a Response [to a UserQuery Message] (12.3.2)">
      <t>Prepend the sentence below at the start of this subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a UserQuery from a participant, the floor control server MUST respond with a UserStatus message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section title="Receiving a Response [to a Hello Message] (12.4.2)">
      <t>Prepend the sentence below at the start of this subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a Hello from a participant, the floor control server MUST respond with a HelloAck message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section title="Reception of a FloorRequestStatus Message (13.1.3)">
      <t>The sentence below shall appear as a new subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a FloorRequestStatus message from a floor control server, the participant MUST respond with a FloorRequestStatusAck message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section title="Reception of a FloorStatus Message (13.5.3)">
      <t>The sentence below shall appear as a new subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a FloorStatus message from a floor control server, the participant MUST respond with a FloorStatusAck message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section title="Reception of an Error Message (13.8.1)">
      <t>The sentence below shall appear as a new subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving an Error message from a floor control server, the participant MUST respond with a ErrorAck message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section anchor="seccon4582" title="Security Considerations (14)">
      <t>It is a requirement that the extension of BFCP for unreliable transports shall not introduce any new threats.</t>
      <t>The considerations in <xref target="RFC4582"/> will be altered to cover TCP/TLS connections as well as DTLS (UDP/TLS).</t>
      <t>In addition to the RFCs mentioned for TCP and TLS connections, the specifications for SRTP over DTLS <xref target="RFC5763"/> and <xref target="RFC5764"/> discuss security issues in detail. Add references to them in the section.</t>
      <t>Editorial Note: Expanded analysis and discussion will be added after lower-layer security details is sorted out in <xref target="lowerlayersec"/>.</t>
    </section>
    
    <section title="IANA Considerations - Primitive Subregistry (15.2)">
      <t>This section instructs the IANA to register the following new values for the BFCP primitive subregistry.</t>
      <texttable anchor="iana_4582_primitive" title="BFCP primitive subregistry">
	<ttcol align='center'>Value</ttcol>
	<ttcol align='left'>Primitive</ttcol>
	<ttcol align='center'>Reference</ttcol>
	<c>14</c><c>FloorRequestStatusAck</c><c>RFC[XXXX]</c>
	<c>15</c><c>ErrorAck</c><c>RFC[XXXX]</c>
	<c>16</c><c>FloorStatusAck</c><c>RFC[XXXX]</c>
	<c>17</c><c>Goodbye</c><c>RFC[XXXX]</c>
	<c>18</c><c>GoodbyeAck</c><c>RFC[XXXX]</c>
      </texttable>
    </section>
    
    <section title="IANA Considerations - Error Code Subregistry (15.4)">
      <t>This section instructs the IANA to register the following new values for the BFCP Error Code subregistry.</t>
      <texttable anchor="iana_4582_errcode" title="BFCP Error Code subregistry">
	<ttcol align='center'>Value</ttcol>
	<ttcol align='left'>Meaning</ttcol>
	<ttcol align='center'>Reference</ttcol>
	<c>10</c><c>Unable to parse message</c><c>RFC[XXXX]</c>
      </texttable>
    </section>
    
    <section anchor="unrelcallflow" title="Example Call Flows for BFCP over Unreliable Transport (Appendix A)">
      <t>(Editorial Note: This is a new appendix to <xref target="RFC4582"/>.)</t>
      <t>With reference to Section 4.1, the following figures show representative call-flows for requesting and releasing a floor, and obtaining status information about a floor when BFCP is deployed over an unreliable transport. The figures here show a loss-less interaction.</t>
      <t>Editorial Note: A future version of this draft will show an example with lost packets due to unreliable transport, as well as examples on usage of DTLS and STUN in call the setup phase.</t>
      <t>
	<figure align="left" anchor="ReqRelUnrelExample" title="Requesting and releasing a floor">
	  <artwork align="left"><![CDATA[
      Floor Participant                                 Floor Control
                                                           Server
              |(1) FloorRequest                               |
              |Transaction ID: 123                            |
              |User ID: 234                                   |
              |FLOOR-ID: 543                                  |
              |---------------------------------------------->|
              |                                               |
              |(2) FloorRequestStatus                         |
              |Transaction ID: 123                            |
              |User ID: 234                                   |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 789                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Pending          |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |<----------------------------------------------|
              |                                               |
              |(3) FloorRequestStatus                         |
              |Transaction ID: 4098                           |
              |User ID: 234                                   |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 789                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Accepted         |
              |              Queue Position: 1st              |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |<----------------------------------------------|
              |                                               |
              |(4) FloorRequestStatusAck                      |
              |Transaction ID: 4098                           |
              |User ID: 234                                   |
              |---------------------------------------------->|
              |                                               |
              |(5) FloorRequestStatus                         |
              |Transaction ID: 4130                           |
              |User ID: 234                                   |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 789                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Granted          |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |<----------------------------------------------|
              |                                               |
              |(6) FloorRequestStatusAck                      |
              |Transaction ID: 4130                           |
              |User ID: 234                                   |
              |---------------------------------------------->|
              |                                               |
              |(7) FloorRelease                               |
              |Transaction ID: 154                            |
              |User ID: 234                                   |
              |FLOOR-REQUEST-ID: 789                          |
              |---------------------------------------------->|
              |                                               |
              |(8) FloorRequestStatus                         |
              |Transaction ID: 154                            |
              |User ID: 234                                   |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 789                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Released         |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |<----------------------------------------------| ]]></artwork>
	</figure>
      </t>
      <t>Note that in <xref target="ReqRelUnrelExample"/>, the FloorRequestStatus message from the floor control server to the floor participant is a transaction-closing message as a response to the client-initiated transaction with Transaction ID 154. It does not and SHOULD NOT be followed by a FloorRequestStatusAck message from the floor participant to the floor control server.</t>
      <t>
	<figure align="left" anchor="StatusUnrelExample" title="Obtaining status information about a floor">
	  <artwork align="left"><![CDATA[
      Floor Participant                                 Floor Control
                                                           Server
              |(1) FloorQuery                                 |
              |Transaction ID: 257                            |
              |User ID: 234                                   |
              |FLOOR-ID: 543                                  |
              |---------------------------------------------->|
              |                                               |
              |(2) FloorStatus                                |
              |Transaction ID: 257                            |
              |User ID: 234                                   |
              |FLOOR-ID:543                                   |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 764                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Accepted         |
              |              Queue Position: 1st              |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |      BENEFICIARY-INFORMATION                  |
              |                  Beneficiary ID: 124          |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 635                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Accepted         |
              |              Queue Position: 2nd              |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |      BENEFICIARY-INFORMATION                  |
              |                  Beneficiary ID: 154          |
              |<----------------------------------------------|
              |                                               |
              |(3) FloorStatus                                |
              |Transaction ID: 4319                           |
              |User ID: 234                                   |
              |FLOOR-ID:543                                   |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 764                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Granted          |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |      BENEFICIARY-INFORMATION                  |
              |                  Beneficiary ID: 124          |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 635                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Accepted         |
              |              Queue Position: 1st              |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |      BENEFICIARY-INFORMATION                  |
              |                  Beneficiary ID: 154          |
              |<----------------------------------------------|
              |                                               |
              |(4) FloorStatusAck                             |
              |Transaction ID: 4319                           |
              |User ID: 234                                   |
              |---------------------------------------------->|
              |                                               |
              |(5) FloorStatus                                |
              |Transaction ID: 4392                           |
              |User ID: 234                                   |
              |FLOOR-ID:543                                   |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 635                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Granted          |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |      BENEFICIARY-INFORMATION                  |
              |                  Beneficiary ID: 154          |
              |<----------------------------------------------|
              |                                               |
              |(6) FloorStatusAck                             |
              |Transaction ID: 4392                           |
              |User ID: 234                                   |
              |---------------------------------------------->| ]]></artwork>
	</figure>
      </t>
    </section>
  </section>
  <!-- ===================== end rfc4582bis ===================== -->
  
  <!-- ===================== start rfc4583bis ===================== -->
  <section anchor="rfc4583bis" title="Revision of RFC4583">
    <t>This section details revisions to <xref target="RFC4583"/>, the SDP format for specifying BFCP streams. The section number to which updates apply are indicated in parentheses in the titles of the sub-sections below.</t>

    <section title="Fields in the 'm' Line (3)">
      <t>The section shall be re-written to remove reference to the exclusivity of TCP as a transport for BFCP streams.</t>
      <t><list style='numbers'>
	  <t>In paragraph four, "... will initiate its TCP connection ..." becomes "... will direct BFCP messages ..."</t>
	  <t>In paragraph four, delete "Since BFCP only runs on top of TCP, the port is always a TCP port."</t>
	  <t>In paragraph five, we now define three new values for the transport field, adding "UDP/BFCP" as the third symbol, changing "former" for "first", "latter" for "second", and adding a final clause defining the use of UDP/BFCP as being for when BFCP runs on top of UDP</t>
      </list></t>
    </section>

    <section anchor="seccon4583" title="Security Considerations (10)">
      <t>In addition to the RFCs mentioned for TCP and TLS connections, the specifications for SRTP over DTLS <xref target="RFC5763"/> and <xref target="RFC5764"/> discuss security issues in detail. Add references to them in the section.</t>
      <t>Editorial Note: Expanded analysis and discussion will be added after lower-layer security details is sorted out in <xref target="lowerlayersec"/>.</t>

    </section>

    <section title="Registration of SDP 'proto' Values (11.1)">
      <t>This section should be renamed now that there are more values to register in the SDP parameters registry, with the following added to the table:</t>
      <texttable anchor="registration" title="Value for the SDP 'proto' field">
	<ttcol align='left'>Value</ttcol> <ttcol align='left'>Reference</ttcol>
	<c>UDP/BFCP</c>                   <c>RFC[XXXX]</c>
	<c>UDP/TLS/BFCP</c>               <c>RFC[XXXX]</c>
      </texttable>
    </section>
  </section>
  <!-- ===================== end rfc4583bis ===================== -->
  
  <section anchor="futurework" title="Future Work"> <!-- Open issues -->
    <t>This draft reflects a work in progress, with at least the following items to be documented and/or revised before soliciting adoption by the XCON working group:</t>
    <t><list style='hanging' hangIndent='6'>
        <t hangText="Adapting DTLS usage to BFCP:"> Currently the DTLS-SRTP specifications <xref target="RFC5763"/> and <xref target="RFC5764"/> are referenced and used as basis for intended BFCP usage of DTLS. Adaption to the BFCP context in <xref target="lowerlayersec"/> will either be done by reference and noting differences or by adding the normative specification needed to this draft. This consideration applies to the two security consideration sections as well, namely <xref target="seccon4582"/> and <xref target="seccon4583"/>. Adding examples on DTLS usage in the call setup phase will provide guidance to implementors.</t>
	<t hangText="Protocol revision:"> Certain aspects of this draft require different behaviors depending on whether a reliable or unreliable transport is being used, e.g. server-initiated transactions having Transaction ID 0 over reliable transports without acknowledgements versus non-zero and active-unique with an acknowledgement message when entities communicate over unreliable transports. If we allow TCP-based implementations to follow the graceful-close behavior of <xref target="RFC4582"/> without mandating that the Goodbye message be signaled then it would not be necessary to bump the protocol version number. TCP-based implementations could continue as-is, whilst UDP-based implementations would be at their first version and as such no backward compatible issues would be present.</t>
	<t hangText="Fragmentation:"> It has been observed that BFCP message structures can grow to be sufficiently large that they exceed the typical MTU threshold for local area networks (assumed here as 1500 octets). For example, a FloorStatus message with multiple FLOOR-REQUEST-INFORMATION attributes that contain detailed STATUS-INFO in the OVERALL-REQUEST-STATUS and FLOOR-REQUEST-STATUS attributes. A strategy for coping with such fragmented messages is required. Currently, this is held with a broad-sweeping statement of intent that implementations should restrict the size of their messages. Further refinement might be required, such as an applicability statement on those BFCP messages and/or attributes deemed as inappropriate for use over transports where fragmentation is a concern, or further protocol specification to eradicate fragmentation as an issue. A mechanism for splitting into additive messages might be considered.</t> <!-- http://www.ietf.org/mail-archive/web/xcon/current/msg01920.html  -->
	<t hangText="Example signaling flows:"> The next revision of this draft will include further example signaling exchanges over unreliable transport as a visual aid and reference for implementors. Including updated transactions, message retransmission, usage of DTLS during call setup and combined usage of DTLS and STUN.</t>
      </list>
    </t>
  </section>
  
  <section title="Acknowledgements">
    <t>The team working on this draft are: Trond G. Andersen, Charles Eckel, Tom Kristensen, Eoin McLeod, Geir A. Sandbakken and Mark K. Thompson at Cisco; Alfred E. Heggestad at Telio Telecom.</t>
    <!-- <t>We also acknowledge comments received from IETF XCON WG mail list, including those by Gonzalo Camarillo, Roni Even, Lorenzo Miniero, and Joerg Ott.</t> -->
  </section>
</middle>

<back>
  <references title="Normative References">
    <?rfc include="reference.RFC.2119" ?>
    <?rfc include="reference.RFC.3264" ?>
    <?rfc include="reference.RFC.4347" ?>
    <?rfc include="reference.RFC.4582" ?>
    <?rfc include="reference.RFC.4583" ?>
    <?rfc include="reference.RFC.5245" ?>
    <?rfc include="reference.RFC.5763" ?>
  </references>

  <references title="Informative References">
    <?rfc include="reference.RFC.3261" ?>
    <?rfc include="reference.RFC.5405" ?>
    <?rfc include="reference.RFC.5764" ?>
    <?rfc include="reference.I-D.draft-ietf-mmusic-ice-tcp-08" ?>
    <?rfc include="reference.I-D.draft-baset-tsvwg-tcp-over-udp-01" ?>
    <?rfc include="reference.I-D.draft-gg-udt-03" ?>
    <?rfc include="reference.I-D.draft-manner-tsvwg-gut-02" ?>
  </references>

  <!-- Appendix -->
  <section anchor="chghist" title="Change History">
    <section title="draft-sandbakken-xcon-bfcp-udp-02 to draft-sandbakken-dispatch-bfcp-udp-00">
      <t><list style='numbers'>
          <t>Draft name change. As XCON WG is closing this draft is submitted to Dispatch WG as the arena of discussion.</t>
          <t>Moved Transaction Identifier bit (I) from the Transaction ID to one of the current 5 reserved bits. Keep current Transaction ID syntax and semantics. Avoid potential problems with existing TCP based implentations.</t>
          <t>The way congestion control is taken care of is explained, with reference to <xref target="RFC5405"/>. One message per RTT. Backoff and normative behavior for timer T1 clarified.</t>
          <t>Mandated support for DTLS in case unreliable transport (i.e. UDP) is implemented. Details and examples to be included. Model after <xref target="RFC5763"/>, details on how to adapt the SRTP associated details to BFCP and whether a reference or copying the text across and changing is needed.</t>
          <t>Added the Rationale and Scope section to position and explain the motivation for this draft more in detail.</t>
          <t>A number of typoes and editorial changes.</t>
      </list></t>
    </section>
    <section title="draft-sandbakken-xcon-bfcp-udp-01 to -02">
      <t><list style='numbers'>
	  <t>Stepped away from changing semantics and directionality of Hello and HelloAck messages for pinhole establishment and keep-alive in favor of ICE toolset, particularly as this would have not resolved connectivity establishment as a precursor to deployment of DTLS <xref target="RFC4347"/> as a transport security mechanism.</t>
	  <t>Change to COMMON-HEADER to reserve bit-16 of Transaction ID to show originator of transaction such that request/response and response/acknowledgement mapping can be maintained without colliding randomly chosen Transaction IDs. This also avoids a three-way handshake scenario around FloorRequest where the implicit acknowledgement (in FloorRequestStatus) might also be interpreted as a transaction openening request on the part of the floor control server.</t>
	  <t>Defined additional timer (T2) to soak up lost responses without additional processing.</t>
	  <t>Restricted outstanding transactions to only one in-flight per direction at any one time to mitigate re-ordering issues.</t>
	  <t>Defined entity behavior when transactions timeout.</t>
	  <t>Specified initial suggestion for how to minimise fragmentation of messages.</t>
	  <t>Removed consideration of TCP-over-UDP after internal review.</t>
	  <t>Re-stated DTLS as likely preferred mechanism of securing transport, although this investigation is on-going.</t>
      </list></t>
    </section>
    <section title="draft-sandbakken-xcon-bfcp-udp-00 to -01">
      <t><list style='numbers'>
	  <t>Refactored to a format that represents explicit changes to base RFCs.</t>
	  <t>Introduction of issues currently under investigation that preclude adoption.</t>
	  <t>Specified retransmission timer for requests.</t>
      </list></t>
    </section>
  </section>
</back>

</rfc>
