<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-mmm-bfd-on-lags-02" ipr="trust200902">
  <front>
    <title abbrev="BFD for LAG Interfaces">Bidirectional Forwarding Detection
    (BFD) on Link Aggregation Group (LAG) Interfaces</title>

    <author fullname="Manav Bhatia" initials="M." surname="Bhatia">
      <organization>Alcatel-Lucent</organization>

      <address>
        <postal>
          <street></street>

          <city>Bangalore</city>

          <code>560045</code>

          <region></region>

          <country>India</country>
        </postal>

        <email>manav.bhatia@alcatel-lucent.com</email>
      </address>
    </author>

    <author fullname="Mach(Guoyi) Chen" initials="M." surname="Chen">
      <organization>Huawei Technologies Co., Ltd</organization>

      <address>
        <postal>
          <street>Q14 Huawei Campus, No. 156 Beiqing Road, Hai-dian
          District</street>

          <city>Beijing</city>

          <code>100095</code>

          <country>China</country>
        </postal>

        <email>mach@huawei.com</email>
      </address>
    </author>

    <author fullname="Zuliang Wang" initials="Z." surname="Wang">
      <organization>Huawei Technologies Co., Ltd</organization>

      <address>
        <postal>
          <street>Q15 Huawei Campus, No. 156 Beiqing Road, Hai-dian
          District</street>

          <city>Beijing</city>

          <code>100095</code>

          <country>China</country>
        </postal>

        <email>liang_tsing@huawei.com</email>
      </address>
    </author>

<author fullname="Liang Guo" initials="L." surname="Guo">
      <organization>China Telecom</organization>

      <address>
        <postal>
          <street></street>

          <city>Guangzhou</city>

          <country>China</country>
        </postal>

        <email>guoliang@gsta.com</email>
      </address>
    </author>

    <author fullname="Marc Binderberger" initials="M." surname="Binderberger">
      <organization></organization>

      <address>
        <postal>
          <street></street>

          <city>Lausanne</city>

          <region></region>

          <code></code>

          <country>Switzerland</country>
        </postal>

        <email>marc@sniff.de</email>
      </address>
    </author>

    <date day="6" month="January" year="2012" />

    <abstract>
      <t>This document proposes a mechanism to run BFD on Link Aggregation
      Group (LAG) interfaces. It does so by running an independent BFD
      session on every LAG member link.</t>

      <t>(For IP/UDP encapsulation)
	  <vspace blankLines="0" />
      A dedicated well-known multicast IP address for both IPv4 and
      IPv6 is introduced as the destination IP address of the BFD
      packets when running BFD on the member links of the LAG.</t>
      
      <t>(For Ethernet encapsulation)
	  <vspace blankLines="0" />
	  A new Ethernet type is introduced to send BFD packets directly
	  in Ethernet frames when running BFD on the member links of the
	  LAG.</t>

      <t>There is currently also no standard that describes how BFD runs
      on a LAG interface as a whole. This draft proposes a definition for
      this problem too while taking into consideration existing
      implementations.</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
    <t>The Bidirectional Forwarding Detection (BFD) protocol <xref
    target="RFC5880"></xref> provides a mechanism to detect faults in the
    bidirectional path between two forwarding engines, including interfaces,
    data link(s), and to the extent possible the forwarding engines
    themselves, with potentially very low latency.</t>
    
    <t>BFD can be used for detecting failures of the path between
    two network devices. Typically the application clients are not aware
    of any inner structure of the underlying interface, being layer 3
    applications themselves like Open Shortest Path First (OSPF)
    <xref target="RFC2328"></xref> or Border Gateway Protocol (BGP)<xref
    target="RFC4271"></xref>. While this works for interfaces like
    Ethernet and Packet Over SONET (POS), it causes problems for 
    bundled interfaces like LAG. </t>
    
    <t>A LAG is used to bind together several physical ports between two
    adjacent nodes so they appear to higher-layer protocols as a single,
    higher bandwidth "virtual" pipe. A LAG interface thereby allows
    aggregation of multiple network interfaces as one virtual interface for
    the purpose of providing fault-tolerance and higher bandwidth.</t>
    
    <t>The problem with running BFD over a LAG is that with a single BFD
    session and without internal knowledge of the LAG structure
    it is impossible for BFD to guarantee a detection of anything but
    a full LAG shutdown within the BFD timeout period.
    The LAG shutdown is typically initiated by some LAG module, which we
    will refer  to as the LAG Management Module (LMM) in the rest of the
    document.
    LAG timers are typically multiple times slower than the BFD detection
    timers (multiple 100msec of LMM vs. multiple 10msec of BFD).  
    There is thus a need to bring some sort of determinism in how BFD
    runs over a LAG. There is also a need to detect member link failures
    much faster than what Link Aggregation Control Protocol (LACP)
    allows. </t>
    
    <t>The document proposes establishing a BFD session over every 
    member link the LAG is built upon. BFD can combine these information
    to provide fast detection for layer-3 applications.</t>
    
    <t> While there are native Ethernet mechanisms to detect failures
    (802.1ax, .3ah) that could be used for LAG, the solution proposed in
    this document enables operators who have already deployed BFD over
    different technologies (e.g. IP, MPLS) to use a common failure
    detection mechanism.</t>
    </section>

    <section title="BFD over LAG with a single session">

      <section title="BFD over Big Pipe" anchor="bbp-def">
    <t>The simplest approach to run BFD on a LAG interface is to ignore
    the internal structure and treat the LAG as one "big pipe". We
    call this mode of operation as "BFD over Big Pipe"
    or "BBP" for short. It corresponds to section 7.1 in
    <xref target="RFC5882">RFC&nbsp;5882</xref>.</t>

    <t>We need to standardize the BBP approach. The following
    requirements define what it means to treat a LAG interface as a single
    interface with no additional structure:
      <list style="symbols">
        <t>BFD can send packets on any member link</t>
    	<t>BFD must accept packets from every member link</t>
        <t>The Rx/Tx link can change any time and/or regularly with
        every change pattern without causing BFD to fail</t>
      </list>

    The BFD session on the LAG interface then follows RFC&nbsp;5880 and
    RFC&nbsp;5881 in all details.</t>

      </section>

      <section title="Examples of existing implementations">

    	<t> Because there is no standard, vendors have implemented their
        own proprietary mechanisms to run BFD over LAG interfaces.
        Two examples are shown here. Both satisfy the requirements in
    	<xref target="bbp-def" /></t>

    	<t>Some implementations send BFD packets only over one 
        member link. Others spray BFD packets over all member links of the
        LAG. There are issues with each of these approaches.</t>

        <t>In the first approach, BFD sends packets onto the LAG and
    	the LAG load balance algorithm will select a member port, which
    	may be the same port for all the packets of this BFD session.
    	BFD will remain up as long as this "primary" port is alive.
    	It will go down once the primary port goes down till
        another port is selected as the primary. Problems arise with this
        design as BFD is oblivious to the presence of other member
        links in the LAG. If a non-primary link goes down, the BFD session
        remains unaffected as it can still send and receive BFD packets
    	over the primary link. This results in all traffic sent over the
    	failed member link getting dropped, till the LMM
        removes the failed link from the LAG. Conversely if the primary link
        goes down, then the BFD session will go down, till a new member link
        is elected as the primary link.</t>

        <t>In the second approach, BFD packets are sprayed over all the member
        links of a LAG. This is done naively via round-robin, where each BFD
        packet is sent using the subsequent member link, in a round-robin
        fashion. It solves the
        problem of BFD going down because of the primary port going down, but
        it still does not solve the problem of traffic getting lost when one
        of the member link goes down. This is because, when a member link goes
        down, BFD remains up and traffic continues to go over the link
        that has failed till a higher layer protocol detects this and removes
        the offending link from the LAG.</t>

        <t>Between the two approaches the second one is RECOMMENDED 
           as its much more flexible and is not prone to single link failures. To
         completely solve all issues we RECOMMEND running BFD on all 
        member links as described in <xref target="bfd-lagmember" />.</t>
      </section>
    </section>

    <section title="BFD on LAG member links" anchor="bfd-lagmember">
    <t>The mechanism proposed for a fast detection of LAG member link
    failure is running BFD sessions on every LAG member link. We name
    this mode of BFD operations "BFD on LAG members" or "BLM" for short.
    It corresponds to section 7.3 in
    <xref target="RFC5882">RFC&nbsp;5882</xref>.</t>
    
      <section title="BFD BLM session">
    <t>The overall BLM session consists of the LAG interface, i.e. the
    aggregated link, a set of BFD sessions running on the member
    links and a new BFD state for the LAG; this state is explained in
    more detail in <xref target="conluded-state" />.
    We call the member-link sessions as micro BFD sessions; their
    details are discussed in <xref target="bfd-micro" />.</t>

    <t>The set of micro sessions is such that we have one micro session
    per member link. This set can change over the lifetime of a BLM
    session. E.g. BFD receives updates for the micro session set when
    links are physically added or removed from the LAG and will
    accordingly create or delete micro BFD sessions.</t>

    <t>The details of how the update happens are implementation specific
    and outside the document's scope. For example the client requesting
    the BLM session could provide these updates.</t>

    <t>(The following paragraph applies only when IP/UDP encapsulation
	is in use)
	
    Only one address family MUST be used per BLM session, 
    i.e. the set of micro BFD sessions belonging to the BLM session MUST
    either all use IPv4 or all use IPv6.</t>

    <t>Multiple BLM session requests for the same LAG interface
    result in a shared BLM session. The set of micro sessions finally
    used is the superset of the individual micro session sets. If
    conflicting session parameters are requested then it is a local
    issue as to how to resolve the parameter conflicts, as explained
    in RFC&nbsp;5882, Section 2.</t>
      </section>


      <section title="Micro BFD sessions" anchor="bfd-micro">
    <t>A single micro BFD session runs on every member link of the LAG.
    These micro BFD sessions follow
    <xref target="RFC5880">RFC&nbsp;5880</xref>.</t>

    <t>Only asynchronous mode is considered in this document.
    The echo function is outside the document's scope.

    At least one system MUST take the Active role (possibly both).
    The micro BFD sessions on the member links are independent
    BFD sessions. They use their own unique, local discriminator
    values, maintain their own set of state variables and have their
    own independent state machine.
    Timer values MAY be different, even among the micro sessions
    belonging to the same LAG, although it is expected that micro
    sessions belonging to the same LAG use the same timer
    values.</t>

    <t>The demultiplexing of a received packet is solely based on the Your
    Discriminator field, if this field is nonzero.
    For the initial Down packet of a micro session this value may be zero.
    In this case demultiplexing MUST be based on some combination of other
    fields which MUST include the interface information of the member
    link.</t>

    <t>When receiving a BFD packet for a micro session with a valid,
    non-zero Your Discriminator then a check MUST be done if the packet
    was received on the correct member link interface. If the check
    fails then the packet MUST be discarded. This test needs to be done
    before state variables for the micro sessions are updated by the
    received packet.</t>


    <!-- BFD packet encapsulation -->        

        <section title="BFD packet details (IP/UDP Encapsulation, Multicast destination address)"
        anchor="bfd-ipudp">
	<t>[Either this section or the alternative sections
	<xref target="bfd-ether" />, <xref target="bfd-ipudp-uni" />
	should remain in the final document.
	There is no intention to support multiple encapsulations.]</t>

    <t>The BFD Control packets for each micro BFD session are IP/UDP encapsulated
    as defined in
    <xref target="RFC5881"> </xref>. 
    They use a well-known
    link-local multicast IP address (224.0.0.X for IPv4, FF02::X for IPv6,
    to be assigned by IANA).</t>
    
    <t>On Ethernet-based LAG member links the
    corresponding destination multicast MACs will be 01:00:5e:00:00:XX
    for IPv4 and 33:33:00:00:00:XX for IPv6. Each member link uses its
    own MAC address as the source MAC address.</t>
        </section>

        <section title="BFD packet details (IP/UDP Encapsulation, Unicast destination address)"
        anchor="bfd-ipudp-uni">
    <t>[Either this section or the previous sections
    <xref target="bfd-ether" />, <xref target="bfd-ipudp" />
    should remain in the final document.
    There is no intention to support multiple encapsulations.]</t>

    <t>The BFD Control packets for each micro BFD session are IP/UDP encapsulated
    as defined in
    <xref target="RFC5881"></xref>, but with one major
    change: the UDP destination port will not be 3784 but "BfdBndlPort"
    (to be assigned by IANA). Control packets 
	use a destination IP address that is the peer's remote IP address.
   The details of how this destination IP address is learnt is beyond
    the scope of this document.</t>
      
    <t>On Ethernet-based LAG member links the destination MAC is the
    MAC assigned to the peers LAG aggregator.</t>

        </section>
<section title="BFD packet details (Ethernet encapsulation)"
		anchor="bfd-ether">
	<t>[Either this section or the next sections
	<xref target="bfd-ipudp" />, <xref target="bfd-ipudp-uni" />
	should remain in the final document.
	There is no intention to support multiple encapsulations.]</t>


    <t>The BFD packet is directly encapsulated into the Ethernet frame.
    The frame has the following format: Ethernet header according to
	<xref target="IEEE802.3"></xref>, then Type/Length field set to
	"BfdEtherType", followed by the BFD packet</t>

    <t>The Ethernet payload must be padded with zeros to reach
    46 bytes if the BFD packet size is not already larger.</t>

	<t>When receiving an Ethernet frame the payload is used for further
	BFD processing. Additional padding data MUST be ignored if it was
	required to reach the minimum payload length of 46 bytes.</t>

    <t>IANA needs to assign a L2 MAC address according to
	<xref target="RFC5342"></xref>
    that would be used as the destination MAC for all control packets
    in the micro BFD sessions.</t>
 
    <t>A new Ethertype must be assigned by the IEEE Registration
    Authority to the BFD over Ethernet protocol that will be used for
    all micro BFD sessions.</t>
        </section>
      </section>

      <section title="Concluded BFD state" anchor="conluded-state">
    <t>An additional state variable is introduced for BFD on LAG members:
    the concluded state. The state values are Down, Up and AdminDown.
    This state is not part of the micro session state machine.
    Instead it describes the overall state of the LAG. It is a local
    state and does not appear (directly) in any BFD packet on any link.
    </t>

    <t>The concluded state may be set to AdminDown for administrative
    purpose, to keep the BLM and the micro sessions indefinitely down.
    When the concluded state is entering AdminDown then all micro
    sessions belonging to the BLM MUST enter the AdminDown state as
    well.</t>

    <t>A function must be defined, which evaluates all the states of
    the micro sessions that belong to the BLM. This function has two
    output values Down and Up and the concluded state is updated with
    the last evaluation result, unless it is already in AdminDown state.
    The evaluation takes place whenever a micro session is added,
    removed or is changing state.
    </t>

    <t>The details of the evaluation function are outside the scope of
    the document.
    The function could for example test for a minimum number of micro
    sessions in Up state. The function could even be "outsourced" and
    e.g. the decision logic of the LMM module could be used.</t>

    <t>The concluded state is important for layer-3 clients requesting
    BFD sessions over the LAG or over Vlans on the LAG.
    Details will be discussed in <xref target="l3-apps" />.</t>
      </section>

      <section title="User interface for BFD packets" anchor="packet-API">
	    <section title="User interface (IP/UDP encapsulation)"
		anchor="packet-ipudp">
    <t>[Either this section or the next section
    <xref target="packet-ether" /> should remain in the final document.
    There is no intention to support both encapsulations.]</t>

    <t>The user interface for BFD micro sessions encapsulated in IP/UDP
	MUST allow to send an IP/UDP packet on a specified LAG port. When
	receiving BFD packets for micro sessions then the IP/UDP packet MUST
	be provided together with an information what LAG port the packet was
	received on.</t>
		</section>

		<section title="User interface (Ethernet encapsulation)"
		anchor="packet-ether">
    <t>[Either this section or the previous section
    <xref target="packet-ipudp" /> should remain in the final document.
    There is no intention to support both encapsulations.]</t>

    <t>The user interface for BFD directly transported in an Ethernet
	frame MUST allow to send and receive a complete Ethernet frame with the
	specific "BfdEtherType" type value. The information that specifies
	the LAG port from which a frame is sent to or received from is either
	an explicit extension of this API or is implicitly given by binding
	the API to a specific port.</t>
	
	<t>As an example, the API could be identical with the MA_DATA request
	and indication as defined in section 2.3 of <xref
	target="IEEE802.3"></xref>.</t>
		</section>

      </section>

    </section>

    <section title="BFD on LAG members and layer-3 applications"
     anchor="l3-apps">
    <t>Layer 3 protocols like e.g. OSPF may use BFD on LAG members
    in one of the following ways:
    <list style="letters">
      <t>The session request from the client creates a virtual session.
      This virtual session is not sending actual BFD packets. Instead
      the state, which is reported to the layer-3 client, is based on
      the concluded state.
      <vspace blankLines="1" /> 
      Implementations compliant to this standard MUST support this mode.
      This is the default mode in which BFD over LAG works.</t>

      <t>The session request from the client creates a BBP session,
      as described in <xref target="bbp-def" />. BFD SHOULD update the
      state of the BBP session with the concluded state of the
      corresponding LAG in the following way:
        <list style="numbers">
    	  <t>when the concluded state is Down then the BBP session
    	  state is transitioning to Down as well</t>
    	  <t>for a concluded state of Up or AdminDown the BBP session
    	  state is unaffected</t>
    	</list>
      This state update allows BBP session to run with more relaxed
      timer values as the more intense liveliness detection is done by
      the micro BFD sessions.

      <vspace blankLines="1" />
      Compliant implementations MUST support this mode.
      </t>
    </list>
    An implementation MUST provide a configuration knob which 
    lets the user select the mode.</t>
    </section>

    <section title="Application example: LMM using BLM">
    <t>There are certainly many ways to use BLM. Here is one example
    envisioned by the authors.</t>

    <t>The LAG Management Module (LMM) could be envisaged as a client
    of BFD, i.e. the LMM requests a BLM session and takes
    responsibility to update the set of micro sessions</t>

    <t>LMM then uses BFD, instead of or in parallel with LACP, to
    monitor the health of the individual members links of the LAG.
    Details are outlined below.</t>

    <t>Bringing a member link up:</t>

    <t>When the status of a port is about to change to Distribution TRUE
	(see section 5.3.15 in <xref target="IEEE802.1AX"></xref>),
	i.e. before the port is added to
	the distribution function of the LAG, then the particular BFD micro
	session is requested. An implementation MAY wait for the micro BFD
	session to reach Up state before adding the port to the LAG's
	distribution function and changing the port status to Distribution
	TRUE.</t>

	<t>In case LACP is in use then the steps of the previous paragraph
	are executed in the "Distributing" state (see the Mux machine state
	diagram Figure 5-14 in <xref target="IEEE802.1AX"></xref>).
	I.e. LACP is in Distributing state
	before the implementation potentially waits for the BFD micro
	session to reach Up state.</t>
	
    <t>Detecting a member link failure:</t>

    <t>When running in parallel operation the logic for failure is that
    both LACP and BFD can indicate a failure.</t>

    <t>When a micro BFD session, that runs on a member link of a
	LAG, goes down then this member link MUST be taken out of the
	distribution function of the particular LAG and the port status MUST
	change to Distribution FALSE. The BFD micro session for the link MUST
	be deleted when the link has been taken out of distribution.</t>
	
	<t>In case LACP is in use then the variable "Selected" MUST be set
	to UNSELECTED when BFD reports a Down state. The steps of the
	previous paragraph are executed in the "Collecting" state
	(see the Mux machine state diagram Figure 5-14 in 802.1AX).</t>

    <t>The behaviour of the LMM MUST be configurable if waiting for a
	BFD status of Up to add a member link is supported, to allow an
	alternative mode of adding the member link irrespective of the
	BFD state for interoperability purpose. Bringing the member link
	up without waiting for BFD is then the default behaviour.</t>

    </section>

    <section title="Security Consideration">
	  <section title="(IP/UDP encapsulation)">
      <t>This document does not introduce any additional security issues and
      the security mechanisms defined in [RFC5880] apply in this document.
   <vspace blankLines="1" />
      Routers compliant to this standard will now
      need to process packets addressed to a new multicast address. 
      This however, should not open any new attack vector as it is
      a link local multicast and the attacker would have to be on the
      same link as the router to launch such packets.</t>
      </section>
	  <section title="(Ethernet encapsulation)">
	  <t>This document does not introduce any additional security issues
	  and the security mechanisms defined in [RFC5880] apply in this
	  document.
   <vspace blankLines="1" />
      If no mechanism exists to transport Ethernet frames from a node
	  other than a directly connected node then the security is
	  identical to the TTL=255 check for IP packets.</t>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
	  <section title="(IP/UDP encapsulation, multicast)">
	<t>The IANA is requested to assign a well-known link-local multicast
	IP address: "224.0.0.XXX" for IPv4 and FF02::X for IPv6.</t>
	  </section>
	  <section title="(IP/UDP encapsulation, unicast)">
	<t>The IANA is requested to assign a well-known port number for the
	UDP encapsulated micro BFD sessions.</t>
	  </section>
	  <section title="(Ethernet encapsulation)">
    <t>IANA needs to assign a L2 MAC address according to
	<xref target="RFC5342">RFC&nbsp;5342</xref>
    that would be used as the destination MAC for all control packets
    in the micro BFD sessions.</t>
	  </section>
    </section>

    <section anchor="IEEE" title="IEEE Considerations">
    <t>(The following applies only in case of Ethernet encpasulation)
	A new Ethertype must be assigned by the IEEE Registration
    Authority to the BFD over Ethernet protocol that will be used for
    all micro BFD sessions.</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>Most of the text for this document came originally from 
           draft-chen-bfd-interface-00. </t>

    	<t> We would like to thank Dave Katz, Alexander Vainshtein, Greg  Mirsky
          and Jeff Tantsura for their comments on this draft.
    	</t>

      <t> We would also like to thank the members of the BFD WG who
            expressed strong support about the need to run BFD on all
            the member links of a LAG.
            </t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include="reference.RFC.5880"?>

      <?rfc include="reference.RFC.5881"?>

      <?rfc include="reference.RFC.5882"?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.0768"?>

      <?rfc include="reference.RFC.0791"?>

      <?rfc include="reference.RFC.2328"?>

      <?rfc include="reference.RFC.4271"?>

      <?rfc include="reference.RFC.5342"?>

      <reference anchor="IEEE802.1AX">
        <front>
          <title>IEEE Standard for Local and metropolitan area
		  networks - Link Aggregation
          </title>
		  <author> <organization>IEEE Std. 802.1AX</organization> </author>
          <date month="November" year="2008" />
        </front>
      </reference>

      <reference anchor="IEEE802.3">
        <front>
          <title>IEEE Standard for Information technology -
		  Telecommunications and information exchange between systems -
		  Local and metropolitan area networks - Specific requirements
		  Part 3: Carrier sense multiple access with
		  collision detection (CSMA/CD) access method and physical layer
		  specifications
          </title>
		  <author> <organization>IEEE Std. 802.3</organization> </author>
          <date month="December" year="2008" />
        </front>
      </reference>
    </references>


    <section title="IETF discussion status">
    <t>[This section will finally go away. It documents some of the
    discussions and decisions made recently on the BFD mailing list.]</t>

      <section title="Unicast vs. Multicast IP address">
    <t>  The destination IP address for the BFD control packets for 
           the micro BFD sessions can be Unicast or Multicast. Each has
           its set of advantages and disadvantages. </t>

    <t>Advantages with using a Unicast IP destination address:
    <list style="symbols">
    <t> Minimal code changes to support micro BFD sessions per member link. A 
            new UDP port number can be used to differentiate  BFD control packets  
            associated with the micro BFD sessions and the regular BFD sessions.</t>
    </list></t>

    <t>Disadvantages with using a Unicast IP destination address:
    <list style="symbols">	
    <t> It is configuration intensive. Each LAG needs to be configured with the remote
           end's IP address for BFD to boot strap. Similarly, a change in the IP address of the 
           interface would need all LAGs to be reconfigured. While one could minimize the
           amount of human intervention required, it cannot be completely eliminated. 
    </t>

    <t>	ARP needs to be resolved for sending Unicast packets. This means that ARP
            must be resolved even before the first control packet is sent to bring up the 
           micro BFD session. There are multiple ways to achieve this. The most logical 
           approach is to mandate LACP on this LAG. This way., LACP will bring up the links
           so that ARP resolution can begin. However, this necessitates the need to run LACP
           along with BFD on all member links.  The other option is to allow ARP processing even 
           when the port state is down. This means that implementations would have to allow 
           all packets with broadcast MAC and port MAC to be sent to CPU for processing. This
           violates the basic tenets of IP layering and opens a hole for a DoS attack. This also requires
          a huge change to the IP stack to allow packet Rx and Tx on ports that are down.
    </t>
    <t> Not possible to support unnumbered IP interfaces.</t>
    </list></t>
<t>Advantages with using a Multicast IP destination address:
    <list style="symbols">
    <t> No additional configuration is required, and the micro BFD sessions are 
          set up automatically. It remains independent of the LAG IP addressing 
         scheme. The member links get added to the LAG as soon as the micro BFD sessions
        come up.</t>

    <t> This involves minimal modifications to data plane and L3 stack. Currently, ports
           that are down do process packets coming with certain well known L2 MAC addresses.
           This solution requires such ports to process packets addressed to another 
           well known L2 MAC address (derived from the multicast IP address assigned by IANA).           
    </t>

    <t> Can support unnumbered IP interfaces.
    </t>
    </list></t>

<t>Disadvantages with using a Multicast IP destination address:
    <list style="symbols">
    <t> Unfamiliar. Some bit of the data plane and the source code would need
           to be modified to accept BFD control packets that are multicast.
    </t>
    <t> Need to allocate a new link local multicast address from IANA.</t>
    </list></t>

        <t>Based on the above analysis, we decided to go with multicast IP 
            addressing scheme for the micro BFD sessions.             
           </t>

      </section>
<section title="Design Using Unicast IP encapsulation">
	<t> While we personally think that the Multicast solution for micro BFD sessions is better
          then the Unicast, we briefly describe how we could make Unicast work.
	</t>

	<t> Once LACP has brought up the links, routers will initiate establishing a Unicast 
            BFD session over each component link of the LAG. 
           The remote destination addresses could either be configured on the routers
           or could be discovered via some discovery protocol (that can be standardized later). 
           The exact mechanism to get the destination IP address is beyond the scope of this document.
   </t>

	<t> Some service providers have expressed interest to run BBP on top of the micro
           BFD sessions. In this case, its imperative that Unicast BFD packets corresponding 
           to the micro sessions use a different UDP port (assigned by IANA) lest they get mixed up with the 
           BFD packets meant for the BBP sessions.
	</t>

	<t> This design requires LACP to be present so that it brings up the links
            and ARP processing can begin. Operators however have also expressed interest
            in a solution that works in the absence of LACP. This could be done by using a well known L2 MAC address
           to carry the micro session BFD packets. This way routers dont have to depend upon
           ARP to boot strap the micro BFD sessions.
	</t>
	</section>
      <section title="Discussion about the BFD packet encapsulation">
    <t>With at least three implementations using IP/UDP for the BFD
	packet encapsulation on the LAG member links there cannot be any
	doubt that technically IP/UDP encapsulation works for this purpose.
	What such a view is missing though is the requirement to have some
	kind of standardized packet send and receive API to allow everyone
	to implement the new standard.</t>

	<t>The user interface for IP/UDP packets would be either for UDP,
	defined in 
    <xref target="RFC0768">RFC&nbsp;0768</xref>,
	or the IP user interface, defined in
    <xref target="RFC0791">RFC&nbsp;0791</xref>.
	None of them allows to provide any control about the LAG member port
	a packet is transmitted nor does it provide the information on which
	port the packet was received. Thus an agreement is required to
	extend these APIs to control the sending port and to know about the
	receiving port.</t>

	<t>If we don't use the layer-3 user interface then we need to look
	at 802.3 and 802.1AX standards, as they describe in the case of a
	LAG what is "below" the IP layer. In this case we are already on
	the Ethernet layer and adding IP and UDP headers to the BFD packet
	may either conflict with IP/UDP itself or may be without any
	function. Thus encapsulating BFD directly in Ethernet and using a
	user interface fitting into 802.3 and 802.1AX seems a viable
	approach.</t>
      </section>

      <section title="Details of an example User interface for BFD packets">
    <t>An additional sublayer is inserted between the MAC or MAC control
	of the physical port(s) and the Link aggregation sublayer. This allows
	to receive and inject BFD packets on every LAG port.</t>

    <t>This additional sublayer allows to drop Ethernet frames with a
	specific Ethernet type (we name the value "BfdEtherType" from now)
	off the stream of frames coming from the MAC
	layer. It hands over the dropped-off frames to the BFD module.
	The new sublayer also allows to inject Ethernet frames with the
	specific Ethernet type into the stream of frames towards the MAC
	layer. All other frames are passing transparently between the MAC
	and the link aggregation layer.</t>

	<figure align="center" anchor="api-diagram">
	  <artwork align="center"><![CDATA[
           +------------+
           | Mac Client |
           +------------+
             ^        |
             |        |
           ...................
             |        |
             |        V
+---------------------------------+
|        Link aggregation         |
|            sublayer             |
+---------------------------------+
   ^                   ^
   |                   |
........................................
   |                   |
   |                   |                  +-----+
   |       +---------- | ---------------->| BFD |
   |       |           |       +--------->|     |
   V (A)   V (B)       V       V          +-----+
+-------------+     +-------------+
|  inject/    |     |  inject/    |
|  drop-off   | ... |  drop-off   |
+-------------+     +-------------+
       ^ (C)               ^
       |                   |
........................................
       |                   |
       V                   V
+-------------+     +-------------+
| MAC control | ... | MAC control |
| (optional)  |     | (optional)  |
+-------------+     +-------------+
|    MAC      |     |    MAC      |
+-------------+     +-------------+
|  Physical   |     |  Physical   |
|   layer     |     |   layer     |
+-------------+     +-------------+
	  ]]></artwork>
	  <postamble>Inject/drop-off mechanism for specific BFD Ethernet frames
	  </postamble>
	</figure>
    <t>The API in (A) behaves like the MAC side of the API defined in
	section 2.3 of <xref target="IEEE802.3"></xref>.
	All MA_DATA and MA_CONTROL requests are passed
	transparently to the API in (C), which behaves like the MAC Client
	side. Vice versa all MA_CONTROL indication received at (C) are passed
	transparently to (A). MA_DATA indication received at (C) are passed
	to (A) when the Ethernet Type is not BfdEtherType. Otherwise the
	MA_DATA indication is passed to API (B), which behaves like the MAC
	side of the API in section 2.3 <xref target="IEEE802.3"></xref>
	but without any MAC Control support.</t>

	<t>A MA_DATA request received at (B) is passed to (C) if the
	Ethernet Type field in the frame is set to BfdEtherType; otherwise
	the frame is dropped.</t>
      </section>

	  <section title="BLM sessions and the address family">
    <t>When the BFD encapsulation is Ethernet then the following
	discussion is obsolete. In case of IP/UDP encapsulation it should be
	highlighted that the way a BLM session is defined above means a BLM
	request for a LAG with IPv4 and a BLM request for the same LAG with
	IPv6 is considered a shared session, with the obvious conflict that
	the micro session must be all either IPv4 exlcusiv-or IPv6. One
	could consider to allow BLM-v4 and BLM-v6 for the same LAG instead,
	which would mean we have to separate concluded states. This would
	require more details in <xref target="l3-apps"></xref>.
	</t>
	  </section>
    </section>

  </back>
</rfc>
