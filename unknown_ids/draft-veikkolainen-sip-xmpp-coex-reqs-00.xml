<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc compact="yes"?>
<?rfc sortrefs="yes"?>
<?rfc linkmailto="no"?>
<?rfc strict="no"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>


<rfc ipr="trust200902" category="std">

  <front>
    <title abbrev="Requirements for combining SIP with XMPP">
      Requirements and Use Cases for Combining SIP Based
      Real-time Media Sessions With XMPP Based Instant Messaging and
      Presence Service.   
    </title>
    
    <author initials="S" surname="Veikkolainen" fullname="Simo Veikkolainen">
      <organization>Nokia</organization>
      <address>
	<postal>
	  <street>P.O. Box 407</street>
	  <city>NOKIA GROUP</city> 
	  <region>FI</region> 
	  <code>00045</code>
	  <country>Finland</country>
	</postal>
	<phone>+358 50 486 4463 </phone>
	<email>simo.veikkolainen@nokia.com</email>
      </address>
    </author>
    
    <author initials="M" surname="Isomaki" fullname="Markus Isomaki">
      <organization>Nokia</organization>
      <address>
	<postal>
	  <street>P.O. Box 100</street>
	  <city>NOKIA GROUP</city> 
	  <region>FI</region> 
	  <code>00045</code>
	  <country>Finland</country>
	</postal>
	<phone>+358 50 522 5984</phone>
	<email>markus.isomaki@nokia.com</email>
      </address>
    </author>
    
    <date day="26" month="February" year="2010"/>
<!--    <area>RAI</area> -->
    <workgroup>DISPATCH WG</workgroup>
    <keyword>I-D</keyword>
    <keyword>Internet-Draft</keyword>
    <keyword>XMPP</keyword>
    <keyword>SIP</keyword>
    <abstract>
      <t>
	This memo defines use cases and requirements for
	combining Session Initiation Protocol (SIP) based real-time
	media sessions with Extensible Messaging and Presence Protocol
	(XMPP) based instant messaging and presence services in a
	seamless manner. 
      </t>
    </abstract> 
  </front>
  
  <middle>
    <section anchor="intro" title="Introduction">
      
      <t>
	Currently most standards-based Voice over IP (VoIP)
	deployments use Session Initiation Protocol (SIP) <xref
	target="RFC3261"/>. In addition 
	to providing basic voice service SIP has an extensive support
	for more advanced telephony features including interworking
	with the traditional Public Switched Telephone Network
	(PSTN). SIP is also gaining popularity in the field of video
	communication.
      </t>

      <t>
	At the same time, the Extensible Messaging and Presence
	Protocol (XMPP; <xref
	target="RFC3920"/> and <xref
	target="RFC3921"/>) is enjoying widespread usage in instant
	messaging and presence services. An interesting scenario
	arises when a SIP based voice and video service is combined
	together with an XMPP based instant messaging and presence
	service.
      </t>
      
      <t>
	This memo presents a set of use cases and requirements
	for an integrated SIP User Agent and XMPP client
	that aims to offer a seamless user experience
	combining SIP based voice and video with XMPP based instant messaging
	and presence. 
      </t>
      
      <t>
	The main issues that need to be addressed when offering such
	combined services are identities and addressing. SIP and XMPP
	both use a similar addressing scheme (based on "user@domain"
	structure) to identify users and endpoints but there are some
	subtle differences as well. We do not assume any
	algorithmic correlation or translation between SIP and XMPP
	Universal Resource Identifiers (URI), even when they identify
	the "same" user or endpoint. New protocol mechanisms are needed
	to tie together communication contexts that are based on the two
	protocols. 
      </t>
	  
      <t>
	The document structure is as follows: <xref
	target="sec-conventions"/> presents the document conventions
	and definitions, <xref
	target="sec-scope-and-deployment-scenarios"/> defines the
	scope and presents deployment scenarios, and <xref
	target="sec-use-cases-and-requirements"/> describes use cases
	and requirements.
      </t>
    </section>
    
    <section title="Conventions Used in This Document"
	     anchor="sec-conventions"> 
      
      <t>
	The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
	"SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
	"OPTIONAL" in this document are to be interpreted as described in
	BCP 14, <xref target="RFC2119">RFC 2119</xref> and indicate
	requirement levels for compliant implementations.
      </t>

<!--

     <t>
	The following definitions are used in this memo:
      </t>
      <t>
	<list>
	  <t>
	    Integrated endpoint is an implementation that combines
	    the functionality of SIP User Agent and XMPP client and can
	    offer its user a seamless user experience in the 
	    sense that a single User Interface is presented
	    for voice and video communication using the SIP protocol and 
          instant messaging and presence sharing using
	    XMPP. 
	  </t>
	  
	  <t>
	    Separated endpoint refers to independent SIP User Agent and
	    XMPP client implementations that are not aware of each other
	    even if they are used by the same user. The users use SIP UA for
	    voice and video, while using XMPP client for IM and
	    presence. 
	  </t> 
	</list>
      </t>

-->
  
    </section>
    
    <section title="Intended scope and deployment scenarios" 
	     anchor="sec-scope-and-deployment-scenarios">
      
      <t>
	This section presents the intended scope of the work and the assumptions that are made about SIP and
	XMPP deployments with respect to endpoints and server
	infrastructure. 
      </t>
      
      <t>
	This work is about combined use of SIP and XMPP in a single integrated endpoint. 
      Protocol translation through a gateway between SIP and XMPP is out of scope; 
      that is the subject of other work, see for example <xref
	target="I-D.saintandre-sip-xmpp-core"/>. 
      </t>

      <t>
	The initial focus is on one-to-one communication only. Multiparty use
	cases such as combining SIP voice conference with XMPP IM
	group chat are beyond the scope. This maybe subject of later work.
      </t>

      <t>
	SIP is able to offer Presence and IM services via the SIP IM
	and Presence Leveraging Extensions (SIMPLE)(see e.g. <xref
	target="RFC3428"/> and <xref target="RFC3856"/>). XMPP is able to
	offer voice services via the Jingle extension <xref
	target="XEP-0166"/>. Offering overlapping services
	(e.g. presence) via both SIP and XMPP is out of scope of this
	document. However, it is expected that such scenarios will
	exist, and guidelines for developers and service providers may
	be given in other documents.
      </t>

      <t>
	It is assumed that combining SIP based real-time services with XMPP based presence
	and IM service can be accomplished purely in the endpoints; no
	support is needed in the service infrastructure. The intent is that the combined
      SIP and XMPP endpoints can use already existing SIP and XMPP services, which
      makes deployment much easier. In general the SIP and XMPP service
      infrastructures can be totally independent from each other. It is 
	possible to achieve seamless integration even when SIP and
	XMPP services are offered by different service providers. It is of course
      possible (and likely) that the same provider offers both SIP and XMPP service, but 
      that does not affect how endpoints use the protocols between each other.
      </t>

<!--

      <t>
	We assume that the server infrastructures for SIP and
	XMPP are totally separated, thus no exchange of information
	is expected between these. We do not even assume that SIP
	and XMPP services are offered by the same service
	provider. This means that the user identities can belong
	to two different domains. However, if the same service
	provider offers both SIP and XMPP service, it is recommended
	that the URIs sip:user@domain and xmpp:user@domain
	correspond to the same user. 
      </t>

-->
      
      <t>
	We assume that the user initially only needs to know the contact
	address of the other user in one protocol space. The contact
	address for the other protocol must be learned by some means.
      </t>
      
      <t>
	We consider only cases where two integrated endpoints
	interact. When an integrated endpoint communicates with a
	separated endpoint, normal SIP and XMPP procedures apply and
	no extensions defined in this memo are used. 
      </t>
      
    </section>
    
    <section title="Use cases and requirements" anchor="sec-use-cases-and-requirements">

      <t>
      In this section we enumerate the actual use cases that
	the combined service must accommodate for, and define the protol requirements
      that stem from these use cases.
      </t>

      <t>
      The use cases are as follows:
      </t>
      
      <t>
	<list style="symbols">
	  <t>
	    Two users who both use an integrated endpoint start an
	      (XMPP) IM conversation. After the exchange of initial
	      messages, their UIs show that the other party is capable
	      of (SIP) voice and/or video in addition to IM. Either
	      user can at any point add voice and/or video component
	      to the conversation in such a way that at the other user’s end it arrives at
	      the same endpoint and conversation context where the IM
	      exchange is already taking place. (Note that for this
	      use case the conversation initiator initially only
	      needs to know the other user’s XMPP user id.)
	  </t>

	  <t>
	    Two users who both use an integrated endpoint start a
	    (SIP) voice and/or video call. As the call is
	    established, their UIs show that the other party is
	    capable for (XMPP) IM. Either user can at any point add
	    an IM component to the conversation in such a way that at the other user’s end
	    it arrives at the same endpoint and conversation
	    context where the voice and/or video call is already
	    taking place. (Note that for this use case the caller
	    initially only needs to know the other user’s SIP user
	    id.)    
	    <list style="empty">
	      <t>
		It is possible to vary the two cases above so that
		one of the users initiates a "multimedia call" to
		the other one, i.e. SIP voice and/or video and XMPP
		IM are all active from the start. Technically this may
		happen according to the two-phased approach above,
		and it invisible from the end-user.
	      </t>
	    </list>
	  </t>
	  
	  <!--	    <t>
	      It is possible to vary the two use cases above so that
	      one of the users initiates a “multimedia call” to the
	      other one, i.e. SIP voice and/or video and XMPP IM are
	      all active from the start. (Technically this may happen
	      according to the two-phased approach above, but
	      invisibly to the end-user.) It is possible that the
	      callee does not support all necessary protocol or media
	      capabilities, so the call may end up being reduced to
	      just voice and/or video or IM conversation. 
	    </t>
-->

	  <t>
	    A user of an integrated endpoint is able to publish her
	    SIP voice and video related presence status as part of
	    her XMPP presence. The status includes information such
	    as user’s SIP contact address (for the integrated
	    endpoint), media capability and availability and whether
	    the user is currently "on the phone". Another user of an
	    integrated endpoint can see the presence status
	    (assuming she is authorized for that) and based on that
	    initiate calls or populate her address book further use. For instance watcher’s UI can now for
	    certain show that the user on her roster is capable
	    of receiving multimedia calls. (Note that the watcher
	    initially only needs to know the other user’s XMPP user id.)    
	  </t>
	</list>
	
	<t>
	  <list>
	    <t>A user who has obtained another user’s SIP URI is able
             to discover the other user’s XMPP URI so that she can
             send the other user XMPP IM or subscribe to the other user’s
             presence, or just populate her address book for futher use.
             The user is able to do this without bothering the other user,
             provided the other user has pre-authorized the operation.
             but 
           </t> 
	  </list>
	</t>

      </t>

<!--	<t>
	  A user wishing to establish a connection with another user
	  selects a contact from the phonebook and establishes the
	  session or connection as per normal procedures defined for
	  the protocol in question.
	</t>
	
	<t>
	  If a user wants to add a voice component to an ongoing
	  instant messaging session, or vice versa, the new connection
	  is also established using the normal procedures defined the
	  the protocol. 
	</t>

	<t>
	  In oder to find out that the incoming connection request is
	  related to an ongoing communication with the same user, the
	  terminating client needs to compare the originating
	  identities of the sessions.
	</t>

	<t>
	  Often, the identity of the originating user in the other
	  domain is not known by the terminating client. Therefore, a
	  mechanism should be available to carry the identifiers from
	  another protocol domain.
	</t>

	<t>
	  The presence information is managed by XMPP. Normally, XMPP
	  presence clients allow the user to manually set the presence
	  status (available, busy, away, etc.). One useful feature
	  when offering VoIP services is to set the presence status
	  automatically to busy when the user is engaged in a call, or
	  set the presence status to do-not-disturb when the user
	  has set DnD on from the VoIP client. Similarly, setting
	  presence to DnD should result in the voice calls to be
	  treated as if the user set the DnD feature on.
	</t>

	<t>
	  We assume that an integrated client has an ability to
	  monitor the status of the communication in the other
	  protocol domain. For example, an application, when
	  establishing or receiving a voice call also at the same time
	  instructs the client to set the presence status to
	  busy. This is quite straightforward requiremnt for an
	  integarted client. 
	</t>
-->

      <t>
	  From the use cases, we can derive the following protocol requirements:
      </t>
      
      <t>
	<list style="format REQ-%d:">
	  
	  <t>
          When endpoint A sends an XMPP message to endpoint B, it must be able
          to include its SIP contact and correlation information in the message, 
          so that endpoint B can initiate a SIP real-time media session 
          with endpoint A. The SIP session initiation must be able to
          carry information that allows endpoint A to to correlate the session with the
          XMPP message it sent earlier.
        </t>
        
          <list style="empty">
          <t>
          As including the same information
	    in every XMPP message would create some overhead, it is
	    desirable to be able to convey the SIP contact and correlation only once per
	    IM conversation/thread.
          </t>
          </list> 

	  <t>
          When endpoints A and B establish a real-time media session with SIP, they
          must during the session initiation be able to exchange their XMPP contact
          and correlation information so that either endpoint can send an XMPP
          message to the other endpoint. That XMPP message must be able to carry information
          which allows its recipient to correlate it with the SIP session.
	  </t>
	  
	  <t>
	    It must be possible to include SIP real-time media related
	    contact and status in XMPP presence information. The
	    information must contain at least SIP contact address to
	    identify a user or a user agent instance, media
	    capabilities and general availability status.
	  </t>

         <t>
           It must be possible for a user, who only knows another user’s SIP URI, to
           learn the other user’s XMPP URI.
	   </t>

	</list>
      </t>

      <t>
	<list>
	  <t>OPEN ISSUE: Should we define requirements related to
	  error or corner cases here. For instance what happens to
	  communication attempts after the other party has closed the
	  conversation context, e.g. a correlated XMPP message that is
	  sent after the related SIP session is terminated. Or a SIP
	  INVITE that appears two days after the XMPP IM conversation
	  was ended.</t> 
                

	  <t>NOTE: There is also an implicit requirement that we must
	  take Session Border Controllers into account when defining
	  how SIP User Agents are able to identify an existing session
	  between them in a common manner.</t> 
	</list>
      </t>

    </section>
    

  
  <section title="IANA Considerations" anchor="sec-iana">
    <t>This document contains no IANA considerations.</t>
  </section>
  
  
  <section title="Security Considerations" anchor="sec-security">

    <t>
      The contact and correlation information is
      sensitive and we need to prevent connection hijacking and
      impersonation. If the contact information that is sent over
      one protocol is forged, the identity verification mechanism
      in the other no longer help as an attacker is able to assert
      the false identity.
    </t> 
  </section>
  
  <section title="Acknowledgments" anchor="sec-acks">
    <t>
      TBD
    </t>
  </section>
  
  
</middle>

<back>
  <references title="Normative References">
    <?rfc include="reference.RFC.2119" ?>

  </references>
  
  <references title="Informative References">
    <?rfc include="reference.I-D.saintandre-sip-xmpp-core" ?>
    <?rfc include="reference.RFC.3261" ?>
    <?rfc include="reference.RFC.3921" ?>
    <?rfc include="reference.RFC.3920" ?>
    <?rfc include="reference.RFC.3428" ?>
    <?rfc include="reference.RFC.3856" ?>

    <reference anchor="XEP-0166" target="http://xmpp.org/extensions/xep-0166.html">
        <front>
            <title>Jingle</title>
            <author initials="S" surname="Ludwig" fullname="Scott
							    Ludwig"></author>
            <author initials="J" surname="Beda" fullname="Joe Beda"></author>
            <author initials="P" surname="Saint-Andre" fullname="Peter Saint-Andre"></author>
            <author initials="R" surname="McQueen" fullname="Robert
							     McQueen"></author>
            <author initials="S" surname="Egan" fullname="Sean Egan"></author>
            <author initials="J" surname="Hildebrand" fullname="Joe Hildebrand"></author>

            <date month="December" year="2009" />
        </front>
<!--        <seriesInfo name="" value="" /> -->
    </reference>

    </references>
    
    
  </back>
  
</rfc>
