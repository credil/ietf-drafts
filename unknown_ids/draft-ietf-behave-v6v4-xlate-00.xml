<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- Some of the more generally applicable PIs that most I-Ds might want to use -->
<!-- Try to enforce the ID-nits conventions and DTD validity -->
<?rfc strict='yes' ?>
<!-- Items used when reviewing the document -->
<?rfc comments='no' ?>
<!-- Controls display of <cref> elements -->
<?rfc inline='no' ?>
<!-- When no, put comments at end in comments section,
                                otherwise, put inline -->
<?rfc editing='no' ?>
<!-- When yes, insert editing marks: editing marks consist of a 
                                string such as <29> printed in the blank line at the 
                                beginning of each paragraph of text. -->
<!-- Create Table of Contents (ToC) and set some options for it.  
        Note the ToC may be omitted for very short documents,but idnits insists on a ToC 
        if the document has more than 15 pages. -->
<?rfc toc='yes'?>
<?rfc tocompact='yes'?>
<!-- If 'yes' eliminates blank lines before main section entries. -->
<?rfc tocdepth='3'?>
<!-- Sets the number of levels of sections/subsections... in ToC -->
<!-- Choose the options for the references. 
        Some like symbolic tags in the references (and citations) and others prefer 
        numbers. The RFC Editor always uses symbolic tags.
        The tags used are the anchor attributes of the references. -->
<?rfc symrefs='yes'?>
<?rfc sortrefs='yes' ?>
<!-- If 'yes', causes the references to be sorted in order of tags.
                                This doesn't have any effect unless symrefs is "yes" also. -->
<!-- These two save paper: Just setting compact to 'yes' makes savings by not starting each 
        main section on a new page but does not omit the blank lines between list items. 
        If subcompact is also "yes" the blank lines between list items are also omitted. -->
<?rfc compact='yes' ?>
<?rfc subcompact='no' ?>
<!-- end of list of popular I-D processing instructions -->
<!-- end of list of processing instructions -->
<rfc obsoletes="2765"  category="std" docName="draft-ietf-behave-v6v4-xlate-00"
     ipr="pre5378Trust200902">
  <front>
    <title abbrev="IPv4/IPv6 Translation">IP/ICMP Translation
    Algorithm</title>

    <author fullname="Xing Li" initials="X." role="editor" surname="Li">
      <organization>CERNET Center/Tsinghua University</organization>

      <address>
        <postal>
          <street>Room 225, Main Building, Tsinghua University</street>

          <city>Beijing</city>

          <code>100084</code>

          <region></region>

          <country>China</country>
        </postal>

        <phone>+86 62785983</phone>

        <email>xing@cernet.edu.cn</email>
      </address>
    </author>

    <author fullname="Congxiao Bao" initials="C." role="editor" surname="Bao">
      <organization>CERNET Center/Tsinghua University</organization>

      <address>
        <postal>
          <street>Room 225, Main Building, Tsinghua University</street>

          <city>Beijing</city>

          <code>100084</code>

          <region></region>

          <country>China</country>
        </postal>

        <phone>+86 62785983</phone>

        <email>congxiao@cernet.edu.cn</email>
      </address>
    </author>

    <author fullname="Fred Baker" initials="F.J." role="editor"
            surname="Baker">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street></street>

          <city>Santa Barbara</city>

          <code>93117</code>

          <region>California</region>

          <country>USA</country>
        </postal>

        <phone>+1-408-526-4257</phone>

        <email>fred@cisco.com</email>
      </address>
    </author>

    <date year="2009" />

    <area>Transport</area>

    <workgroup>behave</workgroup>

    <abstract>
      <t>This document specifies an update to the Stateless IP/ICMP
      Translation Algorithm (SIIT) described in RFC 2765. The algorithm
      translates between IPv4 and IPv6 packet headers (including ICMP
      headers).</t>

      <t>This specification addresses both a stateless and a stateful mode. In
      the stateless mode, translation information is carried in the address
      itself, permitting both IPv4-&gt;IPv6 and IPv6-&gt;IPv4 session
      establishment with neither state nor configuration in the IP/ICMP
      translator. In the stateful mode, translation state is maintained
      between IPv4 address/transport port tuples and IPv6 address/transport
      port tuples, enabling IPv6 systems to open sessions with IPv4 systems.
      The choice of operational mode is made by the operator deploying the
      network and is critical to the operation of the applications using
      it.</t>

      <t>Significant issues exist in the stateless and stateful modes that are
      not addressed in this document, related to the address assignment and
      the maintenance of the translation tables, respectively. This document
      confines itself to the actual translation.</t>
    </abstract>

    <note title="Acknowledgement of previous work">
      <t>This document is a product of the 2008-2009 effort to define a
      replacement for NAT-PT. It is an update to and directly derivative from
      Erik Nordmark's <xref target="RFC2765"></xref>, which similarly provides
      both stateless and stateful translation between IPv4 <xref
      target="RFC0791"></xref> and IPv6 <xref target="RFC2460"></xref>, and
      between ICMPv4 <xref target="RFC0792"></xref> and ICMPv6 <xref
      target="RFC4443"></xref>. The original document was a product of the
      NGTRANS working group.</t>

      <t>The changes in this document reflect five components:<list
          style="numbers">
          <t>Redescribing the network model to map to present and projected
          usage.</t>

          <t>Moving the address format to the framework document, to
          coordinate with other drafts on the topic.</t>

          <t>Description of both stateful and stateless operation.</t>

          <t>Some changes in ICMP.</t>

          <t>Updating references.</t>
        </list></t>
    </note>

    <note title="Requirements">
      <t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t>
    </note>
  </front>

  <middle>
    <section anchor="section1" title="Introduction and Motivation">
      <t>An understanding of the framework presented in <xref
      target="I-D.ietf-behave-v6v4-framework"></xref> is presumed in this
      document. With that remark...</t>

      <t>The transition mechanisms specified in <xref target="RFC4213"></xref>
      handle the case of dual IPv4/IPv6 hosts interoperating with both dual
      hosts and IPv4-only hosts, which is needed early in the transition to
      IPv6. The dual hosts are assigned both an IPv4 and one or more IPv6
      addresses. The number of available globally unique IPv4 addresses are
      becoming smaller and smaller as the Internet grows; we expect that there
      will be a desire to take advantage of the large IPv6 address and not
      require that every new Internet node have a permanently assigned IPv4
      address.</t>

      <t>The SIIT <xref target="RFC2765"></xref> is designed for the case for
      small networks (e.g., a single subnet) and for a site that has IPv6-only
      hosts in a dual IPv4/IPv6 network. This use assumes a mechanism for the
      IPv6 nodes to acquire a temporary address from the pool of IPv4
      addresses. However, SIIT is not to be useful in the case when the IPv6
      nodes to acquire temporary IPv4 addresses from a "distant" SIIT box
      operated by a different administration, or require that the IPv6 routing
      contain routes for IPv6-mapped addresses (The latter is known to be a
      very bad idea due to the size of the IPv4 routing table that would
      potentially be injected into IPv6 routing in the form of IPv4-mapped
      addresses.)</t>

      <t>In addition, due to the IPv4 address deletion problem, it is
      desirable that a single IPv4 address needs to be shared via transport
      port multiplexing technique for different IPv6 nodes when they
      communicate with other IPv4 hosts.</t>

      <t>Furthermore, in the SIIT <xref target="RFC2765"></xref>
      implementation, an IPv6-only node that works through SIIT translators
      needs some modifications beyond a normal IPv6-only node. These
      modifications are not strictly implied in this document, since the
      normal IPv6 addresses can be used in the IPv6 end nodes.</t>

      <t>The detailed discussion of the transition scenarios is presented in
      <xref target="I-D.ietf-behave-v6v4-framework"></xref>, the technical
      specifications of the translation algorithm itself is illustrated in
      this document.</t>

      <section anchor="section1.0" title="Translation Model">
        <t>This document specifies the translation algorithm that is one of
        the components described in <xref
        target="I-D.ietf-behave-v6v4-framework"></xref> needed to make
        IPv6-only nodes interoperate with IPv4-only nodes as shown in Figure
        1.</t>

        <figure anchor="cloud1" title="Translation Model">
          <artwork align="center"><![CDATA[                 
           --------          --------
         //  IPv4  \\      //  IPv6  \\
        /   Domain   \    /   Domain   \
       /             +----+      +--+   \
      |              |XLAT|      |S2|    |  Sn: Servers
      | +--+         +----+      +--+    |  Hn: Clients
      | |S1|         +----+              |
      | +--+         |DNS |      +--+    |  XLAT: V4/V6 Translator
       \     +--+    +----+      |H2|   /   DNS:  DNS Server
        \    |H1|    /    \      +--+  /
         \\  +--+  //      \\        //
           --------          --------
]]></artwork>
        </figure>

        <t>The translation model consists of two or more network domains
        connected by one or more IP/ICMP translators. One of those networks
        either routes IPv4 but not IPv6, or contains some hosts that only
        implement IPv4. The other network either routes IPv6 but not IPv4, or
        contains some hosts that only implement IPv6. Both networks contain
        clients, servers, and peers.</t>
      </section>

      <section anchor="section1.12" title="Applicability and Limitations">
        <t>The use of this translation algorithm assumes that the IPv6 network
        is somehow well connected i.e. when an IPv6 node wants to communicate
        with another IPv6 node there is an IPv6 path between them. Various
        tunneling schemes exist that can provide such a path, but those
        mechanisms and their use is outside the scope of this document <xref
        target="RFC2765"></xref>.</t>

        <t>The translation algorithm can be used no only in a subnet or small
        networks, but can also be used in the autonomous system scope.</t>

        <t>The translating function as specified in this document does not
        translate any IPv4 options and it does not translate IPv6 routing
        headers, hop-by-hop extension headers, destination options headers or
        source routing headers <xref target="RFC2765"></xref>.</t>

        <t>The issues and algorithms in the translation of datagram containing
        TCP segments are described in <xref target="RFC5382"></xref>. The
        considerations of that document are applicable in this case as
        well.</t>

        <t>Fragmented IPv4 UDP packets that do not contain a UDP checksum
        (i.e. the UDP checksum field is zero) are not of significant use over
        wide-areas in the Internet and will not be translated by the IP/ICMP
        translator <xref target="Miller"></xref>.</t>

        <t>The considerations of The IPSec <xref target="RFC4301"></xref>
        <xref target="RFC4302"></xref> <xref target="RFC4303"></xref>
        functionality discussed in <xref target="RFC2765"></xref> are
        applicable in this case as well.</t>

        <t>IPv4 multicast addresses <xref target="RFC3171"></xref> cannot be
        mapped to IPv6 multicast addresses <xref target="RFC3307"></xref>
        based on the unicast mapping rule. However, a special rule for address
        translation can be created for the multicast packet translation
        algorithm; if that is done, the IP/ICMP header translation aspect of
        this memo works.</t>
      </section>

      <section anchor="prefix-stateless" title="Stateless vs. Stateful Mode">
        <t>The IP/ICMP translator has two possible modes of operation:
        stateless and stateful. In both cases, we assume that a system that
        has an IPv4 address but not an IPv6 address is communicating with a
        system that has an IPv6 address but no IPv4 address, or that the two
        systems do not have contiguous routing connectivity in either domain
        and hence are forced to have their communications translated.</t>

        <t>In the stateless mode, one system has an IPv4 address and one has
        an address of the form specified in <xref
        target="I-D.xli-behave-v4v6-prefix"></xref>, which is explicitly
        mapped to an IPv4 address. In this mode, there is no need to concern
        oneself with port translation or translation tables, as the IPv4 and
        IPv6 counterparts are algorithmically related.</t>

        <t>In the stateful mode, the same address type will represent the
        system with the IPv4 address, but the IPv6 system may use any <xref
        target="RFC4291"></xref> address except one in that range. In this
        case, a translation table is required.</t>
      </section>

      <section anchor="address"
               title="IPv4-embedded IPv6 addresses and IPv4-related IPv6 addresses">
        <t>In SIIT <xref target="RFC2765"></xref> an IPv6 node should send an
        IPv6 packet where the destination address is the IPv4-mapped address
        and the source address is the node's temporarily assigned
        IPv4-translated address. If the node does not have a temporarily
        assigned IPv4-translated address it should acquire one. Different from
        the SIIT model, as described in <xref
        target="I-D.xli-behave-v4v6-prefix"></xref> the new forms of the
        IPv6 addresses are introduced.</t>

        <t>IPv4-embedded IPv6 addresses are the IPv6 addresses which have
        unique relationship to specific IPv4 addresses. This relationship is
        self-described by embedding IPv4 address in the IPv6 address. The
        IPv4-embedded IPv6 addresses are used for both the stateless and the
        stateful modes.</t>

        <t>IPv4-related IPv6 addresses are the IPv6 addresses which have
        unique relationship to specific IPv4 addresses. This relationship is
        maintained as session-initiated dynamic state (mapping between IPv4
        address/transport port and IPv6 address/transport port) in the IP/ICMP
        translator. IPv4-related IPv6 addresses are used for the stateful mode
        only.</t>
      </section>
    </section>

    <section anchor="section3" title="Translating from IPv4 to IPv6">
      <t>When an IP/ICMP translator receives an IPv4 datagram addressed to a
      destination towards the IPv6 domain, it translates the IPv4 header of
      that packet into an IPv6 header. Since the ICMP <xref
      target="RFC0792"></xref><xref target="RFC4443"></xref>, TCP <xref
      target="RFC0793"></xref> and UDP <xref target="RFC0768"></xref> headers
      contain checksums that include IP header information, the ICMP and
      transport-layer headers MUST be updated. This is different from <xref
      target="RFC2765"></xref>, since <xref target="RFC2765"></xref> uses
      special prefix (0::ffff:0:a:b:c:d) to avoid the recalculation of the
      transport-layer header checksum. The data portion of the packet is left
      unchanged. The IP/ICMP translator then forwards the packet based on the
      IPv6 destination address. The original IPv4 header on the packet is
      removed and replaced by an IPv6 header.</t>

      <figure anchor="v4v6xlat" title="IPv4-to-IPv6 Translation">
        <artwork align="center"><![CDATA[
+-------------+                 +-------------+
|    IPv4     |                 |    IPv6     |
|   Header    |                 |   Header    |
+-------------+                 +-------------+
|  Transport  |                 |  Fragment   |
|   Layer     |      ===>       |   Header    |
|   Header    |                 |(not always) |
+-------------+                 +-------------+
|             |                 |  Transport  |
~    Data     ~                 |   Layer     |
|             |                 |   Header    |
+-------------+                 +-------------+
                               |             |
                               ~    Data     ~
                               |             |
                               +-------------+
]]></artwork>
      </figure>

      <t>One of the differences between IPv4 and IPv6 is that in IPv6 path MTU
      discovery is mandatory but it is optional in IPv4. This implies that
      IPv6 routers will never fragment a packet - only the sender can do
      fragmentation.</t>

      <t>When the IPv4 node performs path MTU discovery (by setting the DF bit
      in the header) the path MTU discovery can operate end-to-end i.e. across
      the translator. In this case either IPv4 or IPv6 routers might send back
      ICMP "packet too big" messages to the sender. When the IPv6 routers send
      these ICMP errors they will pass through a translator that will
      translate the ICMP error to a form that the IPv4 sender can understand.
      In this case an IPv6 fragment header is only included if the IPv4 packet
      is already fragmented.</t>

      <t>However, when the IPv4 sender does not perform path MTU discovery the
      translator has to ensure that the packet does not exceed the path MTU on
      the IPv6 side. This is done by fragmenting the IPv4 packet so that it
      fits in 1280 byte IPv6 packets accomplishes this, since that is the
      minimum IPv6 packet size. Also, when the IPv4 sender does not perform
      path MTU discovery the translator MUST always include an IPv6 fragment
      header to indicate that the sender allows fragmentation. That is needed
      should the packet pass through an IP/ ICMP translator.</t>

      <t>The above rules ensure that when packets are fragmented, either by
      the sender or by IPv4 routers, the low-order 16 bits of the fragment
      identification is carried end-end, ensuring that packets are correctly
      reassembled. In addition, the rules use the presence of an IPv6 fragment
      header to indicate that the sender might not be using path MTU discovery
      i.e. the packet should not have the DF flag set should it later be
      translated back to IPv4.</t>

      <t>Other than the special rules for handling fragments and path MTU
      discovery the actual translation of the packet header consists of a
      simple mapping as defined below. Note that ICMP packets require special
      handling in order to translate the content of ICMP error message and
      also to add the ICMP pseudo-header checksum.</t>

      <section anchor="section3.1"
               title="Translating IPv4 Headers into IPv6 Headers">
        <t>If the DF flag is not set and the IPv4 packet will result in an
        IPv6 packet larger than 1280 bytes the IPv4 packet MUST be fragmented
        prior to translating it. Since IPv4 packets with DF not set will
        always result in a fragment header being added to the packet the IPv4
        packets must be fragmented so that their length, excluding the IPv4
        header, is at most 1232 bytes (1280 minus 40 for the IPv6 header and 8
        for the Fragment header). The resulting fragments are then translated
        independently using the logic described below.</t>

        <t>If the DF bit is set and the packet is not a fragment (i.e., the MF
        flag is not set and the Fragment Offset is zero) then there is no need
        to add a fragment header to the packet. The IPv6 header fields are set
        as follows: <list style="hanging">
            <t hangText="Version:">6</t>

            <t hangText="Traffic Class:">By default, copied from IP Type Of
            Service octet. According to <xref target="RFC2474"></xref> the
            semantics of the bits are identical in IPv4 and IPv6. However, in
            some IPv4 environments these fields might be used with the old
            semantics of "Type Of Service and Precedence". An implementation
            of a translator SHOULD provide the ability to ignore the IPv4
            "TOS" and always set the IPv6 traffic class to zero. In addition,
            if the translator is at an administrative boundary, the filtering
            and update considerations of <xref target="RFC2475"></xref> may be
            applicable.</t>

            <t hangText="Flow Label:">0 (all zero bits)</t>

            <t hangText="Payload Length:">Total length value from IPv4 header,
            minus the size of the IPv4 header and IPv4 options, if
            present.</t>

            <t hangText="Next Header:">Protocol field copied from IPv4
            header</t>

            <t hangText="Hop Limit:">TTL value copied from IPv4 header. Since
            the translator is a router, as part of forwarding the packet it
            needs to decrement either the IPv4 TTL (before the translation) or
            the IPv6 Hop Limit (after the translation). As part of
            decrementing the TTL or Hop Limit the translator (as any router)
            needs to check for zero and send the ICMPv4 or ICMPv6 "ttl
            exceeded" error.</t>

            <t hangText="Source Address:">The source address is derived from
            the IPv4 source address to form an IPv4-embedded IPv6 address.</t>

            <t hangText="Destination Address:">In stateless mode, which is to
            say that if the IPv4 destination address is within the range of
            the stateless translation prefix, the destination address is
            derived from the IPv4 destination address. <vspace
            blankLines="1" /> In stateful mode, which is to say that if the
            IPv4 destination address is not within the range of the stateless
            translation prefix, the IPv4-related IPv6 address and
            corresponding transport layer destination port are derived from
            the database reflecting current session state in the
            translator.
Database maintanence is as descrbed in <xref target="I-D.ietf-behave-v6v4-xlate-stateful"/>.</t>
          </list></t>

        <t>If IPv4 options are present in the IPv4 packet, they are ignored
        i.e., there is no attempt to translate them. However, if an unexpired
        source route option is present then the packet MUST instead be
        discarded, and an ICMPv4 "destination unreachable/source route failed"
        (Type 3/Code 5) error message SHOULD be returned to the sender.</t>

        <t>If there is need to add a fragment header (the DF bit is not set or
        the packet is a fragment) the header fields are set as above with the
        following exceptions: <list style="hanging">
            <t hangText="IPv6 fields:"><list style="hanging">
                <t hangText="Payload Length:">Total length value from IPv4
                header, plus 8 for the fragment header, minus the size of the
                IPv4 header and IPv4 options, if present.</t>

                <t hangText="Next Header:">Fragment Header (44).</t>
              </list></t>

            <t hangText="Fragment header fields:"><list style="hanging">
                <t hangText="Next Header:">Protocol field copied from IPv4
                header.</t>

                <t hangText="Fragment Offset:">Fragment Offset copied from the
                IPv4 header.</t>

                <t hangText="M flag">More Fragments bit copied from the IPv4
                header.</t>

                <t hangText="Identification">The low-order 16 bits copied from
                the Identification field in the IPv4 header. The high-order 16
                bits set to zero.</t>
              </list></t>
          </list></t>
      </section>

      <section anchor="section3.2" title="Translating UDP over IPv4">
        <t>If a UDP packet has a zero UDP checksum then a valid checksum must
        be calculated in order to translate the packet. A stateless translator
        cannot do this for fragmented packets but <xref
        target="Miller"></xref> indicates that fragmented UDP packets with a
        zero checksum appear to only be used for malicious purposes. Thus this
        is not believed to be a noticeable limitation.</t>

        <t>When a translator receives the first fragment of a fragmented UDP
        IPv4 packet and the checksum field is zero the translator SHOULD drop
        the packet and generate a system management event specifying at least
        the IP addresses and port numbers in the packet. When it receives
        fragments other than the first it SHOULD silently drop the packet,
        since there is no port information to log.</t>

        <t>When a translator receives an unfragmented UDP IPv4 packet and the
        checksum field is zero the translator MUST compute the missing UDP
        checksum as part of translating the packet. Also, the translator
        SHOULD maintain a counter of how many UDP checksums are generated in
        this manner.</t>
      </section>

      <section anchor="section3.3"
               title="Translating ICMPv4 Headers into ICMPv6 Headers">
        <t>All ICMP messages that are to be translated require that the ICMP
        checksum field be updated as part of the translation since ICMPv6
        unlike ICMPv4 has a pseudo-header checksum just like UDP and TCP.</t>

        <t>In addition all ICMP packets need to have the Type value translated
        and for ICMP error messages the included IP header also needs
        translation.</t>

        <t>The actions needed to translate various ICMPv4 messages are: <list
            style="hanging">
            <t hangText="ICMPv4 query messages:"><list style="hanging">
                <t hangText="Echo and Echo Reply (Type 8 and Type 0)">Adjust
                the type to 128 and 129, respectively, and adjust the ICMP
                checksum both to take the type change into account and to
                include the ICMPv6 pseudo-header.</t>

                <t
                hangText="Information Request/Reply (Type 15 and Type 16)">Obsoleted
                in ICMPv4 Silently drop.</t>

                <t
                hangText="Timestamp and Timestamp Reply (Type 13 and Type 14)">Obsoleted
                in ICMPv6 Silently drop.</t>

                <t
                hangText="Address Mask Request/Reply (Type 17 and Type 18)">Obsoleted
                in ICMPv6 Silently drop.</t>

                <t hangText="ICMP Router Advertisement (Type 9)">Single hop
                message. Silently drop.</t>

                <t hangText="ICMP Router Solicitation (Type 10)">Single hop
                message. Silently drop.</t>

                <t hangText="Unknown ICMPv4 types">Silently drop.</t>

                <t hangText="IGMP messages:">While the MLD messages <xref
                target="RFC2710"></xref><xref target="RFC3590"></xref><xref
                target="RFC3810"></xref> are the logical IPv6 counterparts for
                the IPv4 IGMP messages all the "normal" IGMP messages are
                single-hop messages and should be silently dropped by the
                translator. Other IGMP messages might be used by multicast
                routing protocols and, since it would be a configuration error
                to try to have router adjacencies across IP/ICMP translators
                those packets should also be silently dropped.</t>

                <t hangText=" ICMPv4 error messages:"><list style="hanging">
                    <t hangText="Destination Unreachable (Type 3)">For all
                    that are not explicitly listed below set the Type to 1.
                    <vspace blankLines="1" /> Translate the code field as
                    follows: <list style="hanging">
                        <t hangText="Code 0, 1 (net, host unreachable):">Set
                        Code to 0 (no route to destination).</t>

                        <t hangText="Code 2 (protocol unreachable):">Translate
                        to an ICMPv6 Parameter Problem (Type 4, Code 1) and
                        make the Pointer point to the IPv6 Next Header
                        field.</t>

                        <t hangText="Code 3 (port unreachable):">Set Code to 4
                        (port unreachable).</t>

                        <t
                        hangText="Code 4 (fragmentation needed and DF set):">Translate
                        to an ICMPv6 Packet Too Big message (Type 2) with code
                        0. The MTU field needs to be adjusted for the
                        difference between the IPv4 and IPv6 header sizes.
                        Note that if the IPv4 router did not set the MTU field
                        i.e. the router does not implement <xref
                        target="RFC1191"></xref>, then the translator must use
                        the plateau values specified in <xref
                        target="RFC1191"></xref> to determine a likely path
                        MTU and include that path MTU in the ICMPv6 packet.
                        (Use the greatest plateau value that is less than the
                        returned Total Length field.)</t>

                        <t hangText="Code 5 (source route failed):">Set Code
                        to 0 (no route to destination). Note that this error
                        is unlikely since source routes are not
                        translated.</t>

                        <t hangText="Code 6,7:">Set Code to 0 (no route to
                        destination).</t>

                        <t hangText="Code 8:">Set Code to 0 (no route to
                        destination).</t>

                        <t
                        hangText="Code 9, 10 (communication with destination host administratively prohibited):">Set
                        Code to 1 (communication with destination
                        administratively prohibited)</t>

                        <t hangText="Code 11, 12:">Set Code to 0 (no route to
                        destination).</t>
                      </list></t>

                    <t hangText="Redirect (Type 5)">Single hop message.
                    Silently drop.</t>

                    <t hangText="Source Quench (Type 4)">Obsoleted in ICMPv6
                    Silently drop.</t>

                    <t hangText="Time Exceeded (Type 11)">Set the Type field
                    to 3. The Code field is unchanged.</t>

                    <t hangText="Parameter Problem (Type 12)">Set the Type
                    field to 4. The Pointer needs to be updated to point to
                    the corresponding field in the translated include IP
                    header.</t>

                    <t hangText="ICMP Error Payload">The <xref
                    target="RFC4884"></xref> length field should be updated to
                    reflect the changed length of the datagram. At the time of
                    this writing, the authors are not aware of any standard
                    ICMP extension objects containing realm specific
                    information.</t>
                  </list></t>
              </list></t>
          </list></t>
      </section>

      <section anchor="section3.4"
               title="Translating ICMPv4 Error Messages into ICMPv6">
        <t>There are some differences between the IPv4 and the IPv6 ICMP error
        message formats as detailed above. In addition, the ICMP error
        messages contain the IP header for the packet in error, which needs to
        be translated just like a normal IP header. The translation of this
        "packet in error" is likely to change the length of the datagram thus
        the Payload Length field in the outer IPv6 header might need to be
        updated.</t>

        <figure anchor="v4v6icmp" title="IPv4-to-IPv6 ICMP Error Translation">
          <artwork align="center"><![CDATA[
+-------------+                 +-------------+
|    IPv4     |                 |    IPv6     |
|   Header    |                 |   Header    |
+-------------+                 +-------------+
|   ICMPv4    |                 |   ICMPv6    |
|   Header    |                 |   Header    |
+-------------+                 +-------------+
|    IPv4     |      ===>       |    IPv6     |
|   Header    |                 |   Header    |
+-------------+                 +-------------+
|   Partial   |                 |   Partial   |
|  Transport  |                 |  Transport  |
|   Layer     |                 |   Layer     |
|   Header    |                 |   Header    |
+-------------+                 +-------------+
]]></artwork>
        </figure>

        <t>The translation of the inner IP header can be done by recursively
        invoking the function that translated the outer IP headers.</t>
      </section>

      <section anchor="transport" title="Transport-layer Header Translation">
        <t>For the IPv6 addresses described in <xref
        target="I-D.xli-behave-v4v6-prefix"></xref>, the recalculation
        and updating of the transport-layer headers MUST be performed.
        UDP/IPv4 datagrams with a checksum of zero MAY be dropped and MAY have
        their checksum calculated for injection into the IPv6 domain. This
        choice SHOULD be under configuration control.</t>
      </section>

      <section anchor="section3.5" title="Knowing when to Translate">
        <t>If the IP/ICMP translator is implemented in a router providing both
        translation and normal forwarding, and the address is reachable by a
        more specific route without translation, the router should forward it
        without translating it. Otherwise, when an IP/ICMP translator receives
        an IPv4 datagram addressed to a destination towards the IPv6 domain,
        the packet will be translated to IPv6.</t>
      </section>
    </section>

    <section anchor="section4" title="Translating from IPv6 to IPv4">
      <t>When an IP/ICMP translator receives an IPv6 datagram addressed to a
      destination towards the IPv4 domain, it translates the IPv6 header of
      that packet into an IPv4 header. Since the ICMP <xref
      target="RFC0792"></xref><xref target="RFC4443"></xref>, TCP <xref
      target="RFC0793"></xref> and UDP <xref target="RFC0768"></xref> headers
      consist of check sums, which include the IP header, the recalculation
      and updating of the ICMP header and the transport-layer headers MUST be
      performed. This is different from <xref target="RFC2765"></xref>, since
      <xref target="RFC2765"></xref> uses special prefix (0::ffff:0:a:b:c:d)
      to avoid the recalculation of the transport-layer header checksum. The
      data portion of the packet is left unchanged. The IP/ICMP translator
      then forwards the packet based on the IPv4 destination address. The
      original IPv6 header on the packet is removed and replaced by an IPv4
      header.</t>

      <figure anchor="v6v4xlat" title="IPv6-to-IPv4 Translation">
        <artwork align="center"><![CDATA[
+-------------+                 +-------------+
|    IPv6     |                 |    IPv4     |
|   Header    |                 |   Header    |
+-------------+                 +-------------+
|  Fragment   |                 |  Transport  |
|   Header    |      ===>       |   Layer     |
|(if present) |                 |   Header    |
+-------------+                 +-------------+
|  Transport  |                 |             |
|   Layer     |                 ~    Data     ~
|   Header    |                 |             |
+-------------+                 +-------------+
|             |
~    Data     ~
|             |
+-------------+
]]></artwork>
      </figure>

      <t>There are some differences between IPv6 and IPv4 in the area of
      fragmentation and the minimum link MTU that effect the translation. An
      IPv6 link has to have an MTU of 1280 bytes or greater. The corresponding
      limit for IPv4 is 68 bytes. Thus, unless there were special measures, it
      would not be possible to do end-to-end path MTU discovery when the path
      includes an translator since the IPv6 node might receive ICMP "packet
      too big" messages originated by an IPv4 router that report an MTU less
      than 1280. However, <xref target="RFC2460"></xref> section 5 requires
      that IPv6 nodes handle such an ICMP "packet too big" message by reducing
      the path MTU to 1280 and including an IPv6 fragment header with each
      packet. This allows end-to-end path MTU discovery across the translator
      as long as the path MTU is 1280 bytes or greater. When the path MTU
      drops below the 1280 limit the IPv6 sender will originate 1280 byte
      packets that will be fragmented by IPv4 routers along the path after
      being translated to IPv4.</t>

      <t>The only drawback with this scheme is that it is not possible to use
      PMTU to do optimal UDP fragmentation (as opposed to completely avoiding
      fragmentation) at sender since the presence of an IPv6 Fragment header
      is interpreted that is it OK to fragment the packet on the IPv4 side.
      Thus if a UDP application wants to send large packets independent of the
      PMTU, the sender will only be able to determine the path MTU on the IPv6
      side of the translator. If the path MTU on the IPv4 side of the
      translator is smaller then the IPv6 sender will not receive any ICMP
      "too big" errors and cannot adjust the size fragments it is sending.</t>

      <t>Other than the special rules for handling fragments and path MTU
      discovery the actual translation of the packet header consists of a
      simple mapping as defined below. Note that ICMP packets require special
      handling in order to translate the content of ICMP error message and
      also to add the ICMP pseudo-header checksum.</t>

      <section anchor="section4.1"
               title="Translating IPv6 Headers into IPv4 Headers">
        <t>If there is no IPv6 Fragment header the IPv4 header fields are set
        as follows: <list style="hanging">
            <t hangText="Version:">4</t>

            <t hangText="Internet Header Length:">5 (no IPv4 options)</t>

            <t hangText="Type of Service (TOS) Octet:">By default, copied from
            the IPv6 Traffic Class (all 8 bits). According to <xref
            target="RFC2474"></xref> the semantics of the bits are identical
            in IPv4 and IPv6. However, in some IPv4 environments these bits
            might be used with the old semantics of "Type Of Service and
            Precedence". An implementation of a translator SHOULD provide the
            ability to ignore the IPv6 traffic class and always set the IPv4
            TOS Octet to a specified value. In addition, if the translator is
            at an administrative boundary, the filtering and update
            considerations of <xref target="RFC2475"></xref> may be
            applicable.</t>

            <t hangText="Total Length:">Payload length value from IPv6 header,
            plus the size of the IPv4 header.</t>

            <t hangText="Identification:">All zero.</t>

            <t hangText="Flags:">The More Fragments flag is set to zero. The
            Don't Fragments flag is set to one.</t>

            <t hangText="Fragment Offset:">All zero.</t>

            <t hangText="Time to Live:">Hop Limit value copied from IPv6
            header. Since the translator is a router, as part of forwarding
            the packet it needs to decrement either the IPv6 Hop Limit (before
            the translation) or the IPv4 TTL (after the translation). As part
            of decrementing the TTL or Hop Limit the translator (as any
            router) needs to check for zero and send the ICMPv4 or ICMPv6 "ttl
            exceeded" error.</t>

            <t hangText="Protocol:">Next Header field copied from IPv6
            header.</t>

            <t hangText="Header Checksum:">Computed once the IPv4 header has
            been created.</t>

            <t hangText="Source Address:">In stateless mode, which is to say
            that if the IPv6 source address is within the range of the
            stateless translation prefix, the source address is derived from
            the IPv4-embedded IPv6 address. <vspace blankLines="1" /> In
            stateful mode, which is to say that if the IPv6 source address is
            not within the range of the stateless translation prefix, the IPv4
            source address and transport layer source port corresponding to
            the IPv4-related IPv6 source address and source port are derived
            from the database reflecting current session state in the
            translator.
Database maintanence is as descrbed in <xref target="I-D.ietf-behave-v6v4-xlate-stateful"/>.
</t>
            <t hangText="Destination Address:">
The IPv4 destination address is extracted from the
            IPv4-mapped destination address of the datagram being translated.</t>
          </list></t>

        <t>If any of an IPv6 hop-by-hop options header, destination options
        header, or routing header with the Segments Left field equal to zero
        are present in the IPv6 packet, they are ignored i.e., there is no
        attempt to translate them. However, the Total Length field and the
        Protocol field would have to be adjusted to "skip" these extension
        headers.</t>

        <t>If a routing header with a non-zero Segments Left field is present
        then the packet MUST NOT be translated, and an ICMPv6 "parameter
        problem/ erroneous header field encountered" (Type 4/Code 0) error
        message, with the Pointer field indicating the first byte of the
        Segments Left field, SHOULD be returned to the sender.</t>

        <t>If the IPv6 packet contains a Fragment header the header fields are
        set as above with the following exceptions: <list style="hanging">
            <t hangText="Total Length:">Payload length value from IPv6 header,
            minus 8 for the Fragment header, plus the size of the IPv4
            header.</t>

            <t hangText="Identification:">Copied from the low-order 16-bits in
            the Identification field in the Fragment header.</t>

            <t hangText="Flags:">The More Fragments flag is copied from the M
            flag in the Fragment header. The Don't Fragments flag is set to
            zero allowing this packet to be fragmented by IPv4 routers.</t>

            <t hangText="Fragment Offset:">Copied from the Fragment Offset
            field in the Fragment Header.</t>

            <t hangText="Protocol:">Next Header value copied from Fragment
            header.</t>
          </list></t>
      </section>

      <section anchor="section4.2"
               title="Translating ICMPv6 Headers into ICMPv4 Headers">
        <t>All ICMP messages that are to be translated require that the ICMP
        checksum field be updated as part of the translation since ICMPv6
        unlike ICMPv4 has a pseudo-header checksum just like UDP and TCP.</t>

        <t>In addition all ICMP packets need to have the Type value translated
        and for ICMP error messages the included IP header also needs
        translation.</t>

        <t>The actions needed to translate various ICMPv6 messages are: <list
            style="hanging">
            <t hangText="ICMPv6 informational messages:"><list style="hanging">
                <t
                hangText="Echo Request and Echo Reply (Type 128 and 129)">Adjust
                the type to 0 and 8, respectively, and adjust the ICMP
                checksum both to take the type change into account and to
                exclude the ICMPv6 pseudo-header.</t>

                <t
                hangText="MLD Multicast Listener Query/Report/Done (Type 130, 131, 132)">Single
                hop message. Silently drop.</t>

                <t
                hangText="Neighbor Discover messages (Type 133 through 137)">Single
                hop message. Silently drop.</t>

                <t hangText="Unknown informational messages">Silently
                drop.</t>
              </list></t>

            <t hangText="ICMPv6 error messages:"><list style="hanging">
                <t hangText="Destination Unreachable (Type 1)">Set the Type
                field to 3. Translate the code field as follows: <list
                    style="hanging">
                    <t hangText="Code 0 (no route to destination):">Set Code
                    to 1 (host unreachable).</t>

                    <t
                    hangText="Code 1 (communication with destination administratively prohibited):">Set
                    Code to 10 (communication with destination host
                    administratively prohibited).</t>

                    <t hangText="Code 2 (beyond scope of source address):">Set
                    Code to 1 (host unreachable). Note that this error is very
                    unlikely since the IPv4-translatable source address is
                    considered to have global scope.</t>

                    <t hangText="Code 3 (address unreachable):">Set Code to 1
                    (host unreachable).</t>

                    <t hangText="Code 4 (port unreachable):">Set Code to 3
                    (port unreachable).</t>
                  </list></t>

                <t hangText="Packet Too Big (Type 2)">Translate to an ICMPv4
                Destination Unreachable with code 4. The MTU field needs to be
                adjusted for the difference between the IPv4 and IPv6 header
                sizes taking into account whether or not the packet in error
                includes a Fragment header.</t>

                <t hangText="Time Exceeded (Type 3)">Set the Type to 11. The
                Code field is unchanged.</t>

                <t hangText="Parameter Problem (Type 4)">If the Code is 1,
                translate this to an ICMPv4 protocol unreachable (Type 3, Code
                2). Otherwise set the Type to 12 and the Code to zero. The
                Pointer needs to be updated to point to the corresponding
                field in the translated include IP header.</t>

                <t hangText="Unknown error messages">Silently drop.</t>

                <t hangText="ICMP Error Payload">The <xref
                target="RFC4884"></xref> length field should be updated to
                reflect the changed length of the datagram. At the time of
                this writing, the authors are not aware of any standard ICMP
                extension objects containing realm specific information.</t>
              </list></t>
          </list></t>
      </section>

      <section anchor="section4.3"
               title="Translating ICMPv6 Error Messages into ICMPv4">
        <t>There are some differences between the IPv4 and the IPv6 ICMP error
        message formats as detailed above. In addition, the ICMP error
        messages contain the IP header for the packet in error, which needs to
        be translated just like a normal IP header. The translation of this
        "packet in error" is likely to change the length of the datagram thus
        the Total Length field in the outer IPv4 header might need to be
        updated.</t>

        <figure anchor="v6v4icmp" title="IPv6-to-IPv4 ICMP Error Translation">
          <artwork align="center"><![CDATA[
+-------------+                 +-------------+
|    IPv6     |                 |    IPv4     |
|   Header    |                 |   Header    |
+-------------+                 +-------------+
|   ICMPv6    |                 |   ICMPv4    |
|   Header    |                 |   Header    |
+-------------+                 +-------------+
|    IPv6     |      ===>       |    IPv4     |
|   Header    |                 |   Header    |
+-------------+                 +-------------+
|   Partial   |                 |   Partial   |
|  Transport  |                 |  Transport  |
|   Layer     |                 |   Layer     |
|   Header    |                 |   Header    |
+-------------+                 +-------------+
]]></artwork>
        </figure>

        <t>The translation of the inner IP header can be done by recursively
        invoking the function that translated the outer IP headers.</t>
      </section>

      <section anchor="transport2" title="Transport-layer Header Translation">
        <t>Stateless and stateful translation using the IPv6 addresses
        described in <xref target="I-D.xli-behave-v4v6-prefix"></xref>
        requires the recalculation and updating of the transport-layer
        checksums.</t>
      </section>

      <section anchor="section4.4" title="Knowing when to Translate">
        <t>If the IP/ICMP translator is implemented in a router providing both
        translation and normal forwarding, and the address is reachable by a
        more specific route without translation, the router should forward it
        without translating it. When an IP/ICMP translator receives an IPv6
        datagram addressed to a destination towards the IPv4 domain, the
        packet will be translated to IPv4.</t>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo adds no new IANA considerations.</t>

      <t>Note to RFC Editor: This section will have served its purpose if it
      correctly tells IANA that no new assignments or registries are required,
      or if those assignments or registries are created during the RFC
      publication process. From the author's perspective, it may therefore be
      removed upon publication as an RFC at the RFC Editor's discretion.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>The use of stateless IP/ICMP translators does not introduce any new
      security issues beyond the security issues that are already present in
      the IPv4 and IPv6 protocols and in the routing protocols that are used
      to make the packets reach the translator.</t>

      <t>As the Authentication Header <xref target="RFC4302"></xref> is
      specified to include the IPv4 Identification field and the translating
      function not being able to always preserve the Identification field, it
      is not possible for an IPv6 endpoint to compute AH on received packets
      that have been translated from IPv4 packets. Thus AH does not work
      through a translator.</t>

      <t>Packets with ESP can be translated since ESP does not depend on
      header fields prior to the ESP header. Note that ESP transport mode is
      easier to handle than ESP tunnel mode; in order to use ESP tunnel mode
      the IPv6 node needs to be able to generate an inner IPv4 header when
      transmitting packets and remove such an IPv4 header when receiving
      packets.</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>This is under development by a large group of people. Those who have
      posted to the list during the discussion include Andrew Sullivan, Andrew
      Yourtchenko, Brian Carpenter, Dan Wing, Ed Jankiewicz, Fred Baker,
      Hiroshi Miyata, Iljitsch van Beijnum, John Schnizlein, Kevin Yin, Magnus
      Westerlund, Marcelo Bagnulo Braun, Margaret Wasserman, Masahito Endo,
      Phil Roberts, Philip Matthews, Remi Denis-Courmont, Remi Despres, and
      Xing Li.</t>
    </section>
  </middle>

  <back>
    <!-- references split to informative and normative -->

    <references title="Normative References">
      <?rfc include="reference.RFC.0768" ?>

      <?rfc include="reference.RFC.0791" ?>

      <?rfc include="reference.RFC.0792" ?>

      <?rfc include="reference.RFC.0793" ?>

      <?rfc include="reference.RFC.2119" ?>

      <?rfc include="reference.RFC.2460" ?>

      <?rfc include="reference.RFC.2765" ?>

      <?rfc include="reference.RFC.4291" ?>

      <?rfc include="reference.RFC.4443" ?>

      <?rfc include="reference.RFC.5382" ?>

      <?rfc include="reference.RFC.4884" ?>

      <?rfc include="reference.I-D.xli-behave-v4v6-prefix" ?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.I-D.ietf-behave-v6v4-xlate-stateful" ?>
      <?rfc include="reference.I-D.ietf-behave-v6v4-framework" ?>
      <?rfc include="reference.RFC.1191" ?>

      <?rfc include="reference.RFC.2474" ?>

      <?rfc include="reference.RFC.2475" ?>

      <?rfc include="reference.RFC.2710" ?>

      <?rfc include="reference.RFC.3171" ?>

      <?rfc include="reference.RFC.3307" ?>

      <?rfc include="reference.RFC.3590" ?>

      <?rfc include="reference.RFC.3810" ?>

      <?rfc include="reference.RFC.4213" ?>

      <?rfc include="reference.RFC.4301" ?>

      <?rfc include="reference.RFC.4302" ?>

      <?rfc include="reference.RFC.4303" ?>

      <reference anchor="Miller">
        <front>
          <title>Email to the ngtrans mailing list</title>

          <author fullname="Miller" initials="G" surname="Miller">
            <organization></organization>
          </author>

          <date day="26" month="March" year="1999" />
        </front>
      </reference>

    </references>
  </back>
</rfc>
