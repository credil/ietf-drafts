


Network Working Group                               E. Hammer-Lahav, Ed.
Internet-Draft                                          December 3, 2009
Intended status: Informational
Expires: June 6, 2010


                      The OAuth Core 1.0 Protocol
                         draft-hammer-oauth-08

Abstract

   OAuth provides a method for clients to access server resources on
   behalf of a resource owner (such as a different client or an end-
   user).  It also provides a process for end-users to authorize third
   party access to their server resources without sharing their
   credentials (typically, a username and password pair), using user-
   agent redirections.

Status of this Memo

   This Internet-Draft is submitted to IETF in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on June 6, 2010.

Copyright Notice

   Copyright (c) 2009 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents



Hammer-Lahav              Expires June 6, 2010                  [Page 1]

Internet-Draft                  OAuth 1.0                  December 2009


   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the BSD License.


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
     1.1.  Terminology  . . . . . . . . . . . . . . . . . . . . . . .  5
     1.2.  Example  . . . . . . . . . . . . . . . . . . . . . . . . .  6
     1.3.  Notational Conventions . . . . . . . . . . . . . . . . . .  9
   2.  Redirection-Based Authorization  . . . . . . . . . . . . . . .  9
     2.1.  Temporary Credentials  . . . . . . . . . . . . . . . . . . 10
     2.2.  Resource Owner Authorization . . . . . . . . . . . . . . . 12
     2.3.  Token Credentials  . . . . . . . . . . . . . . . . . . . . 13
   3.  Authenticated Requests . . . . . . . . . . . . . . . . . . . . 15
     3.1.  Making Requests  . . . . . . . . . . . . . . . . . . . . . 15
     3.2.  Verifying Requests . . . . . . . . . . . . . . . . . . . . 17
     3.3.  Nonce and Timestamp  . . . . . . . . . . . . . . . . . . . 18
     3.4.  Signature  . . . . . . . . . . . . . . . . . . . . . . . . 19
       3.4.1.  Signature Base String  . . . . . . . . . . . . . . . . 19
       3.4.2.  HMAC-SHA1  . . . . . . . . . . . . . . . . . . . . . . 26
       3.4.3.  RSA-SHA1 . . . . . . . . . . . . . . . . . . . . . . . 26
       3.4.4.  PLAINTEXT  . . . . . . . . . . . . . . . . . . . . . . 27
     3.5.  Parameter Transmission . . . . . . . . . . . . . . . . . . 28
       3.5.1.  Authorization Header . . . . . . . . . . . . . . . . . 28
       3.5.2.  Form-Encoded Body  . . . . . . . . . . . . . . . . . . 29
       3.5.3.  Request URI Query  . . . . . . . . . . . . . . . . . . 30
     3.6.  Percent Encoding . . . . . . . . . . . . . . . . . . . . . 30
   4.  Security Considerations  . . . . . . . . . . . . . . . . . . . 31
     4.1.  Credentials Transmission . . . . . . . . . . . . . . . . . 31
     4.2.  RSA-SHA1 Signature Method  . . . . . . . . . . . . . . . . 31
     4.3.  PLAINTEXT Signature Method . . . . . . . . . . . . . . . . 31
     4.4.  Confidentiality of Requests  . . . . . . . . . . . . . . . 31
     4.5.  Spoofing by Counterfeit Servers  . . . . . . . . . . . . . 32
     4.6.  Proxying and Caching of Authenticated Content  . . . . . . 32
     4.7.  Plaintext Storage of Credentials . . . . . . . . . . . . . 32
     4.8.  Secrecy of the Client Credentials  . . . . . . . . . . . . 32
     4.9.  Phishing Attacks . . . . . . . . . . . . . . . . . . . . . 33
     4.10. Scoping of Access Requests . . . . . . . . . . . . . . . . 33
     4.11. Entropy of Secrets . . . . . . . . . . . . . . . . . . . . 33
     4.12. Denial of Service / Resource Exhaustion Attacks  . . . . . 34
     4.13. SHA-1 Cryptographic Attacks  . . . . . . . . . . . . . . . 34
     4.14. Signature Base String Limitations  . . . . . . . . . . . . 35



Hammer-Lahav              Expires June 6, 2010                  [Page 2]

Internet-Draft                  OAuth 1.0                  December 2009


     4.15. Cross-Site Request Forgery (CSRF)  . . . . . . . . . . . . 35
     4.16. User Interface Redress . . . . . . . . . . . . . . . . . . 35
     4.17. Automatic Processing of Repeat Authorizations  . . . . . . 36
   5.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 36
   6.  Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 36
   Appendix A.  Differences from the Community Edition  . . . . . . . 37
   Appendix B.  Document History  . . . . . . . . . . . . . . . . . . 37
   7.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 40
     7.1.  Normative References . . . . . . . . . . . . . . . . . . . 40
     7.2.  Informative References . . . . . . . . . . . . . . . . . . 41
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . . 41








































Hammer-Lahav              Expires June 6, 2010                  [Page 3]

Internet-Draft                  OAuth 1.0                  December 2009


1.  Introduction

   In the traditional client-server authentication model, the client
   uses its credentials to access its resources hosted by the server.
   With the increasing use of distributed web services and cloud
   computing, third-party applications require access to these server-
   hosted resources.

   OAuth introduces a third role to the traditional client-server
   authentication model: the resource owner.  In the OAuth model, the
   client (which is not the resource owner, but is acting on its behalf)
   requests access to resources controlled by the resource owner, but
   hosted by the server.  In addition, OAuth allows the server to verify
   not only the resource owner authorization, but also the identity of
   the client making the request.

   OAuth provides a method for clients to access server resources on
   behalf of a resource owner (such as a different client or an end-
   user).  It also provides a process for end-users to authorize third
   party access to their server resources without sharing their
   credentials (typically, a username and password pair), using user-
   agent redirections.

   For example, a web user (resource owner) can grant a printing service
   (client) access to her private photos stored at a photo sharing
   service (server), without sharing her username and password with the
   printing service.  Instead, she authenticates directly with the photo
   sharing service which issues the printing service delegation-specific
   credentials.

   In order for the client to access resources, it first has to obtain
   permission from the resource owner.  This permission is expressed in
   the form of a token and matching shared-secret.  The purpose of the
   token is to make it unnecessary for the resource owner to share its
   credentials with the client.  Unlike the resource owner credentials,
   tokens can be issued with a restricted scope and limited lifetime,
   and revoked independently.

   This specification consists of two parts.  The first part defines a
   redirection-based user-agent process for end-users to authorize
   client access to their resources, by authenticating directly with the
   server and provisioning tokens to the client for use with the
   authentication method.  The second part defines a method for making
   authenticated HTTP [RFC2616] requests using two sets of credentials,
   one identifying the client making the request, and a second
   identifying the resource owner on whose behalf the request is being
   made.




Hammer-Lahav              Expires June 6, 2010                  [Page 4]

Internet-Draft                  OAuth 1.0                  December 2009


   The use of OAuth with any other transport protocol than [RFC2616] is
   undefined.

   The OAuth protocol was originally created by a small community of web
   developers from a variety of websites and other Internet services,
   who wanted to solve the common problem of enabling delegated access
   to protected resources.  The resulting OAuth protocol was stabilized
   at version 1.0 in October 2007, and revised in June 2009 and
   published as [OAuth Core 1.0 Revision A].

   This specification provides an informational documentation of OAuth
   Core 1.0 Revision A, addressing several errata reported since that
   time, as well as numerous editorial clarifications.  While this
   specification is not an item of the IETF's OAuth Working Group, which
   at the time of writing is working on an OAuth version that can be
   appropriate for publication on the standards track, it has been
   transferred to the IETF for change control by the authors of the
   original work.

1.1.  Terminology

   client
         An HTTP client (per [RFC2616]) capable of making OAuth-
         authenticated requests (Section 3).

   server
         An HTTP server (per [RFC2616]) capable of accepting OAuth-
         authenticated requests (Section 3).

   protected resource
         An access-restricted resource (per [RFC2616]) which can be
         obtained from the server using an OAuth-authenticated request
         (Section 3).

   resource owner
         An entity capable of accessing and controlling protected
         resources by using credentials to authenticate with the server.

   credentials  Credentials are a pair of a unique identifier and a
         matching shared secret.  OAuth defines three classes of
         credentials: client, temporary, and token, used to identify and
         authenticate the client making the request, the authorization
         request, and the access grant, respectively.

   token
         An unique identifier issued by the server and used by the
         client to associate authenticated requests with the resource
         owner whose authorization is requested or has been obtained by



Hammer-Lahav              Expires June 6, 2010                  [Page 5]

Internet-Draft                  OAuth 1.0                  December 2009


         the client.  Tokens have a matching shared-secret that is used
         by the client to establish its ownership of the token, and its
         authority to represent the resource owner.

   The original community specification used a somewhat different
   terminology which maps to this specifications as follows (original
   community terms provided on left):

   Consumer:  client

   Service Provider:  server

   User:  resource owner

   Consumer Key and Secret:  client credentials

   Request Token and Secret:  temporary credentials

   Access Token and Secret:  token credentials

1.2.  Example

   Jane (resource owner) has recently uploaded some private vacation
   photos (protected resources) to her photo sharing site
   'photos.example.net' (server).  She would like to use the
   'printer.example.com' website (client) to print one of these photos.
   Typically, Jane signs-into 'photos.example.net' using her username
   and password.

   However, Jane does not wish to share her username and password with
   the 'printer.example.com' website, which needs to access the photo in
   order to print it.  In order to provide its users with better
   service, 'printer.example.com' has signed-up for a set of
   'photos.example.net' client credentials ahead of time:

   Client Identifier
         dpf43f3p2l4k3l03

   Client Shared-Secret:
         kd94hf93k423kf44

   The 'printer.example.com' website has also configured its application
   to use the protocol endpoints listed in the 'photos.example.net' API
   documentation, which use the "HMAC-SHA1" signature method:







Hammer-Lahav              Expires June 6, 2010                  [Page 6]

Internet-Draft                  OAuth 1.0                  December 2009


   Temporary Credential Request
         https://photos.example.net/initiate

   Resource Owner Authorization URI:
         https://photos.example.net/authorize

   Token Request URI:
         https://photos.example.net/token

   Before 'printer.example.com' can ask Jane to grant it access to the
   photos, it must first establish a set of temporary credentials with
   'photos.example.net' to identify the delegation request.  To do so,
   the client sends the following HTTPS [RFC2818] request to the server:

     POST /initiate HTTP/1.1
     Host: photos.example.net
     Authorization: OAuth realm="http://photos.example.net/",
        oauth_consumer_key="dpf43f3p2l4k3l03",
        oauth_signature_method="HMAC-SHA1",
        oauth_timestamp="137131200",
        oauth_nonce="wIjqoS",
        oauth_callback="http%3A%2F%2Fprinter.example.com%2Fready",
        oauth_signature="74KNZJeDHnMBp0EMJ9ZHt%2FXKycU%3D"


   The server validates the request and replies with a set of temporary
   credentials in the body of the HTTP response (line breaks are for
   display purposes only):

     HTTP/1.1 200 OK
     Content-Type: application/x-www-form-urlencoded

     oauth_token=hh5s93j4hdidpola&oauth_token_secret=hdhd0244k9j7ao03&
     oauth_callback_confirmed=true


   The client redirects Jane's user-agent to the server's Resource Owner
   Authorization endpoint to obtain Jane's approval for accessing her
   private photos:

     https://photos.example.net/authorize?oauth_token=hh5s93j4hdidpola


   The server requests Jane to sign-in using her username and password
   and if successful, asks her to approve granting 'printer.example.com'
   access to her private photos.  Jane approves the request and her
   user-agent is redirected to the callback URI provided by the client
   in the previous request (line breaks are for display purposes only):



Hammer-Lahav              Expires June 6, 2010                  [Page 7]

Internet-Draft                  OAuth 1.0                  December 2009


     http://printer.example.com/ready?
     oauth_token=hh5s93j4hdidpola&oauth_verifier=hfdp7dh39dks9884


   The callback request informs the client that Jane completed the
   authorization process.  The client then requests a set of token
   credentials using its temporary credentials (over a secure TLS
   channel):

     POST /token HTTP/1.1
     Host: photos.example.net
     Authorization: OAuth realm="http://photos.example.net/",
        oauth_consumer_key="dpf43f3p2l4k3l03",
        oauth_token="hh5s93j4hdidpola",
        oauth_signature_method="HMAC-SHA1",
        oauth_timestamp="137131201",
        oauth_nonce="walatlh",
        oauth_verifier="hfdp7dh39dks9884"
        oauth_signature="gKgrFCywp7rO0OXSjdot%2FIHF7IU%3D"


   The server validates the request and replies with a set of token
   credentials in the body of the HTTP response:

     HTTP/1.1 200 OK
     Content-Type: application/x-www-form-urlencoded

     oauth_token=nnch734d00sl2jdk&oauth_token_secret=pfkkdhi9sl3r4s00


   With a set of token credentials, the client is now ready to request
   the private photo:

     GET /photos?file=vacation.jpg&size=original HTTP/1.1
     Host: photos.example.net
     Authorization: OAuth realm="http://photos.example.net/",
        oauth_consumer_key="dpf43f3p2l4k3l03",
        oauth_token="nnch734d00sl2jdk",
        oauth_signature_method="HMAC-SHA1",
        oauth_timestamp="137131202",
        oauth_nonce="chapoH",
        oauth_signature="MdpQcU8iPSUjWoN%2FUDMsK2sui9I%3D"


   The 'photos.example.net' sever validates the request and responds
   with the requested photo. 'printer.example.com' is able to continue
   accessing Jane's private photos using the same set of token
   credentials for the duration of Jane's authorization, or until Jane



Hammer-Lahav              Expires June 6, 2010                  [Page 8]

Internet-Draft                  OAuth 1.0                  December 2009


   revokes access.

1.3.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].


2.  Redirection-Based Authorization

   OAuth uses tokens to represent the authorization granted to the
   client by the resource owner.  Typically, token credentials are
   issued by the server at the resource owner's request, after
   authenticating the resource owner's identity (usually using a
   username and password).

   There are many ways in which a server can facilitate the provisioning
   of token credentials.  This section defines one such way, using HTTP
   redirections and the resource owner's user-agent.  This redirection-
   based authorization method includes three steps:

   1.  The client obtains a set of temporary credentials from the server
       (in the form of an identifier and shared-secret).  The temporary
       credentials are used to identify the access request throughout
       the authorization process.

   2.  The resource owner authorizes the server to grant the client's
       access request (identified by the temporary credentials).

   3.  The client uses the temporary credentials to request a set of
       token credentials from the server, which will enable it to access
       the resource owner's protected resources.

   The server MUST revoke the temporary credentials after being used
   once to obtain the token credentials.  It is RECOMMENDED that the
   temporary credentials have a limited lifetime.  Servers SHOULD enable
   resource owners to revoke token credentials after they have been
   issued to clients.

   In order for the client to perform these steps, the server needs to
   advertise the URIs of the following three endpoints:

   Temporary Credential Request
         The endpoint used by the client to obtain a set of temporary
         credentials as described in Section 2.1.





Hammer-Lahav              Expires June 6, 2010                  [Page 9]

Internet-Draft                  OAuth 1.0                  December 2009


   Resource Owner Authorization
         The endpoint to which the resource owner is redirected to grant
         authorization as described in Section 2.2.

   Token Request
         The endpoint used by the client to request a set of token
         credentials using the set of temporary credentials as described
         in Section 2.3.

   The three URIs advertised by the server MAY include a query component
   as defined by [RFC3986] section 3, but if present, the query MUST NOT
   contain any parameters beginning with the "oauth_" prefix, to avoid
   conflicts with the protocol parameters added to the URIs when used.

   The methods in which the server advertises and documents its three
   endpoints are beyond the scope of this specification.  Clients should
   avoid making assumptions about the size of tokens and other server-
   generated values, which are left undefined by this specification.  In
   addition, protocol parameters MAY include values which require
   encoding when transmitted.  Clients and servers should not make
   assumptions about the possible range of their values.

2.1.  Temporary Credentials

   The client obtains a set of temporary credentials from the server by
   making an authenticated (Section 3) HTTP "POST" request to the
   Temporary Credential Request endpoint (unless the server advertises
   another HTTP request method for the client to use).  The client
   constructs a request URI by adding the following REQUIRED parameter
   to the request (in addition to the other protocol parameters, using
   the same parameter transmission method):

   oauth_callback:  An absolute URI to which the server will redirect
         the resource owner back when the Resource Owner Authorization
         step (Section 2.2) is completed.  If the client is unable to
         receive callbacks or a callback URI has been established via
         other means, the parameter value MUST be set to "oob" (case
         sensitive), to indicate an out-of-band configuration.

   Servers MAY specify additional parameters.

   When making the request, the client authenticates using only the
   client credentials.  The client MAY omit the empty "oauth_token"
   protocol parameter from the request and MUST use the empty string as
   the token secret value.

   Since the request results in the transmission of plain text
   credentials in the HTTP response, the server SHOULD require the use



Hammer-Lahav              Expires June 6, 2010                 [Page 10]

Internet-Draft                  OAuth 1.0                  December 2009


   of a transport-layer mechanisms such as TLS or SSL.  This is true
   regardless of the signature method used by the client.

   For example, the client makes the following HTTPS request:

     POST /request_temp_credentials HTTP/1.1
     Host: server.example.com
     Authorization: OAuth realm="http://server.example.com/",
        oauth_consumer_key="jd83jd92dhsh93js",
        oauth_signature_method="PLAINTEXT",
        oauth_callback="http%3A%2F%2Fclient.example.net%2Fcb%3Fx%3D1",
        oauth_signature="ja893SD9%26"


   The server MUST verify (Section 3.2) the request and if valid,
   respond back to the client with a set of temporary credentials (in
   the form of an identifier and shared-secret).  The temporary
   credentials are included in the HTTP response body using the
   "application/x-www-form-urlencoded" content type as defined by
   [W3C.REC-html40-19980424].

   The response contains the following REQUIRED parameters:

   oauth_token
         The temporary credentials identifier.

   oauth_token_secret
         The temporary credentials shared-secret.

   oauth_callback_confirmed:  MUST be present and set to "true".  The
         parameter is used to differentiate from previous versions of
         the protocol.

   Note that even though the parameter names include the term 'token',
   these credentials are not token credentials, but are used in the next
   two steps in a similar manner to token credentials.

   For example (line breaks are for display purposes only):

     HTTP/1.1 200 OK
     Content-Type: application/x-www-form-urlencoded

     oauth_token=hdk48Djdsa&oauth_token_secret=xyz4992k83j47x0b&
     oauth_callback_confirmed=true







Hammer-Lahav              Expires June 6, 2010                 [Page 11]

Internet-Draft                  OAuth 1.0                  December 2009


2.2.  Resource Owner Authorization

   Before the client requests a set of token credentials from the
   server, it MUST send the user to the server to authorize the request.
   The client constructs a request URI by adding the following REQUIRED
   query parameter to the Resource Owner Authorization endpoint URI:

   oauth_token
         The temporary credentials identifier obtained in Section 2.1 in
         the "oauth_token" parameter.  Servers MAY declare this
         parameter as OPTIONAL, in which case they MUST provide a way
         for the resource owner to indicate the identifier through other
         means.

   Servers MAY specify additional parameters.

   The client directs the resource owner to the constructed URI using an
   HTTP redirection response, or by other means available to it via the
   resource owner's user-agent.  The request MUST use the HTTP "GET"
   method.

   For example, the client redirects the resource owner's user-agent to
   make the following HTTPS request:

     GET /authorize_access?oauth_token=hdk48Djdsa HTTP/1.1
     Host: server.example.com


   The way in which the server handles the authorization request,
   including whether it uses a secure channel such as TLS/SSL is beyond
   the scope of this specification.  However, the server MUST first
   verify the identity of the resource owner.

   When asking the resource owner to authorize the requested access, the
   server SHOULD present to the resource owner information about the
   client requesting access based on the association of the temporary
   credentials with the client identity.  When displaying any such
   information, the server SHOULD indicate if the information has been
   verified.

   After receiving an authorization decision from the resource owner,
   the server redirects the resource owner to the callback URI if one
   was provided in the "oauth_callback" parameter or by other means.

   To make sure that the resource owner granting access is the same
   resource owner returning back to the client to complete the process,
   the server MUST generate a verification code: an unguessable value
   passed to the client via the resource owner and REQUIRED to complete



Hammer-Lahav              Expires June 6, 2010                 [Page 12]

Internet-Draft                  OAuth 1.0                  December 2009


   the process.  The server constructs the request URI by adding the
   following REQUIRED parameters to the callback URI query component:

   oauth_token
         The temporary credentials identifier received from the client.

   oauth_verifier
         The verification code.

   If the callback URI already includes a query component, the server
   MUST append the OAuth parameters to the end of the existing query.

   For example, the server redirects the resource owner's user-agent to
   make the following HTTP request:

     GET /cb?x=1&oauth_token=hdk48Djdsa&oauth_verifier=473f82d3 HTTP/1.1
     Host: client.example.net


   If the client did not provide a callback URI, the server SHOULD
   display the value of the verification code, and instruct the resource
   owner to manually inform the client that authorization is completed.
   If the server knows a client to be running on a limited device it
   SHOULD ensure that the verifier value is suitable for manual entry.

2.3.  Token Credentials

   The client obtains a set of token credentials from the server by
   making an authenticated (Section 3) HTTP "POST" request to the Token
   Request endpoint (unless the server advertises another HTTP request
   method for the client to use).  The client constructs a request URI
   by adding the following REQUIRED parameter to the request (in
   addition to the other protocol parameters, using the same parameter
   transmission method):

   oauth_verifier
         The verification code received from the server in the previous
         step.

   When making the request, the client authenticates using the client
   credentials as well as the temporary credentials.  The temporary
   credentials are used as a substitute for token credentials in the
   authenticated request and transmitted using the "oauth_token"
   parameter.

   Since the request results in the transmission of plain text
   credentials in the HTTP response, the server SHOULD require the use
   of a transport-layer mechanisms such as TLS or SSL.  This is true



Hammer-Lahav              Expires June 6, 2010                 [Page 13]

Internet-Draft                  OAuth 1.0                  December 2009


   regardless of the signature method used by the client.

   For example, the client makes the following HTTPS request:

     POST /request_token HTTP/1.1
     Host: server.example.com
     Authorization: OAuth realm="http://server.example.com/",
        oauth_consumer_key="jd83jd92dhsh93js",
        oauth_signature_method="PLAINTEXT",
        oauth_verifier="473f82d3",
        oauth_signature="ja893SD9%26xyz4992k83j47x0b"


   The server MUST verify (Section 3.2) the validity of the request,
   ensure that the resource owner has authorized the provisioning of
   token credentials to the client, and ensure that the temporary
   credentials have not expired or been used before.  The server MUST
   also verify the verification code received from the client.  If the
   request is valid and authorized, the token credentials are included
   in the HTTP response body using the
   "application/x-www-form-urlencoded" content type as defined by
   [W3C.REC-html40-19980424].

   The response contains the following REQUIRED parameters:

   oauth_token
         The token identifier.

   oauth_token_secret
         The token shared-secret.

   For example:

     HTTP/1.1 200 OK
     Content-Type: application/x-www-form-urlencoded

     oauth_token=j49ddk933skd9dks&oauth_token_secret=ll399dj47dskfjdk


   The server must retain the scope, duration, and other attributes
   approved by the resource owner, and enforce these restrictions when
   receiving a client request made with the token credentials issued.

   Once the client receives and stores the token credentials, it can
   proceed to access protected resources on behalf of the resource owner
   by making authenticated request (Section 3) using the client
   credentials together with the token credentials received.




Hammer-Lahav              Expires June 6, 2010                 [Page 14]

Internet-Draft                  OAuth 1.0                  December 2009


3.  Authenticated Requests

   The HTTP authentication methods defined by [RFC2617], enable clients
   to make authenticated HTTP requests.  Clients using these methods
   gain access to protected resources by using their credentials
   (typically a username and password pair), which allow the server to
   verify their authenticity.  Using these methods for delegation
   requires the client to assume the role of the resource owner.

   OAuth provides a method designed to include two sets of credentials
   with each request, one to identify the client, and another to
   identify the resource owner.  Before a client can make authenticated
   requests on behalf of the resource owner, it must obtain a token
   authorized by the resource owner.  Section 2 provides one such method
   through which the client can obtain a token authorized by the
   resource owner.

   The client credentials take the form of a unique identifier, and an
   associated shared-secret or RSA key pair.  Prior to making
   authenticated requests, the client establishes a set of credentials
   with the server.  The process and requirements for provisioning these
   are outside the scope of this specification.  Implementers are urged
   to consider the security ramifications of using client credentials,
   some of which are described in Section 4.8.

   Making authenticated requests requires prior knowledge of the
   server's configuration.  OAuth includes multiple methods for
   transmitting protocol parameters with requests (Section 3.5), as well
   as multiple methods for the client to prove its rightful ownership of
   the credentials used (Section 3.4).  The way in which clients
   discover the required configuration is outside the scope of this
   specification.

3.1.  Making Requests

   An authenticated request includes several protocol parameters.  Each
   parameter name begins with the "oauth_" prefix, and the parameter
   names and values are case sensitive.  Clients make authenticated
   requests by calculating the values of a set of protocol parameters
   and adding them to the HTTP request as follows:

   1.  The client assigns value to each of these REQUIRED (unless
       specified otherwise) protocol parameters:

       oauth_consumer_key
             The identifier portion of the client credentials
             (equivalent to a username).  The parameter name reflects a
             deprecated term (Consumer Key) used in previous revisions



Hammer-Lahav              Expires June 6, 2010                 [Page 15]

Internet-Draft                  OAuth 1.0                  December 2009


             of the specification, and has been retained to maintain
             backward compatibility.

       oauth_token
             The token value used to associate the request with the
             resource owner.  If the request is not associated with a
             resource owner (no token available), clients MAY omit the
             parameter.

       oauth_signature_method
             The name of the signature method used by the client to sign
             the request, as defined in Section 3.4.

       oauth_timestamp
             The timestamp value as defined in Section 3.3.  The
             parameter MAY be omitted when using the "PLAINTEXT"
             signature method.

       oauth_nonce
             The nonce value as defined in Section 3.3.  The parameter
             MAY be omitted when using the "PLAINTEXT" signature method.

       oauth_version
             OPTIONAL.  If present, MUST be set to "1.0".  Provides the
             version of the authentication process as defined in this
             specification.

   2.  The protocol parameters are added to the request using one of the
       transmission methods listed in Section 3.5.  Each parameter MUST
       NOT appear more than once per request.

   3.  The client calculates and assigns the value of the
       "oauth_signature" parameter as described in Section 3.4 and adds
       the parameter to the request using the same method used in the
       previous step.

   4.  The client sends the authenticated HTTP request to the server.

   For example, to make the following HTTP request authenticated (the
   "c2&a3=2+q" string in the following examples is used to illustrate
   the impact of a form-encoded entity-body) :

     GET /request?b5=%3D%253D&a3=a&c%40=&a2=r%20b HTTP/1.1
     Host: example.com
     Content-Type: application/x-www-form-urlencoded

     c2&a3=2+q




Hammer-Lahav              Expires June 6, 2010                 [Page 16]

Internet-Draft                  OAuth 1.0                  December 2009


   The client assigns values to the following protocol parameters using
   its client credentials, token credentials, the current timestamp, a
   uniquely generated nonce, and indicates it will use the "HMAC-SHA1"
   signature method:

     oauth_consumer_key:     9djdj82h48djs9d2
     oauth_token:            kkk9d7dh3k39sjv7
     oauth_signature_method: HMAC-SHA1
     oauth_timestamp:        137131201
     oauth_nonce:            7d8f3e4a


   The client adds the protocol parameter to the request using the OAuth
   HTTP Authorization header field:

     Authorization: OAuth realm="http://example.com/",
                    oauth_consumer_key="9djdj82h48djs9d2",
                    oauth_token="kkk9d7dh3k39sjv7",
                    oauth_signature_method="HMAC-SHA1",
                    oauth_timestamp="137131201",
                    oauth_nonce="7d8f3e4a"


   Then calculates the value of the "oauth_signature" parameter, adds it
   to the request, and sends the HTTP request to the server:

     GET /request?b5=%3D%253D&a3=a&c%40=&a2=r%20b HTTP/1.1
     Host: example.com
     Content-Type: application/x-www-form-urlencoded
     Authorization: OAuth realm="http://example.com/",
                    oauth_consumer_key="9djdj82h48djs9d2",
                    oauth_token="kkk9d7dh3k39sjv7",
                    oauth_signature_method="HMAC-SHA1",
                    oauth_timestamp="137131201",
                    oauth_nonce="7d8f3e4a",
                    oauth_signature="djosJKDKJSD8743243%2Fjdk33klY%3D"

     c2&a3=2+q


3.2.  Verifying Requests

   Servers receiving an authenticated request MUST validate it by:

   o  Recalculate the request signature independently as described in
      Section 3.4 and compare it to the value received from the client
      via the "oauth_signature" parameter.




Hammer-Lahav              Expires June 6, 2010                 [Page 17]

Internet-Draft                  OAuth 1.0                  December 2009


   o  If using the "HMAC-SHA1" or "RSA-SHA1" signature methods, ensure
      that the combination of nonce/timestamp/token (if present)
      received from the client has not been used before in a previous
      request (the server MAY reject requests with stale timestamps as
      described in Section 3.3).

   o  If a token is present, verify the scope and status of the client
      authorization as represented by the token (the server MAY choose
      to restrict token usage to the client to which it was issued).

   o  If the "oauth_version" parameter is present, ensure its value is
      "1.0".

   If the request fails verification, the server SHOULD respond with the
   appropriate HTTP response status code.  The server MAY include
   further details about why the request was rejected in the response
   body.

   The server SHOULD return a 400 (bad request) status code when
   receiving a request with unsupported parameters, unsupported
   signature method, missing parameters, or duplicated protocol
   parameters.  The server SHOULD return a 401 (unauthorized) status
   code when receiving a request with invalid client credentials,
   invalid or expired token, invalid signature, or invalid or used
   nonce.

3.3.  Nonce and Timestamp

   The timestamp value MUST be a positive integer.  Unless otherwise
   specified by the server's documentation, the timestamp is expressed
   in the number of seconds since January 1, 1970 00:00:00 GMT.

   A nonce is a random string, uniquely generated by the client to allow
   the server to verify that a request has never been made before and
   helps prevent replay attacks when requests are made over a non-secure
   channel.  The nonce value MUST be unique across all requests with the
   same timestamp, client credentials, and token combinations.

   To avoid the need to retain an infinite number of nonce values for
   future checks, servers MAY choose to restrict the time period after
   which a request with an old timestamp is rejected.  Note that this
   restriction implies a level of synchronization between the client's
   and server's clocks.  Servers applying such a restriction MAY provide
   a way for the client to sync with the server's clock; alternatively
   both systems could synchronize with a trusted time service.  Details
   of clock synchronization strategies are beyond the scope of this
   specification.




Hammer-Lahav              Expires June 6, 2010                 [Page 18]

Internet-Draft                  OAuth 1.0                  December 2009


3.4.  Signature

   OAuth-authenticated requests can have two sets of credentials: those
   passed via the "oauth_consumer_key" parameter and those in the
   "oauth_token" parameter.  In order for the server to verify the
   authenticity of the request and prevent unauthorized access, the
   client needs to prove that it is the rightful owner of the
   credentials.  This is accomplished using the shared-secret (or RSA
   key) part of each set of credentials.

   OAuth provides three methods for the client to prove its rightful
   ownership of the credentials: "HMAC-SHA1", "RSA-SHA1", and
   "PLAINTEXT".  These methods are generally referred to as signature
   methods, even though "PLAINTEXT" does not involve a signature.  In
   addition, "RSA-SHA1" utilizes an RSA key instead of the shared-
   secrets associated with the client credentials.

   OAuth does not mandate a particular signature method, as each
   implementation can have its own unique requirements.  Servers are
   free to implement and document their own custom methods.
   Recommending any particular method is beyond the scope of this
   specification.  Implementers should review the Security
   Considerations section (Section 4) before deciding on which method to
   support.

   The client declares which signature method is used via the
   "oauth_signature_method" parameter.  It then generates a signature
   (or a string of an equivalent value), and includes it in the
   "oauth_signature" parameter.  The server verifies the signature as
   specified for each method.

   The signature process does not change the request or its parameters,
   with the exception of the "oauth_signature" parameter.

3.4.1.  Signature Base String

   The signature base string is a consistent, reproducible concatenation
   of several of the HTTP request elements into a single string.  The
   string is used as an input to the "HMAC-SHA1" and "RSA-SHA1"
   signature methods.

   The signature base string includes the following components of the
   HTTP request:

   o  The HTTP request method (e.g.  "GET", "POST", etc.).

   o  The authority as declared by the HTTP "Host" request header field.




Hammer-Lahav              Expires June 6, 2010                 [Page 19]

Internet-Draft                  OAuth 1.0                  December 2009


   o  The path and query components of the request resource URI.

   o  The protocol parameters excluding the "oauth_signature".

   o  Parameters included in the request entity-body if they comply with
      the strict restrictions defined in Section 3.4.1.3.

   The signature base string does not cover the entire HTTP request.
   Most notably, it does not include the entity-body in most requests,
   nor does it include most HTTP entity-headers.  It is important to
   note that the server cannot verify the authenticity of the excluded
   request components without using additional protections such as SSL/
   TLS or other methods.

3.4.1.1.  String Construction

   The signature base string is constructed by concatenating together,
   in order, the following HTTP request elements:

   1.  The HTTP request method in uppercase.  For example: "HEAD",
       "GET", "POST", etc.  If the request uses a custom HTTP method, it
       MUST be encoded (Section 3.6).

   2.  An "&" character (ASCII code 38).

   3.  The base string URI from Section 3.4.1.2, after being encoded
       (Section 3.6).

   4.  An "&" character (ASCII code 38).

   5.  The request parameters as normalized in Section 3.4.1.3.2, after
       being encoded (Section 3.6).

   For example, the HTTP request:

     GET /request?b5=%3D%253D&a3=a&c%40=&a2=r%20b HTTP/1.1
     Host: example.com
     Content-Type: application/x-www-form-urlencoded
     Authorization: OAuth realm="http://example.com/",
                    oauth_consumer_key="9djdj82h48djs9d2",
                    oauth_token="kkk9d7dh3k39sjv7",
                    oauth_signature_method="HMAC-SHA1",
                    oauth_timestamp="137131201",
                    oauth_nonce="7d8f3e4a",
                    oauth_signature="djosJKDKJSD8743243%2Fjdk33klY%3D"

     c2&a3=2+q




Hammer-Lahav              Expires June 6, 2010                 [Page 20]

Internet-Draft                  OAuth 1.0                  December 2009


   Is represented by the following signature base string (line breaks
   are for display purposes only):

     GET&http%3A%2F%2Fexample.com%2Frequest&a2%3Dr%2520b%26a3%3D2%2520q%
     26a3%3Da%26b5%3D%253D%25253D%26c%2540%3D%26c2%3D%26oauth_consumer_k
     ey%3D9djdj82h48djs9d2%26oauth_nonce%3D7d8f3e4a%26oauth_signature_me
     thod%3DHMAC-SHA1%26oauth_timestamp%3D137131201%26oauth_token%3Dkkk9
     d7dh3k39sjv7


3.4.1.2.  Base String URI

   The scheme, authority, and path of the request resource URI [RFC3986]
   are included by constructing an "http" or "https" URI representing
   the request resource (without the query or fragment) as follows:

   1.  The scheme and host MUST be in lowercase.

   2.  The host and port values MUST match the content of the HTTP
       request "Host" header field.

   3.  The port MUST be included if it is not the default port for the
       scheme, and MUST be excluded if it is the default.  Specifically,
       the port MUST be excluded when making an HTTP request [RFC2616]
       to port 80 or when making an HTTPS request [RFC2818] to port 443.
       All other non-default port numbers MUST be included.

   For example, the HTTP request:

     GET /r%20v/X?id=123 HTTP/1.1
     Host: EXAMPLE.COM:80


   is represented by the base string URI: "http://example.com/r%20v/X".

   In another example, the HTTPS request:

     GET /?q=1 HTTP/1.1
     Host: www.example.net:8080


   is represented by the base string URI:
   "https://www.example.net:8080/".

3.4.1.3.  Request Parameters

   In order to guarantee a consistent and reproducible representation of
   the request parameters, the parameters are collected and decoded to



Hammer-Lahav              Expires June 6, 2010                 [Page 21]

Internet-Draft                  OAuth 1.0                  December 2009


   their original decoded form.  They are then sorted and encoded in a
   particular manner which is often different from their original
   encoding scheme, and concatenated into a single string.

3.4.1.3.1.  Parameter Sources

   The parameters from the following sources are collected into a single
   list of name/value pairs:

   o  The query component of the HTTP request URI as defined by
      [RFC3986] section 3.4.  The query component is parsed into a list
      of name/value pairs by treating it as an
      "application/x-www-form-urlencoded" string, separating the names
      and values and decoding them as defined by
      [W3C.REC-html40-19980424] section 17.13.4.

   o  The OAuth HTTP Authorization header field (Section 3.5.1) if
      present.  The header's content is parsed into a list of name/value
      pairs excluding the "realm" parameter if present.  The parameter
      values are decoded as defined by Section 3.5.1.

   o  The HTTP request entity-body, but only if all of the following
      conditions are met:

      *  The entity-body is single-part.

      *  The entity-body follows the encoding requirements of the
         "application/x-www-form-urlencoded" content-type as defined by
         [W3C.REC-html40-19980424].

      *  The HTTP request entity-header includes the "Content-Type"
         header field set to "application/x-www-form-urlencoded".

      The entity-body is parsed into a list of decoded name/value pairs
      as described in [W3C.REC-html40-19980424] section 17.13.4.

   The "oauth_signature" parameter MUST be excluded from the signature
   base string if present.  Parameters not explicitly included in the
   request MUST be excluded from the signature base string (e.g. the
   "oauth_version" parameter when omitted).











Hammer-Lahav              Expires June 6, 2010                 [Page 22]

Internet-Draft                  OAuth 1.0                  December 2009


   For example, the HTTP request:

       GET /request?b5=%3D%253D&a3=a&c%40=&a2=r%20b HTTP/1.1
       Host: example.com
       Content-Type: application/x-www-form-urlencoded
       Authorization: OAuth realm="http://example.com/",
                      oauth_consumer_key="9djdj82h48djs9d2",
                      oauth_token="kkk9d7dh3k39sjv7",
                      oauth_signature_method="HMAC-SHA1",
                      oauth_timestamp="137131201",
                      oauth_nonce="7d8f3e4a",
                      oauth_signature="djosJKDKJSD8743243%2Fjdk33klY%3D"

       c2&a3=2+q


   Contains the following (fully decoded) parameters used in the
   signature base sting:

               +------------------------+------------------+
               |          Name          |       Value      |
               +------------------------+------------------+
               |           b5           |       =%3D       |
               |           a3           |         a        |
               |           c@           |                  |
               |           a2           |        r b       |
               |   oauth_consumer_key   | 9djdj82h48djs9d2 |
               |       oauth_token      | kkk9d7dh3k39sjv7 |
               | oauth_signature_method |     HMAC-SHA1    |
               |     oauth_timestamp    |     137131201    |
               |       oauth_nonce      |     7d8f3e4a     |
               |           c2           |                  |
               |           a3           |        2 q       |
               +------------------------+------------------+

   Note that the value of "b5" is "=%3D" and not "==".  Both "c@" and
   "c2" have empty values.  While the encoding rules specified in this
   specification for the purpose of constructing the signature base
   string exclude the use of a "+" character (ASCII code 43) to
   represent an encoded space character (ASCII code 32), this practice
   is widely used in "application/x-www-form-urlencoded" encoded values,
   and MUST be properly decoded, as demonstrated by one of the "a3"
   parameter instances (the "a3" parameter is used twice in this
   request).







Hammer-Lahav              Expires June 6, 2010                 [Page 23]

Internet-Draft                  OAuth 1.0                  December 2009


3.4.1.3.2.  Parameters Normalization

   The parameters collected in Section 3.4.1.3 are normalized into a
   single string as follows:

   1.  First, the name and value of each parameter are encoded
       (Section 3.6).

   2.  The parameters are sorted by name, using ascending byte value
       ordering.  If two or more parameters share the same name, they
       are sorted by their value.

   3.  The name of each parameter is concatenated to its corresponding
       value using an "=" character (ASCII code 61) as separator, even
       if the value is empty.

   4.  The sorted name/value pairs are concatenated together into a
       single string by using an "&" character (ASCII code 38) as
       separator.

   For example, the list of parameters from the previous section would
   be normalized as follows:

                                 Encoded:

               +------------------------+------------------+
               |          Name          |       Value      |
               +------------------------+------------------+
               |           b5           |     %3D%253D     |
               |           a3           |         a        |
               |          c%40          |                  |
               |           a2           |       r%20b      |
               |   oauth_consumer_key   | 9djdj82h48djs9d2 |
               |       oauth_token      | kkk9d7dh3k39sjv7 |
               | oauth_signature_method |     HMAC-SHA1    |
               |     oauth_timestamp    |     137131201    |
               |       oauth_nonce      |     7d8f3e4a     |
               |           c2           |                  |
               |           a3           |       2%20q      |
               +------------------------+------------------+











Hammer-Lahav              Expires June 6, 2010                 [Page 24]

Internet-Draft                  OAuth 1.0                  December 2009


                                  Sorted:

               +------------------------+------------------+
               |          Name          |       Value      |
               +------------------------+------------------+
               |           a2           |       r%20b      |
               |           a3           |       2%20q      |
               |           a3           |         a        |
               |           b5           |     %3D%253D     |
               |          c%40          |                  |
               |           c2           |                  |
               |   oauth_consumer_key   | 9djdj82h48djs9d2 |
               |       oauth_nonce      |     7d8f3e4a     |
               | oauth_signature_method |     HMAC-SHA1    |
               |     oauth_timestamp    |     137131201    |
               |       oauth_token      | kkk9d7dh3k39sjv7 |
               +------------------------+------------------+

                            Concatenated Pairs:

                  +-------------------------------------+
                  |              Name=Value             |
                  +-------------------------------------+
                  |               a2=r%20b              |
                  |               a3=2%20q              |
                  |                 a3=a                |
                  |             b5=%3D%253D             |
                  |                c%40=                |
                  |                 c2=                 |
                  | oauth_consumer_key=9djdj82h48djs9d2 |
                  |         oauth_nonce=7d8f3e4a        |
                  |   oauth_signature_method=HMAC-SHA1  |
                  |      oauth_timestamp=137131201      |
                  |     oauth_token=kkk9d7dh3k39sjv7    |
                  +-------------------------------------+

   And concatenated together into a single string (line breaks are for
   display purposes only):

     a2=r%20b&a3=2%20q&a3=a&b5=%3D%253D&c%40=&c2=&oauth_consumer_key=9dj
     dj82h48djs9d2&oauth_nonce=7d8f3e4a&oauth_signature_method=HMAC-SHA1
     &oauth_timestamp=137131201&oauth_token=kkk9d7dh3k39sjv7









Hammer-Lahav              Expires June 6, 2010                 [Page 25]

Internet-Draft                  OAuth 1.0                  December 2009


3.4.2.  HMAC-SHA1

   The "HMAC-SHA1" signature method uses the HMAC-SHA1 signature
   algorithm as defined in [RFC2104]:

     digest = HMAC-SHA1 (key, text)


   The HMAC-SHA1 function variables are used in following way:

   text
         is set to the value of the signature base string from
         Section 3.4.1.1.

   key
         is set to the concatenated values of:

         1.    The client shared-secret, after being encoded
               (Section 3.6).

         2.    An "&" character (ASCII code 38), which MUST be included
               even when either secret is empty.

         3.    The token shared-secret, after being encoded
               (Section 3.6).

   digest
         is used to set the value of the "oauth_signature" protocol
         parameter, after the result octet string is base64-encoded per
         [RFC2045] section 6.8.

3.4.3.  RSA-SHA1

   The "RSA-SHA1" signature method uses the RSASSA-PKCS1-v1_5 signature
   algorithm as defined in [RFC3447] section 8.2 (also known as PKCS#1),
   using SHA-1 as the hash function for EMSA-PKCS1-v1_5.  To use this
   method, the client MUST have established client credentials with the
   server which included its RSA public key (in a manner which is beyond
   the scope of this specification).

   The signature base string is signed using the client's RSA private
   key per [RFC3447] section 8.2.1:

     S = RSASSA-PKCS1-V1_5-SIGN (K, M)


   Where:




Hammer-Lahav              Expires June 6, 2010                 [Page 26]

Internet-Draft                  OAuth 1.0                  December 2009


   K
         is set to the client's RSA private key,

   M
         is set to the value of the signature base string from
         Section 3.4.1.1, and

   S
         is the result signature used to set the value of the
         "oauth_signature" protocol parameter, after the result octet
         string is base64-encoded per [RFC2045] section 6.8.

   The server verifies the signature per [RFC3447] section 8.2.2:

     RSASSA-PKCS1-V1_5-VERIFY ((n, e), M, S)


   Where:

   (n, e)
         is set to the client's RSA public key,

   M
         is set to the value of the signature base string from
         Section 3.4.1.1, and

   S
         is set to the octet string value of the "oauth_signature"
         protocol parameter received from the client.

3.4.4.  PLAINTEXT

   The "PLAINTEXT" method does not employ a signature algorithm and does
   not provide any security on its own as it transmits secrets in the
   clear.  It SHOULD only be used with a transport-layer mechanism such
   as TLS or SSL as explained in Section 4.3.  It does not utilize the
   signature base string nor the "oauth_timestamp" and "oauth_nonce"
   parameters.

   The "oauth_signature" protocol parameter is set to the concatenated
   value of:

   1.  The client shared-secret, after being encoded (Section 3.6).

   2.  An "&" character (ASCII code 38), which MUST be included even
       when either secret is empty.





Hammer-Lahav              Expires June 6, 2010                 [Page 27]

Internet-Draft                  OAuth 1.0                  December 2009


   3.  The token shared-secret, after being encoded (Section 3.6).

3.5.  Parameter Transmission

   When making an OAuth-authenticated request, protocol parameters as
   well as any other parameter using the "oauth_" prefix SHALL be
   included in the request using one and only one of the following
   locations, listed in order of decreasing preference:

   1.  The HTTP "Authorization" header field as described in
       Section 3.5.1.

   2.  The HTTP request entity-body as described in Section 3.5.2.

   3.  The HTTP request URI query as described in Section 3.5.3.

   In addition to these three methods, future extensions MAY define
   other methods for including protocol parameters in the request.

3.5.1.  Authorization Header

   Protocol parameters can be transmitted using the HTTP "Authorization"
   header field as defined by [RFC2617] with the auth-scheme name set to
   "OAuth" (case-insensitive).

   For example:

     Authorization: OAuth realm="http://server.example.com/",
        oauth_consumer_key="0685bd9184jfhq22",
        oauth_token="ad180jjd733klru7",
        oauth_signature_method="HMAC-SHA1",
        oauth_signature="wOJIO9A2W5mFwDgiDvZbTSMK%2FPY%3D",
        oauth_timestamp="137131200",
        oauth_nonce="4572616e48616d6d65724c61686176",
        oauth_version="1.0"


   Protocol parameters SHALL be included in the "Authorization" header
   field as follows:

   1.  Parameter names and values are encoded per Parameter Encoding
       (Section 3.6).

   2.  Each parameter's name is immediately followed by an "=" character
       (ASCII code 61), a """ character (ASCII code 34), the parameter
       value (MAY be empty), and another """ character (ASCII code 34).





Hammer-Lahav              Expires June 6, 2010                 [Page 28]

Internet-Draft                  OAuth 1.0                  December 2009


   3.  Parameters are separated by a "," character (ASCII code 44) and
       OPTIONAL linear whitespace per [RFC2617].

   4.  The OPTIONAL "realm" parameter MAY be added and interpreted per
       [RFC2617] section 1.2.

   Servers MAY indicate their support for the "OAuth" auth-scheme by
   returning the HTTP "WWW-Authenticate" response header field upon
   client requests for protected resources.  As per [RFC2617] such a
   response MAY include additional HTTP "WWW-Authenticate" header
   fields:

   For example:

     WWW-Authenticate: OAuth realm="http://server.example.com/"


   The realm parameter defines a protection realm per [RFC2617] section
   1.2.

3.5.2.  Form-Encoded Body

   Protocol parameters can be transmitted in the HTTP request entity-
   body, but only if the following REQUIRED conditions are met:

   o  The entity-body is single-part.

   o  The entity-body follows the encoding requirements of the
      "application/x-www-form-urlencoded" content-type as defined by
      [W3C.REC-html40-19980424].

   o  The HTTP request entity-header includes the "Content-Type" header
      field set to "application/x-www-form-urlencoded".

   For example (line breaks are for display purposes only):

     oauth_consumer_key=0685bd9184jfhq22&oauth_token=ad180jjd733klr
     u7&oauth_signature_method=HMAC-SHA1&oauth_signature=wOJIO9A2W5
     mFwDgiDvZbTSMK%2FPY%3D&oauth_timestamp=137131200&oauth_nonce=4
     572616e48616d6d65724c61686176&oauth_version=1.0


   The entity-body MAY include other request-specific parameters, in
   which case, the protocol parameters SHOULD be appended following the
   request-specific parameters, properly separated by an "&" character
   (ASCII code 38).





Hammer-Lahav              Expires June 6, 2010                 [Page 29]

Internet-Draft                  OAuth 1.0                  December 2009


3.5.3.  Request URI Query

   Protocol parameters can be transmitted by being added to the HTTP
   request URI as a query parameter as defined by [RFC3986] section 3.

   For example (line breaks are for display purposes only):

     GET /example/path?oauth_consumer_key=0685bd9184jfhq22&
     oauth_token=ad180jjd733klru7&oauth_signature_method=HM
     AC-SHA1&oauth_signature=wOJIO9A2W5mFwDgiDvZbTSMK%2FPY%
     3D&oauth_timestamp=137131200&oauth_nonce=4572616e48616
     d6d65724c61686176&oauth_version=1.0 HTTP/1.1


   The request URI MAY include other request-specific query parameters,
   in which case, the protocol parameters SHOULD be appended following
   the request-specific parameters, properly separated by an "&"
   character (ASCII code 38).

3.6.  Percent Encoding

   Existing percent-encoding methods do not guarantee a consistent
   construction of the signature base string.  The following percent-
   encoding method is not defined to replace the existing encoding
   methods defined by [RFC3986] and [W3C.REC-html40-19980424].  It is
   used only in the construction of the signature base string and the
   authorization header field (Section 3.5.1).

   This specification defines the following method for percent-encoding
   strings:

   1.  Text values are first encoded as UTF-8 octets per [RFC3629] if
       they are not already.  This does not include binary values which
       are not intended for human consumption.

   2.  The values are then escaped using the [RFC3986] percent-encoding
       (%XX) mechanism as follows:

       *  Characters in the unreserved character set as defined by
          [RFC3986] section 2.3 (ALPHA, DIGIT, "-", ".", "_", "~") MUST
          NOT be encoded.

       *  All other characters MUST be encoded.

       *  The two hexadecimal characters used to represent encoded
          characters MUST be upper case.

   This method is different from the encoding scheme used by the



Hammer-Lahav              Expires June 6, 2010                 [Page 30]

Internet-Draft                  OAuth 1.0                  December 2009


   "application/x-www-form-urlencoded" content-type (for example, it
   encodes space characters as "%20" and not using the "+" character).
   It MAY be different from the percent-encoding functions provided by
   web development frameworks (e.g. encode different characters, use
   lower case hexadecimal characters).


4.  Security Considerations

   As stated in [RFC2617], the greatest sources of risks are usually
   found not in the core protocol itself but in policies and procedures
   surrounding its use.  Implementers are strongly encouraged to assess
   how this protocol addresses their security requirements.

4.1.  Credentials Transmission

   This specification does not describe any mechanism for protecting
   tokens and shared-secrets from eavesdroppers when they are
   transmitted from the server to the client during the authorization
   phase.  Servers should ensure that these transmissions are protected
   using transport-layer mechanisms such as TLS or SSL.

4.2.  RSA-SHA1 Signature Method

   Authenticated requests made with "RSA-SHA1" signatures do not use the
   token shared-secret, or any provisioned client shared-secret.  This
   means the request relies completely on the secrecy of the private key
   used by the client to sign requests.

4.3.  PLAINTEXT Signature Method

   When used with the "PLAINTEXT" method, the protocol makes no attempt
   to protect credentials from eavesdroppers or man-in-the-middle
   attacks.  The "PLAINTEXT" method is only intended to be used in
   conjunction with a transport-layer security mechanism such as TLS or
   SSL which can provide such protection.

4.4.  Confidentiality of Requests

   While this protocol provides a mechanism for verifying the integrity
   of requests, it provides no guarantee of request confidentiality.
   Unless further precautions are taken, eavesdroppers will have full
   access to request content.  Servers should carefully consider the
   kinds of data likely to be sent as part of such requests, and should
   employ transport-layer security mechanisms to protect sensitive
   resources.





Hammer-Lahav              Expires June 6, 2010                 [Page 31]

Internet-Draft                  OAuth 1.0                  December 2009


4.5.  Spoofing by Counterfeit Servers

   This protocol makes no attempt to verify the authenticity of the
   server.  A hostile party could take advantage of this by intercepting
   the client's requests and returning misleading or otherwise incorrect
   responses.  Service providers should consider such attacks when
   developing services using this protocol, and should require
   transport-layer security for any requests where the authenticity of
   the server or of request responses is an issue.

4.6.  Proxying and Caching of Authenticated Content

   The HTTP Authorization scheme (Section 3.5.1) is optional.  However,
   [RFC2616] relies on the "Authorization" and "WWW-Authenticate" header
   fields to distinguish authenticated content so that it can be
   protected.  Proxies and caches, in particular, may fail to adequately
   protect requests not using these header fields.

   For example, private authenticated content may be stored in (and thus
   retrievable from) publicly-accessible caches.  Servers not using the
   HTTP Authorization header field (Section 3.5.1) should take care to
   use other mechanisms, such as the "Cache-Control" header field, to
   ensure that authenticated content is protected.

4.7.  Plaintext Storage of Credentials

   The client shared-secret and token shared-secret function the same
   way passwords do in traditional authentication systems.  In order to
   compute the signatures used in methods other than "RSA-SHA1", the
   server must have access to these secrets in plaintext form.  This is
   in contrast, for example, to modern operating systems, which store
   only a one-way hash of user credentials.

   If an attacker were to gain access to these secrets - or worse, to
   the server's database of all such secrets - he or she would be able
   to perform any action on behalf of any resource owner.  Accordingly,
   it is critical that servers protect these secrets from unauthorized
   access.

4.8.  Secrecy of the Client Credentials

   In many cases, the client application will be under the control of
   potentially untrusted parties.  For example, if the client is a
   desktop application with freely available source code or an
   executable binary, an attacker may be able to download a copy for
   analysis.  In such cases, attackers will be able to recover the
   client credentials.




Hammer-Lahav              Expires June 6, 2010                 [Page 32]

Internet-Draft                  OAuth 1.0                  December 2009


   Accordingly, servers should not use the client credentials alone to
   verify the identity of the client.  Where possible, other factors
   such as IP address should be used as well.

4.9.  Phishing Attacks

   Wide deployment of this and similar protocols may cause resource
   owners to become inured to the practice of being redirected to
   websites where they are asked to enter their passwords.  If resource
   owners are not careful to verify the authenticity of these websites
   before entering their credentials, it will be possible for attackers
   to exploit this practice to steal resource owners' passwords.

   Servers should attempt to educate resource owners about the risks
   phishing attacks pose, and should provide mechanisms that make it
   easy for resource owners to confirm the authenticity of their sites.
   Client developers should consider the security implications of how
   they interact with a user-agent (e.g. separate window, embedded), and
   the ability of the end-user to verify the authenticity of the server
   website.

4.10.  Scoping of Access Requests

   By itself, this protocol does not provide any method for scoping the
   access rights granted to a client.  However, most applications do
   require greater granularity of access rights.  For example, servers
   may wish to make it possible to grant access to some protected
   resources but not others, or to grant only limited access (such as
   read-only access) to those protected resources.

   When implementing this protocol, servers should consider the types of
   access resource owners may wish to grant clients, and should provide
   mechanisms to do so.  Servers should also take care to ensure that
   resource owners understand the access they are granting, as well as
   any risks that may be involved.

4.11.  Entropy of Secrets

   Unless a transport-layer security protocol is used, eavesdroppers
   will have full access to authenticated requests and signatures, and
   will thus be able to mount offline brute-force attacks to recover the
   credentials used.  Servers should be careful to assign shared-secrets
   which are long enough, and random enough, to resist such attacks for
   at least the length of time that the shared-secrets are valid.

   For example, if shared-secrets are valid for two weeks, servers
   should ensure that it is not possible to mount a brute force attack
   that recovers the shared-secret in less than two weeks.  Of course,



Hammer-Lahav              Expires June 6, 2010                 [Page 33]

Internet-Draft                  OAuth 1.0                  December 2009


   servers are urged to err on the side of caution, and use the longest
   secrets reasonable.

   It is equally important that the pseudo-random number generator
   (PRNG) used to generate these secrets be of sufficiently high
   quality.  Many PRNG implementations generate number sequences that
   may appear to be random, but which nevertheless exhibit patterns or
   other weaknesses which make cryptanalysis or brute force attacks
   easier.  Implementers should be careful to use cryptographically
   secure PRNGs to avoid these problems.

4.12.  Denial of Service / Resource Exhaustion Attacks

   This specification includes a number of features which may make
   resource exhaustion attacks against servers possible.  For example,
   this protocol requires servers to track used nonces.  If an attacker
   is able to use many nonces quickly, the resources required to track
   them may exhaust available capacity.  And again, this protocol can
   require servers to perform potentially expensive computations in
   order to verify the signature on incoming requests.  An attacker may
   exploit this to perform a denial of service attack by sending a large
   number of invalid requests to the server.

   Resource Exhaustion attacks are by no means specific to this
   specification.  However, implementers should be careful to consider
   the additional avenues of attack that this protocol exposes, and
   design their implementations accordingly.  For example, entropy
   starvation typically results in either a complete denial of service
   while the system waits for new entropy or else in weak (easily
   guessable) secrets.  When implementing this protocol, servers should
   consider which of these presents a more serious risk for their
   application and design accordingly.

4.13.  SHA-1 Cryptographic Attacks

   SHA-1, the hash algorithm used in "HMAC-SHA1" and "RSA-SHA1"
   signature methods, has been shown to have a number of cryptographic
   weaknesses that significantly reduce its resistance to collision
   attacks.  While these weaknesses do not seem to affect the use of
   SHA-1 with the Hash-based Message Authentication Code (HMAC) and
   should not affect the "HMAC-SHA1" signature method, it may affect the
   use of the "RSA-SHA1" signature method.  NIST has announced that it
   will phase out use of SHA-1 in digital signtures by 2010 [NIST SHA-1
   Comments].

   Practically speaking, these weaknesses are difficult to exploit, and
   by themselves do not pose a significant risk to users of this
   protocol.  They may, however, make more efficient attacks possible,



Hammer-Lahav              Expires June 6, 2010                 [Page 34]

Internet-Draft                  OAuth 1.0                  December 2009


   and Servers should take this into account when considering whether
   SHA-1 provides an adequate level of security for their applications.

4.14.  Signature Base String Limitations

   The signature base string has been designed to support the signature
   methods defined in this specification.  Those designing additional
   signature methods, should evaluated the compatibility of the
   signature base string with their security requirements.

   Since the signature base string does not cover the entire HTTP
   request, such as most request entity-body, most entity-headers, and
   the order in which parameters are sent, servers should employ
   additional mechanisms to protect such elements.

4.15.  Cross-Site Request Forgery (CSRF)

   Cross-Site Request Forgery (CSRF) is a web-based attack whereby HTTP
   requests are transmitted from a user that the website trusts or has
   authenticated.  CSRF attacks on authorization approvals can allow an
   attacker to obtain authorization to protected resources without the
   consent of the User.  Servers SHOULD strongly consider best practices
   in CSRF prevention at all the protocol authorization endpoints.

   CSRF attacks on OAuth callback URIs hosted by clients are also
   possible.  Clients should prevent CSRF attacks on OAuth callback URIs
   by verifying that the resource owner at the client site intended to
   complete the OAuth negotiation with the server.  The methods for
   preventing such CSRF attacks are beyond the scope of this
   specification.

4.16.  User Interface Redress

   Servers should protect the authorization process against UI Redress
   attacks (also known as "clickjacking").  As of the time of this
   writing, no complete defenses against UI redress are available.
   Servers can mitigate the risk of UI redress attacks through the
   following techniques:

   o  Javascript frame busting.

   o  Javascript frame busting, and requiring that browsers have
      javascript enabled on the authorization page.

   o  Browser-specific anti-framing techniques.

   o  Requiring password reentry before issuing OAuth tokens.




Hammer-Lahav              Expires June 6, 2010                 [Page 35]

Internet-Draft                  OAuth 1.0                  December 2009


4.17.  Automatic Processing of Repeat Authorizations

   Servers may wish to automatically process authorization requests
   (Section 2.2) from clients which have been previously authorized by
   the resource owner.  When the resource owner is redirected to the
   server to grant access, the server detects that the resource owner
   has already granted access to that particular client.  Instead of
   prompting the resource owner for approval, the server automatically
   redirects the resource owner back to the client.

   If the client credentials are compromised, automatic processing
   creates additional security risks.  An attacker can use the stolen
   client credentials to redirect the resource owner to the server with
   an authorization request.  The server will then grant access to the
   resource owner's data without the resource owner's explicit approval,
   or even awareness of an attack.  If no automatic approval is
   implemented, an attacker must use social engineering to convince the
   resource owner to approve access.

   Servers can mitigate the risks associated with automatic processing
   by limiting the scope of token credentials obtained through automated
   approvals.  Tokens credentials obtained through explicit resource
   owner consent can remain unaffected.  Clients can mitigate the risks
   associated with automatic processing by protecting their client
   credentials.


5.  IANA Considerations

   This memo includes no request to IANA.


6.  Acknowledgments

   This specification is directly based on the OAuth Core 1.0 Revision A
   community specification which in turn was modeled after existing
   proprietary protocols and best practices that have been independently
   implemented by various companies.

   The community specification was edited by Eran Hammer-Lahav and
   authored by: Mark Atwood, Dirk Balfanz, Darren Bounds, Richard M.
   Conlan, Blaine Cook, Leah Culver, Breno de Medeiros, Brian Eaton,
   Kellan Elliott-McCrea, Larry Halff, Eran Hammer-Lahav, Ben Laurie,
   Chris Messina, John Panzer, Sam Quigley, David Recordon, Eran
   Sandler, Jonathan Sergent, Todd Sieling, Brian Slesinsky, and Andy
   Smith.

   The editor would like to thank the following individuals for their



Hammer-Lahav              Expires June 6, 2010                 [Page 36]

Internet-Draft                  OAuth 1.0                  December 2009


   invaluable contribution to the publication of this edition of the
   protocol: Lisa Dusseault, Justin Hart, Avshalom Houri, Chris Messina,
   Mark Nottingham, Tim Polk, Peter Saint-Andre, Joseph Smarr, and Paul
   Walker.


Appendix A.  Differences from the Community Edition

   This specification includes the following changes made to the
   original community document [OAuth Core 1.0 Revision A] in order to
   correct mistakes and omissions identified since the document has been
   published:

   o  Adjusted nonce language to indicate it is unique per token/
      timestamp/client combination.

   o  Removed the requirement for timestamps to be equal to or greater
      than the timestamp used in the previous request.

   o  Changed the nonce and timestamp parameters to OPTIONAL when using
      the "PLAINTEXT" signature method.

   o  Extended signature base string coverage which includes
      "application/x-www-form-urlencoded" entity-body parameters when
      the HTTP method used is other than "POST" and URI query parameters
      when the HTTP method used is other than "GET".

   o  Incorporated corrections to the instructions in each signature
      method to encode the signature value before inserting it into the
      "oauth_signature" parameter, removing errors which would have
      caused double-encoded values.

   o  Allowed omitting the "oauth_token" parameter when empty.

   o  Permitted sending requests for temporary credentials with an empty
      "oauth_token" parameter.

   o  Removed the restrictions from defining additional "oauth_"
      parameters.


Appendix B.  Document History

   [[ To be removed by the RFC editor before publication as an RFC. ]]

   -08





Hammer-Lahav              Expires June 6, 2010                 [Page 37]

Internet-Draft                  OAuth 1.0                  December 2009


   o  Adjusted timestamp language to allow use of time servers for clock
      sync.

   o  Revised security language for SHA-1 weakness and applicability.

   o  Added link to the community specification.

   o  Minor editorial changes.

   -07

   o  Corrected typos.

   o  Changed examples to use HTTPS in authorization step.

   o  Clarified the use of 'oauth_' tokens in the three static endpoint
      URIs.

   o  Edited abstract and introduction.

   -06

   o  Moved parameter section into client instructions.

   o  Added more examples in the delegation section, including more
      complete HTTP responses.

   o  Removed language about restricting the use of the 'oauth_' prefix.

   o  Changed the nonce and timestamp parameters to optional when using
      PLAINTEXT.

   o  Allowed empty token in temporary credentials requests.

   -05

   o  Replaced the word 'lexicographical' with 'ascending' in sorting
      instructions.

   o  Added note that the 'a3' parameter appears twice in the example.

   o  Made the note about the encoding scheme being different from most
      common implementations more explicit.

   o  Moved and cleaned up the example from appendix to introduction.
      Removed crypto details from the example.

   -04



Hammer-Lahav              Expires June 6, 2010                 [Page 38]

Internet-Draft                  OAuth 1.0                  December 2009


   o  Corrected typo and other minor editorial changes.

   o  Added warning about token sizes.

   o  Clarified that all 'oauth_' parameters must be transmitted using
      the same method.

   o  Added explicit requirement to exclude parameters not transmitted
      in a request in the signature base string (for example
      oauth_version when omitted).

   o  Explicitly set OAuth to use HTTP 1.1.

   o  Rearranged the signature base string section to provide a better
      narrative of how the HTTP request is normalized.  Added the
      protocol parameters to the examples to better demonstrate how they
      are incorporated in practice.

   o  Flipped the document order between authentication and
      authorization.

   o  Removed the requirement for timestamps to be equal or greater than
      previous timestamps.

   -03

   o  Updated draft with changes from OAuth Core 1.0 Revision A to fix a
      session fixation exploit.

   o  Small editorial corrections.

   o  Removed confusing language from 'Denial of Service / Resource
      Exhaustion Attacks'.

   o  Added new 'Differences from the Community Edition' appendix.

   o  Updated acknowledgements section.

   -02

   o  Corrected mistake in parameter sorting order (c%40 comes before
      c2).

   o  Added requirement to normalize empty paths as '/'.

   -01





Hammer-Lahav              Expires June 6, 2010                 [Page 39]

Internet-Draft                  OAuth 1.0                  December 2009


   o  Complete rewrite of the entire specification from scratch.
      Separated the spec structure into two parts and flipped their
      order.

   o  Corrected errors in instructions to encode the signature base
      string by some methods.  The signature value is encoded using the
      transport rules, not the spec method for encoding.

   o  Replaced the entire terminology.

   -00

   o  Initial draft based on the OAuth Core 1.0 community specification
      with the following changes.

   o  Various changes required to accommodate the strict format
      requirements of the IETF, such as moving sections around
      (Security, Contributors, Introduction, etc.), cleaning references,
      adding IETF specific text, etc.

   o  Moved the Parameter Encoding sub-section from section 5
      (Parameters) to section 9.1 (Signature Base String) to make it
      clear it only applies to the signature base string.

   o  Nonce language adjusted to indicate it is unique per token/
      timestamp/consumer combination.

   o  Added security language regarding lack of token secrets in RSA-
      SHA1.

   o  Fixed the bug in the Normalize Request Parameters section.
      Removed the "GET" limitation from the third bullet (query
      parameters).

   o  Removed restriction of only signing application/
      x-www-form-urlencoded in "POST" requests, allowing the entity-body
      to be used with all HTTP request methods.


7.  References

7.1.  Normative References

   [RFC2045]  Freed, N. and N. Borenstein, "Multipurpose Internet Mail
              Extensions (MIME) Part One: Format of Internet Message
              Bodies", RFC 2045, November 1996.

   [RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti, "HMAC: Keyed-



Hammer-Lahav              Expires June 6, 2010                 [Page 40]

Internet-Draft                  OAuth 1.0                  December 2009


              Hashing for Message Authentication", RFC 2104,
              February 1997.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616, June 1999.

   [RFC2617]  Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,
              Leach, P., Luotonen, A., and L. Stewart, "HTTP
              Authentication: Basic and Digest Access Authentication",
              RFC 2617, June 1999.

   [RFC2818]  Rescorla, E., "HTTP Over TLS", RFC 2818, May 2000.

   [RFC3447]  Jonsson, J. and B. Kaliski, "Public-Key Cryptography
              Standards (PKCS) #1: RSA Cryptography Specifications
              Version 2.1", RFC 3447, February 2003.

   [RFC3629]  Yergeau, F., "UTF-8, a transformation format of ISO
              10646", STD 63, RFC 3629, November 2003.

   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, January 2005.

   [W3C.REC-html40-19980424]
              Hors, A., Jacobs, I., and D. Raggett, "HTML 4.0
              Specification", World Wide Web Consortium
              Recommendation REC-html40-19980424, April 1998,
              <http://www.w3.org/TR/1998/REC-html40-19980424>.

7.2.  Informative References

   [NIST SHA-1 Comments]
              Burr, W., "NIST Comments on Cryptanalytic Attacks on
              SHA-1".

   [OAuth Core 1.0 Revision A]
              OAuth, OAuth Community., "OAuth Core 1.0 Revision A".









Hammer-Lahav              Expires June 6, 2010                 [Page 41]

Internet-Draft                  OAuth 1.0                  December 2009


Author's Address

   Eran Hammer-Lahav (editor)

   Email: eran@hueniverse.com
   URI:   http://hueniverse.com













































Hammer-Lahav              Expires June 6, 2010                 [Page 42]


