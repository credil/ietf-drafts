<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-bhatia-karp-short-lived-keys-00"
     ipr="trust200902">
  <front>
    <title abbrev="Short-lived Keys for Routing Protocols">
		Using short-lived traffic keys for Routing Protocols</title>

    <author fullname="Manav Bhatia" initials="M." surname="Bhatia">
      <organization>Alcatel-Lucent</organization>

      <address>
        <postal>
          <street></street>

          <city></city>

          <region></region>

          <code></code>

          <country>India</country>
        </postal>

        <email>manav.bhatia@alcatel-lucent.com</email>
      </address>
    </author>

    <date day="16" month="April" year="2011" />

    <abstract>
      <t>This draft proposes a generic mechanism for deriving short-lived
            traffic keys from the longed-lived keys. The long-lived key could be
           a preshared secret or a key obtained from some key management protocol. 
           The mechanism described in this draft can be used to implement
           key rollovers without requiring the participating routers to exchange any
           additional information.</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t> <xref target="I-D.ietf-karp-design-guide"></xref> describes why the 
             cryptographic keys must be periodically changed for greater security. 
             These should be changed when an operator who had access to them
             leaves. It is known that using the key chains 
             also does not help as one still has to change all the keys in the key chain 
             when an operator having access to all those keys leaves the company. 
  			 Another threat against the long-lived key is that one of the
 		     systems storing the key, or one of the users entrusted with the
 		     key, will be subverted. So, while there may not be
 		     cryptographic motivations for changing the keys, there could be
 		     systems security motivations for doing the same.
	  </t>

      <t>On the other hand, where manual key distribution methods are
      subject to human error and frailty, more frequent key changes
      might actually increase the risk of exposure as it is during
      the time that the keys are being changed that they are likely
      to get disclosed. In these cases, especially when very strong
      cryptography is employed, it may be more prudent to have fewer,
      well controlled manual key distributions rather than more
      frequent, poorly controlled manual key distributions. In
      general, where strong cryptography is employed, physical,
      procedural, and logical access protection considerations often
      have more impact on the key life than do algorithm and key size
      factors.</t>

      <t>For incremental deployments <xref target="I-D.ietf-karp-design-guide"></xref>
           suggests associating life times with the send and the receive keys in the key chain
           for the long-lived keys.  This is an incremental approach that
      we could use till the cryptographic keying material for
      individual sessions is derived from the keying material stored
      in the database of long-lived cryptographic keys as described
       in <xref target="I-D.ietf-karp-crypto-key-table"></xref>. 
      A key derivation function
      (KDF) and its inputs are specified in the database of
      long-lived cryptographic keys and session specific values based on
      the routing protocol are input to the KDF. This document describes
      how the routing protocols can use session specific values that can be 
      fed into the KDF to derive a short-lived traffic key that the routing 
      protocols can use.  </t>
      
    </section>

    <section title="Design Considerations">
      <t> It is desired that the algorithm be such that if even if an attacker
            is aware of the long-lived key, guessing the short-lived traffic key
           that will be generated next should not be possible. This directly implies that the 
          session specific values used by the routing protocols should not be 
          deterministic and predictible.</t>

	<t> Thus for instance choosing the Router ID is a bad example of a session
          specific value as this is deterministic and will not change with time and
          upon router cold restarts. Ideally, it should be a value that can be easily changed
          whenever the operators requires and must never be the same upon successive cold 
         restarts.
	</t>

	<t> Changing the session specific value would lead to a change in the 
          short-lived key as its this thats fed into the KDF along with the long-lived
          key. Thus traffic key rollover can be easily implemented by passing the
          new session specific values. This means that changing the traffic keys
 		 is directly dependent upon the ease with which the session specific parameters
         can be generated, changed and exchanged.         
	</t>

	<t> There are two ways to exchange the session specific values between the
           peers. One is to use a new key management protocol that does this. The other
           is to keep this control with the routing protocols that want to use these short-lived
           keys. This document goes with the second approach as it is belived that the 
           key management protocol will be used for exchanging the long-lived keys and 
		   the onus lies on the routing protocols or some other entity to provide the material
          that will be fed to the KDF to generate the short-lived traffic keys.
	</t>
    </section>

<section anchor="Session" title="Session Specific Value fed into the KDF">
      <t> This document proposes a simple extension to the routing protocols
 		    where a Nonce (really nothing more than a random number) 
           is mixed with the longed-lived key, fed into the KDF to derive a short-lived key.
			Since the Nonce is a random, unsigned 32 - 64 bits number, it can be easily
			generated and exchanged between the peers. Its unpredictible and will 
            never be the same upon router cold restarts. It thus fullfills all
			the requirements listed in the preceeding section.
	</t>

    </section>

<section anchor="Exchange" title="Exchanging the Nonce">
      <t> There are two ways to generate the short-lived traffic key that will
			be used to authenticate the protocol packets. It is assumed that the
			routers have a long-lived cryptographic key that was either exchanged
		   manually or was exchanged using an automated key management
  		   protocol.
	 </t>

	<t> This document uses OSPF <xref target="RFC2328"></xref> as an 
		example to illustrate how the mechanism will work. This however, is a 
		generic mechanism and will work for other protocols as well. It might
	 	require a few tweaks here and there, but the overall mechanism will
		remain the same.
	</t>
<section title="Generating a Key based on Peer's Nonce">
	<t>In this approach a router generates a short-lived traffic key based
         on the Nonce that its peer router sends. </t>
	<t>
		Each router generates a Nonce that is sent with
		the OSPF Hello packets. Initially, each router uses the long-lived
		key to authenticate the packet. It also uses a new Authentication Type
		that will indicate that the packet is using a long-lived key to secure the
		packet. The reciever, upon successfully authenticating the packet,
        will use the Nonce thats carried in the packet to derive a short-lived 
		traffic key. It will use this traffic key to secure all subsequent OSPF
		protocol packets. Since the Nonces generated by each router would be
		different, the traffic keys derived would also be different. Thus asymmetrical 
		keys will be used for transmitting and receiving the packets. Whenever 
       a router uses the short-lived key, it will indicate so in the protocol packets
		so that the reciever knows what key to use when authenticating the incoming
		protocol packets. Since the sender has derived the traffic key based on the
        Nonce that the reciever had sent, the reciever can trivially authenticate the 
		packet.		
	</t>

	<t>	While this scheme works very well when there are two routers speaking to each
			other, it becomes slightly convoluted when you try to implement this on a 
	        shared medium (local area network) where
			one router could be speaking to multiple routers. Since this scheme relies on
            generating the short-lived key based on what you recieve, how would a router
			decide what traffic key to use when it recieves a Nonce for multiple routers. 
			We could decide on some complex algorithm based on what the designated
			router (DR) on the LAN announces, but that in my opinion will become needlessly
			complex as we will have to keep the failure scenarios in mind when the DR goes down 
            and the backup designated router (BDR) takes over. Instead, we can use the other approach
			that is described in the following section.
	</t>
</section>

<section title="Generating a Key based on your own Nonce">
<t>In this approach a router generates a short-lived traffic key based
         on the Nonce that it generates. </t>

	<t>
	   Each router generates a Nonce that is sent in
		the OSPF Hello packets. Initially, routers use a long-lived
		key to secure the packet. They also use a new Authentication Type
		that indicates that the packet is using a long-lived key to secure the
		packet. The reciever has to use the challenge and response 
       mechanism described in <xref  target="I-D.bhatia-karp-ospf-ip-layer-protection">
		</xref> to be really sure that its speaking to a live router and not someone
       who is replaying the packets from an earlier stale session. </t>

	<t> Once the routers have verified that they are speaking to live, legitimate peers
		they can each switch to using the short-lived key derived from the Nonce
		that they have generated. The sender will indicate in the protocol packet that it is
		using a traffic key generated from the Nonce thats carried there.
		Since the Nonce is carried in clear in the protocol packet, the reciever,
		is able to constuct the traffic key as its also aware of the KDF and the 
		long lived key. The receiver thus uses the short-lived key for authenticating
		the packets.
	</t>
	<t> 
		To generate a new short-lived traffic key the router has to generate a 
        new Nonce. Once thats verified using the mechanisms defined in 
		<xref  target="I-D.bhatia-karp-ospf-ip-layer-protection"></xref> 
        all routers will use the new traffic key to authenticate the packets coming
		from this peer. Thus session key rollover can be easily implemented.
	</t>

	
</section>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t> This document enhances the security of the routing protocols 
             by describing a mechanism that can be used to 
     		 implement short-lived key rollovers.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This draft places no request to IANA.</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>  TBD</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">


      <?rfc include="reference.RFC.2119"?>
	<?rfc include="reference.RFC.2328"?>

    </references>

    <references title="Informative References">
     

      <?rfc include='reference.I-D.ietf-karp-design-guide'?>

      <?rfc include='reference.I-D.ietf-karp-crypto-key-table'?>
  <?rfc include='reference.I-D.bhatia-karp-ospf-ip-layer-protection'?>

      
    </references>
  </back>
</rfc>
