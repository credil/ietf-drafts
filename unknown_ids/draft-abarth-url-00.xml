<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<!--<!DOCTYPE rfc SYSTEM "rfc2629.dtd">-->
<rfc ipr="trust200902" docName="draft-abarth-url-00" category="info">
  <front>
    <title abbrev="How Browsers Process URLs">
      How Browsers Process URLs
    </title>
    <author initials="A." surname="Barth" fullname="Adam Barth">
      <organization abbrev="Google, Inc.">
        Google, Inc.
      </organization>
      <address>
        <email>ietf@adambarth.com</email>
        <uri>http://www.adambarth.com/</uri>
      </address>
    </author>
    <date month="November" year="2010"/>
    <workgroup>iri</workgroup>
    <abstract>
      <t>This document contains a precise specification of how browsers process
      URLs.  The behavior specified in this document might or might not match
      any particular browser, but browsers might be well-served by adopting the
      behavior defined herein.</t>
    </abstract>
    <note title="Editorial Note (To be removed by RFC Editor)">
      <t>If you have suggestions for improving this document, please send
      email to <eref target="mailto:public-iri@w3.org" />.  Further Working
      Group information is available from <eref
      target="https://tools.ietf.org/wg/iri/"/>.</t>
    </note>
  </front>
  <middle>
    <section title="Open Issues">
      <t>Browsers parse URLs differently depending on which operating system
      they're running on.  The problem is that they want to do sensible things
      for file paths, but file paths look different on Windows and Unix
      systems.</t>

      <t>How should we handle cases where browsers disaggree with the regular
      expression in RFC 3986?  Currently, this document aims to describe how
      browsers behave, but we'll likely need to compare that to RFC 3986 at
      some point.  Some specific differences that have been brought up on the
      mailing list:
      <list style="symbols">
        <t>http:///example.com/</t>
        <t>http://example.com;</t>
      </list>
      </t>
    </section>
    <section title="Definitions">
      <t>A /control character/ is a character whose value is less than or equal
      to U+0020 (" ").</t>

      <t>A /slash character/ is either U+???? ("/") or U+???? ("\").</t>

      <t>An /authority terminating characters/ is either a slash charcter,
      U+???? ("?"), U+???? ("#"), or U+???? (";").</t>

      <t>During a parsing algorithm, the /remaining string/ are the characters
      of the input that have not yet been consumed.</t>
    </section>
    <section title="Parsing a URL">
      <t>Given a string of characters, find the scheme, as described in Section
      ??.</t>

      <t>If the URL is invalid:
      <list>
        <t>-> Abort these steps.</t>
      </list>
      </t>

      <t>If the scheme is a single upper or lower case ASCII character:
      <list>
        <t>-> TODO: Windows drive specs!</t>
      </list>
      </t>

      <t>If the scheme is a ASCII case-insensitive match for "file":
      <list>
        <t>-> TODO: File URLs!</t>
      </list>
      </t>

      <t>If the scheme is a ASCII case-insensitive match for "mailto":
      <list>
        <t>-> TODO: I think mailto URLs are special, but more testing is
        required.</t>
      </list>
      </t>

      <t>If the scheme is hierarchical:
      <list>
        <t>-> In the after-scheme, if any, find the authority, path, query, and
        fragment, as decribed in Section ??.</t>

        <t>-> In the authority, if any, find the user information, host, and
        port, as described in Section ??.</t>

        <t>-> In the user-info, if any, find the user name and password, as
        described in Section ??.</t>

        <t>-> Abort these steps.</t>
      </list>
      </t>

      <t>The remaining string is the /path/.</t>

      <section title="Finding the scheme">
        <t>Consume all leading and trailing control characters.</t>

        <t>If the remaining string does not contain a ":" character:
        <list>
          <t>-> The URL is invalid.</t>

          <t>-> Abort these steps.</t>
        </list>
        </t>

        <t>Consume characters up to, but not including, the first ":"
        character.  These characters are the /scheme/.</t>

        <t>Consume the ":" character.</t>

        <t>The reamining characters are the /after-scheme/.</t>
      </section>
      <section title="Finding the authority, path, query, and fragment">
        <t>Consume any number of slash characters.</t>

        <t>If the remaining string does not contain any authority terminating
        characters:
        <list>
          <t>-> The remaining string is the /authority/.</t>

          <t>-> Abort these steps.</t>
        </list>
        </t>

        <t>Consume characters up to, but not including, the first authority
        terminating character.  The consumed characters are /authority/.</t>

        <t>If the remaining string does not contain a "?" character or a "#
        character:
        <list>
          <t>-> The remaining string is the /path/.</t>

          <t>-> Abort these steps.</t>
        </list>
        </t>

        <t>Consume characters up to, but not including, the first "?" or "#"
        charcter.  The consumed characters are the /path/.</t>

        <t>If the first character of the remaining string is a "?" character:
        <list>
          <t>-> Consume the "?" character.</t>

          <t>-> If the remaining string does not contain a "#" character:
          <list>
            <t>-> The remaining string is the /query/.</t>
       
            <t>-> Abort these steps.</t>
          </list>
          </t>

          <t>-> Consume characters up to, but not including, the first "#"
          charcter.  The consumed characters are the /query/.</t>
        </list>
        </t>

        <t>Consume the "#" character.</t>

        <t>The remaining string is the /fragment/.</t>
      </section>
      <section title="Finding the user information, host, and port">
        <t>If the remaining string contains an "@" character:
        <list>
          <t>-> Consume characters up to, but not including the *last* "@"
          character.  The consumed characters are the /user-info/.</t>

          <t>-> Consume the "@" character.</t>
        </list>
        </t>

        <t>If the remaining string does not contain an ":" character:
        <list>
          <t>-> The remaining string is the /host/.</t>

          <t>-> Abort these steps.</t>
        </list>
        </t>

        <t>If the first character of the remaining string is a "[" character,
        the remaining string contains a "]" character, and the last ":"
        character in the remaining string occurs before the last "]" character
        in the remaining string:
        <list>
          <t>-> The remaining string is the /host/.</t>

          <t>-> Abort these steps.</t>
        </list>
        </t>

        <t>Consume characters up to, but not including, the last ":" character.
        The consumed characters are the /host/.</t>

        <t>Consume the ":" character.</t>

        <t>The remaining string is the /port/.</t>
      </section>
      <section title="Find the user name and password">
        <t>If the remaining string does not contain a ":" character:
        <list>
          <t>-> The remaining string is the /user/.</t>

          <t>-> Abort these steps.</t>
        </list>
        </t>

        <t>Consume characters up to, but not including, the first ":"
        character.  The consumed characters are the /user/.</t>

        <t>Consume the ":" character.</t>

        <t>The remaining string is the /password/.</t>
      </section>
    </section>
    <section title="Resolving a string relative to a base URL">
      <t>Given a string /spec/ and a ParsedURL /base-url/, find the scheme of
      spec.</t>

      <t>TODO: We probably need to trim leading and trailing control
      characters.</t>

      <t>If spec is an invalid URL:
      <list>
        <t>-> The resolved URL is spec resolved as relative URL.</t>

        <t>-> Abort these steps.</t>
      </list>
      </t>

      <t>If spec's scheme contains any characters which are not "valid scheme
      characters" (TODO: Define valid scheme characters):
      <list>
        <t>-> The resolved URL is spec resolved as relative URL.</t>

        <t>-> Abort these steps.</t>
      </list>
      </t>

      <t>If base-url's scheme is an ASCII case insensitive match for spec's
      scheme and the shared scheme is hierarchical:
      <list>
        <t>-> The resolved URL is spec's after-scheme resolved as a relative
        URL.</t>

        <t>-> Abort these steps.</t>
      </list>
      </t>

      <t>The resolved URL is spec parsed as an absolute URL.</t>

      <section title="Resolving a string as a relative URL">
        <t>Given a string /spec/ and a ParsedURL /base-url/...</t>

        <t>TODO: If base-url's scheme is not hierarchical, we can't resolve as
        a relative URL.  We'll probably want to return an invalid URL.  Check
        what happens when resolving an empty string as a relative URL with a
        non-hierarchical base.</t>

        <t>If spec is empty:
        <list>
          <t>-> The resolved URL is identical to base-url, with the fragment,
          if any, removed.</t>

          <t>-> Abort these steps.</t>
        </list>
        </t>

        <t>If the first character of spec is a slash character:
        <list>
          <t>-> If spec has at least two characters and the second character is
          also a slash character:
          <list>
            <t>-> The resolved URL is spec resolved as a scheme-relative URL.</t>
          </list>
          Otherwise:
          <list>
            <t>-> The resolved URL is spec resolved as an authority-relative URL.</t>
          </list>
          </t>

          <t>-> Abort these steps.</t>
        </list>
        </t>

        <t>If the first character of spec is a "?" character:
        <list>
          <t>-> The resolved URL is spec resolved as a query-relative URL.</t>

          <t>-> Abort these steps.</t>
        </list>
        </t>

        <t>If the first character of spec is a "#" character:
        <list>
          <t>-> The resolved URL is spec resolved as a fragment-relative
          URL.</t>

          <t>-> Abort these steps.</t>
        </list>
        </t>

        <t>The resolved URL is spec resolved as a path-relative URL.</t>
      </section>
      <section title="Resolving a string as a scheme-relative URL">
        <t>Given a string /spec/ and a ParsedURL /base-url/, let resolved-url
        be
        <list style="symbols">
          <t>base-url's scheme</t>
          <t>concatenated with ":",</t>
          <t>concatenated with spec.</t>
        </list>
        </t>

        <t>The resolved URL is resolved-url parsed as an absolute URL.</t>
      </section>
      <section title="Resolving a string as an authority-relative URL">
        <t>Given a string /spec/ and a ParsedURL /base-url/, let resolved-url be
        <list style="symbols">
          <t>base-url's scheme</t>
          <t>concatenated with "://",</t>
          <t>concatenated with base-url's authority,</t>
          <t>concatenated with spec.</t>
        </list>
        </t>

        <t>The resolved URL is resolved-url parsed as an absolute URL.</t>
      </section>
      <section title="Resolving a string as a query-relative URL">
        <t>Given a string /spec/ and a ParsedURL /base-url/, let resolved-url
        be
        <list style="symbols">
          <t>base-url's scheme</t>
          <t>concatenated with "://",</t>
          <t>concatenated with base-url's authority,</t>
          <t>concatenated with base-url's path,</t>
          <t>concatenated with spec.</t>
        </list>
        </t>

        <t>The resolved URL is resolved-url parsed as an absolute URL.</t>
      </section>
      <section title="Resolving a string as a fragment-relative URL">
        <t>Given a string /spec/ and a ParsedURL /base-url/, let resolved-url
        be
        <list style="symbols">
          <t>base-url's scheme</t>
          <t>concatenated with "://",</t>
          <t>concatenated with base-url's authority,</t>
          <t>concatenated with base-url's path,</t>
          <t>concatenated with "?",</t>
          <t>concatenated with base-url's query,</t>
          <t>concatenated with spec.</t>
        </list>
        </t>

        <t>The resolved URL is resolved-url parsed as an absolute URL.</t>
      </section>
      <section title="Resolving a string as a path-relative URL">
        <t>TODO: Handle path-relative URLs.  This requires a bunch of path and
        dot semantics.</t>
      </section>
    </section>
  </middle>
  <back>
    <section title="Acknowledgements">
      <t>TODO</t>
    </section>
  </back>
</rfc>
