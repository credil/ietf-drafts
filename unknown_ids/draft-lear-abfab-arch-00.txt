


ABFAB                                                         J. Howlett
Internet-Draft                                                 JANET(UK)
Intended status: Informational                               S. Hartmann
Expires: April 21, 2011                                Painless Security
                                                           H. Tschofenig
                                                  Nokia Siemens Networks
                                                                 E. Lear
                                                      Cisco Systems GmbH
                                                        October 18, 2010


      Application Bridging for Federated Access Beyond Web (ABFAB)
                              Architecture
                      draft-lear-abfab-arch-00.txt

Abstract

   Over the last decade a substantial amount of work has occurred in the
   space of federated authentication and authorization.  Most of this
   effort has focused on two common use cases: network and web-based
   access, with few common building blocks within the architecture.
   This memo describes an architecture that makes use of extensions to
   the commonly used mechanisms for both federated and non-federated
   authentication and authorization, including Radius/Diameter, GSS/GS2,
   and SAML, to primarily address non-web based authentication, in a
   that will scale to large numbers of federations.

Status of this Memo

   This Internet-Draft is submitted to IETF in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.




Howlett, et al.          Expires April 21, 2011                 [Page 1]

Internet-Draft             ABFAB Architecture               October 2010


   This Internet-Draft will expire on April 21, 2011.

Copyright Notice

   Copyright (c) 2010 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the BSD License.



































Howlett, et al.          Expires April 21, 2011                 [Page 2]

Internet-Draft             ABFAB Architecture               October 2010


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1.  Federation Description . . . . . . . . . . . . . . . . . .  3
   2.  Terminology  . . . . . . . . . . . . . . . . . . . . . . . . .  7
   3.  Architecture . . . . . . . . . . . . . . . . . . . . . . . . .  8
   4.  Privacy Considerations . . . . . . . . . . . . . . . . . . . . 11
   5.  Security Considerations  . . . . . . . . . . . . . . . . . . . 12
   6.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 13
   7.  Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 14
   8.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 15
     8.1.  Normative References . . . . . . . . . . . . . . . . . . . 15
     8.2.  Informative References . . . . . . . . . . . . . . . . . . 15
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 18





































Howlett, et al.          Expires April 21, 2011                 [Page 3]

Internet-Draft             ABFAB Architecture               October 2010


1.  Introduction

   XXX This document is a first draft.  Comments and contributions are
   requested.

   The Internet makes uses of numerous authentication methods to grant
   access to various resources.  These mechanisms have been generalized
   and scaled over the last decade through mechanisms such as GS2,
   Security Assertion Markup Language (SAML) [OASIS.saml-core-2.0-os],
   Radius, and Diameter.  So-called "federated" access has evolved over
   the last decade between web servers through such standards as SAML,
   OpenID, and OAUTH, allowing entire domains of individuals to be
   authorized for resources.  The key scaling points that have been
   addressed are the following:

   o  An Internet service need not copy manually authentication
      information from a domain to allow for authentication and
      authorization.

   o  Individual users are able to make use of a single credential to
      authenticate to such services.

   As the number of such federated services has proliferated, however,
   the role of the individual has become ambiguous in certain
   circumstances.  For example, a school might provide online access to
   grades to a parent who is also a teacher.  She must clearly
   distinguish her role upon access.  After all, she is probably not
   allowed to edit her own child's grades.

   Similarly, as the number of federations proliferates, it becomes
   increasingly difficult to discover which identity provider a user is
   associated with.  This is true for both the web and non-web case, but
   particularly acute for the latter ans many non-web authentication
   systems are not semantically rich enough on their own to allow for
   such ambiguities.  For instance, in the case of an email provider,
   the use of SMTP and IMAP protocols does not on its own provide for a
   way to select a federation.  However, the building blocks do exist to
   add this functionality.

1.1.  Federation Description

   The typical setup for a three party protocol involves the following
   entities:

   o  the End Host,

   o  the Identity Provider, and




Howlett, et al.          Expires April 21, 2011                 [Page 4]

Internet-Draft             ABFAB Architecture               October 2010


   o  the Relying Party.

   These entities are illustrated graphically in Figure 1.


                          -----
                        /-     -\
                      //         \\
                      /           \
                     |             |
    ,----------\    |               |   ,---------\
    | Identity |    |               |   | Relying |
    | Provider +----+   Federation  +---+ Party   |
    `----------'    |               |   '---------'
             <      |               |        >
              \      |             |        /
               \      \           /        /
                \     \\         //       /
                \       \-     -/        /
                 \        -----         /
                  \                    /
                   \  +------------+  /
                    \ |            | /
                     v|  End Host  |v
                      |            |
                      +------------+

              Figure 1: Three Party Authentication Framework

   Figure 1 also shows the logical entity 'Federation'.  In a
   federation, policy is agreed upon by some form of administrative
   management, and then instantiated through an operational framework
   that the members use, and where compliance is measured in some
   fashion.  Some deployments may be required to deploy message routing
   intermediaries, such as application layer relays or proxies, to offer
   the required technical functionality while in other deployments those
   are missing.

   Often a real world entity is associated with the end host and
   responsible for interacting with the identity provider, even if it is
   only as weak as completing a web form and confirming the verification
   email.  The outcome of this initial registration step is that
   credentials are made available to the identity provider and to the
   end host.  It is important to highlight that in some scenarios there
   might indeed be a human behind the device denoted as end host and in
   other cases there is no human involved in the actual protocol
   execution.




Howlett, et al.          Expires April 21, 2011                 [Page 5]

Internet-Draft             ABFAB Architecture               October 2010


   To support the more generic deployment case, we assume that the
   identity provider and the relying party belong to different
   administrative domains.  The nature of federation dictates that there
   is some form of relationship between the identity provider and the
   relying party.  This is particularly important when the relying party
   wants to use information obtained from the identity provider for
   authorization decisions and when the identity provider does not want
   to release information to every relying party (or only under certain
   conditions).  While it is possible to have a bilateral agreement
   between every identity provider and every relying party; on an
   Internet scale this setup requires the introduction of a federation
   concept, as the management of such pair-wise relationships would
   otherwise prove burdensome.  While many of the non-technical aspects
   of such a federation, such as business practices and operational
   arrangements, are outside the scope of the IETF they still impact the
   architecture setup on how to ensure the dynamic establishment of
   trust.

   Our key design goals are as follows:

   o  Each party of a transaction will be authenticated, and the
      principal will be authorized for access to a specific resource .

   o  Means of authentication is decoupled so as to allow for multiple
      authentication methods.

   o  Hence, the architecture requires no sharing of long term private
      keys.

   o  The system will scale to large numbers of identity providers,
      relying parties, and users.

   o  The system will be designed primarily for non-Web-based
      authentication.

   o  The system will build upon existing standards, components, and
      operational practices.

   Designing new three party authentication and authorization protocols
   is hard and frought with risk ofcryptographic flaws.  Achieving
   widespead deployment is even more difficult.  A lot of attention on
   federated access has been devoted to the Web. This document instead
   focuses on a non-Web-based environment and focuses on those protocols
   where HTTP is not used.  Despite the increased excitement for
   layering every protocol on top of HTTP there are still a number of
   protocols available that do not use HTTP-based transports.  Many of
   these protocols are lacking a native authentication and authorization
   framework of the style shown in Figure 1.



Howlett, et al.          Expires April 21, 2011                 [Page 6]

Internet-Draft             ABFAB Architecture               October 2010


   Interestingly, for network access authentication the usage of the AAA
   framework with RADIUS [RFC2865] and Diameter [RFC3588] was quite
   successful from a deployment point of view.  To map the terminology
   used in Figure 1 to the AAA framework the identity provider
   corresponds to the AAA server, the relying party corresponds to the
   AAA client, and the technical building blocks of a federation are AAA
   proxies, relays and redirect agents (particularly if they are
   operated by third parties, such as AAA brokers and clearing houses).
   The front-end, i.e. the end host to AAA client communication, is in
   case of network access authentication offered by link layer protocols
   that forward authentication protocol exchanges back-and-forth.  An
   example of a large scale Radius-based federation is EDUROAM [1].

   Is it possible to design a system that builds on top of successful
   protocols to offer non-Web-based protocols with a solid starting
   point for authentication and authorization in a distributed system?



































Howlett, et al.          Expires April 21, 2011                 [Page 7]

Internet-Draft             ABFAB Architecture               October 2010


2.  Terminology

   This document uses identity management and privacy terminology from
   [I-D.hansen-privacy-terminology].















































Howlett, et al.          Expires April 21, 2011                 [Page 8]

Internet-Draft             ABFAB Architecture               October 2010


3.  Architecture

   Section 1 already introduced the federated access architecture, with
   the illustration of the different actors that need to interact, but
   it did not expand on the specifics of providing support for non-Web
   based applications.  This section details this aspect and motivates
   design decisions.  The main theme of the work described in this
   document is focused on re-using existing building blocks that have
   been deployed already and to re-arrange them in a novel way.

   A key design goal is the re-use an existing infrastructure, we build
   upon the AAA framework as utilized by RADIUS [RFC2138] and Diameter
   [RFC3588].  Since this document does not aim to re-describe the AAA
   framework the interested reader is referred to [RFC2904].  Building
   on the AAA infrastructure, and RADIUS and Diameter as protocols,
   modifications to that infrastructure is to be avoided.  Also,
   modifications to AAA servers should be kept at a minimum.

   The astute reader will notice that RADIUS and Diameter have
   substantially similar characteristics.  Why not pick one?  A key
   difference is that today RADIUS is largely transported upon TCP, and
   its use is largely, though not exclusively, intra-domain.  Diameter
   itself was designed to scale to broader uses.  We leave as a
   deployment decision, which protocol will be appropriate.

   Experience has taught us one key security and scalability
   requirement: it is important that the relying party not get in
   possession of the long-term secret of the entity being authenticated
   by the AAA server.  Aside from a valuable secret being exposed, a
   synchronization problem can also often develop.  Since there is no
   single authentication mechanism that will be used everywhere there is
   another associated requirement: The authentication framework must
   allow for the flexible integration of authentication mechanisms.  For
   instance, some identity providers may require hardware tokens while
   others may use passwords.  A service provider would want to support
   both sorts of federations, and others.

   Fortunately, these requirements can be met by utilizing standardized
   and successfully deployed technology, namely by the Extensible
   Authentication Protocol (EAP) framework [RFC3748].  Figure 2
   illustrates the integration graphically.

   EAP is an end-to-end framework; it provides for two-way communication
   between a peer (i.e,service client or principal) through the
   authenticator (i.e., service provider) to the back-end (i.e.,
   identity provider).  Conveniently, this is precisely the
   communication path that is needed for federated identity.  Although
   EAP support is already integrated in AAA systems (see [RFC3579] and



Howlett, et al.          Expires April 21, 2011                 [Page 9]

Internet-Draft             ABFAB Architecture               October 2010


   [RFC4072]) several challenges remain: one is to carry EAP payloads
   from the end host to the relying party, and the other is to determine
   where identity provider.  We will look at these challenges in turn.
   [XXX but we don't get to discovery just yet.]

   Although this architecture assumes updates to both the relying party
   as well as to the end host for application integration, those changes
   are kept at a minimum.  A mechanism that can demonstrate deployment
   benefits (based on ease of update of existing software, low
   implementation effort, etc.)is preferred and there may be a need to
   specify multiple mechanisms to support the range of different
   deployment scenarios.

   There are a number of ways for encapsulating EAP into an application
   protocol.  For ease of integration with a wide range of non-Web based
   application protocols the usage of the GSS-API was chosen.
   Encapsulating EAP into the GSS-API also allows EAP to be used in
   SASL.  A description of the technical specification can be found in
   [I-D.ietf-abfab-gss-eap].  Other alternatives exist as well and may
   be considered later, such as "TLS using EAP Authentication"
   [I-D.nir-tls-eap].






























Howlett, et al.          Expires April 21, 2011                [Page 10]

Internet-Draft             ABFAB Architecture               October 2010


                                    +--------------+
                                    |  AAA Server  |
                                    |  (Identity   |
                                    |  Provider)   |
                                    +-^----------^-+
                                      * EAP      | RADIUS/
                                      *          | Diameter
                                    --v----------v--
                                 ///                \\\
                               //                      \\   ***
                              |        Federation        |  back-
                              |                          |  end
                               \\                      //   ***
                                 \\\                ///
                                    --^----------^--
                                      * EAP      | RADIUS/
                    Application       *          | Diameter
   +-------------+  Data            +-v----------v--+
   |             |<---------------->|               |
   | Client      |  EAP/EAP Method  | Server Side   |
   | Application |<****************>| Application   |
   | @ End Host  |  GSS-API         |(Relying Party)|
   |             |<---------------->|               |
   |             |  Application     |               |
   |             |  Protocol        |               |
   |             |<================>|               |
   +-------------+                  +---------------+
                  *** front-end ***

   Legend:

    <****>: End-to-end exchange
    <---->: Hop-by-hop exchange
    <====>: Protocol through which GSS-API/GS2 exchanges are tunnelled

       Figure 2: Architecture for Federated Access of non-Web based
                               Applications














Howlett, et al.          Expires April 21, 2011                [Page 11]

Internet-Draft             ABFAB Architecture               October 2010


4.  Privacy Considerations

   Sharing identity information may lead to privacy violations.  A
   future verison of this document will provide a discussion of privacy
   considerations in a federated access environment.














































Howlett, et al.          Expires April 21, 2011                [Page 12]

Internet-Draft             ABFAB Architecture               October 2010


5.  Security Considerations

   This entire document is about security.  A future version of the
   document will highlight some important security concepts.















































Howlett, et al.          Expires April 21, 2011                [Page 13]

Internet-Draft             ABFAB Architecture               October 2010


6.  IANA Considerations

   This document does not require actions by IANA.
















































Howlett, et al.          Expires April 21, 2011                [Page 14]

Internet-Draft             ABFAB Architecture               October 2010


7.  Acknowledgments

   We would like to thank Mayutan Arumaithurai and Klaas Wierenga for
   their feedback.  Additionally, we would like to thank Eve Maler,
   Nicolas Williams, Bob Morgan, Scott Cantor, Jim Fenton, and Luke
   Howard for their feedback on the federation terminology question.

   Furthermore, we would like to thank Klaas Wierenga for his review of
   the pre-00 draft version.










































Howlett, et al.          Expires April 21, 2011                [Page 15]

Internet-Draft             ABFAB Architecture               October 2010


8.  References

8.1.  Normative References

   [RFC2865]  Rigney, C., Willens, S., Rubens, A., and W. Simpson,
              "Remote Authentication Dial In User Service (RADIUS)",
              RFC 2865, June 2000.

   [RFC3588]  Calhoun, P., Loughney, J., Guttman, E., Zorn, G., and J.
              Arkko, "Diameter Base Protocol", RFC 3588, September 2003.

   [RFC3748]  Aboba, B., Blunk, L., Vollbrecht, J., Carlson, J., and H.
              Levkowetz, "Extensible Authentication Protocol (EAP)",
              RFC 3748, June 2004.

   [RFC3579]  Aboba, B. and P. Calhoun, "RADIUS (Remote Authentication
              Dial In User Service) Support For Extensible
              Authentication Protocol (EAP)", RFC 3579, September 2003.

   [RFC4072]  Eronen, P., Hiller, T., and G. Zorn, "Diameter Extensible
              Authentication Protocol (EAP) Application", RFC 4072,
              August 2005.

   [I-D.hansen-privacy-terminology]
              Pfitzmann, A., Hansen, M., and H. Tschofenig, "Terminology
              for Talking about Privacy by Data Minimization: Anonymity,
              Unlinkability, Undetectability, Unobservability,
              Pseudonymity, and Identity Management",
              draft-hansen-privacy-terminology-01 (work in progress),
              August 2010.

   [I-D.ietf-abfab-gss-eap]
              Hartman, S. and J. Howlett, "A GSS-API Mechanism for the
              Extensible Authentication Protocol",
              draft-ietf-abfab-gss-eap-00 (work in progress),
              October 2010.

8.2.  Informative References

   [I-D.nir-tls-eap]
              Nir, Y., Sheffer, Y., Tschofenig, H., and P. Gutmann, "TLS
              using EAP Authentication", draft-nir-tls-eap-08 (work in
              progress), July 2010.

   [RFC2138]  Rigney, C., Rigney, C., Rubens, A., Simpson, W., and S.
              Willens, "Remote Authentication Dial In User Service
              (RADIUS)", RFC 2138, April 1997.




Howlett, et al.          Expires April 21, 2011                [Page 16]

Internet-Draft             ABFAB Architecture               October 2010


   [OASIS.saml-core-2.0-os]
              Cantor, S., Kemp, J., Philpott, R., and E. Maler,
              "Assertions and Protocol for the OASIS Security Assertion
              Markup Language (SAML) V2.0", OASIS Standard saml-core-
              2.0-os, March 2005.

   [RFC2904]  Vollbrecht, J., Calhoun, P., Farrell, S., Gommans, L.,
              Gross, G., de Bruijn, B., de Laat, C., Holdrege, M., and
              D. Spence, "AAA Authorization Framework", RFC 2904,
              August 2000.









































Howlett, et al.          Expires April 21, 2011                [Page 17]

Internet-Draft             ABFAB Architecture               October 2010


URIs

   [1]  <http://www.eduroam.org>
















































Howlett, et al.          Expires April 21, 2011                [Page 18]

Internet-Draft             ABFAB Architecture               October 2010


Authors' Addresses

   Josh Howlett
   JANET(UK)


   Phone:
   Email: Josh.Howlett@ja.net


   Sam Hartman
   Painless Security


   Phone:
   Email: hartmans-ietf@mit.edu


   Hannes Tschofenig
   Nokia Siemens Networks
   Linnoitustie 6
   Espoo  02600
   Finland

   Phone: +358 (50) 4871445
   Email: Hannes.Tschofenig@gmx.net
   URI:   http://www.tschofenig.priv.at


   Eliot Lear
   Cisco Systems GmbH
   Richtistrasse 7
   Wallisellen, ZH  CH-8304
   Switzerland

   Phone: +41 44 878 9200
   Email: lear@cisco.com














Howlett, et al.          Expires April 21, 2011                [Page 19]

