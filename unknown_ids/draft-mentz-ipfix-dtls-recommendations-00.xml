<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- keywords -->
<!ENTITY rfc2119         SYSTEM 'reference.RFC.2119.xml'>
<!-- IPFIX, PSAMP -->
<!ENTITY rfc5101         SYSTEM 'reference.RFC.5101.xml'>
<!ENTITY rfc5153         SYSTEM 'reference.RFC.5153.xml'>
<!-- SCTP related -->
<!ENTITY rfc3758         SYSTEM 'reference.RFC.3758.xml'>
<!ENTITY rfc4960         SYSTEM 'reference.RFC.4960.xml'>
<!ENTITY rfc4895         SYSTEM 'reference.RFC.4895.xml'>
<!ENTITY sctp-socket     SYSTEM 'reference.I-D.ietf-tsvwg-sctpsocket.xml'>
<!-- DTLS -->
<!ENTITY rfc4347         SYSTEM 'reference.RFC.4347.xml'>
<!-- tut nicht da expired: ENTITY dtls-sctp       SYSTEM 'reference.I-D.ietf-tsvg-for-sctp'>
<!-- Tüxen -->
<!--tut noch nicht: ENTITY dtls-heartbeat  SYSTEM 'reference.I-D.draft-seggelmann-tls-dtls-heartbeat'>-->
]>

<!--<?rfc strict="yes"?>-->
<?rfc toc="yes"?>
<?rfc tocompact="no"?>
<?rfc footer="draft-mentz-ipfix-dtls-recommendations-00.txt"?>
<?rfc compact="yes"?>
<!--<?rfc subcompact="compact"?>-->
<?rfc symrefs="yes"?>
<rfc category="info" ipr="trust200811" docName="&lt;draft-mentz-ipfix-dtls-recommendations-00&gt;">
    <front>
	<title abbrev="Recommendations for IPFIX over DTLS">Recommendations for Implementing IPFIX over DTLS</title>

	<author fullname="Daniel Mentz" initials="D." surname="Mentz">
	    <organization abbrev='TU Muenchen'>Technische Universitaet Muenchen</organization>
	    <address>
		<postal>
		    <street>Department of Informatics</street>
                    <street>Chair for Network Architectures and Services (I8)</street>
		    <street>Boltzmannstr. 3</street>
		    <city>Garching</city>
		    <code>D-85748</code>
		    <country>DE</country>
		</postal>
		<email>mentz@in.tum.de</email>
	    </address>
	</author>
	<author fullname="Gerhard Muenz" initials="G." surname="Muenz">
	    <organization abbrev='TU Muenchen'>Technische Universitaet Muenchen</organization>
	    <address>
		<postal>
		    <street>Department of Informatics</street>
                    <street>Chair for Network Architectures and Services (I8)</street>
		    <street>Boltzmannstr. 3</street>
		    <city>Garching</city>
		    <code>D-85748</code>
		    <country>DE</country>
		</postal>
		<phone>+49 89 289-18008</phone>
		<email>muenz@net.in.tum.de</email>
		<uri>http://www.net.in.tum.de/~muenz</uri>
	    </address>
	</author>
	<author fullname="Lothar Braun" initials="L." surname="Braun">
	    <organization abbrev='TU Muenchen'>Technische Universitaet Muenchen</organization>
	    <address>
		<postal>
		    <street>Department of Informatics</street>
                    <street>Chair for Network Architectures and Services (I8)</street>
		    <street>Boltzmannstr. 3</street>
		    <city>Garching</city>
		    <code>D-85748</code>
		    <country>DE</country>
		</postal>
		<phone>+49 89 289-18010</phone>
		<email>braun@net.in.tum.de</email>
		<uri>http://www.net.in.tum.de/~braun</uri>
	    </address>
	</author>

	<date day="6" month="July" year="2009"/>

	<area>Operations and Management</area>
	<workgroup>IP Flow Information Export WG</workgroup>

	<abstract>
	    <!-- don't use capitalized terms in abstract, before the definitions -->
	    <t>
		This document discusses problems and solutions regarding the implementation of the IPFIX protocol over SCTP and DTLS.
	    </t>
	</abstract>
    </front>

    <middle>
	<section title="Introduction">
	    <t>
		All implementations of the IPFIX protocol conforming to <xref target="RFC5101"/> must support DTLS <xref target="RFC4347"/> if SCTP or UDP is used as transport protocol.
	    </t>
	    <t>
		This document discusses specific issues that have arisen during the implementation of the IPFIX protocol over DTLS.
		These issues may degrade the performance of an IPFIX Exporter as they require to periodically interrupt the data export.
		As a solution, we proposes workarounds which solve these problems without requiring any changes to DTLS and the IPFIX protocol. 
	    </t>
	    <t>
		This document is to be considered as a possible update of the IPFIX Implementation Guidelines <xref target="RFC5153"/>.
	    </t>
	    <!--
	    <t>
		The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.
	    </t>
	    -->
	</section>

	<section anchor="sec:terminology" title="Terminology">
	    <t>
		This document adopts the IPFIX terminology used in <xref target="RFC5101"/>.
		As in all IPFIX document, all IPFIX specific terms have the first letter of a word capitalized when used in this document.
            </t>
	</section>

	<section anchor="sec:dtls-and-udp" title="Issues and Recommendations Regarding IPFIX over DTLS/UDP">
	    <section title="Undetected Collector Crashes">
		<t>
		    DTLS has been conceived for deployment on top of unreliable transport protocols, such as UDP.
		    Hence, it is able to cope with lost datagrams and datagrams that arrive out of order at the receiver.
		    In contrast to UDP, which does not maintain any connection state, DTLS has to maintain state across multiple datagrams at both endpoints.
		    This state is established during the DTLS handshake.
		</t>
		<t>
		    During the DTLS handshake, the two peers authenticate each other and agree upon several parameters which are necessary to communicate over DTLS.
		    Among these parameters are a cipher suite as well as a shared key that is usually established using a Diffie-Hellman key exchange. 
		    If one of the peers crashes unexpectedly, these parameters as well as the maintained DTLS state usually get lost.
		    As a consequence, the peer is not able to check the integrity of newly arrived datagrams or to decrypted the datagrams' payload. 
		</t>
		<t>
		    In the case of connection oriented transport protocols, such as TCP or SCTP, a connection endpoint will be informed about the crash of its correspondent by the transport protocol.
		    UDP, however, is connection less, which means that the crash of the receiver is not noticed by the sender.
		    There are situations in which the sender might receive ICMP messages that indicate that the receiver is experiencing problems, but there is no guarantee that those ICMP messages will be sent.
		    As DTLS itself does not provide any mechanisms for dead peer detection, the crash of one of the peers has to be detected and handled by protocols in the upper layers.
		</t>
		<t>
		    As IPFIX is a unidirectional protocol, a conform implementation of an IPFIX Exporter only sends but does not receive any data. 
		    Hence, the Exporter cannot tell from the absence of returning traffic that the Collector has crashed. 
		    Instead, the Exporter keeps on sending data which must be discarded by the recovered Collector because the information needed to check the integrity and to decrypt the data is lost. 
		</t>
	    </section>
	    <section title="Possible Solutions">
		<t>
		    There are three options to circumvent this problem.
		</t>
		<t>
		    <list style="numbers">
			<t>
			    The first option is to let the Exporter periodically trigger renegotiations on the DTLS layer.
			    This means that both peers have to participate in a new handshake, implying the exchange of datagrams in both direction.
			    Hence, due to a timeout, the Exporter will notice that the Collector has crashed. 
			    <vspace blankLines="1"/>
			    Under normal conditions, such a renegotiation is used to renew the keying material in a long living connection. Depending on whether a full or abbreviated handshake is carried out, such a renegotiation can be very costly in terms of computational overhead because it involves public key operations. 
			    In addition, the DTLS specification <xref target="RFC4347"/> leaves open if application data can be sent during the handshake or not.
			    Typical implementations, such as OpenSSL <xref target="OpenSSL"/>, require that sending data is interrupted until the handshake is finished.
			    Consequently, the export of IPFIX Messages must be stalled for at least two round trip times, which could lead to IPFIX Messages queuing up in the buffer of the Exporting Process and potential loss of data.
			    <vspace blankLines="1"/>
			    The most substantial argument against this solution is that the renegotiation was simply not conceived to serve as a dead peer detection mechanism. To make sure that the Exporter learns quickly about a crashed Collector, renegotiations would have to be carried out in short intervals.
			</t>
			    <vspace blankLines="1"/>
			<t>
			    The authors of this draft endorse the second option which is to periodically establish new DTLS connections and replace the active DTLS connection by a new one. Establishing a new DTLS connection involves a bidirectional handshake which requires both peers to be alive. If the Collector crashes unexpectedly and recovers quickly, then the time during which he receives meaningless data is limited until a new DTLS connection is established. Care should be taken that two successive connections overlap in a way such that no data is lost at the Exporting Process. This can be achieved by swapping the connections only after all active templates have been sent out on the new DTLS connection.
			    <vspace blankLines="1"/>
			    As regards the computational overhead, this solution suffers from the same limitations as the first one. Every new DTLS connection might involve costly public key operations and a small overhead in terms of the transmitted data volume. However, public key operations do not have to be carried out if the DTLS implementations support a feature called session resumption which allows the reuse of keying material from an earlier session. This feature could also be used to simplify the renegotiation proposed in the first solution.
			    <vspace blankLines="1"/>
			    The main advantage over periodical renegotiations is that this solution does not suffer from the data stall that is due to the fact that OpenSSL does not allow sending application data during handshakes. IPFIX records can be transmitted without interruption due to the overlap of the old and the new DTLS connection.
			    <vspace blankLines="1"/>
			    From the point of view of IPFIX, every new DTLS connection represents a new Transport Session. 
			    At the collector side, however, it should be straight forward to associate the different Transport Sessions to the same Exporter since the exporter IP address remains the same.
			    At the beginning of every new Transport Session, not only all active Templates have to be sent, but also certain Data Records defined by Option Templates.
			    In the case of UDP, however, this does not cause significant additional overhead because Templates and Data Records defined by Option Templates are periodically resent anyway. 
			</t>
			    <vspace blankLines="1"/>
			<t>
			    A third alternative to detect a dead or recovered collector is to implement the DTLS Heartbeat Extension which has been very recently suggested in <xref target="I-D.seggelmann-tls-dtls-heartbeat"/>. 
			    This DTLS extension allows detecting a dead peer without interfering with the ongoing data transfer. The computational and bandwidth overhead is negligible plus the data transmission does not stall.
			    <vspace blankLines="1"/>
			    The problems with this solution are that the necessary DTLS extension has not yet been standardized and that there are literally no implementations available at the time of writing.
			</t>
		    </list>
		</t>
	    </section>
	</section>

	<section anchor="sec:dtls-and-sctp" title="Issues and Recommendations Regarding IPFIX over DTLS/SCTP">
	    <section title="Renegotiation for DTLS and SCTP-AUTH">
		<t>
		    The DTLS binding for SCTP is more sophisticated than the DTLS/UDP binding. This is due to the fact that SCTP provides a connection oriented service to upper layers. It also carries additional data items with each user message. Among those items are:
		    <list style="symbols">
			<t>
			    stream ID
			</t>
			<t>
			    payload protocol identifiers
			</t>
		    </list>
		</t>
		<t>
		    DTLS only protects the bare user data. Without additional security mechanisms, a man-in-the-middle attacker could easily tamper with the stream ID or the payload protocol identifier. He could also defeat SCTP's efforts to provide a reliable or partially reliable service by forging SACK and Forward-TSN chunks. 
		</t>
		<t>
		    The solution to this problem is SCTP-AUTH <xref target="RFC4895"/> which allows the SCTP implementation to insert an authentication chunk which authenticates certain types of subsequent chunks in the same packet using a Hashed Message Authentication Code (HMAC). While SCTP-AUTH allows for the negotiation of the hash algorithm it does not provide means for secure key agreement. Therefore a cross layer approach is used to extract keying material from the DTLS layer and use it on the SCTP layer. This approach is described in <xref target="I-D.ietf-tsvwg-dtls-for-sctp"/> and is readily available in OpenSSL.
		</t>
		<t>
		    Due to limitations of DTLS, no renegotiation (i.e., change of keying material) can be performed without impeding the ongoing data transfer. The implementation has to make sure that there is no data in flight at the point in time that the keying material is swapped. 
		    This means that data transfer on all streams has to stop before a renegotiation can be initiated. 
		    Moreover, there must not be any unacknowledged messages in the send buffers of the SCTP sockets.
		    In practice, the renegotiation has to wait until the SCTP sockets at both endpoints return SCTP_SENDER_DRY_EVENT <xref target="I-D.ietf-tsvwg-sctpsocket"/>.

		    Only after the handshake has been completed, the data transfer can continue because DTLS does not guarantee the proper authentication and decryption of user messages that were secured with outdated keying material. 
		</t>
		<t>
		    In the case of IPFIX, this means that the Exporting Process has to interrupt the export of IPFIX Messages for a certain period of time.
		    IPFIX Messages generated in the meantime have to be buffered or dropped until the renegotiation is over.
		</t>
	    </section>
	    <section title="Possible Solutions">
		<t>
		    To solve this problem of data stall, the authors of this draft suggest to employ the same mechanism as in the UDP case, which is to periodically establish a new DTLS/SCTP association between Exporter and Collector in parallel to the existing one.
		    Only after the handshakes of SCTP and DTLS are completed and the IPFIX Templates are sent on the new association, the Exporter starts sending Data Records on the new Transport Session.
		</t>
		<t>
		    Again, the establishment of a new SCTP association represents a new IPFIX Transport Session. 
		    Some overhead is produced because Templates as well as certain Data Records defined by Option Template have to be resent, which would not be necessary if the old Transport Session was kept.
		    However, the amount of additional data that has to be sent is assumed to be rather small.
		</t>
	    </section>
	</section>

	<section anchor="sec:security" title="Security Considerations">
	    <t>
		The recommendations in this document do not introduce any additional security issues to those already mentioned in <xref target="RFC5101"/>.
	    </t>
	</section>

        <appendix title="Acknowledgements">
            <t>
                The authors thank Michael Tuexen and Robin Seggelmann for their contribution on the standardization and implementation of DTLS for SCTP as well as for their valuable advice regarding the implementation of IPFIX over DTLS.
            </t>
        </appendix>
    </middle>

    <back>
	<references title="Normative References">
	    <!--    &rfc2119;-->
            &rfc5101;
	</references>
	<references title="Informative References">
	    &rfc5153;
            &rfc3758;
            &rfc4960;
	    &rfc4347;
            <reference anchor="OpenSSL">
		<front>
		    <title>OpenSSL Cryptography and SSL/TLS Toolkit</title>
		    <date year="2009" />
		</front>
		<seriesInfo name="Homepage" value="http://www.openssl.org/" />
		<format type="HTML"  target="http://www.openssl.org/"/>
	    </reference>
            <reference anchor="I-D.seggelmann-tls-dtls-heartbeat">
		<front>
		    <title>Datagram Transport Layer Security Heartbeat Extension</title>
		    <author initials="R." surname="Seggelmann" fullname="Robin Seggelmann" />
		    <author initials="M." surname="Tuexen" fullname="Michael Tuexen" />
		    <author initials="M." surname="Williams" fullname="Michael Williams" />
		    <date month="July" year="2009" />
		</front>
		<seriesInfo name="Internet-Draft" value="draft-seggelmann-tls-dtls-heartbeat-00" />
		<format type="HTML"  target="http://tools.ietf.org/html/draft-seggelmann-tls-dtls-heartbeat-00"/>
	    </reference>
	    <!--&dtls-heartbeat;-->
	    &rfc4895;
            <reference anchor="I-D.ietf-tsvwg-dtls-for-sctp">
		<front>
		    <title>Datagram Transport Layer Security for Stream Control Transmission Protocol</title>
		    <author initials="M." surname="Tuexen" fullname="Michael Tuexen" />
		    <author initials="R." surname="Seggelmann" fullname="Robin Seggelmann" />
		    <author initials="E." surname="Rescorla" fullname="Eric Rescorla" />
		    <date month="October" year="2008" />
		</front>
		<seriesInfo name="Internet-Draft" value="draft-seggelmann-tls-dtls-heartbeat-00" />
		<format type="HTML"  target="http://tools.ietf.org/html/draft-seggelmann-tls-dtls-heartbeat-00"/>
	    </reference>
	    <!--&dtls-sctp;-->
	    &sctp-socket;
	</references>
    </back>
</rfc>

