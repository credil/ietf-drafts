<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3530 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3530.xml">
<!ENTITY I-D.ietf-nfsv4-minorversion1 SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-nfsv4-minorversion1.xml">
<!ENTITY I-D.faibish-nfsv4-pnfs-access-permissions-check SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.faibish-nfsv4-pnfs-access-permissions-check.xml">
<!ENTITY I-D.eisler-nfsv4-pnfs-dedupe  SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.eisler-nfsv4-pnfs-dedupe">
<!ENTITY I-D.myklebust-nfsv4-pnfs-backend SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.myklebust-nfsv4-pnfs-backend">
<!ENTITY I-D.eisler-nfsv4-pnfs-metastripe  SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.eisler-nfsv4-pnfs-metastripe">
<!ENTITY I-D.lentini-nfsv4-server-side-copy SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.lentini-nfsv4-server-side-copy">
<!ENTITY I-D.quigley-nfsv4-sec-label SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.quigley-nfsv4-sec-label">

]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-eisler-nfsv4-minorversion-2-requirements-02" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="Abbreviated Title">Requirements for NFSv4.2
    </title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Michael Eisler" initials="M.E." role="editor"
            surname="Eisler">
      <organization>NetApp</organization>

      <address>
        <postal>
          <street>5765 Chase Point Circle</street>

          <!-- Reorder these if your country does things differently -->

          <city>Colorado Springs</city>

          <region>CO</region>

          <code>80919</code>

          <country>US</country>
        </postal>

        <phone>+1 719 599 9026</phone>

        <email>mike@eisler.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date month="October" year="2009" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>template</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>This document proposes requirements for NFSv4.2.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>NFSv4.1 <xref target="I-D.ietf-nfsv4-minorversion1"/>
is an approved specification. The NFSv4 <xref target="RFC3530"/> community has indicated a
         desire to continue innovating NFS, and specifically via a new minor
         version of NFSv4, namely NFSv4.2. The desire for future innovation is
         primarily driven by two trends in the storage industry:
         <list style='symbols'>
         <t>
           High efficiency and utilization of resources such as, capacity,
           network bandwidth, and processors.
         </t>
         <t>
           Solid state flash storage which promises faster throughput and lower
	   latency than magnetic disk drives and lower cost than dynamic random
           access memory.
         </t>
         </list>
        Secondarily, innovation is being driver by the trend to
        stronger compliance with information management.
        In addition, as might be expected with a complex protocol like NFSv4.1,
        implementation experience has shown that minor changes to the protocol
        would be useful to improve the end user experience.
       </t>
       <t>
        This document proposes requirements along these four themes, and attempts
        to strike a balance between stating the problem and
        proposing solutions. With respect to the latter, some thinking among
        the NFS community has taken place, and a future revision of this
        document will reference
        embodiments of such thinking.
       </t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>

    <section anchor="efficiency" title="Efficiency and Utilization Requirements">
    <section title="Capacity">
    <t>
     Despite the capacity of magnetic disk
     continuing to increase at exponential rates,
     the storage industry is under pressure to
     make the storage of data increasingly
     efficient, so that more data can be stored.
     The driver for this counter-intuitive
     demand is that disk access times are not
     improving anywhere near as quickly as
     capacities. The industry has responded to
     this development by increasing data density via limiting
     the number of times a unique pattern of data
     is stored in a storage device.
     For example some storage
     devices support de-duplication. When
     storing two files, a storage device might compare them for
     shared patterns of data, and store the
     pattern just once, and setting reference counts on the blocks
     of the unique pattern to two.
     With
     de-duplication the number of times a storage
     device has to read a particular pattern would be reduced to just
     once, thus improving average access time.
   </t>
   <t>
     For a file access protocol such as NFS, there are several implied requirements
     for addressing this capacity efficiency trend:
     <list style="symbols">
     <t>
       The "space_used" attribute of NFSv4 does not report meaningful information.
       Removing a file with a "space_used" value of X bytes does not mean that
       the file system will see an increase of X available bytes.
       Providing more meaningful information is a requirement.
     </t>

     <t>
       Because it is probable, especially for applications such as hypervisors,
       the NFSv4 client is accessing multiple files with shared blocks of data,
       it is in the interest of the client and server for the client to know
       which blocks are share so that they are are not read multiple times,
       and not cached multiple times. Providing a block map of shared blocks
       is a requirement. For an example of how NFSv4 could deal with this, see <xref target="I-D.eisler-nfsv4-pnfs-dedupe"/>.

     </t>

     <t>
      If an NFSv4 client is aware of which patterns exist on which files,
      when it wants to write pattern X to file B to offset J, and it knows that
      X also exists in offset I of file A, then if it can advise the server of
      its intent, the server can arrange for pattern X to appear in file A being
      a zero copy. Even if the server does not support de-duplication, it can at
      least perform a local copy that saves network bandwidth and processor overhead
      on the client and server.

     </t>

     <t>
      File holes are patterns of zeros that in some file systems do are unallocated
      blocks. In a sense, holes are the ultimate de-duplicated pattern. While
      proposals to extend NFS to support hole punching have been around since the
      1980s, until recently there have not been NFS clients that could make use
      of hole punching. The Information Technology (IT) trend toward virtualizing
      operating environments via hypervisors has resulted in a need for hypervisors
      to translate a (virtual) disk command to free a block into an NFS request
      to free that block. On the read side, if a file contains holes, then
      again, as the ultimate in de-duplication, it would be better for the
      client to be told the region it wants to read has a hole, instead of
      of returning long arrays of zero bytes. Even if a server does not support holes on
      write or read, avoiding the transmission of zeroes will save network bandwidth
      and reduce processor overhead.
     </t>
     </list>
    </t>
       
    </section>

    <section title="Network Bandwidth and Processing">
    <t>
     The computational capabilities of processors continues to grow at an exponential
     rate. However, as noted previously, because disk access times are not showing a
     commensurate exponential decrease, disk performance is not tracking processor
     performance.
     In addition, while network bandwidth is exponentially increasing, unlike
     disk capacities and processor bandwidth, the improvement is not seen on a
     1-2 year cycle, but happens on something closer to a 10 year cycle. The lag between
     disk and network performance compared to processor performance means that
     there is often a discontinuity between the processing capabilities of NFS
     clients and the speed at which they can extract data from an NFS server.
     For some use cases, much of the data that is read by one client from an
     NFS server also needs to be read by other clients. Re-reading this
     data is will result in a waste of the network bandwidth and processing of the NFS server.
     This same observation has driven the creation of peer-to-peer content distribution
     protocols, where data is directly read from peers rather than servers.
     It is apparent that a similar technique could be used to offload primary
     storage, such as that proposed in <xref target="I-D.myklebust-nfsv4-pnfs-backend"/>
    </t>

    <t>
     The pNFS protocol distributes the I/O to a
     set of files across a cluster of data
     servers. Arguably, its primary value is in
     balancing load across storage devices,
     especially when it can leverage a back end
     file system or storage cluster with
     automatic load balancing capabilities. In
     NFSv4.1, no consideration was given to
     metadata. Metadata is critical to several
     workloads, to the point that, as defined in
     NFSv4.1, pNFS will not not offer much value
     in those cases. The load balancing capabilities of pNFS need to
     be brought to metadata. An example of how to
     do so is in <xref target="I-D.eisler-nfsv4-pnfs-metastripe"/>.

    </t>

    <t>
      From an end user perspective, the operations performed on a file include
      creating, reading, writing, deleting, and copying. NFSv4 has operations for all
      but the last. While file copy has been proposed for NFS in the past, it was
      always rejected because of the lack of Application Programming Interfaces (APIs) within existing operating environments to
      send a copy operation. The IT trend toward virtualization via hypervisors
      has changed the situation, where the emerging use case is to copy a virtual
      disk. The use of a copy operation will save network
      bandwidth on the client and server, and where the server supports it,
      intra-server file copy has the potential to avoid all physical data copy.
      For an example, see <xref target="I-D.lentini-nfsv4-server-side-copy"/>.
    </t>

    </section>

   </section>

    <section anchor="flash" title="Flash Memory Requirements">
    <t>
      Flash memory is rapidly filling the wide gap between expensive
      but fast Dynamic Random Access Memory (DRAM) and inexpensive but cheap
      magnetic disk. The cost per bit of flash is between DRAM and disk. The
      access time pet bit of flash is between DRAM and disk. This has resulted
      in the File access Operations Per Second (FOPS) per unit of cost of flash exceeding DRAM and
      disk. Flash can be easily added as another storage medium to NFS servers,
      and this does not require a change to the NFS protocol. However,
      the value of flash's superior FOPS is best realized when flash is closest
      to the application, i.e. on the NFS client. One approach would
      be to forgo the use of network storage and de-evolve back to Direct Attached
      Storage (DAS). However, this would require that data protection value
      that exists in modern storage devices be brought into DAS, and this is
      not always convenient or cost effective. A less traumatic way to leverage
      the full FOPS of flash would be for NFSv4 clients to leverage flash for
      caching of data.
    </t>
    
    <t>
      Today NFSv4 supports whole file delegations for enabling caching. Such
      a granularity is useful for applications like user home directories 
      where there is little file sharing. However, NFS is used for many more
      workloads, which include file sharing. In these workloads, files are
      shared, whereas individual blocks might not be. This drives a requirement for
      sub-file caching. A derivative of <xref target="I-D.eisler-nfsv4-pnfs-dedupe"/>
      could provide sub-file caching, and could be integrated with 
      <xref target="I-D.myklebust-nfsv4-pnfs-backend"/> to provide off-NFS-server
      sub-file caching.
    </t>

    </section>
 
    <section anchor="compliance" title="Compliance">
    <t>
     New regulations for the IT industry limit who can view what data. NFSv4 has
     Access Control Lists (ACLs), but the ACL can be changed by the nominal
     file owner. In practice, the end user that owns the file (essentially, has 
     the right to delete the file or give permissions to other users),
     is not the legal owner of the file. The legal owner of the file wants to
     control not just who can access (both read and modify) the file, but who they can pass
     the content of the file to. The legal owner of the file also wants to control
     which software can manipulate the files of the legal owner (for example the legal owner might want to only allow software that has been certified).
   </t>
   <t>
     In the past, the IT industry has addressed
     these requirements with notion of security
     labeling. Labels are attached to devices,
     files, users, applications, network
     connections, etc. When the labels of two
     objects match, data can be transferred from
     one to another.  For example a label called
     "Secret" on a file results in only users
     with a compatible security clearance (e.g. "Secret" or higher)
     being allowed to view the file, despite what the
     ACL says.
    </t>

    <t>
     In environments where labeling is mandated, this often means that
     a file access protocol like NFSv4 is not permitted, despite the fact
     that NFSv4 meets many of the other security and non-security requirements
     of such environments. Thus, it is necessary NFSv4 support labeling and highly
     desired that label enforcement and application be supported by both the NFSv4
     client and server.
    </t>
     
    <t>
     To attach a label on a file requires that it be created atomically with the
     file, which means that a new RECOMMENDED attribute for a security label
     is needed such as that proposed in <xref target="I-D.quigley-nfsv4-sec-label"/>.
    </t>
     
    </section>

    <section anchor="fixes" title="Incremental Improvements">
    <t>
     Implementation experience with NFSv4.1 and related protocols, such as
     SMB2, has shown a number of areas where the protocol can be improved.
     <list style='symbols'>
     <t>
      Hints for the type of file access, such as sequential read. While
      traditionally NFS servers have been able to detect read-a-head patterns,
      with the introduction of pNFS, this will be harder. Since NFS clients
      can detect patterns of access, they can advise servers. In addition,
      the UNIX/Linux madvise() API is an example of where applications can
      provide direct advice to the NFS server.
    </t>

    <t>
      Head of line blocking. Consider a client that wants to send a three operations:
      a file creation, a read for one megabyte, and a write for one megabyte.
      Each of these might be sent on a separate slot. The client determines that
      it is not desirable for the read operation to wait for the write operation
      to be sent, so it sends the create. However, it does not want to
      serialize the read and write behind the create, so the read gets sent,
      followed by the write. On the reply side, the server does not know that
      client wants the create satisfied first, so read and write operations are
      first processed. By the time the create is performed on the server, the
      response to the read is still filling the reply side. While NFSv4.1
      could solve this problem by associating two connections with
      the session, and using one connection for create, and the other for
      read or write, multiple connections come at a cost. The requirement
      is to solve this head of line blocking problem. Tagging a
      request as one that should go to the head of the line for request and
      response processing is one possible way to address it.
    </t>
    <t>
      pNFS connectivity/access indication. If a pNFS client is given
      a layout that directs it to a storage device it cannot access due to
      connectivity of access control issues, it has no way in NFSv4.1
      to indicate the problem to the metadata server. See a proposal to address this in <xref target="I-D.faibish-nfsv4-pnfs-access-permissions-check"/>.
    </t>

    <t>
     RPCSEC_GSS sequence window size on backchannel. The NFSv4.1 specification
     does not have a way to for the client to tell the server what window size
     to use on the backchannel. The specification says that the window size
     will be the same as what the server uses. Potentially, a server could
     use a very large window size that the client does not want.
    </t>

    <t>
     Trunking discovery. The NFSv4.1 specification is long on how a client verifies
     if trunking is available between two connections, but short on how a client
     can discover destination addresses that can be trunked. It would be useful
     if there was a method (such as an operation) to get a list of destinations
     that can be session or client ID trunked, as well as a notification when
     the set of destinations changes.
    </t>
      
     </list>
    </t> 
    </section>

    <section title="IANA Considerations">
    <t>None.</t>
    </section>
    <section title="Security Considerations">
    <t>None.</t>
    </section>
    <section title="Acknowledgements">
    <t>Thanks to Dave Noveck and David Quigley for reviewing this document and providing valuable
       feedback.
    </t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;

    </references>

    <references title="Informative References">
      <!-- Here we use entities that we defined at the beginning. -->

      &RFC3530;

      &I-D.ietf-nfsv4-minorversion1;

	&I-D.faibish-nfsv4-pnfs-access-permissions-check;
	&I-D.eisler-nfsv4-pnfs-dedupe;
	&I-D.myklebust-nfsv4-pnfs-backend;
	&I-D.eisler-nfsv4-pnfs-metastripe;
	&I-D.lentini-nfsv4-server-side-copy;
	&I-D.quigley-nfsv4-sec-label;

      <!-- A reference written by an organization not a person. -->

    </references>

  </back>
</rfc>
