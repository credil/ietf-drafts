<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an
Internet Draft using xml2rfc, which is available here: http://xml.resource.org.
-->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from
the online citation libraries. There has to be one entity for each item to be
referenced. An alternate method (rfc include) is described in the references.
-->
<!ENTITY rfc2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc2629 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY rfc3550 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3550.xml">
<!ENTITY rfc3552 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY rfc3611 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3611.xml">
<!ENTITY rfc4585 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4585.xml">
<!ENTITY rfc3629 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY rfc5245 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5245.xml">
<!ENTITY rfc5285 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5285.xml">
<!ENTITY rfc5760 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5760.xml">
<!ENTITY rfc4960 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4960.xml">
<!ENTITY rfc5533 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5533.xml">
<!ENTITY rfc3261 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3261.xml">
<!ENTITY rfc3264 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3264.xml">
<!ENTITY rfc5117 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5117.xml">
<!ENTITY rfc4566 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4566.xml">
<!ENTITY rfc5506 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5506.xml">
<!ENTITY I-D.ietf-mptcp-architecture PUBLIC "" "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-mptcp-architecture.xml">
<!ENTITY I-D.ietf-mmusic-rfc2326bis PUBLIC "" "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-mmusic-rfc2326bis.xml">
<!ENTITY I-D.ietf-avt-app-rtp-keepalive PUBLIC "" "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-avt-app-rtp-keepalive.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="no"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="exp" docName="draft-singh-avtcore-mprtp-01" ipr='trust200902'>
  <!-- category values: std, bcp, info, exp, and historic ipr
values: full3667, noModification3667, noDerivatives3667 you can add the
attributes updates="NNNN" and obsoletes="NNNN" they will automatically be output
with "(if approved)" -->

  <front>
    <title abbrev="Multipath RTP">Multipath RTP (MPRTP)</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <author fullname="Varun Singh" initials="V" surname="Singh">
      <organization>Aalto University</organization>
      <address>
        <postal>
          <street>School of Science and Technology</street>
          <street>Otakaari 5 A</street>
          <city>Espoo</city>
          <region>FIN</region>
          <code>02150</code>
          <country>Finland</country>
        </postal>
        <email>varun@comnet.tkk.fi</email>
		<uri>http://www.netlab.tkk.fi/~varun/</uri>
      </address>
    </author>

    <author fullname="Teemu Karkkainen" initials="T" surname="Karkkainen">
      <organization>Aalto University</organization>
      <address>
        <postal>
          <street>School of Science and Technology</street>
          <street>Otakaari 5 A</street>
          <city>Espoo</city>
          <region>FIN</region>
          <code>02150</code>
          <country>Finland</country>
        </postal>
        <email>teemuk@comnet.tkk.fi</email>
      </address>
    </author>

    <author fullname="Joerg Ott" initials="J" surname="Ott">
      <organization>Aalto University</organization>
      <address>
        <postal>
          <street>School of Science and Technology</street>
          <street>Otakaari 5 A</street>
          <city>Espoo</city>
          <region>FIN</region>
          <code>02150</code>
          <country>Finland</country>
        </postal>
        <email>jo@comnet.tkk.fi</email>
      </address>
    </author>
    
    <author fullname="Saba Ahsan" initials="S" surname="Ahsan">
      <organization>Aalto University</organization>
      <address>
        <postal>
          <street>School of Science and Technology</street>
          <street>Otakaari 5 A</street>
          <city>Espoo</city>
          <region>FIN</region>
          <code>02150</code>
          <country>Finland</country>
        </postal>
        <email>sahsan@cc.hut.fi</email>
      </address>
    </author>

 	<author initials="L." surname="Eggert" fullname="Lars Eggert">
		<organization abbrev="Nokia"> Nokia Research Center </organization>
		<address>
			<postal>
				<street>P.O. Box 407</street>
				<code>00045</code> <city>Nokia Group</city>
				<country>Finland</country>
			</postal>
			<phone>+358 50 48 24461</phone>
			<email>lars.eggert@nokia.com</email>
			<uri>http://research.nokia.com/people/lars_eggert</uri>
		</address>
	</author>

     <date year="2011" />

    <!-- <area>RAI</area> <workgroup>AVT Working
Group</workgroup> -->

    <area>Internet Engineering Task Force</area>

    <workgroup>AVT Core Working Group</workgroup>

    <keyword>RTP</keyword>

    <keyword>RTCP</keyword>

    <keyword>multipath</keyword>

    <keyword>streaming</keyword>

    <abstract>
      <t>The Real-time Transport Protocol (RTP) is used to deliver real-time content and, along with the RTP Control Protocol (RTCP), forms the control channel between the sender and receiver. However, RTP and RTCP assume a single delivery path between the sender and receiver and make decisions based on the measured characteristics of this single path. Increasingly, endpoints are becoming multi-homed, which means that they are connected via multiple Internet paths. Network utilization can be improved when endpoints use multiple parallel paths for communication. The resulting increase in reliability and throughput can also enhance the user experience. This document extends the Real-time Transport Protocol (RTP) so that a single session can take advantage of the availability of multiple paths between two endpoints.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
	<t>Multi-homed endpoints are becoming common in today's Internet, e.g., devices that support multiple wireless access technologies such as 3G and Wireless LAN. This means that there is often more than one network path available between two endpoints. Transport protocols, such as RTP, have not been designed to take advantage of the availability of multiple concurrent paths and therefore cannot benefit from the increased capacity and reliability that can be achieved by pooling their respective capacities.</t>
	
	<t>Multipath RTP (MPRTP) is an OPTIONAL extension to RTP <xref target="RFC3550" /> that allows splitting a single RTP stream into multiple subflows that are transmitted over different paths. In effect, this pools the resource capacity of multiple paths. Multipath RTCP (MPRTCP) is an extension to RTCP, it is used along with MPRTP to report per-path sender and receiver characteristics.</t>
	
	<t>Other IETF transport protocols that are capable of using multiple paths include SCTP <xref target="RFC4960" />, MPTCP <xref target="I-D.ietf-mptcp-architecture">MPTCP</xref> and <xref target="RFC5533">SHIM6</xref>. However, these protocols are not suitable for realtime communications.</t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119" />.</t>
      </section>

      <section title="Terminology">
        <!--    <t> .</t> -->

        <t><list style="symbols">
            <t>Endpoint: host either initiating or terminating an RTP connection.</t>

            <t>Interface: logical or physical component that is capable of acquiring a unique IP address.</t>

            <t>Path: sequence of links between a sender and a receiver. Typically, defined by a set of source and destination addresses.</t>

            <t>Subflow: flow of RTP packets along a specific path, i.e., a subset of the packets belonging to an RTP stream. The combination of all RTP subflows forms the complete RTP stream. Typically, a subflow would map to a unique path, i.e., each combination of IP addresses and port pairs (4-tuple) is a unique subflow.</t>

            <!--       <t>
             Connection: is s
           </t>-->
          </list></t>
      </section>

      <section title="Use-cases">
	  
	  <t>
	  The primary use-case for MPRTP is transporting high bit-rate streaming multimedia content between endpoints, where at least one is multi-homed. Such endpoints could be residential IPTV devices that connect to the Internet through two different Internet service providers (ISPs), or mobile devices that connect to the Internet through 3G and WLAN interfaces. By allowing RTP to use multiple paths for transmission, the following gains can be achieved:
	  <list style="symbols">
		<t>Higher quality: Pooling the resource capacity of multiple Internet paths allows higher bit-rate and higher quality codecs to be used. From the application perspective, the available bandwidth between the two endpoints increases.</t>
		<t>Load balancing: Transmitting one RTP stream over multiple paths can reduce the bandwidth usage, compared to transmitting the same stream along a single path. This reduces the impact on other traffic.</t>
		<t>Fault tolerance: When multiple paths are used in conjunction with redundancy mechanisms (FEC, re-transmissions, etc.), outages on one path have less impact on the overall perceived quality of the stream.</t>
	  </list>
	  </t>
	  
	  <t>
	  A secondary use-case for MPRTP is transporting Voice over IP (VoIP) calls to a device with multiple interfaces. Again, such an endpoint could be a mobile device with multiple wireless interfaces. In this case, little is to be gained  from resource pooling, i.e., higher capacity or load balancing, because a single path should be easily capable of handling the required load. However, using multiple concurrent subflows can improve fault tolerance, because traffic can shift between the subflows when path outages occur. This results in very fast transport-layer handovers that do not require support from signaling.
	  </t>
	  
	  <!--<t>JO: There may be other scenarios such as, High Quality Audio </t>-->
	  
<!--
        <t>A typical use-case for MPRTP is to maximize throughput, i.e., all available paths are used to stream data simultaneously. <xref target="fig-mp-use-case1"></xref> shows this basic use-case where-in Host A establishes a connection with Host B using RTSP, SIP or some other similar protocol, during the handshake, the two end-points exchange their multiple addresses. Depending on the bandwidth delay product and loss characteristics of each path the host MAY send data concurrently along the two paths or send redundant data (FEC, re-transmissions etc) along one path and normal streaming data along the other.
        </t>

        <figure anchor="fig-mp-use-case1"
            title="Example MPRTP Scenario">
            <artwork><![CDATA[
        Host A                               Host B
-----------------------              -----------------------
Address A1   Address A2              Address B1   Address
-----------------------              -----------------------
    |            |                       |            |
    |    (initial connection setup)      |            |
    |  (A advertises interfaces A1, A2)  |            |
    |-----------------------------------\>|            |
    |  (B advertises interfaces B1, B2)  |            |
    |<-----------------------------------|            |
    |            |                       |            |
    |     (RTP data B1->A1, B2->A2)      |            |
    |<===================================|            |
    |            |<===================================|
    |            |                       |            |
    ]]></artwork>
          </figure>

        <t><xref target="fig-mp-use-case2"></xref> describes a
        simpler scenario where-in only one host has multiple interfaces.</t>
        <figure anchor="fig-mp-use-case2" title="Simplified MPRTP Scenario">
            <artwork><![CDATA[
        Host A                           Host B
-----------------------                ----------
Address A1   Address A2                Address B1 
-----------------------                ----------
    |            |                         |
    |      (initial connection setup)      |
    |   (A advertises interfaces A1, A2)   |
    |-------------------------------------\>|
    |   (B only advertises interfaces B1)  |
    |<-------------------------------------|
    |            |                         |
    |       (RTP data B1->A1, B2->A2)      |
    |<=====================================|
    |            |<========================|
    |            |                         |
    ]]></artwork>
          </figure> 
        <t>Furthermore, the above figures for simplicity only show simplex data flow but the protocol MAY also be used for duplex communication. There may be more complex scenarios involving middle-boxes, NATs and firewalls. We discuss them in more detail in later sections.</t>
-->
      </section>
    </section>

    <section title="Goals">
      <t>This section outlines the basic goals that multipath RTP aims to meet. These are broadly classified as Functional goals and Compatibility goals.</t>

      <section title="Functional goals">
        <t>Allow unicast RTP session to be split into multiple subflows in order to be carried over multiple paths. This may prove beneficial in case of video streaming. 
        <list style="symbols">
            <t>Increased Throughput: Cumulative capacity of the two paths may meet the requirements of the multimedia session. Therefore, MPRTP MUST support concurrent use of the multiple paths. <!-- (Note: should this be a function of bandwidth-delay product)
            possibility of streaming future data, i.e. send current data along a low delay path while future data along a high delay, such that data along the two paths arrive relatively at the time of playback. -->
            </t>

            <t>Improved Reliability: MPRTP SHOULD be able to send redundant packets or re-transmit packets along any available path to increase reliability.</t>
          </list>
		  The protocol SHOULD be able to open new subflows for an existing session when new paths appear and MUST be able to close subflows when paths disappear.</t>
      </section>

      <section title="Compatibility goals">
        <t>MPRTP MUST be backwards compatible; an MPRTP stream needs to fall back to be compatible with legacy RTP stacks if MPRTP support is not successfully negotiated.<list style="symbols">
            <t>Application Compatibility: MPRTP service model MUST be backwards compatible with existing RTP applications, i.e., an MPRTP stack MUST be able to work with legacy RTP applications and not require changes to them. Therefore, the basic RTP APIs MUST remain unchanged, but an MPRTP stack MAY provide extended APIs so that the application can configure any additional features provided by the MPRTP stack.</t>

            <t>Network Compatibility: individual RTP subflows MUST themselves be well-formed RTP flows, so that they are able to traverse NATs and firewalls. This MUST be the case even when interfaces appear after session initiation. <xref target="RFC5245">Interactive Connectivity Establishment (ICE)</xref> MAY be used for discovering new interfaces or performing connectivity checks.</t>
          </list>
        </t>
      </section>
    </section>
<!-- 
    <section title="Comparison to TCP, SCTP, and MPTCP">
Teemu: Can we get rid of this? Especially the TCP stuff seems irrelevant.
      <t>TCP is a transport protocol and runs over IP, TCP has a strong feedback loop provides services such as reliability and congestion control. RTP is an application layer protocols and runs on top of UDP. RTP is capable of running over multicast network and has a loose feedback loop using RTCP. Due to this loose binding RTP/RTCP provides limited services for Congestion Control, Reliability etc <xref target="RFC4585"></xref> <xref target="RFC3611"></xref>.</t>

      <t>While SCTP supports multihoming and multipath functions, it is typically used as a failover mechanism and cannot be used to make concurrent data transfer over multiple interfaces. However, <xref target="I-D.ietf-mptcp-architecture">MPTCP</xref> describes an extension to TCP for multipath concurrent data transfer.</t>
      
      <t>(...)</t>

      <t>However, MPRTP provides aggregate path information for each subflow that may be used to adapt to the link characteristics.</t>
    </section>
-->  
   
    <section title="RTP Topologies">
    <t><xref target="RFC5117">RFC 5117</xref> describes a number of scenarios using mixers and translators in single-party (point-to-point), and multi-party (point-to-multipoint) scenarios.
    <xref target="RFC3550">RFC 3550</xref> (Section 2.3 and 7.x) discuss in detail the impact of mixers and translators on RTP and RTCP packets. MPRTP assumes that if a mixer or translator exists in the network, then either all of the multiple paths or none of the multiple paths go via this component.
    </t>
    </section>
    
    <section title="MPRTP Architecture">
      <t>In a typical scenario, an RTP session uses a single path. In an MPRTP scenario, an RTP session uses multiple subflows that each use a different path. <xref target="fig-mprtp-streaming" /> shows the difference. </t>
    
<!--      <section title="Operation overview"> -->
<figure anchor="fig-mprtp-streaming" title="Comparison between traditional RTP streaming and MPRTP">
<artwork><![CDATA[
+--------------+                Signaling            +--------------+
|              |------------------------------------>|              |
|    Client    |<------------------------------------|    Server    |
|              |           Single RTP flow           |              |
+--------------+                                     +--------------+

+--------------+              Signaling              +--------------+
|              |------------------------------------>|              |
|    Client    |<------------------------------------|    Server    |
|              |<------------------------------------|              |
+--------------+            MPRTP subflows           +--------------+
]]></artwork>
</figure>
<!--    </section> -->

    <figure anchor="fig-mprtp-archit" title="MPRTP Architecture">
<artwork><![CDATA[
+-----------------------+         +-------------------------------+
|      Application      |         |          Application          |
+-----------------------+         +-------------------------------+
|                       |         |             MPRTP             |
+          RTP          +         +- - - - - - - -+- - - - - - - -+
|                       |         |  RTP subflow  |  RTP subflow  |
+-----------------------+         +---------------+---------------+
|          UDP          |         |      UDP      |      UDP      |
+-----------------------+         +---------------+---------------+
|           IP          |         |       IP      |       IP      |
+-----------------------+         +---------------+---------------+
]]></artwork>
</figure>
    <t><xref target="fig-mprtp-archit" /> illustrates the differences between the standard RTP stack and the MPRTP stack. MPRTP receives a normal RTP session from the application and splits it into multiple RTP subflows. Each subflow is then sent along a different path to the receiver. To the network, each subflow appears as an independent, well-formed RTP flow. At the receiver, the subflows are combined to recreate the original RTP session. The MPRTP layer performs the following functions:
    
    <list style="symbols">
        <t>Path Management: The layer is aware of alternate paths to the other host, which may, for example, be the peer's multiple interfaces. So that it is able to send differently marked packets along separate paths.
        <!-- detects the host's multiple interfaces and advertises them as they appear and disappear.--> MPRTP also selects interfaces to send and receive data. Furthermore, it manages the port and IP address pair bindings for each subflow.
	 <!-- 
	Path Management: The layer is aware of alternate paths to the peer, which may, for example, be the peer's multiple interfaces or routing labels for an intermediate router to send differently marked packets along separate paths. 
	(The entire draft so far talked about identifying paths by IP address/interface. This route label stuff is unclear even for MPTCP. Suggest to remove it. -- Lars)     
	
	       MPRTP also selects interfaces or marks packets with different routing labels to send and receive data.  Furthermore, it manages the port and IP address pair bindings for each interface. 
	(Does it? Isn't the IP stack doing that? -- Lars) 
	-->
        </t>
        <t>Packet Scheduling: the layer splits a single RTP flow into multiple subflows and sends them across multiple interfaces (paths). The splitting MAY BE done using different path characteristics.</t>
        <t>Subflow recombination: the layer creates the original stream by recombining the independent subflows. Therefore, the multipath subflows appear as a single RTP stream to applications.</t>
    </list>
    </t>


        <section title="Relationship of MPRTP with Session Signaling">
        <t>
        Session signaling (e.g., <xref target="RFC3261">SIP</xref>, <xref target="I-D.ietf-mmusic-rfc2326bis">RTSP</xref>) SHOULD be done over a failover-capable or multipath-capable transport for e.g., <xref target="RFC4960">SCTP</xref> or <xref target="I-D.ietf-mptcp-architecture">MPTCP</xref> instead of TCP or UDP.
        </t>    
        </section>
    </section>
    <!-- NOTE: find the drawback/pain of using ICE!! -->

<section title="Example Media Flow Diagrams">
    <t>There may be many complex technical scenarios for MPRTP, however, this memo only considers the following two scenarios: 1) a unidirectional media flow that represents the streaming use-case, and 2) a bidirectional media flow that represents a conversational use-case.</t>

    <section title="Streaming use-case">
    <t>In the unidirectional scenario, the receiver (client) initiates a multimedia session with the sender (server). The receiver or the sender may have multiple interfaces and both endpoints are  MPRTP-capable. <xref target="fig-mprtp-unidir" /> shows this scenario. In this case, host A has multiple interfaces. Host B performs connectivity checks on host A's multiple interfaces. If the interfaces are reachable, then host B streams multimedia data along multiple paths to host A. Moreover, host B also sends RTCP Sender Reports (SR) for each subflow and host A responds with a standard RTCP Receiver Report (RR) for the overall session and receiver statistics for each subflow. Host B distributes the packets across the subflows based on the individually measured path characteristics.</t>
    
    <t>Alternatively, to reduce media startup time, host B may start streaming multimedia data to host A's initiating interface and then perform connectivity checks for the other interfaces. This method of updating a single path session to a multipath session is called "multipath session upgrade".
    </t>
    
    <figure anchor="fig-mprtp-unidir" title="Unidirectional media flow">
<artwork><![CDATA[
        Host A                           Host B
-----------------------                ----------
Address A1   Address A2                Address B1
-----------------------                ----------
    |            Session Setup             |
    |------------------------------------->|  connections at endpoint
    |<-------------------------------------|  may be "preloaded"
    |            |                         |  (e.g., with ICE)
    |            |                         |
    |       (RTP data B1->A1, B1->A2)      |
    |<=====================================|
    |            |<========================|
    |            |                         |
    Note: there may be more scenarios.
    ]]></artwork>
    </figure> 
    </section>

<!--    or
    
  Host A                                      Host B
----------                           -----------------------
Address A1                           Address B1   Address B2
----------                           -----------------------
    |                                    |            |
    |    (initial connection setup)      |            |
    |  (A only advertises interfaces A1) |            |
    |-----------------------------------&gt;|            |
    |  (B advertises interfaces B1, B2)  |            |
    |<-----------------------------------|            |
    |                                    |            |
    |     (RTP data B1->A1, B2->A1)      |            |
    |<===================================|            |
    |<================================================|
    
    
    or 
    
    Host A                               Host B
-----------------------              -----------------------
Address A1   Address A2              Address B1   Address B2
-----------------------              -----------------------
    |            |                       |            |
    |    (initial connection setup)      |            |
    |  (A advertises interfaces A1, A2)  |            |
    |-----------------------------------&gt;|            |
    |  (B advertises interfaces B1, B2)  |            |
    |<-----------------------------------|            |
    |            |                       |            |
    |     (RTP data B1->A1, B2->A2)      |            |
    |<===================================|            |
    |            |<===================================|
-->
    <section title="Conversational use-case">
    <t>In the bidirectional scenario, multimedia data flows in both directions. The two hosts exchange their lists of interfaces with each other and perform connectivity checks. Communication begins after each host finds suitable address, port pairs. Interfaces that receive data send back RTCP receiver statistics for that path (based on the 4-tuple). The hosts balance their multimedia stream across multiple paths based on the per path reception statistics and its own volume of traffic. <xref target="fig-mprtp-bidir" /> describes an example of a bidirectional flow.</t>
    
     <figure anchor="fig-mprtp-bidir" title="Bidirectional flow">
<artwork><![CDATA[
        Host A                               Host B
-----------------------              -----------------------
Address A1   Address A2              Address B1   Address B2
-----------------------              -----------------------
  |            |                       |            | 
  |            Session Setup           |            | connections at
  |----------------------------------->|            | the endpoint may
  |<-----------------------------------|            | be "preloaded"
  |            |                       |            | (e.g., ICE)
  |            |                       |            |    
  |    (RTP data B1<->A1, B2<->A2)     |            |
  |<===================================|            |
  |            |<===================================|
  |===================================>|            |
  |            |===================================>|
  |            |                       |            |  
    Note: the address pairs may have other permutations,
    and they may be symmetric or asymmetric combinations.
    ]]></artwork>
    </figure> 
    </section>
    
    <section title="Challenges with Multipath Interface Discovery">
    <t>For some applications, where the user expects immediate playback, e.g., High Definition Media Streaming or IPTV, it may not be possible to perform connectivity checks within the given time bound. In these cases, connectivity checks MAY need to be done ahead of time.</t>
    <t>[Open Issue: ICE or any other system would have to be aware of the endpoint's interfaces ahead of time].</t>
    </section>

</section>


<section title="MPRTP Functional Blocks">
 <t>This section describes some of the functional blocks needed for MPRTP. We then investigate each block and consider available mechanisms in the next section.
    <list style="numbers">
        <t>Session Setup: Multipath session setup is an upgrade or add-on to a typical RTP session. Interfaces may appear or disappear at anytime during the session. To preserve backward compatibility with legacy applications, a multipath session MUST look like a bundle of individual RTP sessions.</t>
        
        <t>Expanding RTP: For a multipath session, each subflow MUST look like an independent RTP flow, so that individual RTCP messages can be generated per subflow. Furthermore, MPRTP  splits the single multimedia stream into multiple subflows based on path characteristics (e.g. RTT, loss-rate, receiver rate, bandwidth-delay product etc.) and dynamically adjusts the load on each link.</t>
        
        <t>Adding Interfaces: Interfaces on the host need to be regularly discovered and signaled. This can be done at session setup and/or during the session. When discovering and receiving new interfaces, the MPRTP layer needs to select address and port pairs.</t>
        
        <t>Expanding RTCP: MPRTP MUST recombine RTCP reports from each path to re-create a single RTCP message to maintain backward compatibility with legacy applications.</t>
        
        <t>Maintenance and Failure Handling: In a multi-homed endpoint interfaces may appear and disappear. If this happens at the sender, it has to re-adjust the load on the available links. On the other hand, if this occurs on the receiver, then the multimedia data transmitted by the sender to those interfaces is lost. This data may be re-transmitted along a different path i.e., to a different interface on the receiver. Furthermore, the receiver has to explicitly signal the disappearance of an interface, or the sender has to detect it. [Open Issue: What happens if the interface that setup the session disappears? does the control channel also failover? re-start the session?]</t>
        
        <t>Teardown: The MPRTP layer releases the occupied ports on the interfaces.</t>
    </list>
 </t>   
</section>


<section title="Available Mechanisms within the Functional Blocks">
<t>This section discusses some of the possible alternatives for each functional block mentioned in the previous section.</t>
	<section title="Session Setup">
        <t>MPRTP session can be set up in many possible ways e.g., during handshake, or upgraded mid-session. The capability exchange may be done using out-of-band signaling (e.g., SDP <xref target="RFC3264" /> in SIP <xref target="RFC3261" />, <xref target="I-D.ietf-mmusic-rfc2326bis">RTSP</xref>) or in-band signaling (e.g., RTP/RTCP header extension).

        Furthermore, ICE <xref target="RFC5245" /> may be used for discovering and performing connectivity checks during session setup.</t>
    </section>

    <section title="Expanding RTP">
        <t>RTCP <xref target="RFC3550" /> is generated per media session. However, with MPRTP, the media sender spreads the RTP load across several interfaces. The media sender SHOULD make the path selection, load balancing and fault tolerance decisions based on the characteristics of each path. Therefore, apart from normal RTP sequence numbers defined in <xref target="RFC3550" / >, the MPRTP sender MUST add subflow-specific sequence numbers to help calculate fractional losses, jitter, RTT, playout time, etc., for each path and a subflow identifier to associate the characteristics with a path. The RTP header extension for MPRTP is shown in <xref target="sec-mprtp-pkt-format" />). </t>
        
    </section>

    <section title="Adding New Interfaces">
        <t> When interfaces appear and disappear mid-session, ICE <xref target="RFC5245" /> may be used for discovering interfaces and performing connectivity checks. However, MPRTP may require a capability re-negotiation (using SDP) to include all these new interfaces. This method is referred to as out-of-band multipath advertisement.</t>
        
        <t>Alternatively, when new interfaces appear, the interface advertisements may be done in-band using RTP/RTCP extensions. The endpoints perform connectivity checks (see <xref target="fig-mprtp-new-subflow" /> for more details). If the connectivity packets are received by the peers, then multimedia data can flow between the new address, port pairs.</t>
        
    </section>

    <section title="Expanding RTCP">
        <t> To provide accurate per path information an MPRTP endpoint MUST send (SR/RR) report for each unique subflow along with the overall session RTCP report. Therefore, the additional subflow reporting affects the RTCP bandwidth and the RTCP reporting interval for each subflow. RTCP report scheduling for each subflow may cause a problem for RTCP recombination and reconstruction in cases when 1) RTCP for a subflow is lost, and 2) RTCP for a subflow arrives later than the other subflows. (There may be other cases as well.)</t>
        <t>The sender distributes the media across different paths using the per path RTCP reports. However, this document doesn't cover algorithms for congestion control or load balancing.</t>
    </section>

    <section title="Checking and Failure Handling">
        <t>[Note: If the original interface that setup the session disappears then does the session signaling failover to another interface? Can we recommend that SIP/RTSP be run over MPTCP, SCTP].</t>
    </section>

<!--    <section title="Teardown">
        <t></t>
    </section> -->
</section>
    
    <section title="MPRTP Protocol" anchor="sec-mprtp-proto">
      <t>To enable a quick start of a multimedia session, a multipath session MUST be upgraded from a single path session. Therefore, no explicit changes are needed in multimedia session setup and the session can be setup as before.</t>

<!--      <section title="Connection Initiation"> 
        <t>The multipath discovery and transmission begins after establishing a single path RTP session.</t>
      </section> -->
<figure anchor="fig-mprtp-new-subflow" title="MPRTP New Interface">
<artwork><![CDATA[
        Host A                                   Host B
-----------------------                  -----------------------
Address A1   Address A2                  Address B1   Address B2
-----------------------                  -----------------------
    |            |                           |             |
    |            |      (1)                  |             |
    |--------------------------------------->|             |
    |<---------------------------------------|             |
    |            |      (2)                  |             |
    |<=======================================|             |
    |<=======================================|     (3)     |
    |            |      (4)                  |             |
    |<=======================================|             |
    |<=======================================|             |
    |<=======================================|             |
    |            |      (5)                  |             |
    |- - - - - - - - - - - - - - - - - - - ->|             |
    |<=======================================|     (6)     |
    |<=======================================|             |
    |            |<========================================|
    |<=======================================|             |
    |            |<========================================|

Key:
|  Interface
---> Signaling Protocol
<=== RTP Packets
- -> RTCP Packet
]]></artwork>
</figure>
      <section title="Overview" anchor="sec-mprtp-proto-overview">
      <!--due to changes in connections. new interfaces can appear, old ones can disappear.-->
        <t>
        The bullet points explain the different steps shown in <xref target="fig-mprtp-new-subflow" /> for upgrading a standard single path multimedia session to multipath session.
        <list style="empty">
            <t>(1) The first two interactions between the hosts represents the standard session setup. This may be SIP or RTSP.</t>
            
            <t>(2) Following the setup, like in a conventional RTP scenario, host B using interface B1 starts to stream data to host A at interface A1.</t>
            
            <t>(3) Host B is an MPRTP-capable media sender and becomes aware of another interface B2.</t>
            
            <t>(4) Host B advertises the multiple interface addresses using an RTCP header extensions.</t>        
            
            <t>(5) Host A is an MPRTP-capable media receiver and becomes aware of another interface A2. It advertises the multiple interface addresses using an RTCP extension. </t>
            
            <t>Side note, even if an MPRTP-capable host has only one interface, it SHOULD respond to the advertisement with its single interface.</t>
            
            <t>(6) Each host receives information about the additional interfaces and performs the connectivity tests (not shown in figure). If the paths are reachable then the host starts to stream the multimedia content using the additional paths.</t>
        </list>
        </t>

        <section title="Subflow or Interface advertisement" anchor="sec-mprtp-proto-subflow-advert">
          <t> To advertise the multiple interfaces, an MPRTP-capable endpoint MUST add the MPRTP Interface Advertisement defined in <xref target="fig-mp-rtcp-header-ia" /> with the RTCP Sender Report (SR). Each unique address is encapsulated in an Interface Advertisement block and contains the IP address, RTP and RTCP port addresses. The Interface Advertisement blocks are ordered based on a decreasing priority level. On receiving the MPRTP Interface Advertisement, an MPRTP-capable receiver MUST respond with its own set of interfaces. 
          </t>
    
        <t> If the sender and receiver have only one interface, then the endpoints MUST respond with the default IP, RTP port and RTCP port addresses. If an endpoint receives an RTCP report without the MPRTP Interface Advertisement, then the endpoint MUST assume that the other endpoint is not MPRTP capable.
        </t>

        </section>
        <section title="Path selection" anchor="sec-mprtp-proto-addr-select" >
            <t>After MPRTP support has been discovered and interface advertisements have been exchanged, the sender MUST initiate connectivity checks to determine which interface pairs offer valid paths between the sender and the receiver. Each combination of IP addresses and port pairs (4-tuple) is a unique subflow. An endpoint MUST associate a Subflow ID to each unique subflow.</t>
			<t>To initiate a connectivity check, the endpoints send an RTP packet using the appropriate MPRTP extension header (See <xref target="table-mprtp-rtp-extn" />), associated Subflow ID and no RTP payload. The receiving endpoint replies to each connectivity check with an RTCP packet with the appropriate packet type (See <xref target="table-mprtp-rtcp-extn" />) and Subflow ID. After the endpoint receives the reply, the path is considered a valid candidate for sending data. An endpoint MAY choose to do any number of connectivity checks for any interface pairs at any point in a session. 
            </t>
			<t>
			<!-- Editor: Each combination of sender/receiver port pair is a unique subflow  -->			
			[Open Issue: How should the endpoint adjust the RTCP Reporting interval/schedule the RTCP packet on receiving a connectivity check containing a new Subflow ID? Editor: One option is send immediately as defined in <xref target="RFC4585" />. Another option is the RTCP timing defined in <xref target="I-D.ietf-avt-app-rtp-keepalive" />.]
			</t>
		</section>

        <section title="Opening subflows" anchor="sec-mprtp-proto-subflow-desc" >
		<t>The sender MAY open any number of subflows from the set of candidate subflows after performing connectivity checks. To use the subflow, the sender simply starts sending the RTP packets with an MPRTP extension shown in <xref target="fig-mprtp-header-subflow" />. The MPRTP extension carries a mapping of a subflow packet to the aggregate flow. Namely, sequence numbers and timestamps associated with the subflow.</t>
		<t>An endpoint MAY use all or a subset of candidate subflows for sending media packets. To avoid redoing the connectivity checks the endpoint MAY send keep-alive MPRTP packets (see <xref target="sec-mprtp-pkt-format-hdrext-kalive" />) to the passive subflows to keep the NAT bindings alive.</t> 
		<t>[Open Issue: How to differentiate between Passive and Active connections? Editor: Active paths get "regular flow" of media packets while passive paths are for failover of active paths. ]</t>
			<t>[Open Issue: How to keep a passive connection alive, if not actively used? Alternatively, what is the maximum timeout? Editor: keep-alive for ICE/NAT bindings should not be less than 15 seconds <xref target="RFC5245" />.]</t>
        </section>
 	  </section>
      <section title="RTP Transmission" anchor="sec-mprtp-pkt-trans">
        <t>The MPRTP layer SHOULD associate an RTP packet with a subflow based on a scheduling strategy. The scheduling strategy may either choose to augment the paths to create higher throughput or use the alternate paths for enhancing resilience or error-repair. Due to the changes in path characteristics, an MPRTP sender can change its scheduling strategy during an ongoing session. The MPRTP sender MUST also populate the subflow specific fields described in the MPRTP extension header (see <xref target="sec-mprtp-pkt-format-hdrext-rtp" />).</t>
      </section>

      <section title="Playout Considerations at the Receiver" anchor="sec-mprtp-playout">
        <t>A media receiver, irrespective of MPRTP support or not, should be able to playback the media stream because the received RTP packets are compliant to <xref target="RFC3550" />, i.e., a non-MPRTP receiver will ignore the MPRTP header and still be able to playback the RTP packets. However, the variation of jitter and loss per path may affect proper playout. By calculating optimum skew across all paths, the receiver can compensate for the jitter by modifying the playout delay (adaptive playout) of the received RTP packets.</t>
      </section>

      <section title="Subflow-specific RTCP Statistics and RTCP Aggregation" anchor="sec-mprtp-rtcp-agg">
		<t>Aggregate RTCP provides the overall media statistics and follows the standard RTCP defined in RFC3550 <xref target="RFC3550" />. However, subflow specific RTCP provides the per path media statistics because the aggregate RTCP report may not provide sufficient per path information to an MPRTP scheduler. Specifically, the scheduler should be aware of each path's RTT and loss-rate, which an aggregate RTCP cannot provide. The sender/receiver MUST use non-compound RTCP reports defined in RFC5506 <xref target="RFC5506" /> to transmit the aggregate and subflow-specific RTCP reports. Also, each subflow and the aggregate RTCP report MUST follow the timing rules defined in <xref target="RFC4585" />.</t>
		<!-- 			A simple MPRTP scheduler makes its decisions based on the per path jitter, loss and RTT and the aggregate RTCP Receiver Report. -->
<!--        <t>[Editor: 1) Should the RTCP RRs sent per path carry a) the aggregate and the path's RR or b) the aggregate and RR of each path.
	    2) Should the per path RTCP Interval be dependent on the overall session bit rate or per path interval receiver rate?]</t> -->
		<t>The RTCP reporting interval is locally implemented and the scheduling of the RTCP reports may depend on the the behavior of each path. For instance, the RTCP interval may be different for a passive path than an active path to keep port bindings alive. Additionally, an endpoint may decide to share the RTCP reporting bit rate equally across all its paths or schedule based on the receiver rate on each path.</t>

<!--		<t>For calculating the RTCP reporting interval, each path is considered as a unique peer. For example, if there are two paths between sender and receiver then n=4. Similarly, for 3 paths, n=6.		</t>-->
      </section>

      <section title="RTCP Transmission" anchor="sec-mp-rtcp-pkt-trans">
        <t> The sender sends an RTCP SR on each active path. For each SR the receiver gets, it echoes one back to the same IP address-port pair that sent the SR. The receiver tries to choose the symmetric path and if the routing is symmetric then the per-path RTT calculations will work out correctly. However, even if the paths are not symmetric, the sender would at maximum, under-estimate the RTT of the path by a factor of  half of the actual path RTT.</t>
		<t></t>
      </section>

	</section>
		
	
    <section title="Packet Formats" anchor="sec-mprtp-pkt-format">
      <t>In this section we define the protocol structures described in the previous sections.</t>

	<section title="RTCP Extension for Interface advertisement" anchor="sec-mprtp-pkt-format-rtcp-ia">
	<t>This sub-section defines the RTCP header extension for in-band interface advertisement by the receiver, instead of relying on ICE or in situations when the interface appears after SDP session establishment.</t>
	<t>The interface advertisement SHOULD immediately follow the Receiver Report. If the Receiver Report is not present, then it MUST be appended to the Sender Report.</t>
	<t>The endpoint MUST advertise all its interfaces when a new interface appears. Furthermore, an endpoint MUST advertise all its interfaces when it receives an Interface Advertisement.</t>
	<figure anchor="fig-mp-rtcp-header-ia" title="MPRTP Interface Advertisement. (appended to SR/RR)"> 
<artwork><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
|V=2|P|reserved | PT=MP_IA=210  |             length            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                     SSRC of packet sender                     |
+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
|                 SSRC_1 (SSRC of first source)                 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         MPR_Type=0x00        |           block length         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                Interface #1 Advertisement block               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                Interface #2 Advertisement block               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|               Interface #... Advertisement block              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                Interface #m Advertisement block               |
+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
]]></artwork>
	</figure> 
	<t>
	<list style="empty">
	 <t>MP_IA: 8 bits
	  <list style="empty"> <t>Contains the constant 210 to identify this as an interface advertisement.</t></list>
	 </t>
	<t>	length: 16 bits
	<list style="empty"><t> As described for the RTCP packet (see Section 6.4.1 of the RTP specification <xref target="RFC3550" />), the length of this is in 32-bit words minus one, including the header and any padding.</t></list>
	</t>
	<t>MPR_Type: 16-bits
	  <list style="empty"><t>The MPRR_Type field corresponds to the type of
		 MPRTP RTCP packet. Namely:
<figure anchor="table-mprtp-rtcp-extn" title="RTP header extension values for MPRTP (MPR_Type)">
<artwork><![CDATA[
 +---------------+--------------------------------------------------+
 |    MPR_Type   | Use                                              |
 |     Value     |                                                  |
 +---------------+--------------------------------------------------+
 |      0x00     | Interface Advertisement                          |
 |      0x01     | Connectivity Check. For this case the length is  |
 |               | set to 0                                         |
 |      TBD      | Keep Alive Packet.                               |
 +---------------+--------------------------------------------------+
]]></artwork>
</figure></t></list>
     </t>
     <t>block length: 16-bits
      <list style="empty"><t>The 16-bit length field is the length of the encapsulated advertisement blocks in 32-bit word length not including the MPR_Type and length fields. The value zero indicates there is no data following.</t></list>
     </t>
     <t>Interface Advertisement block: variable size
       <list style="empty"><t>Defined later in <xref
	   target="sec-mprtp-pkt-format-ia" format="counter" />.</t></list>
     </t>                
    </list></t>

  <section title="Interface Advertisement block" anchor="sec-mprtp-pkt-format-ia">
    <t>This block describes a method to represent IPv4, IPv6 and generic DNS-type addresses in a block format. It is based on the sub-reporting block in RFC 5760 <xref target="RFC5760" />.</t>
<figure anchor="fig-mprtp-address-header" title="Interface Advertisement block during path discovery"><artwork><![CDATA[
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Type={0,1,2}  |     Length    |          Subflow ID           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           RTCP Port           |           RTCP Port           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            Address                            |
+                                                               +
:                                                               :
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure> 
	<t><list style="empty">
	    <t>Type: 8 bits
			<list style="empty"><t>The Type corresponds to the type of address. Namely:
			  <list><t>0: IPv4 address</t>
	          <t>1: IPv6 address</t>
	          <t>2: DNS name</t></list>
	      </t></list>
	   </t>
	   <t>Length: 8 bits
	      <list style="empty"><t>The length of the Interface Advertisement block in bytes.  
	       <list>
	          <t>For an IPv4 address, this should be 9 (i.e., 5 octets for the header and 4 octets for IPv4 address).</t>
	          <t>For an IPv6 address, this should be 21.</t>
	          <t>For a DNS name, the length field indicates the number of octets making up the string plus the 5 byte header.</t>
	       </list>
	      </t></list>
	   </t>
	   <t>RTP Port: 2 octets
	      <list style="empty"><t>The port number to which the sender sends RTP data.  A port number of 0 is invalid and MUST NOT be used.</t></list>
	   </t>
	   <t>RTCP Port: 2 octets
	      <list style="empty"><t>The port number to which receivers send feedback reports.  A port number of 0 is invalid and MUST NOT be used. </t></list>
	   </t>
	   <t>Address: 4 octets (IPv4), 16 octets (IPv6), or n octets (DNS name)
	      <list style="empty"><t>The address to which receivers send feedback reports.  For IPv4 and IPv6, fixed-length address fields are used.  A DNS name is an arbitrary-length string.  The string MAY contain Internationalizing Domain Names in Applications (IDNA) domain names and MUST be UTF-8 encoded <xref target="RFC3629"></xref>.</t></list>
	   </t>
	</list></t>
  </section>    
 </section>

 <section title="MPRTP RTP Header Extension" anchor="sec-mprtp-pkt-format-hdrext">
  <t>The MPRTP header extension is used to 1) distribute a single RTP stream over multiple subflows, 2) perform connectivity checks on the advertised interfaces, and 3) keep-alive passive interfaces (paths).</t>

  <t>The header conforms to the 2-byte RTP header extension defined in <xref target="RFC5285" />. The header extension contains a 16-bit length field that counts the number of 32-bit words in the extension, excluding the four-octet extension header (therefore zero is a valid length, see Section 5.3.1 of <xref target="RFC3550" /> for details).</t>

<t>To signal the use of the above RTP header extensions in SDP, the following URI MUST be used: urn:ietf:params:rtp-hdrext:mprtp.</t>
<!-- urn:ietf:params:rtp-hdrext:mprtp-subflow -->

  <section title="MPRTP RTP Extension for a Subflow" anchor="sec-mprtp-pkt-format-hdrext-rtp">
   <t>The RTP header for each subflow is defined below:</t>

<figure anchor="fig-mprtp-header-subflow" title="MPRTP header for subflow">
<artwork><![CDATA[
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |V=2|P|1|  CC   |M|     PT      |       sequence number         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                           timestamp                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           synchronization source (SSRC) identifier            |
   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
   |      0x10     |     0x00      |        len=N-1 words          |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    H-Ext ID   |    length     |          Subflow ID           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Subflow-specific Seq Number  |    Pad (0)    |   Pad (0)     |
   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
   |                         RTP payload                           |
   |                             ....                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork>
</figure>
        <t>
        <list style="empty">
         <t>H-Ext ID and length: 8-bits each
            <list style="empty"><t>The field corresponds to the type of MPRTP packet. Namely:
<figure anchor="table-mprtp-rtp-extn" title="RTP header extension values for MPRTP (H-Ext ID)">
<artwork><![CDATA[
 +---------------+--------------------------------------------------+
 |    H-Ext ID   | Use                                              |
 |     Value     |                                                  |
 +---------------+--------------------------------------------------+
 |      0x00     | Subflow RTP Header. For this case the Length is  |
 |               | set to 6                                         |
 |      0x01     | Connectivity Check. For this case the length is  |
 |               | set to 0                                         |
 |      TBD      | Keep Alive Packet.                               |
 +---------------+--------------------------------------------------+
]]></artwork>
</figure></t></list>
		</t>
		<t> length
			<list style="empty"><t>The 8-bit length field is the length of extension data in bytes not including the H-Ext ID and length fields. The value zero indicates there is no data following.</t></list>
        </t>
		<t>Subflow ID: Identifier of the subflow. Every RTP packet belonging to the same subflow carries the same unique subflow identifier.</t>
		<!-- Choose the Subflow ID randomly? -->
		<t>Flow-Specific Sequence Number (FSSN): Sequence of the packet in the subflow. Each subflow has its own strictly monotonically increasing sequence number space.</t>
		<!-- Choose the FSSN randomly? -->
		<!--This corresponds to the sequence number of the packet in the associated subflow. -->
		</list></t>		
	</section>
	<section title="MPRTP RTP Extension for Connectivity Checks" anchor="sec-mprtp-pkt-format-hdrext-cc">
		<t>[Open Issue: What sequence number to use for the RTP session? Alternative 1: An MPRTP receiver MUST NOT send the packet with H-Ext ID=0x01 to the decoder and ignore these packets from RTCP calculation. Alternative 2: Instead of sending an RTP packet the sender transmits a modified STUN packet.]</t>
  </section>
	<section title="MPRTP RTP Extension for Keep-alive Packets" anchor="sec-mprtp-pkt-format-hdrext-kalive">
		<t>[Editor: Waiting for the progress on RTCP guidelines for the RTP keep alive packet <xref target="I-D.ietf-avt-app-rtp-keepalive" />.</t>
		<!-- 15 seconds timeout Tr for ICE/NAT bindings -->
  </section>			
 </section>
	
 
	<section title="MPRTP Extension for Subflow Reporting (MPRTCP)" anchor="sec-mprtp-pkt-format-rtcp">
        <t> The MPRTP RTCP header extension is used to 1) provide RTCP feedback per subflow to determine the characteristics of each path, 2) perform connectivity check on the other endpoint's interfaces, and 3) to keep alive a passive connection.</t>

		<section title="MPRTCP Generic Extension" anchor="sec-mprtp-pkt-format-rtcp-generic">
		<t> When sending a report for a specific subflow the sender or receiver MUST add only the reports associated with that 4-tuple. <!-- If sending a compound RTCP report, the subflow-specific report  MAY be appended to the session specific reports, i.e., Sender Report (SR) and/or Receiver Report (RR) MUST precede the subflow-specific report.</t>
				<t> --> Each subflow is reported independently using the following MPRTCP Feedback header.</t>

<figure anchor="fig-mp-rtcp-header-generic" title="MPRTCP Generic Feedback Header"> 
<artwork><![CDATA[
 0                   1                   2                   3   
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
|V=2|P|reserved |   PT=SFR=211  |             length            | 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ H
|                         SSRC of sender                        | D
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ R
|         Subflow ID #1         |            reserved           |
+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
|                    Subflow-specific reports                   |
|                             ....                              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
|V=2|P|reserved |   PT=SFR=211  |             length            | 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ H
|                         SSRC of sender                        | D
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ R
|         Subflow ID #2         |            reserved           |
+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
|                    Subflow-specific reports                   |
|                             ....                              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
]]></artwork>
</figure>
		<t>Subflow ID: 16 bits
			<list style="empty"><t>Subflow identifier is the value associated with the subflow the endpoint is reporting about. If it is a sender it MUST use the Subflow ID associated with the 4-tuple. If it is a receiver it MUST use the Subflow ID received in the Subflow-specific Sender Report.</t></list>
		</t>
		<t>length: 16 bits
			<list style="empty"><t>The length of this RTCP packet in 32-bit words minus one, including the header and any padding.  It MUST contain at least one subflow report, for e.g., Sender Subflow Report, Receiver Subflow Report, or Subflow Extension Reports, etc. </t></list>
		</t>
		<t>Subflow-specific reports: variable
			<list style="empty"><t>Subflow-specific report contains all the reports associated with the Subflow ID. For a sender, it MUST include the Subflow-specific Sender Report (SSR). For a receiver, it MUST include Subflow-specific Receiver Report (SRR). Additionally, if the receiver supports subflow-specific extension reports then it MUST append them to the SRR.</t></list>
		</t>
		</section>
		<section title="MPRTCP for Subflow-specific SR, RR and XR" anchor="sec-mprtp-pkt-format-rtcp-sr-report">
		<t>[Editor: inside the context of subflow specific reports can we reuse the payload type code for Sender Report (PT=200), Receiver Report (PT=201), Extension Report (PT=207).<!-- BYE (PT=203) can be used for explicitly tearing down the subflow.--> Transport and Payload specific RTCP messages are session specific and SHOULD be used as before.]</t>
		<t>Example:</t>   
		<figure anchor="fig-mp-rtcp-header-ssr" title="Example of reusing RTCP SR and RR inside an MPRTCP header (Bi-directional use-case).">
<artwork><![CDATA[
 0                   1                   2                   3   
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
|V=2|P|reserved |   PT=SFR=211  |            length=9           | 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ H
|                         SSRC of sender                        | D
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ R
|         Subflow ID #1         |            reserved           |
+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
|V=2|P|    RC   |   PT=SR=200   |             length            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         SSRC of sender                        |
+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
|              NTP timestamp, most significant word             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|             NTP timestamp, least significant word             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         RTP timestamp                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    subflow's packet count                     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                     subflow's octet count                     |
+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
|V=2|P|reserved |   PT=SFR=211  |             length            | 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ H
|                         SSRC of sender                        | D
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ R
|         Subflow ID #2         |            reserved           |
+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
|V=2|P|    RC   |   PT=RR=201   |             length            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                     SSRC of packet sender                     |
+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
| fraction lost |       cumulative number of packets lost       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           extended highest sequence number received           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                      interarrival jitter                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         last SR (LSR)                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                   delay since last SR (DLSR)                  |
+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
|               Subflow specific extension reports              |
|                             ....                              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
]]></artwork>
</figure>
		</section>

		<!-- <section title="MPRTP RTCP header extension for subflow specific RR" anchor="sec-mprtp-pkt-format-rtcp-rr-report">
				<t>TBD</t> 
		 </section> -->

   </section>
</section>

<!-- <section title="RTCP Timing reconsiderations for MPRTCP" anchor="sec-mprtcp-timer">
		<t>TBD</t> 
 </section> -->

	<section anchor="sec-mprtp-sdp" title="SDP Considerations">
      <t>
		The packet formats specified in this document define extensions for RTP and RTCP. The use of MPRTP is left to the discretion of the sender and receiver.</t>

<!-- The MPRTP MAY be used without prior signaling.  This is consistent with the rules governing other RTCP packet types, as described in  <xref target="RFC3550" />. -->
	   	<t>A participant of a media session MAY use SDP to signal that it supports MPRTP. Not providing this information may/will make the sender or receiver ignore the header extensions. However, MPRTP MAY be used by either sender or receiver without prior signaling.</t>
		<figure>
		 <artwork><![CDATA[
    mprtp-attrib = "a=" "mprtp" [":" 
            mprtp-optional-parameter] 
            CRLF   ; flag to enable MPRTP 
		]]></artwork>
		</figure>

		<t>The literal 'mprtp' MUST be used to indicate support for MPRTP. Generally, senders and receivers SHOULD indicate this capability if they support MPRTP and would like to use it in the specific media session being signaled. However, it is possible for an MPRTP sender to stream data using multiple paths to a non-MPRTP client.</t>
		<t>Currently, there are no extensions defined for the literal 'mprtp' but we provide the opportunity to extend it using the mprtp-optional-parameter.</t>
		
    <section anchor="mprtp-sdp-inc-througput" title="Increased Throughput">
		<t>The MPRTP layer MAY choose to augment paths to increase throughput. If the desired media rate exceeds the current media rate, the endpoints MUST renegotiate the application specific ("b=AS:") <xref target="RFC4566" /> bandwidth.</t>
	</section>
	
	<section title="Increased Reliability" anchor="mprtp-sdp-reliability">
		<t>TBD</t>
	</section>
	
	<!-- <section title="Decoding dependency" anchor="mprtp-sdp-decdep">
	<t>TBD</t>
	</section> -->
	
	<section title="MPRTP using preloaded interfaces from ICE" anchor="mprtp-sdp-ice">
		<t>TBD</t>
	</section>    

    </section>
    
    <section anchor="IANA" title="IANA Considerations">
	  	<t>This document defines a new SDP attribute, "mprtp", within the existing IANA registry of SDP Parameters.</t>
 	  	<t>TBD.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>All drafts are required to have a security considerations section. See <xref target="RFC3552">RFC 3552</xref> for a guide.</t>
    </section>

	
    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>
    Varun Singh, Saba Ahsan, and Teemu Karkkainen are supported by Trilogy
    (http://www.trilogy-project.org), a research project (ICT-216372)
    partially funded by the European Community under its Seventh
    Framework Program.  The views expressed here are those of the
    author(s) only.  The European Commission is not liable for any use
    that may be made of the information in this document.
      </t>
	<t></t>
    </section>

    <!-- Possibly a 'Contributors' section ... -->

    <!--<section anchor="Contributors" title="Contributors"> <t>...</t> </section>
-->

  </middle>

  <back>
	
    <references title="Normative References">
      &rfc2119; <!-- keywords -->
      &rfc3629; <!-- UTF-8 -->
      &rfc5760; <!-- rtcp ssm -->
      &rfc5245; <!-- ice -->
      &rfc5285; <!-- gen header ext -->
      &rfc3550; <!-- rtp -->
	  &rfc5506; <!-- non-compound -->
      &rfc4585; <!-- avpf -->


    </references>

    <references title="Informative References">
      &rfc3552; <!-- guideline for sec considerations -->
	  <!-- &rfc3611; rtcp xr -->
	  &rfc4566; <!-- sdp -->
      &rfc4960; <!-- sctp -->
      &rfc5533; <!-- shim6 -->
      &rfc5117; <!-- rtp topologies -->
      
      &rfc3261; <!-- SIP -->
      &rfc3264; <!-- o/a with SDP -->
      &I-D.ietf-mptcp-architecture;
      &I-D.ietf-mmusic-rfc2326bis;
	  &I-D.ietf-avt-app-rtp-keepalive;
      
      
    </references>

	<!-- 
	<section anchor="App-a" title="Example Scenarios"> 
		<t>TBD</t> 
	</section> 
	-->


    <!-- Change Log
v00 2010-02-18  Varun   Initial version, 9 sections -->
  </back>
</rfc>
