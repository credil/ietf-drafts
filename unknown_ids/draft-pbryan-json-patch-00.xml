<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2616 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC4627 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml">
<!ENTITY RFC5261 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5261.xml">
<!ENTITY RFC5789 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5789.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="info" docName="draft-pbryan-json-patch-00" ipr="trust200902">

    <front>
        <title abbrev="JSON Patch Media Type">A JSON Media Type for Describing Partial Modifications to JSON Documents</title>
        <author fullname="Paul C. Bryan" initials="P." surname="Bryan" role="editor">
            <organization>ForgeRock US, Inc.</organization>
            <address>
                <postal>
                    <street>201 NE Park Plaza Drive Suite 196</street>
                    <city>Vancouver</city>
                    <region>WA</region>
                    <code>98684</code>
                    <country>USA</country>
                </postal>
                <phone>+1 604 783 1481</phone>
                <email>paul.bryan@forgerock.com</email>
            </address>
        </author>
        <date year="2011" />
        <area>General</area>
        <workgroup>Internet Engineering Task Force</workgroup>
        <keyword>json</keyword>
        <abstract>
            <t>JSON (JavaScript Object Notation) Patch defines the media type
            "application/patch+json", a JSON-based document structure for specifying partial
            modifications to apply to a JSON document.</t> 
        </abstract>
    </front>

    <middle>
        <section title="Introduction">
            <t><xref target="RFC4627">JavaScript Object Notation (JSON)</xref> has become a
            popular format for the storage and transmission of structured data between systems.
            As a result, numerous web service APIs support the JSON media type. The
            <xref target="RFC5789">HTTP PATCH</xref> specification extends HTTP with a new
            method to perform partial modifications to resources.</t>
            <t>This Internet-Draft proposes the JSON-Patch media type "application/patch+json",
            a JSON-based document structure for specifying partial modifications to apply to a
            JSON document.</t>
        </section>
        <section title="Conventions">
            <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
            "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
            interpreted as described in <xref target="RFC2119">RFC 2119</xref>.</t>
        </section>
        <section anchor="Structure" title="Patch Object Structure">
            <t>A JSON-Patch document is a JSON document that contains an object which
            specifies the set of operations to apply to a target JSON document.</t>
            <t>An example JSON-Patch document:</t>
            <figure>
                <artwork><![CDATA[
{
  "patches": [
    { "op": "remove", "path": "$.a.b.c" },
    { "op": "add", "path": "$.a.b", "element": "c", "value": "foo" }
  ]
}
]]>             </artwork>
            </figure>
            <section title="patches">
                <t>An array of objects; each object specifies a single patch operation to be
                applied to the target JSON document. Patch operations MUST be applied
                sequentially in the order they appear in the array. After the first patch has
                been applied, the resulting JSON document becomes the target for the next
                patch operation. This process repeats until all patches have been applied.</t>
            </section>
            <section title="op">
                <t>MUST be a string value. Specifies the patch operation to be applied.
                Defined patch operations are "add" and "remove".</t>
            </section>
            <section title="path">
                <t>MUST be a string value. Contains a concrete <xref target="JSONPath"/>
                expression (i.e. MUST contain only the root $, object property . [] and
                array subscript [] operators). It is an error condition if a path resolves
                to anything but a single node within the target JSON document.</t>
            </section>
            <section title="element">
                <t>MUST be a string or integer value. Specifies the child node to add into the
                node specified by the path. If string, specifies an object property to insert;
                if integer, specifies an array index to insert at. It is an error condition
                if the specified node type is incompatible with the "element" value (i.e.
                object with integer element, array with string element).</t>
            </section>
            <section title="value">
                <t>The value to insert into the specified node.</t>
            </section>
        </section>

        <section anchor="Operations" title="Patch Operations">
            <t>The patch operations are "add" and "remove".</t>
            <section title="add">
                <t>Adds a new property into an object or element into an array.</t>
                <t>If adding a property into an object, the "element" specifies the property
                to be added. It is an error condition if the property already exists in the
                object.</t>
                <t>If adding into an array, the "element" specifies the index where the
                value should be inserted. Any elements at or above the specified index are
                shifted one position to the right (i.e. indexes are incremented). It is an
                error condition if an addition would result in sparse allocation of array
                element(s).</t>
            </section>
            <section title="remove">
                <t>Removes the node specified by the path. It is an error condition if the
                node to be removed does not exist.</t>
                <t>If removing an element from an array, any elements above the specified
                index are shifted one position to the left (i.e. indexes are decremented).</t>
            </section>
        </section>

        <section anchor="Errors" title="Error Handling">
            <t>In the event of an error condition, whether patch processing ceases, and/or
            how error conditions are communicated and handled are left to the implementation
            to specify.</t>
            <t>Enforcing safety and/or idempotency of a JSON patch document is specified and
            handled by the implementation, based-on any mechanisms in other related
            specifications, such as <xref target="RFC2616">HTTP</xref>
            and <xref target="RFC5789">HTTP PATCH</xref>.</t>
        </section>

        <section title="Acknowledgements">
            <t>The structure of a JSON patch document was informed by the
            <xref target="RFC5261">XML Patch document</xref> specification.</t>
        </section>

        <section anchor="IANA" title="IANA Considerations">
            <t>The proposed MIME media type for the JSON patch document is "application/patch+json".</t>
            <t>Type name: application</t>
            <t>Subtype name: patch+json</t>
            <t>Required parameters: none</t>
            <t>Optional parameters: none</t>
        </section>

        <section anchor="Security" title="Security Considerations">
            <t>This specification is based-on the JSON format, therefore has the same security
            considerations as <xref target="RFC4627"/>.</t>
            <t>This specification uses <xref target="JSONPath"/> expressions to resolve the
            nodes to be modified. Such expressions should not be evaluated directly by the
            implementation language interpreter due to the potential for injection of
            malicious code.</t>
        </section>
  </middle>

  <back>
        <references title="Normative References">
          &RFC2119;
          &RFC4627;
        </references>

        <references title="Informative References">
          &RFC2616;
          &RFC5261;
          &RFC5789;
            <reference anchor="JSONPath" target="http://goessner.net/articles/JsonPath/">
            <front>
                <title>JSONPath: XPath for JSON</title>
                <author initials="S." surname="Goessner">
                    <organization></organization>
                </author>
                <date year="2007" month="April" />
            </front>
            </reference>
        </references>

        <section title="Examples">
            <section anchor="Adding-Property" title="Adding an Object Property">
                <t>An example target JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
  "foo": "bar"
}
]]>                 </artwork>
                </figure>
                <t>A JSON patch document:</t>
                <figure>
                    <artwork><![CDATA[
{
  "patches": [
    { "op": "add", "path": "$", "element": "baz", "value": "qux" }
  ]
}
]]>                 </artwork>
                </figure>
                <t>The resulting JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
  "baz": "qux",
  "foo": "bar"
}
]]>                 </artwork>
                </figure>
            </section>
            <section anchor="Adding-Element" title="Adding an Array Element">
                <t>An example target JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
  "foo": ["bar", "baz"]
}
]]>                 </artwork>
                </figure>
                <t>A JSON patch document:</t>
                <figure>
                    <artwork><![CDATA[
{
  "patches": [
    { "op": "add", "path": "$.foo", "element": 1, "value": "qux" }
  ]
}
]]>                 </artwork>
                </figure>
                <t>The resulting JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
  "foo": [ "bar", "qux", "baz" ]
}
]]>                 </artwork>
                </figure>
            </section>
            <section anchor="Removing-Property" title="Removing an Object Property">
                <t>An example target JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
  "baz": "qux",
  "foo": "bar"
}
]]>                 </artwork>
                </figure>
                <t>A JSON patch document:</t>
                <figure>
                    <artwork><![CDATA[
{
  "patches": [
    { "op": "remove", "path": "$.baz" }
  ]
}
]]>                 </artwork>
                </figure>
                <t>The resulting JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
  "foo": "bar"
}
]]>                 </artwork>
                </figure>
            </section>
            <section anchor="Removing-Element" title="Removing an Array Element">
                <t>An example target JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
  "foo": [ "bar", "qux", "baz" ]
}
]]>                 </artwork>
                </figure>
                <t>A JSON patch document:</t>
                <figure>
                    <artwork><![CDATA[
{
  "patches": [
    { "op": "remove", "path": "$.foo[1]" }
  ]
}
]]>                 </artwork>
                </figure>
                <t>The resulting JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
  "foo": ["bar", "baz"]
}
]]>                 </artwork>
                </figure>
            </section>
            <section anchor="Replacing-Value" title="Replacing a Value">
                <t>Replacing a value is performed by removing a value and inserting it.</t>
                <t>An example target JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
  "baz": "qux",
  "foo": "bar"
}
]]>                 </artwork>
                </figure>
                <t>A JSON patch document:</t>
                <figure>
                    <artwork><![CDATA[
{
  "patches": [
    { "op": "remove", "path": "$.baz" },
    { "op": "add", "path": "$", "element": "baz": "value": "boo" }
  ]
}
]]>                 </artwork>
                </figure>
                <t>The resulting JSON document:</t>
                <figure>
                    <artwork><![CDATA[
{
  "baz": "boo",
  "foo": "bar"
}
]]>                 </artwork>
                </figure>
            </section>
        </section>
        
        <section title="Changelog">
            <t>Draft 00
            <list style="symbols">
                <t>Initial draft.</t>
            </list></t>
        </section>

        <section anchor="Issues" title="Open Issues">
            <t><list style="numbers">
                <t><xref target="JSONPath"/> is an informal, de facto standard. Work is now in
                progress to get it published an Internet-Draft (with some likely changes).</t>
                <t>Should define an accompanying JSON-Schema specification for the JSON-Patch
                document structure.</t>
            </list></t>
        </section>

    </back>

</rfc>
