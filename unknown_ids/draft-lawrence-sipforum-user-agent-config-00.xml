<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc sortrefs="no" ?>
<?rfc symrefs="yes" ?>

<?rfc strict="yes" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes" ?>

<rfc docName="draft-lawrence-sipforum-user-agent-config-00"
     category="info"
     ipr="trust200902"
     >

  <front>
  <title abbrev="SIP UA Configuration">
    Session Initiation Protocol (SIP) User Agent Configuration
  </title>

    <author initials= "S." surname="Lawrence" fullname="Scott Lawrence"
            role="editor"
            >
      <organization>Avaya, Inc.</organization>
      <address>
        <postal>
          <street>600 Technology Park</street>
          <city>Billerica</city>
          <region>MA</region> <code>01821</code>
          <country>USA</country>
        </postal>
        <phone>+1 978 288 5508</phone>
        <email>xmlscott@gmail.com</email>
      </address>
    </author>
    <author fullname="John Elwell" initials="J." surname="Elwell">
      <organization>Siemens Enterprise Communications</organization>
      <address>
        <phone>+44 1908 855608</phone>
        <email>john.elwell@siemens-enterprise.com</email>
      </address>
    </author> 

    <date month="March" day="22" year="2010" />

    <area>Real-Time Applications and Infrastructure</area>

    <!-- <workgroup>DISPATCH</workgroup> -->

    <keyword>I-D</keyword>
    <keyword>Internet-Draft</keyword>

    <abstract>
      <t>
        This document defines procedures for how a SIP User Agent should
        locate, retrieve, and maintain current configuration information
        from a Configuration Service.
      </t>
      <t>
        This document is the product of the SIP Forum Technical Working
        Group User Agent Configuration Task Group.
      </t>
    </abstract>

  </front>

  <middle>
  <section anchor='introduction' title="Introduction">

    <t>
      A user gets a new SIP User Agent (UA); it may be a hardware device or software.  Some
      User Agents have a user interface that can accept a username, password, and domain
      name.  Other devices, like Analog Telephony Adapters (ATAs), have no user interface other
      than that provided by an attached analog phone.  How does a
      non-technical user minimally configure it so that when it is started, something
      useful happens?
    </t>

    <section anchor='scope' title="Scope">

      <t>
        This document specifies a procedure for how a
        SIP User Agent locates, retrieves, and maintains current configuration information
        for a given SIP Service Provider.  As such, it specifies requirements to be met by both
        the User Agent, the Configuration Service at the SIP Service Provider, and the network
        infrastructure services that allow them to communicate.
      </t>

      <t>
          Nothing in this specification prohibits a User Agent from obtaining configuration
          information by any means in addition to the mechanisms specified herein.  
      </t>

      <t>
        The intent of this specification is to provide mechanisms sufficient for User Agents
        to discover an appropriate source of configuration and maintain the currency of that
        configuration.  A User Agent implementation compliant to this specification is free to
        also implement additional mechanisms that may be required in particular environments,
        or for use when the services specified here are not available.
      </t>

      <t>
        The form and content of configuration data to be downloaded are outside the scope of
        this specification, although <xref target='configuration.data.items'/>, "<xref target='configuration.data.items' format='title'/>" suggests a
        minimum set of data items likely to be required by all types of UA. 
      </t>

    </section>

    <section anchor='terminology' title="Terminology">
        <t>
          The following terms are used in this document:

      <list style='hanging'>
        <t hangText='User Agent, UA'/>
        <t>
              As defined in <xref target='RFC3261'/>. Note that this includes any implementation of a User
              Agent. A SIP phone is a User Agent, but the term also encompasses any other
              entity that uses SIP (for example: for a text chat, for sharing a whiteboard or
              for fax). 
        </t>
        <t hangText='Soft User Agent, Soft UA'/>
        <t>
              A User Agent that runs as an application within some larger system that has
              responsibility for some of the steps described in this specification.  In those
              cases the Soft UA must be able to obtain the information from the platform.  In
              all cases, the term User Agent also encompasses a Soft User Agent.
        </t>

        <t hangText='SIP Service Provider, Service Provider'/>
        <t>
              An entity that provides services to User Agents using the SIP protocol.  This
              specification requires that a Service Provider make configuration data and
              certain other information available in order to configure User Agents.
        </t>

        <t hangText='Configuration'/>
        <t>
              The set of information that establishes operational parameters for a particular User Agent.
        </t>

        <t hangText='Configuration Service, CS'/>
        <t>
              The source of Configuration for User Agents.
        </t>

        <t anchor='config.service.domain' hangText='Configuration Service Domain'/>
        <t>
              The DNS name for the service from which a Configuration is requested.
        </t>
      </list>

        </t>

      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
        "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
        interpreted as described in <xref target= "RFC2119"/>.
      </t>

    </section>

    <section anchor='phone.installation.examples' title="User Agent Installation Examples">

      <t>
        This section is non-normative; it is a set of "user stories" - narrative descriptions of
        the user experience in different environments.  These are "black box" descriptions
        meant to include the actions to be taken by the human participants (including
        adminstrators and system operators as well as the "user" of the UA), but not how the
        network elements communicate or operate internally.  The intent is that these narratives
        provide context for the subsequent technical specifications.
      </t>

      <section anchor='example.hosted.ip.service.provider' title="Hosted IP Service Provider Example">

        <t>
          Configuring a new UA to use a hosted IP telephony service will
          typically proceed as follows:  The customer makes a request to their
          Service Provider to add one or more new users to their service.  The
          customer may supply further details such as a preferred username, type
          of end-point and any requests for specific functionality, depending on
          what information the Service Provider considers useful, but no
          additional information is required from the customer.
        </t>
        <t>
          The Service Provider performs any necessary provisioning actions on their equipment,
          and returns to the customer provisioning information, which may include: a domain
          name or a numeric domain identifier for the provider, a user identifier, and a
          password.  Typically, a Service Provider will supply provisioning information for
          each device to be provisioned, but may choose to supply information that can be used
          with multiple devices, or for a limited duration or with other benefits and
          restrictions.
        </t>
        <t>
          The customer enters the provisioning information into the
          UA to be configured, whereupon the UA uses this information to locate
          the configuration service, securely fetch the configuration information,
          and configure itself for operation.
        </t>

      </section>

      <section anchor='example.ip-pbx.solution' title="IP-PBX Example">
        <t>
          Configuring a new UA in a typical business begins by provisioning a user identity in
          the PBX (add user "John Smith"), and assigning a phone number to the user.  That
          number must then be assigned to a line on a specific UA; this is usually done by
          selecting a UA and provisioning it in the PBX by its serial number (usually a MAC
          address), and then assigning the identity or phone number to a 'line' on that UA in the
          PBX configuration system.
        </t>

        <t>
          Once provisioning in the PBX is complete, the new user goes to his or her workplace
          and connnects the UA to the network.  When connected and powered up, the UA is
          provided with the user identity, phone number, and any other configuration data with
          no local user interaction - just connecting it to the network loads the configuration
          from the PBX and the UA is operational.
        </t>

      </section>

      <section anchor='high.security' title="Special Considerations for High Security Deployments">
        <t>
          To deploy a new UA in a high security scenario requires some special consideration. A
          security conscious deployment will most likely require that the SIP and other
          management interfaces, including the interface to the configuration service, are
          secured before the device is put in to service.
        </t>
        <t>
          In order to achieve any level of security, the device will need to be
          pre-configured with some security related information in the form of
          certificates. This may be achieved in a number of ways. Some examples include

        <list style='numbers'>
            <t>
              An administrator who configures the device in a secure environment before making
              the device available to the user.
            </t>

            <t>
              Some certificates may be built into the device during the manufacturing process
              enabling the configuration service to certify information such as the manufacturer,
              UA type and MAC address. The configuration service may then be used to provision
              the device with other certificates as required.
            </t>

            <t>
              The device may have a facility for the user to provide the security information
              in the form of a security card or dongle.
            </t>

        </list>
        </t>
        <t>
          All these mechanism are likely to restrict the user to a limited set of devices
          approved for use in a particular deployment.
        </t>
      </section>

    </section>
  </section>

  <section anchor='auto.config' title="Obtaining User Agent Configuration">

    <t>
      This section specifies how a User Agent connects to the network, determines what domain
      to request configuration for, obtains configuration from that domain, and is notified by
      that domain when the configuration changes.  
    </t>

    <t>
      The User Agent MAY obtain configuration information by any means in addition to those
      specified here, and MAY use such information in preference to any of the steps specified
      below, but MUST be capable of using these procedures alone in order to be compliant with
      this specification.
    </t>

    <section anchor='network.discovery' title="Network Discovery">

      <t>
        A UA needs a minimum set of parameters to allow it to communicate on the network. Some
        networks allow the UA to automatically discover these parameters, while other networks
        require some or all of these parameters to be manually provisioned on the UA.
      </t>

      <section anchor='link.discovery.auto' title="Link Layer Provisioning">

        <t>
          The UA SHOULD attempt to use LLDP-MED (see <xref target='ANSI.TIA-1057-2006'/>) for
          automatic provisioning of link layer parameters.
        </t>

        <t>
          In some deployments, failure to properly provision the link layer may result in the
          UA having incorrect layer 2 priority, degrading the quality of service, or being on
          the wrong virtual LAN (VLAN), possibly resulting in complete loss of service.
        </t>
      </section> <!-- link.discovery.auto -->

      <section anchor='network.discovery.auto' title="Network Layer Provisioning">
        <t>
          In order to communicate using IP, the UA needs the following minimal IP
          configuration parameters:
        </t>

        <t>IP Network Parameters
          <list style='symbols'> 
            <t>UA IP Address</t>
            <t>Subnet Mask</t>
            <t>Gateway IP address</t>
            <t>DNS Server IP address(es)</t>
          </list>
        </t>

        <t>
          With the exception of a Soft UA that relies on its platform to obtain the IP
          Network Parameters,

          <list style='symbols'>
            
              <t>
                If the User Agent is using IP version 4 on a network technology for which the
                Dynamic Host Configuration Protocol (DHCP) <xref target='RFC2131'/> is
                defined, the UA MUST attempt to obtain the IP Network Parameters using DHCP and
                MUST request DHCP option 15 <xref target='RFC2132'/> for obtaining a domain
                name.
              </t>
            
            
              <t>
                If the User Agent is using IP version 6 on a network technology for which the
                Dynamic Host Configuration Protocol version 6 (DHCPv6) <xref
                target='RFC3315'/> is defined, the UA MAY use any standard IPv6 mechanism to
                determine the IP Network Parameters, but MUST request DHCPv6 option 21 <xref
                target='RFC3319'/> to obtain one or more domain names.
              </t>
            
          </list>

          In either case, if the DHCP or DHCPv6 service provides a domain name value or values
          for the option concerned, the UA MUST save those domain names as candidates for use
          as the Local Network Domain (see <xref target='domain.discovery'/>, "<xref target='domain.discovery' format='title'/>").
        </t>

      </section> <!-- network.discovery.auto -->

    </section> <!-- network.discovery -->

    <section anchor='domain.discovery' title="Obtaining the Configuration Service Domain">
      
      <t>
        To obtain a configuration, the UA needs to know what domain to request it from.  This
        domain is the Configuration Service Domain; its value is a DNS name (see <xref
        target='RFC1034'/>).
      </t>

      <t>
        User control or prior configuration MAY establish a value for the Configuration
        Service Domain that takes precedence over the discovery procedure defined below.
        In the absence of user control or prior configuration, the Configuration Service Domain
        is obtained as specified in <xref target='domain.discovery.localnet'/>, "<xref target='domain.discovery.localnet' format='title'/>", or if that is
        unsuccessful, by the manual mechanism specified in <xref
        target='domain.discovery.manualname'/>, "<xref
        target='domain.discovery.manualname' format='title'/>".
      </t>

      <section anchor='domain.discovery.localnet' title="The Local Network Domain">
        <t>
          The UA MUST attempt to use the Local Network Domain name (see
          <xref target='network.discovery.auto'/>, "<xref
          target='network.discovery.auto' format='title'/>") as the
          Configuration Service Domain.  If multiple DNS names are provided
          by DHCPv6 option 21, the UA MUST attempt to use each of the names
          provided, in the order they were given by the DHCPv6 service,
          until a configuration is successfully obtained.
        </t>

        <t>
          If the DHCP service does not provide any local domain name value, the UA SHOULD use the
          manual mechanism defined in <xref
          target='domain.discovery.manualname'/>, "<xref
          target='domain.discovery.manualname' format='title'/>".  
        </t>

      </section> <!-- domain.discovery.localnet -->

      <section anchor='domain.discovery.manualname' title="Manual Domain Name Entry">
        <t>
          A UA MAY provide an interface by which a DNS name is provided
          directly by the user for the Configuration Service Name.
        </t>
      </section> <!-- domain.discovery.manualname -->


    </section> <!-- domain.discovery -->

    <section anchor='configservice.url' title="Constructing the Configuration Request URL">

      <t>
        Using the Configuration Service Domain name obtained in <xref
        target='domain.discovery'/>, "<xref
        target='domain.discovery' format='title'/>", the UA MUST construct an HTTPS URL with which to request
        configuration.  Constructing this URL consists of two parts:

        <list style='symbols'>
          <t>
            <xref target='configservice.url.base'/>, 
            "<xref target='configservice.url.base' format='title'/>"
          </t>
          <t>
            <xref target='configservice.url.addparams'/>,
            "<xref target='configservice.url.addparams' format='title'/>"
          </t>
        </list>
      </t>
      
      <section anchor='configservice.url.base' title="Obtaining a Configuration Service Base URL">

        <t>
          The Configuration Service Domain is resolved to one or more URLs using the U-NAPTR
          DDDS application defined in <xref target='RFC4848'/> "Domain-Based Application Service
          Location Using URIs and the Dynamic Delegation Discovery Service
          (DDDS)".
        </t>

        <t>
          The lookup key for the U-NAPTR request is the Configuration Service Domain Name
          determined in <xref target='domain.discovery'/>, "<xref target='domain.discovery' format='title'/>".  The UA MUST make a DNS request for
          NAPTR records for that domain name.  From the returned records, the UA MUST select
          those whose Service field value is "SFUA.CFG"; from those
          records, the UA MUST extract the https URL of the Configuration Service from the
          Regular Expression field (see next paragraph for the construction of that field
          value).
        </t>

        <t>
          The NAPTR records for the Configuration Service Domain Name whose Service field
          value is "SFUA.CFG" MUST be configured with the Flag field set to
          "U", an empty Substitution field, and a Regular Expression
          field value of the following syntax (i.e., a regular expression to replace the domain
          name with an https URI):
          <figure>
            <artwork align="left">
              <![CDATA[
          u-naptr-regexp = "!^.*!URI!"
              ]]>
            </artwork>
          </figure>
          where 'URI' is as defined in STD 66 <xref target='RFC3986'/>, the URI syntax
          specification, and where the scheme of the URI is "https".
        </t>

        <t>
          Note that the UA does not need to implement a general regular expression evaluator in
          order to process the record above correctly.  The URI value can be extracted by
          stripping the fixed value "!^.*!" from the beginning of the value,
          and "!" from the end of the value to obtain the base URL.  See
          <xref target='provisioning.service.example'/>, "<xref target='provisioning.service.example' format='title'/>".
        </t>

       <section anchor='provisioning.server.redundancy' title="Configuration Service Redundancy">
          <t>
            Multiple Configuration Servers can be used to provide redundancy and additional
            capacity for provisioning User Agents.  If the DNS NAPTR request for the
            Configuration Service Domain Name returns multiple records with the 'SFUA.CFG'
            service tag, then the UA should treat the resulting URLs as alternatives, ordered
            according to the rules for the priority and weight as specified for NAPTR records. 
          </t>

          <t>
            In addition to redundancy provided by multiple NAPTR records, resolution of the
            host part of the https URL can produce multiple results.
          </t>

        </section> <!-- provisioning.server.redundancy -->

        <section anchor='configservice.url.base.fail' title="Configuration Service Name to Base URL Resolution Failure">

          <t>
            If the DNS request to resolve the Configuration Service Name to a request URL does
            not receive any response, the UA should follow standard DNS retry procedures.
          </t>

          <t>
            If the DNS request to resolve the Configuration Domain Name to a host name returns
            a response that indicates that no matching result is available (NXDOMAIN), the UA
            SHOULD attempt to obtain another Configuration Domain Name using the procedures in
            <xref target='domain.discovery'/>, "<xref target='domain.discovery' format='title'/>".
          </t>

        </section> <!-- configservice.url.base.fail -->

      </section> <!-- configservice.url.base -->
      
      <section anchor='configservice.url.addparams' title="Adding Configuration Request Parameters">
        <t>
          To construct the full configuration request URL, the UA
          adds one or more parameters to the base URLs to specify what configuration the UA
          is requesting.  

        <list style='numbers'>
          
            <t>
              The UA MUST add all parameters from those defined in the <xref
              target='configservice.url.params' format='title'/> list below for which the UA has a value.
              Any parameter from that set for which the UA does not have a value MUST be
              omitted.
            </t>
            <t>
              The query parameter names defined by this specification all begin with the
              prefix 'sfua-'.  All names beginning with the prefix
              'sfua-' are reserved for this specification and future
              revisions.  The UA MUST NOT include any request parameter whose name begins with
              the prefix 'sfua-' that is not defined by this specification
              (including any future revisions).
            </t>
            <t>
              Any parameter not defined by the specification is allowed, but
              MAY be ignored by any Configuration Service that does not
              recognize it.
            </t>
        </list>
        </t>
        <section anchor='configservice.url.params' 
                 title='Configuration Request Parameters'>
          <t>
        <list style='hanging'>

          <t hangText='sfua-id'/>
        <t>
                The URN identifying the User Agent, constructed as
                specified in section 4.1 of <xref
                target='RFC5626'/> "Managing Client-Initiated
                Connections in the Session Initiation Protocol (SIP)". 
          </t>

              <t>
                Since the procedure defined by <xref target='RFC5626'/> allows any UA to
                construct a value for this parameter, the sfua-id parameter MUST always be
                included.
              </t>

              <t>
                If the UA implements <xref target='RFC5626'/>, and includes the '+sip.instance' Contact
                header field parameter in any request, when requesting configuration it MUST
                use the same value for the sfua-id parameter. 
              </t>

          <t hangText='sfua-user'/>
        <t>
                An identifier for a user associated with the configuration.  Note that this
                might be different than any SIP 'user' in the UA configuration: it could,
                for example, be the login name of an account on the service provider web site.
                The syntax of this parameter is that of the <xref target='RFC2617'/>
                'userid'. 
          </t>
              
              <t>
                See <xref target='request.http.authentication'/>, "<xref target='request.http.authentication' format='title'/>" for how this parameter
                relates to authentication of the configuration data request.
              </t>
            
          <t hangText='sfua-vendor'/>
        <t>
                An identifier that specifies the vendor of the User Agent.  The syntax of the
                value of this parameter is that of a DNS domain.  The domain value MUST be that
                of a domain owned by the vendor. 
          </t>

          <t hangText='sfua-model'/>
        <t>
                An identifier that further specifies the User Agent from among those produced
                by the vendor.  The syntax of the value of this parameter is the same as the
                <xref target='RFC3261'/> 'token'.  Values for this parameter are selected by the vendor. 
              </t>

          <t hangText='sfua-revision'/>
        <t>
                An identifier that further specifies the User Agent from among those produced
                by the vendor.  The syntax of the value of this parameter is the same as the
                <xref target='RFC3261'/> 'token'.  Values for this parameter are selected by the vendor. 
              </t>

        </list>
        </t>
      </section> <!-- configservice.url.params -->
      </section> <!-- configservice.url.addparams -->

      <section anchor='provisioning.service.example' title="Configuration Request URI Example">

        <t>
          Using the rules in <xref target='domain.discovery'/>, "<xref target='domain.discovery' format='title'/>", the UA has determined that the
          Configuration Service Domain value is "example.net".  To obtain the base URL, the UA
          constructs the DNS NAPTR request for "example.net.", which returns the DNS records:

          <figure anchor='example.cs.naptr' 
                  title="Example Configuration Service NAPTR Query Results">
            <artwork align="left">
              <![CDATA[
NAPTR  10 10 "u" "SFUA.CFG" "!^.*$!https://p1.example.net/cfg!" ""
NAPTR 100 10 "u" "SFUA.CFG" "!^.*$!https://p2.example.net/cfg!" ""
NAPTR  90 50 "s" "SIP+D2T"  ""  _sip._tcp.example.net.
NAPTR 100 50 "s" "SIP+D2U"  ""  _sip._udp.example.net.
              ]]>
            </artwork>
          </figure>

          The records with the service-field "SFUA.CFG" each provide a base URL value for
          SIP UA configuration requests.
        </t> 

        <t>
          Our hypothetical example communications device is a 'HypoComm' version 2.1, made by
          ExampleCorp, and has the link layer MAC address of 00:11:22:33:44:55.  It does not
          have any prior knowledge of a user identity for which to request configuration, so it
          constructs query parameters using the values it does have, combining each with the
          base URL to create these request URLs (lines wrapped for readability):
          
          <figure anchor='example.requri' 
                  title="Example Configuration Request URLs">
            <artwork align="left">
              <![CDATA[
https://p1.example.net/cfg
   ?sfua-anchor=urn:uuid:00000000-0000-1000-8000-001122334455
   &sfua-vendor=examplecorp.com
   &sfua-model=HypoComm
   &sfua-revision=2.1
https://p2.example.net/cfg
   ?sfua-anchor=urn:uuid:00000000-0000-1000-8000-001122334455
   &sfua-vendor=examplecorp.com
   &sfua-model=HypoComm
   &sfua-revision=2.1
              ]]>
            </artwork>
          </figure>
        </t>
        
      </section> <!-- provisioning.server.example -->

    </section> <!-- configservice.url -->

    <section anchor='request.http' title="Obtaining Configuration from the Configuration Service">

      <t>
        To request configuration using a URL constructed as specified in
        <xref target='configservice.url'/>, "<xref target='configservice.url'
        format='title'/>" the User Agent MUST do an HTTPS GET request to
        each of the URLs until a configuration that the UA can use is
        returned in response to one of the requests.
      </t>

      <t>
        A successful final response from the Configuration Service to a GET request for
        configuration data MUST contain configuration data for the UA in the HTTP response
        body.  Note that the full capabilities of HTTP as specified in
        <xref target='RFC2616'/> are available to the CS, so responses
        such as redirection can be used by the CS as a part of the process of providing 
        configuration data.
      </t>

      <t>
        Configuration data returned in a successful response is subject to change by the
        CS.  The HTTP cache control metadata (Etag or Last-Modified) returned in
        the response that provides configuration data is used to determine when a
        configuration change has occured (<xref
        target='change.notification'/>, "<xref target='change.notification' format='title'/>") and to
        validate any stored configuration data (<xref
        target='stored.configuration'/>, "<xref target='stored.configuration' format='title'/>").

        <list style='symbols'>
            <t>
              An HTTP response from the CS that provides configuration data MUST include cache
              control metadata sufficient to ensure that when a new configuration is available,
              the cache control information for that new data is different.
            </t>

            <t>
              The UA MUST retain all of the HTTP cache control metadata from any response that
              provides configuration data.
            </t>
        </list>
      </t>

      <section anchor='request.http.authentication' title="Configuration Data Request Authentication">

        <t>
          Because the Configuration Request URL scheme is HTTPS, the UA MUST always use TLS
          to establish a connection with the Configuration Service.  
        </t>

        <t>
          The UA MUST provide a server_name extension in the TLS Client Hello message as
          defined in <xref target='RFC3546'/> "Transport Layer Security (TLS) Extensions", 
          whose value is the host part of the CS base URL. This allows the
          CS to identify and provide a server certificate containing the
          desired identity (allowing for a single server to serve multiple
          names).   
        </t>

        <t>
          If the UA is capable of doing so, it SHOULD validate the server certificate provided
          by the CS.  If the UA is unable to authenticate the certificate provided by the CS,
          it MAY store the server certificate and alert the user if that CS host provides a
          different certificate in the future.  While not as secure as an authenticated
          certificate, this 'trust on first use' model does give some protection against 'man
          in the middle' attacks in the future.
        </t>

        <t>
          If it has one, the UA MUST provide a client certificate. The CS SHOULD validate the
          UA client's certificate, if one is provided.  If the CS is unable to authenticate the
          certificate provided by the UA (for example, the UA is using a self-signed
          certificate), then the CS MAY choose to cache the certificate, provided that the UA
          successfully authenticates using HTTP authentication (see next paragraph).
          This allows a CS to treat the digest authentication credentials as a single-use
          password to authenticate the client certificate.  This 'trust on first use' model
          provides protection against future 'man in the middle' attacks, provided that the
          initial communication is not compromised.
        </t>

        <t>
          If the CS requires HTTP authentication of the configuration data request, the
          HTTP 'username' parameter used MUST be the same value as the sfua-user value provided
          in the configuration data request parameters.
        </t>

      </section> <!-- request.http.authentication -->

      <section anchor='request.http.fail' title="Configuration Data Request Failure">

          <t>
            The HTTP configuration data request can fail in a number of ways; the error
            handling for each is defined below:

          <list style='symbols'>
            
              <t>
                If a DNS request to resolve the host name in the request URL returns a
                response that indicates that no matching result is available (NXDOMAIN), the
                UA MUST remove that request URL from the list of alternatives for the
                Configuration Service Domain.
              </t>
            

            
              <t>
                If the attempt to open a TCP connection to the host in the request URL fails,
                the UA MAY attempt requests to any alternative URLs for the same configuration
                service without waiting between alternatives, but any requests to
                the same host MUST wait between requests according to the procedure defined in
                <xref target='backoff.retry'/>, "<xref target='backoff.retry' format='title'/>".  
              </t>
            

            
              <t>
                If the TCP connection succeeds but the TLS handshake fails, including failure
                of the UA to validate the certificate provided by the Configuration Service
                host (if the UA is capable of validation), the UA MUST remove the failed URL
                from the list of alternative URLs for this Configuration Service Domain.
              </t>
            

            
              <t>
                If the request returns a permanent HTTP failure response, the UA MUST remove
                the failed URL from the list of alternatives for this Configuration Service
                Domain. 
              </t>
            

            
              <t>
                If the list of alternatives for this Configuration Service Domain becomes
                empty, the UA MUST attempt to obtain another Configuration
                Domain Name using the procedures in <xref
                target='domain.discovery'/>, "<xref target='domain.discovery' format='title'/>".
              </t>
            

            
              <t>
                If the UA has reached its chosen maximum number of retries
                (this specification does not specify a maximum number of
                retries, but any retries to the same host MUST follow the
                procedure defined in <xref target='backoff.retry'/>, "<xref
                target='backoff.retry' format='title'/>"), the UA MAY
                attempt to obtain another Configuration Domain Name using
                the procedures in <xref target='domain.discovery'/>, "<xref
                target='domain.discovery' format='title'/>".
              </t>
            

          </list>
          </t>

      </section> <!-- request.http.fail -->

    </section> <!-- request.http -->

    <section anchor='request.subscription' title="Requesting Configuration Change Notification">
      
      <t>
        The configuration data provided by the CS is subject to change.  In order to provide
        for the timely update of configuration information in User Agents, this specification
        provides for notification of changes and refreshing of the configuration data.
      </t>

      <section anchor='change.subscription.request' title="Configuration Change Subscriptions">

        <t>
          Any HTTP response from the CS that provides configuration data to the UA MUST include
          a Link header as specified by <xref target='draft-roach-sip-http-subscribe'/>; the
          URI value in the Link header MUST be a SIP URI, and the link relation
          ('rel' attribute) value MUST be 'monitor'.  The
          'monitor-group' relation MUST NOT be used - see below for rules
          regarding monitoring of multiple configuration data resources.  The SIP URI returned
          in the Link header is the 'configuration change subscription URI'.
        </t>

        <t>
          A UA that receives a successful configuration data response MUST attempt to maintain a
          subscription to the SIP URI from the Link header in that response for the http-monitor
          event package.  This subscription is referred to herein as a 'configuration change
          subscription'. 
        </t>

        <t>
          The CS MUST accept properly authenticated SUBSCRIBE requests from the UA for the
          http-monitor event package at the URI it provided in the Link header of a
          configuration data response.  Authentication of the SUBSCRIBE request uses any standard
          SIP authentication mechanism with credentials supplied to the UA in the configuration
          data. 
        </t>

        <t>
          Configuration data MAY include references in the form of additional URLs at the CS
          that the UA MUST use to obtain additional data. Any response to requests for these
          additional URLs that provide configuration data MUST provide cache control data and a
          configuration change subscription URI.  The CS MAY return a unique configuration
          change subscription URI for each configuration data request, or MAY return the same
          SIP URI for different requests, so long as a change to the configuration data
          returned in any of these request results in notification on all subscriptions to the
          associated subscription URI.
        </t>

        <t>
          If the CS returns a unique configuration change subscription URI in the Link header
          of different configuration data requests:
          <list style='symbols'>
            
              <t>
                The UA MUST maintain multiple subscriptions; one to each URI associated with
                configuration data the UA is using.
              </t>
            
          </list>
        </t>

        <t>
          If the CS returns the same configuration change subscription URI in the Link header
          of different configuration data requests:
          <list style='symbols'>
            
              <t>
                The UA is not required to create multiple subscriptions to the same URI.
              </t>
            
            
              <t>
                The UA MUST associate the URI with each of the configuration data requests for
                which it was returned, and any NOTIFY or other change in the status of that
                subscription affects the validity of all of the associated configuration data.
              </t>
            
            
              <t>
                The CS MUST send a NOTIFY message on the configuration change subscription
                when there is a change to any of the different configuration data resources for
                which the subscription URI was returned.
              </t>
            
          </list>
        </t>

        <section anchor='change.subscription.failure' title="Change Subscription Failure">

          <t>
            If a configuration change SUBSCRIBE request (either the initial request or any
            attempt to refresh the subscription) is permanently rejected by the
            Configuration Service (the CS returns a failure response that is not an
            authentication challenge or redirection and does not specify a Retry-After
            header), the UA MUST consider the associated configuration data to be not
            valid and attempt to revalidate it as specified in <xref
            target='revalidate'/>, "<xref target='revalidate' format='title'/>".  Since
            the CS is not allowed to reject a properly authenticated request, this
            indicates a problem either with the configuration data or the CS.
          </t>

          <t>
            If a configuration change SUBSCRIBE request (either the initial
            request or any attempt to refresh the subscription) fails other
            than by being permanently rejected, the UA MUST consider the
            associated configuration data to be of unknown validity, and
            MUST retry the SUBSCRIBE request as specified in <xref
            target='backoff.retry'/>, "<xref target='backoff.retry'
            format='title'/>"; the maximum time between retries MUST NOT be
            more than 30 minutes, and the retries MUST continue as long as
            the configuration is used.  The UA MAY at any time return to
            any earlier step in the process of obtaining configuration
            data.
          </t>

        </section>

        <section anchor='change.subscription.term' title="Change Subscription Termination">

          <t>
            If the CS explicitly terminates the configuration change (http-monitor)
            subscription by sending a NOTIFY message with a Subscription-State header value of
            'terminated', the UA MUST consider the configuration data to be of unknown
            validity.  If the rules for interpreting and acting on the 'reason' code parameter
            as specified in section 3.2.4 of <xref target='RFC3265'/> allow, the UA MUST
            attempt to re-establish the subscription.  If those rules do not allow the UA to
            re-subscribe, then the UA MUST consider the data to be not valid and attempt to
            revalidate it as specified in <xref target='revalidate'/>, "<xref
            target='revalidate' format='title'/>". The UA MAY at any time
            return to any earlier step in the process of obtaining configuration data. 
          </t>

        </section>

      </section>

      <section anchor='change.notification' title="Configuration Change Notices">

        <t>
          To inform the UA of a configuration data change, the CS MUST send a NOTIFY message to the UA
          in the configuration change subscription established by the UA as detailed in <xref
          target='change.subscription.request'/>, "<xref
          target='change.subscription.request' format='title'/>".
        </t>

        <t>
          The CS MUST NOT send unsolicited (out-of-dialog) NOTIFY messages.
        </t>

        <t>
          As specified in <xref target='draft-roach-sip-http-subscribe'/>, the body of a
          NOTIFY message in the http-monitor event package is the HTTP headers that would have
          been returned in response to an HTTP HEAD request (a HEAD request returns the headers
          that would have been returned for a GET request to the same URI, but with no body).
        </t>

        <t>
          When a NOTIFY message is received by the UA in the configuration change subscription,
          the UA MUST compare the cache control data it retained when the configuration data was
          received with the HTTP header values in the NOTIFY message body.  If any of the cache
          control data in the HTTP header values differs from those in the original
          configuration data response, the UA MUST consider the stored configuration data to be
          no longer valid.  As soon as reasonably possible after the UA discovers that
          configuration data is no longer valid, the UA MUST attempt a GET
          request to the HTTPS configuration request URL which provided the configuration data
          to obtain the changed configuration data.
        </t>

        <t>
          If this HTTPS request to the URL that previously provided the
          configuration data fails, the UA MUST attempt to obtain a new URL
          as specified in <xref target='configservice.url'/>, "<xref
          target='configservice.url' format='title'/>".
        </t>

      </section>

      
    </section>

    <section anchor='stored.configuration' title="Validity of Stored Configuration Data">
      
      <t>
        The configuration data stored by a UA is considered valid so long as the UA has a
        subscription to the CS as described in <xref
        target='change.subscription.request'/>, "<xref target='change.subscription.request' format='title'/>" and the UA
        has not received a NOTIFY message from the CS indicating that the configuration data
        has changed.
      </t>

      <t>        
        When a UA initializes itself, it MUST consider any stored configuration data to be of
        unknown validity.
      </t>

      <t>        
        The UA MAY use configuration data that is of unknown validity, or configuration data
        that is known to be no longer valid, while attempting to revalidate that data or
        obtain new data.  There is no assurance that such configuration data is still
        useful, but the UA is NOT REQUIRED to stop using or delete the data.
      </t>

      <section anchor='revalidate' title="Re-validating Configuration Data">
        <t>        
          To revalidate stored configuration data of unknown validity, the UA MUST repeat the
          HTTP GET request it used to obtain the stored configuration data, with the
          appropriate HTTP headers to make the request a conditional request using the cache
          control data returned in the response that provided the configuration data.  This allows the CS
          to respond either with a new configuration data response, or a 304 (Not Modified)
          response to indicate that the configuration data has not changed.
        </t>

        <t>
          If the CS responds with a 304 response, the SIP UA MUST assume that the value of the
          Link header returned with the original configuration data is also still correct (in
          effect, the HTTP cache control values and the subscription URL are a part of the
          configuration data), and so the UA MUST attempt to create and maintain a subscription
          to that URL as when the configuration data was first obtained (<xref
          target='change.subscription.request'/>, "<xref
          target='change.subscription.request' format='title'/>"). 
        </t>

        <t>
          If the HTTP request to revalidate the configuration fails, the UA MUST follow the
          procedures defined for a failure of the initial HTTP configuration data request as
          specified in <xref target='request.http.fail'/>, "<xref target='request.http.fail' format='title'/>".
        </t>
      </section> <!-- revalidate -->

    </section> <!-- stored.configuration -->

    <section anchor='backoff.retry' title="Retry Backoff Procedure">

      <t>
        In case of certain possible failures as described above, the appropriate response is to
        retry the failed operation.  In all of these retry cases, the following rules apply:
        <list style='symbols'>
          
            <t>
              The UA SHOULD retry at least 5 times before abandoning the failed step (except as
              allowed for in specific error handling rules above).
            </t>
          
          
            <t>
              Following the first instance of a given failure, the UA MUST select an initial
              backoff timer value randomly between 2 and 8 inclusive and wait this number of
              seconds before retrying the failed request.
            </t>
          
          
            <t>
              Following any subsequent instance of a given failure, the UA MUST increase the
              backoff timer value by 2 raised to the power of the number of preceding failures
              (2^N where N is the number of previous failures), and
              wait this increased number of seconds or the maximum interval specified by
              specific error handling procedures, whichever is less, before retrying the failed
              request.
            </t>
          
        </list>
        For example, after an initial failure, the UA chooses an initial backoff timer value of
        4 seconds, followed by retries at the following times: 6 seconds (4 +
        2^1), 10 seconds (6 + 2^2), 18
        seconds (10 + 2^3), 32 (18 + 2^4)
        seconds, and 64 (32 + 2^5) seconds.
      </t>
    </section>
  </section>

  <section anchor='configuration.data' title="Configuration Data">

    <t>
      This document does not specify the form or content of configuration data.  As such,
      the contents of this section are non-normative.
    </t>

    <section anchor='configuration.data.items' title="Configuration Data Items">
      <t>
        The configuration data for a SIP UA should, at minimum, include items with the
        following semantics.
      </t>

      <section anchor='configuration.data.items.aor' title="Address-of-Record">
        <t>
          The Address-of-Record (AOR) is a SIP or SIPS URI which identifies the
          user of the device as specified in <xref target='RFC3261'/>.
        </t>
      </section>

      <section anchor='configuration.data.items.realm' title="Realm">
        <t>
          The realm is used to populate the realm parameter in the SIP
          Proxy-Authorization header as specified in <xref target='RFC3261'/> when the UA receives
          an authentication challenge.
        </t>
      </section>

      <section anchor='configuration.data.items.username' title="Username">
        <t>
          The username is used to populate the username parameter in the SIP
          Proxy-Authorization header as specified in <xref target='RFC3261'/> when the UA receives
          an authentication challenge.
        </t>

      </section>
      <section anchor='configuration.data.items.digest' title="Digest">
        <t>
          The digest is a string containing the digest of the username, realm and
          password as specified in <xref target='RFC2617'/> and is used to generate a response to
          an authentication challenge as specified in <xref target='RFC3261'/>.
        </t>
      </section>
      <section anchor='configuration.data.items.outboundproxy' title="OutboundProxy">
        <t>
          The OutboundProxy if defined contains the default outbound proxy through
          which SIP requests, not explicitly routed, are routed as specified in
          <xref target='RFC3261'/>.
        </t>
      </section>
    </section>

    <section anchor='reset.to.default' title="Reset User Agent to Default Configuration">

      <t>
        The earlier sections of this document define methods by which the UA can be
        automatically provisioned.  Some User Agents allow certain user specific settings
        (e.g. Contact Directory, specialized ring-tones etc.) to be set by a user, and possibly
        stored locally in the User Agent.  Since it may be necessary to later re-assign a UA,
        designers of configuration data formats may want to provide for explicit controls for
        any such locally configured settings, including the ability to explicitly delete them
        to return the UA to a completely unconfigured state.
      </t>
    </section>
  </section>

  <section title='IANA Considerations'>

    <t>
      This document registers the following U-NAPTR application service tag in the
      registry defined by <xref target='RFC3958'/> "Domain-Based Application Service
      Location Using SRV RRs and the Dynamic Delegation Discovery Service (DDDS)": 
    </t>

    <texttable>
      <ttcol align='left'/><ttcol align='left'/>
      <c>Application Service Tag</c><c>SFUA.CFG</c>
    </texttable>

    <t>
      This tag is used to obtain the base URL of the Configuration Service from the DNS
      name of a SIP domain as specified in <xref target='configservice.url.base'/>, "<xref
      target='configservice.url.base' format='title'/>".
    </t>

  </section>

  <section title='Security Considerations'>

    <t>
      Initial discovery of the Configuration Service Domain Name relies on a number of
      operations that are normally unsecured: a DHCP response could be provided by an
      attacker to replace the values of any of the IP Network Parameters (<xref
      target='network.discovery.auto'/>, "<xref target='network.discovery.auto'
      format='title'/>") including the Local Network Domain which is the default choice
      for the Configuration Service Domain Name.  Confirmation by the human
      user of the Configuration Service Domain Name, especially when it differs from a
      previously used value, could be used to mitigate this (perhaps unintentional)
      potential reconfiguration.  Note that previously loaded configuration MAY constrain
      which parts of the discovery and location procedures are used: for example, the
      Configuration Service Domain Name might be fixed so that it cannot be modified by
      discovery. 
    </t>
    <t>
      The connection to the Configuration Service is made over TLS.  As the TLS server,
      the CS always provides a server certificate during the TLS handshake; if possible,
      the UA should validate that certificate and confirm that it contains as a subject
      the Configuration Service Domain Name or at least the host name from the
      Configuration Service Base Url.  While it may not be possible to have the
      information needed to perform a full validation of the CS server certificate prior
      to the first configuration (for example, the UA may not have a current CA
      certificate for the CA that signs the CS server certificate), implementors are
      advised to provide for including that information in configuration data so that it
      can be used for subsequent reconfigurations; this narrows the window of
      vulnerability to the first configuration attempt.   
    </t>
    <t>
      To secure initial configuration attempts, the CS can deny requests from unknown
      devices and/or could implement other measures such as restricting the time window
      during which it will accept an initial configuration request from a given device. A
      more secure approach would be to provide the user with a password, perhaps a
      one-time password valid only for the initial access.  In high security environments,
      the Configuration Service could require that the User Agent provide a client
      certificate for authentication in the TLS connection for configuration data
      requests.  This would necessitate some prior manual configuration of the User Agent,
      and possibly the Configuration Service, and that configuration should also include
      sufficient information for the UA to fully validate the CS certificate.
    </t>
    <t>
      The values of some or all of the request parameters sent by the UA on the initial
      request for configuration data (see <xref target='configservice.url.addparams'/>,
      "<xref target='configservice.url.addparams' format='title'/>") may be sensitive
      information.  Since the configuration data request is made over a TLS connection,
      the confidentiality of that information is protected on the network.
      Configuration Service implementations should take all necessary measures to
      ensure that the request parameter data is appropriately protected within the CS
      itself. 
    </t>
    <t>
      The Configuration Change Request Subscription (<xref
      target='request.subscription'/>, "<xref target='request.subscription'
      format='title'/>") is established only after the configuration data has been loaded
      by the User Agent, so all security mechanisms available in SIP (including request
      digest authentication and the use of TLS) can be configured and required by either
      the CS or the UA.  Note that a configuration change notice does not actually provide
      any new configuration data, nor can it change where the UA sends a request for the
      new configuration data.  This means that an attacker cannot reconfigure a UA by
      subverting only the change notice subscription; the most the attacker can do is
      trigger checks for new data.  In order to actually modify the configuration data
      itself, the attacker must subvert the CS or the steps leading to the CS discovery
      (subject to the checks described above).
    </t>

  </section>

  <section anchor='members' title="Acknowledgements">
    
    <t>
      Contributing Members of the SIP Forum User Agent Configuration Working Group

    <list style='empty'>
      <t>
        Francois Audet, Nortel Networks Inc.
      </t>
      <t>
        Eric Burger, SIP Forum
      </t>
      <t>
        Sumanth Channabasappa, Cable Television Laboratories, Inc. (CableLabs)
      </t>
      <t>
        Martin Dolly, AT&amp;T Labs
      </t>
      <t>
        John Elwell, Siemens Enterprise Communications
      </t>
      <t>
        Marek Dutkiewicz, Polycom Inc.
      </t>
      <t>
        Andy Hutton, Siemens Enterprise Communications
      </t>
      <t>
        Lincoln Lavoie, University of New Hampshire
      </t>
      <t>
        Scott Lawrence, Avaya Inc.
      </t>
      <t>
        Paul Mossman, Avaya Inc.
      </t>
      <t>
        Michael Procter, VoIP.co.uk
      </t>
      <t>
        Marc Robins, SIP Forum
      </t>
      <t>
        Henning Schulzrinne, Columbia University
      </t>
      <t>
        Rifaat Shekh-Yusef, Avaya Inc.
      </t>
      <t>
        Robert Sparks, Tekelec
      </t>
      <t>
        Simo Veikkolainen, Nokia
      </t>
    </list>
    </t>

    <t>
      The Editor would like to also acknowledge valuable contributions by Leslie Daigle and
      Margaret Wasserman.
    </t>

  </section>

  </middle>

  <back>
    <references title="Normative References">

      <reference anchor='RFC1034'>
        <front>
          <title abbrev='Domain Concepts and Facilities'>Domain names - concepts and facilities</title>
          <author initials='P.' surname='Mockapetris' fullname='P. Mockapetris'>
          <organization>Information Sciences Institute (ISI)</organization></author>
        <date year='1987' day='1' month='November' /></front>

        <seriesInfo name='STD' value='13' />
        <seriesInfo name='RFC' value='1034' />
        <format type='TXT' octets='129180' target='ftp://ftp.isi.edu/in-notes/rfc1034.txt' />
      </reference>

      <reference anchor='RFC2119'>
        <front>
          <title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
          <author initials='S.' surname='Bradner' fullname='Scott Bradner'>
            <organization>Harvard University</organization>
            <address>
              <postal>
                <street>1350 Mass. Ave.</street>
                <street>Cambridge</street>
              <street>MA 02138</street></postal>
              <phone>- +1 617 495 3864</phone>
          <email>sob@harvard.edu</email></address></author>
          <date year='1997' month='March' />
          <area>General</area>
          <keyword>keyword</keyword>
          <abstract>
            <t>
              In many standards track documents several words are used to signify
              the requirements in the specification.  These words are often
              capitalized.  This document defines these words as they should be
              interpreted in IETF documents.  Authors who follow these guidelines
              should incorporate this phrase near the beginning of their document:

              <list>
                <t>
                  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
                  NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
                  "OPTIONAL" in this document are to be interpreted as described in
                  RFC 2119.
            </t></list></t>
            <t>
              Note that the force of these words is modified by the requirement
              level of the document in which they are used.
        </t></abstract></front>

        <seriesInfo name='BCP' value='14' />
        <seriesInfo name='RFC' value='2119' />
        <format type='TXT' octets='4723' target='ftp://ftp.isi.edu/in-notes/rfc2119.txt' />
        <format type='HTML' octets='17491' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
        <format type='XML' octets='5777' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
      </reference>

      <reference anchor='RFC2131'>
        <front>
          <title abbrev='DHCP'>Dynamic Host Configuration Protocol</title>
          <author initials='R.' surname='Droms' fullname='Ralph Droms'>
            <organization>Computer Science Department</organization>
            <address>
              <postal>
                <street>323 Dana Engineering</street>
                <street>Bucknell University</street>
                <street>Lewisburg</street>
              <street>PA 17837</street></postal>
              <phone>(717) 524-1145</phone>
          <email>droms@bucknell.edu</email></address></author>
          <date year='1997' month='March' />
          <area>Internet</area>
          <keyword>DHCP</keyword>
          <keyword>configuration</keyword>
          <keyword>dynamic host configuration protocol</keyword>
          <keyword>host</keyword>
          <abstract>
            <t>
              The Dynamic Host Configuration Protocol (DHCP) provides a framework
              for passing configuration information to hosts on a TCPIP network.
              DHCP is based on the Bootstrap Protocol (BOOTP) , adding the
              capability of automatic allocation of reusable network addresses and
              additional configuration options .  DHCP captures the behavior of
              BOOTP relay agents [7, 21], and DHCP participants can interoperate
              with BOOTP participants .
        </t></abstract></front>

        <seriesInfo name='RFC' value='2131' />
        <format type='TXT' octets='113738' target='ftp://ftp.isi.edu/in-notes/rfc2131.txt' />
        <format type='HTML' octets='134047' target='http://xml.resource.org/public/rfc/html/rfc2131.html' />
        <format type='XML' octets='117914' target='http://xml.resource.org/public/rfc/xml/rfc2131.xml' />
      </reference>

      <reference anchor='RFC2132'>
        <front>
          <title abbrev='DHCP Options'>DHCP Options and BOOTP Vendor Extensions</title>
          <author initials='S.' surname='Alexander' fullname='Steve Alexander'>
            <organization>Silicon Graphics, Inc.</organization>
            <address>
              <postal>
                <street>2011 N. Shoreline Boulevard</street>
                <street>Mailstop 510</street>
                <street>Mountain View</street>
              <street>CA 94043-1389</street></postal>
              <phone>(415) 933-6172</phone>
          <email>sca@engr.sgi.com</email></address></author>
          <author initials='R.' surname='Droms' fullname='Ralph Droms'>
            <organization>Bucknell University</organization>
            <address>
              <postal>
                <street>Lewisburg</street>
              <street>PA 17837</street></postal>
              <phone>(717) 524-1145</phone>
          <email>droms@bucknell.edu</email></address></author>
          <date year='1997' month='March' />
          <keyword>bootstrap protocol</keyword>
          <keyword>dynamic host configuration protocol</keyword>
          <abstract>
            <t>
              The Dynamic Host Configuration Protocol (DHCP)  provides a
              framework for passing configuration information to hosts on a TCP/IP
              network.  Configuration parameters and other control information are
              carried in tagged data items that are stored in the &apos;options&apos; field
              of the DHCP message.  The data items themselves are also called
              &quot;options.&quot;
            </t>
            <t>
              This document specifies the current set of DHCP options.  Future
              options will be specified in separate RFCs.  The current list of
              valid options is also available in ftp://ftp.isi.edu/in-
              notes/iana/assignments .
            </t>
            <t>
              All of the vendor information extensions defined in RFC 1497  may
              be used as DHCP options.  The definitions given in RFC 1497 are
              included in this document, which supersedes RFC 1497.  All of the
              DHCP options defined in this document, except for those specific to
              DHCP as defined in section 9, may be used as BOOTP vendor information
              extensions.
        </t></abstract></front>

        <seriesInfo name='RFC' value='2132' />
        <format type='TXT' octets='63670' target='ftp://ftp.isi.edu/in-notes/rfc2132.txt' />
        <format type='HTML' octets='94976' target='http://xml.resource.org/public/rfc/html/rfc2132.html' />
        <format type='XML' octets='74682' target='http://xml.resource.org/public/rfc/xml/rfc2132.xml' />
      </reference>

      <!--
      <reference anchor='RFC2396'>
        <front>
          <title abbrev='URI Generic Syntax'>Uniform Resource Identifiers (URI): Generic Syntax</title>
          <author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
            <organization abbrev='MIT/LCS'>World Wide Web Consortium</organization>
            <address>
              <postal>
                <street>MIT Laboratory for Computer Science, NE43-356</street>
                <street>545 Technology Square</street>
                <city>Cambridge</city>
                <region>MA</region>
              <code>02139</code></postal>
              <facsimile>+1(617)258-8682</facsimile>
          <email>timbl@w3.org</email></address></author>
          <author initials='R.T.' surname='Fielding' fullname='Roy T. Fielding'>
            <organization abbrev='U.C. Irvine'>Department of Information and Computer Science</organization>
            <address>
              <postal>
                <street>University of California, Irvine</street>
                <city>Irvine</city>
                <region>CA</region>
              <code>92697-3425</code></postal>
              <facsimile>+1(949)824-1715</facsimile>
          <email>fielding@ics.uci.edu</email></address></author>
          <author initials='L.' surname='Masinter' fullname='Larry Masinter'>
            <organization abbrev='Xerox Corporation'>Xerox PARC</organization>
            <address>
              <postal>
                <street>3333 Coyote Hill Road</street>
                <city>Palo Alto</city>
                <region>CA</region>
              <code>94034</code></postal>
              <facsimile>+1(415)812-4333</facsimile>
          <email>masinter@parc.xerox.com</email></address></author>
          <date year='1998' month='August' />
          <area>Applications</area>
          <keyword>uniform resource</keyword>
          <keyword>URI</keyword>
          <abstract>
            <t>
              A Uniform Resource Identifier (URI) is a compact string of characters
              for identifying an abstract or physical resource.  This document
              defines the generic syntax of URI, including both absolute and
              relative forms, and guidelines for their use; it revises and replaces
              the generic definitions in RFC 1738 and RFC 1808.
            </t>
            <t>
              This document defines a grammar that is a superset of all valid URI,
              such that an implementation can parse the common components of a URI
              reference without knowing the scheme-specific requirements of every
              possible identifier type.  This document does not define a generative
              grammar for URI; that task will be performed by the individual
              specifications of each URI scheme.
          </t></abstract>
          <note title='IESG Note'>
            <t>
              This paper describes a "superset" of operations that can be applied
              to URI.  It consists of both a grammar and a description of basic
              functionality for URI.  To understand what is a valid URI, both the
              grammar and the associated description have to be studied.  Some of
              the functionality described is not applicable to all URI schemes, and
              some operations are only possible when certain media types are
              retrieved using the URI, regardless of the scheme used.
        </t></note></front>

        <seriesInfo name='RFC' value='2396' />
        <format type='TXT' octets='83639' target='ftp://ftp.isi.edu/in-notes/rfc2396.txt' />
        <format type='HTML' octets='130223' target='http://xml.resource.org/public/rfc/html/rfc2396.html' />
        <format type='XML' octets='104983' target='http://xml.resource.org/public/rfc/xml/rfc2396.xml' />
      </reference>
      -->

      <reference anchor='RFC2616'>
        <front>
          <title abbrev='HTTP/1.1'>Hypertext Transfer Protocol -- HTTP/1.1</title>
          <author initials='R.' surname='Fielding' fullname='Roy T. Fielding'>
            <organization abbrev='UC Irvine'>Department of Information and Computer Science</organization>
            <address>
              <postal>
                <street>University of California, Irvine</street>
                <city>Irvine</city>
                <region>CA</region>
              <code>92697-3425</code></postal>
              <facsimile>+1(949)824-1715</facsimile>
          <email>fielding@ics.uci.edu</email></address></author>
          <author initials='J.' surname='Gettys' fullname='James Gettys'>
            <organization abbrev='Compaq/W3C'>World Wide Web Consortium</organization>
            <address>
              <postal>
                <street>MIT Laboratory for Computer Science, NE43-356</street>
                <street>545 Technology Square</street>
                <city>Cambridge</city>
                <region>MA</region>
              <code>02139</code></postal>
              <facsimile>+1(617)258-8682</facsimile>
          <email>jg@w3.org</email></address></author>
          <author initials='J.' surname='Mogul' fullname='Jeffrey C. Mogul'>
            <organization abbrev='Compaq'>Compaq Computer Corporation</organization>
            <address>
              <postal>
                <street>Western Research Laboratory</street>
                <street>250 University Avenue</street>
                <city>Palo Alto</city>
                <region>CA</region>
              <code>94305</code></postal>
          <email>mogul@wrl.dec.com</email></address></author>
          <author initials='H.' surname='Frystyk' fullname='Henrik Frystyk Nielsen'>
            <organization abbrev='W3C/MIT'>World Wide Web Consortium</organization>
            <address>
              <postal>
                <street>MIT Laboratory for Computer Science, NE43-356</street>
                <street>545 Technology Square</street>
                <city>Cambridge</city>
                <region>MA</region>
              <code>02139</code></postal>
              <facsimile>+1(617)258-8682</facsimile>
          <email>frystyk@w3.org</email></address></author>
          <author initials='L.' surname='Masinter' fullname='Larry Masinter'>
            <organization abbrev='Xerox'>Xerox Corporation</organization>
            <address>
              <postal>
                <street>MIT Laboratory for Computer Science, NE43-356</street>
                <street>3333 Coyote Hill Road</street>
                <city>Palo Alto</city>
                <region>CA</region>
              <code>94034</code></postal>
          <email>masinter@parc.xerox.com</email></address></author>
          <author initials='P.' surname='Leach' fullname='Paul J. Leach'>
            <organization abbrev='Microsoft'>Microsoft Corporation</organization>
            <address>
              <postal>
                <street>1 Microsoft Way</street>
                <city>Redmond</city>
                <region>WA</region>
              <code>98052</code></postal>
          <email>paulle@microsoft.com</email></address></author>
          <author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
            <organization abbrev='W3C/MIT'>World Wide Web Consortium</organization>
            <address>
              <postal>
                <street>MIT Laboratory for Computer Science, NE43-356</street>
                <street>545 Technology Square</street>
                <city>Cambridge</city>
                <region>MA</region>
              <code>02139</code></postal>
              <facsimile>+1(617)258-8682</facsimile>
          <email>timbl@w3.org</email></address></author>
          <date year='1999' month='June' />
          <abstract>
            <t>
              The Hypertext Transfer Protocol (HTTP) is an application-level
              protocol for distributed, collaborative, hypermedia information
              systems. It is a generic, stateless, protocol which can be used for
              many tasks beyond its use for hypertext, such as name servers and
              distributed object management systems, through extension of its
              request methods, error codes and headers . A feature of HTTP is
              the typing and negotiation of data representation, allowing systems
              to be built independently of the data being transferred.
            </t>
            <t>
              HTTP has been in use by the World-Wide Web global information
              initiative since 1990. This specification defines the protocol
              referred to as "HTTP/1.1", and is an update to RFC 2068 .
            </t>
          </abstract>
        </front>

        <seriesInfo name='RFC' value='2616' />
        <format type='TXT' octets='422317' target='ftp://ftp.isi.edu/in-notes/rfc2616.txt' />
        <format type='PS' octets='5529857' target='ftp://ftp.isi.edu/in-notes/rfc2616.ps' />
        <format type='PDF' octets='550558' target='ftp://ftp.isi.edu/in-notes/rfc2616.pdf' />
        <format type='HTML' octets='636125' target='http://xml.resource.org/public/rfc/html/rfc2616.html' />
        <format type='XML' octets='493420' target='http://xml.resource.org/public/rfc/xml/rfc2616.xml' />
      </reference>

      <reference anchor='RFC2617'>
        <front>
          <title abbrev='HTTP Authentication'>HTTP Authentication: Basic and Digest Access Authentication</title>
          <author initials='J.' surname='Franks' fullname='John Franks'>
            <organization>Northwestern University, Department of Mathematics</organization>
            <address>
              <postal>
                <street>Northwestern University</street>
                <city>Evanston</city>
                <region>IL</region>
                <code>60208-2730</code>
              <country>USA</country></postal>
          <email>john@math.nwu.edu</email></address></author>
          <author initials='P.M.' surname='Hallam-Baker' fullname='Phillip M. Hallam-Baker'>
            <organization>Verisign Inc.</organization>
            <address>
              <postal>
                <street>301 Edgewater Place</street>
                <street>Suite 210</street>
                <city>Wakefield</city>
                <region>MA</region>
                <code>01880</code>
              <country>USA</country></postal>
          <email>pbaker@verisign.com</email></address></author>
          <author initials='J.L.' surname='Hostetler' fullname='Jeffery L. Hostetler'>
            <organization>AbiSource, Inc.</organization>
            <address>
              <postal>
                <street>6 Dunlap Court</street>
                <city>Savoy</city>
                <region>IL</region>
                <code>61874</code>
              <country>USA</country></postal>
          <email>jeff@AbiSource.com</email></address></author>
          <author initials='S.D.' surname='Lawrence' fullname='Scott D. Lawrence'>
            <organization>Agranat Systems, Inc.</organization>
            <address>
              <postal>
                <street>5 Clocktower Place</street>
                <street>Suite 400</street>
                <city>Maynard</city>
                <region>MA</region>
                <code>01754</code>
              <country>USA</country></postal>
          <email>lawrence@agranat.com</email></address></author>
          <author initials='P.J.' surname='Leach' fullname='Paul J. Leach'>
            <organization>Microsoft Corporation</organization>
            <address>
              <postal>
                <street>1 Microsoft Way</street>
                <city>Redmond</city>
                <region>WA</region>
                <code>98052</code>
              <country>USA</country></postal>
          <email>paulle@microsoft.com</email></address></author>
          <author initials='A.' surname='Luotonen' fullname='Ari Luotonen'>
            <organization>Netscape Communications Corporation</organization>
            <address>
              <postal>
                <street>501 East Middlefield Road</street>
                <city>Mountain View</city>
                <region>CA</region>
                <code>94043</code>
          <country>USA</country></postal></address></author>
          <author initials='L.' surname='Stewart' fullname='Lawrence C. Stewart'>
            <organization>Open Market, Inc.</organization>
            <address>
              <postal>
                <street>215 First Street</street>
                <city>Cambridge</city>
                <region>MA</region>
                <code>02142</code>
              <country>USA</country></postal>
          <email>stewart@OpenMarket.com</email></address></author>
          <date year='1999' month='June' />
          <abstract>
            <t>
              "HTTP/1.0", includes the specification for a Basic Access
              Authentication scheme. This scheme is not considered to be a secure
              method of user authentication (unless used in conjunction with some
              external secure system such as SSL ), as the user name and
              password are passed over the network as cleartext.
            </t>
            <t>
              This document also provides the specification for HTTP's
              authentication framework, the original Basic authentication scheme
              and a scheme based on cryptographic hashes, referred to as "Digest
              Access Authentication".  It is therefore also intended to serve as a
              replacement for RFC 2069 .  Some optional elements specified by
              RFC 2069 have been removed from this specification due to problems
              found since its publication; other new elements have been added for
              compatibility, those new elements have been made optional, but are
              strongly recommended.
            </t>
            <t>
              Like Basic, Digest access authentication verifies that both parties
              to a communication know a shared secret (a password); unlike Basic,
              this verification can be done without sending the password in the
              clear, which is Basic's biggest weakness. As with most other
              authentication protocols, the greatest sources of risks are usually
              found not in the core protocol itself but in policies and procedures
              surrounding its use.
            </t>
          </abstract>
        </front>

        <seriesInfo name='RFC' value='2617' />
        <format type='TXT' octets='77638' target='ftp://ftp.isi.edu/in-notes/rfc2617.txt' />
        <format type='HTML' octets='116625' target='http://xml.resource.org/public/rfc/html/rfc2617.html' />
        <format type='XML' octets='88198' target='http://xml.resource.org/public/rfc/xml/rfc2617.xml' />
      </reference>

      <reference anchor='RFC3261'>

        <front>
          <title>SIP: Session Initiation Protocol</title>
          <author initials='J.' surname='Rosenberg' fullname='J. Rosenberg'>
          <organization /></author>
          <author initials='H.' surname='Schulzrinne' fullname='H. Schulzrinne'>
          <organization /></author>
          <author initials='G.' surname='Camarillo' fullname='G. Camarillo'>
          <organization /></author>
          <author initials='A.' surname='Johnston' fullname='A. Johnston'>
          <organization /></author>
          <author initials='J.' surname='Peterson' fullname='J. Peterson'>
          <organization /></author>
          <author initials='R.' surname='Sparks' fullname='R. Sparks'>
          <organization /></author>
          <author initials='M.' surname='Handley' fullname='M. Handley'>
          <organization /></author>
          <author initials='E.' surname='Schooler' fullname='E. Schooler'>
          <organization /></author>
          <date year='2002' month='June' />
          <abstract>
        <t>This document describes Session Initiation Protocol (SIP), an application-layer control (signaling) protocol for creating, modifying, and terminating sessions with one or more participants.  These sessions include Internet telephone calls, multimedia distribution, and multimedia conferences. [STANDARDS TRACK]</t></abstract></front>

        <seriesInfo name='RFC' value='3261' />
        <format type='TXT' octets='647976' target='ftp://ftp.rfc-editor.org/in-notes/rfc3261.txt' />
      </reference>

      <reference anchor='RFC3265'>
        <front>
          <title>Session Initiation Protocol (SIP)-Specific Event Notification</title>
          <author initials='A.B.' surname='Roach' fullname='A.B. Roach'>
          <organization /></author>
          <date year='2002' month='June' />
          <abstract>
        <t>This document describes an extension to the Session Initiation Protocol (SIP).  The purpose of this extension is to provide an extensible framework by which SIP nodes can request notification from remote nodes indicating that certain events have occurred. [STANDARDS TRACK]</t></abstract></front>

        <seriesInfo name='RFC' value='3265' />
        <format type='TXT' octets='89005' target='ftp://ftp.rfc-editor.org/in-notes/rfc3265.txt' />
      </reference>

      <reference anchor='RFC3315'>
        <front>
          <title>Dynamic Host Configuration Protocol for IPv6 (DHCPv6)</title>
          <author initials='R.' surname='Droms' fullname='R. Droms'>
          <organization /></author>
          <author initials='J.' surname='Bound' fullname='J. Bound'>
          <organization /></author>
          <author initials='B.' surname='Volz' fullname='B. Volz'>
          <organization /></author>
          <author initials='T.' surname='Lemon' fullname='T. Lemon'>
          <organization /></author>
          <author initials='C.' surname='Perkins' fullname='C. Perkins'>
          <organization /></author>
          <author initials='M.' surname='Carney' fullname='M. Carney'>
          <organization /></author>
        <date year='2003' month='July' /></front>

        <seriesInfo name='RFC' value='3315' />
        <format type='TXT' octets='231402' target='ftp://ftp.rfc-editor.org/in-notes/rfc3315.txt' />
      </reference>


      <reference anchor='RFC3319'>
        <front>
          <title>Dynamic Host Configuration Protocol (DHCPv6) Options for Session Initiation Protocol (SIP) Servers</title>
          <author initials='H.' surname='Schulzrinne' fullname='H. Schulzrinne'>
          <organization /></author>
          <author initials='B.' surname='Volz' fullname='B. Volz'>
          <organization /></author>
        <date year='2003' month='July' /></front>

        <seriesInfo name='RFC' value='3319' />
        <format type='TXT' octets='14444' target='ftp://ftp.rfc-editor.org/in-notes/rfc3319.txt' />
      </reference>

      <reference anchor='RFC3546'>
        <front>
          <title>Transport Layer Security (TLS) Extensions</title>
          <author initials='S.' surname='Blake-Wilson' fullname='S. Blake-Wilson'>
          <organization /></author>
          <author initials='M.' surname='Nystrom' fullname='M. Nystrom'>
          <organization /></author>
          <author initials='D.' surname='Hopwood' fullname='D. Hopwood'>
          <organization /></author>
          <author initials='J.' surname='Mikkelsen' fullname='J. Mikkelsen'>
          <organization /></author>
          <author initials='T.' surname='Wright' fullname='T. Wright'>
          <organization /></author>
          <date year='2003' month='June' />
          <abstract>
        <t>This document describes extensions that may be used to add functionality to Transport Layer Security (TLS).  It provides both generic extension mechanisms for the TLS handshake client and server hellos, and specific extensions using these generic mechanisms.  The extensions may be used by TLS clients and servers.  The extensions are backwards compatible - communication is possible between TLS 1.0 clients that support the extensions and TLS 1.0 servers that do not support the extensions, and vice versa. [STANDARDS TRACK]</t></abstract></front>

        <seriesInfo name='RFC' value='3546' />
        <format type='TXT' octets='63437' target='ftp://ftp.rfc-editor.org/in-notes/rfc3546.txt' />
      </reference>

      <reference anchor='RFC3958'>
        <front>
          <title>Domain-Based Application Service Location Using SRV RRs and the Dynamic Delegation Discovery Service (DDDS)</title>
          <author initials='L.' surname='Daigle' fullname='L. Daigle'>
          <organization /></author>
          <author initials='A.' surname='Newton' fullname='A. Newton'>
          <organization /></author>
          <date year='2005' month='January' />
          <abstract>
        <t>This memo defines a generalized mechanism for application service naming that allows service location without relying on rigid domain naming conventions (so-called name hacks).  The proposal defines a Dynamic Delegation Discovery System (DDDS) Application to map domain name, application service name, and application protocol dynamically to target server and port. [STANDARDS TRACK]</t></abstract></front>

        <seriesInfo name='RFC' value='3958' />
        <format type='TXT' octets='54568' target='ftp://ftp.rfc-editor.org/in-notes/rfc3958.txt' />
      </reference>

      <reference anchor='RFC3986'>
        <front>
          <title abbrev='URI Generic Syntax'>Uniform Resource Identifier (URI): Generic Syntax</title>
          <author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
            <organization abbrev='W3C/MIT'>World Wide Web Consortium</organization>
            <address>
              <postal>
                <street>Massachusetts Institute of Technology</street>
                <street>77 Massachusetts Avenue</street>
                <city>Cambridge</city>
                <region>MA</region>
                <code>02139</code>
              <country>USA</country></postal>
              <phone>+1-617-253-5702</phone>
              <facsimile>+1-617-258-5999</facsimile>
              <email>timbl@w3.org</email>
          <uri>http://www.w3.org/People/Berners-Lee/</uri></address></author>
          <author initials='R.' surname='Fielding' fullname='Roy T. Fielding'>
            <organization abbrev='Day Software'>Day Software</organization>
            <address>
              <postal>
                <street>5251 California Ave., Suite 110</street>
                <city>Irvine</city>
                <region>CA</region>
                <code>92617</code>
              <country>USA</country></postal>
              <phone>+1-949-679-2960</phone>
              <facsimile>+1-949-679-2972</facsimile>
              <email>fielding@gbiv.com</email>
          <uri>http://roy.gbiv.com/</uri></address></author>
          <author initials='L.' surname='Masinter' fullname='Larry Masinter'>
            <organization abbrev='Adobe Systems'>Adobe Systems Incorporated</organization>
            <address>
              <postal>
                <street>345 Park Ave</street>
                <city>San Jose</city>
                <region>CA</region>
                <code>95110</code>
              <country>USA</country></postal>
              <phone>+1-408-536-3024</phone>
              <email>LMM@acm.org</email>
          <uri>http://larry.masinter.net/</uri></address></author>
          <date year='2005' month='January' />
          <area>Applications</area>
          <keyword>uniform resource identifier</keyword>
          <keyword>URI</keyword>
          <keyword>URL</keyword>
          <keyword>URN</keyword>
          <keyword>WWW</keyword>
          <keyword>resource</keyword>
          <abstract>
            <t>
              A Uniform Resource Identifier (URI) is a compact sequence of characters
              that identifies an abstract or physical resource.  This specification
              defines the generic URI syntax and a process for resolving URI references
              that might be in relative form, along with guidelines and security
              considerations for the use of URIs on the Internet.
              The URI syntax defines a grammar that is a superset of all valid URIs,
              allowing an implementation to parse the common components of a URI
              reference without knowing the scheme-specific requirements of every
              possible identifier.  This specification does not define a generative
              grammar for URIs; that task is performed by the individual
              specifications of each URI scheme.
        </t></abstract></front>

        <seriesInfo name='STD' value='66' />
        <seriesInfo name='RFC' value='3986' />
        <format type='TXT' octets='141811' target='ftp://ftp.isi.edu/in-notes/rfc3986.txt' />
        <format type='HTML' octets='213584' target='http://xml.resource.org/public/rfc/html/rfc3986.html' />
        <format type='XML' octets='163534' target='http://xml.resource.org/public/rfc/xml/rfc3986.xml' />
      </reference>

      <reference anchor='RFC4848'>
        <front>
          <title>Domain-Based Application Service Location Using URIs and the Dynamic Delegation Discovery Service (DDDS)</title>
          <author initials='L.' surname='Daigle' fullname='L. Daigle'>
          <organization /></author>
          <date year='2007' month='April' />
          <abstract>
        <t>The purpose of this document is to define a new, straightforward Dynamic Delegation Discovery Service (DDDS) application to allow mapping of domain names to URIs for particular application services and protocols.  Although defined as a new DDDS application, dubbed U-NAPTR, this is effectively an extension of the Straightforward NAPTR (S-NAPTR) DDDS Application. [STANDARDS TRACK]</t></abstract></front>

        <seriesInfo name='RFC' value='4848' />
        <format type='TXT' octets='19341' target='ftp://ftp.rfc-editor.org/in-notes/rfc4848.txt' />
      </reference>

      <reference anchor='RFC5626'>
        <front>
          <title>Managing Client-Initiated Connections in the Session Initiation Protocol (SIP)</title>
          <author initials='C.' surname='Jennings' fullname='C. Jennings'>
          <organization /></author>
          <author initials='R.' surname='Mahy' fullname='R. Mahy'>
          <organization /></author>
          <author initials='F.' surname='Audet' fullname='F. Audet'>
          <organization /></author>
          <date year='2009' month='October' />
          <abstract>
        <t>The Session Initiation Protocol (SIP) allows proxy servers to initiate TCP connections or to send asynchronous UDP datagrams to User Agents in order to deliver requests.  However, in a large number of real deployments, many practical considerations, such as the existence of firewalls and Network Address Translators (NATs) or the use of TLS with server-provided certificates, prevent servers from connecting to User Agents in this way.  This specification defines behaviors for User Agents, registrars, and proxy servers that allow requests to be delivered on existing connections established by the User Agent.  It also defines keep-alive behaviors needed to keep NAT bindings open and specifies the usage of multiple connections from the User Agent to its registrar. [STANDARDS TRACK]</t></abstract></front>

        <seriesInfo name='RFC' value='5626' />
        <format type='TXT' octets='116344' target='ftp://ftp.rfc-editor.org/in-notes/rfc5626.txt' />
      </reference>


      <reference anchor="draft-roach-sip-http-subscribe">
        <front>
          <title abbrev="SIP HTTP Subscriptions">A SIP Event Package for Subscribing to Changes to an HTTP Resource</title>

          <author initials="A. B." surname="Roach" fullname="Adam Roach">
            <organization>Tekelec</organization>
            <address>
              <postal>
                <street>17210 Campbell Rd.</street>
                <street>Suite 250</street>
                <city>Dallas</city> <region>TX</region> <code>75252</code>
                <country>US</country>
              </postal>
              <email>adam@nostrum.com</email>
            </address>
          </author>

          <date month="February" day="4" year="2010" />
          <area>Real Time Applications and Infrastructure</area>
          <workgroup>SIP WG</workgroup>

          <abstract>
            <t>
              The Session Initiation Protocol (SIP) is increasingly being
              used in systems that are tightly coupled with Hypertext
              Transport Protocol (HTTP) servers for a variety of
              reasons. In many of these cases, applications
              can benefit from being able to discover, in near-real-time,
              when a specific HTTP resource is created, changed, or
              deleted. This document proposes a mechanism, based on
              the SIP events framework, for doing so.
            </t>
          </abstract>
        </front>
        <format type='HTML' target='http://tools.ietf.org/html/draft-roach-sip-http-subscribe'/>
      </reference>

    <reference anchor="ANSI.TIA-1057-2006">
      <front>
        <title>
          Telecommunications IP Telephony Infrastructure Link Layer Discovery Protocol for Media Endpoint Devices
        </title>
      <author>
        <organization>American National Standards Institute</organization>
      </author>
      <date month='April' year='1993'/>
      </front>
    </reference>

    </references>

  </back>
</rfc>
