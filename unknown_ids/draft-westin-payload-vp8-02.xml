<?xml version="1.0"?>
  <rfc category="exp" docName="draft-westin-payload-vp8-02" ipr="trust200902">
    <?rfc symrefs="yes" ?>
    <front>
      <title abbrev="RTP Payload Format for VP8">
        Proposal for the IETF on "RTP Payload Format for VP8 Video"
      </title>
      <author initials="P.W." surname="Westin" fullname="Patrik Westin">
        <organization abbrev="Google"> 
            Google, Inc. 
        </organization>
        <address>
          <postal>
            <street>Kungsbron 2</street>
            <city>Stockholm</city>
            <region></region>
            <code>11122</code>
            <country>Sweden</country>
          </postal>
          <email>patrik.westin@gmail.com</email>
        </address>
      </author>
      <author initials="H.L." surname="Lundin"
          fullname="Henrik F Lundin">
        <organization abbrev="Google">
              Google, Inc.
        </organization>  
        <address>
          <postal>
            <street>Kungsbron 2</street>
            <city>Stockholm</city>
            <region></region>
            <code>11122</code>
            <country>Sweden</country>
          </postal>
          <email>hlundin@google.com</email>
        </address>
      </author>
      <author initials="M.G." surname="Glover"
          fullname="Michael Glover">
        <organization abbrev="Google">
              Google, Inc.
        </organization>  
      </author>
      <author initials="J.U." surname="Uberti"
          fullname="Justin Uberti">
        <organization abbrev="Google">
              Google, Inc.
        </organization>  
      </author>
      <author initials="F.G." surname="Galligan"
          fullname="Frank Galligan">
        <organization abbrev="Google">
              Google, Inc.
        </organization>  
      </author>
      <date month="March" year="2011" />
      <area>General</area>
      <workgroup>Network Working Group</workgroup>
      <keyword>RFC</keyword>
      <keyword>Request for Comments</keyword>
      <keyword>RTP</keyword>
      <keyword>VP8</keyword>
      <keyword>WebM</keyword>
      <abstract>
        <t> This memo describes an RTP payload format for the VP8 video codec. The payload format
        has wide applicability, as it supports applications from low bit-rate peer-to-peer usage,
        to high bit-rate video conferences.</t></abstract>
    </front>
    <middle>
      <section anchor="intro" title="Introduction"> 
        <t>
	  This memo describes an RTP payload specification applicable to the transmission of video
	  streams encoded using the VP8 video codec <xref target="1" />. The format described in
	  this document can be used both in peer-to-peer and video conferencing applications.
	</t><t>
	  The VP8 codec uses three different reference frames for interframe prediction: the
	  previous frame, the golden frame, and the altref frame. The payload specification in this
	  memo has elements that enable advanced use of the reference frames, e.g., for improved
	  loss robustness.
	</t><t>	  
	  Another property of the VP8 codec is that it applies data partitioning to the encoded data.
	  Thus, an encoded VP8 frame can be divided into two or more partitions, as described in "VP8
          Data Format and Decoding Guide"
          <xref target="1" />. The first partition (prediction or mode) contains prediction mode
          parameters and motion vectors for all macroblocks. The remaining partitions all contain the
          DCT/WHT coefficients for the residuals. The first partition is decodable without the
          remaining residual partitions. The subsequent partitions may be useful even if some part of
          the frame is lost. This memo allows the partitions to be sent in the same RTP packet. 
	  Nevertheless, it may be beneficial for decoder error-concealment to use separate packets for
	  the two partition types, even though it is not mandatory according to this specification.
	</t><t>	  
	  The format specification is described in
          <xref target="payloadFormat" />. <xref target="RPSIandSLI" /> describes a method 
          to acknowledge receipt of reference frames using RTCP techniques is described.
          Both these examples serve
          as motivation for two of the fields included in the payload format: the "1st partition
          size" and "PictureID" fields.
	</t>
      </section>

      <section anchor="conventions" title="Conventions, Definitions and Acronyms">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in RFC 2119 <xref target="2" />.</t>
      </section>
      
      <section anchor="mediaFormatBackground" title = "Media Format Background">
        <t>VP8 is based on decomposition of frames into square subblocks of pixels, prediction of 
        such subblocks using previously constructed blocks, and adjustment of such predictions (as
        well as synthesis of unpredicted blocks) using a discrete cosine transform (hereafter
        abbreviated as DCT). In one special case, however, VP8 uses a "Walsh-Hadamard" (hereafter
        abbreviated as WHT) transform instead of a DCT. An encoded VP8 frame is divided into two or
        more partitions, as described in <xref target="1" />. The first partition (prediction or
        mode) contains prediction mode parameters and motion vectors for all macroblocks. The
        remaining partitions all contain the DCT/WHT coefficients for the residuals.</t>
      </section>

      <section anchor="payloadFormat" title="Payload Format">
        <figure anchor="figureRTPHeader">
          <preamble>
             The general RTP payload format for VP8 is depicted below.</preamble>
          <artwork>
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |V=2|P|X|  CC   |M|     PT      |       sequence number         |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                           timestamp                           |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |           synchronization source (SSRC) identifier            |
  +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
  |            contributing source (CSRC) identifiers             |
  |                             ....                              |
  +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
  |            VP8 payload descriptor (integer #bytes)            |
  :                                                               :
  |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                               : VP8 payload header (3 octets) |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | VP8 pyld hdr  :                                               |
  +-+-+-+-+-+-+-+-+                                               |
  :                   Bytes 4..N of VP8 payload                   :
  |                                                               |
  |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                               :    OPTIONAL RTP padding       |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          </artwork>
          <postamble>
              The VP8 payload descriptor and VP8 payload header will be described in the sequel.
              OPTIONAL RTP padding MUST NOT be included unless the P bit is set.
          </postamble>
        </figure>
        <t>
          <list style="hanging">
          <t>
            Marker bit:  The marker bit indicates the last packet part of an frame.
            This enables an decoder to finish decoding the picture, where it otherwise may need
            to wait for the next packet to explicitly know that.</t>
          <t>
            Timestamp:  The RTP timestamp indicate the time when the frame was sampled at a 
            clock rate of 90KHz.</t>
          <t>
            Sequence number:  The sequence number are monotonically increasing
            and set as packets are sent.</t>
          <t>
            The remaining RTP header fields are used as specified in RFC 3550 <xref target="4" />.
            </t>
          </list>
        </t>
        <section anchor="VP8payloadDescriptor" title = "VP8 Payload Descriptor">
          <figure anchor="figureVP8payloadDescriptor">
            <preamble>
              The first bytes after the RTP header are the VP8 payload descriptor, with the
              following structure.</preamble>
            <artwork>
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | RSV |I|N|FI |B|         PictureID (integer #bytes)            |
  +-+-+-+-+-+-+-+-+                                               |
  :                                                               :
  |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |               : (VP8 data or VP8 payload header; byte aligned)|
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </artwork>
          </figure>
          <t>
            <list style="hanging">
            <t>
              RSV: Bits reserved for future use. MUST be set to zero and MUST be ignored by the
              receiver.</t>
            <t>
              I: PictureID present. When set to one, a PictureID is provided after the first byte
              of the payload descriptor. When set to zero, the PictureID is omitted, and the
              one-byte payload descriptor is immediately followed by the VP8 payload.</t>
            <t>
              N: Non-reference frame. When set to one, the frame can be discarded without
              affecting any other future or past frames.</t>
            <t>
              FI: Fragmentation information field. This field contains information about the
              fragmentation of VP8 payloads carried in the RTP packet. The four different values
              are listed below.
              <list style="symbols">
                <t>
                  00	The RTP packet contains no fragmented VP8 partitions. The payload is one or 
                  several complete partitions.</t>
                <t>
                  01	The RTP packet contains the first part of a fragmented partition. The 
                  fragment must be placed in its own RTP packet.</t>
                <t>
                  10	The RTP packet contains a fragment that is neither the first nor the last
                  part of a fragmented partition. The fragment must be placed in its own RTP
                  packet.</t>
                <t>
                  11	The RTP packet contains the last part of a fragmented partition. The fragment
                  must be placed in its own RTP packet.</t>
              </list></t>
            <t>
              B: Beginning VP8 frame. When set to 1 this signals that a new VP8 frame starts in
              this RTP packet.</t>
            <t>
              PictureID: Multiple of 8 bits. This is a running index of the frames. The field is
              present only if the I bit is equal to one. The most significant bit of each byte is
              an extension flag. The 7 following bits carry (parts of) the PictureID. If the
              extension flag is one, the PictureID continues in the next byte. If the extension
              flag is zero, the 7 remaining bits are the last (and least significant) bits in the
              PictureID. The sender may choose any number of bytes, smaller or equal to 9 bytes as
              the maximum PictureID. The PictureID SHALL start on a random number, and MUST wrap
              after reaching the maximum ID. Leading zero bytes MUST be supressed.</t>
            </list>
          </t>
        </section>
        
        <section anchor="VP8payloadHeader" title = "VP8 Payload Header">
          <figure anchor="figureVP8payloadHeader">
            <preamble>
              The first three bytes of an encoded VP8 frame are refered to as an "uncompressed data
              chunk" in <xref target="1" />, and co-serve as payload header in this RTP format. Note
              that the header is present only in packets which have the B bit equal to one in the 
              payload descriptor. Subsequent packets for the same frame do not carry the payload 
              header.
            </preamble>
            <artwork>
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |P| VER |H|         1st partition size          |               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               |
  |                                                               |
  :                   Bytes 4..N of VP8 payload                   :
  |                                                               |
  |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|
  |                               :    OPTIONAL RTP padding       |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </artwork>
          </figure>
          <t>
            <list style="hanging">
              <t>
                P: Inverse key frame flag. When set to 0 the current frame is a key frame. When set
                to 1 the current frame is an interframe. Defined in <xref target="1" /></t>
              <t> VER: A version number as defined in <xref target="1" />.</t>
              <t> H: Show frame bit as defined in <xref target="1" />.</t>
              <t> 
                1st partition size: 19 bits. A field containing the size of the first data
                partition in bytes, as defined in <xref target="1" />.</t>
            </list>
          </t>
        </section>
        
        <section title = "Aggregated and Fragmented Payloads">
          <t>
            An encoded VP8 frame can be divided into two or more partitions, as described in
            <xref target="intro" />. The fragmentation information described in
            <xref target="VP8payloadDescriptor" /> MUST be used to signal if any fragmentation
            is applied. Aggregation of encoded partitions is done without explicit signaling. 
            Partitions MUST be aggregated in decoding order. Two fragments from different partitions
            MUST not be agregated into the same packet. An aggregation MUST have exactly one
            payload descriptor. Aggregated partitions MUST represent parts of one and the same
            video frame. Consequently, an aggregated packet will have one or no payload header,
            depending on whether the aggregate contains the first partition of a frame or not,
            respectively. Note that the length of the first partition can always be obtained from
            the first partition size parameter in the VP8 payload header. Fragments of encoded
            partitions MUST NOT be aggregated.</t>
        </section>

        <section title = "Examples of VP8 RTP Stream">
          <t>A few examples of how the VP8 RTP payload can be used are included below.</t>
          <section title = "Key frame in a single RTP packet">
            <figure>
              <preamble>
                Marker bit = 1. I = 1. B = 1. PictureID = 17 = 0001001 binary. P = 0.
              </preamble>
              <artwork>
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                       RTP Header M=1                          |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |0 0 0 1 0 0 0 1:0 0 0 0 1 0 0 1|0: VER :1:       1st partition |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | size = L      |                                               |
  +-+-+-+-+-+-+-+-+                                               |
  |                                                               |
  :                Bytes 4..L of first VP8 partition              :
  |                                                               |
  |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                               |                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
  |                                                               |
  :                Remaining VP8 partitions                       :
  |                                                               |
  |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|
  |                               :    OPTIONAL RTP padding       |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              </artwork>
            </figure>
          </section>

          <section title = "VP8 interframe in a single RTP packet; no PictureID">
            <figure>
              <preamble>
                Marker bit = 1. I = 0. B = 1. P = 1.
              </preamble>
              <artwork>
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                       RTP Header M=1                          |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |0 0 0 0 0 0 0 1|1: VER :1:       1st partition size = L        |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                                                               |
  :                Bytes 4..L of first VP8 partition              :
  |                                                               |
  |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                               |                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
  |                                                               |
  :                Remaining VP8 partitions                       :
  |                                                               |
  |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|
  |                               :    OPTIONAL RTP padding       |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              </artwork>
            </figure>
          </section>
          <section title = "VP8 partitions in separate RTP packets">
            <figure>
              <preamble>
                First RTP packet; marker bit = 0. I = 1. B = 1. PictureID = 17.
              </preamble>
              <artwork>
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                       RTP Header M=0                          |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |0 0 0 1 0 0 0 1:0 0 0 0 1 0 0 1|1: VER :1:       1st partition |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | size = L      |                                               |
  +-+-+-+-+-+-+-+-+                                               |
  |                                                               |
  :                Bytes 4..L of first VP8 partition              :
  |                                                               |
  |                                                               |
  |                                                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              </artwork>
            </figure>
            <figure>
              <preamble>
                Second RTP packet; marker bit = 1. B = 0.
              </preamble>
              <artwork>
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                       RTP Header M=1                          |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |0 0 0 1 0 0 0 0:0 0 0 0 1 0 0 1|                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
  |                                                               |
  :                Remaining VP8 partitions                       :
  |                                                               |
  |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|
  |                               :    OPTIONAL RTP padding       |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              </artwork>
            </figure>
          </section>

          <section title = "VP8 frame fragmented across RTP packets">
            <figure>
              <preamble>
                First RTP packet; marker bit = 0. I = 1. FI = 00. B = 1.
              </preamble>
              <artwork>
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                       RTP Header M=0                          |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |0 0 0 1 0 0 0 1:0 0 0 0 1 0 0 1|1: VER :1:       1st partition |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | size = L      |                                               |
  +-+-+-+-+-+-+-+-+                                               |
  |                                                               |
  :                Bytes 4..L of first VP8 partition              :
  |                                                               |
  |                                                               |
  |                                                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              </artwork>
            </figure>
            <figure>
              <preamble>
                Second RTP packet; marker bit = 0. FI = 01. B = 0.
              </preamble>
              <artwork>
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                       RTP Header M=0                          |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |0 0 0 1 0 0 1 0:0 0 0 0 1 0 0 1|                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
  |                                                               |
  :          First fragment of second VP8 partition               :
  |                                                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              </artwork>
            </figure>
            <figure>
              <preamble>
                Third RTP packet; marker bit = 0. FI = 10. B = 0.
              </preamble>
              <artwork>
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                       RTP Header M=0                          |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |0 0 0 1 0 1 0 0:0 0 0 0 1 0 0 1|                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
  |                                                               |
  :          Middle fragment of second VP8 partition              :
  |                                                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              </artwork>
            </figure>
            <figure>
              <preamble>
                Last RTP packet; marker bit = 1. FI = 11. B = 0.
              </preamble>
              <artwork>
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                       RTP Header M=1                          |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |0 0 0 1 0 1 1 0:0 0 0 0 1 0 0 1|                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
  |                                                               |
  :          Last fragment of second VP8 partition                :
  |                                                               |
  |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|
  |                               :    OPTIONAL RTP padding       |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              </artwork>
            </figure>
          </section>

          <section title = "VP8 frame with long PictureID">
            <figure>
              <preamble>
                PictureID = 4711 = 01001001100111 binary (first 7 bits: 0100100, last 7 bits: 1100111).
              </preamble>
              <artwork>
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                       RTP Header M=1                          |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |0 0 0 1 0 0 0 1:1 0 1 0 0 1 0 0 0 1 1 0 0 1 1 1|1: VER :1: 1st |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  | partition size = L            |                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
  |                                                               |
  :                Bytes 4..N of first VP8 frame                  :
  |                                                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              </artwork>
            </figure>
          </section>
        </section>
      </section>
      
      <section anchor="RPSIandSLI" title = "Using VP8 with RPSI and SLI Feedback">
        <t>
          The VP8 payload descriptor defined in <xref target="VP8payloadDescriptor" /> above
          contains an optional PictureID parameter. This parameter is included mainly to enable
          use of reference picture selection index (RPSI) and slice loss indication (SLI), both
          defined in RFC 4585 <xref target="3" />.</t>
        <section anchor="RPSI" title = "RPSI">
          <t>
            The reference picture selection index is a payload-specific feedback message defined
            within the RTCP-based feedback format. The RPSI message is generated by a receiver
            and can be used in two ways. Either it can signal a preferred reference picture when a
            loss has been detected by the decoder -- preferably then a reference that the decoder
            knows is perfect -- or, it can be used as positive feedback information to acknowledge
            correct decoding of certain reference pictures. The positive feedback method is useful
            for VP8 used as unicast. The use of RPSI for VP8 is preferably combined with a
            special update pattern of the codec's two special reference frames -- the golden frame
            and the altref frame -- in which they are updated in an alternating leapfrog fashion.
            When a receiver has received and correctly decoded a golden or altref frame, and that
            frame had a PictureID in the payload descriptor, the receiver can acknowledge this
            simply by sending an RPSI message back to the sender. The message body (i.e., the
            "native RPSI bit string" in RFC 4585 <xref target="3" />) is simply the PictureID of the
            received frame.</t>
        </section>
        <section anchor="SLI" title = "SLI">
          <t>
            The slice loss indication is another payload-specific feedback message defined within
            the RTCP-based feedback format. The SLI message is generated by the receiver when a
            loss or corruption is detected in a frame. The format of the SLI message is as follows
            <xref target="3" />:</t>
          <figure anchor="figureSLIHeader">
            <artwork>
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |            First        |        Number           | PictureID |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </artwork>
          </figure>
          <t>
            Here, First is the macroblock address (in scan order) of the first lost block and
            Number is the number of lost blocks. PictureID is the six least significant bits of
            the codec-specific picture identifier in which the loss or corruption has occurred.
            For VP8, this codec-specific identifier is naturally the PictureID of the current
            frame, as read from the payload descriptor. If the payload descriptor of the current
            frame does not have a PictureID, the receiver MAY send the last received PictureID+1
            in the SLI message. The receiver MAY set the First parameter to 0, and the Number
            parameter to the total number of macroblocks per frame, even though only parts of
            the frame is corrupted. When the sender receives an SLI message, it can make use of
            the knowledge from the latest received RPSI message. Knowing that the last golden or
            altref frame was successfully received, it can encode the next frame with reference
            to that established reference.          
          </t>
        </section>
        <section title = "Example">
          <t>
            The use of RSPI and SLI is best illustrated in an example. In this example, the encoder
            may not update the altref frame until the last sent golden frame has been acknowledged
            with an RPSI message. If an update is not received within some time, a new golden frame
            update is sent instead. Once the new golden frame is established and acknowledge, the
            same rule applies when updating the altref frame.</t>
          <figure>
            <artwork>
  Event  Sender              Receiver                    Established
                                                         reference
  +----+--------------------+--------------------------+------------+
  1000  Send golden frame
         PictureID = 0
                             Receive and decode 
                             golden frame
                           
  1001                       Send RPSI(0)                
  1002   Receive RPSI(0)                                 golden
                           
  ...    (sending regular frames)
  
  1100  Send altref frame
        PictureID = 100
                             Altref corrupted or lost    golden

  1101                       Send SLI(100)               golden
  1102  Receive SLI(100)
  
  1103  Send frame with 
        reference to golden
                             Receive and decode frame
                             (decoder state restored)    golden

  ...   (sending regular frames)
  
  1200  Send altref frame
        PictureID = 200
                             Receive and decode
                             altref frame                golden
  
  1201                       Send RPSI(200)             
  1202  Receive RPSI(200)                                altref
  
  ...  (sending regular frames)
  
  1300  Send golden frame
        PictureID = 300
                             Receive and decode
                             golden frame                altref
  
  1301                       Send RPSI(300)              altref
  1302  RPSI lost
  
  1400  Send golden frame
        PictureID = 400
                              Receive and decode
                              golden frame               altref
  
  1401                        Send RPSI(400)             
  1402  Receive RPSI(400)                                golden
  +----+--------------------+--------------------------+------------+
            </artwork>
          </figure>
          <t>
            Note that the scheme is robust to loss of the feedback messages. If the RPSI is lost,
            the sender will try to update the golden (or altref) again after a while, without
            releasing the established reference. Also, if an SLI is lost, the receiver can keep
            sending SLI messages at any interval, as long as the picture is corrupted.</t>
        </section>
      </section>
      
      <section anchor="payloadFormatParameters" title = "Payload Format Parameters">
        <t>
          This section specifies the parameters that MAY be used to select optional features of
          the payload format and certain features of the bitstream.</t>
        <section anchor="restrictionsOnUsage" title = "Restrictions on usage">
          <t>
            This media type depends on RTP framing, and hence is only defined for transfer via RTP
            [RFC3550] <xref target="4" />.Transport within other framing protocols is not defined at
            this time.</t>
        </section>

        <section anchor="mediaTypeRegistration" title = "Media Type Registration">
	  <t>This registration is done using the template defined in RFC 4288 <xref target="7"/>
	    and following RFC 4855 <xref target="8"/>.
	    <list style="hanging">
	      <t hangText="Type name:">
		video
	      </t>
	      <t hangText="Subtype name:">
		VP8
	      </t>
	      <t hangText="Required parameters:">
		none
	      </t>
	      <t hangText="Optional parameters:">
		none
	      </t>
	      <t hangText="Encoding considerations:">
		<vspace blankLines="0"/>
		This media type is framed and contains binary data; see Section 4.8 of <xref target="7"/>.
	      </t>
	      <t hangText="Security considerations:">
		See <xref target="securityConsiderations" /> of RFC xxxx.
		<vspace blankLines="0"/>
		[RFC Editor: Upon publication as an RFC, please replace "XXXX" with the number assigned to this document 
		and remove this note.]
	      </t>
	      <t hangText="Interoperability considerations:">
		None.
	      </t>
	      <t hangText="Published specification:">
		VP8 bitstream format <xref target="1"/> and RFC XXXX.
		<vspace blankLines="0"/>
		[RFC Editor: Upon publication as an RFC, please replace "XXXX" with the number assigned to this document 
		and remove this note.]
		<vspace blankLines="0"/>
	      </t>
	      <t hangText="Applications which use this media type:">
		<vspace blankLines="0"/>
		For example: Video over IP, video conferencing.
	      </t>
	      <t hangText="Additional information:">
		None.
	      </t>
	      <t hangText="Person &amp; email address to contact for further information:">
		<vspace blankLines="0"/>
		Patrik Westin, patrik.westin@gmail.com
	      </t>
	      <t hangText="Intended usage:">
		COMMON
	      </t>
	      <t hangText="Restrictions on usage:">
		<vspace blankLines="0"/>
		This media type depends on RTP framing, and hence is only defined for transfer via RTP <xref target="4"/>.
	      </t>
	      <t hangText="Author:">
		Patrik Westin, patrik.westin@gmail.com
	      </t>
	      <t hangText="Change controller:">
		<vspace blankLines="0"/>
		IETF Payload Working Group delegated from the IESG.
	      </t>
	    </list>
	  </t>
        </section>

        <section title = "SDP Parameters">
          <t>The receiver MUST ignore any parameter unspecified in this memo.</t>
          <section title = "Mapping of MIME Parameters to SDP">
            <t>
              The MIME media type video/VP8 string is mapped to fields in the Session Description
              Protocol (SDP) <xref target="6" /> as follows:

              <list style="symbols">
                <t> The media name in the "m=" line of SDP MUST be video.</t>
                <t>
                  The encoding name in the "a=rtpmap" line of SDP MUST be VP8 (the MIME
                  subtype).
                </t>
                <t> The clock rate in the "a=rtpmap" line MUST be 90000.</t>
                <t>
                  The OPTIONAL parameter "version", if included, MUST be in the a=fmtp SDP field.
                  This parameter matches the VP8 bitstream version.
                </t>
              </list>
            </t>
          </section>
        </section>
        <section title = "Example">
          <t> An example of media representation in SDP is as follows:</t>
          <t>
            m=video 49170 RTP/AVPF 98<vspace blankLines="0" />
            a=rtpmap:98 VP8/90000<vspace blankLines="0" />
            a=fmtp:98 version=0<vspace blankLines="0" />
          </t>
        </section>
       
      </section>
      
      <section anchor="securityConsiderations" title = "Security Considerations">
        <t>
          RTP packets using the payload format defined in this specification
          are subject to the security considerations discussed in the RTP
          specification <xref target="4" />, and in any applicable RTP profile.  The
          main security considerations for the RTP packet carrying the RTP
          payload format defined within this memo are confidentiality,
          integrity and source authenticity. Confidentiality is achieved by 
          encryption of the RTP payload.  Integrity of the RTP packets through
          suitable cryptographic integrity protection mechanism.  Cryptographic
          system may also allow the authentication of the source of the
          payload. A suitable security mechanism for this RTP payload format
          should provide confidentiality, integrity protection and at least
          source authentication capable of determining if an RTP packet is from
          a member of the RTP session or not.

          Note that the appropriate mechanism to provide security to RTP and
          payloads following this memo may vary.  It is dependent on the
          application, the transport, and the signalling protocol employed.
          Therefore a single mechanism is not sufficient, although if suitable
          the usage of SRTP <xref target="5" /> is recommended.

          This RTP payload format and its media decoder do not exhibit any
          significant non-uniformity in the receiver-side computational
          complexity for packet processing, and thus are unlikely to pose a
          denial-of-service threat due to the receipt of pathological data.
          Nor does the RTP payload format contain any active content.
        </t>
      </section>
        
      <section anchor="congestionControl" title = "Congestion Control">
        <t>
	  Congestion control for RTP SHALL be used in accordance with RFC
	  3550 <xref target="4" />, and with any applicable RTP profile; e.g., RFC 3551 
	  <xref target="9"/>. The congestions control mechanism can, in a real-time 
	  encoding scenario, adapt the transmission rate by instructing the encoder
	  to encode at a certain target rate.

	  Media aware network elements MAY use the information in the VP8 payload 
	  descriptor in <xref target="VP8payloadDescriptor" /> 
	  to identify non-reference frames and discard
	  them in order to reduce network congestion.
	</t>
      </section>
      
      <section anchor="IANAConsiderations" title = "IANA Considerations">
        <t>
          The IANA is requested to register the following values:<vspace blankLines="0" />
          - Media type registration as described in <xref target="mediaTypeRegistration" />.</t>
      </section>
      
    </middle>
    <back>
      <references>
        <reference anchor="1" target="http://www.webmproject.org">
          <front>
            <title>VP8 Data Format and Decoding Guide</title>
            <author surname="Google, Inc." fullname="WebM Project">
              <organization abbrev="Google">Google, Inc.</organization></author>
            <date month="July" year="2010" />
          </front>
        </reference>
        
        <reference anchor="2">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author initials="S.B" surname="Bradner" fullname="Scott Bradner"></author>
            <date month="December" year="1997" />
          </front>
          <seriesInfo name="RFC" value="2119" />
          <seriesInfo name="STD" value="1" />
        </reference>
        
        <reference anchor="3">
          <front>
            <title>Extended RTP Profile for Real-time Transport Control Protocol (RTCP)-Based
              Feedback (RTP/AVPF)</title>
            <author initials="J.O." surname="Ott" fullname="J. Ott"></author>
            <author initials="S.W." surname="Wenger" fullname="S. Wenger"></author>
            <author initials="N.S." surname="Sato" fullname="N. Sato"></author>
            <author initials="C.B." surname="Burmeister" fullname="C. Burmeister"></author>
            <author initials="J.R." surname="Rey" fullname="J. Rey"></author>
            <date month="July" year="2006" />
          </front>
          <seriesInfo name="RFC" value="4585" />
          <seriesInfo name="STD" value="1" />
        </reference>
        
        <reference anchor="4">
          <front>
            <title>
              RTP: A Transport Protocol for Real-Time Applications
            </title>
            <author initials="H.S." surname="Schulzrinne" fullname="H. Schulzrinne"></author>
            <author initials="S.C." surname="Casner" fullname="S. Casner"></author>
            <author initials="R.F." surname="Frederick" fullname="R. Frederick"></author>
            <author initials="V.." surname="Jacobson" fullname="V. Jacobson."></author>
            <date month="July" year="2003" />
          </front>
          <seriesInfo name="RFC" value="3550" />
          <seriesInfo name="STD" value="64" />
        </reference>

        <reference anchor="5">
          <front>
            <title>
              The Secure Real-time Transport Protocol (SRTP)
            </title>
            <author initials="M.B." surname="Baugher" fullname="M. Baugher"></author>
            <author initials="D.M." surname="McGrew" fullname="D. McGrew"></author>
            <author initials="M.N." surname="Naslund" fullname="M. Naslund"></author>
            <author initials="E.C." surname="Carrara" fullname="E. Carrara"></author>
            <author initials="K.N." surname="Norrman" fullname="K. Norrman"></author>
            <date month="March" year="2004" />
          </front>
          <seriesInfo name="RFC" value="3711" />
          <seriesInfo name="STD" value="1" />
        </reference>

        <reference anchor="6">
          <front>
            <title>
              SDP: Session Description Protocol
            </title>
            <author initials="M.H." surname="Handley" fullname="M. Handley"></author>
            <author initials="V.J." surname="Jacobson" fullname="V. Jacobson"></author>
            <date month="April" year="1998" />
          </front>
          <seriesInfo name="RFC" value="2327" />
          <seriesInfo name="STD" value="1" />
        </reference>

        <reference anchor="7">
          <front>
            <title>
              Media Type Specifications and Registrations Procedures
            </title>
            <author initials="N.F." surname="Freed" fullname="N. Freed"></author>
            <author initials="J.K." surname="Klensin" fullname="J. Klensin"></author>
            <date month="December" year="2005" />
          </front>
          <seriesInfo name="RFC" value="4288" />
          <seriesInfo name="BCP" value="13" />
        </reference>

        <reference anchor="8">
          <front>
            <title>
              Media Type Registration of RTP Payload Formats
            </title>
            <author initials="S.C." surname="Casner" fullname="S. Casner"></author>
            <date month="February" year="2007" />
          </front>
          <seriesInfo name="RFC" value="4855" />
        </reference>

        <reference anchor="9">
          <front>
            <title>
	      RTP Profile for Audio and Video Conferences with Minimal Control
            </title>
            <author initials="H.S." surname="Schulzrinne" fullname="H. Schulzrinne"></author>
            <author initials="S.C." surname="Casner" fullname="S. Casner"></author>
            <date month="July" year="2003" />
          </front>
          <seriesInfo name="RFC" value="3551" />
          <seriesInfo name="STD" value="65" />
        </reference>

      </references>
    </back>
  </rfc>
