<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="exp"
     docName="draft-lodderstedt-oauth-securityconsiderations-00"
     ipr="trust200902">
  <front>
    <title abbrev="OAuth 2.0 Security Considerations">OAuth 2.0 Security
    Considerations</title>

    <author fullname="Dr.-Ing. Torsten Lodderstedt" initials="T."
            role="editor" surname="Lodderstedt">
      <organization>Deutsche Telekom AG</organization>

      <address>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>

    <author fullname="Mark McGloin" initials="M." surname="McGloin">
      <organization>IBM</organization>

      <address>
        <email>mark.mcgloin@ie.ibm.com</email>
      </address>
    </author>

    <author fullname="Phil Hunt" initials="P." surname="Hunt">
      <organization>Oracle Corporation</organization>

      <address>
        <email>phil.hunt@yahoo.com</email>
      </address>
    </author>

    <author fullname="Anthony Nadalin" initials="A." surname="Nadalin">
      <organization>Microsoft Corporation</organization>

      <address>

        <email>tonynad@microsoft.com</email>
      </address>
    </author>

    <date day="31" month="March" year="2011" />

    <area>Applications Area</area>

    <workgroup>Open Authentication Protocol</workgroup>

    <keyword>security considerations</keyword>

    <keyword>oauth 2.0</keyword>

    <abstract>
      <t>This document gives security considerations for the OAuth 2.0
      protocol. The proposed text is intended to be included into <xref
      target="I-D.ietf-oauth-v2"></xref>.</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>

  <middle>
    <section title="Definitions">
      <t>This document considers the following clients categories:</t>

      <t><list style="hanging">
          <t hangText="Web Application">Such an application is installed on a
          server. End-users access it via a HTML user interface rendered in
          the user agent on the end-user's device. All application data
          relevant to the OAuth protocol are stored on the server and is not
          accessible by the user.</t>

          <t hangText="Native Application">Such an app is installed and runs
          on an end-user's device. All application data relevant to the OAuth
          protocol is accessible by the user.</t>

          <t hangText="JavaScript Application">Such an application is
          downloaded from a web site and runs within the user agent on the
          end-user's device. All application data relevant to the OAuth
          protocol is accessible by the user.</t>
        </list></t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>Note: This section focuses on the security principles implementors of
      the protocol MUST consider. These principles have been derived based on
      the comprehensive security analysis of the OAuth 2.0 protocol given in
      <xref target="I-D.lodderstedt-oauth-security"></xref>.</t>

      <section title="Client Secrets">
        <t>Authorization servers can issue client secrets to web applications.
        Application developers MUST ensure confidentiality of client
        secrets.</t>

        <t>Authorization server MUST NOT issue client secrets to native or
        JavaScript applications. Instead authorization servers shall utilize
        other means than client authentication to achieve their security
        objectives. Authorization servers can issue client secrets to native
        applications on a per installation base.</t>

        <t>Authorization servers MUST NOT automatic repeat approvals for
        clients without secrets.</t>
      </section>

      <section title="Refresh Tokens">
        <t>Authorization servers may issue refresh tokens to web and native
        applications.</t>

        <t>Refresh tokens should only be accessible to the authorization
        server and the client the token has been issued to. The authorization
        server MUST maintain the link between a refresh token and the client
        it has been issued to. This relation MUST be validated on every token
        refreshment request.</t>

        <t>Authorization server as well as application developers MUST ensure
        confidentiality of refresh tokens, on transit and storage.
        Authorization servers should implement means to detect abuse of
        refresh tokens.</t>

        <t>(what about revocation?)</t>
      </section>

      <section title="Access Tokens">
        <t>Access tokens should only be accessible to the authorization
        server, the target resource servers and the client the token has been
        issued to. The only exception is the implicit grant where the user
        agent gets access to the access token that is transmitted in the URI
        fragment.</t>

        <t>Application developers MUST NOT store access tokens in
        non-transient memory.</t>
      </section>

      <section title="Token Scope">
        <t>Application developers should only acquire access tokens with the
        minimal scope they need in order to implement the respective
        application function.</t>
      </section>

      <section title="Phishing attacks on redirect-based flows">
        <t>Application developers should, when possible, use external browsers
        instead of browsers embedded in the application for performing the
        end-user authorization process.</t>

        <t>Authorization servers MUST ensure authenticity of the endpoint in
        order to prevent phishing attacks. For example, they can utilize HTTPS
        server authentication for that purpose. Moreover, service Providers
        should attempt to educate users about the risks phishing attacks pose,
        and should provide mechanisms that make it easy for Users to confirm
        the authenticity of their sites. e.g. extended validation
        certificates.</t>
      </section>

      <section title="Request confidentiality">
        <t>The following data MUST be transmitted over secure transport (such
        as TLS) only: access tokens, refresh tokens, resource owner passwords,
        authorization codes, and client secrets.</t>
      </section>

      <section title="Online Guessing Attacks">
        <t>Authorization servers MUST prevent guessing attacks on the
        following credentials: authorization codes, refresh tokens, resource
        owner passwords, and client secrets.</t>

        <t>When creating token handles or other secrets not intended for usage
        by human users, the authorization server MUST include a reasonable
        level of entropy in order to mitigate the risk of guessing
        attacks.</t>
      </section>

      <section title="Authorization code disclosure">
        <t>Confidentiality of authorization codes MUST be ensured on
        transport, even considering browser histories and HTTP referer
        headers.</t>

        <t>Authorization server as well as the client MUST ensure that
        authorization code transmission is protected by using transport-layer
        mechanisms such as TLS and that the duration of an authorization code
        is limited.</t>

        <t>For web applications, authorization servers MUST authenticate the
        client and validate that the authorization code had been issued to the
        same client.</t>

        <t>For native applications, authorization servers MUST enforce one
        time usage of the authorization code. Moreover, if an Authorization
        Server observes multiple attempts to redeem an authorization code, the
        Authorization Server MAY want to revoke all tokens granted based on
        the authorization code.</t>
      </section>

      <section title="Session Fixation">
        <t>The session fixation attack leverages the authorization code flow
        in an attempt to get another user to log-in and authorize access on
        behalf of the attacker. The victim, seeing only a normal request from
        an expected application, approves the request. The attacker then uses
        the victim's authorization to gain access to the information
        unknowingly authorized by the victim.</t>

        <t>In order to prevent such an attack, authorization servers MUST
        ensure that the redirect_uri used in the authorization flow is the
        same as the redirect_uri used to exchange the respective authorization
        code into tokens. Authorization servers SHOULD require clients to
        pre-register their redirect_uri's and validate the actual redirect_uri
        against the pre-registered value.</t>
      </section>

      <section title="Malicious client obtains authorization">
        <t>A malicious client could impersonate a valid client and obtain an
        access authorization that way.</t>

        <t>Assumption: It is not the task of the authorization server to
        protect the end-user's device from malicious software. This is the
        responsibility of the platform running on the particular device
        probably in cooperation with other components of the respective
        ecosystem (e.g. an application management infrastructure). The sole
        responsibility of the authorization server is to control access to the
        end-user's resources living in resource servers and to prevent
        unauthorized access to them. Based on this assumption, the following
        countermeasures are recommended.</t>

        <t>If the impersonated client is a web application, the authorization
        server MUST authentication the client. The authorization server SHOULD
        require clients to pre-register their redirect_uri's and validate the
        actual redirect_uri against the pre-registered value.</t>

        <t>If the impersonated client is an native or JavaScript application,
        the authorization server MUST utilize other means to achieve its
        security objectives. The authorization server may enforce explicit
        user authentication or ask the end-user for consent. In this context,
        the user shall be explained the purpose, scope, and duration of the
        authorization. The authorization server must make the metat-data
        available to the end-user it associates with the particular client. It
        is up to the user to validate the binding of this data to the
        particular application (e.g. Name) and to approve the authorization
        request.</t>

        <t>The authorization server MAY also limit the scope of tokens.</t>
      </section>

      <section title="Resource Owner Password Credentials">
        <t>The &ldquo;Resource Owner Password Credentials&rdquo; grant type is
        often used for legacy/migration reasons. It has higher risk because it
        maintains the uid/password anti-pattern and the client could abuse the
        user id and password. Additionally, because the user does not have
        control over the authorization process, clients using this grant type
        are not limited by scope, but instead have potentially the same
        capabilities as the user themselves. The client could also acquire
        long-living tokens and pass them up to a attacker web service for
        further abuse.</t>

        <t>Authorization servers and application developers SHOULD minimize
        use of this grant types. Other flows which facilitate user control and
        transparency should be used instead.</t>

        <t>The authorization server SHOULD generally restrict the scope of
        access tokens issued by this flow.</t>

        <t>The authorization server MUST ensure the resource owners control
        and transparency with respect to all authorizations issued to
        clients.</t>
      </section>

      <section title="Authenticity of endpoints">
        <t>Authorization servers MUST support validation of endpoint
        authenticity using HTTPS server authentication.</t>

        <t>Application developers MUST validate the authorization server
        endpoint's authenticity and ensure proper handling of CA certificates
        as well as certificate chain validation.</t>
      </section>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t></t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include="reference.I-D.ietf-oauth-v2.xml"?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.I-D.lodderstedt-oauth-security.xml"?>
    </references>
  </back>
</rfc>
