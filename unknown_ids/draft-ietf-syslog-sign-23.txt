


syslog Working Group                                           J. Kelsey
Internet-Draft                                                      NIST
Intended status: Standards Track                               J. Callas
Expires: March 31, 2008                                  PGP Corporation
                                                                A. Clemm
                                                           Cisco Systems
                                                      September 28, 2007


                         Signed syslog Messages
                     draft-ietf-syslog-sign-23.txt

Status of this Memo

   By submitting this Internet-Draft, each author represents that any
   applicable patent or other IPR claims of which he or she is aware
   have been or will be disclosed, and any of which he or she becomes
   aware will be disclosed, in accordance with Section 6 of BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on March 31, 2008.

Copyright Notice

   Copyright (C) The IETF Trust (2007).











Kelsey, et al.           Expires March 31, 2008                 [Page 1]

Internet-Draft           Signed syslog Messages           September 2007


Abstract

   This document describes a mechanism to add origin authentication,
   message integrity, replay resistance, message sequencing, and
   detection of missing messages to the transmitted syslog messages.
   This specification is intended to be used in conjunction with the
   work defined in RFC xxxx, "The syslog Protocol".


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
   2.  Conventions Used in this Document  . . . . . . . . . . . . . .  6
   3.  syslog Message Format  . . . . . . . . . . . . . . . . . . . .  7
   4.  Signature Blocks . . . . . . . . . . . . . . . . . . . . . . .  8
     4.1.  syslog Messages Containing a Signature Block . . . . . . .  8
     4.2.  Signature Block Format and Fields  . . . . . . . . . . . .  8
       4.2.1.  Version  . . . . . . . . . . . . . . . . . . . . . . .  9
       4.2.2.  Reboot Session ID  . . . . . . . . . . . . . . . . . . 10
       4.2.3.  Signature Group and Signature Priority . . . . . . . . 10
       4.2.4.  Global Block Counter . . . . . . . . . . . . . . . . . 12
       4.2.5.  First Message Number . . . . . . . . . . . . . . . . . 13
       4.2.6.  Count  . . . . . . . . . . . . . . . . . . . . . . . . 14
       4.2.7.  Hash Block . . . . . . . . . . . . . . . . . . . . . . 14
       4.2.8.  Signature  . . . . . . . . . . . . . . . . . . . . . . 14
   5.  Payload and Certificate Blocks . . . . . . . . . . . . . . . . 15
     5.1.  Preliminaries: Key Management and Distribution Issues  . . 15
     5.2.  Payload Block  . . . . . . . . . . . . . . . . . . . . . . 16
     5.3.  Certificate Block  . . . . . . . . . . . . . . . . . . . . 16
       5.3.1.  syslog Messages Containing a Certificate Block . . . . 16
       5.3.2.  Certificate Block Format and Fields  . . . . . . . . . 17
   6.  Redundancy and Flexibility . . . . . . . . . . . . . . . . . . 20
     6.1.  Redundancy . . . . . . . . . . . . . . . . . . . . . . . . 20
       6.1.1.  Configuration Parameters for Certificate Blocks  . . . 20
       6.1.2.  Configuration Parameters for Signature Blocks  . . . . 20
     6.2.  Flexibility  . . . . . . . . . . . . . . . . . . . . . . . 21
   7.  Efficient Verification of Logs . . . . . . . . . . . . . . . . 22
     7.1.  Offline Review of Logs . . . . . . . . . . . . . . . . . . 22
     7.2.  Online Review of Logs  . . . . . . . . . . . . . . . . . . 23
   8.  Security Considerations  . . . . . . . . . . . . . . . . . . . 25
     8.1.  Cryptographic Constraints  . . . . . . . . . . . . . . . . 25
     8.2.  Packet Parameters  . . . . . . . . . . . . . . . . . . . . 25
     8.3.  Message Authenticity . . . . . . . . . . . . . . . . . . . 26
     8.4.  Replaying  . . . . . . . . . . . . . . . . . . . . . . . . 26
     8.5.  Reliable Delivery  . . . . . . . . . . . . . . . . . . . . 26
     8.6.  Sequenced Delivery . . . . . . . . . . . . . . . . . . . . 26
     8.7.  Message Integrity  . . . . . . . . . . . . . . . . . . . . 26
     8.8.  Message Observation  . . . . . . . . . . . . . . . . . . . 27



Kelsey, et al.           Expires March 31, 2008                 [Page 2]

Internet-Draft           Signed syslog Messages           September 2007


     8.9.  Man In The Middle Attacks  . . . . . . . . . . . . . . . . 27
     8.10. Denial of Service  . . . . . . . . . . . . . . . . . . . . 27
     8.11. Covert Channels  . . . . . . . . . . . . . . . . . . . . . 27
   9.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 28
     9.1.  Structured Data and syslog messages  . . . . . . . . . . . 28
     9.2.  Version Field  . . . . . . . . . . . . . . . . . . . . . . 28
     9.3.  SG Field . . . . . . . . . . . . . . . . . . . . . . . . . 30
     9.4.  Key Blob Type  . . . . . . . . . . . . . . . . . . . . . . 30
   10. Working Group  . . . . . . . . . . . . . . . . . . . . . . . . 31
   11. Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 32
   12. References . . . . . . . . . . . . . . . . . . . . . . . . . . 33
     12.1. Normative References . . . . . . . . . . . . . . . . . . . 33
     12.2. Informative References . . . . . . . . . . . . . . . . . . 34
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 35
   Intellectual Property and Copyright Statements . . . . . . . . . . 36




































Kelsey, et al.           Expires March 31, 2008                 [Page 3]

Internet-Draft           Signed syslog Messages           September 2007


1.  Introduction

   This document describes a mechanism, called syslog-sign in this
   document, that adds origin authentication, message integrity, replay
   resistance, message sequencing, and detection of missing messages to
   syslog.  Essentially, this is accomplished by sending a special
   syslog message.  The contents of this syslog message is called a
   Signature Block.  Each Signature Block contains, in effect, a
   detached signature on some number of previously sent messages.  It is
   cryptographically signed and contains the hashes of previously sent
   syslog messages.

   While most implementations of syslog involve only a single originator
   and a single collector of each message, provisions need to be made to
   cover situations in which messages are sent to multiple collectors.
   This concerns, in particular, situations in which different messages
   are sent to different collectors, which means that some messages are
   sent to some collectors but not to others.  The required
   differentiation of messages is generally performed based on the
   Priority value of the individual messages.  For example, messages
   from any Facility with a Severity value of 3, 2, 1, or 0 may be sent
   to one collector while all messages of Facilities 4, 10, 13, and 14
   may be sent to another collector.  Appropriate syslog-sign messages
   must be kept with their proper syslog messages.  To address this,
   syslog-sign uses a Signature Group.  A Signature Group identifies a
   group of messages that are all kept together for signing purposes by
   the originator.  A Signature Block always belongs to exactly one
   signature group and always signs messages belonging only to that
   signature group.

   Additionally, a originator sends a Certificate Block to provide key
   management information between the originator and the collector.
   This Certificate Block has a field to denote the type of key material
   which may be such things as a PKIX certificate, an OpenPGP
   certificate, or even an indication that a key had been
   predistributed.  In the cases of certificates being sent, the
   certificates may have to be split across multiple packets.

   The collector of the previous messages may verify that the hash of
   each received message matches the signed hash contained in the
   Signature Block.  A collector may process these Signature Blocks as
   they arrive, building an authenticated log file.  Alternatively, it
   may store all the log messages in the order they were received.  This
   allows a network operator to authenticate the log file at the time
   the logs are reviewed.

   The mechanism described in this specification is intended to be used
   in conjunction with the syslog protocol as defined in RFC xxxx [8] as



Kelsey, et al.           Expires March 31, 2008                 [Page 4]

Internet-Draft           Signed syslog Messages           September 2007


   its message delivery mechanism and uses the concept of STRUCTURED-
   DATA elements defined in that document.  In fact, this specification
   mandates implementation of syslog protocol.  Nevertheless, it is
   conceivable that the concepts underlying this mechanism could also be
   used in conjunction with other message delivery mechanisms.
   Designers of other efforts to define event notification mechanisms
   are therefore encouraged to consider this specification in their
   designs.

   NOTE to RFC editor: replace xxxx with the actual RFC number assigned
   to [8], replace zzzz with the actual RFC number assigned to [9],
   replace wwww with the actual RFC number assigned to [10], replace
   yyyy with the actual RFC number assigned to this document, and remove
   this note.





































Kelsey, et al.           Expires March 31, 2008                 [Page 5]

Internet-Draft           Signed syslog Messages           September 2007


2.  Conventions Used in this Document

   The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [11].














































Kelsey, et al.           Expires March 31, 2008                 [Page 6]

Internet-Draft           Signed syslog Messages           September 2007


3.  syslog Message Format

   This specification is intended to be used in conjunction with the
   syslog protocol as defined in RFC xxxx [8].  The syslog protocol
   therefore MUST be supported by implementations of this specification.

   Because the originator generating the Signature Block message signs
   each message in its entirety, the messages MUST NOT be changed in
   transit.  By the same token, the syslog-sign messages MUST NOT be
   changed in transit.  Specifically, a relay as described in RFC xxxx
   [8] MAY make changes to a syslog packet.  If this occurs, the
   mechanism described in this document is rendered useless.  Likewise,
   any truncation of messages that occurs between sending and receiving
   renders the mechanism useless.  For this reason, syslog originator
   and collector implementations implementing this specification MUST
   support messages of up to and including 2048 octets in length, in
   order to minimize the chance of truncation.  While syslog originator
   and collector implementations MAY support messages with a length
   larger than 2048 octets, implementors need to be aware that any
   message truncations that occur render the mechanism useless.

   This specification uses the syslog message format described in RFC
   xxxx [8].  Along with other fields, that document describes the
   concept of Structured Data (SD).  Structured Data is defined in terms
   of SD ELEMENTS (SDEs).  An SDE consists of a name and a set of
   parameter name - value pairs.  The SDE name is referred to as SD-ID.
   The name-value pairs are referred to as SD-PARAM, or SD Parameters,
   with the name constituting the SD-PARAM-NAME, and the value
   constituting the SD-PARAM-VALUE.

   The syslog messages defined in this document carry the signature and
   certificate data as Structured Data.  The special syslog messages
   defined in this document include for this purpose definitions of SDEs
   to convey parameters that relate to the signing of syslog messages.
   The MSG part of the syslog messages defined in this document SHOULD
   simply be empty -- the content of the messages is not intended for
   interpretation by humans but by applications that use those messages
   to build an authenticated log.

   Because the syslog messages defined in this document adhere to the
   format described in RFC xxxx [8], they identify the machine that
   originates the syslog message in the HOSTNAME field.  Therefore, the
   signature and certificate data do not need to include an additional
   parameter to identify the machine that orginates the message.







Kelsey, et al.           Expires March 31, 2008                 [Page 7]

Internet-Draft           Signed syslog Messages           September 2007


4.  Signature Blocks

   This section describes the format of the Signature Block and the
   fields used within the Signature Block, as well as the syslog
   messages used to carry the Signature Block.

4.1.  syslog Messages Containing a Signature Block

   There is a need to distinguish the Signature Block itself from the
   syslog message that is used to carry a Signature Block.  Signature
   Blocks MUST be encompassed within completely formed syslog messages.
   Syslog messages that contain a Signature Block are also referred to
   as Signature Block messages.

   A Signature Block message is identified by the presence of an SD
   ELEMENT with an SD-ID with the value "ssign".  In addition, a
   Signature Block message MUST contain valid APP-NAME, PROCID, and
   MSGID fields to be compliant with RFC xxxx [8].  This specification
   does not mandate particular values for these fields; however, for
   consistency, originators SHOULD use the same values for APP-NAME,
   PROCID, and MSGID fields for every Signature Block message that is
   sent, whichever values are chosen.  It is RECOMMENDED (but not
   required) to use 110 as value for the PRI field, corresponding to
   facility 13 and severity 6 (informational).  The Signature Block is
   carried as Structured Data within the Signature Block message, per
   the definitions that follow in the next section.  A Signature Block
   message SHOULD NOT carry other Structured Data besides the Structured
   Data of the Signature Block itself.

   The syslog messages defined as part of syslog-sign themselves
   (Signature Block messages and Certificate Block messages) do not need
   to be signed by a Signature Block.  Collectors that implement syslog-
   sign know to distinguish syslog messages that are associated with
   syslog-sign from those that are subjected to signing and process them
   differently.

4.2.  Signature Block Format and Fields

   The content of a Signature Block message is the Signature Block.  The
   Signature Block MUST be encoded as an SD ELEMENT, as defined in RFC
   xxxx [8].

   The SD-ID MUST have the value of "ssign".

   The SDE contains the fields of the Signature Block encoded as SD
   Parameters, as specified in the following.  The Signature Block is
   composed of the following fields.  The value of each field MUST be
   printable ASCII, and any binary values MUST be base 64 encoded, as



Kelsey, et al.           Expires March 31, 2008                 [Page 8]

Internet-Draft           Signed syslog Messages           September 2007


   defined in RFC 4648 [7].

      Field                     SD-PARAM-NAME        Size in octets
      -----                     -------------        ---- -- ------

      Version                          VER                 4

      Reboot Session ID               RSID                1-10

      Signature Group                   SG                 1

      Signature Priority              SPRI                1-3

      Global Block Counter             GBC                1-10

      First Message Number             FMN                1-10

      Count                            CNT                1-2

      Hash Block                        HB      variable, size of hash
                                              times the number of hashes
                                               (base 64 encoded binary)

      Signature                       SIGN             variable
                                               (base 64 encoded binary)

   A Signature Block is accordingly encoded as follows, where xxx
   denotes a placeholder for the particular values:

   [ssign VER="xxx" RSID="xxx" SG="xxx" SPRI="xxx" GBC="xxx" FMN="xxx"
   CNT="xxx" HB="xxx" SIGN="xxx"]

   Values of the fields constitute SD parameter values and are hence
   enclosed in quotes, per RFC xxxx [8].  The fields are separated by
   single spaces and are described below.

4.2.1.  Version

   The Signature Block Version field is a decimal value that has a
   length of 4 octets, which may include leading zeroes.  Each octet
   contains a decimal character in the range of "0" to "9".  The value
   in this field specifies the version of the syslog-sign protocol.
   This is extensible to allow for different hash algorithms and
   signature schemes to be used in the future.  The value of this field
   is the grouping of the protocol version (2 octets), the hash
   algorithm (1 octet) and the signature scheme (1 octet).





Kelsey, et al.           Expires March 31, 2008                 [Page 9]

Internet-Draft           Signed syslog Messages           September 2007


      Protocol Version - 2 octets, with "01" as the value for the
      protocol version that is described in this document.

      Hash Algorithm - 1 octet, where, in conjunction with Protocol
      Version 01, a value of "1" denotes SHA1 and a value of "2" denotes
      SHA256, as defined in FIPS-180-2.2002 [2].

      Signature Scheme - 1 octet, where, in conjunction with Protocol
      Version 01, a value of "1" denotes OpenPGP DSA, defined in RFC
      2440 [5] and FIPS.186-2.2000 [1].

   The version, hash algorithm and signature scheme defined in this
   document would accordingly be represented as "0111" (if SHA1 is used
   as Hash Algorithm) and "0121" (if SHA256 is used as Hash Algorithm),
   respectively (without the quotation marks).

   The values of the Hash Algorithm and Signature Scheme are defined
   relative to the Protocol Version.  If the single-octet representation
   of the values for Hash Algorithm and Signature Scheme were to ever
   represent a limitation, this limitation could be overcome by defining
   a new Protocol Version with additional Hash Algorithms and/or
   Signature Schemes, and having implementations support both Protocol
   Versions concurrently.

4.2.2.  Reboot Session ID

   The Reboot Session ID is a decimal value that has a length between 1
   and 10 octets.  The acceptable values for this are between 0 and
   9999999999.  Leading zeroes MUST be omitted.  A Reboot Session ID is
   expected to increase whenever an originator reboots in order to allow
   collectors to distinguish messages and message signatures across
   reboots.  Hence, an originator needs to retain the previous Reboot
   Session ID across reboots.  In cases where an originator does not
   support this capability, the Reboot Session ID MUST always be set to
   a value of 0, which indicates that this capability is not supported.
   Otherwise, it MUST increase whenever an originator reboots, starting
   with a value of 1.  If the value reaches 9999999999, then manual
   intervention may be required to subsequently reset it to 1.
   Implementors MAY wish to consider using the snmpEngineBoots value as
   a source for this counter as defined in RFC 3414 [6].

4.2.3.  Signature Group and Signature Priority

   The SG parameter may take any value from 0-3 inclusive.  The SPRI
   parameter may take any value from 0-191 inclusive.  These fields
   taken together allow network administrators to associate groupings of
   syslog messages with appropriate Signature Blocks and Certificate
   Blocks.  Groupings of syslog messages that are signed together are



Kelsey, et al.           Expires March 31, 2008                [Page 10]

Internet-Draft           Signed syslog Messages           September 2007


   also called Signature Groups.  A Signature Block contains only hashes
   of those syslog messages that are part of the same Signature Group.

   For example, in some cases, network administrators might have
   originators send syslog messages of Facilities 0 through 15 to one
   collector and those with Facilities 16 through 23 to another.  In
   such cases, associated Signature Blocks should likely be sent to the
   corresponding collectors as well, signing the syslog messages that
   are intended for each collector separately.  This way, each collector
   receives Signature Blocks for all syslog messages that it receives,
   and only for those.  The ability to associate different categories of
   syslog messages with different Signature Groups, signed in separate
   Signature Blocks, provides administrators with flexibility in this
   regard.

   Syslog-sign provides four options for handling Signature Groups,
   linking them with PRI values so they may be routed to the destination
   commensurate with the corresponding syslog messages.  In all cases,
   no more than 192 distinct Signature Groups (0-191) are permitted.

   The Signature Group to which a Signature Block pertains is indicated
   by the Signature Priority (SPRI) field.  The Signature Group (SG)
   field indicates how to interpret the Signature Priority field.  (Note
   that the SG field does not indicate the Signature Group itself, as
   its name might suggest.)  The SG field can have one of the following
   values:

   a.  "0" -- There is only one Signature Group.  In this case, the
       administrators want all Signature Blocks to be sent to a single
       destination; in all likelihood, all of the syslog messages will
       also be going to that same destination.  Signature Blocks sign
       all messages regardless of their PRI value.  This means that, in
       effect, the Signature Block's SPRI value can be ignored.
       However, it is RECOMMENDED that a single SPRI value be used for
       all Signature Blocks.  Furthermore, it is RECOMMENDED to set that
       value to the same value as the PRI field of the Signature Block
       message.  This way, the PRI of the Signature Block message
       matches the SPRI of the Signature Block that it contains.

   b.  "1" -- Each PRI value is associated with its own Signature Group.
       Signature Blocks for a given Signature Group have SPRI = PRI for
       that Signature Group.  In other words, the SPRI of the Signature
       Block matches the PRI value of the syslog messages that are part
       of the Signature Group and hence signed by the Signature Block.
       An SG value of 1 can, for example, be used when the administrator
       of an originator does not know where any of the syslog messages
       will ultimately go but anticipates that messages with different
       PRI values will be collected and processed separately.  Having a



Kelsey, et al.           Expires March 31, 2008                [Page 11]

Internet-Draft           Signed syslog Messages           September 2007


       Signature Group per PRI value provides administrators with a
       large degree of flexibility with regard to how to divide up the
       processing of syslog messages and their signatures after they are
       received, at the same time allowing Signature Blocks to follow
       the corresponding syslog messages to their eventual destination.

   c.  "2" -- Each Signature Group contains a range of PRI values.
       Signature Groups are assigned sequentially.  A Signature Block
       for a given Signature Group has its own SPRI value denoting the
       highest PRI value of syslog messages in that Signature Group.
       The lowest PRI value of syslog messages in that Signature Group
       will be one larger than the SPRI value of the previous Signature
       Group or "0" in case there is no other Signature Group with a
       lower SPRI value.  The specific Signature Groups and ranges they
       are associated with are subject to configuration by a system
       administrator.

   d.  "3" -- Signature Groups are not assigned with any of the above
       relationships to PRI values of the syslog messages they sign.
       Instead, another scheme is used, which is outside the scope of
       this specification.  There has to be some predefined arrangement
       between the originator and the intended collectors as to which
       syslog messages are to be included in which Signature Group,
       requiring configuration by a system administrator.  This provides
       administrators also with the flexibility to group syslog messages
       into Signature Groups according to criteria that are not tied to
       the PRI value.

   One reasonable way to configure some installations is to have only
   one Signature Group, indicated with SG=0, and have the originator
   send a copy of each Signature Block to each collector.  In that case,
   collectors that are not configured to receive every syslog message
   will still receive signatures for every message, even ones they are
   not supposed to receive.  While the collector will not be able to
   detect gaps in the messages (because the presence of a signature of a
   message that is missing does not tell the collector whether or not
   the corresponding message would be of the collector's concern), it
   does allow all messages that do arrive at each collector to be put
   into the right order and to be verified.  It also allows each
   collector to detect duplicates.  Likewise, configuring only one
   Signature Group can be a reasonable way to configure installations
   that involve relay chains, where one or more interim relays may or
   may not relay all messages to the same destination.

4.2.4.  Global Block Counter

   The Global Block Counter is a decimal value representing the number
   of Signature Blocks sent by syslog-sign before the current one, in



Kelsey, et al.           Expires March 31, 2008                [Page 12]

Internet-Draft           Signed syslog Messages           September 2007


   this reboot session.  This takes at least 1 octet and at most 10
   octets displayed as a decimal counter.  The acceptable values for
   this are between 0 and 9999999999, starting with 0.  Leading zeroes
   MUST be omitted.  If the value of the Global Block Counter has
   reached 9999999999 and the Reboot Session ID has a value other than 0
   (indicating the fact that persistence of the Reboot Session ID is
   supported), then the Reboot Session ID MUST be incremented by 1 and
   the Global Block Counter resumes at 0.  When the Reboot Session ID is
   0 (i.e., persistent Reboot Session IDs are not supported) and the
   Global Block Counter reaches its maximum value, then the Global Block
   Counter is reset to 0 and the Reboot Session ID MUST remain at 0.

   Note that the Global Block Counter crosses Signature Groups; it
   allows one to roughly synchronize when two messages were sent, even
   though they went to different collectors and are part of different
   Signature Groups.

   Because a reboot results in the start of a new reboot session, the
   originator MUST reset the Global Block Counter to 0 after a reboot
   occurs.  Applications need to take into account the possibility that
   a reboot occurred when authenticating a log, and situations in which
   reboots occur frequently may result in losing the ability to verify
   the proper sequence in which messages were sent, hence jeopardizing
   the integrity of the log.

4.2.5.  First Message Number

   This is a decimal value between 1 and 10 octets, with leading zeroes
   omitted.  It contains the unique message number within this Signature
   Group of the first message whose hash appears in this block.  The
   very first message of the reboot session is numbered "1".  This
   implies that when the Reboot Session ID increases, the message number
   is reset to 1.

   For example, if this Signature Group has processed 1000 messages so
   far and message number 1001 is the first message whose hash appears
   in this Signature Block, then this field contains 1001.  The message
   number is relative to the Signature Group to which it belongs; hence,
   a message number does not identify a message beyond its Signature
   Group.

   Should the message number reach 9999999999 within the same reboot
   session and Signature Group, the message number subsequently restarts
   at 1.  In such event, the Global Block Counter will be vastly
   different between two occurrences of the same message number.






Kelsey, et al.           Expires March 31, 2008                [Page 13]

Internet-Draft           Signed syslog Messages           September 2007


4.2.6.  Count

   The count is a 1 or 2 octet field that indicates the number of
   message hashes to follow.  The valid values for this field are 1
   through 99.  The number of hashes included in the Signature Block
   MUST be chosen such that the length of the resulting syslog message
   does not exceed the maximum permissible syslog message length.

4.2.7.  Hash Block

   The hash block is a block of hashes, each separately encoded in base
   64.  Each hash in the hash block is the hash of the entire syslog
   message represented by the hash, independent of the underlying
   transport.  Hashes are ordered from left to right in the order of
   occurrence of the syslog messages that they represent.

   The "entire syslog message" refers to what is described as the syslog
   message excluding transport parts that are described in RFC zzzz [9]
   and RFC wwww [10], and excluding other parts that may be defined in
   future transports.  The hash value will be the result of the hashing
   algorithm run across the syslog message, starting with the "<" of the
   PRI portion of the header part of the message.  The hash algorithm
   used and indicated by the Version field determines the size of each
   hash, but the size MUST NOT be shorter than 160 bits without the use
   of padding.  It is base 64 encoded as per RFC 4648 [7].

   The number of hashes in a hash block SHOULD be chosen such that the
   resulting Signature Block message does not exceed a length of 2048
   octets in order to avoid the possibility that truncation occurs.
   When more hashes need to be sent than fit inside a Signature Block
   message, it is advisable to start a new Signature Block.

4.2.8.  Signature

   This is a digital signature, encoded in base 64 per RFC 4648 [7].
   The signature is calculated over the completely formatted syslog-
   message, including all of the PRI, HEADER, and hashes in the hash
   block, excluding spaces between fields, and also excluding the
   signature field (SD Parameter Name "SIGN", "=", and corresponding
   value).











Kelsey, et al.           Expires March 31, 2008                [Page 14]

Internet-Draft           Signed syslog Messages           September 2007


5.  Payload and Certificate Blocks

   Certificate Blocks and Payload Blocks provide key management for
   syslog-sign.  Their purpose is to support key management that uses
   public key cryptosystems.

5.1.  Preliminaries: Key Management and Distribution Issues

   A Payload Block contains public key certificate information that is
   to be conveyed to the collector.  A Payload Block is sent at the
   beginning of a new reboot session, carrying public key information in
   effect for the reboot session.  However, a Payload Block is not sent
   directly, but in (one or more) fragments.  Those fragments are termed
   Certificate Blocks.  Therefore, originators send at least one
   Certificate Block at the beginning of a new reboot session.

   There are three key points to understand about Certificate Blocks:

   a.  They handle a variable-sized payload, fragmenting it if necessary
       and transmitting the fragments as legal syslog messages.  This
       payload is built (as described below) at the beginning of a
       reboot session and is transmitted in pieces with each Certificate
       Block carrying a piece.  There is exactly one Payload Block per
       reboot session.

   b.  The Certificate Blocks are digitally signed.  The originator does
       not sign the Payload Block, but the signatures on the Certificate
       Blocks ensure its authenticity.  Note that it may not even be
       possible to verify the signature on the Certificate Blocks
       without the information in the Payload Block; in this case the
       Payload Block is reconstructed, the key is extracted, and then
       the Certificate Blocks are verified.  (This is necessary even
       when the Payload Block carries a certificate, because some other
       fields of the Payload Block are not otherwise verified.)  In
       practice, most installations keep the same public key over long
       periods of time, so that most of the time, it is easy to verify
       the signatures on the Certificate Blocks, and use the Payload
       Block to provide other useful per-session information.

   c.  The kind of Payload Block that is expected is determined by what
       kind of key material is on the collector that receives it.  The
       originator and collector (or offline log viewer) both have some
       key material (such as a root public key or predistributed public
       key) and an acceptable value for the Key Blob Type in the Payload
       Block, below.  The collector or offline log viewer MUST NOT
       accept a Payload Block of the wrong type.





Kelsey, et al.           Expires March 31, 2008                [Page 15]

Internet-Draft           Signed syslog Messages           September 2007


5.2.  Payload Block

   The Payload Block is built when a new reboot session is started.
   There is a one-to-one correspondence between reboot sessions and
   Payload Blocks.  An originator creates a new Payload Block after each
   reboot.  The Payload Block is used until the next reboot.  A Payload
   Block MUST have the following fields:

   a.  Full local time stamp for the originator at the time the reboot
       session started.  This must be in the time stamp format specified
       in RFC xxxx [8] (essentially, time stamp format per RFC 3339 [12]
       with some further restrictions).

   b.  Key Blob Type, a one-octet field containing one of five values:

       1.  'C' -- a PKIX certificate.

       2.  'P' -- an OpenPGP certificate.

       3.  'K' -- the public key whose corresponding private key is
           being used to sign these messages.

       4.  'N' -- no key information sent; key is predistributed.

       5.  'U' -- installation-specific key exchange information

   c.  The key blob, if any, base 64 encoded per RFC 4648 [7] and
       consisting of the raw key data.

   The fields are separated by single space characters.  Because a
   Payload Block is not carried in a syslog message directly, only the
   corresponding Certificate Blocks, it does not need to be encoded as
   an SD ELEMENT.  The Payload Block does not contain a field that
   identifies the reboot session; instead, the reboot session can be
   inferred from the Reboot Session ID parameter of the Certificate
   Blocks that are used to carry the Payload Block.

5.3.  Certificate Block

   This section describes the format of the Certificate Block and the
   fields used within the Certificate Block, as well as the syslog
   messages used to carry Certificate Blocks.

5.3.1.  syslog Messages Containing a Certificate Block

   Certificate Blocks are used to get the Payload Block to the
   collector.  As with a Signature Block, each Certificate Block is
   carried in its own syslog message, called Certificate Block message.



Kelsey, et al.           Expires March 31, 2008                [Page 16]

Internet-Draft           Signed syslog Messages           September 2007


   Because certificates can legitimately be much longer than 2048
   octets, the Payload Block can be split up into several pieces, with
   each Certificate Block carrying a piece of the Payload Block.  Note
   that the originator MAY make the Certificate Blocks of any legal
   length (that is, any length that keeps the entire Certificate Block
   message within 2048 octets) that holds all the required fields.
   Software that processes Certificate Blocks MUST deal correctly with
   blocks of any legal length.  The length of the fragment of the
   Payload Block that a Certificate Block carries MUST be at least 1
   octet.  The length SHOULD be chosen such that the length of the
   Certificate Block message does not exceed 2048 octets.

   A Certificate Block message is identified by the presence of an SD
   ELEMENT with an SD-ID with the value "ssign-cert".  In addition, a
   Certificate Block message MUST contain valid APP-NAME, PROCID, and
   MSGID fields to be compliant with syslog protocol.  Syslog-sign does
   not mandate particular values for these fields; however, for
   consistency, implementations SHOULD use the same value for APP-NAME,
   PROCID, and MSGID fields for every Certificate Block message,
   whichever values are chosen.  It is RECOMMENDED to use 110 as value
   for the PRI field, corresponding to facility 13 and severity 6
   (informational).  The Certificate Block is carried as Structured Data
   within the Certificate Block message.  A Certificate Block message
   SHOULD NOT carry other Structured Data besides the Structured Data of
   the Certificate Block itself.  The MSG part of a Certificate Block
   message SHOULD be empty.

5.3.2.  Certificate Block Format and Fields

   The contents of a Certificate Block message is the Certificate Block
   itself.  Like a Signature Block, the Certificate Block is encoded as
   an SD ELEMENT.  The SD-ID of the Certificate Block is "ssign-cert".
   The Certificate Block is composed of the following fields, each of
   which is encoded as an SD Parameter with parameter name as indicated.
   Each field must be printable ASCII, and any binary values are base 64
   encoded per RFC 4648 [7].















Kelsey, et al.           Expires March 31, 2008                [Page 17]

Internet-Draft           Signed syslog Messages           September 2007


       Field                       SD-PARAM-NAME      Size in octets
       -----                       -------------      ---- -- ------

       Version                          VER                 4

       Reboot Session ID               RSID                1-10

       Signature Group                   SG                 1

       Signature Priority              SPRI                1-3

       Total Payload Block Length      TPBL                1-8

       Index into Payload Block       INDEX                1-8

       Fragment Length                 FLEN                1-4

       Payload Block Fragment          FRAG              variable
                                                (base 64 encoded binary)

       Signature                       SIGN             variable
                                                (base 64 encoded binary)

   A Certificate Block is accordingly encoded as follows, where xxx
   denotes a placeholder for the particular values:

   [ssign-cert VER="xxx" RSID="xxx" SG="xxx" SPRI="xxx" TBPL="xxx"
   INDEX="xxx" FLEN="xxx" FRAG="xxx" SIGN="xxx"]

   Values of the fields constitute SD parameter values and are hence
   enclosed in quotes, per RFC xxxx [8].  The fields are separated by
   single spaces and are described below.

5.3.2.1.  Version

   The Signature Group version field is 4 octets in length.  This field
   is identical in format and meaning to the Version field described in
   Section 4.2.1.

5.3.2.2.  Reboot Session ID

   The Reboot Session ID is identical in format and meaning to the RSID
   field described in Section 4.2.2.

5.3.2.3.  Signature Group and Signature Priority

   The SIG field is identical in format and meaning to the SIG field
   described in Section 4.2.3.  The SPRI field is identical in format



Kelsey, et al.           Expires March 31, 2008                [Page 18]

Internet-Draft           Signed syslog Messages           September 2007


   and meaning to the SPRI field described there.

5.3.2.4.  Total Payload Block Length

   The Total Payload Block Length is a value representing the total
   length of the Payload Block in octets, expressed as a decimal with
   one to eight octets.

5.3.2.5.  Index into Payload Block

   This is a decimal value between 1 and 8 octets, with leading zeroes
   omitted.  It contains the number of octets into the Payload Block at
   which this fragment starts.  The first octet of the first fragment is
   numbered "1".

5.3.2.6.  Fragment Length

   The total length of this fragment expressed as a decimal integer with
   one to four octets.  The fragment length must be at least 1.

5.3.2.7.  Payload Block Fragment

   The Payload Block Fragment contains a fragment of the payload block,
   encoded in base 64, as per RFC 4648 [7].  Its length must match the
   indicated fragment length.

5.3.2.8.  Signature

   This is a digital signature, encoded in base 64, as per RFC 4648 [7].
   The Version field effectively specifies the original encoding of the
   signature.  The signature is calculated over the completely formatted
   syslog message, including all of the PRI, HEADER, and certificate
   block, excluding spaces between fields, and also excluding the
   signature field itself (SD Parameter Name "SIGN", "=", and
   corresponding value).
















Kelsey, et al.           Expires March 31, 2008                [Page 19]

Internet-Draft           Signed syslog Messages           September 2007


6.  Redundancy and Flexibility

   There is a general rule that determines how redundancy works and what
   level of flexibility the originator and collector have in message
   formats: in general, the originator is allowed to send Signature and
   Certificate Blocks multiple times, to send Signature and Certificate
   Blocks of any legal length, to include fewer hashes in hash blocks,
   etc.

6.1.  Redundancy

   Syslog messages are in general sent over unreliable transport, which
   means that they can be lost in transit.  However, if a collector does
   not receive Signature and Certificate Blocks, many messages may not
   be able to be verified.  Sending Signature and Certificate Blocks
   multiple times provides redundancy; because the collector MUST ignore
   Signature/Certificate Blocks it has already received and
   authenticated, the originator can in principle change its redundancy
   level for any reason, without communicating this fact to the
   collector.

   Although the transport sender is not constrained in how it decides to
   send redundant Signature and Certificate Blocks, or even in whether
   it decides to send along multiple copies of normal syslog messages,
   we define some redundancy parameters below which may be useful in
   controlling redundant transmission from the transport sender to the
   transport receiver, and which may be useful for administrators to
   configure.

6.1.1.  Configuration Parameters for Certificate Blocks

   certInitialRepeat = number of times each Certificate Block should be
   sent before the first message is sent.

   certResendDelay = maximum time delay in seconds to delay before next
   redundant sending.

   certResendCount = maximum number of sent messages to delay before
   next redundant sending.

6.1.2.  Configuration Parameters for Signature Blocks

   sigNumberResends = number of times a Signature Block is resent.

   sigResendDelay = maximum time delay in seconds from original sending
   to next redundant sending.

   sigResendCount = maximum number of sent messages to delay before next



Kelsey, et al.           Expires March 31, 2008                [Page 20]

Internet-Draft           Signed syslog Messages           September 2007


   redundant sending.

6.2.  Flexibility

   An originator may change many things about the makeup of Signature
   and Certificate Blocks in a given reboot session.  The things it
   cannot change are:

      * The version

      * The number or arrangements of Signature Groups

   It is legitimate for an originator to send short Signature Blocks to
   allow the collector to verify messages quickly.





































Kelsey, et al.           Expires March 31, 2008                [Page 21]

Internet-Draft           Signed syslog Messages           September 2007


7.  Efficient Verification of Logs

   The logs secured with syslog-sign may be reviewed either online or
   offline.  Online review is somewhat more complicated and
   computationally expensive, but not prohibitively so.

7.1.  Offline Review of Logs

   When the collector stores logs to be reviewed later, they can be
   authenticated offline just before they are reviewed.  Reviewing these
   logs offline is simple and relatively inexpensive in terms of
   resources used, so long as there is enough space available on the
   reviewing machine.  Here, we presume that the stored log files have
   already been separated by originator, Reboot Session ID, and
   Signature Group.  This can be done easily with a script file.  We
   then do the following:

   a.  First, we go through the raw log file and split its contents into
       three files.  Each message in the raw log file is classified as a
       normal message, a Signature Block message, or a Certificate Block
       message.  Signature Blocks and Certificate Blocks are then stored
       in their own files.  Normal messages are stored in a keyed file,
       indexed on their hash values.

   b.  We sort the Certificate Block file by INDEX value, and check to
       see whether we have a set of Certificate Blocks that can
       reconstruct the Payload Block.  If so, we reconstruct the Payload
       Block, verify any key-identifying information, and then use this
       to verify the signatures on the Certificate Blocks we have
       received.  When this is done, we have verified the reboot session
       and key used for the rest of the process.

   c.  We sort the Signature Block file by First Message Number.  We now
       create an authenticated log file, which consists of some header
       information and then a sequence of message number, message text
       pairs.  We next go through the Signature Block file.  For each
       Signature Block in the file, we do the following:

       1.  Verify the signature on the Block.

       2.  For each hashed message in the Block:

           a.  Look up the hash value in the keyed message file.

           b.  If the message is found, write (message number, message
               text) to the authenticated log file.

           Skip all other Signature Blocks with the same First Message



Kelsey, et al.           Expires March 31, 2008                [Page 22]

Internet-Draft           Signed syslog Messages           September 2007


           Number.

       The resulting authenticated log file contains all messages that
       have been authenticated.  In addition, it implicitly indicates
       all gaps in the authenticated messages (specifically in the case
       when all messages of the same Signature Group are sent to the
       same collector), because their message numbers are missing.

   One can see that, assuming sufficient space for building the keyed
   file, this whole process is linear in the number of messages
   (generally two seeks, one to write and the other to read, per normal
   message received), and O(N lg N) in the number of Signature Blocks.
   This estimate comes with two caveats: first, the Signature Blocks
   arrive very nearly in sorted order, and so can probably be sorted
   more cheaply on average than O(N lg N) steps.  Second, the signature
   verification on each Signature Block almost certainly is more
   expensive than the sorting step in practice.  We have not discussed
   error-recovery, which may be necessary for the Certificate Blocks.
   In practice, a simple error-recovery strategy is probably enough: if
   the Payload Block is not valid, then we can just try alternate
   instances of each Certificate Block, if such are available, until we
   get the Payload Block right.

   It is easy for an attacker to flood us with plausible-looking
   messages, Signature Blocks, and Certificate Blocks.

7.2.  Online Review of Logs

   Some collector implementations may need to monitor log messages in
   close to real-time.  This can be done with syslog-sign, though it is
   somewhat more complex than offline verification.  This is done as
   follows:

   a.  We have an authenticated message file, into which we write
       (message number, message text) pairs which have been
       authenticated.  Again, we will assume that we are handling only
       one Signature Group and only one Reboot Session ID at any given
       time.

   b.  We have three data structures: A queue in which (message number,
       hash of message) pairs are kept in sorted order, a queue in which
       (arrival sequence, hash of message) pairs are kept in sorted
       order, and a hash table that stores (message text, count) pairs
       indexed by hash value.  In the hash table, count may be any
       number greater than zero; when count is zero, the entry in the
       hash table is cleared.





Kelsey, et al.           Expires March 31, 2008                [Page 23]

Internet-Draft           Signed syslog Messages           September 2007


   c.  We must receive all the Certificate Blocks before any other
       processing can really be done.  (This is why they are sent
       first.)  Once that is done, any Certificate Block message that
       arrives is discarded.

   d.  Whenever a normal message arrives, we add (arrival sequence, hash
       of message) to our message queue.  If our hash table has an entry
       for the message's hash value, we increment its count by one;
       otherwise, we create a new entry with count = 1.  If the message
       queue is full, we roll the oldest messages off the queue by
       taking the oldest entry in the queue, and using it to index the
       hash table.  If that entry has count 1, we delete the entry from
       the hash table; otherwise, we decrement its count.  We then
       delete the oldest entry in the queue.

   e.  Whenever a Signature Block message arrives, we first check to see
       whether the First Message Number value is too old to still be of
       interest, or if another Signature Block with that First Message
       Number has already been received.  If so, we discard the
       Signature Block.  Otherwise, we check its signature and discard
       it if the signature is not valid.  A Signature Block contains a
       sequence of (message number, message hash) pairs.  For each pair,
       we first check to see whether the message hash is in the hash
       table.  If so, we write the (message number, message text) into
       the authenticated message queue.  Otherwise, we write the
       (message number, message hash) to the message number queue.  This
       generally involves rolling the oldest entry out of this queue:
       before this is done, that entry's hash value is again looked up
       in the hash table.  If a matching entry is found, the (message
       number, message text) pair is written to the authenticated
       message file.  In either case, the oldest entry is then
       discarded.

   f.  The result of this is a sequence of messages in the authenticated
       message file, each of which has been authenticated, and which are
       labeled with numbers showing their order of original
       transmission.

   One can see that this whole process is roughly linear in the number
   of messages, and also in the number of Signature Blocks received.
   The process is susceptible to flooding attacks; an attacker can send
   enough normal messages that the messages roll off their queue before
   their Signature Blocks can be processed.








Kelsey, et al.           Expires March 31, 2008                [Page 24]

Internet-Draft           Signed syslog Messages           September 2007


8.  Security Considerations

   Normal syslog event messages are unsigned and have most of the
   security attributes described in Section 8 of RFC xxxx [8].  This
   document also describes Certificate Blocks and Signature Blocks,
   which are signed syslog messages.  The Signature Blocks contain
   signature information for previously sent syslog event messages.  All
   of this information can be used to authenticate syslog messages and
   to minimize or obviate many of the security concerns described in RFC
   xxxx [8].

8.1.  Cryptographic Constraints

   As with any technology involving cryptography, it is advisable to
   check the current literature to determine whether any algorithms used
   here have been found to be vulnerable to attack.

   This specification uses Public Key Cryptography technologies.  The
   proper party or parties have to control the private key portion of a
   public-private key pair.  Any party that controls a private key can
   sign anything it pleases.

   Certain operations in this specification involve the use of random
   numbers.  An appropriate entropy source SHOULD be used to generate
   these numbers.  See RFC 4086 [13] and NIST SP 800-90 [3].

8.2.  Packet Parameters

   As an originator, it is advisable to avoid message lengths exceeding
   2048 octets.  Various problems might result if an originator were to
   send messages with a length greater than 2048 octets, because relays
   MAY truncate messages with lengths greater than 2048 octets which
   would make it impossible for collectors to validate a hash of the
   packet.  To increase the chance of interoperability, it tends to be
   best to be conservative with what you send but liberal in what you
   are able to receive.

   Originators need to rigidly enforce the correctness of message
   bodies.  Problems may arise if the collector does not fully accept
   the syslog packets sent from an originator, or if it has problems
   with the format of the Certificate Block or Signature Block messages.

   Collectors are not to malfunction in case they receive malformed
   syslog messages or messages containing characters other than those
   specified in this document.  In other words, they are to ignore such
   messages and continue working.





Kelsey, et al.           Expires March 31, 2008                [Page 25]

Internet-Draft           Signed syslog Messages           September 2007


8.3.  Message Authenticity

   Syslog does not strongly associate the message with the message
   originator.  That association is established by the collector upon
   verification of the Signature Block.  Before a Signature Block is
   used to ascertain the authenticity of an event message, it might be
   received, stored, and reviewed by a person or automated parser.  It
   is advisable not to assume a message is authentic until after a
   message has been validated by checking the contents of the Signature
   Block.

   With the Signature Block checking, an attacker may only forge
   messages if it can compromise the private key of the true originator.

8.4.  Replaying

   Event messages might be recorded and replayed by an attacker.  Using
   the information contained in the Signature Blocks, a reviewer can
   determine whether the received messages are the ones originally sent
   by an originator.  The reviewer can also identify messages that have
   been replayed.

8.5.  Reliable Delivery

   RFC wwww [10] can be used for the reliable delivery of syslog
   messages.  Event messages sent over UDP might be lost in transit.  A
   reviewer can pinpoint any messages sent by the originator but not
   received by the collector by reviewing the Signature Block
   information.  In addition, the information in subsequent Signature
   Blocks allows a reviewer to determine whether any Signature Block
   messages were lost in transit.

8.6.  Sequenced Delivery

   Syslog messages delivered over UDP might not only be lost, but also
   arrive out of sequence.  A reviewer can determine the original order
   of syslog messages and identify which messages were delivered out of
   order by examining the information in the Signature Block along with
   any timestamp information in the message.

8.7.  Message Integrity

   Syslog messages might be damaged in transit.  A review of the
   information in the Signature Block determines whether the received
   message was the intended message sent by the originator.  A damaged
   Signature Block or Certificate Block is evident because the collector
   will not be able to validate that it was signed by the originator.




Kelsey, et al.           Expires March 31, 2008                [Page 26]

Internet-Draft           Signed syslog Messages           September 2007


8.8.  Message Observation

   Event messages, Certificate Blocks, and Signature Blocks are all sent
   in plaintext.  This allows network administrators to read the message
   when sniffing the wire.  However, this also allows an attacker to see
   the contents of event messages and perhaps to use that information
   for malicious purposes.

8.9.  Man In The Middle Attacks

   It is conceivable that an attacker might intercept Certificate Block
   messages and insert its own Certificate information.  In that case,
   the attacker would be able to receive event messages from the actual
   originator and then relay modified messages, insert new messages, or
   delete messages.  It would then be able to construct a Signature
   Block and sign it with its own private key.  Network administrators
   need to verify that the key contained in the Payload Block is indeed
   the key being used on the actual originator.  If that is the case,
   then this MITM attack will not succeed.

8.10.  Denial of Service

   An attacker might send invalid Signature Block messages to overwhelm
   the collector's processing capability and consume all available
   resources.  For this reason, it can be appropriate to simply receive
   the Signature Block messages and process them only as time permits.

   An attacker might also just overwhelm a collector by sending more
   messages to it than it can handle.  Implementors are advised to
   consider features that minimize this threat, such as only accepting
   syslog messages from known IP addresses.

8.11.  Covert Channels

   Nothing in this protocol attempts to eliminate covert channels.  In
   fact, just about every aspect of syslog messages lends itself to the
   conveyance of covert signals.  For example, a collusionist could send
   odd and even PRI values to indicate Morse Code dashes and dots.













Kelsey, et al.           Expires March 31, 2008                [Page 27]

Internet-Draft           Signed syslog Messages           September 2007


9.  IANA Considerations

9.1.  Structured Data and syslog messages

   With regard to RFC xxxx [8], IANA is requested to add the following
   values to the registry entitled "syslog Structured Data id values":

          SD-ID         PARAM_NAME
          -----         ----------
          ssign
                        VER
                        RSID
                        SG
                        SPRI
                        GBC
                        FMN
                        CNT
                        HB
                        SIGN

          ssign-cert
                        VER
                        RSID
                        SG
                        SPRI
                        TBPL
                        INDEX
                        FLEN
                        FRAG
                        SIGN

   In addition, several fields need to be controlled by the IANA in both
   the Signature Block and the Certificate Block, as outlined in the
   following sections.

9.2.  Version Field

   IANA is requested to create three registries, each associated with a
   different subfield of the Version field of Signature Blocks and
   Certificate Blocks, described in Section 4.2.1 and Section 5.3.2.1,
   respectively.

   The first registry that IANA is requested to create is entitled
   "syslog-sign protocol version values".  It is for the values of the
   Protocol Version subfield.  The Protocol Version subfield constitutes
   the first 2 octets in the Version field.  New values shall be
   assigned by the IANA using the "IETF Consensus" policy defined in RFC
   2434 [4].  Assigned numbers are to be increased by 1, up to a maximum



Kelsey, et al.           Expires March 31, 2008                [Page 28]

Internet-Draft           Signed syslog Messages           September 2007


   value of "50".  Protocol Version numbers of "51" through "99" are
   vendor-specific; values in this range are not to be assigned by the
   IANA.

   IANA is requested to register the Protocol Version values shown
   below.

         VALUE                    PROTOCOL VERSION
         -----                    ----------------
         00                       Reserved
         01                       Defined in RFC yyyy

   The second registry that IANA is requested to create is entitled
   "syslog-sign hash algorithm values".  It is for the values of the
   Hash Algorithm subfield.  The Hash Algorithm subfield constitutes the
   third octet in the Version field Signature Blocks and Certificate
   Blocks.  New values shall be assigned by the IANA using the "IETF
   Consensus" policy defined in RFC 2434 [4].  Assigned values are to be
   increased by 1, up to a maximum value of "9".  The values are
   registered relative to the Protocol Version.  This means that the
   same Hash Algorithm value can be reserved for different Protocol
   Versions, possibly referring to a different hash algorithm each time.
   This makes it possible to deal with future scenarios in which the
   single octet representation becomes a limitation, as more Hash
   Algorithms can be supported by defining additional Protocol Versions
   that implementations might support concurrently.

   IANA is requested to register the Hash Algorithm values shown below.

         VALUE     PROTOCOL VERSION     HASH ALGORITHM
         -----     ----------------     --------------
         0         01                   Reserved
         1         01                   SHA1
         2         01                   SHA256

   The third registry that IANA is requested to create is entitled
   "syslog-sign signature scheme values".  It is for the values of the
   Signature Scheme subfield.  The Signature Scheme subfield constitutes
   the fourth octet in the Version field of Signature Blocks and
   Certificate Blocks.  New values shall be assigned by the IANA using
   the "IETF Consensus" policy defined in RFC 2434 [4].  Assigned values
   are to be increased by 1, up to a maximum value of "9".  This means
   that the same Signature Scheme value can be reserved for different
   Protocol Versions, possibly in each case referring to a different
   Signature Scheme each time.  This makes it possible to deal with
   future scenarios in which the single octet representation becomes a
   limitation, as more Signature Schemes can be supported by defining
   additional Protocol Versions that implementations might support



Kelsey, et al.           Expires March 31, 2008                [Page 29]

Internet-Draft           Signed syslog Messages           September 2007


   concurrently.

   IANA is requested to register the Signature Scheme values shown
   below.

         VALUE     PROTOCOL VERSION    SIGNATURE SCHEME
         -----     ----------------    ----------------
         0         01                  Reserved
         1         01                  OpenPGP DSA

9.3.  SG Field

   IANA is requested to create a registry entitled "syslog-sign sg field
   values".  It is for values of the SG Field as defined in
   Section 4.2.3.  New values shall be assigned by the IANA using the
   "IETF Consensus" policy defined in RFC 2434 [4].  Assigned values are
   to be incremented by 1, up to a maximum value of "7".  Values "8" and
   "9" shall be left as vendor specific and shall not be assigned by the
   IANA.

   IANA is requested to register the SG Field values shown below.

         VALUE     MEANING
         -----     -------
         0         per RFC yyyy
         1         per RFC yyyy
         2         per RFC yyyy
         3         per RFC yyyy

9.4.  Key Blob Type

   IANA is requested to create a registry entitled "syslog-sign key blob
   type values".  It is to register one-character identifiers for the
   key blob type, per Section 5.2.  New values shall be assigned by the
   IANA using the "IETF Consensus" policy defined in RFC 2434 [4].
   Uppercase letters may be assigned as values.  Lowercase letters are
   left as vendor specific and shall not be assigned by the IANA.

   IANA is requested to register the key blob type values shown below.

      VALUE     KEY BLOB TYPE
      -----     ------------
      'C'       a PKIX certificate
      'P'       an OpenPGP certificate
      'K'       the public key whose corresponding private key is used to sign the messages
      'N'       no key information sent, key is predistributed
      'U'       installation-specific key exchange information




Kelsey, et al.           Expires March 31, 2008                [Page 30]

Internet-Draft           Signed syslog Messages           September 2007


10.  Working Group

   The working group can be contacted via the mailing list:

         syslog@ietf.org

   The current Chairs of the Working Group can be contacted at:

         Chris Lonvick
         Cisco Systems
         Email: clonvick@cisco.com

         David Harrington
         Huawei Technologies (USA)
         Email: ietfdbh@comcast.net
                dharrington@huawei.com
         Tel: +1-603-436-8634


































Kelsey, et al.           Expires March 31, 2008                [Page 31]

Internet-Draft           Signed syslog Messages           September 2007


11.  Acknowledgements

   The authors wish to thank Alex Brown, Chris Calabrese, Steve Chang,
   Carson Gaspar, Drew Gross, David Harrington, Chris Lonvick, Darrin
   New, Marshall Rose, Holt Sorenson, Rodney Thayer, Andrew Ross, Rainer
   Gerhards, Albert Mietus, and the many Counterpane Internet Security
   engineering and operations people who commented on various versions
   of this proposal.











































Kelsey, et al.           Expires March 31, 2008                [Page 32]

Internet-Draft           Signed syslog Messages           September 2007


12.  References

12.1.  Normative References

   [1]   National Institute of Standards and Technology, "Digital
         Signature Standard", FIPS PUB 186-2, January 2000, <http://
         csrc.nist.gov/publications/fips/fips186-2/
         fips186-2-change1.pdf>.

   [2]   National Institute of Standards and Technology, "Secure Hash
         Standard", FIPS PUB 180-2, August 2002, <http://csrc.nist.gov/
         publications/fips/fips180-2/fips180-2.pdf>.

   [3]   National Institute of Standards and Technology, "NIST Special
         Publication 800-90: Recommendation for Random Number Generation
         using Deterministic Random Bit Generators", June 2006, <http://
         csrc.nist.gov/publications/nistpubs/800-90/
         SP800-90_DRBG-June2006-final.pdf>.

   [4]   Narten, T. and H. Alvestrand, "Guidelines for Writing an IANA
         Considerations Section in RFCs", BCP 26, RFC 2434,
         October 1998.

   [5]   Callas, J., Donnerhacke, L., Finney, H., and R. Thayer,
         "OpenPGP Message Format", RFC 2440, November 1998.

   [6]   Blumenthal, U. and B. Wijnen, "User-based Security Model (USM)
         for version 3 of the Simple Network Management Protocol
         (SNMPv3)", RFC 3414, December 2002.

   [7]   Josefsson, S., "The Base16, Base32, and Base64 Data Encodings",
         RFC 4648, October 2006.

   [8]   Gerhards, R., "The syslog Protocol,
         draft-ietf-syslog-protocol-23.txt (work in progress)",
         September 2007.

   [9]   Okmianski, A., "Transmission of syslog Messages over UDP,
         draft-ietf-syslog-transport-udp-12.txt (work in progress)",
         September 2007.

   [10]  Miao, F. and M. Yuzhi, "TLS Transport Mapping for syslog,
         draft-ietf-syslog-transport-tls-10.txt (work in progress)",
         May 2007.







Kelsey, et al.           Expires March 31, 2008                [Page 33]

Internet-Draft           Signed syslog Messages           September 2007


12.2.  Informative References

   [11]  Bradner, S., "Key words for use in RFCs to Indicate Requirement
         Levels", BCP 14, RFC 2119, March 1997.

   [12]  Klyne, G. and C. Newman, "Date and Time on the Internet:
         Timestamps", RFC 3339, July 2002.

   [13]  Eastlake, D., Schiller, J., and S. Crocker, "Randomness
         Recommendations for Security", RFC 4086, June 2005.









































Kelsey, et al.           Expires March 31, 2008                [Page 34]

Internet-Draft           Signed syslog Messages           September 2007


Authors' Addresses

   John Kelsey
   NIST

   Email: john.kelsey@nist.gov


   Jon Callas
   PGP Corporation

   Email: jon@callas.org


   Alexander Clemm
   Cisco Systems

   Email: alex@cisco.com

































Kelsey, et al.           Expires March 31, 2008                [Page 35]

Internet-Draft           Signed syslog Messages           September 2007


Full Copyright Statement

   Copyright (C) The IETF Trust (2007).

   This document is subject to the rights, licenses and restrictions
   contained in BCP 78, and except as set forth therein, the authors
   retain all their rights.

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND
   THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Intellectual Property

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.


Acknowledgment

   Funding for the RFC Editor function is provided by the IETF
   Administrative Support Activity (IASA).





Kelsey, et al.           Expires March 31, 2008                [Page 36]


