<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc comments="no" ?>
<?rfc inline="no" ?>
<?rfc editing="no" ?>
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="std" docName="draft-mrw-nat66-02" ipr="trust200902">
  <front>
    <title abbrev="NPTv6">IPv6-to-IPv6 Network Prefix Translation</title>
    <author fullname="Margaret Wasserman" initials="M." surname="Wasserman">
      <organization>Painless Security</organization>
      <address>
        <postal>
          <street></street>
          <city>North Andover</city>
          <region>MA</region>
          <code>01845</code>
          <country>USA</country>
        </postal>
        <phone>+1 781 405 7464</phone>
        <email>mrw@painless-security.com</email>
        <uri>http://www.painless-secuirty.com</uri>
      </address>
    </author>
    <author fullname="Fred Baker" initials="F.J." surname="Baker">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street></street>
          <city>Santa Barbara</city>
          <code>93117</code>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1-408-526-4257</phone>
        <email>fred@cisco.com</email>
      </address>
    </author>
    <date year="2010" />
    <area>Transport</area>
    <workgroup></workgroup>
    <abstract>
      <t>This document describes a stateless, transport-agnostic IPv6-to-IPv6
      Network Prefix Translation (NPTv6) function that provides the address
      independence benefit associated with IPv4-to-IPv4 NAT (NAT44), and in
      addition provides a 1:1 relationship between addresses in the "inside"
      and "outside" prefixes, preserving end to end reachability at the
      network layer.</t>
    </abstract>
    <note title="Requirements Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>
  <middle>
    <section title="Introduction">
      <t>This document describes a stateless IPv6-to-IPv6 Network Prefix
      Translation (NPTv6) function, designed to provide address independence
      to the edge network. It is transport-agnostic with respect to transports
      that don't checksum the IP header, such as SCTP or DCCP, and to
      transports that use the TCP/UDP pseudo-header and <xref
      target="RFC1071">checksum</xref>.</t>
      <t>This has several ramifications: <list style="symbols">
          <t>Any security benefit that NAT44 might offer is not present in
          NPTv6, necessitating the use of a firewall to obtain those benefits
          if desired. An example of such a firewall is described in <xref
          target="I-D.ietf-v6ops-cpe-simple-security"></xref>.</t>
          <t>End to end reachability is preserved, although the address used
          "inside" the edge network differs from the address used "outside"
          the edge network. This has implications for application referrals
          and other uses of Internet layer addresses.</t>
          <t>If there are multiple identically-configured prefix translators
          between two networks, there is no need for them to exchange dynamic
          state, as there is no dynamic state - the algorithmic translation
          will be identical across each of them. The network can therefore
          asymmetrically route, load-share, and fail-over among them without
          issue.</t>
          <t>Since translation is 1:1 at the network layer, there is no need
          to modify port numbers or other transport parameters.</t>
        </list></t>
      <section title="What is Address Independence?">
        <t>For the purposes of this document, IPv6 Address Independence
        consists of the following set of properties: <list style="hanging">
            <t hangText="From the perspective of the edge network:"><list
                style="symbols">
                <t>The IPv6 addresses used inside the local network (for
                interfaces, access lists, and logs) do not need to be
                renumbered if the upstream network changes a site's external
                prefix.</t>
                <t>The IPv6 addresses used inside the edge network (for
                interfaces, access lists, and logs) or within other upstream
                networks (such as when multihoming) do not need to be
                renumbered when a site adds, drops, or changes upstream
                networks.</t>
                <t>It is not necessary for an administration to convince an
                upstream network to route its internal IPv6 prefixes, or for
                it to advertise prefixes derived from other upstream networks
                into it.</t>
                <t>Unless it wants to optimize routing between multiple
                upstream networks in the process of multihoming, there is
                therefore no need for a BGP exchange with the upstream
                network.</t>
              </list></t>
            <t hangText="From the perspective of the upstream network:"><list
                style="symbols">
                <t>IPv6 addresses used by the edge network are guaranteed to
                have a provider-allocated prefix, eliminating the need and
                concern for <xref target="RFC2827">BCP 38</xref> ingress
                filtering and the advertisement of customer-specific
                prefixes.</t>
              </list></t>
          </list></t>
        <t>Thus, address independence has ramifications for the edge network,
        networks it directly connects with (especially its upstream networks),
        and for the Internet as a whole. The desire for address independence
        has been a primary driver for IPv4 NAT deployment in medium to
        large-sized enterprise networks, including NAT deployments in
        enterprises that have plenty of IPv4 provider-independent address
        space (from IPv4 "swamp space"). It has also been a driver for edge
        networks to become members of RIR communities, seeking to obtain BGP
        Autonomous System Numbers and provider-independent prefixes, and as a
        result has been one of the drivers of the explosion of the IPv4 route
        table. Service providers have stated that the lack of address
        independence from their customers has been a negative incentive to
        deployment, due to the impact of customer routing expected in their
        networks.</t>
        <t>The <xref target="RFC4864">Local Network Protection</xref> document
        discusses a related concept called "Address Autonomy" as a benefit of
        NAT44. <xref target="RFC4864"></xref> indicates that address autonomy
        can be achieved by the simultaneous use of global addresses on all
        nodes within a site that need external connectivity, and Unique Local
        Addresses (ULAs) <xref target="RFC4193"></xref> for all internal
        communication. However, this solution fails to meet the requirement
        for address independence, because if an ISP renumbering event occurs,
        all of the hosts, routers, DHCP servers, ACLs, firewalls and other
        internal systems that are configured with global addresses from the
        ISP will need to be renumbered before global connectivity is fully
        restored.</t>
        <t>The use of IPv6 Provider Independent (PI) addresses has also been
        suggested as a means to fulfill the address independence requirement.
        However, this solution requires that an enterprise qualify to receive
        a PI assignment and persuade their ISP to install specific routes for
        the enterprise's PI addresses. There are a number of practical issues
        with this approach, especially if there is a desire to route to a
        number of geographically and topologically diverse set of sites, which
        can sometimes involve coordinating with several ISPs to route portions
        of a single PI prefix. These problems have caused numerous enterprises
        with plenty of IPv4 swamp space to choose to use IPv4 NAT for part, or
        substantially all, of their internal network instead of using their
        provider-independent address space.</t>
      </section>
      <section title="NPTv6 Applicability">
        <t>NPTv6 provides a simple and compelling solution to meet the Address
        Independence requirement in IPv6. The address independence benefit
        stems directly from the translation function of the network prefix
        translator. To avoid as many of the issues associated with NAT44 as
        possible, NPTv6 is defined to include a two-way, checksum-neutral,
        algorithmic translation function, and nothing else.</t>
        <t>NPTv6 does not include a port mapping function, and the defined
        address mapping mechanism is checksum-neutral. This avoids the need
        for a NPTv6 Translator to re-write transport layer headers, making it
        feasible to deploy new or improved transport layer protocols without
        upgrading NPTv6 Translators. Because NPTv6 does not involve re-writing
        transport-layer headers, NPTv6 will not interfere with encryption of
        the full IP payload in many cases.</t>
        <t>The default NPTv6 address mapping mechanism is purely algorithmic,
        so NPTv6 translators do not need to maintain per-node or
        per-connection state, allowing deployment of more robust and adaptive
        networks than can be deployed using NAT44. Since the default NPTv6
        mapping can be performed in either direction, it does not interfere
        with inbound connection establishment, thus allowing internal nodes to
        participate in direct Peer-to-Peer applications without the
        application layer overhead one finds in many IPv4 Peer-to-Peer
        applications.</t>
        <t>Although NPTv6 compares favorably to NAT44 in several ways, it does
        not eliminate all of the architectural problems associated with IPv4
        NAT, as described in <xref target="RFC2993"></xref>. NPTv6 involves
        modifying IP headers in transit, so it is not compatible with security
        mechanisms, such as the IPsec Authentication Header, that provide
        integrity protection for the IP header. NPTv6 may interfere with the
        use of application protocols that transmit IP addresses in the
        application-specific portion of the IP packet. These applications
        currently require application layer gateways (ALGs) to work correctly
        through NAT44 devices, and similar ALGs may be required for these
        applications to work through NPTv6 Translators. The use of separate
        internal and external prefixes creates complexity for DNS deployment,
        due the desire for internal nodes to communicate with other internal
        nodes using internal addresses, while external nodes need to obtain
        external addresses to communicate with the same nodes. This frequently
        results in the deployment of "split DNS", which may add complexity to
        network configuration.</t>
        <t>There are significant technical impacts associated with the
        deployment of any prefix translation mechanism, including NPTv6, and
        we strongly encourage anyone who is considering the implementation or
        deployment of NPTv6 to read <xref target="RFC4864"></xref>, and to
        carefully consider the alternatives described in that document, some
        of which may cause fewer problems than NPTv6.</t>
      </section>
    </section>
    <section title="NPTv6 Overview">
      <t>NPTv6 may be implemented in an IPv6 router to map one IPv6 address
      prefix to another IPv6 prefix as each IPv6 packet transits the router. A
      router that implements a NPTv6 prefix translation function is referred
      to as an NPTv6 Translator.</t>
      <section title="NPTv6: the simplest case">
        <t>In its simplest form, a NPTv6 Translator interconnects two network
        links, one of which is an "internal" network link attached to a leaf
        network within a single administrative domain, and the other of which
        is an "external" network with connectivity to the global Internet. All
        of the hosts on the internal network will use addresses from a single,
        locally-routed prefix, and those addresses will be translated to/from
        addresses in a globally-routable prefix as IP packets transit the
        NPTv6 Translator. The lengths of these two prefixes will be
        functionally the same; if they differ, the longer of the two will
        limit the ability to use subnets in the shorter.</t>
        <figure anchor="simpleNPTv6" title="A simple translator">
          <artwork align="center"><![CDATA[ 
External Network:  Prefix = 2001:0DB8:0001:/48 
    --------------------------------------
                      |
                      |
               +-------------+
               |     NPTv6   |
               |  Translator |
               +-------------+
                      |
                      |
    --------------------------------------
Internal Network:  Prefix = FD01:0203:0405:/48
]]></artwork>
        </figure>
        <t><xref target="simpleNPTv6"></xref> shows a NPTv6 Translator
        attached to two networks. In this example, the internal network uses
        <xref target="RFC4193">IPv6 Unique Local Addresses (ULAs)</xref> to
        represent the internal IPv6 nodes, and the external network uses
        globally routable IPv6 addresses to represent the same nodes.</t>
        <t>When a NPTv6 Translator forwards packets in the "outbound"
        direction, from the internal network to the external network, NPTv6
        overwrites the IPv6 source prefix (in the IPv6 header) with a
        corresponding external prefix. When packets are forwarded in the
        "inbound" direction, from the external network to the internal
        network, the IPv6 destination prefix is overwritten with a
        corresponding prefix internal prefix. Using the prefixes shown in the
        diagram above, as an IP packet passes through the NPTv6 Translator in
        the outbound direction, the source prefix (FD01:0203:0405:/48) will be
        overwritten with the external prefix (2001:0DB8:0001:/48). In an
        inbound packet, the destination prefix (2001:0DB8:0001:/48) will be
        overwritten with the internal prefix (FD01:0203:0405:/48). In both
        cases, it is the local IPv6 prefix that is overwritten; the remote
        IPv6 prefix remains unchanged. Nodes on the internal network are said
        to be "behind" the NPTv6 Translator.</t>
      </section>
      <section title="NPTv6 between peer networks">
        <t>NPTv6 can also be used between two private networks. In these
        cases, both networks may use ULA prefixes, with each subnet in one
        network mapped into a corresponding subnet in the other network, and
        vice versa. Or, each network may use ULA prefixes for internal
        addressing, and global unicast addresses on the other network.</t>
        <figure anchor="flow" title="Flow of Information in Translation">
          <artwork align="center"><![CDATA[ 
    Internal Prefix = FD01:4444:5555:/48
    --------------------------------------
         V            |      External Prefix
         V            |      2001:0DB8:6666:/48
         V        +---------+      ^
         V        |  NPTv6  |      ^
         V        |  Device |      ^
         V        +---------+      ^
External Prefix       |            ^
2001:0DB8:0001:/48    |            ^
    --------------------------------------
    Internal Prefix = FD01:0203:0405:/48
]]></artwork>
        </figure>
      </section>
      <section title="NPTv6 redundnacy and load-sharing">
        <t>In some cases, more than one NPTv6 Translator may be attached to a
        network, as show in <xref target="parallel"></xref>. In such cases,
        NPTv6 Translators are configured with the same internal and external
        prefixes. Since there is only one translation, even though there are
        multiple translators, they map only one external address (prefix and
        IID) to the internal address.</t>
        <figure anchor="parallel" title="Parallel Translators">
          <artwork align="center"><![CDATA[ 
External Network:  Prefix = 2001:0DB8:0001:/48 
    --------------------------------------
           |                      |
           |                      |
    +-------------+        +-------------+
    |  NPTv6      |        |  NPTv6      |
    |  Translator |        |  Translator |
    |   #1        |        |   #2        |
    +-------------+        +-------------+
           |                      |
           |                      |
    --------------------------------------
Internal Network:  Prefix = FD01:0203:0405:/48
]]></artwork>
        </figure>
      </section>
      <section title="NPTv6 multihoming">
        <figure anchor="distinct"
                title="Parallel Translators with different upstream networks">
          <artwork align="center"><![CDATA[ 
   External Network #1:          External Network #2:
Prefix = 2001:0DB8:0001:/48    Prefix = 2001:0DB8:5555:/48
---------------------------    --------------------------
                |                      |
                |                      |
         +-------------+        +-------------+
         |  NPTv6      |        |  NPTv6      |
         |  Translator |        |  Translator |
         |   #1        |        |   #2        |
         +-------------+        +-------------+
                |                      |
                |                      |
         --------------------------------------
     Internal Network:  Prefix = FD01:0203:0405:/48
]]></artwork>
        </figure>
        <t>When multihoming, NPTv6 Translators are attached to an internal
        network, as show in <xref target="distinct"></xref>, but connected to
        different external networks. In such cases, NPTv6 Translators are
        configured with the same internal prefix, but different external
        prefixes. Since there are multiple translations, they map multiple
        external addresses (prefix and IID) to the common internal address. A
        system within the edge network is unable to determine which external
        address it is using.</t>
        <t>Multihoming in this sense has one negative feature as compared with
        multihoming with a provider-independent address; when routes change
        between NPTv6 Translators, since the upstream network changes, the
        prefix used in shifting sessions changes. This obviously causes them
        to fail. This is not expected to be a major real issue, however, in
        networks where routing is generally stable.</t>
      </section>
      <section title="Mapping with No Per-Flow State">
        <t>When NPTv6 is used as described in this document, no per-node or
        per-flow state is maintained in the NPTv6 Translator. Both inbound and
        outbound packets are translated algorithmically, using only
        information found in the IPv6 header. Due to this property, NPTv6's
        two-way, algorithmic address mapping can support both outbound and
        inbound connection establishment without the need for state-priming or
        rendezvous mechanisms, or the maintenance of mapping state. This is a
        significant improvement over NAT44 devices, but it also has
        significant security implications which are described in the Security
        Considerations section.</t>
      </section>
      <section title="Checksum-Neutral Mapping">
        <t>When a change is made to one of the IP header fields in the IPv6
        pseudo-header checksum (such as one of the IP addresses), the checksum
        field in the transport layer header may become invalid. Fortunately,
        an incremental change in the area covered by the Internet standard
        checksum <xref target="RFC1071"></xref> will result in a well-defined
        change to the checksum value <xref target="RFC1624"></xref>. So, a
        checksum change caused by modifying part of the area covered by the
        checksum can be corrected by making a complementary change to a
        different 16-bit field covered by the same checksum.</t>
        <t>The NPTv6 mapping mechanisms described in this document are
        checksum-neutral, which means that they result in IP headers that will
        generate the same IPv6 pseudo-header checksum when the checksum is
        calculated using the standard Internet checksum algorithm <xref
        target="RFC1071"></xref>. Any changes that are made during translation
        of the IPv6 prefix are offset by changes to other parts of the IPv6
        address. This results in transport layers that use the Internet
        checksum (such as TCP and UDP) calculating the same IPv6 pseudo header
        checksum for both the internal and external forms of the same packet,
        which avoids the need for the NPTv6 Translator to modify those
        transport layer headers to correct the checksum value.</t>
      </section>
    </section>
    <section title="NPTv6 Algorithmic Specification">
      <t>The <xref target="RFC4291"></xref> IPv6 Address is reproduced for
      clarity in <xref target="address"></xref>.</t>
      <figure anchor="address"
              title="Enumeration of the IPv6 Address [RFC4291]">
        <artwork align="center"><![CDATA[ 
 0    15 16   31 32   47 48   63 64   79 80   95 96  111 112  127
+-------+-------+-------+-------+-------+-------+-------+-------+
|     Routing Prefix     |Subnet|   Interface Identifier (IID)  |
+-------+-------+-------+-------+-------+-------+-------+-------+
]]></artwork>
      </figure>
      <section anchor="configuration" title="NPTv6 configuration calculations">
        <t>When an NPTv6 Translation function is configured, it is configured
        with <list style="symbols">
            <t>one or more "internal" interfaces with their "internal" routing
            domain prefixes, and</t>
            <t>one or more "external" interfaces with their "external" routing
            domain prefixes.</t>
          </list></t>
        <t>In the simple case, there is one of each. If a single router
        provides NPTv6 translation services between a multiplicity of domains
        (as might be true when multihoming), each internal/external pair must
        be thought of as a separate NPTv6 Translator from the perspective of
        this specification.</t>
        <t>When an NPTv6 Translator is configured, the translation function
        first ensures that the internal and external prefixes are the same
        length, if necessary by extending the shorter of the two with zeroes.
        These two prefixes will be used in the prefix translation function
        described in <xref target="leaving"></xref> and <xref
        target="returning"></xref>.</t>
        <t>They are then zero-extended to /64, for the purposes of a
        calculation. The translation function calculates the ones-complement
        sum of the 16 bit words of the /64 external prefix and the /64
        internal prefix. It then calculates the difference between these
        values: external minus internal. This value, called the "adjustment",
        is effectively constant for the lifetime of the NPTv6 Translator
        configuration, and used in per-packet processing.</t>
      </section>
      <section anchor="leaving"
               title="NPTv6 translation, internal network to external network">
        <t>When a datagram passes through the NPTv6 Translator from an
        internal to an external network, its IPv6 Source Address is changed in
        two ways: <list style="symbols">
            <t>The internal prefix is overwritten with the external prefix,
            and</t>
            <t>A 16-bit word of the address has the "adjustment" added to it
            using one's complement arithmetic. If the result is 0xFFFF, it is
            overwritten as zero. The choice of word is as specified in <xref
            target="slash48"></xref> or <xref target="slash56"></xref> as
            appropriate.</t>
          </list></t>
      </section>
      <section anchor="returning"
               title="NPTv6 translation, external network to internal network">
        <t>When a datagram passes through the NPTv6 Translator from an
        internal to an external network, its IPv6 Destination Address is
        changed in two ways: <list style="symbols">
            <t>The external prefix is overwritten with the internal prefix,
            and</t>
            <t>A 16-bit word of the address has the "adjustment" subtracted
            from it (bitwise inverted and added to it) it using one's
            complement arithmetic. If the result is 0xFFFF, it is overwritten
            as zero. The choice of word is as specified in <xref
            target="slash48"></xref> or <xref target="slash56"></xref> as
            appropriate.</t>
          </list></t>
      </section>
      <section anchor="slash48" title="NPTv6 with a /48 or shorter prefix">
        <t>When a NPTv6 Translator is configured with internal and external
        prefixes that are 48 bits in length (a /48) or shorter, the adjustment
        MUST be added to or subtracted from bits 48..63 of the address.</t>
        <t>This mapping results in no modification of the Interface Identifier
        (IID), which is held in the lower half of the IPv6 address, so it will
        not interfere with future protocols that may use unique IIDs for node
        identification.</t>
        <t>NPTv6 Translator implementations MUST implement the /48
        mapping.</t>
      </section>
      <section anchor="slash56" title="NPTv6 with a /49 or longer prefix">
        <t>When a NPTv6 Translator is configured with internal and external
        prefixes that are longer than 48 bits in length (such as a /52, /56,
        or /60), the adjustment must be added to or subtracted from one of the
        words in bits 64..79, 80..95, 96..111, or 112..127 of the address.
        While the choice of word is immaterial as long as it is consistent,
        for consistency's sake, these words MUST be inspected in that
        sequence, and the first that is not initially 0xFFFF chosen.</t>
        <t>NPTv6 Translator implementations SHOULD implement the mapping for
        longer prefixes.</t>
      </section>
      <section anchor="example48" title="/48 Prefix Mapping Example">
        <t>For the network shown in <xref target="simpleNPTv6"></xref>, the
        Internal Prefix is FD01:0203:0405:/48, and the External Prefix is
        2001:0DB8:0001:/48</t>
        <t>If a node with internal address FD01:0203:0405:0001::1234 sends an
        outbound packet through the NPTv6 Translator, the resulting external
        address will be 2001:0DB8:0001:D550::1234. The resulting address is
        obtained by calculating the checksum of both the internal and external
        48-bit prefixes, subtracting the internal prefix from the external
        prefix using one's complement arithmetic to calculate the
        "adjustment", and adding the adjustment to the 16-bit subnet field (in
        this case 0x0001).</t>
        <t>To show the work:</t>
        <t>The one's complement checksum of FD01:0203:0405 is 0xFCF5. The
        one's complement checksum of 2001:0DB8:0001 is 0xD245. Using one's
        complement math, 0xD245 - 0xFCF5 = 0xD54F. The subnet in the original
        packet is 0x0001. Using one's complement math, 0x0001 + 0xD54F =
        0xD550. Since 0xD550 != 0xFFFF, it is not changed to 0x0000.</t>
        <t>So, the value 0xD550 is written in the 16-bit subnet area,
        resulting in a mapped external address of
        2001:0DB8:0001:D550::1234.</t>
        <t>When a response packet is received, it will contain the destination
        address 2001:0DB8:0001:D550::0001, which will be mapped using the
        inverse mapping algorithm, back to FD01:0203:0405:0001::1234.</t>
        <t>In this case, the difference between the two prefixes will be
        calculated as follows:</t>
        <t>Using one's complement math, 0xFCF5 - 0xD245 = 0x2AB0. The subnet
        in the original packet = 0xD550. Using one's complement math, 0xD550 +
        0x2AB0 = 0x0001. Since 0x0001 != 0xFFFF, it is not changed to
        0x0000.</t>
        <t>So the value 0x0001 is written into the subnet field, and the
        internal value of the subnet field is properly restored.</t>
      </section>
      <section title="Address Mapping for Longer Prefixes">
        <t>If the prefix being mapped is longer than 48 bits, the algorithm is
        slightly more complex. A common case will be that the internal and
        external prefixes are of different length. In such a case, the shorter
        prefix is zero-extended to the length of the longer as described in
        <xref target="configuration"></xref> for the purposes of overwriting
        the prefix. Then, they are both zero-extended to 64 bits to facilitate
        one's complement arithmetic. The "adjustment" is calculated using
        those 64 bit prefixes.</t>
        <t>For example if the internal prefix is a /48 ULA and the external
        prefix is a /56 provider-allocated prefix, the ULA becomes a /56 with
        zeros in bits 48..55. For purposes of one's complement arithmetic,
        they are then both zero-extended to 64 bits. A side-effect of this is
        that a subset of the subnets possible in the shorter prefix are
        untranslatable. While the security value of this is debatable, the
        administration may choose to use them for subnets that it knows need
        no external accessibility.</t>
        <t>We then find the first word in the IID that does not have the value
        0xFFFF, trying bits 64..79, and then 80..95, 96..111, and finally
        112..127. We perform the same calculation (with the same proof of
        correctness) as in <xref target="example48"></xref>, but applying it
        to that word.</t>
        <t>Although any 16-bit portion of an IPv6 IID could contain 0xFFFF, an
        IID of all-ones is a reserved anycast identifier that should not be
        used on the network <xref target="RFC2526"></xref>. If a NPTv6
        Translator discovers a packet with an IID of all-zeros while
        performing address mapping, that packet MUST be dropped, and an ICMPv6
        Parameter Problem error SHOULD be generated <xref
        target="RFC4443"></xref>.</t>
        <t>Note: this mechanism does involve modification of the IID; it may
        not be compatible with future mechanisms that use unique IIDs for node
        identification.</t>
      </section>
    </section>
    <section title="Implications of Network Address Translator Behavioral Requirements">
      <section title="Prefix Configuration and generation">
        <t>NPTv6 Translators MUST support manual configuration of internal and
        external prefixes, and MUST NOT place any restrictions on those
        prefixes except that they be valid IPv6 unicast prefixes as described
        in <xref target="RFC4291"></xref>.</t>
        <t>NPTv6 Translators that do not have a manually configured internal
        prefix SHOULD randomly generate a ULA prefix for the internal network
        and advertise that prefix in router advertisements. NPTv6 Translators
        with more than one internal interface SHOULD assign a (non-0xFFFF)
        subnet number to each link, and include the subnet number in router
        advertisements on the corresponding link. NPTv6 Translators that
        generate a ULA prefix MUST generate the prefix using a random number
        as described in RFC4291 <xref target="RFC4193"></xref>, and SHOULD
        store the randomly generated prefix in non-volatile storage for
        continued use.</t>
      </section>
      <section title="NAT Behavioral Requirements">
        <t>NPTv6 Translators MUST support hairpinning behavior, as defined in
        the NAT Behavioral Requirements for UDP document <xref
        target="RFC4787"></xref>. This means that when a NPTv6 Translator
        receives a packet on the internal interface that has a destination
        address that matches the site's external prefix, it will translate the
        packet and forward it internally. This allows internal nodes to reach
        other internal nodes using their external, global addresses when
        necessary.</t>
        <t>Conceptually, the datagram leaves the domain (is translated as
        described in <xref target="leaving"></xref>), and returns (is again
        translated as described in <xref target="returning"></xref>). As a
        result, the datagram exchange will be through the NPTv6 Translator in
        both directions for the lifetime of the session. The alternative would
        be to require the NPTv6 Translator to drop the datagram, forcing the
        sender to use the correct internal prefix for its peer. Performing
        only the external-to-internal translation results in the datagram
        being sent from the untranslated internal address of the source to the
        translated and therefore internal address of its peer, which would
        enable the session to bypass the NPTv6 Translator for future
        datagrams. It would also mean that the original sender would be
        unlikely to recognize the response when it arrived.</t>
        <t>Because NPTv6 does not perform port mapping and uses a one-to-one,
        reversible mapping algorithm, none of the other NAT behavioral
        requirements apply to NPTv6.</t>
      </section>
    </section>
    <section title="Implications for Applications">
      <t>The use of NPTv6 Transition technology makes a capability available
      to Applications (and the networks that contain them) that is not readily
      possible in a NAT44 network. This is the ability to position an
      externally-accessible application within the "internal" network. In an
      IPv4 network using NAT44, externally-accessible application must be
      positioned on systems with global addresses, forcing the edge network to
      obtain global address allocation; if the application can be in the
      translated routing domain, it automatically has an address in each of
      its upstream prefixes without the edge network obtaining such. However,
      there must be a means for the application to know what addresses are
      usable. Reasons include at least advertisement in DNS (which might be
      done statically if DNS is directly maintained by the administration, or
      from the end system if Dynamic DNS is in use). If referrals and other
      uses of network layer addressing do not use names, then the application
      needs a means to determine what addresses are relevant, whether from DNS
      or another means.</t>
      <t>The means of address discovery is not within the scope of this
      specification.</t>
    </section>
    <section title="A Note on Port Mapping">
      <t>In addition to overwriting IP addresses when packets are forwarded,
      NAPT44 devices overwrite the source port number in outbound traffic, and
      the destination port number in inbound traffic. This mechanism is called
      "port mapping".</t>
      <t>The major benefit of port mapping is that it allows multiple
      computers to share a single IPv4 address. A large number of internal
      IPv4 addresses (typically from the 10.0.0.0/8 prefix) can be mapped into
      a single external, globally routable IPv4 address, with the local port
      number used to identify which internal node should receive each inbound
      packet. This address amplification feature should not be needed in
      IPv6.</t>
      <t>Since port mapping requires re-writing a portion of the transport
      layer header, it requires NAPT44 devices to be aware of all of the
      transport protocols that they forward, thus stifling the development of
      new and improved transport protocols and preventing the use of IPsec
      encryption. Modifying the transport layer header is incompatible with
      security mechanisms that encrypt the full IP payload, and restricts the
      NAPT44 to forwarding transport layers that use weak checksum algorithms
      that are easily recalculated in routers.</t>
      <t>Since there is significant detriment caused by modifying transport
      layer headers and very little, if any, benefit to the use of port
      mapping in IPv6, NPTv6 Translators that comply with this specification
      MUST NOT perform port mapping.</t>
    </section>
    <section title="Security Considerations">
      <t>When NPTv6 is deployed using either of the two-way, algorithmic
      mappings defined in the document, it allows direct inbound connections
      to internal nodes. While this can be viewed as a benefit of NPTv6 vs.
      NAT44, it does open internal nodes to attacks that would be more
      difficult in a NAT44 network. Although this situation is not
      substantially worse, from a security standpoint, than running IPv6 with
      no NAT, some enterprises may assume that a NPTv6 Translator will offer
      similar protection to a NAT44 device. For this reason, it is RECOMMENDED
      that NPTv6 Translators also implement firewall functionality such as
      described in <xref target="I-D.ietf-v6ops-cpe-simple-security"></xref>,
      with appropriate configuration options including turning it on or
      off.</t>
    </section>
    <section title="IANA Considerations">
      <t>This document has no IANA considerations.</t>
    </section>
    <section title="Acknowledgements">
      <t>The checksum-neutral algorithmic address mapping described in this
      document is based on e-mail written by Iljtsch Van Beijnum.</t>
      <t>The following people provided advice or review comments that
      substantially improved this document: Jari Arrko, Iljtsch Van Beijnum,
      Remi Depres, Tony Hain, Ed Jankiewicz, Dave Thaler, Mark Townsley, and
      Steve Blake.</t>
      <t>This document was written using the xml2rfc tool described in RFC
      2629 <xref target="RFC2629"></xref>.</t>
    </section>
    <section title="Change Log">
      <section title="Changes Between draft-mrw-behave-nat66-00 and -01">
        <t>There were several minor changes made between the *behave-nat66-00
        and -01 versions of this draft: <list style="symbols">
            <t>Added Fred Baker as a co-author.</t>
            <t>Minor mathematical corrections.</t>
            <t>Added AH to paragraph on NAT security issues.</t>
            <t>Added additional NAT topologies to overview (diagrams TBD).</t>
          </list></t>
      </section>
      <section title="Changes between *behave-nat66-01 and -02">
        <t>There were further changes made between *behave-nat66-01 and -02:
        <list style="symbols">
            <t>Removed topology hiding mechanism.</t>
            <t>Added diagrams.</t>
            <t>Made minor updates based on mailing list feedback.</t>
            <t>Added discussion of IPv6 SAF document.</t>
            <t>Added applicability section.</t>
            <t>Added discussion of Address Independence requirement.</t>
            <t>Added hairpinning requirement and discussion of applicability
            of other NAT behavioral requirements.</t>
          </list></t>
      </section>
      <section title="Changes between *behave-nat66-02 and *nat66-00">
        <t>There were further changes made between behave-nat66-02 and
        nat66-02: <list style="symbols">
            <t>Added mapping for prefixes longer than /48.</t>
            <t>Change draft name to remove reference to the behave WG.</t>
            <t>Resolved various open issues and fixed typos.</t>
          </list></t>
      </section>
      <section title="Changes between *nat66-00 and *nat66-01">
        <t><list style="symbols">
            <t>Change the acronym "NAT66" to "NPTv6", so people don't read
            "NAT" and MEGO.</t>
            <t>Change the term used to refer to the function from "NAT66
            device" to "NPTv6 Translator". It's not a "device" function, it's
            a function that is applied between two interfaces. Consider a
            router with two upstreams and two legs in the local network; it
            will not translate between the local legs, but will translate to
            and from each upstream, and be configured differently for each of
            the two ISPs.</t>
            <t>Comment specifically on the security aspects.</t>
            <t>Comment specifically on the application issues raised on this
            list.</t>
            <t>Comment specifically on multihoming, load-sharing, and
            asymmetric routing.</t>
            <t>Spell out the hairpinning requirement and its implications.</t>
            <t>Spell out the service provider side of Address
            Independence.</t>
            <t>00 focuses on the edge's view</t>
            <t>Detail the algorithm in a manner clearer to the implementor (I
            think)</t>
            <t>Spell out the case for GSE-style DMZs between the edge and the
            transit network, which is about the implications for the global
            routing table.</t>
            <t>Refer to xref
            target="I-D.ietf-v6ops-cpe-simple-security"/&gt;.</t>
          </list></t>
      </section>
    </section>
  </middle>
  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119" ?>
      <?rfc include="reference.RFC.2526" ?>
      <?rfc include="reference.RFC.4193" ?>
      <?rfc include="reference.RFC.4291" ?>
      <?rfc include="reference.RFC.4443" ?>
      <?rfc include="reference.RFC.4787" ?>
    </references>
    <references title="Informative References">
      <?rfc include="reference.RFC.1071" ?>
      <?rfc include="reference.RFC.1624" ?>
      <?rfc include="reference.RFC.2629" ?>
      <?rfc include="reference.RFC.2827" ?>
      <?rfc include="reference.RFC.2993" ?>
      <?rfc include="reference.RFC.4864" ?>
      <?rfc include="reference.I-D.ietf-v6ops-cpe-simple-security" ?>
      <reference anchor="GSE"
                 target="http://tools.ietf.org/id/draft-ietf-ipngwg-gseaddr">
        <front>
          <title>GSE - An Alternate Addressing Architecture for IPv6</title>
          <author fullname=" Mike O'Dell" initials="M." surname="O'Dell">
            <organization>UUNET Technologies</organization>
          </author>
          <date month="February" year="1997" />
        </front>
        <format target="http://tools.ietf.org/id/draft-ietf-ipngwg-gseaddr"
                type="TXT" />
      </reference>
    </references>
    <section anchor="appendix1" title="Why GSE?">
      <t>For the purpose of this discussion, let us over-simplify the
      Internet's structure by distinguishing between two broad classes of
      networks: transit and edge. A "transit network", in this context, is a
      network that provides connectivity services to other networks. Its AS
      number may show up in a non-final position in BGP AS paths, or in the
      case of mobile and residential broadband networks, it may offer network
      services to smaller networks that can't justify RIR membership. An "edge
      network", in contrast, is any network that is not a transit network; it
      is the ultimate customer, and while it provides internal connectivity
      for its own use, it is in other respects is a consumer of transit
      services. In terms of routing, a network in the transit domain generally
      needs some way to make choices about how it routes to other networks; an
      edge network is generally quite satisfied with a simple default
      route.</t>
      <t>The <xref target="GSE"></xref> proposal, and as a result this
      proposal (which is similar to GSE in most respects and inspired by it),
      responds directly to current concerns in the RIR communities. Edge
      networks are used to an environment in IPv4 in which their addressing is
      disjoint from that of their upstream transit networks; it is either
      provider independent, or a network prefix translator makes their
      external address distinct from their internal address, and they like the
      distinction. In IPv6, there is a mantra that edge network addresses
      should be derived from their upstream, and if they have multiple
      upstreams, edge networks are expected to design their networks to use
      all of those prefixes equivalently. They see this as unnecessary and
      unwanted operational complexity, and are as a result pushing very hard
      in the RIR communities for provider independent addressing.</t>
      <t>Widespread use of provider independent addressing has a natural and
      perhaps unavoidable side-effect that is likely to be very expensive in
      the long term. It means that the routing table will enumerate the
      networks at the edge of the transit domain, the edge networks, rather
      than enumerating the transit domain. Per the CIDR Report, there are
      currently more than 36,000 Autonomous Systems being advertised in BGP,
      of which over 15,000 advertise only one prefix. There are in the
      neighborhood of 5000 AS's that show up in a non-final position in AS
      paths, and perhaps another 5000 networks whose AS numbers are terminal
      in more than one AS path. In other words, we have prefixes for some
      36,000 transit and edge networks in the route table now, many of which
      arguably need an Autonomous System number only for multihoming. Current
      estimates suggest that we could easily see that be on the order of
      10,000,000 within fifteen years. Tens of thousands of entries in the
      route table is very survivable; while our protocols and computers will
      likely do quite well with tens of millions of routes, the heat produced
      and power consumed by those routers, and the inevitable impact on the
      cost of those routers, is not a good outcome. To avoid having a massive
      and unscalable route table, we need to find a way that is politically
      acceptable and returns us to enumerating the transit domain, not the
      edge.</t>
      <t>There have been a number of proposals. As described, shim6 moves the
      complexity to the edge, and the edge is rebelling. Geographic addressing
      in essence forces ISPs to "own" geographic territory from a routing
      perspective, as otherwise there is no clue in the address as to what
      network a datagram should be delivered to in order to reach it.
      Metropolitan Addressing can imply regulatory authority, and even if it
      is implemented using internet exchange consortia, visits a great deal of
      complexity on the transit networks that directly serve the edge. The one
      that is likely to be most acceptable is any proposal that enables an
      edge network to be operationally independent of its upstreams, with no
      obligation to renumber when it adds, drops, or changes ISPs, and with no
      additional burden placed either on the ISP or the edge network as a
      result. From an application perspective, an additional operational
      requirement in the words of US NIST's Roadmap for the Smart Grid, is
      that <list style="empty">
          <t>"...the Network should enable an application in a particular
          domain to communicate with an application in any other domain in the
          information network, with proper management control over who and
          where applications can be interconnected."</t>
        </list></t>
      <t>In other words, the structure of the network should allow for and
      enable appropriate access control, but the structure of the network
      should not inherently limit access.</t>
      <t>The GSE model, by statelessly translating the prefix between an edge
      network and its upstream transit network, accomplishes that with a
      minimum of fuss and bother. Stated in the simplest terms, it enables the
      edge network to behave as if it has a provider-independent prefix from a
      multihoming and renumbering perspective without the overhead of RIR
      membership or maintaining BGP connectivity, and it enables the transit
      networks to aggressively aggregate what are from their perspective
      provider-allocated customer prefixes, to maintain a rational-sized
      routing table.</t>
    </section>
  </back>
</rfc>
