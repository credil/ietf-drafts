<?xml version='1.0' encoding='utf-8' ?>
<?xml-stylesheet type='text/xsl'
             href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<?rfc toc='yes' ?>
<rfc ipr='full3978' docName='draft-shimaoka-multidomain-pki-11'>
<front>

	<title abbrev='multi-domain PKI interoperability'>
	  Memorandum for multi-domain Public Key Infrastructure Interoperability
	</title>

	<author initials='M.S.' surname='Shimaoka' fullname='Masaki Shimaoka' role="editor">
		<organization abbrev='SECOM'>
			SECOM Co., Ltd. Intelligent System Laboratory
		</organization>
		<address>
			<postal>
				<street>SECOM SC Center, 8-10-16 Shimorenjaku</street>
				<city>Mitaka</city> <region>Tokyo</region>
				<code>181-8528</code>
				<country>JP</country>
			</postal>
			<email>m-shimaoka@secom.co.jp</email>
		</address>
	</author>

	<author initials='N.H.' surname='Hastings' fullname='Nelson Hastings'>
		<organization abbrev='NIST'>
			National Institute of Standard and Technology
		</organization>
		<address>
			<postal>
				<street>100 Bureau Drive, Stop 8930</street>
				<city>Gaithersburg</city> <region>MD</region>
				<code>20899-8930</code>
				<country>US</country>
			</postal>
			<email>nelson.hastings@nist.gov</email>
		</address>
	</author>

	<author initials='R.N.' surname='Nielsen' fullname='Rebecca Nielsen'>
		<organization>
			Booz Allen Hamilton
		</organization>
		<address>
			<postal>
				<street>8283 Greensboro Drive</street>
				<city>McLean</city> <region>VA</region>
				<code>22102</code>
				<country>US</country>
			</postal>
			<email>nielsen_rebecca@bah.com</email>
		</address>
	</author>

	<date month='December' year='2007' />
	<area>Security</area>
	<abstract>
		<t>
			The objective of this document is to establish a standard terminology for interoperability of multi-domain Public Key Infrastructure (PKI), where each PKI Domain is operated under a distinct policy.  This document describes the relationships between Certification Authorities (CAs), provides the definition and requirements for PKI Domains, and discusses typical models of multi-domain PKI.
		</t>
	</abstract>
</front>

<middle>

	<section anchor="intro" title='Introduction'>

		<section title='Objective'>
			<t>
				The objective of this document is to establish a standard terminology that can be used by different Public Key Infrastructure (PKI) authorities who are considering establishing trust relationships with each other.
				The document defines different types of possible trust relationships, identifies design and implementation considerations that PKIs should implement to facilitate trust relationships across PKIs, and identifies issues that should be considered when implementing trust relationships.
			</t>
		</section>

		<section title='Document Outline'>
			<t>
				Section 2 introduces the PKI basics which are necessary before talking about multi-domain PKI.
				Section 3 describes the definitions and requirements of 'PKI domain', and also describes the typical models of multi-domain PKI.
				Section 4 considers the Trust List models depending on relying party-CA relationships, not CA-CA trust relationships, although it is not focus of this document.
				Section 5 identifies abbreviations used in the document.
			</t>
		</section>

		<section title='Requirements Terminology'>
			<t>
				The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119">RFC 2119</xref>.
			</t>
		</section>

	</section>

	<section anchor="pki basics" title='Public Key Infrastructure (PKI) Basics'>

		<section title='Basic Terms'>
			<t>
				The following terms are used throughout this document.
				Where possible, definitions found in <xref target="RFC4949">RFC 4949</xref> have been used.
			</t>


			<list style='hanging'>
				<t hangText="Certificate:">
					A digitally-signed data structure that attests to the binding of a system entity's identity to a public key value.
					(based on definition of public-key certificate in <xref target="RFC4949">RFC 4949</xref>)
				</t>

				<t hangText="Certificate Policy:">
					A named set of rules that indicates the applicability of a certificate to a particular community and/or class of application with common security requirements. (<xref target="CCITT.X509.2000">X.509</xref>)
					Note that to avoid confusion, this document uses the terminology "Certificate Policy Document" to refer to the document that defines the rules, and "Policy Object Identifier" to specify a particular rule set.
				</t>

				<t hangText="Certificate Policy Document:">
					A document that defines the rules for the issuance and management of certificates and identifies Policy OID(s) for these rules.
					A Certificate Policy Document may define more than one Policy OID.
				</t>

				<t hangText="Policy Object Identifier (Policy OID):">
					An identifier applied to a set of rules governing the issuance and management of certificates.
					Policy OIDs are defined in Certificate Policy Documents.
				</t>

				<t hangText="Certification Authority (CA):">
					An entity that issues certificates (especially X.509 certificates) and vouches for the binding between the data items in a certificate. (<xref target="RFC4949">RFC 4949</xref>)
				</t>

				<t hangText="End Entity (EE):">
						A system entity that is the subject of a certificate and that is using, or is permitted and able to use, the matching private key only for a purpose or purposes other than signing a certificate; i.e., an entity that is not a CA. (<xref target="RFC4949">RFC 4949</xref>)
				</t>

				<t hangText="Relying Party:">
					A system entity that depends on the validity of information (such as another entity's public key value) provided by a certificate. (from <xref target="RFC4949">RFC 4949</xref> definition of certificate user)
				</t>

				<t hangText="Trust Anchor:">
					A CA that is the subject of a trust anchor certificate that is used to provide the first public key in a certification path.
					[modified from <xref target="RFC4949">RFC 4949</xref> definition of "trust anchor CA" and "trust anchor certificate"]
				</t>

			</list>

		</section>

		<section title='Relationships Between Certification Authorities'>
			<t>CAs establish trust relationships by issuing certificates to other CAs.
			CA relationships are divided into <xref target="RFC4949">'certification hierarchy'</xref> and <xref target="RFC4949">'cross-certification'</xref>. </t>

			<t>In a certification hierarchy, there are two type of CAs, superior CA and <xref target="RFC4949">'subordinate CA'</xref>.
			A CA which issued a public-key certificate to another (subordinate) CA.

				<list style='hanging'>
					<t hangText="Superior CA:">
						A CA which is a issuer of a subordinate CA certificate.
					</t>
				</list>
			</t>

			<t>A cross-certification can be either unilateral or bilateral.

				<list style='hanging'>
					<t hangText="Unilateral cross-certification:">
						Cross-certification of one CA (CA1) by another CA (CA2) but no cross-certification of CA2 by CA1.
					</t>

					<t hangText="Bilateral cross-certification:">
						Cross-certification of one CA (CA1) by another CA (CA2) and cross-certification of CA2 by CA1.
					</t>
				</list>
			</t>

			<section title='Hierarchical CA Relationships'>
				<t>In a hierarchical relationship, as shown in <xref target='fig_Hierarchical' />, one CA assumes a parent relationship to the other CA.</t>

				<figure anchor='fig_Hierarchical' title='Hierarchical CA Relationship'>
					<artwork xml:space='default' align='center'>
+----+
| CA |
+----+
  |
  v
+----+
| CA |
+----+
					</artwork>
				</figure>

				<t>There are two types of hierarchical relationships, depending on whether a subordinate CA certificate or a unilateral cross-certificate is used.
				In the case where one (superior) CA issues a subordinate CA certificate to another, the CA at the top of the hierarchy, which must itself have a self-signed certificate, is called a Root CA.
				In the case where one CA issues unilateral cross-certificates to other CAs, the CA issuing unilateral cross-certificates is called a Unifying CA.
				Unifying CAs only use unilateral cross-certificates.

					<t>NOTE: In this document, the definition of Root CA is according to second definition (context for hierarchical PKI) of 'root CA' in <xref target="RFC4949">RFC 4949</xref>. First definition (context for PKI) is specifically used to 'Trust Anchor' in this document.</t>

				</t>

				<list style='hanging'>
					<t hangText="Root CA:">
						A CA that is at the top of a hierarchy, and itself SHOULD not issue certificates to end entities (except those required for its own operation) but issues subordinate CA certificates to one or more CAs.
					</t>

					<t hangText="Subordinate CA:">
						A CA whose public-key certificate is issued by another superior CA, and itself MUST NOT be used as a Trust Anchor.
					</t>

					<t hangText="Unifying CA:">
						A CA that is at the top of a hierarchy, and itself SHOULD not issue certificates to end entities (except those required for its own operation) but establishes unilateral cross-certification with other CAs.
						A Unifying CA MUST permit CAs to which it issues cross-certificates to have self-signed certificates.
					</t>
				</list>

			</section>

			<section title='Peer-to-peer CA Relationships'>
				<t>In a peer relationship, no parent child relationship is created.
				To establish peer relationships, only cross-certificates are used.
				Peer relationships can be either unilateral or bilateral, as shown in <xref target='fig_P2P' />.</t>

				<figure anchor='fig_P2P' title='Peer-to-peer CA Relationships'>
					<artwork align='center'>
                              Bilateral
    Unilateral           Cross-Certification
Cross-Certification      +----+      +----+
+----+      +----+       |    | ---> |    |
| CA | ---> | CA |       | CA |      | CA |
+----+      +----+       |    | &lt;--- |    |
                         +----+      +----+
					</artwork>
				</figure>

				<t>In the case where a CA exists only to manage cross-certificates, that CA is called a Bridge CA.  CAs can establish unilateral or bilateral cross-certification with a Bridge CA, as shown in <xref target='fig_Bridge_CA' />.</t>

				<list style='hanging'>
					<t hangText="Bridge CA:">
						A CA that itself does not issue certificates to end entities (except those required for its own operation) but establishes unilateral or bilateral cross-certification with other CAs.
					</t>
				</list>

				<figure anchor='fig_Bridge_CA' title='Bridge CA'>
					<artwork align='center'>
                Bilateral
           Cross-Certification
+----+ ----------+    +--------- +----+
| CA |           |    |          | CA |
+----+ &lt;-------+ |    | +------> +----+
               | v    v |
             +-----------+
             | Bridge CA |
             +-----------+
+----+         |       |         +----+
| CA | &lt;-------+       +-------> | CA |
+----+         Unilateral        +----+
          Cross-Certification
					  </artwork>
				</figure>

			</section>
		</section>

		<section title='Public Key Infrastructure (PKI) Architectures'>
			<t>A system of CAs that perform some set of certificate management, archive management, key management, and token management functions for a community of users in an application of asymmetric cryptography and share trust relationships, operate under a single Certificate Policy Document which defines a shared set of Policy OIDs, and are either operated by a single organization or under the direction of a single organization.</t>

			<list style='hanging'>
				<t hangText="Public Key Infrastructure (PKI):">
					A system of CAs that perform some set of certificate management, archive management, key management, and token management functions for a community of users in an application of asymmetric cryptography and share trust relationships, operate under the same Certificate Policy Document specifying a shared set of policy OID(s), and are either operated by a single organization or under the direction of a single organization.
				</t>
			</list>

			<t>In addition, a PKI that intends to enter into trust relationships with other PKIs MUST designate a Principal CA that will manage all trust relationships.
			This Principal CA SHOULD also be the trust anchor for relying parties of that PKI.</t>

			<list style='hanging'>
				<t hangText="Principal CA (PCA):">
					A CA which SHOULD have a self-signed certificate, is designated as the CA that will issue cross-certificates to Principal CAs in other PKIs, and MAY be the subject of cross-certificates issued by Principal CAs in other PKIs.
				</t>
			</list>

			<t>In discussing different possible architectures for PKI, the concept of a certification path is necessary.
			A certification path is built based on trust relationships between CAs.</t>

			<list style='hanging'>
				<t hangText="Certification Path:">
					An ordered sequence of certificates where the subject of each certificate in the path is the issuer of the next certificate in the path.  A certification path begins with a trust anchor certificate and ends with an end entity certificate.
				</t>
			</list>

			<section title='Single CA Architecture'>
				<list style='hanging'>
					<t hangText="Definition:">
						A simple PKI consists of a single CA with a self-signed certificate which issues certificates to EEs, as shown in <xref target='fig_simplePKI' />.
					</t>
				</list>

				<figure anchor='fig_simplePKI' title='Simple PKI Architecture'>
					<artwork align='center'>
       +----+
       | CA |
       +----+
          |
   +------+-----+
   v      v     v
+----+ +----+ +----+
| EE | | EE | | EE |
+----+ +----+ +----+
					</artwork>
				</figure>

				<list style='hanging'>
					<t hangText="Trust Anchor:">
						The trust anchor MUST be the self-signed certificate of the CA.
					</t>

					<t hangText="Principal CA:">
						The Principal CA MUST be the CA.
					</t>
				</list>
			</section>

			<section title='Multiple CA Architectures'>

				<section title='Hierarchical PKI Architecture'>
					<list style='hanging'>
						<t hangText="Definition:">
							A hierarchical PKI consists of a single root CA and one or more subordinate CAs that issue certificates to EEs.
							A hierarchical PKI may have intermediate CAs, which are Subordinate CAs that themselves have Subordinate CAs.
							The root CAs MUST distribute trust anchor (public key and associated data), but the format and protocol are irrelevant for this specification.
							And all subordinate CAs MUST have subordinate CA certificates, as shown in <xref target='fig_Hierarchical_PKI' />.
						</t>

						<t hangText="Trust Anchor:">
							The trust anchor MUST be the root CA.
						</t>

						<t hangText="Principal CA:">
							The Principal CA MUST be the root CA.
						</t>
					</list>

					<figure anchor='fig_Hierarchical_PKI' title='Hierarchical PKI Architecture'>
						<artwork align='center'>
                 +---------+
                 | Root CA |
                 +---------+
                      |
         +------------+------------+
         v                         v
       +----+                    +----+
       | CA |                    | CA |
       +----+                    +----+
         |                         |
  +------+------+         +--------+-------+
  v      v      v         v                v
+----+ +----+ +----+    +----+           +----+
| EE | | EE | | EE |    | CA |           | CA |
+----+ +----+ +----+    +----+           +----+
                          |                |
                      +---+--+      +------+------+
                      v      v      v      v      v
                    +----+ +----+ +----+ +----+ +----+
                    | EE | | EE | | EE | | EE | | EE |
                    +----+ +----+ +----+ +----+ +----+
						</artwork>
					</figure>


				</section>

				<section title='Mesh PKI Architectures'>

					<list style='hanging'>
						<t hangText="Definition:">
							A mesh PKI consists of multiple CAs with self-signed certificates that issue certificates to EEs and issue cross-certificates to each other.
							A mesh PKI MAY be a full mesh, where all CAs issue cross-certificates to all other CAs, as shown in <xref target='fig_Full_Mesh_PKI' />.
							A mesh PKI MAY be a partial mesh, where all CAs do not issue cross-certificates to all other CAs.
							In a partial mesh PKI, certification paths may not exist from all CAs to all other CAs, as shown in <xref target='fig_Partial_Mesh_PKI' />.
						</t>
					</list>

					<figure anchor='fig_Full_Mesh_PKI' title='Full Mesh PKI Architecture'>
						<artwork align='center'>
     +--------- +-----+ &lt;--------+
     |          | CA1 |          |
     | +------> +-----+ -------+ |
     | |           |           | |
     | |       +---+--+        | |
     | |       v      v        | |
     | |     +----+ +----+     | |
     | |     | EE | | EE |     | |
     | |     +----+ +----+     | |
     v |                       v |
   +-----+ ----------------> +-----+
   | CA2 |                   | CA3 |
   +-----+ &lt;---------------- +-----+
      |                         |
  +---+--+               +------+------+
  v      v               v      v      v
+----+ +----+          +----+ +----+ +----+
| EE | | EE |          | EE | | EE | | EE |
+----+ +----+          +----+ +----+ +----+
						</artwork>
					</figure>

					<figure anchor='fig_Partial_Mesh_PKI' title='Partial Mesh PKI Architecture'>
						<artwork align='center'>
     +--------- +-----+
     |          | CA1 | --------+
     | +------> +-----+         |
     | |           |            |
     | |       +---+--+         |
     | |       v      v         |
     | |     +----+ +----+      |
     | |     | EE | | EE |      |
     | |     +----+ +----+      |
     v |                        v
   +-----+                   +-----+
   | CA2 | ----------------> | CA3 |
   +-----+                   +-----+
      |                         |
  +---+--+               +------+------+
  v      v               v      v      v
+----+ +----+          +----+ +----+ +----+
| EE | | EE |          | EE | | EE | | EE |
+----+ +----+          +----+ +----+ +----+
						</artwork>
					</figure>

					<list style='hanging'>
						<t hangText="Trust Anchor:">
							The trust anchor for an end entity is usually the CA that issued its certificate.
							The trust anchor for an end entity who is not issued a certificate from the mesh PKI MAY be any CA in the PKI.

							In a partial mesh, selection of the trust anchor may result in no certification path from the trust anchor to one or more CAs in the mesh.
							For example, <xref target='fig_Partial_Mesh_PKI' /> above, selection of CA1 or CA2 as the trust anchor will result in paths from all end entities in the figure.
							However, selection of CA3 as the trust anchor will result in certification paths only for those EEs whose certificates were issued by CA3.
							No certification path exists to CA1 or CA2.
						</t>

						<t hangText="Principal CA:">
							The Principal CA MAY be any CA within the mesh PKI.
							However, the mesh PKI MUST have only one Principal CA, and a certification path SHOULD exist from the Principal CA to all other CAs within the mesh PKI.
						</t>

						<t hangText="Considerations:">
							This model SHOULD be used sparingly, especially the partial mesh model, because of the complexity of determining trust anchors and building certification paths.
							A full mesh PKI MAY be useful for certification path building, because paths of length one exist from all CAs to all other CAs in the mesh.
						</t>

					</list>
				</section>

				<section title='Hybrid PKI Architectures'>
					<list style='hanging'>
						<t hangText="Definition:">
							A hybrid PKI is a PKI which uses combination of both the pure hierarchical model using subordinate CA certificates and the pure mesh model using cross-certificates.
						</t>

					<figure anchor='fig_Hybrid_PKI' title='Hybrid PKI Architecture'>
						<artwork align='center'>
    +-----+ &lt;----- +-----+
    | CA2 |        | CA1 |
    +-----+ -----> +-----+
       |              |
   +---+--+       +---+--+-------+
   v      v       v      v       v
+----+ +----+   +----+ +----+ +-----+
| EE | | EE |   | EE | | EE | | CA3 |
+----+ +----+   +----+ +----+ +-----+
                                 |
                          +------+------+
                          v      v      v
                        +----+ +----+ +----+
                        | EE | | EE | | EE |
                        +----+ +----+ +----+
						</artwork>
					</figure>

						<t hangText="Trust Anchor:">
							The trust anchor for a hybrid PKI MAY be any CA with self-issued certificates in the hybrid PKI.
							However, because of the potential complexity of a hybrid PKI, the PKI SHOULD provide guidance regarding the selection of the trust anchor to relying parties because a relying party may fail to build an appropriate certification path to a subscriber if he/she chooses inappropriate trust anchor.
						</t>

						<t hangText="Principal CA:">
							The Principal CA MAY be any CA within the hybrid PKI and SHOULD have a self-signed certificate for cross-certification with other PKI domain.
							However, the hybrid PKI MUST have only one Principal CA, and a certification path MUST exist from the Principal CA to every CA within the PKI.
						</t>

						<t hangText="Considerations:">
							This model SHOULD be used sparingly because of the complexity of determining trust anchors and building certification paths.
							However, hybrid PKIs may occur as a result of the evolution of a PKI over time, such as CAs within an organization joining together to become a single PKI.
						</t>

					</list>
				</section>
		  </section>
		</section>

		<section title='Relationships between PKIs and Relying Parties'>
			<t>Relying Parties establish trust relationship by Trust Anchor to a PKI.
			Relying Parties may use Trust List for establishing trust relationships to one or more PKIs.
			Trust List is a set of one or more Trust Anchor for trusting one or more PKIs.</t>

			<t>There are two types of maintenance models of Trust List, Relying Party Trust List Model and Trust Authority Model.
			Detail information of each model is described in <xref target="trust list models">section 4.1</xref>.</t>
		</section>
	</section>

	<section anchor="pkidomain" title='PKI Domain'>

		<t>Two or more PKIs may choose to enter into trust relationships with each other.
		For these relationships, each PKI retains its own set of Certificate Policy OID(s) and its own Principal CA.
		Prior to establishing the trust relationship, each PKI determines the level of trust of each external PKI by reviewing external PKI Certificate Policy Document(s) and any other PKI governance documentation through a process known as policy mapping.
		Trust relationships are technically formalized through the issuance of cross-certificates.
		Such a collection of two or more PKIs is known as a PKI Domain.</t>

		<list style='hanging'>
			<t hangText="PKI Domain:">
				A set of two or more PKIs that have chosen to enter into trust relationships with each other through the use of cross-certificates.
				Each PKI that has entered into the PKI Domain is considered a member of that PKI Domain.
				NOTE: This definition specifies how domain consists, besides "CA domain" defined in <xref target="RFC4949">RFC 4949</xref>.
			</t>

			<t hangText="Domain Policy Object Identifier:">
				A domain Policy Object Identifier (OID) is a policy OID which is shared across a PKI Domain.
				Each CA in the PKI Domain MUST be operated under the domain policy OID.
				Each CA MAY also have its own policy OID(s) in addition to the domain policy OID.
				In such a case, the CA MUST comply with both policies.
				The domain policy OID is used to identify the PKI Domain.
			</t>

			<t hangText="Policy Mapping:">
				A process by which members of a PKI Domain evaluate the CPs and other governance documentation of other potential PKI Domain members to determine the level of trust that each PKI in the PKI Domain places on certificates issued by each other PKI in the PKI Domain.
			</t>
		</list>

		<section title='PKI Domain Properties'>
			<list style='symbols'>
				<t>A PKI Domain MAY operate a Bridge CA or a Unifying CA that defines members of the domain by issuing cross-certificates to those members.
				</t>
				<t>A single PKI MAY simultaneously belong to two or more PKI Domains.</t>
				<t>A PKI Domain MAY contain PKI Domains within its own membership.</t>
				<t>Two or more PKI Domains MAY enter into a trust relationship with each other.
				In this case, they MAY combine into a single PKI Domain or retain the existing PKI Domains and define a new PKI Domain with the existing PKI Domains as members.</t>
				<t>A member of a PKI Domain MAY choose to participate in the PKI Domain but restrict or deny trust in one or more other member PKIs of that same PKI Domain.</t>
			</list>
		</section>

		<section title='Requirements for Establishing and Participating in PKI Domains'>

			<t>The establishment of trust relationships has a direct impact on the trust model of relying parties.
			As a result, consideration must be taken in the creation and maintenance of PKI Domains to prevent inadvertent trust.</t>

			<section title='PKI Requirements'>
				<t>In order for a PKI to participate in one or more PKI Domains, that PKI MUST have the following:
					<list style='symbols'>
						<t>A Certificate Policy Document documenting the requirements for operation of that PKI.  The Certificate Policy Document SHOULD be in <xref target="RFC3647">RFC 3647</xref> format.</t>
						<t>One or more Policy OID(s) defined in the Certificate Policy Document that are also asserted in all certificates issued by that PKI</t>
						<t>A defined Principal CA</t>
					</list>
				</t>
				<t>PKI Domains MAY also impose additional technical, documentation, or policy requirements for membership in the PKI Domain.</t>
			</section>

			<section title='PKI Domain Documentation'>

				<t>PKI Domains MUST be formally defined and documented.
				This documentation may vary greatly depending on the of PKI Domain, it MUST address the following:
					<list style='symbols'>
						<t>Establish the existence of the PKI Domain.</t>
						<t>Define the authority for maintaining the PKI Domain.
							<list style='empty'>
								<t>Examples of PKI Domain Authorities are (1) Representatives from two PKIs that agree to form a simple PKI Domain, (2) A single entity which may or may not be related to any of the PKIs in the PKI Domain, (3) A governance board made up of representatives from each PKI Domain member.</t>
							</list>
						</t>
						<t>Define how the PKI Domain is governed.</t>
						<t>Define the purpose and community of interest of the PKI Domain.
							<list style='empty'>
								<t>Examples of PKI Domain intents are (1) allow relying parties of one PKI to trust certificates issued by another PKI, (2) Allow PKIs that support similar subscriber communities of interest to interact with each other, (3) Allow relying parties to trust certificates issued by a number of PKIs that all meet a set of requirements.</t>
							</list>
						</t>

						<t>Unless the PKI Domain has a predetermined membership, describe the requirements and methods for joining the PKI Domain, such as <xref target="FPKIMETHOD">FPKIMETHOD</xref>.</t>
					</list>
				</t>

				<t>Examples of governance documents that PKI Domains MAY choose to use are:
					<list style='symbols'>
						<t>Statement of intent between two or more parties</t>
						<t>Memorandum of Agreement between two or more parties</t>
						<t>Certificate Policy Document for the PKI Domain</t>
						<t>Charter for the PKI Domain</t>
						<t>Methodology for PKI Domain membership</t>
					</list>
				</t>
			</section>

			<section title='PKI Domain Membership Notification'>
				<t>A cross-certificate from the Principal CA of one PKI to the Principal CA of another PKI indicates a mapping between one or more policies of the first PKI and one or more policies of the second PKI.
				When a relying party is determining if a certificate can be validated, it builds a certification path from the certificate being presented to a Trust Anchor.
				To prevent inadvertent trust across PKI Domains when a single PKI is a member of two or more disparate PKI Domains, each PKI Domain must be cognizant of what PKI Domains its member PKIs participate in.
				<xref target='fig_participation' /> illustrates this concept.</t>

				<figure anchor='fig_participation' title='Participation in Multiple PKI Domains'>
					<artwork align='center'>
               +-----------------------------+
               |                PKI Domain 2 |
+----------------------------+               |
|              |             |               |
| +------+ &lt;------ +------+ &lt;------ +------+ |
| | PKI1 |     |   | PKI2 |  |      | PKI3 | |
| +------+ ------> +------+ ------> +------+ |
|              |             |               |
|              +-----------------------------+
| PKI Domain 1               |
+----------------------------+
					</artwork>
				</figure>

				<t>As shown in <xref target='fig_participation' />, PKI2 is a member of both PKI Domain 1 and PKI Domain 2.
				Since a certification path exists from PKI1 to PKI2, and from PKI2 to PKI3, a certification path also exists from PKI1 to PKI3.

				However, PKI1 does not share domain membership with PKI3, so the certification path validation from PKI1 to PKI3 with a validation policy for PKI Domain 1 must not succeed.
				To ensure correct certification path validation and policy mapping, the cross certificates issued by both PKI1 and PKI3 to PKI2 must contain constraints such as policy mapping or name constraints disallowing the validation of certification paths outside their respective domains.</t>

				<t>To fully prevent inadvertent trust, any PKI that is a member of one or more PKI Domains MUST inform all PKI Domains of its membership in all other PKI Domains.
				In addition, that PKI MUST inform all PKI Domains that it is a member of any time its membership status changes with regards to any other PKI Domain.
				If a PKI Domain is informed of the change in status of one of its member PKIs with regards to other PKI Domains, that PKI Domain MUST review the constraints in any cross-certificate issued to that PKI.
				If the change in membership would result in a change to the allowed or disallowed certification paths, the PKI Domain MUST ensure that all such cross-certificates are revoked and re-issued with correct constraints.</t>

			</section>

			<section title='Considerations for PKIs and PKI Domains with Multiple Policies'>
				<t>In some cases, a single PKI MAY issue certificates at more than one assurance level.
				If so, the Certificate Policy Document MUST define separate policy OIDs for each assurance level, and MUST define the differences between certificates of different assurance levels.</t>
				<t>A PKI Domain MAY also support more than one assurance level.
				If so, the PKI Domain MUST also define separate policy OIDs for each assurance level, and MUST define the differences in requirements for each level.</t>
				<t>When PKIs and PKI Domains choose to establish trust relationships, these trust relationships MAY exist for only one defined assurance level, MAY have a one-to-one relationship between PKI assurance levels and PKI Domain assurance levels, or MAY have many-to-one or one-to-many relationships between assurance levels.
				These relationships MUST be defined in cross-certificates issued between PKIs in the PKI Domain.</t>
			</section>
		</section>

		<section anchor="crosscert" title='PKI Domain Models'>
			<t>
				Two or more PKI Domains may choose to enter into trust relationships with each other.
				In that case, they may form a larger PKI Domain by establishing a new Unifying or Bridge CA or by issuing cross certificates between their Principal CAs.
			</t>

			<section title='Unifying Trust Point (Unifying Domain) Model'>
				<t>
					In the Unifying Trust Point Model, a PKI Domain is created by establishing a joint superior CA that issues unilateral cross-certificates to each PKI Domain, as shown in <xref target='fig_unifying_model' />.
					Such a joint superior CA is defined as Unifying CA, and the Principal CAs in each PKI Domain have the hierarchical CA relationship with that Unifying CA.
					In this model, any relying party from any of the PKI Domains MUST specify the Unifying CA as its trust anchor in order to validate a subscriber in the other PKI Domains.
					If the relying party does not desire to validate subscribers in other PKI Domains, the relying party MAY continue to use the Principal CA from the old PKI Domain as its trust anchor.
				</t>

				<t>
					This model may be used for merging multiple PKI Domains into a single PKI Domain with less change to existing PKI Domains, or MAY be used to combine multiple PKI Domains into one PKI Domain for relying parties.
					The unilateral cross-certificate issued by the Unifying CA to the Principal CAs in each PKI Domain may include any policy mapping.
				</t>

				<figure anchor='fig_unifying_model' title='Unifying Trust Point (Unifying Domain) Model'>
					<artwork align='center'>
      Cross-certified                   Cross-certified
       Unifying CA                       Unifing CA
      to PKI Domain 1 +--------------+  to PKI Domain 3
            +---------|  Unifying CA |---+
            |         +--------------+   |
            |                 |          |
            |  Cross-certified|          |
            |   Unifying CA   |          |
            |  to PKI Domain 2|          |
+-----------|---+ +-----------|---+ +----|-----------------+
|    PKI    |   | |    PKI    |   | |    |    PKI          |
|  domain 1 |   | |  domain 2 |   | |    |  domain 3       |
|           v   | |           v   | |    v                 |
|       +-----+ | |       +-----+ | | +-----+ ----+        |
|   +---| PCA | | |       | PCA | | | | PCA |     |        |
|   |   +-----+ | |       +-----+ | | +-----+ &lt;-+ |        |
|   |      |    | |          |    | |   | ^     | v        |
|   |      |    | |          |    | |   | |   +----+       |
|   |      |    | |          |    | |   | |   | CA |---+   |
|   |      |    | |          |    | |   | |   +----+   |   |
|   |      |    | |          v    | |   v |    ^ |     |   |
|   |      |    | |       +----+  | | +----+   | |     |   |
|   |      |    | |   +---| CA |  | | | CA |---+ |     |   |
|   |      |    | |   |   +----+  | | +----+     |     |   |
|   |      |    | |   |      |    | |   |        |     |   |
|   v      v    | |   v      v    | |   v        v     v   |
| +----+ +----+ | | +----+ +----+ | | +----+ +----+ +----+ |
| | EE | | EE | | | | EE | | EE | | | | EE | | EE | | EE | |
| +----+ +----+ | | +----+ +----+ | | +----+ +----+ +----+ |
+---------------+ +---------------+ +----------------------+
					</artwork>
				</figure>

			</section>

			<section title='Independent Trust Point Models'>
					<t>
						In Independent Trust Point Models, relying parties continue to use only the trust anchor of their PKI Domain.
						A relying party in the individual trust point model can continue to use the trust anchor of its PKI Domain.
					</t>

				<section title='Direct Cross-Certification Model'>
					<t>
						The model in which each PKI Domain trusts each other by issuing cross-certificate directly between each Principal CA, as shown in <xref target='fig_direct_cross_model' />.
						This model may be used for shortening a certification path, or establishing a  trust relationship expeditiously.
					</t>

					<list style='hanging'>
						<t hangText="Considerations:">
							A PKI Domain in this model SHOULD consider that the other PKI Domain may cross-certify with any more PKI Domains.
							If a PKI Domain wants to restrict a certification path, the PKI Domain SHOULD NOT rely on the validation policy of the relying party, but SHOULD include the constraints in the cross-certificate explicitly.
							A PKI Domain that relies on the validation policy of the relying party about such constraints cannot guarantee the constraints will be recognized and followed.
						</t>
					</list>

					<figure anchor='fig_direct_cross_model' title='Direct Cross-Certification Model'>
						<artwork align='center'>
+---------------+                 +------------------------+
|    PKI        | cross-certified |         PKI            |
|  domain 1     |    each other   |       domain 2         |
|      +-----+ --------------------> +-----+ ----+         |
|      | PCA |  |                 |  | PCA |     |         |
|      +-----+ &lt;-------------------- +-----+ &lt;-+ |         |
|         |     |                 |     ^      | v         |
|         |     |                 |     |    +----+        |
|         |     |                 |     |    | CA |---+    |
|         |     |                 |     |    +----+   |    |
|         v     |                 |     v     ^ |     |    |
|       +----+  |                 |   +----+  | |     |    |
|   +---| CA |  |                 |   | CA |--+ |     |    |
|   |   +----+  |                 |   +----+    |     |    |
|   |      |    |                 |     |       |     |    |
|   v      v    |                 |     v       v     v    |
| +----+ +----+ |                 |   +----+ +----+ +----+ |
| | EE | | EE | |                 |   | EE | | EE | | EE | |
| +----+ +----+ |                 |   +----+ +----+ +----+ |
+---------------+                 +------------------------+
						</artwork>
					</figure>
				</section>

				<section title='Bridge Model'>
					<t>The model in which every PKI Domain trusts each other through a Bridge CA by Cross-Certification, as shown in <xref target='fig_bridge_model' />.
					In this model, the trust relationship is not established between a subscriber domain and a relying party domain directly, but established from the Principal CA of relying party's PKI Domain via Bridge CA.
					This model is useful in reducing the number of cross-certifications required for a PKI Domain to interoperate with other PKI Domains.</t>

					<t>Requirements for Bridge model:
						<list style='symbols'>
							<t>Bridge CA MUST NOT be used as the trust anchor in any PKI Domain.</t>
							<t>Bridge CA SHOULD issue cross-certificates with other PKI Domains mutually or MAY issue cross certificates unilaterally.</t>
							<t>Bridge CA MUST NOT issue EE certificates except when it is necessary for the CA's operation.</t>
							<t>Bridge CA MUST use its own domain policy OID, not other PKI Domain policy OID(s), for the policy mapping.</t>
							<t>Bridge CA SHOULD be a neutral position to all PKI Domains which trust through the Bridge CA.  For example in <xref target='fig_bridge_model' />, in the case that a relying party who trusts the PCA of PKI Domain 1 as its trust anchor builds the certification path to a subscriber in PKI Domain 3:
								<list style='empty'>
									<t>Cross-Certificate from PKI Domain 1 to Bridge CA:
										<list style='empty'>
											<t>issuerDomainPolicy := domain policy OID of PKI Domain 1</t>
											<t>subjectDomainPolicy := domain policy OID of Bridge CA</t>
										</list>
									</t>
									<t>Cross-Certificate from Bridge CA to PKI Domain 3:
										<list style='empty'>
											<t>issuerDomainPolicy := domain policy OID of Bridge CA</t>
											<t>subjectDomainPolicy := domain policy OID of PKI Domain 3</t>
										</list>
									</t>
								</list>
							</t>
							<t>Cross-Certificates issued by Bridge CA and Cross-Certificate issued to Bridge CA SHOULD include the requireExplicitPolicy with a value that is greater than zero in the policyConstraints extension because a relying party MAY not set the initial-explicit-policy to TRUE.</t>
							<t>PKI Domains cross-certified with Bridge CA SHOULD NOT cross-certify directly to other PKI Domains cross-certified with the same Bridge CA.</t>
							<t>Bridge CA SHOULD clarify the method for the policy mapping of cross-certification to keep its transparency.</t>
						</list>

						<list style='hanging'>
							<t hangText="Considerations:">
								The Bridge CA SHOULD be operated by an independent third party agreed upon by the PKI Domains or a consortium consisting of representation from the PKI Domain members.
								The Bridge CA SHOULD do policy mapping in a well documented and agreed upon manner with all PKI Domains.
								For using the name constraints, the Bridge CA SHOULD pay attention to preventing a conflict of each name space of the cross-certified PKI Domains.

								The PKI Domains that perform cross-certification with the Bridge CA SHOULD confirm the following:
								<list style='symbols'>
									<t>Does the Bridge CA perform the policy mapping via its own domain policy OID?</t>
									<t>Does the Bridge CA clarify the method of policy mapping in the cross-certification?</t>
									<t>Is the Bridge CA able to accept the domain policy that the PKI Domain desires?
										<list style='symbols'>
											<t>If the domain policy is mapped to one with a lower security level, the PKI Domain SHOULD NOT accept it.
											Otherwise, the PKI Domain MUST carefully consider the risks involved with accepting certificates with a lower security level.</t>
										</list>
									</t>
								</list>
							</t>
						</list>

					</t>

					<figure anchor='fig_bridge_model' title='Bridge Model'>
						<artwork align='center'>
  cross-certified                      cross-certified
PKI Domain 1 with BCA               PKI Domain 3 with BCA
          +---------> +-----------+ -----+
          |           | Bridge CA |      |
          | +-------- +-----------+ &lt;--+ |
          | |                 ^ |      | |
          | | cross-certified | |      | |
          | |   PKI Domain 2  | |      | |
          | |     with BCA    | |      | |
+---------|-|---+ +-----------|-|-+ +--|-|-----------------+
|  PKI    | |   | |   PKI     | | | |  | |    PKI          |
|domain 1 | v   | | domain 2  | v | |  | v  domain 3       |
|       +-----+ | |       +-----+ | | +-----+ ----+        |
|   +---| PCA | | |       | PCA | | | | PCA |     |        |
|   |   +-----+ | |       +-----+ | | +-----+ &lt;-+ |        |
|   |      |    | |          |    | |   | ^     | v        |
|   |      |    | |          |    | |   | |   +----+       |
|   |      |    | |          |    | |   | |   | CA |---+   |
|   |      |    | |          |    | |   | |   +----+   |   |
|   |      |    | |          v    | |   v |    ^ |     |   |
|   |      |    | |       +----+  | | +----+   | |     |   |
|   |      |    | |   +---| CA |  | | | CA |---+ |     |   |
|   |      |    | |   |   +----+  | | +----+     |     |   |
|   |      |    | |   |      |    | |   |        |     |   |
|   v      v    | |   v      v    | |   v        v     v   |
| +----+ +----+ | | +----+ +----+ | | +----+ +----+ +----+ |
| | EE | | EE | | | | EE | | EE | | | | EE | | EE | | EE | |
| +----+ +----+ | | +----+ +----+ | | +----+ +----+ +----+ |
+---------------+ +---------------+ +----------------------+
						</artwork>
					</figure>
				</section>
			</section>

		</section>

		<section title='Operational Considerations'>
			<t>
				Each PKI Domain MAY use policy mapping for crossing different PKI Domains.
				If a PKI Domain wants to restrict a certification path, the PKI Domain SHOULD NOT rely on the validation policy of the relying party, but SHOULD include the constraints in the cross-certificate explicitly.
			</t>

			<t>
				For example, when each PKI Domain wants to affect the constraints to a certification path, it SHOULD set the requireExplicitPolicy to zero in the policyConstraints extension of any cross-certificates.
				A PKI Domain that relies on the validation policy of the relying party about such constraints cannot guarantee the constraints will be recognized and followed.
			</t>
		</section>

	</section>

	<section anchor="external to PKI" title='Trust Models External to PKI Relationships'>
		<t>As opposed to PKI Doman trust relationships entered into by PKIs themselves, trust across multiple PKIs can be created by entities external to the PKIs through locally configured lists of trust anchors.</t>

		<list style='hanging'>
			<t hangText="Trust List:">A set of one or more Trust Anchors used by a relying party to explicitly trust one or more PKIs.</t>
		</list>

		<t>Note that Trust Lists are often created without the knowledge of the PKIs that are included in the list.</t>

		<section anchor="trust list models" title='Trust List Models'>
			<section anchor="local trust list" title='Local Trust List Model'>
				<t>A Trust List can be created and maintained by a single relying party for its own use.</t>

				<list style='hanging'>
					<t hangText="Local Trust List:">
						A Trust List installed and maintained by a single relying party for its own use.
						NOTE: This definition likes "trust-file PKI" defined in <xref target="RFC4949">RFC 4949</xref>.
						However, this document prefer the word "Local Trust List" against "Trust Authority" after mentioned.
					</t>
				</list>

				<t><xref target='fig_LocalTrustList' /> illustrates a Local Trust List.</t>

				<figure anchor='fig_LocalTrustList' title='Relying Party Local Trust List Model'>
					<artwork xml:space='default' align='center'>
+-------------------------------------------------------------+
|  Relying Party                                              |
| +---------------------------------------------------------+ |
| | Trust List                                              | |
| | +--------------+  +--------------+     +--------------+ | |
| | | PKI 1        |  | PKI 2        | ... | PKI n        | | |
| | | Trust Anchor |  | Trust Anchor |     | Trust Anchor | | |
| | +--------------+  +--------------+     +--------------+ | |
| +---------------------------------------------------------+ |
+-------------------------------------------------------------+
					</artwork>
				</figure>

				<t>
					Creating a Local Trust List is the simplest method for relying parties to trust EE certificates.
					Using Local Trust Lists does not require cross-certification between the PKI that issued the relying party’s own certificate and the PKI that issued the EE’s certificate.
					Nor does it require implementing mechanisms for processing complex certification paths, as all CAs in a path can be included in the Local Trust List.
					As a result, Local Trust Lists are the most common model in use today.
					However, because Local Trust Lists are created and managed independently by each Relying Party, the use of Local Trust Lists can be difficult for an enterprise to manage.
				</t>

			</section>

			<section anchor="trust authority model" title='Trust Authority Model'>
				<t>Alternatively, a Trust List can be created and maintained for use by multiple relying parties.  In this case, the entity responsible for the Trust List is known as a Trust Authority.</t>

				<list style='hanging'>
					<t hangText="Trust Authority:">An entity that manages a Trust List for use by one or more relying parties.</t>
				</list>

				<t><xref target='fig_TrustAuthorityModel' /> illustrates a Trust Authority and how it is used by Relying Parties.  Note that the Trust Authority replaces the PKI Trust Anchor(s) in the Local Trust List for each participating Relying Party.</t>

				<figure anchor='fig_TrustAuthorityModel' title='Trust Authority Model'>
					<artwork xml:space='default' align='center'>
+-------------------------------------------------------------+
|  Trust Authority                                            |
| +---------------------------------------------------------+ |
| | Trust List                                              | |
| | +--------------+  +--------------+     +--------------+ | |
| | | PKI 1        |  | PKI 2        | ... | PKI n        | | |
| | | Trust Anchor |  | Trust Anchor |     | Trust Anchor | | |
| | +--------------+  +--------------+     +--------------+ | |
| +---------------------------------------------------------+ |
+-------------------------------------------------------------+

     +---------------------+  +---------------------+
     |   Relying Party 1   |  |   Relying Party 2   |
     | +-----------------+ |  | +-----------------+ | ...
     | | Trust Authority | |  | | Trust Authority | |
     | +-----------------+ |  | +-----------------+ |
     +---------------------+  +---------------------+
					</artwork>
				</figure>

				<t>
					A Trust Authority may be operated by a PKI, a collection of relying parties that share a common set of users, an enterprise on behalf of all of its relying parties, or an independent entity.
					Although PKIs generally establish trust relationships through cross-certificates, a PKI may choose to provide a Trust Authority to support relying parties that do not support processing of certification paths.
					A collection of relying parties that share a common set of users may choose to maintain a single Trust Authority to simplify the management of Trust Lists.
					An enterprise may choose to provide a Trust Authority to implement enterprise policies and direct all Relying Parties within the enterprise to use its Trust Authority.
					Finally, an independent entity may choose to operate a Trust Authority as a managed service.
				</t>
			</section>
		</section>

		<section title='Trust List Considerations'>
			<section title='Considerations for a PKI'>
				<t>A PKI SHOULD publish its Certificate Policy Document so that Relying Parties and Trust Authorities can determine what, if any, warranties are provided by the PKI regarding reliance on EE certificates.</t>

				<t>A PKI SHOULD broadly publicize information regarding revocation or compromise of a Trust Anchor or Principal CA certificate through notice on a web page, press release, and/or other appropriate mechanisms so that Relying Parties and Trust Authorities can determine if a Trust Anchor or Principal CA certificate installed in a Trust List should be removed.</t>

				<t>A PKI SHOULD publish CRLs or other information regarding the revocation status of EE certificates to a repository that can be accessed by any party that desires to rely on the EE certificates.</t>
			</section>

			<section title='Considerations for Relying Parties and Trust Authorities'>
				<t>Relying Parties and Trust Authorities are responsible for the following prior to including a PKI in the Trust List:

					<list style='symbols'>
						<t>Reviewing the Certificate Policy Document of each PKI to determine that the PKI is operated to an acceptable level of assurance.</t>
						<t>Reviewing the Certificate Policy Document of each PKI to ensure any requirements imposed on Relying Parties are met.</t>
						<t>Determining if the PKI provides any warranties regarding reliance on EE certificates, and if these warranties are acceptable for the intended reliance on the EE certificates.  Reliance may be at the Relying Party’s own risk.</t>
						<t>Periodically reviewing information published by the PKI to its repository, including Certificate Policy Document updates or notice of CA revocation or compromise.</t>
					</list>
				</t>

				<t>A PKI can choose to join or leave PKI Domains in accordance with its Certificate Policy Document.  If the Relying Party or Trust Authority does not wish to inherit trust in other members of these PKI Domains, it is the responsibility of the Relying Party or Trust Authority to inhibit policy mapping.</t>
			</section>

			<section title='Additional Considerations for Trust Authorities'>
				<t>A Trust Authority SHOULD establish a Trust Authority Policy that identifies the following:

					<list style='symbols'>
						<t>The intended community of Relying Parties that will use the Trust Authority.</t>
						<t>The process by which Trust Anchors are added or removed from the Trust List.</t>
						<t>Any warranties provided by the Trust Authority for reliance on EE certificates.  These warranties may be those provided by the PKIs themselves or may be additional warranties provided by the Trust Authority.</t>
						<t>Information regarding how the Trust Authority protects the integrity of its Trust List.</t>
						<t>Information regarding how Relying Parties interact with the Trust Authority to obtain information as to whether an EE certificate is trusted.</t>
					</list>
				</t>
			</section>
		</section>
	</section>

	<section anchor="abbrev" title='Abbreviations'>

			<list style='hanging'>
				<t hangText="CA:"> Certification Authority</t>

				<t hangText="EE:"> End Entity</t>
				<t hangText="OID:"> Object Identifier</t>
				<t hangText="PCA:"> Principal Certification Authority</t>
				<t hangText="PKI:">Public Key Infrastructure</t>
			</list>

	</section>

	<section title="Security Considerations">
		<t>This section highlights security considerations related to establishing PKI Domains.</t>

		<t>Because this RFC defines terminology and not protocols or technology for implementing the terminology, technology-specific security considerations are not applicable.  However, a high level discussion of applicable security considerations is warranted.</t>

		<section title="PKI Domain Models">
			<t>For all PKI Domain models that described in section 3.3 created through the issuance of cross certificates, standard threats including message insertion, modification, and man-in-the-middle are not applicable because all information created by CAs, including policy mapping and constraints, is digitally signed by the CA generating the cross-certificate.</t>

			<t>Verifying that a given certificate was issued by a member of a PKI Domain may be a time critical determination.  If cross certificates and revocation status information cannot be obtained in a timely manner, a denial of service may be experienced by the end entity.  In situations where such verification is critical, caching of cross certificates and revocation status information may be warranted.</t>

			<t>An additional security consideration for PKI Domains is inadvertent trust, which can occur if a single PKI is a member of multiple PKI Domains.  See Section 3.2.3 for a discussion of inadvertent trust and mechanisms to prevent it.</t>

			<t>Finally, members of PKI Domains MUST participate in domain governance, or at a minimum, be informed anytime a PKI joins or leaves the domain, so that domain members can make appropriate decisions for maintaining their own membership in the domain or choosing to restrict or deny trust in the new member PKI.</t>
		</section>

		<section title="Trust List Models">
			<t>In these models also, many standard attacks are not applicable since certificates are digitally signed.
			Additional security considerations apply when trust is created through trust list.
			</t>

			<t>A variation of the modification attack is possible in trust list models.  If an attacker is able to add or remove CAs from the relying party or trust authority trust list, the attacker can affect which certificates will or will not be accepted.  To prevent this attack, access to trust lists MUST be adequately protected against unauthorized modification.  This protection is especially important for trust anchors that are used by multiple applications, as it is a key vulnerability of this model.  This attack may result in unauthorized usage if a CA is added to a trust list, or denial of service if a CA is removed from a trust list.</t>

			<t>For trust authority models, a denial of service attack is also possible if the application cannot obtain timely information from the trust anchor.  Applications SHOULD specify service level agreements with trust authority.  In addition, applications MAY choose to locally cache the list of CAs maintained by the trust authority as a backup in the event that the trust anchor's repository (e.g., LDAP directory) is not available.</t>

		</section>

	</section>

	<section title="IANA Considerations">
	  <t>This document has no actions for IANA.</t>
	</section>

</middle>

<back>
	<references anchor="refs" title='Normative References'>

		<reference anchor="RFC3280">
			<front>
				<title>
					Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile
				</title>

				<author initials="R." surname="Housley" fullname="R. Housley">
					<organization/>
				</author>

				<author initials="W." surname="Polk" fullname="W. Polk">
					<organization/>
				</author>

				<author initials="W." surname="Ford" fullname="W. Ford">
					<organization/>
				</author>

				<author initials="D." surname="Solo" fullname="D. Solo">
					<organization/>
				</author>

				<date year="2002" month="April"/>
			</front>
			<seriesInfo name="RFC" value="3280"/>
			<format type="TXT" octets="295556" target="ftp://ftp.isi.edu/in-notes/rfc3280.txt"/>
		</reference>

		<reference anchor="RFC2119">
			<front>
				<title abbrev="RFC Key Words">
					Key words for use in RFCs to Indicate Requirement Levels
				</title>
				<author initials="S." surname="Bradner" fullname="Scott Bradner">
					<organization>Harvard University</organization>
					<address>
						<postal>
							<street>1350 Mass. Ave.</street>
							<street>Cambridge</street>
							<street>MA 02138</street>
						</postal>
						<phone>- +1 617 495 3864</phone>
						<email>sob@harvard.edu</email>
					</address>
				</author>
				<date year="1997" month="March"/>
				<area>General</area>
				<keyword>keyword</keyword>
				<abstract>
					<t>
						In many standards track documents several words are used to signify
						the requirements in the specification.  These words are often
						capitalized.  This document defines these words as they should be
						interpreted in IETF documents.  Authors who follow these guidelines
						should incorporate this phrase near the beginning of their document:

						<list>
							<t>
								The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
								NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
								"OPTIONAL" in this document are to be interpreted as described in
								RFC 2119.
							</t>
						</list>
					</t>

					<t>
						Note that the force of these words is modified by the requirement
						level of the document in which they are used.
					</t>
				</abstract>
			</front>
			<seriesInfo name="BCP" value="14"/>
			<seriesInfo name="RFC" value="2119"/>
			<format type="TXT" octets="4723" target="ftp://ftp.isi.edu/in-notes/rfc2119.txt"/>
			<format type="HTML" octets="14486" target="http://xml.resource.org/public/rfc/html/rfc2119.html"/>
			<format type="XML" octets="5661" target="http://xml.resource.org/public/rfc/xml/rfc2119.xml"/>
		</reference>
	</references>

	<references title='Informative References'>
		<reference anchor="CCITT.X509.2000">
			<front>
				<title>
					Information Technology - Open Systems Interconnection - The Directory: Authentication Framework
				</title>

				<author>
					<organization>
						International International Telephone and Telegraph Consultative Committee
					</organization>
				</author>

				<date month="March" year="2000"/>
			</front>
			<seriesInfo name="CCITT" value="Recommendation X.509"/>
		</reference>

		<reference anchor='RFC3647'>
			<front>
				<title>Internet X.509 Public Key Infrastructure Certificate Policy and Certification Practices Framework</title>

				<author initials='S.' surname='Chokhani' fullname='S. Chokhani'>
				<organization /></author>

				<author initials='W.' surname='Ford' fullname='W. Ford'>
				<organization /></author>

				<author initials='R.' surname='Sabett' fullname='R. Sabett'>
				<organization /></author>

				<author initials='C.' surname='Merrill' fullname='C. Merrill'>
				<organization /></author>

				<author initials='S.' surname='Wu' fullname='S. Wu'>
				<organization /></author>

				<date year='2003' month='November' />
			</front>

			<seriesInfo name='RFC' value='3647' />
			<format type='TXT' octets='228124' target='ftp://ftp.isi.edu/in-notes/rfc3647.txt' />
		</reference>

		<reference anchor='RFC4949'>
			<front>
				<title>Internet Security Glossary, Version 2</title>
				<author initials='R.' surname='Shirey' fullname='R. Shirey'>
				<organization /></author>
				<date year='2007' month='August' />
			</front>

			<seriesInfo name='RFC' value='4949' />
			<format type='TXT' octets='867626' target='ftp://ftp.isi.edu/in-notes/rfc4949.txt' />
		</reference>

		<reference anchor="PlanningPKI">
			<front>
				<title>
					Planning for PKI
				</title>

				<author initials="R." surname="Housley" fullname="R. Housley">
					<organization/>
				</author>

				<author initials="W." surname="Polk" fullname="W. Polk">
					<organization/>
				</author>

				<date month="August" year="2001" />
			</front>
		</reference>

		<reference anchor="Framework">
			<front>
				<title>
					PKI Interoperability Framework
				</title>

				<author initials="S." surname="Lloyd" fullname="S. Lloyd" role="editor">
					<organization/>
				</author>

				<author>
					<organization>
						PKI Forum
					</organization>
				</author>

				<date month="March" year="2001" />
			</front>
		</reference>

		<reference anchor="CA-CA">
			<front>
				<title>
					CA-CA Interoperability
				</title>

				<author initials="S." surname="Lloyd" fullname="S. Lloyd" role="editor">
					<organization/>
				</author>

				<author>
					<organization>
						PKI Forum
					</organization>
				</author>

			<date month="March" year="2001" />
			</front>
		</reference>

		<reference anchor="Issues">
			<front>
				<title>
					Interoperability Issues for multi PKI domain
				</title>

			<author initials="M." surname="Shimaoka" fullname="M. Shimaoka">
				<organization/>
			</author>

			<author>
				<organization>
					NPO Japan Network Security Association
				</organization>
			</author>

			<author>
				<organization>
					ISEC, Information Technology Promotion Agency, Japan
				</organization>
			</author>

			<date month="July" year="2002" />
			</front>
		</reference>

		<reference anchor="ImplementationProblems">
			<front>
				<title>
					Implementation Problems on PKI
				</title>

				<author>
					<organization>
						NPO Japan Network Security Association
					</organization>
				</author>

				<author>
					<organization>
						ISEC, Information Technology Promotion Agency, Japan
					</organization>
				</author>

				<date month="Feb" year="2003" />
			</front>
		</reference>

		<reference anchor="PKI-Interop2003">
			<front>
				<title>
					Achieving PKI Interoperability 2003
				</title>

				<author>
					<organization>
						Japan PKI Forum
					</organization>
				</author>

				<author>
					<organization>
						Korea PKI Forum
					</organization>
				</author>

				<author>
					<organization>
						PKI Forum Singapore
					</organization>
				</author>

				<author>
					<organization>
						Chinese Taipei PKI Forum
					</organization>
				</author>

				<date month="July" year="2003" />
			</front>
		</reference>

		<reference anchor="PKI-Interop">
			<front>
				<title>
					Achieving PKI Interoperability
				</title>

				<author>
					<organization>
						Japan PKI Forum
					</organization>
				</author>

				<author>
					<organization>
						Korea PKI Forum
					</organization>
				</author>

				<author>
					<organization>
						PKI Forum Singapore
					</organization>
				</author>

				<date month="April" year="2002" />
			</front>
		</reference>

		<reference anchor="RFC4158">
			<front>
				<title>
					Internet X.509 Public Key Infrastructure: Certification Path Building
				</title>

				<author initials="M." surname="Cooper" fullname="M. Cooper">
					<organization/>
				</author>

				<author initials="Y." surname="Dzambasow" fullname="Y. Dzambasow">
					<organization/>
				</author>

				<author initials="P." surname="Hesse" fullname="P. Hesse">
					<organization/>
				</author>

				<author initials="S." surname="Joseph" fullname="S. Joseph">
					<organization/>
				</author>

				<author initials="R." surname="Nicholas" fullname="R. Nicholas">
					<organization/>
				</author>

				<date year="2005" month="September"/>
			</front>
			<seriesInfo name="RFC" value="4158"/>
			<format type="TXT" octets="199297" target="ftp://ftp.isi.edu/in-notes/rfc4158.txt"/>
		</reference>

		<reference anchor="FPKIMETHOD">
			<front>
				<title>
					US Government PKI Cross-Certification Criteria and Methodology
				</title>
				<date year="2006" month="January"/>
			</front>
			<format type="PDF" target="http://www.cio.gov/fbca/documents/crosscert_method_criteria.pdf"/>
		</reference>


	</references>
</back>
</rfc>
