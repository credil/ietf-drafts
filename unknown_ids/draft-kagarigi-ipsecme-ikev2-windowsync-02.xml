<?xml version="1.1" encoding="UTF-8"?><?rfc linefile="1:/tmp/CGI2595.1"?><?rfc linefile="1:/tmp/CGI2595.1"?><?rfc linefile="1:/tmp/CGI28068.1"?><?rfc linefile="1:/tmp/CGI28068.1"?>
<!-- automatically generated by xml2rfc v1.35 on 2010-06-25T11:42:41Z -->
<!-- automatically generated by xml2rfc v1.35 on 2010-06-25T11:42:41Z -->
<!-- automatically generated by xml2rfc v1.35 on 2010-06-15T09:15:03Z -->
<!-- automatically generated by xml2rfc v1.35 on 2010-06-15T09:15:03Z -->
<?xml-stylesheet type='text/xsl' href='./rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc symrefs="no"?>
<?rfc compact="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc strict="yes" ?>
<?rfc linkmailto="yes" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" >
    
<?xml-stylesheet type='text/xsl' href='./rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes" ?>
<?rfc subcompact="yes" ?>
<?rfc sortrefs="yes" ?>
<rfc ipr="trust200902" docName="draft-kagarigi-ipsecme-ikev2-windowsync-02" category="std">
  <front>
    <title abbrev="IKEv2 window synchronisation">IKEv2 window synchronisation among peers</title>
    <author initials="G." surname="Kalyani" fullname="Kalyani Garigipati">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>SEZ Unit, Cessna Business Park</street>
          <city>Bangalore</city>
          <region>Karnataka</region>
          <code>560025</code>
          <country>India</country>
        </postal>
        <phone>+91 80 4426 4831</phone>
        <email>kagarigi@cisco.com</email>
      </address>
    </author>
    <date year="2010"/>
    <area>Security Area</area>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>   This document describes an extension to the IKEv2 protocol that
        allows the synchronisation of ikev2 windows between the peers.</t>
    </abstract>
  </front>
  <middle>
    <!-- ====================================================================== -->
    <section title="Introduction" toc="default">
      <t>  IKEv2 RFC states that "An IKE endpoint MUST NOT exceed the peer's stated window size for
        transmitted IKE requests".</t>

      <t>As per the protocol , all IKEv2 packets must follow a request-response paradigm. 
        The initiator of an IKEv2 request MUST retransmit the request, until it has received a response from the peer.
        IKEv2 introduces a windowing mechanism that allows multiple requests to be outstanding at a given point of time, but mandates
        that the sender window does not move until the oldest message sent from one peer to another is acknowledged.
        Loss of even a single packet leads to repeated retransmissions followed by an IKEv2 SA teardown if the retransmissions are unacknowledged.</t>

      <t>HA for IKEv2 is required to ensure that in case of crash of active device , the stand-by device becomes active immediately.
        The stand-by device is expected to have the exact values of message id fields of active device when it crashed.
        Even with the best efforts to update the message Id values from active to stand-by device, the values at standby 
        device can be stale due to following reasons.

        <list style="symbols">         
          
        <t> standby device does not have a retransmission buffer corresponding to that of old active SA .</t>
        
        <t> standby device is unaware of the last message that was received and acknowledged by the 
          older active device as failover could have happened before the standby could be updated. </t></list></t>
        
      <t> When a stand-by device takes over as the active device, it would start the message id ranges from previously updated values.
        This would make it reject requests from the peer , since the values would be stale.
        As a sender, the stand-by device may end up reusing a stale message-id which will cause the peer to drop the request.
        Eventually there is a high probability of the IKEv2 and corresponding IPsec SAs getting torn down simply because of a 
        transitory message-id mismatch.  This is not a desirable feature of HA.</t>
        
      <t>Hence a mechanism is required in HA to ensure that the stand-by device has correct values of message Id values, 
        so that sessions are not torn down just because of window ranges.</t>      
         
   </section>
    <section title="Terminology" toc="include">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
        "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in
          <xref target="RFC2119" pageno="false" format="default">RFC 2119</xref>.</t>

      <t>
        <list style="symbols">
         
          <t> stand-by device : The device which will take control , when the active device crashes.</t>
           
          <t> active device : This is the primary device in the cluster. The stand-by and active device form a cluster. </t>         
          
          <t> peer device:  This is the device with which any device in the cluster , would establish an IKEv2 session.</t>     
          
          <t> Message SYNC Request : The information exchange request  to synchronize the message Id information</t>
          
          <t> Message SYNC Response : The information exchange response  to synchronize the message Id information.</t>                    
          </list>
      </t>
    </section>
      
    <section title="Description of the solution" toc="include">
      <t>After the stand-by device takes control over the active device, the stand-by device 
        would request the peer to send its values of message Id fields.</t>
        
       <t> The stand-by device would then update its values 
        of message Id fields and then start sending/receiving the requests.</t>   
      
       <t>The ability of a device to participate in syncing the message Id MUST be 
    announced using the notify SYNC_MESSAGE_ID_INFO_SUPPORTED in AUTH exchange.
   After the peer device responds with this capability, the active device
 MUST sync this to the stand-by device so that stand-by device is
 aware of the capability and can use it when it takes 
    control over the active device.</t>
     
  <figure align="left" >
        <artwork align="left" xml:space="preserve"> 
<![CDATA[
   Active Device                          Peer Device
   ===========                       ===========
   HDR, SK {IDi, [CERT,] [CERTREQ,] [IDr,] 
                  AUTH, SAi2, TSi, TSr,
    N[SYNC_MESSAGE_ID_INFO_SUPPORTED]} ---->
                                   
             <----- HDR, SK {IDi, [CERT,] [CERTREQ,] [IDr,] 
                                 AUTH, SAi2, TSi, TSr,
                N[SYNC_MESSAGE_ID_INFO_SUPPORTED]} 
 ]]>
        
</artwork>            
  
      </figure>


      <t>  when the stand-by device takes control over the active device, it has to request the
   peer for the message Id values. Stand-by device would initiate the Message SYNC Request with 
   an INFORMATIONAL exchange containing the notify SYNC_MESSAGE_ID_INFO . 
   Nonce payload MUST be sent in Message SYNC Request.</t> 

   <t> Peer device would respond back with the notify SYNC_MESSAGE_ID_INFO. 
    The Nonce payload received in request MUST be sent back same by peer device
   in the reponse.  This is done to counter the replay of Message SYNC response.</t>

<figure align="left" >
        <artwork align="left" xml:space="preserve"> 
<![CDATA[
   Stand by Device                          Peer Device
   ===========                                      ===========
   HDR, SK {N[SYNC_MESSAGE_ID_INFO]} -------->
                                   
             <--------- HDR, SK {N[SYNC_MESSAGE_ID_INFO]}
    ]]>   
</artwork>              
      </figure>
             
    </section>
    
    <section title="Details of implementation" toc="include">
      
<t> The message Id used in this exchange MUST be zero so that it is not vaildated
   upon receipt. Message Id zero MUST be permitted only for informational exchange that would have
   NOTIFY of type SYNC_MESSAGE_ID_INFO. If any packet uses the message Id Zero,
   without having this Notify along with the Nonce payload, then such packets MUST be discarded upon decryption.</t>
       
      <t>    The stand-by device can initiate this Exchange    <list style="symbols">   
                       
        <t> when it has to send/receive the request.</t>
        <t>  It has just got the control from active device and want to update the values before-hand,
        so that it need not start this exchange at the time of sending/receiving the request.</t> 
      </list>
      </t>
        
      <t> Since there can be many sessions at Stand-by device, and sending exchanges from all of the
        sessions can cause throttling, the stand-by device can chose to initiate the exchange when it has to
        send or receive the request. Thus the trigger to initiate this exchange depends on the requirement/discretion
        of the stand-by device.</t>
      
      <t> The device which has not announced its capability  SYNC_MESSAGE_ID_INFO_SUPPORTED
     MUST NOT send/receive  the notify SYNC_MESSAGE_ID_INFO.
     </t>
      
      <t> If a device gets this type of exchange even though it did not announce its capability,
   then it MUST drop this packet with error INVALID_SYNTAX.
     </t>
      
      <t>  If responder of this exchange does not reply to this exchange, even
   though responder has announced its capability in AUTH Exchange, then
   the initiator SHOULD retransmit.  The responder MUST retransmit the Message SYNC response 
   only if gets a retransmitted request..</t>
      
      <t> If responder of this exchange does not reply to this exchange, even
        though responder has announced its capability in AUTH Exchange, then
        the initiator SHOULD retransmit. The responder MUST retransmit the
        Message SYNC response only for the earlier received Message SYNC Request.</t>
                
    </section>
    
    <section title="Notify Types" toc="default">
      
    <t>Below are the two notify types that are newly defined <list style="symbols">
          

<t>SYNC_MESSAGE_ID_INFO_SUPPORTED:  This notify would be similar to that any other simple notify 
      with the notify type being SYNC_MESSAGE_ID_INFO_SUPPORTED. 
      
      <figure align="left" title="SYNC_MESSAGE_ID_INFO_SUPPORTED">
        <artwork align="left" xml:space="preserve"> 
<![CDATA[
                          1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    | Next Payload  |C|  RESERVED   |         Payload Length        |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |Protocol ID(=0)| SPI Size (=0) |      Notify Message Type      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]>

              </artwork>
      </figure>
      </t>

    
      <t> SYNC_MESSAGE_ID_INFO : This notify would be similar to that of any other notify but with 
          Notify message type being SYNC_MESSAGE_ID_INFO.Additionally it contains the 
          following data.<list style ="symbols" >   

            <t> NONCE : This is some random value of size 32 bits. The NONCE is placed in the  notify to detect
     the replay of Message SYNC responses. The NONCE sent in the request and reply MUST match.</t>

             <t> EXPECTED_SEND_REQ_MESSAGE_ID : This field is used by the sender of this notify,
           to indicate the message Id it will use in the next request, that it will send to the peer.</t>
            
           <t> EXPECTED_RECV_REQ_MESSAGE_ID : This field is used by the sender of this notify,
            to indicate the message Id it can accept in the next request, received from the peer.</t>
            
         </list>
          
          <figure align="left" title="SET_MESSAGE_ID_INFO">
            <artwork align="left" xml:space="preserve"> 
                      1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    | Next Payload  |C|  RESERVED   |         Payload Length        |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |Protocol ID(=0)| SPI Size (=0) |      Notify Message Type      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |    NONCE                                                      |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |EXPECTED_SEND_REQ_MESSAGE_ID                                   |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |EXPECTED_RECV_REQ_MESSAGE_ID                                   |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  
     
        </artwork>
          </figure>
        </t>     
     </list>
    </t>
    </section>
    
<section title="Actions on the Peer Device" toc="include">
      <t>The Peer MUST start the window from higher value and MUST NOT wait for any pending requests.
For example, If the Peer device is expecting the next request with message Id K, 
then it should send the EXPECTED_SEND_REQ_MESSAGE_ID as K.
 If it has received some request through K-P but not P , then it should send the 
EXPECTED_SEND_REQ_MESSAGE_ID as  P.  </t>        
    </section>

    <section anchor="Security" title="Security Considerations" toc="default">

<t>
There can be two types of DOS attacks.

 <list style="symbols">    
   <t>  Replay of Message SYNC Request.
   This can be countered by rate limiting the number of such requests a peer device can receive.
   The rate limiting can be done either by number or the time delay between which Message SYNC request 
can be received or both.These options are configurable. </t>    

   <t> Replay of Message SYNC Response.
   This can be countered by sending the NONCE payload along with the SYNC_MESSAGE_ID_INFO notify. The payload has to
   be returned same in response.  Thus the stand-by device can accept the reply only for the current request.
   After it receives the response, it MUST not accept the same response again and MUST drop the response.
</t>
   </list>   

</t>  
       </section>
    
  <section title="Interaction with other drafts" toc="default">

<t>
   The primary assumption of message sync proposal is IKE SA has established between active member of cluster and 
        peer and then failover event occurred and now stand-by member has "become" active. It also assumes the IKE SA state
        has been synced between active and stand-by member of the cluster.

 <list style="symbols">    
   <t>  Session Resumption
 Failover event occurs on the cluster, so its known to all member of the cluster i.e. gateway or responder, now stand-by
            member who becomes active will initiates the message id sync.
            While session resumption assumes that peer i.e. client or initiator detects the need to re-establish the session.
           These primary assumption are mutually exclusive. Also in Hot Standby Cluster, client establishes the tunnel with 
           cluster IP address, so it will not detect the event of failover in the gateway cluster until standby member took very long
           to become active and IKE SA times out through liveness check.

</t>    

   <t> Redirect
  Redirect mechanism for load-balancing can be used during init (IKE_SA_INIT) and auth (IKE_AUTH) and after session 
              establishment. While message id sync is used after IKE SA has been established and failover event has occurred.
              So it is mutually exclusive with redirect during init and auth. The redirect after session established is used to timed
              or planned shutdown/maintenance. The failover event is can not detected on active member so using redirect after 
              session establishment is not possible in case of failover.

</t>

<t> Crash detection.
Either message id sync  or crash detection approach can be taken by standby gateway on failover event.
</t>
   </list>   

</t>  
       </section>

    <section  title="IANA Considerations" toc="default">    
    
      <t>
        This document  two  new IKEv2 Notification Message types as
        described in Section 5.The new Notify Message Types must be assigned values between 16396 and 40959.
   <list style="symbols">    
   <t>  SYNC_MESSAGE_ID_INFO_SUPPORTED</t>    
   <t> SYNC_MESSAGE_ID_INFO</t>    
    </list>
    </t>
    </section>    
    
    <section   toc="default" title="Acknowledgements">
      <t>  I would like to thank Pratima Sethi, Frederic Detienne and HA Design team 
   for their valuable reviews and suggestions. Thanks to Yaron for proposing the use of NONCE in 
the messages to prevent the replay attack of responses. </t>
    </section>    
    
  </middle>  
 
  <!-- ====================================================================== -->
  
  <back>     
    <references title="Normative References">
      <reference anchor="RFC2119">
        <front>
          <title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement
            Levels</title>
          <author initials="S." surname="Bradner" fullname="Scott Bradner">
            <organization>Harvard University</organization>
            <address>
              <postal>
                <street>1350 Mass. Ave.</street>
                <street>Cambridge</street>
                <street>MA 02138</street>
              </postal>
              <phone>- +1 617 495 3864</phone>
              <email>sob@harvard.edu</email>
            </address>
          </author>
          <date year="1997" month="March"/>
          <area>General</area>
          <keyword>keyword</keyword>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="2119"/>
        <format type="TXT" octets="4723" target="ftp://ftp.isi.edu/in-notes/rfc2119.txt"/>
        <format type="HTML" octets="16553"
          target="http://xml.resource.org/public/rfc/html/rfc2119.html"/>
        <format type="XML" octets="5703" target="http://xml.resource.org/public/rfc/xml/rfc2119.xml"
        />
      </reference>
      <reference anchor="RFC4306">
        <front>
          <title>Internet Key Exchange (IKEv2) Protocol</title>
          <author initials="C." surname="Kaufman" fullname="C. Kaufman">
            <organization/>
          </author>
          <date year="2005" month="December"/>
        </front>
        <seriesInfo name="RFC" value="4306"/>
        <format type="TXT" target="http://www.ietf.org/rfc/rfc4306.txt"/>
        <format type="HTML" target="http://xml.resource.org/public/rfc/html/rfc4306.html"/>
        <format type="XML" target="http://xml.resource.org/public/rfc/xml/rfc4306.xml"/>
      </reference>
      
      <reference anchor="RFC4718">
        <front>
          <title>IKEv2 Clarifications and Implementation Guidelines</title>
          <author initials="P." surname="Eronen" fullname="P. Eronen">
            <organization/>
          </author><author initials="P." surname="Hoffman" fullname="P. Hoffman">
            <organization/>
          </author>
          <date year="2006" month="October"/>
        </front>
        <seriesInfo name="RFC" value="4306"/>
        <format type="TXT" target="http://www.ietf.org/rfc/rfc4718.txt"/>
        <format type="HTML" target="http://xml.resource.org/public/rfc/html/rfc4718.html"/>
        <format type="XML" target="http://xml.resource.org/public/rfc/xml/rfc4718.xml"/>
      </reference>

     </references>
     <!-- ====================================================================== -->
  </back>
  
 
  
</rfc>


