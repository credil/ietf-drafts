<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-ietf-rtcweb-overview-01" ipr="trust200902">
  <front>
    <title abbrev="Browser RTC">Overview: Real Time Protocols for Brower-based
    Applications</title>

    <author fullname="Harald T. Alvestrand" initials="H. T. "
            surname="Alvestrand">
      <organization>Google</organization>

      <address>
        <postal>
          <street>Kungsbron 2</street>

          <city>Stockholm</city>

          <region></region>

          <code>11122</code>

          <country>Sweden</country>
        </postal>

        <email>harald@alvestrand.no</email>
      </address>
    </author>

    <date day="24" month="August" year="2011" />

    <abstract>
      <t>This document gives an overview and context of a protocol suite
      intended for use with real-time applications that can be deployed in
      browsers - "real time communication on the Web".</t>

      <t>It intends to serve as a starting and coordination point to make sure
      all the parts that are needed to achieve this goal are findable, and
      that the parts that belong in the Internet protocol suite are fully
      specified and on the right publication track.</t>

      <t>This work is an attempt to synthesize the input of many people, but
      makes no claims to fully represent the views of any of them. All parts
      of the document should be regarded as open for discussion, unless the
      RTCWEB chairs have declared consensus on an item.</t>

      <t>This document is a candidate to become a work item of the RTCWEB
      working group.</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t>The Internet was, from very early in its lifetime, considered a
      possible vehicle for the deployment of real-time, interactive
      applications - with the most easily imaginable being audio conversations
      (aka "Internet telephony") and videoconferencing.</t>

      <t>The first attempts to build this were dependent on special networks,
      special hardware and custom-built software, often at very high prices or
      at low quality, placing great demands on the infrastructure.</t>

      <t>As the available bandwidth has increased, and as processors and other
      hardware has become ever faster, the barriers to participation have
      decreased, and it is possible to deliver a satisfactory experience on
      commonly available computing hardware.</t>

      <t>Still, there are a number of barriers to the ability to communicate
      universally - one of these is that there is, as of yet, no single set of
      communication protocols that all agree should be made available for
      communication; another is the sheer lack of universal identification
      systems (such as is served by telephone numbers or email addresses in
      other communications systems).</t>

      <t>Development of The Universal Solution has proved hard, however, for
      all the usual reasons. This memo aims to take a more
      building-block-oriented approach, and try to find consensus on a set of
      substrate components that we think will be useful in any real-time
      communications systems.</t>

      <t>The last few years have also seen a new platform rise for deployment
      of services: The browser-embedded application, or "Web application". It
      turns out that as long as the browser platform has the necessary
      interfaces, it is possible to deliver almost any kind of service on
      it.</t>

      <t>Traditionally, these interfaces have been delivered by plugins, which
      had to be downloaded and installed separately from the browser; in the
      development of HTML5, much promise is seen by the possibility of making
      those interfaces available in a standardized way within the browser.</t>

      <t>This memo specifies a set of building blocks that can be made
      accessible and controllable through a Javascript API interface in a
      browser, and which together form a necessary and sufficient set of
      functions to allow the use of interactive audio and video in
      applications that communicate directly between browsers across the
      Internet.</t>

      <t>Other efforts, for instance the W3C WebRTC, Web Applications and
      Device API working groups, focus on making standardized APIs and
      interfaces available, within or alongside the HTML5 effort, for those
      functions; this memo concentrates on specifying the protocols and
      subprotocols that are needed to specify the interactions that happen
      across the network.</t>

      <t></t>
    </section>

    <section title="Principles and Terminology">
      <t></t>

      <section title="Goals of this document">
        <t>The goal of the RTCWEB protocol specification is to specify a set
        of protocols that, if all are implemented, will allow the
        implementation to communicate with another implementation using audio,
        video and auxiliary data sent along the most direct possible path
        between the participants.</t>

        <t>This document is intended to serve as the roadmap to the RTCWEB
        specifications. It defines terms used by other pieces of
        specification, lists references to other specifications that don't
        need further elaboration in the RTCWEB context, and gives pointers to
        other documents that form part of the RTCWEB suite.</t>

        <t>By reading this document and the documents it refers to, it should
        be possible to have all information needed to implement an RTCWEB
        compatible implementation.</t>
      </section>

      <section title="Relationship between API and protocol">
        <t>The total RTCWEB/WEBRTC effort consists of two pieces:</t>

        <t><list style="symbols">
            <t>A protocol specification, done in the IETF</t>

            <t>A Javascript API specification, done in the W3C <xref
            target="webrtc-api"></xref></t>
          </list>Together, these two specifications aim to provide an
        environment where Javascript embedded in any page, viewed in any
        compatible browser, when suitably authorized by its user, is able to
        set up communication using audio, video and auxiliary data, where the
        browser environment does not constrain the types of application in
        which this functionality can be used.</t>

        <t>The protocol specification does not assume that all implementations
        implement this API; it is not intended to be possible by observing the
        bits on the wire whether they come from a browser or from another
        device implementing this specification.</t>

        <t>The goal of cooperation between the protocol specification and the
        API specification is that for all options and features of the protocol
        specification, it should be clear which API calls to make to exercise
        that option or feature; similarly, for any sequence of API calls, it
        should be clear which protocol options and features will be invoked.
        Both subject to constraints of the implementation, of course.</t>
      </section>

      <section title="On interoperability and innovation">
        <t>The "Mission statement of the IETF" <xref target="RFC3935"></xref>
        states that "The benefit of a standard to the Internet is in
        interoperability - that multiple products implementing a standard are
        able to work together in order to deliver valuable functions to the
        Internet's users."</t>

        <t>Communication on the Internet frequently occurs in two phases:</t>

        <t><list style="symbols">
            <t>Two parties communicate, through some mechanism, what
            functionality they both are able to support</t>

            <t>They use that shared communicative functionality to
            communicate, or, failing to find anything in common, give up on
            communication.</t>
          </list>There are often many choices that can be made for
        communicative functionality; the history of the Internet is rife with
        the proposal, standardization, implementation, and success or failure
        of many types of options, in all sorts of protocols.</t>

        <t>The goal of having a mandatory to implement function set is to
        prevent negotiation failure, not to preempt or prevent
        negotiation.</t>

        <t>The presence of a mandatory to implement function set serves as a
        strong changer of the marketplace of deployment - in that it gives a
        guarantee that, as long as you conform to a specification, and the
        other party is willing to accept communication at the base level of
        that specification, you can communicate successfully.</t>

        <t>The alternative - that of having no mandatory to implement - does
        not mean that you cannot communicate, it merely means that in order to
        be part of the communications partnership, you have to implement the
        standard "and then some" - that "and then some" usually being called a
        profile of some sort; in the version most antithetical to the Internet
        ethos, that "and then some" consists of having to use a specific
        vendor's product only.</t>
      </section>

      <section title="Terminology">
        <t>The following terms are used in this document, and as far as
        possible across the documents specifying the RTCWEB suite, in the
        specific meanings given here. Not all terms are used in this document.
        Other terms are used in their commonly used meaning.</t>

        <t>The list is in alphabetical order.</t>

        <t><list style="hanging">
            <t hangText="Agent:">Undefined term. See "SDP Agent" and "ICE
            Agent".</t>

            <t hangText="API:">Application Programming Interface - a
            specification of a set of calls and events, usually tied to a
            programming language or an abstract formal specification such as
            WebIDL, with its defined semantics.</t>

            <t hangText="ICE Agent:">An implementation of the ICE <xref
            target="RFC5245"></xref> protocol. An ICE Agent may also be an SDP
            Agent, but there exist ICE Agents that do not use SDP (for
            instance those that use Jingle).</t>

            <t hangText="Interactive:">Communication between multiple parties,
            where the expectation is that an action from one party can cause a
            reaction by another party, and the reaction can be observed by the
            first party, with the total time required for the
            action/reaction/observation is on the order of no more than
            hundreds of milliseconds.</t>

            <t hangText="Media:">Audio and video content. Not to be confused
            with "transmission media" such as wires.</t>

            <t hangText="Media path:">The path that media data follows from
            one browser to another.</t>

            <t hangText="Protocol:">A specification of a set of data units,
            their representation, and rules for their transmission, with their
            defined semantics. A protocol is usually thought of as going
            between systems.</t>

            <t hangText="Real-time media:">Media where generation of content
            and display of content are intended to occur closely together in
            time (on the order of no more than hundreds of milliseconds).</t>

            <t hangText="SDP Agent:">The protocol implementation involved in
            the SDP offer/answer exchange, as defined in <xref
            target="RFC3264"></xref> section 3.</t>

            <t hangText="Signaling:">Communication that happens in order to
            establish, manage and control media paths.</t>

            <t hangText="Signaling Path:">The communication channels used
            between entities participating in signalling to transfer
            signaling. There may be more entities in the signaling path than
            in the media path.</t>
          </list>NOTE: Where common definitions exist for these terms, those
        definitions should be used to the greatest extent possible.</t>

        <t>TODO: Extend this list with other terms that might prove
        slippery.</t>
      </section>
    </section>

    <section title="Architecture and Functionality groups">
      <t>The model of real-time support for browser-based applications does
      not envisage that the browser will contain all the functions that need
      to be performed in order to have a function such as a telephone or a
      videoconferencing unit; the vision is that the browser will have the
      functions that are needed for a Web application, working in conjunction
      with its backend servers, to implement these functions.</t>

      <t>This means that two vital interfaces need specification: The
      protocols that browsers talk to each other, without any intervening
      servers, and the APIs that are offered for a Javascript application to
      take advantage of the browser's functionality.</t>

      <figure anchor="fig-browser-model" title="Browser Model">
        <artwork><![CDATA[

                                                                          
                     +------------------------+  On-the-wire              
                     |                        |  Protocols                
                     |      Servers           |--------->                 
                     |                        |                           
                     |                        |                           
                     +------------------------+                           
                                 ^                                        
                                 |                                        
                                 |                                        
                                 | HTTP/                                  
                                 | Websockets                             
                                 |                                              
                                 |                                        
                   +----------------------------+                         
                   |    Javascript/HTML/CSS     |                         
                   +----------------------------+                         
                Other  ^                 ^RTC                             
                APIs   |                 |APIs                            
                   +---|-----------------|------+                         
                   |   |                 |      |                         
                   |                 +---------+|                         
                   |                 | Browser ||  On-the-wire            
                   | Browser         | RTC     ||  Protocols              
                   |                 | Function|----------->              
                   |                 |         ||                         
                   |                 |         ||                         
                   |                 +---------+|                         
                   +---------------------|------+                         
                                         |                                
                                         V                                
                                    Native OS Services                    
                                                                          
                                                                          
                                                                          
                                                                          
                                                                          
                                                                          

]]></artwork>
      </figure>

      <t>As for all protocol and API specifications, there is no restriction
      that the protocols can only be used to talk to another browser; since
      they are fully specified, any device that implements the protocols
      faithfully should be able to interoperate with the application running
      in the browser.</t>

      <t>A commonly imagined model of deployment is the one depicted
      below.</t>

      <figure anchor="fig-webtrapezoid" title="Browser RTC Trapezoid">
        <artwork><![CDATA[                                                                  
                                                                          
             +-----------+             +-----------+                      
             |   Web     |             |   Web     |                      
             |           |  Signalling |           |                      
             |           |-------------|           |                      
             |  Server   |   path      |  Server   |                      
             |           |             |           |                      
             +-----------+             +-----------+                      
                  /                           \                           
                 /                             \   Proprietary over       
                /                               \  HTTP/Websockets        
               /                                 \                        
              /  Proprietary over                 \                       
             /   HTTP/Websockets                   \                      
            /                                       \                     
      +-----------+                           +-----------+               
      |JS/HTML/CSS|                           |JS/HTML/CSS|               
      +-----------+                           +-----------+               
      +-----------+                           +-----------+               
      |           |                           |           |               
      |           |                           |           |               
      |  Browser  | ------------------------- |  Browser  |               
      |           |          Media path       |           |               
      |           |                           |           |               
      +-----------+                           +-----------+               
]]></artwork>
      </figure>

      <t>If the two Web servers are operated by different entities, the
      signalling path needs to be standardized too; for example, both servers
      might implement SIP, and the servers would talk SIP to each other, and
      each would translate between the SIP protocol and their proprietary
      representation for sending to their application running in the
      browser.</t>

      <t>On this sketch, the critical part to note is that the media path
      ("low path") goes directly between the browsers, so it has to be
      conformant to the specifications of the RTCWEB protocol suite; the
      signalling path ("high path") goes via servers that can modify,
      translate or massage the signals as needed.</t>

      <t>The functionality groups that are needed in the browser can be
      specified, more or less from the bottom up, as:</t>

      <t><list style="symbols">
          <t>Data transport: TCP, UDP and the means to securely set up
          connections between entities, as well as the functions for deciding
          when to send data: Congestion management, bandwidth estimation and
          so on.</t>

          <t>Data framing: RTP and other data formats that serve as
          containers, and their functions for data confidentiality and
          integrity.</t>

          <t>Data formats: Codec specifications, format specifications and
          functionality specifications for the data passed between systems.
          Audio and video codecs, as well as formats for data and document
          sharing, belong in this category. In order to make use of data
          formats, a way to describe them, a session description, is
          needed.</t>

          <t>Connection management: Setting up connections, agreeing on data
          formats, changing data formats during the duration of a call; SIP
          and Jingle/XMPP belong in this category.</t>

          <t>Presentation and control: What needs to happen in order to ensure
          that interactions behave in a non-surprising manner. This can
          include floor control, screen layout, voice activated image
          switching and other such functions - where part of the system
          require the cooperation between parties. Cisco/Tandberg's TIP was
          one attempt at specifying this functionality.</t>

          <t>Local system support functions: These are things that need not be
          specified uniformly, because each participant may choose to do these
          in a way of the participant's choosing, without affecting the bits
          on the wire in a way that others have to be cognizant of. Examples
          in this category include echo cancellation (some forms of it), local
          authentication and authorization mechanisms, OS access control and
          the ability to do local recording of conversations.</t>
        </list>Within each functionality group, it is important to preserve
      both freedom to innovate and the ability for global communication.
      Freedom to innovate is helped by doing the specification in terms of
      interfaces, not implementation; any implementation able to communicate
      according to the interfaces is a valid implementation. Ability to
      communicate globally is helped both by having core specifications be
      unencumbered by IPR issues and by having the formats and protocols be
      fully enough specified to allow for independent implementation.</t>

      <t>One can think of the three first groups as forming a "media transport
      infrastructure", and of the three last groups as forming a "media
      service". In many contexts, it makes sense to use a common specification
      for the media transport infrastructure, which can be embedded in
      browsers and accessed using standard interfaces, and "let a thousand
      flowers bloom" in the "media service" layer; to achieve interoperable
      services, however, at least the first five of the six groups need to be
      specified.</t>
    </section>

    <section title="Data transport">
      <t>Data transport refers to the sending and receiving of data over the
      network interfaces, the choice of network-layer addresses at each end of
      the communication, and the interaction with any intermediate entities
      that handle the data, but do not modify it (such as TURN relays).</t>

      <t>It includes necessary functions for congestion control: When not to
      send data.</t>

      <t>The data transport protocols used by RTCWEB are described in
      &lt;WORKING GROUP DRAFT "TRANSPORTS"&gt;.</t>

      <t>The interactions with intermediate boxes, such as firewalls, relays
      and NAT boxes, is described in &lt;WORKING GROUP DRAFT "PEER TO PEER
      CONNECTIVITY"&gt;.</t>
    </section>

    <section title="Data framing and securing">
      <t>SRTP <xref target="RFC3550"></xref> is used for transport of all
      real-time media.</t>

      <t>The detailed considerations for usage of functions from RTP and SRTP,
      as well as for non-media real-time data, are given in &lt;WORKING GROUP
      DRAFT "MEDIA TRANSPORTS"&gt;.</t>
    </section>

    <section title="Data formats">
      <t>The intent of this specification is to allow each communications
      event to use the data formats that are best suited for that particular
      instance, where a format is supported by both sides of the connection.
      However, a minimum standard is greatly helpful in order to ensure that
      communication can be achieved. This document specifies a minimum
      baseline that will be supported by all implementations of this
      specification, and leaves further codecs to be included at the will of
      the implementor.</t>

      <t>The mandatory to implement codecs, as well as any profiling
      requirements for both mandatory and optional codecs, is described in
      &lt;WORKING GROUP DRAFT "MEDIA PROCESSING"&gt;.</t>
    </section>

    <section title="Connection management">
      <t>The methods, mechanisms and requirements for setting up, negotiating
      and tearing down connections is a large subject, and one where it is
      desirable to have both interoperability and freedom to innovate.</t>

      <t>The particular choices made for RTCWEB are described in &lt;WORKING
      GROUP DRAFT "SIGNALING AND NEGOTIATION"&gt;.</t>
    </section>

    <section title="Presentation and control">
      <t>The most important part of control is the user's control over the
      browser's interaction with input/output devices and communications
      channels. It is important that the user have some way of figuring out
      where his audio, video or texting is being sent, for what purported
      reason, and what guarantees are made by the parties that form part of
      this control channel. This is largely a local function between the
      browser, the underlying operating system and the user interface; this is
      being worked on as part of the W3C API effort. &lt;INSERT REFERENCE TO
      W3C API SPEC WHEN AVAILABLE&gt;</t>

      <t></t>
    </section>

    <section title="Local system support functions">
      <t>These are characterized by the fact that the quality of these
      functions strongly influences the user experience, but the exact
      algorithm does not need coordination. In some cases (for instance echo
      cancellation, as described below), the overall system definition may
      need to specify that the overall system needs to have some
      characteristics for which these facilities are useful, without requiring
      them to be implemented a certain way.</t>

      <t>Local functions include echo cancellation, volume control, camera
      management including focus, zoom, pan/tilt controls (if available), and
      more.</t>

      <t>Certain parts of the system SHOULD conform to certain properties, for
      instance:</t>

      <t><list style="symbols">
          <t>Echo cancellation should be good enough to achieve the
          suppression of acoustical feedback loops below a perceptually
          noticeable level.</t>

          <t>Privacy concerns must be satisfied; for instance, if remote
          control of camera is offered, the APIs should be available to let
          the local participant to figure out who's controlling the camera,
          and possibly decide to revoke the permission for camera usage.</t>

          <t>Automatic gain control, if present, should normalize a speaking
          voice into &lt;whatever dB metrics makes sense here - most important
          that we have one only&gt;</t>
        </list>The requirements on RTCWEB systems in this category are found
      in &lt;WORKING GROUP DRAFT "MEDIA PROCESSING"&gt;.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes no request of IANA.</t>

      <t>Note to RFC Editor: this section may be removed on publication as an
      RFC.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>Security of the web-enabled real time communications comes in several
      pieces:</t>

      <t><list style="symbols">
          <t>Security of the components: The browsers, and other servers
          involved. The most target-rich environment here is probably the
          browser; the aim here should be that the introduction of these
          components introduces no additional vulnerability.</t>

          <t>Security of the communication channels: It should be easy for a
          participant to reassure himself of the security of his communication
          - by verifying the crypto parameters of the links he himself
          participates in, and to get reassurances from the other parties to
          the communication that they promise that appropriate measures are
          taken.</t>

          <t>Security of the partners' identity: verifying that the
          participants are who they say they are (when positive identification
          is appropriate), or that their identity cannot be uncovered (when
          anonymity is a goal of the application).</t>
        </list>The security analysis, and the requirements derived from that
      analysis, is contained in &lt;WORKING GROUP DRAFT "SECURITY"&gt;.</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The number of people who have taken part in the discussions
      surrounding this draft are too numerous to list, or even to identify.
      The ones below have made special, identifiable contributions; this does
      not mean that others' contributions are less important.</t>

      <t>Thanks to Cary Bran, Cullen Jennings, Colin Perkins, Magnus
      Westerlund and Joerg Ott, who offered technical contributions on various
      versions of the draft.</t>

      <t>Thanks to Jonathan Rosenberg, Matthew Kaufman and others at Skype for
      the draft I lifted the ASCII drawings from.</t>

      <t>Thanks to Justin Uberti and Simon Leinen for document review.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include='reference.RFC.3550'?>

      <?rfc ?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.RFC.3935'?>

      <?rfc include='reference.RFC.3264'?>

      <?rfc include='reference.RFC.5245'?>

      <reference anchor="webrtc-api">
        <front>
          <title>WebRTC 1.0: Real-time Communication Between Browsers</title>

          <author fullname="W3C editors"
                  surname="Bergkvist, Burnett, Jennings, Narayanan">
            <organization>au</organization>
          </author>

          <date day="23" month="August" year="2011" />
        </front>

        <annotation>Available at
        http://dev.w3.org/2011/webrtc/editor/webrtc.html</annotation>
      </reference>
    </references>

    <section title="Change log">
      <t>This section may be deleted by the RFC Editor when preparing for
      publication.</t>

      <t></t>

      <section title="Changes from draft-alvestrand-dispatch-rtcweb-datagram-00 to -01">
        <t>Added section "On interoperability and innovation"</t>

        <t>Added data confidentiality and integrity to the "data framing"
        layer</t>

        <t>Added congestion management requirements in the "data transport"
        layer section</t>

        <t>Changed need for non-media data from "question: do we need this?"
        to "Open issue: How do we do this?"</t>

        <t>Strengthened disclaimer that listed codecs are placeholders, not
        decisions.</t>

        <t>More details on why the "local system support functions" section is
        there.</t>
      </section>

      <section title="Changes from draft-alvestrand-dispatch-01 to draft-alvestrand-rtcweb-overview-00">
        <t>Added section on "Relationship between API and protocol"</t>

        <t>Added terminology section</t>

        <t>Mentioned congestion management as part of the "data transport"
        layer in the layer list</t>
      </section>

      <section title="Changes from draft-alvestrand-rtcweb-00 to -01">
        <t>Removed most technical content, and replaced with pointers to
        drafts as requested and identified by the RTCWEB WG chairs.</t>

        <t>Added content to acknowledgements section.</t>

        <t>Added change log.</t>

        <t>Spell-checked document.</t>
      </section>

      <section title="Changes from draft-alvestrand-rtcweb-overview-01 to draft-ietf-rtcweb-overview-00">
        <t>Changed draft name and document date.</t>

        <t>Removed unused references</t>
      </section>

      <section title="Changes from draft-ietf-rtcweb-overview -00 to -01">
        <t>Added architecture figures to section 2.</t>

        <t>Changed the description of "echo cancellation" under "local system
        support functions".</t>

        <t>Added a few more definitions.</t>
      </section>
    </section>
  </back>
</rfc>
