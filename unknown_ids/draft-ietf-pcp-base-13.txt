


PCP working group                                           D. Wing, Ed.
Internet-Draft                                                     Cisco
Intended status: Standards Track                             S. Cheshire
Expires: January 6, 2012                                           Apple
                                                            M. Boucadair
                                                          France Telecom
                                                                R. Penno
                                                        Juniper Networks
                                                              P. Selkirk
                                             Internet Systems Consortium
                                                            July 5, 2011


                      Port Control Protocol (PCP)
                         draft-ietf-pcp-base-13

Abstract

   The Port Control Protocol allows an IPv6 or IPv4 host to control how
   incoming IPv6 or IPv4 packets are translated and forwarded by a
   network address translator (NAT) or simple firewall, and also allows
   a host to optimize its outgoing NAT keepalive messages.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 6, 2012.

Copyright Notice

   Copyright (c) 2011 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of



Wing, et al.             Expires January 6, 2012                [Page 1]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
   2.  Scope  . . . . . . . . . . . . . . . . . . . . . . . . . . . .  5
     2.1.  Deployment Scenarios . . . . . . . . . . . . . . . . . . .  5
     2.2.  Supported Protocols  . . . . . . . . . . . . . . . . . . .  5
     2.3.  Single-homed Customer Premises Network . . . . . . . . . .  5
   3.  Terminology  . . . . . . . . . . . . . . . . . . . . . . . . .  6
     3.1.  Note on Fixed-Size Addresses . . . . . . . . . . . . . . .  8
   4.  Relationship between PCP Server and its NAT/firewall . . . . .  9
   5.  Common Request and Response Header Format  . . . . . . . . . .  9
     5.1.  Request Header . . . . . . . . . . . . . . . . . . . . . . 10
     5.2.  Response Header  . . . . . . . . . . . . . . . . . . . . . 11
     5.3.  Options  . . . . . . . . . . . . . . . . . . . . . . . . . 12
     5.4.  Result Codes . . . . . . . . . . . . . . . . . . . . . . . 14
   6.  General PCP Operation  . . . . . . . . . . . . . . . . . . . . 15
     6.1.  General PCP Client: Generating a Request . . . . . . . . . 15
     6.2.  General PCP Server: Processing a Request . . . . . . . . . 17
     6.3.  General PCP Client: Processing a Response  . . . . . . . . 18
     6.4.  Multi-Interface Issues . . . . . . . . . . . . . . . . . . 18
     6.5.  Epoch  . . . . . . . . . . . . . . . . . . . . . . . . . . 19
     6.6.  Version Negotiation  . . . . . . . . . . . . . . . . . . . 19
     6.7.  General PCP Option . . . . . . . . . . . . . . . . . . . . 20
       6.7.1.  UNPROCESSED Option . . . . . . . . . . . . . . . . . . 20
   7.  Introduction to MAP and PEER OpCodes . . . . . . . . . . . . . 21
     7.1.  For Operating a Server . . . . . . . . . . . . . . . . . . 22
     7.2.  For Operating a Symmetric Client/Server  . . . . . . . . . 23
     7.3.  For Reducing NAT Keepalive Messages  . . . . . . . . . . . 26
     7.4.  For Restoring Lost Implicit TCP Dynamic Mapping State  . . 27
   8.  MAP OpCodes  . . . . . . . . . . . . . . . . . . . . . . . . . 28
     8.1.  MAP Operation Packet Formats . . . . . . . . . . . . . . . 29
     8.2.  MAP Operation Result Codes . . . . . . . . . . . . . . . . 31
     8.3.  Generating a MAP Request . . . . . . . . . . . . . . . . . 32
     8.4.  Processing a MAP Request . . . . . . . . . . . . . . . . . 33
     8.5.  Processing a MAP Response  . . . . . . . . . . . . . . . . 34
     8.6.  Mapping Lifetime and Deletion  . . . . . . . . . . . . . . 35
     8.7.  Address Change Events  . . . . . . . . . . . . . . . . . . 37
   9.  PEER OpCodes . . . . . . . . . . . . . . . . . . . . . . . . . 38
     9.1.  PEER Operation Packet Formats  . . . . . . . . . . . . . . 39
     9.2.  PEER Operation Result Codes  . . . . . . . . . . . . . . . 42



Wing, et al.             Expires January 6, 2012                [Page 2]

Internet-Draft         Port Control Protocol (PCP)             July 2011


     9.3.  Generating a PEER Request  . . . . . . . . . . . . . . . . 42
     9.4.  Processing a PEER Request  . . . . . . . . . . . . . . . . 42
     9.5.  Processing a PEER Response . . . . . . . . . . . . . . . . 43
   10. Options for MAP and PEER OpCodes . . . . . . . . . . . . . . . 44
     10.1. THIRD_PARTY Option for MAP and PEER OpCodes  . . . . . . . 44
     10.2. PREFER_FAILURE Option for MAP OpCodes  . . . . . . . . . . 46
     10.3. FILTER Option for MAP OpCodes  . . . . . . . . . . . . . . 47
   11. Implementation Considerations  . . . . . . . . . . . . . . . . 49
     11.1. Implementing MAP with EDM port-mapping NAT . . . . . . . . 50
     11.2. Lifetime of Explicit and Implicit Dynamic Mappings . . . . 50
     11.3. PCP Failure Scenarios  . . . . . . . . . . . . . . . . . . 50
       11.3.1. Recreating Mappings  . . . . . . . . . . . . . . . . . 51
       11.3.2. Maintaining Mappings . . . . . . . . . . . . . . . . . 51
   12. Deployment Considerations  . . . . . . . . . . . . . . . . . . 52
     12.1. Ingress Filtering  . . . . . . . . . . . . . . . . . . . . 52
     12.2. Mapping Quota  . . . . . . . . . . . . . . . . . . . . . . 52
   13. Security Considerations  . . . . . . . . . . . . . . . . . . . 52
     13.1. Denial of Service  . . . . . . . . . . . . . . . . . . . . 53
     13.2. Ingress Filtering  . . . . . . . . . . . . . . . . . . . . 53
     13.3. Authorizing THIRD_PARTY Internal Address . . . . . . . . . 53
     13.4. Theft of mapping . . . . . . . . . . . . . . . . . . . . . 54
   14. IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 54
     14.1. Port Number  . . . . . . . . . . . . . . . . . . . . . . . 54
     14.2. OpCodes  . . . . . . . . . . . . . . . . . . . . . . . . . 54
     14.3. Result Codes . . . . . . . . . . . . . . . . . . . . . . . 55
     14.4. Options  . . . . . . . . . . . . . . . . . . . . . . . . . 55
   15. Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 55
   16. References . . . . . . . . . . . . . . . . . . . . . . . . . . 55
     16.1. Normative References . . . . . . . . . . . . . . . . . . . 55
     16.2. Informative References . . . . . . . . . . . . . . . . . . 56
   Appendix A.  NAT-PMP Transition  . . . . . . . . . . . . . . . . . 58
   Appendix B.  Change History  . . . . . . . . . . . . . . . . . . . 59
     B.1.  Changes from draft-ietf-pcp-base-12 to -13 . . . . . . . . 59
     B.2.  Changes from draft-ietf-pcp-base-11 to -12 . . . . . . . . 60
     B.3.  Changes from draft-ietf-pcp-base-10 to -11 . . . . . . . . 60
     B.4.  Changes from draft-ietf-pcp-base-09 to -10 . . . . . . . . 60
     B.5.  Changes from draft-ietf-pcp-base-08 to -09 . . . . . . . . 60
     B.6.  Changes from draft-ietf-pcp-base-07 to -08 . . . . . . . . 61
     B.7.  Changes from draft-ietf-pcp-base-06 to -07 . . . . . . . . 62
     B.8.  Changes from draft-ietf-pcp-base-05 to -06 . . . . . . . . 64
     B.9.  Changes from draft-ietf-pcp-base-04 to -05 . . . . . . . . 65
     B.10. Changes from draft-ietf-pcp-base-03 to -04 . . . . . . . . 65
     B.11. Changes from draft-ietf-pcp-base-02 to -03 . . . . . . . . 66
     B.12. Changes from draft-ietf-pcp-base-01 to -02 . . . . . . . . 67
     B.13. Changes from draft-ietf-pcp-base-00 to -01 . . . . . . . . 67
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 68





Wing, et al.             Expires January 6, 2012                [Page 3]

Internet-Draft         Port Control Protocol (PCP)             July 2011


1.  Introduction

   The Port Control Protocol (PCP) provides a mechanism to control how
   incoming packets are forwarded by upstream devices such as NAT64,
   NAT44, and firewall devices, and a mechanism to reduce application
   keepalive traffic.  PCP is primarily designed to be implemented in
   the context of both Carrier-Grade NATs (CGN) and small NATs (e.g.,
   residential NATs).  PCP allows hosts to operate servers for a long
   time (e.g., a webcam) or a short time (e.g., while playing a game or
   on a phone call) when behind a NAT device, including when behind a
   CGN operated by their Internet service provider.

   PCP allows applications to create mappings from an external IP
   address and port to an internal IP address and port.  These mappings
   are required for successful inbound communications destined to
   machines located behind a NAT or a firewall.

   After creating a mapping for incoming connections, it is necessary to
   inform remote computers about the IP address and port for the
   incoming connection.  This is usually done in an application-specific
   manner.  For example, a computer game might use a rendezvous server
   specific to that game (or specific to that game developer), a SIP
   phone would use a SIP proxy, and a client using DNS-Based Service
   Discovery [DNS-SD] would use DNS Update [RFC2136] [RFC3007].  PCP
   does not provide this rendezvous function.  The rendezvous function
   will support IPv4, IPv6, or both.  Depending on that support and the
   application's support of IPv4 or IPv6, the PCP client will need an
   IPv4 mapping, an IPv6 mapping, or both.

   Many NAT-friendly applications send frequent application-level
   messages to ensure their session will not be timed out by a NAT.
   These are commonly called "NAT keepalive" messages, even though they
   are not sent to the NAT itself (rather, they are sent 'through' the
   NAT).  These applications can reduce the frequency of those NAT
   keepalive messages by using PCP to learn (and influence) the NAT
   mapping lifetime.  This helps reduce bandwidth on the subscriber's
   access network, traffic to the server, and battery consumption on
   mobile devices.

   Many NATs and firewalls have included application layer gateways
   (ALGs) to create mappings for applications that establish additional
   streams or accept incoming connections.  ALGs incorporated into NATs
   may also modify the application payload.  Industry experience has
   shown that these ALGs are detrimental to protocol evolution.  PCP
   allows an application to create its own mappings in NATs and
   firewalls, reducing the incentive to deploy ALGs in NATs and
   firewalls.




Wing, et al.             Expires January 6, 2012                [Page 4]

Internet-Draft         Port Control Protocol (PCP)             July 2011


2.  Scope

2.1.  Deployment Scenarios

   PCP can be used in various deployment scenarios, including:

   o  Basic NAT [RFC3022]

   o  Network Address and Port Translation [RFC3022], such as commonly
      deployed in residential NAT devices

   o  Carrier-Grade NAT [I-D.ietf-behave-lsn-requirements]

   o  Dual-Stack Lite (DS-Lite) [I-D.ietf-softwire-dual-stack-lite]

   o  Layer-2 aware NAT [I-D.miles-behave-l2nat]

   o  Dual-Stack Extra Lite [I-D.arkko-dual-stack-extra-lite]

   o  NAT64, both Stateless [RFC6145] and Stateful [RFC6146]

   o  IPv4 and IPv6 simple firewall control [RFC6092]

2.2.  Supported Protocols

   The PCP OpCodes defined in this document are designed to support
   transport-layer protocols that use a 16-bit port number (e.g., TCP,
   UDP, SCTP, DCCP).  Protocols that do not use a port number (e.g.,
   IPsec ESP) are beyond the scope of this document, as is using PCP to
   request forwarding of all traffic to a single default host (often
   nicknamed a "DMZ").

2.3.  Single-homed Customer Premises Network

   PCP assumes a single-homed IP address model.  That is, for a given IP
   address of a host, only one default route exists to reach the
   Internet.  This is important because after a PCP mapping is created
   and an inbound packet (e.g., TCP SYN) arrives at the host, the
   outbound response (e.g., TCP SYNACK) has to go through the same path
   so it is seen by the firewall or rewritten by the NAT.  This
   restriction exists because otherwise there would need to be a PCP-
   enabled NAT for every egress (because the host could not reliably
   determine which egress path packets would take) and the client would
   need to be able to reliably make the same internal/external mapping
   in every NAT gateway, which in general is not possible (because the
   other NATs might have the necessary port mapped to another host).





Wing, et al.             Expires January 6, 2012                [Page 5]

Internet-Draft         Port Control Protocol (PCP)             July 2011


3.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in "Key words for use in
   RFCs to Indicate Requirement Levels" [RFC2119].

   Internal Host:
      A host served by a NAT gateway, or protected by a firewall.  This
      is the host that receives the incoming traffic resulting from a
      PCP MAP request, or the host that initiated an implicit dynamic
      mapping (e.g., by sending a TCP SYN) across a firewall or a NAT.

   Remote Host:
      A host with which an Internal Host is communicating.  This can
      include another Internal Host (or even the same Internal Host); if
      a NAT is involved, the NAT would need to hairpin the traffic.

   Internal Address:
      The address of an Internal Host served by a NAT gateway or
      protected by a firewall.

   External Address:
      The address of an Internal Host as seen by other Remote Peers on
      the Internet with which the Internal Host is communicating, after
      translation by any NAT gateways on the path.  An External Address
      is generally a public routable (i.e., non-private) address.  In
      the case of an Internal Host protected by a pure firewall, with no
      address translation on the path, its External Address is the same
      as its Internal Address.

   Remote Peer Address:
      The address of a Remote Peer, as seen by the Internal Host.  A
      Remote Address is generally a public routable address.  In the
      case of a Remote Peer that is itself served by a NAT gateway, the
      Remote Address may in fact be the Remote Peer's External Address,
      but since this remote translation is generally invisible to
      software running on the Internal Host, the distinction can safely
      be ignored for the purposes of this document.

   Third Party:
      In the common case, an Internal Host manages its own Mappings
      using PCP requests, and the Internal Address of those Mappings is
      the same as the source IP address of the PCP request packet.

      In the case where one device is managing Mappings on behalf of
      some other device that does not implement PCP, the presence of the
      THIRD_PARTY Option in the MAP request signifies that the specified



Wing, et al.             Expires January 6, 2012                [Page 6]

Internet-Draft         Port Control Protocol (PCP)             July 2011


      address, not the source IP address of the PCP request packet,
      should be used as the Internal Address for the Mapping.

   Mapping, Port Mapping, Port Forwarding:
      A NAT mapping creates a relationship between an internal IP
      address, protocol, and port and an external IP address, protocol,
      and port.  More specifically, it creates a translation rule where
      packets destined to the external IP and port are translated to the
      internal IP and port, and vice versa.  In the case of a pure
      firewall, the "Mapping" is the identity function, translating an
      internal port number to the same external port number.  Firewall
      filtering, applied to that identity function, is separate from the
      mapping itself.

   Mapping Types:
      There are three different ways to create mappings: implicit
      dynamic mappings, explicit dynamic mappings, and static mappings.
      Implicit dynamic mappings are created as a result of a TCP SYN or
      outgoing UDP packet, and allow Internal Hosts to receive replies
      to their outbound packets.  Explicit dynamic mappings are created
      as a result of PCP requests.  Static mappings are created by
      manual configuration (e.g., via command-line interface or web
      page).  Explicit and static mappings allow Internal Hosts to
      receive inbound traffic that is not in direct response to any
      immediately preceding outbound communication (i.e., allow Internal
      Hosts to operate a "server" that is accessible to other hosts on
      the Internet).  Both implicit and explicit dynamic mappings are
      dynamic in the sense that they are created on demand, as requested
      (implicitly or explicitly) by the Internal Host, and have a
      lifetime.  After the lifetime, the mapping is deleted unless the
      lifetime is extended by action by the Internal Host (e.g., sending
      more traffic or sending a new PCP MAP request).  Static mappings
      differ from dynamic mappings in that their lifetime is effectively
      infinite (they exist until manually removed) but otherwise they
      behave exactly the same as an explicit dynamic mapping with an
      infinite lifetime.  For example, a PCP MAP request to create a
      mapping that already exists as a static mapping will return a
      successful result, confirming that the requested mapping exists.

   PCP Client:
      A PCP software instance responsible for issuing PCP requests to a
      PCP server.  Several independent PCP Clients can exist on the same
      host (just as several independent web browsers can exist on the
      same host).  Several PCP Clients can be located in the same local
      network.  A PCP Client can issue PCP requests on behalf of a third
      party device for which it is authorized to do so.  An interworking
      function from Universal Plug and Play Internet Gateway Device
      (UPnP IGD, [IGD]) to PCP is another example of a PCP Client.  A



Wing, et al.             Expires January 6, 2012                [Page 7]

Internet-Draft         Port Control Protocol (PCP)             July 2011


      PCP server in a NAT gateway that is itself a client of another NAT
      gateway (nested NAT) may itself act as a PCP client to the
      upstream NAT.

   PCP Server:
      A NAT or firewall that implements the server-side of the PCP
      protocol, via which PCP clients request and manage explicit
      mappings.  Rather than repeatedly using the awkward phrase "PCP-
      capable NAT gateway or firewall" this document uses the more
      compact term "PCP Server", but it should be understood that a PCP
      Server is not an entity that exists in isolation; it is a
      capability of a NAT or firewall.  See also Section 4.

   Interworking Function:
      A functional element responsible for interworking another protocol
      with PCP.  For example interworking between UPnP IGD [IGD] with
      PCP.

   Subscriber:
      The unit of billing for a commercial ISP.  A subscriber may have a
      single IP address from the commercial ISP (which can be shared
      among multiple hosts using a NAT gateway, thereby making them
      appear to be a single host to the ISP) or may have multiple IP
      addresses provided by the commercial ISP.  In either case, the IP
      address or addresses provided by the ISP may themselves be further
      translated by a large-scale NAT operated by the ISP.

   5-tuple
      The 5 pieces of information that uniquely identify a flow at a
      given place and time: transport protocol, source IP address and
      port, destination IP address and port.  When NAT is being used,
      addresses and ports for a given flow are rewritten as packets pass
      through the NAT, so for the same flow Internal Hosts see Internal
      Addresses, and Remote Peers see External Addresses.  Most NATs
      configure their Internal Hosts via DHCP to have different Internal
      Addresses.  Some NATs (such as DS-Lite) may allow multiple
      Internal Hosts to use the same Internal Address at the same time,
      so those NATs need to use additional information (such as on which
      IPv6 tunnel the packet arrived) when determining the correct
      translation to External Address and Port for a packet.

3.1.  Note on Fixed-Size Addresses

   For simplicity in building and parsing request and response packets,
   PCP always uses fixed-size 128-bit IP address fields for both IPv6
   addresses and IPv4 addresses.

   When the address field holds an IPv6 address, the fixed-size 128-bit



Wing, et al.             Expires January 6, 2012                [Page 8]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   IP address field holds the IPv6 address stored as-is.

   When the address field holds an IPv4 address, IPv4-mapped IPv6
   addresses [RFC4291] are used (::FFFF/96).  This has the first 80 bits
   set to zero and the next 16 set to one, while its last 32 bits are
   filled with the IPv4 address.  This is unambiguously distinguishable
   from a legal IPv6 address, because IPv4-mapped IPv6 address [RFC4291]
   are not used as either the source or destination address of actual
   IPv6 packets.

   When checking for an IPv4-mapped IPv6 address, all of the first 96
   bits MUST be checked for the pattern -- it is not sufficient to check
   for 0xFF in bits 90-96.

   The all-zeroes IPv6 address is expressed by filling the fixed-size
   128-bit IP address field with all zeroes.  The all-zeroes IPv4
   address is expressed as: 80 bits of zeros, 16 bits of ones, and 32
   bits of zeros.


4.  Relationship between PCP Server and its NAT/firewall

   The PCP server receives and responds to PCP requests.  The PCP server
   functionality is typically a capability of a NAT or firewall device,
   as shown in Figure 1.  It is also possible for the PCP functionality
   to be provided by some other device, which communicates with the
   actual NAT or firewall via some other proprietary mechanism, as long
   as from the PCP client's perspective such split operation is
   indistinguishable from the integrated case.

                                  +-----------------+
         +------------+           | NAT or firewall |
         | PCP client |-<network>-+      with       +---<Internet>
         +------------+           |    PCP server   |
                                  +-----------------+

                   Figure 1: PCP-Enabled NAT or Firewall


5.  Common Request and Response Header Format

   All PCP messages contain a request (or response) header containing an
   OpCode, any relevant OpCode-specific information, and zero or more
   Options.  The packet layout for the common header, and operation of
   the PCP client and PCP server, are described in the following
   sections.  The information in this section applies to all OpCodes.
   Behavior of the OpCodes defined in this document is described in
   Section 8 and Section 9.



Wing, et al.             Expires January 6, 2012                [Page 9]

Internet-Draft         Port Control Protocol (PCP)             July 2011


5.1.  Request Header

   All requests have the following format:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  Version = 1  |R|   OpCode    | PCP Client's Port (16 bits)   |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                 Requested Lifetime (32 bits)                  |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     |              PCP Client's IP Address (always 128 bits)        |
     |                                                               |
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     :                                                               :
     :             (optional) OpCode-specific information            :
     :                                                               :
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     :                                                               :
     :             (optional) PCP Options                            :
     :                                                               :
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                  Figure 2: Common Request Packet Format

   These fields are described below:

   Version:  This document specifies protocol version 1.  NAT-PMP
      [I-D.cheshire-nat-pmp], a precursor to PCP, specified protocol
      version 0.  Should later updates to this document specify
      different message formats with a version number greater than 1,
      the first two bytes of those new message formats will continue to
      contain the version number and OpCode as shown here, so that a PCP
      server receiving a message format newer or older than the
      version(s) it understands can still parse enough of the message to
      correctly identify the version number, and determine whether the
      problem is that this server is too old and needs to be updated to
      work with the PCP client, or whether the PCP client is too old and
      needs to be updated to work with this server.

   R: Indicates Request (0) or Response (1).  All Requests MUST use 0.

   OpCode:  A seven-bit value specifying the operation to be performed.
      Opcodes are defined in Section 8 and Section 9.





Wing, et al.             Expires January 6, 2012               [Page 10]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   PCP Client's Port:  The source port in the UDP header used by the PCP
      client when sending this PCP request.

   Requested Lifetime:  An unsigned 32-bit integer, in seconds, ranging
      from 0 to 4,294,967,295 seconds.  This is used by the MAP and PEER
      OpCodes defined in this document for their requested lifetime.
      Future OpCodes which don't need this field MUST set the field to
      zero on transmission and ignore it on reception.

   PCP Client's IP Address:  The source IPv4 or IPv6 address in the IP
      header used by the PCP client when sending this PCP request.

5.2.  Response Header

   All responses have the following format:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  Version = 1  |R|   OpCode    |   Reserved    |  Result Code  |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                      Lifetime (32 bits)                       |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                        Epoch (32 bits)                        |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     |                   Reserved (96 bits)                          |
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     :                                                               :
     :             (optional) OpCode-specific response data          :
     :                                                               :
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     :             (optional) Options                                :
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                  Figure 3: Common Response Packet Format

   These fields are described below:

   Version:  Responses MUST use version 1.

   R: Indicates Request (0) or Response (1).  All Responses MUST use 1.

   OpCode:  The 7-bit OpCode value, copied from the request.






Wing, et al.             Expires January 6, 2012               [Page 11]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   Reserved:  8 reserved bits, MUST be sent as 0, MUST be ignored when
      received.  This is set by the server.

   Result Code:  The result code for this response.  See Section 5.4 for
      values.  This is set by the server.

   Lifetime:  An unsigned 32-bit integer, in seconds, ranging from 0 to
      4,294,967,295 seconds.  On an error response, this indicates how
      long clients should assume they'll get the same error response
      from that PCP server if they repeat the same request.  On a
      success response for the currently-defined PCP OpCodes -- MAP and
      PEER -- this indicates the lifetime for this mapping.  If future
      OpCodes are defined that do not have a lifetime associated with
      them, then in success responses for those OpCodes the Lifetime
      MUST be set to zero on transmission and MUST be ignored on
      reception.

   Epoch:  The server's Epoch value.  See Section 6.5 for discussion.
      This value is set in both success and error responses.

5.3.  Options

   A PCP OpCode can be extended with one or more Options.  Options can
   be used in requests and responses.  The decision about whether to
   include a given piece of information in the base OpCode format or in
   an Option is an engineering trade-off between packet size and code
   complexity.  For information that is usually (or always) required,
   placing it in the fixed OpCode data results in simpler code to
   generate and parse the packet, because the information is a fixed
   location in the OpCode data, but wastes space in the packet in the
   event that field is all-zeroes because the information is not needed
   or not relevant.  For information that is required less often,
   placing it in an Option results in slightly more complicated code to
   generate and parse packets containing that Option, but saves space in
   the packet when that information is not needed.  Placing information
   in an Option also means that an implementation that never uses that
   information doesn't even need to implement code to generate and parse
   it.  For example, a client that never requests mappings on behalf of
   some other device doesn't need to implement code to generate the
   THIRD_PARTY Option, and a PCP server that doesn't implement the
   necessary security measures to create third-party mappings safely
   doesn't need to implement code to parse the THIRD_PARTY Option.









Wing, et al.             Expires January 6, 2012               [Page 12]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   Options use the following Type-Length-Value format:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  Option Code  |  Reserved     |       Option-Length           |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     :                       (optional) data                         :
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                         Figure 4: Options Header

   The description of the fields is as follows:

   Option Code:  8 bits.  Its highest bit is the "O" bit and indicates
      if this Option is mandatory (0) or optional (1) to process.

   Reserved:  8 bits.  MUST be set to 0 on transmission and MUST be
      ignored on reception.

   Option-Length:  16 bits.  Indicates the length of the enclosed data,
      in 32-bit words.  Options with length of 0 are allowed.

   data:  Option data.  The Option data MUST end on a 32-bit boundary,
      padded with 0's when necessary.

   The handling of an Option by the PCP client and PCP server MUST be
   specified in an appropriate document, which MUST include whether the
   PCP Option can appear in a request and/or response, whether it can
   appear more than once, and indicate what sort of Option data it
   conveys.  If several Options are included in a PCP request, they MAY
   be encoded in any order by the PCP client, but MUST be processed by
   the PCP server in the order in which they appear.

   If, while processing an Option, an error is encountered that causes a
   PCP error response to be generated, the PCP request MUST cause no
   state change in the PCP server or the PCP-controlled device (i.e., it
   rolls back any changes it might have made while processing the
   request).  The response MUST encode the Options in the same order,
   but MAY omit some PCP Options in the response, to indicate the PCP
   server does not understand that Option or that Option is not
   permitted to be included in responses by the definition of the Option
   itself.  Additional Options included in the response (if any) MUST be
   included at the end.  A certain Option MAY appear more than once in a
   request or in a response, if permitted by the definition of the
   Option itself.  If the Option's definition allows the Option to
   appear only once but it appears more than once in a request, the PCP
   server MUST respond with the MALFORMED_OPTION result code; if this



Wing, et al.             Expires January 6, 2012               [Page 13]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   occurs in a response, the PCP client processes the first occurrence
   and ignores the other occurrences as if they were not present.

   If the "O" bit (high bit) in the OpCode is clear, a PCP server MUST
   process this Option.  If the PCP server does not implement this
   Option, or cannot perform the function indicated by this Option
   (e.g., due to a parsing error with the Option), it MUST generate an
   error response with code UNSUPP_OPTION or MALFORMED_OPTION (as
   appropriate) and include the UNPROCESSED Option in the response
   (Section 6.7.1).

   If the "O" bit is set, a PCP server MAY process or ignore this
   Option, entirely at its discretion.

   PCP clients are free to ignore any or all Options included in
   responses, although naturally if a client explicitly requests an
   Option where correct handling of that Option requires processing the
   Option data in the response, that client is expected to implement
   code to do that.

   Option definitions MUST include the information below:

      This Option:
         Name: <mnemonic>
         Number: <value>
         Purpose: <textual description>
         Valid for OpCodes: <list of OpCodes>
         Length: <rules for length>
         May appear in: <requests/responses/both>
         Maximum occurrences: <count>

5.4.  Result Codes

   The following result codes may be returned as a result of any OpCode
   received by the PCP server.  The only success result code is 0; other
   values indicate an error.  If a PCP server encounters multiple errors
   during processing of a request, it SHOULD use the most specific error
   message.

   0  SUCCESS, success

   1  UNSUPP_VERSION, unsupported version.

   2  MALFORMED_REQUEST, indicating the request could not be
      successfully parsed.






Wing, et al.             Expires January 6, 2012               [Page 14]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   3  UNSUPP_OPCODE, unsupported OpCode.

   4  UNSUPP_OPTION, unsupported Option.  This error only occurs if the
      Option is in the mandatory-to-process range.

   5  MALFORMED_OPTION, malformed Option (e.g., exists too many times,
      invalid length).

   6  SERVER_OVERLOADED, server is processing too many PCP requests from
      this client or from other clients, and requests this client delay
      sending any other requests for the time indicated in Lifetime.

   7  ADDRESS_MISMATCH, the source IP address or port of the request
      packet does not match the contents of the PCP Client's IP Address
      or UDP port.

   Additional result codes, specific to the OpCodes and Options defined
   in this document, are listed in Section 8.2 and Section 10.1.


6.  General PCP Operation

   PCP messages MUST be sent over UDP [RFC0768].  Every PCP request
   generates a response, so PCP does not need to run over a reliable
   transport protocol.

   PCP is idempotent, meaning that if the PCP client sends the same
   request multiple times (or the PCP client sends the request once and
   it is duplicated by the network), and the PCP server processes those
   requests multiple times, the result is the same as if the PCP server
   had processed only one of those duplicate requests.

6.1.  General PCP Client: Generating a Request

   This section details operation specific to a PCP client, for any
   OpCode.  Procedures specific to the MAP OpCodes are described in
   Section 8, and procedures specific to the PEER OpCodes are described
   in Section 9.

   Prior to sending its first PCP message, the PCP client determines
   which server to use.  The PCP client performs the following steps to
   determine its PCP server:

   1.  if a PCP server is configured (e.g., in a configuration file or
       via DHCP), that single configuration source is used as the list
       of PCP Server(s), else;





Wing, et al.             Expires January 6, 2012               [Page 15]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   2.  the default router list (for IPv4 and IPv6) is used as the of PCP
       Server(s).

   For the purposes of this document, only a single PCP server address
   is supported.  Should future specifications define configuration
   methods that provide a list of PCP server addresses, those
   specifications will define how clients select one or more addresses
   from that list.

   With that PCP server address, the PCP client formulates its PCP
   request.  The PCP request contains a PCP common header, PCP OpCode
   and payload, and (possibly) Options.  As with all UDP or TCP client
   software on any operating system, when several independent PCP
   clients exist on the same host, each uses a distinct source port
   number to disambiguate their requests and replies.  The PCP client's
   source port SHOULD be randomly generated [RFC6056].

   To assist with detecting an on-path NAT, he PCP header includes the
   source IP address and port of the PCP message itself.  On operating
   systems that support the sockets API, the following steps are
   RECOMMENDED to determine the correct source address and port to
   include in the PCP header:

   1.  Create a UDP socket.
   2.  Bind the UDP socket.
   3.  Call the getsockname() function to retrieve a sockaddr containing
       the source address and port the kernel will use for UDP packets
       sent through this socket.
   4.  Place the address and port from this sockaddr in to the PCP
       client's source address and port fields in the PCP header.
   5.  Send PCP requests using this bound UDP socket.

   When attempting to contact a PCP server, the PCP client initializes a
   timer to 2 seconds.  The PCP client sends a PCP message to the first
   server in its list of PCP servers.  If no response is received before
   the timer expires, the timer is doubled (to 4 seconds) and the
   request is re-transmitted.  If no response is received before the
   timer expires, the timer is doubled again (to 8 seconds) and the
   request is re-transmitted.

   Once a PCP client has successfully received a response from a PCP
   server on that interface, it sends subsequent PCP requests to that
   same server, with a retransmission timer of 2 seconds.  If, after 2
   seconds, a response is not received from that PCP server, the same
   back-off algorithm described above is performed.






Wing, et al.             Expires January 6, 2012               [Page 16]

Internet-Draft         Port Control Protocol (PCP)             July 2011


6.2.  General PCP Server: Processing a Request

   This section details operation specific to a PCP server.  Processing
   SHOULD be performed in the order of the following paragraphs.

   A PCP server MUST only accept normal (non-THIRD_PARTY) PCP requests
   from a client on the same interface it would normally receive packets
   from that client, and silently ignores PCP requests arriving on any
   other interface.  For example, a residential NAT gateway only accepts
   PCP requests arriving on its (LAN) interface connecting to the
   internal network, and silently ignores PCP requests arriving on its
   external (WAN) interface.  A PCP server which supports THIRD_PARTY
   requests MAY be configured to accept THIRD_PARTY requests on other
   interfaces from properly authorized clients.

   Upon receiving a request, the PCP server parses and validates it.  A
   valid request contains a valid PCP common header, one valid PCP
   Opcode, and zero or more Options (which the server might or might not
   comprehend).  If an error is encountered during processing, the
   server generates an error response which is sent back to the PCP
   client.  Processing an OpCode and the Options are specific to each
   OpCode.

   If the server is overloaded by requests (from a particular client or
   from all clients), it MAY simply discard requests, as the requests
   will be retried by PCP clients, or it MAY generate the
   SERVER_OVERLOADED error response.

   If the received message is shorter than 4 octets or has the R bit
   set, the message is simply dropped.  If the length of the message
   exceeds 1024 octets or is not a multiple of 4 octets, it is invalid.
   Invalid requests are handled by copying up to 1024 octets of the
   request into the response, setting the result code to
   MALFORMED_REQUEST, and zero-padding the response to a multiple of 4
   octets if necessary.  If the version number is not supported, a
   response is generated with the UNSUPP_VERSION result code and the
   other steps detailed in Section 6.6.  If the OpCode is not supported,
   a response is generated with the UNSUPP_OPCODE result code.

   If the source IP address and port of the received packet do not match
   the contents of the PCP Client's IP Address and PCP Client's Port
   fields, a response is generated with the ADDRESS_MISMATCH result
   code.  This is done to detect and prevent accidental use of PCP where
   a non-PCP-aware NAT exists between the PCP client and PCP server.

   Error responses have the same packet layout as success responses,
   with fields from the request copied into the response, and fields
   assigned by the PCP server are set as indicated in Figure 3.



Wing, et al.             Expires January 6, 2012               [Page 17]

Internet-Draft         Port Control Protocol (PCP)             July 2011


6.3.  General PCP Client: Processing a Response

   The PCP client receives the response and verifies that the source IP
   address and port belong to the PCP server of an outstanding PCP
   request.  It validates that the OpCode matches an outstanding PCP
   request.  Responses shorter than 12 octets, longer than 1024 octets,
   or not a multiple of 4 octets are invalid and ignored, likely causing
   the request to be re-transmitted.  The response is further matched by
   comparing fields in the response OpCode-specific data to fields in
   the request OpCode-specific data, as described by the processing for
   that OpCode.  After these matches are successful, the PCP client
   checks the Epoch field to determine if it needs to restore its state
   to the PCP server (see Section 6.5).

   If the result code is 0 (SUCCESS), the PCP client knows the request
   was successful.

   If the result code is not 0, the request failed.  If the result code
   is UNSUPP_VERSION, processing continues as described in Section 6.6.
   If the result code is SERVER_OVERLOADED, the PCP client SHOULD NOT
   send *any* further requests to that PCP server for the indicated
   error lifetime.  For other error result codes, the PCP client SHOULD
   NOT resend the same request for the indicated error lifetime.  If the
   PCP server indicates an error lifetime in excess of 30 minutes, the
   PCP client MAY choose to set its retry timer to 30 minutes.

   If the PCP client has discovered a new PCP server (e.g., connected to
   a new network), the PCP client SHOULD immediately begin communicating
   with this PCP server, without regard to hold times from communicating
   with a previous PCP server.

6.4.  Multi-Interface Issues

   Hosts which desire a PCP mapping might be multi-interfaced (i.e., own
   several logical/physical interfaces).  Indeed, a host can be
   configured with several IPv4 addresses (e.g., WiFi and Ethernet) or
   dual-stacked.  These IP addresses may have distinct reachability
   scopes (e.g., if IPv6 they might have global reachability scope as
   for Global Unicast Address (GUA, [RFC3587]) or limited scope as for
   Unique Local Address (ULA) [RFC4193]).

   IPv6 addresses with global reachability (e.g., GUA) SHOULD be used as
   the source address when generating a PCP request.  IPv6 addresses
   without global reachability (e.g., ULA [RFC4193]), SHOULD NOT be used
   as the source interface when generating a PCP request.  If IPv6
   privacy addresses [RFC4941] are used for PCP mappings, a new PCP
   request will need to be issued whenever the IPv6 privacy address is
   changed.  This PCP request SHOULD be sent from the IPv6 privacy



Wing, et al.             Expires January 6, 2012               [Page 18]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   address itself.  It is RECOMMENDED that mappings to the previous
   privacy address be deleted.

   Due to the ubiquity of IPv4 NAT, IPv4 addresses with limited scope
   (e.g., private addresses [RFC1918]) MAY be used as the source
   interface when generating a PCP request.

   As mentioned in Section 2.3, only single-homed CP routers are in
   scope.  Therefore, there is no viable scenario where a host located
   behind a CP router is assigned two Global Unicast Addresses belonging
   to different global IPv6 prefixes.

6.5.  Epoch

   Every PCP response sent by the PCP server includes an Epoch field.
   This field increments by 1 every second, and is used by the PCP
   client to determine if PCP state needs to be restored.  If the PCP
   server resets or loses the state of its explicit dynamic Mappings
   (that is, those mappings created by PCP MAP requests), due to reboot,
   power failure, or any other reason, it MUST reset its Epoch time and
   begin counting again from 0.  Similarly, if the public IP address(es)
   of the NAT (controlled by the PCP server) changes, the Epoch MUST be
   reset to 0.  A PCP server MAY maintain one Epoch value for all PCP
   clients, or MAY maintain distinct Epoch values (per PCP client, per
   interface, or based on other criteria); this choice is
   implementation-dependent.

   Whenever a client receives a PCP response, the client computes its
   own conservative estimate of the expected Epoch value by taking the
   Epoch value in the last packet it received from the gateway and
   adding 7/8 (87.5%) of the time elapsed since that packet was
   received.  If the Epoch value in the newly received packet is less
   than the client's conservative estimate by more than one second, then
   the client concludes that the PCP server lost state, and the client
   MUST immediately renew all its active port mapping leases as
   described in Section 11.3.1.

6.6.  Version Negotiation

   A PCP client sends its requests using PCP version number 1.  Should
   later updates to this document specify different message formats with
   a version number greater than 1 it is expected that PCP servers will
   still support version 1 in addition to the newer version(s).
   However, in the event that a server returns a response with result
   code UNSUPP_VERSION, the client MAY log an error message to inform
   the user that it is too old to work with this server.

   When sending a response containing the UNSUPP_VERSION result code,



Wing, et al.             Expires January 6, 2012               [Page 19]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   the PCP message MUST be 12 octets long.

   If future PCP versions greater than 1 are specified, version
   negotiation is expected to proceed as follows:

   1.  If a client or server supports more than one version it SHOULD
       support a contiguous range of versions -- i.e., a lowest version
       and a highest version and all versions in between.

   2.  Client sends first request using highest (i.e., presumably
       'best') version number it supports.

   3.  If server supports that version it responds normally.

   4.  If server does not support that version it replies giving a
       result containing the result code UNSUPP_VERSION, and the closest
       version number it does support (if the server supports a range of
       versions higher than the client's requested version, the server
       returns the lowest of that supported range; if the server
       supports a range of versions lower than the client's requested
       version, the server returns the highest of that supported range).

   5.  If the client receives an UNSUPP_VERSION result containing a
       version it does support, it records this fact and proceeds to use
       this message version for subsequent communication with this PCP
       server (until a possible future UNSUPP_VERSION response if the
       server is later updated, at which point the version negotiation
       process repeats).

   6.  If the client receives an UNSUPP_VERSION result containing a
       version it does not support then the client MAY log an error
       message to inform the user that it is too old to work with this
       server, and the client SHOULD set a timer to retry its request in
       30 minutes or the returned Lifetime value, whichever is smaller.

6.7.  General PCP Option

   The following Option can appear in certain PCP responses, without
   regard to the OpCode.

6.7.1.  UNPROCESSED Option

   If the PCP server cannot process a mandatory-to-process Option, for
   whatever reason, it includes the UNPROCESSED Option in the response,
   shown in Figure 5.  This helps with debugging interactions between
   the PCP client and PCP server.  This Option MUST NOT appear more than
   once in a PCP response.  The unprocessed Options are listed once, and
   the Option data is zero-filled to the necessary 32 bit boundary.  If



Wing, et al.             Expires January 6, 2012               [Page 20]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   a certain Option appeared more than once in the PCP request, that
   Option value can appear once or as many times as it occurred in the
   request.  The order of the Options in the PCP request has no
   relationship with the order of the Option values in this UNPROCESSED
   Option.  This Option MUST NOT appear in a response unless the
   associated request contained at least one mandatory-to-process
   Option.

   The UNPROCESSED Option is formatted as follows, showing an example of
   two Option codes that were unprocessed:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     | Option-code-1 | Option-code-2 |        padding                |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                       Figure 5: UNPROCESSED option

   Padding: 0, 1, 2, or 3 octets.  If the number of Option-codes is not
   a multiple of 4, padding is used to make it 32-bit aligned.  The
   padding MUST be zeroed on sending, and MUST be ignored by the
   receiver.

      This Option:
         Name: UNPROCESSED
         Number: 0
         Purpose: indicates which PCP Options in the request are not
         supported by the PCP server
         Valid for OpCodes: all
         Length: 1 or more
         May appear in: responses, and only if the result code is non-
         zero.
         Maximum occurrences: 1


7.  Introduction to MAP and PEER OpCodes

   There are four uses for the MAP and PEER OpCodes defined in this
   document: a host operating a server and wanting an incoming
   connection (Section 7.1); a host operating a client and server on the
   same port (Section 7.2); a host operating a client and wanting to
   optimize the application keepalive traffic (Section 7.3); and a host
   operating a client and wanting to restore lost state in its NAT
   (Section 7.4).  These are discussed in the following sections.

   When operating a server (Section 7.1 and Section 7.2) the PCP client
   knows if it wants an IPv4 listener, IPv6 listener, or both on the



Wing, et al.             Expires January 6, 2012               [Page 21]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   Internet.  The PCP client also knows if it has an IPv4 address on
   itself or an IPv6 interface on itself.  It takes the union of this
   knowledge to decide which of its PCP servers to send the request
   (e.g., a PCP server on its IPv4 interface or its IPv6 interface), and
   if to send one or two MAP requests for each of its interfaces (e.g.,
   if the PCP client has only an IPv4 address but wants both IPv6 and
   IPv4 listeners, it sends a MAP4 request and a MAP6 request from its
   IPv4 interface.  If the PCP client has both an IPv4 and IPv6 address,
   and only wants an IPv4 listener, it sends one MAP request from its
   IPv4 interface (if the PCP server supports NAT44 or IPv4 firewall) or
   one MAP request from its IPv6 interface (if the PCP server supports
   NAT64)).  The PCP client can simply request the desired mapping to
   determine if the PCP server supports the desired mapping.
   Applications that embed IP addresses in payloads (e.g., FTP, SIP)
   will find it beneficial to avoid address family translation, if
   possible.

   It is REQUIRED that the PCP-controlled device assign the same
   external IP address to PCP-created explicit dynamic mappings and to
   implicit dynamic mappings for a given Internal Host.  It is
   RECOMMENDED that static mappings for that Internal Host (e.g., those
   created by a command-line interface on the PCP server or PCP-
   controlled device) also be assigned to the same IP address.  Once all
   internal addresses assigned to a given Internal Host have no implicit
   dynamic mappings and have no explicit dynamic mappings in the PCP-
   controlled device, a subsequent PCP request for that Internal Address
   MAY be assigned to a different External Address.  Generally, this re-
   assignment would occur when a CGN device is load balancing newly-seen
   hosts to its public IPv4 address pool.

7.1.  For Operating a Server

   A host operating a server (e.g., a web server) listens for traffic on
   a port, but the server never initiates traffic from that port.  For
   this to work across a NAT or a firewall, the host needs to (a) create
   a mapping from a public IP address and port to itself as described in
   Section 8 and (b) publish that public IP address and port via some
   sort of rendezvous server (e.g., DNS, a SIP message, a proprietary
   protocol).  Publishing the public IP address and port is out of scope
   of this specification.  To accomplish (a), the host follows the
   procedures described in this section.

   As normal, the application needs to begin listening on a port.  Then,
   the application constructs a PCP message with the appropriate MAP
   OpCode depending on if it is listening on an IPv4 or IPv6 address and
   if it wants a public IPv4 or IPv6 address.





Wing, et al.             Expires January 6, 2012               [Page 22]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   The following pseudo-code shows how PCP can be reliably used to
   operate a server:

   /* start listening on the local server port */
   int s = socket(...);
   bind(s, ...);
   listen(s, ...);

   getsockname(s, &internal_sockaddr, ...);
   bzero(&external_sockaddr, sizeof(external_sockaddr));

   while (1)
       {
       /* Note: the "time_to_send_pcp_request()" check below includes:
        * 1. Sending the first request
        * 2. Retransmitting requests due to packet loss
        * 3. Resending a request due to impending lease expiration
        * The PCP packet sent is identical in all cases, apart from the
        * Suggested External Address and Port which may change over time
        */
       if (time_to_send_pcp_request())
           pcp_send_map_request(internal_sockaddr.sin_port,
               internal_sockaddr.sin_addr,
               &external_sockaddr, /* will be zero the first time */
               requested_lifetime, &assigned_lifetime);

       if (pcp_response_received())
           update_rendezvous_server("Client Ident", external_sockaddr);

       if (received_incoming_connection_or_packet())
           process_it(s);

       if (other_work_to_do())
           do_it();

       /* ... */

       block_until_we_need_to_do_something_else();
       }

          Figure 6: Pseudo-code for using PCP to operate a server

7.2.  For Operating a Symmetric Client/Server

   A host operating a client and server on the same port (e.g.,
   Symmetric RTP [RFC4961] or SIP Symmetric Response Routing (rport)
   [RFC3581]) first establishes a local listener, (usually) sends the
   local and public IP addresses and ports to a rendezvous service



Wing, et al.             Expires January 6, 2012               [Page 23]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   (which is out of scope of this document), and initiates an outbound
   connection from that same source address and same port.  To
   accomplish this, the application uses the procedure described in this
   section.

   An application that is using the same port for outgoing connections
   as well as incoming connections MUST first signal its operation of a
   server using the PCP MAP OpCode, as described in Section 8, and
   receive a positive PCP response before it sends any packets from that
   port.

      Discussion: In general, a PCP client doesn't know in advance if it
      is behind a NAT or firewall.  It can attempt to request a mapping
      using PCP, and if that succeeds then the client knows it has
      successfully created a mapping.  If after multiple retries it has
      received no PCP response, then either the client is *not* behind a
      NAT or firewall and has unfettered connectivity, or the client
      *is* behind a NAT or firewall which doesn't support PCP (and the
      client may still have working connectivity by virtue of static
      mappings previously created manually by the user).  Retransmitting
      PCP requests multiple times before giving up and assuming
      unfettered connectivity adds delay in that case.  Initiating
      outbound TCP connections immediately without waiting for PCP
      avoids this delay, and will work if the NAT has endpoint-
      independent mapping (EIM) behavior, but may fail if the NAT has
      endpoint-dependent mapping (EDM) behavior.  With an EDM NAT,
      implicit mappings created by outgoing TCP SYNs from a single
      Internal Address and Port to different Remote Peers and Ports may
      be allocated different External Ports, and a subsequent PCP MAP
      request for that Internal Address and Port may be allocated yet
      another different External Port.  Waiting enough time to allow an
      explicit PCP MAP Mapping to be created (if possible) first ensures
      that the same External Port will then be used for all subsequent
      TCP SYNs sent from the specified Internal Address and Port.  PCP
      supports both EIM and EDM NATs, so clients need to assume they may
      be dealing with an EDM NAT.  In this case, the client will
      experience more reliable connectivity if it attempts explicit PCP
      MAP requests first, before initiating any outbound TCP connections
      from that Internal Address and Port.  See also Section 11.1.












Wing, et al.             Expires January 6, 2012               [Page 24]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   The following pseudo-code shows how PCP can be used to operate a
   symmetric client and server:

   /* start listening on the local server port */
   int s = socket(...);
   bind(s, ...);
   listen(s, ...);

   getsockname(s, &internal_sockaddr, ...);
   bzero(&external_sockaddr, sizeof(external_sockaddr));

   while (1)
       {
       /* Note: the "time_to_send_pcp_request()" check below includes:
        * 1. Sending the first request
        * 2. Retransmitting requests due to packet loss
        * 3. Resending a request due to impending lease expiration
        * The PCP packet sent is identical in all cases, apart from the
        * Suggested External Address and Port which may change over time
        */
       if (time_to_send_pcp_request())
           pcp_send_map_request(internal_sockaddr.sin_port,
               internal_sockaddr.sin_addr,
               &external_sockaddr, /* will be zero the first time */
               requested_lifetime, &assigned_lifetime);

       if (pcp_response_received())
           update_rendezvous_server("Client Ident", external_sockaddr);

       if (received_incoming_connection_or_packet())
           process_it(s);

       if (need_to_make_outgoing_connection())
           make_outgoing_connection(s, ...);

       if (data_to_send())
           send_it(s);

       if (other_work_to_do())
           do_it();

       /* ... */

       block_until_we_need_to_do_something_else();
       }

    Figure 7: Pseudo-code for using PCP to operate a symmetric client/
                                  server



Wing, et al.             Expires January 6, 2012               [Page 25]

Internet-Draft         Port Control Protocol (PCP)             July 2011


7.3.  For Reducing NAT Keepalive Messages

   A host operating a client (e.g., XMPP client, SIP client) sends from
   a port, and may receive responses, but never accepts incoming
   connections from other Remote Peers on this port.  It wants to ensure
   the flow to its Remote Peer is not terminated (due to inactivity) by
   an on-path NAT or firewall.  To accomplish this, the application uses
   the procedure described in this section.

   Middleboxes such as NATs or firewalls need to see occasional traffic
   or will terminate their session state, causing application failures.
   To avoid this, many applications routinely generate keepalive traffic
   for the primary (or sole) purpose of maintaining state with such
   middleboxes.  Applications can reduce such application keepalive
   traffic by using PCP.

      Note: For reasons beyond NAT, an application may find it useful to
      perform application-level keepalives, such as to detect a broken
      path between the client and server, keep state alive on the Remote
      Peer, or detect a powered-down client.  These keepalives are not
      related to maintaining middlebox state, and PCP cannot do anything
      useful to reduce those keepalives.

   To use PCP for this function, the application first connects to its
   server, as normal.  Afterwards, it issues a PCP request with the
   PEER4 or PEER6 OpCode as described in Section 9.  The PEER4 OpCode is
   used if from the host's point of view it is using IPv4 for its
   communication to its peer; PEER6 if from the host's point of view it
   is using IPv6 (e.g., a host behind NAT64 would use PEER6 because from
   that host's point of view it is using IPv6).  The same 5-tuple as
   used for the connection to the server is placed into the PEER4 or
   PEER6 payload.



















Wing, et al.             Expires January 6, 2012               [Page 26]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   The following pseudo-code shows how PCP can be reliably used with a
   dynamic socket, for the purposes of reducing application keepalive
   messages:

   int s = socket(...);
   connect(s, &remote_peer, ...);

   getsockname(s, &internal_sockaddr, ...);
   bzero(&external_sockaddr, sizeof(external_sockaddr));

   while (1)
       {
       /* Note: the "time_to_send_pcp_request()" check below includes:
        * 1. Sending the first request
        * 2. Retransmitting requests due to packet loss
        * 3. Resending a request due to impending lease expiration
        * The PCP packet sent is identical in all cases, apart from the
        * Suggested External Address and Port which may change over time
        */
       if (time_to_send_pcp_request())
           pcp_send_peer_request(internal_sockaddr.sin_port,
               internal_sockaddr.sin_addr,
               &external_sockaddr, /* will be zero the first time */
               remote_peer, requested_lifetime, &assigned_lifetime);

       if (data_to_send())
           send_it(s);

       if (other_work_to_do())
           do_it();

       /* ... */

       block_until_we_need_to_do_something_else();
       }

           Figure 8: Pseudo-code using PCP with a dynamic socket

7.4.  For Restoring Lost Implicit TCP Dynamic Mapping State

   After a NAT loses state (e.g., because of a crash or power failure),
   it is useful for clients to re-establish TCP mappings on the NAT.
   This allows servers on the Internet to see traffic from the same IP
   address and port, so that sessions can be resumed exactly where they
   were left off.  This can be useful for long-lived connections (e.g.,
   instant messaging) or for connections transferring a lot of data
   (e.g., FTP).  This can be accomplished by establishing a TCP
   connection normally and then sending a PEER request/response and



Wing, et al.             Expires January 6, 2012               [Page 27]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   remember the External Address and External Port.  Later, when the NAT
   has lost state, the client can send a PEER request with the Suggested
   External Port and Suggested External Address remembered from the
   previous session, which will create a mapping in the NAT that
   functions exactly as an implicit dynamic mapping.  The client then
   resumes sending TCP data to the server.

      Note: This procedure works well for TCP, provided the NAT only
      creates a new implicit dynamic mapping for TCP segments with the
      SYN bit set (i.e., the newly-booted NAT drops the re-transmitted
      data segments from the client because the NAT does not have an
      active mapping for those segments), and if the server is not
      sending data that elicits a RST from the NAT.  This is not the
      case for UDP, because a new UDP mapping will be created (probably
      on a different port) as soon as UDP traffic is seen by the NAT.


8.  MAP OpCodes

   This section defines two OpCodes which control forwarding from a NAT
   (or firewall) to an Internal Host.  They are:

     MAP4=1:   Create an explicit dynamic mapping, with address
               independent filtering, between an Internal Address and an
               External IPv4 address (e.g., NAT44, NAT64, or IPv4
               firewall)

     MAP6=2:   Create a explicit dynamic mapping, with address
               independent filtering, between an Internal Address and an
               External IPv6 address (e.g., NAT46, or IPv6 firewall)

   All compliant PCP Servers MUST support one or both MAP opcodes,
   appropriate to the address families they support (e.g., a traditional
   NAT44 gateway is not required to support MAP6).  PCP Servers SHOULD
   provide a configuration option to allow administrators to disable MAP
   support if they wish.

   The internal address is the source IP address of the PCP request
   message itself, unless the THIRD_PARTY Option is used.

   Mappings created by PCP MAP requests are, by definition, Endpoint
   Independent Mappings with Endpoint Independent Filtering (unless the
   FILTER Option is used), even on a NAT that usually creates Endpoint
   Dependent Mappings or Endpoint Dependent Filtering for outgoing
   connections, since the purpose of an (unfiltered) MAP mapping is to
   receive inbound traffic from any remote endpoint, not from only one
   specific remote endpoint.




Wing, et al.             Expires January 6, 2012               [Page 28]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   Note also that all NAT mappings (created by PCP or otherwise) are by
   necessity bidirectional and symmetric.  For any packet going in one
   direction (in or out) that is translated by the NAT, a reply going in
   the opposite direction needs to have the corresponding opposite
   translation done so that the reply arrives at the right endpoint.
   This means that if a client creates a MAP mapping, and then later
   sends an outgoing packet using the mapping's internal source port,
   the NAT should translate that packet's Internal Address and Port to
   the mapping's External Address and Port, so that replies addressed to
   the External Address and Port are correctly translated to the
   mapping's Internal Address and Port.

   The operation of the MAP OpCodes is described in this section.

8.1.  MAP Operation Packet Formats

   The two MAP OpCodes (MAP4, MAP6) share a similar packet layout for
   both requests and responses.  Because of this similarity, they are
   shown together.  For both of the MAP OpCodes, if the assigned
   External IP address and assigned External Port in the PCP response
   always match the Internal IP Address and Port in the PCP request,
   then the functionality is purely a firewall; otherwise it pertains to
   a network address translator which might also perform firewall-like
   functions.

   The following diagram shows the format of the OpCode-specific
   information in a request for the MAP4 and MAP6 OpCodes.

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  Protocol     |          Reserved (24 bits)                   |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |        Internal Port          |   Suggested External Port     |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     |        Suggested External IP Address (always 128 bits)        |
     |                                                               |
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                Figure 9: MAP OpCode Request Packet Format

   These fields are described below:







Wing, et al.             Expires January 6, 2012               [Page 29]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   Requested lifetime (in common header):  Requested lifetime of this
      mapping, in seconds.  The value 0 indicates "delete".

   Protocol:  Upper-layer protocol associated with this OpCode.  Values
      are taken from the IANA protocol registry [proto_numbers].  For
      example, this field contains 6 (TCP) if the OpCode is intended to
      create a TCP mapping.  The value 0 has a special meaning for 'all
      protocols', and is used only for delete requests.  This means that
      HOPOPT (which is protocol 0) cannot have a mapping managed using
      PCP.

   Reserved:  24 reserved bits, MUST be sent as 0 and MUST be ignored
      when received.

   Internal Port:  Internal port for the mapping.  The value 0 indicates
      "all ports", and is only legal in a request if lifetime=0.

   Suggested External Port:  Suggested external port for the mapping.
      This is useful for refreshing a mapping, especially after the PCP
      server loses state.  If the PCP client does not know the external
      port, or does not have a preference, it uses 0.

   Suggested External IP Address:  Suggested external IPv4 or IPv6
      address.  This is useful for refreshing a mapping, especially
      after the PCP server loses state.  If the PCP server can fulfill
      the request, it will do so.  If the PCP client does not know the
      external address, or does not have a preference, it MUST use 0.

   The following diagram shows the format of OpCode-specific information
   in a response packet for the MAP4 and MAP6 OpCodes:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |   Protocol    |          Reserved (24 bits)                   |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |       Internal Port           |    Assigned External Port     |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     |        Assigned External IP Address (always 128 bits)         |
     |                                                               |
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

               Figure 10: MAP OpCode Response Packet Format

   These fields are described below:




Wing, et al.             Expires January 6, 2012               [Page 30]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   Lifetime (in common header):  On a success response, this indicates
      the lifetime for this mapping, in seconds.  On an error response,
      this indicates how long clients should assume they'll get the same
      error response from the that PCP server if they repeat the same
      request.

   Protocol:  Copied from the request.

   Reserved:  24 reserved bits, MUST be sent as 0 and MUST be ignored
      when received.

   Internal Port:  Internal port for the mapping, copied from request.

   Assigned External Port:  On success responses, this is the assigned
      external port for the mapping.  On error responses, the value from
      Suggested External Port is used.

   Assigned External IP Address:  On success responses, this is the
      assigned external IPv4 or IPv6 address for the mapping; IPv4 or
      IPv6 address is indicated by the OpCode.  On error responses, the
      value from Suggested External IP Address is used.

8.2.  MAP Operation Result Codes

   In addition to the general PCP result codes (Section 5.4), the
   following additional result codes may be returned as a result of the
   two MAP OpCodes received by the PCP server.  Each error code below is
   classified as either a 'long lifetime' error or a 'short lifetime'
   error, which provides guidance to PCP server developers for the value
   of the Lifetime field for these errors.  It is RECOMMENDED that short
   lifetime errors use 30 second lifetime and long lifetime errors use
   30 minute lifetime.

   20 NETWORK_FAILURE, PCP server or the device it controls are
      experiencing a network failure of some sort (e.g., has not
      obtained an External IP address).  This is a short lifetime error.

   21 NO_RESOURCES, e.g., NAT device cannot create more mappings at this
      time.  This is a system-wide error, and different from
      USER_EX_QUOTA.  This is a short lifetime error.

   22 UNSUPP_PROTOCOL, unsupported Protocol.  This is a long lifetime
      error.

   23 NOT_AUTHORIZED, e.g., PCP server supports mapping, but the feature
      is disabled for this PCP client, or the PCP client requested a
      mapping that cannot be fulfilled by the PCP server's security
      policy.  This is a long lifetime error.



Wing, et al.             Expires January 6, 2012               [Page 31]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   24 USER_EX_QUOTA, mapping would exceed user's port quota.  This is a
      short lifetime error.

   25 CANNOT_PROVIDE_EXTERNAL_PORT is returned only if the request
      included the PREFER_FAILURE Option, because otherwise a new
      external port could have been allocated.  See Section 10.2 for
      processing details.  The error lifetime depends on the reason for
      the failure.

   26 EXCESSIVE_REMOTE_PEERS, indicates the PCP server was not able to
      create the filters in this request.  This result code MUST only be
      returned if the MAP request contained the FILTER Option.  See
      Section 10.3 for processing information.  This is a long lifetime
      error.

   Additional result codes may be returned if the THIRD_PARTY Option is
   used, see Section 10.1.

8.3.  Generating a MAP Request

   This section and Section 8.6 describe the operation of a PCP client
   when sending requests with OpCodes MAP4 and MAP6.

   The request MAY contain values in the Suggested External Port and
   Suggested External IP Address fields.  This allows the PCP client to
   attempt to rebuild lost state on the PCP server, which improves the
   chances of existing connections surviving, and helps the PCP client
   avoid having to change information maintained at its rendezvous
   server.  Of course, due to other activity on the network (e.g., by
   other users or network renumbering), the PCP server may not be able
   grant the suggested External IP Address and Port, and in that case it
   will allocate a different External IP Address and Port.

   An existing mapping can have its lifetime extended by the PCP client.
   To do this, the PCP client sends a new MAP request indicating the
   internal port.  The PCP MAP request SHOULD also include the currently
   allocated external IP address and port as the suggested external IP
   address and port, so that if the NAT gateway has lost state it can
   recreate the lost mapping with the same parameters.

   The PCP client SHOULD renew the mapping before its expiry time,
   otherwise it will be removed by the PCP server (see Section 8.6).  In
   order to prevent excessive PCP chatter, it is RECOMMENDED to send a
   single renewal request packet when a mapping is halfway to expiration
   time, then, if no SUCCESS result is received, another single renewal
   request 3/4 of the way to expiration time, and then another at 7/8 of
   the way to expiration time, and so on, subject to the constraint that
   renewal requests MUST NOT be sent less than four seconds apart (a PCP



Wing, et al.             Expires January 6, 2012               [Page 32]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   client MUST NOT send a flood of ever-closer-together requests in the
   last few seconds before a mapping expires).

8.4.  Processing a MAP Request

   This section and Section 8.6 describe the operation of a PCP server
   when processing a request with the OpCodes MAP4 or MAP6.  Processing
   SHOULD be performed in the order of the following paragraphs

   If the requested lifetime is non-zero, it indicates a request to
   create a mapping or extend the lifetime of an existing mapping.
   However, if the request also contains Internal Port equal to 0 or
   Protocol equal to 0, the server MUST generate a MALFORMED_REQUEST
   error.

   If the requested lifetime is zero, it indicates a request to delete
   an existing mapping or set of mappings.

   Processing of the lifetime is described in Section 8.6.

   If the PCP-controlled device is stateless (that is, it does not
   establish any per-flow state, and simply rewrites the address and/or
   port in a purely algorithmic fashion), the PCP server simply returns
   an answer indicating the external IP address and port yielded by this
   stateless algorithmic translation.  This allows the PCP client to
   learn its external IP address and port as seen by remote peers.
   Examples of stateless translators include stateless NAT64 and 1:1
   NAT44, both of which modify addresses but not port numbers.

   If an Option with value less than 128 exists (i.e., mandatory to
   process) but that Option does not make sense (e.g., the
   PREFER_FAILURE Option is included in a request with lifetime=0), the
   request is invalid and generates a MALFORMED_OPTION error.

   If a mapping already exists for the requested Internal Address and
   Port, the PCP server MUST refresh the lifetime of that already-
   existing mapping, and return the already-existing External Address
   and Port in its response.

   If no mapping already exists for the requested Internal Address and
   Port, and the PCP server is able to create a mapping using the
   Suggested External Address and Port, it SHOULD do so.  This is
   beneficial for re-establishing state lost when the PCP server loses
   its state (e.g., due to a reboot).  If the PCP server cannot allocate
   the Suggested External Address and Port but can allocate some other
   External Address and Port (and the request did not contain the
   PREFER_FAILURE Option) the PCP server MUST do so and return the newly
   allocated External Address and Port in the response.  Cases where a



Wing, et al.             Expires January 6, 2012               [Page 33]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   NAT gateway cannot allocate the Suggested External Address and Port
   include:

   o  Where the Suggested External Address and Port is already allocated
      to another existing explicit, implicit, or static mapping (i.e.,
      is already forwarding traffic to some other internal address and
      port; or

   o  Where the Suggested External Address and Port is already used by
      the NAT gateway for one of its own services (e.g., port 80 for the
      NAT gateway's own configuration pages); or

   o  When the Suggested External Address and Port is otherwise
      prohibited by the PCP server's policy.

   By default, a PCP-controlled device MUST NOT create mappings for a
   protocol not indicated in the request.  For example, if the request
   was for a TCP mapping, a UDP mapping MUST NOT be created.

   If the THIRD_PARTY Option is not present in the request, the source
   IP address of the PCP packet is used as the Internal Address for the
   mapping.  If the THIRD_PARTY Option is present, the PCP server
   validates that the client is authorized to make mappings on behalf of
   the indicated Internal IP Address.  This validation depends on the
   PCP deployment scenario; see Section 13.3 for an example validation
   procedure.  If the internal IP address in the PCP request is not
   authorized to make mappings on behalf of the indicated internal IP
   address, an error response MUST be generated with result code
   NOT_AUTHORIZED.

   Mappings typically consume state on the PCP-controlled device, and it
   is RECOMMENDED that a per-host and/or per-subscriber limit be
   enforced by the PCP server to prevent exhausting the mapping state.
   If this limit is exceeded, the result code USER_EX_QUOTA is returned.

   If all of the preceding operations were successful (did not generate
   an error response), then the requested mapping is created or
   refreshed as described in the request and a SUCCESS response is
   built.  This SUCCESS response contains the same OpCode as the
   request, but with the "R" bit set.

8.5.  Processing a MAP Response

   This section describes the operation of the PCP client when it
   receives a PCP response for the OpCodes MAP4 or MAP6.

   After performing common PCP response processing, the response is
   further matched with an outstanding request by comparing the



Wing, et al.             Expires January 6, 2012               [Page 34]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   protocol, internal IP address, and internal port.  On an error
   response, the assigned external address and assigned external port
   can also be used to match the responses (which is useful if several
   requests with the PREFER_FAILURE Option are outstanding).  Other
   fields are not compared, because the PCP server sets those fields.

   On a successful response, the PCP client can use the External IP
   Address and Port as desired.  Typically the PCP client will
   communicate the External IP Address and Port to another host on the
   Internet using an application-specific rendezvous mechanism such as
   DNS SRV records.

   The PCP client MUST also set a timer or otherwise schedule an event
   to renew the mapping before its lifetime expires.  Renewing a mapping
   is performed by sending another MAP request, exactly as described
   above in Section 8.3, except that the Suggested External Address and
   Port SHOULD be set to the values received in the successful response.
   This allows the same mapping to be recreated in the event of PCP
   server state loss.  From the PCP server's point of view a MAP request
   to renew a mapping is identical to a MAP request to request a new
   mapping, and is handled identically.  Indeed, in the event of PCP
   server state loss, a renewal request from a PCP client will appear to
   the server to be a request for a new mapping, with a particular
   Suggested External Address and Port, which happens to be what the PCP
   server previously allocated.  See also Section 11.3.2.

   On an error response, clients SHOULD NOT repeat the same request to
   the same PCP server within the lifetime returned in the response.

8.6.  Mapping Lifetime and Deletion

   The PCP client requests a certain lifetime, and the PCP server
   responds with the assigned lifetime.  The PCP server MAY grant a
   lifetime smaller or larger than the requested lifetime.  The PCP
   server SHOULD be configurable for permitted minimum and maximum
   lifetime, and the RECOMMENDED values are 120 seconds for the minimum
   value and 24 hours for the maximum.  It is RECOMMENDED that the
   server be configurable to restrict lifetimes to less than 24 hours,
   because mappings will consume ports even if the Internal Host is no
   longer interested in receiving the traffic or no longer connected to
   the network.  These recommendations are not strict, and deployments
   should evaluate the trade offs to determine their own minimum and
   maximum lifetime values.

   Once a PCP server has responded positively to a mapping request for a
   certain lifetime, the port forwarding is active for the duration of
   the lifetime unless the lifetime is reduced by the PCP client (to a
   shorter lifetime or to zero) or until the PCP server loses its state



Wing, et al.             Expires January 6, 2012               [Page 35]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   (e.g., crashes).  Mappings created by PCP MAP requests are not
   special or different from mappings created in other ways.  In
   particular, it is implementation-dependent if outgoing traffic
   extends the lifetime of such mappings beyond the PCP-assigned
   lifetime.  PCP clients MUST NOT depend on this behavior to keep
   mappings active, and MUST explicitly renew their mappings as required
   by the Lifetime field in PCP response messages.

   If the requested lifetime is zero (lifetime==0) then:

   o  If the internal port is non-zero (port!=0) and protocol is non-
      zero (protocol!=0), it indicates a request to delete the indicated
      mapping immediately.

   o  If the internal port is zero (port==0) and the protocol is non-
      zero (protocol!=0), it indicates a request to delete all mappings
      for this Internal Address for the given transport protocol.

   o  If the internal port is non-zero (port!=0) and the protocol is
      zero (protocol==0), it indicates a request to delete all mappings
      for this Internal Address for the given port for all transport
      protocols.

   o  If the internal port is zero (port==0) and protocol is zero
      (protocol==0), it indicates a request to delete all mappings for
      this Internal Address for all transport protocols.  This is useful
      when a host reboots or joins a new network, to clear out prior
      stale state from the NAT gateway before beginning to install new
      mappings.

   The suggested external address and port fields are ignored in
   requests where the requested lifetime is 0.

   If the PCP client attempts to delete a single static mapping (i.e., a
   mapping created outside of PCP itself), the error NOT_AUTHORIZED is
   returned.  If the PCP client attempts to delete an implicit dynamic
   mapping, the PCP server deletes the mapping and filtering and
   responds with the SUCCESS result code.  If the PCP client attempts to
   delete a mapping that does not exist, the SUCCESS result code is
   returned (this is necessary for PCP to be idempotent).  If the PCP
   MAP request was for port=0 (indicating 'all ports'), the PCP server
   deletes all of the explicit dynamic mappings it can (but not any
   implicit or static mappings), and returns a SUCCESS response.  If the
   deletion request was properly formatted and successfully processed, a
   SUCCESS response is generated with lifetime of 0 and the server
   copies the protocol and internal port number from the request into
   the response.  An explicit dynamic mapping MUST NOT have its lifetime
   reduced by transport protocol messages (e.g., TCP RST, TCP FIN).



Wing, et al.             Expires January 6, 2012               [Page 36]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   An application that forgets its PCP-assigned mappings (e.g., the
   application or OS crashes) will request new PCP mappings.  This may
   consume port mappings, if the application binds to a different
   Internal Port every time it runs.  The application will also likely
   initiate new implicit dynamic mappings without using PCP, which will
   also consume port mappings.  If there is a port mapping quota for the
   Internal Host, frequent restarts such as this may exhaust the quota.
   PCP provides some protections against such port consumption: When a
   PCP client first acquires a new IP address (e.g., reboots or joins a
   new network), it SHOULD remove mappings that may already be
   instantiated for that new Internal Address.  To do this, the PCP
   client sends a MAP request with protocol, internal port, and lifetime
   set to 0.  Some port mapping APIs (e.g., the
   "DNSServiceNATPortMappingCreate" API provided by Apple's Bonjour on
   Mac OS X, iOS, Windows, Linux [Bonjour]) automatically monitor for
   process exit (including application crashes) and automatically send
   port mapping deletion requests if the process that requested them
   goes away without explicitly relinquishing them.

   To reduce unwanted traffic and data corruption, External UDP and TCP
   ports SHOULD NOT be re-used for an interval (TIME_WAIT interval
   [RFC0793]).  However, the PCP server SHOULD allow the previous user
   of the External Port to re-acquire the same port during that
   interval.

   As a side-effect of creating a mapping, ICMP messages associated with
   the mapping MUST be forwarded (and also translated, if appropriate)
   for the duration of the mapping's lifetime.  This is done to ensure
   that ICMP messages can still be used by hosts, without application
   programmers or PCP client implementations needing to signal PCP
   separately to create ICMP mappings for those flows.

8.7.  Address Change Events

   The customer premises router might obtain a new IP address.  This can
   occur because of a variety of reasons including a reboot, power
   outage, DHCP lease expiry, or other action by the ISP.  If this
   occurs, traffic forwarded to the host's previous address might be
   delivered to another host which now has that address.  This affects
   both implicit dynamic mappings and explicit dynamic mappings.
   However, this same problem already occurs today when a host's IP
   address is re-assigned, without PCP and without an ISP-operated CGN.
   The solution is the same as today: the problems associated with host
   renumbering are caused by host renumbering and are eliminated if host
   renumbering is avoided.  PCP defined in this document does not
   provide machinery to reduce the host renumbering problem.

   When an Internal Host changes its IP address (e.g., by having a



Wing, et al.             Expires January 6, 2012               [Page 37]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   different address assigned by the DHCP server) the NAT (or firewall)
   will continue to send traffic to the old IP address.  Typically, the
   Internal Host will no longer receive traffic sent to that old IP
   address.  Assuming the Internal Host wants to continue receiving
   traffic, it needs to install new mappings for its new IP address.
   The suggested external port field will not be fulfilled by the PCP
   server, in all likelihood, because it is still being forwarded to the
   old IP address.  Thus, a mapping is likely to be assigned a new
   external port number and/or public IP address.  Note that such host
   renumbering is not expected to happen routinely on a regular basis
   for most hosts, since most hosts renew their DHCP leases before they
   expire (or re-request the same address after reboot) and most DHCP
   servers honor such requests and grant the host the same address it
   was previously using before the reboot.

   A host might gain or lose interfaces while existing mappings are
   active (e.g., Ethernet cable plugged in or removed, joining/leaving a
   WiFi network).  Because of this, if the PCP client is sending a PCP
   request to maintain state in the PCP server, it SHOULD ensure those
   PCP requests continue to use the same interface (e.g., when
   refreshing mappings).  If the PCP client is sending a PCP request to
   create new state in the PCP server, it MAY use a different source
   interface or different source address.


9.  PEER OpCodes

   This section defines two OpCodes for controlling dynamic connections.
   They are:

    PEER4=3:   Create an explicit dynamic mapping, or set or query an
               implicit dynamic mapping to a remote peer's IPv4 address
               and port.

    PEER6=4:   Create an explicit dynamic mapping, or set or query an
               implicit dynamic mapping to a remote peer's IPv6 address
               and port.

   The use of these OpCodes is described in this section.

   All compliant PCP Servers MUST support one or both PEER opcodes,
   appropriate to the address families they support (e.g., a traditional
   NAT44 gateway is not required to support PEER6).  PCP Servers SHOULD
   provide a configuration option to allow administrators to disable
   PEER support if they wish.

   Note that mappings created or managed using PCP PEER requests may be
   Endpoint Independent Mappings or Endpoint Dependent Mappings, with



Wing, et al.             Expires January 6, 2012               [Page 38]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   Endpoint Independent Filtering or Endpoint Dependent Filtering,
   consistent with the existing behavior of the NAT gateway or firewall
   in question for implicit mappings it creates automatically as a
   result of observing outgoing traffic from Internal Hosts.

9.1.  PEER Operation Packet Formats

   The PEER OpCodes provide the ability for the PCP client to create,
   query and (possibly) extend the lifetime of a mapping and its
   associated filtering.

   The two PEER OpCodes (PEER4 and PEER6) share a similar packet layout
   for both requests and responses.  Because of this similarity, they
   are shown together.

   The following diagram shows the request packet format for PEER4 and
   PEER6.  This packet format is aligned with the response packet
   format:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  Protocol     |   Reserved (24 bits)                          |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |        Internal Port          |    Suggested External Port    |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |       Remote Peer Port        |     Reserved (16 bits)        |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     |           Remote Peer IP Address (always 128 bits)            |
     |                                                               |
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     |        Suggested External IP address (always 128 bits)        |
     |                                                               |
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

               Figure 11: PEER OpCode Request Packet Format

   These fields are described below:

   Requested Lifetime (in common header):  Requested lifetime of this
      mapping, in seconds.  Note that, depending on the implementation
      of the PCP-controlled device, it may not be possible to reduce the
      lifetime of a mapping (or delete it, with requested lifetime=0)
      using PEER.



Wing, et al.             Expires January 6, 2012               [Page 39]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   Protocol:  upper-level protocol associated with this OpCode.  Values
      are taken from the IANA protocol registry [proto_numbers].  For
      example, this field contains 6 (TCP) if the OpCode is describing a
      TCP peer.

   Reserved:  24 reserved bits, MUST be 0 on transmission and MUST be
      ignored on reception.

   Internal Port:  Internal Port of the 5-tuple.

   Suggested External Port:  Suggested external port for the mapping.
      This is useful for refreshing a mapping, especially after the PCP
      server loses state.  If the PCP server can fulfill the request, it
      will do so.  If the client is not attempting to re-create a
      mapping, it MUST use the value 0.

   Remote Peer Port:  Remote peer's port of the 5-tuple.

   Reserved:  16 reserved bits, MUST be 0 on transmission and MUST be
      ignored on reception.

   Remote Peer IP Address:  This is the Remote peer's IP address from
      the perspective of the PCP client, so that the PCP client does not
      need to concern itself with NAT64 or NAT46 (which both cause the
      client's idea of the remote peer's IP address to differ from the
      remote peer's actual IP address).  This field allows the PCP
      client and PCP server to disambiguate multiple connections from
      the same port on the Internal Host to different servers, and does
      not create or adjust the filtering associated with the mapping
      (for that, the FILTER option is used, Section 10.3).

   Suggested External IP Address:  Suggested External IP Address for the
      mapping.  If the client is not attempting to re-create a mapping,
      it MUST use the value 0.

   When attempting to re-create a lost mapping, the Suggested External
   IP Address and Port are set to the External IP Address and Port
   fields received in a previous PEER response from the PCP server.  On
   an initial PEER request, the External IP Address and Port are set to
   zero.











Wing, et al.             Expires January 6, 2012               [Page 40]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   The following diagram shows the response packet format for PEER4 and
   PEER6:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |  Protocol     |   Reserved (24 bits)                          |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |        Internal Port          |     External Port             |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |       Remote Peer Port        |     Reserved (16 bits)        |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     |           Remote Peer IP Address (always 128 bits)            |
     |                                                               |
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     |          External IP Address (always 128 bits)                |
     |                                                               |
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

               Figure 12: PEER OpCode Response Packet Format

   Lifetime (in common header):  On a success response, this indicates
      the lifetime for this mapping, in seconds.  On an error response,
      this indicates how long clients should assume they'll get the same
      error response from the PCP server if they repeat the same
      request.

   Protocol:  Copied from the request.

   Reserved:  24 reserved bits, MUST be 0 on transmission, MUST be
      ignored on reception.

   Internal Port:  Copied from request.

   External Port:  For success responses, this is the external port
      number, assigned by the NAT (or firewall) to this mapping.  If
      firewall or 1:1 NAT, this will match the internal port.

   Remote Peer port:  Copied from request.

   Reserved:  16 reserved bits, MUST be 0 on transmission, MUST be
      ignored on reception.





Wing, et al.             Expires January 6, 2012               [Page 41]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   Remote Peer IP Address:  Copied from the request.

   External IP Address:  For success responses, this contains the
      External IP address, assigned by the NAT (or firewall) to this
      mapping.  If the PCP-controlled device is a firewall, this will
      match the Internal IP address.  For error responses, the value is
      copied from the request.

9.2.  PEER Operation Result Codes

   In addition to the general PCP result codes (Section 5.4), the PCP
   server may return the same result codes for PEER OpCodes as for MAP
   OpCodes (see Section 8.2).

9.3.  Generating a PEER Request

   This section describes the operation of a client when generating the
   OpCodes PEER4 or PEER6.

   The PEER4 or PEER6 OpCodes MAY be sent before or after establishing
   bi-directional communication with the remote peer.  If sent before,
   PEER4 or PEER6 OpCodes will create a mapping in the PCP-controlled
   device.  If sent after, the PEER4 or PEER6 OpCodes query the state of
   the implicit dynamic mapping, recreate the implicit dynamic mapping
   if it as been lost, and possibly modify its lifetime (for the purpose
   described in Section 7.3).

   The PEER4 and PEER6 OpCodes contain a description of the remote peer
   address, from the perspective of the PCP client.  Note that when the
   PCP-controlled device is performing address family translation (NAT46
   or NAT64), the remote peer address from the perspective of the PCP
   client is different from the remote peer address on the other side of
   the address family translation device.

9.4.  Processing a PEER Request

   This section describes the operation of a server when receiving a
   request with the OpCode PEER4 or PEER6.  Processing SHOULD be
   performed in the order of the following paragraphs.

   On receiving the PEER4 or PEER6 OpCode, the PCP server examines the
   mapping table.  If the requested mapping does not yet exist yet, it
   is created, and the Suggested External Address and Port are honored
   (if possible; if not possible, a mapping to a different External
   Address and Port is created).  By having PEER create such a mapping,
   we avoid a race condition between the PEER request or the initial
   outgoing packet arriving at the NAT gateway first, and allow PEER to
   be used to recreate an implicit dynamic mapping (see last paragraph



Wing, et al.             Expires January 6, 2012               [Page 42]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   of Section 11.3.1).

   The PEER4 or PEER6 OpCode MAY reduce the lifetime of an existing
   mapping; this is implementation-dependent.

   If the PCP-controlled device can extend the lifetime of a mapping,
   the PCP server uses the smaller of its configured maximum lifetime
   value and the requested lifetime from the PEER request, and sets the
   lifetime to that value.

   If all of the proceeding operations were successful (did not generate
   an error response), then a SUCCESS response is generated, with the
   Lifetime field containing the lifetime of the mapping.

   After a successful PEER response is sent, it is implementation-
   specific if the PCP-controlled device destroys the mapping when the
   lifetime expires, or if the PCP-controlled device's implementation
   allows traffic to keep the mapping alive.  Thus, if the PCP client
   wants the mapping to persist beyond the lifetime, it MUST refresh the
   mapping (by sending another PEER message) prior to the expiration of
   the lifetime.  If the mapping is terminated by the TCP client or
   server (e.g., TCP FIN or TCP RST), the mapping will be destroyed
   normally; the mapping will not persist for the time indicated by
   Lifetime.  This means the Lifetime in a PEER response indicates how
   long the mapping will persist in the absence of a transport
   termination message (e.g., TCP RST).

9.5.  Processing a PEER Response

   This section describes the operation of a client when processing a
   response with the OpCode PEER4 or PEER6.

   After performing common PCP response processing, the response is
   further matched with a request by comparing the protocol, internal IP
   address, internal port, remote peer address and remote peer port.
   Other fields are not compared, because the PCP server changes those
   fields to provide information about the mapping created by the
   OpCode.

   On a successful response, the application can use the assigned
   lifetime value to reduce its frequency of application keepalives for
   that particular NAT mapping.  Of course, there may be other reasons,
   specific to the application, to use more frequent application
   keepalives.  For example, the PCP assigned lifetime could be one hour
   but the application may want to maintain state on its server (e.g.,
   "busy" / "away") more frequently than once an hour.

   If the PCP client wishes to keep this mapping alive beyond the



Wing, et al.             Expires January 6, 2012               [Page 43]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   indicated lifetime, it SHOULD issue a new PCP request prior to the
   expiration.  That is, inside->outside traffic is not sufficient to
   ensure the mapping will continue to exist.  It is RECOMMENDED to send
   a single renewal request packet when a mapping is halfway to
   expiration time, then, if no SUCCESS response is received, another
   single renewal request 3/4 of the way to expiration time, and then
   another at 7/8 of the way to expiration time, and so on, subject to
   the constraint that renewal requests MUST NOT be sent less than four
   seconds apart (a PCP client MUST NOT ever-closer-together requests in
   the last few seconds before a mapping expires).

      Note: implementations need to expect the PEER response may contain
      an External IP Address with a different family than the Remote
      Peer IP Address, e.g., when NAT64 or NAT46 are being used.


10.  Options for MAP and PEER OpCodes

   This section describes Options for the MAP4, MAP6, PEER4 and PEER6
   OpCodes.  These Options MUST NOT appear with other OpCodes, unless
   permitted by those OpCodes.

10.1.  THIRD_PARTY Option for MAP and PEER OpCodes

   This Option is used when a PCP client wants to control a mapping to
   an Internal Host other than itself.  This is used with both MAP and
   PEER OpCodes.

   A THIRD_PARTY Option MUST NOT contain the same address as the source
   address of the packet.  A PCP server receiving a THIRD_PARTY Option
   specifying the same address as the source address of the packet MUST
   return a MALFORMED_REQUEST result code.  This is because many PCP
   servers may not implement the THIRD_PARTY Option at all, and a client
   using the THIRD_PARTY Option to specify the same address as the
   source address of the packet will cause mapping requests to fail
   where they would otherwise have succeeded.

   Where possible, it may beneficial if a client using the THIRD_PARTY
   Option to create and maintain mappings on behalf of some other device
   can take steps to verify that the other device is still present and
   active on the network.  Otherwise the client using the THIRD_PARTY
   Option to maintain mappings on behalf of some other device risks
   maintaining those mappings forever, long after the device that
   required them has gone.  This would defeat the purpose of PCP
   mappings having a finite lifetime so that they can be automatically
   deleted after they are no longer needed.





Wing, et al.             Expires January 6, 2012               [Page 44]

Internet-Draft         Port Control Protocol (PCP)             July 2011


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   |    Internal IP Address (always 128 bits)                      |
   |                                                               |
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                Figure 13: THIRD_PARTY Option packet format

   The fields are described below:

   Internal IP Address:  Internal IP address for this mapping.  If the
      option length is zero, there is no Internal IP address for this
      mapping and this indicates "all Internal IPv4 and IPv6 Addresses
      for which this client is authorized" which is used to delete all
      pre-existing mappings with the MAP Opcode.

   This Option:
      name: THIRD_PARTY
      Number: 4
      Purpose: Indicates the MAP or PEER request is for a host other
      than the host sending the PCP Option.
      Valid for OpCodes: MAP4, MAP6, PEER4, PEER6
      Length: 0 or 4
      May appear in: request.  May appear in response only if it
      appeared in the associated request.
      Maximum occurrences: 1

   The following additional result code may be returned as a result of
   using this Option.

   51 UNAUTH_THIRD_PARTY_INTERNAL_ADDRESS, indicating the internal IP
      address specified is not permitted (e.g., client is not authorized
      to make mappings for this Internal Address, or is otherwise
      prohibited.).  This error can be returned for both MAP and PEER
      requests.  If this is a MAP request, this is a long-term error.

   A PCP server MAY be configured to permit or to prohibit the use of
   the THIRD_PARTY Option.  If this Option is permitted, properly
   authorized clients may perform these operations on behalf of other
   hosts.  If this Option is prohibited, and a PCP server receives a PCP
   MAP request with a THIRD_PARTY Option, it MUST generate a
   UNAUTH_THIRD_PARTY_INTERNAL_ADDRESS response.

   It is RECOMMENDED that customer premises equipment implementing a PCP
   Server be configured to prohibit third party mappings by default.



Wing, et al.             Expires January 6, 2012               [Page 45]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   With this default, if a user wants to create a third party mapping,
   the user needs to interact out-of-band with their customer premises
   router (e.g., using its HTTP administrative interface).

   It is RECOMMENDED that service provider NAT and firewall devices
   implementing a PCP Server be configured to permit the THIRD_PARTY
   Option, when sent by a properly authorized host.  If the packet
   arrives from an unauthorized host, the PCP server MUST generate an
   UNAUTH_THIRD_PARTY_INTERNAL_ADDRESS error.

   Determining which PCP clients are authorized to use the THIRD_PARTY
   Option for which other hosts is deployment-dependent.  For example,
   an ISP using Dual-Stack Lite could choose to allow a client
   connecting over a given IPv6 tunnel to manage mappings for any other
   host connecting over the same IPv6 tunnel, or the ISP could choose to
   allow only the DS-Lite B4 element to manage mappings for other hosts
   connecting over the same IPv6 tunnel.  A cryptographic authentication
   and authorization model is outside the scope of this specification.
   Note that the THIRD_PARTY Option is not needed for today's common
   scenario of an ISP offering a single IP address to a customer who is
   using NAT to share that address locally, since in this scenario all
   the customer's hosts appear to be a single host from the point of
   view of the ISP.

   A PCP client can delete all PCP-created explicit dynamic mappings
   (i.e., those created by PCP MAP requests) that it is authorized to
   delete by sending a PCP MAP request including a zero-length
   THIRD_PARTY Option.

10.2.  PREFER_FAILURE Option for MAP OpCodes

   This Option is only used with the MAP4 and MAP6 OpCodes.

   This Option indicates that if the PCP server is unable to map the
   Suggested External Port, then rather than returning an external port
   that it can allocate, the PCP server should instead allocate no
   external port and return an error.  The error returned would be a
   general MAP error (e.g., NOT_AUTHORIZED) or the result code specific
   to this Option, CANNOT_PROVIDE_EXTERNAL_PORT.

   The result code CANNOT_PROVIDE_EXTERNAL_PORT is returned if the
   Suggested External Port cannot be mapped.  This can occur because the
   External Port is already mapped to another host's implicit dynamic
   mapping, an explicit dynamic mapping, a static mapping, or the same
   Internal Address and Port has an implicit dynamic mapping which is
   mapped to a different External Port than requested.  The server MAY
   set the Lifetime in the response to the remaining lifetime of the
   conflicting mapping, rounded up to the next larger integer number of



Wing, et al.             Expires January 6, 2012               [Page 46]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   seconds.

   This Option exists solely for use by UPnP IGD interworking
   [I-D.bpw-pcp-upnp-igd-interworking], where the semantics of UPnP IGD
   version 1 only allow the UPnP IGD client to dictate mapping a
   specific port.  A PCP server MAY support this Option, if its
   designers wish to support downstream devices that perform UPnP IGD
   interworking.  PCP servers MAY choose to rate-limit their handling of
   PREFER_FAILURE requests, to protect themselves from a rapid flurry of
   65535 consecutive PREFER_FAILURE requests from clients probing to
   discover which external ports are available.  PCP servers that are
   not intended to support downstream devices that perform UPnP IGD
   interworking are not required to support this Option.  PCP clients
   other than UPnP IGD interworking clients SHOULD NOT use this Option
   because it results in inefficient operation, and they cannot safely
   assume that all PCP servers will implement it.  It is anticipated
   that this Option will be deprecated in the future as more clients
   adopt PCP natively and the need for UPnP IGD interworking declines.

      This Option:
         Name: PREFER_FAILURE
         Number: 3
         Purpose: indicates that the PCP server should not create an
         alternative mapping if the suggested external port and address
         are not available.
         Valid for OpCodes: MAP4, MAP6
         Length: 0
         May appear in: requests
         Maximum occurrences: 1

10.3.  FILTER Option for MAP OpCodes

   This Option indicates that filtering incoming packets is desired.
   The Remote Peer Port and Remote Peer IP Address indicate the
   permitted remote peer's source IP address and port for packets from
   the Internet.  The remote peer prefix length indicates the length of
   the remote peer's IP address that is significant; this allows a
   single Option to permit an entire subnet.  After processing this MAP
   request containing the FILTER Option and generating a successful
   response, the PCP-controlled device will drop packets received on its
   public-facing interface that don't match the filter fields.  After
   dropping the packet, if its security policy allows, the PCP-
   controlled device MAY also generate an ICMP error in response to the
   dropped packet.







Wing, et al.             Expires January 6, 2012               [Page 47]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   The FILTER packet layout is described below:

      0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |    Reserved   | Prefix Length |      Remote Peer Port         |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |                                                               |
     |     Remote Peer IP address (always 128 bits)                  |
     |                                                               |
     |                                                               |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                      Figure 14: FILTER Option layout

   These fields are described below:

   Reserved:  8 reserved bits, MUST be sent as 0 and MUST be ignored
      when received.

   Prefix Length:  indicates how many bits of the IPv4 or IPv6 address
      are relevant for this filter.  The value 0 indicates "no filter",
      and will remove all previous filters.  See below for detail.

   Remote Peer Port:  the port number of the remote peer.  The value 0
      indicates "all ports"

   Remote Peer IP address:  The IP address of the remote peer.

   This Option:
      Name: FILTER
      Number: 2
      Purpose: specifies a filter for incoming packets
      Valid for OpCodes: MAP4, MAP6
      Length: 5
      May appear in: requests, and MUST appear in successfully-processed
      responses
      Maximum occurrences: as many as fit within maximum PCP message
      size

   The Prefix Length indicates how many bits of the IPv6 address or IPv4
   address are used for the filter.  For MAP4, a Prefix Length of 32
   indicates the entire IPv4 address is used.  For MAP6, a Prefix Length
   of 128 indicates the entire IPv6 address is used.  For MAP4 the
   minimum Prefix Length value is 0 and the maximum value is 32.  For
   MAP6 the minimum Prefix Length value is 0 and the maximum value is
   128.  Values outside those range cause an MALFORMED_OPTION result
   code.



Wing, et al.             Expires January 6, 2012               [Page 48]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   If multiple occurrences of the FILTER Option exist in the same MAP
   request, they are processed in the same order received (as per normal
   PCP Option processing) and they MAY overlap the filtering requested.
   If an existing mapping exists (with or without a filter) and the
   server receives a MAP request with FILTER, the filters indicated in
   the new request are added to any existing filters.  If a MAP request
   has a lifetime of 0 and contains the FILTER Option, the error
   MALFORMED_OPTION is returned.

   If any of occurrences of the FILTER Option in a request packet are
   not successfully processed then an error is returned (e.g.,
   MALFORMED_OPTION if one of the Options was malformed) and as with
   other PCP errors, returning an error causes no state to be changed in
   the PCP server or in the PCP-controlled device.

   To remove all existing filters, the Prefix Length 0 is used.  There
   is no mechanism to remove a specific filter.

   To change an existing filter, the PCP client sends a MAP request
   containing two FILTER Options, the first Option containing a Prefix
   Length of 0 (to delete all existing filters) and the second
   containing the new remote peer's IP address and port.  Other FILTER
   Options in that PCP request, if any, add more allowed Remote Peers.

   The PCP server or the PCP-controlled device is expected to have a
   limit on the number of remote peers it can support.  This limit might
   be as small as one.  If a MAP request would exceed this limit, the
   entire MAP request is rejected with the result code
   EXCESSIVE_REMOTE_PEERS, and the state on the PCP server is unchanged.

   All PCP servers MUST support at least one filter per MAP mapping.

   The use of the FILTER Option can be seen as a performance
   optimization.  Since all software using PCP to receive incoming
   connections also has to deal with the case where may be directly
   connected to the Internet and receive unrestricted incoming TCP
   connections and UDP packets, if it wishes to restrict incoming
   traffic to a specific source address or group of source addresses
   such software already needs to check the source address of incoming
   traffic and reject unwanted traffic.  However, the FILTER Option is a
   particularly useful performance optimization for battery powered
   wireless devices, because it can enable them to conserve battery
   power by not having to wake up just to reject a unwanted traffic.


11.  Implementation Considerations

   This section provides non-normative guidance that may be useful to



Wing, et al.             Expires January 6, 2012               [Page 49]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   implementors.

11.1.  Implementing MAP with EDM port-mapping NAT

   For implicit dynamic mappings, some existing NAT devices have
   endpoint-independent mapping (EIM) behavior while other NAT devices
   have endpoint-dependent mapping (EDM) behavior.  NATs which have EIM
   behavior do not suffer from the problem described in this section.
   The IETF strongly encourages EIM behavior [RFC4787][RFC5382].

   In such EDM NAT devices, the same external port may be used by an
   implicit dynamic mapping (from the same Internal Host or from a
   different Internal Host) and an explicit dynamic mapping.  This
   complicates the interaction with the MAP4 and MAP6 OpCodes.  With
   such NAT devices, there are two ways envisioned to implement the MAP4
   and MAP6 OpCodes:

   1.  Have implicit dynamic mappings use a different set of public
       ports than explicit dynamic mappings (e.g., those created with
       MAP4 or MAP6), thus reducing the interaction problem between
       them; or

   2.  On arrival of a packet (inbound from the Internet or outbound
       from an Internal Host), first attempt to use an implicit dynamic
       mapping to process that packet.  If none match, then the incoming
       packet should use the explicit dynamic mapping to process that
       packet.  This effectively 'prioritizes' implicit dynamic mappings
       above explicit dynamic mappings.

11.2.  Lifetime of Explicit and Implicit Dynamic Mappings

   No matter if a NAT is EIM or EDM, it is possible that one (or more)
   implicit dynamic mappings, using the same internal port on the
   Internal Host, might be created before or after a MAP request.  When
   this occurs, it is important that the NAT honor the Lifetime returned
   in the MAP response.  Specifically, if a mapping was created with the
   MAP OpCode, the implementation needs to ensure that termination of an
   implicit dynamic mapping (e.g., via a TCP FIN handshake) does not
   prematurely destroy the MAP-created mapping.  On a NAT that
   implements endpoint-independent mapping with endpoint-independent
   filtering, this could be implemented by extending the lifetime of the
   implicit dynamic mapping to the lifetime of the explicit dynamic
   mapping.

11.3.  PCP Failure Scenarios

   If an event occurs that causes the PCP server to lose explicit
   dynamic mapping state (such as a crash or power outage), the mappings



Wing, et al.             Expires January 6, 2012               [Page 50]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   created by PCP are lost.  Such loss of state is rare in a service
   provider environment (due to redundant power, disk drives for
   storage, etc.), but more common in a residential NAT device which
   does not write this information to non-volatile memory.  Of course,
   due to outright failure of service provider equipment (e.g., software
   malfunction), state may still be lost.

   The Epoch allows a client to deduce when a PCP server may have lost
   its state.  When the Epoch value is observed to be smaller than
   expected, the PCP client can attempt to recreate the mappings
   following the procedures described in this section.

11.3.1.  Recreating Mappings

   A mapping renewal packet is formatted identically to an original
   mapping request; from the point of view of the client it is a renewal
   of an existing mapping, but from the point of view of a newly
   rebooted PCP server it appears as a new mapping request.  In the
   normal process of routinely renewing its mappings before they expire,
   a PCP client will automatically recreate all its lost mappings.

   When the PCP server loses state and begins processing new PCP
   messages, its Epoch is reset and begins counting again from zero (per
   the procedure of Section 6.5).  As the result of receiving a packet
   where the Epoch field indicates that a reboot or similar loss of
   state has occurred, the client can renew its port mappings sooner,
   without waiting for the normal routine renewal time.

11.3.2.  Maintaining Mappings

   A PCP client refreshes a mapping by sending a new PCP request
   containing information from the earlier PCP response.  The PCP server
   will respond indicating the new lifetime.  It is possible, due to
   reconfiguration or failure of the PCP server, that the public IP
   address and/or public port, or the PCP server itself, has changed
   (due to a new route to a different PCP server).  To detect such
   events more quickly, the PCP client may find it beneficial to use
   shorter lifetimes (so that it communicates with the PCP server more
   often).  If the PCP client has several mappings, the Epoch value only
   needs to be retrieved for one of them to verify the PCP server has
   not lost explicit dynamic mapping state.

   If the client wishes to check the PCP server's Epoch, it sends a PCP
   request for any one of the client's mappings.  This will return the
   current Epoch value.  In that request the PCP client could extend the
   mapping lifetime (by asking for more time) or maintain the current
   lifetime (by asking for the same number of seconds that it knows are
   remaining of the lifetime).



Wing, et al.             Expires January 6, 2012               [Page 51]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   If a PCP client changes its Internal IP Address (e.g., because the
   Internal Host has moved to a new network), and the PCP client wishes
   to still receive incoming traffic, it needs create new mappings on
   that new network.  New mappings will typically also require an update
   to the application-specific rendezvous server if the External Address
   or Port are different to the previous values (see Section 7.1 and
   Section 8.7).


12.  Deployment Considerations

12.1.  Ingress Filtering

   As with implicit dynamic mappings created by outgoing TCP packets,
   explicit dynamic mappings created via PCP use the source IP address
   of the packet as the Internal Address for the mappings.  Therefore
   ingress filtering [RFC2827] should be used on the path between the
   Internal Host and the PCP Server to prevent the injection of spoofed
   packets onto that path.

12.2.  Mapping Quota

   On PCP-controlled devices that create state when a mapping is created
   (e.g., NAT), the PCP server SHOULD maintain per-host and/or per-
   subscriber quotas for mappings.  It is implementation-specific
   whether the PCP server uses a separate quotas for implicit, explicit,
   and static mappings, a combined quota for all of them, or some other
   policy.


13.  Security Considerations

   The PEER OpCode can create a mapping (which behaves exactly as if an
   implicit dynamic mapping were created (e.g., by a TCP SYN)).  In that
   case, the security implications for PEER are similar to MAP,
   described below.  When PEER is used to create, query or extend an
   existing mapping, it does not introduce any new security
   considerations, unless the THIRD_PARTY Option is included.
   Discussion of the THIRD_PARTY Option is below.

   Internet service providers do not generally filter traffic from the
   Internet towards their subscribers (with the exception of wireless
   providers who are interested in protecting both their radio access
   network and their subscriber's battery lifetime).  However, when an
   ISP introduces stateful address sharing with a NAT device, such
   filtering will occur as a side effect of the NAT device.  Filtering
   occurs as a side-effect of IPv4 NAT devices and may also occur with
   some IPv6 CPE devices [RFC6092].  Unlike the PEER OpCode, the MAP



Wing, et al.             Expires January 6, 2012               [Page 52]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   OpCode allows a PCP client to create a mapping so that a host can
   receive inbound traffic and operate a server.  In some deployments
   the ability to accept connections from any host on the Internet may
   be considered a security issue.  Security considerations for the MAP
   OpCode are described in the following sections.

13.1.  Denial of Service

   Because of the state created in a NAT or firewall, a per-host and/or
   per-subscriber quota will likely exist for both implicit dynamic
   mappings and explicit dynamic mappings.  A host might make an
   excessive number of implicit or explicit dynamic mappings, consuming
   an inordinate number of ports, causing a denial of service to other
   hosts.  Thus, Section 12.2 recommends that hosts be limited to a
   reasonable number of explicit dynamic mappings.

   An attacker, on the path between the PCP client and PCP server, can
   drop PCP requests, drop PCP responses, or spoof a PCP error, all of
   which will effective deny service.  Through such actions, the PCP
   client would not be aware the PCP server might have actually
   processed the PCP request.

13.2.  Ingress Filtering

   It is important to prevent a host from fraudulently creating,
   deleting, or refreshing a mapping (or filtering) for another host,
   because this can expose the other host to unwanted traffic and
   consumes the other host's mapping quota.  Both implicit and explicit
   dynamic mappings are created based on the source IP address in the
   packet, and hence depend on ingress filtering to guard against spoof
   source IP addresses.  Thus, PCP relies on the same ingress filtering
   as today's implicit dynamic mappings and PCP does not create a new
   requirement for ingress filtering.

13.3.  Authorizing THIRD_PARTY Internal Address

   The THIRD_PARTY Option contains a Internal Address field, which
   allows a PCP client to create, extend, or delete an implicit or
   explicit dynamic mapping for another host, as described in
   Section 10.1.

   In most cases PCP Servers will reject all THIRD_PARTY requests.

   The one scenario were it is currently envisaged that THIRD_PARTY will
   be used is for DS-Lite deployments where the B4 devices implements an
   UPnP IGD Interworking gateway which handles IGD requests from clients
   on the local network and makes PCP mapping requests on their behalf,
   or the B4 devices implements an administrative web-based interface to



Wing, et al.             Expires January 6, 2012               [Page 53]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   allow users to manually create mapping requests.  In this case it is
   envisaged that the DS-Lite PCP server will be configured to allow
   only B4 devices to make THIRD_PARTY requests, and only on behalf of
   other Internal Hosts sharing the same DS-Lite IPv6 tunnel.  Since the
   B4 device is itself the DS-Lite IPv6 tunnel endpoint, it is in a
   position to guard against spoof packets being injected into that
   tunnel using the B4 device's IPv4 source address, so the DS-Lite PCP
   server can trust that packets received over the DS-Lite IPv6 tunnel
   with the B4 device's source IPv4 address did in fact originate from
   the B4 device.

13.4.  Theft of mapping

   In the time between when a PCP server loses state and the PCP client
   notices the lower than expected Epoch value, it is possible that the
   PCP client's mapping will be acquired by another host (via an
   explicit dynamic mapping or implicit dynamic mapping).  This means
   incoming traffic will be sent to a different host ("theft").  A
   mechanism to immediately inform the PCP client of state loss would
   reduce this interval, but would not eliminate this threat.  The PCP
   client can reduce this interval by using a relatively short lifetime;
   however, this increases the amount of PCP chatter.  This threat is
   reduced by using persistent storage of explicit dynamic mappings in
   the PCP server (so it does not lose explicit dynamic mapping state),
   or by ensuring the previous external IP address and port cannot be
   used by another host (e.g., by using a different IP address pool).


14.  IANA Considerations

   IANA is requested to perform the following actions:

14.1.  Port Number

   PCP will use port 5351 (currently assigned by IANA to NAT-PMP
   [I-D.cheshire-nat-pmp]).  We request that IANA re-assign that same
   port number to PCP, and relinquish UDP port 44323.

   [Note to RFC Editor: Please remove the text about relinquishing port
   44323 prior to publication.]

14.2.  OpCodes

   IANA shall create a new protocol registry for PCP OpCodes, initially
   populated with the values in Section 8, Section 9, and the value 0
   for the "no-op" operation PCP Rapid Recovery
   [I-D.cheshire-pcp-recovery].  The value 127 is reserved.




Wing, et al.             Expires January 6, 2012               [Page 54]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   Additional OpCodes in the range 5-95 can be created via Specification
   Required [RFC5226], and the range 96-126 is for Private Use
   [RFC5226].

14.3.  Result Codes

   IANA shall create a new registry for PCP result codes, numbered
   0-255, initially populated with the result codes from Section 5.4,
   Section 8.2, and Section 10.1.  The values 0 and 255 are reserved.

   Additional Result Codes can be defined via Specification Required
   [RFC5226].

14.4.  Options

   IANA shall create a new registry for PCP Options, numbered 0-255 with
   an associated mnemonic.  The values 0-127 are mandatory-to-process,
   and 128-255 are optional to process.  The initial registry contains
   the Options described in Section 10.  The Option values 127 and 255
   are reserved.

   Additional PCP Option codes in the ranges 5-63 and 128-191 can be
   created via Specification Required [RFC5226], and the ranges 64-126
   and 192-254 are for Private Use [RFC5226].


15.  Acknowledgments

   Thanks to Xiaohong Deng, Alain Durand, Christian Jacquenet, Jacni
   Qin, Simon Perreault, and James Yu for their comments and review.
   Thanks to Simon Perreault for highlighting the interaction of dynamic
   connections with PCP-created mappings.

   Thanks to Francis Dupont for his several thorough reviews of the
   specification, which improved the protocol significantly.


16.  References

16.1.  Normative References

   [RFC0768]  Postel, J., "User Datagram Protocol", STD 6, RFC 768,
              August 1980.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2136]  Vixie, P., Thomson, S., Rekhter, Y., and J. Bound,



Wing, et al.             Expires January 6, 2012               [Page 55]

Internet-Draft         Port Control Protocol (PCP)             July 2011


              "Dynamic Updates in the Domain Name System (DNS UPDATE)",
              RFC 2136, April 1997.

   [RFC2827]  Ferguson, P. and D. Senie, "Network Ingress Filtering:
              Defeating Denial of Service Attacks which employ IP Source
              Address Spoofing", BCP 38, RFC 2827, May 2000.

   [RFC3007]  Wellington, B., "Secure Domain Name System (DNS) Dynamic
              Update", RFC 3007, November 2000.

   [RFC4193]  Hinden, R. and B. Haberman, "Unique Local IPv6 Unicast
              Addresses", RFC 4193, October 2005.

   [RFC5226]  Narten, T. and H. Alvestrand, "Guidelines for Writing an
              IANA Considerations Section in RFCs", BCP 26, RFC 5226,
              May 2008.

   [RFC6056]  Larsen, M. and F. Gont, "Recommendations for Transport-
              Protocol Port Randomization", BCP 156, RFC 6056,
              January 2011.

   [proto_numbers]
              IANA, "Protocol Numbers", 2010, <http://www.iana.org/
              assignments/protocol-numbers/protocol-numbers.xml>.

16.2.  Informative References

   [Bonjour]  "Bonjour",
              <http://en.wikipedia.org/wiki/Bonjour_(software)>.

   [DNS-SD]   Cheshire, S. and M. Krochmal, "DNS-Based Service
              Discovery", draft-cheshire-dnsext-dns-sd-09 (work in
              progress), February 2011.

   [I-D.arkko-dual-stack-extra-lite]
              Arkko, J., Eggert, L., and M. Townsley, "Scalable
              Operation of Address Translators with Per-Interface
              Bindings", draft-arkko-dual-stack-extra-lite-05 (work in
              progress), February 2011.

   [I-D.bpw-pcp-upnp-igd-interworking]
              Boucadair, M., Penno, R., Wing, D., and F. Dupont,
              "Universal Plug and Play (UPnP) Internet Gateway Device
              (IGD)-Port Control Protocol (PCP) Interworking Function",
              draft-bpw-pcp-upnp-igd-interworking-02 (work in progress),
              February 2011.

   [I-D.cheshire-nat-pmp]



Wing, et al.             Expires January 6, 2012               [Page 56]

Internet-Draft         Port Control Protocol (PCP)             July 2011


              Cheshire, S., "NAT Port Mapping Protocol (NAT-PMP)",
              draft-cheshire-nat-pmp-03 (work in progress), April 2008.

   [I-D.cheshire-pcp-recovery]
              Cheshire, S., "PCP Rapid Recovery",
              draft-cheshire-pcp-recovery-01 (work in progress),
              June 2011.

   [I-D.ietf-behave-lsn-requirements]
              Perreault, S., Yamagata, I., Miyakawa, S., Nakagawa, A.,
              and H. Ashida, "Common requirements for IP address sharing
              schemes", draft-ietf-behave-lsn-requirements-01 (work in
              progress), March 2011.

   [I-D.ietf-softwire-dual-stack-lite]
              Durand, A., Droms, R., Woodyatt, J., and Y. Lee, "Dual-
              Stack Lite Broadband Deployments Following IPv4
              Exhaustion", draft-ietf-softwire-dual-stack-lite-11 (work
              in progress), May 2011.

   [I-D.miles-behave-l2nat]
              Miles, D. and M. Townsley, "Layer2-Aware NAT",
              draft-miles-behave-l2nat-00 (work in progress),
              March 2009.

   [IGD]      UPnP Gateway Committee, "WANIPConnection:1",
              November 2001, <http://upnp.org/specs/gw/
              UPnP-gw-WANIPConnection-v1-Service.pdf>.

   [RFC0793]  Postel, J., "Transmission Control Protocol", STD 7,
              RFC 793, September 1981.

   [RFC1918]  Rekhter, Y., Moskowitz, R., Karrenberg, D., Groot, G., and
              E. Lear, "Address Allocation for Private Internets",
              BCP 5, RFC 1918, February 1996.

   [RFC3022]  Srisuresh, P. and K. Egevang, "Traditional IP Network
              Address Translator (Traditional NAT)", RFC 3022,
              January 2001.

   [RFC3581]  Rosenberg, J. and H. Schulzrinne, "An Extension to the
              Session Initiation Protocol (SIP) for Symmetric Response
              Routing", RFC 3581, August 2003.

   [RFC3587]  Hinden, R., Deering, S., and E. Nordmark, "IPv6 Global
              Unicast Address Format", RFC 3587, August 2003.

   [RFC4291]  Hinden, R. and S. Deering, "IP Version 6 Addressing



Wing, et al.             Expires January 6, 2012               [Page 57]

Internet-Draft         Port Control Protocol (PCP)             July 2011


              Architecture", RFC 4291, February 2006.

   [RFC4787]  Audet, F. and C. Jennings, "Network Address Translation
              (NAT) Behavioral Requirements for Unicast UDP", BCP 127,
              RFC 4787, January 2007.

   [RFC4941]  Narten, T., Draves, R., and S. Krishnan, "Privacy
              Extensions for Stateless Address Autoconfiguration in
              IPv6", RFC 4941, September 2007.

   [RFC4961]  Wing, D., "Symmetric RTP / RTP Control Protocol (RTCP)",
              BCP 131, RFC 4961, July 2007.

   [RFC5382]  Guha, S., Biswas, K., Ford, B., Sivakumar, S., and P.
              Srisuresh, "NAT Behavioral Requirements for TCP", BCP 142,
              RFC 5382, October 2008.

   [RFC6092]  Woodyatt, J., "Recommended Simple Security Capabilities in
              Customer Premises Equipment (CPE) for Providing
              Residential IPv6 Internet Service", RFC 6092,
              January 2011.

   [RFC6145]  Li, X., Bao, C., and F. Baker, "IP/ICMP Translation
              Algorithm", RFC 6145, April 2011.

   [RFC6146]  Bagnulo, M., Matthews, P., and I. van Beijnum, "Stateful
              NAT64: Network Address and Protocol Translation from IPv6
              Clients to IPv4 Servers", RFC 6146, April 2011.


Appendix A.  NAT-PMP Transition

   The Port Control Protocol (PCP) is a successor to the NAT Port
   Mapping Protocol, NAT-PMP [I-D.cheshire-nat-pmp], and shares similar
   semantics, concepts, and packet formats.  Because of this NAT-PMP and
   PCP both use the same port, and use NAT-PMP and PCP's version
   negotiation capabilities to determine which version to use.  This
   section describes how an orderly transition may be achieved.

   A client supporting both NAT-PMP and PCP SHOULD send its request
   using the PCP packet format.  This will be received by a NAT-PMP
   server or a PCP server.  If received by a NAT-PMP server, the
   response will be as indicated by the NAT-PMP specification
   [I-D.cheshire-nat-pmp], which will cause the client to downgrade to
   NAT-PMP and re-send its request in NAT-PMP format.  If received by a
   PCP server, the response will be as described by this document and
   processing continues as expected.




Wing, et al.             Expires January 6, 2012               [Page 58]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   A PCP server supporting both NAT-PMP and PCP can handle requests in
   either format.  The first byte of the packet indicates if it is NAT-
   PMP (first byte zero) or PCP (first byte non-zero).

   A PCP-only gateway receiving a NAT-PMP request (identified by the
   first byte being zero) will interpret the request as a version
   mismatch.  Normal PCP processing will emit a PCP response that is
   compatible with NAT-PMP, without any special handling by the PCP
   server.


Appendix B.  Change History

   [Note to RFC Editor: Please remove this section prior to
   publication.]

B.1.  Changes from draft-ietf-pcp-base-12 to -13

   o  All addresses are 128 bits.  IPv4 addresses are represented by
      IPv4-mapped IPv6 addresses (::FFFF/96)

   o  PCP request header now includes PCP client's port (in addition to
      the client's IP address, which was in -12).

   o  new ADDRESS_MISMATCH error.

   o  removed PROCESSING_ERROR error, which was too similar to
      MALFORMED_REQUEST.

   o  Tweaked text describing how PCP client deals with multiple PCP
      server addresses (Section 6.1)

   o  clarified that when overloaded, the server can send
      SERVER_OVERLOADED (and drop requests) or simply drop requests.

   o  Clarified how PCP client chooses MAP4 or MAP6, depending on the
      presence of its own IPv6 or IPv4 interfaces (Section 7).

   o  compliant PCP server MUST support MAPx and PEERx, SHOULD support
      ability to disable support.

   o  clarified that MAP-created mappings have no filtering, and PEER-
      created mappings have whatever filtering and mapping behavior is
      normal for that particular NAT / firewall.

   o  Integrated WGLC feedback (small changes to abstract, definitions,
      and small edits throughout the document)




Wing, et al.             Expires January 6, 2012               [Page 59]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   o  allow new Options to be defined with a specification (rather than
      standards action)

B.2.  Changes from draft-ietf-pcp-base-11 to -12

   o  added implementation note that MAP and implicit dynamic mappings
      have independent mapping lifetimes.

B.3.  Changes from draft-ietf-pcp-base-10 to -11

   o  clarified what can cause CANNOT_PROVIDE_EXTERNAL_PORT error to be
      generated.

B.4.  Changes from draft-ietf-pcp-base-09 to -10

   o  Added External_AF field to PEER requests.  Made PEER's Suggested
      External IP Address and Assigned External IP Address always be 128
      bits long.

B.5.  Changes from draft-ietf-pcp-base-08 to -09

   o  Clarified in PEER OpCode introduction (Section 9) that they can
      also create mappings (as well as query and set existing mappings).

   o  More clearly explained how PEER can re-create an implicit dynamic
      mapping, for purposes of rebuilding state to maintain an existing
      session (e.g., long-lived TCP connection to a server).

   o  Added Suggested External IP Address to the PEER OpCodes, to allow
      more robust rebuilding of connections.  Added related text to the
      PEER server processing section.

   o  Removed text encouraging PCP server to statefully remember its
      mappings from Section 11.3.1, as it didn't belong there.  Text in
      Section 13.4 already encourages persistent storage.

   o  More clearly discussed how PEER is used to re-establish TCP
      mapping state.  Moved it to a new section, as well (it is now
      Section 7.4).

   o  MAP errors now copy the Requested IP Address (and port) fields to
      Assigned IP Address (and port), to allow PCP client to distinguish
      among many outstanding requests when using PREFER_FAILURE.

   o  Mapping theft can also be mitigated by ensuring hosts can't re-use
      same IP address or port after state loss.





Wing, et al.             Expires January 6, 2012               [Page 60]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   o  the UNPROCESSED option is renumbered to 0 (zero), which ensures no
      other option will be given 0 and be unable to be expressed by the
      UNPROCESSED option (due to its 0 padding).

   o  created new Implementation Considerations section (Section 11)
      which discusses non-normative things that might be useful to
      implementors.  Some new text is in here, and the Failure Scenarios
      text (Section 11.3) has been moved to here.

   o  Tweaked wording of EDM NATs in Section 11.1 to clarify the problem
      occurs both inside->outside and outside->inside.

   o  removed "Interference by Other Applications on Same Host" section
      from security considerations.

   o  fixed zero/non-zero text in Section 8.6.

   o  removed duplicate text saying MAP is allowed to delete an implicit
      dynamic mapping.  It is still allowed to do that, but it didn't
      need to be said twice in the same paragraph.

   o  Renamed error from UNAUTH_TARGET_ADDRESS to
      UNAUTH_THIRD_PARTY_INTERNAL_ADDRESS.

   o  for FILTER option, removed unnecessary detail on how FILTER would
      be bad for PEER, as it is only allowed for MAP anyway.

   o  In Security Considerations, explain that PEER can create a mapping
      which makes its security considerations the same as MAP.

B.6.  Changes from draft-ietf-pcp-base-07 to -08

   o  moved all MAP4-, MAP6-, and PEER-specific options into a single
      section.

   o  discussed NAT port-overloading and its impact on MAP (new section
      Section 11.1), which allowed removing the IMPLICIT_MAPPING_EXISTS
      error.

   o  eliminated NONEXIST_PEER error (which was returned if a PEER
      request was received without an implicit dynamic mapping already
      being created), and adjusted PEER so that it creates an implicit
      dynamic mapping.

   o  Removed Deployment Scenarios section (which detailed NAT64, NAT44,
      Dual-Stack Lite, etc.).





Wing, et al.             Expires January 6, 2012               [Page 61]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   o  Added Client's IP Address to PCP common header.  This allows
      server to refuse a PCP request if there is a mismatch with the
      source IP address, such as when a non-PCP-aware NAT was on the
      path.  This should reduce failure situations where PCP is deployed
      in conjunction with a non-PCP-aware NAT.  This addition was
      consensus at IETF80.

   o  Changed UNSPECIFIED_ERROR to PROCESSING_ERROR.  Clarified that
      MALFORMED_REQUEST is for malformed requests (and not related to
      failed attempts to process the request).

   o  Removed MISORDERED_OPTIONS.  Consensus of IETF80.

   o  SERVER_OVERLOADED is now a common PCP error (instead of specific
      to MAP).

   o  Tweaked PCP retransmit/retry algorithm again, to allow more
      aggressive PCP discovery if an implementation wants to do that.

   o  Version negotiation text tweaked to soften NAT-PMP reference, and
      more clearly explain exactly what UNSUPP_VERSION should return.

   o  PCP now uses NAT-PMP's UDP port, 5351.  There are no normative
      changes to NAT-PMP or PCP to allow them both to use the same port
      number.

   o  New Appendix A to discuss NAT-PMP / PCP interworking.

   o  improved pseudocode to be non-blocking.

   o  clarified that PCP cannot delete a static mapping (i.e., a mapping
      created by CLI or other non-PCP means).

   o  moved theft of mapping discussion from Epoch section to Security
      Considerations, (Section 13.4).

B.7.  Changes from draft-ietf-pcp-base-06 to -07

   o  tightened up THIRD_PARTY security discussion.  Removed "highest
      numbered address", and left it as simply "the CPE's IP address".

   o  removed UNABLE_TO_DELETE_ALL error.

   o  renumbered Opcodes

   o  renumbered some error codes





Wing, et al.             Expires January 6, 2012               [Page 62]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   o  assigned value to IMPLICIT_MAPPING_EXISTS.

   o  UNPROCESSED can include arbitrary number of option codes.

   o  Moved lifetime fields into common request/response headers

   o  We've noticed we're having to repeatedly explain to people that
      the "requested port" is merely a hint, and the NAT gateway is free
      to ignore it.  Changed name to "suggested port" to better convey
      this intention.

   o  Added NAT-PMP transition section

   o  Separated Internal Address, External Address, Remote Peer Address
      definition

   o  Unified Mapping, Port Mapping, Port Forwarding definition

   o  adjusted so DHCP configuration is non-normative.

   o  mentioned PCP refreshes need to be sent over the same interface.

   o  renamed the REMOTE_PEER_FILTER option to FILTER.

   o  Clarified FILTER option to allow sending an ICMP error if policy
      allows.

   o  for MAP, clarified that if the PCP client changed its IP address
      and still wants to receive traffic, it needs to send a new MAP
      request.

   o  clarified that PEER requests have to be sent from same interface
      as the connection itself.

   o  for MAP opcode, text now requires mapping be deleted when lifetime
      expires (per consensus on 8-Mar interim meeting)

   o  PEER OpCode: better description of remote peer's IP address,
      specifically that it does not control or establish any filtering,
      and explaining why it is 'from the PCP client's perspective'.

   o  Removed latent text allowing DMZ for 'all protocols' (protocol=0).
      Which wouldn't have been legal, anyway, as protocol 0 is assigned
      by IANA to HOPOPT (thanks to James Yu for catching that one).

   o  clarified that PCP server only listens on its internal interface.





Wing, et al.             Expires January 6, 2012               [Page 63]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   o  abandoned 'target' term and reverted to simplier 'internal' term.

B.8.  Changes from draft-ietf-pcp-base-05 to -06

   o  Dual-Stack Lite: consensus was encapsulation mode.  Included a
      suggestion that the B4 will need to proxy PCP-to-PCP and UPnP-to-
      PCP.

   o  defined THIRD_PARTY option to work with the PEER OpCode, too.
      This meant moving it to its own section, and having both MAP and
      PEER OpCodes reference that common section.

   o  used "target" instead of "internal", in the hopes that clarifies
      internal address used by PCP itself (for sending its packets)
      versus the address for MAPpings.

   o  Options are now required to be ordered in requests, and ordering
      has to be validated by the server.  Intent is to ease server
      processing of mandatory-to-implement options.

   o  Swapped Option values for the mandatory- and optional-to-process
      Options, so we can have a simple lowest..highest ordering.

   o  added MISORDERED_OPTIONS error.

   o  re-ordered some error messages to cause MALFORMED_REQUEST (which
      is PCP's most general error response) to be error 1, instead of
      buried in the middle of the error numbers.

   o  clarified that, after successfully using a PCP server, that PCP
      server is declared to be non-responsive after 5 failed
      retransmissions.

   o  tightened up text (which was inaccurate) about how long general
      PCP processing is to delay when receiving an error and if it
      should honor OpCode-specific error lifetime.  Useful for MAP
      errors which have an error lifetime.  (This all feels awkward to
      have only some errors with a lifetime.)

   o  Added better discussion of multiple interfaces, including
      highlighting WiFi+Ethernet.  Added discussion of using IPv6
      Privacy Addresses and RFC1918 as source addresses for PCP
      requests.  This should finish the section on multi-interface
      issues.

   o  added some text about why server might send SERVER_OVERLOADED, or
      might simply discard packets.




Wing, et al.             Expires January 6, 2012               [Page 64]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   o  Dis-allow internal-port=0, which means we dis-allow using PCP as a
      DMZ-like function.  Instead, ports have to be mapped individually.

   o  Text describing server's processing of PEER is tightened up.

   o  Server's processing of PEER now says it is implementation-specific
      if a PCP server continues to allow the mapping to exist after a
      PEER message.  Client's processing of PEER says that if client
      wants mapping to continue to exist, client has to continue to send
      recurring PEER messages.

B.9.  Changes from draft-ietf-pcp-base-04 to -05

   o  tweaked PCP common header packet layout.

   o  Re-added port=0 (all ports).

   o  minimum size is 12 octets (missed that change in -04).

   o  removed Lifetime from PCP common header.

   o  for MAP error responses, the lifetime indicates how long the
      server wants the client to avoid retrying the request.

   o  More clearly indicated which fields are filled by the server on
      success responses and error responses.

   o  Removed UPnP interworking section from this document.  It will
      appear in [I-D.bpw-pcp-upnp-igd-interworking].

B.10.  Changes from draft-ietf-pcp-base-03 to -04

   o  "Pinhole" and "PIN" changed to "mapping" and "MAP".

   o  Reduced from four MAP OpCodes to two.  This was done by implicitly
      using the address family of the PCP message itself.

   o  New option THIRD_PARTY, to more carefully split out the case where
      a mapping is created to a different host within the home.

   o  Integrated a lot of editorial changes from Stuart and Francis.

   o  Removed nested NAT text into another document, including the IANA-
      registered IP addresses for the PCP server.

   o  Removed suggestion (MAY) that PCP server reserve UDP when it maps
      TCP.  Nobody seems to need that.




Wing, et al.             Expires January 6, 2012               [Page 65]

Internet-Draft         Port Control Protocol (PCP)             July 2011


   o  Clearly added NAT and NAPT, such as in residential NATs, as within
      scope for PCP.

   o  HONOR_EXTERNAL_PORT renamed to PREFER_FAILURE

   o  Added 'Lifetime' field to the common PCP header, which replaces
      the functions of the 'temporary' and 'permanent' error types of
      the previous version.

   o  Allow arbitrary Options to be included in PCP response, so that
      PCP server can indicate un-supported PCP Options.  Satisfies PCP
      Issue #19

   o  Reduced scope to only deal with mapping protocols that have port
      numbers.

   o  Reduced scope to not support DMZ-style forwarding.

   o  Clarified version negotiation.

B.11.  Changes from draft-ietf-pcp-base-02 to -03

   o  Adjusted abstract and introduction to make it clear PCP is
      intended to forward ports and intended to reduce application
      keepalives.

   o  First bit in PCP common header is set.  This allows DTLS and non-
      DTLS to be multiplexed on same port, should a future update to
      this specification add DTLS support.

   o  Moved subscriber identity from common PCP section to MAP* section.

   o  made clearer that PCP client can reduce mapping lifetime if it
      wishes.

   o  Added discussion of host running a server, client, or symmetric
      client+server.

   o  Introduced PEER4 and PEER6 OpCodes.

   o  Removed REMOTE_PEER Option, as its function has been replaced by
      the new PEER OpCodes.

   o  IANA assigned port 44323 to PCP.

   o  Removed AMBIGUOUS error code, which is no longer needed.





Wing, et al.             Expires January 6, 2012               [Page 66]

Internet-Draft         Port Control Protocol (PCP)             July 2011


B.12.  Changes from draft-ietf-pcp-base-01 to -02

   o  more error codes

   o  PCP client source port number should be random

   o  PCP message minimum 8 octets, maximum 1024 octets.

   o  tweaked a lot of text in section 7.4, "Opcode-Specific Server
      Operation".

   o  opening a mapping also allows ICMP messages associated with that
      mapping.

   o  PREFER_FAILURE value changed to the mandatory-to-process range.

   o  added text recommending applications that are crashing obtain
      short lifetimes, to avoid consuming subscriber's port quota.

B.13.  Changes from draft-ietf-pcp-base-00 to -01

   o  Significant document reorganization, primarily to split base PCP
      operation from OpCode operation.

   o  packet format changed to move 'protocol' outside of PCP common
      header and into the MAP* opcodes

   o  Renamed Informational Elements (IE) to Options.

   o  Added REMOTE_PEER (for disambiguation with dynamic ports),
      REMOTE_PEER_FILTER (for simple packet filtering), and
      PREFER_FAILURE (to optimize UPnP IGD interworking) options.

   o  Is NAT or router behind B4 in scope?

   o  PCP option MAY be included in a request, in which case it MUST
      appear in a response.  It MUST NOT appear in a response if it was
      not in the request.

   o  Result code most significant bit now indicates permanent/temporary
      error

   o  PCP Options are split into mandatory-to-process ("P" bit), and
      into Specification Required and Private Use.

   o  Epoch discussion simplified.





Wing, et al.             Expires January 6, 2012               [Page 67]

Internet-Draft         Port Control Protocol (PCP)             July 2011


Authors' Addresses

   Dan Wing (editor)
   Cisco Systems, Inc.
   170 West Tasman Drive
   San Jose, California  95134
   USA

   Email: dwing@cisco.com


   Stuart Cheshire
   Apple Inc.
   1 Infinite Loop
   Cupertino, California  95014
   USA

   Phone: +1 408 974 3207
   Email: cheshire@apple.com


   Mohamed Boucadair
   France Telecom
   Rennes,   35000
   France

   Email: mohamed.boucadair@orange-ftgroup.com


   Reinaldo Penno
   Juniper Networks
   1194 N Mathilda Avenue
   Sunnyvale, California  94089
   USA

   Email: rpenno@juniper.net


   Paul Selkirk
   Internet Systems Consortium
   950 Charter Street
   Redwood City, California  94063
   USA

   Email: pselkirk@isc.org






Wing, et al.             Expires January 6, 2012               [Page 68]

