<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
        <!ENTITY rfc2277 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2277.xml">
        <!ENTITY rfc2119 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
        <!ENTITY rfc2781 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2781.xml">
        <!ENTITY rfc5321 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5321.xml">
        <!ENTITY rfc3261 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3261.xml">
        <!ENTITY rfc3263 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3263.xml">
        <!ENTITY rfc3629 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3629.xml">
        <!ENTITY rfc3688 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3688.xml">
        <!ENTITY rfc3986 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml">
        <!ENTITY rfc3761 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3761.xml">
        <!ENTITY rfc4725 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4725.xml">          
        <!ENTITY rfc5486 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5486.xml">
		<!ENTITY I-D.ietf-drinks-usecases-requirements SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-drinks-usecases-requirements.xml">
		
		<!ENTITY I-D.ietf-drinks-sppp-over-soap SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-drinks-sppp-over-soap.xml">
		
]>


<rfc category="std" docName="draft-ietf-drinks-spprov-04"
  ipr="trust200902">

  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc="yes" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc iprnotified="no" ?>
  <?rfc strict="yes" ?>

  <front>
    <title abbrev="draft-drinks-spprov"> Session Peering Provisioning
      Protocol </title>

    <author initials="J-F.M." surname="Mule"
      fullname="Jean-Francois Mule">
      <organization>CableLabs </organization>
      <address>
                        <postal>
                                <street>858 Coal Creek Circle</street>
                                <city>Louisville</city> <region>CO</region> 
                                <code>80027</code>
                                <country>USA</country>
                        </postal>
                        <email>jfm@cablelabs.com</email>
                </address>
    </author>

    <author initials="K.C." surname="Cartwright"
      fullname="Kenneth Cartwright">
      <organization>TNS</organization>
      <address>
                        <postal>
                                <street>1939 Roland Clarke Place</street>
                                <city>Reston</city> <region>VA</region> 
                                <code>20191</code>
                                <country>USA</country>
                        </postal>
                        <email>kcartwright@tnsi.com</email>
                </address>
    </author>

    <author initials="S.A." surname="Ali" fullname="Syed Wasim Ali">
      <organization>NeuStar</organization>
      <address>
                        <postal>
                                <street>46000 Center Oak Plaza</street>
                                <city>Sterling</city> <region>VA</region> 
                                <code>20166</code>
                                <country>USA</country>
                        </postal>
                        <email>syed.ali@neustar.biz</email>
                </address>
    </author>

    <author initials="A.M." surname="Mayrhofer"
      fullname="Alexander Mayrhofer">
      <organization>enum.at GmbH</organization>
      <address>
                        <postal>
                                <street>Karlsplatz 1/9</street>
                                <city>Wien</city> <region> </region> 
                                <code>A-1010</code>
                                <country>Austria</country>
                        </postal>
                        <email>alexander.mayrhofer@enum.at</email>
                </address>
    </author>

    <date year="2011" />

    <area>Real-time Applications and Infrastructure Area</area>

    <workgroup>DRINKS</workgroup>

    <abstract>
      <t> This document defines a protocol for provisioning session
        establishment data into Session Data Registries and SIP
        Service Provider data stores. The provisioned data is
        typically used by various network elements for session
        peering. </t>
      <t> This document describes the Session Peering Provisioning
        Protocol used by clients to provision registries. The document
        provides a set of guiding principles for the design of this
        protocol including extensibility and independent transport
        definitions, a basic data model and an XML Schema Document.
      </t>
    </abstract>
  </front>

  <middle>
    <!--  Note: this is how you can put a note in the draft for yourself or for the co-authors to check on -->
    <section anchor="introduction" title="Introduction">
      <t> Service providers and enterprises use registries to make
        call or session routing decisions for Voice over IP, SMS and
        MMS traffic exchanges. This document is narrowly focused on
        the provisioning protocol for these registries. This protocol
        prescribes a way for an entity to provision session-related
        data into a registry. The data being provisioned can be
        optionally shared with other participating peering entities.
        The requirements and use cases driving this protocol have been
        documented in <xref
          target="I-D.ietf-drinks-usecases-requirements"/>. The reader
        is expected to be familiar with the terminology defined in the
        previously mentioned document. <vspace blankLines="1"/> Three
        types of provisioning flows have been described in the use
        case document: client to registry provisioning, registry to
        local data repository and registry-to-registry. This document
        addresses a subset (client-to-registry provisioning) by
        defining a Session Peering Provisioning Protocol (SPPP) for
        provisioning Session Establishment Data (SED) into a Registry
        (arrow "1" in the figure below). While the other "provisioning
        flows" are shown below as separate message flows, no
        determination has been made for whether one common baseline
        protocol could be used for all three, or whether distinct
        protocols are required. </t>

      <t>
        <figure align="center" anchor="RegFlows">
          <artwork align="center">
            <![CDATA[
                         *------------*               *------------*
(1). Provisioning SED    |            | (3).Registry  |            |
-----------------------> |  Registry  |<------------->|  Registry  | 
     data into Registries|            |  to Registry  |            |
                         *------------*  exchanges    *------------*
                              /  \                          \
                             /    \                          \
                            /      \                          \
                           /        \                          v
                          /          \                         ...
                         /            \
                        / (2).         \
                       / Distributing   \
                      /      SED         \
                     V                    V
                    +----------+       +----------+
                    |Local Data|       |Local Data|
                    |Repository|       |Repository|
                    +----------+       +----------+
                       ]]>
          </artwork>
          <postamble> Three Registry Provisioning Flows </postamble>
        </figure>
      </t>

      <t> The data provisioned for session establishment is typically
        used by various downstream SIP signaling systems to route a
        call to the next hop associated with the called domain. These
        systems typically use a local data store ("Local Data
        Repository") as their source of session routing information.
        More specifically, the SED data is the set of parameters that
        the outgoing signaling path border elements (SBEs) need to
        initiate the session. See <xref target="RFC5486"/> for more
        details. <vspace blankLines="1"/> A "terminating" SIP Service
        Provider (SSP) provisions SED into the registry to be
        selectively shared with other peer SSPs. Subsequently, a
        Registry may distribute the provisioned data into local Data
        Repositories used for look-up queries (identifier -> URI) or
        for lookup and location resolution (identifier -> URI ->
        ingress SBE of terminating SSP). In some cases, the Registry
        may additionally offer a central query resolution service (not
        shown in the above figure). </t>
      <t> A key requirement for the SPPP protocol is to be able to
        accommodate two basic deployment scenarios: <list
          style="numbers">
          <t> A Local Data Repository serves a Look-Up Function (LUF) to determine the target domain
            to assist in call routing (as described in <xref
              target="RFC5486"/>). In this case, the querying entity
            may use other means to perform the Location Routing
            Function (LRF) which in turn helps determine the actual
            location of the Signaling Function in that domain. </t>
          <t> A Local Data Repository serves both a Look-Up function (LUF) and Location Routing
            Function (LRF) to locate the SED data fully. </t>
        </list>
      </t>

      <t> In terms of protocol design, SPPP protocol is agnostic to
        the transport. This document includes the description of the
        data model and the means to enable protocol operations within
        a request and response structure. To encourage
        interoperability, the protocol supports extensibility aspects. </t>
      <t> Transport requirements are provided in this document to help
        with the selection of the optimum transport mechanism. (<xref
          target="I-D.ietf-drinks-sppp-over-soap"/>) identifies a SOAP
        transport mechanism for SPPP. </t>
      <t> This document is organized as follows: <list style="symbols"
          hangIndent="5">
          <t>
            <xref target="terminology"/> provides the terminology; 
          </t>
          <t>
            <xref target="highleveldesign"/> provides an overview
            of the SPPP protocol, including the layering approach,
            functional entities and data model; </t> <t>
            <xref target="transportreq"/> specifies requirements for
            SPPP transport protocols; </t> <t>
            <xref target="basicdatastructures"/> describes the base protocol data structures including the request and response elements (<xref target="requestandresponse"/>), the response codes and messages (<xref target="resultcodes"/>) and the basic object type most first class objects extend from;</t>
            <t> 
             <xref target="protocolcommands"/> and <xref target="examples"/> describe the main protocol commands and examples;
            </t>
          <t>
            <xref target="xmlconsiderations"/> defines XML
            considerations that XML parsers must meet to conform to
            this specification; </t> 
           <t><xref target="formalspecification"/> normatively defines the SPPP protocol using its XML Schema Definition. 
           </t>
        </list>
      </t>
    </section>

    <section anchor="terminology" title="Terminology">
      <t> The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
        "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described
        in <xref target="RFC2119"/>. </t>
      <t> This document reuses terms from <xref target="RFC3261"/>,
          <xref target="RFC5486"/>, use cases and requirements
        documented in <xref
          target="I-D.ietf-drinks-usecases-requirements"/> and the
        ENUM Validation Architecture <xref target="RFC4725"/>. </t>
      <t> In addition, this document specifies the following
        additional terms: <vspace blankLines="1"/>
        <list style="hanging">
          <t hangText="SPPP: "> Session Peering Provisioning Protocol,
            the protocol used to provision data into a Registry (see
            arrow labeled "1." in Figure 1 of <xref
              target="I-D.ietf-drinks-usecases-requirements"/>). It is
            the primary scope of this document. <vspace blankLines="1"
            />
          </t>
          <t hangText="SPDP: "> Session Peering Distribution Protocol,
            the protocol used to distribute data to Local Data
            Repository (see arrow labeled "2." in Figure 1 of <xref
              target="I-D.ietf-drinks-usecases-requirements"/>).
              <vspace blankLines="1"/>
          </t>
          <t hangText="Client: "> An application that supports an SPPP
            Client; it is sometimes referred to as a "Registry
            Client". <vspace blankLines="1"/>
          </t>
          <t hangText="Registry: "> The Registry operates a master
            database of Session Establishment Data for one or more
            Registrants. <vspace blankLines="1"/> A Registry acts as
            an SPPP Server. <vspace blankLines="1"/>
          </t>
          <t hangText="Registrant: "> In this document, we extend the
            definition of a Registrant based on <xref target="RFC4725"
            />. The Registrant is the end-user, the person or
            organization who is the "holder" of the Session
            Establishment Data being provisioned into the Registry.
            For example, in <xref
              target="I-D.ietf-drinks-usecases-requirements"/>, a
            Registrant is pictured as a SIP Service Provider in Figure
            2. <vspace blankLines="1"/> A Registrant is identified by
            its name and an identifier in the data model. <vspace blankLines="1"/>
          </t>
          <t hangText="Registrar: "> In this document, we also extend
            the definition of a Registrar from <xref target="RFC4725"
            />. A Registrar performs provisioning operations on behalf
            of a Registrant by interacting with the Registry, in our
            case via the SPPP protocol defined in this document.
              <vspace blankLines="1"/> A Registrar is identified by
            its name and an identifier in the data model. </t>
        </list>
      </t>
    </section>

    <section anchor="highleveldesign" title="Protocol High Level Design">
      <t> This section introduces the structure of the data model and
        provides the information framework for the SPPP protocol. An
        overview of the protocol operations is first provided with a
        typical deployment scenario. The data model is then defined
        along with all the objects manipulated by the protocol and
        their relationships. </t>

      <section anchor="layering" title="Protocol Layering">
        <t> SPPP is a simple request/reply protocol that allows a
          client application to submit provisioning data and query
          requests to a server. The SPPP data structures are designed
          to be protocol agnostic. Concerns regarding encryption,
          non-repudiation, and authentication are beyond the scope of
          this document. For more details, please refer to the
          Transport Protocol Requirements section. </t>


        <figure align="center" anchor="SPPP_layering">
          <artwork align="center">
            <![CDATA[
          Layer                      Example
     +-------------+      +-----------------------------+
 (5) |Data Objects |      |      RteGrpType, etc.       |
     +-------------+      +-----------------------------+
           |                           |
     +-------------+      +-----------------------------+
 (4) | Operations  |      |   AddRteGrpRqstType, etc.   |
     +-------------+      +-----------------------------+
           |                           |
     +-------------+      +-----------------------------+
 (3) |   Message   |      |    spppUpdateRequest,       |
     |             |      |    spppUpdateResponse,      |
     |             |      |    spppQueryRequest,        |
     |             |      |    spppQueryResponse        |
     +-------------+      +-----------------------------+
           |                           |
     +-------------+      +-----------------------------+
 (2) |   Message   |      |   HTTP, SOAP, None, etc.    |
     |   Envelope  |      |                             |
     +-------------+      +-----------------------------+
           |                           |
     +-------------+      +-----------------------------+
 (1) |  Transport  |      |    TCP, TLS, BEEP, etc.     |
     |   Protocol  |      |                             |
     +-------------+      +-----------------------------+
                       ]]>
          </artwork>
          <postamble> SPPP Layering </postamble>
        </figure>
        <t> SPPP can be viewed as a set of layers that collectively
          define the structure of an SPPP request and response. Layers
          1 and 2, as detailed below, are left to separate
          specifications to allow for potentially multiple SPPP
          transport, envelope, and authentication technologies. This
          document defines layers 3, 4, and 5 below. </t>
        <t>
          <list style="numbers">
            <t> The transport protocol layer provides a communication
              mechanism between the client and server. SPPP can be
              layered over any transport protocol that provides a set
              of basic requirements defined in the Transport Protocol
              Requirements section. </t>
            <t> The message envelope layer is optional, but can
              provide features that are above the transport technology
              layer but below the application messaging layer.
              Technologies such as HTTP and SOAP are examples of
              messaging envelope technologies. </t>
            <t> The message layer provides a simple,
              envelope-independent and transport-independent, SPPP
              wrapper for SPPP request and response messages. </t>
            <t> The operation layer defines the set of base SPPP
              actions that can be invoked for a given object data type 
              using an SPPP message.  Operations are encoded using XML 
              encoded actions and objects. </t>
            <t> The data object layer defines the base set of SPPP
              data objects that can be included in update operations
              or returned in operation responses. </t>
          </list>
        </t>
      </section>

      <section anchor="datamodel" title="Protocol Data Model">
        <t> The data model illustrated and described in <xref
            target="SPPP_datamodel"/> defines the logical objects and
          the relationships between these objects that the SPPP
          protocol supports. SPPP defines the protocol operations
          through which an SPPP Client populates a Registry with these
          logical objects. Various clients belonging to different
          Registrars may use the protocol for populating the
          Registry's data. </t>
        
          <t> The logical structure presented below is consistent with
            the terminology and requirements defined in <xref
              target="I-D.ietf-drinks-usecases-requirements"/>. </t>

          <figure align="center" anchor="SPPP_datamodel">
            <preamble> </preamble>
            <artwork align="center"><![CDATA[
+-------------+      +------------------+                         
| all object  |      |Organization:     |                        
| types       |      |orgId,            |                       
+------+------+      |orgName,          |                       
       +------------>|extension         |                           
                     |                  |                       
 All objects are     |                  |                       
 associated with 2   |                  |                       
 Organizations to    +------------------+                       
 identify the            ^                                      
 registrant and          |A Route Group is                      
 the registrar           |associated with                       
                         |zero or more Peering          
                         |Organizations         
                         |                      
                +--------+--------------+
                |Route Group:           |        +-----[abstract]-+
                |  rant,              |        | Route Record:  |
                |  rar,               |        |                |
                |  rgName,          |        |  rrName,       |
                |  destGrpRef,          +------->|  priority,     |
                |  isInSvc,             |        |  extension     |
                |  rrRef,           |        |                |
                |  peeringOrg,          |        +----------------+
                |  sourceIdent,         |            ^
                |  priority,            |            |
                |  extension            |            |Various types
                +-----------------------+            |of Route
                      ^                              |Records...
                      |                       +------+------------...
                      |                       |        |         |
                      |                     +----+  +-------+ +----+    
                      |                     | URI|  | NAPTR | | NS | 
     +----------------+-----+               +----+  +-------+ +----+
     |Destination           |                
     |Group:                |     +----------[abstract]-+          
     |  rant,             |     |Public Identifier:   |
     |  rar,              |     |                     |
     |  dgName,             |     |  rant,            |
     |  extension           |<----+  rar,             |
     +----------------------+     |  publicIdentifier,  |
                                  |  destGrpRef,        |
                                  |  rrRef,            |
                                  |  extension          |
                                  +---------------------+
                                             ^             
                                             |Various types
                                             |of Public     
                                             |Identifiers...   
                          +---------+-------+------------...
                          |         |       |     |
                      +------+  +-----+  +-----+ +-----+
                      |  TN  |  | TNP |  | TNR | | RN  |
                      +------+  +-----+  +-----+ +-----+
]]></artwork>
            <postamble> SPPP Data Model </postamble>
          </figure>

          <t> The objects and attributes that comprise the data model
            can be described as follows (objects listed from the
            bottom up): <list style="symbols">
                <t> Public Identifier: <vspace blankLines="0"/> 
                From a broad perspective a public identifier is a well known
                attribute that is used as the key to perform resolution 
                lookups. Within the context of SPPP, a Public Identifier 
                object can be a telephone number, a range of telephone 
                numbers, a PSTN Routing Number (RN), or a prefix. <vspace blankLines="1"/> 
                An SPPP Public Identifier is associated with a Destination Group to
                create a logical grouping of Public Identifiers that share a common set of
                Routes. <vspace blankLines="1"/> A TN Public Identifier
                may optionally be associated with zero or more
                individual Route Records. This ability for a Public
                Identifier to be directly associated with a set of Route
                Records (e.g. target URI), as opposed to being
                associated with a Destination Group, supports the use
                cases where the target URI contains data specifically
                tailored to an individual TN Public Identifier. </t> 
                <t> Destination Group: <vspace blankLines="0"/> 
                A named collection of zero or more Public Identifiers that 
                can be associated with one or more Route Groups for the 
                purpose of facilitating the management of their common 
                routing information. </t>
                <t> Route Group: <vspace blankLines="0"/>
                A Route Group contains a set of references to Route Records, 
                a set of Destination Group references, and a set of 
                peering organization identifiers.  This is used to 
                establish a three part relationships between a set of 
                Public Identifiers and their common routing information 
                (SED), and the list of peering organizations whose query 
                responses may include that routing information in their 
                query responses.  To support the use cases defined in 
                [I-D.ietf-drinks-usecases-requirements], this document 
                defines the following types of Route Records: NAPTRType, 
                NSType, and URIType.  The sourceIdent element within a Route 
                Group, in concert with the set of peering organization 
                identifiers enables fine grained source based routing.  
                Further details about the Route Group and source based routing 
                refer to the definitions and descriptions of the Route 
                Group operations found later in this document. </t>           
                <t> Route Record: <vspace blankLines="0"/>
                A Route Record contains the data that a resolution system 
                returns in response to a successful query for a Public 
                Identifier.  Route Recoords are associated with a Route 
                Group for SED that is not specific to a Public Identifier. 
                <vspace blankLines="0"/> To support the use cases defined in 
                <xref target="I-D.ietf-drinks-usecases-requirements"/>, 
                SPPP protocol defines three type of Route Records:
                URIType, NAPTRType, and NSType. These Route Records
                extend the abstract type RteRecType and inherit the
                common attribute 'priority' that is meant for setting
                precedence across the route records defined within a
                Route Group in a protocol agnostic fashion. </t> 
                <t> Organization: <vspace blankLines="0"/> An
                Organization is an entity that may fulfill any 
                combination of three roles:  Registrant, Registrar, and 
                Peering Organization.  All SPPP objects are
                associated with two organization identifiers to identify 
                each object's registrant and the registrar. A Route Group 
                object is also associated with a set of zero or more 
                organization identifiers that identify the peering 
                organizations whose query responses may include the 
                routing information (SED) defined in the Route Records 
                within that Route Group. </t>
            </list>
          </t>
     
       </section>
       
    </section>

    <section anchor="transportreq" title="Transport Protocol Requirements">

      <t> This section provides requirements for transport protocols
        suitable for SPPP. More specifically, this section specifies
        the services, features, and assumptions that SPPP delegates to
        the chosen transport and envelope technologies. </t>

      <t> Two different groups of use cases are specified in <xref
          target="I-D.ietf-drinks-usecases-requirements"/>. One group
        of use cases describes the provisioning of data by a client
        into a Registry (Section 3.1 of the above referenced
        document), while the other group describes the distribution of
        data into local data repositories (Section 3.2). The current
        version of this document focuses on the first set of use cases
        (client to registry provisioning). <vspace blankLines="1"/>
        These use cases may involve the provisioning of very small
        data sets like the modification or update of a single public
        identifier. Other provisioning operations may deal with huge
        datasets like the "download" of a whole local number
        portability database to a Registry. <vspace blankLines="1"/>
        As a result, a transport protocol for SPPP must be very
        flexible and accommodate various sizes of data set sizes. </t>
      <t> For the reasons outlined above, it is conceivable that
        provisioning and distributing may use different transport
        protocols. This document focuses on the provisioning protocol. </t>

      <section anchor="transpconnreq" title="Connection Oriented">
        <t> The SPPP protocol follows a model where a Client
          establishes a connection to a Server in order to further
          exchange provisioning transactions over such point-to-point
          connection. A transport protocol for SPPP MUST therefore be
          connection oriented. </t>
        <t> Note that the role of the "Client" and the "Server" only
          applies to the connection, and those roles are not related
          in any way to the type of entity that participates in a
          protocol exchange. For example, a Registry might also
          include a "Client" when such a Registry initiates a
          connection (for example, for data distribution to SSP). </t>
      </section>

      <section anchor="requestresponse"
        title="Request and Response Model">
        <t> Provisioning operations in SPPP follow the request -
          response model, where a transaction is initiated by a Client
          using a Request command, and the Server responds to the
          Client by means of a Response. <vspace blankLines="1"/>
          Multiple subsequent request-response exchanges MAY be
          performed over a single connection. </t>
        <t> Therefore, a transport protocol for SPPP MUST follow the
          request-response model by allowing a response to be sent to
          the request initiator.</t>
      </section>

      <section anchor="connectionlength" title="Connection Lifetime">
        <t> Some use cases involve provisioning a single request to a
          network element - connections supporting such provisioning
          requests might be short-lived, and only established on
          demand. </t>
        <t> Other use cases involve either provisioning a huge set of
          data, or a constant stream of small updates, which would
          require long-lived connections. </t>
        <t> Therefore, a protocol suitable for SPPP SHOULD support
          short lived as well as long lived connections. </t>
      </section>

      <section anchor="authentication" title="Authentication">
        <t> Many use cases require the Server to authenticate the
          Client, and potentially also the Client to authenticate the
          Server. While authentication of the Server by the Client is
          expected to be used only to prevent impersonation of the
          Server, authentication of the Client by the Server is
          expected to be used to identify and further authorize the
          Client to certain resources on the Server. </t>
        <t> Therefore, an SPPP transport protocol MUST provide means
          for a Server to authenticate and authorize a Client, and MAY
          provide means for Clients to authenticate a Server. </t>
      </section>

      <section anchor="confidentiality"
        title="Confidentiality and Integrity">
        <t> Data that is transported over the protocol is deemed
          confidential. Therefore, a transport protocol suitable for
          SPPP MUST ensure confidentiality and integrity protection by
          providing encryption capabilities. </t>
        <t> Additionally, a DRINKS protocol MUST NOT use an unreliable
          lower-layer transport protocol that does not provide
          confidentiality and integrity protection. </t>
      </section>

      <section anchor="timing" title="Near Real Time">
        <t> Many use cases require near real-time responses from the
          Server. Therefore, a DRINKS transport protocol MUST support
          near-real-time response to requests submitted by the Client.
        </t>
      </section>

      <section anchor="respsizes" title="Request and Response Sizes">
        <t> SPPP covers a range of use cases - from cases where
          provisioning a single public identifier will create very
          small request and response sizes to cases where millions of
          data records are submitted or retrieved in one transaction.
          Therefore, a transport protocol suitable for SPPP MUST
          support a great variety of request and response sizes. </t>
        <t> A transport protocol MAY allow splitting large chunks of
          data into several smaller chunks. </t>
      </section>

      <section anchor="reqorder"
        title="Request and Response Correlation">
        <t> A transport protocol suitable for SPPP MUST allow
          responses to be correlated with requests. </t>
      </section>

      <section anchor="ack" title="Request Acknowledgement">
        <t> Data transported in the SPPP protocol is likely crucial
          for the operation of the communication network that is being
          provisioned. <vspace blankLines="1"/> Failed transactions
          can lead to situations where a subset of public identifiers
          (or even SSPs) might not be reachable, or situations where
          the provisioning state of the network is inconsistent. </t>
        <t> Therefore, a transport protocol for SPPP MUST provide a
          Response for each Request, so that a Client can identify
          whether a Request succeeded or failed. </t>
      </section>

      <section anchor="mandatorytransport"
        title="Mandatory
        Transport">
        <t> As of this writing of this revision, one transport
          protocol proposal has been provided in <xref
            target="I-D.ietf-drinks-sppp-over-soap"/>. <vspace
            blankLines="1"/> This section will define a mandatory
          transport protocol to be compliant with this RFC. </t>
      </section>

    </section>
    
    <section anchor="basicdatastructures" title="Base Protocol Data Structures">

       <t>SPPP uses a common model and a common set of
       data structures for most of the supported operations and object types.  
       This section describes these common data structures.</t>
       
       <section anchor="requestandresponse" title="Request and Response Structures">

         <t> An SPPP client interacts with an SPPP server by using one of
         the supported transport mechanisms to send one or more
         requests to the server and receive corresponding replies from
         the server.  There are two generalized types of operations that an SPPP
         client can submit to an SPPP server, updates and queries.  The following 
         two sub-sections describe the generalized data structures that are 
         used for each of these two types of operations. </t>
         
        <section anchor="updates" title="Update Request and Response Structures">

         <t>An SPPP update request is wrapped within the
         <![CDATA[<spppUpdateRequest> ]]> element while an SPPP update response is
         wrapped within an <![CDATA[<spppUpdateResponse>]]> element.
         The following two sub-sections describe these two elements.</t>

        <section anchor="updaterequest" title="Update Request">
          <t> An SPPP update request object is contained within the generic
            <![CDATA[<spppUpdateRequest>]]> element. </t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
                
  <element name="spppUpdateRequest">
    <complexType>
      <sequence>
        <element name="clientTransId" type="spppb:TransIdType" 
                 minOccurs="0"/>
        <element name="minorVer" type="spppb:MinorVerType" 
                 minOccurs="0"/>
        <element name="rqst" type="spppb:BasicRqstType" 
                 maxOccurs="unbounded"/>
      </sequence>
    </complexType>
  </element>
  
  <simpleType name="TransIdType">
    <restriction base="string"/>
  </simpleType>
  
  <simpleType name="MinorVerType">
    <restriction base="unsignedLong"/>
  </simpleType>

                 ]]>
              </artwork>
            </figure>
          </t>
        
          <t> The data elements within the <![CDATA[<spppUpdateRequest>]]> 
          element are described as follows: 
          <list style="symbols" hangIndent="5">
            <t> clientTransId: Zero or one client generated transaction ID
              that, within the context of the SPPP client, identifies this 
              request. This value can be used at the discretion of the SPPP 
              client to track, log or correlate requests and their responses. This
              value is also echoed back to the client in the SPPP update response.
              An SPPP server will not check this value for uniqueness. </t>
            <t> minorVer: Zero or one minor version identifier, indicating the minor  
              version of the SPPP API that the client is attempting to use. This is
              used in conjunction with the major version identifier in
              the XML namespace to identify the version of SPPP that the client 
              is using.  If the element is not present, the server assumes that 
              the client is using the latest minor version supported by the SPPP
              server for the given major version. The versions supported by a 
              given SPPP server can be retrieved by the client using the 
              SPPP server menu operation described later in the document.</t>
            <t> rqst: One or more BasicRqstType objects.  These are the actions 
              that the client is requesting the SPPP server perform.  They are processed 
              by the SPPP server in the order in which they are included in the request.  
              And with respect to handling error conditions, it is a matter of policy 
              whether the objects are processed in a "stop and rollback" fashion or 
              in a "stop and commit" fashion.  In the "stop and rollback" scenario, 
              the SPPP server would stop processing BasicRqstType object instances in the
              request at the first error and roll back any BasicRqstType object instances 
              that had already been processed for that update request. 
              In the "stop and commit" scenario the SPPP server would stop 
              processing BasicRqstType object instances in the request at the 
              first error but commit any BasicRqstType object instances 
              that had already been processed for that update request. 
            </t>
          </list>
          </t>
        
          <t> All update request objects extend the base type BasicRqstType. This
          base type is defined as follows: </t>

          <t>       
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="BasicRqstType" abstract="true">
    <sequence>
      <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
    </sequence>
  </complexType>
                                ]]>
            </artwork>
          </figure>
          </t>
       
          <t> The BasicRqstType object primarily acts as an abstract base type, 
          and its only data element is described as follows: 
          <list style="symbols" hangIndent="5">
            <t> ext: This is the standard extension element for this
              object. Refer to the Extensibility section of this
              document for more details. </t>
          </list>
          </t>
        </section>

        <section anchor="updateresponse" title="Update Response">
          <t> An SPPP update response object is contained within the generic
          <![CDATA[<spppUpdateResponse>]]> element. </t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
  <element name="spppUpdateResponse">
    <complexType>
      <sequence>
        <element name="overallResult" type="spppb:ResultCodeType"/>
        <element name="rqstObjResult" type="spppb:RqstObjResultCodeType" 
            minOccurs="0" maxOccurs="unbounded"/>
        <element name="clientTransId" type="spppb:TransIdType" 
            minOccurs="0"/>
        <element name="serverTransId" type="spppb:TransIdType"/>
      </sequence>
    </complexType>
  </element>
  
  <complexType name="ResultCodeType">
    <sequence>
       <element name="code" type="int"/>
       <element name="msg" type="string"/>
    </sequence>
  </complexType>
  
  <complexType name="RqstObjResultCodeType">
    <complexContent>
       <extension base="spppb:ResultCodeType">
          <sequence>
             <element name="rqstObj" type="spppb:BasicRqstType"/>
          </sequence>
       </extension>
    </complexContent>
  </complexType>
  
                                ]]>
              </artwork>
            </figure>
          </t>
          <t> An <![CDATA[<spppUpdateResponse>]]> contains the 
          elements necessary for the SPPP client to precisely determine the 
          overal result of the request, and if an error occurred, it provides information about the specific object, data element, or condition caused the error. </t>

          <t> The data elements within the SPPP update response are
            described as follows: <list style="symbols" hangIndent="5">
              <t> clientTransId: Zero or one client transaction ID.  This 
              value is simply an echo of the client transaction ID that 
              SPPP client passed into the SPPP update request.</t>
              <t> serverTransId: Exactly one server transaction ID that
              identifies this request for tracking purposes. This
              value is guaranteed to be unique for a given SPPP server. </t>
              <t> overallResult: Exactly one response code and message pair that 
              explicitly identifies the result of the request. See the 
              Response Code section for further details. </t>
              <t> rqstObjResult: An optional response code, response message, 
              and BasicRqstObject triplet.  This element will be present only if 
              an object level error condition occurs, and indicates exactly which 
              error condition occurred and exactly which request object that was 
              passed in caused the error condition.  The contained BasicRqstObject 
              is simply an echo of the request object instance that caused the error,
              while the response code and message indicate the error condition 
              for this object. See the Response Code section for further details. </t>
              <t> ext: This is the standard extension element for this
              object. Refer to the Extensibility section for more
              details. </t>
            </list>
          </t>
        </section>
        
        </section>
       
        <section anchor="queries" title="Query Request and Response Structures">

         <t>An SPPP query request is wrapped within the
         <![CDATA[<spppQueryRequest> ]]> element while an SPPP query response is
         wrapped within an <![CDATA[<spppQueryResponse>]]> element.
         The following two sub-sections describe these two element structures.</t>

        <section anchor="queryrequest" title="Query Request">
          <t> An SPPP query request object is contained within the generic
            <![CDATA[<spppQueryRequest>]]> element. </t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
  <element name="spppQueryRequest">
    <complexType>
      <sequence>
        <element name="minorVer" type="spppb:MinorVerType" 
            minOccurs="0"/>
        <element name="rqst" type="spppb:BasicQueryRqstType"/>
      </sequence>
    </complexType>
  </element>
                 ]]>
              </artwork>
            </figure>
          </t>
        
          <t> The data elements within the <![CDATA[<spppQueryRequest>]]> 
          element are described as follows: 
          <list style="symbols" hangIndent="5">
            <t> minorVer: Zero or one minor version identifier, indicating the minor  
              version of the SPPP API that the client is attempting to use. This is
              used in conjunction with the major version identifier in
              the XML namespace to identify the version of SPPP that the client 
              is using.  If the element is not present, the server assumes that 
              the client is using the latest minor version supported by the SPPP
              server for the given major version. The versions supported by a 
              given SPPP server can be retrieved by the client using the 
              SPPP server menu operation described later in the document.</t>
            <t> rqst: One BasicQueryRqstType objects.  This is the query 
              that the client is requesting the SPPP server perform. 
            </t>
          </list>
          </t>
        
          <t> All query request objects extend the base type BasicQueryRqstType. This
          base type is defined as follows: </t>

          <t>       
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="BasicQueryRqstType" abstract="true">
    <sequence>
      <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
    </sequence>
  </complexType>
              ]]>
            </artwork>
          </figure>
          </t>
       
          <t> The BasicQueryRqstType object primarily acts as an abstract base type, 
          and its only data element is described as follows: 
          <list style="symbols" hangIndent="5">
            <t> ext: This is the standard extension element for this
              object. Refer to the Extensibility section of this
              document for more details. </t>
          </list>
          </t>
        </section>

        <section anchor="queryresponse" title="Query Response">
          <t> An SPPP query response object is contained within the generic
          <![CDATA[<spppQueryResponse>]]> element. </t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
  <element name="spppQueryResponse">
    <complexType>
      <sequence>
        <element name="overallResult" type="spppb:ResultCodeType"/>
        <element name="resultSet" type="spppb:BasicObjType" 
           minOccurs="0" maxOccurs=" unbounded"/>
      </sequence>
    </complexType>
  </element>
                 ]]>
              </artwork>
            </figure>
          </t>
          <t> An <![CDATA[<spppQueryResponse>]]> contains the 
          elements necessary for the SPPP client to precisely determine the 
          overal result of the query, and if an error occurred, exactly 
          what condition caused the error. </t>

          <t> The data elements within the SPPP query response are
            described as follows: <list style="symbols" hangIndent="5">
              <t> overallResult: Exactly one response code and message pair that 
              explicitly identifies the result of the request. See the 
              Response Code section for further details. </t>
              <t> resultSet: The set of zero or more objects that matched the 
              query criteria.  If no objects matched the query criteria then this 
              result set MUST be empty and the overallResult value MUST indicate success (if no matches are found for the query criteria, the response is considered a success).</t>
            </list>
          </t>
        </section>
  
       </section>
      
       </section>

       <section anchor="resultcodes" title="Response Codes and Messages">

      <t> This section contains the listing of response codes
        and their corresponding human-readable text. </t>
      <t> The response code numbering scheme generally adheres to the
        theory formalized in section 4.2.1 of <xref target="RFC5321"/>: 
        <list style="symbols" hangIndent="5">
          <t> The first digit of the response code can only be 1 or 2:
            1 = a positive result, 2 = a negative result. </t>
          <t> The second digit of the response code indicates the
            category: 0 = Protocol Syntax, 1 = Implementation Specific
            Business Rule, 2 = Security, 3 = Server System. </t>
          <t> The third and fourth digits of the response code
            indicate the individual message event within the category
            defines by the first two digits. </t>
        </list>
      </t>
      
      <t> The response codes are also categorized as to whether they are 
      overall response codes that may only be returned in the "overallResult"
      data element in SPPP responses, of object level response codes that 
      may only be returned in the "rqstObjResult" element of the SPPP
      responses.</t>

      <texttable anchor="Table1"
        title="Response Codes Numbering Scheme and Messages">

        <ttcol align="left" width="10%">Result Code</ttcol>
        <ttcol align="left" width="30%">Text</ttcol>
        <ttcol align="left" width="60%">Overall or Object Level</ttcol>

        <c> 1000 </c>
        <c> Request Succeeded.</c>
        <c> Overall Response Code</c>

        <c> 2001 </c>
        <c> Request syntax invalid.</c>
        <c> Overall Response Code</c>

        <c> 2002 </c>
        <c> Request too large.</c>
        <c> Overall Response Code</c>

        <c> 2003 </c>
        <c> Version not supported.</c>
        <c> Overall Response Code</c>

        <c> 2103 </c>
        <c> Command invalid.</c>
        <c> Overall Response Code</c>
        
        <c> 2301 </c>
        <c> System temporarily unavailable.</c>
        <c> Overall Response Code</c>

        <c> 2302 </c>
        <c> Unexpected internal system or server error.</c>
        <c> Overall Response Code</c>

        <c> 2104 </c>
        <c> Attribute value invalid. AttrName:[AttributeName] AttrVal:[AttributeValue]</c>
        <c> Object Level Response Code</c>

        <c> 2105 </c>
        <c> Object does not exist. AttrName:[AttributeName] AttrVal:[AttributeValue]</c>
        <c> Object Level Response Code</c>

        <c> 2106 </c>
        <c> Object status or ownership does not allow for operation. AttrName:[AttributeName] 
        AttrVal:[AttributeValue]</c>
        <c> Object Level Response Code</c>

        </texttable>

        <t> Each of the object level response messages are "parameterized" with the 
        following parameters: "AttributeName" and "AttributeValue". </t>
        <t> The use of these parameters MUST adhere to the following
        rules: <list style="symbols" hangIndent="5">
            <t hangText=""> All parameters within a response message are
            mandatory and MUST be present. </t> 
            <t hangText=""> Any value provided for the "AttributeName"
            parameter MUST be an exact XSD element name of the protocol
            data element that the response message is referring to.
            For example, valid values for "attribute name" are
            "dgName", "rgName", "rteRec", etc. </t> 
            <t hangText=""> The value for "AttributeValue" MUST be the
            value of the data element to which the preceding
            "AttributeName" refers. </t> 
            <t hangText=""> Result code
            2104 SHOULD be used whenever an element value does not
            adhere to data validation rules. </t> 
            <t hangText="">
            Result codes 2104 and 2105 MUST NOT be used
            interchangeably. Response code 2105 SHOULD be returned
            by an update operation when the data element(s) used to uniquely identify a
            pre-existing object do not exist. If the data elements
            used to uniquely identify an object are malformed, then
            response code 2104 SHOULD be returned. </t>
          </list>
        </t>

      </section>

       <section anchor="BasicObjType" title="Basic Object Type and Organization Identifiers">
       		<t> This section introduces the basic object type that most first class objects derive from. </t>
       		<t> All first class objects extend the basic object type        BasicObjType which contains the identifier of the 
              registrant organization that owns this object, the identifier 
              of the registrar organization that provisioned this 
              object, the date and time that the object was created 
              by the server, and the date and time that the object 
              was last modified.</t>
        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="BasicObjType" abstract="true">
    <sequence>
      <element name="rant" type="spppb:OrgIdType"/>
      <element name="rar" type="spppb:OrgIdType"/>
      <element name="cDate" type="dateTime" minOccurs="0"/>
      <element name="mDate" type="dateTime" minOccurs="0"/>
      <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
    </sequence>
  </complexType>

                        ]]>
            </artwork>
          </figure>
        </t>
        <t>
        	The identifiers used for registrants (rant), registrars (rar) and peering organizations (peeringOrg) are instances of OrgIdType. The OrgIdType is defined as a string and all OrgIdType instances SHOULD follow the textual convention: "namespace:value" (for example "iana-en:32473").  See the IANA Consideration section for more details.
        </t>

  	</section>
  	   </section>

    <section anchor="protocolcommands" title="Protocol Commands">
      <t> This section provides a description of each supported protocol 
      command. </t>

      <section anchor="addrtegrp" title="Add Route Group Operation">
        <t> As described in the introductory sections, a Route Group
          represents a combined grouping of Route Records that define
          route information, Destination Groups that contain a set of
          Public Identifiers with common routing information, and the
          list of peer organizations that have access to these public
          identifiers using this route information. It is this
          indirect linking of public identifiers to their route 
          information that significantly improves the scalability and
          manageability of the peering data. Additions and changes to
          routing information are reduced to a single operation on a
          Route Group or Route Record , rather than millions of data updates 
          to individual public identifier records that individually contain
          their peering data. </t>
        <t> The AddRteGrpRqstType operation creates or overwrites a Route 
          Group object. If a Route Group with the given
          name and registrant ID (which together comprise the unique key
          or a Route Group) does not exist, then the server MUST
          create the Route Group. If a Route Group with the given name
          and registrant ID does exist, then the server MUST replace the
          current properties of the Route Group with the properties
          passed into the AddRteGrpRqstType operation. The XSD
          declarations of the AddRteGrpRqstType operation request object 
          are as follows: </t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="AddRteGrpRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="rteGrp" type="spppb:RteGrpType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
                        ]]>
            </artwork>
          </figure>
        </t>

        <t> The element passed into the spppUpdateRequest element for this
          operation is an instance of AddRteGrpRqstType, which extends 
          BasicRqstType and contains one RteGrpType object. The RteGrpType 
          object structure is defined as follows: </t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="RteGrpType">
    <complexContent>
     <extension base="spppb:BasicObjType">
       <sequence>
         <element name="rgName" type="spppb:ObjNameType"/>
         <element name="rrRef" type="spppb:RteRecRefType" 
           minOccurs="0" maxOccurs="unbounded"/>
         <element name="dgName" type="spppb:ObjNameType" minOccurs="0"
           maxOccurs="unbounded"/>
         <element name="peeringOrg" type="spppb:OrgIdType" 
           minOccurs="0" maxOccurs="unbounded"/>
         <element name="sourceIdent" type="spppb:SourceIdentType"
           minOccurs="0" maxOccurs="unbounded"/>
         <element name="isInSvc" type="boolean"/>
         <element name="priority" type="unsignedShort"/>
         <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
       </sequence>
     </extension>
    </complexContent>
  </complexType>
  
  <complexType name="RteRecRefType">
    <sequence>
      <element name="rrKey" type="spppb:ObjKeyType"/>
      <element name="priority" type="unsignedShort"/>
      <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
    </sequence>
  </complexType>
                        ]]>
            </artwork>
          </figure>
        </t>

        <t>The RteGrpType object is composed of the following
          elements: <list style="symbols" hangIndent="5">
            <t> base: All first class objects extend 
              BasicObjType which contains the ID of the 
              registrant organization that owns this object, the ID 
              of the registrar organization that provisioned this 
              object, the date and time that the object was created 
              by the server, and the date and time that the object 
              was last modified. If the client passes in either the 
              created date or the modification date, the server will  
              ignore them.  The server sets these two date/time values.</t>
            <t> rgName: The character string that contains the
              name of the Route Group. It uniquely identifies this
              object within the context of the registrant ID (a child
              element of the base element as described above). </t>
            <t> rrRef: Set of zero or more objects of type RteRecRefType
              that house the unique keys of the Route Records that the 
              RteGrpType object refers to and their relative priority 
              within the context of a given route group. The associated Route  
              Records contain the routing information, sometimes called SED, 
              associated with this Route Group.</t>
            <t> dgName: Set of zero or more names of DestGrpType
              object instances. Each dgName name, in association with
              this Route Group's registrant ID, uniquely identifies a
              DestGrpType object instance whose public identifiers are
              reachable using the routing information housed in this
              Route Group.  An intended side affect of this is that 
              a Route Group cannot provide routing information for a 
              Destination Group belonging to another registrant. </t>
            <t> peeringOrg: Set of zero or more peering organization
              IDs that have accepted an offer to receive this Route
              Group's information. The set of peering organizations in
              this list is not directly settable or modifiable using
              the addRteGrpsRqst operation. This set is instead
              controlled using the route offer and accept operations. </t>
            <t> sourceIdent: Set of zero or more SourceIdentType
              object instances. These objects, described further
              below, house the source identification schemes and
              identifiers that are applied at resolution time as part
              of source based routing algorithms for the Route Group. </t>
            <t> isInSvc: A boolean element that defines whether this
              Route Group is in service. The routing information
              contained in a Route Group that is in service is a
              candidate for inclusion in resolution responses for
              public identities residing in the Destination Group
              associated with this Route Group. The routing
              information contained in a Route Group that is not in
              service is not a candidate for inclusion in resolution
              responses. </t>
            <t> priority: Zero or one priority value that can be used 
              to provide a relative value weighting of one Route Group 
              over another.  The manner in which this value is used, 
              perhaps in conjunction with other factors, is a matter of 
              policy.</t>
            <t> ext: Point of extensibility described in a previous
              section of this document. </t>
          </list>
        </t>

        <t> As described above, the Route Group contains a set of references 
          to route record objects. A route record object is based on an
          abstract type: RteRecType. The concrete types that use
          RteRecType as an extension base are NAPTRType, NSType, and
          URIType. The definitions of these types are included the Route 
          Record section of this document. </t>

        <t> The RteGrpType object provides support for source-based 
          routing via the peeringOrg data element and more granular 
          source base routing via the source identity element. The 
          source identity element provides the ability to specify zero or
          more of the following in association with a given Route
          Group: a regular expression that is matched against the
          resolution client IP address, a regular expression that is
          matched against the root domain name(s), and/or a regular
          expression that is matched against the calling party URI(s).
          The result will be that, after identifying the visible Route
          Groups whose associated Destination Group(s) contain the
          lookup key being queried and whose peeringOrg list contains 
          the querying organizations organization ID, the resolution server 
          will evaluate the characteristics of the Source URI, and Source
          IP address, and root domain of the lookup key being queried.
          The resolution server then compares these criteria against the 
          source identity criteria associated with the Route Groups. The
          routing information contained in Route Groups that have
          source based routing criteria will only be included in the
          resolution response if one or more of the criteria matches
          the source criteria from the resolution request.  The Source 
          Identity data element is of type SourceIdentType, whose structure 
          is defined as follows:</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="SourceIdentType">
    <sequence>
      <element name="sourceIdentLabel" type="string"/>
      <element name="sourceIdentScheme"
        type="spppb:SourceIdentSchemeType"/>
      <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
    </sequence>
  </complexType>
  
  <simpleType name="SourceIdentSchemeType">
    <restriction base="token">
      <enumeration value="uri"/>
      <enumeration value="ip"/>
      <enumeration value="rootDomain"/>
    </restriction>
  </simpleType>
                        ]]>
            </artwork>
          </figure>
        </t>

        <t>The SourceIdentType object is composed of the following
          data elements: <list style="symbols" hangIndent="5">
            <t> sourceIdentScheme: The source identification scheme
              that this source identification criteria applies to and
              that the associated sourceIdentRegex should be matched
              against. </t>
            <t> sourceIdentRegex: The regular expression that should
              be used to test for a match against the portion of the
              resolution request that is dictated by the associated
              sourceIdentScheme. </t>
            <t> ext: Point of extensibility described in a previous
              section of this document. </t>
          </list>
        </t>

        <t>As with the responses to all update operations, the result 
        of the AddRteGrpRqstType operation is contained in the generic 
        spppUpdateResponse data structure described in an earlier sections 
        of this document.  For a detailed description of the 
        spppUpdateResponse data structure refer to that section of the 
        document.</t>

      </section>

      <section anchor="getroutegrps" title="Get Route Groups Operation">
        <t> The getRteGrpsRqst operation allows a client to get the
          properties of Route Group objects that a registrar
          organization is authorized to view. The server will attempt
          to find a Route Group object that has the registrant ID and
          route group name pair contained in each ObjKeyType object
          instance. If the set of ObjKeyType objects is empty then the
          server will return the list of Route Group objects that the
          querying client has the authority to view. If there are no
          matching Route Groups found then an empty result set will be
          returned. </t>
        <t> The element passed into the spppQueryRequest element for this
          operation is an instance of type GetRteGrpsRqstType, which 
          extends BasicRqstType and contains zero or more ObjKeyType 
          objects. Any limitation on the maximum number of objects that 
          may be passed into or returned by this operation is a policy 
          decision and not limited by the protocol. The XSD declaration 
          of the operation is as follows: </t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="GetRteGrpsRqstType">
    <complexContent>
      <extension base="spppb:BasicQueryRqstType">
        <sequence>
          <element name="objKey" type="spppb:ObjKeyType"
            minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
                        ]]>
            </artwork>
          </figure>
        </t>

        <t>As described in an earlier section of this document, the result 
        of any spppQueryRequest operation is an spppQueryResponse element 
        that contains the overall response code and the query result set, if
        any.  Refer to that section of the document for a detailed description 
        of the spppQueryResponse element.</t>

      </section>

      <section anchor="adddestgrp" title="Add Destination Group Operation">
        <t> As described in the introductory sections, a Destination Group
          represents a set of Public Identifiers with common routing information. </t>
        <t> The AddDestGrpRqstType operation creates or overwrites a Destination 
          Group object. If a Destination Group with the given
          name and registrant ID (which together comprise the unique key for a 
          Destination Group) does not exist, then the server MUST
          create the Destination Group. If a Destination Group with the given name
          and registrant ID does exist, then the server MUST replace the
          current properties of the Destination Group with the properties
          passed into the AddDestGrpsRqstType operation. The XSD
          declarations of the operation request object are as follows: </t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="AddDestGrpRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="destGrp" type="spppb:DestGrpType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
                        ]]>
            </artwork>
          </figure>
        </t>

        <t> The element passed into the spppUpdateRequest element for this
          operation is an element of type AddDestGrpRqsttype, which extends 
          BasicRqstType and contains a DestGrpType object. The DestGrpType 
          object structure is defined as follows: </t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="DestGrpType">
    <complexContent>
     <extension base="spppb:BasicObjType">
      <sequence>
         <element name="dgName" type="spppb:ObjNameType"/>
      </sequence>
     </extension>
    </complexContent>
  </complexType>
                        ]]>
            </artwork>
          </figure>
        </t>

        <t>The DestGrpType object is composed of the following
          elements: <list style="symbols" hangIndent="5">
            <t> base: All first class objects extend  
              BasicObjType which contains the ID of the 
              registrant organization that owns this object, the ID 
              of the registrar organization that provisioned this 
              object, the date and time that the object was created 
              by the server, and the date and time that the object 
              was last modified. If the client passed in either the 
              created date or the modification date, the server will 
              ignore them.  The server sets these two date/time values.</t>
            <t> dgName: The character string that contains the
              name of the Destination Group. This uniquely identifies this
              object within the context of the registrant ID (a child
              element of the base element as described above). </t>
            <t> ext: Point of extensibility described in a previous
              section of this document. </t>
          </list>
        </t>

        <t>As with the responses to all update operations, the result 
        of the AddDestGrpRqstType operation is contained in the generic 
        spppUpdateResponse data structure described in an earlier sections 
        of this document.  For a detailed description of the 
        spppUpdateResponse data structure refer to that section of the 
        document.</t>

      </section>

      <section anchor="getdestgrps" title="Get Destination Groups Operation">
        <t> The getDestGrpsRqst operation allows a client to get the
          properties of Destination Group objects that a registrar
          organization is authorized to view. The server will attempt
          to find a Destination Group object that has the registrant ID and
          destination group name pair contained in each ObjKeyType object
          instance. If there are no matching Destination Groups found then 
          an empty result set will be returned. If the set of ObjKeyType 
          objects passed in is empty then the server will return the list of  
          Destination Group objects that the querying registrar has the authority 
          to view. </t>
        <t> The element passed into the spppQueryRequest element for this
          operation is an instance of type GetDestGrpsRqstType, which 
          extends BasicQueryRqstType and contains zero or more ObjKeyType 
          objects. Any limitation on the maximum number of objects that 
          may be passed into or returned by this operation is a policy 
          decision and not limited by the protocol. The XSD declaration 
          of the operation is as follows: </t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="GetDestGrpsRqstType">
    <complexContent>
      <extension base="spppb:BasicQueryRqstType">
        <sequence>
          <element name="objKey" type="spppb:ObjKeyType"
            minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
                        ]]>
            </artwork>
          </figure>
        </t>

        <t>As described in an earlier section of this document, the result 
        of any spppQueryRequest operation is an spppQueryResponse element 
        that contains the overall response code and the query result set, if
        any.  Refer to that section of the document for a detailed description 
        of the spppQueryResponse element.</t>

      </section>

      <section anchor="addrtegrpoffer" title="Add Route Group Offer Operation">
        <t> The list of peer organizations whose resolution responses
          can include the routing information contained in a given
          Route Group is controlled by the organization to which a
          Route Group object belongs (its registrant), and the peer
          organization that submits resolution requests (a data
          recipient, also know as a peering organization). The registrant 
          offers access to a Route Group by submitting a Route Group Offer. 
          The data recipient can then accept or reject that offer.
          Not until access to a Route Group has been offered and
          accepted will the data recipient's organization ID be
          included in the peeringOrg list in a Route Group object, and
          that Route Group's peering information become a candidate
          for inclusion in the responses to the resolution requests
          submitted by that data recipient. The AddRteGrpOffersRqstType
          operation creates or overwrites one or more Route Group
          Offer objects. If a Route Group Offer for the given Route Group 
          object key and the offeredTo Org ID does not exist, then the 
          server creates the Route Group Offer object. If a such a 
          Route Group Offer does exist, then the server replaces the 
          current object with the new object. The XSD declarations of 
          the operation request object are as follows: </t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="AddRteGrpOfferRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="rteGrpOffer" type="spppb:RteGrpOfferType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
                        ]]>
            </artwork>
          </figure>
        </t>

        <t> The element passed into the spppUpdateRequest element for this
          operation is an instance of AddRteGrpOfferRqstType, which extends
          BasicRqstType and contains a RteGrpOfferType object. The XSD
          declaration of the RteGrpOfferType is as follows: </t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="RteGrpOfferType">
   <complexContent>
     <extension base="spppb:BasicObjType">
       <sequence>
         <element name="rteGrpOfferKey" 
                  type="spppb:RteGrpOfferKeyType"/>
         <element name="status" type="spppb:RteGrpOfferStatusType"/>
         <element name="offerDateTime" type="dateTime"/>
         <element name="acceptDateTime" type="dateTime" minOccurs="0"/>
         <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
       </sequence>
     </extension>
    </complexContent>
  </complexType>
    
  <complexType name="RteGrpOfferKeyType">
    <sequence>
      <element name="rteGrpKey" type="spppb:ObjKeyType"/>
      <element name="offeredTo" type="spppb:OrgIdType"/>
    </sequence>
  </complexType>
  
  <simpleType name="RteGrpOfferStatusType">
    <restriction base="token">
      <enumeration value="offered"/>
      <enumeration value="accepted"/>
    </restriction>
  </simpleType>
                        ]]>
            </artwork>
          </figure>
        </t>

        <t>The RteGrpOfferType object is composed of the following
          elements: <list style="symbols" hangIndent="5">
            <t> base: All first class objects extend  
              BasicObjType which contains the ID of the 
              registrant organization that owns this object, the ID 
              of the registrar organization that provisioned this 
              object, the date and time that the object was created 
              by the server, and the date and time that the object 
              was last modified. If the client passed in either the 
              created date or the modification date, the will ignore 
              them.  The server sets these two date/time values.</t>
            <t> rteGrpOfferKey: The object that identifies the route
              that is or has been offered and the organization that it
              is or has been offered to. The combination of these
              three data elements uniquely identify a Route Group
              Offer. </t>
            <t> status: The status of the offer, offered or accepted.
              This status is controlled by the server. It is
              automatically set to "offered" when ever a new Route
              Group Offer is added, and is automatically set to
              "accepted" if and when that offer is accepted. The value
              of the element is ignored when passed in by the client. </t>
            <t> offerDateTime: Date and time in GMT when the Route
              Group Offer was added. </t>
            <t> acceptDateTime: Date and time in GMT when the Route
              Group Offer was accepted. </t>
          </list>
        </t>

        <t>As with the responses to all update operations, the result 
        of the AddRteGrpOfferRqstType operation is contained in the generic 
        spppUpdateResponse data structure described in an earlier sections 
        of this document.  For a detailed description of the 
        spppUpdateResponse data structure refer to that section of the 
        document.</t>
        
      </section>

      <section anchor="accrtegrpoff" title="Accept Route Group Offer Operation">
        <t> Not until access to a Route Group has been offered and
          accepted will the data recipient's organization ID will it be  
          included in the peeringOrg list in that Route Group object,
          and that Route Group's peering information become a
          candidate for inclusion in the responses to the resolution
          requests submitted by that data recipient.  The
          AcceptRteGrpOffersRqstType operation is called by, or on behalf
          of, the data recipient to accept a Route Group
          Offer that is pending in the "offered" status for the data
          recipient's organization ID. If a Route Group Offer for the
          given Route Group Offer key (route name, route registrant
          ID, data recipient's organization ID) exists, then the
          server moves the Route Group Offer to the "accepted" status
          and adds that data recipient's organization ID into the list
          of peerOrgIds for that Route Group. If a such a Route Group
          Offer does not exist, then the server returns the
          appropriate error code, 2105. The XSD declarations for the
          operation request object are as follows: </t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<complexType name="AcceptRteGrpOfferRqstType">
  <complexContent>
    <extension base="spppb:BasicRqstType">
      <sequence>
        <element name="rteGrpOfferKey" type="spppb:RteGrpOfferKeyType"/>
      </sequence>
    </extension>
  </complexContent>
</complexType>
                        ]]>
            </artwork>
          </figure>
        </t>

        <t>The element passed into the spppUpdateRequest element for this
          operation is an instance of AcceptRteGrpOffersRqstType, which extends
          BasicRqstType and contains a RteGrpOfferKeyType object.</t>

        <t>As with the responses to all update operations, the result 
        of the AcceptRteGrpOfferRqstType operation is contained in the generic 
        spppUpdateResponse data structure described in an earlier sections 
        of this document.  For a detailed description of the 
        spppUpdateResponse data structure refer to that section of the 
        document.</t>

      </section>

      <section anchor="rejrtegrpoff" title="Reject Route Group Offer Operation">
        <t> The data recipient to which a Route Group has been offered has 
          the option of rejecting a Route Group Offer.  Furthermore, that 
          offer may be rejected, regardless of whether or not it has been
          previously accepted.  The RejectRteGrpOffersRqstType operation is used
          for these purposes and is called by, or on behalf of, the data
          recipient to accept a Route Group Offer that is
          pending in the "offered" status or is in the "accepted" status for
          the data recipient's organization ID. If a Route Group Offer
          for the given Route Group Offer key (route name, route
          registrant ID, data recipient's organization ID) exists in
          either the offered or accepted status, then the server
          deletes that Route Group Offer object, and, if appropriate,
          removes the data recipients organization ID from the list of
          peeringOrg IDs for that Route Group. If the Route Group Offer
          does not exist, then the server returns the appropriate
          error code, 2105. The XSD declarations for the operation
          request object are as follows: </t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<complexType name="RejectRteGrpOfferRqstType">
  <complexContent>
    <extension base="spppb:BasicRqstType">
      <sequence>
        <element name="rteGrpOfferKey" type="spppb:RteGrpOfferKeyType"/>
      </sequence>
    </extension>
  </complexContent>
</complexType>
                        ]]>
            </artwork>
          </figure>
        </t>

        <t>The element passed into the spppUpdateRequest element for this
          operation is an instance of RejectRteGrpOffersRqstType, which extends
          BasicRqstType and contains a RteGrpOfferKeyType object.</t>

        <t>As with the responses to all update operations, the result 
        of the RejectRteGrpOfferRqstType operation is contained in the generic 
        spppUpdateResponse data structure described in an earlier sections 
        of this document.  For a detailed description of the 
        spppUpdateResponse data structure refer to that section of the 
        document.</t>

      </section>

      <section anchor="getrtegrpoff" title="Get Route Group Offers Operation">
        <t> The getRteGrpOffersRqst operation allows a client to get
          the properties of zero or more Route Group Offer objects
          that registrar is authorized to view. The server will
          attempt to find Route Group Offer objects that have all the
          properties specified in the criteria passed into the
          operation. If no criteria is passed in then the server will
          return the list of Route Group Offer objects that the
          querying client has the authority to view. If there are no
          matching Route Group Offers found then an empty result set
          will be returned. </t>
        <t> The element passed into the spppQueryRequest element for this
          operation is an instance of GetRteGrpOffersRqstType, which extends
          BasicQueryRqstType and contains the criteria that the
          returned Route Group Offer objects must match. Any limitation
          on the maximum number of objects that may be 
          returned by this operation is a policy decision and not
          limited by the protocol. The XSD declaration of the
          operation is as follows: </t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="GetRteGrpOffersRqstType">
    <complexContent>
      <extension base="spppb:BasicQueryRqstType">
        <sequence>
          <element name="offeredBy" type="spppb:OrgIdType"
            minOccurs="0" maxOccurs="unbounded"/>
          <element name="offeredTo" type="spppb:OrgIdType"
            minOccurs="0" maxOccurs="unbounded"/>
          <element name="status" type="spppb:RteGrpOfferStatusType"
            minOccurs="0"/>
          <element name="rteGrpOfferKey"
            type="spppb:RteGrpOfferKeyType" minOccurs="0"
            maxOccurs="unbounded"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
                        ]]>
            </artwork>
          </figure>
        </t>

        <t>The GetRteGrpOffersRqstType object is composed of the
          following elements: <list style="symbols" hangIndent="5">
            <t> offeredBy: Zero or more organization IDs. Only offers
              that are offered to the organization IDs
              in this list should be included in the result set. The
              result set is also subject to other query criteria in
              the request.
            </t>
            <t> offeredTo: Zero or more organization IDs. Only offers
              that are offered by the organization IDs
              in this list should be included in the result set. The
              result set is also subject to other query criteria in
              the request.
            </t>
            <t> status: The status of the offer, offered or accepted.
              Only offers in the specified status should be included
              in the result set. If this element is not present then
              the status of the offer should not be considered in the
              query. The result set is also subject to other query
              criteria in the request. </t>
            <t> rteGrpOfferKey: Zero or more Route Group Offer Keys.
              Only offers having one of these keys should be included
              in the result set. The result set is also subject to
              other query criteria in the request. </t>
          </list>
        </t>

        <t>As described in an earlier section of this document, the result 
        of any spppQueryRequest operation is an spppQueryResponse element 
        that contains the overall response code and the query result set, if
        any.  Refer to that section of the document for a detailed description 
        of the spppQueryResponse element.</t>

      </section>
      
      <section anchor="pubIdsOper" title="Public Identifier Operations">

        <t>Public Identifier is the search key used for locating the session establishment data (SED). In many cases, a Public Identifier is attributed to the end user who has a retail relationship with the service provider or registrant organization. In SPPP, SED can be provisioned by the registrant, or by the registrar on behalf of the registrant. Also, SPPP supports the notion of the carrier-of-record as defined in RFC 5067. Therefore, the entity adding the Public Identity in the Registry can optionally claim to be a carrier-of-record.</t>

        <t>SPPP identifies three types of Public Identifiers: telephone number (TN), and the routing number (RN). SPPP provides structures to manage a single TN, a contiguous range of TNs, and a TN prefix. </t>

        <t>The XML schema type definition PubIDType is the generalization of the Public Identifier. PubIDType is an abstract type. In agreement with the data model, PubIDType member 'dgName' represents the name of the destination group that a given Public Identifier is associated to. The PubIDType object structure is defined as follows:</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="PubIdType" abstract="true">
    <complexContent>
     <extension base="spppb:BasicObjType">
       <sequence>
         <element name="dgName" type="spppb:ObjNameType" minOccurs="0"/>
       </sequence>
     </extension>
    </complexContent>
  </complexType>
              ]]> 
           </artwork>
          </figure>
        </t>

          <t>A registrant can add a Public Identifier with the help of a BasicRqstType called AddPubIdRqstType. To complete the add request, AddPubIdRqstType XML instance is added to &lt;spppUpdateRequest&gt; root element. If there is a conflict and a Public Identifier already exists in the Registry, the old entry will be replaced with the newly provisioned entry. For the add or update operation, the destination group name is a mandatory parameter. Not including a valid destination group name in the update request will cause the Registry to return an appropriate error.</t>

          <t>Telephone number is identified by TNType, an extension of PubIDType. Schema definition of TNType is as follows: </t>

          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
  <complexType name="TNType">
    <complexContent>
      <extension base="spppb:PubIdType">
        <sequence>
          <element name="tn" type="string"/>
          <element name="rrRef" type="spppb:RteRecRefType" 
             minOccurs="0" maxOccurs="unbounded"/>
          <element name="corInfo" type="spppb:CORInfoType" 
             minOccurs="0"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
              ]]> 
              </artwork>
            </figure>
          </t>          

          <t>TNType consists of the following attributes:
            <list style="symbols" hangIndent="5">
              <t>tn: Telephone number to be added to the Registry.</t>
              <t>rrRef: Optional reference to the route record that is directly associated with the TN Public Identifier. Following the SPPP data model, the route record could be a protocol agnostic URIType or another type.</t>
              <t>corInfo: corInfo is an optional parameter of type CORInfoType that allows the registrant organization to set forth a claim to be the carrier-of-record [see RFC 5067]. This is done by setting the value of &lt;corClaim&gt; element of the CORInfoType object structure to &quot;true&quot;. The other two parameters of the CORInfoType, &lt;cor&gt; and &lt;corDate&gt; are set by the Registry to describe the outcome of the carrier-of-record claim by the registrant. In general, inclusion of &lt;corInfo&gt; parameter is useful if the Registry has the authority information, such as, the number portability data, etc., in order to qualify whether the registrant claim can be satisfied. If the carrier-of-record claim disagrees with the authority data in the Registry, whether the TN add operation fails or not is a matter of policy and it is beyond the scope of this document. In the response message &lt;spppUpdateResponse&gt;, the SPPP Server must include the &lt;cor&gt; parameter of the &lt;corInfo&gt; element to let the registrant know the outcome of the claim.</t>
            </list>
          </t>

          <t>Routing number is identified by RNType. SSPs that possess the number portability data may be able to leverage the RN search key to discover the ingress routes for session establishment. Therefore, the registrant organization can add the RN and associate it with the appropriate destination group to share the route information. RNType is defined as follows:</t>

          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
  <complexType name="RNType">
    <complexContent>
      <extension base="spppb:PubIdType">
        <sequence>
          <element name="rn" type="string" default="true"/>
          <element name="corInfo" type="spppb:CORInfoType" 
               minOccurs="0"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
                ]]> 
              </artwork>
            </figure>
          </t>

          <t>RNType has the following attributes:
          <list style="symbols" hangIndent="5">
            <t>rn: Routing Number used as the search key</t>
            <t>corInfo: Optional &lt;corInfo&gt; element of type CORInfoType.</t>
          </list>
          </t>


          <t>TNRType structure is used to add contiguous range of TNs. The object definition requires a starting TN and the ending TN that describes the TN range. In addition, TNRType includes an optional &quot;prefix&quot; attribute to indicate that the given TN range qualifies for the Open Number Plan (ONP). In order for the resolution server to correctly respond to the queries for TNs in the TNRType object, the Registry and/or the resolution server will need the national significant number length data for the TN blocks included in the TNRType object. Further, &lt;spppUpdateRequest&gt; is transactional in nature, therefore, if the Registry encounters an error in adding even a single TN that is included in the TNRType object, the whole request will be deemed a failure. In other words, the partial success case is not supported. TNPType object structure is as follows:</t>

          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
  <complexType name="TNRType">
    <complexContent>
      <extension base="spppb:PubIdType">
        <sequence>
          <element name="startTn" type="string"/>
          <element name="endTn" type="string"/>
          <element name="corInfo" type="spppb:CORInfoType" 
              minOccurs="0"/>
        </sequence>
        <attribute name="prefix" type="boolean" default="false">
           </attribute>
      </extension>
    </complexContent>
  </complexType>
              ]]> 
              </artwork>
            </figure>
          </t>          

          <t>TNRType has the following attributes:
            <list style="symbols" hangIndent="5">
              <t>startTn: Starting TN in the TN range</t>
              <t>endTn: The last TN in the TN range</t>
              <t>corInfo: Optional &lt;corInfo&gt; element of type CORInfoType</t>
              <t>prefix: Optional attribute, when set to &quot;true&quot;, indicates that the Open Number Plan applies to a given TN Range</t>
            </list>
          </t>

          <t>In some cases, it is useful to describe a set of TNs with the help of the first few digits of the telephone number, also referred to as the telephone number prefix or a block. In SPPP, the TNPType structure is reserved for use of TN prefix as defined below:</t>

          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
  <complexType name="TNPType">
    <complexContent>
      <extension base="spppb:PubIdType">
        <sequence>
          <element name="tnPrefix" type="string"/>
          <element name="corInfo" type="spppb:CORInfoType" 
            minOccurs="0"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
              ]]> 
              </artwork>
            </figure>
          </t>          

          <t>TNPType consists of the following attributes:

            <list style="symbols" hangIndent="5">
              <t>tnPrefix: The telephone number prefix</t>
              <t>corInfo: Optional &lt;corInfo&gt; element of type CORInfoType.</t>
            </list>
          </t>


          <t>The object structure of AddPubIdRqstType used to add Public Identifiers is as follows</t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
  <complexType name="AddPubIdRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="pi" type="spppb:PubIdType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
                        ]]>
              </artwork>
            </figure>
          </t>

          <t>The SPPP client can use the GetPubIdsRqstType in the &lt;spppQueryRequest&gt; structure to obtain information about one or more valid &lt;pi&gt; objects. If the GetPubIdsRqstType object does not include &lt;pi&gt; data, then all applicable Public Identity data will be returned in the response message. If no matching Public Identifiers are found, then an empty result set is returned.</t>

          <t>GetPubIdsRqstType object structure is as follows:</t>

          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
  <complexType name="GetPubIdsRqstType">
    <complexContent>
      <extension base="spppb:BasicQueryRqstType">
        <sequence>
          <element name="pi" type="spppb:PubIdType" minOccurs="0"
            maxOccurs="unbounded"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
                          ]]>
              </artwork>
            </figure>
          </t>

        <t>As described earlier in the document, the result 
        of any spppQueryRequest operation is a spppQueryResponse 
        that contains the response code and the query result set, if
        any.</t>

      </section>

      <section anchor="egressRteOper" title="Egress Route Operations">

<t>In a high-availability environment, the originating SSP likely has more than one egress paths to the ingress SBE of the target SSP.  If the originating SSP wants to exercise greater control and choose a specific egress SBE to be associated to the target ingress SBE, it can do so using the AddEgrRteRqstType object.</t>

<t>Lets assume that the target SSP has offered to share one or more ingress route information and that the originating SSP has accepted the offer. In order to add the egress route to the Registry, the originating SSP uses a valid regular expression to rewrite ingress route in order to include the egress SBE information. Also, more than one egress route can be associated with a given ingress route in support of fault-tolerant configurations. The supporting SPPP protocol structure provides a way to include route precedence information to help manage traffic to more than one outbound egress SBE.</t>

        <t>An egress route is identified by type EgrRteType and its object structure is shown below: </t>
        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="EgrRteType">
    <complexContent>
     <extension base="spppb:BasicObjType">
       <sequence>
         <element name="egrRteName" type="spppb:ObjNameType"/>
         <element name="pref" type="unsignedShort"/>
         <element name="regxRewriteRule" type="spppb:RegexParamType"/>
         <element name="ingrRteRec" type="spppb:ObjKeyType" 
            minOccurs="0" maxOccurs="unbounded"/>
         <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
       </sequence>
     </extension>
    </complexContent>
  </complexType>
  ]]>
            </artwork>
          </figure>
        </t>

        <t>The EgrRteType object is composed of the following
          elements: <list style="symbols" hangIndent="5">
            <t> base: All first class objects extend 
              BasicObjType which contains the ID of the 
              registrant organization that owns this object, the ID 
              of the registrar organization that provisioned this 
              object, the date and time that the object was created 
              by the server, and the date and time that the object 
              was last modified. If the client passes in either the 
              created date or the modification date, the server will  
              ignore them.  The server sets these two date/time values.</t>
            <t> egrRteName: The name of the egress route. </t>
            <t> pref: The preference of this egress route relative to other
              egress routes that may get selected when responding to a 
              resolution request.</t>
            <t> regxRewriteRule: The regular expression re-write rule
              that should be applied to the regular expression of the
              ingress NAPTR(s) that belong to the ingress route.</t>
            <t> ingrRteRec: The ingress route records that the
              egress route should be used for. </t>
            <t> ext: Point of extensibility described in a previous
              section of this document. </t>
          </list>
        </t>

        <t> The AddEgrRteRqstType request is used to create or overwrite
          an egress route. </t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="AddEgrRteRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="egrRte" type="spppb:EgrRteType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
              ]]>
            </artwork>
          </figure>
        </t>

          <t> An instance of AddEgrRtesRqstType is added in the spppUpdateRequest 
            element in order to send a valid request to the server. Any
            limitation on the maximum number of AddEgrRteRqstType instances 
            is a matter of policy and is not limited by the specification. </t>

          <t> The response from the server is returned in
            addEgrRteRspns element, which is defined as the element
            of type BasicRspnsType. </t>

          <t> The GetEgrRtesRqstType is used by an authorized entity to
            fetch the well-known egress route data. </t>

          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
  <complexType name="GetEgrRtesRqstType">
    <complexContent>
      <extension base="spppb:BasicQueryRqstType">
        <sequence>
          <element name="objKey" type="spppb:ObjKeyType"
            minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
                 ]]>
              </artwork>
            </figure>
          </t>

      </section>

      <section anchor="addrterec" title="Add Route Record Operation">
        <t> As described in the introductory sections, a Route Group
          represents a combined grouping of Route Records that define
          route information. However, Route Records need not be created to 
          just serve a single Route Group.  Route Records can be created 
          and managed to serve multiple Route Groups.  As a result, a change 
          to the properties of a network node, for example, that is used for 
          multiple routes, would necessitate just a single update operation 
          to change the properties of that node.  The change would then be 
          reflected in all the Route Groups whose route record set contains 
          a reference to that node. </t>
        <t> The AddRteRecRqstType operation creates or overwrites a Route 
          Record object. If a Route Record with the given
          name and registrant ID (which together comprise the unique key
          or a Route Record) does not exist, then the server MUST
          create the Route Record. If a Route Record with the given name
          and registrant ID does exist, then the server MUST replace the
          current properties of the Route Record with the properties
          passed into the AddRteRecRqstType operation. The XSD
          declarations of the AddRteRecRqstType operation request object 
          are as follows: </t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="AddRteRecRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="rteRec" type="spppb:RteRecType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
                        ]]>
            </artwork>
          </figure>
        </t>

        <t> The element passed into the spppUpdateRequest element for this
          operation is an instance of AddRteRecRqstType, which extends 
          BasicRqstType and contains one RteRecType object. The RteRecType 
          object structure is defined as follows: </t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="RteRecType" abstract="true">
    <complexContent>
      <extension base="spppb:BasicObjType">
         <sequence>
           <element name="rrName" type="spppb:ObjNameType"/>
           <element name="priority" type="unsignedShort" minOccurs="0"/>
         </sequence>
      </extension>
    </complexContent>
  </complexType>
                        ]]>
            </artwork>
          </figure>
        </t>

        <t>The RteRecType object is composed of the following
          elements: <list style="symbols" hangIndent="5">
            <t> base: All first class objects extend 
              BasicObjType which contains the ID of the 
              registrant organization that owns this object, the ID 
              of the registrar organization that provisioned this 
              object, the date and time that the object was created 
              by the server, and the date and time that the object 
              was last modified. If the client passes in either the 
              created date or the modification date, the server will  
              ignore them.  The server sets these two date/time values.</t>
            <t> rrName: The character string that contains the
              name of the Route Record. It uniquely identifies this
              object within the context of the registrant ID (a child
              element of the base element as described above). </t>
            <t> priority: Zero or one priority value that can be used 
              to provide a relative value weighting of one Route Record 
              over another.  The manner in which this value is used, 
              perhaps in conjunction with other factors, is a matter of 
              policy.</t>
            <t> ext: Point of extensibility described in a previous
              section of this document. </t>
          </list>
        </t>

        <t> As described above, route records are based on an
          abstract type: RteRecType. The concrete types that use
          RteRecType as an extension base are NAPTRType, NSType, and
          URIType. The definitions of these types are included below.
          The NAPTRType object is comprised of the data elements
          necessary for a NAPTR that contains routing information for a
          Route Group. The NSType object is comprised of the data
          elements necessary for a Name Server that points to another
          DNS server that contains the desired routing information.
          The URIType object is comprised of the data elements
          necessary to house a URI. </t>

        <t> The data provisioned in a Registry can be leveraged for
          many purposes and queried using various protocols including
          SIP, ENUM and others. It is for this reason that a route
          record type offers a choice of URI and DNS resource record
          types. URIType fulfills the need for both SIP and ENUM protocols. When a given URIType is associated to a destination group, the user part of the replacement string &lt;uri&gt; that may require the Public Identifier cannot be preset. As a SIP Redirect, the resolution server will apply &lt;ere&gt; pattern on the input Public Identifier in the query and process the replacement string by substituting any back reference(s) in the &lt;uri&gt; to arrive at the final URI that is returned in the SIP Contact header. For an ENUM query, the resolution server will simply return the value of the &lt;ere&gt; and &lt;uri&gt; members of the URIType in the NAPTR REGEX parameter.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="RteRecType" abstract="true">
    <sequence>
      <element name="rrName" type="spppb:ObjNameType"/>
      <element name="priority" type="unsignedShort"/>
    </sequence>
  </complexType>
  <complexType name="NAPTRType">
    <complexContent>
      <extension base="spppb:RteRecType">
        <sequence>
          <element name="order" type="unsignedShort"/>
          <element name="flags" type="string" minOccurs="0"/>
          <element name="svcs" type="string"/>
          <element name="regx" type="spppb:RegexParamType"
            minOccurs="0"/>
          <element name="repl" type="string" minOccurs="0"/>
          <element name="ttl" type="positiveInteger" minOccurs="0"/>
          <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  
  <complexType name="NSType">
    <complexContent>
      <extension base="spppb:RteRecType">
        <sequence>
          <element name="hostName" type="string"/>
          <element name="ipAddr" type="spppb:IPAddrType" minOccurs="0"
            maxOccurs="unbounded"/>
          <element name="ttl" type="positiveInteger" minOccurs="0"/>
          <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  
  <complexType name="URIType">
    <complexContent>
      <extension base="spppb:RteRecType">
        <sequence>
          <element name="ere" type="string" default="^(.*)$"/>
          <element name="uri" type="string"/>
          <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>

  <complexType name="IPAddrType">
    <sequence>
      <element name="addr" type="string"/>
      <element name="type" type="spppb:IPType"/>
      <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
    </sequence>
  </complexType>
  
  <simpleType name="IPType">
    <restriction base="token">
      <enumeration value="IPv4"/>
      <enumeration value="IPv6"/>
    </restriction>
  </simpleType>

                        ]]>
            </artwork>
          </figure>
        </t>

        <t>The NAPTRType object is composed of the following elements:
            <list style="symbols" hangIndent="5">
            <t> order: Order value in an ENUM NAPTR, relative to other
              NAPTRType objects in the same Route Group. </t>
            <t> svcs: ENUM service(s) that are served by the SBE. This
              field's value must be of the form specified in <xref target="RFC3761"/>
              (e.g., E2U+pstn:sip+sip). The allowable values are a
              matter of policy and not limited by this protocol. </t>
            <t> regx: NAPTR’s regular expression field. If this is not
              included then the Repl field must be included. </t>
            <t> repl: NAPTR replacement field, should only be provided
              if the Regex field is not provided, otherwise it will be
              ignored by the server. </t>
            <t> ttl: Number of seconds that an addressing server may
              cache this NAPTR. </t>
            <t> ext: Point of extensibility described in a previous
              section of this document. </t>
          </list>
        </t>

        <t>The NSType object is composed of the following elements:
            <list style="symbols" hangIndent="5">
            <t> hostName: Fully qualified host name of the name
              server. </t>
            <t> ipAddr: Zero or more objects of type IpAddrType. Each
              object holds an IP Address and the IP Address type, IPv4
              or IP v6. </t>
            <t> ttl: Number of seconds that an addressing server may
              cache this Name Server. </t>
            <t> ext: Point of extensibility described in a previous
              section of this document. </t> </list>
        </t>

        <t>The URIType object is composed of the following elements:
            <list style="symbols" hangIndent="5">
            <t>ere: The POSIX Extended Regular Expression (ere) as
              defined in <xref target="RFC3986"/>. 
            </t>
            <t>uri: the URI as defined in <xref target="RFC3986"/>. In some cases, this will serve as the replacement string and it will be left to the resolution server to arrive at the final usable URI.
            </t>
          </list>
        </t>

        <t>As with the responses to all update operations, the result 
        of the AddRteRecRqstType operation is contained in the generic 
        spppUpdateResponse data structure described in an earlier sections 
        of this document.  For a detailed description of the 
        spppUpdateResponse data structure refer to that section of the 
        document.</t>

      </section>

      <section anchor="getrterecs" title="Get Route Records Operation">
        <t> The getRteRecsRqst operation allows a client to get the
          properties of Route Record objects that a registrar
          organization is authorized to view. The server will attempt
          to find a Route Record object that has the registrant ID and
          route record name pair contained in each ObjKeyType object
          instance. If the set of ObjKeyType objects is empty then the
          server will return the list of Route Record objects that the
          querying client has the authority to view. If there are no
          matching Route Record found then an empty result set will be
          returned. </t>
        <t> The element passed into the spppQueryRequest element for this
          operation is an instance of type GetRteRecsRqstType, which 
          extends BasicRqstType and contains zero or more ObjKeyType 
          objects. Any limitation on the maximum number of objects that 
          may be passed into or returned by this operation is a policy 
          decision and not limited by the protocol. The XSD declaration 
          of the operation is as follows: </t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <complexType name="GetRteRecsRqstType">
    <complexContent>
      <extension base="spppb:BasicQueryRqstType">
        <sequence>
          <element name="objKey" type="spppb:ObjKeyType"
            minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
                        ]]>
            </artwork>
          </figure>
        </t>

        <t>As described in an earlier section of this document, the result 
        of any spppQueryRequest operation is an spppQueryResponse element 
        that contains the overall response code and the query result set, if
        any.  Refer to that section of the document for a detailed description 
        of the spppQueryResponse element.</t>

      </section>

      <section anchor="delete_oper" title="Delete Operation">

          <t>In order to remove an object from the Registry, an authorized entity can send the &lt;spppUpdateRequest&gt; to the Registry with a corresponding delete BasicRqstType object. If the entity that issued the command is not authorized to perform this operation or if the public identifier doesn't exist, an appropriate error code will be returned in the &lt;spppUpdateRespnonse&gt; message. </t>

          <t>As an example, DelPubIdRqstType aids in identifying the Public Identifier that is used to delete a Public Identifier from the Registry. DelPubIdsRqstType object definition is shown below: </t>

          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
  <complexType name="DelPubIdRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="pi" type="spppb:PubIdType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
                          ]]>
              </artwork>
            </figure>
          </t>

          <t>Similarly, each 'Add' operation in the SP protocol has a corresponding 'Del' operation used to delete the respective object type from the Registry.</t>

      </section>

    </section>

    <section anchor="examples" title="SPPP Examples">
      <t>This section shows XML message exchange between two SIP Service Providers (SSP) and a Registry. For the sake of simplicity, the transport wrapper for the SPPP protocol is left out. The SPPP protocol messages in this section are valid XML instances that conform to the SPPP schema version within this document.</t>

      <t>In this sample use case scenario, SSP1 and SSP2 provision resource data in the registry and use SPPP constructs to selectively share the route groups. In the figure below, SSP2 has two ingress SBE instances that are associated with the public identities that SSP2 has the retail relationship with. Also, the two SBE instances for SSP1 are used to show how to use SPPP protocol to associate route preferences for the destination ingress routes and exercise greater control on outbound traffic to the peer's ingress SBEs.</t>

      <t>
        <figure title="">
          <artwork align="left">
            <![CDATA[
   ---------------+                      +------------------
                  |                      |            
              +------+               +------+
              | sbe1 |               | sbe2 |
              +------+               +------+
    SSP1          |                      |           SSP2
              +------+               +------+
              | sbe3 |               | sbe4 |
              +------+               +------+
   iana-en:111    |                      |     iana-en:222
   ---------------+                      +------------------
           |                                     |
           |                                     |
           | SPPP   +------------------+   SPPP  |
           +------->|     Registry     |<--------+
                    +------------------+
                        ]]>
            </artwork>
          </figure>
        </t>

      <section anchor="add_destgrp" title="Add Destination Group">
        <t>SSP2 adds a destination group to the Registry for use later. The SSP2 SPPP client sets a unique transaction identifier 'tx_7777' for tracking purposes. The name of the destination group is set to DEST_GRP_SSP2_1</t>
        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
   <?xml version="1.0" encoding="UTF-8"?>
   <spppUpdateRequest 
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd"
    xmlns="urn:ietf:params:xml:ns:sppp:base:1">
     <clientTransId>txid-5555</clientTransId>
     <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
       xsi:type="ns1:AddDestGrpRqstType">
       <destGrp>
         <ns1:rant>iana-en:222</ns1:rant>
         <ns1:rar>iana-en:222</ns1:rar>
         <dgName>DEST_GRP_SSP2_1</dgName>
       </destGrp>
     </rqst>
   </spppUpdateRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry processes the request and return a favorable response confirming successful creation of the named destination group. Also, besides returning a unique transaction identifier, Registry also returns the matching client transaction identifier from the request message back to the SPPP client.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
   <?xml version="1.0" encoding="UTF-8"?>
   <spppUpdateResponse 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd"
    xmlns="urn:ietf:params:xml:ns:sppp:base:1">
     <clientTransId>tx_5555</clientTransId>
     <serverTransId>tx_id_12346</serverTransId>
     <overallResult>
       <code>1000</code>
       <msg>success</msg>
     </overallResult>
   </spppUpdateResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_rterecs" title="Add Route Records">

        <t>SSP2 adds an ingress routes in the Registry.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <?xml version="1.0" encoding="UTF-8"?>
  <spppUpdateRequest
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd"
    xmlns="urn:ietf:params:xml:ns:sppp:base:1">
    <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
      xsi:type="ns1:AddRteRecRqstType">
      <rteRec xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
        xsi:type="ns1:NAPTRType">
        <rant>iana-en:222</rant>
        <rar>iana-en:222</rar>
        <ns1:rrName>RTE_SSP2_SBE2</ns1:rrName>
        <order>10</order>
        <flags>u</flags>
        <svcs>E2U+sip</svcs>
        <regx>
          <ere>^(.*)$</ere>
          <repl>sip:\1@sbe2.ssp2.example.com</repl>
        </regx>
      </rteRec>
    </rqst>
  </spppUpdateRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry returns a success response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <?xml version="1.0" encoding="UTF-8"?>
  <spppUpdateResponse
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd"
    xmlns="urn:ietf:params:xml:ns:sppp:base:1">
    <serverTransId>tx_id_11145</serverTransId>
    <overallResult>
      <code>1000</code>
      <msg>Request successful</msg>
    </overallResult>
  </spppUpdateResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_rterecs_uritype" title="Add Route Records -- URIType">

        <t>SSP2 adds another ingress routes in the Registry and makes use of URIType</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateRequest>
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd"
  xmlns="urn:ietf:params:xml:ns:sppp:base:1">
  <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:AddRteRecRqstType">
    <rteRec xsi:type="ns1:URIType">
      <rant>iana-en:222</rant>
      <rar>iana-en:222</rar>
      <rrName>RTE_SSP2_SBE4</rrName>
      <ere>^(.*)$</ere>
      <uri>sip:\1;npdi@sbe4.ssp2.example.com</uri>
    </rteRec>
  </rqst>
</spppUpdateRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The Registry returns a success response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <?xml version="1.0" encoding="UTF-8"?>
  <spppUpdateResponse
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd"
    xmlns="urn:ietf:params:xml:ns:sppp:base:1">
    <serverTransId>tx_id_11145</serverTransId>
    <overallResult>
      <code>1000</code>
      <msg>Request successful</msg>
    </overallResult>
  </spppUpdateResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_rtegrp" title="Add Route Group">
        <t>SSP2 creates the grouping of the ingress routes and choses higher precedence for RTE_SSP2_SBE2 by setting a lower number for the &quot;priority&quot; attribute, a protocol agnostic precedence indicator.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <?xml version="1.0" encoding="UTF-8"?>
  <spppUpdateRequest
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd"
    xmlns="urn:ietf:params:xml:ns:sppp:base:1">
    <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
      xsi:type="ns1:AddRteGrpRqstType">
      <rteGrp>
        <rant>iana-en:222</rant>
        <rar>iana-en:222</rar>
        <rgName>RTE_GRP_SSP2_1</rgName>
        <rrRef>
          <rrKey>
            <rant>iana-en:222</rant>
            <name>RTE_SSP2_SBE2</name>
          </rrKey>
          <priority>100</priority>
        </rrRef>
        <dgName>DEST_GRP_SSP2_1</dgName>
        <isInSvc>true</isInSvc>
        <ns1:priority>10</ns1:priority>
      </rteGrp>
    </rqst>
  </spppUpdateRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>To confirm successful processing of this request, Registry returns a well-known resolution code '1000' to the SSP2 client.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <?xml version="1.0" encoding="UTF-8"?>
  <spppUpdateResponse
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd"
    xmlns="urn:ietf:params:xml:ns:sppp:base:1">
    <serverTransId>tx_id_12345</serverTransId>
    <overallResult>
      <code>1000</code>
      <msg>Request successful</msg>
    </overallResult>
  </spppUpdateResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_pi_corclaim" title="Add Public Identity -- Successful COR claim">
        
        <t>SSP2 activates a TN public identity by associating it with a valid destination group. Further, SSP2 puts forth a claim that it is the carrier-of-record for the TN.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <?xml version="1.0" encoding="UTF-8"?>
  <spppUpdateRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
    <clientTransId>txid-5577</clientTransId>
    <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
      xsi:type="ns1:AddPubIdRqstType">
      <pi xsi:type="ns1:TNType">
        <rant>iana-en:222</rant>
        <rar>iana-en:222</rar>
        <cDate>2010-05-30T09:30:10Z</cDate>
        <dgName>DEST_GRP_SSP2_1</dgName>
        <tn>+12025556666</tn>
        <corInfo>
          <corClaim>true</corClaim>
        </corInfo>
      </pi>
    </rqst>
  </spppUpdateRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Assuming that the Registry has access to TN authority data and it performs the required checks to verify that SSP2 is in fact the service provider of record for the given TN, the request is processed successfully. In the response message, the Registry sets the value of &lt;cor&gt; to &quot;true&quot; in order to confirm SSP2 claim as the carrier of record and the &lt;corDate&gt; reflects the time when the carrier of record claim is processed.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <?xml version="1.0" encoding="UTF-8"?>
  <spppUpdateResponse 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd"
    xmlns="urn:ietf:params:xml:ns:sppp:base:1">
    <clientTransId>txid-5577</clientTransId>
    <serverTransId>tx_id_12345</serverTransId>
    <overallResult>
      <code>1000</code>
      <msg>success</msg>
    </overallResult>
    <rqstObjResult>
      <code>1000</code>
      <msg>success</msg>
      <rqstObj xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
        xsi:type="ns1:AddPubIdRqstType">
        <pi xsi:type="ns1:TNType">
          <rant>iana-en:222</rant>
          <rar>iana-en:222</rar>
          <cDate>2010-05-30T09:30:10Z</cDate>
          <dgName>DEST_GRP_SSP2_1</dgName>
          <tn>+12025556666</tn>
          <corInfo>
            <corClaim>true</corClaim>
            <cor>true</cor>
            <corDate>2010-05-30T09:30:11Z</corDate>
          </corInfo>
        </pi>
      </rqstObj>
    </rqstObjResult>
  </spppUpdateResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_lrn" title="Add LRN">

        <t>If another entity that SSP2 shares the routes with has access to Number Portability data, it may choose to perform route lookups by routing number. Therefore, SSP2 associates a routing number to a destination group in order to facilitate ingress route discovery.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <?xml version="1.0" encoding="UTF-8"?>
  <spppUpdateRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
    <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
      xsi:type="ns1:AddPubIdRqstType">
      <pi xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
        xsi:type="ns1:RNType">
        <rant>iana-en:222</rant>
        <rar>iana-en:222</rar>
        <ns1:dgName>DEST_GRP_SSP2_1</ns1:dgName>
        <rn>2025550000</rn>
      </pi>
    </rqst>
  </spppUpdateRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response to the SPPP client.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
  <?xml version="1.0" encoding="UTF-8"?>
  <spppUpdateResponse 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd"
    xmlns="urn:ietf:params:xml:ns:sppp:base:1">  
    <serverTransId>tx_id_12345</serverTransId>
    <overallResult>
      <code>1000</code>
      <msg>Request successful</msg>
    </overallResult>
  </spppUpdateResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_tn_range" title="Add TN Range">
      
        <t>Next, SSP2 activates a block of ten thousand TNs and associate it to a destination group. Since the 'prefix' public identity attribute is not set to 'true', this means that the TNs belong to a closed number plan.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:AddPubIdRqstType">
    <pi xsi:type="ns1:TNRType">
      <rant>iana-en:222</rant>
      <rar>iana-en:222</rar>
      <dgName>DEST_GRP_SSP2_1</dgName>
      <startTn>+12026660000</startTn>
      <endTn>+12026669999</endTn>
    </pi>
  </rqst>
</spppUpdateRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateResponse 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd"
  xmlns="urn:ietf:params:xml:ns:sppp:base:1">
  <serverTransId>tx_id_12244498</serverTransId>
  <overallResult>
    <code>1000</code>
    <msg>Request successful</msg>
  </overallResult>
</spppUpdateResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_tn_range_onp" title="Add TN Range with Open Number Plan support">

        <t>In this case, open number plan refers to TN length variance. Inclusion of "prefix" attribute of TNRType with its value set to true indicates that the start TN range identified by the &lt;tn&gt; element is not necessarily a subscriber number and the Registry will have to consult the number plan data for the respective country to know how to expand the number range. &lt;endTn&gt; attribute marks the end of the TN range.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:AddPubIdRqstType">
    <pi xsi:type="ns1:TNRType" prefix="true">
      <rant>iana-en:222</rant>
      <rar>iana-en:222</rar>
      <ns1:dgName>DEST_GRP_SSP2_1</ns1:dgName>
      <startTn>+4312315566</startTn>
      <endTn>+4312315567</endTn>
    </pi>
  </rqst>
</spppUpdateRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateResponse 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd"
  xmlns="urn:ietf:params:xml:ns:sppp:base:1">
  <serverTransId>tx_id_12255598</serverTransId>
  <overallResult>
    <code>1000</code>
    <msg>Request successful</msg>
  </overallResult>
</spppUpdateResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_tn_prefix" title="Add TN Prefix">
      
        <t>Next, SSP2 activates a block of ten thousand TNs using the TNPType structure and identifying a TN prefix.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:AddPubIdRqstType">
    <pi xsi:type="ns1:TNPType">
      <rant>iana-en:222</rant>
      <rar>iana-en:222</rar>
      <ns1:dgName>DEST_GRP_SSP2_1</ns1:dgName>
      <tnPrefix>+1202777</tnPrefix>
    </pi>
  </rqst>
</spppUpdateRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateResponse 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd"
  xmlns="urn:ietf:params:xml:ns:sppp:base:1">
  <serverTransId>tx_id_12387698</serverTransId>
  <overallResult>
    <code>1000</code>
    <msg>Request successful</msg>
  </overallResult>
</spppUpdateResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_rte_grp_offer" title="Enable Peering -- Route Group Offer">

        <t>In order for SSP1 to complete session establishment for a destination TN where the target subscriber has a retail relationship with SSP2, it first requires an asynchronous bi-directional handshake to show mutual consent. To start the process, SSP2 initiates the peering handshake by offering SSP1 access to its route group.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:AddRteGrpOfferRqstType">
    <rteGrpOffer>
      <rant>iana-en:222</rant>
      <rar>iana-en:222</rar>
      <rteGrpOfferKey>
        <rteGrpKey>
          <rant>iana-en:222</rant>
          <name>RTE_GRP_SSP2_1</name>
        </rteGrpKey>
        <offeredTo>iana-en:111</offeredTo>
      </rteGrpOfferKey>
      <status>offered</status>
      <offerDateTime>2006-05-04T18:13:51.0Z</offerDateTime>
    </rteGrpOffer>
  </rqst>
</spppUpdateRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and confirms that the SSP1 will now have the opportunity to weigh in on the offer and either accept or reject it. The Registry may employ out-of-band notification mechanisms for quicker updates to SSP1 so they can act faster, though this topic is beyond the scope of this document.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateResponse 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd"
  xmlns="urn:ietf:params:xml:ns:sppp:base:1">
  <serverTransId>tx_id_12277798</serverTransId>
  <overallResult>
    <code>1000</code>
    <msg>Request successful</msg>
  </overallResult>
</spppUpdateResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_rte_grp_offer_accept" title="Enable Peering -- Route Group Offer Accept">
        
        <t>SSP1 responds to the offer from SSP2 and agrees to have visibility to SSP2 ingress routes.</t>
        
        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:AcceptRteGrpOfferRqstType">
    <rteGrpOfferKey>
      <rteGrpKey>
        <rant>iana-en:222</rant>
        <name>RTE_GRP_SSP2_1</name>
      </rteGrpKey>
      <offeredTo>iana-en:111</offeredTo>
    </rteGrpOfferKey>
  </rqst>
</spppUpdateRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry confirms that the request has been processed successfully. From this point forward, if SSP1 looks up a public identity through the query resolution server, where the public identity is part of the destination group by way of "RTE_GRP_SSP2_1" route association, SSP2 ingress SBE information will be shared with SSP1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateResponse 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd"
  xmlns="urn:ietf:params:xml:ns:sppp:base:1">
  <serverTransId>tx_id_12333798</serverTransId>
  <overallResult>
    <code>1000</code>
    <msg>success</msg>
  </overallResult>
</spppUpdateResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_egress_rte" title="Add Egress Route">
        
        <t>SSP1 wants to prioritize all outbound traffic to routes associated with "RTE_GRP_SSP2_1" route group through "sbe1.ssp1.example.com".</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <clientTransId>tx_9000</clientTransId>
  <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:AddEgrRteRqstType">
    <egrRte>
      <rant>iana-en:111</rant>
      <rar/>
      <egrRteName>EGR_RTE_01</egrRteName>
      <pref>50</pref>
      <regxRewriteRule>
        <ere>^(.*@)(.*)$</ere>
        <repl>\1\2?route=sbe1.ssp1.example.com</repl>
      </regxRewriteRule>
      <ingrRteRec>
        <rant>iana-en:222</ns1:rant>
        <name>SSP2_RTE_REC_3</ns1:name>
      </ingrRteRec>
    </egrRte>
  </rqst>
</spppUpdateRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Since peering has already been established, the request to add the egress route has been successfully completed.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateResponse 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd"
  xmlns="urn:ietf:params:xml:ns:sppp:base:1">
  <clientTransId>tx_9000</clientTransId>
  <serverTransId>tx_id_12388898</serverTransId>
  <overallResult>
    <code>1000</code>
    <msg>Request successful</msg>
  </overallResult>
</spppUpdateResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="get_dest_grp" title="Get Destination Group">
        
        <t>SSP2 uses the 'GetDestGrpsRqstType' operation to tally the last provisioned record for destination group DEST_GRP_SSP2_1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppQueryRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:GetDestGrpsRqstType">
    <objKey>
      <rant>iana-en:222</rant>
      <name>DEST_GRP_SSP2_1</name>
    </objKey>
  </rqst>
</spppQueryRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppQueryResponse xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <overallResult>
    <code>1000</code>
    <msg>success</msg>
  </overallResult>
  <resultSet xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:DestGrpType">
    <rant>iana-en:222</rant>
    <rar>iana-en:222</rar>
    <dgName>DEST_GRP_SSP2_1</dgName>
  </resultSet>
</spppQueryResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_pub_id" title="Get Public Identity">
        
        <t>SSP2 obtains the last provisioned record associated with a given TN.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppQueryRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:GetPubIdsRqstType">
    <pi xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
      xsi:type="ns1:TNType">
      <rant>iana-en:222</rant>
      <rar>iana-en:222</rar>
      <tn>+12025556666</tn>
    </pi>
  </rqst>
</spppQueryRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppQueryResponse xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <overallResult>
    <code>1000</code>
    <msg>success</msg>
  </overallResult>
  <resultSet xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:TNType">
    <rant>iana-en:222</rant>
    <rar>iana-en:222</rar>
    <dgName>DEST_GRP_1</dgName>
    <tn>+12025556666</tn>
    <corInfo>
      <corClaim>true</corClaim>
      <cor>true</cor>
      <corDate>2010-05-30T09:30:10Z</corDate>
    </corInfo>
  </resultSet>
</spppQueryResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="get_rte_grp_request" title="Get Route Group Request">

        <t>SSP2 obtains the last provisioned record for the route group RTE_GRP_SSP2_1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppQueryRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:GetRteGrpsRqstType">
    <objKey>
      <rant>iana-en:222</rant>
      <name>RTE_GRP_SSP2_1</name>
    </objKey>
  </rqst>
</spppQueryRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>
        
        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppQueryResponse xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <overallResult>
    <code>1000</code>
    <msg>success</msg>
  </overallResult>
  <resultSet xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:RteGrpType">
    <rant>iana-en:222</rant>
    <rar>iana-en:222</rar>
    <rgName>RTE_GRP_SSP2_1</rgName>
    <rrRef>
      <rrKey>
        <rant>iana-en:222</rant>
        <name>RTE_SSP2_SBE2</name>
      </rrKey>
      <priority>100</priority>
    </rrRef>
    <rrRef>
      <rrKey>
        <rant>iana-en:222</rant>
        <name>RTE_SSP2_SBE4</name>
      </rrKey>
      <priority>101</priority>
    </rrRef>
    <dgName>DEST_GRP_SSP2_1</dgName>
    <isInSvc>true</isInSvc>
    <priority>10</priority>
  </resultSet>
</spppQueryResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="get_rte_grp_offers_rqst" title="Get Route Group Offers Request">

        <t>SSP2 fetches the last provisioned route group offer to the &lt;peeringOrg&gt; SSP1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppQueryRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:GetRteGrpOffersRqstType">
    <offeredTo>iana-en:111</offeredTo>
  </rqst>
</spppQueryRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry processes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppQueryResponse xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <overallResult>
    <code>1000</code>
    <msg>success</msg>
  </overallResult>
  <resultSet xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:RteGrpOfferType">
    <rant>iana-en:222</rant>
    <rar>iana-en:222</rar>
    <rteGrpOfferKey>
      <rteGrpKey>
        <rant>iana-en:222</rant>
        <name>RTE_GRP_SSP2_1</name>
      </rteGrpKey>
      <offeredTo>iana-en:111</offeredTo>
    </rteGrpOfferKey>
    <status>offered</status>
    <offerDateTime>2006-05-04T18:13:51.0Z</offerDateTime>
  </resultSet>
</spppQueryResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="get_egress_rte" title="Get Egress Route">

        <t>SSP1 wants to verify the last provisioned record for the egress route called EGR_RTE_01.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppQueryRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:GetEgrRtesRqstType">
    <objKey>
      <rant>iana-en:111</rant>
      <name>EGR_RTE_01</name>
    </objKey>
  </rqst>
</spppQueryRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppQueryResponse xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <overallResult>
    <code>1000</code>
    <msg>success</msg>
  </overallResult>
  <resultSet xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:EgrRteType">
    <rant>iana-en:111</rant>
    <rar>iana-en:111</rar>
    <egrRteName>EGR_RTE_01</egrRteName>
    <pref>50</pref>
    <svcs>E2U+sip</svcs>
    <regxRewriteRule>
      <ere>^(.*)$</ere>
      <repl>sip:\1@sbe1.ssp1.example.com</repl>
    </regxRewriteRule>
    <ingressRte>
      <rant>iana-en:222</rant>
      <name>RTE_GRP_SSP2_1</name>
    </ingressRte>
  </resultSet>
</spppQueryResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="del_dest_grp" title="Delete Destination Group">

        <t>SSP2 initiates a request to delete the destination group DEST_GRP_SSP2_1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:DelDestGrpRqstType">
    <objKey>
      <rant>iana-en:222</rant>
      <name>DEST_GRP_SSP2_1</name>
    </objKey>
  </rqst>
</spppUpdateRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateResponse xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <serverTransId>txid-982543123</serverTransId>
  <overallResult>
    <code>1000</code>
    <msg>Success</msg>
  </overallResult>
</spppUpdateResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="del_pub_id" title="Delete Public Identity">

        <t>SSP2 choses to de-activate the TN and remove it from the Registry.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:DelPubIdRqstType">
    <pi xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
      xsi:type="ns1:TNType">
      <rant>iana-en:222</rant>
      <rar>iana-en:222</rar>
      <tn>+12025556666</tn>
    </pi>
  </rqst>
</spppUpdateRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateResponse xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <serverTransId>txid-98298273123</serverTransId>
  <overallResult>
    <code>1000</code>
    <msg>success</msg>
  </overallResult>
</spppUpdateResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="del_rte_grp_rqst" title="Delete Route Group Request">

        <t>SSP2 removes the route group called RTE_GRP_SSP2_1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:DelRteGrpRqstType">
    <objKey>
      <rant>iana-en:222</rant>
      <name>RTE_GRP_SSP2_1</name>
    </objKey>
  </rqst>
</spppUpdateRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateResponse xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <serverTransId>txid-982543123</serverTransId>
  <overallResult>
    <code>1000</code>
    <msg>msg</msg>
  </overallResult>
</spppUpdateResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="del_rte_grp_offers_rqst" title="Delete Route Group Offers Request">

        <t>SSP2 no longer wants to share route group RTE_GRP_SSP2_1 with SSP1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:DelRteGrpOfferRqstType">
    <rteGrpOfferKey>
      <rteGrpKey>
        <rant>iana-en:222</rant>
        <name>RTE_GRP_SSP2_1</name>
      </rteGrpKey>
      <offeredTo>iana-en:111</offeredTo>
    </rteGrpOfferKey>
  </rqst>
</spppUpdateRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response. Restoring this resource sharing will require a new route group offer from SSP2 to SSP1 followed by a successful route group accept request from SSP1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateResponse xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <serverTransId>txid-982543123</serverTransId>
  <overallResult>
    <code>1000</code>
    <msg>Success</msg>
  </overallResult>
</spppUpdateResponse>
              ]]>
            </artwork>
          </figure>
        </t>

        </section>

        <section anchor="del_egress_rte" title="Delete Egress Route">
          
          <t>SSP1 decides to remove the egress route with the label EGR_RTE_01.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateRequest xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <rqst xmlns:ns1="urn:ietf:params:xml:ns:sppp:base:1"
    xsi:type="ns1:DelEgrRteRqstType">
    <objKey>
      <rant>iana-en:111</rant>
      <name>EGR_RTE_01</name>
    </objKey>
  </rqst>
</spppUpdateRequest>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<spppUpdateResponse xmlns="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="urn:ietf:params:xml:ns:sppp:base:1 sppp.xsd">
  <serverTransId>txid-982543123</serverTransId>
  <overallResult>
    <code>1000</code>
    <msg>Success</msg>
  </overallResult>
</spppUpdateResponse>
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

    </section>

    <section anchor="xmlconsiderations" title="XML Considerations">
      <t> XML serves as the encoding format for SPPP, allowing complex
        hierarchical data to be expressed in a text format that can be
        read, saved, and manipulated with both traditional text tools
        and tools specific to XML. <vspace blankLines="1"/> XML is
        case sensitive. Unless stated otherwise, XML specifications
        and examples provided in this document MUST be interpreted in
        the character case presented to develop a conforming
        implementation. <vspace blankLines="1"/> This section
        discusses a small number of XML-related considerations
        pertaining to SPPP. </t>

      <section anchor="namespaces" title="Namespaces">
        <t> All SPPP protocol elements are defined in the namespaces 
        in the IANA Considerations section and in the Formal Protocol 
        Specification section of this document.
        </t>
      </section>
      
      <section anchor="versioning" title="Versioning and Character Encoding">
        <t> All XML instances SHOULD begin with an
          <![CDATA[ <?xml?> ]]> declaration to identify the version of
          XML that is being used, optionally identify use of the
          character encoding used, and optionally provide a hint to an
          XML parser that an external schema file is needed to
          validate the XML instance. <vspace blankLines="1"/>
          Conformant XML parsers recognize both UTF-8 (defined in
            <xref target="RFC3629"/>) and UTF-16 (defined in <xref
            target="RFC2781"/>); per <xref target="RFC2277"/> UTF-8 is
          the RECOMMENDED character encoding for use with SPPP. </t>
        <t> Character encodings other than UTF-8 and UTF-16 are
          allowed by XML. UTF-8 is the default encoding assumed by XML
          in the absence of an "encoding" attribute or a byte order
          mark (BOM); thus, the "encoding" attribute in the XML
          declaration is OPTIONAL if UTF-8 encoding is used. SPPP
          clients and servers MUST accept a UTF-8 BOM if present,
          though emitting a UTF-8 BOM is NOT RECOMMENDED. </t>
        <t> Example XML declarations: <vspace blankLines="1"/>
          <![CDATA[ <?xml?> version="1.0" encoding="UTF-8" standalone="no"?>]]>
        </t>
      </section>

    </section>

    <section anchor="securityconsiderations" title="Security Considerations">
      <t> The transport protocol section contains some security
        properties that the transport protocol must provide so that
        authenticated endpoints can exchange data confidentially and
        with integrity protection. </t>
      <t> More details will be provided in a future revision of this
        document. </t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t> This document uses URNs to describe XML namespaces and XML
        schemas conforming to a registry mechanism described in <xref
          target="RFC3688"/>. </t>
      <t> Two URI assignments are requested. <vspace blankLines="1"/>
        Registration request for the SPPP XML namespace: <vspace
          blankLines="0"/> urn:ietf:params:xml:ns:sppp:base:1 <vspace
          blankLines="0"/> Registrant Contact: IESG <vspace
          blankLines="0"/> XML: None. Namespace URIs do not represent
        an XML specification. </t>
      <t> Registration request for the XML schema: <vspace
          blankLines="0"/> URI: urn:ietf:params:xml:schema:sppp:1
          <vspace blankLines="0"/> Registrant Contact: IESG <vspace
          blankLines="0"/> XML: See the "Formal Specification" section
        of this document (<xref target="formalspecification"/>). </t>
      <t>
      	IANA is requested to create a new SPPP registry for Organization Identifiers that will indicate valid strings to be used for well-known enterprise namespaces.
      	<vspace
          blankLines="0"/>
      	This document makes the following assignments for the OrgIdType namespaces:
	  </t>
        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
      Namespace                    OrgIdType namespace string
      ----                         ----------------------------
      IANA Enterprise Numbers       iana-en
                              ]]>
            </artwork>
          </figure>

      </t>
    </section>

    <section anchor="formalspecification" title="Formal Specification">
      <t> This section provides the draft XML Schema Definition for
        the SPPP protocol. </t>
      <t>
        <figure title="">
          <artwork align="left">
            <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns:spppb="urn:ietf:params:xml:ns:sppp:base:1"
  xmlns="http://www.w3.org/2001/XMLSchema"
  targetNamespace="urn:ietf:params:xml:ns:sppp:base:1"
  elementFormDefault="qualified" xml:lang="EN">
  <annotation>
    <documentation>
    ------------------ Object Type Definitions -------------- 
    </documentation>
  </annotation>
  <complexType name="RteGrpType">
    <complexContent>
     <extension base="spppb:BasicObjType">
       <sequence>
         <element name="rgName" type="spppb:ObjNameType"/>
         <element name="rrRef" type="spppb:RteRecRefType" 
           minOccurs="0" maxOccurs="unbounded"/>
         <element name="dgName" type="spppb:ObjNameType" minOccurs="0"
           maxOccurs="unbounded"/>
         <element name="peeringOrg" type="spppb:OrgIdType" minOccurs="0"
           maxOccurs="unbounded"/>
         <element name="sourceIdent" type="spppb:SourceIdentType"
           minOccurs="0" maxOccurs="unbounded"/>
         <element name="isInSvc" type="boolean"/>
         <element name="priority" type="unsignedShort"/>
         <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
       </sequence>
     </extension>
    </complexContent>
  </complexType>
  <complexType name="DestGrpType">
    <complexContent>
     <extension base="spppb:BasicObjType">
      <sequence>
         <element name="dgName" type="spppb:ObjNameType"/>
      </sequence>
     </extension>
    </complexContent>
  </complexType>
  <complexType name="PubIdType" abstract="true">
    <complexContent>
     <extension base="spppb:BasicObjType">
       <sequence>
         <element name="dgName" type="spppb:ObjNameType" minOccurs="0"/>
       </sequence>
     </extension>
    </complexContent>
  </complexType>
  <complexType name="TNType">
    <complexContent>
      <extension base="spppb:PubIdType">
        <sequence>
          <element name="tn" type="string"/>
          <element name="rrRef" type="spppb:RteRecRefType" 
             minOccurs="0" maxOccurs="unbounded"/>
          <element name="corInfo" type="spppb:CORInfoType" 
             minOccurs="0"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="TNRType">
    <complexContent>
      <extension base="spppb:PubIdType">
        <sequence>
          <element name="startTn" type="string"/>
          <element name="endTn" type="string"/>
          <element name="corInfo" type="spppb:CORInfoType" 
              minOccurs="0"/>
        </sequence>
        <attribute name="prefix" type="boolean" default="false">
           </attribute>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="TNPType">
    <complexContent>
      <extension base="spppb:PubIdType">
        <sequence>
          <element name="tnPrefix" type="string"/>
          <element name="corInfo" type="spppb:CORInfoType" 
            minOccurs="0"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="RNType">
    <complexContent>
      <extension base="spppb:PubIdType">
        <sequence>
          <element name="rn" type="string" default="true"/>
          <element name="corInfo" type="spppb:CORInfoType" 
             minOccurs="0"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="RteRecType" abstract="true">
    <complexContent>
      <extension base="spppb:BasicObjType">
         <sequence>
           <element name="rrName" type="spppb:ObjNameType"/>
         </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="NAPTRType">
    <complexContent>
      <extension base="spppb:RteRecType">
        <sequence>
          <element name="order" type="unsignedShort"/>
          <element name="flags" type="string" minOccurs="0"/>
          <element name="svcs" type="string"/>
          <element name="regx" type="spppb:RegexParamType"
            minOccurs="0"/>
          <element name="repl" type="string" minOccurs="0"/>
          <element name="ttl" type="positiveInteger" minOccurs="0"/>
          <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="NSType">
    <complexContent>
      <extension base="spppb:RteRecType">
        <sequence>
          <element name="hostName" type="string"/>
          <element name="ipAddr" type="spppb:IPAddrType" minOccurs="0"
            maxOccurs="unbounded"/>
          <element name="ttl" type="positiveInteger" minOccurs="0"/>
          <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="URIType">
    <complexContent>
      <extension base="spppb:RteRecType">
        <sequence>
          <element name="ere" type="string" default="^(.*)$"/>
          <element name="uri" type="string"/>
          <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="RteGrpOfferType">
   <complexContent>
     <extension base="spppb:BasicObjType">
       <sequence>
         <element name="rteGrpOfferKey" type="spppb:RteGrpOfferKeyType"
            />
         <element name="status" type="spppb:RteGrpOfferStatusType"/>
         <element name="offerDateTime" type="dateTime"/>
         <element name="acceptDateTime" type="dateTime" minOccurs="0"/>
         <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
       </sequence>
     </extension>
    </complexContent>
  </complexType>
  <complexType name="EgrRteType">
    <complexContent>
     <extension base="spppb:BasicObjType">
       <sequence>
         <element name="egrRteName" type="spppb:ObjNameType"/>
         <element name="pref" type="unsignedShort"/>
         <element name="regxRewriteRule" type="spppb:RegexParamType"/>
         <element name="ingrRteRec" type="spppb:ObjKeyType" 
            minOccurs="0" maxOccurs="unbounded"/>
         <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
       </sequence>
     </extension>
    </complexContent>
  </complexType>
  <annotation>
    <documentation> ------------------ Abstract Object and Element
      Type Definitions -------------- </documentation>
  </annotation>
  <complexType name="BasicObjType" abstract="true">
    <sequence>
      <element name="rant" type="spppb:OrgIdType"/>
      <element name="rar" type="spppb:OrgIdType"/>
      <element name="cDate" type="dateTime" minOccurs="0"/>
      <element name="mDate" type="dateTime" minOccurs="0"/>
      <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
    </sequence>
  </complexType>
  <complexType name="RegexParamType">
    <sequence>
      <element name="ere" type="string" default="^(.*)$"/>
      <element name="repl" type="string"/>
    </sequence>
  </complexType>
  <simpleType name="OrgIdType">
    <restriction base="string"/>
  </simpleType>
  <simpleType name="ObjNameType">
    <restriction base="string"/>
  </simpleType>
  <simpleType name="TransIdType">
    <restriction base="string"/>
  </simpleType>
  <simpleType name="MinorVerType">
    <restriction base="unsignedLong"/>
  </simpleType>
  <complexType name="ObjKeyType">
    <sequence>
      <element name="rant" type="spppb:OrgIdType"/>
      <element name="name" type="spppb:ObjNameType"/>
    </sequence>
  </complexType>
  <complexType name="IPAddrType">
    <sequence>
      <element name="addr" type="string"/>
      <element name="type" type="spppb:IPType"/>
      <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
    </sequence>
  </complexType>
  <simpleType name="IPType">
    <restriction base="token">
      <enumeration value="IPv4"/>
      <enumeration value="IPv6"/>
    </restriction>
  </simpleType>
  <complexType name="RteRecRefType">
    <sequence>
      <element name="rrKey" type="spppb:ObjKeyType"/>
      <element name="priority" type="unsignedShort"/>
      <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
    </sequence>
  </complexType>
  <complexType name="SourceIdentType">
    <sequence>
      <element name="sourceIdentLabel" type="string"/>
      <element name="sourceIdentScheme"
        type="spppb:SourceIdentSchemeType"/>
      <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
    </sequence>
  </complexType>
  <simpleType name="SourceIdentSchemeType">
    <restriction base="token">
      <enumeration value="uri"/>
      <enumeration value="ip"/>
      <enumeration value="rootDomain"/>
    </restriction>
  </simpleType>
  <complexType name="CORInfoType">
    <sequence>
      <element name="corClaim" type="boolean" default="true"/>
      <element name="cor" type="boolean" default="false" 
         minOccurs="0"/>
      <element name="corDate" type="dateTime" minOccurs="0"/>
    </sequence>
  </complexType>
  <complexType name="SvcMenuType">
    <sequence>
      <element name="serverStatus" type="spppb:ServerStatusType"/>
      <element name="majMinVersion" type="string"
        maxOccurs="unbounded"/>
      <element name="objURI" type="anyURI" maxOccurs="unbounded"/>
      <element name="extURI" type="anyURI" minOccurs="0"
        maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <simpleType name="ServerStatusType">
    <restriction base="token">
      <enumeration value="inService"/>
      <enumeration value="outOfService"/>
    </restriction>
  </simpleType>
  <complexType name="RteGrpOfferKeyType">
    <sequence>
      <element name="rteGrpKey" type="spppb:ObjKeyType"/>
      <element name="offeredTo" type="spppb:OrgIdType"/>
    </sequence>
  </complexType>
  <simpleType name="RteGrpOfferStatusType">
    <restriction base="token">
      <enumeration value="offered"/>
      <enumeration value="accepted"/>
    </restriction>
  </simpleType>
  <complexType name="ExtAnyType">
    <sequence>
      <any namespace="##other" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
  <annotation>
    <documentation> -------------- Operation Request and Response
      Object Type Definitions ------------ </documentation>
  </annotation>
  <complexType name="ResultCodeType">
    <sequence>
       <element name="code" type="int"/>
       <element name="msg" type="string"/>
    </sequence>
  </complexType>
  <complexType name="RqstObjResultCodeType">
    <complexContent>
       <extension base="spppb:ResultCodeType">
          <sequence>
             <element name="rqstObj" type="spppb:BasicRqstType"/>
          </sequence>
       </extension>
    </complexContent>
  </complexType>
  
  <complexType name="BasicRqstType" abstract="true">
    <sequence>
      <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
    </sequence>
  </complexType>
  <complexType name="BasicQueryRqstType" abstract="true">
    <sequence>
      <element name="ext" type="spppb:ExtAnyType" minOccurs="0"/>
    </sequence>
  </complexType>
  
  <complexType name="AddRteGrpRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="rteGrp" type="spppb:RteGrpType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="DelRteGrpRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="objKey" type="spppb:ObjKeyType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="GetRteGrpsRqstType">
    <complexContent>
      <extension base="spppb:BasicQueryRqstType">
        <sequence>
          <element name="objKey" type="spppb:ObjKeyType"
            minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="AddRteRecRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="rteRec" type="spppb:RteRecType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="DelRteRecRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="objKey" type="spppb:ObjKeyType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="GetRteRecsRqstType">
    <complexContent>
      <extension base="spppb:BasicQueryRqstType">
        <sequence>
          <element name="objKey" type="spppb:ObjKeyType"
            minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
 
  <complexType name="AddDestGrpRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="destGrp" type="spppb:DestGrpType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="DelDestGrpRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="objKey" type="spppb:ObjKeyType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="GetDestGrpsRqstType">
    <complexContent>
      <extension base="spppb:BasicQueryRqstType">
        <sequence>
          <element name="objKey" type="spppb:ObjKeyType"
            minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="AddPubIdRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="pi" type="spppb:PubIdType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="DelPubIdRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="pi" type="spppb:PubIdType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="GetPubIdsRqstType">
    <complexContent>
      <extension base="spppb:BasicQueryRqstType">
        <sequence>
          <element name="pi" type="spppb:PubIdType" minOccurs="0"
            maxOccurs="unbounded"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="AddRteGrpOfferRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="rteGrpOffer" type="spppb:RteGrpOfferType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="DelRteGrpOfferRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="rteGrpOfferKey" 
                     type="spppb:RteGrpOfferKeyType" />
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="AcceptRteGrpOfferRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="rteGrpOfferKey" 
                    type="spppb:RteGrpOfferKeyType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="RejectRteGrpOfferRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="rteGrpOfferKey" 
                    type="spppb:RteGrpOfferKeyType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="GetRteGrpOffersRqstType">
    <complexContent>
      <extension base="spppb:BasicQueryRqstType">
        <sequence>
          <element name="offeredBy" type="spppb:OrgIdType"
            minOccurs="0" maxOccurs="unbounded"/>
          <element name="offeredTo" type="spppb:OrgIdType"
            minOccurs="0" maxOccurs="unbounded"/>
          <element name="status" type="spppb:RteGrpOfferStatusType"
            minOccurs="0"/>
          <element name="rteGrpOfferKey"
            type="spppb:RteGrpOfferKeyType" minOccurs="0"
            maxOccurs="unbounded"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="AddEgrRteRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="egrRte" type="spppb:EgrRteType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="DelEgrRteRqstType">
    <complexContent>
      <extension base="spppb:BasicRqstType">
        <sequence>
          <element name="objKey" type="spppb:ObjKeyType"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <complexType name="GetEgrRtesRqstType">
    <complexContent>
      <extension base="spppb:BasicQueryRqstType">
        <sequence>
          <element name="objKey" type="spppb:ObjKeyType"
            minOccurs="0" maxOccurs="unbounded"/>
        </sequence>
      </extension>
    </complexContent>
  </complexType>
  <annotation>
    <documentation> -------- Generic Request and Response Definitions
      --------------- </documentation>
  </annotation>
  <element name="spppUpdateRequest">
    <complexType>
      <sequence>
        <element name="clientTransId" type="spppb:TransIdType" 
            minOccurs="0"/>
        <element name="minorVer" type="spppb:MinorVerType" 
            minOccurs="0"/>
        <element name="rqst" type="spppb:BasicRqstType" 
            maxOccurs="unbounded"/>
      </sequence>
    </complexType>
  </element>
  <element name="spppUpdateResponse">
    <complexType>
      <sequence>
        <element name="clientTransId" type="spppb:TransIdType" 
            minOccurs="0"/>
        <element name="serverTransId" type="spppb:TransIdType"/>
        <element name="overallResult" type="spppb:ResultCodeType"/>
        <element name="rqstObjResult" 
            type="spppb:RqstObjResultCodeType" minOccurs="0" 
          maxOccurs="unbounded"/>
      </sequence>
    </complexType>
  </element>
  <element name="spppQueryRequest">
    <complexType>
      <sequence>
        <element name="minorVer" type="spppb:MinorVerType" 
            minOccurs="0"/>
        <element name="rqst" type="spppb:BasicQueryRqstType"/>
      </sequence>
    </complexType>
  </element>
  <element name="spppQueryResponse">
    <complexType>
      <sequence>
        <element name="overallResult" type="spppb:ResultCodeType"/>
        <element name="resultSet" type="spppb:BasicObjType" 
           minOccurs="0" maxOccurs="unbounded"/>
      </sequence>
    </complexType>
  </element>
  <element name="spppServerStatusRequest">
    <complexType>
      <sequence>
        <element name="minorVer" type="spppb:MinorVerType" 
           minOccurs="0"/>
      </sequence>
    </complexType>
  </element>
  <element name="spppServerStatusResponse">
    <complexType>
      <sequence>
        <element name="overallResult" type="spppb:ResultCodeType"/>
        <element name="svcMenu" type="spppb:SvcMenuType"/>
      </sequence>
    </complexType>
  </element>
</schema>
]]>
          </artwork>
        </figure>

      </t>
    </section>

    <section title="Acknowledgments">
      <t>This document is a result of various discussions held in the DRINKS working group and within the DRINKS protocol design team, which is comprised of the following individuals, in alphabetical order: Alexander Mayrhofer, Deborah A Guyton, David Schwartz, Lisa Dusseault, Manjul Maharishi, Otmar Lendl, Richard Shockey and Sumanth Channabasappa.</t>
    </section>

  </middle>

  <back>
    <references title="Normative References"> &rfc2119; &rfc2277;
      &rfc3629; &rfc3688; &rfc3986;
      &I-D.ietf-drinks-sppp-over-soap; </references>

    <references title="Informative References"> &rfc5321; &rfc3261;
      &rfc3761; &rfc4725; &rfc5486; &rfc2781;
      &I-D.ietf-drinks-usecases-requirements; </references>
  </back>

</rfc>
