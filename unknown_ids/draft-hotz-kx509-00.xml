<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2782 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY RFC3280 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3280.xml">
<!ENTITY RFC4120 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4120.xml">
<!ENTITY RFC4556 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4556.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc symrefs="yes"?>
<rfc category="std" docName="draft-hotz-kx509-00.txt" ipr="trust200902">
  <front>
    <title abbrev="KX509">KX509 Kerberized Certificate Issuance
    Protocol</title>

    <author fullname="Henry B. Hotz" initials="H. B." surname="Hotz">
      <organization>Jet Propulsion Laboratory, California Institute of
      Technology</organization>

      <address>
        <postal>
          <street>4800 Oak Grove Dr.</street>

          <!-- Reorder these if your country does things differently -->

          <city>Pasadena</city>

          <region>CA</region>

          <code>91109</code>

          <country>US</country>
        </postal>

        <phone>+01 818 354-4880</phone>

        <email>hotz@jpl.nasa.gov</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date year="2010" />

    <area>General</area>

    <workgroup>Kerberos Working Group</workgroup>

    <!---->

    <keyword>protocol</keyword>

    <abstract>
      <t>This rfc describes a protocol, called kx509, for using Kerberos
      tickets to acquire X.509 certificates.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The two primary ways of providing cryptographically secure
      identification on the Internet are Kerberos tickets <xref
      target="RFC4120"></xref>, and X.509 <xref target="RFC3280"></xref> and
      <xref target="X.509"></xref> certificates.</t>

      <t>In practical IT infrastructure where both are in use, it's highly
      desirable to deploy their support in a way which guarantees they both
      authoritatively refer to the same entities. There is already a
      widely-adopted standard for using X.509 certificates to acquire
      corresponding Kerberos tickets called PKINIT <xref
      target="RFC4556"></xref>. This rfc describes the kx509 protocol for
      supporting the symmetric operation of acquiring X.509 certificates using
      Kerberos tickets.</t>

      <t>In normal operation kx509 can be used after a Kerberos
      ticket-granting-ticket (TGT) is acquired, which is most likely during
      user login. First, the client generates a RSA public/private key-pair.
      Next, using the Kerberos ticket-granting-ticket, it acquires a Kerberos
      service ticket for the KCA (Kerberized Certificate Authority), and uses
      this to send the public half of its key-pair. The KCA will decrypt the
      service ticket, verify the integrity of the incoming packet, determine
      the identity of the user, and use the session key to send back a
      corresponding X.509 certificate.</t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>

    <section title="Protocol Data">
      <t>The protocol consists of a single request/reply exchange using
      UDP.</t>

      <t>Both the request and the reply packet begin with four bytes of
      version ID information, followed by a DER encoded ASN.1 message. The
      first two bytes of the version ID are reserved. They MUST be set to zero
      when sent, and SHOULD be ignored when received. The third and fourth
      bytes are the major and minor version numbers. The version of the
      protocol described in this document is designated 2.0, so the first four
      bytes of the packet are 0, 0, 2, 0.</t>

      <t>Incompatible variations of this protocol MUST use a different major
      version number.</t>

      <section title="Request Packet">
        <t>The request consists of a version ID, a Kerberos AP_REQ, integrity
        check data on the request, and a public key generated by the client.
        The ASN.1 encoding is:</t>

        <figure>
          <artwork type="ASN.1"><![CDATA[KX509Request ::= SEQUENCE {
        ap-req OCTET STRING,
        pk-hash OCTET STRING,
        pk-key OCTET STRING
}]]></artwork>
        </figure>

        <t>The ap-req is as described in <xref target="RFC4120"></xref>
        Section 5.5.1.</t>

        <t>The pk-hash is HMAC using SHA-1 as the underlying hash. All 160
        bits are sent. The key used is the Kerberos session key. The data is
        the 4-byte version ID and the octet string for pk-key.</t>

        <t>The pk-key contains a public key. This key and its corresponding
        private key are generated by the client before contacting the server.
        The key is DER encoded and then stored in this octet string in the
        request.</t>
      </section>

      <section title="Reply Packet">
        <t>The reply consists of a version ID, an error code, and an optional
        authentication hash, optional certificate, and optional error text
        string. The service SHOULD return replies of the same version as the
        request where possible.</t>

        <figure>
          <artwork type="ASN.1"><![CDATA[KX509Response ::= SEQUENCE {
        error-code[0] INTEGER DEFAULT 0,
        hash[1] OCTET STRING OPTIONAL,
        certificate[2] OCTET STRING OPTIONAL,
        e-text[3] VisibleString OPTIONAL
}]]></artwork>
        </figure>

        <t>Although the format of the reply contains optional objects, the
        server MUST only generate replies with one of the following allowed
        combinations.</t>

        <texttable>
          <ttcol></ttcol>

          <ttcol></ttcol>

          <ttcol></ttcol>

          <c>certificate</c>

          <c></c>

          <c>hash</c>

          <c>error-code</c>

          <c>error-message</c>

          <c>hash</c>

          <c>error-code</c>

          <c>error-message</c>

          <c></c>
        </texttable>

        <t>The first case is returned when the server successfully generates a
        certificate for the user.</t>

        <t>The second case is returned when the server successfully
        authenticates the user and their key, but is unable for some other
        reason to generate a certificate.</t>

        <t>The third case MAY be returned if the server is unable to
        successfully authenticate the user and intends to return some
        unauthenticated information to the client.</t>

        <t>The hash on a response is computed using SHA-1 HMAC as for the
        request. The data that is hashed consists of the 4-byte version ID at
        the beginning of the packet, the error-code, and all other optional
        fields except the hash itself. The error-message MAY be translated
        into other character sets for display purposes, but the hash is
        computed on the error-message in its VisibleString representation.</t>

        <t>If the error-message contains NUL characters, the client MAY ignore
        any part of the error message after the first NUL character for
        display purposes.</t>

        <t>As implied by the above table, if the reply does not contain a
        certificate it MUST contain an error message and a non-zero error
        code. Conversely, if a certificate is returned then the error code
        MUST be zero. The server SHOULD NOT send a zero error-code. The client
        MUST treat a missing error-code as if it were zero.</t>
      </section>
    </section>

    <section title="Protocol Operation">
      <t>Absent errors, the protocol consists of a single request, sent via
      UDP, and a single reply, also sent via UDP.</t>

      <t>Before constructing the request, the client must know the canonical
      name(s) and port(s) of the server(s) to contact. It MAY determine them
      by looking up the service's SRV record as described in<xref
      target="RFC2782"></xref>. The entry to be used is _kca._udp.<spanx
      style="emph">realm</spanx>, where <spanx style="emph">realm</spanx> is
      the Kerberos realm, used as part of the DNS name. (KCA stands for
      Kerberized Certificate Authority.)</t>

      <t>The client must then acquire a service ticket in order to construct
      the ap-req for the service. The Kerberos service principal name to use
      for this service has a first component of "kca_service". The second
      component and the realm of the principal follow normal Kerberos
      conventions.</t>

      <t>When the server receives a request, it MUST make sanity checks
      including at least the following:</t>

      <t><list style="symbols">
          <t>The AP-REQ can be decoded and is not expired.</t>

          <t>The request's hash is valid.</t>
        </list>The server SHOULD make other sanity checks, such as a minimum
      public key length, to the extent feasible.</t>

      <t>The server MAY decline to respond to an erroneous request. If it does
      not receive a response a client MAY retry its request, but the client
      SHOULD wait at least one second before doing so.</t>

      <t>The client MUST verify any hash in the reply, and MUST NOT use any
      certificate in a reply whose hash does not verify. The client MAY
      display an error-message if the hash is absent or does not verify, but
      SHOULD indicate the message is not authenticated.</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The original version of kx509 was implemented using Kerberos 4 at the
      University of Michigan, and was nicely documented in <xref
      target="KX509"></xref>. Many thanks to them for their original work.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This service is conventionally run on UDP port 9878, but this memo
      includes no request to IANA.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>The only encrypted information in the protocol is that used by
      Kerberos itself. The considerations for any Kerberized service apply
      here.</t>

      <t>The other information, such as the public key and certificate, are
      transmitted in the clear but (as the name implies) were designed to be
      publicly available. However their visibility could raise privacy
      concerns. The hash is used to protect their integrity.</t>

      <t>The policies for issuing Kerberos tickets and X.509 certificates are
      usually expressed very differently. An implementation of this protocol
      should not provide a mechanism for bypassing ticket or certificate
      policies. Furthermore, if the issued certificate can be used with
      PKINIT, this authentication loop should not bypass policy limits for
      either X.509 certificates or Kerberos tickets.</t>

      <t>X.509 certificates are usually issued with considerably longer
      validity times than Kerberos tickets. If an implementation of this
      protocol does not limit the validity time of the issued certificates to
      the Kerberos ticket lifetime, then care should be taken that the issued
      certificate is not valid for longer than the intended policy should
      allow.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &RFC2119;

      &RFC2782;

      &RFC3280;

      &RFC4120;
    </references>

    <references title="Informative References">
      &RFC4556;

      <reference anchor="X.509">
        <front>
          <title>Recommendation X.509: The Directory: Public-key and attribute
          certificate framework</title>

          <author>
            <organization>International Telecommunications
            Union</organization>
          </author>

          <date month="November" year="2008" />
        </front>

        <format type="TXT" />
      </reference>

      <reference anchor="KX509"
                 target="http://www.citi.umich.edu/techreports/reports/citi-tr-01-2.pdf">
        <front>
          <title>The KX509 Protocol</title>

          <author fullname="William Doster" initials="W." surname="Doster">
            <organization abbrev="UMICH">University of Michigan</organization>
          </author>

          <author fullname="Marcus Watts" initials="M." surname="Watts">
            <organization abbrev="UMICH">University of Michigan</organization>
          </author>

          <author fullname="Dan Hyde" initials="D." surname="Hyde">
            <organization abbrev="UMICH">University of Michigan</organization>
          </author>

          <date month="September" year="2001" />
        </front>

        <format type="TXT" />
      </reference>
    </references>

    <section anchor="app-additional"
             title="Certificate Cacheing and Deployment Considerations">
      <t>As noted in the Security Considerations section, the function
      lifetime of the acquired X.509 certificate should probably match the
      lifetime of its predecessor Kerberos ticket. It is also likely that
      X.509 certificates issued with this protocol should be deleted when the
      supporting Kerberos tickets are deleted. That makes the Kerberos ticket
      cache a reasonable location to store the certificate.</t>

      <t>On the other hand applications, such as web browsers, probably expect
      certificates in different stores. A widely used solution to this problem
      is to implement the KX509 client within a PKCS11 library.</t>
    </section>

    <section title="Known Issues with This Draft">
      <t></t>

      <t><list style="numbers">
          <t>The hashing should be better described.</t>

          <t>Should there be provision for SHA-2 or some other hash?</t>

          <t>Should there be provision for DSA keys?</t>

          <t>Should there be IANA registration of a service port
          requested?</t>

          <t>Is there a better way to specify how to find the service that
          allows for how Windows/AD does it? (section 3)</t>

          <t>Should timeouts, etc. be more fully specified?</t>
        </list></t>
    </section>
  </back>
</rfc>
