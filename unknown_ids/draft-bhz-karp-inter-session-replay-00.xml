<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-bhz-karp-inter-session-replay-00"
     ipr="trust200902">
  <front>
    <title abbrev="Solving Inter-Session Replay Attacks">A Generic Mechanism
    to solve Inter-Session Replay Attacks for Routing and Signaling
    Protocols</title>

    <author fullname="Manav Bhatia" initials="M." surname="Bhatia">
      <organization>Alcatel-Lucent</organization>

      <address>
        <postal>
          <street></street>

          <city></city>

          <region></region>

          <code></code>

          <country>India</country>
        </postal>

        <email>manav.bhatia@alcatel-lucent.com</email>
      </address>
    </author>

    <author fullname="Sam Hartman" initials="S." surname="Hartman">
      <organization>Painless Security</organization>

      <address>
        <postal>
          <street></street>

          <city></city>

          <region></region>

          <code></code>

          <country>USA</country>
        </postal>

        <email>hartmans@painless-security.com</email>
      </address>
    </author>

    <author fullname="Dacheng Zhang" initials="D." surname="Zhang">
      <organization>Huawei</organization>

      <address>
        <postal>
          <street></street>

          <city></city>

          <region></region>

          <code></code>

          <country>China</country>
        </postal>

        <email>zhangdacheng@huawei.com</email>
      </address>
    </author>

    <date day="7" month="March" year="2011" />

    <abstract>
      <t>This draft proposes a common solution for routing protocols to
      enhance their capability in tolerating inter-session replay attacks when
      using manual keys for securing their protocol packets.</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t>A replay attack is a network attack where an adversary intercepts a
      valid message transmission and retransmits it sometime later. In certain
      types of replay attacks, the retransmitted message may also be carefully
      tampered with. <xref target="RFC6039"></xref> demonstrates that nearly
      all the routing protocols and their security mechanisms are vulnerable
      to replay attacks to some extent. These attacks permit attackers
      multiple capabilities. Often, by replaying packets, attackers can create
      a disruption, causing routing information to be removed or signaling to
      fail because of the attack. Other replays permit an attacker to mask
      network failures. For example an attacker can maintain an adjacency even
      when a link or router has failed, allowing the attacker to observe
      traffic or forcing traffic to be blackholed. Another class of replay
      attacks permits an attacker to inject old routing information, possibly
      in place of routing information from a router that is currently down.
      Successful replay attacks on routing protocols can introduce incorrect
      routing information into the victims' routing tables, can break their
      adjacencies, and can eventually disrupt network communication.</t>

      <t>Replays may be effective even with very little effort on the part of
      an attacker. For instance, replaying an OSPF Hello packet with an empty
      neighbor list can cause all the neighbor adjacencies with the router
      which originally sent the packet to be reset. All the existing security
      mechanisms for routing protocols use a non-decreasing cryptographic
      sequence number to deal with replay attacks. However, this leaves the
      routers still vulnerable to inter-connection replay attacks where the
      packets from one session are re-sent and accepted during a later
      session. None of the existing authentication mechanisms in the routing
      protocols can prevent this without the assistance of automatic key
      management mechanisms.</t>

      <t>Providing routing protocols with an inter-session replay protection
      is one of the threats that has been recognized in scope for the work
      being done in the KARP WG and has been documented in <xref
      target="I-D.ietf-karp-threats-reqs"></xref>. This document proposes to
      provide a generic solution that can be implemented as part of the KARP
      framework that can be used by all routing and signaling protocols to
      prevent inter-session replay attacks.</t>

      <t>This document proposes introducing a boot count, denoted as the KARP
      Boot Count (KBC), to enhance the capability of routing protocols in
      tolerating inter-session replay attacks. KBC is used to record the
      number of times a router has cold-booted. As a part of the KARP
      infrastructure, the value of this count must be maintained by all the
      implementations compliant to this standard in their non-volatile
      memory.</t>

      <t>The following sections explain why the existing security and
      authentication mechanisms cannot protect the routing and the signaling
      protocols against inter-session replay attacks. The proposed solution is
      then introduced and we explain how unlike the existing anti-replay
      mechanisms, this solution will also work well with automated key
      management techniques.</t>
    </section>

    <section title="Existing Mechanisms">
      <t>Most routing protocols (e.g., OSPF, BFD, and RIP) and signaling
      protocols (LDP, RSVP, etc) include a non-decreasing cryptographic
      sequence number within the authentication data of each new packet that a
      router originates. The receivers keep track of this sequence number and
      only accept a protocol packet if it carries a cryptographic sequence
      number that is greater than or equal to the cryptographic sequence
      number carried in the last valid protocol packet. Using this mechanism,
      receivers can trivially protect the router against simple replay
      attacks.</t>

      <t><xref target="RFC2328"></xref> uses a 32-bit non-decreasing crypto
      sequence number for every OSPFv2 packet. Once a router has increased its
      sequence number, an attacker cannot replay an old packet to a neighbor
      that has an active adjacency without being detected. Note that the
      sequence numbers are not required to increase for each packet.
      Additionally, OSPFv2 provides a per-LSA sequence number to prevent an
      old LSA from being installed.</t>

      <t>OSPFv3 <xref target="RFC5340"></xref> relies on the IP Authentication
      Header (AH) <xref target="RFC4302"></xref> and the IP Encapsulating
      Security Payload (ESP) <xref target="RFC4303"></xref> to
      cryptographically sign routing information passed between routers.</t>

      <t><xref target="RFC4552"></xref> describes the authentication mechanism
      that OSPFv3 uses. It discusses, at length, the reasoning behind using
      manually configured keys, rather than some automated key management
      protocol such as IKEv2 <xref target="RFC4306"></xref>. The primary
      problem is the lack of a suitable key management mechanism, as OSPFv3
      adjacencies are formed on a one-to-many basis and most key management
      mechanisms are designed for a one-to-one communication model. Since
      <xref target="RFC4552"></xref> uses manual keying it clearly states that
      it provides no protection against replay attacks. This can be exploited
      in several ways as described in <xref target="RFC6039"></xref>.</t>

      <t>The OSPF WG is currently working on an alternate mechanism <xref
      target="I-D.ietf-ospf-auth-trailer-ospfv3"></xref> to protect OSPFv3
      protocol packets that does not depend upon IPsec for authentication.
      This draft proposes a new mechanism that works similar to OSPFv2 <xref
      target="RFC5709"></xref> for providing authentication to the OSPFv3
      packets and as a side effect also solves the replay protection problems
      that exists in OSPFv3.</t>

      <t>As part of the solution OSPFv3 routers append a special data block,
      referred to as, the authentication trailer to the end of the OSPFv3
      packets. It contains a 32-bit non decreasing cryptographic sequence
      number that is used to protect against the replay attacks.</t>

      <t>Bidirectional Forwarding Detection (BFD) is specified in <xref
      target="RFC5880"></xref>. There is a 32-bit cryptographic sequence
      number associated with every BFD packet that is used to protect against
      replay attacks. Note that the sequence number is incremented for each
      successive packet transmitted within a session for Meticulous Keyed (MD5
      or SHA-1) Authentication. When using Keyed (MD5 or SHA-1) Authentication
      (the non-meticulous variant), the receiver of a packet only requires the
      sequence number of the packet to be greater than or equal to the last
      sequence number received.</t>

      <t>In order to improve the anti-replay capability of RSVP, a 64-bit
      monotonically increasing sequence number is associated with every RSVP
      packet<xref target="RFC2747"></xref>.</t>
    </section>

    <section title="Inter-Session Replay Attacks">
      <t>In the security mechanisms where the per-packet sequence numbers only
      need to be updated occasionally, replay attacks can be quite intuitive.
      For instance, an attacker can replay the last OSPFv2 packet without
      being detected since a router executing OSPFv2 accepts packets with
      sequence number greater than or equal to what they had last received. Of
      course, this issue can be easily addressed by mandating that protocols
      must only accept protocol packets if they come with a sequence number
      that is greater than what they have received till now. However, even if
      the sequence numbers are monotonically increased, the security
      mechanisms for routing protocols are still vulnerable to "inter-session"
      replay attacks if automatic key management mechanisms are unavailable.
      In normal conditions, it will take a very long period for a sequence
      number to reach its maximum. However, on many occasions (e.g., reboot),
      a router may re-initialize its sequence number. In this case, the
      sequence number of new packets is less than the sequence number of
      packets previously sent on the link. If an adversary replays the packets
      intercepted before the re-initialization, it is difficult for the
      victims to distinguish a replayed packet from the valid ones.</t>
    </section>

    <section title="Proposal">
      <t>The basic idea of the proposed solution is to guarantee that the
      sequence number of a router will always monotonically increase even
      after a cold reboot. The first part of the solution requires that the
      sequence numbers increase for every packet, updating the requirement of
      protocols such as OSPFv2 that only require non-decreasing behavior. This
      also means that BFD should use the meticulous version of the
      authentication mechanism as against the regular, since the former
      requires the cryptographic sequence number to increase for each
      successive packet that is transmitted for a session. It is insufficient
      to update the behavior of senders in this regard: receivers MUST check
      that sequence numbers increase for every packet.</t>

      <t>The second part of the solution requires routing protocol
      implementations to maintain a KARP boot count (KBC) that records the
      number of times the router has cold booted in a non-volatile storage,
      similar to how it is done in the SNMPv3 security architecture. In fact,
      the same boot count MAY also be shared by SNMPv3 and the KARP
      infrastructure. Before sending out a packet, the routing protocols can
      request for this count value and can append it before the sequence space
      that it maintains. How each routing protocol achieve this is an
      implementation specific issue and beyond the scope of this document.</t>

      <t>If the sequence number of a routing protocol (e.g., RSVP) is 64 bits,
      the sequence space is then broken down to two halves. The most
      significant 32-bits would indicate the KARP boot count. The least
      significant 32-bits is a counter that increases for every packet
      sent.</t>

      <t>If the cryptographic sequence number of a routing protocol is 32
      bits, it is recommended to extend the sequence number space to 64 bits.
      The most significant 32-bits would indicate the KARP boot count. The
      least significant 32-bits would carry the current sequence number that
      protocols maintain, which increases with each successive packet
      transmitted within a session. Upon receiving a packet, the receiver MUST
      verify that the sequence number in the packet is strictly greater than
      the sequence number of the previous packets received.</t>

      <t>In the later case, if an implementation does not intend to expand the
      length of the sequence number, it could divide this 32-bit cryptographic
      sequence number space into a 7-bit and a 25-bit field. The most
      significant 7-bits could then indicate the KARP boot count. The least
      significant 25-bits is a counter that increases for every packet
      sent.</t>

      <t>This solution assumes that boot counts never wrap within the lifetime
      of a particular encryption key. Also, the solution assumes that
      nonvolatile storage is always updated on a boot. Under these
      assumptions, a sequence number will not be re-used. This is sufficient
      to guarantee that while two routers are exchanging communications,
      packets from an old session cannot be replayed. However it does not
      demonstrate freshness. Many routing protocols discard replay state when
      an adjacency is dropped or when a router reboots. Once this state is
      discarded, an attacker can successfully replay packets from an old
      session. See the discussion in <xref target="Security"></xref>.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>This solution does not try to provide guarantees of freshness: it
      does not protect against the replay of an antique session while a router
      is down. For instance, if an OSPF router is taken out of service for
      some reason, an attacker can replay packets as soon as the adjacencies
      with the router time out. Actually, this issues is a common problem
      encountered by all existing anti-replay solutions for routing protocols.
      To address this issue, the liveliness of routers would need to be checked
      before the generation of any adjacency. The challenge/response solution
      is proposed in<xref
      target="I-D.bhatia-karp-ospf-ip-layer-protection"></xref> to address
      this issue.</t>

      <t>Updates to routing protocols that use this solution need to discuss
      residual attacks, particularly those resulting from the lack of
      freshness guarantees. For example this solution would likely be
      insufficient for RIPv2 because as soon as a router goes down, old
      packets from that router could be used to inject routing information.
      However attacks against a link-state protocol may be quite limited and
      this solution may be appropriate.</t>

      <t>The security of this solution depends on the boot count always
      increasing for each new boot unless the key changes. This creates
      significant operational requirements. If equipment is replaced but its
      router identity (an IP address for several protocols) is re-used, then
      the key MUST be changed or the boot count preserved from the old
      equipment. Failure to take one of these steps permits attackers to
      replay packets from the old equipment until the boot count of the new
      equipment catches up with that of the old equipment. This will very
      likely permit an attacker to disrupt adjacencies between the new
      equipment and other routers. More serious attacks may be possible as
      well.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>The implementations that decide to extend their sequence space from
      32 bits to 64 bits need to require a new Auth Type from IANA as this
      will be incompatible with the earlier authentication mechanisms.</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The funding for Sam Hartman's work on this draft is provided by
      Huawei.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.2082'?>

      <?rfc include="reference.RFC.2119"?>

      <?rfc include='reference.RFC.2328'?>

      <?rfc include='reference.RFC.2747'?>

      <?rfc include='reference.RFC.4552'?>

      <?rfc include='reference.RFC.5340'?>

      <?rfc include='reference.RFC.5880'?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.RFC.5709'?>

      <?rfc include='reference.RFC.4306'?>

      <?rfc include='reference.RFC.4302'?>

      <?rfc include='reference.RFC.4303'?>

      <?rfc include='reference.RFC.6039'?>

      <?rfc include='reference.I-D.ietf-ospf-auth-trailer-ospfv3'?>

      <?rfc include='reference.I-D.ietf-karp-threats-reqs'?>

      <?rfc include='reference.I-D.bhatia-karp-ospf-ip-layer-protection'?>
    </references>
  </back>
</rfc>
