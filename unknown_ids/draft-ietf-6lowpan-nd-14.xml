<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1982 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1982.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2434 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2434.xml">
<!ENTITY RFC2460 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2460.xml">
<!ENTITY RFC2491 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2491.xml">
<!ENTITY RFC3315 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3315.xml">
<!ENTITY RFC3633 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3633.xml">
<!ENTITY RFC3971 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3971.xml">
<!ENTITY RFC3972 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3972.xml">
<!ENTITY RFC3756 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3756.xml">
<!ENTITY RFC4191 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4191.xml">
<!ENTITY RFC4193 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4193.xml">
<!ENTITY RFC4443 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4443.xml">
<!ENTITY RFC4861 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4861.xml">
<!ENTITY RFC4862 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4862.xml">
<!ENTITY RFC4919 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4919.xml">
<!ENTITY RFC4941 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4941.xml">
<!ENTITY RFC4944 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4944.xml">
<!ENTITY RFC5889 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5889.xml">
<!ENTITY I-D.ietf-6lowpan-hc SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-6lowpan-hc">
<!ENTITY sixlowpan-terminology SYSTEM "http://svn.tools.ietf.org/svn/wg/6lowpan/6lowpan-terminology.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="3"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" ipr="trust200902" updates="4944" docName="draft-ietf-6lowpan-nd-14pre1">

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="no" ?>

    <front>
        <title abbrev="ND Optimization for LLNs">
Neighbor Discovery Optimization for Low-power and Lossy Networks</title>

  <author initials="Z" surname="Shelby" fullname="Zach Shelby" role="editor">
    <organization>
	 Sensinode
    </organization>
    <address>
	<postal>
	 <street>Hallituskatu 13-17D</street>
	 <city>Oulu</city>
	 <code>90100</code>
	 <country>FINLAND</country>
	</postal>
	<phone>+358407796297</phone>
	<email>zach@sensinode.com</email>
  </address>
  </author>

<author initials="S" surname="Chakrabarti" fullname="Samita Chakrabarti">
  <organization>IP Infusion</organization>
  <address>
    <postal>
	<street> 1188 Arquest Street</street>
	<city>Sunnyvale, CA</city>
        <country>USA</country>
    </postal>
    <email>samitac@ipinfusion.com</email>
  </address>
</author>

<author initials="E" surname="Nordmark" fullname="Erik Nordmark">
  <organization>Oracle, Inc.</organization>
  <address>
    <postal>
    <street>17 Network Circle</street>
    <city>Menlo Park, CA 94025</city>
    <country>USA</country>
    </postal>
    <email>Erik.Nordmark@Oracle.COM</email>
  </address>
</author>


	<date year="2010"/>

	<area>Internet</area>

	<workgroup>6lowpan Working Group</workgroup>

        <abstract>
        <t> 
        The IETF 6LoWPAN working group defines IPv6 over Low-power Wireless Personal Area Networks such as IEEE 802.15.4. This and other similar link technologies have limited or no usage of multicast signaling due to energy conservation. In addition, the wireless network may not strictly follow traditional concept of IP subnets and IP links. IPv6 Neighbor Discovery was not designed for non-transitive wireless links. The traditional IPv6 link concept and heavy use of multicast make the protocol inefficient and sometimes impractical in a low power and lossy network. This document describes simple optimizations to IPv6 Neighbor Discovery, addressing mechanisms and duplicate address detection for 6LoWPAN and similar networks.
	  </t>

	</abstract>
    </front>

    <middle>

	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<section anchor='introduction' title="Introduction">

	  <t>
	  The IPv6-over-IEEE 802.15.4 <xref target="RFC4944"/> document specifies how IPv6 is carried over an IEEE 802.15.4 network with the help of an adaptation layer which sits between the MAC layer and the IP network layer.
	  A link in a LoWPAN is characterized as lossy, low-power, low bit-rate, short range, with many nodes saving energy with long sleep periods. Multicast as used in IPv6 Neighbor Discovery <xref target="RFC4861"/> is not desirable in such a wireless low-power and lossy network. Moreover, LoWPAN links are asymmetric and non-transitive in nature. A LoWPAN is potentially composed of a large number of overlapping radio ranges. Although a given radio range has broadcast capabilities, the aggregation of these is a complex Non-Broadcast MultiAccess (NBMA, <xref target="RFC2491"/>) structure with generally no LoWPAN-wide multicast capabilities. Link-local scope is in reality defined by reachability and radio strength. Thus we can consider a LoWPAN to be made up of links with undetermined connectivity properties as in <xref target="RFC5889"/>, along with the corresponding address model assumptions defined therein.</t>

	  <t>This specification introduces the following optimizations to IPv6 Neighbor Discovery <xref target="RFC4861"/> specifically aimed at low-power and lossy networks such as LoWPANs:
	    <list style="symbols">
	  	 <t>Host-initiated interactions to allow for sleeping hosts.</t>
	  	 <t>Elimination of multicast-based address resolution for hosts.</t>
	  	 <t>Elimination of redirects since they are problematic on links with non-transitive connectivity.</t>
	  	 <t>A host address registration feature using a new option
in unicast Neighbor Solicitation and Neighbor Advertisement messages.</t>
	  	 <t>A new Neighbor Discovery option to distribute 6LoWPAN header compression context to hosts.</t>
	  	 <t>Optional multihop distribution of prefix and 6LoWPAN header compression context.</t>
	  	 <t>Optional multihop duplicate address detection which uses two new ICMPv6 message types.</t>
	    </list>
	  </t>

	  <t>The document defines three new ICMPv6 message options: the required Address Registration option and the optional Authoritative Border Router and 6LoWPAN Context options. It also defines two new ICMPv6 message types: the Duplicate Address Request and Duplicate Address Confirmation.</t>


	  <section anchor='nd_problems' title="The Shortcomings of IPv6 Neighbor Discovery">

	  <t>IPv6 Neighbor Discovery <xref target="RFC4861"/> provides several
	  important mechanisms used for Router Discovery, Address Resolution, Duplicate
	  Address Detection, Redirect, along with Prefix and Parameter Discovery.</t>

    	  <t>Following power-on and initialization of the network in IPv6 Ethernet
    	  networks, a node joins the solicited-node multicast address on the interface
    	  and then performs Duplicate Address Detection (DAD) for the acquired
    	  link-local address by sending a solicited-node multicast message to the link.
    	  After that it sends multicast messages to the all-router address to solicit
    	  router advertisements. If the host receives a valid Router Advertisement
    	  with the "A" flag, it autoconfigures the IPv6 address with the advertised
    	  prefix in the Router Advertisement (RA) message. Besides this, the IPv6 routers
    	  usually send router advertisements periodically on the network. RAs are sent to the all-node multicast address. Nodes send Neighbor Solicitation/Neighbor
    	  Advertisement messages to resolve the IPv6 address of the destination
    	  on the link. The Neighbor Solicitation messages used for address resolution are multicast. The Duplicate Address Detection procedure and the use of periodic Router Advertisement messages assumes that the nodes are powered on
and reachable most of the time.</t>
	 
<t>In Neighbor Discovery the routers find the hosts by assuming that a subnet
prefix maps to one broadcast domain, and then multicast Neighbor Solicitation
messages to find the host and its link-layer address.
Furthermore, the DAD use of multicast assumes that all hosts that autoconfigure
IPv6 addresses from the same prefix can be reached using link-local multicast
messages.</t>

<t>Note that the 'L' (on-link) bit in the Prefix Information option can
be set to zero in Neighbor Discovery, which makes the host not use
multicast Neighbor Solicitation (NS) messages for address resolution of other hosts, but routers still
use multicast NS messages to find the hosts.</t>

	<t>
	In a LoWPAN, primarily two types of network topologies are found - star networks and mesh networks. A star network is similar to a regular IPv6 subnet with a router and a set of nodes connected to it via the same non-transitive link. But in Mesh networks, the nodes are capable of routing and forwarding packets. Due to the lossy nature of wireless communication and a changing radio environment, the IPv6-link node-set may change due to external physical factors. Thus the link is often unstable and the nodes appear to be moving without necessarily moving physically.
	</t>

<t>
A LoWPAN can use two types of link-layer addresses; 16-bit short addresses and 64-bit unique addresses as defined in <xref target="RFC4944"/>.  Moreover, the available link-layer payload size is on the order of less than 100 bytes thus header compression is very useful.</t>

<t>Considering the above characteristics in a LoWPAN, and the IPv6 Neighbor Discovery <xref target="RFC4861"/> protocol design center, some optimizations and extensions to Neighbor Discovery are useful for the wide deployment of IPv6 over low-powered and lossy networks such as 6LoWPANs.
</t>

</section>

<section anchor='mu_ro' title="Mesh-under and Route-over Concepts">

<t>
	In the 6LoWPAN context, often a link-layer mesh routing mechanism is referred to as "mesh-under" while routing/forwarding packets using IP-layer addresses is referred to as "route-over". The difference between mesh-under and route-over is similar to a bridged-network versus IP-routing using Ethernet. In a mesh-under network all nodes are on the same link which is served by one or more routers, which we call 6LoWPAN Border Routers (6LBR).
In a route-over network, there are multiple links in the 6LoWPAN. Unlike fixed IP links, these link's members may be changing due to the nature of the low-power and lossy behavior of wireless technology. Thus a route-over network is made up of a flexible set of links interconnected by interior routers, which we call 6LoWPAN Routers (6LR). 
	</t>
	<t>
	This specification is applicable to both mesh-under and route-over networks. However, in route-over networks, we have two types of routers - 6LBRs and 6LRs. 6LoWPAN Border Routers sit at the boundary of the 6LoWPAN and the rest of the network while 6LoWPAN Routers are inside the LoWPAN. 6LoWPAN Routers are assumed to be running a routing protocol.
	</t>
	<t>
	In a mesh-under configuration a 6LBR is acting as the IPv6 router where all the hosts in the LoWPAN are on the same link, thus they are only one IP hop away. No 6LoWPAN Routers exist in this topology as forwarding is handled by a link-layer mesh routing protocol.
	</t>
	<t>
	In a route-over configuration, Neighbor Discovery operations take place between hosts and 6LRs or 6LBRs. The 6LR nodes are able to send and receive Router Advertisements, Router Solicitations as well as forward and route IPv6 packets. Here packet forwarding happens at the IP layer.
	</t> 
<t>In both types of configurations, hosts do not take part in routing and forwarding packets and they act as simple IPv6 hosts.</t>
	
	  </section>

	  <section anchor='goals' title="Applicability, Goals and Assumptions">

<t>This document specifies a set of behaviors between hosts and routers. An
implementation that adheres to this document MUST implement those behaviors.
The document also specifies a set of behaviors (multihop 
prefix or context dissemination, and separately multihop duplicate address
detection) which are OPTIONAL to use. An implementation of this specification
SHOULD implement those optional to use pieces.</t>

	  <t>
	  The optimizations described in this document apply to different topologies. They are most useful for route-over and mesh-under configurations in Mesh topologies. However, Star topology configurations will also benefit from the optimizations due to minimized signaling, robust handling of the non-transitive link, and header compression context information. </t>

<t>The document has the following main goals and assumptions.
	  </t>

	  <t>Goals:
	    <list style="symbols">
	     <t>Optimize Neighbor Discovery with a mechanism that is minimal yet sufficient for the operation in both mesh-under and route-over configurations.</t>
         <t>Make the host to router interaction the same whether mesh-under or
route-over is used.</t>
	  	 
         <t>Minimize signaling by avoiding the use of multicast flooding and reducing the use of link-scope multicast messages.</t>
	  	 <t>Optimize the interfaces between hosts and their default routers.</t>
	  	 <t>Support for sleeping hosts.</t>
	  	 <t>Minimize the complexity of nodes.</t>
	  	 <t>Disseminate context information to hosts as needed by <xref target="I-D.ietf-6lowpan-hc"/>.</t>
	  	 <t>Optionally disseminate context information and prefix information from the border to all routers in a LoWPAN.</t>
  	     <t>Optional duplicate address detection mechanism suitable for route-over LoWPANs.</t>
	    </list>
	  </t>

	  <t>Assumptions:
	    <list style="symbols">
	  	 <t>EUI-64 addresses are globally unique.</t>
		 <t>All nodes in the network have an EUI-64 interface identifier in order to do address auto-configuration and detect duplicate addresses.</t>

	  	 
		 <t>The link layer technology is assumed to be low-power and lossy, exhibiting undetermined connectivity, such as IEEE 802.15.4 <xref target="RFC4944"/>. However, the Address Registration mechanism might be useful
for other link layer technologies.</t>


		 <t>A 6LoWPAN is configured to share one or more global IPv6 address prefixes
to enable hosts to move between routers in the 6LoWPAN without changing their
IPv6 addresses.</t>
		 <t>When using the optional DAD mechanism of <xref target="optional_dad"/> it is assumed that 6LRs register with all the 6LBRs.</t>

	
		 <t>If IEEE 802.15.4 16-bit short addresses are used, then some technique is
used to ensure uniqueness of those link-layer addresses. That could be done using DHCPv6, the Address Registration Option based duplicate address detection (specified in <xref target="optional_dad"/>) or other techniques outside of the scope of this document. </t>

		 
		 <t>In order to preserve the uniqueness of addresses not derived from an EUI-64, they must be either assigned or checked for duplicates in the same way throughout the LoWPAN. This can be done using DHCPv6 for assignment and/or using the duplicate address detection mechanism specified in <xref target="optional_dad"/> (or any other protocols developed for that purpose).</t>
		 <t>In order for <xref target="I-D.ietf-6lowpan-hc"/> to operate correctly, the compression context must match for all the hosts, 6LRs, and 6LBRs that can send, receive, or forward a given packet. If <xref target='optional_dist'/> is used to distribute context information this implies that all the 6LBRs must coordinate the context information they distribute within a single 6LoWPAN.</t>
		 <t>This specification describes the operation of ND within a single LoWPAN. The participation of a node in multiple LoWPANs simultaneously may be possible, but is out of scope of this document.</t>
		 
		 <t>
		 Since the 6lowpan shares one single prefix throughout the network, mobility of nodes within the lowpan is transparent. Inter-lowpan mobility is out-of-scope of this document. When a node moves away from the registered default router, it SHOULD first de-register by sending a registration message with
		 zero lifetime and then registers with a new default router that is reachable. If the node loses connectivity with the default router involunterily, then the default router does not know the node  has moved until it runs the unreachability detection. In order to optimize the time for detecting unreachability of a run-away node, a default-router may use link-layer indication or configure a lower NCE life-time value and low registration life-time value - so that it can remove the NCE of the run-away node as soon as possible.
		 </t> 
		 </list>
	  </t>

        </section>

	  <section anchor='optional_features' title="Optional Features">

		<t> This document defines the optimization of Neighbor Discovery messages in host-router interface and introduces the communication in case of Route-over topology. The multhop prefix distribution by the 6LBR and multihop Duplicate Address Detection mechansims, as well as 6LowPAN context option are optional features for a 6LoWPAN deployment. A guideline for feature implementation and deployment is provided at the end of the document.  </t>

	  </section>


      </section>

	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->

	<section anchor='terminology' title="Terminology">
         <t>
         	The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
            "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
            and "OPTIONAL" in this document are to be interpreted as
            described in <xref target="RFC2119"/>.
         </t>

	   <t>
	  	This specification requires readers to be familiar with all the terms and concepts that are discussed in <xref target="RFC4861">"Neighbor Discovery for IP version 6"</xref> <xref target="RFC4862">"IPv6 Stateless Address Autoconfiguration"</xref>, <xref target="RFC4919">"IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs): Overview, Assumptions, Problem Statement, and Goals"</xref>, <xref target="RFC4944"> "Transmission of IPv6 Packets over IEEE 802.15.4 Networks"</xref> and <xref target="RFC5889">"IP Addressing Model in Ad Hoc Networks"</xref>.
         </t>
	   <t>
	     This specification makes extensive use of the same terminology defined in
	     <xref target="RFC4861"/> unless otherwise defined below.
	   </t>

	     <t>
		  <list style="hanging">

     	     <t hangText="6LoWPAN link:"><vspace />
           A wireless link determined by single IP hop reachability of neighboring nodes. These are considered links with undetermined connectivity properties as in <xref target="RFC5889"/>.
           </t>

	     <t hangText="6LoWPAN Node (6LN):"><vspace />
           A 6LoWPAN Node is any host or router participating in a LoWPAN. This term is used when referring to situations in which either a host or router can play the role described.
	     </t>
	    
	     <t hangText="6LoWPAN Router (6LR):"><vspace />
           An intermediate router in the LoWPAN who can communicate with other 6LoWPAN routers in the same LoWPAN. 6LoWPAN routers are present only in route-over topologies.
	     </t>

 	     <t hangText="6LoWPAN Border Router (6LBR):"><vspace />
           A border router located at the junction of separate 6LoWPAN networks or between a 6LoWPAN network and another IP network. There may be one or more 6LBRs at the 6LoWPAN network boundary. A 6LBR is the responsible authority for IPv6 Prefix propagation for the 6LoWPAN network it is serving. An isolated LoWPAN also contains a 6LBR in the network, which provides the prefix(es) for the isolated network.
	     </t>

	     <t hangText="Router:"><vspace/>Either a 6LR or a 6LBR. Note that
nothing in this document precludes a node being a router on some interfaces
and a host on other interfaces as allowed by <xref target="RFC2460"/>.</t>

           
	     
	     <t hangText="Mesh-under:"><vspace />
           A topology where hosts are connected to a 6LBR through a mesh using link-layer forwarding. Thus in a mesh-under configuration all IPv6 hosts in a LoWPAN are only one IP hop away from the 6LBR. This topology simulates the typical IP-subnet topology with one router with multiple nodes in the same subnet.
           </t>
           
           <t hangText="Route-over:"><vspace />
           A topology where hosts are connected to the 6LBR through the use of intermediate layer-3 (IP) routing. Here hosts are typically multiple IP hops away from a 6LBR. The route-over topology typically consists of a 6LBR, a set of 6LRs and hosts.
	     </t>

	     <t hangText="Registration:"><vspace />
	     The process during which a LoWPAN node sends an Neighbor Solicitation message with an Address Registration option to a Router creating a Neighbor Cache entry for the LoWPAN node with a specific timeout. Thus for 6LoWPAN Routers the Neighbor Cache doesn't behave like a cache. Instead it behaves as a registry of all the host addresses that are attached to the Router.
	     </t>
		</list>
		</t>


      </section>

	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<section anchor='overview' title="Protocol Overview">

<t>These Neighbor Discovery optimizations are applicable to both mesh-under and route-over configurations. In a mesh-under configuration only 6LoWPAN Border Routers and hosts exist; there are no 6LoWPAN routers in
mesh-under topologies.</t>



<t>The most important part of the optimizations is the evolved host-to-router
interaction that allows for sleeping nodes and avoids using multicast Neighbor
Discovery messages except
for the case of a host finding an initial set of default routers, and
redoing such determination when that set of routers have become unreachable.
</t>



<t>The protocol also provides for header compression 
<xref target="I-D.ietf-6lowpan-hc"/> by carrying header compression information
in a new option in Router Advertisement messages.</t>



<t>In addition, there are optional and separate mechanisms that can be used between 6LRs and
6LBRs to perform multihop Duplicate Address Detection and distribution
of the Prefix and compression Context information from the 6LBRs to all the 6LRs, which in turn use normal Neighbor Discovery mechanisms to convey this information
to the hosts.</t>



<t>The protocol is designed so that the host-to-router interaction is not affected by the configuration of the 6LoWPAN; the host-to-router
interaction is the same in a mesh-under and route-over configuration.</t>




<section anchor="Optimization" title="Extensions to RFC4861">



<t>This document specifies the following optimizations and extensions
to IPv6 Neighbor Discovery <xref target="RFC4861"/>:


<list style="symbols">

	

<t>Host initiated refresh of Router Advertisement information. This 
removes	the need for periodic or unsolicited Router Advertisements from 
routers to hosts.</t>

	

<t>No Duplicate Address Detection (DAD) is performed if EUI-64 based
IPv6 addresses are used (as these addresses are assumed to be globally unique).</t>

	

<t>DAD is optional if DHCPv6 is used to assign addresses.</t>

	

<t>A New Address Registration mechanism using new Address Registration
option between hosts and routers. This removes the need for Routers to
use multicast Neighbor Solicitations to find hosts, and supports sleeping
hosts. This also enables the same IPv6 address prefix(es) to be 
used across a route-over 6LoWPAN. It provides the host-to-router interface 
for Duplicate Address Detection. </t>

	

<t>A new optional Router Advertisement option for Context information used by
6LoWPAN header compression.</t>

	

<t>A new optional mechanism to perform Duplicate Address Detection
across a route-over 6LoWPAN using the new Duplicate Address Request and
Confirmation messages.</t>

	

<t>New optional mechanisms to distribute Prefixes and Context
information across a route-over network which uses a new Authoritative Border
Router option to control the flooding of configuration changes.</t>

	

<t>A few new default protocol constants are introduced and some
existing Neighbor Discovery protocol constants are tuned.</t>


</list>

</t>



</section>




<section anchor="Addr-assign" title="Address Assignment">



<t>Hosts in a 6LoWPAN configure their IPv6 address as specified in
<xref target="RFC4861"/> and <xref target="RFC4862"/> based on the information
received in Router Advertisement messages. The use of the M flag in this optimization is however more restrictive than in <xref target="RFC4861"/>. When the M flag is set a host is required to use DHCPv6 to assign any non-EUI-64 addresses. When the M flag is not set, the LoWPAN is required to support duplicate address detection, thus a host can then safely use the address registration mechanism to check non-EUI-64 addresses for uniqueness.</t>



<t>6LRs MAY use the same mechanisms to configure their IPv6
addresses.</t>



<t>The 6LBRs are responsible for managing the prefix(es) assigned to the
6LoWPAN, using manual configuration, DHCPv6 Prefix Delegation 
<xref target="RFC3633"/>, or other mechanisms. 
In an isolated LoWPAN a ULA <xref target="RFC4193"/> prefix SHOULD
be generated by the 6LBR.</t>



</section>



<section anchor='overview_hr' title="Host-to-Router Interaction">

<t>A host sends Router Solicitation messages at startup and
also when it suspects that one of its default routers has become
unreachable (after Neighbor Unreachability Detection towards the router fails).
</t>



<t>Hosts receive Router Advertisement messages typically containing the Authoritative Border Router option
(ABRO) and may optionally contain one or more 6LoWPAN Context options (6CO) 
in addition to the existing Prefix Information options (PIO) as described 
in <xref target="RFC4861"/>.</t>



<t>When a host has configured a non-link-local IPv6 address, it registers
that address with one or more of its default routers using the Address Registration option (ARO) in an NS message. The host chooses a lifetime of the registration
and repeats the ARO option periodically (before the lifetime runs out) to maintain the registration. The lifetime should be chosen in such a way as to maintain the registration even while a host is sleeping. Likewise, mobile nodes that change their point of attachment often, should use a suitably short lifetime. </t>



<t>The registration can fail (an ARO option returned to the host with a non-zero
Status) if the router determines that the IPv6 address is already used
by another host, that is, is used by a host with a different EUI-64.
This can be used to support non-EUI-64 based addresses such as temporary
IPv6 addresses <xref target="RFC4941"/> or addresses based on an Interface ID
that is a IEEE 802.15.4 16-bit short addresses.
Failure can also occur if the Neighbor Cache on that router is full.</t>



<t>The re-registration of an address can be combined with Neighbor
Unreachability Detection (NUD) of the router since both use unicast Neighbor Solicitation messages. This makes things efficient when a host wakes up
to send a packet and both need to perform NUD to check that the router
is still reachable, and refresh its registration with the router.</t>



<t>The response to an address registration might not be immediate since
in route-over configurations the 6LR might perform Duplicate Address Detection
against the 6LBR. A host retransmits the Address Registration option
until it is
acknowledged by the receipt of a Address Registration option.</t>



<t>As part of the optimizations, Address Resolution is not performed by 
multicasting Neighbor Solicitation messages as in <xref target="RFC4861"/>.
Instead, the routers maintain Neighbor Cache entries for all registered 
IPv6 addresses. If the address is not in the Neighbor Cache in the router, then
the address either doesn't exist, or is assigned to a host attached to some other router
in the 6LoWPAN, or is external to the 6LoWPAN. In a route-over configuration the routing protocol is used to route such packets toward the destination.</t>
      

</section>



<section anchor='overview_rr' title="Router-to-Router Interaction">



<t>The optional new router-to-router interaction is only for the route-over
configuration where 6LRs are present. It is optional in this protocol since the
functions it provides might be better provided by other protocol mechanisms,
be it DHCPv6, link-layer mechanisms, the routing protocol, or something else. It is however assumed that all 6LRs in a network are configured to perform these functions homogeneously. Some mechanisms from this protocol might be used for router-to-router interaction, while
others are provided by other protocols. For instance, context information
and/or prefix information might be disseminated using this protocol, while
Duplicate Address Detection is done using some other protocol.</t>



<t>6LRs MAY act like a host during system startup and prefix configuration
by sending Router Solicitation messages and autoconfiguring their IPv6 addresses unlike routers in <xref target="RFC4861"/>.</t>



<t>When multihop prefix or context dissemination is used then the 6LRs
store the ABRO, 6CO and Prefix Information received (directly or indirectly)
from the 6LBRs
and redistribute this information in the Router
Advertisement they send to other 6LRs or send to hosts in response to a
Router Solicitations. There is a version number field in the ABRO which
is used to limit the flooding of updated information between the 6LRs.</t>



<t>Optionally the 6LRs can perform Duplicate Address Detection
against one or more 6LBRs using the new Duplicate Address Request (DAR) and 
Confirmation (DAC) messages, which carry the information from the 
Address Registration option. The DAR and DAC messages
will be forwarded between the 6LR and
6LBRs thus the <xref target="RFC4861"/> rule for checking hop limit=255 does 
not apply to the DAR and DAC messages. Those multihop DAD messages MUST NOT 
modify any Neighbor Cache entries on the routers since we do not have the 
security benefits provided by the hop limit=255 check.</t>



</section>

<section anchor='nce_management' title="Neighbor Cache Management">

<t>The use of explicit registrations with lifetimes plus the desire to
not multicast Neighbor Solicitation messages for hosts imply that we
manage the Neighbor Cache entries slightly differently than in
<xref target="RFC4861"/>. This results in three different types of
NCEs and the types specify how those entries can be removed:
 <list style='hanging' hangIndent='22'>
  <t hangText="Garbage-collectible: "> Entries that are subject to the normal
rules in <xref target="RFC4861"/> that allow for garbage collection when
low on memory. </t>
  <t hangText="Registered: "> Entries that have an explicit registered lifetime and are kept until this lifetime expires or they are explicitly unregistered. </t>
  <t hangText="Tentative: "> Entries that are temporary with a short lifetime, which typically get converted to Registered entries.</t>
 </list>
Note that the type of the NCE is orthogonal to the states specified in <xref target="RFC4861"/>.
</t>

<t>When a host interacts with a router by sending Router Solicitations this
results in a Tentative NCE. Once a node successfully registers with a Router 
the result is a Registered NCE. As Routers send RAs to hosts, and when routers
optionally receive RA messages or receive multicast NS messages from other Routers the
result is Garbage-collectible NCEs. There can only be one kind of NCE for an IP address at a time.</t>

<t>Neighbor Cache entries on Routers can additionally be added or deleted by a routing protocol used in the 6LoWPAN. This is useful if the routing protocol
carries the link-layer addresses of the neighboring routers. Depending on the 
details of such routing protocols such NCEs could be either Registered or
Garbage-collectible.</t>

</section>

</section>


	


    <!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<section anchor='message_options' title="New Neighbor Discovery Options and Messages">

	<t>This section defines new Neighbor Discovery message options used by this specification. The Address Registration Option is mandatory, whereas the Authoritative Border Router Option and 6LoWPAN Context Option are optional. This section also defines the optional and new Duplicate Address Request and Confirmation messages.</t>

	<section anchor="ARO" title="Address Registration Option">
	
	<t>
	The routers need to know the set of host IP addresses that are directly reachable and their corresponding link-layer addresses. This
	needs to be maintained as the radio reachability changes. For this purpose an Address Registration Option (ARO) is introduced, which can be included in unicast Neighbor Solicitation (NS) messages sent by
	hosts. Thus it can be included in the unicast NS messages that a host
	sends as part of Neighbor Unreachability Detection to determine that it can still reach a default router.
	The ARO is used by the receiving router to reliably maintain its Neighbor Cache. The same option is included in corresponding Neighbor Advertisement (NA) messages with a Status field indicating the success or failure of the registration. This option is always host initiated.</t>

<t>The information contained in the ARO is also included in optional multihop DAR and DAC messages used between 6LRs to 6LBRs, but the option itself is not used in those messages.
	</t>
	
	<t>
	The ARO is required for reliability and power saving. The lifetime field provides flexibility to the host to register an address which should be usable (continue to be advertised by the 6LR in the routing protocol etc.) during its intended sleep schedule.
	</t>
	
	<t>
	The sender of the NS also includes the EUI-64 <xref target="EUI64"/> of the interface it is registering an address from. This is used as a unique ID for the detection of duplicate addresses. It is used to tell the difference between the same node re-registering its address and a different node (with a different EUI-64) registering an address that is already in use by someone else. The EUI-64 is also used to deliver an NA carrying an error Status code to the EUI-64 based link-local IPv6 address of the host (see <xref target="errors"/>).
	
	</t>

	<t>
	When the ARO is used by hosts an SLLA option MUST be included and the 

<!-- Carsten suggests making the SLLA option a MUST on when there is no mapping between the IP address and link-layer address. In other words, SLLA is the exception to the rule in 6loWPAN. -->	
	
	address 
that is to be registered MUST be the IPv6 source
address of the Neighbor Solicitation message.
	</t>

	<figure>
	 <artwork><![CDATA[
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Type      |   Length = 2  |    Status     |   Reserved    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Reserved            |     Registration Lifetime     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
+                            EUI-64                             +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	]]></artwork>
	</figure>
	<t>Fields:
	
<!-- Zach: Should we add a new "Sleeping Flag". If set, this indicates the node will likely be unreachable during the lifetime. If not set, the node will be reachable and thus unreachability detection can be applied... Would take a lot of guess-work out of that for the router! -->  	
	
	 <list style='hanging' hangIndent='15'>
	  <t hangText="Type:"> TBD1</t>
	  <t hangText="Length:"> 8-bit unsigned integer.
	The length of the option in units of 8 bytes. Always 2.</t>
	  <t hangText="Status:"> 8-bit unsigned integer.
	Indicates the status of a registration in the NA response. MUST be set to 0 in NS messages. See below.</t>
	  <t hangText="Reserved:"> This field is unused.
	It MUST be initialized to zero by the sender and MUST be ignored by the
	receiver.</t>
	  <t hangText="Registration Lifetime:"> 16-bit unsigned integer.
	The amount of time in a unit of 10 seconds that the router should retain the Neighbor Cache entry for the sender of the NS that includes this option. </t>
	<t hangText="EUI-64:">64 bits. This field is used to uniquely identify the
      interface of the registered address by including the EUI-64 identifier <xref target="EUI64"/> assigned to it unmodified.</t>    
      
	 </list>
	</t>
 <t>The Status values used in Neighbor Advertisements are:
</t>

 
 <texttable anchor='status codes'>
 
 <ttcol align='center'> Status </ttcol>
 <ttcol align='center'> Description</ttcol>
 
 <c>0</c> <c>Success</c>
 
 <c>1</c> <c>Duplicate Address</c>
 
 <c>2</c> <c>Neighbor Cache Full</c>
 <c>3-255</c> <c>Allocated using Standards Action <xref target="RFC2434"/></c>

 </texttable>
	
	</section>

	     <section anchor='6CO' title="6LoWPAN Context Option">

	       <t>
	         The optional 6LoWPAN Context Option (6CO) carries prefix information for 
	         LoWPAN header compression, and is similar
	         to the Prefix Information Option of <xref target="RFC4861"/>.
                 However, the prefixes can be remote as well as local to the LoWPAN since header compression potentially applies to all IPv6 addresses. This option allows for the dissemination of multiple contexts
	         identified by a Context Identifier (CID) for use as specified in <xref target="I-D.ietf-6lowpan-hc"/>. A context may be a prefix of any length or an address (/128), and up to 16 6LoWPAN Context options may be carried in an Router Advertisement message. 
	       </t>

	       <figure anchor='6co_format' title="6LoWPAN Context Option format">
		 <artwork>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Type      |     Length    |Context Length | Res |C|  CID  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            Reserved           |         Valid Lifetime        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
.                                                               .
.                       Context Prefix                          .
.                                                               .
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
		 </artwork>
	       </figure>

	       <t>
		 <list style="hanging">
		   <t hangText="Type:">
		     TBD2
		   </t>
		   <t hangText="Length:">
		     8-bit unsigned integer. The length of the option
                 (including the type and length fields) in units
                 of 8 bytes. May be 2 or 3 depending on the
                 length of the Context Prefix field.
		   </t>
		   <t hangText="Context Length:">
		    8-bit unsigned integer.  The number of leading bits
     		    in the Context Prefix field that are valid.  The value ranges from 0 to 128. If it is more than 64 then the Length MUST be 3.
		   </t>
		   <t hangText="C:">
		   1-bit context compression flag. This flag indicates if the context is valid for use in compression.  A context that is not valid MUST NOT be used for compression, but SHOULD be used in decompression in case another compressor has not yet received the updated context information. This flag is used to manage the context lifecycle based on the recommendations in <xref target="context_management"/>.
		   </t>
		   <t hangText="CID:">
		     4-bit Context Identifier for this prefix information. CID is used
		     by context based header compression specified in <xref target="I-D.ietf-6lowpan-hc"/>. The
		     list of CIDs for a LoWPAN is configured by on the 6LBR that originates the context information for the 6LoWPAN.
		   </t>
		   <t hangText="Res, Reserved:">
		     This field is unused. It MUST be initialized to
		     zero by the sender and MUST be ignored by the
		     receiver.
		   </t>
		   <t hangText="Valid Lifetime:">
		     16-bit unsigned integer.  The length of time in
                     a unit of 10 seconds (relative to the time the packet is received)
                     that the context is valid for the purpose of header compression or decompression. A value of all zero bits (0x0) indicates that this context entry MUST be removed immediately.
		   </t>
		   <t hangText="Context Prefix:">
		     The IPv6 prefix or address corresponding to the Context ID (CID) field. The valid length of this field is included in the Context Length field. This field is padded with zeros in order to make the option a multiple of 8-bytes.
		   </t>
		 </list>
	       </t>
	     </section>

	<section anchor='ABRO' title="Authoritative Border Router Option">
<t>The optional Authoritative Border Router Option (ABRO) is needed when Router
Advertisement (RA) messages are used to disseminate prefixes and context information across
a route-over topology.
In this case 6LRs receive Prefix Information options from other 6LRs.
	This implies that a 6LR can't just let the most recently received RA win. 
	In order to be able to reliably add and remove prefixes from the 6LoWPAN we 
	need to carry information from the authoritative 6LBR. 
	This is done by introducing a version number which the 6LBR sets and 6LRs propagate as they propagate the prefix and context information with this Authoritative Border Router Option. When there are multiple 6LBRs they would have 
	separate version number spaces. Thus this option needs to carry the IP address of
	the 6LBR that originated that set of information.
	</t>
	<t>
	The Authoritative Border Router option MUST be included in all Router Advertisement
	messages in the case when Router Advertisements are used to propagate
information between routers (as described in <xref target="optional_dad"/>).
	</t>
	
	<figure>
	 <artwork><![CDATA[
 0                   1                   2                   3   
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Type      |  Length = 3   |        Version Number         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            Reserved                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
+                                                               +
|                                                               |
+                          6LBR Address                         +
|                                                               |
+                                                               +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	]]></artwork>
	</figure>
	<t>Fields:
	 <list style='hanging' hangIndent='15'>
	  <t hangText="Type:"> TBD3</t>
	  <t hangText="Length:"> 8-bit unsigned integer.
	The length of the option in units of 8 bytes. Always 3.</t>
	  <t hangText="Version Number:"> 16-bit unsigned integer.
	The version number corresponding to this set of information contained in the RA message. The authoritative 6LBR originating the prefix increases this version number each time its set of prefix or context information changes. This version number uses sequence number arithmetic as it may wrap around.</t>
	  <t hangText="Reserved:"> This field is unused.
	It MUST be initialized to zero by the sender and MUST be ignored by the
	receiver.</t>
	  <t hangText="6LBR Address:"> IPv6 address of the 6LBR that is the origin of the included version number.</t>
	 </list>
	</t>
	
	</section>



<!-- **************************************************************** -->
<!-- **************************************************************** -->
<!-- **************************************************************** -->
<!-- **************************************************************** -->

<section anchor='DARDAC' title="Duplicate Address messages">

<t>For the optional multihop DAD exchanges between 6LR and 6LBR specified in
<xref target="optional_dad"/> there are two new ICMPv6 message types called
the Duplicate Address Request (DAR) and Duplicate Address Confirmation (DAC).
We avoid reusing the Neighbor Solicitation and Neighbor Advertisement messages
for this purpose since these messages are not subject to the hop limit=255 
check as they are forwarded by intermediate 6LRs. The information contained
in the messages are otherwise the same as would be in a Neighbor Solicitation
carrying a Address Registration option, with the message format inlining the
fields that are in the ARO.</t>

<t>The DAR and DAC use the same message format with different ICMPv6 type 
values, and the Status field is only meaningful in the DAC message.</t>

	<figure>
	 <artwork><![CDATA[
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Type      |     Code      |          Checksum             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Status     |   Reserved    |     Registration Lifetime     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
+                            EUI-64                             +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
+                                                               +
|                                                               |
+                       Registered Address                      +
|                                                               |
+                                                               +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	]]></artwork>
	</figure>
	<t>IP fields:
	 <list style='hanging' hangIndent='15'>
	  <t hangText="IPv6 source:"> A non link-local address of the sending
router.</t>
	  <t hangText="IPv6 destination:"> A non link-local address of the 
sending router. In a DAC this is just the source from the DAR.</t>
	  <t hangText="Hop Limit:"> Set to MULTIHOP_HOPLIMIT on transmit.
MUST be ignored on receipt.</t>
</list>
</t>
	<t>ICMP Fields:
	 <list style='hanging' hangIndent='15'>
	  <t hangText="Type:"> TBD4 for DAR and TBD5 for DAC</t>
	  <t hangText="Code:"> Set to zero on transmit. MUST be ignored on receipt.</t>
	  <t hangText="Checksum:"> The ICMP checksum. See <xref target="RFC4443"/>.</t>
	  <t hangText="Status:"> 8-bit unsigned integer.
	Indicates the status of a registration in the DAC. MUST be set to 0 in DAR. See <xref target="status codes"/>.</t>
	  <t hangText="Reserved:"> This field is unused.
	It MUST be initialized to zero by the sender and MUST be ignored by the
	receiver.</t>
	  <t hangText="Registration Lifetime:"> 16-bit unsigned integer.
	The amount of time in a unit of 10 seconds that the router should retain the Neighbor Cache entry for the sender of the NS that includes this option. A value of 0 indicates in an NS that the neighbor cache entry should be removed.</t>
	<t hangText="EUI-64:">64 bits. This field is used to uniquely identify the
      interface of the registered address by including the EUI-64 identifier <xref target="EUI64"/> assigned to it unmodified.</t>    
      
	<t hangText="Registered Address:">128-bit field. Carries the host address, which was contained in the IPv6 Source field in the NS that contained the ARO option sent by the host.</t>
	 </list>
	</t>

</section>
	</section>



	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<section anchor='host' title="Host Behavior">

	
	
	<t>Hosts in a LoWPAN use the Address Registration option in the Neighbor Solicitation messages they send as a way to maintain the Neighbor Cache in the routers
thereby removing the need for multicast Neighbor Solicitations to do address resolution. Unlike in <xref target="RFC4861"/> the hosts initiate updating
the information they receive in Router Advertisements by sending Router
Solicitations before the information expires. Finally, when Neighbor Unreachability
Detection indicates that one or all default routers have become unreachable, then
the host uses Router Solicitations to find a new set of default routers.</t>


		
		<section title="Forbidden Actions">


		
		<t>A host in a 6LoWPAN MUST NOT accept a Redirect message. Redirect
messages are problematic on a link with non-transitive reachability.</t>

<t>A host would never multicast a Neighbor Solicitation message.</t>

		
		</section>


		
		<section anchor='host_interface' title="Interface Initialization">


		
		<t>When the interface on a host is initialized it follows the specification in
<xref target="RFC4861"/>. A link-local address is formed based on the EUI-64 identifier <xref target="EUI64"/> assigned
to the interface as per <xref target="RFC4944"/> or the appropriate IP-over-foo document for the link, and then the host sends Router Solicitation messages as described in <xref target="RFC4861"/> Section 6.3.7.</t>

		
		<t>There is no need to join the Solicited-Node multicast address since nobody
multicasts Neighbor Solicitations in this type of network. A host MUST join the all-nodes multicast address.</t>
		
		</section>


		
		<section anchor='host_sending_rs'
 title="Sending a Router Solicitation">


		
		<t>The Router Solicitation is formatted as specified in <xref target="RFC4861"/> and
sent to the IPv6 All-Routers multicast address (see <xref target="RFC4861"/> Section 6.3.7 for details). An SLLA option MUST be included to enable unicast Router Advertisements in response. An unspecified source address MUST NOT be used in RS messages.</t>

		
<!-- Carsten suggests that the SLLA is a MUST only if there is no direct IP address link-layer address mapping. Same comment as with the NS. -->
		
		
<t>If the link layer supports a way
to send packets to some kind of all-routers anycast link-layer address, then that MAY be
used to convey theses packets to a router.</t>

<t>Since hosts do not depend on multicast Router Advertisements to discover
routers, the hosts need to intelligently retransmit Router Solicitations 
whenever the default router list is empty, one of its default routers becomes unreachable,
or the lifetime of the prefixes and contexts in the previous RA are about to
expire. The RECOMMENDED retransmissions it to initially send up to 3 (MAX_RTR_SOLICITATIONS) RS messages separated by at
least 10 seconds (RTR_SOLICITATION_INTERVAL) as specified in
<xref target="RFC4861"/>, and then switch to slower retransmissions. After the
initial retransmissions the host SHOULD do binary exponential backoff of the
retransmission timer for each subsequent retransmission. However, it is
useful to have a maximum retransmission timer of 60 seconds 
(MAX_RTR_SOLICITATION_INTERVAL). In all cases the RS retransmissions are
terminated when a RA is received.</t>

		
		</section>


		
		<section title="Processing a Router Advertisement">


		
		<t>The processing of Router Advertisements is as in <xref target="RFC4861"/> with
the addition of handling the 6LoWPAN Context option and triggering address registration when a new address has been configured. Furthermore, the SLLA option MUST be included in the RA. Unlike in <xref target="RFC4861"/>, the maximum value of the RA Router Lifetime field MAY be up to 0xFFFF (approximately 18 hours).</t>


		
		<t>Should the host erroneously receive a Prefix Information option with the 'L' 
(on-link) flag set, then that Prefix Information Option (PIO) MUST be ignored.</t>


		
		<section title="Address configuration">


		
		<t>Address configuration follows <xref target="RFC4862"/>. For an address not derived from an EUI-64, the M flag of the RA determines how the address can be configured. If the M flag is set in the RA, then DHCPv6 MUST be used to assign the address. If the M flag is not set, then the address can be configured by any other means (and duplicate detection is performed as part of the registration process).</t>
		
		<t>Once an address has been
configured it will be registered by unicasting a Neighbor Solicitation with the Address
Registration option to one or more routers.</t>
		
		</section>



		
		<section title="Storing Contexts">

 
		
		<t>The host maintains a conceptual data structure for the context information
it receives from the routers, which is called the Context Table. 
This includes the Context ID, the prefix (from the 
Context Prefix field in the 6CO), the Compression bit, and the Valid Lifetime.
A Context Table entry
that has the Compression bit clear is used for decompression when receiving
packets, but MUST NOT be used for compression when sending packets.</t>


		
		<t>When a 6CO option is received in a Router Advertisement it is used to add or
update the information in the Context Table. If the Context ID field in the
6CO matches an existing Context Table entry, then that entry is updated with the
information in the 6CO. If the Valid Lifetime field in the 6CO is zero, then the 
entry is immediately deleted.</t>

		
		<t>If there is no matching entry in the Context Table, and the Valid Lifetime
field is non-zero, then a new context is added to the Context Table. The 6CO is used
to update the created entry.</t>


		
		<t>
		When the 6LBR changes the context information a host might not immediately
notice. And in the worst case a host might have stale context information. For this reason 6LBRs use the recommendations in <xref target="context_management"/> for carefully managing the context lifecycle. Nodes should be careful about using header compression in RA messages that include 6COs.
		</t>
		
		</section>


		
		<section title="Maintaining Prefix and Context Information">


		
		<t>The prefix information is timed out as specified in <xref target="RFC4861"/>.
When the Valid Lifetime for a Context Table entry expires the entry is deleted.</t>



<!-- Carsten: The meaningful thing would be to set C=0, but this does not mesh with the handling if lifetime=0 is received. -->
		
		<t>A host should inspect the various lifetimes to determine when it should next initiate sending a Router Solicitation to ask for any updates to the information. The
lifetimes that matter are the Default Router lifetime, the Valid Lifetime in the
Prefix Information options, and the Valid Lifetime in the 6CO. The host SHOULD unicast
one or more Router Solicitations to the router well before the minimum of those lifetimes (across all the prefixes
and all the contexts) expire, and switch to multicast RS messages if there
is no response to the unicasts. The retransmission behavior for the Router Solicitations is specified in section <xref target='host_sending_rs'/>.</t>


		
		</section>



		
	</section>



	
	<section anchor='host_registration'
title="Registration and Neighbor Unreachability Detection">


	
	<t>Hosts send Unicast Neighbor Solicitation (NS) messages to register their IPv6 addresses, and also to do NUD to verify that their default routers are still reachable. The registration is performed by the host including
an ARO in the Neighbor Solicitation it sends. Even if the host doesn't have 
data to send, but is
expecting others to try to send packets to the host, the host needs to maintain
its Neighbor Cache entries in the routers. This is done by sending NS messages with the ARO to the router well in advance of the registration lifetime expiring. NS messages are retransmitted up to MAX_UNICAST_SOLICIT times using a minimum timeout of RETRANS_TIMER until the host receives an Neighbor Advertisement message with an ARO option. </t>



	<t>Hosts that receive Router Advertisement messages from multiple default routers
SHOULD attempt to register with more than one of them in order to increase the robustness
of the network.</t>


	
	<t>Note that Neighbor Unreachability Detection probes can be suppressed by Reachability Confirmations from transport protocols or applications
as specified in <xref target="RFC4861"/>.</t>

		

	<t>When a host knows it will no longer use a router it is registered, it SHOULD de-register with the router by sending an NS with an ARO containing a lifetime of 0. </t>
	
	<section anchor='host_ns' title="Sending a Neighbor Solicitation">


		
		<t>The host triggers sending Neighbor Solicitation (NS) messages containing an ARO when a new address is configured, when it discovers a new default router, or well before
the Registration Lifetime expires. Such an NS MUST include a Source Link-Layer Address (SLLA) option, 

<!-- Again the comment from Carsten on SLLA -->		
		
		since
the router needs to record the link-layer address of the host. An unspecified source address MUST NOT be used in NS messages.</t>


		
		</section>



		
		<section title="Processing a Neighbor Advertisement">


		
		<t>A host handles Neighbor Advertisement messages as specified in <xref target="RFC4861"/>, with added logic described in this section for handling the Address Registration option.</t>
		
		<t>
		In addition to the normal validation of a Neighbor Advertisement and its options, the Address Registration option is verified as follows (if present). If the Length field is not two, the option is silently ignored. If the EUI-64 field does not match the EUI-64 of the interface, the option is silently ignored. 
		</t>
		<t>
		If the status field is zero, then the address registration was successful. The host saves the Registration Lifetime from the Address Registration option for use to trigger a new NS well before the lifetime expires. If the Status field is not equal to zero, the address registration has failed.
		</t>

		
		</section>



		
		<section title="Recovering from Failures">


		
		<t>The procedure for maintaining reachability information about a neighbor is the same as in <xref target="RFC4861"/> Section 7.3 with the exception that address resolution is not performed. </t>

		
		<t>The address registration procedure may fail for two reasons: no response to Neighbor Solicitations is received (NUD failure), or an Address Registration option with a failure Status (Status > 0) is received. In the case of NUD failure the entry for that router will be removed thus address registration is no longer of importance. When an Address Registration option with a non-zero Status field is received this indicates that registration for that address has failed. A failure Status of one indicates that a duplicate address was detected and the procedure described in <xref target="RFC4862"/> Section 5.4.5 is followed. The host MUST NOT use the address it tried to register. If the host has valid registrations with other routers, these MUST be removed by registering with each using a zero ARO lifetime. </t>
		
		<t>
		A Status code of two indicates that the Neighbor Cache of that router is full. In this case the host SHOULD remove this router from its default router list and attempt to register with another router. If the host has no
more default routers it needs to revert to sending Router Solicitations as specified in section <xref target='host_sending_rs'/>.</t>
		
		<t>
		Other failure codes may be defined in future documents. 
		</t>
		
		</section>



		
	</section>


	
	<section title="Next-hop Determination">

	
	  <t>
	  The IP address of the next-hop for a destination is determined as follows. Destinations to the link-local prefix (FE80::) are always sent on the link to that destination. It is assumed that link-local addresses are formed as specified in <xref target="host_interface"/> from the EUI-64, and address resolution is not performed.
	  </t>
	  
	  <t>All other prefixes are assumed to be off-link <xref target="RFC5889"/>. Anycast addresses are always considered to be off-link. They are therefore sent to one of the routers in the Default Router List.
	  </t>
	  <t>
	  Multicast addresses are considered to be on-link and are resolved as specified in <xref target="RFC4944"/> or the appropriate IP-over-foo document.</t>

<t>A LoWPAN Node is not required to maintain a minimum of one buffer per neighbor as specified in <xref target="RFC4861"/>, since packets are never queued while waiting for address resolution. </t>
	
	</section>



	
	<section title="Address Resolution">

	
	  <t>
	  The address registration mechanism and the SLLA option in Router Advertisement messages provide sufficient a priori state in routers and hosts to resolve an IPv6 address to its associated link-layer address. As all prefixes but the link-local prefix are always assumed to be off-link, multicast-based address resolution between neighbors is not needed.
	  </t>
	  <t>
	  Link-layer addresses for neighbors are stored in Neighbor Cache entries <xref target="RFC4861"/>.
In order to achieve LoWPAN compression, most global addresses are formed using
a link-layer address. Thus a host can minimize memory usage by optimizing
for this case and only storing link-layer address information if it differs
from the link-layer address corresponding to the Interface ID of the
 IPv6 address (i.e., differs in more than the on-link/global bit being inverted).
	  </t>
	
	</section>



	
	<section title="Sleeping">


	
	<t>It is often advantageous for battery-powered hosts in LoWPANs to keep a low duty cycle. The optimizations described in this document enable hosts to sleep as described further in this section. Routers may want to cache traffic destined to a host which is sleeping, but such functionality is out of the scope of this document.</t>


	
		<section title="Picking an Appropriate Registration Lifetime">

		
		<t>As all Neighbor Discovery messages are initiated by the hosts, this allows a host to sleep or otherwise be unreachable between NS/NA message exchanges. The Address Registration option attached to NS messages indicates to a router to keep the Neighbor Cache entry for that address valid for the period in the Registration Lifetime field. A host should choose a sleep time appropriate for its energy characteristics, and set a registration lifetime larger than the sleep time to ensure the registration is renewed successfully (considering e.g. clock drift and additional time for potential retransmissions of the re-registration). A host should also consider the stability of the network (how quickly the topology changes) when choosing its sleep time (and thus registration lifetime). A dynamic network requires a shorter sleep time so that routers don't keep invalid neighbor cache entries for nodes longer than necessary.</t>


		
		</section>



		
		<section title="Behavior on Wakeup">

		
		<t>When a host wakes up from a sleep period it SHOULD maintain its current address registrations that will timeout before the next wakeup. This is done by sending Neighbor Solicitation messages with the Address Registration option as described in <xref target="host_ns"/>. The host may also need to refresh its prefix and context information by sending a new unicast Router Solicitation (the maximum Router Lifetime is about 18 hours whereas the maximum Registration lifetime is about 7 days). If after wakeup the host (using NUD) determines that some or all previous default routers have become unreachable, then the host will send multicast Router Solicitations to discover new default router(s) and restart the address registration process.</t>



<!-- Carsten: Is there an assumption that every RA will contain the entire context, i.e., up to 16 6COs?  If not, one RS may not be enough - when has a
host sufficiently tried refreshing that info? 
 -->
		
		</section>



		
	</section>


	
	</section>



	



	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<section anchor='router' title="Router Behavior for 6LR and 6LBR">


	
	<t>Both 6LRs and 6LBRs maintain the Neighbor Cache <xref target="RFC4861"/>
based on the Address Registration Options they receive in Neighbor Advertisement
messages from hosts, Neighbor Discovery packets from other nodes, and 
potentially a routing protocol used in the 6LoWPAN as outlined in
<xref target="nce_management"/>.</t>


	
	<t>The routers SHOULD NOT garbage collect Registered Neighbor Cache entries (see <xref target="overview_rr"/>) since
they need to retain them until the Registration Lifetime expires. Similarly,
if Neighbor Unreachability Detection on the router determines that the host is UNREACHABLE (based on the logic in <xref target="RFC4861"/>), the
Neighbor Cache entry SHOULD NOT be deleted but be retained until the 
Registration Lifetime expires. A renewed ARO should mark the cache entry as
STALE. Thus for 6LoWPAN Routers the Neighbor Cache doesn't behave like a
cache. Instead it behaves as a registry of all the host addresses that are
attached to the Router.</t>


	
	<t>Routers MAY implement the Default Router Preferences <xref target="RFC4191"/> and
use that to indicate to the host whether the router is a 6LBR or a 6LR. If this is
implemented then 6LRs with no route to a border router MUST set Prf to (11) for
low preference, other 6LRs MUST set Prf to (00) for normal preference, and 6LBRs MUST
set Prf to (01) for high preference.</t>


	
	<section title="Forbidden Actions">


	
	<t>A router SHOULD NOT send Redirect messages. Since the link has non-transitive
reachability the router has no way to determine that the recipient of a Redirect
message can reach the link-layer address.</t>


	
	<t>A router MUST NOT set the 'L' (on-link) flag in the Prefix Information options,
since that might trigger hosts to send multicast Neighbor Solicitations.</t>


	
	</section>


	
	<section title="Interface Initialization">


	
	<t>A router initializes its interface more or less as in <xref target="RFC4861"/>.
However, a 6LR might want to wait to make its interfaces advertising (implicitly 
keeping the AdvSendAdvertisements flag clear) until it has received the prefix(es)
and context information from its 6LBR. That is independent of whether prefixes and 
context information is disseminated using the methods specified in this document,
or using some other method.</t>


	
	</section>


	
	<section title="Processing a Router Solicitation">


	
	<t>A router processes Router Solicitation messages as specified in
<xref target="RFC4861"/>. The differences relate to the inclusion of Authoritative
Border Router options in the Router Advertisement (RA) messages, and the exclusive use of unicast Router Advertisements. If a 6LR has received an ABRO
from a 6LBR, then it will include that option unmodified in the
Router Advertisement messages it sends.  And if the 6LR has received RAs, whether with the same prefixes and
context information or different, from a different 6LBR, then it will
need to keep those prefixes and context information separately so
that the RAs the 6LR sends will maintain the association between the
ABRO and the prefixes and context information. The router can tell
which 6LBR originated the prefixes and context information from the
6LBR Address field in the ABRO. When a router has 
information tied to multiple ABROs, a single RS will result in multiple RAs each containing a different ABRO.</t>


<!-- Carsten: A little motivation might help here. -->	
	
	
<t>A Router Solicitation might be received from a host that has not yet registered its address with the router. Thus the router MUST NOT modify an existing Neighbor Cache entry based on the SLLA option from the Router Solicitation. However, a router MAY create a Tentative Neighbor Cache entry based on the SLLA option. Such a Tentative Neighbor Cache entry SHOULD be timed out in TENTATIVE_NCE_LIFETIME seconds unless
a registration converts it into a Registered NCE.</t>

	
	<t>A 6LR or 6LBR MUST include a Source Link-layer address option in the Router Advertisements it sends. That is required so that the hosts will know the
link-layer address of the router. Unlike in <xref target="RFC4861"/>, the maximum value of the RA Router Lifetime field MAY be up to 0xFFFF (approximately 18 hours).</t>


	
	<t>
	Unlike <xref target="RFC4861"/> which suggests multicast Router Advertisements, this specification optimizes the exchange by always unicasting RAs in response to RSs. This is possible since the RS always includes a SLLA option, which is used by the router to unicast the RA. 
	</t>
	
	</section>


	
	<section title="Periodic Router Advertisements">


	
	<t>A router does not need to send any periodic Router Advertisement messages
since the hosts will solicit updated information by sending Router Solicitations
before the lifetimes expire.</t>

<t>However, if the routers use Router Advertisements to optionally
distribute prefix and/or context information across a route-over topology, 
that might require periodic Router Advertisement messages. Such RAs are sent using the configurable MinRtrAdvInterval and MaxRtrAdvInterval as per <xref target="RFC4861"/>.</t>


	
	</section>


	
	<section anchor='router_ns' title="Processing a Neighbor Solicitation">


	
	<t>A router handles Neighbor Solicitation messages as specified in 
<xref target="RFC4861"/>, with added logic described in this section for handling
the Address Registration option.</t>


	
	<t>In addition to the normal validation of a Neighbor Solicitation and its options,
the Address Registration option is verified as follows (if present). If the Length field is not two, or if the Status field is not zero, then the Neighbor Solicitation is silently ignored.</t>


	
	<t>If the source address of the NS is the unspecified address, or if no SLLA option is included, then any included ARO
is ignored, that is, the NS is processed as if it did not contain an ARO.</t>

	
	<section anchor='duplicate' title="Checking for Duplicates">


	
	<t>If the NS contains a valid ARO, then the router inspects its Neighbor Cache
on the arriving interface to see if it is a duplicate. If there is no Neighbor Cache
entry for the IPv6 source address of the NS, then it isn't a duplicate. If there is such a Neighbor Cache entry
and the EUI-64 is the same, then it isn't a duplicate either. Otherwise it is a duplicate address. Note that if multihop DAD (<xref target="optional_dad"/>) is used then the checks are slightly different to take into account
Tentative Neighbor Cache entries. In the case it is a duplicate address then the router responds with a unicast
Neighbor Advertisement (NA) message with the ARO Status field set to one (to indicate the address is a duplicate) as described in <xref target="errors"/>. In this case there is no modification
to the Neighbor Cache. </t> 
	
	</section>


	
	<section anchor='errors' title="Returning Address Registration Errors">

	
	<t> Address registration errors are not sent back to the source address of the NS due to a possible risk of L2 address collision. Instead the NA is sent to the link-local IPv6 address with the IID part derived from the EUI-64 field of the ARO as per <xref target="RFC4944"/>. In particular, this means that the universal/local bit needs to be inverted. The NA is formatted with a copy of the ARO from the NS, but with the Status
field set to indicate the appropriate error. </t>
	
	
	</section>
	
	
	<section anchor='router_cache' title="Updating the Neighbor Cache">


	
	<t>If ARO did not result in a duplicate address being detected as above, then
if the Registration Lifetime is non-zero
the router creates (if it didn't exist) or updates (otherwise) a Neighbor Cache entry
for the IPv6 source address of the NS. If the Neighbor Cache is full and a new entry needs to be created, then the router responds with a unicast NA with the ARO Status field set to two (to indicate the router's Neighbor Cache is full) as described in <xref target="errors"/>. </t>	
	
	<t>
	The Registration Lifetime and the EUI-64 are
recorded in the Neighbor Cache entry. A unicast Neighbor Advertisement (NA) is then sent
in response to the NS. This NA SHOULD include a copy of the ARO, with the Status
field set to zero. A TLLA option is not required in the NA, since the host already knows the router's link-layer address from Router Advertisements.</t>


	
	<t>If the ARO contains a zero Registration Lifetime then any existing Neighbor
Cache entry for the IPv6 source address of the NS MUST be deleted, and a NA sent as above.</t>

<t>Should the Registration Lifetime in a Neighbor Cache entry expire, then the router
MUST delete the cache entry.</t>

<t>The addition and removal of Registered Neighbor Cache entries would result
in notifying the routing protocol. </t>

<t>Note: If the optional multihop DAD (<xref target="optional_dad"/>)
is used, then the updating of the Neighbor Cache is slightly different due
to Tentative NCEs.</t>

	</section>


	

	<section title="Next-hop Determination">

	
	  <t>
	  In order to deliver a packet destined for a 6LN registered with a router, next-hop determination is slightly different for routers than hosts. The routing table is checked to determine the nexthop IP address. A registered NCE determines if the nexthop IP-address is on-link. It is the responsibility of the
	  routing protocol to maintain on-link information about its registered neighbors. Tentative NCEs MUST NOT be used to maintain on-link status. 
	  </t>
	
	</section>

	
	<section anchor='router_resolution' title="Address Resolution between Routers">

<t>There needs to be a mechanism somewhere for the routers to discover
each other's link-layer addresses. If the routing protocol used between the routers provides this, then there is no need for the routers to use the Address Registration option between each other. Otherwise, the routers MAY use the ARO. When routers use ARO to register with each other and the optional multihop DAD <xref target="optional_dad"/> is in use, then care should be taken to ensure that
there isn't a flood of ARO-carrying messages sent to the 6LBR as each router
hears an ARO from their neighboring routers. The details for this is out of
scope of this document.</t>

<t>Optionally Routers can use multicast Neighbor Solicitations as in 
<xref target="RFC4861"/> to resolve each others link-layer addresses.
Thus Routers MAY multicast Neighbor Solicitations for other routers, for
example as a result of receiving some routing protocol update. 
Routers MUST respond to multicast
Neighbor Solicitations. This implies that Routers MUST join the Solicited-node
multicast addresses as specified in <xref target="RFC4861"/>.</t>
	</section>

	
	</section>


	</section>

	
	
	
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<section anchor='border_router' title="Border Router Behavior">

	
	
	<t>A 6LBR handles sending of Router Advertisements and processing of
Neighbor Solicitations from hosts as specified above in section
<xref target="router"/>. A 6LBR SHOULD always include an Authoritative Border
Router option in the Router Advertisements it sends, listing itself as the 6LBR
Address. That requires that the 6LBR maintain the version number in stable 
storage, and increases the version number when some information in its 
Router Advertisements change. The information whose change affects the version
are in the Prefix Information options (the prefixes or their lifetimes) 
and in the 6CO option (the prefixes, Context IDs, or lifetimes.)</t>
	
	<t>In addition, a 6LBR is somehow configured with the prefix or
prefixes that are assigned to the LoWPAN, and advertises those in Router Advertisements as in <xref target="RFC4861"/>.
Optionally, in the case of route-over, those prefixes can be disseminated
to all the 6LRs using the technique in <xref target="optional_dist"/>. However,
there might be mechanisms outside of the scope of this document that can be used instead
for prefix dissemination with route-over.</t>


	
	<t>If the 6LoWPAN uses Header Compression <xref target="I-D.ietf-6lowpan-hc"/>
with context then the 6LBR needs to manage the context IDs, and advertise those in Router
Advertisements by including 6CO options in its Router Advertisements so that
directly attached hosts are informed about the context IDs. Below we specify things
to consider when the 6LBR needs to add, remove, or change the context information.
Optionally, in the case of route-over, the context information can be disseminated
to all the 6LRs using the technique in <xref target="optional"/>. However,
there might be mechanisms outside of the scope of this document that can be used instead
for disseminating context information with route-over.</t>

	<section anchor='border_router_prefix' title="Prefix Determination">

<t>
The prefix or prefixes used in a LoWPAN can be manually configured, or can be
acquired using DHCPv6 Prefix Delegation <xref target="RFC3633"/>. For a LoWPAN
that is isolated from the network, either permanently or occasionally, the 6LBR
can assign a ULA prefix using <xref target="RFC4193"/>. The ULA prefix should be
stored in stable storage so that the same prefix is used after a failure of the 6LBR.
If the LoWPAN has multiple 6LBRs, then they should be configured with the same
set of prefixes. The set of prefixes are included in the Router Advertisement
messages as specified in <xref target="RFC4861"/>.
</t>

	</section>


	
	<section anchor='context_management' title="Context Configuration and Management">


	
	<t>If the LoWPAN uses Header Compression <xref target="I-D.ietf-6lowpan-hc"/>
with context then the 6LBR may be configured with context information and related context
IDs. If the LoWPAN has multiple 6LBRs, then they MUST be configured with the same
context information and context IDs.</t>

	    
	<t>The context information carried in Router
	    Advertisement (RA) messages originate at 6LBRs and must be
	    disseminated to all the routers and hosts within the
	    LoWPAN. RAs include one 6CO for each context. </t>
	     
	    
	    <t>
	     For the dissemination of context information using the 6CO, a
	     strict lifecycle SHOULD be used in order to ensure
	     the context information stays synchronized throughout
	     the LoWPAN.  New context information SHOULD be
	     introduced into the LoWPAN with C=0, to
	     ensure it is known by all nodes that may have to
	     decompress based on this context information.  Only
	     when it is reasonable to assume that this information was
	     successfully disseminated SHOULD an option with
	     C=1 be sent, enabling the actual use of the
	     context information for compression.
	   </t>
	   <t>
	     Conversely, to avoid that nodes send packets making use
	     of previous values of contexts, resulting in
	     ambiguity when receiving a packet that uses a
	     recently changed context, old values of a context
	     SHOULD be taken out of use for a while before new
	     values are assigned to this specific context.  That is,
	     in preparation for a change of context information,
	     its dissemination SHOULD continue for at least MIN_CONTEXT_CHANGE_DELAY with
	     C=0.  Only when it is reasonable to assume
	     that the fact that the context is now invalid was
	     successfully disseminated, should the context ID be
	     taken out of dissemination or reused with a different
	     Context Prefix field.  In the latter case, dissemination of
	     the new value again SHOULD start with C=0, as above.
	   </t>
	   </section>

	
	   </section>


	
	   
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<section anchor='optional' title="Optional Behavior">




	
	<t>Optionally the Router Advertisement messages can be used to disseminate prefixes and context information
to all the 6LRs in a route-over topology. If all routers are configured to use another mechanism for such information distribution, this mechanism MAY stay unused.</t>


	
	<t>There is also the option for a 6LR to perform multi-hop DAD (for non-EUI-64 derived IPv6 addresses) against a 6LBR in a
 route-over topology by using the DAR and DAC messages. This is optional because there might be other ways to either 
allocate unique address, such as DHCPv6 <xref target="RFC3315"/>, or other future 
mechanisms for multihop DAD.</t>


	
	<section anchor='optional_dist' title="Multihop Prefix and Context Distribution">


	
	<t>The multihop distribution relies on Router Solicitation messages and Router
Advertisement (RA) messages sent between routers, and using the ABRO version number to control
the propagation of the information (prefixes and context information) that is
being sent in the RAs.</t>

<t>This multihop distribution mechanism can handle arbitrary information from
an arbitrary number of 6LBRs. However, the semantics of the context information
requires that all the 6LNs use the same information, whether they send,
forward, or receive compressed packets. Thus the manager of the 6LBRs need to
somehow ensure that the context information is in synchrony across the 6LBRs. 
This can be handled in different ways. One possible
way to ensure it is to treat the context and prefix information as originating
from some logical or virtual source, which in essence means that it
looks like the information is distributed from a single source.</t>

<t>If a set of 6LBRs behave as a single one (using mechanisms out of scope 
of this document) so that the prefixes and contexts and ABRO version
number will be the same from all the 6LBRs, then those 6LBRs can pick a 
single IP address to use in the ABRO option.</t>



	<section title="6LBRs Sending Router Advertisements">


	
	<t>6LBRs supporting multihop prefix and context distribution MUST include an ABRO in each of its RAs. The ABRO Version Number field is used to keep prefix and context information consistent throughout the LoWPAN along with the guidelines in <xref target="context_management"/>. Each time any information in the set of PIO or 6CO options change, the ABRO Version is increased by one. </t>

<t>This requires that the 6LBR maintain the PIO, 6CO, and ABRO Version Number in
stable storage, since an old version number will be silently ignored by
the 6LRs.</t>


	
	</section>


	
	<section title="Routers Sending Router Solicitations">


	
	<t>If multihop distribution is done using Router Advertisement (RA) messages, then on interface initialization
a router SHOULD send some Router Solicitation messages similarly to how hosts do this in
<xref target="RFC4861"/>. That will cause the routers to respond with RA messages
which then can be used to initially seed the prefix and context information.
</t>


	
	</section>


	
	<section title="Routers Processing Router Advertisements">


	
	<t>If multihop distribution is not done using RA messages, then the routers 
follow <xref target="RFC4861"/> which states that they merely do some consistency
checks and nothing in Section 8.1 applies. Otherwise the routers will check and record the prefix and context information
from the receive RAs, and use that information as follows.</t>


	
	<t>If a received RA does not contain a Authoritative Border Router option, then
the RA MUST be silently ignored.</t>


	
	<t>The router uses the 6LBR Address field in the ABRO to check if it has previously
received information from the 6LBR. If it finds no such information, then it just
records the 6LBR Address and Version and the associated prefixes and context 
information. If the 6LBR is previously known, then the Version number field MUST be compared
against the recorded version number for that 6LBR. The comparison MUST be done the
same way as TCP sequence number comparisons to handle the case when the version
number wraps around. If the version number received in the packet is less than the stored version number (following <xref target="RFC1982"/> Section 3.2), then the information in the RA is silently ignored. Otherwise
the recorded information and version number are updated.</t>

<t>By TCP sequence number comparison we mean that half of the version number 
space is "old" and half is "new". For example, if the current version number
is 0x2, then anything between 0x80000003 (0x2-0x7fffffff) and 0x1 is old, 
and anything between 0x3 and 0x80000002 (0x2+0x8000000) is new.</t>

	
<!-- Carsten: I'm assuming 6COs accumulate (i.e., one RA with sequence 4711 and a 6CO with context ID 1 merges with another RA with sequence 4711 and
context ID 2 such that both contexts are now defined.)  Or not?
The table handling above in 5.4.2 at least seems to suggest that. -->

<!-- Carsten: The sequence number is 16 bits.  This text is also unnecessary as the reference to RFC 1982 suffices.	-->
 	
	</section>


	
	<section title="Storing the Information">


	
	<t>The router keeps state for each 6LBR that it sees with an ABRO. 
	This includes the
version number, and the complete set of Prefix Information options and 6LoWPAN Context
options. The prefixes are timed out based on the Valid lifetime in the
Prefix Information Option. The Context Prefix is timed out based on the Valid
lifetime in the 6LoWPAN Context option.</t>


	
	<t>While the prefixes and context information are stored in the router their valid
and preferred lifetimes are decremented as time passes. This ensures that when
the router is in turn later advertising that information in the Router Advertisements
it sends, the 'expiry time' doesn't accidentally move further into the future. For 
example, if a 6CO with a Valid lifetime of 10 minutes is received at time T, and
the router includes this in a RA it sends at time T+5 minutes, the Valid lifetime
in the 6CO it sends will be only 5 minutes.</t>



<!-- Carsten: Does this require a new sequence number?  (It seems it does for 6LBRs?) I don't think so, so fix it at 6LBR above. -->
	
	</section>


	
	<section title="Sending Router Advertisements">


	
	<t>If multihop distribution is performed using RA messages, then the routers MUST
ensure that the ABRO always stay together with the prefixes and context
information received with that ABRO. Thus if the router has received prefix P1 with
ABRO saying it is from one 6LBR, and prefix P2 from another 6LBR, then the router
MUST NOT include the two prefixes in the same RA message. Prefix P1 MUST be in a RA
that include a ABRO from the first 6LBR etc. Note that multiple 6LBRs might advertise the same prefix and context information, but they still need to be associated with the 6LBRs that advertised them.</t>


	
	<t>The routers periodically send Router Advertisements as in <xref target="RFC4861"/>.
This is for the benefit of the other routers receiving the prefixes and context
information. And the routers also respond to Router Solicitations by unicasting RA
messages. In both cases the above constraint of keeping the ABRO together with 'its'
prefixes and context information apply.</t>


	
	<t>When a router receives new information from a 6LBR, that is, either it hears from
a new 6LBR (a new 6LBR Address in the ABRO) or the ABRO version number of an existing 6LBR has increased, then
it is useful to send out a few triggered updates. The recommendation is to behave the
same as when an interface has become an advertising interface in 
<xref target="RFC4861"/>, that is, send up to three RA messages. This ensures
rapid propagation of new information to all the 6LRs.</t>


	
	</section>


	</section>


	
	<section anchor='optional_dad' title="Multihop Duplicate Address Detection">
	
	<t>The ARO can be used, in addition to registering an address
in a 6LR, to have the 6LR verify that the address isn't used by some other host
known to the 6LR.
However, that isn't sufficient in a route-over topology (or in a LoWPAN with multiple 6LBRs) since some host attached to
another 6LR could be using the same address. There might be different ways for the 6LRs
to coordinate such Duplicate Address Detection in the future, or addresses
could be assigned using a DHCPv6 server that verifies uniqueness as part of the
assignment. </t>
	
	<t>
	This specification offers an optional and simple technique for 6LRs and
6LBRs to perform Duplicate Address Detection that reuses the information
from Address Registration option in the DAR and DAC messages. This technique is not needed when the Interface ID in the address
is based on an EUI-64, since those are assumed to be globally unique. The technique assumes that the 6LRs either register with all the 6LBRs, or that the network uses some out-of-scope mechanism to keep the DAD tables in the 6LBRs synchronized.</t>


	
<t>The multihop DAD mechanism is used synchronously the first time an
address is registered with a particular 6LR. That is, the ARO option is not returned to the host
until multihop DAD has been completed against the 6LBRs. For existing 
registrations in the 6LR the multihop DAD needs to be repeated against the 6LBRs to
ensure that the entry for the address in the 6LBRs does not time out, but that
can be done asynchronously with the response to the hosts. For instance,
by tracking how much is left of the lifetime the 6LR registered with the
6LBRs and re-registering with the 6LBR when this lifetime is about to run 
out.</t>


<!-- Carsten: What is the lifetime that is sent back to the host then?  The minimum of the one requested and the one still available from the previous
6LBR request? -->


<t>For the synchronous multihop DAD the 6LR performs some additional checks
to ensure that it has a Neighbor Cache entry it can use to respond
to the host when it receives a response from a 6LBR. This consists of checking
for an already existing (Tentative or Registered) Neighbor Cache entry for the registered 
address with a different EUI-64. If such a Registered NCE exists, then the 
6LR SHOULD respond that the address is a duplicate. If such a Tentative NCE 
exists, then the 6LR SHOULD silently ignore the ARO thereby relying on the
host retransmitting the ARO. (This is needed to handle the case when multiple
hosts try to register the same IPv6 address at the same time.) If no 
Neighbor Cache entry exists, then the 6LR MUST
create a Tentative Neighbor Cache entry with the EUI-64 and the SLLAO. This
entry will be used to send the response to the host when the 6LBR responds positively.</t>

<t>When a 6LR receives a Neighbor Solicitation containing an Address
Registration option with a non-zero Registration Lifetime and it has
no existing Registered Neighbor Cache entry, then with this mechanism 
the 6LR will invoke synchronous multihop DAD.</t>

<t>The 6LR will unicast a Duplicate Address Request message to one 
or more 6LBRs, where the DAR
contains the host's address in the Registered Address field.
The DAR will be forwarded by 6LRs until it reaches the 6LBR, hence its IPv6 hop
limit field will not be 255 when received by the 6LBR. The 6LBR 
will respond with a Duplicate Address Confirmation message, which 
will have a hop limit less than 255 when it reaches the 6LR.</t>

<t>When the 6LR receives the DAC from the 6LBR, 
it will look for a matching (same IP address and EUI-64) (Tentative or 
Registered)
Neighbor Cache entry. If no such entry is found then the DAC is silently 
ignored. If an entry is found and the DAC had Status=0 then the 6LR will
mark the Tentative Neighbor Cache entry as Registered.
In all cases when an entry is found then the 6LR will
respond to the host with an NA, copying the Status and EUI-64 fields from the DAC to an ARO option in the NA. In case the status is an error, then the destination IP address of the NA is derived from the EUI-64 field of the DAC.</t>

<t>A Tentative Neighbor Cache entry SHOULD be timed out TENTATIVE_NCE_LIFETIME
seconds after it was created in order to allow for another host to attempt
to register the IPv6 address.</t>


	
	<section anchor='DAR-validation' title="Message Validation for DAR and DAC">


	
<t>A node MUST silently discard any received Duplicate Address Request and 
Confirmation
messages that do not satisfy all of the following validity checks:
	<list style="symbols">
<t>If the message includes an IP Authentication Header, the message
authenticates correctly.</t>
<t>ICMP Checksum is valid.</t>
<t>ICMP Code is 0.</t>
<t>ICMP length (derived from the IP length) is 32 or more bytes.</t>
<t>The Registered Address is not a multicast address.</t>
<t>All included options have a length that is greater than zero.</t>
<t>The IP source address is not the unspecified address, nor a multicast
address.</t>
</list>
</t>

<t>The contents of the Reserved field, and of any unrecognized options,
MUST be ignored.  Future, backward-compatible changes to the
protocol may specify the contents of the Reserved field or add
new options; backward-incompatible
changes may use different Code values.
</t>

	<t>Note that due to the forwarding of the DAR and DAC messages between the 6LR 
and 6LBR there is no hop limit check on receipt for these ICMPv6 message types.
</t>


	
	</section>


	
	<section title="Conceptual Data Structures">


	
	<t>A 6LBR implementing the optional multihop DAD needs to maintain some state
separate from the Neighbor Cache. We call this conceptual data structure the DAD table. It is indexed by the IPv6 address - the Registered Address in the DAR - and
contains the EUI-64 and the registration lifetime of the host that is using that address.</t>


	
	</section>


	
	<section title="6LR Sending a Duplicate Address Request">


	
	<t>When a 6LR that implements the optional multihop DAD receives an NS from a host
and subject to the above checks, the 6LR forms
and sends a DAR to at least one 6LBR.
The DAR contains the following information:
    
	
	<list style="symbols">
	
	<t>In the IPv6 source address, a global address of the 6LR.</t>
	
	<t>In the IPv6 destination address, the address of the 6LBR.</t>
	<t>In the IPv6 hop limit, MULTIHOP_HOPLIMIT.</t>
	<t>The Status field MUST be set to zero</t>
	
	<t>The EUI-64 and Registration lifetime are copied from the ARO
received from the host.</t>
	
	<t>The Registered Address set to the IPv6 address of the host,
that is, the sender of the triggering NS.</t>
    
	</list>
</t>


	
	<t>When a 6LR receives an NS from a host with a zero Registration Lifetime then,
in addition to removing the Neighbor Cache entry for the host as specified in 
section <xref target="router"/>, an DAR is sent to the 6LBRs as above.</t>

<t>A router MUST NOT modify the Neighbor Cache as a result of receiving
a Duplicate Address Request.</t>


	
	</section>


	
	<section title="6LBR Receiving a Duplicate Address Request">


	
	<t>When a 6LBR that implements the optional multihop DAD receives an DAR from a 6LR, it performs the message validation specified in <xref target="DAR-validation"/>. If the DAR is valid the 6LBR proceeds to look for the Registration
Address in the DAD Table. If an entry is found and the recorded EUI-64 is different
than the EUI-64 in the DAR, then it returns a DAC NA with the Status set to 1 ('Duplicate
Address'). Otherwise it returns a DAC with Status set to zero and updates the lifetime.</t>

	<t>If no entry is found in the DAD Table and the Registration Lifetime is non-zero,
then an entry is created and the EUI-64 and Registered Address from the DAR are stored in that entry.</t>

<t>If an entry is found in the DAD Table, the EUI-64 matches, and the Registration Lifetime is zero
then the entry is deleted from the table.</t>

<t>In both of the above cases 
the 6LBR forms an DAC with the information copied from the DAR and the Status
field is set to zero. The DAC
is sent back to the 6LR i.e., back to the source of the DAR. The IPv6 hop 
limit is set to MULTIHOP_HOPLIMIT</t>

	</section>


	
	<section title="Processing a Duplicate Address Confirmation">


	
	<t>When a 6LR that implements the optional multihop DAD receives a
DAC message, then it first validates the message per 
<xref target="DAR-validation"/>. For a valid DAC, if there 
is no Tentative Neighbor Cache entry matching the Registered address 
and EUI-64, then the DAC is silently ignored. Otherwise,
the information in the DAC and in the Tentative Neighbor Cache entry is 
used to form an NA to
send to the host. The Status code is copied from the DAC to
the ARO that is sent to the host. In case of the DAC indicates an error (the Status is non-zero), the NA is returned to the host as described in <xref target="errors"/> and the Tentative Neighbor Cache entry for the Registered Address is removed. Otherwise it is made
into a Registered Neighbor Cache entry.</t>

<t>A router MUST NOT modify the Neighbor Cache as a result of
receiving a Duplicate Address Confirmation, unless there
is a Tentative Neighbor Cache entry matching the IPv6 address and EUI-64.</t>


	
	</section>


	
	<section title="Recovering from Failures">


	
	<t>If there is no response from a 6LBR after RETRANS_TIMER <xref target="RFC4861"/>
then the 6LR would retransmit the DAR to the 6LBR up to MAX_UNICAST_SOLICIT 
<xref target="RFC4861"/> times. After this the 6LR SHOULD respond to the host with
an ARO Status of zero.</t>


	
	</section>


	</section>


	
	</section>



	
	
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->

	<section anchor='constants' title="Protocol Constants">

	<t>
	  This section defines the relevant protocol constants used in this document based
	  on a subset of <xref target="RFC4861"/> constants. (*) indicates constants
	  modified from <xref target="RFC4861"/> and (+) indicates new constants.
	</t>
	<t>
	  Additional protocol constants are defined in Section <xref target="message_options"/>.
	</t>

	<t>6LBR Constants:
	       <list style="hanging" hangIndent="40">
       		<t hangText="MIN_CONTEXT_CHANGE_DELAY+">300 seconds</t>
       	</list>
	</t>

	<t>6LR Constants:
	       <list style="hanging" hangIndent="40">
       		<t hangText="MAX_RTR_ADVERTISEMENTS">3 transmissions</t>
       		<t hangText="MIN_DELAY_BETWEEN_RAS*">10 seconds</t>
       		<t hangText="MAX_RA_DELAY_TIME*">2 seconds</t>
       		<t hangText="TENTATIVE_NCE_LIFETIME+">20 seconds</t>
       	</list>
	</t>
	<t>Router Constants:
	       <list style="hanging" hangIndent="40">
       		<t hangText="MULTIHOP_HOPLIMIT+">64</t>
       	</list>
	</t>

	<t>Host Constants:
	       <list style="hanging" hangIndent="40">
       		<t hangText="RTR_SOLICITATION_INTERVAL*">10 seconds</t>
       		<t hangText="MAX_RTR_SOLICITATIONS">3 transmissions</t>
       		<t hangText="MAX_RTR_SOLICITATION_INTERVAL+">60 seconds</t>
       	</list>
	</t>

	</section>


	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->


	<section anchor='examples' title="Examples">	

	<section anchor='examples_msg' title="Message Examples">

<figure anchor='figmessrsra'
 title="Basic Router Solicitation/Router Advertisement exchange between a node and 6LR or 6LBR">

<artwork><![CDATA[

STEP

   6LN                                                        6LR
 
    |                                                          |
 
1.  |       ---------- Router Solicitation -------->           |
 
    |                       [SLLAO]                            |
 
    |                                                          |
 
2.  |       <-------- Router Advertisement ---------           |
 
    |              [PIO + 6CO + ABRO + SLLAO]                  |



]]></artwork>
</figure>

<figure anchor='figmessbasic'
 title="Neighbor Discovery Address Registration ">


<artwork><![CDATA[


   6LN                                                        6LR
  
    |                                                          |
 
1.  |       ------- NS with Address Registration ------>       |
 
    |                     [ARO + SLLAO]                        |
 
    |                                                          |

2.  |       <----- NA with Address Registration --------       |
 
    |                   [ARO with Status]                      |
 


 ]]></artwork>
</figure>


<figure anchor='figmessmdad'
 title="Neighbor Discovery Address Registration with Multi-Hop DAD">

<artwork><![CDATA[


   6LN                           6LR                          6LBR
  
    |                             |                             |
 
1.  | --- NS with Address Reg --> |                             |
 
    |      [ARO + SLLAO]          |                             |
	
    |                             |                             |
 
2.  |                             | ----------- DAR ----------> |
 
    |                             |                             |
 
3.  |                             | <---------- DAC ----------- |
 
    |                             |                             |
 
4.  | <-- NA with Address Reg --- |                             |
 
    |      [ARO with Status]      |

]]></artwork>
</figure>
	</section>
	

	<section anchor='examples_boot' title="Host Bootstrapping Example">
	
	<t>The following example describes the address bootstrapping scenarios using the optimized ND mechanisms specified in this document. It is assumed that the 6LN first performs a sequence of operations in order to get secure access at the link-layer of the LoWPAN and obtain a key for link-layer security. The methods of how to establish the link-layer security is out of scope of this document. In this example an IEEE 802.15.4 6LN forms a 16-bit short-address based IPv6 addresses without using DHCPv6 (i.e., the M flag is not set in the Router Advertisements).</t>
	
	<t>1. After obtaining link-level security, a 6LN assigns a link-local IPv6 address to itself. A link-local IPv6 address is configured based on the 6LN's EUI-64 link-layer address formed as per <xref target="RFC4944"/>.</t>

	<t>2. Next the 6LN determines one or more default routers in the network by sending an RS to the all-routers multicast address with the SLLA Option set to its EUI-64 link-local address. If the 6LN was able to obtain the link-layer address of a router through its link-layer operations then the 6LN may form a link-local destination IPv6 address for the router and send it a unicast RS. The 6LR responds with a unicast RA to the IP source using the SLLAO from the RS (it may have created a tentative NCE). See <xref target="figmessrsra"/>. </t>
	
	<t>3. In order to communicate more than one IP hop away the 6LN configures a global IPv6 address. In order to save overhead, this 6LN wishes to configure its IPv6 address based on a 16-bit short address as per <xref target="RFC4944"/>. As the network is unmanaged (M flag not set in RA), the 6LN randomly chooses a 16-bit link-layer address and forms a tentative IPv6 address from it.
	</t>
	
	<t>4. Next the 6LN registers that address with one or more of its default routers by sending a unicast NS message with an ARO containing its tentative global IPv6 address to register, the registration lifetime and its EUI-64. An SLLAO is also included with the link-layer address corresponding to the address being registered. If a successful (status 0) NA message is received the address can then be used and the 6LN assumes it has been successfully checked for duplicates. If a duplicate address (status 1) NA message is received, the 6LN then removes the temporary IPv6 address and 16-bit link-layer address and goes back to step 3. If a neighbor cache full (status 2) message is received, the 6LN attempts to register with another default router, or if none, goes back to step 2. See <xref target="figmessbasic"/>. Note that an NA message returning an error would be sent back to the link-local EUI-64 based IPv6 address of the 6LN instead of the 16-bit (duplicate) address.
	</t>
	
	<t>5. The 6LN now performs maintenance by sending a new NS address registration before the lifetime expires.  
	</t>
	
<t>If multihop DAD and multihop prefix and context distribution is used, the
effect of the 6LRs and hosts following the above bootstrapping is a "wavefront"
of 6LRs and host being configured spreading from the 6LBRs. First the hosts and 6LRs
that can directly reach a 6LBR would receive one or more RAs and configure and
register their IPv6 addresses. Once that is done they would enable the routing
protocol and start sending out Router Advertisements. That would result in a
new set of 6LRs and hosts to receive responses to their Router Solicitations,
form and register their addresses, etc. That repeats until all of the 6LRs
and hosts have been configured.</t>
	
<section anchor="examples_annotation" title="Host Bootstrapping Messages">	
	
  <t>This section brings specific message examples to the previous
  bootstrapping process.  When discussing messages, the following
  notation is used:</t>

  <t>LL64: Link-Local Address based on the EUI-64, which is also the
  802.15.4 Long Address.  </t>

  <t>GP16: Global Address based on the 802.15.4 Short Address.  This
  address may not be unique.  </t>

  <t>GP64: Global addresses derived from the EUI-64 address as specified in RFC 4944.</t>
  
  <t>MAC64: EUI-64 address used as the link-layer address.</t>
  
  <t>MAC16: IEEE 802.15.4 16-bit short address.</t>

  <t>Note that some implementations may use LL64 and GP16 style addresses 	 instead of LL64 and GP64. In the following, we will show an example message flow as to how a node uses LL64 to register a GP16 address for multihop DAD verification.</t>
	
<figure anchor='figmessexamples'
 title="Detailed Message Address Examples">

<artwork><![CDATA[

  6LN-----RS-------->6LR
  Src= LL64 (6LN)
  Dst= All-router-link-scope-multicast
  SLLAO= MAC64 (6LN)

 6LR------RA--------->6LN
  Src= LL64 (6LR)  
  Dst= LL64 (6LN) 

Note: Source address of RA must be a link-local 
address (Section 4.2, RFC 4861).

 6LN-------NS Reg------>6LR
  Src= GP16 (6LN)
  Dst= LL64 (6LR)
  ARO
  SLLAO= MAC16 (6LN)

 6LR---------DAR----->6LBR
 Src= GP64 or GP16 (6LR)
 Dst= GP64 or GP16 (6LBR)
 Registered Address= GP16 (6LN) and EUI-64 (6LN)

 6LBR-------DAC--------->6LR
 Src= GP64 or GP16 (6LBR)
 Dst= GP64 or GP16 (6LR)
 Copy of information from DAR

 If Status is a Success:

 6LR ---------NA-Reg------->6LN
 Src= LL64 (6LR)
 Dst= GP16 (6LN)
 ARO with Status = 0

 If Status is not a success:

 6LR ---------NA-Reg-------->6LN
 Src= LL64 (6LR)
 Dst= LL64 (6LN) --> Derived from the EUI-64 of ARO
 ARO with Status > 0


]]></artwork>
</figure>	
	
	
</section>
	

<!--	

<section anchor="example_error_recover" title="Error Recovery">
<t>Error recovery and prevention relies on a number of methods as specified in this document and in <xref target="RFC4861"/>. A few specific examples of how this error recovery works will be given here.</t>

<section anchor="example_error_recover_notheard" title="Failure to Hear NA Response">

<t>The 6LN has sent a NS to register an address, but fails to receive a NA in response. This could occur due
to an unreliable link for example, which would require a retry. A less likely example is a misconfigured 
network results in consistent failures. For example a 6LN uses an EUI-64 based IPv6 address, but has a 
non-standard link-layer associated with the EUI-64 based address. If a duplicate occurs the 6LR is unable
to send the error message back to the EUI-64 based IPv6 address.
In such a case the node would re-send the unicast NS MAX_UNICAST_SOLICIT times,
waiting a minimum of RETRANS_TIMER. If after NS MAX_UNICAST_SOLICIT
no response is still heard, the node would then select another router and a new address to register with.
</t>
<t>
In both cases this successfully registers the address. When the NA was lost due to a random occurrence, the retry will succeed. If the NA is lost due to network misconfiguration, the 6LN will eventually retry a different 6LR if available, and with a different address.
</t>
</section>
	
-->	
	
</section>
	

	
	<section anchor='examples_router' title="Router Interaction Example">
	
	<t>In the Route-over topology, when a routing protocol is run across 6LRs the bootstrapping and neighbor cache management are handled a little differently. The description in this paragraph provides only a guideline for an implementation.</t>

	<t>At the initialization of a 6LR, it may choose to bootstrap as a host with the help of a parent 6LR if the optional multihop DAD is performed with the 6LBR. The neighbor cache management of a router and address resolution among the neighboring routers are described in <xref target="router_cache"/> and <xref target="router_resolution"/>, respectively. In this example, we assume that the neighboring 6lowpan link is secure.</t>

	<section title="Bootstrapping a Router">

	<t>In this scenario, the bootstrapping 6LR, 'R1', is multiple hops away from the 6LBR and surrounded by other 6LR neighbors. Initially R1 behaves as a host. It sends multicast RS and receives an RA from one or more neighboring 6LRs. R1 picks one 6LR as its temporary default router and performs address resolution via this default router. Note, if multihop DAD is not required (e.g. in a managed network or using EUI-64 based addresses) then it does not need to pick a temporary default router, however it may still want to send the initial RS message if it wants to autoconfigure its address with the global prefix disseminated by the 6LBR.</t>

	<t>Based on the information received in the RAs, R1 updates its cache with entries for all the neighboring 6LRs. Upon completion of the address registration, the bootstrapping router deletes the temporary entry of the default router and the routing protocol is started.</t>

	<t>Also note that R1 may refresh its multihop DAD registration directly with the 6LBR (using the nexthop neighboring 6LR determined by the routing protocol for reaching the 6LBR).</t>
	
	</section>


	<section title="Updating the Neighbor Cache">

	<t>In this example, there are three 6LRs, R1, R2, R3. Initially when R2 boots it sees only R1, and accordingly R2 creates a neighbor cache entry for R1. Now assume R2 receives a valid routing update from router R3. R2 does not have any neighbor cache entry for R3. If the implementation of R2 supports detecting link-layer address from the routing information packets then it directly updates the its neighbor cache using that link-layer information. If this is not possible, then R2 should perform multicast NS with source set with its link-local or global address depending on the scope of the source IP-address received in the routing update packet. The target address of the NS message is the source IPv6 address of the received routing update packet. The format of the NS message is as described in Section 4.3 of <xref target="RFC4861"/>.</t>

	<t>More generally any 6LR that receives a valid route-update from a neighboring router for which it does not have any neighbor cache entry is required to update its neighbor cache as described above.</t>

	<t>The router (6LR and 6LBR) IP-addresses learned via Neighbor Discovery are not redistributed to the routing protocol.</t>
	
	</section>
	
	
	</section>
	
	
	</section>


	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->

	<section title="Security Considerations">

	<t>
	   The security considerations of IPv6 Neighbor Discovery <xref target="RFC4861"/>
	   apply. Additional considerations can be found in <xref target="RFC3756"/>.
	</t>
	<t>
	   This specification expects that the link layer is sufficiently
	   protected, for instance using MAC sublayer cryptography.  In other words, model
	   1 from <xref target="RFC3756"/> applies.  In particular, it is expected that the
	   LoWPAN MAC provides secure unicast to/from Routers and secure
	   broadcast from the Routers in a way that prevents tampering with or
	   replaying the Router Advertisement messages.  However, any future 6LoWPAN security
	   protocol that applies to Neighbor Discovery for 6LoWPAN protocol,
	   is out of scope of this document.
	</t>


<t>The multihop DAD mechanisms rely on DAR and DAC messages that are forwarded by 6LRs, and as a result the
hop_limit=255 check on the receiver does not apply to those messages. This implies
that any node on the Internet could successfully send such messages. We avoid
any additional security issues due to this by requiring that the routers
never modify the Neighbor Cache entry due to such messages, and that they reject them unless they are received on an interface that has been explicitly
configured to use these optimizations.</t>
 
<t>In some future deployments one might want to use SEcure Neighbor Discovery
<xref target="RFC3971"/> <xref target="RFC3972"/>. This is possible with the Address
Registration option as sent between hosts and routers, since the address that
is being registered is the IPv6 source address of the Neighbor Solicitation and
SeND verifies the IPv6 source address of the packet. Applying SeND to the optional
router-to-router communication in this document is out of scope.</t>

	</section>

	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->

	<section anchor='iana' title="IANA Considerations">
         <t>
      	The document requires three new Neighbor Discovery option types under the
      	subregistry "IPv6 Neighbor Discovery Option Formats":

      	<list style="symbols">
      	<t>Address Registration Option (TBD1)</t>
      	<t>6LoWPAN Context Option (TBD2)</t>
       	<t>Authoritative Border Router Option (TBD3)</t>	
       	</list>
         </t>

         <t>
      	The document requires two new ICMPv6 types under the
      	subregistry "ICMPv6 type Numbers":

      	<list style="symbols">
      	<t>Duplicate Address Request (TBD4)</t>
      	<t>Duplicate Address Confirmation (TBD5)</t>
       	</list>
         </t>

	    <t>For the purpose of protocol interoperability testing of this specification, the following values are being used temporarily:
      	<list style="symbols">
      	<t>TBD1 = 31</t>
      	<t>TBD2 = 32</t>
       	<t>TBD3 = 33 </t>
       	<t>TBD4 = 155 XXX </t>
       	<t>TBD3 = 156 XXX </t>
       	</list>
        </t>

		<t>This document also requests IANA to create a new registry for the Status values of the Address Registration Option.</t>

         <t>
      	[TO BE REMOVED: This registration should take place at the following location:
       	http://www.iana.org/assignments/icmpv6-parameters]
	   </t>
	_</section>

<section title="Guideline for New Features">
<t> This section discusses a guideline of new features for implementation and deployment. 
</t>

       <figure anchor='guide1' title="Guideline for lowpan-nd new-features for hosts">
                <artwork><![CDATA[

+-----------------------------------------------------------------------------------+
 Section            Descripttion                  Deployment      Implementation
+-----------------------------------------------------------------------------------+
3.1                 Host initiated RA              MUST               MUST
+-----------------------------------------------------------------------------------+
3.2                 EUI-64 based IPv6-address      MUST               MUST
                    16bit-MAC based address        MAY              SHOULD
                    Other non-unique addresses     MAY                 MAY
+-----------------------------------------------------------------------------------+
3.3                 Host Initiated RS              MUST                MUST
                    ABRO Processing                SHOULD              MUST
+-----------------------------------------------------------------------------------+
4.1                 Registration with ARO          MUST                MUST
+-----------------------------------------------------------------------------------+
4.2, 5.4            6lowpan Context Option         SHOULD               SHOULD
+-----------------------------------------------------------------------------------+
 5.1                 Re-direct Message Acceptance    MUST NOT          MUST NOT
                      Joining Solicited Node
                              Multicast             N/A                 N/A
                    Joining all-node Multicat       MUST               MUST
+-----------------------------------------------------------------------------------+
 ?                   Using link-layer indication
                         For NUD                     SHOULD            MAY
+-----------------------------------------------------------------------------------+
 5.5                 6lowpan-ND NUD                  MUST              MUST
+-----------------------------------------------------------------------------------+
 5.8.2               Behavior on wake-up             SHOULD            SHOULD
+-----------------------------------------------------------------------------------+


                        ]]></artwork>^M

                                </figure>^M
                                
		<figure  anchor='guide2' title="Guideline for 6LR in lowpan-nd">
		          <artwork><![CDATA[


+------------------------------------------------------------------------------------+
Section              Description                 Deployment        Implementation
+------------------------------------------------------------------------------------+
3.1                  Periodic RA                   SHOULD NOT          SHOULD NOT
+------------------------------------------------------------------------------------+
3.2                  Address assignment during
                          Startup                  SHOULD             MUST
+------------------------------------------------------------------------------------+
3.3                  Supporting EUI-64 based MAC
                          Hosts                    MUST               MUST
                     Supporting 16-bit MAC hosts   MAY                SHOULD
+------------------------------------------------------------------------------------+
3.4, 4.3                  
8.1.3, 8.1.4         ABRO Processing/sending       MAY               SHOULD
8.1		     Multihop Prefix storing
		      and re-distribution
+------------------------------------------------------------------------------------+
3.5                  Tentative NCE                 MUST               MUST
+------------------------------------------------------------------------------------+
8.2                  Multihop DAD                  MAY                SHOULD
+------------------------------------------------------------------------------------+
 4.1, 6.5
 6.5.1 - 6.5.5        ARO Support                   MUST               MUST
+------------------------------------------------------------------------------------+
4.2                  6lowpan Context Option        SHOULD             SHOULD
+------------------------------------------------------------------------------------+
 6.3                  Process RS/ARO                MUST               MUST
+------------------------------------------------------------------------------------+

                          ]]></artwork>
                                </figure>

<figure anchor='guide3'  title="Guideline for 6LBR features">
                 <artwork><![CDATA[

+------------------------------------------------------------------------------------+
Section                 Description                 Deployment        Implementation
+------------------------------------------------------------------------------------+
3.1                    Periodic RA                    SHOULD NOT       SHOULD NOT
+------------------------------------------------------------------------------------+

3.2                    Addres autoconf on
                         Router interface              MUST NOT        MUST NOT
+------------------------------------------------------------------------------------+
3.3                    EUI-64 MAC address support      MUST            MUST
                          On 6lowpan interface
+------------------------------------------------------------------------------------+
8.1 - 8.1.1
8.1.5                  Multihop Prefix distribution     MAY            SHOULD
+------------------------------------------------------------------------------------+
8.2                    Multihop DAD                     MAY            SHOULD 
+------------------------------------------------------------------------------------+

                        ]]></artwork>
                                    </figure>




</section>

<!--==================================================-->
<!--	SECTION: ACKNOWLEDGMENTS		      -->
<!--==================================================-->

<section title="Acknowledgments">

<t>The authors thank Pascal Thubert, Jonathan Hui, Carsten Bormann, Richard Kelsey, Geoff Mulligan, Julien Abeille, Alexandru Petrescu, Peter Siklosi, Pieter De Mil, Fred Baker, Anthony Schoofs, Phil Roberts, Daniel Gavelle, Joseph Reddy, Robert Cragie, Mathilde Durvy, Colin O'Flynn, Dario Tedeschi and Joakim Eriksson for useful discussions and comments that have helped shaped and improve this document.</t>

<t>
Additionally, the authors would like to recognize Carsten Bormann for the suggestions on the Context Prefix Option and contribution to earlier version of the draft, Pascal Thubert for contribution of the original registration idea and extensive contributions to earlier versions of the draft, Jonathan Hui for original ideas on prefix/context distribution and extensive contributions to earlier versions of the draft, Colin O'Flynn for useful Error-to suggestions and contributions to the Examples section, Geoff Mulligan for suggesting the use of Address Registration as part of existing IPv6 Neighbor Discovery messages, and Mathilde Durvy for helping to clarify router interaction. </t>


</section>

	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->
	<!-- **************************************************************** -->

	<section title="Changelog">

	  <t>Changes from -13 to -14:
	    <list>
               <t>o Introduced the new DAR and DAC ICMPv6 message types for
multihop DAD to avoid relying on the Length=4 checks for the ARO. This 
simplifies implementing the hop limit check.</t>
               <t>o Clarified the hop limit values for the multihop DAD messages
by introducing the MULTIHOP_HOPLIMIT constant set to 64.</t>

               <t>o Clarified when a host should de-register from a router.</t>.
               <t>o Added a section on next-hop determination for routers.</t>

               <t>o Removed the infinite lifetime from 6CO. </t>
               <t>o Increased MIN_CONTEXT_CHANGE_DELAY to 300 seconds. </t>
               
         </list>
</t>

	  
               
               
      <t>Changes from -12 to -13:
	    <list>
	       <t>o Error-to solution added for returning NA messages carrying an error ARO option to the link-local EUI-64 based IPv6 address of the host (#126). </t>
	       <t>o New examples added.</t>	       
	    </list>
	  </t>

	  <t>Changes from -11 to -12:
	    <list>
	       <t>o Version field of ABRO moved after Length for 32-bit alignment of the reserved space (#90).</t>
	       <t>o Several clarifications were made on router interaction, including a new section with router interaction examples (#91).</t>
	       <t>o Temporary Neighbor Cache Entry created upon host sending NS+ARO, and SLLAO removed from multihop DAD NS/NA messages (#87).</t>	       
	    </list>
	  </t>

	  <t>Changes from -10 to -11:
	    <list>
	       <t>o Reference to RFC1982 for version number comparison (#80)</t>
			<t>o RA Router Lifetime field use clarified (#81)</t>
			<t>o Make fields 16-bit rather than 32-bit where possible (#83)</t>
			<t>o Unicast RA clarification (#84)</t>
			<t>o Temporary ND option types (#85)</t>
			<t>o SLLA/TLLA clarification (#86)</t>
			<t>o GP16 as source address in initial NS clarification (#87)</t>
	    </list>
	  </t>

	  <t>Changes from -09 to -10:
	    <list>
	       <t>o Clarifications made to Section 8.2 (#66)</t>
	       <t>o Explained behavior of Neighbor Cache (#67)</t>
	       <t>o Clarified use of SLLAO in RS and NS messages (#68)</t>
	       <t>o Added new term 6LN (#69)</t>
	       <t>o Small clarification on 6CO flag (#70)</t>
	       <t>o Defined host behavior on ARO failure better (#72)</t>
	       <t>o Added bootstrapping example for a host (#73)</t>
	       <t>o Added new Neighbor Cache Full ARO error (#74)</t>
	       <t>o Added rule on the use of the M flag (#75)</t>
	    </list>
	  </t>

	  <t>Changes from -08 to -09:
	    <list>
	       <t>o Clean re-write of the draft (re-use of some introductory material)</t>
	    	 <t>o Merged in draft-chakrabarti-6lowpan-ipv6-nd-simple-00</t>
	    	 <t>o Changed address registration to an option piggybacked on NS/NA</t>
	    	 <t>o New Authoritative Border Router option</t>
	    	 <t>o New Address Registration Option</t>
	    	 <t>o Separated Prefix Information and Content Information</t>
	    	 <t>o Optional DAD to the edge</t>
	    </list>
	  </t>

	  <t>Changes from -07 to -08:
	    <list>
	    	 <t>o Removed Extended LoWPAN and Whiteboard related sections.</t>
	    	 <t>o Included reference to the autoconf addressing model.</t>
	    	 <t>o Added Optimistic Flag to 6AO.</t>
	    	 <t>o Added guidelines on routers performing DAD.</t>
	    	 <t>o Removed the NR/NC Advertising Interval.</t>
	    	 <t>o Added assumption of uniform IID formation and DAD throughout a LoWPAN.</t>
	    </list>
	  </t>

	  <t>Changes from -06 to -07:
	    <list>
	    	 <t>o Updated addressing and address resolution (#60).</t>
	    	 <t>o Changed the Address Option to 6LoWPAN Address Option, fixed S values (#61).</t>
	    	 <t>o Added support for classic RFC4861 RA Prefix Information messages to be processed (#62).</t>
	    	 <t>o Added a section on using 6LoWPAN-ND under a hard-wired RFC4861 stack (#63).</t>
	    	 <t>o Updated the NR/NC message with a new Router flag, combined the Code and Status fields into one byte, and added the capability to carry 6IOs (#64).</t>
	    	 <t>o Made co-existence with other ND mechanisms clear (#59).</t>
	    	 <t>o Added a new Protocol Specification section with all mechanisms specified there (#59).</t>
	    	 <t>o Removed dependencies and conflicts with RFC4861 wherever possible (#59).</t>
	    	 <t>o Some editorial cleanup.</t>
	    </list>
	  </t>

	  <t>Changes from -05 to -06:
	    <list>
	    	 <t>o Fixed the Prf codes (#52).</t>
	    	 <t>o Corrected the OIIO TID field to 8-bits. Changed the Nonce/OII order in both the OIIO and the NR/NC. (#53)</t>
	    	 <t>o Corrected an error in Table 1 (#54).</t>
	    	 <t>o Fixed asymmetric and a misplaced transient in the 6LoWPAN terminology section.</t>
	    	 <t>o Added Updates RFC4861 to header</t>
	    </list>
	  </t>

	  <t>Changes from -04 to -05:
	    <list>
	    	 <t>o Meaning of the RA's M-bit changed to original <xref target="RFC4861"/> meaning (#46).</t>
	    	 <t>o Terms "on-link" and "off-link" used in place of "on-link" and "off-link".</t>
	    	 <t>o Next-hop determination text simplified (#49).</t>
	    	 <t>o Neighbor cache and destination cache removed.</t>
	    	 <t>o IID to link-layer address requirement relaxed. </t>
	    	 <t>o NR/NC changes to enable on-link refresh with routers (#48).</t>
	    	 <t>o Modified 6LoWPAN Information Option (#47).</t>
	    	 <t>o Added a Protocol Constants section (#24)</t>
	    	 <t>o Added the NR processing table (#51)</t>
	    	 <t>o Considered the use of SeND on backbone NS/NA messages (#50)</t>
	    </list>
	  </t>


	  <t>Changes from -03 to -04:
	    <list>
	    	 <t>o Moved Ad-hoc LoWPAN operation to Section 7 and made ULA prefix generation a features useful also in Simple and Extended LoWPANs. (#41)</t>
		 <t>o Added a 32-bit Owner Nonce to the NR/NC messages and the Whiteboard, removed the TID history. (#39)</t>
		 <t>o Improved the duplicate OII detection algorithm using the Owner Nonce. (#39)</t>
		 <t>o Clarified the use of Source and Target link-layer options in NR/NC. (#43)</t>
		 <t>o Included text on the use of alternative methods to acquire addresses. (#38)</t>
		 <t>o Removed S=2 from Address Option (not needed). (#36)</t>
		 <t>o Added a section on router dissemination consistency. (#44)</t>
		 <t>o Small improvements and extensive editing. (#42, #37, #35)</t>
	    </list>
	  </t>

	  <t>Changes from -02 to -03:
	    <list>
	    	<t>o Updated terminology, with RFC4861 non-transitive link model.</t>
		<t>o 6LoWPAN and ND terminology separated.</t>
		<t>o Protocol overview explains RFC4861 diff in detail.</t>
		<t>o RR/RC is now Node Registration/Confirmation (NR/NC).</t>
		<t>o Added NR failure codes.</t>
		<t>o ER Metric now included in 6LoWPAN Summary Option for use in default router determination by hosts.</t>
		<t>o Examples of host data structures, and the Whiteboard given.</t>
		<t>o Whiteboard is supported by all Edge Routers for option simplicity.</t>
		<t>o Edge Router Specification chapter re-structured, clarifying optional Extended LoWPAN operation.</t>
		<t>o NS/NA now completely optional for nodes. No address resolution or NS/NA NUD required.</t>
		<t>o link-local operation now compatible with oDAD (was broken).</t>
		<t>o Exception to hop limit = 255 for NR/NC messages.</t>
		<t>o Security considerations improved.</t>
		<t>o ICMPv6 destination unreachable supported.</t>
	    </list>
	  </t>

	  <t>Changes from -01 to -02:
	    <list>
	    	<t>o Fixed 16 != 0xff bug (ticket closed).</t>
	    	<t>o Specified use of ULAs in ad-hoc LoWPAN section 9 (ticket closed).</t>
	    	<t>o Terminology cleanup based on Alex's comments.</t>
	    	<t>o General editing improvements.</t>
	    </list>
	  </t>

	  <t>Changes from -00 to -01:
	    <list>
	    	<t>o Specified the duplicate owner interface identifier procedures. A TID lollipop algorithm was sufficient (nonce unnecessary).</t>
	    	<t>o Defined fault tolerance using secondary bindings.</t>
	    	<t>o Defined ad-hoc network operation.</t>
	    	<t>o Removed the E flag from RA and the X flag from RR/RC.</t>
	    	<t>o Completed message examples.</t>
	    	<t>o Lots of improvements in text quality and consistency were made. </t>
	    </list>
	  </t>

	</section>

    </middle>


    <back>
    <references title='Normative References'>
       
       &RFC5889;
       
       &RFC1982;
       
 
     &RFC2119;

       &RFC2434;

       &RFC2460;

       &RFC2491;

       &RFC4191;

       &RFC4193;

       &RFC4443;

       &RFC4861;

       &RFC4862;

       &RFC4944;
       
       <reference anchor="EUI64" target="http://standards.ieee.org/regauth/oui/tutorials/EUI64.html">
  			<front>
    		<title>GUIDELINES FOR 64-BIT GLOBAL IDENTIFIER (EUI-64) REGISTRATION AUTHORITY</title>
  			</front>
		</reference>


    </references>
    <references title='Informative References'>

       &RFC3315;

       &RFC3633;

       &RFC3756;

       &RFC3971;

       &RFC3972;

       &RFC4919;

       &RFC4941;

	 &I-D.ietf-6lowpan-hc;

    </references>

    </back>

</rfc>
