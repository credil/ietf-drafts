<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc1738 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1738.xml">
<!ENTITY rfc2045 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2045.xml">
<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc2130 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2130.xml">
<!ENTITY rfc2141 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2141.xml">
<!ENTITY rfc2192 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2192.xml">
<!ENTITY rfc2277 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2277.xml">
<!ENTITY rfc2368 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2368.xml">
<!ENTITY rfc2384 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2384.xml">
<!ENTITY rfc2396 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2396.xml">
<!ENTITY rfc2397 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2397.xml">
<!ENTITY rfc2616 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY rfc2640 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2640.xml">
<!ENTITY rfc3490 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3490.xml">
<!ENTITY rfc3491 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3491.xml">
<!ENTITY rfc3629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY rfc3986 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY rfc3987 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3987.xml">
<!ENTITY rfc5890 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5890.xml">
<!ENTITY rfc5891 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5891.xml">
<!ENTITY rfc6055 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6055.xml">
]>
<?rfc strict='yes'?>

<?xml-stylesheet type='text/css' href='rfc2629.css' ?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc symrefs='yes'?>
<?rfc sortrefs='yes'?>
<?rfc iprnotified="no" ?>
<?rfc toc='yes'?>
<?rfc compact='yes'?>
<?rfc subcompact='no'?>
<rfc ipr="pre5378Trust200902" docName="draft-ietf-iri-3987bis-06" category="std" xml:lang="en" obsoletes="3987">
<front>
<title abbrev="IRIs">Internationalized Resource Identifiers (IRIs)</title>

  <author initials="M.J." surname="Duerst" fullname='Martin Duerst'>
    <!-- (Note: Please write "Duerst" with u-umlaut wherever
      possible, for example as "D&#252;rst" in XML and HTML) -->
  <organization abbrev="Aoyama Gakuin University">Aoyama Gakuin University</organization>
  <address>
  <postal>
  <street>5-10-1 Fuchinobe</street>
  <city>Sagamihara</city>
  <region>Kanagawa</region>
  <code>229-8558</code>
  <country>Japan</country>
  </postal>
  <phone>+81 42 759 6329</phone>
  <facsimile>+81 42 759 6495</facsimile>
  <email>duerst@it.aoyama.ac.jp</email>
  <uri>http://www.sw.it.aoyama.ac.jp/D%C3%BCrst/<!-- (Note: This is the percent-encoded form of an IRI)--></uri>
  </address>
</author>

<author initials="M.L." surname="Suignard" fullname="Michel Suignard">
   <organization>Unicode Consortium</organization>
   <address>
   <postal>
   <street></street>
   <street>P.O. Box 391476</street>
   <city>Mountain View</city>
   <region>CA</region>
   <code>94039-1476</code>
   <country>U.S.A.</country>
   </postal>
   <phone>+1-650-693-3921</phone>
   <email>michel@unicode.org</email>
   <uri>http://www.suignard.com</uri>
   </address>
</author>
<author initials="L." surname="Masinter" fullname="Larry Masinter">
   <organization>Adobe</organization>
   <address>
   <postal>
   <street>345 Park Ave</street>
   <city>San Jose</city>
   <region>CA</region>
   <code>95110</code>
   <country>U.S.A.</country>
   </postal>
   <phone>+1-408-536-3024</phone>
   <email>masinter@adobe.com</email>
   <uri>http://larry.masinter.net</uri>
   </address>
</author>

<date year="2011" />
<area>Applications</area>
<workgroup>Internationalized Resource Identifiers (iri)</workgroup>
<keyword>IRI</keyword>
<keyword>Internationalized Resource Identifier</keyword>
<keyword>UTF-8</keyword>
<keyword>URI</keyword>
<keyword>URL</keyword>
<keyword>IDN</keyword>
<keyword>LEIRI</keyword>

<abstract>
<t>This document defines the Internationalized Resource Identifier
(IRI) protocol element, as an extension of the Uniform Resource
Identifier (URI).  An IRI is a sequence of characters from the
Universal Character Set (Unicode/ISO 10646). Grammar and processing
rules are given for IRIs and related syntactic forms.</t>

<t>In addition, this document provides named additional rule sets 
for processing otherwise invalid IRIs, in a way that supports
other specifications that wish to mandate common behavior for
'error' handling. In particular, rules used in some XML languages
(LEIRI) and web applications are given.</t>

<t>Defining IRI as new protocol element (rather than updating or
extending the definition of URI) allows independent orderly
transitions: other protocols and languages that use URIs must
explicitly choose to allow IRIs.</t>

<t>Guidelines are provided for the use and deployment of IRIs and
related protocol elements when revising protocols, formats, and
software components that currently deal only with URIs.</t>

</abstract>
  <note title='RFC Editor: Please remove the next paragraph before publication.'>
    <t>This document is intended to update RFC 3987 and move towards IETF
    Draft Standard.  For discussion and comments on this
    draft, please join the IETF IRI WG by subscribing to the mailing
    list public-iri@w3.org. For a list of open issues, please see
    the issue tracker of the WG at http://trac.tools.ietf.org/wg/iri/trac/report/1.
    For a list of individual edits, please see the change history at
    http://trac.tools.ietf.org/wg/iri/trac/log/draft-ietf-iri-3987bis.</t>
</note>
</front>
<middle>

<section title="Introduction">

<section title="Overview and Motivation" anchor="overview">

<t>A Uniform Resource Identifier (URI) is defined in <xref
target="RFC3986"/> as a sequence of characters chosen from a limited
subset of the repertoire of US-ASCII <xref target="ASCII"/>
characters.</t>

<t>The characters in URIs are frequently used for representing words
of natural languages.  This usage has many advantages: Such URIs are
easier to memorize, easier to interpret, easier to transcribe, easier
to create, and easier to guess. For most languages other than English,
however, the natural script uses characters other than A - Z. For many
people, handling Latin characters is as difficult as handling the
characters of other scripts is for those who use only the Latin
alphabet. Many languages with non-Latin scripts are transcribed with
Latin letters. These transcriptions are now often used in URIs, but
they introduce additional difficulties.</t>

<t>The infrastructure for the appropriate handling of characters from
additional scripts is now widely deployed in operating system and
application software. Software that can handle a wide variety of
scripts and languages at the same time is increasingly common. Also,
an increasing number of protocols and formats can carry a wide range of
characters.</t>

<t>URIs are used both as a protocol element (for transmission and
processing by software) and also a presentation element (for display
and handling by people who read, interpret, coin, or guess them). The
transition between these roles is more difficult and complex when
dealing with the larger set of characters than allowed for URIs in
<xref target="RFC3986"/>. </t>

<t>This document defines the protocol element called Internationalized
Resource Identifier (IRI), which allow applications of URIs to be
extended to use resource identifiers that have a much wider repertoire
of characters. It also provides corresponding "internationalized"
versions of other constructs from <xref target="RFC3986"/>, such as
URI references. The syntax of IRIs is defined in <xref
target="syntax"/>.
</t>

<t>Using characters outside of A - Z in IRIs adds a number of
difficulties. <xref target="Bidi"/> discusses the special case of
bidirectional IRIs using characters from scripts written
right-to-left.  <xref target="IRIuse"/> discusses the use
of IRIs in different situations.  <xref target="guidelines"/> gives
additional informative guidelines.  <xref target="security"/>
discusses IRI-specific security considerations.</t>

  <t>When originally defining IRIs, several design alternatives were considered.
    Historically interested readers can find an overview in Appendix A of <xref target="RFC3987"/>.
  For some additional background on the design of URIs and IRIs, please also see
    <xref target="Gettys"/>.</t>

</section> <!-- overview -->

<section title="Applicability" anchor="Applicability">

<t>IRIs are designed to allow protocols and software that deal with
URIs to be updated to handle IRIs. A "URI scheme" (as defined by <xref
target="RFC3986"/> and registered through the IANA process defined in
<xref target="RFC4395bis"/> also serves as an "IRI scheme". Processing of
IRIs is accomplished by extending the URI syntax while retaining (and
not expanding) the set of "reserved" characters, such that the syntax
for any URI scheme may be extended to allow non-ASCII
characters. In addition, following parsing of an IRI, it is possible
to construct a corresponding URI by first encoding characters outside
of the allowed URI range and then reassembling the components.
</t>

<t>Practical use of IRIs forms in place of URIs forms depends on the
following conditions being met:</t>

<t><list style="hanging">
    
<t hangText="a.">A protocol or format element MUST be explicitly designated to be
  able to carry IRIs. The intent is to avoid introducing IRIs into
  contexts that are not defined to accept them.  For example, XML
  schema <xref target="XMLSchema"/> has an explicit type "anyURI" that
  includes IRIs and IRI references. Therefore, IRIs and IRI references
  can be in attributes and elements of type "anyURI".  On the other
  hand, in the <xref target="RFC2616"/> definition of HTTP/1.1, the
  Request URI is defined as a URI, which means that direct use of IRIs
  is not allowed in HTTP requests.</t>

<t hangText="b.">The protocol or format carrying the IRIs MUST have a
  mechanism to represent the wide range of characters used in IRIs,
  either natively or by some protocol- or format-specific escaping
  mechanism (for example, numeric character references in <xref
  target="XML1"/>).</t>

<t hangText="c.">The URI scheme definition, if it explicitly allows a
  percent sign ("%") in any syntactic component, SHOULD define the
  interpretation of sequences of percent-encoded octets (using "%XX"
  hex octets) as octet from sequences of UTF-8 encoded strings; this
  is recommended in the guidelines for registering new schemes, <xref
  target="RFC4395bis"/>.  For example, this is the practice for IMAP URLs
  <xref target="RFC2192"/>, POP URLs <xref target="RFC2384"/> and the
  URN syntax <xref target="RFC2141"/>). Note that use of
  percent-encoding may also be restricted in some situations, for
  example, URI schemes that disallow percent-encoding might still be
  used with a fragment identifier which is percent-encoded (e.g.,
  <xref target="XPointer"/>). See <xref target="UTF8use"/> for further
  discussion.</t>
</list></t>

</section> <!-- applicability -->

<section title="Definitions" anchor="sec-Definitions">
  
<t>The following definitions are used in this document; they follow the
terms in <xref target="RFC2130"/>, <xref target="RFC2277"/>, and
<xref target="ISO10646"/>.</t>
<t><list style="hanging">
    
<t hangText="character:">A member of a set of elements used for the
    organization, control, or representation of data. For example,
    "LATIN CAPITAL LETTER A" names a character.</t>
    
<t hangText="octet:">An ordered sequence of eight bits considered as a
    unit.</t>
    
<t hangText="character repertoire:">A set of characters (set in the
    mathematical sense).</t>
    
<t hangText="sequence of characters:">A sequence of characters (one
    after another).</t>
    
<t hangText="sequence of octets:">A sequence of octets (one after
    another).</t>
    
<t hangText="character encoding:">A method of representing a sequence
    of characters as a sequence of octets (maybe with variants). Also,
    a method of (unambiguously) converting a sequence of octets into a
    sequence of characters.</t>
    
<t hangText="charset:">The name of a parameter or attribute used to
    identify a character encoding.</t>
    
<t hangText="UCS:">Universal Character Set. The coded character set
    defined by ISO/IEC 10646 <xref target="ISO10646"/> and the Unicode
    Standard <xref target="UNIV6"/>.</t>
    
<t hangText="IRI reference:">Denotes the common usage of an
    Internationalized Resource Identifier. An IRI reference may be
    absolute or relative.  However, the "IRI" that results from such a
    reference only includes absolute IRIs; any relative IRI references
    are resolved to their absolute form.  Note that in <xref
    target="RFC2396"/> URIs did not include fragment identifiers, but
    in <xref target="RFC3986"/> fragment identifiers are part of
    URIs.</t>
    
<t hangText="URL:">The term "URL" was originally used <xref
   target="RFC1738"/> for roughly what is now called a "URI".  Books,
   software and documentation often refers to URIs and IRIs using the
   "URL" term. Some usages restrict "URL" to those URIs which are not
   URNs. Because of the ambiguity of the term using the term "URL" is
   NOT RECOMMENDED in formal documents.</t>

<t hangText="LEIRI (Legacy Extended IRI) processing:">  This term was used in
   various XML specifications to refer
   to strings that, although not valid IRIs, were acceptable input to
   the processing rules in <xref target="LEIRIspec" />.</t>

<t hangText="(Web Address, Hypertext Reference, HREF):"> These terms have been
   added in this document for convenience, to allow other
   specifications to refer to those strings that, although not valid
   IRIs, are acceptable input to the processing rules in <xref
   target="webaddress"/>. This usage corresponds to the parsing rules
   of some popular web browsing applications.
   ISSUE: Need to find a good name/abbreviation for these.</t>
   
<t hangText="running text:">Human text (paragraphs, sentences,
   phrases) with syntax according to orthographic conventions of a
   natural language, as opposed to syntax defined for ease of
   processing by machines (e.g., markup, programming languages).</t>
    
<t hangText="protocol element:">Any portion of a message that affects
    processing of that message by the protocol in question.</t>
    
<t hangText="presentation element:">A presentation form corresponding
    to a protocol element; for example, using a wider range of
    characters.</t>
    
<t hangText="create (a URI or IRI):">With respect to URIs and IRIs,
     the term is used for the initial creation. This may be the
     initial creation of a resource with a certain identifier, or the
     initial exposition of a resource under a particular
     identifier.</t>
    
<t hangText="generate (a URI or IRI):">With respect to URIs and IRIs,
     the term is used when the identifier is generated by derivation
     from other information.</t>

<t hangText="parsed URI component:">When a URI processor parses a URI
   (following the generic syntax or a scheme-specific syntax, the result
   is a set of parsed URI components, each of which has a type
   (corresponding to the syntactic definition) and a sequence of URI
   characters.  </t>

<t hangText="parsed IRI component:">When an IRI processor parses
   an IRI directly, following the general syntax or a scheme-specific
   syntax, the result is a set of parsed IRI components, each of
   which has a type (corresponding to the syntactice definition)
   and a sequence of IRI characters. (This definition is analogous
   to "parsed URI component".)</t>

<t hangText="IRI scheme:">A URI scheme may also be known as
   an "IRI scheme" if the scheme's syntax has been extended to
   allow non-US-ASCII characters according to the rules in this
   document.</t>

</list></t>
</section> <!-- definitions -->
<section title="Notation" anchor="sec-Notation">
     
<t>RFCs and Internet Drafts currently do not allow any characters
outside the US-ASCII repertoire. Therefore, this document uses various
special notations to denote such characters in examples.</t>
     
<t>In text, characters outside US-ASCII are sometimes referenced by
using a prefix of 'U+', followed by four to six hexadecimal
digits.</t>

<t>To represent characters outside US-ASCII in examples, this document
uses two notations: 'XML Notation' and 'Bidi Notation'.</t>

<t>XML Notation uses a leading '&amp;#x', a trailing ';', and the
hexadecimal number of the character in the UCS in between. For
example, &amp;#x44F; stands for CYRILLIC CAPITAL LETTER YA. In this
notation, an actual '&amp;' is denoted by '&amp;amp;'.</t>

<t>Bidi Notation is used for bidirectional examples: Lower case
letters stand for Latin letters or other letters that are written left
to right, whereas upper case letters represent Arabic or Hebrew
letters that are written right to left.</t>

<t>To denote actual octets in examples (as opposed to percent-encoded
octets), the two hex digits denoting the octet are enclosed in "&lt;"
and "&gt;".  For example, the octet often denoted as 0xc9 is denoted
here as &lt;c9&gt;.</t>

<t> In this document, the key words "MUST", "MUST NOT", "REQUIRED",
"SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
and "OPTIONAL" are to be interpreted as described in <xref
target="RFC2119"/>.</t>

</section> <!-- notation -->
</section> <!-- introduction -->

<section title="IRI Syntax" anchor="syntax">
<t>This section defines the syntax of Internationalized Resource
Identifiers (IRIs).</t>

<t>As with URIs, an IRI is defined as a sequence of characters, not as
a sequence of octets. This definition accommodates the fact that IRIs
may be written on paper or read over the radio as well as stored or
transmitted digitally.  The same IRI might be represented as different
sequences of octets in different protocols or documents if these
protocols or documents use different character encodings (and/or
transfer encodings).  Using the same character encoding as the
containing protocol or document ensures that the characters in the IRI
can be handled (e.g., searched, converted, displayed) in the same way
as the rest of the protocol or document.</t>

<section title="Summary of IRI Syntax" anchor="summary">

<t>The IRI syntax extends the URI syntax in <xref
target="RFC3986"/> by extending the class of unreserved characters,
primarily by adding the characters of the UCS (Universal Character Set, <xref
target="ISO10646"/>) beyond U+007F, subject to the limitations given
in the syntax rules below and in <xref target="limitations"/>.</t>

<t>The syntax and use of components and reserved characters is the
same as that in <xref target="RFC3986"/>. Each "URI scheme" thus also
functions as an "IRI scheme", in that scheme-specific parsing rules
for URIs of a scheme are be extended to allow parsing of IRIs using
the same parsing rules.</t>

<t>All the operations defined in <xref target="RFC3986"/>, such as the
resolution of relative references, can be applied to IRIs by
IRI-processing software in exactly the same way as they are for URIs
by URI-processing software.</t>

<t>Characters outside the US-ASCII repertoire MUST NOT be reserved and
therefore MUST NOT be used for syntactical purposes, such as to
delimit components in newly defined schemes. For example, U+00A2, CENT
SIGN, is not allowed as a delimiter in IRIs, because it is in the
'iunreserved' category. This is similar to the fact that it is not
possible to use '-' as a delimiter in URIs, because it is in the
'unreserved' category.</t>

</section> <!-- summary -->
<section title="ABNF for IRI References and IRIs" anchor="abnf">

<t>An ABNF definition for IRI references (which are the most general
concept and the start of the grammar) and IRIs is given here. The
syntax of this ABNF is described in <xref target="STD68"/>. Character
numbers are taken from the UCS, without implying any actual binary
encoding. Terminals in the ABNF are characters, not octets.</t>

<t>The following grammar closely follows the URI grammar in <xref
target="RFC3986"/>, except that the range of unreserved characters is
expanded to include UCS characters, with the restriction that private
UCS characters can occur only in query parts. The grammar is split
into two parts: Rules that differ from <xref target="RFC3986"/>
because of the above-mentioned expansion, and rules that are the same
as those in <xref target="RFC3986"/>. For rules that are different
than those in <xref target="RFC3986"/>, the names of the non-terminals
have been changed as follows. If the non-terminal contains 'URI', this
has been changed to 'IRI'. Otherwise, an 'i' has been prefixed.
The rule &lt;pct-form> has been introduced in order to be able to reference it from other parts of
the document.</t>

<!--
for line length measuring in artwork (max 72 chars, three chars at start):
      1         2         3         4         5         6         7
456789012345678901234567890123456789012345678901234567890123456789012
-->
<figure>
<preamble>The following rules are different from those in <xref target="RFC3986"/>:</preamble>
<artwork>
IRI            = scheme ":" ihier-part [ "?" iquery ]
                 [ "#" ifragment ]

ihier-part     = "//" iauthority ipath-abempty
               / ipath-absolute
               / ipath-rootless
               / ipath-empty

IRI-reference  = IRI / irelative-ref

absolute-IRI   = scheme ":" ihier-part [ "?" iquery ]

irelative-ref  = irelative-part [ "?" iquery ] [ "#" ifragment ]

irelative-part = "//" iauthority ipath-abempty
               / ipath-absolute
               / ipath-noscheme
               / ipath-empty

iauthority     = [ iuserinfo "@" ] ihost [ ":" port ]
iuserinfo      = *( iunreserved / pct-form / sub-delims / ":" )
ihost          = IP-literal / IPv4address / ireg-name

pct-form       = pct-encoded

ireg-name      = *( iunreserved / sub-delims )

ipath          = ipath-abempty   ; begins with "/" or is empty
               / ipath-absolute  ; begins with "/" but not "//"
               / ipath-noscheme  ; begins with a non-colon segment
               / ipath-rootless  ; begins with a segment
               / ipath-empty     ; zero characters

ipath-abempty  = *( path-sep isegment )
ipath-absolute = path-sep [ isegment-nz *( path-sep isegment ) ]
ipath-noscheme = isegment-nz-nc *( path-sep isegment )
ipath-rootless = isegment-nz *( path-sep isegment )
ipath-empty    = 0&lt;ipchar&gt;
path-sep       = "/"

isegment       = *ipchar
isegment-nz    = 1*ipchar
isegment-nz-nc = 1*( iunreserved / pct-form / sub-delims
                     / "@" )
               ; non-zero-length segment without any colon ":"                      

ipchar         = iunreserved / pct-form / sub-delims / ":"
               / "@"
 
iquery         = *( ipchar / iprivate / "/" / "?" )

ifragment      = *( ipchar / "/" / "?" )

iunreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~" / ucschar

ucschar        = %xA0-D7FF / %xF900-FDCF / %xFDF0-FFEF
               / %x10000-1FFFD / %x20000-2FFFD / %x30000-3FFFD
               / %x40000-4FFFD / %x50000-5FFFD / %x60000-6FFFD
               / %x70000-7FFFD / %x80000-8FFFD / %x90000-9FFFD
               / %xA0000-AFFFD / %xB0000-BFFFD / %xC0000-CFFFD
               / %xD0000-DFFFD / %xE1000-EFFFD

iprivate       = %xE000-F8FF / %xE0000-E0FFF / %xF0000-FFFFD
               / %x100000-10FFFD
</artwork>
</figure>

<t>Some productions are ambiguous. The "first-match-wins" (a.k.a. "greedy")
algorithm applies. For details, see <xref target="RFC3986"/>.</t>

<figure>
<preamble>The following rules are the same as those in <xref target="RFC3986"/>:</preamble>
<artwork>
scheme         = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
 
port           = *DIGIT
 
IP-literal     = "[" ( IPv6address / IPvFuture  ) "]"
 
IPvFuture      = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )
 
IPv6address    =                            6( h16 ":" ) ls32
               /                       "::" 5( h16 ":" ) ls32
               / [               h16 ] "::" 4( h16 ":" ) ls32
               / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
               / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
               / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
               / [ *4( h16 ":" ) h16 ] "::"              ls32
               / [ *5( h16 ":" ) h16 ] "::"              h16
               / [ *6( h16 ":" ) h16 ] "::"
               
h16            = 1*4HEXDIG
ls32           = ( h16 ":" h16 ) / IPv4address

IPv4address    = dec-octet "." dec-octet "." dec-octet "." dec-octet

dec-octet      = DIGIT                 ; 0-9
               / %x31-39 DIGIT         ; 10-99
               / "1" 2DIGIT            ; 100-199
               / "2" %x30-34 DIGIT     ; 200-249
               / "25" %x30-35          ; 250-255
            
pct-encoded    = "%" HEXDIG HEXDIG

unreserved     = ALPHA / DIGIT / "-" / "." / "_" / "~"
reserved       = gen-delims / sub-delims
gen-delims     = ":" / "/" / "?" / "#" / "[" / "]" / "@"
sub-delims     = "!" / "$" / "&amp;" / "'" / "(" / ")"
               / "*" / "+" / "," / ";" / "="
</artwork></figure>

<t>This syntax does not support IPv6 scoped addressing zone identifiers.</t>

</section> <!-- abnf -->

</section> <!-- syntax -->

<section title="Processing IRIs and related protocol elements" anchor="processing">

<t>IRIs are meant to replace URIs in identifying resources within new
versions of protocols, formats, and software components that use a
UCS-based character repertoire.  Protocols and components may use and
process IRIs directly. However, there are still numerous systems and
protocols which only accept URIs or components of parsed URIs; that is,
they only accept sequences of characters within the subset of US-ASCII
characters allowed in URIs. </t>

<t>This section defines specific processing steps for IRI consumers
which establish the relationship between the string given and the
interpreted derivatives. These
processing steps apply to both IRIs and IRI references (i.e., absolute
or relative forms); for IRIs, some steps are scheme specific. </t>

<section title="Converting to UCS" anchor="ucsconv"> 
 
<t>Input that is already in a Unicode form (i.e., a sequence of Unicode
 characters or an octet-stream representing a Unicode-based character
 encoding such as UTF-8 or UTF-16) should be left as is and not
 normalized or changed.</t>

  <t>An IRI or IRI reference is a sequence of characters from the UCS.
    For resource identifiers that are not already in a Unicode form
    (as when written on paper, read aloud, or represented in a text stream
    using a legacy character encoding), convert the IRI to Unicode.
    Note that some character encodings or transcriptions can be converted
    to or represented by more than one sequence of Unicode characters.

    Ideally the resulting IRI would use a normalized form,
    such as Unicode Normalization Form C <xref target="UTR15"/>,
    since that ensures a stable, consistent representation
    that is most likely to produce the intended results.
    Implementers and users are cautioned that, while denormalized character sequences are valid,
    they might be difficult for other users or processes to reproduce
    and might lead to unexpected results.
  </t>

<t> In other cases (written on paper, read aloud, or otherwise
 represented independent of any character encoding) represent the IRI
 as a sequence of characters from the UCS normalized according to
 Unicode Normalization Form C (NFC, <xref target="UTR15"/>).</t>
</section> <!-- ucsconv -->

<section title="Parse the IRI into IRI components">

<t>Parse the IRI, either as a relative reference (no scheme)
or using scheme specific processing (according to the scheme
given); the result is a set of parsed IRI components.</t>

<t>NOTE: The result of parsing into components will correspond
to subtrings of the IRI that may be accessible via an API.
For example, in <xref target="HTML5"/>, the protocol
components of interest are SCHEME (scheme), HOST (ireg-name), PORT
(port), the PATH (ipath after the initial "/"), QUERY (iquery),
FRAGMENT (ifragment), and AUTHORITY (iauthority).
</t>

<t>Subsequent processing rules are sometimes used to define other
syntactic components. For example, <xref target="HTML5"/> defines APIs
for IRI processing; in these APIs:

<list style="hanging">
<t hangText="HOSTSPECIFIC"> the substring that follows
the substring matched by the iauthority production, or the whole
string if the iauthority production wasn't matched.</t>
<t hangText="HOSTPORT"> if there is a scheme component and a port
component and the port given by the port component is different than
the default port defined for the protocol given by the scheme
component, then HOSTPORT is the substring that starts with the
substring matched by the host production and ends with the substring
matched by the port production, and includes the colon in between the
two. Otherwise, it is the same as the host component.
</t>
</list>
</t>
</section> <!-- parse -->

<section title="General percent-encoding of IRI components" anchor="compmapping">
   
<t>Except as noted in the following subsections, IRI components are mapped
to the equivalent URI components by percent-encoding those characters
not allowed in URIs. Previous processing steps will have removed
some characters, and the interpretation of reserved characters will
have already been done (with the syntactic reserved characters outside
of the IRI component). This mapping is defined for all sequences
of Unicode characters, whether or not they are valid for the component
in question. </t>
   
<t>For each character which is not allowed anywhere in a valid URI
 apply the following steps. </t>
<t><list style="hanging">

<t hangText="Convert to UTF-8">Convert the character to a sequence of
  one or more octets using UTF-8 <xref target="RFC3629"/>.</t>

<t hangText="Percent encode">Convert each octet of this sequence to %HH,
   where HH is the hexadecimal notation of the octet value. The
   hexadecimal notation SHOULD use uppercase letters. (This is the
   general URI percent-encoding mechanism in Section 2.1 of <xref
   target="RFC3986"/>.)</t>
   
</list></t>

<t>Note that the mapping is an identity transformation for parsed URI
components of valid URIs, and is idempotent: applying the mapping a
second time will not change anything.</t>
</section> <!-- general conversion -->

<section title="Mapping ireg-name" anchor="dnsmapping">
  <section title='Mapping using Percent-Encoding' anchor='dnspercent'>
  <t>The ireg-name component SHOULD be converted
    according to the general procedure for percent-encoding
    of IRI components described in <xref target="compmapping"/>.</t>
  
  <t>For example, the IRI
    <vspace/>"http://r&amp;#xE9;sum&amp;#xE9;.example.org"<vspace/> will be
    converted to <vspace/>"http://r%C3%A9sum%C3%A9.example.org".</t>

  <t>This conversion for ireg-name is in line with Section 3.2.2
    of <xref target="RFC3986"/>, which does not mandate
    a particular registered name lookup technology. For further background,
    see <xref target="RFC6055"/> and <xref target="Gettys"/>.</t>
</section>
<section title="Mapping using Punycode" anchor='dnspunycode'>
  <t>The ireg-name component MAY also be converted as follows:</t>

<t>Replace the ireg-name part of the IRI by the part converted using
the Domain Name Lookup procedure (Subsections 5.3 to 5.5) of <xref target="RFC5891"/>.
  on each dot-separated label, and by using U+002E
(FULL STOP) as a label separator.
This procedure may fail, but this would mean that the IRI cannot be resolved.
In such cases, if the domain name conversion fails, then the
entire IRI conversion fails. Processors that have no mechanism for
signalling a failure MAY instead substitute an otherwise
invalid host name, although such processing SHOULD be avoided.</t>

<t>For example, the IRI
<vspace/>"http://r&amp;#xE9;sum&amp;#xE9;.example.org"<vspace/> MAY be
converted to <vspace/>"http://xn--rsum-bad.example.org"<vspace/>.</t>
  <t>This conversion for ireg-name will be better able to deal with legacy
    infrastructure that cannot handle percent-encoding in domain names.</t>
</section>
  <section title="Additional Considerations">
<t><list style="hanging"> 

<t hangText="Note:">Domain Names may appear in parts of an IRI other
than the ireg-name part.  It is the responsibility of scheme-specific
implementations (if the Internationalized Domain Name is part of the
scheme syntax) or of server-side implementations (if the
Internationalized Domain Name is part of 'iquery') to apply the
necessary conversions at the appropriate point. Example: Trying to
validate the Web page at<vspace/>
http://r&amp;#xE9;sum&amp;#xE9;.example.org would lead to an IRI of
<vspace/>http://validator.w3.org/check?uri=http%3A%2F%2Fr&amp;#xE9;sum&amp;#xE9;.<vspace/>example.org,
which would convert to a URI
of<vspace/>http://validator.w3.org/check?uri=http%3A%2F%2Fr%C3%A9sum%C3%A9.<vspace/>example.org.
The server-side implementation is responsible for making the
necessary conversions to be able to retrieve the Web page.</t>

<t hangText="Note:">In this process, characters allowed in URI
references and existing percent-encoded sequences are not encoded further.
(This mapping is similar to, but different from, the encoding applied
when arbitrary content is included in some part of a URI.)

For example, an IRI of
<vspace/>"http://www.example.org/red%09ros&amp;#xE9;#red"
(in XML notation) is converted to
<vspace/>"http://www.example.org/red%09ros%C3%A9#red", not to
something like
<vspace/>"http%3A%2F%2Fwww.example.org%2Fred%2509ros%C3%A9%23red".</t>

</list></t>
</section>
</section> <!-- dnsmapping -->

<section title="Mapping query components" anchor="querymapping">

<t>((NOTE: SEE ISSUES LIST))

For compatibility with existing deployed HTTP infrastructure,
the following special case applies for schemes "http" and "https"
and IRIs whose origin has a document charset other than one which
is UCS-based (e.g., UTF-8 or UTF-16). In such a case, the "query"
component of an IRI is mapped into a URI by using the document
charset rather than UTF-8 as the binary representation before
pct-encoding. This mapping is not applied for any other scheme
or component.</t>

</section> <!-- querymapping -->

<section title="Mapping IRIs to URIs" anchor="mapping">

<t>The canonical mapping from a IRI to URI is defined by applying the
mapping above (from IRI to URI components) and then reassembling a URI
from the parsed URI components using the original punctuation that
delimited the IRI components. </t>

</section> <!-- mapping -->

<section title="Converting URIs to IRIs" anchor="URItoIRI">

<t>In some situations, for presentation and further processing,
it is desirable to convert a URI into an equivalent IRI in which
natural characters are represented directly rather than
percent encoded. Of course, every URI is already an IRI in 
its own right without any conversion, and in general there
This section gives one such procedure for this conversion.
</t>

<t>
The conversion described in this section, if given a valid URI, will
result in an IRI that maps back to the URI used as an input for the
conversion (except for potential case differences in percent-encoding
and for potential percent-encoded unreserved characters).

However, the IRI resulting from this conversion may differ
from the original IRI (if there ever was one).</t> 

<t>URI-to-IRI conversion removes percent-encodings, but not all
percent-encodings can be eliminated. There are several reasons for
this:</t>

<t><list style="hanging">

<t hangText="1.">Some percent-encodings are necessary to distinguish
    percent-encoded and unencoded uses of reserved characters.</t>

<t hangText="2.">Some percent-encodings cannot be interpreted as sequences
    of UTF-8 octets.<vspace blankLines="1"/>
    (Note: The octet patterns of UTF-8 are highly regular.
    Therefore, there is a very high probability, but no guarantee,
    that percent-encodings that can be interpreted as sequences of UTF-8
    octets actually originated from UTF-8. For a detailed discussion,
    see <xref target="Duerst97"/>.)</t>

<t hangText="3.">The conversion may result in a character that is not
    appropriate in an IRI. See <xref target="abnf"/>, <xref target="visual"/>,
      and <xref target="limitations"/> for further details.</t>

<t hangText="4.">IRI to URI conversion has different rules for
    dealing with domain names and query parameters.</t>

</list></t>

<t>Conversion from a URI to an IRI MAY be done by using the following
steps:

<list style="hanging">
<t hangText="1.">Represent the URI as a sequence of octets in
       US-ASCII.</t>

<t hangText="2.">Convert all percent-encodings ("%" followed by two
      hexadecimal digits) to the corresponding octets, except those
      corresponding to "%", characters in "reserved", and characters
      in US-ASCII not allowed in URIs.</t> 

<t hangText="3.">Re-percent-encode any octet produced in step 2 that
      is not part of a strictly legal UTF-8 octet sequence.</t>


<t hangText="4.">Re-percent-encode all octets produced in step 3 that
      in UTF-8 represent characters that are not appropriate according
      to <xref target="abnf"/>, <xref target="visual"/>, and <xref
      target="limitations"/>.</t> 

<t hangText="5.">Interpret the resulting octet sequence as a sequence
      of characters encoded in UTF-8.</t>

<t hangText="6.">URIs known to contain domain names in the reg-name
      component SHOULD convert punycode-encoded domain name labels to
      the corresponding characters using the ToUnicode procedure. </t>
</list></t>

<t>This procedure will convert as many percent-encoded characters as
possible to characters in an IRI. Because there are some choices when
step 4 is applied (see <xref target="limitations"/>), results may
vary.</t>

<t>Conversions from URIs to IRIs MUST NOT use any character
encoding other than UTF-8 in steps 3 and 4, even if it might be
possible to guess from the context that another character encoding
than UTF-8 was used in the URI.  For example, the URI
"http://www.example.org/r%E9sum%E9.html" might with some guessing be
interpreted to contain two e-acute characters encoded as
iso-8859-1. It must not be converted to an IRI containing these
e-acute characters. Otherwise, in the future the IRI will be mapped to
"http://www.example.org/r%C3%A9sum%C3%A9.html", which is a different
URI from "http://www.example.org/r%E9sum%E9.html".</t>

<section title="Examples">

<t>This section shows various examples of converting URIs to IRIs.
Each example shows the result after each of the steps 1 through 6 is
applied. XML Notation is used for the final result.  Octets are
denoted by "&lt;" followed by two hexadecimal digits followed by
"&gt;".</t>

<t>The following example contains the sequence "%C3%BC", which is a
strictly legal UTF-8 sequence, and which is converted into the actual
character U+00FC, LATIN SMALL LETTER U WITH DIAERESIS (also known as
u-umlaut).

<list style="hanging">
<t hangText="1.">http://www.example.org/D%C3%BCrst</t>
<t hangText="2.">http://www.example.org/D&lt;c3&gt;&lt;bc&gt;rst</t>
<t hangText="3.">http://www.example.org/D&lt;c3&gt;&lt;bc&gt;rst</t>
<t hangText="4.">http://www.example.org/D&lt;c3&gt;&lt;bc&gt;rst</t>
<t hangText="5.">http://www.example.org/D&amp;#xFC;rst</t>
<t hangText="6.">http://www.example.org/D&amp;#xFC;rst</t>
</list>
</t>

<t>The following example contains the sequence "%FC", which might
represent U+00FC, LATIN SMALL LETTER U WITH DIAERESIS, in
the<vspace/>iso-8859-1 character encoding.  (It might represent other
characters in other character encodings. For example, the octet
&lt;fc&gt; in iso-8859-5 represents U+045C, CYRILLIC SMALL LETTER
KJE.)  Because &lt;fc&gt; is not part of a strictly legal UTF-8
sequence, it is re-percent-encoded in step 3.


<list style="hanging">
<t hangText="1.">http://www.example.org/D%FCrst</t>
<t hangText="2.">http://www.example.org/D&lt;fc&gt;rst</t>
<t hangText="3.">http://www.example.org/D%FCrst</t>
<t hangText="4.">http://www.example.org/D%FCrst</t>
<t hangText="5.">http://www.example.org/D%FCrst</t>
<t hangText="6.">http://www.example.org/D%FCrst</t>
</list>
</t>

<t>The following example contains "%e2%80%ae", which is the percent-encoded<vspace/>UTF-8
character encoding of U+202E, RIGHT-TO-LEFT OVERRIDE. <xref target="visual"/>
forbids the direct use of this character in an IRI. Therefore, the
corresponding octets are re-percent-encoded in step 4. This example shows
that the case (upper- or lowercase) of letters used in percent-encodings may not be preserved.
The example also contains a punycode-encoded domain name label (xn--99zt52a),
which is not converted.

<list style="hanging">
<t hangText="1.">http://xn--99zt52a.example.org/%e2%80%ae</t>
<t hangText="2.">http://xn--99zt52a.example.org/&lt;e2&gt;&lt;80&gt;&lt;ae&gt;</t>
<t hangText="3.">http://xn--99zt52a.example.org/&lt;e2&gt;&lt;80&gt;&lt;ae&gt;</t>
<t hangText="4.">http://xn--99zt52a.example.org/%E2%80%AE</t>
<t hangText="5.">http://xn--99zt52a.example.org/%E2%80%AE</t>
<t hangText="6.">http://&amp;#x7D0D;&amp;#x8C46;.example.org/%E2%80%AE</t>
</list></t>

<t>Note that the label "xn--99zt52a" is converted to U+7D0D U+8C46
(Japanese Natto). ((EDITOR NOTE: There is some inconsistency in this note.))</t>

</section> <!-- examples -->
</section> <!-- URItoIRI -->
</section> <!-- processing -->
<section title="Bidirectional IRIs for Right-to-Left Languages" anchor="Bidi">

<t>Some UCS characters, such as those used in the Arabic and Hebrew
scripts, have an inherent right-to-left (rtl) writing direction. IRIs
containing these characters (called bidirectional IRIs or Bidi IRIs)
require additional attention because of the non-trivial relation
between logical representation (used for digital representation and
for reading/spelling) and visual representation (used for
display/printing).</t>

<t>Because of the complex interaction between the logical representation,
the visual representation, and the syntax of a Bidi IRI, a balance is
needed between various requirements.
The main requirements are<list style="hanging">
<t hangText="1.">user-predictable conversion between visual and
    logical representation;</t>
<t hangText="2.">the ability to include a wide range of characters
    in various parts of the IRI; and</t>
<t hangText="3.">minor or no changes or restrictions for
      implementations.</t>
</list></t>

<section title="Logical Storage and Visual Presentation" anchor="visual">

<t>When stored or transmitted in digital representation, bidirectional
IRIs MUST be in full logical order and MUST conform to the IRI syntax
rules (which includes the rules relevant to their scheme). This
ensures that bidirectional IRIs can be processed in the same way as
other IRIs.</t> <t>Bidirectional IRIs MUST be rendered by using the
Unicode Bidirectional Algorithm <xref target="UNIV6"/>, <xref
target="UNI9"/>.  Bidirectional IRIs MUST be rendered in the same way
as they would be if they were in a left-to-right embedding; i.e., as
if they were preceded by U+202A, LEFT-TO-RIGHT EMBEDDING (LRE), and
followed by U+202C, POP DIRECTIONAL FORMATTING (PDF).  Setting the
embedding direction can also be done in a higher-level protocol (e.g.,
the dir='ltr' attribute in HTML).</t> 

<t>There is no requirement to use the above embedding if the display
is still the same without the embedding. For example, a bidirectional
IRI in a text with left-to-right base directionality (such as used for
English or Cyrillic) that is preceded and followed by whitespace and
strong left-to-right characters does not need an embedding.  Also, a
bidirectional relative IRI reference that only contains strong
right-to-left characters and weak characters and that starts and ends
with a strong right-to-left character and appears in a text with
right-to-left base directionality (such as used for Arabic or Hebrew)
and is preceded and followed by whitespace and strong characters does
not need an embedding.</t>

<t>In some other cases, using U+200E, LEFT-TO-RIGHT MARK (LRM), may be
sufficient to force the correct display behavior.  However, the
details of the Unicode Bidirectional algorithm are not always easy to
understand. Implementers are strongly advised to err on the side of
caution and to use embedding in all cases where they are not
completely sure that the display behavior is unaffected without the
embedding.</t>

<t>The Unicode Bidirectional Algorithm (<xref target="UNI9"/>, section
4.3) permits higher-level protocols to influence bidirectional
rendering. Such changes by higher-level protocols MUST NOT be used if
they change the rendering of IRIs.</t> 

<t>The bidirectional formatting characters that may be used before or
after the IRI to ensure correct display are not themselves part of the
IRI.  IRIs MUST NOT contain bidirectional formatting characters (LRM,
RLM, LRE, RLE, LRO, RLO, and PDF). They affect the visual rendering of
the IRI but do not appear themselves. It would therefore not be
possible to input an IRI with such characters correctly.</t>

</section> <!-- visual -->
<section title="Bidi IRI Structure" anchor="bidi-structure">

<t>The Unicode Bidirectional Algorithm is designed mainly for running
text.  To make sure that it does not affect the rendering of
bidirectional IRIs too much, some restrictions on bidirectional IRIs
are necessary. These restrictions are given in terms of delimiters
(structural characters, mostly punctuation such as "@", ".", ":",
and<vspace/>"/") and components (usually consisting mostly of letters
and digits).</t>

<t>The following syntax rules from <xref target="abnf"/> correspond to
components for the purpose of Bidi behavior: iuserinfo, ireg-name,
isegment, isegment-nz, isegment-nz-nc, ireg-name, iquery, and
ifragment.</t>

<t>Specifications that define the syntax of any of the above
components MAY divide them further and define smaller parts to be
components according to this document. As an example, the restrictions
of <xref target="RFC3490"/> on bidirectional domain names correspond
to treating each label of a domain name as a component for schemes
with ireg-name as a domain name.  Even where the components are not
defined formally, it may be helpful to think about some syntax in
terms of components and to apply the relevant restrictions.  For
example, for the usual name/value syntax in query parts, it is
convenient to treat each name and each value as a component. As
another example, the extensions in a resource name can be treated as
separate components.</t>

<t>For each component, the following restrictions apply:</t>
<t>
<list style="hanging">

<t hangText="1.">A component SHOULD NOT use both right-to-left and
  left-to-right characters.</t>

<t hangText="2.">A component using right-to-left characters SHOULD
  start and end with right-to-left characters.</t>

</list></t>

<t>The above restrictions are given as "SHOULD"s, rather than as
"MUST"s.  For IRIs that are never presented visually, they are not
relevant.  However, for IRIs in general, they are very important to
ensure consistent conversion between visual presentation and logical
representation, in both directions.</t>

<t><list style="hanging">

<t hangText="Note:">In some components, the above restrictions may
  actually be strictly enforced.  For example, <xref
  target="RFC3490"></xref> requires that these restrictions apply to
  the labels of a host name for those schemes where ireg-name is a
  host name.  In some other components (for example, path components)
  following these restrictions may not be too difficult.  For other
  components, such as parts of the query part, it may be very
  difficult to enforce the restrictions because the values of query
  parameters may be arbitrary character sequences.</t>

</list></t>

<t>If the above restrictions cannot be satisfied otherwise, the
affected component can always be mapped to URI notation as described
in <xref target="compmapping"/>. Please note that the whole component
has to be mapped (see also Example 9 below).</t>

</section> <!-- bidi-structure -->

<section title="Input of Bidi IRIs" anchor="bidiInput">

<t>Bidi input methods MUST generate Bidi IRIs in logical order while
rendering them according to <xref target="visual"/>.  During input,
rendering SHOULD be updated after every new character is input to
avoid end-user confusion.</t>

</section> <!-- bidiInput -->

<section title="Examples">

<t>This section gives examples of bidirectional IRIs, in Bidi
Notation.  It shows legal IRIs with the relationship between logical
and visual representation and explains how certain phenomena in this
relationship may look strange to somebody not familiar with
bidirectional behavior, but familiar to users of Arabic and Hebrew. It
also shows what happens if the restrictions given in <xref
target="bidi-structure"/> are not followed. The examples below can be
seen at <xref target="BidiEx"/>, in Arabic, Hebrew, and Bidi Notation
variants.</t>

<t>To read the bidi text in the examples, read the visual
representation from left to right until you encounter a block of rtl
text. Read the rtl block (including slashes and other special
characters) from right to left, then continue at the next unread ltr
character.</t>

<t>Example 1: A single component with rtl characters is inverted:
<vspace/>Logical representation:
"http://ab.CDEFGH.ij/kl/mn/op.html"<vspace/>Visual representation:
"http://ab.HGFEDC.ij/kl/mn/op.html"<vspace/> Components can be read
one by one, and each component can be read in its natural
direction.</t>

<t>Example 2: More than one consecutive component with rtl characters
is inverted as a whole: <vspace/>Logical representation:
"http://ab.CDE.FGH/ij/kl/mn/op.html"<vspace/>Visual representation:
"http://ab.HGF.EDC/ij/kl/mn/op.html"<vspace/> A sequence of rtl
components is read rtl, in the same way as a sequence of rtl words is
read rtl in a bidi text.</t>

<t>Example 3: All components of an IRI (except for the scheme) are
rtl.  All rtl components are inverted overall: <vspace/>Logical
representation:
"http://AB.CD.EF/GH/IJ/KL?MN=OP;QR=ST#UV"<vspace/>Visual
representation: "http://VU#TS=RQ;PO=NM?LK/JI/HG/FE.DC.BA"<vspace/> The
whole IRI (except the scheme) is read rtl. Delimiters between rtl
components stay between the respective components; delimiters between
ltr and rtl components don't move.</t>

<t>Example 4: Each of several sequences of rtl components is inverted
on its own: <vspace/>Logical representation:
"http://AB.CD.ef/gh/IJ/KL.html"<vspace/>Visual representation:
"http://DC.BA.ef/gh/LK/JI.html"<vspace/> Each sequence of rtl
components is read rtl, in the same way as each sequence of rtl words
in an ltr text is read rtl.</t>

<t>Example 5: Example 2, applied to components of different kinds:
<vspace/>Logical representation: "http://ab.cd.EF/GH/ij/kl.html"
<vspace/>Visual representation:
"http://ab.cd.HG/FE/ij/kl.html"<vspace/> The inversion of the domain
name label and the path component may be unexpected, but it is
consistent with other bidi behavior.  For reassurance that the domain
component really is "ab.cd.EF", it may be helpful to read aloud the
visual representation following the bidi algorithm. After
"http://ab.cd." one reads the RTL block "E-F-slash-G-H", which
corresponds to the logical representation.
</t>

<t>Example 6: Same as Example 5, with more rtl components:
<vspace/>Logical representation:
"http://ab.CD.EF/GH/IJ/kl.html"<vspace/>Visual representation:
"http://ab.JI/HG/FE.DC/kl.html"<vspace/> The inversion of the domain
name labels and the path components may be easier to identify because
the delimiters also move.</t>

<t>Example 7: A single rtl component includes digits: <vspace/>Logical
representation: "http://ab.CDE123FGH.ij/kl/mn/op.html"<vspace/>Visual
representation: "http://ab.HGF123EDC.ij/kl/mn/op.html"<vspace/>
Numbers are written ltr in all cases but are treated as an additional
embedding inside a run of rtl characters. This is completely
consistent with usual bidirectional text.</t>

<t>Example 8 (not allowed): Numbers are at the start or end of an rtl
component:<vspace/>Logical representation:
"http://ab.cd.ef/GH1/2IJ/KL.html"<vspace/>Visual representation:
"http://ab.cd.ef/LK/JI1/2HG.html"<vspace/> The sequence "1/2" is
interpreted by the bidi algorithm as a fraction, fragmenting the
components and leading to confusion. There are other characters that
are interpreted in a special way close to numbers; in particular, "+",
"-", "#", "$", "%", ",", ".", and ":".</t>

<t>Example 9 (not allowed): The numbers in the previous example are
percent-encoded: <vspace/>Logical representation:
"http://ab.cd.ef/GH%31/%32IJ/KL.html",<vspace/>Visual representation:
"http://ab.cd.ef/LK/JI%32/%31HG.html"</t>

<t>Example 10 (allowed but not recommended): <vspace/>Logical
representation: "http://ab.CDEFGH.123/kl/mn/op.html"<vspace/>Visual
representation: "http://ab.123.HGFEDC/kl/mn/op.html"<vspace/>
Components consisting of only numbers are allowed (it would be rather
difficult to prohibit them), but these may interact with adjacent RTL
components in ways that are not easy to predict.</t>

<t>Example 11 (allowed but not recommended): <vspace/>Logical
representation: "http://ab.CDEFGH.123ij/kl/mn/op.html"<vspace/>Visual
representation: "http://ab.123.HGFEDCij/kl/mn/op.html"<vspace/>
Components consisting of numbers and left-to-right characters are
allowed, but these may interact with adjacent RTL components in ways
that are not easy to predict.</t>
</section><!-- examples -->
</section><!-- bidi -->

<section title="Use of IRIs" anchor="IRIuse">

<section title="Limitations on UCS Characters Allowed in IRIs" anchor="limitations">

<t>This section discusses limitations on characters and character
sequences usable for IRIs beyond those given in <xref target="abnf"/>
and <xref target="visual"/>. The considerations in this section are
relevant when IRIs are created and when URIs are converted to
IRIs.</t>

<t>

<list style="hanging"><t hangText="a.">The repertoire of characters allowed
    in each IRI component is limited by the definition of that component.
    For example, the definition of the scheme component does not allow
    characters beyond US-ASCII.
    <vspace blankLines="1"/>
    (Note: In accordance with URI practice, generic IRI
    software cannot and should not check for such limitations.)</t>

<t hangText="b.">The UCS contains many areas of characters for which
    there are strong visual look-alikes. Because of the likelihood of
    transcription errors, these also should be avoided. This includes
    the full-width equivalents of Latin characters, half-width
    Katakana characters for Japanese, and many others. It also
    includes many look-alikes of "space", "delims", and "unwise",
    characters excluded in <xref target="RFC3491"/>.</t>
    
</list>
</t>

<t>Additional information is available from <xref target="UNIXML"/>.
    <xref target="UNIXML"/> is written in the context of running text
    rather than in that of identifiers. Nevertheless, it discusses
    many of the categories of characters not appropriate for IRIs.</t>
</section> <!-- limitations -->

<section title="Software Interfaces and Protocols">

<t>Although an IRI is defined as a sequence of characters, software
interfaces for URIs typically function on sequences of octets or other
kinds of code units. Thus, software interfaces and protocols MUST
define which character encoding is used.</t>

<t>Intermediate software interfaces between IRI-capable components and
URI-only components MUST map the IRIs per <xref target="mapping"/>,
when transferring from IRI-capable to URI-only components. 

This mapping SHOULD be applied as late as possible. It SHOULD NOT be
applied between components that are known to be able to handle IRIs.</t>
</section> <!-- software -->

<section title="Format of URIs and IRIs in Documents and Protocols">

<t>Document formats that transport URIs may have to be upgraded to allow
the transport of IRIs. In cases where the document as a whole
has a native character encoding, IRIs MUST also be encoded in this
character encoding and converted accordingly by a parser or interpreter.

IRI characters not expressible in the native character encoding SHOULD
be escaped by using the escaping conventions of the document format if
such conventions are available. Alternatively, they MAY be
percent-encoded according to <xref target="mapping"/>. For example, in
HTML or XML, numeric character references SHOULD be used. If a
document as a whole has a native character encoding and that character
encoding is not UTF-8, then IRIs MUST NOT be placed into the document
in the UTF-8 character encoding.</t>

<t>((UPDATE THIS NOTE)) Note: Some formats already accommodate IRIs,
although they use different terminology. HTML 4.0 <xref
target="HTML4"/> defines the conversion from IRIs to URIs as
error-avoiding behavior. XML 1.0 <xref target="XML1"/>, XLink <xref
target="XLink"/>, XML Schema <xref target="XMLSchema"/>, and
specifications based upon them allow IRIs. Also, it is expected that
all relevant new W3C formats and protocols will be required to handle
IRIs <xref target="CharMod"/>.</t>

</section> <!-- format -->

<section title="Use of UTF-8 for Encoding Original Characters" anchor="UTF8use">

<t>This section discusses details and gives examples for point c) in
<xref target="Applicability"/>. To be able to use IRIs, the URI
corresponding to the IRI in question has to encode original characters
into octets by using UTF-8.  This can be specified for all URIs of a
URI scheme or can apply to individual URIs for schemes that do not
specify how to encode original characters.  It can apply to the whole
URI, or only to some part. For background information on encoding
characters into URIs, see also Section 2.5 of <xref
target="RFC3986"/>.</t>

<t>For new URI schemes, using UTF-8 is recommended in <xref
target="RFC4395bis"/>.  Examples where UTF-8 is already used are the URN
syntax <xref target="RFC2141"/>, IMAP URLs <xref target="RFC2192"/>,
and POP URLs <xref target="RFC2384"/>.  On the other hand, because the
HTTP URI scheme does not specify how to encode original characters,
only some HTTP URLs can have corresponding but different IRIs.</t>

<t>For example, for a document with a URI
of<vspace/>"http://www.example.org/r%C3%A9sum%C3%A9.html", it is
possible to construct a corresponding IRI (in XML notation, see <xref
target="sec-Notation"/>):
"http://www.example.org/r&amp;#xE9;sum&amp;#xE9;.html" ("&amp;#xE9;"
stands for the e-acute character, and "%C3%A9" is the UTF-8 encoded
and percent-encoded representation of that character). On the other
hand, for a document with a URI of
"http://www.example.org/r%E9sum%E9.html", the percent-encoding octets
cannot be converted to actual characters in an IRI, as the
percent-encoding is not based on UTF-8.</t>

<t>For most URI schemes, there is no need to upgrade their scheme
definition in order for them to work with IRIs.  The main case where
upgrading makes sense is when a scheme definition, or a particular
component of a scheme, is strictly limited to the use of US-ASCII
characters with no provision to include non-ASCII characters/octets
via percent-encoding, or if a scheme definition currently uses highly
scheme-specific provisions for the encoding of non-ASCII characters.
An example of this is the mailto: scheme <xref target="RFC2368"/>.</t>

<t>This specification updates the IANA registry of URI schemes to note
their applicability to IRIs, see <xref target="iana"/>.  All IRIs use
URI schemes, and all URIs with URI schemes can be used as IRIs, even
though in some cases only by using URIs directly as IRIs, without any
conversion.</t>

<t>Scheme definitions can impose restrictions on the syntax of
scheme-specific URIs; i.e., URIs that are admissible under the generic
URI syntax <xref target="RFC3986"/> may not be admissible due to
narrower syntactic constraints imposed by a URI scheme
specification. URI scheme definitions cannot broaden the syntactic
restrictions of the generic URI syntax; otherwise, it would be
possible to generate URIs that satisfied the scheme-specific syntactic
constraints without satisfying the syntactic constraints of the
generic URI syntax. However, additional syntactic constraints imposed
by URI scheme specifications are applicable to IRI, as the
corresponding URI resulting from the mapping defined in <xref
target="mapping"/> MUST be a valid URI under the syntactic
restrictions of generic URI syntax and any narrower restrictions
imposed by the corresponding URI scheme specification.</t>

<t>The requirement for the use of UTF-8 generally applies to all parts
of a URI.  However, it is possible that the capability of IRIs to
represent a wide range of characters directly is used just in some
parts of the IRI (or IRI reference). The other parts of the IRI may
only contain US-ASCII characters, or they may not be based on
UTF-8. They may be based on another character encoding, or they may
directly encode raw binary data (see also <xref
target="RFC2397"/>). </t>

<t>For example, it is possible to have a URI reference
of<vspace/>"http://www.example.org/r%E9sum%E9.xml#r%C3%A9sum%C3%A9",
where the document name is encoded in iso-8859-1 based on server
settings, but where the fragment identifier is encoded in UTF-8 according
to <xref target="XPointer"/>. The IRI corresponding to the above
URI would be (in XML notation)<vspace/>"http://www.example.org/r%E9sum%E9.xml#r&amp;#xE9;sum&amp;#xE9;".</t>

<t>Similar considerations apply to query parts. The functionality
of IRIs (namely, to be able to include non-ASCII characters) can
only be used if the query part is encoded in UTF-8.</t>

</section> <!-- utf8 -->

<section title="Relative IRI References">
<t>Processing of relative IRI references against a base is handled
straightforwardly; the algorithms of <xref target="RFC3986"/> can
be applied directly, treating the characters additionally allowed
in IRI references in the same way that unreserved characters are in URI
references.</t>

</section> <!-- relative -->
</section> <!-- IRIuse -->

<section title="Liberal Handling of Otherwise Invalid IRIs" anchor="LEIRIHREF">

<t>(EDITOR NOTE: This Section may move to an appendix.) 
  
Some technical specifications and widely-deployed software have
allowed additional variations and extensions of IRIs to be used in
syntactic components. This section describes two widely-used
preprocessing agreements. Other technical specifications may wish to
reference a syntactic component which is "a valid IRI or a string that
will map to a valid IRI after this preprocessing algorithm". These two
variants are known as <xref target="LEIRI">Legacy Extended IRI or
LEIRI</xref>, and <xref target="HTML5">Web Address</xref>).
</t>

<t>Future technical specifications SHOULD NOT allow conforming
producers to produce, or conforming content to contain, such forms,
as they are not interoperable with other IRI consuming software.</t>

<section title="LEIRI Processing"  anchor="LEIRIspec">
  <t>This section defines Legacy Extended IRIs (LEIRIs).
    The syntax of Legacy Extended IRIs is the same as that for &lt;IRI-reference>,
    except that the ucschar production is replaced by the leiri-ucschar production:</t>
<figure>

<artwork>
  leiri-ucschar  = " " / "&lt;" / "&gt;" / '"' / "{" / "}" / "|"
                   / "\" / "^" / "`" / %x0-1F / %x7F-D7FF
                   / %xE000-FFFD / %x10000-10FFFF
</artwork>

<postamble>
  Among other extensions, processors based on this specification also
  did not enforce the restriction on bidirectional formatting
  characters in <xref target="visual"></xref>, and the iprivate
  production becomes redundant.</postamble>
</figure>

<t>To convert a string allowed as a LEIRI to an IRI, each character
allowed in leiri-ucschar but not in ucschar must be percent-encoded
using <xref target="compmapping"/>.</t>
</section> <!-- leiriproc -->

<section title="Web Address Processing" anchor="webaddress">

<t>Many popular web browsers have taken the approach of being quite
liberal in what is accepted as a "URL" or its relative
forms. This section describes their behavior in terms of a preprocessor
which maps strings into the IRI space for subsequent parsing and
interpretation as an IRI.</t>

<t>In some situations, it might be appropriate to describe the syntax
that a liberal consumer implementation might accept as a "Web
Address" or "Hypertext Reference" or "HREF". However, 
technical specifications SHOULD restrict the syntactic form allowed by compliant producers 
to the IRI or IRI reference syntax defined in this document
even if they want to mandate this processing.</t>

<t>
Summary:
<list style="symbols">
   <t>Leading and trailing whitespace is removed.</t>
   <t>Some additional characters are removed.</t>
   <t>Some additional characters are allowed and escaped (as with LEIRI).</t>
   <t>If interpreting an IRI as a URI, the pct-encoding of the query
   component of the parsed URI component depends on operational
   context.</t>
</list>
</t>

<t>Each string provided may have an associated charset (called
the HREF-charset here); this defaults to UTF-8.
For web browsers interpreting HTML, the document
charset of a string is determined:

<list style="hanging">
<t hangText="If the string came from a script (e.g. as an argument to
 a method)">The HRef-charset is the script's charset.</t>

<t hangText="If the string came from a DOM node (e.g. from an
  element)">The node has a Document, and the HRef-charset is the
  Document's character encoding.</t>

<t hangText="If the string had a HRef-charset defined when the string was
created or defined">The HRef-charset is as defined.</t>

</list></t>

<t>If the resulting HRef-charset is a unicode based character encoding 
(e.g., UTF-16), then use UTF-8 instead.</t>


<figure>
<preamble>The syntax for Web Addresses is obtained by replacing the 'ucschar',
  pct-form, path-sep, and ifragment rules with the href-ucschar, href-pct-form, href-path-sep,
  and href-ifragment
  rules below. In addition, some characters are stripped.</preamble>

<artwork type='abnf'>
  href-ucschar   = " " / "&lt;" / "&gt;" / DQUOTE / "{" / "}" / "|"
                 / "\" / "^" / "`" / %x0-1F / %x7F-D7FF
                 / %xE000-FFFD / %x10000-10FFFF
  href-pct-form  = pct-encoded / "%" 
  href-path-sep  = "/" / "\"
  href-ifragment = *( ipchar / "/" / "?" / "#" )  ; adding "#"
  href-strip     = &lt;to be done&gt;
</artwork>

<postamble>
(NOTE: NEED TO FIX THESE SETS TO MATCH HTML5; NOT SURE ABOUT NEXT SENTENCE)
browsers did not enforce the restriction on bidirectional formatting
  characters in <xref target="visual"></xref>, and the iprivate
  production becomes redundant.</postamble>
</figure>

<t>'Web Address processing' requires the following additional
preprocessing steps:

<list style="numbers">

<t>Leading and trailing instances of space (U+0020),
CR (U+000A), LF (U+000D), and TAB (U+0009) characters are removed.</t>

<t>strip all characters in href-strip.</t>
  <t>Percent-encode all characters in href-ucschar not in ucschar.</t>
  <t>Replace occurrences of "%" not followed by two hexadecimal digits by "%25".</t>
  <t>Convert backslashes ('\') matching href-path-sep to forward slashes ('/').</t>
</list></t>
</section> <!-- webaddress -->

<section title="Characters Not Allowed in IRIs" anchor="notAllowed">

<t>This section provides a list of the groups of characters and code
points that are allowed by LEIRI or HREF but are not allowed in IRIs or are
allowed in IRIs only in the query part. For each group of characters,
advice on the usage of these characters is also given, concentrating
on the reasons for why they are excluded from IRI use.</t>

<t>

<list><t>Space (U+0020): Some formats and applications use space as a
delimiter, e.g. for items in a list. Appendix C of <xref
target="RFC3986"></xref> also mentions that white space may have to be
added when displaying or printing long URIs; the same applies to long
IRIs. This means that spaces can disappear, or can make the what is
intended as a single IRI or IRI reference to be treated as two or more
separate IRIs.</t>

<t>Delimiters "&lt;" (U+003C), "&gt;" (U+003E), and '"' (U+0022):
Appendix C of <xref target="RFC3986"></xref> suggests the use of
double-quotes ("http://example.com/") and angle brackets
(&lt;http://example.com/&gt;) as delimiters for URIs in plain
text. These conventions are often used, and also apply to IRIs.  Using
these characters in strings intended to be IRIs would result in the
IRIs being cut off at the wrong place.</t>

<t>Unwise characters "\" (U+005C), "^" (U+005E), "`"
(U+0060), "{" (U+007B), "|" (U+007C), and "}" (U+007D): These
characters originally have been excluded from URIs because the
respective codepoints are assigned to different graphic characters in
some 7-bit or 8-bit encoding. Despite the move to Unicode, some of
these characters are still occasionally displayed differently on some
systems, e.g. U+005C may appear as a Japanese Yen symbol on some
systems. Also, the fact that these characters are not used in URIs or
IRIs has encouraged their use outside URIs or IRIs in contexts that
may include URIs or IRIs. If a string with such a character were used
as an IRI in such a context, it would likely be interpreted
piecemeal.</t>

<t>The controls (C0 controls, DEL, and C1 controls, #x0 - #x1F #x7F -
#x9F): There is generally no way to transmit these characters reliably
as text outside of a charset encoding.  Even when in encoded form,
many software components silently filter out some of these characters,
or may stop processing alltogether when encountering some of
them. These characters may affect text display in subtle, unnoticable
ways or in drastic, global, and irreversible ways depending on the
hardware and software involved. The use of some of these characters
would allow malicious users to manipulate the display of an IRI and
its context in many situations.</t>

<t>Bidi formatting characters (U+200E, U+200F, U+202A-202E): These
characters affect the display ordering of characters. If IRIs were
allowed to contain these characters and the resulting visual display
transcribed. they could not be converted back to electronic form
(logical order) unambiguously. These characters, if allowed in IRIs,
might allow malicious users to manipulate the display of IRI and its
context.</t>

<t>Specials (U+FFF0-FFFD): These code points provide functionality
beyond that useful in an IRI, for example byte order identification,
annotation, and replacements for unknown characters and objects. Their
use and interpretation in an IRI would serve no purpose and might lead
to confusing display variations.</t>

<t>Private use code points (U+E000-F8FF, U+F0000-FFFFD,
U+100000-10FFFD): Display and interpretation of these code points is
by definition undefined without private agreement. Therefore, these
code points are not suited for use on the Internet. They are not
interoperable and may have unpredictable effects.</t>

<t>Tags (U+E0000-E0FFF): These characters provide a way to language
tag in Unicode plain text. They are not appropriate for IRIs because
language information in identifiers cannot reliably be input,
transmitted (e.g. on a visual medium such as paper), or
recognized.</t>

<t>Non-characters (U+FDD0-FDEF, U+1FFFE-1FFFF, U+2FFFE-2FFFF,
U+3FFFE-3FFFF, U+4FFFE-4FFFF, U+5FFFE-5FFFF, U+6FFFE-6FFFF,
U+7FFFE-7FFFF, U+8FFFE-8FFFF, U+9FFFE-9FFFF, U+AFFFE-AFFFF,
U+BFFFE-BFFFF, U+CFFFE-CFFFF, U+DFFFE-DFFFF, U+EFFFE-EFFFF,
U+FFFFE-FFFFF, U+10FFFE-10FFFF): These code points are defined as
non-characters. Applications may use some of them internally, but are
not prepared to interchange them.</t>

</list></t>

<t>LEIRI preprocessing disallowed some code points and
code units:

<list><t>Surrogate code units (D800-DFFF): These do not represent
Unicode codepoints.</t></list></t>
</section> <!-- notallowed -->
</section> <!-- lieirihref -->
  
<section title="URI/IRI Processing Guidelines (Informative)" anchor="guidelines">

<t>This informative section provides guidelines for supporting IRIs in
the same software components and operations that currently process
URIs: Software interfaces that handle URIs, software that allows users
to enter URIs, software that creates or generates URIs, software that
displays URIs, formats and protocols that transport URIs, and software
that interprets URIs. These may all require modification before
functioning properly with IRIs. The considerations in this section
also apply to URI references and IRI references.</t>

<section title="URI/IRI Software Interfaces">
<t>Software interfaces that handle URIs, such as URI-handling APIs and
protocols transferring URIs, need interfaces and protocol elements
that are designed to carry IRIs.</t>

<t>In case the current handling in an API or protocol is based on
US-ASCII, UTF-8 is recommended as the character encoding for IRIs, as
it is compatible with US-ASCII, is in accordance with the
recommendations of <xref target="RFC2277"/>, and makes converting to
URIs easy. In any case, the API or protocol definition must clearly
define the character encoding to be used.</t>

<t>The transfer from URI-only to IRI-capable components requires no
mapping, although the conversion described in <xref
target="URItoIRI"/> above may be performed. It is preferable not to
perform this inverse conversion unless it is certain this can be done
correctly.</t>
</section>

<section title="URI/IRI Entry">

<t>Some components allow users to enter URIs into the system
by typing or dictation, for example. This software must be updated to allow
for IRI entry.</t>

<t>A person viewing a visual representation of an IRI (as a sequence
of glyphs, in some order, in some visual display) or hearing an IRI
will use an entry method for characters in the user's language to
input the IRI. Depending on the script and the input method used, this
may be a more or less complicated process.</t>

<t>The process of IRI entry must ensure, as much as possible, that the
restrictions defined in <xref target="abnf"/> are met. This may be
done by choosing appropriate input methods or variants/settings
thereof, by appropriately converting the characters being input, by
eliminating characters that cannot be converted, and/or by issuing a
warning or error message to the user.</t>

<t>As an example of variant settings, input method editors for East
Asian Languages usually allow the input of Latin letters and related
characters in full-width or half-width versions. For IRI input, the
input method editor should be set so that it produces half-width Latin
letters and punctuation and full-width Katakana.</t>

<t>An input field primarily or solely used for the input of URIs/IRIs
might allow the user to view an IRI as it is mapped to a URI.  Places
where the input of IRIs is frequent may provide the possibility for
viewing an IRI as mapped to a URI. This will help users when some of
the software they use does not yet accept IRIs.</t>

<t>An IRI input component interfacing to components that handle URIs,
but not IRIs, must map the IRI to a URI before passing it to these
components.</t>

<t>For the input of IRIs with right-to-left characters, please see
<xref target="bidiInput"></xref>.</t>
</section>

<section title="URI/IRI Transfer between Applications">

<t>Many applications (for example, mail user agents) try to detect
URIs appearing in plain text. For this, they use some heuristics based
on URI syntax. They then allow the user to click on such URIs and
retrieve the corresponding resource in an appropriate (usually
scheme-dependent) application.</t>

<t>Such applications would need to be upgraded, in order to use the
IRI syntax as a base for heuristics. In particular, a non-ASCII
character should not be taken as the indication of the end of an IRI.
Such applications also would need to make sure that they correctly
convert the detected IRI from the character encoding of the document
or application where the IRI appears, to the character encoding used
by the system-wide IRI invocation mechanism, or to a URI (according to
<xref target="mapping"/>) if the system-wide invocation mechanism only
accepts URIs.</t>

<t>The clipboard is another frequently used way to transfer URIs and
IRIs from one application to another. On most platforms, the clipboard
is able to store and transfer text in many languages and scripts.
Correctly used, the clipboard transfers characters, not octets, which
will do the right thing with IRIs.</t>
</section>

<section title="URI/IRI Generation">

<t>Systems that offer resources through the Internet, where those
resources have logical names, sometimes automatically generate URIs
for the resources they offer. For example, some HTTP servers can
generate a directory listing for a file directory and then respond to
the generated URIs with the files.</t>

<t>Many legacy character encodings are in use in various file systems.
Many currently deployed systems do not transform the local character
representation of the underlying system before generating URIs.</t>

<t>For maximum interoperability, systems that generate resource
identifiers should make the appropriate transformations. For example,
if a file system contains a file named
"r&amp;#xE9;sum&amp;#xE9;.html", a server should expose this as
"r%C3%A9sum%C3%A9.html" in a URI, which allows use of
"r&amp;#xE9;sum&amp;#xE9;.html" in an IRI, even if locally the file
name is kept in a character encoding other than UTF-8.
</t>

<t>This recommendation particularly applies to HTTP servers. For FTP
servers, similar considerations apply; see <xref target="RFC2640"/>.</t>
</section>

<section title="URI/IRI Selection" anchor="selection">
<t>In some cases, resource owners and publishers have control over the
IRIs used to identify their resources. This control is mostly
executed by controlling the resource names, such as file names,
directly.</t>

<t>In these cases, it is recommended to avoid choosing IRIs that are
easily confused. For example, for US-ASCII, the lower-case ell ("l") is
easily confused with the digit one ("1"), and the upper-case oh ("O") is
easily confused with the digit zero ("0"). Publishers should avoid
confusing users with "br0ken" or "1ame" identifiers.</t>

<t>Outside the US-ASCII repertoire, there are many more opportunities for
confusion; a complete set of guidelines is too lengthy to include
here. As long as names are limited to characters from a single script,
native writers of a given script or language will know best when
ambiguities can appear, and how they can be avoided. What may look
ambiguous to a stranger may be completely obvious to the average
native user. On the other hand, in some cases, the UCS contains
variants for compatibility reasons; for example, for typographic purposes.
These should be avoided wherever possible. Although there may be exceptions,
newly created resource names should generally be in NFKC
<xref target="UTR15"></xref> (which means that they are also in NFC).</t>

<t>As an example, the UCS contains the "fi" ligature at U+FB01
for compatibility reasons.
Wherever possible, IRIs should use the two letters "f" and "i" rather
than the "fi" ligature. An example where the latter may be used is
in the query part of an IRI for an explicit search for a word written
containing the "fi" ligature.</t>

<t>In certain cases, there is a chance that characters from different
scripts look the same. The best known example is the similarity of the
Latin "A", the Greek "Alpha", and the Cyrillic "A". To avoid such
cases, IRIs should only be created where all the characters in a
single component are used together in a given language. This usually
means that all of these characters will be from the same script, but
there are languages that mix characters from different scripts (such
as Japanese).  This is similar to the heuristics used to distinguish
between letters and numbers in the examples above. Also, for Latin,
Greek, and Cyrillic, using lowercase letters results in fewer
ambiguities than using uppercase letters would.</t>
</section>

<section title="Display of URIs/IRIs" anchor="display">
<t>
In situations where the rendering software is not expected to display
non-ASCII parts of the IRI correctly using the available layout and font
resources, these parts should be percent-encoded before being displayed.</t>

<t>For display of Bidi IRIs, please see <xref target="visual"/>.</t>
</section>

<section title="Interpretation of URIs and IRIs">
<t>Software that interprets IRIs as the names of local resources should
accept IRIs in multiple forms and convert and match them with the
appropriate local resource names.</t>

<t>First, multiple representations include both IRIs in the native
character encoding of the protocol and also their URI counterparts.</t>

<t>Second, it may include URIs constructed based on character
encodings other than UTF-8. These URIs may be produced by user agents that do
not conform to this specification and that use legacy character encodings to
convert non-ASCII characters to URIs. Whether this is necessary, and what
character encodings to cover, depends on a number of factors, such as
the legacy character encodings used locally and the distribution of
various versions of user agents. For example, software for Japanese
may accept URIs in Shift_JIS and/or EUC-JP in addition to UTF-8.</t>

<t>Third, it may include additional mappings to be more user-friendly
and robust against transmission errors. These would be similar to how
some servers currently treat URIs as case insensitive or perform
additional matching to account for spelling errors. For characters
beyond the US-ASCII repertoire, this may, for example, include
ignoring the accents on received IRIs or resource names. Please note
that such mappings, including case mappings, are language
dependent.</t>

<t>It can be difficult to identify a resource unambiguously if too
many mappings are taken into consideration. However, percent-encoded
and not percent-encoded parts of IRIs can always be clearly distinguished.
Also, the regularity of UTF-8 (see <xref target="Duerst97"/>) makes the
potential for collisions lower than it may seem at first.</t>
</section>

<section title="Upgrading Strategy">
<t>Where this recommendation places further constraints on software
for which many instances are already deployed, it is important to
introduce upgrades carefully and to be aware of the various
interdependencies.</t>

<t>If IRIs cannot be interpreted correctly, they should not be created,
generated, or transported. This suggests that upgrading URI interpreting
software to accept IRIs should have highest priority.</t>

<t>On the other hand, a single IRI is interpreted only by a single or
very few interpreters that are known in advance, although it may be
entered and transported very widely.</t>

<t>Therefore, IRIs benefit most from a broad upgrade of software to be
able to enter and transport IRIs. However, before an
individual IRI is published, care should be taken to upgrade the corresponding
interpreting software in order to cover the forms expected to be
received by various versions of entry and transport software.</t>

<t>The upgrade of generating software to generate IRIs instead of using a
local character encoding should happen only after the service is upgraded
to accept IRIs. Similarly, IRIs should only be generated when the service
accepts IRIs and the intervening infrastructure and protocol is known
to transport them safely.</t>

<t>Software converting from URIs to IRIs for display should be upgraded
only after upgraded entry software has been widely deployed to the
population that will see the displayed result.</t>


<t>Where there is a free choice of character encodings, it is often
possible to reduce the effort and dependencies for upgrading to IRIs
by using UTF-8 rather than another encoding. For example, when a new
file-based Web server is set up, using UTF-8 as the character encoding
for file names will make the transition to IRIs easier. Likewise, when
a new Web form is set up using UTF-8 as the character encoding of the
form page, the returned query URIs will use UTF-8 as the character
encoding (unless the user, for whatever reason, changes the character
encoding) and will therefore be compatible with IRIs.</t>


<t>These recommendations, when taken together, will allow for the
extension from URIs to IRIs in order to handle characters other than
US-ASCII while minimizing interoperability problems. For
considerations regarding the upgrade of URI scheme definitions, see
<xref target="UTF8use"/>.</t>

</section>
</section> <!-- guidelines -->

<section title="IANA Considerations" anchor="iana">

<t>RFC Editor and IANA note: Please Replace RFC XXXX with the
number of this document when it issues as an RFC. </t>

<t>IANA maintains a registry of "URI schemes". A "URI scheme" also
serves an "IRI scheme". </t>

<t>To clarify that the URI scheme registration process also applies to
IRIs, change the description of the "URI schemes" registry
header to say "[RFC4395] defines an IANA-maintained registry of URI
Schemes. These registries include the Permanent and Provisional URI
Schemes.  RFC XXXX updates this registry to designate that schemes may
also indicate their usability as IRI schemes.</t>

<t> Update "per RFC 4395" to "per RFC 4395 and RFC XXXX".
</t>

</section> <!-- IANA -->
   
<section title="Security Considerations" anchor="security">
<t>The security considerations discussed in <xref target="RFC3986"/>
also apply to IRIs. In addition, the following issues require
particular care for IRIs.</t>
<t>Incorrect encoding or decoding can lead to security problems.
For example, some UTF-8 decoders do not check against overlong
byte sequences. See <xref target='UTR36'/> Section 3 for details.</t>

  <t>There are serious difficulties with relying on a human to verify that a
    an IRI (whether presented visually or aurally)
    is the same as another IRI or is the one intended.
    These problems exist with ASCII-only URIs (bl00mberg.com vs. bloomberg.com)
    but are strongly exacerbated when using the much larger character repertoire of Unicode.
    For details, see Section 2 of <xref target='UTR36'/>.
    Using administrative and technical means to reduce the availability
    of such exploits is possible, but they are difficult to eliminate altogether.
    User agents SHOULD NOT rely on visual or perceptual comparison or verification of IRIs
    as a means of validating or assuring safety, correctness or appropriateness of an IRI.
    Other means of presenting users with the validity, safety, or appropriateness
    of visited sites are being developed in the browser community
    as an alternative means of avoiding these difficulties.</t>

<t>Besides the large character repertoire of Unicode, reasons for
  confusion include different forms of normalization and different normalization
  expectations, use of percent-encoding with various legacy encodings,
  and bidirectionality issues. See also <xref target='UTR36'/>.</t>

<t>Confusion can occur in various IRI components, such as the
domain name part or the path part, or between IRI components. For considerations specific
to the domain name part, see <xref target="RFC5890"/>. For considerations specific to
particular protocols or schemes, see the security sections of the relevant specifications
and registration templates.
Administrators of sites that allow independent
users to create resources in the same sub area have to be careful.
Details are discussed in <xref target="selection"/>.</t>

<t>Confusion can occur with bidirectional IRIs, if the restrictions
in <xref target="bidi-structure"/> are not followed. The same visual
representation may be interpreted as different logical representations,
and vice versa. It is also very important that a correct Unicode bidirectional
implementation be used.</t>
  <t>The characters additionally allowed in Legacy Extended IRIs
    introduce additional security issues. For details, see <xref target='notAllowed'/>.</t>
</section><!-- security -->

<section title="Acknowledgements">
<t>This document was derived from <xref target="RFC3987"/>; the acknowledgments from
that specification still apply.</t>
<t>We would like to thank Ian Hickson, Michael Sperberg-McQueen,
  and Dan Connolly for their work on HyperText References, and Norman Walsh, Richard Tobin,
  Henry S. Thomson, John Cowan, Paul Grosso, and the XML Core Working Group of the W3C for their work on LEIRIs.</t>
<t>In addition, this document was influenced by contributions from (in no particular order) Chris
  Lilley, Bjoern Hoehrmann,
Felix Sasaki, Jeremy Carroll, Frank Ellermann, Michael Everson, Cary Karp, Matitiahu Allouche,
Richard Ishida, Addison Phillips, Jonathan Rosenne, Najib Tounsi, Debbie Garside, Mark Davis, Sarmad
Hussain, Ted Hardie, Konrad Lanz, Thomas Roessler, Lisa Dusseault, Julian Reschke, Giovanni
Campagna, Anne van Kesteren, Mark Nottingham, Erik van der Poel, Marcin Hanclik, Marcos Caceres, Roy
Fielding, Greg Wilkins, Pieter Hintjens, Daniel R. Tobias, Marko Martin, Maciej Stanchowiak, Wil
Tan, Yui Naruse, Michael A. Puls II, Dave Thaler, Tom Petch, John Klensin, Shawn Steele, Peter
Saint-Andre, Geoffrey Sneddon, Chris Weber, Alex Melnikov, Slim Amamou, S. Moonesamy, Tim Berners-Lee, Yaron
Goland, Sam Ruby, Adam Barth, Abdulrahman I. ALGhadir, Aharon Lanin, Thomas Milo, Murray Sargent,
Marc Blanchet, and Mykyta Yevstifeyev.</t>
</section>

<section title="Main Changes Since RFC 3987">
  <t>This section describes the main changes since <xref target="RFC3987"></xref>.</t>
  <section title="Major restructuring of IRI processing model" anchor="forkChanges">
    <t>Major restructuring of IRI processing model to make scheme-specific translation
      necessary to handle IDNA requirements and for consistency with web implementations. </t>
    <t>Starting with IRI, you want one of:
      <list style="hanging">
        <t hangText="a"> IRI components (IRI parsed into UTF8 pieces)</t>
        <t hangText="b"> URI components (URI parsed into ASCII pieces, encoded correctly) </t>
        <t hangText="c"> whole URI  (for passing on to some other system that wants whole URIs) </t>
      </list></t>
    
    <section title="OLD WAY">
      <t><list style="numbers">
        
        <t>Pct-encoding on the whole thing to a URI.
          (c1) If you want a (maybe broken) whole URI, you might
          stop here.</t>
        
        <t>Parsing the URI into URI components.
          (b1) If you want (maybe broken) URI components, stop here.</t>
        
        <t> Decode the components (undoing the pct-encoding).
          (a) if you want IRI components, stop here.</t>
        
        <t> reencode:  Either using a different encoding some components
          (for domain names, and query components in web pages, which
          depends on the component, scheme and context), and otherwise
          using pct-encoding.
          (b2) if you want (good) URI components, stop here.</t>
        
        <t> reassemble the reencoded components. 
          (c2) if you want a (*good*) whole URI stop here.</t>
      </list>
        
      </t>
      
    </section>
    
    <section title="NEW WAY">
      <t>
        <list style="numbers">
          
          <t> Parse the IRI into IRI components using the generic syntax.
            (a) if you want IRI components, stop here.</t>
          
          <t> Encode each components, using pct-encoding, IDN encoding, or 
            special query part encoding depending on the component
            scheme or context. (b) If you want URI components, stop here.</t>
          <t> reassemble the a whole URI from URI components.
            (c) if you want a whole URI stop here.</t>
        </list></t>
    </section>
    <section title="Extension of Syntax">
      <t>Added the tag range (U+E0000-E0FFF) to the iprivate production.
        Some IRIs generated with the new syntax may fail to pass very strict checks
        relying on the old syntax. But characters in this range should be extremely infrequent
        anyway.</t>
    </section>
    <section title="More to be added"><t>TODO: There are more main changes that need to be
      documented in this section.</t></section>
</section>

<section title="Change Log">

<t>Note to RFC Editor: Please completely remove this section before publication.</t>

<section title='Changes after draft-ietf-iri-3987bis-01'>
    <t>Changes from draft-ietf-iri-3987bis-01 onwards are available as changesets
      in the IETF tools subversion repository at
      http://trac.tools.ietf.org/wg/iri/trac/log/draft-ietf-iri-3987bis/draft-ietf-iri-3987bis.xml.</t>
</section>
  
<section title='Changes from draft-duerst-iri-bis-07 to draft-ietf-iri-3987bis-00'>
     <t>Changed draft name, date, last paragraph of abstract, and titles in change log, and added this section
     in moving from draft-duerst-iri-bis-07 (personal submission) to draft-ietf-iri-3987bis-00 (WG document).</t>
</section>

<section title="Changes from -06 to -07 of draft-duerst-iri-bis">
  <t>Major restructuring of the processing model, see <xref target="forkChanges"></xref>.</t>
</section>
</section>

<section title='Changes from -00 to -01'><t><list style="symbols">
  <t>Removed 'mailto:' before mail addresses of authors.</t>
  <t>Added "&lt;to be done&gt;" as right side of 'href-strip' rule. Fixed '|' to '/' for
    alternatives.</t>
</list></t>
</section>

<section title="Changes from -05 to -06 of draft-duerst-iri-bis-00"><t><list style="symbols">
<t>Add HyperText Reference, change abstract, acks and references for it</t>
<t>Add Masinter back as another editor.</t>
<t>Masinter integrates HRef material from HTML5 spec.</t>
<t>Rewrite introduction sections to modernize.</t>
</list></t>
</section>

<section title="Changes from -04 to -05 of draft-duerst-iri-bis">
  <t><list style="symbols">
    <t>Updated references.</t>
    <t>Changed IPR text to pre5378Trust200902.</t></list></t>
</section>

<section title="Changes from -03 to -04 of draft-duerst-iri-bis">
  <t><list style="symbols">
    <t>Added explicit abbreviation for LEIRIs.</t>
    <t>Mentioned LEIRI references.</t>
    <t>Completed text in LEIRI section about tag characters and about specials.</t></list></t>
</section>

<section title="Changes from -02 to -03 of draft-duerst-iri-bis">
  <t><list style="symbols">
    <t>Updated some references.</t>
    <t>Updated Michel Suginard's coordinates.</t></list></t>
</section>

<section title="Changes from -01 to -02 of draft-duerst-iri-bis">
  <t><list style="symbols">
    <t>Added tag range to iprivate (issue private-include-tags-115).</t>
    <t>Added Specials (U+FFF0-FFFD) to Legacy Extended IRIs.</t></list></t>
</section>
<section title="Changes from -00 to -01 of draft-duerst-iri-bis">
  <t><list style="symbols">
    <t>Changed from "IRIs with Spaces/Controls" to "Legacy Extended IRI"
      based on input from the W3C XML Core WG.
      Moved the relevant subsections to the back and promoted them to a section.</t>
    <t>Added some text re. Legacy Extended IRIs to the security section.</t>
    <t>Added a IANA Consideration Section.</t>
    <t>Added this Change Log Section.</t>
    <t>Added a section about "IRIs with Spaces/Controls" (converting from a Note in RFC 3987).</t></list></t>
</section>
<section title="Changes from RFC 3987 to -00 of draft-duerst-iri-bis">
  <t><list>
    <t>Fixed errata (see http://www.rfc-editor.org/cgi-bin/errataSearch.pl?rfc=3987).</t></list></t>
</section>
</section>
</middle>

<back>
<references title="Normative References">

<reference anchor="ASCII">
<front>
<title>Coded Character Set -- 7-bit American Standard Code for Information
Interchange</title>
<author>
<organization>American National Standards Institute</organization>
</author>
<date year="1986"/>
</front>
<seriesInfo name="ANSI" value="X3.4"/>
</reference>

<reference anchor="ISO10646">
<front>
<title>ISO/IEC 10646:2003: Information Technology -
Universal Multiple-Octet Coded Character Set (UCS)</title>
<author>
<organization>International Organization for Standardization</organization>
</author>
<date month="December" year="2003"/>
</front>
<seriesInfo name="ISO" value="Standard 10646"/>
</reference>

&rfc2119;
&rfc3490;
&rfc3491;
&rfc3629;
&rfc3986;

<reference anchor="STD68">
<front>
<title abbrev="ABNF">Augmented BNF for Syntax Specifications: ABNF</title>
<author initials="D." surname="Crocker" fullname="Dave Crocker"><organization/></author>
<author initials="P." surname="Overell" fullname="Paul Overell"><organization/></author>
<date month="January" year="2008"/></front>
<seriesInfo name="STD" value="68"/><seriesInfo name="RFC" value="5234"/>
</reference>
  
&rfc5890;
&rfc5891;

<reference anchor="UNIV6">
<front>
<title>The Unicode Standard, Version 6.0.0 (Mountain View, CA, The Unicode Consortium, 2011, ISBN 978-1-936213-01-6)</title>
<author><organization>The Unicode Consortium</organization></author>
<date year="2010" month="October"/>
</front>
</reference>

<reference anchor="UNI9" target="http://www.unicode.org/reports/tr9/tr9-13.html">
<front>
<title>The Bidirectional Algorithm</title>
<author initials="M." surname="Davis" fullname="Mark Davis"><organization/></author>
<date year="2004" month="March"/>
</front>
<seriesInfo name="Unicode Standard Annex" value="#9"/>
</reference>

<reference anchor="UTR15" target="http://www.unicode.org/unicode/reports/tr15/tr15-23.html">
<front>
<title>Unicode Normalization Forms</title>
<author initials="M." surname="Davis" fullname="Mark Davis"><organization/></author>
<author initials="M.J." surname="Duerst" fullname="Martin Duerst"><organization/></author>
<date year="2008" month="March"/>
</front>
<seriesInfo name="Unicode Standard Annex" value="#15"/>
</reference>

</references>

<references title="Informative References">

<reference anchor="BidiEx" target="http://www.w3.org/International/iri-edit/BidiExamples">
<front>
<title>Examples of bidirectional IRIs</title>
<author><organization/></author>
<date year="" month=""/>
</front>
</reference>

<reference anchor="CharMod" target="http://www.w3.org/TR/charmod-resid">
<front>
<title>Character Model for the World Wide Web: Resource Identifiers</title>
<author initials="M." surname="Duerst" fullname="Martin Duerst"><organization/></author>
<author initials="F." surname="Yergeau" fullname="Francois Yergeau"><organization/></author>
<author initials="R." surname="Ishida" fullname="Richard Ishida"><organization/></author>
<author initials="M." surname="Wolf" fullname="Misha Wolf"><organization/></author>
<author initials="T." surname="Texin" fullname="Tex Texin"><organization/></author>
<date year="2004" month="November" day="25"/>
</front>
<seriesInfo name="World Wide Web Consortium" value="Candidate Recommendation"/>
</reference>

<reference anchor="Duerst97" target="http://www.ifi.unizh.ch/mml/mduerst/papers/PDF/IUC11-UTF-8.pdf">
<front>
<title>The Properties and Promises of UTF-8</title>
<author initials="M.J." surname="Duerst" fullname="Martin Duerst"><organization/></author>
<date year="1997" month="September"/>
</front>
<seriesInfo name="Proc. 11th International Unicode Conference, San Jose" value=""/>
</reference>

<reference anchor="Gettys" target="http://www.w3.org/DesignIssues/ModelConsequences">
<front>
<title>URI Model Consequences</title>
<author initials="J." surname="Gettys" fullname="Jim Gettys"><organization/></author>
<date month="" year=""/>
</front>
</reference>

<reference anchor="HTML4" target="http://www.w3.org/TR/html401/appendix/notes.html#h-B.2">
<front>
<title>HTML 4.01 Specification</title>
<author initials="D." surname="Raggett" fullname="Dave Raggett"><organization/></author>
<author initials="A." surname="Le Hors" fullname="Arnaud Le Hors"><organization/></author>
<author initials="I." surname="Jacobs" fullname="Ian Jacobs"><organization/></author>
<date year="1999" month="December" day="24"/>
</front>
<seriesInfo name="World Wide Web Consortium" value="Recommendation"/>
</reference>

<reference anchor="LEIRI" target="http://www.w3.org/TR/leiri/">
<front>
<title>Legacy extended IRIs for XML resource identification</title>
<author initials="H." surname="Thompson" fullname="Henry Thompson"><organization/></author>
<author initials="R." surname="Tobin"    fullname="Richard Tobin"><organization/></author>
<author initials="N." surname="Walsh" fullname="Norman Walsh"><organization/></author>
  <date year="2008" month="November" day="3"/>

</front>
<seriesInfo name="World Wide Web Consortium" value="Note"/>
</reference>


&rfc2045;
&rfc2130;
&rfc2141;
&rfc2192;
&rfc2277;
&rfc2368;
&rfc2384;
&rfc2396;
&rfc2397;
&rfc2616;
&rfc1738;
&rfc2640;
&rfc3987;
&rfc6055;
<reference anchor='RFC4395bis'>
  <front>
    <title>Guidelines and Registration Procedures for New URI/IRI Schemes</title>
    <author initials='T.' surname='Hansen' fullname="Tony Hansen"><organization/></author>
    <author initials='T.' surname='Hardie' fullname="Ted Hardie"><organization/></author>
    <author initials='L.' surname='Masinter' fullname="Larry Masinter"><organization/></author>
    <date year="2010" month='September' day="30"/>
    <workgroup>IRI</workgroup>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-hansen-iri-4395bis-irireg-00"/>
</reference>
  
  
<reference anchor="UNIXML" target="http://www.w3.org/TR/unicode-xml/">
<front>
<title>Unicode in XML and other Markup Languages</title>
<author initials="M.J." surname="Duerst" fullname="Martin Duerst"><organization/></author>
<author initials="A." surname="Freytag" fullname="Asmus Freytag"><organization/></author>
<date year="2003" month="June" day="18"/>
</front>
<seriesInfo name="Unicode Technical Report" value="#20"/>
<seriesInfo name="World Wide Web Consortium" value="Note"/>
</reference>
  
<reference anchor="UTR36" target="http://unicode.org/reports/tr36/">
<front>
<title>Unicode Security Considerations</title>
<author initials="M." surname="Davis" fullname="Mark Davis"><organization/></author>
<author initials="M." surname="Suignard" fullname="Michel Suignard"><organization/></author>
<date year="2010" month="August" day="4"/>
</front>
<seriesInfo name="Unicode Technical Report" value="#36"/>
</reference>

<reference anchor="XLink" target="http://www.w3.org/TR/xlink/#link-locators">
<front>
<title>XML Linking Language (XLink) Version 1.0</title>
<author initials="S." surname="DeRose" fullname="Steve DeRose"><organization/></author>
<author initials="E." surname="Maler" fullname="Eve Maler"><organization/></author>
<author initials="D." surname="Orchard" fullname="David Orchard"><organization/></author>
<date year="2001" month="June" day="27"/>
</front>
<seriesInfo name="World Wide Web Consortium" value="Recommendation"/>
</reference>

<reference anchor="XML1" target="http://www.w3.org/TR/REC-xml">
  <front>
    <title>Extensible Markup Language (XML) 1.0 (Forth Edition)</title>
    <author initials="T." surname="Bray" fullname="Tim Bray"><organization/></author>
    <author initials="J." surname="Paoli" fullname="Jean Paoli"><organization/></author>
    <author initials="C.M." surname="Sperberg-McQueen" fullname="C. M. Sperberg-McQueen">
      <organization/></author>
    <author initials="E." surname="Maler" fullname="Eve Maler"><organization/></author>
    <author initials="F." surname="Yergeau" fullname="Francois Yergeau"><organization/></author>
    <date day="16" month="August" year="2006"/>
  </front>
  <seriesInfo name="World Wide Web Consortium" value="Recommendation"/>
</reference>

<reference anchor="XMLNamespace" target="http://www.w3.org/TR/REC-xml-names">
  <front>
    <title>Namespaces in XML (Second Edition)</title>
    <author initials="T." surname="Bray" fullname="Tim Bray"><organization/></author>
    <author initials="D." surname="Hollander" fullname="Dave Hollander"><organization/></author>
    <author initials="A." surname="Layman" fullname="Andrew Layman"><organization/></author>
    <author initials="R." surname="Tobin" fullname="Richard Tobin"><organization></organization></author>
    <date day="16" month="August" year="2006"/>
  </front>
  <seriesInfo name="World Wide Web Consortium" value="Recommendation"/>
</reference>

<reference anchor="XMLSchema" target="http://www.w3.org/TR/xmlschema-2/#anyURI">
<front>
<title>XML Schema Part 2: Datatypes</title>
<author initials="P." surname="Biron" fullname="Paul Biron"><organization/></author>
<author initials="A." surname="Malhotra" fullname="Ashok Malhotra"><organization/></author>
<date year="2001" month="May" day="2"/>
</front>
<seriesInfo name="World Wide Web Consortium" value="Recommendation"/>
</reference>

<reference anchor="XPointer" target="http://www.w3.org/TR/xptr-framework/#escaping">
<front>
<title>XPointer Framework</title>
<author initials="P." surname="Grosso" fullname="Paul Grosso"><organization/></author>
<author initials="E." surname="Maler" fullname="Eve Maler"><organization/></author>
<author initials="J." surname="Marsh" fullname="Jonathan Marsh"><organization/></author>
<author initials="N." surname="Walsh" fullname="Norman Walsh"><organization/></author>
<date year="2003" month="March" day="25"/>
</front>
<seriesInfo name="World Wide Web Consortium" value="Recommendation"/>
</reference>

<reference anchor="HTML5" target="http://www.w3.org/TR/2009/WD-html5-20090423/">
<front>
<title>A vocabulary and associated APIs for HTML and XHTML</title>
<author initials="I." surname="Hickson" fullname="Ian Hickson"><organization>Google, Inc.</organization></author>
<author initials="D." surname="Hyatt" fullname="David Hyatt"><organization>Apple, Inc.</organization></author>
<date year="2009"  month="April" day="23"/>
</front>
<seriesInfo name="World Wide Web Consortium" value="Working Draft"/>
</reference>

</references>

</back>
</rfc>
