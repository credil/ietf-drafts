<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. --><!ENTITY RFC2119 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
<!ENTITY RFC2629 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml'>
<!ENTITY RFC3552 SYSTEM 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml'>
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM 'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml'>
]>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-levine-vwrap-deploy-00" ipr="trust200902">
    <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->
    <!-- ***** FRONT MATTER ***** -->
    <front>
        <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->
        <title abbrev="VWRAP Deployment">VWRAP Deployment and trust patterns</title>
        <!-- add 'role="editor"' below for the editors if appropriate -->
        <!-- Another author who claims to be an editor -->
        <author fullname="David W. levine" initials="D.W.L."
            role="editor" surname="Levine">
            <organization>IBM Thomas J. Watson Research Center</organization>
            <address>
                <postal>
                    <street>19 Skyline Drive</street>
                    <!-- Reorder these if your country does things differently -->
                    <city>Hawthorn</city>
                    <region>New York</region>
                    <code>10532</code>
                    <country>USA</country>
                </postal>
                <phone>+1 914-784-7427</phone>
                <email>dwl@us.ibm.com</email>
                <!-- uri and facsimile elements may also be added -->
            </address>
        </author>
        <date month="February" year="2010"/>
        <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->
        <!-- Meta-data Declarations -->
        <area>Applications</area>
        <workgroup>VWRAP</workgroup>
        <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->
        <keyword>template</keyword>
        <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->
        <abstract>
            <t>Architectural layering, patterns and trust points for VWRAP
      </t>
        </abstract>
    </front>

 <middle>
<section title="Requirements Language">

            <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref target="RFC2119">RFC 2119</xref>.</t>
</section>

<section title="Introduction">
<t>
This draft is an extension and follow on draft to  OGPX layering and architectural patterns,
draft-levine-ogp-layering-00
</t>
<t>
This note focuses on design patterns and architectural choices which will permit the 
VWRAP specifications to adapt to a wide range of deployment patterns, within the basic 
VWRAP remit, and support the use of policy to permit the architecture to enable virtual 
spaces with very different policies toward security, intellectual property, identity, and 
economics to share common infrastructure and to interoperate in a principled fashion. 
</t>
<t>
This draft includes patterns for assembling VWRAP services into usable systems
and patterns for alternative implmentations of various VWRAP services to allow
varying approaches to service and content delivery. This draft is intended to 
focus attention on the service design choices which will allow a single specification
to support a range of deployed services. 
</t>

</section> <!-- end of intro   -->

<section title="Mechanisms, Services, Domains, Policy">
   <t>
   When completed, the VWRAP specifications will define:
   </t>
  <t>
  <list style="symbols">
      <t>a set of underlying service delivery mechanisms</t>
      <t>a set of services delivered over these mechanisms</t>
      <t>clusters of related services, called domains</t>
      <t>mechanisms to apply policy to specific services</t>
  </list>
  </t>
<t>
The model of "domain" is not fully defined in the current specifications.Several possible
approaches to defining "domains" or "clusters" are described here, in hope of 
stimulating agreement on a concise definition. 
</t>
<t>
The most commonly mentioned partition of services into domains is the split between 
"agent" and "region" domains proposed by Linden Lab. This partition separates services 
associated with the user's identity and information, the "agent domain," from services 
associated with virtual space, the "region domain"
</t>
 <t>
In order to discuss patterns of clustering and service delivery, it is necessary to discuss 
what is mean by "domain" and also look more deeply into both the notions of a cluster of 
services, and also discuss possible deployment patterns
</t>
</section> <!-- End of mechanisms section -->

<section title="Servers, Services and Named entities">
<t>
In order to avoid confusion, in this note, we will define a number of terms very precisely:
</t>
<t>
<list style = "symbols">
<t>
Service: a named set of REST style resources which accepts a series of messages to 
perform a task. We explicitly do not mean a deployed service such as the Second Life(tm) 
service. 
</t>
 <t>
Server:  A computer offering up one or more named services
</t>
<t>
Region: A named portion of virtual space. A Region is the addressable focus
</t>
 <t>
Agent: The state and services representing a user within the virtual world
</t>
 <t>
Policy: A described behavior of a service within the VWRAP specications.
</t>
<t>
Avatar: A visual representation of an Agent within the virtual world.
</t>
<t>
Asset: A set of digitial content with a visual and logical component which can be added to
a region (and implicitly its simulatoin creating a simulated artifact. Assets include textures, Primtive objects, landscapes and related artifacts. 
</t>
<t>
Primitive Objects: A data structure describing a visual component in a simulatoin. Historically these have been constructive geometric objects in Second Life like worlds, 
but the VWRAP specifications assume that the set of defined primtive objects will grow to include meshes and other forms of geometric markup. 
</t>
<t>
Simulation: The process of modeling the elements of a virtual region. The computatinal processing which
creates a series of sucessive scenes containing the Avatars, and Assets within a region. 
</t>
</list>
</t>
</section> <!-- end of servers, Services and Named entities -->

<section title="Deployment patterns">
<t>
To motivate the discussion, we will describe several  deployment patterns for 
VWRAP based systems. Each of these deployment patterns should be viewed as a use case
for the VWRAP specifications. The specifications should provide sufficient expresivity of service
endpoints, and trust boundaries to support all of the described patterns. 
</t>

<section title="Second Life Agent Domain / Region Domain Split">
<t>
This deployment pattern represents the  pattern Linden Lab proposed in its initial 
discussions on second generation architecture in 2007. It offloads any services which are 
not germane to managing a virtual space to an "agent" domain, focused, on the services 
which are specific, not to the virtual space, but the user's agent.  
</t>
<t>
In this pattern, the viewer is typically connected to one or more regions, and one agent domain. 
The agent domain acts as a unitary focus for all services associated with the agent. When accessing
other services hosted by a deployer other than the hoster of the agent domain, the agent domain
acts as the trust source, managing the agent (and user's) access to other regions. 
</t>
 <t>
In this deployment pattern, back end services, such as assets and inventory are accessed via the agent domain, 
do not, inhenrently have thier own event queue or trust domain. 
</t>
</section> <!-- ENd of Second Life AD/RD split --> 

<section title="Standalone OpenSim Region model">
            <t>
In the Standalone OpenSim deployment model, all of the services comprising a Region, an Agent Domain, and the supporting services used by these 
services are hosted on a single server. A single event queue may manage connectivity to the services, or several event queues, with the services being hosted
as seperate processes within the server. 
</t>
            <t>
Historically, a standalone OpenSim represents a single fully trusted domain, where there are no seperate trust components or policies. 
</t>
 </section> <!-- End of Standalone Region model -->

<section title="OpenSim VWRAP + Asset reflector + Agent Service">
<t>
In this deployment pattern, one or more OpenSim regions are hosted,
each as a seperate server. An seperate agent domain acts as the trust
authority, and login component for the deployment. Inventory and Asset
requests are reflected from individual regions to asset and inventory
services, hosted either in a standalone fashion, or as part of an
OpenSim region.
</t>
 </section> <!-- ENdof Vwrap + asset + agent Service -->

<section title="OpenSim UGAIM grid model">
 <t>
This is the current (Soon to be deprecated) OpenSim Grid model. In
this model, a seperate login service (not an agent domain) is hosted
on one server ans a collection of backend services are shared by one
or more Region Simulators. The entire grid forms a single trust model.
</t>
 </section> <!-- end of UGAIM -->

        <section title="Hypergrid">
            <t> In this model, each Region is hosted in either Standalone, or
UGAIM style Grid mode. Specific links between regions are created,
which define a two way mapping, permitting users to move thier avatars
between the regions. Service requests related to the back end servcies
for these avatars are directed back to the originating service. Trust,
if any is established in the process of creating the explicit link
between the regions.  </t>
        </section> <!-- End of Hypergrid -->


        <section title="Hypergrid and Cable Beach">
            <t>
Hypergrid can be combined with cable beach, so that assets are fetched directly from a shared asset server, and trust between the asset server, and 
between the regions and the user is managed by the client directly. 
</t>
        </section> <!-- end of cable beach 2009 -->

<section title="Multi-hosted asset deployment">
            <t>
This is a case in which there are multiple back ends supporting multiple sets of assets. Trust is established either per the Agent Domain model, between 
services, and the agent's agent domain, or between regions, in hpyergrid fashion, or directly between the client and the asset services, per the cable 
beach model. 
</t>
        </section>  <!-- End of Multi-hosted -->

<section title="Factored Service Models">
            <t>
There is nothing inherent in the requirements of a virtual world deployment that specific back end services be clustered into two domains, nor
that a single server or logical endpoint host all of the services which comprise a deployment. Cloud deployed servics may be used to host part or all of 
a VWRAP deployment. In such a deployment model, services deployed within a cloud may deploy one or more event queue endpoints or service and trust endopints
to connect to clients.
</t>
<t>
Factoring of services is not exclusive to back end services, the agent domain, or regions. Deployment models in which regions share services, or in which
the services comprising a region are deployed on a distributed computuing fabric should be supported. 
</t>
</section> <!-- ENd of factored service models -->

</section> <!-- end of Deploytment Pattern (intro) -->
<section title="Possible Domain definitions">
<t>
Given the above set of deployment patterns several possible ways of usefully defining "domain" seem possible. 
</t>
<t>
One could conclude that the specification should ignore domain as a structuring concept and instead focus
on descbing the services needed to deliver the desired results, and allow domain patterns to be entirely 
deployment artifacts. 
</t>
<t>
One could focus on shared infrastructural elements. In such a model domains might be defined by sharing
a common set of seed caps, or a common event queue.
</t>
<t>
Security and adminsitration form another possible way of deliniating domains. It is ucnlear if this
differs in a meaningful way from the first choice, as adminsitrative domains tend to be purely
artifacts of deployers. 
</t>
</section>
<section title="Trust and policy issues">
<section title="Policy Requirements">
 <t>
Policy decisions may be made by services on the basis of:
</t>
<t>
<list style="symbols">
 <t>End user identity token</t>
 <t>Requesting Service identity token</t>
 <t>Service specific token (Proof of license, proof of TOS signature, etc.)</t>
</list>
</t>
 <t>
In order to permit policy decisions to be made by services, a number of token may presented to the service. These tokens will likely be supported as optional 
additions to the protocols, inserted in slots in the protocol messages defined by the services. This permits services to optionally require additional inputs
in order to satisfy thier policy requirments in a predictcable and princpled fashion. 
</t>
</section> <!-- end of policy requirements -->

<section title="Grid Access authentication">
            <t>
One policy choice grid deployers may make, is to require a login or authentications to be made to the grid's authentication service or agent domain.
Several emerging internet approaches, such as openId or OAuth are possible mechanisms which may be used to satisfy this need. 
</t>
</section> <!-- end of Grid Access Authentication -->

<section title="Content Management">
 <t>
One of the challanges facing a virtual worlds envrionment is determiing how digital content should be shared. The VWRAP specifications
split this problem into mechansisms and policies. The following sections focus on describing several approachs and the places
they impinge on the mechanisms being defined in VWRAP. 
</t>
<t>
Content Management includes, but is not limited to:
<list style="symbols">
<t>Labeling content with meta data to facilitate its management</t>
<t>Identifying policy enforcement points for content management</t>
<t>other XXX</t>
</list>
</t>
<section title="content flows through VWs">
<t>
<figure><artwork><![CDATA[

        +-------+              +----------+                    +-------+
Insertion->| Asset Store |--"rez" --->|  Region  |--Present--->| client|
        --------+              +----------+                    +-------+

]]></artwork>
</figure>
</t>
<t>
This diagram describes some of the key moments as a dgital item flows through a virtual world. The item is inserted into
and stored within the virtual world's services. It is then added to a virtual world's region (rezzed), which makes it available
for simulation and, finally presented to client(s) for viewing. 
</t>
<t>
Notice that this is notional. How the various services are deployed and where trust boundaries might be placed is not described. 
Temporally the insertion, "rez" and presentation are seperable by arbitrary amounts of time (including none). Insertion may be
from an external library, a tool chain, or other services. It is the moment when the content in question enters into the 
purview of the virtual world. 
</t>
<t>
The process of adding an item to a virtual region, copies some or all  of its content. This may be as little as a reference to the
actual item and an extremly simplified representatoin for physical simulation, or it may be a complete copy of the item in all of its particulars. 
The most common implementatoin has the entire item copied to the regoin for simulation, and delivery to the client. 
</t>
<section title="Content delivery models">
<t>
A range of possible represenations can be passed to a regoin for simulation. Full content can be passed 
to regions, or a subset of content, or only references to most content. The VWRAP specifications should
permit as broad a range of content delivery models as possible. 
</t>
<t>
One end of the spectrum involved passing the full content,
including the full geometric description, and all the information necessary
for a client to render the content, the information necessary to simulate the object at a physical level, 
and any scripted attachments which automate the behavior of the item. 
</t>
<t>
The other end of the delivery spectrum involves passing only a URI or
capability used to access the rendering information and a collision mesh,and related data for physical simulation. In such a model, the client
is responsible for fetching the additional informatoin needed to render the item's visual presence from a seperate
service. This fetch can be done under the credentials of the end user viewing the material, and divorces the simulation from
the trust chain needed to manage content. Any automation is done on a seperate host which the content creator or owner trusts, 
interacting with the object through remoted interfaces. 
</t>
</section> <!-- end content delivery models -->
<section title="multiple representations">
<t>
A second mechanism for managing content delivery is to provide multiple versions of an item, and pass different versions, depending on the trust level which
exists between two services. Such a model can be applied at all the steps in the VWRAP protocols. An asset server may host multiple versions of an object and pass
appropriate versions to requestors. A regoin coudl be sent multiple representations of an item, and pass the appropriate one down to clients based on the relationship 
between the client and the region. Alternative content can be used to account for degrees of trust as well as richness of a given client.
Multiple representations can be combined with redirection to permit a low fidelity version to be distributed widely, with a reference to a higher quality version which 
can be fetched directly should the end user be authorized. 
</t>
</section> <!-- end multiple representations -->

</section> 
 </section> <!-- end Conntent Management -->
<section title="Content Metadata">
<t>
Content meta data for content management allows the content creator 
</t>
</section>
</section> <!-- end of trust and policy issues -->

<!-- Boilterplate resumes here -->
        <section anchor="IANA" title="IANA Considerations">
            <t>This memo includes no request to IANA.</t>
        </section>

        <section anchor="Security" title="Security Considerations">
            <t> This draft primarily defines requirements and use cases, as well as a description of policy management approaches. Policy management includes
control of choices which affect security. To the extent that requirements and use cases permit poor security choices to be made when deploying services
security of a deployed system could be compromised by those considerations. 
      </t>
        </section>


    </middle>
    <!--  *****BACK MATTER ***** -->
    <back>
        <!-- References split into informative and normative -->
        <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

        <!--- Seems unhappy with no Normative ones so comment out ? -->
        <references title="Normative References">
            <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?>
        </references>

           <references title="Informative References">
            <!-- Here we use entities that we defined at the beginning. -->
            <!-- A reference written by by an organization not a person. -->
            <reference anchor="caps" target="http://tools.ietf.org/html/draft-lentczner-ogp-base-00">
                <front>
                    <title>Open Grid Protocol: Foundation</title>
                    <author>
                        <organization>Linden Lab</organization>
                    </author>
                    <date year="2009"/>
                </front>
            </reference>
            <reference anchor="intro" target="http://tools.ietf.org/html/draft-hamrick-ogp-intro-00">
                <front>
                    <title>Open Grid Protocol: Foundation</title>
                    <author>
                        <organization>Linden Lab</organization>
                    </author>
                    <date year="2009"/>
                </front>
            </reference>
            <reference anchor="cable" target="http://code.google.com/p/cablebeach/wiki/CableBeachCore1_0">
                <front>
                    <title>Cable Beach Design Wiki</title>
                    <author>
                        <organization>Intel</organization>
                    </author>
                    <date year="2009"/>
                </front>
            </reference>
        </references>
        <section anchor="app-additional" title="Additional Stuff">
            <t>This becomes an Appendix.</t>
        </section>
        <!-- Change Log

v00 2006-03-15  EBD   Initial version

v01 2006-04-03  EBD   Moved PI location back to position 1 -
                      v3.1 of XMLmind is better with them at this location.
v02 2007-03-07  AH    removed extraneous nested_list attribute,
                      other minor corrections
v03 2007-03-09  EBD   Added comments on null IANA sections and fixed heading capitalization.
                      Modified comments around figure to reflect non-implementation of
                      figure indent control.  Put in reference using anchor="DOMINATION".
                      Fixed up the date specification comments to reflect current truth.
v04 2007-03-09 AH     Major changes: shortened discussion of PIs,
                      added discussion of rfc include.
v05 2007-03-10 EBD    Added preamble to C program example to tell about ABNF and alternative 
                      images. Removed meta-characters from comments (causes problems).  -->
 </back>
</rfc>
