<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC5201  SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5201.xml">

]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-kuptsov-hhit-02" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="HHIT">Hierarchical Host Identity Tags</title>


    <author fullname="Dmitriy Kuptsov" initials="D.K." 
            surname="Kuptsov">
      <organization>Helsinki Institute for Information Technology, Aalto University</organization>

      <address>
 		<postal>
          <street>PO Box 19215</street>

          <city>TKK</city>

          <code>00076 Aalto</code>


          <country>Finland</country>
        </postal>
        <phone></phone>

        <email>dmitriy.kuptsov@hiit.fi</email>

      </address>
    </author>

        <author fullname="Andrei Gurtov" initials="A.G." 
            surname="Gurtov">
      <organization>Helsinki Institute for Information Technology, Aalto University</organization>
      <address>
        <postal>
          <street>PO Box 19215</street>

          <city>TKK</city>

          <code>00076 Aalto</code>

          <country>Finland</country>
        </postal>

        <phone></phone>

        <email>gurtov@hiit.fi</email>

      </address>
    </author>

   <date year="2011" />

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <keyword></keyword>

    <abstract>
      <t>
		This document describes the purpose, structure and possible use case of hierarchical host identity tags for HIP protocol. 
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t> 
		This document specifies the purpose, structure and possible use case of hierarchical host identity tags (HHIT)
		for Host Identity Protocol (HIP) <xref target="RFC5201">RFC 5201</xref>. 
      </t>
      <t>
		The purpose of HHIT is to enable online verification of flat identifiers (in a scalable way), such as Host Identity Tags (HIT),
		by corresponding organizations that are responsible for clients holding such identifiers. While one way of 
		verifying whether HIT belongs to a client that is affiliated with some organization (or unit within organization) 
		is to use certificates; such approach can be undesired because it (i) introduces high cost for certificate verification, and (ii) 
		does not directly allow certificate status verification (consider the situation when private key of a particular host was stolen
		and firewall enforcing certificate verification does not check the revocation status of host's certificate). 
      </t>
    </section>

    <section anchor="Overview" title="Structure of HHIT">
      <t>
		The following are the goals of HHIT: (i) allow any on the path security gateway to distinguish to which authority 
		the identifier belongs, and later ask corresponding authority whether given HHIT is valid; (ii) prevent misuse 
		of HHIT by attackers (specifically, the design allows to prevent replaying and constructing "fake" HHITs that will 
		enable attackers to bypass the security gateways).
      </t>
      
      <t>
      	The structure of hierarchical HHIT:
      	
      	<figure align="center" anchor="structure">
          <artwork align="left"><![CDATA[

 0                   1                   2                   3   
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            OID                                |
+                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               |              HHIT             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +
|                                                               |
+                                                               +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         ENC_TIMESTAMP                         |
+                                                               +
|                                                               |
+                                                               +
|                                                               |
+                                                               +
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            ]]></artwork>    
		</figure>
		
		<list style="symbols">
	  		<t>
		    OID is organization identifier that depending of the application of 
		    HHIT can be globally unique (e.g., assigned by Internet Assigned 
		    Numbers Authority (IANA)), or unique within certain scope (e.g.,  
		    within organization and assigned on per department or unit granularity).
		    
		    Length of OID is 48 bits.
		  </t>
		  <t>
			HHIT is an output of a pseudo-random function (PRF) under one-time secret key 
			and input taken as a concatenation of OID and flat identifier (HIT):
			
			HHIT=PRF(OID || HIT, secret)
			
			The length of HHIT field is 80 bits to guarantee sufficient level of security.
								
		  </t>	  
		  <t>
		    ENC_TIMESTAMP field guarantees freshness of HHIT, it contains the timestamp 
		    when particular HHIT was generated. This field is encrypted (using symmetric
		    encryption function) under the same one-time secret as HHIT:
	    
		    ENC_TIMESTAMP = ENC(HHIT || #epoc, secret),
	    
		    where HHIT is as described above, #epoc is a timestamp indicating the time 
		    when HHIT was constructed, and secret is the next yet unused secret key 
		    from a key pull, assigned to a client by its authority.
		    
		    Because the usage of block cipher is assumed for encryption, the length of 
		    ENC_TIMESTAMP field is a multiple of the block size of a particular encryption 
		    algorithm. Since it is sufficient for #epoch to be on the scale of seconds, 48 bits reserved 
		    for this field. As a result, the length of ENC_TIMESTAMP, when used together with AES-CBC
		    algorithm, is 128 bits.
		  </t>
		</list>
      </t>
      <t>
      	Because total length of OID||HHIT||ENC_TIMESTAMP exceeds reserved 128 bits for source address in HIP 
      	protocol, the source address may contain only OID||HHIT while ENC_TIMESTAMP can be carried as 
      	option in I1 packet. Observe, that it is only rational to have ENC_TIMESTAMP filed in initial I1 packet.
      </t>
    </section>
    
    <section anchor="Usecase" title="Use case">
    	<t>
    		Next we describe a possible use case: access control with HHIT:
      		<figure align="center" anchor="usecase">
          		<artwork align="left"><![CDATA[    								 
                       Register HHIT (offline)
+----------------------+------------------>+-------------+ 
|                      |                   |  Domain 1   |
|Client (from domain 1)|    Secret keys    |  authority  |
+----------------------+<------------------+-------+-----+
                       |                  HHIT /\  | OK
                       |                       |   v 
                       |   I1              +---+---------+ 
                       +------------------>|  Security   |-->...
                       +------------------>|  gateway    |
                       |   I1              +---+---+-----+
                       |                  HHIT |   /\   
                       |   Register HHIT       v   |  Ok
+----------------------+------------------>+-------------+ 
|Client (from domain 2)|                   |  Domain 2   |
|                      |    Secret keys    |  authority  |
+----------------------+<------------------+-------+-----+
            	]]></artwork>    
			</figure>
			We outline the protocol interaction:
    		<list style="symbols">
	  			<t>
					Each end-host that belongs to some organization, or organizational unit, 
					constructs its HIT (using the procedure described in 
					<xref target="RFC5201">RFC 5201</xref>), and registers it
					in an offline (and out-of-band) manner in its organizational repository.
					Depending on the application, the registration itself can involve authentication, e.g. 
					using passwords, certificates, biometric information, passport, etc.				
					Upon verification, domain authority generates set of one-time-passwords 
					(the number of such passwords again depends on the application needs), and for each secret s
					populates its database with the following records: HHIT = PRF(OID || HIT, s)
					Domain authority then returns list of secrets to client over secure channel (how this is 
					achieved is out of scope).
				</t>
			  	<t>
			  		When a client wants to access the service that is behind security gateway, 
			  		it chooses next unused one-time secret "unused secret" and constructs the 
			  		HHIT as PRF(OID || HIT, "unused secret"), it also takes the current #epoch
			  		"now" and constructs  ENC_TIMESTAMP as ENC(HHIT || "now", "unused secret").
			  		The I1 packet then contain the concatenation of OID, HHIT, and ENC_TIMESTAMP
			  		in the source address field.
				</t>
				<t>
					When security gateway receives such I1 packet, it will look-up the domain authority 
					using OID found in the source address, and submit OID, HHIT, and ENC_TIMESTAMP. Security 
					gateway will buffer I1 until it will receive (positive or negative) response from 
					corresponding domain authority.					
				</t>
				<t>
					Last, when domain authority receives OID, HHIT, and ENC_TIMESTAMP for verification 
					it looks up for the proper secret using HHIT as index. If the record was not found, 
					the domain authority immediately responds to a gateway that information is not valid.
					Else, domain authority attempts to decrypt ENC_TIMESTAMP field to find #epoch. It also
					registers the current time "now". If "now" - #epoch &gt; Delta, the HHIT will be 
					considered as invalid, and negative response will be sent to security gateway, 
					otherwise, domain authority will remove the record from the database, and reply to 
					security gateway with positive response code.
				</t>
				
				<t>
					Security gateway will make a forwarding decision regarding particular buffered I1
					packet based on the response it receives from domain authority: if the response
					is negative I1 packet is dropped, otherwise the state will be created 
					and I1 will be forwarded. Note, for	consequent R1, I2, R2 packets the forwarding 
					decisions by security gateway are done solely based on the stored internal state:
					if it exists the packets are forwarded, otherwise dropped.
				</t>
			</list>
	    </t>
    </section>
     <section anchor="Security" title="Security Considerations">
      <t>
		
      </t>
    </section>

     
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>

    <references title="Normative References">
      &RFC5201;
    </references>
  </back>
</rfc>
