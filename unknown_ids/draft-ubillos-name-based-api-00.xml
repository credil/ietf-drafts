<?xml version="1.0" encoding="US-ASCII"?>
<!-- change the "txt" on the previous line to "xml" to make this a valid XML2RFC template --> 
<!-- this is version 5 of this xml2rfc template -->
<!--
    DOCTYPE processing

To use this XML template, the rfc2629.dtd from the xml2rfc distribution should 
be in the local directory. The xml2rfc distribution is available from 
http://xml.resource.org/

 The ENTITY clauses create an include of the named XML files, which
contains references written in xml2rfc format.

 XML2RFC offers an include feature described in the XML2RFC README
  file.  That syntax, however, contradicts the DTD requirements to
  have <reference> elements within the <references> element, so an 
  XML parser is likely to find your XML file invalid.  It may be
  possible that XML2RFC will change their DTD so that the XML file
  remains valid when their style of include is used.

Some editors, such as XXE, resolve the ENTITY clauses before displaying the 
document to be edited.
-->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc5533 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5533.xml">
<!ENTITY rfc5534 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5534.xml">
]>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc strict="no"?>
<?rfc rfcedstyle="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<!-- Document  section 

Specify the category attribute per RFC2026 
options are info, std, bcp, or exp. 

docname is the name of the output document. This is optional;
the default is to use the base portion of the XML filename. 

For Internet-drafts, indicate which intellectual property notice 
to use per the rules of RFC3978. The value (as of this template) can be:
    full3978 -
    noModification3978 -
    noDerivatives3978 -
 The Intellectual Property section will be generated automatically by
  XML2RFC, based on the ipr attribute in the rfc element.

If this document obsoletes an RFC, specify the RFC in the "obsoletes" attribute
If this document updates an RFC, specify the RFC in the "updates" attribute
-->
<rfc category="exp" docName="draft-ubillos-name-based-api-00" ipr="trust200902">
  <front>
    <!--
Enter the full document title and an abbreviated version
  to use in the page header.
-->

    <title abbrev="Name Based API">Name Based API</title>

    <!-- copy the author block as many times as needed, one for each author.-->

    <!-- If the author is acting as editor, use the <role=editor> attribute-->

    <!-- see RFC2223 for guidelines regarding author names -->

    <author fullname="Javier Ubillos" initials="J"
            surname="Ubillos">
      <organization>Swedish Institute of Computer Science</organization>

      <address>
        <postal>
          <street>Kistagangen 16</street>

          <city>Kista</city>
	  <code>164 29</code>
          <country>Sweden</country>
        </postal>

        <phone>+46767647588</phone>

        <email>jav@sics.se</email>
      </address>
    </author>

    <!-- month and day will be generated automatically by XML2RFC; 
be sure the year is current.-->

    <date  year="2010" />

    <!-- IETF area is optional -->

    <!-- <area></area> -->

    <!--WG name at the upperleft corner of the doc, 
IETF is fine for non-WG IETF submissions -->

    <workgroup>Internet Engineering Task Force</workgroup>

    <!--<keyword>Network Management</keyword>

    <keyword>Management Information Base</keyword>

    <keyword>MIB</keyword>

    <keyword>SMIv2</keyword> -->

    <!--add additional keywords here for IETF website search engine -->
<abstract>


  
  <t>
    Today, networked applications typically make use of name-oriented
    network abstractions. There is a myriad of application development
    frameworks who provide abstracted APIs allowing applications to
    refer to their peers by name. These abstractions normally only
    provide application-layer protocol functionality. They are
    normally uni-lateral solutions, the support for the protocol
    used is implied by the service accessed on the remote peer(s).
  </t>
  <t>
    We suggest a unified API for networked applications. Isomorphic to
    the existing name-based solutions, but with added network-related
    functionality. Providing an existing application-layer protocols
    with network features such as mobility, multi-homing, IPv4/IPv6
    interoperability, NAT-traversal and so on...
  </t>    

 
</abstract>
 
   </front>

  <middle>

    <section title="Conventions">

      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
	NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
	"OPTIONAL" in this document are to be interpreted as described
	in RFC 2119 <xref target="RFC2119"/>.</t>
      
      </section>

    <!-- ********************************************* -->
    <section title="Terminology">
      <t>Locator - A topological address with which a host can be
	reached. E.g. IPv4/IPv6 or MAC-addresses. </t>
      <t>Multi-home - A host which is reachable through multiple
	locators. </t>
      <t>Name - Something with which a host (or service) can be
	named. E.g. a FQDN, a peer-id in a DHT or any other structure
	from. </t>
    </section>
    <section title="Motivation">
      <t>Applications and application-frameworks today typically deal
	with locators directly. The resolution: name -> locator is
	done by directly by the application or it is done framework
	(e.g. Java). This severely limits the functionality the
	operating system may provide.</t>
      <t> The alternative is using shim-layer solutions, where the OS
	presents a pseudo-address to the application and deals with
	locator management internally in the network-layer</t>

<figure>
    <preamble></preamble>
    <artwork alt=''>
      Names                Names               IP
        |                    |                  |
        |                    |                  |
        |                    |                  |
.-------+-------.    .-------+-------.          |
|               |    |  Application  |          |
|               |    +-------+-------'          |
|  Application  |  Names --&gt; |                  |
|               |    .-------+-------.          |
|               |    |  Application  |          |
|               |    |   Framework   |          |
'---------------'    '-------+-------'          |
        |     &lt;-- IP --&gt;     |                  |
.-------+--------------------+------------------+----.
|                                      .------. |    |
|          Operating System            |IP->IP| |    |
|                                      '------+-'    |
'-------+--------------------+----------------+------'
        |                    |                |
.-------+--------------------+----------------+------.
|               IP / Ethernet / other...             |
'----------------------------+-----------------------'
                             |
                             V
    </artwork>
    <postamble>Figure 1</postamble>
</figure>
    </section>
    <section title="Name-based API">
      <t>An API which allows the applications or
        application-frameworks to address their peers by name in a
        simple manner still providing the interface parts required to
        leverage the network functions. It should be complete but as
        far as possible be optional.</t>
      <t>Where the actual translation to locators should happen is an
	open question, and it seems likely that this should be a
	variable. Comparable how BSD sockets may vary its 'layer' by
	e.g.  SOCK_STREAM/SOCK_DGRAM, SOCK_RAW with or without
	setsockopt(HDRINCL).</t>

<figure>
    <preamble></preamble>
    <artwork alt=''>
  
        Name
         |
.--------+------------------.
| Application               |
+------------------+--------'
| Transport        |   |     
+---------+--------' Locator 
| Network |   |        |     
+---------' Locator    V 
    |         |   .---------.
  Locator     V   | Transp  |
    |    .--------+---------+
    V    |          Network |
.--------+------------------+
|                  Ethernet |
'--------+------------------'
         |
         V
    </artwork>
    <postamble>Figure 2</postamble>
</figure>
    </section>
    
    <section title="Bi-lateral requirements">
      <t>I the application-frameworks today, the common element
      between peers is the service used. This implies the application
      protocol used. For network based functions a mechanism to check
      for support at the remote peer is needed. This function should
      be backwards compatible. </t>
      
    </section>
    
    <section title="Security Considerations">
      
    </section>
    
    <section title="IANA Considerations">
      
    </section>
    
    <!-- The Author's Addresses section will be generated automatically by XML2RFC 
    from the front information. -->

    <section title="Contributors">
      <!--

      <t><cref>[TEMPLATE TODO] This optional section can be used to mention contributors to your internet draft.</cref></t>
      -->
    </section>
  </middle>

  <back>

    <!-- References Section -->

    <!-- Section 4.7f of [RFC2223bis] specifies the requirements for the
   references sections.  In particular, there MUST be separate lists of
   normative and informative references, each in a separate section.
   The style SHOULD follow that of recently published RFCs.

   The standard MIB boilerplate available at
  the OPS Area web site includes lists of
   normative and informative references that MUST appear in all IETF
   specifications that contain MIB modules.  If items from other MIB
   modules appear in an IMPORTS statement in the Definitions section,
   then the specifications containing those MIB modules MUST be included
   in the list of normative references.  When items are imported from an
   IANA-maintained MIB module the corresponding normative reference
   SHALL reference the on-line version of that MIB module.  It is the
   policy of the RFC Editor that all references must be cited in the
   text;  such citations MUST appear in the overview section where
   documents containing imported definitions (other than those already
   mentioned in the MIB boilerplate) are required to be mentioned (cf.
   Section 3.2).

In general, each normative reference SHOULD reference the most recent
version of the specification in question.
-->

    <references title="Normative References">
        <!-- [TEMPLATE TODO] rfc2119, 2578, 2579, and 2580 are required to support MIB
      module boilerplate text. -->

      &rfc2119;

    </references>

    <references title="Informative References">

<!--  RFC3410 is required to support the boilerplate text.-->

    </references>
    
    <references title="URL References">
     
    </references>
    <!--
<section anchor="appendix" title="Appendix A">
	<t>You can add appendices just as regular sections, the only
difference is that they go under "back" element, and get letters 
instead of numbers</t>
</section>
-->

    <section title="Change Log ">
      <t>Note to RFC Editor: if this document does not obsolete an existing RFC, 
      please remove this appendix before publication as an RFC.</t>
<!--
      from draft 12 to draft 13
      <t><list style="numbers">
      <t></t>
        </list></t>
          -->
    </section>

    <section title="Open Issues">
      <t>Note to RFC Editor: please remove this appendix before publication as an RFC.</t>
           <!--
		 <t><list style="numbers">
          <t>Contributor addresses need to be updated</t>
        </list></t>
        -->
    </section>

    <!--
$Id: mib-doc-template.xml,v 1.5 2008/04/08 17:39:56 H73653 Exp $

  -->
  </back>
</rfc>
