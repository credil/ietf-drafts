


STORM                                                   A. Kanevsky, Ed.
Internet-Draft                                                    VMware
Updates: 5043, 5044 (if approved)                        C. Bestler, Ed.
Intended status: Standards Track                              Consultant
Expires: October 7, 2011                                        R. Sharp
                                                                   Intel
                                                                 S. Wise
                                                     Open Grid Computing
                                                           April 5, 2011


                 Enhanced RDMA Connection Establishment
                  draft-ietf-storm-mpa-peer-connect-04

Abstract

   This document updates [RFC5043] and [RFC5044] by extending MPA
   negotiation for RDMA Connection establishment.  The first extension
   extends [RFC5043], enabling peer-to-peer connection establishment
   over MPA/TCP.  The second extension extends both [RFC5043] and
   [RFC5044], by providing an option for standardized exchange of RDMA-
   layer connection configuration.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on October 7, 2011.

Copyright Notice

   Copyright (c) 2011 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of



Kanevsky, et al.         Expires October 7, 2011                [Page 1]

Internet-Draft   Enhanced RDMA Connection Establishment       April 2011


   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1.  Summary of changes from RFC 5044 . . . . . . . . . . . . .  3
     1.2.  Summary of changes from RFC 5043 . . . . . . . . . . . . .  3
   2.  Requirements Language  . . . . . . . . . . . . . . . . . . . .  3
   3.  Definitions  . . . . . . . . . . . . . . . . . . . . . . . . .  3
   4.  Motivations  . . . . . . . . . . . . . . . . . . . . . . . . .  4
     4.1.  Enabling MPA Mode  . . . . . . . . . . . . . . . . . . . .  5
     4.2.  Lack of Explicit RTR in MPA Request/Reply Exchange . . . .  5
     4.3.  Limitations on ULP Workaround  . . . . . . . . . . . . . .  6
       4.3.1.  Transport Neutral APIs . . . . . . . . . . . . . . . .  7
       4.3.2.  Work/Completion Queue Accounting . . . . . . . . . . .  7
       4.3.3.  Host-based Implementation of MPA Fencing . . . . . . .  8
     4.4.  Standardized RDMA Parameter Negotiation  . . . . . . . . .  8
   5.  MPA Connection Setup . . . . . . . . . . . . . . . . . . . . .  9
   6.  Enhanced MPA Request/Reply Frames  . . . . . . . . . . . . . . 10
   7.  Enhanced SCTP Session Control Chunks . . . . . . . . . . . . . 11
   8.  MPA Error Reporting  . . . . . . . . . . . . . . . . . . . . . 13
   9.  Enhanced RDMA Connection Establishment Data  . . . . . . . . . 13
   10. Interoperability . . . . . . . . . . . . . . . . . . . . . . . 15
   11. IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 16
   12. Security Considerations  . . . . . . . . . . . . . . . . . . . 16
   13. Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 16
   14. References . . . . . . . . . . . . . . . . . . . . . . . . . . 16
     14.1. Normative References . . . . . . . . . . . . . . . . . . . 16
     14.2. Informative References . . . . . . . . . . . . . . . . . . 16
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 17















Kanevsky, et al.         Expires October 7, 2011                [Page 2]

Internet-Draft   Enhanced RDMA Connection Establishment       April 2011


1.  Introduction

   When used over TCP, the current RDDP suite of protocols relies on
   Marker PDU Alignment (MPA) [RFC5044] protocol for both connection
   establishment and for markers for TCP layering.  Currently MPA only
   supports a client-server model for connection establishment, forcing
   peer-to-peer applications to interact as though they had a client/
   server relationship.  In addition negotiation of some of Remote
   Direct Memory Access Protocol (RDMAP) [RFC5040] specific parameters
   are left to ULP negotiation.  Providing an optional ULP-independent
   format for exchanging these parameters would be of benefit to
   transport neutral RDMA applications.

1.1.  Summary of changes from RFC 5044

   This draft extends [RFC5044] MPA connection setup protocol.  First,
   it add exchange and negotiation of maximum number of RDMA Read
   Incoming (IRD) and Outgoing messages (ORD).  Second, it adds one more
   Ready to Receive (RTR) frame from requestor to responder as the last
   message of connection establishment and adds negotiation of RTR frame
   message type into MPA request/response frames.

1.2.  Summary of changes from RFC 5043

   This draft extends [RFC5043] by adding new Enhanced Session Control
   Chunks that extend the currently defined Chunks with the addition of
   IRD and ORD negotiation.


2.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].


3.  Definitions

   FULPDU:  Framed Upper Layer Protocol PDU.  See FPDU of [RFC5044].

   Completion Queue (CQ):  A consumer accessible queue where the RDMA
      device reports completions of Work Requests.  A Consumer is able
      to reap completions from a CQ without requiring per transaction
      support from the kernel or other privileged entity.  See [RDMAC].







Kanevsky, et al.         Expires October 7, 2011                [Page 3]

Internet-Draft   Enhanced RDMA Connection Establishment       April 2011


   Completion Queue Entry (CQE):  Transport and device specific
      representation of a Work Completion.  A Completion Queue holds
      CQEs.  See [RDMAC].

   Inbound RDMA Read Queue Depth (IRD):  The maximum number of incoming
      outstanding RDMA Read Request Messages an RDMA connection can
      handle.  See [RDMAC].

   IRD:  See Inbound RDMA Read Queue Depth.

   ORD:  See Outbound RDMA Read Queue Depth.

   Outbound RDMA Read Queue Depth (ORD):  The maximum number of
      outstanding RDMA Read Requests that can be issued for the RDMA
      connection.  This should be less than or equal to the peer's IRD.
      See [RDMAC].

   Queue Pair (QP):  The traditional name for a local Endpoint in a
      [VIA] derived local interface.  A Queue Pair is the set of Work
      Queues associated exclusively with a single Endpoint.  The Send
      Queue (SQ), Receive Queue (RQ) and Inbound RDMA Read Queue (IRQ)
      are considered to be part of the Queue Pair.  The potentially
      shared Completion Queue (CQ) and Shared Receive Queue (SRQ) are
      not.  See [RDMAC].

   Shared Receive Queue(SRQ):  A shared pool of Receive Work Requests
      posted by the Consumer that can be allocated by multiple RDMA
      endpoints (Queue Pair).  See [DAPL].

   Work Queue:  An element of a [VIA] derived local interface that
      allows user-space applications to submit Work Requests directly to
      network hardware.  Specific Work Queues include the Send Queue
      (SQ) for transmit requests, Receive Queue (RQ) for receive
      requests specific to a single Endpoint and Shared Receive Queues
      (SRQs) for receive requests that can be allocated by one or more
      Endpoints.  See [RDMAC].

   Work Queue Element (WQE):  Transport and device specific
      representation of a Work Request.  See [RDMAC]

   Work Request:  An elementary object used by Consumers to enqueue a
      requested operation (WQEs) onto a Work Queue.  See [RDMAC].


4.  Motivations

   The goal of this draft is twofold.  One is to extend support from the
   current client-server model for RDMA connection setup to a peer-to-



Kanevsky, et al.         Expires October 7, 2011                [Page 4]

Internet-Draft   Enhanced RDMA Connection Establishment       April 2011


   peer model.  The second is to add negotiation of RDMA Read queue size
   for both sides of an RDMA connection.

4.1.  Enabling MPA Mode

   MPA defines encoding of DDP Segments in FULPDUs (Framed Upper Layer
   Protocol PDUs).  Generation of FULPDUs requires the ability to
   periodically insert MPA Markers and to generate the MPA CRC-32c for
   each frame.  Reception may require parsing/removing the markers after
   using them to identify MPA Frame boundaries, and validation of the
   MPA-CRC32c.

   A major design objective for MPA was to ensure that the resulting TCP
   stream would be a fully compliant TCP stream for any and all TCP-
   aware middle-boxes.  The challenge is that while only some TCP
   payload streams are a valid stream of MPA FULPDUs, any sequence of
   bytes is a valid TCP payload stream.  The determination that a given
   stream is in a specific MPA mode cannot be made at the MPA or TCP
   layer.  Therefore enabling of MPA mode is handled by the ULP.

   The MPA protocol can be viewed as having two parts.

   o  a specification of generation and reception of MPA FULPDUs.  This
      is unchanged by Enhanced RDMA Connection Establishment.

   o  a pre-MPA exchange of messages to enable a specific MPA mode for
      the TCP connection.  Enhanced RDMA Connection Establishment
      extends this protocol with two new features.

   In typical implementations, generation and reception of MPA FULPDUs
   is handled by hardware.  The exchange of the MPA Request and Reply
   frames is then handled by host software.  As will be explained, this
   implementation split prevents applications from working around the
   client-server assumptions in the current MPA Request/Reply exchange.

4.2.  Lack of Explicit RTR in MPA Request/Reply Exchange

   The exchange of MPA Request and Reply messages to place a TCP
   connection in MPA mode is specified in [RFC5044].  This protocol
   provides many benefits to the design of MPA FULPDU hardware:

   o  The ULP is responsible for specifying the exact MPA Mode (Markers
      enabled or disabled, CRC-32c enabled or suppressed) and the point
      in the TCP streams (inbound and outbound) where MPA frames will
      begin.

   o  Before the first MPA frame is transmitted, all pre-MPA mode TCP
      payload will have been acknowledged by the peer.  Therefore it is



Kanevsky, et al.         Expires October 7, 2011                [Page 5]

Internet-Draft   Enhanced RDMA Connection Establishment       April 2011


      never necessary to generate a retransmission that mixes pre-MPA
      and MPA payload.

   o  Before MPA reception is enabled, all incoming pre-MPA mode TCP
      payload will have been acknowledged.  Therefore the host will
      never receive a TCP segment that mixes pre-MPA and MPA payload.

   The limitation of the current MPA Request/Reply exchange is that it
   does not define a Ready to Receive (RTR) message that the active side
   would send, so that the passive side can know that the last non-MPA
   payload (the MPA Reply) had been received.

   Instead, the role of an RTR message is piggy-backed on the first MPA
   FULPDU sent by the active side.  This is actually a valuable
   optimization for all applications that fit the classic client/server
   model.  The client only initiates the connection when it has a
   request to send to the server, and the server has nothing to send
   until it has received and processed the client request.

   Even applications where the server sends some configuration data
   immediately can easily send the same information as application
   private data in the MPA Reply.  So the currently defined exchange
   works for almost all applications.

   Many peer-to-peer applications, especially those involving cluster
   calculations (frequently using MPI [UsingMPI], or [RDS]), have no
   natural client or server roles ([PPMPI], [OpenMP]).  Typically one
   member of the cluster is arbitrarily selected to initiate the
   connection when the distributed task is launched, while the other
   accepts it.  At startup time, however, there is no way to predict
   which node will have the first message to actually send.
   Establishing the connections immediately, however, is valuable
   because it reduces latency once results are ready to transmit and it
   validates connectivity throughout the cluster.

   The lack of an explicit RTR message in the MPA Request/Reply exchange
   forces all applications to have a first message from the connection
   initiator, whether this matches the application communication model
   or not.

4.3.  Limitations on ULP Workaround

   The requirement that the RDMA connection initiator sends the first
   message does not appear to be that onerous on first examination.  The
   natural question is why the application layer would not simply
   generate a "nop" message when there was no other message to submit.

   There are three factors that make this workaround unsuitable for many



Kanevsky, et al.         Expires October 7, 2011                [Page 6]

Internet-Draft   Enhanced RDMA Connection Establishment       April 2011


   peer-to-peer applications.

   o  Transport Neutral APIs.

   o  Work/Completion Queue Accounting.

   o  Host-based implementation of MPA Fencing.

4.3.1.  Transport Neutral APIs

   Many of these applications access RDMA services using a transport
   neutral API such as [DAPL] or [OFA].  Only MPA has a first message
   requirement.  Other RDMA transports, including SCTP and InfiniBand,
   do not.

   Application or middleware communications can be expressed as
   transport neutral RDMA operations, allowing lower software layers to
   translate to transport and device specifics.  Having a distinct extra
   message that is required only for one transport undermines the
   application's goal of being transport neutral.

4.3.2.  Work/Completion Queue Accounting

   RDMA local APIs conventionally use work queues to submit requests
   (work queue elements or WQEs) and to asynchronously receive
   completions (in completion queues or CQs).

   Each work request can generate a completion queue entry (CQE).
   Completions for successful transmit work requests are frequently
   suppressed, but the completion queue capacity must account for the
   possibility that each will complete in error.  A completion queue can
   receive completions from multiple work queues.

   Completion Queues are defined so as to allow hardware RDMA
   implementations to generate CQEs directly to a user-space mapped
   buffer.  This enables a user-space RDMA consumer to reap completions
   without requiring kernel intervention.

   A hardware RDMA implementation cannot reasonably wait for an
   available slot in the completion queue.  The queue must be sized such
   that an overflow will not occur.  When an overflow does occur it is
   considered catastrophic and will typically require tearing down all
   RDMA connections using that CQ.

   This style of interface is very efficient, but places a burden on the
   application to properly size each Completion Queue to match the Work
   Queues that feed it.




Kanevsky, et al.         Expires October 7, 2011                [Page 7]

Internet-Draft   Enhanced RDMA Connection Establishment       April 2011


   While the format of both WQEs and CQEs is transport and device
   dependent, a transport neutral API can deal with WQEs and CQEs as
   abstract transport and device neutral objects.  Therefore the number
   of WQEs and CQEs required for an application can be transport and
   device neutral.

   The capacity of the work queues and completion queues can be
   calculated in an abstract transport/device neutral fashion.  Lower
   layers of the protocol stack cannot disrupt these calculations by
   inserting a dummy "nop" Work Request and filtering out the matching
   completion.  The lower layer does not know the usage model on which
   the queue sizes are built, nor does it know how frequently an
   insertion will be required.

4.3.3.  Host-based Implementation of MPA Fencing

   Many hardware implementations of iWARP using MPA/TCP do not handle
   the MPA Request/Reply exchange in hardware, rather they are handled
   by the host processor in software.  With such designs it is common
   for the MPA Fencing to be implemented in the user-space device-
   specific library (commonly referred to as a 'User Verbs' library or
   module).

   When the generation and reception of MPA FULPDUs is already dedicated
   to hardware, a Work Completion can only be generated by an untagged
   message.

4.4.  Standardized RDMA Parameter Negotiation

   Most RDMA applications are developed using a transport neutral API to
   access RDMA services based on a "queue pair" paradigm as originally
   defined by the Virtual Interface Architecture [VIA], refined by the
   Direct Access Programming Library [DAPL] and most commonly deployed
   with the OpenFabrics API [OFA].

   These transport neutral APIs seek to provide a common set of RDMA
   services whether the underlying transport is, for example, iWARP over
   MPA, iWARP over SCTP or InfiniBand.

   The common model for establishing an RDMA connection has the
   following steps:

   o  The passive side ULP listens for connection requests.

   o  The active side ULP submits a connection request using an RDMA
      endpoint ("queue pair"), the desired destination and the
      parameters to be used for the connection.  Those parameters
      include both RDMA layer characteristics, such as the RDMA Read



Kanevsky, et al.         Expires October 7, 2011                [Page 8]

Internet-Draft   Enhanced RDMA Connection Establishment       April 2011


      credits to be allowed and application specific data (typically
      referred to as "private data").

   o  The passive side ULP receives the Connection Request, which
      includes the identity of the active side and the requested
      connection characteristics.  The passive side ULP uses this
      information to decide whether to accept the connection, and if it
      is to be accepted, how to create and/or configure the RDMA
      endpoint.

   o  If accepting, the passive side ULP submits its acceptance of the
      Connection Request.  This local accept operation includes the RDMA
      endpoint to be used and the connection characteristics (both the
      RDMA configuration and any application specific private data to be
      returned).

   o  The active side receives confirmation that the connection has been
      accepted, what the configured connection characteristics are, and
      any application supplied private data.

   As currently defined, DDP connection establishment requires the ULP
   to encode the RDMA configuration in the application specific private
   data.  This results undesirable duplication of logic to cover both
   InfiniBand and iWARP, and to specify the extraction of the RDMA
   characteristics from the ULP for each specific Upper Layer Protocol.

   A standard definition of the RDMA characteristics within the private
   data section would enable common connection establishment APIs to
   format the RDMA characteristics based on the same API information
   used when establishing an InfiniBand connection.  The application
   would then only have to indicate that it was using this standard
   format to enable common connection establishment procedures to apply
   common code to properly parse these fields and configure the RDMA
   endpoints accordingly.


5.  MPA Connection Setup

   Below we provide overview of Enhanced Connection Setup.  The goal is
   to allow standard negotiation of ORD/IRD setting on both sides of the
   RDMA connection and/or to negotiate the initial data transfer
   operation by an initiator when the existing 'client sends first' rule
   does not match application requirements.

   The RDMA connection initiator sends an MPA Request, as specified in
   [RFC5044]; the new format defined here allows for:





Kanevsky, et al.         Expires October 7, 2011                [Page 9]

Internet-Draft   Enhanced RDMA Connection Establishment       April 2011


   o  Standardized negotiation of ORD and IRD.

   o  Negotiation of an RTR message.

   The RDMA connection responder processes the MPA Request and generates
   an MPA Reply, as specified in [RFC5044]; the new format completes the
   negotiation.

   The local interface SHOULD require the ULP to explicitly configure on
   a per-application or per-connection basis when an explicit RTR
   message will be required.  Piggy-backing the RTR on a Client's first
   message is a valuable optimization for most connections.

   The RDMA connection initiator MUST NOT allow any later FULPDUs to be
   transmitted before the RTR message.  One method to achieve that is to
   delay notifying the ULP that the RDMA connection has been established
   until after any required RTR Message has been transmitted.

   All MPA exchanges are performed via TCP prior to RDMA establishment,
   and are therefore signaled via TCP and not via RDMA completion.


6.  Enhanced MPA Request/Reply Frames

   Enhanced RDMA Connection Establishment uses an alternate format for
   MPA Requests and Replies, as follows:

       0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    0  |                                                               |
       +         Key (16 bytes containing "MPA ID Req Frame")          +
    4  |      (4D 50 41 20 49 44 20 52 65 71 20 46 72 61 6D 65)        |
       +         Or  (16 bytes containing "MPA ID Rep Frame")          +
    8  |      (4D 50 41 20 49 44 20 52 65 70 20 46 72 61 6D 65)        |
       +                                                               +
    12 |                                                               |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    16 |M|C|R|S| Res   |     Rev       |          PD_Length            |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |                                                               |
       ~                                                               ~
       ~                   Private Data                                ~
       |                                                               |
       |                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       |                               |
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+




Kanevsky, et al.         Expires October 7, 2011               [Page 10]

Internet-Draft   Enhanced RDMA Connection Establishment       April 2011


   Key:  Unchanged from [RFC5044].

   M: Unchanged from [RFC5044].

   C: Unchanged from [RFC5044].

   R: Unchanged from [RFC5044].

   S: One if the Private Data begins with the Enhanced RDMA Connection
      Establishment Data.  Zero otherwise.

   Res:  One bit smaller than in [RFC5044], otherwise unchanged.

   Rev:  This field contains the revision of MPA.  To use any Enhanced
      Connection Establishment feature this MUST be set to two, If no
      Enhanced Connection Establishment features are desired it MAY be
      set to one.  A host accepting MPA connections MUST continue to
      accept MPA Requests with version one even if it supports version
      two.

   PD_Length:  Unchanged from [RFC5044].  This is the total length of
      the Private Data field, including the Enhanced RDMA Connection
      Establishment Data if present.

   Private Data:  Unchanged from [RFC5044].  However, if the 'S' flag is
      set, Private Data begins with Enhanced RDMA Connection
      Establishment Data.


7.  Enhanced SCTP Session Control Chunks

   The type of the SCTP Session Control Chunk is defined by a Function
   Code.  [RFC5043] already defines codes for 'DDP Stream Session
   Initiate' and 'DDP Stream Session Accept', which are equivalent to a
   MPA Request Frame and an accepting MPA Reply Frame.

   Enhanced RDMA Connection Establishment requires three additional
   Function codes.  All DDP Stream Session Functional Codes are listed
   below:

   DDP Stream Session Initiate:  0x001

   DDP Stream Session Accept:  0x002

   DDP Stream Session Reject:  0x003






Kanevsky, et al.         Expires October 7, 2011               [Page 11]

Internet-Draft   Enhanced RDMA Connection Establishment       April 2011


   DDP Stream Session Terminate:  0x004

   Enhanced DDP Stream Session Initiate:  0x005

   Enhanced DDP Stream Session Accept:  0x006

   Enhanced DDP Stream Session Reject:  0x007

   The Enhanced Reject function code SHOULD be used to indicate a
   configuration that would have been accepted.

   The extended DDP stream session establishment follows the same rules
   as regular DDP stream session establishment as defined in [RFC5043].
   ULP-supplied Private Data MUST be included for extended DDP Stream
   Session Initiate, extended DDP Stream Session Accept, and extended
   DDP Stream Session Reject messages.  However, the ULP supplied
   Private Data MAY be of zero length.

   Private Data length MUST NOT exceed 512 bytes in any message,
   including enhanced RDMA connection establishment data.

   Private Data MUST NOT be included in the DDP Stream Session Terminate
   message.

   Received extended DDP Stream Session Control messages SHOULD be
   reported to the ULP.  If reported, any supplied Private Data MUST be
   available for the ULP to examine.

   The enhanced DDP stream management MUST use DDP stream session
   termination function code to terminate a stream established using
   enhanced DDP stream session function codes.

   It should be noted that [RFC5043] already supports either side
   sending the first DDP Message.  The Payload Protocol Identifier
   (PPID) already distinguishes between Session Establishment and DDP
   Segments.

   The following additional Legal Sequences of DDP Stream Session
   messages are defined:

   o  Extended Active/Passive Session Accepted: as with section 6.2 of
      [RFC5043], but with the extended opcodes as defined in this
      document.

   o  Extended Active/Passive Session Rejected: as with section 6.3 of
      [RFC5043], but with the extended opcodes as defined in this
      document.




Kanevsky, et al.         Expires October 7, 2011               [Page 12]

Internet-Draft   Enhanced RDMA Connection Establishment       April 2011


   o  Extended Active/Passive Session Non-ULP Rejected: as with section
      6.4 of [RFC5043], but with the extended opcodes as defined in this
      document.


8.  MPA Error Reporting

   The [RFC5043] and [RFC5044] do not define error codes.  The protocol
   layers on which RDMA connection establishment is layered upon
   [RFC5040] and [RFC5041] define layers and error types.  Specifically,
   MPA negotiation for RDMA connection establishment uses:

   Layer:      0010b - LLP/MPA
   Error Type: 0x3   - LLP

   The following error codes are defined for MPA negotiation:

   Error Code         Description
   --------------------------------------------------------
   0x1                Local Catastrophic
   0x2                Insufficient IRD resources


9.  Enhanced RDMA Connection Establishment Data

       0                   1                   2                   3
        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    0  |A|B|        IRD                |C|D|        ORD                |
    4  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+



   IRD:  In request: the Initiator initial IRD for the connection.  In
      reply: the depth the Responder will support.  Responder SHOULD NOT
      set its IRD higher than Initiator ORD.  Upon receiving accept
      connection message from the Responder, the Initiator MUST set its
      ORD to the responder IRD.  Both Responder and Initiator MUST pass
      the remote side provided IRD to ULP.  An all ones value (0x3FFF)
      indicates that automatic negotiation of the IRD is not desired,
      and that the ULP will be responsible for doing this configuration.

   ORD:  In request: the Initiator initial ORD setting for the
      connection.  In reply: the depth the Responder will support.
      Responder SHOULD set its ORD to a value that is less than or equal
      to the requested Initiator IRD.  Upon receiving accept connection
      from the Responder, the Initiator MUST set its IRD to a value at
      least as large as the responder ORD if it has sufficient resources



Kanevsky, et al.         Expires October 7, 2011               [Page 13]

Internet-Draft   Enhanced RDMA Connection Establishment       April 2011


      for it.  If the Initiator does not have sufficient resources to
      satisfy the Responder ORD it MUST terminate the connection and
      report to local ULP the Responder ORD and IRD with an indicator of
      insufficient resources to satisfy Responder ORD, and MUST send
      termination message to the Responder indicating insufficient
      resources.  Thus, the TERM message MUST contain Layer 2, Error
      Type 3, Error Code 2.  Both Responder and Initiator MUST pass the
      remote side provided ORD to ULP.  An all ones value (0x3FFF)
      indicates that automatic negotiation of the ORD is not desired,
      and that the ULP will be responsible for doing this configuration.

   A: Control Flag for using a zero length FULPDU as the RTR message.

   B: Control Flag for using a zero length RDMA Write as the RTR
      message.

   C: Control Flag for using a zero length RDMA Read as the RTR message.

   D: Reserved.  Must be sent as zero and ignored when received.

   In the MPA Request, the Initiator SHOULD set the A, B and C Control
   Flags respectively to TRUE for each of the options it supports.

   In the MPA Reply, the Control Flag is set for the set of options that
   the passive side will accept as an RTR message.  This response MUST
   include all options that the responder will support without requiring
   a connection specific enabling action.  For example, if the responder
   will always unblock an MPA connection when it receives a zero length
   MPA Write, it should indicate so without regard to what was in the
   MPA Request.  Options which require connection specific enabling
   actions SHOULD NOT be set unless the corresponding flag was set in
   the MPA Request.  The responder MAY choose to limit the number of
   modes that it enables.

   If there is no Standard RDMAP Configuration Data in the MPA Reply
   Frame, and the Enhanced Connection Establishment version number is
   used, it is the equivalent of setting 'A', 'B' and 'C'.

   Setting no Control Flags in the MPA Reply indicates that an RDMA Send
   message will be required.  As this option will require the initiator
   ULP to be involved it SHOULD NOT be used unless necessary.

   The peer-to-peer negotiation for the RTR message follows the
   following order:







Kanevsky, et al.         Expires October 7, 2011               [Page 14]

Internet-Draft   Enhanced RDMA Connection Establishment       April 2011


   Initiator -->: Sets Control Flags to indicate Initiator-supported
   forms of RTR

   Responder <--: Sets Control Flags to indicate Responder-supported
   forms of RTR

   Initiator -->: If at least one form of RTR is supported by both
   Initiator and Responder, then the first message sent MUST be an RTR
   using a form supported by both the Initiator and Responder.

   Initiator or Responder SHOULD generate the TERM message that contains
   Layer 2, Error Type 3, Error Code 1 when it encounters any error
   locally for which the special Error Code is not defined in section
   Section 8 before resetting the connection.


10.  Interoperability

   An initiator SHOULD NOT use the Enhanced DDP Connection Establishment
   formats or function codes when no enhanced functionality is desired.

   A responder MUST continue to accept the unenhanced connection
   requests.

   There are three Initiator/Responder cases that involve enhanced MPA:
   both initiator and responder, only responder, and only initiator.
   The enhanced MPA frame is defined by field 'S' set to 1.

   Enhanced MPA Initiator and Responder:  If a responder receives an
      enhanced MPA message, it MUST respond with an enhanced MPA
      message.

   Enhanced MPA Responder only:  If a responder receives an unenhanced
      MPA message ('S' is set to 0), it MUST respond with an unenhanced
      MPA message.

   Enhanced MPA Initiator only:  If a responder does not support
      received extended MPA message, then it MUST close the TCP
      connection and exit MPA since MPA frame is improperly formatted
      for it as stated in [RFC5044].  Thus, both initiator and responder
      report TCP connection termination to an application locally.  In
      this case initiator MAY attempt to establish RDMA connection using
      unenhanced MPA protocol as defined in [RFC5044] if this protocol
      is compatible with the application, and let ULP deal with ORD and
      IRD, and peer-to-peer negotiations.






Kanevsky, et al.         Expires October 7, 2011               [Page 15]

Internet-Draft   Enhanced RDMA Connection Establishment       April 2011


11.  IANA Considerations

   This document has no IANA considerations.


12.  Security Considerations

   The security considerations from RFC 5044 apply and the changes in
   this document do not introduce new security considerations.


13.  Acknowledgements

   The authors wish to thank Sean Hefty, Dave Minturn, Tom Talpey and
   David Black for their valuable contributions and reviews of this
   document.


14.  References

14.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC5040]  Recio, R., Metzler, B., Culley, P., Hilland, J., and D.
              Garcia, "A Remote Direct Memory Access Protocol
              Specification", RFC 5040, October 2007.

   [RFC5041]  Shah, H., Pinkerton, J., Recio, R., and P. Culley, "Direct
              Data Placement over Reliable Transports", RFC 5041,
              October 2007.

   [RFC5043]  Bestler, C. and R. Stewart, "Stream Control Transmission
              Protocol (SCTP) Direct Data Placement (DDP) Adaptation",
              RFC 5043, October 2007.

   [RFC5044]  Culley, P., Elzur, U., Recio, R., Bailey, S., and J.
              Carrier, "Marker PDU Aligned Framing for TCP
              Specification", RFC 5044, October 2007.

14.2.  Informative References

   [DAPL]     "Direct Access Programming Library",
              <http://www.datcollaborative.org>.

   [OFA]      "OFA verbs & APIs", <http://www.openfabrics.org/>.




Kanevsky, et al.         Expires October 7, 2011               [Page 16]

Internet-Draft   Enhanced RDMA Connection Establishment       April 2011


   [OpenMP]   McGraw-Hill, "Parallel Programming in C with MPI and
              OpenMP", 2003.

   [PPMPI]    Morgan Kaufmann Publishers Inc., "Parallel Programming
              with MPI", 2008.

   [RDMAC]    "RDMA Protocol Verbs Specification (Version 1.0)", <http:/
              /www.rdmaconsortium.org/home/
              draft-hilland-iwarp-verbs-v1.0-RDMA.pdf>.

   [RDS]      Open Fabrics Association, "Reliable Datagram Socket",
              2008, <http://www.openfabrics.org/archives/
              spring2008sonoma/Tuesday/sonoma_2008_0408%20Oracle.ppt>.

   [UsingMPI]
              MIT Press, "Using MPI-2: Advanced Features of the Message
              Passing Interface", 1999.

   [VIA]      Compaq, Intel, Microsoft, "Virtual Interface Architecture
              Specification", 1997, <http://pllab.cs.nthu.edu.tw/cs5403/
              Readings/EJB/san_10.pdf>.


Authors' Addresses

   Arkady Kanevsky (editor)
   VMware
   5 Cambridge Center
   Cambridge, MA  02142
   USA

   Phone: +1-617-528-7721
   Email: arkady@vmware.com


   Caitlin Bestler (editor)
   Consultant
   555 E El Camino Real #104
   Sunnyvale, CA  94087
   USA

   Phone: +1-949-528-3085
   Email: cait@asomi.com








Kanevsky, et al.         Expires October 7, 2011               [Page 17]

Internet-Draft   Enhanced RDMA Connection Establishment       April 2011


   Robert Sharp
   Intel
   LAD High Performance Message Passing, Mailstop: AN1-WTR1
   1501 South Mopac, Suite 400
   Austin, TX  78746
   USA

   Phone: +1-512-493-3242
   Email: robert.o.sharp@intel.com


   Steve Wise
   Open Grid Computing
   4030 Braker Lane STE 130
   Austin, TX  78759
   USA

   Phone: +1-512-343-9196 x101
   Email: swise@opengridcomputing.com
































Kanevsky, et al.         Expires October 7, 2011               [Page 18]

