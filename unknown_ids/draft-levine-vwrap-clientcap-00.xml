<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-levine-vwrap-clientcap-00"
     ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="VWRAP Client Caps">Client Capabilities for VWRAP</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="David W. levine" initials="D.W.L." role="editor"
            surname="Levine">
      <organization>IBM Thomas J. Watson Research Center</organization>

      <address>
        <postal>
          <street>19 Skyline Drive</street>

          <!-- Reorder these if your country does things differently -->

          <city>Hawthorne</city>

          <region>New York</region>

          <code>10532</code>

          <country>USA</country>
        </postal>

        <phone>+1 914-784-7427</phone>

        <email>dwl@us.ibm.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <author fullname="Suzy Deffeyes" initials="S.D.." surname="Deffeyes">
      <organization>IBM CIO Innovation</organization>

      <address>
        <postal>
          <street>11501 Burnet Road</street>

          <!-- Reorder these if your country does things differently -->

          <city>Austin</city>

          <region>Texas</region>

          <code>78758</code>

          <country>USA</country>
        </postal>

        <phone>+1 512-286-5904</phone>

        <email>suzyq@us.ibm.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date month="March" year="2010" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>Applications</area>

    <workgroup>VWRAP</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>template</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>client side capabilities for VWRAP.</t>
    </abstract>
  </front>

  <middle>
    <section title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </section>

    <section title="overview">
      <t>
This note defines the use of "Client" side capabilities within the
VWRAP specifications. Client Capabilities are Capabilities, as defined
 by the VWRAP specifications, on the client or virtual worlds viewer.
</t>
<t>
Client side capabilities will often represent resources hosted on devices and
systems behind firewalls, and will thus be accessed via event queues are
similar mechanisms. This note defines patterns for using client side
capabilities, and an URI scheme for adressing such capabilities. A
fairly complete worked example is provided. The exact LLSD, the exact
      URI formats, and the example service are provided to illustrate the
      service pattern, and are extremely provisional. The sequence diagrams
      used to illustrate the flows, as well as the structural diagrams
      represent one possible approach to implementing the service pattern.
      Nothing beyond the interfaces would be normative. This note is an
informatoinal draft.   it is very preliminary and is intended to drive discussion.
</t>
<t>
This draft is likely to be updated in the next few days based on list
feedback.  
</t>

      <t>Questions of note:</t>

      <t><list style="numbers">
          <t>How much run time / latency cost is associated with this design?
          As we move things from UDP to client side caps, what are the
          performance implications for the client?</t>

          <t>This design is intended to permit the substitution of r-http,
          websockets, or xmpp or similar transports in the architecture. How
          close do we come to that ideal?</t>

          <t>Will this model fit well with the security and trust policy model
          being comtemplated for VWRAP?</t>

          <t>Do we really want to specify that requests to the client should
          be valid on 'any' event queue pipe?? For instance, if I am at Joe's
          Pirate Bay region, maybe I do not want to service a request for
          friendship. Maybe i don't trust joe's pirate bay enuf to take
          friendship requests, maybe i only want to accept them from my nice
          safe trusted agentd.</t>

          <t>Is everything in the eventq uri needed? The viewer wouldnt't be
          servicing requests for other agents</t>

          <t>Why is host_end_cap specified the way it is? why is it not just a
          URI like it is today?</t>

          <t>Are we missing any key requirements here?</t>
        </list></t>
    </section>
<section title="Motivation">
<t>
The VWRAP specifications derive much of their initial structure from the design patterns embodied
in Linden Lab(TM)'s Second Life(tm) virtual world service. This service has been
characterized by a fairly straightfoward deployment patttern, where services
are clustered and facaded behind large, unitary interfaces. 
</t>
<t>
In a faceded model it is easy to manage message routing. From the client's perspective, all traffic
terminates in the the facade.  There is an event queue or a two way pipe, and the client accepts
asynchronous traffic from any services within the facade from that message source. The facade
pattern hides any internal routing within the service deployment. There may be internal routing
occuring, but  the client is kept unaware of these issues. 
</t>
<t>
The VRWAP specifications describe a set of services. When those services are decomposed into multiple
deployment patterns, the question of how a given service can delivery asynchronous information to another service or 
client becomes cogent.  
</t>
<t>
The "caps granting" pattern makes it straight forward to return a cap to a seperate service. A client may contact
the seed cap granter at a URI and be handed a URI to a service hosted on a seperate server and indeed a service
which is not even hosted by the cap granter. Services returned by a single caps grant may span trust and administrative domeains.  
When theese services need to deliever asyncrhonous messages the routing problem becomes clear. 
</t>
<t>
The second motivation for this work is managing pairwise addition and evolution of protocols. 
The current design assumes that the "client" is a unitary, process with a deep understanding og the expected
services available on the servers. As the VWRAP specification grow, and we build and explore various ways
of delivering services, we will want to allow new services to be described, and we will almost certainly
find the current client approach limiting. Having an explicit way of saying "For this service, please
route notification to this endpoint" allows people to easily build a range of possible client side structures
including ones which are different than currnet clients.
</t>
<t>
These two sets of motivations drive a desire to explicitly model the service deployment and client deployment
model in a way that allows a dynamic associaton betwen the services. 
</t>
</section> <!-- End Motivation -->

    <section title="Requirements">
      <t>This note addresses the following requirements for service/client
      modeling in VWRAP:</t>

      <t><list style="numbers">
          <t>Support deploying services across arbitrary domain and hosting
          models In particular, permit services to be deployed across multiple
          hosts within a domain, clustering pipes, and securely sharing event
          queues and event delivery.</t>

          <t>Abstract away a specific single bidirectional pipe from the VWRAP
          specs Support event queues, r-http if it becomes a common pattern,
          websockets, if they become common, and full duplex schemes, such as
          xmpp, if they become viable</t>

          <t>Provide a model for architecturally describing resources on the
          client. This, in effect, is "addressing" client side resources,
          providing references to them.</t>

          <t>Permit service side deployers to pass around references to these
          client side resources within the service cloud safely and
          transparently</t>

          <t><list style="symbols">
              <t>Prevent services from spoofing messages to resources others
              than those they have been granted access to</t>

              <t>Provide a endpoint independent path to the client (via any
              eventq available, or any URI representing the client
              resource)</t>

              <t>Preventing guessing of endpoint resource addresses</t>
            </list></t>

          <t>Closely model the current event queue implementations</t>
        </list></t>

      <t>Support deploying services on multiple domains and hosting models
      Virtual worlds have a wide range of deployment patterns, and require a
      broad range of services, with different computational profiles. We want
      to enable people to delegate services to arbitrary servers. This should
      enable clouds to host services, and permit deployers to choose
      deployment models which meet their needs. Abstracting away specific
      pipes This is the single largest driver. We want to divorce the VWRAP
      specifications from the current Linden Lab event queue implementation,
      the UDP pipes, and any single approach to delivering bits to the client.
      VWRAP aspires to support virtual worlds over a period of multiple years.
      We assume that the pipes to clients will evolve over time. Creating a
      web services, URI addressed approach to managing connections to regions,
      is a powerful way to de-couple transport choices from protocol
      handlers.</t>
    </section>

    <section title="Rest/Caps style model for client resources">
       <t>
       This represents one pattern which could address the requiements. One
open question is whether simply permitting each service to create an event
queue as needed is sufficient. 
     </t>
      <t>Once we want to model the client's resources separate from the
      communications pipes used to access those resources, we are faced with
      the problem of naming, and addressing those resources. The current
      client, mostly assumes that it can parse from message type to determine
      where the message should be routed. The overall justifications for using
      REST approaches are as cogent for the client, as any other portion of
      VWRAP. The REST model affords a consistent approach to modeling
      resources</t>
    </section>

    <section title="Overall approach">
      <t>We approach the overall design as describing access to resources
      hosted by clients. As many clients are inaccessible for full http access
      from the services which wish to contact them, we describe the overall
      approach, in a way which permits eventqueues to be used in the current
      implementation, and approaches such as reverse-HTTP (Sometimes refered
      to as rhttp, r-http or ptth) in the future with no changes to the basic
      approach. (and ideally none to the code, beyond supporting r-http
      listeners.) Named client side resources The major addition to the
      current model is that of addressable client side resources. This
      effectively extends the REST/ Capabilities model to interactions
      involving sending data to the client. Instead of sending them to the
      client as a single endpoint, we can route the data to specific endpoints
      managed by the client. By using the basic REST model for manipulating
      these resources, we get a simple, well defined set of interactions
      between services and client side resources.</t>
    </section>

    <section title="A simple example (friendship)">
      <t>So, instead of embedding friendship inside a IM message, or even in a
      separate message, and requiring the client to parse the header and then
      route the message, we instead define a resource on the client, which is
      associated with friendship messages. This resource is then passed to the
      service(s) which need to manipulate the resource. The common case will
      be that services will post messages to the client, but we define the
      model generally so that services can invoke normal REST semantic
      operations on the resources.</t>

      <t>Exposing client side resources with an event queue</t>

      <t>Since the client cannot directly expose its resources, the client
      relies on event queues to fetch requests destined for these resources
      from services. This is mediated via a COMET style event queue. The
      client polls the service, and when there are requests destined for it,
      it collects those requests and routes them to the handlers which process
      them.</t>

      <t>The requests contain the resource they are routed to, and the method
      to be invoked on the resource, as well as the payload of the
      request.</t>

      <t><figure>
          <artwork><![CDATA[
<map> 
<key>sequence</key><int>sequence number</int> 
<key>resource</key><string>path of resource</string>
<key>method</key><string>POST</string>
<key>payload</key>{LLSD of payload}
</map>
]]></artwork>
        </figure></t>

      <t>Each request can be routed by the client side event queue to the
      desired handler. Note the separate event queues sharing one map of
      resource to handlers, and delivering events to shared handlers. Now, in
      order to complete this story, we need to describe how the services know
      what resources on the client they should post to, and how these
      resources are addressed.</t>
    </section>

    <section title="An eventq URI">
      <t>To support addressing client side resource reached event queues, we
      introduce an "eventq:" URI. eventq://client_id@fqdn_of_eventq_host/{path
      to resource} or eventqs://client_id@fqdn_of_eventq_host/{path to
      resource} For details on URI format,
      http://en.wikipedia.org/wiki/URI_scheme and more formally:
      http://tools.ietf.org/html/rfc3986 We are describing a scheme "eventq"
      with hierarchical part broken into the traditional "authority" and
      "path" Our authority is addressed as "client_id@fqdn_of eventq_host"
      What this says is "for the unique client (client_id) you can route via
      an event queue hosted by the host listed as "fqdn_of_eventq_host" which
      will be a hostname. To address the specic resource, on that client, you
      must provide the path. The client_id, is a short term unique string
      representing the client, during this session with the services cloud.
      This is provided to permit several important options. First, it permits
      us to pass a capability with an eventq: URI to a service which already
      has a connection to the client, and allows the transport level software
      to understand it already has a connection to the client. It also allows
      correct behavior in the face of an attempt to re-establish a connection
      to the eventq host, and finally, it allows services to chose *any* event
      queue it knows about which connects to the client for delivering it's
      requests to the client. This allows a number of potential deployment
      patterns which permit scaling of the computational fabric with no
      changes to the client, or necessarily the services. The eventqs scheme,
      is identical to the eventq scheme, with the added requirement that the
      underyling event queue be implemented using https or an equally secure
      transport, so that messages cannot be intercepted, and there is a high
      degree of confidence that the host holding the service end of the eventq
      is the desired host.</t>
    </section>

    <section title="Putting it all together">
      <t>To actually use this plumbing, we need to associate the client side
      resource with the service which wishes to use it. We incorporate this
      into the setup flow needed to use the resource. The client/viewer
      requests a capability from a seed cap in the services network. (from
      initial login, or transitively from other caps) The service returns with
      a URI of the service side resource. The client then creates a client
      side resource (or resources) for the service to use, and passes them up
      to the service, which then begins to issue requests against these
      resources.</t>

      <t><list style="numbers">
          <t>Client/Viewer logs into a service and acquires one or more
          seedcaps</t>

          <t>The client requests a set of capabilities from the seedcaps.</t>

          <t>One or more of these capability requests includes an event
          queue</t>

          <t>The client establishes the event queues, posting its "client_id"
          to the event queue host.</t>

          <t>Zero or more of the capabilities requested use client side
          resources. For these capabilties, the client creates and registers a
          client side resource, in the form of a client capability, composes a
          URI for the resources, and informs the service of the URIs of the
          client side resources.</t>

          <t>The service side service begins posting requests on the
          associated event queues</t>

          <t>The client routes the requests to the registered handlers.</t>

          <t>We flow a response from the handler back to the invoker</t>
        </list></t>
    </section>

    <section title="From login to a client cap delivered message">
      <t>A small worked example. The actual service involved, and the
      deployment details of the service are purely notional. Do not focus on
      the specific service messages, but the routing and setup flows which
      enable the messages to flow.</t>
    </section>

    <section title="Login/Auth initial cap grants">
      <t>This is pretty much VWRAP business as usual. The client connects to
      the authentication service, and gets a seedcap, on an Agent Domain
      Service (n, one of many)</t>

      <t><figure>
          <artwork><![CDATA[
+----------------+       +-------------------+  +------------------+
| VWRAP viewer    |       | VWRAP Auth Service |  | Agent  Service |
+----------------+       +-------------------+  +------------------+
        |                          |                     |
        | Login()                  |                     |
        |--------------------- --->|                     |
        |                          |                     |
        | login_response(seed_cap) |                     |
        |<-------------------------|                     |
        |                          |                     |
        | Request_caps(Caps list)  |                     |
        |----------------------------------------------->|
        |                          |                     |
        |                          |                     |
        |<-----------------------------------------------|
                caps_granted(array of caps, URIs, of caps)
]]></artwork>
        </figure></t>
    </section>

    <section title="Setting up an event queue">
      <t>Pretty straight forward. We create a handler on the client, which
      calls the cap the client got from the login step. 
     There is one additional tidbit that flows at this point,
      which is that we get the Host end of our caps. This fetches from the
      host side of the agent domain event queue, which we will use in our
      URIs. XXX dummy needs explaination here.</t>

      <t><figure>
          <artwork><![CDATA[
<map>a77e875e0f82d975@adhost.test.org/ccaps/e132c4ea-55c8-4be3-a77e-
<key>host_end_cap</key>
<string>fully.qualified.domain.com</string>
</map>
]]></artwork>
        </figure></t>
    </section>

    <section title="Wiring up the client side resource of a service">
      <t>The next step is the major addition to the sequence. We take the cap
      for a service we requested earlier, and then create the client side
      handler, associate it with a client side resource, and pass that
      resource to the service side cap.[NOTE:  this seems confusing, i think in
      part because I'm not sure who "we" is. So it is hard to tell who is
      telling whom. I think u know what you mean, but it's not coming across
      in the text. Also, Is there a step where the client 'advertises' what
      services it can provide on a specific event queue? And Does the server
      side 'ask' for a list of client side caps like the viewer asks for caps
      from the AD and region? ]</t>

      <t><figure>
          <artwork><![CDATA[
<map>
<key>org.VWRAP.friendship.client_listener</key>
<string>eventq://4a0e0e09-d3e1-4ab8-bc3f-
875e0f82d975@adhost.test.org/ccaps/e132c4ea-55c8-4be3-a77e-
3ec91ef63b7a/fslistner</string>
</map>
]]></artwork>
        </figure></t>
    </section>

    <section title="Flowing a message to the handler">
      <t>Finally, with all the bits in place, the invoker can send an event,
      and expect it to get picked up at the far end by the handler. XXX is
      this the AD handler, the friendship services handler, or do you mean the
      client eq handler?? This thing just aches for an actual pooperpoint
      diagram. XXX Our hypothetical message is:</t>

      <t><figure>
          <artwork><![CDATA[
<map>
<key>request_type</key>
<string>friendship request</string>
<key>user social name</key>
<string> Hippo The Avatarian</string>
<key>user uuid</key>
<string>4509971b-b2f3-43a9-bc71-1736c971a8f7</string>
<key>message</key>
<string>Please be my friend, we met at the hippo wallow last week
</string>
</map>
]]></artwork>
        </figure></t>

      <t>So, the Friendship services takes that payload, and the URI of the
      client's resource. It is out of scope, how it posts the request to the
      service end of the event queue. (being a deployer issue, not part of the
      public spec) It passes the URI, and the payload, and it gets to the
      input hopper of the event queue, along with the method being invoked.
      (in this case "POST") The event queue then packages up the message as
      part of the array of messages it has bound to the client: XXX not quite
      sure why you need to state it is out of scope. plz explainie.</t>

      <t><figure>
          <artwork><![CDATA[
<array>
.
.
<map>
<key>method</key><string>POST</string>
<key>sequence id</key><integer>98726</integer>
<key>resource</key>
<string>/ccaps/e132c4ea-55c8-4be3-a77e-3ec91ef63b7a/fslistner</string>
<key>payload</key>
<map>
<key>request_type</key>
<string>friendship request</string>
<key>user social name</key>
<string> Hippo The Avatarian</string>
<key>user uuid</key>
<string>4509971b-b2f3-43a9-bc71-1736c971a8f7</string>
<key>message</key>
<string>Please be my friend, we met at the hippo wallow last week
</string>
</map>
</map>
</array>
]]></artwork>
        </figure></t>
    </section>

    <section title="Flowing a response">
      <t>No such resource: If there is no client side handler at the resource
      listed in the request the event queue handler flows back a 404 responds
      per traditional http; XXX if we arent requiring http, do we need our own
      set of error codes defined?</t>

      <t><figure>
          <artwork><![CDATA[
<array>
..
<map>
<key>sequence number</key><integer>98726</integer>

<key>http_response</key>
<map>
<key>response code</key>
<integer>404</integer> 
<key>payload</key>
<string>
No resource associated with this key
</string>
</map>
</map>
</array>
]]></artwork>
        </figure></t>

      <t>Successful responses When the client's friendship handler has
      accepted the request, it can post a response. This can, of course,
      include simply accepting the request, and then posting an "accept
      friendship" message to the main cap, or accepting it directly, depending
      on the design of the friendship service. We will do both, for
      illustrative purposes</t>

      <t>Simple ok</t>

      <t>For the simple, accepted response, the handler will post back to the
      event queue an OK. (This is an internal flow, not part of the VWRAP
      architecture) and the event queue will then pass on the response to the
      invoker. it Structurally, this is very
      similar to the request. The get() call will pass up responses for
      handling by the service side event queue.</t>

      <t><figure>
          <artwork><![CDATA[
<array>
..
<map>
<key>sequence number</key>
<integer>98726</integer>

<key>http_response</key>
<map>
<key>response code</key>
<integer>200</integer> 
<key>payload</key>
</map>
</map>
</array>
]]></artwork>
        </figure></t>
    </section>

    <section title="Passing back content">
      <t>The final case, is actually passing back content on a reply. This
      merely adds the payload.
<figure>
          <artwork><![CDATA[
<array>
<map>
<key>sequence number</key>
<integer>98726</integer>

<key>http_response</key>
<map>
<key>response code</key>
<integer>200</integer> 
<key>payload</key>
  <map>
  <key>request_type</key>
  <string>friendship accept</string>
  <key>user social name</key>
  <string>Happy Songbird</string>
  <key>user uuid</key>
  <string>4509971b-ffa3-43a9-1748-1736c978fa3e</string>
  <key>message</key>
  <string>Thank you. I'd love to be friends. 
  </string>
  </map>
</map>
</map>
</array>
]]></artwork>
        </figure></t>

      <t>The overall pattern and other URIs.. The overall pattern is intended
      to provide a framework for handling not just eventq: sceme URIs, but any
      URI which will successfully flow the data between the two services. For
      this to work, the basic pattern, of setting a client side cap needs to
      keep in mind that the "eventq/eventqs" scheme is not the only URI which
      might be passed in the future.</t>
    </section>

    <!-- ***** Edit Point ***** -->

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>

      <t>If this specification progresses, a request to IANA to register the
      eventq scheme might be contemplated</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>Event queues expose client side resources to messages from servers.
      The URI for eventq provides routing to these resources. This exposes
      these resources to a number of possible attacks. The use of
      capabilities, and the limitation that in order to access a client side
      capability, one has to have access to the host side of an event queue,
      eliminates most of the possible attacks. The current capabilities
      specification uses a 128 bit UUID, generated for each session, for each
      capability, to make the resource portion of the capability essentially
      un-guessable. This requires care in passing around capabilities, as if
      they are passed in plaintext, they would be subject to sniffing, and if
      passed in open sessions, such as http, they would be vulnerable to man
      in the middle attacks. Control of the services side endpoint of event
      queues provides a separate means of limiting the security issues.
      Nothing described here defines how the host end of an event queue is
      exposed to services. Depending on the host implementation, the resource
      could be accessible broadly, or only to programs running in the address
      space of the event queue. If the resource is made available broadly, the
      capability design limits the exposure of the resource to messages aimed
      at the actually resource, but opens up the event queue itself as a
      vehicle for denial of service attacks.</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->

      &RFC2119;

      <reference anchor="min_ref">
        <!-- the following is the minimum to make xml2rfc happy -->

        <front>
          <title>Minimal Reference</title>

          <author initials="authInitials" surname="authSurName">
            <organization></organization>
          </author>

          <date year="2006" />
        </front>
      </reference>
    </references>

    <references title="Informative References">
      <!-- Here we use entities that we defined at the beginning. -->

      <!-- A reference written by by an organization not a person. -->

      <reference anchor="caps"
                 target="http://tools.ietf.org/html/draft-lentczner-VWRAP-base-00">
        <front>
          <title>Open Grid Protocol: Foundation</title>

          <author>
            <organization>Linden Lab</organization>
          </author>

          <date year="2009" />
        </front>
      </reference>

      <reference anchor="intro"
                 target="http://tools.ietf.org/html/draft-hamrick-VWRAP-intro-00">
        <front>
          <title>Open Grid Protocol: Foundation</title>

          <author>
            <organization>Linden Lab</organization>
          </author>

          <date year="2009" />
        </front>
      </reference>

      <reference anchor="cable"
                 target="http://code.google.com/p/cablebeach/wiki/CableBeachCore1_0">
        <front>
          <title>Cable Beach Design Wiki</title>

          <author>
            <organization>Intel</organization>
          </author>

          <date year="2009" />
        </front>
      </reference>
    </references>

    <section anchor="app-additional" title="Additional Stuff">
      <t>This becomes an Appendix.</t>
    </section>

    <!-- Change Log

v00 2006-03-15  EBD   Initial version

v01 2006-04-03  EBD   Moved PI location back to position 1 -
                      v3.1 of XMLmind is better with them at this location.
v02 2007-03-07  AH    removed extraneous nested_list attribute,
                      other minor corrections
v03 2007-03-09  EBD   Added comments on null IANA sections and fixed heading capitalization.
                      Modified comments around figure to reflect non-implementation of
                      figure indent control.  Put in reference using anchor="DOMINATION".
                      Fixed up the date specification comments to reflect current truth.
v04 2007-03-09 AH     Major changes: shortened discussion of PIs,
                      added discussion of rfc include.
v05 2007-03-10 EBD    Added preamble to C program example to tell about ABNF and alternative 
                      images. Removed meta-characters from comments (causes problems).  -->
  </back>
</rfc>
