<?xml version="1.0"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd"[
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC4422 SYSTEM
         "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4422.xml">
<!ENTITY RFC3501 SYSTEM
         "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3501.xml">
<!ENTITY I-D.ietf-oauth-v2 PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-v2.xml'>
	<!ENTITY I-D.hammer-hostmeta PUBLIC '' 
	'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.hammer-hostmeta.xml'>
	]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="no" ?>
<?rfc sortrefs="yes" ?>
<?rfc strict="yes" ?>
<?rfc linkmailto="yes" ?>

<rfc ipr="trust200902" docName="draft-mills-kitten-sasl-oauth-00.txt" category="std">

  <front>
    <title abbrev="A SASL Mechanism for OAuth"> A SASL Mechanism for OAuth</title>
    <author fullname="William Mills" initials="W." surname="Mills">
      <organization>Yahoo Inc.</organization>
      <address>
        <postal>
          <street/>
          <city/>
          <code/>
          <region/>
          <country/>
        </postal>
        <phone/>
        <email>wmills@yahoo-inc.com </email>
      </address>
    </author>
    <author fullname="Tim Showalter" initials="T." surname="Showalter">
      <organization>Yahoo Inc.</organization>
      <address>
        <postal>
          <street/>
          <city/>
          <code/>
          <region/>
          <country/>
        </postal>
        <phone/>
        <email>timshow@yahoo-inc.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Nokia Siemens Networks</organization>
      <address>
        <postal>
          <street>Linnoitustie 6</street>
          <city>Espoo</city>
          <code>02600</code>
          <country>Finland</country>
        </postal>
        <phone>+358 (50) 4871445</phone>
        <email>Hannes.Tschofenig@gmx.net</email>
        <uri>http://www.tschofenig.priv.at</uri>
      </address>
    </author>

    <date year="2010"/>
    <workgroup>KITTEN</workgroup>

    <abstract>
      <t>Simple Authentication and Security Layer (SASL) is a framework for providing authentication
        and data security services in connection-oriented protocols via replaceable mechanisms.
        OAuth is a protocol for delegated authentication and thereby provides a method for clients
        to access a protected resource on behalf of a resource owner.</t>
      <t>This document defines the use of OAuth over SASL. Thereby, it enables OAuth usage for
        non-HTTP-based application protocols. A future version of this document will describe the
        integration into the Generic Security Services Application Program Interface (GSS-APIO).</t>
    </abstract>
  </front>

  <middle>

    <!-- ******************************************************************** -->

    <section title="Introduction">

      <t><xref target="I-D.ietf-oauth-v2"/> offers a standard mechanism for delegating
        authentication typically used for the purpose of control access to resources. The core OAuth
        specification defines a number of profiles but focuses on an HTTP-based environment. This
        mechanism takes advantage of the OAuth protocol and infrastructure to provide a way to use
        SASL <xref target="RFC4422"/> for access to resources for non-HTTP-based protocols. One
        example for such a protocol is the Internet Message Access Protocol (IMAP) <xref
          target="RFC3501"/>, which is what we use in our examples.</t>
      <t> The general authentication flow is that the application will first obtain an OAuth access
        token from an OAuth service for the resource.
        <!-- If the client is using and does not know the authentication and token endpoints it can first query for discovery information in a SASL exchange.-->
        Once the client has obtained an OAuth access token it then connects and authenticated using
        this SASL mechanism.</t>

      <t><xref target="overview"/> shows the relationship between SASL and OAuth graphically. Item
        (1) denotes the part of the OAuth exchange that remains unchanged from <xref
          target="I-D.ietf-oauth-v2"/>, i.e. where the client obtains and refreshes Access Tokens.
        This document focuses on item (2) where the Access Token is presented to the resource server
        over SASL.</t>
      <t>
        <figure anchor="overview" title="Interworking Architecture">
          <artwork><![CDATA[
                                                              ----+
   +--------+                                  +---------------+  |
   |        |--(C)-- Authorization Request --->|   Resource    |  |
   |        |                                  |     Owner     |  |Plain
   |        |<-(D)------ Access Grant ---------|               |  |OAuth
   |        |                                  +---------------+  |2.0
   |        |                                                     |(1)
   |        |         Client Credentials &     +---------------+  |
   |        |--(E)------ Access Grant -------->| Authorization |  |
   | Client |                                  |     Server    |  |
   |        |<-(F)------ Access Token ---------|               |  |
   |        |      (w/ Optional Refresh Token) +---------------+  |
   |        |                                                 ----+
   |        |
   |        |                                                 ----+
   |        |        (Optional discovery)      +---------------+  |
   |        |--(A)------- User Name  --------->|               |  |
   | Client |                                  |               |  |
   |        |<-(B)------ Authentication -------|               |  |
   |        |          endpoint information    |    Resource   |  |OAuth

   |        |                                  |     Server    |  |over
   |        |--(G)------ Access Token -------->|               |  |SASL
   |        |                                  |               |  |
   |        |<-(H)---- Protected Resource -----|               |  |(2)
   +--------+                                  +---------------+  |
                                                              ----+
]]></artwork>
        </figure>
      </t>

      <t>
        <list style="empty">
          <t>Note: The discovery procedure in OAuth is still work in progress. Hence, the discovery
            components described in this document should be considered incomplete and a tentative
            proposal. In general, there is a tradeoff between a generic, externally available
            defined discovery mechanisms (such as Webfinger using host-meta <xref
              target="I-D.hammer-hostmeta"/>) and configuration information exchanged inband between
            the protocol endpoints. </t>
        </list>
      </t>
    </section>

    <!-- ******************************************************************** -->

    <section anchor="terminology" title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
        "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in
        RFC 2119 <xref target="RFC2119"/>.</t>
      <t>The reader is assumed to be familiar with the terms used in the OAuth 2.0 specification.</t>
      <t>In examples, "C:" and "S:" indicate lines sent by the client and server respectively. Line
        breaks have been inserted for readability.</t>
    </section>

    <!-- ******************************************************************** -->

    <section title="The OAuth SASL Mechanism">

      <t>SASL is used as a generalized authentication method in a variety of protocols. This
        document defines a mechanism to allow OAuth to be used within the SASL framework. In this
        model a client authenticates to an OAuth-capable authorization server over HTTP. This server
        then issues tokens after successfully authenticating the resource owner. Subsequently, the
        obtained token may be presented in an OAuth-authenticated request to the resource server. </t>


      <section title="Initial Client Response">
        <t>The client response is formatted in the style of an HTTP request, a GET line is included
          for the purposes of extensibility. The following key-value header lines are defined in the
          client response: <list style="hanging">
            <t hangText="User	(OPTIONAL):">Contains the user identifier being authenticated, and is
              provided to allow correct discovery information to be returned.</t>
            <t hangText="Host	(REQUIRED):">Contains the host name to which the client connected.</t>
            <t hangText="Authorization (REQUIRED):">Contains the authenticator as specified in
              OAuth.</t>
          </list>
        </t>
        <t> The user name is provided before discovery information because a given server could
          allow multiple authenticators. For instance, a large ISP could provide mail service for
          several domains who manage their own user information. For instance, users at foo-example.com
          could be authenticated by an OAuth service at https://oauth.foo-example.com/, and users at
          bar-example.com could be authenticated by https://oauth.bar-example.com, but both could be served
          by a hypothetical IMAP server running at a third domain, imap.example.net. </t>
      </section>

      <section title="Server's Response">
        <t>The server validates the response as per the OAuth specification. If the protected
          resource requires a signed request (using one of the available signature method), the URL
          for the resource being authenticated is reconstructed per the OAuth specification from the
          HTTP style request passed by the client. </t>
        <t> The server responds to a successful OAuth authentication by completing the SASL
          negotiation. The OAuth token MUST carry the user id to be authenticated and the server
          MUST use the user in the OAuth credential as the user being authenticated, the assertion
          we accept is that of the OAuth token and not other information such as from the URL or
          "User:" header. </t>
        <t> The server responds to failed authentication by sending discovery information and then
          failing the authentication. </t>
      </section>

      <section title="Discovery Information">
        <t>The server MUST send discovery information in response to a failed OAuth 
          authentication exchange or a request with an empty Authenticate header. If discovery information is
          returned the server MUST return discovery information containing an authentication
          endpoint appropriate for the user. If the "User" header is present the discovery
          information MUST be for that user. In the absence of the "User" header the server SHOULD
          send discovery information for the user from the OAuth token. Discovery information is
          provided by the server to the client to allow a client to discover the appropriate OAuth
          authenticator service. The client then uses that information to obtain the refresh token
          and the access token needed for OAuth authentication. The client SHOULD cache and re-use
          the user specific discovery information for service endpoints. The following key-value
          pairs are defined for discovery information: <list style="hanging">
            <t hangText="WWW-Authenticate:"> As specified in <xref target="I-D.ietf-oauth-v2"/>.</t>
          </list>
        </t>
        <t>Usage of the URL provided in the discovery information is defined in the OAuth
          specification. If the server supports multiple authenticators the discovery information
          returned for unknown users MUST be consistent with the discovery information for known
          users to prevent user enumeration. The OAuth 2.0 specification <xref
            target="I-D.ietf-oauth-v2"/> has multiple types of authentication flows and the server
          MUST specify the supported authorization flows in the discovery information. The server
          MUST support at least one authorziation flow, and MAY support multiple flows.</t>
      </section>

      <section title="Use of Signature Type Authorization">
        <t>OAuth supports authorization using signatures, which requires that both client and
          server construct the string to be signed. OAuth is designed for
          authentication/authorization to use a resource. SASL is designed for user authentication,
          and has no facility for being more specific. In this mechanism we require an HTTP style
          format specifically to support signature type authentication, but this is extremely
          limited. The HTTP style request is limited to a path of "/", because this mechanism is
          authenticating the user to the server. This mechanism is in the SASL model, but is
          designed so that no changes are needed if there is a revision of SASL which supports more
          specific resource authorization, e.g. IMAP access to a specific folder or FTP access
          limited to a specific directory. </t>
        <t> So for example, given that OAuth has a port number component for the signature, on an
          IMAP server running on port 143 and given the the OAuth style authorization request (with
          long lines wrapped for readability) below: <figure>
            <artwork><![CDATA[
GET / HTTP/1.1 
Host: server.example.com 
Authorization: Token token="vF9dft4qmT", nonce="s8djwd", 
               timestamp="137131200", algorithm="hmac-sha256", 
               signature="wOJIO9A2W5mFwDgiDvZbTSMK/PY="
]]></artwork>
          </figure>
        </t>

        <t>The normalized request string would be constructed per <xref target="I-D.ietf-oauth-v2"
          />. In this example the normalized request string would be:<figure>
            <artwork><![CDATA[
137131200,s8djwd,hmac-sha256,GET,server.example.com:143,
http://example.com/
]]></artwork>
          </figure>
        </t>
      </section>
      <section title="Formal Syntax of Messages">
        <t>
          <figure>
            <artwork><![CDATA[

    ;; CRLF, ... defined in RFC 5234

    client_response = header user* host authorization 

    header = "GET / HTTP/1.1" CRLF

    user = 'User:' SPACE field-value CRLF

    host = 'Host:' SPACE field-value CRLF

    authorization = 'Authorization:' SPACE field-value CRLF

    field-name = *(%x20-%x39 / %x3b-%xff) ;; no ":", ascii printable

    field-value = *(%x01-%x09 / %x0b / %x0c / %x0e-%xff) CRLF 
                  ;; no CR or LF

    server_discovery_info = [ "WWW-Authenticate:" SPACE 
                              field_value extended* CRLF ]

    extended = field-name ":"  SPACE field-value
]]></artwork>
          </figure>
        </t>
      </section>

    </section>

    <!-- ******************************************************************** -->

    <section title="Implementation Requirements">

      <t>Tokens typically have a restricted lifetime. In addition, the policy of a client MAY revoke
        a previously obtained token at any time. The client MAY request a new access token for each
        connection to a resource server be made. In use cases like IMAP where clients frequently
        make multiple connections at the same time the client it is RECOMMENDED to re-use the same
        access token, if permitted by the resource server. Clients MAY implement any of the OAuth
        profiles since they are largely outside the scope of this specification, and the mentioned
        profiles in this document are just examples. </t>

      <!-- The client SHOULD use pipelining <xref target="RFC2920"/> to send an initial client response, if this is supported,
      in the protocol being authenticated. 
      -->

    </section>


    <!-- ******************************************************************** -->


    <section title="Examples">
      <t>These example illustrate exchanges between an IMAP client and an IMAP server.</t>

      <section title="Successful Bearer Token Exchange">

        <t>This example shows a successful OAuth 2.0 bearer token exchange with an initial client
          response. Note that line breaks are inserted for readability.</t>
        <t>
          <figure>
            <artwork><![CDATA[
S: * IMAP4rev1 Server Ready 
C: t0 CAPABILITY 
S: * CAPABILITY IMAP4rev1 AUTH=OAUTH
S: t0 OK Completed
C: t1 AUTHENTICATE OAUTH R0VUIC8gSFRUUC8xLjENClVzZXI6IHNjb290ZXJAYWx0
      YXZpc3RhLmNvbQ0KSG9zdDogaW1hcC55YWhvby5jb20NCkF1dGhvcml6YXRpb24
      6IFRva2VuIHRva2VuPSJ2RjlkZnQ0cW1UYzJOdmIzUmxja0JoYkhSaGRtbHpkR0
      V1WTI5dENnPT0iDQoNCg==
S: +
S: t1 OK SASL authentication succeeded
]]></artwork>
          </figure>
        </t>
        <t>As required by IMAP <xref target="RFC3501"/>, the payloads are base64-encoded. The
          initial client response is: <figure>
            <artwork><![CDATA[
GET / HTTP/1.1 
Host: imap.example.com 
Authorization: Token 
token="vF9dft4qmTc2Nvb3RlckBhbHRhdmlzdGEuY29tCg=="                
]]></artwork>
          </figure>
        </t>
        <t>The "blank" line here is an empty response from the server. This response contains
          discovery information, in the success case no discovery information is necessary to the
          response is empty. Like other messages, and in accordance with the IMAP SASL binding, the
          empty response is base64-encoded. </t>
      </section>

      <section title="Failed Exchange">
        <t>This example shows a failed exchange because of the empty Authorization header, which is
          how a client can query for discovery information. Note that line breaks are inserted for
          readability.</t>
        <t>
          <figure>
            <artwork><![CDATA[
S: * IMAP4rev1 Server Ready 
C: t0 CAPABILITY&nbsp;
S: * CAPABILITY IMAP4rev1 AUTH=OAUTH SASL-IR
S: t0 OK Completed 
C: t1 AUTHENTICATE OAUTH R0VUIC8gSFRUUC8xLjENClVzZXI6IHNjb290ZXJAYW
   x0YXZpc3RhLmNvbQ0KSG9zdDogaW1hcC55YWhvby5jb20NCkF1dGhlbnRpY2F0ZT
   ogDQoNCg==
S: + V1dXLUF1dGhlbnRpY2F0ZTogcmVhbG09ImltYXAueWFob28uY29tIiwgYXV0aH
   otdXJpPSJodHRwczovL2xvZ2luLnlhaG9vLmNvbS9vYXV0aCIsIHRva2VuLXVyaT
   0iaHR0cHM6Ly9sb2dpbi55YWhvby5jb20vb2F1dGgiLCBhbGdvcml0aG09ImhtYW
   Mtc2hhMjU2Ig0KDQo=
S: t1 NO SASL authentication failed
]]></artwork>
          </figure>
        </t>
        <t> The initial client response is: <figure>
            <artwork><![CDATA[
GET / HTTP/1.1 
User: alice@example.com 
Host: imap.example.com 
Authorization: 
            ]]></artwork>
          </figure>
        </t>
        <t> The server discovery response is: <figure>
            <artwork><![CDATA[
WWW-Authenticate: Token realm="mail", 
       authz-uri="https://login.example.com/oauth", 
       token-uri="https://login.example.com/oauth", 
       algorithm="hmac-sha256"
            ]]></artwork>
          </figure>
        </t>
      </section>
    </section>

    <!-- ******************************************************************** -->


    <section title="Security Considerations">
      <t> This mechanism does not provide a security layer. The OAuth specification <xref
          target="I-D.ietf-oauth-v2"/> allows for a variety of usages, and the security properties
        of these profiles varies. The usage of bearer tokens, for example, provide security features
        similar to cookies. Applications using this mechanism SHOULD exercise the same level of care
        using this mechanism as they would in using the SASL PLAIN mechanism. In particular, TLS 1.2
        MUST be implemented and its usage is RECOMMENDED unless tokens expire quickly. </t>
      <t> A significant benefit of OAuth for usage in IMAP, POP, SMTP, or other clients that usually
        store passwords, is that the password is not stored in the client, a token is. This means
        that the password is not exposed, what we risk is a token that can be more limited or can be
        easily revoked. </t>
      <t> It is possible that SASL will be authenticating a connection, indeed our examples are
        IMAP, and the life of that connection my outlast the life of the token used to authenticate
        it. This is a common problem in application protocols where connections are long-lived, and
        not a problem with this mechanism per se.</t>

      <!--      <t> OAuth isn't the password. When authenticating thing slike XMPP that allow change password
        care is needed. [Update this] </t>
-->
      <t> It is possible for an application server running on Evil.example.com to tell a client to
        request a token from Good.example.org. A client following these instructions will pass a
        token from Good to Evil. This is by design, since it is possible that Good and Evil are
        merely names, not descriptive, and that this is an innocuous activity between cooperating
        two servers in different domains. For instance, a site might operate their authentication
        service in-house, but outsource their mail systems to an external entity. </t>
    </section>

    <!-- ******************************************************************** -->

    <section title="IANA Considerations">
      <t> The IANA is requested to register the following SASL profile: <list style="empty">
          <t>SASL mechanism profile: OAUTH</t>
          <t>Security Considerations: See this document</t>
          <t>Published Specification: See this document</t>
          <t>For further information: Contact the authors of this document.</t>
          <t>Owner/Change controller: the IETF</t>
          <t>Note: None</t>
        </list>
      </t>
    </section>


    <!-- ******************************************************************** -->

  </middle>
  <back>
    <references title="Normative References"> &RFC2119; &RFC4422; &I-D.ietf-oauth-v2; </references>

    <references title="Informative References"> &RFC3501; &I-D.hammer-hostmeta; </references>


  </back>
</rfc>
