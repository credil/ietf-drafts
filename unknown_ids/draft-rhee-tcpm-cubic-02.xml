<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
    <!ENTITY rfc2119 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
]>

<rfc category="exp" ipr="full3978" docName="draft-rhee-tcpm-cubic-02.txt">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>

    <front>
        <title abbrev='CUBIC'>CUBIC for Fast Long-Distance Networks</title>
        <author initials='I.' surname="Rhee" fullname='Injong Rhee'>
		<organization abbrev='NCSU'>North Carolina State University</organization>

            <address>
                <postal>
                    <street>Department of Computer Science</street>
                    <city>Raleigh</city> <region>NC</region>
                    <code>27695-7534</code>
                    <country>US</country>
                </postal>

                <email>rhee@ncsu.edu</email>
            </address>        
	  </author>
        <author initials='L.' surname="Xu" fullname='Lisong Xu'>
		<organization abbrev='UNL'>University of Nebraska-Lincoln</organization>

            <address>
                <postal>
                    <street>Department of Computer Science and Engineering</street>
                    <city>Lincoln</city> <region>NE</region>
                    <code>68588-0115</code>
                    <country>US</country>
                </postal>

                <email>xu@cse.unl.edu</email>
            </address>        
	  </author>
        <author initials='S.' surname="Ha" fullname='Sangtae Ha'>
		<organization abbrev='NCSU'>North Carolina State University</organization>

            <address>
                <postal>
                    <street>Department of Computer Science</street>
                    <city>Raleigh</city> <region>NC</region>
                    <code>27695-7534</code>
                    <country>US</country>
                </postal>

                <email>sha2@ncsu.edu</email>
            </address>        
	  </author>
        <date month='August' year='2008' />
        <keyword>Internet-Draft</keyword>
        
        <abstract><t>

   CUBIC is an extension to the current TCP standards.  The protocol
   differs from the current TCP standards only in the congestion window
   adjustment function in the sender side.  In particular, it uses a
   cubic function instead of a linear window increase of the current TCP
   standards to improve scalability and stability under fast and long
   distance networks.  BIC-TCP, a predecessor of CUBIC, has been a
   default TCP adopted by Linux since year 2005 and has already been
   deployed globally and in use for several years by the Internet
   community at large.  CUBIC is using a similar window growth function
   as BIC-TCP and is designed to be less aggressive and fairer to TCP in
   bandwidth usage than BIC-TCP while maintaining the strengths of BIC-
   TCP such as stability, window scalability and RTT fairness.  Through
   extensive testing in various Internet scenarios, we believe that
   CUBIC is safe for deployment and testing in the global Internet.  The
   intent of this document is to provide the protocol specification of
   CUBIC for a third party implementation and solicit the community
   feedback through experimentation on the performance of CUBIC.  We
   expect this document to be eventually published as an experimental
   RFC.

</t></abstract>


    </front>

    <middle>



	  <section  title='Introduction'>
<t>
  
   The low utilization problem of TCP in fast long-distance networks is
   well documented in <xref target="K03" /><xref target="RFC3649" />.  This problem arises from a slow
   increase of congestion window following a congestion event in a
   network with a large bandwidth delay product (BDP).  Our experience
   <xref target="H+06" /> 
   indicates that this problem is frequently observed even in the
   range of congestion window sizes over several hundreds of packets
   (each packet is sized around 1000 bytes) especially under a network path 
   with over 100ms round-trip
   times (RTTs).  This problem is equally applicable to all Reno style
   TCP standards and their variants, including TCP-RENO <xref target="RFC2581" />, TCP-NewReno <xref target="RFC3782" />, TCP-SACK <xref target="RFC2018" />, SCTP <xref target="RFC4960" />, TFRC <xref target="RFC3448" />
   that use the same linear increase function for window growth, which
   we refer to collectively as Standard TCP below.

</t><t>
   CUBIC <xref target="H+08" /> is a modification to the congestion control mechanism of
   Standard TCP, in particular, to the window increase function of
   Standard TCP senders, to remedy this problem.  It uses a cubic
   increase function in terms of the elapsed time from the last
   congestion event.  While most alternative algorithms to Standard TCP
   uses a convex increase function where after a loss event, the window
   increment is always increasing,  CUBIC uses both the concave and convex
   profiles of a cubic function for window increase. After a window reduction following a
   loss event, it registers the window size where it got the loss
   event as W_max and performs a multiplicative decrease of 
   congestion window and the regular fast recovery and retransmit of
   Standard TCP. After it enters into
   congestion avoidance from fast recovery, it starts to increase the 
   window using the concave profile of the cubic function. The cubic function
   is set to have its plateau at W_max so the concave growth continues until
   the window size becomes W_max. After that, the cubic function turns into
   a convex profile and the convex window growth begins.
   This style of window adjustment
   (concave and then convex) improves protocol and network stability
   while maintaining high network utilization <xref target="C+07" />.  This is because the
   window size remains almost constant, forming a plateau around W_max
   where network utilization is deemed highest and under steady state,
   most window size samples of CUBIC are close to W_max, thus promoting
   high network utilization and protocol stability.  Note that protocols
   with convex increase functions have the maximum increments around
   W_max and introduces a large number of packet bursts around the
   saturation point of the network, likely causing frequent global
   loss synchronizations.

</t><t>
   Another notable feature of CUBIC is that its window increase rate is
   mostly independent of RTT, and follows a (cubic) function of the elapsed time
   since the last loss event.  This feature promotes per-flow
   fairness to Standard TCP as well as  RTT-fairness.  Note that
   Standard TCP performs well under short RTT and small
   bandwidth (or small BDP) networks.  Only in a large long RTT and
   large bandwidth (or large BDP) networks, it has the scalability
   problem.  An alternative protocol to Standard TCP designed to be
   friendly to Standard TCP at a per-flow basis must operate must
   increase its window much less aggressively in small BDP networks than
   in large BDP networks.  In CUBIC, its window growth rate is slowest around the
   inflection point of the cubic function and this function does not
   depend on RTT.  In a smaller BDP network where
   Standard TCP flows are working well, the absolute amount of the
   window decrease at a loss event is always smaller because of the
   multiplicative decrease.  Therefore, in CUBIC, the starting window
   size after a loss event from which the window starts to increase, is
   smaller in a smaller BDP network, thus falling nearer to the plateau
   of the cubic function where the growth rate is slowest.  By setting
   appropriate values of the cubic function parameters, CUBIC
   sets its growth rate always no faster than Standard TCP around its
   inflection point.  When the cubic function grows slower than the window
   of Standard TCP, CUBIC simply follows the window size of Standard TCP
   to ensure fairness to Standard TCP in a small BDP network.  
   We call this region where CUBIC behaves like Standard TCP, 
   the TCP-friendly region.

</t><t>
   CUBIC maintains the same window growth rate independent of RTTs
   outside of the TCP-friendly region, and flows with different RTTs 
   have the similar window sizes under steady state when they operate
   outside the TCP-friendly region.
   This ensures CUBIC flows with different RTTs to have their bandwidth
   shares linearly proportional to the inverse of their RTT ratio (the longer RTT,
   the smaller the share).  This behavior is the same as that of
   Standard TCP under high statistical multiplexing environments where
   packet losses are independent of individual flow rates.  However, under low
   statistical multiplexing environments, the bandwidth share ratio of Standard TCP flows with
   different RTTs is squarely proportional to the inverse of their RTT
   ratio <xref target="XHR04" />.  CUBIC always ensures the linear ratio 
   independent of the levels of statistical multiplexing. This is an improvement
   over Standard TCP. While
   there is no consensus on a particular bandwidth share ratios of
   different RTT flows, we believe that under wired Internet, use of the
   linear share notion seems more reasonable than equal share or a
   higher order shares.  HTCP <xref target="LS08" /> currently uses the equal share.

</t><t>
   CUBIC sets the multiplicative window decrease factor to 0.2 while
   Standard TCP uses 0.5.  While this improves the scalability of the
   protocol, a side effect of this decision is slower convergence
   especially under low statistical multiplexing environments.  This
   design choice is following the observation that the author of
   HSTCP <xref target="RFC3649" /> has made along with other researchers (e.g., <xref target="GV02" />):
   the current Internet becomes more asynchronous with less frequent
   loss synchronizations with high statistical multiplexing.  Under this
   environment, even strict MIMD can converge.  CUBIC flows with the
   same RTT always converge to the same share of bandwidth independent of
   statistical multiplexing, thus achieving intra-protocol fairness.  
   We also find that under the environments with sufficient
   statistical multiplexing, the convergence speed of CUBIC flows is reasonable.
</t><t>
   In the ensuing sections, we provide the exact specification of CUBIC
   and discuss the safety features of CUBIC following the guidelines
   specified in <xref target="RFC5033" />.


</t>
        </section>

	  <section  title='Conventions'>
<t>
 The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      <xref target="RFC2119" />.
</t>
        </section>



        <section title="CUBIC Congestion Control">

        <section title="Window growth function">
<t>

   CUBIC maintains the acknowledgment (ACK) clocking of Standard TCP
   by increasing congestion window only at the reception of ACK.
   The protocol does not make any change to the fast recovery and retransmit of 
   TCP-NewReno <xref target="RFC3782" /> and TCP-SACK <xref target="RFC2018" />.  During congestion
   avoidance after fast recovery, CUBIC changes the window update
   algorithm of Standard TCP.  Suppose that W_max is the window size before
   the window is reduced in the last fast retransmit and recovery.

</t><t>
   The window growth function of CUBIC uses the following function:

</t><t>
   W(t) = C*(t-K)^3 + W_max (Eq. 1)
</t><t>
   where C is a constant fixed to determine the aggressiveness of window growth in high BDP networks, 
   t is the elapsed time from the last
   window reduction,and K is the time period that the above function
   takes to increase W to W_max when there is no further loss event and
   is calculated by using the following equation:

</t><t>
    K = cubic_root(W_max*beta/C) 		             (Eq. 2)
</t><t>
where beta is the multiplication decrease factor. We discuss how we set C in the next Section in more details.
</t><t>

   Upon receiving an ACK during congestion avoidance, CUBIC computes the
   window growth rate during the next RTT period using Eq. 1.  It
   sets W(t+RTT) as the candidate target value of congestion window. Suppose
   that the current window size is cwnd.  
   Depending on the value of cwnd, CUBIC
   runs in three different modes.  First, if cwnd is less than the window
   size that Standard TCP would reach at time t after the last loss
   event, then CUBIC is in the TCP friendly region (we describe below
   how to determine this window size of Standard TCP in term of time t).
   Otherwise, if cwnd is less than W_max, then CUBIC is the concave
   region, and if cwnd is larger than W_max, CUBIC is in the convex
   region.  Below, we describe the exact actions taken by CUBIC in each
   region.



</t>
        </section>

        <section title="TCP-friendly region">
<t>

   When receiving an ACK in congestion avoidance, we first check whether 
   the protocol is in the TCP region or not. This is done as follows. We 
   can analyze the window size of Standard TCP in terms of the elapsed
   time t. Using a simple
   analysis in <xref target="FHP00" />, we can analyze the average window size of
   additive increase and multiplicative decrease (AIMD) with an 
   additive factor alpha and a multiplicative
   factor beta to be the following function:

</t><t>
     (alpha/2 * (2-beta)/beta * 1/p)^0.5     (Eq. 3)
</t><t>

   By the same analysis, the average window size of Standard TCP with alpha 1 and beta 0.5 is
   (3/2 *1/p)^0.5.  Thus, for Eq. 3 to be the same as that of
   Standard TCP, alpha must be equal to 3*beta/(2-beta).  As Standard TCP increases its window by alpha per
   RTT, we can get the window size of Standard TCP in terms of the
   elapsed time t as follows:

</t><t>
   W_tcp(t) = W_max*(1-beta) + 3*beta/(2-beta)* t/RTT  (Eq. 4)

</t><t>

   If cwnd is less than W_tcp(t), then the protocol is in the TCP
   friendly region and cwnd SHOULD be set to W_tcp(t) at each reception of
   ACK.

</t>
        </section>


        <section title="Concave region">
<t>
   When receiving an ACK in congestion avoidance, if the protocol is not
   in the TCP-friendly region and cwnd is less than W_max, then the protocol is in
   the concave region. In this region, cwnd MUST be incremented by (W(t+RTT) - cwnd)/cwnd. 

</t>
        </section>

        <section title="Convex region">
<t>

   When the window size of CUBIC is larger than W_max, it 
   passes the plateau of the cubic function after which CUBIC follows
   the convex profile of the cubic function. Since cwnd is larger than
   the previous saturation point W_max, this indicates that the
   network conditions might have been perturbed since the last loss
   event, possibly implying more available bandwidth after some flow
   departures.  Since the Internet is highly asynchronous, some amount
   of perturbation is always possible without causing a major change in
   available bandwidth.  In this phase, CUBIC is being very careful
   by very slowly increasing its window size.  The convex profile 
   ensures that the window increases very slowly at the beginning and 
   gradually increases its growth rate. We also call this
   phase as the maximum probing phase since CUBIC is
   searching for a new W_max. In this region, cwnd MUST be incremented by (W(t+RTT) - cwnd)/cwnd for each received ACK. 

</t>

        </section>


        <section title="Multiplicative decrease">
<t> 

   When a packet loss occurs, CUBIC reduces its window size by a factor
   of beta.  Parameter beta SHOULD be set to 0.2.

<figure anchor='reduction' >
        <artwork>
      W_max = cwnd;    // remember the window size before reduction
      cwnd = cwnd * (1-beta);    // window reduction 
        </artwork>
    </figure>

   A side effect of setting beta to a smaller value than 0.5 is slower
   convergence.  We believe that while a more adaptive setting of beta
   could result in faster convergence, it will make the analysis of the
   protocol much harder.  This adaptive adjustment of beta is an item
   for the next version of CUBIC.

</t>
        </section>
        <section title="Fast convergence">
<t>

   To improve the convergence speed of CUBIC, we add a heuristic
   in the protocol.  When a new flow joins the network, existing
   flows in the network need to give up their bandwidth shares to allow
   the flow soem room for growth if the existing
   flows have been using all the bandwidth of the network.  To increase this
   release of bandwidth by existing flows, the following
   mechanism called fast convergence SHOULD be implemented.


</t><t>

   With fast convergence, when a loss event occurs, before a window
   reduction of congestion window, a flow remembers the last value of
   W_max before it updates W_max for the current loss event.  Let us
   call the last value of W_max to be W_last_max.


<figure anchor='fast_convergence' >
        <artwork>
        if (W_max < W_last_max){           // check downward trend,
            W_last_max = W_max;            // remember the last W_max.
            W_max = W_max*(2-beta)/2;      // further reduce W_max.
        } else                             // check upward trend.
            W_last_max = W_max             // remember the last W_max.
        </artwork>
    </figure>
   This allows W_max to be slightly less than the original W_max.  Since
   flows spend most of time around their W_max, flows with larger
   bandwidth shares tend to spend more time around the plateau allowing
   more time for flows with smaller shares to increase their windows.


</t>
        </section>


    </section>

        <section title="Discussion">
<t>

   With a deterministic loss model where the number of packets between
   two successive lost events is always 1/p, CUBIC always operates with
   the concave window profile which greatly simplifies the performance
   analysis of CUBIC.  The average window size of CUBIC can be obtained
   by the following function:

</t><t>
          (C*(4-beta)/4/beta)^0.25 * RTT^0.75 / p^0.75 	(Eq. 5)
</t><t>
   With beta
   set to 0.2, the above formula is reduced to:
</t><t>
         	 (C*3.8/0.8)^0.25 * RTT^0.75 / p^0.75	(Eq. 6)
</t><t>
    We will determine the value of C in the following subsection using Eq. 6. 
</t>
        <section title="Fairness to standard TCP">
<t> 

   In environments where standard TCP is able to make reasonable use of
   the available bandwidth, CUBIC does not significantly change this
   state.

</t>

<t>
   Standard TCP performs well in the following two types of networks:
<list style='hanging'>
        <t>1. networks with a small bandwidth-delay product (BDP).</t>
        <t>2. networks with a short RTT, but not necessarily a small BDP
        </t>
    </list>
</t>

<t>

   CUBIC is designed to behave very similarly to standard TCP in the
   above two types of networks.  The following two tables show the
   average window size of standard TCP, HSTCP, and CUBIC.  The average
   window size of standard TCP and HSTCP is from <xref target="RFC3649" />.  The average
   window size of CUBIC is calculated by using Eq. 6 and CUBIC TCP
   friendly mode for three different values of C.

</t>

<texttable anchor='table1'>
       <ttcol align='right'>Loss Rate P</ttcol>
        <ttcol align='right'>TCP</ttcol>
        <ttcol align='right'>HSTCP</ttcol>
        <ttcol align='right'>CUBIC (C=0.04)</ttcol>
        <ttcol align='right'>CUBIC (C=0.4)</ttcol>
        <ttcol align='right'>CUBIC (C=4)</ttcol>
        <c>10^-2</c><c>12</c><c>12</c><c>12</c><c>12</c><c>12</c>
        <c>10^-3</c><c>38</c><c>38</c><c>38</c><c>38</c><c>66</c>
        <c>10^-4</c><c>120</c><c>263</c><c>120</c><c>209</c><c>371</c>
        <c>10^-5</c><c>379</c><c>1795</c><c>660</c><c>1174</c><c>2087</c>
        <c>10^-6</c><c>1200</c><c>12279</c><c>3713</c><c>6602</c><c>11740</c>
        <c>10^-7</c><c>3795</c><c>83981</c><c>20878</c><c>37126</c><c>66022</c>
        <c>10^-8</c><c>12000</c><c>574356</c><c>117405</c><c>208780</c><c>371269</c>
        <postamble>Response function of standard TCP, HSTCP, and CUBIC in networks with RTT = 100ms. The average window size W is in MSS-sized segments.</postamble>
    </texttable>

<texttable anchor='table2'>
       <ttcol align='right'>Loss Rate P</ttcol>
        <ttcol align='right'>Average TCP W</ttcol>
        <ttcol align='right'>Average HSTCP W</ttcol>
        <ttcol align='right'>CUBIC (C=0.04)</ttcol>
        <ttcol align='right'>CUBIC (C=0.4)</ttcol>
        <ttcol align='right'>CUBIC (C=4)</ttcol>
        <c>10^-2</c><c>12</c><c>12</c><c>12</c><c>12</c><c>12</c>
        <c>10^-3</c><c>38</c><c>38</c><c>38</c><c>38</c><c>38</c>
        <c>10^-4</c><c>120</c><c>263</c><c>120</c><c>120</c><c>120</c>
        <c>10^-5</c><c>379</c><c>1795</c><c>379</c><c>379</c><c>379</c>
        <c>10^-6</c><c>1200</c><c>12279</c><c>1200</c><c>1200</c><c>2087</c>
        <c>10^-7</c><c>3795</c><c>83981</c><c>3795</c><c>6603</c><c>11740</c>
        <c>10^-8</c><c>12000</c><c>574356</c><c>20878</c><c>37126</c><c>66022</c>
        <postamble>Response function of standard TCP, HSTCP, and CUBIC in networks with RTT = 10ms. The average window size W is in MSS-sized segments.</postamble>
    </texttable>

<t>

   Both tables show that CUBIC with any of these three C values is more friendly to TCP than HSTCP,
   especially in networks with a short RTT where TCP performs reasonably
   well.  For example, in a network with RTT = 10ms and p=10^-6, TCP has
   an average window of 1200 packets.  If the packet size is 1500 bytes,
   then TCP can achieve an average rate of 1.44 Gbps.  In this case,
   CUBIC with C=0.04 or C=0.4 achieves exactly the same rate as Standard TCP, whereas HSTCP
   is about ten times more aggressive than Standard TCP.

</t><t>
   We can see that C determines the aggressiveness of CUBIC in competing with other protocols for the bandwidth. 
   CUBIC is more friendly to the Standard TCP, if the value of C is lower. However, we do not recommend to set C to a very low value like 0.04, 
   since CUBIC with a low C cannot efficiently use the bandwidth in long RTT and high bandwidth networks. 
   Based on these observations, we find C=0.4 gives a good balance between TCP-friendliness and aggressiveness of 
   window growth. Therefore, C SHOULD be set to 0.4.   
   With C
   set to 0.4, Eq. 6 is reduced to:
</t><t>
         	 1.17 * RTT^0.75 / p^0.75	(Eq. 7)
</t><t>
   Eq. 7 is then used in the next subsection to show the scalability of CUBIC. 

</t>



        </section>
        <section title="Using Spare Capacity">
<t> 

   CUBIC uses a more aggressive window growth function than Standard
   TCP under long RTT and high bandwidth networks.
</t><t>
   The following table shows that to achieve 10Gbps rate, standard TCP
   requires a packet loss rate of 2.0e-10, while CUBIC requires a packet
   loss rate of 3.4e-8.
</t>

<texttable anchor='table3'>
       <ttcol align='right'>Throughput(Mbps)</ttcol>
        <ttcol align='right'>Average W</ttcol>
        <ttcol align='left'>TCP P</ttcol>
        <ttcol align='left'>HSTCP P</ttcol>
        <ttcol align='left'>CUBIC P</ttcol>
        <c>1</c><c>8.3</c><c>2.0e-2</c><c>2.0e-2</c><c>2.0e-2</c>
        <c>10</c><c>83.3</c><c>2.0e-4</c><c>3.9e-4</c><c>3.3e-4</c>
        <c>100</c><c>833.3</c><c>2.0e-6</c><c>2.5e-5</c><c>1.6e-5</c>
        <c>1000</c><c>8333.3</c><c>2.0e-8</c><c>1.5e-6</c><c>7.3e-7</c>
        <c>10000</c><c>83333.3</c><c>2.0e-10</c><c>1.0e-7</c><c>3.4e-8</c>
        <postamble>Required packet loss rate for Standard TCP, HSTCP, and CUBIC to achieve a certain throughput. We use 1500-Byte Packets and a Round-Trip Time of 0.1 Seconds.</postamble>
    </texttable>


<t>
   Our test results in <xref target="H+06" /> indicate that CUBIC uses the spare
   bandwidth left unused by existing Standard TCP flows in the same
   bottleneck link without taking away much bandwidth from the existing
   flows.
</t>
        </section>
        <section title="Difficult Environments">
<t>  
   CUBIC is designed to remedy the poor performance of TCP in fast long-
   distance networks.  It is not designed for wireless networks.
</t>
        </section>
        <section title="Investigating a Range of Environments">
<t> 
   CUBIC has been extensively studied by using both NS-2 simulation and
   test-bed experiments covering a wide range of network environments.
   More information can be found in <xref target="H+06" />.

</t>
        </section>
        <section title="Protection against Congestion Collapse">
<t> 

   In case that there is congestion collapse, CUBIC behaves likely
   standard TCP since CUBIC modifies only the window adjustment
   algorithm of TCP.  Thus, it does not modify the ACK clocking and
   Timeout behaviors of Standard TCP.


</t>
        </section>
        <section title="Fairness within the Alternative Congestion Control Algorithm.">
<t>
   CUBIC ensures convergence of competing CUBIC flows with the same RTT in the same 
   bottleneck links to an equal bandwidth share. When competing flows
   have different RTTs, their bandwidth shares are linearly proportional
   to the invese of their RTT ratios. This is true independent of 
   the level of stastistical multiplexing in the link.
</t>
        </section>
        <section title="Performance with Misbehaving Nodes and Outside Attackers">
<t>   This is not considered in the current CUBIC.
</t>
        </section>
        <section title="Responses to Sudden or Transient Events">
<t>   In case that there is a sudden congestion, a routing change, or a mobility event, CUBIC behaves the same as Standard TCP.    </t>
        </section>
        <section title="Incremental Deployment">
<t>   CUBIC requires only the change of TCP senders, and does not require any assistant of routers.  
</t>
        </section>
        </section>



        <section title="Security Considerations">
<t>   This proposal makes no changes to the underlying security of TCP.
 </t>       </section>

        <section title="IANA Considerations">
<t>   There are no IANA considerations regarding this document.
 </t>       </section>


    </middle>

    <back>
        <references title='Normative References'>

<reference anchor="RFC2018">
	<front>
<title abbrev="TCP Selective Acknowledgement Options">TCP Selective Acknowledgment Options</title>
	<author initials="M." surname="Mathis" fullname="Matt Mathis">
<organization>Pittsburgh Supercomputing Center</organization>
</author>
	<author initials="J." surname="Mahdavi" fullname="Jamshid Mahdavi">
<organization>Pittsburgh Supercomputing Center</organization>
</author>
	<author initials="S." surname="Floyd" fullname="Sally Floyd">
<organization>Lawrence Berkeley National Laboratory</organization>
</author>
	<author initials="A." surname="Romanow" fullname="Allyn Romanow">
<organization>Sun Microsystems, Inc.</organization>
</author>
<date year="1996" month="October"/>
</front>
<seriesInfo name="RFC" value="2018"/>
<format type="TXT" octets="25671" target="ftp://ftp.isi.edu/in-notes/rfc2018.txt"/>
</reference>


<reference anchor="RFC2119">
<front>
<title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement Levels</title> 
<author initials="S." surname="Bradner" fullname="Scott Bradner">
<organization>Harvard University</organization> 
<address>
<postal>
<street>1350 Mass. Ave.</street> 
<street>Cambridge</street> 
<street>MA 02138</street> 
</postal>
<phone>- +1 617 495 3864</phone> 
<email>sob@harvard.edu</email> 
</address>
</author>
<date year="1997" month="March" /> 
</front>
 <seriesInfo name="RFC" value="2119" /> 
<format type="TXT" octets="4723" target="ftp://ftp.isi.edu/in-notes/rfc2119.txt" /> 
<format type="HTML" octets="17491" target="http://xml.resource.org/public/rfc/html/rfc2119.html" /> 
<format type="XML" octets="5777" target="http://xml.resource.org/public/rfc/xml/rfc2119.xml" /> 
</reference>


<reference anchor="RFC2581">
	<front>
<title>TCP Congestion Control</title>
	<author initials="M." surname="Allman" fullname="Mark Allman">
<organization>NASA Glenn Research Center/Sterling Software</organization>
</author>
	<author initials="V." surname="Paxson" fullname="Vern Paxson">
<organization>ACIRI / ICSI</organization>
</author>
	<author initials="W." surname="Stevens" fullname="W. Richard Stevens">
<organization/>
</author>
<date year="1999" month="April"/>
</front>
<seriesInfo name="RFC" value="2581"/>
<format type="TXT" octets="31351" target="ftp://ftp.isi.edu/in-notes/rfc2581.txt"/>
</reference>



<reference anchor="RFC4960">
	<front>
<title>Stream Control Transmission Protocol</title>
	<author initials="R." surname="Stewart" fullname="R. Stewart">
<organization/>
</author>
<date year="2007" month="September"/>
</front>
<seriesInfo name="RFC" value="4960"/>
</reference>


<reference anchor="RFC3448">
	<front>
	<title>
TCP Friendly Rate Control (TFRC): Protocol Specification
</title>
	<author initials="M." surname="Handley" fullname="M. Handley">
<organization/>
</author>
	<author initials="S." surname="Floyd" fullname="S. Floyd">
<organization/>
</author>
	<author initials="J." surname="Padhye" fullname="J. Padhye">
<organization/>
</author>
	<author initials="J." surname="Widmer" fullname="J. Widmer">
<organization/>
</author>
<date year="2003" month="January"/>
</front>
<seriesInfo name="RFC" value="3448"/>
<format type="TXT" octets="52657" target="ftp://ftp.isi.edu/in-notes/rfc3448.txt"/>
</reference>

<reference anchor="RFC3649">
	<front>
<title>HighSpeed TCP for Large Congestion Windows</title>
	<author initials="S." surname="Floyd" fullname="S. Floyd">
<organization/>
</author>
<date year="2003" month="December"/>
</front>
<seriesInfo name="RFC" value="3649"/>
</reference>

<reference anchor="RFC3782">
	<front>
	<title>
The NewReno Modification to TCP's Fast Recovery Algorithm
</title>
	<author initials="S." surname="Floyd" fullname="S. Floyd">
<organization/>
</author>
	<author initials="T." surname="Henderson" fullname="T. Henderson">
<organization/>
</author>
	<author initials="A." surname="Gurtov" fullname="A. Gurtov">
<organization/>
</author>
<date year="2004" month="April"/>
</front>
<seriesInfo name="RFC" value="3782"/>
<format type="TXT" octets="49603" target="ftp://ftp.isi.edu/in-notes/rfc3782.txt"/>
</reference>

<reference anchor="RFC5033">
	<front>
	<title>Specifying New Congestion Control Algorithms
</title>
	<author initials="S." surname="Floyd" fullname="S. Floyd">
<organization/>
</author>
	<author initials="M." surname="Allman" fullname="M. Allman">
<organization/>
</author>
<date year="2007" month="August"/>
</front>
<seriesInfo name="RFC" value="5033"/>
</reference>

    </references>
        <references title='Informative References'>



<reference anchor='FHP00'><front>
            <title>A Comparison of Equation-Based and AIMD Congestion Control</title>
            <author initials='S.' surname='Floyd' fullname=''><organization abbrev=''></organization></author>
            <author initials='M.' surname='Handley' fullname=''><organization abbrev=''></organization></author>
            <author initials='J.' surname='Padhye' fullname=''><organization abbrev=''></organization></author>
            <date month='May' year='2000' />
        </front>
        <format type="URL" octets="" target="http://www.icir.org/tfrc/"/>
    </reference>

<reference anchor='GV02'><front>
            <title>Extended Analysis of Binary Adjustment Algorithms</title>
            <author initials='S.' surname='Gorinsky' fullname=''><organization abbrev=''></organization></author>
            <author initials='H.' surname='Vin' fullname=''><organization abbrev=''></organization></author>
            <date month='August' year='2002' />
        </front>
        <seriesInfo name="Technical Report" value="TR2002-29"/>
        <seriesInfo name="Department of Computer Sciences" value=""/>
        <seriesInfo name="The University of Texas at Austin" value=""/>
        <format type="HTML" octets="" target="http://www.cs.utexas.edu/users/gorinsky/pubs.html"/>
    </reference>

<reference anchor='K03'><front>
            <title>Scalable TCP: Improving Performance in HighSpeed Wide Area Networks</title>
            <author initials='T.' surname='Kelly' fullname=''><organization abbrev=''></organization></author>
            <date month='April' year='2003' />
        </front>
        <seriesInfo name="ACM SIGCOMM Computer Communication Review" value=""/>
    </reference>


<reference anchor='XHR04'><front>
            <title>Binary Increase Congestion Control for Fast, Long Distance Networks</title>
            <author initials='L.' surname='Xu' fullname=''><organization abbrev=''></organization></author>
            <author initials='K.' surname='Harfoush' fullname=''><organization abbrev=''></organization></author>
            <author initials='I.' surname='Rhee' fullname=''><organization abbrev=''></organization></author>
            <date month='March' year='2004' />
        </front>
        <seriesInfo name="In Proceedings of IEEE INFOCOM" value=""/>
    </reference>


<reference anchor='LS08'><front>
            <title>H-TCP: TCP Congestion Control for High Bandwidth-Delay Product Paths</title>
            <author initials='D.' surname='Leith' fullname=''><organization abbrev=''></organization></author>
            <author initials='R.' surname='Shorten' fullname=''><organization abbrev=''></organization></author>
            <date month='April' year='2008' />
        </front>
        <seriesInfo name="Internet-draft draft-leith-tcp-htcp-06" value=""/>
    </reference>


<reference anchor='H+06'><front>
            <title>A Step toward Realistic Performance Evaluation of High-Speed TCP Variants</title>
            <author initials='S.' surname='Ha' fullname=''><organization abbrev=''></organization></author>
            <author initials='Y.' surname='Kim' fullname=''><organization abbrev=''></organization></author>
            <author initials='L.' surname='Le' fullname=''><organization abbrev=''></organization></author>
            <author initials='I.' surname='Rhee' fullname=''><organization abbrev=''></organization></author>
            <author initials='L.' surname='Xu' fullname=''><organization abbrev=''></organization></author>
            <date month='February' year='2006' />
        </front>
        <seriesInfo name="International Workshop on Protocols for Fast Long-Distance Networks" value=""/>
    </reference>


<reference anchor='H+08'><front>
            <title>CUBIC: A New TCP-Friendly High-Speed TCP Variant</title>
            <author initials='S.' surname='Ha' fullname=''><organization abbrev=''></organization></author>
            <author initials='I.' surname='Rhee' fullname=''><organization abbrev=''></organization></author>
            <author initials='L.' surname='Xu' fullname=''><organization abbrev=''></organization></author>
            <date month='' year='2008' />
        </front>
        <seriesInfo name="ACM SIGOPS Operating System Review" value=""/>
    </reference>


<reference anchor='C+07'><front>
            <title>Stochastic Ordering for Internet Congestion Control and its Applications</title>
            <author initials='H.' surname='Cai' fullname=''><organization abbrev=''></organization></author>
            <author initials='D.' surname='Eun' fullname=''><organization abbrev=''></organization></author>
            <author initials='S.' surname='Ha' fullname=''><organization abbrev=''></organization></author>
            <author initials='I.' surname='Rhee' fullname=''><organization abbrev=''></organization></author>
            <author initials='L.' surname='Xu' fullname=''><organization abbrev=''></organization></author>
            <date month='May' year='2007' />
        </front>
        <seriesInfo name="In Proceedings of IEEE INFOCOM" value=""/>
    </reference>


    </references>
    </back>

</rfc>
