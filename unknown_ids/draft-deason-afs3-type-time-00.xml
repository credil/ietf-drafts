<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc4506 PUBLIC ''
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4506.xml'>
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<?rfc strict="yes" ?>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="info" ipr="trust200902" docName="draft-deason-afs3-type-time-00"
     submissionType="independent">

  <front>
    <title abbrev="AFS-3 Base Time Types">Base Types for Time in AFS-3</title>
    <author surname="Deason" fullname="Andrew Deason" initials="A.P.D.">
      <organization abbrev="Sine Nomine">Sine Nomine Associates</organization>
      <address>
        <postal>
          <street>43596 Blacksmith Square</street>
          <city>Ashburn</city>
          <region>Virginia</region>
          <code>20147-4606</code>
          <country>USA</country>
        </postal>

        <phone>+1 703 723 6673</phone>

        <email>adeason@sinenomine.net</email>
      </address>
    </author>

    <date day="7" month="March" year="2011"/>

    <area>AFS3</area>
    <workgroup>N/A</workgroup>
    <keyword>AFS3</keyword>
    <keyword>AFS-3</keyword>
    <keyword>time</keyword>
    <keyword>AFSAbsTime</keyword>
    <keyword>AFSRelTime</keyword>

    <abstract>
      <t>This document defines two types to be used in future AFS-3 Rx Remote Procedure Calls (RPCs) to represent time. Current AFS-3 RPCs represent time as 32-bit integers representing seconds. This is insufficient in both granularity and range, so new types to represent time are defined in this document to overcome these limitations.</t>
    </abstract>

    <note title="Internet Draft Comments">
      <t>Comments regarding this draft are solicited. Please include the AFS-3
      protocol standardization mailing list (afs3-standardization@openafs.org)
      as a recipient of any comments.</t>
    </note>
  </front>
  <middle>
    <section title="Introduction">
      <t>All extant AFS-3 RPCs represent time as a 32-bit integer, as encoded by XDR in <xref target="RFC4506"/>, which represents a number of seconds. For RPCs that specify an absolute time, this is the number of seconds that have passed since since midnight or 0 hour January 1, 1970 Coordinated Universal Time (UTC), not counting leap seconds. These time structures will be unusable after January 2038, and are already insufficient to represent time with more granularity than one second.</t>
      <t>This limited granularity creates inefficiencies in various parts of the AFS-3 protocol when it must be determined in what order two events have occurred (for example, whether or not a file was changed since the last time a volume has been backed up). When those two events have occurred during the same second, implementations must take a conservative assumption about which event occurred first, often resulting in unnecessary duplication or retransmission of data. In addition, metadata can be lost when files are copied to AFS from other filesystems that store file modification times with finer granularity than one second.</t>
      <t>This document defines a new type, AFSAbsTime, to be used in AFS-3 RPCs in the future. This type aims to solve these problems, as it supports a much wider range of dates at a much finer granularity. Another type, AFSRelTime, is defined to represent times relative to some other event, which provides for greater granularity over the existing representations via 32-bit integers.</t>
      <t>Both of these new types also provide standard type identifiers to be used when specifying relative or absolute time in AFS-3 RPC arguments and structures. Currently, both of these are just specified as "afs_int32" types in the XDR language definitions, which can make it ambiguous whether or not a field is an absolute time, relative time, or something else completely. Using the standard types AFSAbsTime and AFSRelTime will make this unambiguous.</t>
    </section>

    <section title="Data Types">
      <t>This document defines two new data types: AFSAbsTime and AFSRelTime. Both of these are encoded on the wire using the XDR standard described in <xref target="RFC4506"/>, and are described using the XDR language specification therein.</t>
      <section title="AFSAbsTime" anchor="afsabstime">
        <t>The new AFSAbsTime type is represented as an XDR-encoded structure containing a 64-bit unsigned integer as the timestamp, and an unsigned 32-bit integer representing the resolution. It is defined as thus in XDR:</t>
<figure><artwork>
    struct AFSAbsTime {
      unsigned hyper timestamp;
      unsigned int resolution;
    };
</artwork></figure>
        <t>The AFSAbsTime structure represents the amount of time that has passed since midnight or 0 hour January 1, 1601 Coordinated Universal Time (UTC). The value of the timestamp field represents this amount of time in increments of 100 nanoseconds (ns). This precision and starting date is equivalent to the Microsoft Windows FILETIME structure.</t>
        <t>The value of the resolution field represents the resolution of the time source from which the timestamp was obtained. The presence of this field is important when calculating the order in which two events occurred relative to each other. If a timestamp is obtained from a time source that only has 1-second granularity, the event may have occurred anywhere in that second, whereas if it was obtained from a source with 100-ns granularity, it is known that it occurred before an event that occurred 0.5 seconds later.</t>
        <t>The value of the resolution field is the smallest amount of time representable by that time source, in increments of 100 ns. If the value of the timestamp field is X, and the value of the resolution is Y, the AFSAbsTime structure describes an event that occurs at or after time X, but before time X+Y.</t>
        <t>For example, to represent the time 60 seconds after midnight on January 1, 1601, the value of the timestamp field would be 600000000 (600 million). If the time source this was obtained from only has 1-second granularity, the resolution field would have the value 10000000 (10 million). In effect, the AFSAbsTime structure then represents an event that happened at or after 60 seconds after midnight on January 1, 1601, but happened before 61 seconds after midnight on January 1, 1601.</t>
        <t>This structure can represent any time from January 1, 1601 up to the year 30282 with 100-ns granularity.</t>
      </section>
      <section title="AFSRelTime">
        <t>The new AFSRelTime type has nearly the same representation on the wire as AFSAbsTime in <xref target="afsabstime" />:</t>
<figure><artwork>
    struct AFSRelTime {
      hyper timestamp;
      unsigned int resolution;
    };
</artwork></figure>
        <t>The AFSRelTime structure represents the amount of time that has passed since some other event. The event to which this time is relative is unspecified, and can be anything; it must be specified by the RPC or structure that defines a field of the AFSRelTime type.</t>
        <t>The value of the timestamp field represents this amount of time in increments of 100 ns. Values greater than 0 represent dates that occur after the relative event, and values less than 0 represent dates that occur before the relative event.</t>
        <t>The meaning and value of the resolution field is the same as that of the resolution field in AFSAbsTime specified in <xref target="afsabstime"/>.</t>
        <t>For example, to represent the time 5 seconds before some other event, the value of the timestamp field would be -50000000 (negative 50 million). If the time source has 1-second granularity, the resolution field would have the value 10000000 (10 million). In effect, the AFSRelTime structure then represents an event that happens at or after 5 seconds before some other event X, but before 4 seconds before the event X.</t>
      </section>
    </section>

    <section title="Security Considerations">
      <t>This memo raises no security issues.</t>
    </section>

    <section title="IANA Considerations">
      <t>This document makes no request of the IANA.</t>
    </section>

    <section title="Acknowledgements">
      <t>The author thanks Simon Wilkinson And Jeffrey Altman for some background text and for bringing up the question of varying time resolution, and Tom Keiser and David Boyes for input on the problem of time resolution.</t>
    </section>
  </middle>

  <back>
    <references title="Informative References">
      &rfc4506;
    </references>
  </back>
</rfc>
