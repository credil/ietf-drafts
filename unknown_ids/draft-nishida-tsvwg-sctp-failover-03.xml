<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSPY v5 rel. 3 U (http://www.xmlspy.com)
     by Daniel M Kohn (private) -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
    <!ENTITY rfc2119 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
    <!ENTITY rfc4690 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4960.xml'>
]>

<rfc category="std" ipr="trust200902" docName="draft-nishida-tsvwg-sctp-failover-03">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>

    <front>
        <title abbrev="SCTP Quick Failover">
               Quick Failover Algorithm in SCTP
	</title>

    <author initials='Y.N' surname="Nishida" fullname='Yoshifumi Nishida'> 
		<organization> WIDE Project </organization>
		<address><postal> <street>Endo 5322</street>
	 	<city>Fujisawa</city> <region>Kanagawa </region><code>252-8520</code>
		<country>Japan</country>
	    </postal>
	  	<email>nishida@wide.ad.jp</email>
	  	</address>
    </author>
	<author initials='P' surname="Natarajan" fullname='Preethi Natarajan'>
		<organization> Cisco Systems </organization>
		<address><postal> <street>510 McCarthy Blvd</street>
	 	<city>Milpitas</city> <region>CA </region><code>95035 </code>
		<country>USA</country>
	    </postal>
	  	<email>prenatar@cisco.com</email>
	  	</address>
    </author> 

<date/>
<abstract>
	<t>
   One of the major advantages in SCTP is supporting multi-homing communication. 
   If a multi-homed end-point has redundant network connections, SCTP sessions can 
   have a good chance to survive from network failures by migrating inactive 
   network to active one. 
   However, if we follow the SCTP standard, there can be significant delay for the
   network migration. During this migration period, SCTP cannot transmit much data to the 
   destination. This issue drastically impairs the usability of SCTP in some situations. 
   This memo describes the issue of SCTP failover mechanism and discuss its solutions 
   which require minimal modification to the current standard.
     </t>
</abstract>
    </front>

    <middle>
<section title="Introduction">
          <t>
    The Stream Control Transmission Protocol (SCTP) <xref target="RFC4960"/>
    natively supports multihoming at the transport layer --  
    an SCTP association can bind 
    to multiple IP addresses at each endpoint. SCTP's multihoming features include 
    failure detection and failover procedures to provide network interface redundancy 
    and improved end-to-end fault tolerance.
   </t>
   
    <t> In SCTP's current failure detection procedure, the sender must 
    experience Path.Max.Retrans (PMR) number of consecutive
   timeouts on a destination before detecting path failure. The sender fails over
   to an alternate active destination only after failure detection.
   Until failover, the sender 
   transmits data on the failed path, degrading SCTP performance.
   Concurrent Multipath Transfer (CMT) <xref target="IYENGAR06" /> is an extension to SCTP 
   and allows the sender to transmit data on multiple paths simultaneously. Research 
   <xref target="NATARAJAN09" /> shows that the current failure detection procedure
   worsens CMT performance during failover and 
   can be significantly improved by employing a better failover algorithm. </t>
   <t> This document proposes an alternative failure detection procedure for SCTP (and CMT)
   that improves SCTP (CMT) performance during failover.
   </t>
</section>

<section title="Conventions and Terminology">
      <t>
	  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
	  "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
	  document are to be interpreted as described in <xref target="RFC2119"/>.
	  </t>

</section>

<section title="Issue in SCTP Path Management Process">
          <t>
   SCTP can utilize multiple IP addresses for a single SCTP association.
   Each SCTP endpoint exchanges the list of available addresses on the node during initial 
   negotiation. After this, endpoints select one address from the list and define this 
   as the primary destination. During normal transmission, SCTP sends all data to the primary destination. 
   Also, it sends heartbeat packets to other 
   (non-primary) destinations at a certain interval to check the reachability of the path. 
  </t><t>
   If sender has multiple active destination addresses, it can retransmit data to 
   secondary destination address when the transmission to the primary times out.
  </t><t>
   When sender receives the acknowledgment for data or heartbeat packets from one of the
   destination addresses, it considers the destination is active. If it fails to receive
   acknowledgments, the error count for the address is increased. 
   If the error counter exceeds the protocol parameter 'Path.Max.Retrans', SCTP endpoint 
   considers the address is inactive.
  </t><t>
   The failover process of SCTP is initiated when the primary path becomes inactive 
   (error counter for the primacy path exceeds Path.Max.Retrans). If the primary path is 
   marked inactive, SCTP chooses new destination address from one of the active destinations 
   and start using this address to send data.
   If the primary path becomes active again, SCTP uses the primary destination for subsequent 
   data transmissions and stop using non-primary one.
  </t><t>

   An issue in this failover process is that it usually takes significant amount of time
   before SCTP switches to the new destination. Let's say the primary path on a multi-homed
   host becomes unavailable and the RTO value for the primary path at that time is around 1 
   second, it usually takes over 60 seconds before SCTP starts to use the secondary path.
   This is because the recommended value for Path.Max.Retrans in the standard is 5, 
   which requires 6 consecutive timeouts before failover takes place.
   Before SCTP switches to the secondary address, SCTP keeps trying to send packets to 
   the primary and only retransmitted packets are sent to the secondary can be reached 
   at the receiver.
   This slow failover process can cause significant performance degradation and 
   will not be acceptable in some situations.
   </t>
</section>

<section title="Solutions for Smooth Failover">
   <t>
   The following approach are conceivable for the solutions of this issue.
   </t>
<section title="Reduce Path.Max.Retrans">
   <t>
   If we choose smaller value for Path.Max.Retrans, we can shorten the duration of failover 
   process. In fact, this is recommended in some research results
   	<xref target="JUNGMAIER02"/>
   	<xref target="GRINNEMO04"/>
   	<xref target="FALLON08"/>.
   For example, if we set Path.Max.Retrans to 0, SCTP switches to another destination on a 
   single timeout. However, smaller value for Path.Max.Retrans might cause spurious failover. 
   In addition, if we use smaller value for Path.Max.Retrans, we may also need to choose 
   smaller value for 'Association.Max.Retrans'. The Association.Max.Retrans indicates the
   threshold for the total number of consecutive error count for the entire SCTP association. 
   If the total of the error count for all paths exceeds this value, the endpoint considers 
   the peer endpoint unreachable and terminates the association. 
   According to the Section 8.2 in <xref target="RFC4960"/>, we should avoid having the value of 
   Association.Max.Retrans larger than the summation of the Path.Max.Retrans of 
   all the destination addresses. Otherwise, even if all the destination addresses become 
   inactive, the endpoint still considers the peer endpoint reachable. 
   The behavior in this situation is not defined in the RFC and depends on each implementation.
   In order to avoid inconsistent behavior between implementations, we had better use smaller 
   value for Association.Max.Retrans. 
   However, if we choose smaller value for Association.Max.Retrans, associations will prone 
   to be terminated with minor congestion.

  </t><t>
   Another issue is that the interval of heartbeat packet: 'HB.interval' may not be small.
   (recommended value is 30 seconds)  This means once failover takes place, an endpoint 
   might need a certain amount of time to use the primary path again. This can cause 
   undesirable effects in case of spurious failover. If we choose smaller value for HB.interval,
   the traffic used for path probing in a session will be increased.

  </t><t>
   The advantage of tuning Path.Max.Retrans is that it requires no modification to the current 
   standard, although it needs to ignore several recommendations. 
   In addition, some research results indicate path bouncing caused by spurious failover 
   does not cause serious problems. We discuss the effect of path bouncing 
   in the section 5. 
    </t>
   </section>
<section title="Adjust RTO related parameters">
   <t>
   As several research results indicate, we can also shorten the duration of failover process  
   by adjusting RTO related parameters 	
        <xref target="JUNGMAIER02"/>
   	<xref target="FALLON08"/>.
   During failover process. RTO keeps being doubled. However, if we can choose smaller value for RTO.max, 
   we can stop the exponential growth of RTO at some point.  Also, choosing smaller values for RTO.initial 
   or RTO.min can contribute to keep RTO value small.
  </t><t>
   Similar to reducing Path.Max.Retrans, the advantage of this approach is that it requires no modification 
   to the current standard, although it needs to ignore several recommendations. 
   However, this approach requires to have enough knowledge about the network characteristics between end points.
   Otherwise, it can introduce adverse side-effects such as spurious timeouts.
   </t>
</section>

 <section title="Introducing Potentially-failed Destination State in Failure Detection Algorithm">
   <t>
   Our proposal stems from the following two observations about SCTP's failure detection procedure:

   <list style="symbols">
    <t>
    In order to minimize performance impact during failover, the sender should avoid transmitting data to the failed destination as early as possible. In the current SCTP path management scheme, the sender stops transmitting data to a destination only after the destination is marked Failed. Thus, a smaller PMR value is ideal so that the sender transitions a destination to the Failed state quicker. 
    </t>
    <t>
    Smaller PMR values increase the chances of spurious failure detection where the sender incorrectly marks a destination as Failed during periods of temporary congestion. Larger PMR values are preferable to avoid spurious failure detection.
    </t>
   </list>

    </t>
    <t>
   From the above observations it is clear that tweaking the PMR value involves the following tradeoff -- a lower value improves performance but increases the chances of spurious failure detection, whereas a higher value degrades performance and reduces spurious failure detection in a wide range of path conditions. Thus, tweaking the association's PMR value is an incomplete solution to address performance impact during failure. 
    </t>
    
    <t> We propose a new "Potentially-failed" (PF) destination state
   in SCTP's path management procedure. The PF state was originally proposed to improve CMT performance <xref target="NATARAJAN09" />. The PF state is an intermediate state between Active and Failed states. SCTP's failure detection procedure is modified to include the PF state. The new failure detection algorithm assumes that loss detected by a timeout implies either 
   severe congestion or failure en-route. After a single timeout on a path, 
   a sender is unsure, and marks the corresponding destination 
   as PF. A PF destination is not used for data transmission except in special cases (discussed below). The new failure detection algorithm requires only sender-side changes. Details are:

<list style="symbols">
   <t> 
    The sender maintains
   a new tunable parameter called Potentially-failed.Max.Retrans (PFMR). 
   An association's PFMR value MUST be lower than the association's PMR value. The recommended 
   value of PFMR = 0.  
   </t>
   <t>
   Each time the T3-rtx timer expires on an active or idle destination,
   the error counter of that destination address will be incremented.
   When the value in the error counter exceeds PFMR, the endpoint should
   mark the destination transport address as PF. SCTP MUST NOT send any
   notification to the upper layer about the active to PF state transition.
   </t>
   <t>The sender never transmits data to a PF destination. However, when all 
   destinations are in either PF or Inactive state, 
   the sender SHOULD transition a destination marked PF to the active state 
   and transmit data to this destination.  The destination's error counter
   MUST NOT be cleared during this state transition. It is recommended that the sender transitions the PF destination with least error count
   (fewest consecutive timeouts) to the active state. 
   In case of a tie (multiple PF destinations with same error count),
   the sender MAY choose the last active destination. 
   </t>
    <t>
  Only heartbeats MUST be sent to PF destination(s) once per RTO.
This means the sender SHOULD ignore
      HB.interval for PF destinations. If an heartbeat is unanswered, the sender
increments the error counter			
      and exponentially backs off the RTO value.  If error counter is
less than PMR, the sender SHOULD transmit
      another heartbeat immediately after T3-timer expiration. 
      An implementation MAY use protocol parameter 'PFHB.interval' for
the interval of heartbeat transmissions.
      If PFHB.interval is non-zero, a heartbeat packet is sent once
per RTO of each destination address plus PFHB.interval with
      jittering of +/- 50% of the RTO value. Use of PFHB.interval can
reduce the frequency of failover, which might be useful where the
characteristic of the paths are mostly equal.
   </t>
   <t>
   When the sender receives an heartbeat ACK from a PF destination, 
   the sender clears the destination's error counter and transitions the PF destination 
   back to active state. This state transition
   MUST NOT be notified to the ULP unless it is explicitly requested. This destination's 
   cwnd is set to 1 MTU (TODO: or 2? Needs more text discussing rationale; can revisit later?) 
   </t>
   <t> 
   An additional (PMR - PFMR) consecutive timeouts on a PF destination 
   confirm the path failure, upon which the destination transitions to the 
   Inactive state. As described in <xref target="RFC4960"/>, the sender (i) SHOULD 
   notify ULP about this state transition, and (ii) transmit heartbeats 
   to the Inactive destination at a lower frequency as
   described in Section 8.3 of <xref target="RFC4960"/>.
   </t>
   <t>
   When all destinations are in the 
   Inactive state, the sender transitions one of the destinations back to the Active
   state and continues data transmission to this destination. This proposal recommends that the 
   sender transitions the Inactive destination with least error count
   (fewest consecutive timeouts) to the active state. 
   In case of a tie (multiple Inactive destinations with same error count),
   the sender MAY choose the last active destination.    
   </t>
   <t>
   ACKs for retransmissions do not transition a PF destination back to the active state, 
   since a sender cannot disambiguate whether the ack was for the original transmission	
   or the retransmission(s).
   </t>
   </list>

   </t>
   </section>
</section>
   

<section title="Discussion">
<section title="Effect of Path Bouncing">
<t>
   The methods described above can accelerate failover process. 
   Hence, it might introduce path bouncing effect which keeps changing the data transmission
   path frequently. This sounds harmful for data transfer, however several research results
   indicate that there is no serious problem with SCTP in terms of path bouncing effect
   <xref target="CARO04" />
   <xref target="CARO05" />.
</t>
<t>
   There are two main reasons for this. First, SCTP is basically designed for multipath 
   communication, which means SCTP maintains all path related parameters (cwnd, ssthresh, 
   RTT, error count, etc) per each destination address. These parameters cannot be affected 
   by path bouncing.  
   In addition, when SCTP migrates to another path, it starts with minimal cwnd because of 
   slow-start. Hence, there is little chance for packet reordering or duplicating.
</t>
<t>
   Second, even if all communication paths between end-nodes share the same bottleneck, 
   the proposed method does not make situations worse. In case of congestion, the current 
   standard tries to transmit data packets to the primary during failover, while the 
   proposed method tries to explore other destinations.
   In any case, the same amount of data packets sent to the same bottleneck. 
</t>
</section>

<section title="Permanent Failover">
<t>
   When primary path becomes active again after failover, SCTP migrates back to the
   primary path. After this, SCTP starts data transfer with minimal cwnd. This is 
   because SCTP must perform slow-start when it migrates to new path. 
   However, this might degrade the communication performance in case that the performance 
   of the alternative path is relatively good. 
   In order to mitigate this effect of slow-start, permanent failover was proposed in 
   <xref target="CARO02"/>.
   Permanent failover allows SCTP to remain the alternative path even if the primacy path
   becomes active again. 
   This approach can improve performance in some cases, however, it will require more
   detail analysis since it might impact on SCTP failover algorithm.
   Since we prefer to keep the current behavior of the standard as possible,
   we recommend not to take this approach for now.
</t>
</section>
</section>

<section title="Security Considerations">
  <t>
   There are no new security considerations introduced in this document.
  </t>
</section>
<section title="IANA Considerations">
	  <t>
   This document does not create any new registries or modify the rules
   for any existing registries managed by IANA.
	  </t>
 </section>
    </middle>

    <back>
      <references title='Normative References'> 
	  <?rfc include="reference.RFC.2119" ?> 
      <?rfc include="reference.RFC.4960" ?>
      </references>

     <references title='Informative References'>
      
     <reference anchor="IYENGAR06" target="">
        <front>
            <title> Concurrent Multipath Transfer using SCTP Multihoming
   over Independent End-to-end Paths.</title>
            <author initials="J." surname="Iyengar" fullname="">
                <organization />
            </author>
            <author initials="P." surname="Amer" fullname="">
                <organization />
            </author>
            <author initials="R." surname="Stewart" fullname="">
                <organization />
            </author>
            <date month="10" year="2006" />
        </front>
        <seriesInfo name="IEEE/ACM Trans on Networking" value="14(5)" />
    </reference>

     <reference anchor="NATARAJAN09" target="">
        <front>
            <title> Concurrent Multipath Transfer during Path Failure
            </title>
            <author initials="P." surname="Natarajan" fullname="">
                <organization />
            </author>
            <author initials="N." surname="Ekiz" fullname="">
                <organization />
            </author>
            <author initials="P." surname="Amer" fullname="">
                <organization />
            </author>
            <author initials="R." surname="Stewart" fullname="">
                <organization />
            </author>
            <date month="5" year="2009" />
        </front>
        <seriesInfo name="Computer Communications" value="" />
    </reference>

    <reference anchor="JUNGMAIER02" target="">
        <front>
            <title> On the use of SCTP in failover scenarios 
            </title>
            <author initials="A." surname="Jungmaier" fullname="">
                <organization />
            </author>
            <author initials="E." surname="Rathgeb" fullname="">
                <organization />
            </author>
            <author initials="M." surname="Tuexen" fullname="">
                <organization />
            </author>
            <date month="7" year="2002" />
        </front>
        <seriesInfo name="World Multiconference on Systemics, Cybernetics and Informatics" value="" />
    </reference>

     <reference anchor="GRINNEMO04" target="">
        <front>
            <title> Performance of SCTP-controlled failovers in M3UA-based SIGTRAN networks
            </title>
            <author initials="K-J" surname="Grinnemo" fullname="">
                <organization />
            </author>
            <author initials="A." surname="Brunstrom" fullname="">
                <organization />
            </author>
            <date month="4" year="2004" />
        </front>
        <seriesInfo name="Advanced Simulation Technologies Conference" value="" />
    </reference>


    <reference anchor="FALLON08" target="">
        <front>
            <title>  SCTP Switchover Performance Issues in WLAN Environments
            </title>
            <author initials="S." surname="Fallon" fullname="">
                <organization />
            </author>
            <author initials="P." surname="Jacob" fullname="">
                <organization />
            </author>
            <author initials="Y." surname="Qiao" fullname="">
                <organization />
            </author>
            <author initials="L." surname="Murphy" fullname="">
                <organization />
            </author>
            <author initials="E." surname="Fallon" fullname="">
                <organization />
            </author>
            <author initials="A." surname="Hanley" fullname="">
                <organization />
            </author>
            <date month="1" year="2008" />
        </front>
        <seriesInfo name="IEEE CCNC" value="2008" />
    </reference>

     <reference anchor="CARO04" target="">
        <front>
            <title> End-to-End Failover Thresholds for Transport Layer Multihoming
            </title>
            <author initials="A." surname="Caro Jr." fullname="">
                <organization />
            </author>
            <author initials="P." surname="Amer" fullname="">
                <organization />
            </author>
            <author initials="R." surname="Stewart" fullname="">
                <organization />
            </author>
            <date month="11" year="2004" />
        </front>
        <seriesInfo name="MILCOM 2004" value="" />
    </reference>

     <reference anchor="CARO05" target="">
        <front>
            <title> End-to-End Fault Tolerance using Transport Layer Multihoming
            </title>
            <author initials="A." surname="Caro Jr." fullname="">
                <organization />
            </author>
            <date month="1" year="2005" />
        </front>
        <seriesInfo name="Ph.D Thesis, University of Delaware" value="" />
    </reference>

     <reference anchor="CARO02" target="">
        <front>
            <title> A Two-level Threshold Recovery Mechanism for SCTP
            </title>
            <author initials="A." surname="Caro Jr." fullname="">
                <organization />
            </author>
            <author initials="J." surname="Iyengar" fullname="">
                <organization />
            </author>
            <author initials="P." surname="Amer" fullname="">
                <organization />
            </author>
            <author initials="G." surname="Heinz" fullname="">
                <organization />
            </author>
            <author initials="R." surname="Stewart" fullname="">
                <organization />
            </author>
            <date month="7" year="2002" />
        </front>
        <seriesInfo name="Tech report, CIS Dept, University of Delaware" value="" />
    </reference>

</references>
</back>

</rfc>
