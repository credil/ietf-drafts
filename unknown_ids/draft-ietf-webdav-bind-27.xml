<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc-ext parse-xml-in-artwork="yes"?>
<?rfc-ext allow-markup-in-artwork="yes"?>
<?rfc-ext authors-section="end" ?>
<?rfc-ext sec-no-trailing-dots="yes" ?>
<?rfc inline="yes"?>
<?rfc-ext include-references-in-index="yes" ?><rfc xmlns:x="http://purl.org/net/xml2rfc/ext" xmlns:ed="http://greenbytes.de/2002/rfcedit" ipr="pre5378Trust200902" docName="draft-ietf-webdav-bind-27" category="exp" xml:lang="en">
  <x:link rel="up" href="http://greenbytes.de/tech/webdav/#draft-ietf-webdav-bind"/>
  <x:link rel="next" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-latest.html"/>
  <x:link rel="prev" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-26.html"/>
  <x:link rel="Bookmark" title="IETF WEBDAV Working Group" href="http://ftp.ics.uci.edu/pub/ietf/webdav/"/>
  <x:link rel="Alternate" title="(latest)" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-latest.html"/>
  <x:link rel="Alternate" title="draft 27" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-27.html"/>
  <x:link rel="Alternate" title="draft 26" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-26.html"/>
  <x:link rel="Alternate" title="draft 25" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-25.html"/>
  <x:link rel="Alternate" title="draft 24" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-24.html"/>
  <x:link rel="Alternate" title="draft 23" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-23.html"/>
  <x:link rel="Alternate" title="draft 22" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-22.html"/>
  <x:link rel="Alternate" title="draft 21" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-21.html"/>
  <x:link rel="Alternate" title="draft 20" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-20.html"/>
  <x:link rel="Alternate" title="draft 19" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-19.html"/>
  <x:link rel="Alternate" title="draft 18" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-18.html"/>
  <x:link rel="Alternate" title="draft 17" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-17.html"/>
  <x:link rel="Alternate" title="draft 16" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-16.html"/>
  <x:link rel="Alternate" title="draft 15" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-15.html"/>
  <x:link rel="Alternate" title="draft 14" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-14.html"/>
  <x:link rel="Alternate" title="draft 13" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-13.html"/>
  <x:link rel="Alternate" title="draft 12" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-12.html"/>
  <x:link rel="Alternate" title="draft 11" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-11.html"/>
  <x:link rel="Alternate" title="draft 10" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-10.html"/>
  <x:link rel="Alternate" title="draft 09" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-09.html"/>
  <x:link rel="Alternate" title="draft 08" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-08.html"/>
  <x:link rel="Alternate" title="draft 07" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-07.html"/>
  <x:link rel="Alternate" title="draft 06" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-06.html"/>
  <x:link rel="Alternate" title="draft 05" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-05.html"/>
  <x:link rel="Alternate" title="draft 04" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-04.html"/>
  <x:link rel="Alternate" title="draft 03" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-03.html"/>
  <x:link rel="Alternate" title="draft 02" href="http://greenbytes.de/tech/webdav/draft-ietf-webdav-bind-02.html"/>
  <front>
    <title abbrev="Binding Extensions to WebDAV">Binding Extensions to Web Distributed Authoring and Versioning (WebDAV)</title>
    <author initials="G." surname="Clemm" fullname="Geoffrey Clemm">
      <organization>IBM</organization>
      <address>
        <postal>
          <street>20 Maguire Road</street>
          <city>Lexington</city>
          <region>MA</region>
          <code>02421</code>
        </postal>
        <email>geoffrey.clemm@us.ibm.com</email>
      </address>
    </author>
    <author initials="J." surname="Crawford" fullname="Jason Crawford">
      <organization>IBM Research</organization>
      <address>
        <postal>
          <street>P.O. Box 704</street>
          <city>Yorktown Heights</city>
          <region>NY</region>
          <code>10598</code>
        </postal>
        <email>ccjason@us.ibm.com</email>
      </address>
    </author>
  	<author initials="J. F." surname="Reschke" fullname="Julian F. Reschke" role="editor">
  		<organization abbrev="greenbytes">greenbytes GmbH</organization>
      <address>
        <postal>
          <street>Hafenweg 16</street>
          <city>Muenster</city><region>NW</region><code>48155</code>
          <country>Germany</country>
        </postal>
  		  <email>julian.reschke@greenbytes.de</email>	
  		</address>
  	</author>
    <author initials="J." surname="Whitehead" fullname="Jim Whitehead">
      <organization abbrev="U.C. Santa Cruz">UC Santa Cruz, Dept. of Computer Science</organization>
      <address>
        <postal>
          <street>1156 High Street</street>
          <city>Santa Cruz</city>
          <region>CA</region>
          <code>95064</code>
        </postal>
        <email>ejw@cse.ucsc.edu</email>
      </address>
    </author>

    <date month="December" year="2009" day="15"/>
	
    <abstract>
      <t>
        This specification defines bindings, and the BIND method for creating
        multiple bindings to the same resource.  Creating a new binding to a
        resource causes at least one new URI to be mapped to that resource.  Servers
        are required to ensure the integrity of any bindings that they
        allow to be created.
      </t>
    </abstract>

    <note title="Editorial Note (To be removed by RFC Editor before publication)">
      <t>
        Please send comments to the 
        Distributed Authoring and Versioning (WebDAV) working group at <eref target="mailto:w3c-dist-auth@w3.org"/>, which may be joined by sending a message with subject 
        "subscribe" to <eref target="mailto:w3c-dist-auth-request@w3.org"/>.
        Discussions of the WEBDAV working group are archived at 
        <eref target="http://lists.w3.org/Archives/Public/w3c-dist-auth/"/>.
      </t>
      <t>
        <eref target="http://www.webdav.org/bind/draft-ietf-webdav-bind-issues.html"/>
        lists all registered issues since draft 02.         
      </t> 
    </note>
  </front>

	<middle>
  


<section title="Introduction" anchor="introduction">
<t>
  This specification extends the WebDAV Distributed Authoring Protocol (<xref target="RFC4918"/>) to enable
  clients to create new access paths to existing resources.  This capability is
  useful for several reasons:
</t>
<t>
  URIs of WebDAV-compliant resources are hierarchical and correspond to a hierarchy
  of collections in resource space.  The WebDAV Distributed Authoring Protocol
  makes it possible to organize these resources into hierarchies, placing them
  into groupings, known as collections, which are more easily browsed and
  manipulated than a single flat collection.  However, hierarchies require
  categorization decisions that locate resources at a single location in the
  hierarchy, a drawback when a resource has multiple valid categories.  For
  example, in a hierarchy of vehicle descriptions containing collections for
  cars and boats, a description of a combination car/boat vehicle could belong
  in either collection.  Ideally, the description should be accessible from both.
  Allowing clients to create new URIs that access the existing resource lets
  them put that resource into multiple collections.
</t>
<t>
  Hierarchies also make resource sharing more difficult, since resources that
  have utility across many collections are still forced into a single collection.
  For example, the mathematics department at one university might create a
  collection of information on fractals that contains bindings to some local
  resources, but also provides access to some resources at other universities.  For
  many reasons, it may be undesirable to make physical copies of the shared
  resources on the local server: to conserve disk space, to respect copyright 
  constraints, or to make any changes in the shared resources visible
  automatically.  Being able to create new access paths to existing resources in 
  other collections or even on other servers is useful for this sort of case.
</t>
<t>
  The BIND method defined here provides a mechanism for allowing clients to
  create alternative access paths to existing WebDAV resources.  HTTP 
  <xref target="RFC2616"/> and WebDAV <xref target="RFC4918"/>
  methods are able to work because there are mappings between URIs and resources.  A
  method is addressed to a URI, and the server follows the mapping from that
  URI to a resource, applying the method to that resource.  Multiple URIs may be
  mapped to the same resource, but until now there has been no way for clients
  to create additional URIs mapped to existing resources. 
</t>
<t>
  BIND lets clients associate a new URI with an existing WebDAV resource, and
  this URI can then be used to submit requests to the resource.  Since URIs of
  WebDAV resources are hierarchical, and correspond to a hierarchy of
  collections in resource space, the BIND method also has the effect of adding
  the resource to a collection.  As new URIs are associated with the resource,
  it appears in additional collections.
</t>
<t>
  A BIND request does not create a new resource, but simply makes available a
  new URI for submitting requests to an existing resource.  The new URI is
  indistinguishable from any other URI when submitting a request to a resource.  Only 
  one round trip is needed to submit a request to the intended target.
  Servers are required to enforce the integrity of the relationships between
  the new URIs and the resources associated with them.  Consequently, it may be
  very costly for servers to support BIND requests that cross server boundaries.
</t>
<t>
  This specification is organized as follows.  <xref target="terminology"/> defines terminology
  used in the rest of the specification, while <xref target="overview.of.bindings"/> overviews bindings.
  <xref target="properties"/> defines the new properties needed to support multiple bindings to
  the same resource.  <xref target="METHOD_BIND"/> specifies the BIND method, used to create
  multiple bindings to the same resource.  <xref target="METHOD_UNBIND"/> specifies the UNBIND
  method, used to remove a binding to a resource.  <xref target="METHOD_REBIND"/> specifies the
  REBIND method, used to move a binding to another collection.  
</t>

<section title="Terminology" anchor="terminology">
<t>
  The terminology used here follows and extends that in the WebDAV Distributed
  Authoring Protocol specification <xref target="RFC4918"/>.
</t>
<t>
  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
  "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
  interpreted as described in <xref target="RFC2119"/>. 
</t>
<t>
  This document uses XML DTD fragments (<xref target="XML"/>) as a notational convention, using the rules defined in <xref target="RFC4918" x:fmt="of" x:sec="17"/>.
</t>
<t>
  <iref item="URI Mapping" primary="true"/>
  <x:dfn>URI Mapping</x:dfn>
  <list><t>
    A relation between an absolute URI and a resource.  For an absolute URI U
    and the resource it identifies R, the URI mapping can be thought of as
    (U =&gt; R).  Since a resource can represent items that are not network
    retrievable, as well as those that are, it is possible for a resource to
    have zero, one, or many URI mappings.  Mapping a resource to an "http"
    scheme URI makes it possible to submit HTTP protocol requests to the
    resource using the URI.
  </t></list>
</t>
<t>
  <iref item="Path Segment" primary="true"/>
  
<?rfc needLines="4" ?><x:dfn>Path Segment</x:dfn>
  <list><t>
    Informally, the characters found between slashes ("/") in a URI.
    Formally, as defined in <xref target="RFC3986" x:fmt="of" x:sec="3.3"/>.
  </t></list>
</t>
<t>
  <iref item="Binding" primary="true"/>
  <x:dfn>Binding</x:dfn>
  <list><t>
    A relation between a single path segment (in a collection) and a resource.  A
    binding is part of the state of a collection.  If two different
    collections contain a binding between the same path segment and the same
    resource, these are two distinct bindings.  So for a collection C, a path
    segment S, and a resource R, the binding can be thought of as C:(S -&gt; R).
    Bindings create URI mappings, and hence allow requests to be sent to a
    single resource from multiple locations in a URI namespace.  For example,
    given a collection C (accessible through the URI 
    http://www.example.com/CollX), a path segment S (equal to "foo.html"), and 
    a resource R, then creating the binding C: (S -&gt; R) makes it possible to
    use the URI http://www.example.com/CollX/foo.html to access R.
  </t></list>
</t>
<t>
  <iref item="Collection" primary="true"/>
  <x:dfn>Collection</x:dfn>
  <list><t>
    A resource that contains, as part of its state, a set of bindings that 
    identify internal member resources.
  </t></list>
</t>
<t>
  <iref item="Internal Member URI" primary="true"/>
  <x:dfn>Internal Member URI</x:dfn>
  <list><t>
    The URI that identifies an internal member of a collection, and that
    consists of the URI for the collection, followed by a slash character
    ('/'), followed by the path segment of the binding for that internal member.
  </t></list>
</t>
<t>
  <iref item="Binding Integrity" primary="true"/>
  <x:dfn>Binding Integrity</x:dfn>
  <list><t>
    The property of a binding that says that:
    <list style="symbols">
      <t>the binding continues to exist, and</t>
      <t>the identity of the resource identified by that binding does not change,</t>
    </list></t>
    <t>
    unless an explicit request is executed that is defined to delete that
    binding (examples of requests that delete a binding are DELETE, MOVE, and
    - defined later on - UNBIND, and REBIND).
  </t></list>
</t>
</section>

<section title="Method Preconditions and Postconditions" anchor="method.preconditions.and.postconditions">
<t>
  See <xref target="RFC4918" x:fmt="of" x:sec="16"/> for the
  definitions of "precondition" and "postcondition". 
</t>
</section>
</section>



<section title="Overview of Bindings" anchor="overview.of.bindings">
<t>
  Bindings are part of the state of a collection.  They define the internal
  members of the collection, and the names of those internal members.
</t>
<t>
  Bindings are added and removed by a variety of existing HTTP methods.  A
  method that creates a new resource, such as PUT, COPY, and MKCOL, adds a
  binding.  A method that deletes a resource, such as DELETE, removes a
  binding.  A method that moves a resource (e.g. MOVE) both adds a binding
  (in the destination collection) and removes a binding (in the source
  collection).  The BIND method introduced here provides a mechanism for
  adding a second binding to an existing resource.  There is no difference
  between an initial binding added by PUT, COPY, or MKCOL, and additional
  bindings added with BIND.
</t>
<t>
  It would be very undesirable if one binding could be destroyed as a side
  effect of operating on the resource through a different binding.  In
  particular, the removal of one binding to a resource (e.g. with a DELETE or
  a MOVE) <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST NOT</bcp14> disrupt another binding to that resource, e.g. by turning
  that binding into a dangling path segment.  The server <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST NOT</bcp14> reclaim
  system resources after removing one binding, while other bindings to the
  resource remain.  In other words, the server <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> maintain the integrity<iref item="Binding Integrity"/> of
  a binding.  It is permissible, however, for future method definitions (e.g., a 
  DESTROY method) to have semantics that explicitly remove all bindings 
  and/or immediately reclaim system resources.
</t>
<x:note>
  <t>
    <x:h>Note:</x:h> the collection model described herein is not compatible
    with systems in which resources inherit properties based solely on the
    access path, as the ability to create additional bindings will cause a
    single resource to appear as member of several different collections at the
    same time.
  </t>
</x:note>

<section title="Bindings to Collections" anchor="bindings.to.collections">
<t>
  Creating a new binding to a collection makes each resource associated with
  a binding in that collection accessible via a new URI, and thus creates new
  URI mappings to those resources but no new bindings.
</t>
<t>
  For example, suppose a new binding CollY is created for collection C1 in the
  figure below.  It immediately becomes possible to access resource R1 using
  the URI /CollY/x.gif and to access resource R2 using the URI /CollY/y.jpg,
  but no new bindings for these child resources were created.  This is because
  bindings are part of the state of a collection, and associate a URI that
  is relative to that collection with its target resource.  No change to the
  bindings in Collection C1 is needed to make its children accessible using
  /CollY/x.gif and /CollY/y.jpg.
</t>
<figure><artwork align="center" type="drawing">
<x:bt>+-------------------------+</x:bt>
<x:bc>| <spanx style="strong">Root Collection</spanx>         |</x:bc>
<x:bc>|  bindings:              |</x:bc>
<x:bc>|  <spanx>CollX</spanx>          <spanx>CollY</spanx>   |</x:bc>
<x:bb>+-------------------------+</x:bb>
<x:x/>    |            /          
<x:x/>    |           /
<x:x/>    |          /
<x:bt>+------------------+</x:bt>
<x:bc>| <spanx style="strong">Collection C1</spanx>    |</x:bc>
<x:bc>| bindings:        |</x:bc>
<x:bc>| <spanx>x.gif</spanx>     <spanx>y.jpg</spanx>  |</x:bc>
<x:bb>+------------------+</x:bb>
<x:x/>    |          \               
<x:x/>    |           \               
<x:x/>    |            \              
<x:bt>+-------------+</x:bt>   <x:bt>+-------------+</x:bt>
<x:bc>| <spanx style="strong">Resource R1</spanx> |</x:bc>   <x:bc>| <spanx style="strong">Resource R2</spanx> |</x:bc>
<x:bb>+-------------+</x:bb>   <x:bb>+-------------+</x:bb>
</artwork></figure>

<section title="Bind Loops" anchor="bind.loops">
<t>
  Bindings to collections can result in loops ("cycles"), which servers <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> detect when
  processing "Depth: infinity" requests.  It is sometimes possible to complete
  an operation in spite of the presence of a loop.  For instance, a PROPFIND
  can still succeed if the server uses the new status code
  208 (Already Reported) defined in <xref target="status.208.already.reported"/>.
</t>
<t>  
  However, the 506 (Loop Detected) status code is defined in <xref target="status.506.loop.detected"/> for use in contexts where an
  operation is terminated because a loop was encountered.
</t>
<t>
  Support for loops is <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">OPTIONAL</bcp14>: servers <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MAY</bcp14> reject
  requests that would lead to the creation of a bind loop (see DAV:cycle-allowed
  precondition defined in <xref target="METHOD_BIND"/>).
</t>
</section>


</section>

<section title="URI Mappings Created by a new Binding" anchor="uri.mappings.created.by.a.new.binding">
<t>
  Suppose a binding from "Binding-Name" to resource R is to be added to a
  collection, C.  Then if C-MAP is the set of URIs that were mapped to C
  before the BIND request, then for each URI "C-URI" in C-MAP, the URI
  "C-URI/Binding-Name" is mapped to resource R following the BIND request.
</t>
<figure><preamble>
  For example, if a binding from "foo.html" to R is added to a collection C,
  and if the following URIs are mapped to C:
</preamble><artwork type="example">
http://www.example.com/A/1/
http://example.com/A/one/
</artwork></figure>
<figure><preamble>
  then the following new mappings to R are introduced:
</preamble><artwork type="example">
http://www.example.com/A/1/foo.html
http://example.com/A/one/foo.html
</artwork></figure>
<t>
  Note that if R is a collection, additional URI mappings are created to the
  descendents of R.  Also, note that if a binding is made in collection C to C
  itself (or to a parent of C), an infinite number of mappings are introduced.
</t>
<figure><preamble>
  For example, if a binding from "myself" to C is then added to C, the
  following infinite number of additional mappings to C are introduced:
</preamble><artwork type="example">
http://www.example.com/A/1/myself
http://www.example.com/A/1/myself/myself
   ...
</artwork></figure>
<figure><preamble>
  and the following infinite number of additional mappings to R are introduced:
</preamble><artwork type="example">
http://www.example.com/A/1/myself/foo.html
http://www.example.com/A/1/myself/myself/foo.html
   ...
</artwork></figure>
</section> 
 


<section title="COPY and Bindings" anchor="copy.and.bindings">
<t>
  As defined in <xref target="RFC4918" x:fmt="of" x:sec="9.8"/>, COPY causes the resource identified
  by the Request-URI to be duplicated, and makes the new resource accessible 
  using the URI specified in the Destination header.  Upon successful
  completion of a COPY, a new binding is created between the last path
  segment of the Destination header, and the destination resource.  The new
  binding is added to its parent collection, identified by the Destination
  header minus its final segment.
</t>
<figure><preamble>
  The following figure shows an example: Suppose that a COPY is issued to
  URI-3 for resource R (which is also mapped to URI-1 and URI-2), with the
  Destination header set to URI-X.  After successful completion of the COPY
  operation, resource R is duplicated to create resource R', and a new binding
  has been created which creates at least the URI mapping between URI-X and
  the new resource (although other URI mappings may also have been created).
</preamble><artwork align="center" type="drawing">
<x:x/>URI-1   URI-2    URI-3                           URI-X
<x:x/>   |       |        |                              |
<x:x/>   |       |        |   &lt;---- URI Mappings ----&gt;   |
<x:x/>   |       |        |                              |
<x:bt>+---------------------+</x:bt>                 <x:bt>+------------------------+</x:bt>
<x:bc>|     <spanx style="strong">Resource R</spanx>      |</x:bc>                 <x:bc>|     <spanx style="strong">Resource R'</spanx>        |</x:bc>
<x:bb>+---------------------+</x:bb>                 <x:bb>+------------------------+</x:bb>
</artwork></figure>
<t>
  It might be thought that a COPY request with "Depth: 0" on a collection would
  duplicate its bindings, since bindings are part of the collection's state.
  This is not the case, however.  The definition of Depth in <xref target="RFC4918"/> makes it
  clear that a "Depth: 0" request does not apply to a collection's members.
  Consequently, a COPY with "Depth: 0" does not duplicate the bindings
  contained by the collection.
</t>
<t>
  If a COPY request causes an existing resource to be updated, the bindings to
  that resource <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be unaffected by the COPY request.  Using the preceding
  example, suppose that a COPY request is issued to URI-X for resource R', with
  the Destination header set to URI-2.  The content and dead properties of
  resource R would be updated to be a copy of those of resource R', but the
  mappings from URI-1, URI-2, and URI-3 to resource R remain unaffected.
  If because of multiple bindings to a resource, more than one source resource
  updates a single destination resource, the order of the updates is server
  defined (see
  <xref target="example.copy.multiple.update"/> for an example).
</t>
<t>
  If a COPY request would cause a new resource to be created as a copy of an
  existing resource, and that COPY request has already created a copy of that
  existing resource, the COPY request instead creates another binding to the
  previous copy, instead of creating a new resource (see
  <xref target="example.copy.graph"/> for an example).
</t>

<section title="Example: COPY with 'Depth: infinity' in Presence of Bind Loops">
<figure>
<preamble>
As an example of how COPY with Depth infinity would work in the presence of
bindings, consider the following collection:
</preamble>
<artwork align="center" type="drawing">
<x:bt>+------------------+</x:bt>
<x:bc>| <spanx style="strong">Root Collection</spanx>  |</x:bc>
<x:bc>|  bindings:       |</x:bc>
<x:bc>|  <spanx>CollX</spanx>           |</x:bc>
<x:bb>+------------------+</x:bb>
<x:x/>    |
<x:x/>    |
<x:bt>+-------------------------------+</x:bt>
<x:bc>| <spanx style="strong">Collection C1</spanx>                 |</x:bc>&lt;-------+
<x:bc>| bindings:                     |</x:bc>        |
<x:bc>| <spanx>x.gif</spanx>      <spanx>CollY</spanx>              |</x:bc>        |
<x:bb>+-------------------------------+</x:bb>        |
<x:x/>    |            \        (creates loop) |
<x:x/>    |             \                      |
<x:bt>+-------------+</x:bt>   <x:bt>+------------------+</x:bt>   |
<x:bc>| <spanx style="strong">Resource R1</spanx> |</x:bc>   <x:bc>| <spanx style="strong">Collection C2</spanx>    |</x:bc>   |
<x:bb>+-------------+</x:bb>   <x:bc>| bindings:        |</x:bc>   |
                  <x:bc>| <spanx>y.gif</spanx>     <spanx>CollZ</spanx>  |</x:bc>   |
                  <x:bb>+------------------+</x:bb>   |
                      |         |        |
                      |         +--------+
                      |
                  <x:bt>+-------------+</x:bt>
                  <x:bc>| <spanx style="strong">Resource R2</spanx> |</x:bc>
                  <x:bb>+-------------+</x:bb>
</artwork>
</figure>
<figure>
<preamble>
If a COPY with Depth infinity is submitted to /CollX, with destination of
/CollA, the outcome of the copy operation is that
a copy of the tree is replicated to the target /CollA:
</preamble>
<artwork align="center" type="drawing">
<x:bt>+------------------+</x:bt>
<x:bc>| <spanx style="strong">Root Collection</spanx>  |</x:bc>
<x:bc>|  bindings:       |</x:bc>
<x:bc>|  <spanx>CollX</spanx>     <spanx>CollA</spanx> |</x:bc>
<x:bb>+------------------+</x:bb>
   |           |
   |           +---------------------------+
   |                                       |
<x:bt>+-------------------+</x:bt>                      |
<x:bc>| <spanx style="strong">Collection C1</spanx>     |</x:bc>&lt;------------------+  |
<x:bc>| bindings:         |</x:bc>                   |  |
<x:bc>| <spanx>x.gif</spanx>      <spanx>CollY</spanx>  |</x:bc>                   |  |
<x:bb>+-------------------+</x:bb>                   |  |
   |            \        (creates loop) |  |
   |             \                      |  |
<x:bt>+-------------+</x:bt>   <x:bt>+-----------------+</x:bt>   |  |
<x:bc>| <spanx style="strong">Resource R1</spanx> |</x:bc>   <x:bc>| <spanx style="strong">Collection C2</spanx>   |</x:bc>   |  |
<x:bb>+-------------+</x:bb>   <x:bc>| bindings:       |</x:bc>   |  |
                  <x:bc>| <spanx>y.gif</spanx>     <spanx>CollZ</spanx> |</x:bc>   |  |
                  <x:bb>+-----------------+</x:bb>   |  |
                      |         |       |  |
                      |         +-------+  |
                      |                    |
                  <x:bt>+-------------+</x:bt>          |
                  <x:bc>| <spanx style="strong">Resource R2</spanx> |</x:bc>          |
                  <x:bb>+-------------+</x:bb>          |
                                           |
           +-------------------------------+
           |
<x:bt>+-------------------+</x:bt>
<x:bc>| <spanx style="strong">Collection C3</spanx>     |</x:bc>&lt;------------------+
<x:bc>| bindings:         |</x:bc>                   |
<x:bc>| <spanx>x.gif</spanx>      <spanx>CollY</spanx>  |</x:bc>                   |
<x:bb>+-------------------+</x:bb>                   |
   |            \        (creates loop) |
   |             \                      |
<x:bt>+-------------+</x:bt>   <x:bt>+-----------------+</x:bt>   |
<x:bc>| <spanx style="strong">Resource R3</spanx> |</x:bc>   <x:bc>| <spanx style="strong">Collection C4</spanx>   |</x:bc>   |
<x:bb>+-------------+</x:bb>   <x:bc>| bindings:       |</x:bc>   |
                  <x:bc>| <spanx>y.gif</spanx>     <spanx>CollZ</spanx> |</x:bc>   |
                  <x:bb>+-----------------+</x:bb>   |
                      |         |       |
                      |         +-------+
                      |
                  <x:bt>+-------------+</x:bt>
                  <x:bc>| <spanx style="strong">Resource R4</spanx> |</x:bc>
                  <x:bb>+-------------+</x:bb>
</artwork>
</figure>

<t>
  Note that the same would apply for more complex loops.
</t>

</section>


<section title="Example: COPY updating multiple Bindings" anchor="example.copy.multiple.update">
<figure><preamble>
Given the following collection hierarchy:
</preamble><artwork align="center" type="drawing" xml:space="preserve">
                    <x:bt>+------------------+</x:bt>
                    <x:bc>| <spanx style="strong">Root Collection</spanx>  |</x:bc>
                    <x:bc>|  bindings:       |</x:bc>
                    <x:bc>|  <spanx>CollX</spanx>     <spanx>CollY</spanx> |</x:bc>
                    <x:bb>+------------------+</x:bb>
                       /              \
                      /                \
                     /                  \           
  <x:bt>+--------------------------+</x:bt>   <x:bt>+-----------------+</x:bt>
  <x:bc>|      <spanx style="strong">Collection C1</spanx>       |</x:bc>   <x:bc>| <spanx style="strong">Collection C2</spanx>   |</x:bc>
  <x:bc>|      bindings:           |</x:bc>   <x:bc>| bindings:       |</x:bc>
  <x:bc>|     <spanx>x.gif</spanx>     <spanx>y.gif</spanx>      |</x:bc>   <x:bc>| <spanx>x.gif</spanx>     <spanx>y.gif</spanx> |</x:bc>
  <x:bb>+--------------------------+</x:bb>   <x:bb>+-----------------+</x:bb>
          |         |                |         |
          |         |                |         |
<x:bt>+-------------+</x:bt>  <x:bt>+-------------+</x:bt>   <x:bt>+-------------+</x:bt>
<x:bc>| <spanx style="strong">Resource R1</spanx> |</x:bc>  <x:bc>| <spanx style="strong">Resource R2</spanx> |</x:bc>   <x:bc>| <spanx style="strong">Resource R3</spanx> |</x:bc>
<x:bb>+-------------+</x:bb>  <x:bb>+-------------+</x:bb>   <x:bb>+-------------+</x:bb>
</artwork>
<postamble>
  A COPY of /CollX with Depth infinity to /CollY will not result in a changed
  hierarchy, and Resource R3 will be updated with the content of either Resource R1
  or Resource R2.
</postamble>
</figure>
</section>


<section title="Example: COPY with 'Depth: infinity' with Multiple Bindings to a Leaf Resource" anchor="example.copy.graph">
<figure><preamble>
Given the following collection hierarchy:
</preamble><artwork align="center" type="drawing">
<x:bt>+------------------+</x:bt>
<x:bc>| <spanx style="strong">Root Collection</spanx>  |</x:bc>
<x:bc>|  bindings:       |</x:bc>
<x:bc>|  <spanx>CollX</spanx>           |</x:bc>
<x:bb>+------------------+</x:bb>
   |            
   |  
   |               
<x:bt>+----------------+</x:bt> 
<x:bc>| <spanx style="strong">Collection C1</spanx>  |</x:bc>
<x:bc>| bindings:      |</x:bc>
<x:bc>| <spanx>x.gif</spanx>    <spanx>y.gif</spanx> |</x:bc> 
<x:bb>+----------------+</x:bb>
   |         |     
   |         |    
 <x:bt>+-------------+</x:bt>   
 <x:bc>| <spanx style="strong">Resource R1</spanx> |</x:bc>
 <x:bb>+-------------+</x:bb>
</artwork></figure>
<figure><preamble>
A COPY of /CollX with Depth infinity to /CollY results in the following
collection hierarchy:
</preamble><artwork align="center" type="drawing">
<x:bt>+------------------+</x:bt>
<x:bc>| <spanx style="strong">Root Collection</spanx>  |</x:bc>
<x:bc>|  bindings:       |</x:bc>
<x:bc>|  <spanx>CollX</spanx>     <spanx>CollY</spanx> |</x:bc>
<x:bb>+------------------+</x:bb>
   |              \
   |               \
   |                \           
<x:bt>+----------------+</x:bt>  <x:bt>+-----------------+</x:bt>
<x:bc>| <spanx style="strong">Collection C1</spanx>  |</x:bc>  <x:bc>| <spanx style="strong">Collection C2</spanx>   |</x:bc>
<x:bc>| bindings:      |</x:bc>  <x:bc>| bindings:       |</x:bc>
<x:bc>| <spanx>x.gif</spanx>    <spanx>y.gif</spanx> |</x:bc>  <x:bc>| <spanx>x.gif</spanx>     <spanx>y.gif</spanx> |</x:bc>
<x:bb>+----------------+</x:bb>  <x:bb>+-----------------+</x:bb>
   |         |          |         |
   |         |          |         |
 <x:bt>+-------------+</x:bt>      <x:bt>+-------------+</x:bt>
 <x:bc>| <spanx style="strong">Resource R1</spanx> |</x:bc>      <x:bc>| <spanx style="strong">Resource R2</spanx> |</x:bc>
 <x:bb>+-------------+</x:bb>      <x:bb>+-------------+</x:bb>
</artwork></figure>
</section>

</section> 
 
<section title="DELETE and Bindings" anchor="delete.and.bindings">
<t>
  When there are multiple bindings to a resource, a DELETE applied to that
  resource <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST NOT</bcp14> remove any bindings to that resource other than the one
  identified by the Request-URI.  For example, suppose the collection
  identified by the URI "/a" has a binding named "x" to a resource R, and
  another collection identified by "/b" has a binding named "y" to the same
  resource R.  Then a DELETE applied to "/a/x" removes the binding named "x"
  from "/a" but <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST NOT</bcp14> remove the binding named "y" from "/b" (i.e. after the
  DELETE, "/y/b" continues to identify the resource R).
</t>
<t>
  When DELETE is applied to a collection, it <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST NOT</bcp14> modify the membership
  of any other collection that is not itself a member of the collection being
  deleted.  For example, if both "/a/.../x" and "/b/.../y" identify the same
  collection, C, then applying DELETE to "/a" must not delete an internal
  member from C or from any other collection that is a member of C, because
  that would modify the membership of "/b". 
</t>
<t>
  If a collection supports the UNBIND method (see <xref target="METHOD_UNBIND"/>), a DELETE of an
  internal member of a collection <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MAY</bcp14> be implemented as an UNBIND request.
  In this case, applying DELETE to a Request-URI has the effect of removing
  the binding identified by the final segment of the Request-URI from the
  collection identified by the Request-URI minus its final segment.  Although
  <xref target="RFC4918"/> allows a DELETE to be a non-atomic operation, when the DELETE
  operation is implemented as an UNBIND, the operation is atomic.  In
  particular, a DELETE on a hierarchy of resources is simply the removal of a
  binding to the collection identified by the Request-URI. 
</t>
</section>

<section title="MOVE and Bindings" anchor="move.and.bindings">
<t>
  When MOVE is applied to a resource, the other bindings to that resource
  <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be unaffected, and if the resource being moved is a collection, the
  bindings to any members of that collection <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be unaffected.  Also, if MOVE
  is used with Overwrite:T to delete an existing resource, the constraints
  specified for DELETE apply.
</t>
<t>
  If the destination collection of a MOVE request supports the REBIND method
  (see <xref target="METHOD_REBIND"/>), a MOVE of a resource into that collection <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MAY</bcp14> be implemented
  as a REBIND request.  Although <xref target="RFC4918"/> allows a MOVE to be a non-atomic
  operation, when the MOVE operation is implemented as a REBIND, the operation
  is atomic.  In particular, applying a MOVE to a Request-URI and a Destination
  URI has the effect of removing a binding to a resource (at the Request-URI),
  and creating a new binding to that resource (at the Destination URI).  
  Even when the
  Request-URI identifies a collection, the MOVE operation involves only
  removing one binding to that collection and adding another.
</t>

<section title="Example: Simple MOVE">
<t>
  As an example, suppose that a MOVE is issued to URI-3 for resource R below
  (which is also mapped to URI-1 and URI-2), with the Destination header set
  to URI-X.  After successful completion of the MOVE operation, a new binding
  has been created which creates the URI mapping between URI-X and resource R.  The 
  binding corresponding to the final segment of URI-3 has been removed,
  which also causes the URI mapping between URI-3 and R to be removed.  If
  resource R were a collection, old URI-3 based mappings to members of R
  would have been removed, and new URI-X based mappings to members of R would
  have been created.  
</t>
<figure><preamble>
&gt;&gt; Before Request:
</preamble><artwork align="center" type="drawing">
 URI-1   URI-2    URI-3
   |       |        |          
   |       |        |      &lt;---- URI Mappings
   |       |        |
<x:bt>+---------------------+</x:bt>
<x:bc>|     <spanx style="strong">Resource R</spanx>      |</x:bc>
<x:bb>+---------------------+</x:bb>
</artwork></figure>
<figure><preamble>
&gt;&gt; After Request:
</preamble><artwork align="center" type="drawing">
 URI-1   URI-2    URI-X
   |       |        |          
   |       |        |      &lt;---- URI Mappings
   |       |        |
<x:bt>+---------------------+</x:bt>
<x:bc>|     <spanx style="strong">Resource R</spanx>      |</x:bc>
<x:bb>+---------------------+</x:bb>
</artwork></figure>
</section>

<section title="Example: MOVE Request causing a Bind Loop">
<t>
  Note that in the presence of collection bindings, a MOVE request can cause
  the creating of a bind loop.
</t>
<figure>
<preamble>Consider a the top level collections C1 and C2 with URIs
"/CollW/" and "/CollX/". C1 also contains an additional binding named
"CollY" to C2:</preamble>
<artwork align="center" type="drawing">
                  <x:bt>+------------------+</x:bt>
                  <x:bc>| <spanx style="strong">Root Collection</spanx>  |</x:bc>
                  <x:bc>|  bindings:       |</x:bc>
                  <x:bc>|  <spanx>CollW</spanx>    <spanx>CollX</spanx>  |</x:bc>
                  <x:bb>+------------------+</x:bb>
                      |          |
                      |          |
         <x:bt>+------------------+</x:bt>    |
         <x:bc>| <spanx style="strong">Collection C1</spanx>    |</x:bc>    |
         <x:bc>|  bindings:       |</x:bc>    |
         <x:bc>|           <spanx>CollY</spanx>  |</x:bc>    |
         <x:bb>+------------------+</x:bb>    |
                      |          |
                      |          |
                  <x:bt>+------------------+</x:bt>
                  <x:bc>| <spanx style="strong">Collection C2</spanx>    |</x:bc>
                  <x:bc>|                  |</x:bc>
                  <x:bc>|                  |</x:bc>
                  <x:bb>+------------------+</x:bb>
</artwork></figure>
<t>
  In this case, the MOVE request below would cause a bind loop:
</t>
<figure><preamble>
&gt;&gt; Request:
</preamble><artwork type="message/http; msgtype=&#34;request&#34;">
MOVE /CollW HTTP/1.1
Host: example.com
Destination: /CollX/CollZ
</artwork></figure>
<figure>
<preamble>If the request succeeded, the resulting state would be:</preamble>
<artwork align="center" type="drawing">
                  <x:bt>+------------------+</x:bt>
                  <x:bc>| <spanx style="strong">Root Collection</spanx>  |</x:bc>
                  <x:bc>|  bindings:       |</x:bc>
                  <x:bc>|           <spanx>CollX</spanx>  |</x:bc>
                  <x:bb>+------------------+</x:bb>
                                 |
                                 |
         <x:bt>+------------------+</x:bt>    |
         <x:bc>| <spanx style="strong">Collection C1</spanx>    |</x:bc>    |
  +----&gt; <x:bc>|  bindings:       |</x:bc>    |
  |      <x:bc>|           <spanx>CollY</spanx>  |</x:bc>    |
  |      <x:bb>+------------------+</x:bb>    |
  |                   |          |
  |                   |          |
  |               <x:bt>+------------------+</x:bt>
  |               <x:bc>| <spanx style="strong">Collection C2</spanx>    |</x:bc>
  |               <x:bc>|  bindings:       |</x:bc>
  |               <x:bc>| <spanx>CollZ</spanx>            |</x:bc>
  |               <x:bb>+------------------+</x:bb>
  |                   |
  |                   |
  +-------------------+
</artwork></figure>
</section>

</section>

<section title="PROPFIND and Bindings">
<t>
  Consistent with <xref target="RFC4918"/>, the value of a dead property <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be independent of the number of bindings to
  its host resource or of the path submitted to PROPFIND.  On the other hand, the behavior
  for each live property depends on its individual definition (for example, see <xref target="RFC3744" x:fmt="," x:sec="5"/>, paragraph 2
  for a case where the value is independent of path and bindings, and
  <xref target="RFC4918" x:fmt="," x:sec="8.8"/> for a discussion about the
  live properties DAV:getetag and DAV:getlastmodified, which may behave
  differently).
</t>
</section>

<section title="Determining Whether Two Bindings Are to the Same Resource" anchor="determining.whether.two.bindings.are.to.the.same.resource">
<t>
  It is useful to have some way of determining whether two bindings are to the
  same resource.  Two resources might have identical contents and properties,
  but not be the same resource (e.g. an update to one resource does not affect
  the other resource).
</t>
<t>
  The <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">REQUIRED</bcp14> DAV:resource-id property defined in <xref target="PROPERTY_resource-id"/> is a resource
  identifier, which <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be unique across all resources for all time.  If the
  values of DAV:resource-id returned by PROPFIND requests through two bindings
  are identical character by character, the client can be assured that the two bindings are to the
  same resource.
</t>
<t>
  The DAV:resource-id property is created, and its value assigned, when the
  resource is created.  The value of DAV:resource-id <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST NOT</bcp14> be changed.
  Even after the resource is no longer accessible through any URI, that value
  <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST NOT</bcp14> be reassigned to another resource's DAV:resource-id property.
</t>
<t>
  Any method that creates a new resource <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> assign a new, unique value to
  its DAV:resource-id property. For example, a PUT applied to a null resource,
  COPY (when not overwriting an existing target) and 
  CHECKIN (see <xref target="RFC3253" x:fmt="," x:sec="4.4"/>) must assign a new, unique value to the DAV:resource-id property
  of the new resource they create.
</t>
<t>
  On the other hand, any method that affects an existing resource 
  must not change the value of its DAV:resource-id property.  Specifically, a PUT or a
  COPY that updates an existing resource must not change the value of its
  DAV:resource-id property.  A REBIND, since it does not create a new resource,
  but only changes the location of an existing resource, must not change the
  value of the DAV:resource-id property.
</t>
</section>

<section title="Discovering the Bindings to a Resource" anchor="discovering.the.bindings.to.a.resource">
<t>
  An <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">OPTIONAL</bcp14> DAV:parent-set property on a resource provides a list of the
  bindings that associate a collection and a URI segment with that resource.  If
  the DAV:parent-set property exists on a given resource, it <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> contain
  a complete list of all bindings to that resource that the client is
  authorized to see.  When deciding whether to support the DAV:parent-set
  property, server implementers / administrators should balance the benefits
  it provides against the cost of maintaining the property and the security
  risks enumerated in Sections 
  <xref target="private.locations.may.be.revealed" format="counter"/> and <xref target="parent-set.and.denial.of.service" format="counter"/>.
</t>
</section>

</section>
  
<section title="Properties" anchor="properties">
<t>
  The bind feature introduces the properties defined below.
</t>
<t>
  A DAV:allprop PROPFIND request <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">SHOULD NOT</bcp14> return any of the properties
  defined by this document.  This allows a binding server to perform
  efficiently when a naive client, which does not understand the cost of
  asking a server to compute all possible live properties, issues a DAV:allprop
  PROPFIND request.
</t>

<section title="DAV:resource-id Property" anchor="PROPERTY_resource-id">
<iref item="DAV:resource-id property" primary="true"/>
<iref item="Properties" subitem="DAV:resource-id" primary="true"/>
<t>
  The DAV:resource-id property is a <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">REQUIRED</bcp14> property that enables clients to
  determine whether two bindings are to the same resource.  The value of
  DAV:resource-id is a URI, and may use any registered URI scheme that
  guarantees the uniqueness of the value across all resources for all time
  (e.g. the urn:uuid: URN namespace defined in <xref target="RFC4122"/> or
  the opaquelocktoken: URI scheme defined in <xref target="RFC4918"/>).
</t>
<figure><artwork type="application/xml-dtd">
&lt;!ELEMENT resource-id (href)&gt;
</artwork></figure>

</section>

<section title="DAV:parent-set Property" anchor="PROPERTY_parent-set">
<iref item="DAV:parent-set property" primary="true"/>
<iref item="Properties" subitem="DAV:parent-set" primary="true"/>
<t>
  The DAV:parent-set property is an <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">OPTIONAL</bcp14> property that enables clients to
  discover what collections contain a binding to this resource (i.e. what
  collections have that resource as an internal member).  It contains an  
  href/segment pair for each collection that has a binding to the resource.
  The href identifies the collection, and the segment identifies the binding
  name of that resource in that collection.
</t>
<t>
  A given collection <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> appear only once in the DAV:parent-set for any given
  binding, even if there are multiple URI mappings to that collection.
</t>
<figure><artwork type="application/xml-dtd">
&lt;!ELEMENT parent-set (parent)*&gt;
&lt;!ELEMENT parent (href, segment)&gt;
&lt;!ELEMENT segment (#PCDATA)&gt;
&lt;!-- PCDATA value: segment, as defined in <xref target="RFC3986" x:fmt="sec" x:sec="3.3"/> of
     <xref target="RFC3986"/> --&gt;

</artwork></figure>


<section title="Example for DAV:parent-set Property">
<t>
  For example, if collection C1 is mapped to both /CollX and /CollY, and C1
  contains a binding named "x.gif" to a resource R1, then either
  [/CollX, x.gif] or [/CollY, x.gif] can appear in the DAV:parent-set of R1,
  but not both.  But if C1 also had a binding named "y.gif" to R1, then there
  would be two entries for C1 in the DAV:parent-set of R1 (i.e. both
  [/CollX, x.gif] and [/CollX, y.gif] or, alternatively, both [/CollY, x.gif]
  and [/CollY, y.gif]).
</t>
<figure><artwork align="center" type="drawing">
<x:bt>+-------------------------+</x:bt>
<x:bc>| <spanx style="strong">Root Collection</spanx>         |</x:bc>
<x:bc>|  bindings:              |</x:bc>
<x:bc>|  <spanx>CollX</spanx>          <spanx>CollY</spanx>   |</x:bc>
<x:bb>+-------------------------+</x:bb>
    |            /          
    |           /
    |          /
<x:bt>+-----------------+</x:bt>
<x:bc>| <spanx style="strong">Collection C1</spanx>   |</x:bc>
<x:bc>| bindings:       |</x:bc>
<x:bc>| <spanx>x.gif</spanx>    <spanx>y.gif</spanx>  |</x:bc>
<x:bb>+-----------------+</x:bb>
     |      |               
     |      |               
     |      |              
 <x:bt>+-------------+</x:bt>
 <x:bc>| <spanx style="strong">Resource R1</spanx> |</x:bc>
 <x:bb>+-------------+</x:bb>
</artwork>
</figure>
<t>
  In this case, one possible value for DAV:parent-set property on
  "/CollX/x.gif" would be: 
</t>
<figure><artwork type="text/plain"><x:parse-xml>
  &lt;parent-set xmlns="DAV:"&gt;
    &lt;parent&gt;
      &lt;href&gt;/CollX&lt;/href&gt;
      &lt;segment&gt;x.gif&lt;/segment&gt;
    &lt;/parent&gt;
    &lt;parent&gt;
      &lt;href&gt;/CollX&lt;/href&gt;
      &lt;segment&gt;y.gif&lt;/segment&gt;
    &lt;/parent&gt;
  &lt;/parent-set&gt;
</x:parse-xml></artwork></figure>
</section>
</section>
</section>

<section title="BIND Method" anchor="METHOD_BIND">
<iref item="BIND method" primary="true"/>
<iref item="Methods" subitem="BIND" primary="true"/>
<t>
  The BIND method modifies the collection identified by the Request-URI, by
  adding a new binding from the segment specified in the BIND body to the
  resource identified in the BIND body.
</t>
<t>
  If a server cannot guarantee the integrity<iref item="Binding Integrity"/> of the binding, the BIND request
  <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> fail.  Note that it is especially difficult to maintain the integrity of
  cross-server bindings.  Unless the server where the resource resides knows
  about all bindings on all servers to that resource, it may unwittingly
  destroy the resource or make it inaccessible without notifying another
  server that manages a binding to the resource.  For example, if server A
  permits creation of a binding to a resource on server B, server A must
  notify server B about its binding and must have an agreement with B that B
  will not destroy the resource while A's binding exists.  Otherwise server B
  may receive a DELETE request that it thinks removes the last binding to the
  resource and destroy the resource while A's binding still exists.
  The precondition DAV:cross-server-binding is defined below
  for cases where servers fail cross-server BIND requests because they cannot
  guarantee the integrity of cross-server bindings.
</t>
<t>
  By default, if there already is a binding for the specified segment in the
  collection, the new binding replaces the existing binding.  This default
  binding replacement behavior can be overridden using the Overwrite header
  defined in <xref target="RFC4918" x:fmt="of" x:sec="10.6"/>.
</t>
<t>
   If a BIND request fails, the server state preceding the request <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be restored.
   This method is unsafe and idempotent (see <xref target="RFC2616" x:fmt="," x:sec="9.1"/>).
</t>
<t>
  <iref item="BIND method" subitem="Marshalling"/>
  <x:h>Marshalling:</x:h>
  <list>
    <t>The request <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MAY</bcp14> include an Overwrite header.</t>
    <t>The request body <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be a DAV:bind XML element.
      <figure><artwork type="application/xml-dtd" x:indent-with="   ">
&lt;!ELEMENT bind (segment, href)&gt;
      </artwork></figure>
    </t>
    <t> 
      If the request succeeds, the server <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> return 201 (Created) when a new
      binding was created and 200 (OK) or 204 (No Content)  when an existing binding was replaced.
    </t>
    <t>
      If a response body for a successful request is included, it <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be a
      DAV:bind-response XML element.  Note that this document does not define
      any elements for the BIND response body, but the DAV:bind-response
      element is defined to ensure interoperability between future extensions
      that do define elements for the BIND response body.
      <figure><artwork type="application/xml-dtd" x:indent-with="   ">
&lt;!ELEMENT bind-response ANY&gt;
      </artwork></figure>
    </t>
  </list>
</t>
<t>
  <iref item="BIND method" subitem="Preconditions"/>
  <x:h>Preconditions:</x:h>
  <list>
    <t>
      <iref item="Condition Names" subitem="DAV:bind-into-collection (pre)" primary="true"/>
      <iref item="DAV:bind-into-collection precondition" primary="true"/>
      (DAV:bind-into-collection): The Request-URI <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> identify a collection.
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:bind-source-exists (pre)" primary="true"/>
      <iref item="DAV:bind-source-exists precondition" primary="true"/>
      (DAV:bind-source-exists): The DAV:href element <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> identify a resource.
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:binding-allowed (pre)" primary="true"/>
      <iref item="DAV:binding-allowed precondition" primary="true"/>
      (DAV:binding-allowed): The resource identified by the DAV:href supports
      multiple bindings to it.
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:cross-server-binding (pre)" primary="true"/>
      <iref item="DAV:cross-server-binding precondition" primary="true"/>
      (DAV:cross-server-binding): If the resource identified by the DAV:href
      element in the request body is on another server from the collection
      identified by the Request-URI, the server <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> support cross-server
      bindings
      (servers that do not support cross-server bindings can use this
      condition code to signal the client exactly why the request failed).
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:name-allowed (pre)" primary="true"/>
      <iref item="DAV:name-allowed precondition" primary="true"/>
      (DAV:name-allowed): The name specified by the DAV:segment is available
      for use as a new binding name.
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:can-overwrite (pre)" primary="true"/>
      <iref item="DAV:can-overwrite precondition" primary="true"/>
      (DAV:can-overwrite): If the collection already contains a binding with
      the specified path segment, and if an Overwrite header is included, the
      value of the Overwrite header <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be "T".
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:cycle-allowed (pre)" primary="true"/>
      <iref item="DAV:cycle-allowed precondition" primary="true"/>
      (DAV:cycle-allowed): If the DAV:href element identifies a collection,
      and if the Request-URI identifies a collection that is a member of that
      collection, the server <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> support cycles in the URI namespace
      (servers that do not support cycles can use this
      condition code to signal the client exactly why the request failed).
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:locked-update-allowed (pre)" primary="true"/>
      <iref item="DAV:locked-update-allowed precondition" primary="true"/>
      (DAV:locked-update-allowed): If the collection identified by the
      Request-URI is write-locked, then the appropriate token <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be specified
      in an If request header.
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:locked-overwrite-allowed (pre)" primary="true"/>
      <iref item="DAV:locked-overwrite-allowed precondition" primary="true"/>
      (DAV:locked-overwrite-allowed): If the collection already contains a
      binding with the specified path segment, and if that binding is protected
      by a write-lock, then the appropriate token <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be specified in an If
      request header.
    </t>
  </list>
</t>
<t>
  <iref item="BIND method" subitem="Postconditions"/>
  <x:h>Postconditions:</x:h>
  <list>
    <t>
      <iref item="Condition Names" subitem="DAV:new-binding (post)" primary="true"/>
      <iref item="DAV:new-binding postcondition" primary="true"/>
      (DAV:new-binding): The collection <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> have a binding that maps the
      segment specified in the DAV:segment element in the request body, to the
      resource identified by the DAV:href element in the request body.
    </t>
  </list>
</t>

<section title="Example: BIND">
<figure><preamble>
&gt;&gt; Request:
</preamble><artwork type="message/http; msgtype=&#34;request&#34;" xml:space="preserve">
BIND /CollY HTTP/1.1
Host: www.example.com
Content-Type: application/xml; charset="utf-8"
Content-Length: <x:length-of target="eb1"/>

<x:span anchor="eb1">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
<x:parse-xml>&lt;D:bind xmlns:D="DAV:"&gt;
   &lt;D:segment&gt;bar.html&lt;/D:segment&gt;
   &lt;D:href&gt;http://www.example.com/CollX/foo.html&lt;/D:href&gt;
&lt;/D:bind&gt;</x:parse-xml>
</x:span></artwork></figure>
<figure><preamble>
&gt;&gt; Response:
</preamble><artwork type="message/http; msgtype=&#34;response&#34;">
HTTP/1.1 201 Created
Location: http://www.example.com/CollY/bar.html
</artwork></figure>
<t>
  The server added a new binding to the collection,
  "http://www.example.com/CollY", associating "bar.html" with the resource
  identified by the URI "http://www.example.com/CollX/foo.html".  Clients can
  now use the URI "http://www.example.com/CollY/bar.html" to submit requests 
  to that resource.
</t>
</section>
</section>
  
<section title="UNBIND Method" anchor="METHOD_UNBIND">
<iref item="UNBIND method" primary="true"/>
<iref item="Methods" subitem="UNBIND" primary="true"/>
<t>
  The UNBIND method modifies the collection identified by the Request-URI, by
  removing the binding identified by the segment specified in the UNBIND body.
</t>
<t>
  Once a resource is unreachable by any URI mapping, the server <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MAY</bcp14> reclaim
  system resources associated with that resource.  If UNBIND removes a binding
  to a resource, but there remain URI mappings to that resource, the server
  <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST NOT</bcp14> reclaim system resources associated with the resource.
</t>
<t>
   If an UNBIND request fails, the server state preceding the request <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be restored.
   This method is unsafe and idempotent (see <xref target="RFC2616" x:fmt="," x:sec="9.1"/>).
</t>
<t>
  <iref item="UNBIND method" subitem="Marshalling"/>
  <x:h>Marshalling:</x:h>
  <list>
    <t>The request body <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be a DAV:unbind XML element.
      <figure><artwork type="application/xml-dtd" x:indent-with="   ">
&lt;!ELEMENT unbind (segment)&gt;
</artwork></figure></t>
    <t>If the request succeeds, the server <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> return 200 (OK) or 204 (No Content) when the
    binding was successfully deleted.</t>
    <t>If a response body for a successful request is included, it <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be a
    DAV:unbind-response XML element.  Note that this document does not define
    any elements for the UNBIND response body, but the DAV:unbind-response
    element is defined to ensure interoperability between future extensions
    that do define elements for the UNBIND response body.
    <figure><artwork type="application/xml-dtd" x:indent-with="   ">
&lt;!ELEMENT unbind-response ANY&gt;
</artwork></figure></t>
  </list>
</t>
<t>
  <iref item="UNBIND method" subitem="Preconditions"/>
  <x:h>Preconditions:</x:h>
  <list>
    <t>
      <iref item="Condition Names" subitem="DAV:unbind-from-collection (pre)" primary="true"/>
      <iref item="DAV:unbind-from-collection precondition" primary="true"/>
      (DAV:unbind-from-collection): The Request-URI <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> identify a collection.
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:unbind-source-exists (pre)" primary="true"/>
      <iref item="DAV:unbind-source-exists precondition" primary="true"/>
      (DAV:unbind-source-exists): The DAV:segment element <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> identify a
      binding in the collection identified by the Request-URI.
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:locked-update-allowed (pre)" primary="true"/>
      <iref item="DAV:locked-update-allowed precondition" primary="true"/>
      (DAV:locked-update-allowed): If the collection identified by the
      Request-URI is write-locked, then the appropriate token <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be specified
      in the request.
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:protected-url-deletion-allowed (pre)" primary="true"/>
      <iref item="DAV:protected-url-deletion-allowed precondition" primary="true"/>
      (DAV:protected-url-deletion-allowed): If the binding identified by the
      segment is protected by a write-lock, then the appropriate token <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be
      specified in the request.
    </t>
  </list>
</t>
<t>
  <iref item="UNBIND method" subitem="Postconditions"/>
  <x:h>Postconditions:</x:h>
  <list>
    <t>
      <iref item="Condition Names" subitem="DAV:binding-deleted (post)" primary="true"/>
      <iref item="DAV:binding-deleted postcondition" primary="true"/>
      (DAV:binding-deleted): The collection <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST NOT</bcp14> have a binding for the
      segment specified in the DAV:segment element in the request body.
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:lock-deleted (post)" primary="true"/>
      <iref item="DAV:lock-deleted postcondition" primary="true"/>
      (DAV:lock-deleted): If the internal member URI of the binding specified
      by the Request-URI and the DAV:segment element in the 
      request body was protected by a write-lock at the time of the request, 
      that write-lock must have been deleted by the request.
    </t>
  </list>
</t>

<section title="Example: UNBIND">
<figure><preamble>
&gt;&gt; Request:
</preamble><artwork type="message/http; msgtype=&#34;request&#34;" xml:space="preserve">
UNBIND /CollX HTTP/1.1
Host: www.example.com
Content-Type: application/xml; charset="utf-8"
Content-Length: <x:length-of target="eb2"/>

<x:span anchor="eb2">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
<x:parse-xml>&lt;D:unbind xmlns:D="DAV:"&gt;
   &lt;D:segment&gt;foo.html&lt;/D:segment&gt;
&lt;/D:unbind&gt;</x:parse-xml>
</x:span></artwork></figure>
<figure><preamble>
&gt;&gt; Response:
</preamble><artwork type="message/http; msgtype=&#34;response&#34;">
HTTP/1.1 200 OK
</artwork></figure>
<t>
  The server removed the binding named "foo.html" from the collection,
  "http://www.example.com/CollX".  A request to the resource named
  "http://www.example.com/CollX/foo.html" will return a 404 (Not Found) response.
</t>
</section>
</section>
  
<section title="REBIND Method" anchor="METHOD_REBIND">
<iref item="REBIND method" primary="true"/>
<iref item="Methods" subitem="REBIND" primary="true"/>
<t>
  The REBIND method removes a binding to a resource from a collection, and adds a binding to that resource into 
  the collection identified by the Request-URI.  The
  request body specifies the binding to be added (segment) and the 
  old binding to be removed
  (href).  It is effectively an atomic form of a MOVE request,
  and <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be treated the same way as MOVE for the purpose of determining access permissions.
</t>
<t>
   If a REBIND request fails, the server state preceding the request <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be restored.
   This method is unsafe and idempotent (see <xref target="RFC2616" x:fmt="," x:sec="9.1"/>).
</t>
<t>
  <iref item="REBIND method" subitem="Marshalling"/>
  <x:h>Marshalling:</x:h>
  <list>
    <t>The request <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MAY</bcp14> include an Overwrite header.</t>
    <t>The request body <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be a DAV:rebind XML element.
      <figure><artwork type="application/xml-dtd" x:indent-with="   ">
&lt;!ELEMENT rebind (segment, href)&gt;
</artwork></figure></t>
    <t>If the request succeeds, the server <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> return 201 (Created) when a
    new binding was created and 200 (OK) or 204 (No Content) when an existing binding was replaced.</t>
    <t>If a response body for a successful request is included, it <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be a
      DAV:rebind-response XML element.  Note that this document does not define
      any elements for the REBIND response body, but the DAV:rebind-response
      element is defined to ensure interoperability between future extensions
      that do define elements for the REBIND response body.
      <figure><artwork type="application/xml-dtd" x:indent-with="   ">
&lt;!ELEMENT rebind-response ANY&gt;
</artwork></figure></t>
  </list> 
</t>
<t>
  <iref item="REBIND method" subitem="Preconditions"/>
  <x:h>Preconditions:</x:h>
  <list>
    <t>
      <iref item="Condition Names" subitem="DAV:rebind-from-collection (pre)" primary="true"/>
      <iref item="DAV:rebind-from-collection precondition" primary="true"/>
      (DAV:rebind-into-collection): The Request-URI <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> identify a
      collection.
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:rebind-source-exists (pre)" primary="true"/>
      <iref item="DAV:rebind-source-exists precondition" primary="true"/>
      (DAV:rebind-source-exists): The DAV:href element <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> identify a
      resource.
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:cross-server-binding (pre)" primary="true"/>
      <iref item="DAV:cross-server-binding precondition" primary="true"/>
      (DAV:cross-server-binding): If the resource identified by the DAV:href
      element in the request body is on another server from the collection
      identified by the Request-URI, the server <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> support cross-server bindings
      (servers that do not support cross-server bindings can use this
      condition code to signal the client exactly why the request failed).
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:name-allowed (pre)" primary="true"/>
      <iref item="DAV:name-allowed precondition" primary="true"/>
      (DAV:name-allowed): The name specified by the DAV:segment is available
      for use as a new binding name.
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:can-overwrite (pre)" primary="true"/>
      <iref item="DAV:can-overwrite precondition" primary="true"/>
      (DAV:can-overwrite): If the collection already contains a binding with
      the specified path segment, and if an Overwrite header is included, the
      value of the Overwrite header <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be "T".
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:cycle-allowed (pre)" primary="true"/>
      <iref item="DAV:cycle-allowed precondition" primary="true"/>
      (DAV:cycle-allowed): If the DAV:href element identifies a collection,
      and if the Request-URI identifies a collection that is a member of that
      collection, the server <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> support cycles in the URI namespace
      (servers that do not support cycles can use this
      condition code to signal the client exactly why the request failed).
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:locked-update-allowed (pre)" primary="true"/>
      <iref item="DAV:locked-update-allowed precondition" primary="true"/>
      (DAV:locked-update-allowed): If the collection identified by the
      Request-URI is write-locked, then the appropriate token <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be specified
      in the request.
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:protected-url-modification-allowed (pre)" primary="true"/>
      <iref item="DAV:protected-url-modification-allowed precondition" primary="true"/>
      (DAV:protected-url-modification-allowed): If the collection identified
      by the Request-URI already contains a binding with the specified path
      segment, and if that binding is protected by a write-lock, then the
      appropriate token <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be specified in the request.
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:locked-source-collection-update-allowed (pre)" primary="true"/>
      <iref item="DAV:locked-source-collection-update-allowed precondition" primary="true"/>
      (DAV:locked-source-collection-update-allowed): If the collection
      identified by the parent collection prefix of the DAV:href  URI is
      write-locked, then the appropriate token <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be specified in the request.
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:protected-source-url-deletion-allowed (pre)" primary="true"/>
      <iref item="DAV:protected-source-url-deletion-allowed precondition" primary="true"/>
      (DAV:protected-source-url-deletion-allowed): If the DAV:href URI is
      protected by a write lock, then the appropriate token <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> be specified
      in the request.
    </t>
  </list>
</t>
<t>
  <iref item="REBIND method" subitem="Postconditions"/>
  <x:h>Postconditions:</x:h>
  <list>
    <t>
      <iref item="Condition Names" subitem="DAV:new-binding (post)" primary="true"/>
      <iref item="DAV:new-binding postcondition" primary="true"/>
      (DAV:new-binding): The collection <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> have a binding that maps the
      segment specified in the DAV:segment element in the request body, to the
      resource that was identified by the DAV:href element in the request body.
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:binding-deleted (post)" primary="true"/>
      <iref item="DAV:binding-deleted postcondition" primary="true"/>
      (DAV:binding-deleted): The URL specified in the DAV:href element in the
      request body <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST NOT</bcp14> be mapped to a resource.
    </t>
    <t>
      <iref item="Condition Names" subitem="DAV:lock-deleted (post)" primary="true"/>
      <iref item="DAV:lock-deleted postcondition" primary="true"/>
      (DAV:lock-deleted): If the URL specified in the DAV:href element in the 
      request body was protected by a write-lock at the time of the request, 
      that write-lock must have been deleted by the request.
    </t>
  </list>
</t>

<section title="Example: REBIND">
<figure><preamble>
&gt;&gt; Request:
</preamble><artwork type="message/http; msgtype=&#34;request&#34;" xml:space="preserve">
REBIND /CollX HTTP/1.1
Host: www.example.com
Content-Type: application/xml; charset="utf-8"
Content-Length: <x:length-of target="eb3"/>

<x:span anchor="eb3">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
<x:parse-xml>&lt;D:rebind xmlns:D="DAV:"&gt;
   &lt;D:segment&gt;foo.html&lt;/D:segment&gt;
   &lt;D:href&gt;http://www.example.com/CollY/bar.html&lt;/D:href&gt;
&lt;/D:rebind&gt;</x:parse-xml>
</x:span></artwork></figure>
<figure><preamble>
&gt;&gt; Response:
</preamble><artwork type="message/http; msgtype=&#34;response&#34;">
HTTP/1.1 200 OK
</artwork></figure>
<t>
  The server added a new binding to the collection, "http://www.example.com/CollX",
  associating "foo.html" with the resource identified by the URI
  "http://www.example.com/CollY/bar.html", and removes the binding named
  "bar.html" from the collection identified by the URI "http://www.example.com/CollY".  Clients
  can now use the URI "http://www.example.com/CollX/foo.html" to submit
  requests to that resource, and requests on the URI
  "http://www.example.com/CollY/bar.html" will fail with a 404 (Not Found) response.
</t>
</section>

<section title="Example: REBIND in Presence of Locks and Bind Loops">
<figure>
<preamble>
  To illustrate the effects of locks and bind loops on a REBIND operation,
  consider the following collection:
</preamble>
<artwork align="center" type="drawing">
<x:bt>+------------------+</x:bt>
<x:bc>| <spanx style="strong">Root Collection</spanx>  |</x:bc>
<x:bc>|  bindings:       |</x:bc>
<x:bc>|  <spanx>CollW</spanx>           |</x:bc>
<x:bb>+------------------+</x:bb>
     |
     |
     |
<x:bt>+-------------------------------+</x:bt>
<x:bc>| <spanx style="strong">Collection C1</spanx>                 |</x:bc>&lt;--------+
<x:bc>| LOCKED infinity               |</x:bc>         |
<x:bc>| (lock token L1)               |</x:bc>         |
<x:bc>| bindings:                     |</x:bc>         |
<x:bc>| <spanx>CollX</spanx>               <spanx>CollY</spanx>     |</x:bc>         |
<x:bb>+-------------------------------+</x:bb>         |
     |                  |                 |
     |                  |  (creates loop) |
     |                  |                 |
<x:bt>+-----------------+</x:bt>  <x:bt>+------------------+</x:bt> |
<x:bc>| <spanx style="strong">Collection C2</spanx>   |</x:bc>  <x:bc>| <spanx style="strong">Collection C3</spanx>    |</x:bc> |
<x:bc>| (inherit lock)  |</x:bc>  <x:bc>| (inherit lock)   |</x:bc> | 
<x:bc>| (lock token L1) |</x:bc>  <x:bc>| (lock token L1)  |</x:bc> |
<x:bc>| bindings:       |</x:bc>  <x:bc>| bindings:        |</x:bc> |
<x:bc>|  {none}         |</x:bc>  <x:bc>| <spanx>y.gif</spanx>     <spanx>CollZ</spanx>  |</x:bc> |
<x:bb>+-----------------+</x:bb>  <x:bb>+------------------+</x:bb> |
                       |            |     |
                       |            +-----+
                       |
                   <x:bt>+---------------------------+</x:bt>
                   <x:bc>| <spanx style="strong">Resource R2</spanx>               |</x:bc>
                   <x:bc>| (lock inherited from C1)  |</x:bc>
                   <x:bc>| (lock token L1)           |</x:bc>
                   <x:bb>+---------------------------+</x:bb>
</artwork>
<postamble>
  (where L1 is "urn:uuid:f92d4fae-7012-11ab-a765-00c0ca1f6bf9").
</postamble>
</figure>
<t>
  Note that the binding between CollZ and C1 creates a loop in the containment
  hierarchy.  Servers are not required to support such loops, though the server
  in this example does.
</t>
<figure>
<preamble>
  The REBIND request below will remove the segment "CollZ" from C3 and add a new
  binding from "CollA" to the collection C2.
</preamble>
<artwork type="message/http; msgtype=&#34;request&#34;" xml:space="preserve">
REBIND /CollW/CollX HTTP/1.1
Host: www.example.com
If: (&lt;urn:uuid:f92d4fae-7012-11ab-a765-00c0ca1f6bf9&gt;)
Content-Type: application/xml; charset="utf-8"
Content-Length: <x:length-of target="eb4"/>

<x:span anchor="eb4">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
<x:parse-xml>&lt;D:rebind xmlns:D="DAV:"&gt;
  &lt;D:segment&gt;CollA&lt;/D:segment&gt;
  &lt;D:href&gt;/CollW/CollY/CollZ&lt;/D:href&gt;
&lt;/D:rebind&gt;</x:parse-xml>
</x:span></artwork></figure>
<figure>
<preamble>
  The outcome of the REBIND operation is:
</preamble>
<artwork align="center" type="drawing">
<x:bt>+------------------+</x:bt>
<x:bc>| <spanx style="strong">Root Collection</spanx>  |</x:bc>
<x:bc>|  bindings:       |</x:bc>
<x:bc>|  <spanx>CollW</spanx>           |</x:bc>
<x:bb>+------------------+</x:bb>
     |
     |
     |
<x:bt>+-------------------------------+</x:bt>
<x:bc>| <spanx style="strong">Collection C1</spanx>                 |</x:bc>
<x:bc>| LOCKED infinity               |</x:bc>
<x:bc>| (lock token L1)               |</x:bc>
<x:bc>| bindings:                     |</x:bc>  
<x:bc>| <spanx>CollX</spanx>                  <spanx>CollY</spanx>  |</x:bc>
<x:bb>+-------------------------------+</x:bb>
     |              ^      |             
     |              |      |              
<x:bt>+-----------------+</x:bt> | <x:bt>+------------------+</x:bt> 
<x:bc>| <spanx style="strong">Collection C2</spanx>   |</x:bc> | <x:bc>| <spanx style="strong">Collection C3</spanx>    |</x:bc>
<x:bc>|(inherited lock) |</x:bc> | <x:bc>| (inherited lock) |</x:bc>
<x:bc>|(lock token L1)  |</x:bc> | <x:bc>| (lock token L1)  |</x:bc>
<x:bc>| bindings:       |</x:bc> | <x:bc>| bindings:        |</x:bc>
<x:bc>| <spanx>CollA</spanx>           |</x:bc> | <x:bc>| <spanx>y.gif</spanx>            |</x:bc>
<x:bb>+-----------------+</x:bb> | <x:bb>+------------------+</x:bb>
    |               |    |           
    +---------------+    |          
     (creates loop)      |
                   <x:bt>+---------------------------+</x:bt>
                   <x:bc>| <spanx style="strong">Resource R2</spanx>               |</x:bc>
                   <x:bc>| (inherited lock from C1)  |</x:bc>
                   <x:bc>| (lock token L1)           |</x:bc>
                   <x:bb>+---------------------------+</x:bb>
</artwork>
</figure>
</section>
</section>

<section title="Additional Status Codes" anchor="additional.status.codes">

<section title="208 Already Reported" anchor="status.208.already.reported">
<iref item="Status Codes" subitem="208 Already Reported" primary="true" x:for-anchor=""/>
<iref item="208 Already Reported (status code)" primary="true" x:for-anchor=""/>
<t>
  The 208 (Already Reported) status code can be used inside a DAV:propstat
  response element to avoid enumerating the internal members of multiple
  bindings to the same collection repeatedly.  For each binding to a 
  collection inside the request's scope, only one will
  be reported with a 200 status, while subsequent DAV:response elements for all
  other bindings will use the 208 status, and no DAV:response elements for
  their descendants are included.
</t>
<t>
  Note that the 208 status will only occur for "Depth: infinity" requests,
  and that it is of particular importance when the multiple collection
  bindings cause a bind loop as discussed in <xref target="uri.mappings.created.by.a.new.binding"/>.
</t>
<t>
  A client can request the DAV:resource-id property in a PROPFIND request to
  guarantee that they can accurately reconstruct the binding structure of a
  collection with multiple bindings to a single resource.
</t>
<t>
  For backward compatibility with clients not aware of the 208 status code appearing
  in multistatus response bodies, it <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">SHOULD NOT</bcp14> be used unless the client
  has signalled support for this specification using the "DAV" request
  header (see <xref target="dav.request.header"/>).  Instead, a 506 status should be returned 
  when a binding loop is discovered.
  This allows the server to return the 506 as the top level return status, 
  if it discovers it before it started the response, or in the middle of a 
  multistatus, if it discovers it in the middle of streaming out a 
  multistatus response. 
</t>

<section title="Example: PROPFIND by Bind-Aware Client">
<t>
  For example, consider a PROPFIND request on /Coll (bound to collection C),
  where the members of  /Coll are /Coll/Foo (bound to resource R) and /Coll/Bar
  (bound to collection C).
</t>
<figure><preamble>
&gt;&gt; Request:
</preamble>
<artwork type="message/http; msgtype=&#34;request&#34;" xml:space="preserve">
PROPFIND /Coll/ HTTP/1.1
Host: www.example.com
Depth: infinity
DAV: bind
Content-Type: application/xml; charset="utf-8"
Content-Length: <x:length-of target="eb5"/>

<x:span anchor="eb5">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
<x:parse-xml>&lt;D:propfind xmlns:D="DAV:"&gt;
  &lt;D:prop&gt;
   &lt;D:displayname/&gt;
   &lt;D:resource-id/&gt;
  &lt;/D:prop&gt;
&lt;/D:propfind&gt;</x:parse-xml>
</x:span></artwork></figure> 
<figure><preamble>
&gt;&gt; Response:
</preamble>
<artwork type="message/http; msgtype=&#34;response&#34;" xml:space="preserve">
HTTP/1.1 207 Multi-Status
Content-Type: application/xml; charset="utf-8"
Content-Length: <x:length-of target="eb6"/>

<x:span anchor="eb6">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
<x:parse-xml>&lt;D:multistatus xmlns:D="DAV:"&gt;
  &lt;D:response&gt;
    &lt;D:href&gt;http://www.example.com/Coll/&lt;/D:href&gt;
    &lt;D:propstat&gt;
      &lt;D:prop&gt;
        &lt;D:displayname&gt;Loop Demo&lt;/D:displayname&gt;
        &lt;D:resource-id&gt;
          &lt;D:href
&gt;urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf8&lt;/D:href&gt;
        &lt;/D:resource-id&gt;
      &lt;/D:prop&gt;
      &lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;
    &lt;/D:propstat&gt;
  &lt;/D:response&gt;
  &lt;D:response&gt;
    &lt;D:href&gt;http://www.example.com/Coll/Foo&lt;/D:href&gt;
    &lt;D:propstat&gt;
      &lt;D:prop&gt;
        &lt;D:displayname&gt;Bird Inventory&lt;/D:displayname&gt;
        &lt;D:resource-id&gt;
          &lt;D:href
&gt;urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf9&lt;/D:href&gt;
        &lt;/D:resource-id&gt;
      &lt;/D:prop&gt;
      &lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;
    &lt;/D:propstat&gt;
  &lt;/D:response&gt;
  &lt;D:response&gt;
    &lt;D:href&gt;http://www.example.com/Coll/Bar&lt;/D:href&gt;
    &lt;D:propstat&gt;
      &lt;D:prop&gt;
        &lt;D:displayname&gt;Loop Demo&lt;/D:displayname&gt;
        &lt;D:resource-id&gt;
          &lt;D:href
&gt;urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf8&lt;/D:href&gt;
        &lt;/D:resource-id&gt;
      &lt;/D:prop&gt;
      &lt;D:status&gt;HTTP/1.1 208 Already Reported&lt;/D:status&gt;
    &lt;/D:propstat&gt;
  &lt;/D:response&gt;
&lt;/D:multistatus&gt;</x:parse-xml>
</x:span></artwork></figure> 
</section>

<section title="Example: PROPFIND by Non-Bind-Aware Client">
<t>
  In this example, the client isn't aware of the 208 status code introduced
  by this specification.  As the "Depth: infinity" PROPFIND request would cause
  a loop condition, the whole request is rejected with a 506 status. 
</t>
<figure><preamble>
&gt;&gt; Request:
</preamble>
<artwork type="message/http; msgtype=&#34;request&#34;" xml:space="preserve">
PROPFIND /Coll/ HTTP/1.1
Host: www.example.com
Depth: infinity
Content-Type: application/xml; charset="utf-8"
Content-Length: <x:length-of target="eb7"/>

<x:span anchor="eb7">&lt;?xml version="1.0" encoding="utf-8" ?&gt;
<x:parse-xml>&lt;D:propfind xmlns:D="DAV:"&gt;
   &lt;D:prop&gt; &lt;D:displayname/&gt; &lt;/D:prop&gt;
&lt;/D:propfind&gt;</x:parse-xml>
</x:span></artwork></figure> 
<figure><preamble>
&gt;&gt; Response:
</preamble><artwork type="message/http; msgtype=&#34;response&#34;">
HTTP/1.1 506 Loop Detected
</artwork></figure> 
</section>
</section>

<section title="506 Loop Detected" anchor="status.506.loop.detected">
<iref item="Status Codes" subitem="506 Loop Detected" primary="true" x:for-anchor=""/>
<iref item="506 Loop Detected (status code)" primary="true" x:for-anchor=""/>
<t>
  The 506 (Loop Detected) status code indicates that the server terminated an
  operation because it encountered an infinite loop while processing a request
  with "Depth: infinity".   This status indicates that the entire operation
  failed.  
</t>
</section>
</section>


<section title="Capability Discovery">
  
<section title="OPTIONS Method">
<t>
  <iref item="DAV header" subitem="compliance class 'bind'" primary="true"/>
  If the server supports bindings, it <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> return the compliance class name "bind"
  as a field in the "DAV" response header (see <xref target="RFC4918" x:fmt="," x:sec="10.1"/>)
  from an OPTIONS request on any resource implemented by that
  server.  A value of "bind" in the "DAV" header <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> indicate that the server
  supports all <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> level requirements and <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">REQUIRED</bcp14> features specified in this
  document.
</t>  
</section>

<section title="'DAV' Request Header" anchor="dav.request.header">
<t>
  Clients <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">SHOULD</bcp14> signal support for all <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> level requirements and <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">REQUIRED</bcp14>
  features by submitting a "DAV" request header containing the compliance class
  name "bind".  In particular, the client <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> understand the 208 status
  code defined in <xref target="status.208.already.reported"/>.
</t>
</section>

</section>

<section title="Relationship to Locking in WebDAV" anchor="locking">
<iref item="Locking"/>
<t>
  Locking is an optional feature of WebDAV (<xref target="RFC4918"/>). The
  base WebDAV specification and this protocol extension have been designed
  in parallel, making sure that all features of WebDAV can be 
  implemented on a server that implements this protocol as well.
</t>
<t>
  Unfortunately, WebDAV uses the term "lock-root" inconsistently. It is
  introduced in <xref target="RFC4918" x:fmt="of" x:sec="6.1"/>, point 2, as:
</t>
<x:blockquote cite="http://tools.ietf.org/html/rfc4918#section-6.1">
  <t>
    2. A resource becomes directly locked when a LOCK request to a URL of
    that resource creates a new lock. The "lock-root" of the new lock is that
    URL. If at the time of the request, the URL is not mapped to a resource, a
    new empty resource is created and directly locked.
  </t>
</x:blockquote>
<t>
  On the other hand, <xref target="RFC4918" x:fmt="," x:sec="9.10.1"/>
  states:
</t>
<x:blockquote cite="http://tools.ietf.org/html/rfc4918#section-9.10.1">
  <t>
   A LOCK request to an existing resource will create a lock on the
   resource identified by the Request-URI, provided the resource is not
   already locked with a conflicting lock.  The resource identified in
   the Request-URI becomes the root of the lock.
  </t>
</x:blockquote>
<t>
  Servers that implement both WebDAV locking and support for multiple bindings
  <bcp14 xmlns="http://purl.org/net/xml2rfc/ext">MUST</bcp14> use the first interpretation: the lock-root is the URI through which
  the lock was created, not a resource. This URI, and potential aliases of this
  URI (<xref target="RFC4918" x:fmt="," x:sec="5"/>), are said to be "protected"
  by the lock.
</t>
<t>
  As defined in the introduction to <xref target="RFC4918" x:fmt="of" x:sec="7"/>,
  write operations that modify the state of a locked resource require that the
  lock token is submitted with the request. Consistent with WebDAV, the state
  of the resource consists of the content ("any variant"), dead properties, 
  lockable live properties (item 1), plus, for a collection, all its bindings
  (item 2). Note that this, by definition, does not depend on the request URI
  to which the write operation is applied (the locked state is a property of
  the resource, not its URI).
</t>
<t>
  However, the lock root is the URI through which the lock was requested. Thus,
  the protection defined in item 3 of the list does not apply to additional
  URIs that may be mapped to the same resource due to the existence of
  multiple bindings.
</t>

<section title="Example: Locking and Multiple Bindings">
<t>
  Consider a root collection "/", containing the two collections C1 and
  C2, named "/CollX" and "/CollY", and a child resource R, bound to C1 as
  "/CollX/test" and bound to C2 as "/CollY/test":
</t>
<figure><artwork align="center" type="drawing" xml:space="preserve">
     <x:bt>+-------------------------+</x:bt>
     <x:bc>| <spanx style="strong">Root Collection</spanx>         |</x:bc>
     <x:bc>|  bindings:              |</x:bc>
     <x:bc>|  <spanx>CollX</spanx>          <spanx>CollY</spanx>   |</x:bc>
     <x:bb>+-------------------------+</x:bb>
     <x:x/>    |                |          
     <x:x/>    |                |
     <x:x/>    |                |
<x:bt>+---------------+</x:bt>  <x:bt>+---------------+</x:bt>
<x:bc>| <spanx style="strong">Collection C1</spanx> |</x:bc>  <x:bc>| <spanx style="strong">Collection C2</spanx> |</x:bc>
<x:bc>| bindings:     |</x:bc>  <x:bc>| bindings:     |</x:bc>
<x:bc>|     <spanx>test</spanx>      |</x:bc>  <x:bc>|     <spanx>test</spanx>      |</x:bc>
<x:bb>+---------------+</x:bb>  <x:bb>+---------------+</x:bb>
<x:x/>         |               |
<x:x/>         |               |  
<x:x/>         |               |  
        <x:bt>+------------------+</x:bt>
        <x:bc>|    <spanx style="strong">Resource R</spanx>    |</x:bc>
        <x:bb>+------------------+</x:bb>
</artwork></figure>
<t>
  Given a host name of "www.example.com", applying a depth-zero write lock to
  "/CollX/test" will lock the resource R, and the lock-root of this lock will
  be "http://www.example.com/CollX/test".
</t>
<t>
  Thus the following operations will require that the associated lock token is
  submitted with the "If" request header
  (<xref target="RFC4918" x:fmt="," x:sec="10.4"/>):
  <list style="symbols">
    <t>a PUT or PROPPATCH request modifying the content or lockable properties of resource
    R (as R is locked) -- no matter which URI is used as request target,</t>
    <t>a MOVE, REBIND, UNBIND or DELETE request causing "/CollX/test" not being mapped to resource R anymore (be it
    addressed to "/CollX" or "/CollX/test").</t>
  </list>
</t>
<t>
  The following operations will not require submission of the lock token:
  <list style="symbols">
    <t>a DELETE request addressed to "/CollY" or /CollY/test", as it does not
    affect the resource R, nor the lock-root,</t>
    <t>for the same reason, an UNBIND request removing the binding "test" from collection C2, or the
    binding "CollY" from the root collection,</t>
    <t>similarly, a MOVE or REBIND request causing "/CollY/test" not being mapped
    to resource R anymore.</t>
  </list>
</t>
<t>
  Note that despite the lock root being "http://www.example.com/CollX/test", an UNLOCK request can
  be addressed through any URI mapped to resource R, as UNLOCK operates on the
  resource identified by the request URI, not that URI (see <xref target="RFC4918" x:fmt="," x:sec="9.11"/>).
</t>
</section>
</section>

<section title="Relationship to WebDAV Access Control Protocol">
<t>
  Note that the WebDAV Access Control Protocol has been designed for
  compatibility with systems that allow multiple URIs to map to the same
  resource (see <xref target="RFC3744" x:fmt="," x:sec="5"/>):  
</t>
<x:blockquote cite="http://tools.ietf.org/html/rfc3744#section-5">
  <t>
    ...Access control properties (especially DAV:acl and DAV:inherited-acl-set)
    are defined on the resource identified by the Request-URI of a PROPFIND
    request. A direct consequence is that if the resource is accessible via
    multiple URI, the value of access control properties is the same across
    these URI. ...
  </t>
</x:blockquote>
<t>
  Furthermore, note that BIND and REBIND behave the same as MOVE with respect
  to the DAV:acl property (see <xref target="RFC3744" x:fmt="," x:sec="7.3"/>).
</t>

</section>

<section title="Relationship to Versioning Extensions to WebDAV">
<t>
  Servers that implement Workspaces (<xref target="RFC3253" x:fmt="," x:sec="6"/>)
  and Version Controlled Collections (<xref target="RFC3253" x:fmt="," x:sec="14"/>)
  already need to implement BIND-like behavior in order to handle UPDATE and
  UNCHECKOUT semantics.
</t>
<t>
  Consider a workspace "/ws1/", containing the version-controlled, checked-out
  collections C1 and C2, named "/ws1/CollX" and "/ws1/CollY",
  and a version-controlled resource R, bound to C1 as "/ws1/CollX/test":
</t>
<figure><artwork align="center" type="drawing" xml:space="preserve">
     <x:bt>+-------------------------+</x:bt>
     <x:bc>| <spanx style="strong">Workspace</spanx>               |</x:bc>
     <x:bc>|  bindings:              |</x:bc>
     <x:bc>|  <spanx>CollX</spanx>          <spanx>CollY</spanx>   |</x:bc>
     <x:bb>+-------------------------+</x:bb>
     <x:x/>    |                |          
     <x:x/>    |                |
     <x:x/>    |                |
<x:bt>+---------------+</x:bt>  <x:bt>+---------------+</x:bt>
<x:bc>| <spanx style="strong">Collection C1</spanx> |</x:bc>  <x:bc>| <spanx style="strong">Collection C2</spanx> |</x:bc>
<x:bc>| bindings:     |</x:bc>  <x:bc>|               |</x:bc>
<x:bc>|     <spanx>test</spanx>      |</x:bc>  <x:bc>|               |</x:bc>
<x:bb>+---------------+</x:bb>  <x:bb>+---------------+</x:bb>
<x:x/>         |                       
<x:x/>         |                         
<x:x/>         |                         
        <x:bt>+------------------+</x:bt>
        <x:bc>|    <spanx style="strong">Resource R</spanx>    |</x:bc>
        <x:bb>+------------------+</x:bb>
</artwork></figure>
<t>
  Moving "/ws1/CollX/test" into "/ws1/CollY", checking in C2, but undoing the
  checkout on C1 will undo part of the MOVE request, thus restoring the binding
  from C1 to R, but keeping the new binding from C2 to R:
</t>
<figure><preamble>
&gt;&gt; Request:
</preamble>
<artwork type="message/http; msgtype=&#34;request&#34;">
MOVE /ws1/CollX/test HTTP/1.1
Host: www.example.com
Destination: /ws1/CollY/test
</artwork>
</figure> 
<figure><preamble>
&gt;&gt; Response:
</preamble><artwork type="message/http; msgtype=&#34;response&#34;">
HTTP/1.1 204 No Content
</artwork></figure> 
<figure><preamble>
&gt;&gt; Request:
</preamble><artwork type="message/http; msgtype=&#34;request&#34;">
CHECKIN /ws1/CollY/ HTTP/1.1
Host: www.example.com
</artwork></figure> 
<figure><preamble>
&gt;&gt; Response:
</preamble><artwork type="message/http; msgtype=&#34;response&#34;">
HTTP/1.1 201 Created
Cache-Control: no-cache
Location: http://repo.example.com/his/17/ver/42
</artwork></figure> 
<figure><preamble>
&gt;&gt; Request:
</preamble><artwork type="message/http; msgtype=&#34;request&#34;">
UNCHECKOUT /ws1/CollX/ HTTP/1.1
Host: www.example.com
</artwork>
</figure> 
<figure><preamble>
&gt;&gt; Response:
</preamble><artwork type="message/http; msgtype=&#34;response&#34;">
HTTP/1.1 200 OK
Cache-Control: no-cache
</artwork></figure> 
<t>
  As a result, both C1 and C2 would have a binding to R:
</t>
<figure><artwork align="center" type="drawing" xml:space="preserve">
     <x:bt>+-------------------------+</x:bt>
     <x:bc>| <spanx style="strong">Workspace</spanx>               |</x:bc>
     <x:bc>|  bindings:              |</x:bc>
     <x:bc>|  <spanx>CollX</spanx>          <spanx>CollY</spanx>   |</x:bc>
     <x:bb>+-------------------------+</x:bb>
     <x:x/>    |                |          
     <x:x/>    |                |
     <x:x/>    |                |
<x:bt>+---------------+</x:bt>  <x:bt>+---------------+</x:bt>
<x:bc>| <spanx style="strong">Collection C1</spanx> |</x:bc>  <x:bc>| <spanx style="strong">Collection C2</spanx> |</x:bc>
<x:bc>| bindings:     |</x:bc>  <x:bc>| bindings:     |</x:bc>
<x:bc>|     <spanx>test</spanx>      |</x:bc>  <x:bc>|     <spanx>test</spanx>      |</x:bc>
<x:bb>+---------------+</x:bb>  <x:bb>+---------------+</x:bb>
<x:x/>         |                |
<x:x/>         |                |  
<x:x/>         |                |
        <x:bt>+------------------+</x:bt>
        <x:bc>|    <spanx style="strong">Resource R</spanx>    |</x:bc>
        <x:bb>+------------------+</x:bb>
</artwork></figure>
<t>
  The MOVE semantics defined in <xref target="RFC3253" x:fmt="of" x:sec="3.15"/>
  already require that "/ws1/CollX/test" and "/ws1/CollY/test" will have the same 
  version history (as exposed in the DAV:version-history property). Furthermore,
  the UNCHECKOUT semantics (which in this case is similar to UPDATE, see
  <xref target="RFC3253" x:fmt="of" x:sec="14.11"/>) require:
</t>
<x:blockquote cite="http://tools.ietf.org/html/rfc3253#section-14.11">
  <t>
    ...If a new version-controlled member is in a workspace that already has
    a version-controlled resource for that version history, then the new
    version-controlled member MUST be just a binding (i.e., another name for)
    that existing version-controlled resource...
  </t>
</x:blockquote>
<t>
  Thus, "/ws1/CollX/test" and "/ws1/CollY/test" will be bindings to the same
  resource R, and have identical DAV:resource-id properties.
</t>
</section>

<section title="Security Considerations" anchor="security.considerations">
<t>
  This section is provided to make WebDAV implementors aware of the security
  implications of this protocol.
</t>
<t>
  All of the security considerations of HTTP/1.1 (<xref target="RFC2616" x:fmt="," x:sec="15"/>) and the WebDAV Distributed
  Authoring Protocol specification (<xref target="RFC4918" x:fmt="," x:sec="20"/>) also apply to this protocol specification.
  In addition, bindings introduce several new security concerns and increase
  the risk of some existing threats.  These issues are detailed below.
</t>

<section title="Privacy Concerns" anchor="privacy.concerns">
<t>
  In a context where cross-server bindings are supported, creating bindings on
  a trusted server may make it possible for a hostile agent to induce users to
  send private information to a target on a different server.
</t>
</section>

<section title="Bind Loops" anchor="bind.loops.privacy.concerns">
<t>
  Although bind loops were already possible in HTTP 1.1, the introduction
  of the BIND method creates a new avenue for clients to create loops
  accidentally or maliciously.  If the binding and its target are on the same
  server, the server may be able to detect BIND requests that would create
  loops.  Servers are required to detect loops that are caused by bindings to
  collections during the processing of any requests with "Depth: infinity".
</t>
</section>

<section title="Bindings, and Denial of Service" anchor="bindings.and.denial.of.service">
<t>
  Denial of service attacks were already possible by posting URIs that were
  intended for limited use at heavily used Web sites.  The introduction of
  BIND creates a new avenue for similar denial of service attacks.  If
  cross-server bindings are supported, clients can now create bindings at 
  heavily used sites to target locations that were not designed for heavy usage.
</t>
</section>

<section title="Private Locations May Be Revealed" anchor="private.locations.may.be.revealed">
<t>
  If the DAV:parent-set property is maintained on a resource, the owners of
  the bindings risk revealing private locations.  The directory structures
  where bindings are located are available to anyone who has access to the
  DAV:parent-set property on the resource.  Moving a binding may reveal its
  new location to anyone with access to DAV:parent-set on its resource.
</t>
</section>

<section title="DAV:parent-set and Denial of Service" anchor="parent-set.and.denial.of.service">
<t>
  If the server maintains the DAV:parent-set property in response to bindings
  created in other administrative domains, it is exposed to hostile attempts to
  make it devote resources to adding bindings to the list.
</t>
</section>
</section>

<section title="Internationalization Considerations" anchor="internationalization.considerations">
<t>
  All internationalization considerations mentioned in <xref target="RFC4918" x:fmt="of" x:sec="19"/> also apply to
  this document.
</t>
</section>

<section title="IANA Considerations" anchor="iana.considerations">

<t>
  <xref target="additional.status.codes"/> defines the HTTP status codes
  <iref item="Status Codes" subitem="208 Already Reported"/>
  <iref item="208 Already Reported (status code)"/>
  208 (Already Reported) and
  <iref item="Status Codes" subitem="506 Loop Detected"/>
  <iref item="506 Loop Detected (status code)"/>
  506 (Loop Detected), to be added to the 
  registry at <eref target="http://www.iana.org/assignments/http-status-codes"/>.
</t>
</section>

<section title="Acknowledgements" anchor="acknowledgments">

<t>
  This document is the collaborative product of the authors and Tyson Chihaya,
  Jim Davis, Chuck Fay and Judith Slein.  It has benefited from thoughtful
  discussion by Jim Amsden, Peter Carlson, Steve Carter, Ken Coar, Ellis Cohen,
  Dan Connolly, Bruce Cragun, Cyrus Daboo, Spencer Dawkins, Mark Day, Werner Donne, Rajiv Dulepet, David
  Durand, Lisa Dusseault, Stefan Eissing, Roy Fielding, Yaron Goland, Joe Hildebrand, Fred Hitt, Alex Hopmann, James Hunt,
  Marcus Jager, Chris Kaler, Manoj Kasichainula, Rohit Khare, Brian Korver, Daniel LaLiberte, 
  Steve Martin, Larry Masinter, Jeff McAffer, Alexey Melnikov, Surendra Koduru Reddy, Max Rible,
  Sam Ruby, Bradley Sergeant, Nick Shelness, John Stracke, John Tigue, John
  Turner, Kevin Wiggen, and other members of the concluded WebDAV working group.
</t>
</section>

  </middle>

  <back>
  
  
<references title="Normative References">

<reference anchor="RFC2119">
  <front>
    <title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement Levels</title>
    <author initials="S." surname="Bradner" fullname="Scott Bradner">
    <organization>Harvard University</organization>
    <address>
      <email>sob@harvard.edu</email>
    </address></author>
    <date month="March" year="1997"/>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
</reference>


<reference anchor="RFC3986">
  <front>
    <title abbrev="URI Generic Syntax">Uniform Resource Identifier (URI): Generic Syntax</title>
    <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
      <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
      <address>
        <email>timbl@w3.org</email>
      </address>
    </author>
    <author initials="R." surname="Fielding" fullname="Roy T. Fielding">
      <organization abbrev="Day Software">Day Software</organization>
      <address>
        <email>fielding@gbiv.com</email>
      </address>
    </author>
    <author initials="L." surname="Masinter" fullname="Larry Masinter">
      <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
      <address>
        <email>LMM@acm.org</email>
      </address>
    </author>
    <date month="January" year="2005"/>
  </front>
  <seriesInfo name="STD" value="66"/>
  <seriesInfo name="RFC" value="3986"/>
</reference>

<reference anchor="RFC4918">
  <front>
    <title>HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV)</title>
    <author initials="L." surname="Dusseault" fullname="Lisa Dusseault" role="editor">
      <organization>CommerceNet</organization>
      <address>
        <postal>
          <street>2064 Edgewood Dr.</street>
          <city>Palo Alto</city> <region>CA</region> <code>94303</code>
          <country>US</country>
        </postal>
        <email>ldusseault@commerce.net</email>
      </address>
    </author>
    <date month="June" year="2007"/>
  </front>
  <seriesInfo name="RFC" value="4918"/>
</reference>

<reference anchor="RFC2616">
  <front>
    <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
    <author initials="R." surname="Fielding" fullname="R. Fielding">
      <organization>University of California, Irvine</organization>
      <address><email>fielding@ics.uci.edu</email></address>
    </author>
    <author initials="J." surname="Gettys" fullname="J. Gettys">
      <organization>W3C</organization>
      <address><email>jg@w3.org</email></address>
    </author>
    <author initials="J." surname="Mogul" fullname="J. Mogul">
      <organization>Compaq Computer Corporation</organization>
      <address><email>mogul@wrl.dec.com</email></address>
    </author>
    <author initials="H." surname="Frystyk" fullname="H. Frystyk">
      <organization>MIT Laboratory for Computer Science</organization>
      <address><email>frystyk@w3.org</email></address>
    </author>
    <author initials="L." surname="Masinter" fullname="L. Masinter">
      <organization>Xerox Corporation</organization>
      <address><email>masinter@parc.xerox.com</email></address>
    </author>
    <author initials="P." surname="Leach" fullname="P. Leach">
      <organization>Microsoft Corporation</organization>
      <address><email>paulle@microsoft.com</email></address>
    </author>
    <author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
      <organization>W3C</organization>
      <address><email>timbl@w3.org</email></address>
    </author>
    <date month="June" year="1999"/>
  </front>
  <seriesInfo name="RFC" value="2616"/>
</reference>

<reference anchor="XML" target="http://www.w3.org/TR/2008/REC-xml-20081126/">
  <front>
    <title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>
    <author initials="T." surname="Bray" fullname="Tim Bray">
      <organization>Textuality and Netscape</organization>
      <address>
        <email>tbray@textuality.com</email>
      </address>
    </author>
    <author initials="J." surname="Paoli" fullname="Jean Paoli">
      <organization>Microsoft</organization>
      <address>
        <email>jeanpa@microsoft.com</email>
      </address>
    </author>
    <author initials="C.M." surname="Sperberg-McQueen" fullname="C. M. Sperberg-McQueen">
      <organization>W3C</organization>
      <address>
        <email>cmsmcq@w3.org</email>
      </address>
    </author>
    <author initials="E." surname="Maler" fullname="Eve Maler">
      <organization>Sun Microsystems</organization>
      <address>
        <email>eve.maler@east.sun.com</email>
      </address>
    </author>
    <author initials="F." surname="Yergeau" fullname="Francois Yergeau">
      <organization/>
    </author>
    <date day="26" month="November" year="2008"/>
  </front>
  <seriesInfo name="W3C" value="REC-xml-20081126"/>
</reference>

</references>

<references title="Informative References">

<reference anchor="RFC3253">
  <front>
    <title>Versioning Extensions to WebDAV (Web Distributed Authoring and Versioning)</title>
    <author initials="G." surname="Clemm" fullname="G. Clemm">
      <organization>Rational Software</organization>
      <address><email>geoffrey.clemm@rational.com</email></address>
    </author>
    <author initials="J." surname="Amsden" fullname="J. Amsden">
      <organization>IBM</organization>
      <address><email>jamsden@us.ibm.com</email></address>
    </author>
    <author initials="T." surname="Ellison" fullname="T. Ellison">
      <organization>IBM</organization>
      <address><email>tim_ellison@uk.ibm.com</email></address>
    </author>
    <author initials="C." surname="Kaler" fullname="C. Kaler">
      <organization>Microsoft</organization>
      <address><email>ckaler@microsoft.com</email></address>
    </author>
    <author initials="J." surname="Whitehead" fullname="J. Whitehead">
      <organization>UC Santa Cruz, Dept. of Computer Science</organization>
      <address><email>ejw@cse.ucsc.edu</email></address>
    </author>
    <date month="March" year="2002"/>
    </front>
  <seriesInfo name="RFC" value="3253"/>
</reference>



  <reference anchor="RFC3744">
    <front>
      <title abbrev="WebDAV Access Control Protocol">Web Distributed Authoring and Versioning (WebDAV) Access Control Protocol</title>
      <author initials="G." surname="Clemm" fullname="Geoffrey Clemm">
        <organization>IBM</organization>
        <address>
          <postal>
            <street>20 Maguire Road</street>
            <city>Lexington</city>
            <region>MA</region>
            <code>02421</code>
          </postal>
          <email>geoffrey.clemm@us.ibm.com</email>
        </address>
      </author>
      <author initials="J. F." surname="Reschke" fullname="Julian F. Reschke">
        <organization abbrev="greenbytes">greenbytes GmbH</organization>
        <address>
          <postal>
            <street>Salzmannstrasse 152</street>
            <city>Muenster</city><region>NW</region><code>48159</code>
            <country>Germany</country>
          </postal>
          <email>julian.reschke@greenbytes.de</email>
        </address>
      </author>
      <author initials="E." surname="Sedlar" fullname="Eric Sedlar">
        <organization>Oracle Corporation</organization>
        <address>
          <postal>
            <street>500 Oracle Parkway</street>
            <city>Redwood Shores</city>
            <region>CA</region>
            <code>94065</code>
          </postal>
          <email>eric.sedlar@oracle.com</email>
        </address>
      </author>
      <author initials="J." surname="Whitehead" fullname="Jim Whitehead">
        <organization abbrev="U.C. Santa Cruz">U.C. Santa Cruz, Dept. of Computer Science</organization>
        <address>
          <postal>
            <street>1156 High Street</street>
            <city>Santa Cruz</city>
            <region>CA</region>
            <code>95064</code>
          </postal>
          <email>ejw@cse.ucsc.edu</email>
        </address>
      </author>
      <date month="May" year="2004"/>
    </front>
    <seriesInfo name="RFC" value="3744"/>
  </reference>

  
  <reference anchor="RFC4122">
    <front>
      <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
      <author fullname="Paul J. Leach" initials="P." surname="Leach">
        <organization>Microsoft</organization>
        <address>
          <email>paulle@microsoft.com</email>
        </address>
      </author>
      <author fullname="Michael Mealling" initials="M." surname="Mealling">
        <organization>Refactored Networks, LLC</organization>
        <address><email>michael@refactored-networks.com</email></address>
      </author>
      <author fullname="Rich Salz" initials="R." surname="Salz">
        <organization>DataPower Technology, Inc.</organization>
        <address><email>rsalz@datapower.com</email></address>
      </author>
      <date year="2005" month="July"/>
    </front>
    <seriesInfo name="RFC" value="4122"/>
  </reference>
</references>





<section title="Change Log (to be removed by RFC Editor before publication)">

<section title="Since draft-ietf-webdav-bind-02">
  <t>
    Add and resolve issues "2.3_COPY_SHARED_BINDINGS" and "2.3_MULTIPLE_COPY".
    Add issue "5.1_LOOP_STATUS" and proposed resolution, but keep it open.
    Add issues "ED_references" and "4_507_status".  Started work on index.
    Rename document to "Binding Extensions to Web Distributed Authoring and
    Versioning (WebDAV)".  Rename "References" to "Normative References".
    Close issue "ED_references".  Close issue "4_507_status".
  </t>
</section>

<section title="Since draft-ietf-webdav-bind-03">
  <t>
    Add and close issues "9.2_redirect_loops", "ED_authors" and "ED_updates".
    Add section about capability
    discovery (DAV header).  Close issues "5.1_LOOP_STATUS".
    Add and resolve new issue "5.1_506_STATUS_STREAMING".
    Update XML spec reference.
    Add issue "locking" and resolve as invalid.
  </t>
</section>

<section title="Since draft-ietf-webdav-bind-04">
  <t>
    Add and close issues "6_precondition_binding_allowed" and
    "6_lock_behaviour".  Add mailing list and issues list pointers
    to front.
  </t>
</section>

<section title="Since draft-ietf-webdav-bind-05">
  <t>
    Editorial fixes.
    Add and resolve issues "1.3_error_negotiation", "2.5_language" and "7.1.1_add_resource_id".
    Add historical issue "4_LOCK_BEHAVIOR" and it's resolution for better tracking.
  </t>
</section>

<section title="Since draft-ietf-webdav-bind-06">
  <t>
    Rewrite Editorial Note. Open and resolve issues "2.6_identical",
    "specify_safeness_and_idempotence" and "ED_rfc2026_ref".
  </t>
</section>

<section title="Since draft-ietf-webdav-bind-07">
  <t>
    Add more index items (no change tracking).
    Add and resolve issues "2.3_copy_to_same", "bind_properties", "bind_vs_ACL",
    "6_rebind_intro" and "rfc2396bis" (actually an action item).
    Fix XML DTD fragment in section 3.3.  Make spelling of "Request-URI"
    consistent.
  </t>
</section>

<section title="Since draft-ietf-webdav-bind-08">
  <t>
    Resolved editorial issues raised by Jim Whitehead in <eref target="http://lists.w3.org/Archives/Public/w3c-dist-auth/2004OctDec/0129.html"/>.
    Add and resolve issues "atomicity", "2_allow_destroy", "2.1_separate_loop_discussion", "2.1.1_bind_loops_vs_locks",
    "2.3_copy_depth_infinity", "2.3_copy_example", "2.3_copy_vs_loops", "2.6_resource-id_vs_versions",
    "3.2_example" and "6_rebind_premissions".
    Add issue "2.6_when_do_ids_change".
    Re-open and resolve "6_rebind_intro".
  </t>
</section>

<section title="Since draft-ietf-webdav-bind-09">
  <t>
    Add and resolve issue "6.1_rebind_vs_locks", adding proposed example text. Add action item "3.1_uuids".
    Close issue "2.6_when_do_ids_change".
    Add and resolve issues "2.6_bindings_vs_properties" and "uri_draft_ref".
  </t>
</section>

<section title="Since draft-ietf-webdav-bind-10">
  <t>
    Resolve action item "3.1_uuids".
    Add and resolve issue "2.7_unlock_vs_bindings".
    Revisit issue "2.6_bindings_vs_properties", and remove the part of the sentence
    that speaks about live properties.
    Update "rfc2396bis" references to "RFC3986".
    Add issue "9_ns_op_and_acl" and add potential resolution.
    Align artwork where applicable (new xml2rfc1.29rc2 feature).
  </t>
</section>

<section title="Since draft-ietf-webdav-bind-11">
  <t>
    Updated [draft-mealling-uuid-urn] to [RFC4122].
    Add statement about live properties in Section 2.6.
  </t>
</section>

<section title="Since draft-ietf-webdav-bind-12">
  <t>
    Updated Author's address. Uppercase "Section" when referring to other
    documents.
  </t>
  <t>
    Updating from RFC2518 to RFC2518bis:
    <list style="symbols">
      <t>Remove own explanation of DTD syntax.</t>
      <t>Remove own definition of precondition/postcondition.</t>
      <t>Remove reference to broken RFC2518 language about DELETE and UNLOCK.</t>
      <t>Remove own definition of DAV: request header.</t>
      <t>Updated "Rationale for Distinguishing Bindings from URI Mappings"
      to reflect the changes in [draft-ietf-webdav-rfc2518bis], making
      proposals for more changes so that the issue can be closed (see also
      <eref target="http://ietf.cse.ucsc.edu:8080/bugzilla/show_bug.cgi?id=227"/>
      and <eref target="http://greenbytes.de/tech/webdav/draft-ietf-webdav-rfc2518bis-12.html#rfc.section.5.2"/>).</t>
    </list>
  </t>
</section>

<section title="Since draft-ietf-webdav-bind-13">
  <t>
    Update [draft-ietf-webdav-rfc2518-bis] to draft 14. Update one incorrect
    section reference. Remove Section "Rationale for Distinguishing Bindings from URI Mappings"
    as [draft-ietf-webdav-rfc2518-bis] now uses the proper definition of
    collection state. Examples use application/xml instead of text/xml MIME
    type.
  </t>
  <t>
    Fix IANA section (there are no IANA considerations).
  </t>
</section>

<section title="Since draft-ietf-webdav-bind-14">
  <t>
    Update [draft-ietf-webdav-rfc2518-bis] to draft 15.
    Update [XML] to 4th edition.
  </t>
  <t>
    Markup ASCII art for box recognition (doesn't affect ASCII version).
  </t>
  <t>
    Identify Julian Reschke as Editor.
  </t>
</section>

<section title="Since draft-ietf-webdav-bind-15">
  <t>
    Fix typo in RFC2119 keywords section (sorry!).
  </t>
  <t>
    Update [draft-ietf-webdav-rfc2518-bis] to draft 17.
  </t>
  <t>
    Add and resolve issue "rfc2518bis-lock-root".
  </t>
</section>

<section title="Since draft-ietf-webdav-bind-16">
<t>
  Add and resolve issue "iana-vs-http-status".
</t>
</section>

<section title="Since draft-ietf-webdav-bind-17">
<t>
  Update rfc2518bis reference to draft 18 (note that the bug
  reported in <eref target="http://ietf.osafoundation.org:8080/bugzilla/show_bug.cgi?id=251"/>
  is still present).
</t>
</section>

<section title="Since draft-ietf-webdav-bind-18">
<t>
  Update: draft-ietf-webdav-rfc2518bis replaced by RFC4918.
</t>
</section>

<section title="Since draft-ietf-webdav-bind-19">
<t>
  Add and resolve issues "2.1.1-bind-loops",
  "2.1.1-cycles",
  "2.5-move-creating-cycles",
  "3.1-clarify-resource-id" and
  "4-precondition-language".
</t>
</section>

<section title="Since draft-ietf-webdav-bind-20">
<t>
  Use "urn:uuid:" instead of "opaquelocktoken:" scheme in examples. Replace RFC2518bis issue
  link by pointer to RFC Errata Page.
</t>
<t>
  Add issues "relation-to-deltav" and "status-codes".
</t>
</section>

<section title="Since draft-ietf-webdav-bind-21">
<t>
  Resolve issues "relation-to-deltav" and "status-codes".
</t>
<t>
  Add correct content length values to examples (no change bars).
</t>
</section>

<section title="Since draft-ietf-webdav-bind-22">
<t>
  Set "Intended Status" to "Experimental".
</t>
<t>
  Update XML reference to "Extensible Markup Language (XML) 1.0 (Fifth Edition)".
</t>
</section>

<section title="Since draft-ietf-webdav-bind-23">
<t>
  Remove surplus white space from one example.
</t>
<t>
  Fix typo: "DAV:binding-set" -&gt; "DAV:parent-set".
</t>
<t>
  Add and resolve issues
  "clarify-alternate-uri",
  "def-integrity",
  "ex-copy-multiple-update",
  "ex-copy-graph", and
  "ex-live-property".
</t>
</section>

<section title="Since draft-ietf-webdav-bind-24">
<t>
  Add and resolve issues
  "clarify-clarify",
  "sec-cons-references",
  "should-not-update-4918",
  "should-update-2616", and
  "webdav-wg-gone".
</t>
</section>

<section title="Since draft-ietf-webdav-bind-25">
<t>
  Add and resolve issue "locking-example".
</t>
</section>


<section title="Since draft-ietf-webdav-bind-26">
<t>
  Add and resolve
  issues "<ed:issueref>bind-vs-hierarchy</ed:issueref>", "<ed:issueref>copying-complex-loops</ed:issueref>" and "<ed:issueref>locking2</ed:issueref>".
</t>
</section>



</section>


  </back>
</rfc>