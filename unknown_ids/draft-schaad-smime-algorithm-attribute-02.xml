<?xml version="1.0" encoding="UTF-8"?><?rfc linefile="1:algorithm.xml"?>
<!-- automatically generated by xml2rfc v1.35 on 2010-11-22T22:10:23Z -->
<?xml-stylesheet type="text/xsl" href="../rfc2629xslt/rfc2629.xslt"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>

<!-- xml2rfc-processed-entity RFC2119 -->
<!-- xml2rfc-processed-entity RFC2634 -->
<!-- xml2rfc-processed-entity RFC5035 -->
<!-- xml2rfc-processed-entity RFC5280 -->
<!-- xml2rfc-processed-entity RFC5652 -->
<!-- xml2rfc-processed-entity RFC5912 -->
<!-- xml2rfc-processed-entity schaad-hash -->
<!-- xml2rfc-processed-entity algorithm-asn -->

<rfc ipr="trust200902" docName="draft-schaad-smime-algorithm-attribute-02" category="std">
	<front>
		<title abbrev="Algorithm Attribute">Signer Info Algorithm Protection Attribute</title>
		<author initials="J." surname="Schaad" fullname="Jim Schaad">
			<organization>Soaring Hawk Consulting</organization>
			<address>
				<postal>
					<street>PO Box 675</street>
					<city>Gold Bar</city>
					<region>WA</region>
					<code>98251</code>
				</postal>
				<email>ietf@augustcellars.com</email>
			</address>
		</author>
		<date/>
		<abstract>
			<t>A new attribute is defined that allows for protection of the digest and signature algorithm structures in an authenticated data or a signer info structure.  Using the attribute includes the algorithm definition information in the integrity protection process.</t>
		</abstract>
	</front>
	<middle>
	  <section title="Introduction">
			<t>In the current definition of <xref target="CMS"/>, there are some fields that are not protected in the process of doing either a signature validation or an authentication validation.  In this document a new signed or authenticated attribute is defined which permits these fields to be validated.</t>
      <t>Taking the SignerInfo structure from CMS, let's look at each of the fields and discuss what is and is not protected by the signature.  The ASN.1 is included here for convenience.  (The analysis of AuthenticatedData is similar.)</t>
<figure>
<artwork>
      SignerInfo ::= SEQUENCE {
        version CMSVersion,
        sid SignerIdentifier,
        digestAlgorithm DigestAlgorithmIdentifier,
        signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,
        signatureAlgorithm SignatureAlgorithmIdentifier,
        signature SignatureValue,
        unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }

</artwork>
</figure>
      <t>
      <list style="hanging">
        <t hangText="version"> is not protected by the signature.  Many implementations of CMS today actually ignore the value of this field.  If the structure decodes then this is considered sufficient to continue processing.  Using most decoders on the market the value of this field does not control how the decoding is actually processed.</t>
        <t hangText="sid"> can be protected by the use of either version of the signing certificate authenticated attribute.  SigningCertificateV2 is defined in <xref target="RFC5035"/>.  SigningCertificate is defined in <xref target="RFC2634"/>.  In addition to allowing for the protection of the signer identifier, the specific certificate is protected by including a hash of the certificate to be used for validation.</t>
        <t hangText="digestAlgorithm"> the digest algorithm used has been implicitly protected by the fact that CMS has only defined one digest algorithm for each hash value length. (The algorithm RIPEM-160 was never standardized).  If newer digest algorithms are defined where there are multiple algorithms for a given hash length, or where parameters are defined for a specific algorithm, this implicit protection will no longer exist.</t>
        <t hangText="signedAttributes"> are directly protected by the signature when they are present.  The DER encoding of this value is what is actually hashed for the signature computation.</t>
        <t hangText="signatureAlgorithm"> has been protected by implication in the past.  

The use of an RSA public key implied that the RSA v 1.5 signature algorithm was being used.  The hash algorithm and this fact could be checked by the internal padding defined.  This is no longer true with the addition of the RSA-PSS signature algorithms.

The use of a DSA public key implied the SHA-1 hash algorithm as that was the only possible hash algorithm and the DSA was the public signature algorithm.  This is longer true with the addition of the SHA2 signature algorithms.
</t>

        <t hangText="signature"> is not directly protected by any other value unless a counter signature is present.  However this represents the cryptographically computed value that protects the rest of the signature information.</t>
        <t hangText="unsignedAttrs"> is not protected by the signature value.  It is also explicitly designed not to be protected by the signature value.</t>
      </list></t>

      <t>As can be seen above, the digestAlgorithm and signatureAlgorithm fields have been indirectly rather than explicitly protected in the past.  With new algorithms that have been or are being defined this will no longer be the case.  This document defines and describes a new attribute that will explicitly protect these fields along with the macAlgorithm field of the AuthenticatedData structure.</t>
      <section title="Notation">
	      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
      </section>
      </section>
		<section title="Attribute Structure">
      <t>The following defines the algorithm protection attribute:</t>
<t>The algorithm-protection attribute has the ASN.1 type CMSAlgorithmProtection:</t>
      <figure>
        <artwork>
    aa-cmsAlgorithmProtection ATTRIBUTE ::= {
        TYPE CMSAlgorithmProtection
        IDENTIFIED BY { id-aa-CMSAlgorithmProtection }
    }
</artwork></figure>
      <t>The following object identifier identifies the algorithm-protection attribute:</t>
      <figure>
        <artwork>
    id-aa-CMSAlgorithmProtection OBJECT IDENTIFIER ::= { iso(1)
         member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9) 52 }
</artwork>
      </figure>
<t>The algorithm-protection attribute uses the following ASN.1 type:</t>
<figure><artwork>

   CMSAlgorithmProtection ::= SEQUENCE {
       digestAlgorithm         DigestAlgorithmIdentifier,
       signatureAlgorithm  [1] SignatureAlgorithmIdentifier OPTIONAL,
       macAlgorithm        [2] MessageAuthenticationCodeAlgorithm 
                                        OPTIONAL
   }
   (WITH COMPONENTS { signatureAlgorithm PRESENT,
                      macAlgorithm ABSENT } |
    WITH COMPONENTS { signatureAlgorithm ABSENT,
                      macAlgorithm PRESENT })
</artwork>
      </figure>
      <t> The fields are defined as follows:</t>

      <t>
      <list style="hanging">
        <t hangText="digestAlgorithm"> contains a copy of the SignerInfo.digestAlgorithm field or the AuthenticatedData.digestAlgorithm field including any parameters associated with it.</t>
        <t hangText="signatureAlgorithm"> contains a copy of the signature algorithm identifier and any parameters associated with it.  This field is only populated if the attribute is placed in a SignerInfo.signedAttrs sequence.</t>
        <t hangText="macAlgorithm"> contains a copy of the message authentication code algorithm identifier and any parameters associated with it.  This field is only populated if the attribute is placed in an AuthenticatedData.authAttrs sequence.</t>
      </list></t>

      <t>Exactly one of signatureAlgorithm and macAlgorithm SHALL be present.</t>
      <t>An algorithm-protection attribute MUST have a single attribute value, even though the syntax is defined as a SET OF AttributeValue.  There MUST NOT be zero or multiple instances of AttributeValue present.</t>

      <t>The algorithm-protection attribute MUST be a signed attribute or an authenticated attribute;  it MUST NOT be an unsigned attribute, an unauthenticated attribute or an unprotected attribute.</t>

      <t>The SignedAttributes and AuthAttributes syntax are each defined as a SET of Attributes.  The SignedAttributes in a signerInfo MUST include only one instance of the algorithm protection attribute.  Similarly, the AuthAttributes in an AuthenticatedData MUST include only one instance of the algorithm protection attribute.</t>
		</section>

		<section title="Verification Process">
      <t>The exact verification process depends on the structure being dealt with.</t>
      <t>When doing comparisons of the fields, a field whose value is a default value and one which is explicitly provided MUST compare as equivalent.  It is not required that a field which is absent in one case and present in another case be compared as equivalent.  (This means that an algorithm identifier with absent parameters and one with NULL parameters are not expected to compare as equivalent.)</t>
      <section title="Signed Data Verification Changes">
<t>If a CMS validator supports this attribute, the following additional verification steps MUST be performed:</t>
<t>1.  The SignerInfo.digestAlgorithm field MUST be compared to the digestAlgorithm field in the attribute.  If the fields are not the same (modulo encoding) then signature validation MUST fail.</t>
<t>2.  The SignerInfo.signatureAlgorithm field MUST be compared to the signatureAlgorithm field in the attribute.  If the fields are not the same (modulo encoding) then the signature validation MUST fail.</t>
      </section>
      <section title="Authenticated Data Verification Changes">
<t>If a CMS validator supports this attribute, the following additional verification steps MUST be performed:</t>
<t>1.  The AuthenticatedData.digestAlgorithm field MUST be compared to the digestAlgorithm field in the attribute.  If the fields are not same (modulo encoding) then signature validation MUST fail.</t>
<t>2.  The AuthenticatedData.macAlgorithm field MUST be compared to the macAlgorithm field in the attribute.  If the fields are not the same (modulo encoding) then the signature validation MUST fail.</t>
      </section>
		</section>

		<section title="Security Considerations">
			<t>This document is designed to address the security issue of algorithm substitutions of the algorithms used by the validator.  At this time there is no known method to exploit this type of attack.  If the attack could be successful, then either a weaker algorithm could be substituted for a stronger algorithm or the parameters could be modified by an attacker to change the behavior of the hashing algorithm used.  (One example would be changing the initial parameter value for <xref target="I-D.schaad-smime-hash-experiment"/>.)</t>
			<t>The attribute defined in this document is to be placed in a location that is protected by the signature or message authentication code.  This attribute does not provide any additional security if placed in an un-signed or un-authenticated location.</t>
		</section>
	</middle>
	<back>
	  <references title="Normative References">
            <?rfc linefile="1:bibxml/reference.RFC.2119.xml"?>

<reference anchor='RFC2119'>

<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date year='1997' month='March' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='http://www.rfc-editor.org/rfc/rfc2119.txt' />
<format type='HTML' octets='17491' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5777' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>
<?rfc linefile="145:algorithm.xml"?>
            <?rfc linefile="1:bibxml/reference.RFC.2634.xml"?>

<reference anchor='RFC2634'>

<front>
<title>Enhanced Security Services for S/MIME</title>
<author initials='P.' surname='Hoffman' fullname='Paul Hoffman'>
<organization>Internet Mail Consortium</organization>
<address>
<postal>
<street>127 Segre Place</street>
<city>Santa Cruz</city>
<region>CA</region>
<code>95060</code>
<country>US</country></postal>
<email>phoffman@imc.org</email></address></author>
<date year='1999' month='June' /></front>

<seriesInfo name='RFC' value='2634' />
<format type='TXT' octets='131153' target='http://www.rfc-editor.org/rfc/rfc2634.txt' />
</reference>
<?rfc linefile="146:algorithm.xml"?>
            <?rfc linefile="1:bibxml/reference.RFC.5035.xml"?>

<reference anchor='RFC5035'>

<front>
<title>Enhanced Security Services (ESS) Update: Adding CertID Algorithm Agility</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'>
<organization /></author>
<date year='2007' month='August' />
<abstract>
<t>In the original Enhanced Security Services for S/MIME document (RFC 2634), a structure for cryptographically linking the certificate to be used in validation with the signature was introduced; this structure was hardwired to use SHA-1.  This document allows for the structure to have algorithm agility and defines a new attribute for this purpose. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5035' />
<format type='TXT' octets='32674' target='http://www.rfc-editor.org/rfc/rfc5035.txt' />
</reference>
<?rfc linefile="147:algorithm.xml"?>
            <?rfc linefile="1:bibxml/reference.RFC.5652.xml"?>

<reference anchor='CMS'>

<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author initials='R.' surname='Housley' fullname='R. Housley'>
<organization /></author>
<date year='2009' month='September' />
<abstract>
<t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content. [STANDARDS TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5652' />
<format type='TXT' octets='126813' target='http://www.rfc-editor.org/rfc/rfc5652.txt' />
</reference>
<?rfc linefile="148:algorithm.xml"?>
            <?rfc linefile="1:bibxml/reference.RFC.5912.xml"?>

<reference anchor='RFC5912'>

<front>
<title>New ASN.1 Modules for the Public Key Infrastructure Using X.509 (PKIX)</title>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'>
<organization /></author>
<author initials='J.' surname='Schaad' fullname='J. Schaad'>
<organization /></author>
<date year='2010' month='June' />
<abstract>
<t>The Public Key Infrastructure using X.509 (PKIX) certificate format, and many associated formats, are expressed using ASN.1.  The current ASN.1 modules conform to the 1988 version of ASN.1.  This document updates those ASN.1 modules to conform to the 2002 version of ASN.1.  There are no bits-on-the-wire changes to any of the formats; this is simply a change to the syntax.  This document is not an Internet Standards Track specification; it is published for informational purposes.</t></abstract></front>

<seriesInfo name='RFC' value='5912' />
<format type='TXT' octets='216154' target='http://www.rfc-editor.org/rfc/rfc5912.txt' />
</reference>
<?rfc linefile="149:algorithm.xml"?>
	  </references>

          <references title="Informational References">

            <?rfc linefile="1:bibxml3/reference.I-D.draft-schaad-smime-hash-experiment-01.xml"?>

<reference anchor='I-D.schaad-smime-hash-experiment'>
<front>
<title>Experiment: Hash functions with parameters in CMS and S/MIME</title>

<author initials='J' surname='Schaad' fullname='Jim Schaad'>
    <organization />
</author>

<date month='December' day='17' year='2009' />

<abstract><t>New hash algorithms are being developed and these algorithms may include parameters.  CMS has not currently defined any hash algorithms with parameters, but anecdotic evidence suggests that defining one could cause major problems.  In this document we define just such an algorithm and describe how to use it so that we can run experiments to find out how bad including hash parameters will be.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-schaad-smime-hash-experiment-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-schaad-smime-hash-experiment-01.txt' />
</reference>
<?rfc linefile="154:algorithm.xml"?>
          </references>

	  <section title="ASN.1 Module">
<?rfc linefile="1:ForDraft/algorithm.incl"?><figure><artwork>
CMSAlgorithmProtectionAttribute
  { iso(1) member-body(2) us(840) rsadsi(113549)
    pkcs(1) pkcs-9(9) smime(16) modules(0)
    id-mod-cms-algorithmProtect(52) }
DEFINITIONS IMPLICIT TAGS ::= 
BEGIN
 IMPORTS

   -- Cryptographic Message Syntax (CMS) [RFC5652]

   DigestAlgorithmIdentifier, MessageAuthenticationCodeAlgorithm,
   SignatureAlgorithmIdentifier
   FROM  CryptographicMessageSyntax-2009
     { iso(1) member-body(2) us(840) rsadsi(113549)
       pkcs(1) pkcs-9(9) smime(16) modules(0) id-mod-cms-2004-02(41) }

   -- Common PKIX structures [RFC5912]

   ATTRIBUTE
   FROM PKIX-CommonTypes-2009
     { iso(1) identified-organization(3) dod(6) internet(1)
       security(5) mechanisms(5) pkix(7) id-mod(0)
       id-mod-pkixCommon-02(57)};

   -- 
   --  The CMS Algorithm Protection attribute is a Signed Attribute or
   --  an Authenticated Attribute.
   --
   --  Add this attribute to SignedAttributesSet in [RFC5652]
   --  Add this attribute to AuthAttriuteSet in [RFC5652]
   --

   aa-cmsAlgorithmProtection ATTRIBUTE ::= {
      TYPE CMSAlgorithmProtection 
      IDENTIFIED BY { id-aa-cmsAlgorithmProtect }
   }

   id-aa-cmsAlgorithmProtect OBJECT IDENTIFIER ::= {
      iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
      pkcs9(9) 52 }

   CMSAlgorithmProtection ::= SEQUENCE {
      digestAlgorithm         DigestAlgorithmIdentifier,
      signatureAlgorithm  [1] SignatureAlgorithmIdentifier OPTIONAL,
      macAlgorithm        [2] MessageAuthenticationCodeAlgorithm 
                                        OPTIONAL
   }
   (WITH COMPONENTS { signatureAlgorithm PRESENT,
                      macAlgorithm ABSENT } |
    WITH COMPONENTS { signatureAlgorithm ABSENT,
                      macAlgorithm PRESENT })

END
</artwork></figure>
<?rfc linefile="158:algorithm.xml"?>
		</section>
	</back>
</rfc>
