<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd' [
<!ENTITY rfc2119 SYSTEM 'bibxml/reference.RFC.2119.xml'>
<!ENTITY rfc2244 SYSTEM 'bibxml/reference.RFC.2244.xml'>
<!ENTITY rfc2246 SYSTEM 'bibxml/reference.RFC.2246.xml'>
<!ENTITY rfc2426 SYSTEM 'bibxml/reference.RFC.2426.xml'>
<!ENTITY rfc2616 SYSTEM 'bibxml/reference.RFC.2616.xml'>
<!ENTITY rfc2782 SYSTEM 'bibxml/reference.RFC.2782.xml'>
<!ENTITY rfc2818 SYSTEM 'bibxml/reference.RFC.2818.xml'>
<!ENTITY rfc3253 SYSTEM 'bibxml/reference.RFC.3253.xml'>
<!ENTITY rfc3688 SYSTEM 'bibxml/reference.RFC.3688.xml'>
<!ENTITY rfc3744 SYSTEM 'bibxml/reference.RFC.3744.xml'>
<!ENTITY rfc4511 SYSTEM 'bibxml/reference.RFC.4511.xml'>
<!ENTITY rfc4790 SYSTEM 'bibxml/reference.RFC.4790.xml'>
<!ENTITY rfc4918 SYSTEM 'bibxml/reference.RFC.4918.xml'>
<!ENTITY rfc5051 SYSTEM 'bibxml/reference.RFC.5051.xml'>
<!ENTITY W3C.REC-xml-20060816 SYSTEM 'bibxml4/reference.W3C.REC-xml-20060816.xml'>
<!ENTITY idCurrentPrincipal SYSTEM 'bibxml3/reference.I-D.sanchez-webdav-current-principal.xml'>
<!ENTITY idVCardbis SYSTEM 'bibxml3/reference.I-D.ietf-vcarddav-vcardrev.xml'>
<!ENTITY idMkcolExt SYSTEM 'bibxml3/reference.I-D.ietf-vcarddav-webdav-mkcol.xml'>
]> 
<?rfc toc="yes"?>
<?rfc tocdepth="4"?><!-- default = 3 -->
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" ipr="full3978" docName="draft-ietf-vcarddav-carddav-02">
    <front>
        <title>vCard Extensions to WebDAV (CardDAV)</title> 
        <author initials="C." surname="Daboo" fullname="Cyrus Daboo">
            <organization abbrev="Apple">
                Apple Inc.
            </organization>
            <address>
                <postal>
                    <street>
                        1 Infinite Loop
                    </street>
                    <city>
                        Cupertino
                    </city>
                    <region>
                        CA
                    </region>
                    <code>95014</code> 
                    <country>
                        USA
                    </country>
                </postal>
                <email>
                    cyrus@daboo.name
                </email>
                <uri>
                    http://www.apple.com/
                </uri>
            </address>
        </author>
        <date />
        <area>
            Applications 
        </area>
        <abstract>
            <t>
                This document defines extensions to the Web Distributed Authoring and Versioning (WebDAV) protocol to specify a standard way of accessing, managing, and sharing contact information based on the vCard format.
            </t>
            <t>
            	Discussion of this Internet-Draft is taking place on the mailing list &lt;http://lists.osafoundation.org/mailman/listinfo/ietf-carddav&gt;.
   			</t>
        </abstract>
    </front>
    <middle>
        <section title="Introduction and Overview">
            <t>
                Address books containing contact information are a key component of personal information management tools, such as email, calendaring and scheduling, and instant messaging clients. To date several protocols have been used for remote access to contact data, including Lightweight Directory Access Protocol <xref target="RFC4511">LDAP</xref>, Internet Message Support Protocol <xref target='IMSP'>IMSP</xref> and Application Configuration Access Protocol <xref target="RFC2244">ACAP</xref>, together with SyncML used for synchronization of such data.
            </t>
			<t>
				<xref target="RFC4918">WebDAV</xref> offers a number of advantages as a framework or basis for address book access and management. Most of these advantages boil down to a significant reduction in design costs, implementation costs, interoperability test costs and deployment costs.
			</t>
			<t>
				The key features of address book support with WebDAV are:
			</t>
			<t>
			<list style="numbers">
				<t>
					Ability to use multiple address books with hierarchical layout.
				</t>
				<t>
					Ability to control access to individual address books and address entries.
				</t>
				<t>
					Principal namespace can be used to enumerate and find other users on the system.
				</t>
				<t>
					Server-side searching of address data, avoiding the need for clients to download an entire address book in order to do a quick address 'expansion' operation.
				</t>
				<t>
					Well-defined internationalization support through standard HTTP.
				</t>
				<t>
					Use of vCards for well defined address schema to enhance client interoperability.
				</t>
				<t>
					Many limited clients (e.g. mobile devices) contain an HTTP stack which makes implementing WebDAV much easier than other protocols.
				</t>
			</list>
			</t>
			<t>
				The key disadvantages of address book support in WebDAV are:
			</t>
			<t>
			<list style="numbers">
				<t>
					Lack of change notification. Many of the alternative protocols also lack this ability. However, an extension for push notifications could easily be developed.
				</t>
				<t>
					Stateless nature of protocol can result in more data being sent with each transaction to maintain per-user session across requests.
				</t>
			</list>
			</t>
			<t>
				<xref target="RFC2426">vCard</xref> is a MIME directory profile aimed at encapsulating personal addressing and contact information about people. The specification of vCard was originally done by the Versit consortium, with a subsequent 3.0 version standardized by the <xref target="RFC2426">IETF</xref>. vCard is in wide spread use in email clients and mobile devices as a means of encapsulating address information for transport via email, or for import/export and synchronization operations.
			</t>
			<t>
				An update to vCard is currently being developed <xref target="I-D.ietf-vcarddav-vcardrev"/> and is compatible with this specification.
			</t>
        </section>
        <section title="Conventions" anchor="conventions">
            <section title="Notational Conventions">
                <t>
                    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119" />.
                </t>
                <t>
                    The term "protected" is used in the Conformance field of property definitions as defined in Section 15 of <xref target="RFC4918"/>.
                </t>
                <t>
                    When XML element types in the namespaces "DAV:" and "urn:ietf:params:xml:ns:carddav" are referenced in this document outside of the context of an XML fragment, the string "DAV:" and "CARDDAV:" will be prefixed to the element type names, respectively.
                </t>
            </section>
            <section title="XML Namespaces and Processing">
                <t>
                    Definitions of XML elements in this document use XML element type declarations (as found in XML Document Type Declarations), described in Section 3.2 of <xref  target="W3C.REC-xml-20060816"/>.
                </t>
                <t>
                    The namespace "urn:ietf:params:xml:ns:carddav" is reserved for the XML elements defined in this specification, its revisions, and related CardDAV specifications. XML elements defined by individual implementations MUST NOT use the "urn:ietf:params:xml:ns:carddav" namespace, and instead should use a namespace that they control.
                </t>
                <t>
                    The XML declarations used in this document do not include namespace information. Thus, implementers must not use these declarations as the only way to create valid CardDAV properties or to validate CardDAV XML element type. Some of the declarations refer to XML elements defined by <xref target="RFC4918">WebDAV</xref> which use the "DAV:" namespace. Wherever such XML elements appear, they are explicitly prefixed with "DAV:" to avoid confusion.
                </t>
                <t>
                    Also note that some CardDAV XML element names are identical to WebDAV XML element names, though their namespace differs. Care must be taken not to confuse the two sets of names.
                </t>
                <t>
                    Processing of XML by CardDAV clients and servers MUST follow the rules described in Appendix A of <xref target="RFC4918"/>.
            	</t>
            </section><!-- XML Namespace -->
        </section>
        <section title="Requirements Overview" anchor="requirements">
            <t>
                This section lists what functionality is required of a CardDAV server. To advertise support for CardDAV, a server:
                <list style="symbols">
                    <t>
                        MUST support <xref target="RFC2426">vCard</xref> as a media type for the address object resource format;
                    </t>
                    <t>
                        MUST support <xref target="RFC4918">WebDAV Class 3</xref>;
                    </t>
                    <t>
                        MUST support <xref target="RFC3744">WebDAV ACL</xref>;
                    </t>
                    <t>
                        MUST support secure transport as defined in <xref target="RFC2818"/> using TLS v1.0 <xref target="RFC2246"/> or a subsequent standards-track version of TLS;
                    </t>
                    <t>
                        MUST support ETags <xref target="RFC2616"/> with additional requirements specified in <xref target="address-etag"/> of this document;
                    </t>
                    <t>
                        MUST support all address book REPORTs defined in <xref target="reports"/> of this document; and
                    </t>
                    <t>
                        MUST advertise support on all addressbook collections and address object resources for the addressbook reports in the DAV:supported-report-set property, as defined in <xref target="RFC3253">Versioning Extensions to WebDAV</xref>.
                    </t>
                </list>
            </t>
            <t>
                In addition, a server:
                <list style="symbols">
                    <t>
                        SHOULD support the extended MKCOL method <xref target="I-D.ietf-vcarddav-webdav-mkcol"/> to create address book collections as defined in <xref target="METHOD_MKCOL"/> of this document.
                    </t>
                    <t>
                    	SHOULD support the DAV:current-user-principal-URL property as defined in <xref target="I-D.sanchez-webdav-current-principal"/> to give clients a fast way to locate user principals.
                    </t>
                </list>
            </t>
        </section>
        <section title="Address Book Data Model">
            <t>
                As a brief overview, a CardDAV address book is modeled as a WebDAV collection with a well defined structure; each of these address book collections contain a number of resources representing address objects as their direct child resources. Each resource representing an address object is called an "address object resource".  Each address object resource and each address book collection can be individually locked and have individual WebDAV properties.  Requirements derived from this model are provided in <xref target="vcard-object-resource-restrictions"/> and <xref target="addressbook-collection"/>.
            </t>
            <section title="Address Book Server" anchor="Repository">
                <t>
                    A CardDAV server is an address-aware engine combined with a WebDAV server. The server may include address data in some parts of its URL namespace, and non-address data in other parts.
                </t>
                <t>
                    A WebDAV server can advertise itself as a CardDAV server if it supports the functionality defined in this specification at any point within the root of its repository. That might mean that address data is spread throughout the repository and mixed with non-address data in nearby collections (e.g. address data may be found in /lisa/addressbook/ as well as in /bernard/addressbook/, and non-address data in /lisa/calendars/). Or, it might mean that address data can be found only in certain sections of the repository (e.g. /addressbooks/user/). Address book features are only required in the repository sections that are or contain address objects. So a repository confining address data to the /carddav/ collection would only need to support the CardDAV required features within that collection. 
                </t>
                <t>
                    The CardDAV server is the canonical location for address data and state information. Clients may submit requests to change data or download data. Clients may store address objects offline and attempt to synchronize at a later time. However, clients MUST be prepared for address data on the server to change between the time of last synchronization and when attempting an update, as address book collections may be shared and accessible via multiple clients. Entity tags and other features help this work.
                </t>
            </section>
        </section>
        <section title="Address Book Resources">
            <section title="Address Object Resources"
            anchor="vcard-object-resource-restrictions">
                <t>
                    This specification uses vCard as the default format for address or contact information being stored on the server. However, this specification does allow other formats for address data provided that the server advertises support for those additional formats as described below. The requirements in this section pertain to vCard address data, or formats that follow the semantics of vCard data.
                </t>
                <t>
                    Address object resources contained in address book collections MUST contain a single vCard component only.
                </t>
                <t>
                    vCard components in an address book collection MUST have a UID property value that MUST be unique in the scope of the address book collection in which it is contained.
                </t>
            </section>
            <section title="Address Book Collections" anchor="addressbook-collection">
                <t>
                    Address book collections appear to clients as a WebDAV  collection resource, identified by a URL. An address book collection MUST report the DAV:collection and CARDDAV:addressbook XML elements in the value of the DAV:resourcetype property. The element type declaration for CARDDAV:addressbook is:
                <figure>
                    <artwork><![CDATA[
    <!ELEMENT addressbook EMPTY>
                    ]]></artwork>
                </figure>
                </t>
                <t>
                    An address book collection can be created through provisioning (e.g., automatically created when a user's account is provisioned), or it can be created with the extended MKCOL method (see <xref target="METHOD_MKCOL"/>). This can be used by a user to create additional address books (e.g., "soccer team members") or for users to share an address book (e.g., "sales team contacts"). Note however that this document doesn't define what extra address book collections are for. Users must rely on non-standard cues to find out what an address book collection is for, or use the CARDDAV:addressbook-description property defined in <xref target='addressbook-description'/> to provide such a cue.
                </t>
                <t>
                    The following restrictions are applied to the resources within an address book collection:
                    <list style="letters">
                        <t>
                        Address book collections MUST only contain address object resources and collections that are not address book collections. i.e., the only "top-level" non-collection resources allowed in an address book collection are address object resources. This ensures that address book clients do not have to deal with non-address data in an address book collection, though they do have to distinguish between address object resources and collections when using standard WebDAV techniques to examine the contents of a collection.
                        </t>
                        <t>
                            Collections contained in address book collections MUST NOT contain address book collections at any depth. i.e., "nesting" of address book collections within other address book collections at any depth is not allowed. This specification does not define how collections contained in an address book collection are used or how they relate to any address object resources contained in the address book collection.
                        </t>
                    </list>
                </t>
                <t>
                  Multiple address book collections MAY be children of the same
                  collection.
                </t>
            </section>
        </section>
        <section title="Address Book Feature">
            <section title="Address Book Support" anchor="capability">
                <t>
                    A server supporting the features described in this document, MUST include "addressbook" as a field in the DAV response header from an OPTIONS request on any resource that supports any address book properties, reports, or methods. A value of "addressbook" in the DAV response header MUST indicate that the server supports all MUST level requirements and REQUIRED features specified in this document.
                </t>
                <section title="Example: Using OPTIONS for the Discovery of Support for CardDAV">
                    <figure>
                        <preamble>&gt;&gt; Request &lt;&lt;</preamble>
                        <artwork><![CDATA[
OPTIONS /addressbooks/users/ HTTP/1.1
Host: addressbook.example.com
                        ]]></artwork>
                    </figure>
                    <figure>
                        <preamble>&gt;&gt; Response &lt;&lt;</preamble>
                        <artwork><![CDATA[
HTTP/1.1 200 OK
Allow: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, COPY, MOVE
Allow: MKCOL, PROPFIND, PROPPATCH, LOCK, UNLOCK, REPORT, ACL
DAV: 1, 2, 3, access-control, addressbook
DAV: extended-mkcol
Date: Sat, 11 Nov 2006 09:32:12 GMT
Content-Length: 0
                        ]]></artwork>
                    </figure>
                    <t>
                        In this example, the OPTIONS response indicates that the server supports CardDAV in this namespace, therefore the '/addressbooks/users/' collection may be used as a parent for address book collections as the extended MKCOL method is available, and as a possible target for REPORT requests for address book reports.
                    </t>
                </section>
<!-- example.capability.discovery -->
            </section>
            <section title="Address Book Properties">
                <section title="CARDDAV:addressbook-description Property" anchor="addressbook-description">
                    <t>
                        <list style="hanging">
                            <t hangText="Name:">
                                addressbook-description
                            </t>
                            <t hangText="Namespace:">
                                urn:ietf:params:xml:ns:carddav
                            </t>
                            <t hangText="Purpose:">
                                Provides a human-readable description of the address book collection.
                            </t>
                            <t hangText="Value:">
                                Any text.
                            </t>
                            <t hangText="Protected:">
                                SHOULD NOT be protected so that users can specify a description.
                            </t>
                            <t hangText="COPY/MOVE behavior:">
                                This property value SHOULD be preserved in COPY and MOVE operations.
                            </t>
                            <t hangText="allprop behavior:">
                                SHOULD be returned by a PROPFIND DAV:allprop request.
                            </t>
                            <t hangText="Description:">
                                This property contains a description of the address book collection that is suitable for presentation to a user.
                            </t>
                            <t hangText="Definition:">
                                <figure>
                                    <artwork><![CDATA[
    <!ELEMENT addressbook-description (#PCDATA)>
    <!-- PCDATA value: string -->
                                    ]]></artwork>
                                </figure>
                            </t>
                            <t hangText="Example:">
                                <figure>
                                    <artwork><![CDATA[
    <C:addressbook-description xml:lang="fr-CA"
       xmlns:C="urn:ietf:params:xml:ns:carddav"
    >Adresses de Oliver Daboo</C:addressbook-description>
                                    ]]></artwork>
                                </figure>
                            </t>
                        </list>
                    </t>
                </section>
                 
                <section title="CARDDAV:supported-address-data Property" anchor="supported-address-data">
                    <t>
                        <list style="hanging">
                            <t hangText="Name:">
                                supported-address-data
                            </t>
                            <t hangText="Namespace:">
                                urn:ietf:params:xml:ns:carddav
                            </t>
                            <t hangText="Purpose:">
                                Specifies what media types are allowed for address object resources in an address book collection. 
                            </t>
                            <t hangText="Protected:">
                                MUST be protected as it indicates the level of support provided by the server. 
                            </t>
                            <t hangText="COPY/MOVE behavior:">
                                This property value MUST be preserved in COPY and MOVE operations.
                            </t>
                            <t hangText="allprop behavior:">
                                SHOULD be returned by a PROPFIND DAV:allprop request.
                            </t>
                            <t hangText="Description:">
                                The CARDDAV:supported-address-data property is used to specify the media type supported for the address object resources contained in a given address book collection (e.g., vCard version 3.0). Any attempt by the client to store address object resources with a media type not listed in this property MUST result in an error, with the CARDDAV:supported-address-data precondition (<xref target="putpreconditions" />) being violated. In the absence of this property the server MUST only accept data with the media type "text/vcard" and vCard version 3.0, and clients can assume that. 
                            </t>
                            <t hangText="Definition:">
                                <figure>
                                    <artwork><![CDATA[
    <!ELEMENT supported-address-data (address-data+)>
                              ]]></artwork>
                                </figure>
                            </t>
                            <t hangText="Example:">
                                <figure>
                                    <artwork><![CDATA[
    <C:supported-address-data
       xmlns:C="urn:ietf:params:xml:ns:carddav">
      <C:address-data content-type="text/vcard" version="3.0"/>
    </C:supported-address-data>
                              ]]></artwork>
                                </figure>
                            </t>
                        </list>
                    </t>
                </section>
                <!-- supported-address-data -->
                 
                <section title="CARDDAV:max-resource-size Property" anchor="max-resource-size">
                    <t>
                        <list style="hanging">
                            <t hangText="Name:">
                                max-resource-size 
                            </t>
                            <t hangText="Namespace:">
                                urn:ietf:params:xml:ns:carddav 
                            </t>
                            <t hangText="Purpose:">
                                Provides a numeric value indicating the maximum size of a resource in octets that the server is willing to accept when an address object resource is stored in an address book collection. 
                            </t>
                            <t hangText="Value:">
                                Any text representing a numeric value. 
                            </t>
                            <t hangText="Protected:">
                                MUST be protected as it indicates limits provided by the server. 
                            </t>
                            <t hangText="COPY/MOVE behavior:">
                                This property value MUST be preserved in COPY and MOVE operations.
                            </t>
                            <t hangText="allprop behavior:">
                                SHOULD be returned by a PROPFIND DAV:allprop request.
                            </t>
                            <t hangText="Description:">
                                The CARDDAV:max-resource-size is used to specify a numeric value that represents the maximum size in octets that the server is willing to accept when an address object resource is stored in an address book collection. Any attempt to store an address book object resource exceeding this size MUST result in an error, with the CARDDAV:max-resource-size precondition (<xref target="putpreconditions" />) being violated. In the absence of this property the client can assume that the server will allow storing a resource of any reasonable size. 
                            </t>
                            <t hangText="Definition:">
                                <figure>
                                    <artwork><![CDATA[
    <!ELEMENT max-resource-size (#PCDATA)>
    <!-- PCDATA value: a numeric value (positive integer) -->
                              ]]></artwork>
                                </figure>
                            </t>
                            <t hangText="Example:">
                                <figure>
                                    <artwork><![CDATA[
    <C:max-resource-size xmlns:C="urn:ietf:params:xml:ns:carddav"
    >102400</C:max-resource-size>
                              ]]></artwork>
                                </figure>
                            </t>
                        </list>
                    </t>
                </section>
                <!-- max-resource-size -->

            </section><!-- Address Book Collection Properties -->
            <section title="Creating Resources" anchor="creating-resources">
                <t>
                    Address book collections and address object resources may be created by either a CardDAV client or by the CardDAV server. This specification defines restrictions and a data model that both clients and servers MUST adhere to when manipulating such address data. 
                </t>
                <section title="Extended MKCOL Method" anchor="METHOD_MKCOL">
                    <t>
                        An HTTP request using the extended MKCOL method <xref target='I-D.ietf-vcarddav-webdav-mkcol'/> can be used to create a new address book collection resource. A server MAY restrict address book collection creation to particular collections.
                    </t>
                    <t>
                    	To create an address book, the client sends an extended MKCOL request to the server and in the body of the request sets the DAV:resourcetype property to the resource type for an address book collection as defined in <xref target='addressbook-collection'/>.
                    </t>
                    <t>
                        Support for creating address books on the server is only RECOMMENDED and not REQUIRED because some address book stores only support one address book per user (or principal), and those are typically pre-created for each account. However, servers and clients are strongly encouraged to support address book creation whenever possible to allow users to create multiple address book collections to help organize their data better.
                    </t>
                    <t>
                        Clients SHOULD use the DAV:displayname property for a human-readable name of the address book. Clients can either specify the value of the DAV:displayname property in the request body of the extended MKCOL request, or alternatively issue a PROPPATCH request to change the DAV:displayname property to the appropriate value immediately after using the extended MKCOL request. Clients SHOULD NOT set the DAV:displayname property to be the same as any other address book collection at the same URI "level". When displaying address book collections to users, clients SHOULD check the DAV:displayname property and use that value as the name of the address book. In the event that the DAV:displayname property is not set, the client MAY use the last part of the address book collection URI as the name, however that path segment may be "opaque" and not represent any meaningful human-readable text. 
                    </t>
                    <section title="Example - Successful MKCOL request">
                        <t>
                            This example creates an address book collection called /home/lisa/addressbook/ on the server addressbook.example.com with specific values for the properties DAV:resourcetype, DAV:displayname and CARDDAV:addressbook-description.
                        </t>

                        <figure>
                            <preamble>
                                &gt;&gt; Request &lt;&lt;
                            </preamble>
                            <artwork><![CDATA[
MKCOL /home/lisa/addressbook/ HTTP/1.1
Host: addressbook.example.com
Content-Type: text/xml; charset="utf-8"
Content-Length: xxx

<?xml version="1.0" encoding="utf-8" ?>
<D:mkcol xmlns:D="DAV:"
              xmlns:C="urn:ietf:params:xml:ns:carddav">
  <D:set>
    <D:prop>
      <D:resourcetype>
        <D:collection/>
        <C:addressbook/>
      </D:resourcetype>
      <D:displayname>Lisa's Contacts</D:displayname>
      <C:addressbook-description xml:lang="en"
>My primary address book.</C:addressbook-description>
    </D:prop>
  </D:set>
</D:mkcol> 
                    ]]></artwork>
                        </figure>
                        <figure>
                            <preamble>
                                &gt;&gt; Response &lt;&lt;
                            </preamble>
                            <artwork><![CDATA[
HTTP/1.1 201 Created
Cache-Control: no-cache
Date: Sat, 11 Nov 2006 09:32:12 GMT
Content-Type: application/xml; charset="utf-8"
Content-Length: xxxx

<?xml version="1.0" encoding="utf-8" ?>
<D:mkcol-response xmlns:D="DAV:"
              xmlns:C="urn:ietf:params:xml:ns:carddav">
  <D:propstat>
    <D:prop>
      <D:resourcetype/>
      <D:displayname/>
      <C:addressbook-description/>
    </D:prop>
    <D:status>HTTP/1.1 200 OK</D:status>
  </D:propstat>
</D:mkcol-response> 
                    ]]></artwork>
                        </figure>
                    </section>
                </section>
                <section title="Creating Address Object Resources">
                    <t>
                        Clients populate address book collections with address object resources. The URL for each address object resource is entirely arbitrary, and does not need to bear a specific relationship (but might) to the address object resource's vCard properties or other metadata. New address object resources MUST be created with a PUT request targeted at an unmapped URI. A PUT request targeted at a mapped URI updates an existing address object resource.
                    </t>
                    <t>
                        When servers create new resources, it's not hard for the server to choose a unique URL. It's slightly tougher for clients, because a client might not want to examine all resources in the collection, and might not want to lock the entire collection to ensure that a new one isn't created with a name collision. However, there is an HTTP feature to mitigate this. If the client intends to create a new address resource the client SHOULD use the HTTP header "If-None-Match: *" on the PUT request. The Request-URI on the PUT request MUST include the target collection, where the resource is to be created, plus the name of the resource in the last path segment. The "If-None-Match" header ensures that the client will not inadvertently overwrite an existing resource even, if the last path segment turned out to already be used. 
                    </t>
                    <figure>
                        <preamble>
                            &gt;&gt; Request &lt;&lt; 
                        </preamble>
                        <artwork><![CDATA[
PUT /lisa/addressbook/newvcard.vcf HTTP/1.1
If-None-Match: *
Host: addressbook.example.com
Content-Type: text/vcard
Content-Length: xxx

BEGIN:VCARD
VERSION:3.0
FN:Cyrus Daboo
N:Daboo;Cyrus
ADR;TYPE=POSTAL:;2822 Email HQ;Suite 2821;RFCVille;PA;15213;USA
EMAIL;TYPE=INTERNET,PREF:cyrus@example.com
NICKNAME:me
NOTE:Example VCard.
ORG:Self Employed
TEL;TYPE=WORK,VOICE:412 605 0499
TEL;TYPE=FAX:412 605 0705
URL:http://www.example.com
UID:1234-5678-9000-1
END:VCARD
                        ]]></artwork>
                    </figure>
                    <figure>
                        <preamble>
                            &gt;&gt; Response &lt;&lt; 
                        </preamble>
                        <artwork><![CDATA[
HTTP/1.1 201 Created
Date: Thu, 02 Sep 2004 16:53:32 GMT
Content-Length: 0
ETag: "123456789-000-111"
                        ]]></artwork>
                    </figure>
                    <t>
                        The request to change an existing address object resource is the same, but with a specific ETag in the "If-Match" header, rather than the "If-None-Match" header.
                    </t>
                    <t>
                        File names for vCards are commonly suffixed by ".vcf", and clients may choose to use the same convention for URLs. 
                    </t>
                    <section title="Additional Preconditions for PUT, COPY and MOVE" anchor="putpreconditions">
                        <t>
                            This specification creates additional Preconditions for PUT, COPY and MOVE methods. These preconditions apply: 
                            <list style='symbols'>
                                <t>
                                    When a PUT operation of an address object resource into an address book collection occurs.
                                </t>
                                <t>
                                    When a COPY or MOVE operation of an address object resource into an address book collection occurs.
                                </t>
                            </list>
                        </t>
                        <t>
                            The new preconditions are: 
                            <list>
                                <t>
                                    (CARDDAV:supported-address-data): The resource submitted in the PUT request, or targeted by a COPY or MOVE request MUST be a supported media type (i.e., vCard) for address object resources; 
                                </t>
                                <t>
                                    (CARDDAV:valid-address-data): The resource submitted in the PUT request, or targeted by a COPY or MOVE request MUST be valid data for the media type being specified (i.e., MUST contain valid vCard data); 
                                </t>
                                <t>
                                    (CARDDAV:no-uid-conflict): The resource submitted in the PUT request, or targeted by a COPY or MOVE request MUST NOT specify a vCard UID property value already in use in the targeted address book collection or overwrite an existing address object resource with one that has a different UID property value. Servers SHOULD report the URL of the resource that is already making use of the same UID property value in the DAV:href element; 
                                    <figure>
                                        <artwork><![CDATA[
       <!ELEMENT no-uid-conflict (DAV:href)>
                                        ]]></artwork>
                                    </figure>
                                </t>
                                <t>
                                    (CARDDAV:addressbook-collection-location-ok): In a COPY or MOVE request, when the Request-URI is an address book collection, the URI targeted by the Destination HTTP Request header MUST identify a location where an address book collection can be created; 
                                </t>
                                <t>
                                    (CARDDAV:max-resource-size): The resource submitted in the PUT request, or targeted by a COPY or MOVE request MUST have an octet size less than or equal to the value of the CARDDAV:max-resource-size property value (<xref target="max-resource-size" />) on the address book collection where the resource will be stored; 
                                </t>
                            </list>
                        </t>
                    </section>
                    <section title="Non-Standard vCard Properties, and Parameters">
                       <t>
                         vCard provides a "standard mechanism for doing non-standard things". This extension support allows implementers to make use of non-standard properties and parameters whose names are prefixed with the text "X-".
                       </t>
                       <t>
                         Servers MUST support the use of non-standard properties and parameters in address object resources stored via the PUT method.
                       </t>
                       <t>
                         Servers may need to enforce rules for their own "private" properties or parameters, so servers MAY reject any attempt by the client to change those or use values for those outside of any restrictions the server may have. Servers SHOULD ensure that any "private" properties or parameters it uses follow the convention of including a vendor id in the "X-" name, as described in Section 3.8 of <xref target="RFC2426"/>, e.g., "X-ABC-PRIVATE".
                       </t>
                    </section>
                
                    <section title="Address Object Resource Entity Tag"
                             anchor="address-etag">
                      <t>
                        The DAV:getetag property MUST be defined and set to a strong entity tag on all address object resources.
                      </t>
                      <t>
                        A response to a GET request targeted at an address object resource MUST contain an ETag response header field indicating the current value of the strong entity tag of the address object resource.
                      </t>
                      <t>
                        Servers SHOULD return a strong entity tag (ETag header) in a PUT response when the stored address object resource is equivalent by octet equality to the address object resource submitted in the body of the PUT request. This allows clients to reliably use the returned strong entity tag for data synchronization purposes. For instance, the client can do a PROPFIND request on the stored address object resource and have the DAV:getetag property returned, and compare that value with the strong entity tag it received on the PUT response, and know that if they are equal, then the address object resource on the server has not been changed.
                      </t>
                      <t>
                        In the case where the data stored by a server as a result of a PUT request is not equivalent by octet equality to the submitted address object resource, the behavior of the ETag response header is not specified here, with the exception that a strong entity tag MUST NOT be returned in the response. As a result, clients may need to retrieve the modified address object resource (and ETag) as a basis for further changes, rather than use the address object resource it had sent with the PUT request.
                      </t>
                    </section>
                </section>
            </section>
        </section>

        <section title="Address Book Access Control">
            <t>
                CardDAV servers MUST support and adhere to the requirements of <xref target="RFC3744">WebDAV ACL</xref>. WebDAV ACL provides a framework for an extensible set of privileges that can be applied to WebDAV collections and ordinary resources. 
            </t>

            <section anchor="principal.properties" title="Additional Principal Properties">
                <t>
                    This section defines additional properties for WebDAV principal resources as defined in <xref target="RFC3744" />. 
                </t>
                <section anchor="PROPERTY_addressbook-home-set" title="CARDDAV:addressbook-home-set Property">
                    <t>
                        <list style="hanging">
                            <t hangText="Name:">
                                addressbook-home-set 
                            </t>
                            <t hangText="Namespace:">
                                urn:ietf:params:xml:ns:carddav 
                            </t>
                            <t hangText="Purpose:">
                                Identifies the URL of any WebDAV collections that contain address book collections owned by the associated principal resource. 
                            </t>
                            <t hangText="Protected:">
                                MAY be protected if the server has fixed locations in which address books are created. 
                            </t>
                            <t hangText="COPY/MOVE behavior:">
                                This property value MUST be preserved in COPY and MOVE operations.
                            </t>
                            <t hangText="allprop behavior:">
                                SHOULD be returned by a PROPFIND DAV:allprop request.
                            </t>
                            <t hangText="Description:">
                                The CARDDAV:addressbook-home-set property is meant to allow users to easily find the address book collections owned by the principal. Typically, users will group all the address book collections that they own under a common collection. This property specifies the URL of collections that either are address book collections or ordinary collections that have child or descendant address book collections owned by the principal. 
                            </t>
                            <t hangText="Definition:">
                                <figure>
                                    <artwork><![CDATA[
    <!ELEMENT addressbook-home-set (DAV:href*)>
                                    ]]></artwork>
                                </figure>
                            </t>
                            <t hangText="Example:">
                                <figure>
                                    <artwork><![CDATA[
    <C:addressbook-home-set xmlns:D="DAV:"
       xmlns:C="urn:ietf:params:xml:ns:carddav">
      <D:href>http://addressbook.example.com/bernard/addresses/<
      /D:href>
    </C:addressbook-home-set>
                                    ]]></artwork>
                                </figure>
                            </t>
                        </list>
                    </t>
                </section>
        <!-- PROPERTY_addressbook-home-set -->
                <section anchor="PROPERTY_my_address" title="CARDDAV:principal-address Property">
                    <t>
                        <list style="hanging">
                            <t hangText="Name:">
                                principal-address
                            </t>
                            <t hangText="Namespace:">
                                urn:ietf:params:xml:ns:carddav 
                            </t>
                            <t hangText="Purpose:">
                                Identifies the URL of an address object resource that corresponds to the user represented by the principal. 
                            </t>
                            <t hangText="Protected:">
                                MAY be protected if the server provides a fixed location for principal addresses. 
                            </t>
                            <t hangText="COPY/MOVE behavior:">
                                This property value MUST be preserved in COPY and MOVE operations.
                            </t>
                            <t hangText="allprop behavior:">
                                SHOULD be returned by a PROPFIND DAV:allprop request.
                            </t>
                            <t hangText="Description:">
                                The CARDDAV:principal-address property is meant to allow users to easily find contact information for users represented by principals on the system. This property specifies the URL of the address object resource containing the corresponding contact information. 
                            </t>
                            <t hangText="Definition:">
                                <figure>
                                    <artwork><![CDATA[
    <!ELEMENT principal-address (DAV:href)>
                                    ]]></artwork>
                                </figure>
                            </t>
                            <t hangText="Example:">
                                <figure>
                                    <artwork><![CDATA[
    <C:principal-address xmlns:D="DAV:"
       xmlns:C="urn:ietf:params:xml:ns:carddav">
       <D:href>http://addressbook.example.com/system/cyrus.vcf<
       /D:href>
    </C:principal-address>
                                    ]]></artwork>
                                </figure>
                            </t>
                        </list>
                    </t>
                </section>
            </section>
        <!-- principal.properties -->
        </section>
        <!-- Address Book Access Control -->

        <section title="Address Book Reports" anchor="reports">
            <t>
                This section defines the reports that CardDAV servers MUST support on address book collections and address object resources.     
            </t>
            <t>
                CardDAV servers MUST advertise support for these REPORTs on all address book collections and address object resources with the DAV:supported-report-set property defined in Section 3.1.5 of 
                <xref target="RFC3253"/>. CardDAV servers MAY also advertise support for these REPORTs on ordinary collections. 
            </t>
            <t>
                Some of these REPORTs allow address data (from possibly multiple resources) to be returned. 
            </t>
            <section title="REPORT Method" anchor="METHOD_REPORT">
                <t>
                    The REPORT method (defined in Section 3.6 of 
                    <xref target="RFC3253"/>) provides an extensible mechanism for obtaining information about a resource. Unlike the PROPFIND method, which returns the value of one or more named properties, the REPORT method can involve more complex processing. REPORT is valuable in cases where the server has access to all of the information needed to perform the complex request (such as a query), and where it would require multiple requests for the client to retrieve the information needed to perform the same request.
                </t>
                <t>
                    A server that supports this specification MUST support the DAV:expand-property report (defined in Section 3.8 of 
                    <xref target="RFC3253"/>).
                </t>
            </section>
            <section title="Ordinary collections">
                <t>
                    Servers MAY support the REPORTs defined in this document on ordinary collections (collections that are not address book collections) in addition to address book collections or address object resources. In computing responses to the REPORTs on ordinary collections, servers MUST only consider address object resources contained in address book collections that are targeted by the REPORT based on the value of the Depth request header.
                </t>
            </section>

            <section title="Searching Text: Collations" anchor="collation">
            <t>
              Some of the reports defined in this section do text matches of character strings provided by the client and compared to stored address data. Since vCard data is by default encoded in the UTF-8 charset and may include  characters outside of the US-ASCII charset range in some property and parameter values, there is a need to ensure that text matching follows well-defined rules.
            </t>
            <t>
              To deal with this, this specification makes use of the IANA Collation Registry defined in <xref target="RFC4790"/> to specify collations that may be used to carry out the text comparison operations with a well-defined rule.
            </t>
            <t>
              Collations supported by the server MUST support "equality" and "substring" match operations as per <xref target="RFC4790"/> Section 4.2, including the "prefix" and "suffix" options for "substring" matching. CardDAV uses these match options for "equals", "contains", "starts-with" and "ends-with" match operations.
            </t>
            <t>
              CardDAV servers are REQUIRED to support the "i;ascii-casemap" <xref target="RFC4790"/> and "i;unicode-casemap" <xref target="RFC5051"/> collations, and MAY support other collations.
            </t>
            <t>
              Servers MUST advertise the set of collations that they support via the CARDDAV:supported-collation-set property defined on any resource that supports reports that use collations.
            </t>
            <t>
              In the absence of a collation explicitly specified by the client, or if the client specifies the "default" collation identifier (as defined in <xref target="RFC4790"/> Section 3.1), the server MUST default to using "i;unicode-casemap" as the collation.
            </t>
            <t>
              Wildcards (as defined in <xref target="RFC4790"/> Section 3.2) MUST NOT be used in the collation identifier.
            </t>
            <t>
              If the client chooses a collation not supported by the server, the server MUST respond with a CARDDAV:supported-collation precondition error response.
            </t>
            <section anchor="PROPERTY_supported-collation-set" 
                    title="CARDDAV:supported-collation-set Property">
              <t>
                <list style="hanging">
                  <t hangText="Name:">
                    supported-collation-set
                  </t>
                  <t hangText="Namespace:"> 
                    urn:ietf:params:xml:ns:carddav
                  </t>
                  <t hangText="Purpose:">
                    Identifies the set of collations supported by the server for text matching operations.
                  </t>
				  <t hangText="Protected:">
					MUST be protected as it indicates support provided by the server. 
				  </t>
				  <t hangText="COPY/MOVE behavior:">
					This property value MUST be preserved in COPY and MOVE operations.
				  </t>
				  <t hangText="allprop behavior:">
					SHOULD be returned by a PROPFIND DAV:allprop request.
				  </t>
                  <t hangText="Description:">
                    The CARDDAV:supported-collation-set property contains zero or more CARDDAV:supported-collation elements which specify the collection identifiers of the collations supported by the server.
                  </t>
                  <t hangText="Definition:">
                    <figure>
                      <artwork><![CDATA[
      <!ELEMENT supported-collation-set (supported-collation*)>

      <!ELEMENT supported-collation (#PCDATA)>
                      ]]></artwork>
                    </figure>
                  </t>
                  <t hangText="Example:">
                    <figure>
                      <artwork><![CDATA[
   <C:supported-collation-set
     xmlns:C="urn:ietf:params:xml:ns:carddav">
     <C:supported-collation>i;ascii-casemap</C:supported-collation>
     <C:supported-collation>i;octet</C:supported-collation>
     <C:supported-collation>i;unicode-casemap</C:supported-collation>
   </C:supported-collation-set>
                      ]]></artwork>
                    </figure>
                  </t>
                </list>
              </t>
            </section><!-- PROPERTY_supported-collation-set -->
            </section>
            
            <section title="Partial Retrieval">
            <t>Some address book REPORTs defined in this document allow partial
            retrieval of address object resources. A CardDAV client can specify
            what information to return in the body of an address book REPORT
            request.</t>
            
            <t>A CardDAV client can request particular WebDAV property values,
            all WebDAV property values, or a list of the names of the
            resource's WebDAV properties. A CardDAV client can also request
            address data to be returned and whether all vCard properties should be returned or only particular ones. See
            CARDDAV:address-data in <xref target="addressbook_data_element"/>.</t>
                        
            </section><!-- Partial Retrieval -->
            
            <section title="Non-standard properties and parameters">
               <t>
                 Servers MUST support the use of non-standard property or parameter names in the CARDDAV:address-data XML element in address book REPORT requests to allow clients to request that non-standard properties and parameters be returned in the address data provided in the response.
               </t>
               <t>
                 Servers MAY support the use of non-standard property or parameter names in the CARDDAV:prop-filter and CARDDAV:param-filter XML elements specified in the CARDDAV:filter XML element of address book REPORT requests.
               </t>
               <t>
                 Servers MUST fail with the CARDDAV:supported-filter precondition if an address book REPORT request uses a CARDDAV:prop-filter or CARDDAV:param-filter XML element that makes reference to a non-standard property or parameter name which the server does not support queries on.
               </t>
            </section>

            <section title="CARDDAV:addressbook-query Report" anchor="addressbook-query">
                <t>
                    The CARDDAV:addressbook-query REPORT performs a search for all address object resources that match a specified filter. The response of this REPORT will contain all the WebDAV properties and address object resource data specified in the request. In the case of the CARDDAV:address-data XML element, one can explicitly specify the vCard properties that should be returned in the address object resource data that matches the filter. 
                </t>
                <t>
                    The format of this report is modeled on the PROPFIND method. The request and response bodies of the CARDAV:addressbook-query report use XML elements that are also used by PROPFIND. In particular the request can include XML elements to request WebDAV properties to be returned. When that occurs the response should follow the same behavior as PROPFIND with respect to the DAV:multistatus response elements used to return specific property results. For instance, a request to retrieve the value of a property which does not exist is an error and MUST be noted with a response XML element which contains a 404 (Not Found) status value.
                </t>
                <t>
                    Support for the CARDDAV:addressbook-query REPORT is REQUIRED.
                </t>
                <t>
                    Marshalling: 
                    <list>
                        <t>
                            The request body MUST be a CARDDAV:addressbook-query XML element as defined in <xref target="addressbook_query_element" />. 
                        </t>
                        <t>
                            The request MAY include a Depth header. If no Depth header is included, Depth:0 is assumed.
                        </t>
                        <t>
                            The response body for a successful request MUST be a DAV:multistatus XML element (i.e., the response uses the same format as the response for PROPFIND). In the case where there are no response elements, the returned DAV:multistatus XML element is empty. 
                        </t>
                        <t>
                            The response body for a successful CARDDAV:addressbook-query REPORT request MUST contain a DAV:response element for each address object that matched the search filter. address data is returned in the CARDDAV:address-data XML element inside the DAV:propstat XML element. 
                        </t>
                    </list>
                </t>
                <t>
                    Preconditions: 
                    <list>
                    <t>
                        (CARDDAV:supported-address-data): The attributes "content-type" and "version" of the CARDDAV:address-data XML element (see <xref target="addressbook_data_element" />) specify a media type supported by the server for address object resources. 
                    </t>
                    <t>
                        (CARDDAV:supported-filter): The CARDDAV:prop-filter (see <xref target="prop_filter_element" />) and CARDDAV:param-filter (see <xref target="param_filter_element" />) XML elements used in the CARDDAV:filter XML element (see <xref target="filter_element" />) in the REPORT request only make reference to properties and parameters for which queries are supported by the server. i.e., if the CARDDAV:filter element attempts to reference an unsupported property or parameter, this precondition is violated. Servers SHOULD report the CARDDAV:prop-filter or CARDDAV:param-filter for which it does not provide support. 
                        <figure>
                            <artwork><![CDATA[
       <!ELEMENT supported-filter (prop-filter*,
                                   param-filter*)>
                            ]]></artwork>
                        </figure>
                    </t>
                    <t>
                        (CARDDAV:supported-collation): Any XML attribute specifying a collation MUST specify a collation supported by the server as described in <xref target="collation" />. 
                    </t>
                    </list>
                </t>
                <t>
                    Postconditions: 
                    <list>
                        <t>
                            (DAV:number-of-matches-within-limits): The number of matching address object resources must fall within server-specific, predefined limits. For example, this condition might be triggered if a search specification would cause the return of an extremely large number of responses. 
                        </t>
                    </list>
                </t>
                <section title="Example: Partial retrieval of vCards matching NICKNAME">
                    <t>
                        In this example, the client requests the server to search for address object resources that contain a NICKNAME property whose value equals some specific text, and to return specific vCard properties for those vCards found. In addition the DAV:getetag property is also requested and returned as part of the response. 
                    </t>
                    <figure>
                        <preamble>
                            &gt;&gt; Request &lt;&lt;
                        </preamble>
                        <artwork>
<![CDATA[
REPORT /home/bernard/addressbook/ HTTP/1.1
Host: addressbook.example.com
Depth: 1
Content-Type: text/xml; charset="utf-8"
Content-Length: xxxx

<?xml version="1.0" encoding="utf-8" ?>
<C:addressbook-query xmlns:D="DAV:"
                  xmlns:C="urn:ietf:params:xml:ns:carddav">
  <D:prop>
    <D:getetag/>
    <C:address-data>
      <C:prop name="VERSION"/>
      <C:prop name="UID"/>
      <C:prop name="NICKNAME"/>
      <C:prop name="EMAIL"/>
      <C:prop name="FN"/>
    </C:address-data>
  </D:prop>
  <C:filter>
    <C:prop-filter name="NICKNAME">
      <C:text-match collation="i;unicode-casemap"
                    match-type="equals"
      >me</C:text-match>
    </C:prop-filter>
  </C:filter>
</C:addressbook-query>
      ]]>
                        </artwork>
                    </figure>
                    <figure>
                        <preamble>
                            &gt;&gt; Response &lt;&lt;
                        </preamble>
                        <artwork>
<![CDATA[
HTTP/1.1 207 Multi-Status
Date: Sat, 11 Nov 2006 09:32:12 GMT
Content-Type: text/xml; charset="utf-8"
Content-Length: xxxx

<?xml version="1.0" encoding="utf-8" ?>
<D:multistatus xmlns:D="DAV:"
               xmlns:C="urn:ietf:params:xml:ns:carddav">
  <D:response>
    <D:href>/home/bernard/addressbook/v102.vcf</D:href>
    <D:propstat>
      <D:prop>
        <D:getetag>"23ba4d-ff11fb"</D:getetag>
        <C:address-data>BEGIN:VCARD
VERSION:3.0
NICKNAME:me
UID:34222-232@example.com
FN:Cyrus Daboo
EMAIL:daboo@example.com
END:VCARD
</C:address-data>
      </D:prop>
      <D:status>HTTP/1.1 200 OK</D:status>
    </D:propstat>
  </D:response>
</D:multistatus>
      ]]>
                        </artwork>
                    </figure>
                </section>
                <section title="Example: Partial retrieval of vCards matching a full name or email address">
                    <t>
                        In this example, the client requests the server to search for address object resources that contain a FN property whose value contains some specific text or that contain an EMAIL property whose value contains other text, and to return specific vCard properties for those vCards found. In addition the DAV:getetag property is also requested and returned as part of the response. 
                    </t>
                    <figure>
                        <preamble>
                            &gt;&gt; Request &lt;&lt;
                        </preamble>
                        <artwork>
<![CDATA[
REPORT /home/bernard/addressbook/ HTTP/1.1
Host: addressbook.example.com
Depth: 1
Content-Type: text/xml; charset="utf-8"
Content-Length: xxxx

<?xml version="1.0" encoding="utf-8" ?>
<C:addressbook-query xmlns:D="DAV:"
                  xmlns:C="urn:ietf:params:xml:ns:carddav">
  <D:prop>
    <D:getetag/>
    <C:address-data>
      <C:prop name="VERSION"/>
      <C:prop name="UID"/>
      <C:prop name="NICKNAME"/>
      <C:prop name="EMAIL"/>
      <C:prop name="FN"/>
    </C:address-data>
  </D:prop>
  <C:filter test="anyof">
    <C:prop-filter name="FN">
      <C:text-match collation="i;unicode-casemap"
                    match-type="contains"
      >daboo</C:text-match>
    </C:prop-filter>
    <C:prop-filter name="EMAIL">
      <C:text-match collation="i;unicode-casemap"
                    match-type="contains"
      >daboo</C:text-match>
    </C:prop-filter>
  </C:filter>
</C:addressbook-query>
                    ]]>
                        </artwork>
                    </figure>
                    <figure>
                        <preamble>
                            &gt;&gt; Response &lt;&lt;
                        </preamble>
                        <artwork>
<![CDATA[
HTTP/1.1 207 Multi-Status
Date: Sat, 11 Nov 2006 09:32:12 GMT
Content-Type: text/xml; charset="utf-8"
Content-Length: xxxx

<?xml version="1.0" encoding="utf-8" ?>
<D:multistatus xmlns:D="DAV:"
               xmlns:C="urn:ietf:params:xml:ns:carddav">
  <D:response>
    <D:href>/home/bernard/addressbook/v102.vcf</D:href>
    <D:propstat>
      <D:prop>
        <D:getetag>"23ba4d-ff11fb"</D:getetag>
        <C:address-data>BEGIN:VCARD
VERSION:3.0
NICKNAME:me
UID:34222-232@example.com
FN:David Boo
EMAIL:daboo@example.com
END:VCARD
</C:address-data>
      </D:prop>
      <D:status>HTTP/1.1 200 OK</D:status>
    </D:propstat>
  </D:response>
  <D:response>
    <D:href>/home/bernard/addressbook/v104.vcf</D:href>
    <D:propstat>
      <D:prop>
        <D:getetag>"23ba4d-ff11fc"</D:getetag>
        <C:address-data>BEGIN:VCARD
VERSION:3.0
NICKNAME:oliver
UID:34222-23222@example.com
FN:Oliver Daboo
EMAIL:oliver@example.com
END:VCARD
</C:address-data>
      </D:prop>
      <D:status>HTTP/1.1 200 OK</D:status>
    </D:propstat>
  </D:response>
</D:multistatus>
                    ]]>
                        </artwork>
                    </figure>
                </section>
            </section>
            <section title="CARDDAV:addressbook-multiget Report" anchor="addressbook-multiget">
                <t>
                    The CARDDAV:addressbook-multiget REPORT is used to retrieve specific address object resources from within a collection, if the Request-URI is a collection, or to retrieve a specific address object resource, if the Request-URI is a address object resource. This report is similar to the CARDDAV:addressbook-query REPORT (see <xref target="addressbook-query" />), except that it takes a list of DAV:href elements instead of a CARDDAV:filter element to determine which address object resources to return.
                </t>
                <t>
                    Support for the addressbook-multiget REPORT is REQUIRED.
                </t>
                <t>
                    Marshalling: 
                    <list>
                        <t>
                            The request body MUST be a CARDDAV:addressbook-multiget XML element (see <xref target="addressbook_multiget_element" />, which MUST contain at least one DAV:href XML element, and one optional CARDDAV:address-data element as defined in <xref target="addressbook_data_element" />. If the Request-URI is a collection resource, then the DAV:href elements MUST refer to resources within that collection, and they MAY refer to resources at any depth within the collection. As a result the "Depth" header MUST be ignored by the server and SHOULD NOT be sent by the client. If the Request-URI refers to a non-collection resource, then there MUST be a single DAV:href element that is equivalent to the Request-URI. 
                        </t>
                        <t>
                            The response body for a successful request MUST be a DAV:multistatus XML element.
                        </t>
                        <t>
                            The response body for a successful CARDDAV:addressbook-multiget REPORT request MUST contain a DAV:response element for each address object resource referenced by the provided set of DAV:href elements. Address data is returned in the CARDDAV:address-data element inside the DAV:prop element. 
                        </t>
                        <t>
                            In the case of an error accessing any of the provided DAV:href resources, the server MUST return the appropriate error status code in the DAV:status element of the corresponding DAV:response element.
                        </t>
                    </list>
                </t>
                <t>
                    Preconditions: 
                    <list>
                        <t>
                            (CARDAV:supported-address-data): The attributes "content-type" and "version" of the CARDDAV:address-data XML elements (see <xref target="addressbook_data_element" />) specify a media type supported by the server for address object resources. 
                        </t>
                    </list>
                </t>
                <t>
                    Postconditions: 
                    <list>
                        <t>
                            None. 
                        </t>
                    </list>
                </t>
                <section title="Example: CARDDAV:addressbook-multiget Report">
                    <t>
                        In this example, the client requests the server to return specific properties of the address components referenced by specific URIs. In addition the DAV:getetag property is also requested and returned as part of the response. Note that in this example, the resource at http://addressbook.example.com/home/bernard/addressbook/vcf1.vcf does not exist, resulting in an error status response. 
                    </t>
                    <figure>
                        <preamble>
                            &gt;&gt; Request &lt;&lt;
                        </preamble>
                        <artwork>
<![CDATA[
REPORT /home/bernard/addressbook/ HTTP/1.1
Host: addressbook.example.com
Content-Type: text/xml; charset="utf-8"
Content-Length: xxxx

<?xml version="1.0" encoding="utf-8" ?>
<C:addressbook-multiget xmlns:D="DAV:"
                     xmlns:C="urn:ietf:params:xml:ns:carddav">
  <D:prop>
    <D:getetag/>
    <C:address-data>
      <C:prop name="VERSION"/>
      <C:prop name="UID"/>
      <C:prop name="NICKNAME"/>
      <C:prop name="EMAIL"/>
      <C:prop name="FN"/>
    </C:address-data>
  </D:prop>
  <D:href>/home/bernard/addressbook/vcf102.vcf</D:href>
  <D:href>/home/bernard/addressbook/vcf1.vcf</D:href>
</C:addressbook-multiget>
                ]]>
                        </artwork>
                    </figure>
                    <figure>
                        <preamble>
                            &gt;&gt; Response &lt;&lt;
                        </preamble>
                        <artwork>
<![CDATA[
HTTP/1.1 207 Multi-Status
Date: Sat, 11 Nov 2006 09:32:12 GMT
Content-Type: text/xml; charset="utf-8"
Content-Length: xxxx

<?xml version="1.0" encoding="utf-8" ?>
<D:multistatus xmlns:D="DAV:"
               xmlns:C="urn:ietf:params:xml:ns:carddav">
  <D:response>
    <D:href>/home/bernard/addressbook/vcf102.vcf</D:href>
    <D:propstat>
      <D:prop>
        <D:getetag>"23ba4d-ff11fb"</D:getetag>
        <C:address-data>BEGIN:VCARD
VERSION:3.0
NICKNAME:me
UID:34222-232@example.com
FN:Cyrus Daboo
EMAIL:daboo@example.com
END:VCARD
</C:address-data>
      </D:prop>
      <D:status>HTTP/1.1 200 OK</D:status>
    </D:propstat>
  </D:response>
  <D:response>
    <D:href>/home/bernard/addressbook/vcf1.vcf</D:href>
    <D:status>HTTP/1.1 404 Resource not found</D:status>
  </D:response>
</D:multistatus>
      ]]>
                        </artwork>
                    </figure>
                </section>
            </section>
        </section>
        <section title="Guidelines">
<!-- Use of Reports -->
            <section title="Restrict the Properties Returned">
                <t>
                    Clients may not need all the properties in a vCard object when presenting information to the user, or looking up specific items for their email address, for example. Since some property data can be large (e.g., PHOTO or SOUND with inline content) clients can choose to ignore those by only requesting the specific items it knows it will use, through use of the CARDDAV:address-data XML element in the relevant reports.
                </t>
                <t>
                    However, if a client needs to make a change to a vCard, it can only change the entire vCard data via a PUT request. There is no way to incrementally make a change to a set of properties within a vCard object resource. As a result the client will have to cache the entire set of properties on a resource that is being changed.
                </t>
            </section>
            <section title="Use of Locking">
                <t>
                    WebDAV locks can be used to prevent two clients modifying the same resource from either overwriting each others' changes (though that problem can also be solved by using ETags) and also to prevent the user from making changes that will conflict with another set of changes. In a multi-user address book system, the address book client could lock an address object resource while the user is editing the vCard data, and unlock the address object resource when the user finishes or cancels. Locks can also be used to prevent changes while data is being reorganized. For example, an address book client might lock two address book collections prior to moving a bunch of address object resources from one to another. 
                </t>
                <t>
                    Clients may request a lock timeout period that is appropriate to the use case. When the user explicitly decides to reserve a resource and prevent other changes, a long timeout might be appropriate, but in cases when the client automatically decides to lock the resource the timeout should be short (and the client can always refresh the lock should it need to). A short lock timeout means that if the client is unable to remove the lock, the other address book users aren't prevented from making changes.
                </t>
            </section>
            <section title="Finding address books">
                <t>
                    Much of the time an address book client (or agent) will discover a new address book's location by being provided directly with the URL. E.g. a user will type his or her own address book location into client configuration information, or cut and paste a URL from email into the address book application. The client need only confirm that the URL points to a resource which is an address book. The client may also be able to browse WebDAV collections to find address book collections.
                </t>
                <t>
                    The choice of HTTP URLs means that address object resources are backward compatible with existing software, but does have the disadvantage that existing software does not usually know to look at the OPTIONS response to that URL to determine what can be done with it. This is somewhat of a barrier for WebDAV usage as well as with CardDAV usage. This specification does not offer a way through this other than making the information available in the OPTIONS response should this be requested.
                </t>
                <t>
                    For address book sharing use cases, one might wish to find the address book belonging to another user. If the other user has an address book in the same repository, that address book can be found by using the principal namespace required by WebDAV ACL support.
                </t>
 
                <t>
                    Because CardDAV requires servers to support <xref target="RFC3744">WebDAV ACL</xref> including principal namespaces, and with the addition of the CARDDAV:addressbook-home-set property, there are a couple options for CardDAV clients to find one's own address book or another user's address book. 
                </t>
                <t>
                    In this case, a DAV:principal-match REPORT is used to find a named property (the CARDDAV:addressbook-home-set) on the Principal-URL of the current user. Using this, a WebDAV client can learn "who am I" and "where are my address books". The REPORT request body looks like this: 
                </t>
                <figure>
                    <artwork><![CDATA[
<?xml version="1.0" encoding="utf-8" ?>
<D:principal-match xmlns:D="DAV:">
  <D:self/>
  <D:prop>
    <C:addressbook-home-set
       xmlns:C="urn:ietf:params:xml:ns:carddav"/>
  </D:prop>
</D:principal-match>
                    ]]></artwork>
                </figure>
                <t>
                    To find other users' address books, the DAV:principal-property-search REPORT can be used to filter on some properties and return others. To search for an address book owned by a user named "Laurie", the REPORT request body would look like this: 
                </t>
                <figure>
                    <artwork><![CDATA[
<?xml version="1.0" encoding="utf-8" ?>
<D:principal-property-search xmlns:D="DAV:">
  <D:property-search>
    <D:prop>
      <D:displayname/>
    </D:prop>
    <D:match>Laurie</D:match>
  </D:property-search>
  <D:prop>
    <C:addressbook-home-set
       xmlns:C="urn:ietf:params:xml:ns:carddav"/>
    <D:displayname/>
  </D:prop>
</D:principal-property-search>
                    ]]></artwork>
                </figure>
                <t>
                    The server performs a case-sensitive or caseless search for a matching string subset of "Laurie" within the DAV:displayname property. Thus, the server might return "Laurie Dusseault", "Laurier Desruisseaux" or "Wilfrid Laurier" all as matching DAV:displayname values, and the address books for each of these. 
                </t>
            </section>
        </section>

        <section title="XML Element Definitions">
             
            <section anchor="addressbook_element" title="CARDDAV:addressbook XML Element">
                <t>
                    <list style="hanging">
                        <t hangText="Name:">
                            addressbook 
                        </t>
                        <t hangText="Namespace:">
                            urn:ietf:params:xml:ns:carddav 
                        </t>
                        <t hangText="Purpose:">
                            Specifies the resource type of an address book collection. 
                        </t>
                        <t hangText="Description:">
                            See <xref target='addressbook-collection' />. 
                        </t>
                        <t hangText="Definition:">
                            <figure>
                                <artwork><![CDATA[
    <!ELEMENT addressbook EMPTY>
                                ]]></artwork>
                            </figure>
                        </t>
                    </list>
                </t>
            </section>
            <section anchor="ELEMENT_supported-collation" title="CARDDAV:supported-collation XML Element">
                <t>
                    <list style="hanging">
                        <t hangText="Name:">
                            supported-collation 
                        </t>
                        <t hangText="Namespace:">
                            urn:ietf:params:xml:ns:carddav 
                        </t>
                        <t hangText="Purpose:">
                            Identifies a single collation via its collation identifier as defined by <xref target="RFC4790" />. 
                        </t>
                        <t hangText="Description:">
                            The CARDDAV:supported-collation contains the text of a collation identifier as described in <xref target='PROPERTY_supported-collation-set' />. 
                        </t>
                        <t hangText="Definition:">
                            <figure>
                                <artwork><![CDATA[
    <!ELEMENT supported-collation (#PCDATA)>
    <!-- PCDATA value: collation identifier -->
                                ]]></artwork>
                            </figure>
                        </t>
                    </list>
                </t>
            </section>
            <!-- ELEMENT_supported-collation -->

            <section title="CARDDAV:addressbook-query XML Element" anchor="addressbook_query_element">
                <t>
                    <list style="hanging">
                        <t hangText="Name:">
                            addressbook-query
                        </t>
                        <t hangText="Namespace:">
                            urn:ietf:params:xml:ns:carddav
                        </t>
                        <t hangText="Purpose:">
                            Defines a report for querying address book data
                        </t>
                        <t hangText="Description:">
                            See <xref target="addressbook-query" />.
                        </t>
                        <t hangText="Definition:">
                        <figure>
                            <artwork><![CDATA[
    <!ELEMENT addressbook-query ((DAV:allprop |
                                  DAV:propname |
                                  DAV:prop)?, filter)>
                            ]]></artwork>
                        </figure>
                </t>
                    </list>
                </t>
            </section>
            <section title="CARDDAV:address-data XML Element" anchor="addressbook_data_element">
                <t>
                    <list style="hanging">
                        <t hangText="Name:">
                            address-data
                        </t>
                        <t hangText="Namespace:">
                            urn:ietf:params:xml:ns:carddav
                        </t>
                        <t hangText="Purpose:">
                        Specifies one of the following:
                        <list style="numbers">
                            <t>
                                A supported media type for address object resources when nested in the CARDDAV:supported-address-data property;
                            </t>
                            <t>
                                The parts of an address object resource should be returned by a given address book REPORT;
                            </t>
                            <t>
                                The content of an address object resource in a response to an address book REPORT.
                            </t>
                        </list>
                        </t>
                        <t hangText="Description:">
                            When nested in the CARDDAV:supported-address-data property, the CARDDAV:address-data XML element specifies a media type supported by the CardDAV server for address object resources.
                        </t>
                        <t>
                            When used in an address book REPORT request, the CARDDAV:address-data XML element specifies which parts of address object resources need to be returned in the response. If the CARDDAV:address-data XML element doesn't contain any CARDDAV:prop elements, address object resources will be returned in their entirety.
                        </t>
                        <t>
                            Finally, when used in an address book REPORT response, the CARDDAV:address-data XML element specifies the content of a address object resource. Given that XML parsers normalize the two-character sequence CRLF (US-ASCII decimal 13 and US-ASCII decimal 10) to a single LF character (US-ASCII decimal 10), the CR character (US-ASCII decimal 13) MAY be omitted in address object resources specified in the CARDDAV:address-data XML element. Furthermore, address object resources specified in the CARDDAV:address-data XML element MAY be invalid per their media type specification if the CARDAV:address-data XML element part of the address book REPORT request did not specify required properties (e.g., UID, etc.) or specified a CARDDAV:prop XML element with the "novalue" attribute set to "yes".
                        </t>
                        <t hangText="Note:">
                            The CARDDAV:address-data XML element is specified in requests and responses inside the DAV:prop XML element as if it were a WebDAV property. However, the CARDDAV:address-data XML element is not a WebDAV property and as such it is not returned in PROPFIND responses nor used in PROPPATCH requests.
                        </t>
                        <t hangText="Note:">
                            The address data embedded within the CARDDAV:address-data XML element MUST follow the standard XML character data encoding rules, including use of &amp;lt;, &amp;gt;, &amp;amp; etc entity encoding or the use of a &lt;![CDATA[ ... ]]&gt; construct. In the later case the vCard data cannot contain the character sequence "]]&gt;" which is the end delimiter for the CDATA section.
                        </t>
                        <t hangText="Definition:">
                        <figure>
                            <artwork><![CDATA[
    <!ELEMENT address-data EMPTY>
    
    when nested in the CARDDAV:supported-address-data property
    to specify a supported media type for address object
    resources;
    
    <!ELEMENT address-data (allprop | prop*)>
    
    when nested in the DAV:prop XML element in an addressbook
    REPORT request to specify which parts of address object
    resources should be returned in the response;
    
    <!ELEMENT address-data (#PCDATA)>
    <!-- PCDATA value: address data -->
    
    when nested in the DAV:prop XML element in an addressbook
    REPORT response to specify the content of a returned
    address object resource.
    
    <!ATTLIST address-data content-type CDATA "text/vcard"
                          version CDATA "3.0">
    <!-- content-type value: a MIME media type -->
    <!-- version value: a version string -->
    
    attributes can be used on all three variants of the
    CALDAV:address-data XML element.
                            ]]></artwork>
                        </figure>
                        </t>
                    </list>
                </t>
                <section title="CARDDAV:allprop XML Element" anchor="allprop_element">
                    <t>
                        <list style="hanging">
                            <t hangText="Name:">
                                allprop
                            </t>
                            <t hangText="Namespace:">
                                urn:ietf:params:xml:ns:carddav
                            </t>
                            <t hangText="Purpose:">
                                Specifies that all properties shall be returned.
                            </t>
                            <t hangText="Description:">
                                This element can be used when the client wants all properties of components returned by a report.
                            </t>
                            <t hangText="Definition:">
                            <figure>
                                <artwork><![CDATA[
    <!ELEMENT allprop EMPTY>
                                ]]></artwork>
                            </figure>
                            </t>
                        </list>
                    </t>
                    <t>
                        NOTE: The CARDDAV:allprop element defined here has the same name as the DAV:allprop element defined in WebDAV. However, the CARDDAV:allprop element defined here uses the "urn:ietf:params:xml:ns:carddav" namespace, as opposed to the "DAV:" namespace used for the DAV:allprop element defined in WebDAV.
                    </t>
                </section>
                <section title="CARDDAV:prop XML Element" anchor="prop_element">
                    <t>
                        <list style="hanging">
                            <t hangText="Name:">
                                prop
                            </t>
                            <t hangText="Namespace:">
                                urn:ietf:params:xml:ns:carddav
                            </t>
                            <t hangText="Purpose:">
                                Defines which properties to return in the response.
                            </t>
                            <t hangText="Description:">
                                The "name" attribute specifies the name of the vCard property to return (e.g., "NICKNAME"). The "novalue" attribute can be used by clients to request that the actual value of the property not be returned (if the "novalue" attribute is set to "yes"). In that case the server will return just the vCard property name and any vCard parameters and a trailing ":" without the subsequent value data. 
                            </t>
                            <t>
                            	vCard allows a "group" prefix to appear before a property name in the vCard data. When the "name" attribute does not specify a group prefix, it MUST match properties in the vCard data without a group prefix or with any group prefix. When the "name" attribute includes a group prefix, it MUST match properties that have exactly the same group prefix and name. e.g.: a "name" set to "TEL" will match "TEL", "X-ABC.TEL", "X-ABC-1.TEL" vCard properties. A "name" set to "X-ABC.TEL" will match an "X-ABC.TEL" vCard property only, it will not match "TEL" or "X-ABC-1.TEL".
                            </t>
                            <t hangText="Definition:">
                            <figure>
                                <artwork><![CDATA[
    <!ELEMENT prop EMPTY>
    
    <!ATTLIST prop name CDATA #REQUIRED
               novalue (yes | no) "no">
    <!-- name value: a vCard property name -->
    <!-- novalue value: "yes" or "no" -->
                                ]]></artwork>
                            </figure>
                            </t>
                        </list>
                    </t>
                    <t>
                        NOTE: The CARDDAV:prop element defined here has the same name as the DAV:prop element defined in WebDAV. However, the CARDDAV:prop element defined here uses the "urn:ietf:params:xml:ns:carddav" namespace, as opposed to the "DAV:" namespace used for the DAV:prop element defined in WebDAV.
                    </t>
                </section><!-- prop -->
            </section>
            <section title="CARDDAV:filter XML Element" anchor="filter_element">
                <t>
                    <list style="hanging">
                        <t hangText="Name:">
                            filter
                        </t>
                        <t hangText="Namespace:">
                            urn:ietf:params:xml:ns:carddav
                        </t>
                        <t hangText="Purpose:">
                            Determines which matching objects are returned.
                        </t>
                        <t hangText="Description:">
                            The "filter" element specifies the search filter used to match address objects that should be returned by a report. The "test" attribute specifies whether any (logical OR) or all (logical AND) of the prop-filter tests needs to match in order for the overall filter to match.
                        </t>
                        <t hangText="Definition:">
                        <figure>
                            <artwork><![CDATA[
    <!ELEMENT filter (prop-filter*)>

    <!ATTLIST filter test (anyof | allof) "anyof">
    <!-- test value:
              anyof  logical OR for prop-filter matches
              allof  logical AND for prop-filter matches -->
                            ]]></artwork>
                        </figure>
                        </t>
                    </list>
                </t>
                <section title="CARDDAV:prop-filter XML Element" anchor="prop_filter_element">
                    <t>
                        <list style="hanging">
                            <t hangText="Name:">
                                prop-filter
                            </t>
                            <t hangText="Namespace:">
                                urn:ietf:params:xml:ns:carddav
                            </t>
                            <t hangText="Purpose:">
                                Limits the search to specific properties.
                            </t>
                            <t hangText="Description:">
                            The CARDDAV:prop-filter XML element specifies a
                            search criteria on a specific vCard property
                            (e.g., NICKNAME). An address object is said
                            to match a CARDDAV:prop-filter if:
                            <list style="symbols">
                                <t>
                                    A property of the type specified by the "name" attribute exists, and the CARDDAV:prop-filter is empty, or it matches the CARDDAV:text-match conditions if specified, and that  CARDDAV:param-filter child elements also match.  The "test" attribute specifies whether any (logical OR) or all (logical AND) of the text-filter and param-filter tests needs to match in order for the overall filter to match.
                                </t>
                            </list>
                            </t>
                            <t>or:
                            <list style="symbols">
                                <t>
                                    A property of the type specified by the "name" attribute does not exist, and the CARDAV:is-not-defined element is specified.
                                </t>
                            </list>
	                        </t>
                            <t>
                            	vCard allows a "group" prefix to appear before a property name in the vCard data. When the "name" attribute does not specify a group prefix, it MUST match properties in the vCard data without a group prefix or with any group prefix. When the "name" attribute includes a group prefix, it MUST match properties that have exactly the same group prefix and name. e.g.: a "name" set to "TEL" will match "TEL", "X-ABC.TEL", "X-ABC-1.TEL" vCard properties. A "name" set to "X-ABC.TEL" will match an "X-ABC.TEL" vCard property only, it will not match "TEL" or "X-ABC-1.TEL".
                            </t>
    	                    <t hangText="Definition:">
                            <figure>
                                <artwork><![CDATA[
    <!ELEMENT prop-filter (is-not-defined |
                           (text-match?, param-filter*))>

    <!ATTLIST prop-filter name CDATA #REQUIRED
                          test (anyof | allof) "anyof">
    <!-- name value: a vCard property name (e.g., "NICKNAME")
      test value:
          anyof  logical OR for text-match/param-filter matches
          allof  logical AND for text-match/param-filter matches -->
                                ]]></artwork>
                            </figure>
                            </t>
                        </list>
                    </t>
                </section>
                <section title="CARDDAV:param-filter XML Element" anchor="param_filter_element">
                    <t>
                        <list style="hanging">
                            <t hangText="Name:">
                                param-filter
                            </t>
                            <t hangText="Namespace:">
                                urn:ietf:params:xml:ns:carddav
                            </t>
                            <t hangText="Purpose:">
                                Limits the search to specific parameter values.
                            </t>
                            <t hangText="Description:">
                                The CARDDAV:param-filter XML element specifies a search criteria on a specific vCard property parameter (e.g., TYPE) in the scope of a given CARDDAV:prop-filter. A vCard property is said to match a CARDDAV:param-filter if:
                                <list style="symbols">
                                    <t>
                                        A parameter of the type specified by the "name" attribute exists, and the CARDDAV:param-filter is empty, or it matches the CARDDAV:text-match conditions if specified.
                                    </t>
                                </list>
                            </t>
                            <t>or:
                                <list style="symbols">
                                    <t>
                                        A parameter of the type specified by the "name" attribute does not exist, and the CARDDAV:is-not-defined element is specified.
                                    </t>
                                </list>
                            </t>
                            <t hangText="Definition:">
                                <figure>
                                <artwork><![CDATA[
    <!ELEMENT param-filter (is-not-defined | text-match)?>

    <!ATTLIST param-filter name CDATA #REQUIRED>
    <!-- name value: a property parameter name (e.g., "TYPE") -->
                                ]]></artwork>
                                </figure>
                            </t>
                        </list>
                    </t>
                </section>
                 
                <section title="CARDDAV:is-not-defined XML Element">
                    <t>
                        <list style="hanging">
                            <t hangText="Name:">
                                is-not-defined
                            </t>
                            <t hangText="Namespace:">
                                urn:ietf:params:xml:ns:carddav
                            </t>
                            <t hangText="Purpose:">
                                Specifies that a match should occur if the enclosing property or parameter does not exist.
                            </t>
                            <t hangText="Description:">
                                The CARDDAV:is-not-defined XML element specifies that a match occurs if the enclosing property or parameter value specified in an address book REPORT request does not exist in the address data being tested.
                            </t>
                            <t hangText="Definition:">
                                <figure>
                                    <artwork><![CDATA[
    <!ELEMENT is-not-defined EMPTY>
                                    ]]></artwork>
                                </figure>
                            </t>
                        </list>
                    </t>
                </section><!-- is-not-defined -->
                 
                <section title="CARDDAV:text-match XML Element" anchor="text_match_element">
                    <t>
                        <list style="hanging">
                            <t hangText="Name:">
                                text-match
                            </t>
                            <t hangText="Namespace:">
                                urn:ietf:params:xml:ns:carddav
                            </t>
                            <t hangText="Purpose:">
                                Specifies a substring match on a property or parameter value.
                            </t>
                            <t hangText="Description:">
                                The CARDDAV:text-match XML element specifies text used for a substring match against the property or parameter value specified in an address book REPORT request.
                            </t>
                            <t>
                                The "collation" attribute is used to select the collation that the server MUST use for character string matching. In the absence of this attribute the server MUST use the "i;unicode-casemap" collation.
                            </t>
                            <t>
                                The "negate-condition" attribute is used to indicate that this test returns a match if the text matches, when the attribute value is set to "no", or return a match if the text does not match, if the attribute value is set to "yes". For example, this can be used to match components with a CATEGORIES property not set to PERSON.
                            </t>
                            <t>
                                The "match-type" attribute is used to indicate the type of match operation to use. Possible choices are:
                                <list>
                                	<t>"equals" - an exact match to the target string</t>
                                	<t>"contains" - a substring match, matching anywhere within the target string</t>
                                	<t>"starts-with" - a substring match, matching only at the start of the target string</t>
                                	<t>"ends-with" - a substring match, matching only at the end of the target string</t>
                                </list>
                            </t>
                            <t hangText="Definition:">
                                <figure>
                                    <artwork><![CDATA[
    <!ELEMENT text-match (#PCDATA)>
    <!-- PCDATA value: string -->

    <!ATTLIST text-match
       collation        CDATA "i;unicode-casemap"
       negate-condition (yes | no) "no"
       match-type (equals|contains|starts-with|ends-with) "contains">
                                    ]]></artwork>
                                </figure>
                            </t>
                        </list>
                    </t>
                </section><!-- text-match -->
            </section>

            <section title="CARDDAV:addressbook-multiget XML Element" anchor="addressbook_multiget_element">
                <t>
                    <list style="hanging">
                        <t hangText="Name:">
                            addressbook-multiget
                        </t>
                        <t hangText="Namespace:">
                            urn:ietf:params:xml:ns:carddav
                        </t>
                        <t hangText="Purpose:">
                            CardDAV report used to retrieve specific address objects via their URIs.
                        </t>
                        <t hangText="Description:">
                            See <xref target="addressbook-multiget" />.
                        </t>
                        <t hangText="Definition:">
                            <figure>
                                <artwork><![CDATA[
    <!ELEMENT addressbook-multiget ((DAV:allprop |
                                     DAV:propname |
                                     DAV:prop)?,
                                     DAV:href+)>
                                ]]></artwork>
                            </figure>
                        </t>
                    </list>
                </t>
            </section>
        </section><!-- XML Element Definitions -->

        <section title="Service Discovery via SRV records">
        	<t>
        		<xref target="RFC2782"/> defines a DNS-based service discovery protocol that has been widely adopted as a means of locating particular services within a local area network and beyond, using SRV RR records.
        	</t>
        	<t>
        		This specification adds two service types for use with SRV records:
        		<list style="hanging">
        			<t hangText="carddav:">
        				Identifies a CardDAV server that uses HTTP without SSL.
        			</t>
        			<t hangText="carddavs:">
        				Identifies a CardDAV server that uses HTTP with SSL.
        			</t>
        		</list>
        	</t>
			<figure>
				<preamble>
					Example: non-SSL service record
				</preamble>
				<artwork>
    _carddav._tcp     SRV 0 1 80 addressbook.example.com.
				</artwork>
			</figure>
			<figure>
				<preamble>
					Example: SSL service
				</preamble>
				<artwork>
    _carddavs._tcp    SRV 0 1 443 addressbook.example.com.
				</artwork>
			</figure>
        </section>

        <section title="Internationalization Considerations">
             
            <t>
                CardDAV allows internationalized strings to be stored and retrieved for the description of address book collections (see <xref target="addressbook-description" />). 
            </t>
            <t>
                The CARDDAV:addressbook-query report (<xref target="addressbook-query" />) includes a text searching option controlled by the CARDDAV:text-match element and details of character handling are covered in the description of that element (see <xref target="text_match_element" />). 
            </t>
        </section>
        <section title="Security Considerations">
            <t>
              HTTP protocol transactions are sent in the clear over the
              network unless protection from snooping is negotiated. This
              can be accomplished by use of TLS as defined in 
              <xref target="RFC2818"/>.
              In particular, if HTTP Basic authentication is available, the server MUST allow TLS to be used at the same time, and SHOULD prevent use of Basic authentication when TLS is not in use. 
            </t>
            <t>
                With the ACL extension present, WebDAV allows control over who can access (read or write) any resource on the WebDAV server. In addition, WebDAV ACL provides for an "inheritance" mechanism, whereby resources may inherit access privileges from other resources. Often the "other" resource is a parent collection of the resource itself. Clients MUST take care to ensure users are aware of which address books may be "private" (i.e. only accessible to them) and which are "shared" (i.e. accessible to others).
            </t>
            <t>
                Since web servers are often the target of automated indexing applications that gather data from the server, analyze it and extract 'interesting' parts, great care must be taken when allowing unauthenticated access to any address book or address object data. Clients MAY choose to warn users when they create address data in a public address book, copy or move address data into public address books, or change access privileges in such a way as to expose address data to unauthenticated users.
            </t>
            <t>
                This specification currently relies on standard HTTP authentication mechanisms for identifying users. These comprise Basic and Digest authentication as well as SSL using client-side certificates.
            </t>
        </section>
        <section title="IANA Consideration">
            <t>
                In addition to the namespaces defined by <xref target="RFC4918">RFC4918</xref> for XML elements, this document uses a URN to describe a new XML namespace conforming to a registry mechanism described in <xref target="RFC3688">RFC3688</xref>. All other IANA considerations mentioned in <xref target="RFC4918">RFC4918</xref> also apply to this document.
            </t>
            <section title="Namespace Registration">
                <t>
                    Registration request for the carddav namespace: 
                </t>
                <t>
                    URI: urn:ietf:params:xml:ns:carddav 
                </t>
                <t>
                    Registrant Contact: See the "Author's Address" section of this document. 
                </t>
                <t>
                    XML: None. Namespace URIs do not represent an XML specification. 
                </t>
            </section>
        </section>
        <section title="Acknowledgments">
            <t>
                Thanks go to Lisa Dusseault and Bernard Desruisseaux for their work on CalDAV, on which CardDAV is heavily based. The following individuals contributed their ideas and support for writing this specification: Stefan Eissing, Arnaud Quillaud, Julian Reschke, Elias Sinderson, Greg Stein, Wilfredo Sanchez.
            </t>
        </section>
    </middle>
    <back>
        <references title="Normative References">
            &rfc2119;
            &rfc2246;
            &rfc2426;
            &rfc2616;
            &rfc2782;
            &rfc2818;
            &rfc3253;
            &rfc3688;
            &rfc3744;
            &rfc4790;
            &rfc4918;
            &rfc5051;
            &W3C.REC-xml-20060816;
            &idCurrentPrincipal;
            &idVCardbis;
            &idMkcolExt;
        </references>
        <references title="Informative References">
            &rfc2244;
            &rfc4511; 
            <reference anchor='IMSP'>
            <front>
            <title>IMSP - Internet Message Support Protocol</title>
            <author initials='J. G.' surname='Myers' fullname='J. G. Myers'>
            <organization /></author>
            <date year='1995' month='June' />
            </front>
            <format type='TXT' target='http://cyrusimap.web.cmu.edu/archives/rfc/imsp.html' />
            </reference>
        </references>
        <section title="Change History (to be removed prior to publication as an RFC)">
            <t>Changes from -01
            <list style="numbers">
                <t>Added text to CARDDAV:prop and CARDDAV:prop-filter elements to explain how vCard "group" prefix on property names is handled.</t>
            </list>
            </t>
            <t>Changes from -00
            <list style="numbers">
                <t>Added section on SRV records.</t>
            </list>
            </t>
        	<t>Changes from draft-daboo-carddav-04
        	<list style='numbers'>
        		<t>Removed text describing other protocols.</t>
        		<t>Added comment about a new vcard spec being developed.</t>
        		<t>Added SHOULD support for the DAV:current-user-principal-URL property.</t>
        		<t>Added "anyof"/"allof" test attribute to query XML elements to support simple or/and combinations of tests.</t>
        	</list>
			</t>
        	<t>Changes from -03
        	<list style='numbers'>
        		<t>Renamed addressbook-data to address-data for consistency.</t>
        		<t>Fixed address-data element definition.</t>
        	</list>
			</t>
            <t>Changes from -02
            <list style="numbers">
            	<t>Replaced MKADDRESSBOOK with extended MKCOL.</t>
            	<t>Now require i;uncide-casemap as a supported collation and make it the default.</t>
            	<t>No longer require i;octet as a supported collation.</t>
            	<t>Allow different types of match operations via the "match-type" attribute on the "text-match" element.</t>
            	<t>Updated to 4918 reference and removed some text/sections duplicating 4918.</t>
            	<t>WebDAV Level 3 now required.</t>
            	<t>TLS requirement text tweaked to match latest text approved by IESG.</t>
            	<t>Added principal-address property to principal resources to allow a vcard to be associated with a principal.</t>
            	<t>XML definition clean-up.</t>
            </list>
            </t>
            <t>Changes from -01
            <list style="numbers">
                <t>Added commentary on SyncML.</t>
                <t>Changed 'adbk' to 'addressbook'.</t>
                <t>Support for MKADDRESSBOOK is now a SHOULD.</t>
                <t>Updated to RFC4790 reference.</t>
                <t>Removed synchronization report.</t>
                <t>Removed BNF conventions section as we have no BNF.</t>
                <t>Reworded and reformatted several items to match the final CalDAV spec.</t>
                <t>Added section on use of nonstandard properties and parameters (as per CalDAV).</t>
                <t>Added section of behavior of ETags (as per CalDAV).</t>
                <t>Generalized the text so that vCard need not be the only format supported by the server (i.e., allow xml version of vCard etc).</t>
                <t>Renamed supported-addressbook-data to supported-address-data.</t>
                <t>Renamed valid-addressbook-data to valid-address-data.</t>
                <t>Now requires "i;unicasemao" collation.</t>
            </list>
            </t>
            <t>Changes from -00
            <list style="numbers">
                <t>Fixed various incorrect references and typos.</t>
                <t>Major changes to sync with latest CalDAV spec behaviors.</t>
            </list>
            </t>
        </section>
    </back>
</rfc>
