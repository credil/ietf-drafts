<?xml version="1.0"?>
<!DOCTYPE rfc  SYSTEM "rfc2629.dtd">
<!ENTITY rfc2119 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
<!ENTITY rfc2863 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2863.xml'>
<!ENTITY rfc0792 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.0792.xml'>
<!ENTITY rfc1812 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.1812.xml'>
<!ENTITY rfc2277 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2277.xml'>
<!ENTITY rfc3629 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3629.xml'>
<!ENTITY rfc4443 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4443.xml'>
<!ENTITY rfc4884 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4884.xml'>

<rfc ipr='full3978' docName='draft-atlas-icmp-unnumbered-04'>
<?rfc toc="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="yes"?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc strict="yes" ?>
<front>
  <title abbrev="ICMP Unnumbered"> Extending ICMP to Identify the Receiving Interface  </title>

  <author initials="A" surname="Atlas" fullname="Alia K. Atlas" role="editor">
    <organization>BT</organization>
    <address>
       <email>alia.atlas@bt.com</email>
    </address>
  </author>

  <author initials="R" surname="Bonica" fullname="Ronald P. Bonica">
    <organization>Juniper Networks</organization>
    <address>
      <postal>
        <street>2251 Corporate Park Drive</street>
        <city>Herndon</city>
        <region>VA</region>
        <code>20171</code>
        <country>USA</country>
      </postal>
      <email>rbonica@juniper.net</email>
    </address>
  </author>

  <author initials="JR" surname="Rivers" fullname="J.R. Rivers">
    <organization>Nuova Systems </organization>
    <address>
      <email>jrrivers@nuovasystems.com</email>
    </address>
  </author>

<author initials="N" surname="Shen" fullname="Naiming Shen">
<organization>Cisco Systems</organization>
<address>
<postal>
<street>225 West Tasman Drive</street>
<city>San Jose</city>
<region>CA</region>
<code>95134</code>
<country>USA</country>
</postal>
<email>naiming@cisco.com</email>
</address>
</author>

<author initials="E" surname="Chen" fullname="Enke Chen">
<organization>Cisco Systems</organization>
<address>
<postal>
<street>170 West Tasman Drive</street>
<city>San Jose</city>
<region>CA</region>
<code>95134</code>
<country>USA</country>
</postal>
<email>enkechen@cisco.com</email>
</address>
</author>


  <date month="Nov" day="16" year="2007" />
  <area>Internet</area>
  <workgroup>Internet</workgroup>
  <keyword>I-D</keyword>
  <keyword>Internet-Draft</keyword>
  <keyword>ICMP MPLS</keyword>

  <abstract><t> This memo defines ICMP extensions, using ICMP
  multi-part messages, through which a router or host can explicitly
  identify the interface upon which an undeliverable datagram
  anrrived. The incoming interface can be identified by ifIndex, name,
  and/or address, as already used in MIBs and by OSPF.  The extensions
  defined herein are particularly useful when troubleshooting networks
  with unnumbered interfaces, parallel interfaces and/or asymmetric
  routing.
</t>
       </abstract>
</front>


<middle>
<section anchor="Conventions" title=" Conventions Used In This Document">
<t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
"RECOMMENDED",  "MAY", and "OPTIONAL" in this document are to be interpreted as described
in <xref target="RFC2119">RFC2119</xref>.</t>
</section>

<section anchor="Introduction" title="Introduction">
<t>
IP devices use the
  <xref target="RFC0792">Internet Control Message Protocol (ICMP)</xref>
  <xref target="RFC4443">(ICMPv6)</xref> to convey control
information.  In particular, when an IP device receives a datagram
that it cannot forward, it may send an ICMP message to the datagram's
originator. Network operators and higher level protocols use these
ICMP messages to detect and diagnose network issues.
</t>

<t>
In the nominal case, the source address of the ICMP message identifies
the interface upon which the non-forwardable datagram arrived. However,
in many cases, the incoming interface is not identified by the ICMP
message at all. Details follow:
</t>

<t> According to <xref target="RFC1812">RFC1812</xref>, when a router
generates an ICMP message, the source address of that ICMP message
MUST be one of the following:
</t>
<t><list style="symbols">
<t> one of the IP addresses associated with the physical interface over
which the ICMP message is transmitted </t>
<t> if that interface has no IP addresses associated with it, the
device's router-id or host-id is used instead.</t>

</list></t>

<t>If the following conditions are true, the source address of the ICMP
message identifies the interface upon which the non-forwardable
datagram arrived:</t>

<t><list style="symbols">

<t>the device originates an ICMP message through the same interface
upon which the non-forwardable datagram was received.</t>
<t>that interface is numbered.</t>
</list></t>

<t>However, the transmitting and incoming interfaces may be different
due to an asymmetric return path, which can occur due to asymmetric
link costs, parallel links or ECMP.  </t>

<t>For ICMPv6, the asymmetric issues need not be an issue, since there
is more flexibility for ICMPv6, as defined in <xref
target="RFC4443">RFC4443</xref>.  For responses to messages sent to
addresses that aren't the router's, the source address must be chosen
as follows:</t>

<t><list style="symbols">
<t>the Source Address of the ICMPv6 packet MUST be a unicast address
belonging to the node.  The address SHOULD be chosen according to the
rules that would be used to select the source address for any other
packet originated by the node, given the destination address of the
packet.  However, it MAY be selected in an alternative way if this
would lead to a more informative choice of address reachable from the
destination of the ICMPv6 packet.</t>
</list></t>

<t>For both ICMP and ICMPv6, when a network uses unnumbered
interfaces, it is not possible to identify the incoming interface.
The extensions defined in this memo permit an ICMP originator to
identify the interface through which the datagram that elicited the
ICMP messages arrived.</t>

<t>Using the extension defined herein, an IP device can explicitly
identify the incoming interface by any or all of the following:</t>

<t><list style="symbols">
<t>IPv4 address</t>
<t>IPv6 address</t>
<t>name</t>
<t>ifIndex</t>
</list></t>

<t>Using the extension defined herein, an IP device can explicitly
identify by the above the outgoing interface over which a datagram
would have been forwarded if that datagram had been deliverable.  This
can be used for creating a downstream map.</t>


<t>The extensions defined herein use the ICMP multi-part message
framework defined in <xref target="RFC4884"/>.  The same backward
compatibility issues that apply to <xref target="RFC4884"/> apply to
these extensions.</t>


</section>

<section anchor="applications" title="Applications">

<section anchor="traceroute" title="Application to TRACEROUTE">
<t>
  ICMP extensions defined in this memo require enhancements (<xref
  target="RFC4884"/>) and provide additional capability to
  TRACEROUTE. The enhanced TRACEROUTE application, like older
  implementations, indicates which nodes the original datagram visited
  en route to its destination. It differs from older implementations
  in that it also reflects the incoming interface on which the
  original triggering packet arrived, even when that interface is
  unnumbered.
</t>
</section>

<section title="Policy and MTU Detection">
<t>

A general application would be to identify which outgoing interface
triggered a given function for the original packet.  For example, if
an ACL drops the packet and Dest Unreachable/Admin Prohibited denies
the packet, being able to identify that might be useful.  Another
example would be support PMTU, since this would allow identification
of which outgoing interface can't support a given MTU size.  
</t>

</section>
</section>

<section anchor="InterfaceObjectClass" title="Interface Information Object">
<t>

  This section defines an ICMP extension object that can be appended
  to the ICMPv4 Time Exceeded, ICMPv4 Destination Unreachable, ICMPv4
  Parameter Problem, ICMPv6 Time Exceeded, and ICMPv6 Destination
  Unreachable messages, as described in <xref
  target="RFC4884"></xref>.

  For the description of the Interface Information Object, the
  incoming interface is the one upon which the packet which triggered
  the ICMP message was received.

  If desired, information about a sub-IP member of the incoming
  interface can be included.  An example of such a sub-IP member would
  be a member of an Ethernet Link Aggregation Group that forms the
  incoming interface.


  To minimize the use of extra octets required for this extension,
  there are four different pieces of information that can appear in an
  Interface Information Object.  
</t>

 <t><list style='numbers'>

  <t> If the interface of interest has at least one IPv4 address and
      the triggering packet was IPv4, then one of the interface's IPv4
      addresses MAY be included. </t>

  <t> If the interface of interest has at least one IPv6 address and
      the triggering packet was IPv6, then one of the interface's IPv6
      addresses MAY be included. </t>

  <t> The ifIndex of the interface of interest MAY be included.  This
      is the ifIndex assigned to the interface by the router in as
      specified by the <xref target="RFC2863">Interfaces Group MIB</xref>. </t>

  <t> An Interface Name Sub-Object, containing a string of no more
      than 62 octets, MAY be included. </t>
  </list></t>

<section title="C-type meaning in an Interface Information Object">

  <t>For this object, the c-type is split into two fields, a 2-bit
  interface-role field and a 6-bit included-information field.  This
  is illustrated below.</t>

<figure anchor="ctype" title="C-Type for the Interface Information Object">
<artwork>
Bit   7     6      |   5       4       3       2       1       0
   +-------+-------+-------+-------+-------+-------+-------+-------+
   | Interface Role| Rsvd  | Rsvd  | index | IP    | Rsvd  | descr |
   +-------+-------+-------+-------+-------+-------+-------+-------+

  Interface Role: This 2-bit field [6:7] indicates the role of the
                  interface being identified.  The enumerated values
                  are given below.
           0 : This object describes the incoming interface.
           1 : This object describes the outgoing interface.
           2 : This object describes a sub-IP member of the
               incoming interface.
           3 : Reserved

  Included Information: This 6-bit field [0:5] indicates what
                     information is included in the object.  The
                     information must be included in the same order
                     as the bits (leftmost, from highest, 5, to
                     lowest, 0,).

   bit
    5 : This bit is reserved for future use and MUST be set to 0 and
        MUST be ignored on receipt.

    4 : This bit is reserved for future use and MUST be set to 0 and
        MUST be ignored on receipt.

    3 : When set, this bit indicates the ifIndex of the interface
        is included.  When clear, the ifIndex is not included.

    2 : When set, this indicates an IP address of the interface
        is included.  When clear, no IP address is included.  The
        version of the IP packet containing the ICMP message will
        indicate the type of IP address.  An IPv4 packet will have an
        IPv4 address and an IPv6 packet will have an IPv6 address.

    1 : This bit is reserved for future use and MUST be set to 0 and
        MUST be ignored on receipt.

    0 : When set, this indicates an Interface Name Sub-object for
        the interface is included.  When clear, it is not included.

</artwork>
</figure>

<t>The information/sub-objects MUST be sent and received inside the
Interface Information Object in the order that they are listed in the
final 6-bits included-information field.  With the exception of the
Interface Name sub-object, the information included does not
self-identify, so this is required to ensure correct parsing.</t>

<t>The sender of an Interface Information Object MUST NOT set the
Interface Role to 3 and an Interface Role value of 3 MUST be ignored
on receipt and the Interface Information Object discarded.  It is
valid (though pointless until additional bits are assigned by IANA) to
receive an Interface Information Object where bits 3,2, and 0 are all
0; this MUST NOT generate a warning or error.</t>

</section>

<section title="Interface Name Sub-Object"> <t>The Interface Name
Sub-Object MUST have a length that is a multiple of 4 octets and MUST
NOT exceed 64 octets. A one octet "charset type" and a one octet
"length" are required and the interface name can be at most 62 octets
long.  

The interface name SHOULD be the MIB-II ifName <xref
target="RFC2863"/> but MAY be some other human-meaningful name of the
interface.  It is useful to rovide the ifName for cross-correlation
with other MIB information and for human-reader familiarity.</t>

<t>The Interface Name Sub-Object consists of three fields.  The first
1-octet field indicates the character set type used by the second
field.  The second field contains the length of the Interface name
Sub-object, including the charset type, the length, and the
human-readable name in octets.  The maximum valid length is 64 octets.
The length is constrained to ensure there is space for the start of
the original packet and additional information.  The third field
contains the human-readable name.</t>

<figure anchor="ifname" title="Interface Name Sub-Object">
<artwork>
octet      0          1        2                   63
     +--------------+--------+---..............-----------------+
     | charset type | length |   interface name octets 1-62     |
     +--------------+--------+---..............-----------------+

</artwork>
</figure>

<t>charset type 0 : This indicates that the human-readable interface
name MUST be provided in the US-ASCII charset <xref
target="US-ASCII"/> using the Default Language <xref
target="RFC2277"/>.</t>

<t>charset type 1 : This indicates that the human-readable interface
name MUST be provided in the UTF-8 charset <xref target="RFC3629"/>
using the Default Language <xref target="RFC2277"/>.</t>

</section>

<section title="Interface Information Object Description">

<t> <xref target="full_icmp"/> shows a full ICMPv4 Time Exceeded
message, including the Interface Information Object, which must be
preceded by an ICMP Extension Structure Header and an ICMP Object
Header. Both are defined in <xref target="RFC4884"></xref>.</t>

<t> <xref target="interface"/> depicts the Interface Information
Object, with two of the valid permutations.</t>

<t>Although all examples show an Interface Name Sub-object of
length 64, this is only for illustration and depicts the maximum
allowable length.</t>

<figure anchor="full_icmp"
    title="ICMPv4 Time Exceeded message with Interface Information Object">
<artwork>

  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |     Type      |     Code      |          Checksum             |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |     unused    |    Length     |          unused               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |      Internet Header + leading octets of original datagram    |
  |                                                               |
  |                           //                                  |
  |                                                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
  | Ver=2 |      (Reserved)       |           Checksum            |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |             Length            |   Class-Num=2 | C-Type=9      | 
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                    Interface ifIndex                          | 
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
  |                Interface Name, 32-bit word 1                  |  
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
 ...                                                              ...
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                Interface Name , 32-bit word 16                |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

</artwork>
</figure>

<figure anchor="interface" title="Interface Information Object">
<artwork>
          Class-Num = 2

  Example 1: Unnumbered Interface with ifIndex and interface name

          C-Type = 00001001b   // Indicates incoming interface
          Length = 40 (4 + 4 + 32)

           0             1             2            3
   +--------------+--------------+--------------+--------------+
   |                    Interface ifIndex                      |
   +--------------+--------------+--------------+--------------+
   |                Interface Name, 32-bit word 1              |
   +--------------+--------------+--------------+--------------+
  ...                                                         ...
   +--------------+--------------+--------------+--------------+
   |                Interface Name , 32-bit word 16             |
   +--------------+--------------+--------------+--------------+


  Example 2: IPv4 interface with IPv4 address,
             ifIndex and interface name

          C-Type = 00001101b   // Indicates incoming interface
          Length = 44 (4 + 4 + 4 + 32)

           0             1             2            3
   +--------------+--------------+--------------+--------------+
   |                    Interface ifIndex                      |
   +--------------+--------------+--------------+--------------+
   |                    IPv4 address                           |
   +--------------+--------------+--------------+--------------+
   |                Interface Name, 32-bit word 1              |
   +--------------+--------------+--------------+--------------+
  ...                                                         ...
   +--------------+--------------+--------------+--------------+
   |                Interface Name, 32-bit word 16             |
   +--------------+--------------+--------------+--------------+


  Example 3: IPv6 interface with IPv6 address and ifIndex

          C-Type = 00001100b   // Indicates incoming interface
          Length = 24 (4 + 4 + 16)

           0             1             2            3
   +--------------+--------------+--------------+--------------+
   |                    Interface ifIndex                      |
   +--------------+--------------+--------------+--------------+
   |                    IPv6 address, 32-bit word 1            |
   +--------------+--------------+--------------+--------------+
   |                    IPv6 address, 32-bit word 2            |
   +--------------+--------------+--------------+--------------+
   |                    IPv6 address, 32-bit word 3            |
   +--------------+--------------+--------------+--------------+
   |                    IPv6 address, 32-bit word 4            |
   +--------------+--------------+--------------+--------------+
 
</artwork>
</figure>

</section>

<section title="Usage">

<t> For each interface described by an included Interface Information
Object, these are the rules for the information to be included.  If
the interface in question is unnumbered, then the Interface
Information Object SHOULD include the ifIndex and SHOULD NOT include
an IP address.  If the interface in question is numbered, then the
Interface Information Object SHOULD include the IP address.  Other
fields MAY be included in the Interface Information Object.</t>

<t>In an ICMP message, more than one Interface Information Object with
a given interface role MUST NOT be included.  Multiple Interface
Information Objects, each with a different interface role, MAY be
included.</t>

</section>
</section>

<section anchor="Security Considerations" title="Security Considerations">

<t>
  This extension can provide the user of traceroute with additional
  network information that is not currently available.  It may be
  desirable to provide this information to a particular network's
  operators and not to others.  If such policy controls are desirable,
  then an implementation could determine what sub-objects to include
  based upon the destination IP address of the ICMP message that will
  contain the sub-objects.</t>

<t>For instance, the IP address may be included for all potential
recipients.  The ifIndex and interface name could be included as well
if the destination IP address is a management address of the network
that has administrative control of the router.
</t>

<t>Another example use case would be where the detailed information in
these extensions may be provided to ICMP destinations within the local
administrative domain, but only traditional information is provided to
'external' or untrusted ICMP destinations.</t>

<t>Another issue is when a device inside a private region generates an
ICMP message with some of these extensions and that ICMP message will
transit a NAT to reach its destination.  A NAT may choose to remove or
overwrite the extensions.</t>

</section>
<section anchor="IANAConsiderations" title="IANA Considerations">
<t>
IANA should should reserve from the ICMP Extension Object registry: 2
for the Interface Information Object. </t>

<t>From the Interface ID Object's c-type, IANA should reserve as follows:</t>

<t><list style='symbols'>
<t> Bit 0: Interface Name Sub-Object included</t>
<t> Bit 1: Unallocated - allocatable with Standards Action</t>
<t> Bit 2: IP address included</t>
<t> Bit 3: ifIndex include </t>
<t> Bit 4: Unallocated - allocatable with Standards Action</t>
<t> Bit 5: Unallocated - allocatable with Standards Action</t>
<t> Bit 6-7: Interface Role field
<list style='symbols'>
<t>Value 0: Incoming Interface</t>
<t>Value 1: Outgoing Interface</t>
<t>Value 2: Incoming Interface - Sub-IP Member</t>
<t>Value 3: Unallocated - allocatable with Standards Action</t>
</list></t>
</list></t>

<t>Additionally, the Interface Name Sub-Object has a 1 octet charset type
field.  IANA should create a registry for it and allocate as follows:</t>

<t><list style='symbols'>
<t>0 : encoded in ASCII</t>
<t>1 : encoded in UTF-8</t>
<t>2-127: Unallocated - allocatable with Standards Action</t>
<t>128-255: Unallocated - allocated on first come basis.</t>
</list></t>

</section>
<section title="Acknowledgements">
<t>The authors would like to thank Carlos Pignataro, Sasha Vainshtein,
and Joe Touch for their comments and suggestions.</t>
</section>

</middle>
<back>
<references title="Normative References">
  &rfc0792;
  &rfc2119;
  &rfc2863;
  &rfc4443;
  &rfc4884;
</references>

<references title="Informative References">
  &rfc1812;
  &rfc2277;
  &rfc3629;

<reference anchor="US-ASCII">
<front>
<title>Coded Character Set -- 7-bit American Standard Code for
Information Interchange, ANSI X3.4-1986</title>
<author><organization/></author>
</front>
</reference>  

</references>
</back>
</rfc>
