<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
     
<!ENTITY RFC5288 SYSTEM
"http://xml.resource.org/public/rfc/bibxml/reference.RFC.5288.xml">
<!ENTITY RFC4347 SYSTEM
"http://xml.resource.org/public/rfc/bibxml/reference.RFC.4347.xml">
<!ENTITY RFC5246 SYSTEM
"http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC5430 SYSTEM
"http://xml.resource.org/public/rfc/bibxml/reference.RFC.5430.xml">
<!ENTITY RFC2119 SYSTEM
"http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6066 SYSTEM
"http://xml.resource.org/public/rfc/bibxml/reference.RFC.6066.xml">
]>
     
<?rfc rfcedstyle="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no" ?>
<?rfc toc="no"?>
<?rfc symrefs="yes"?>

<rfc updates="5246,6066" category="std" ipr="trust200902" docName="draft-mavrogiannopoulos-tls-more-extensions-00" submissionType="IETF">
   <front>
      <title abbrev="Extensions to the TLS protocol">Extensions to the TLS protocol</title>
      <author initials="N." surname="Mavrogiannopoulos" fullname="Nikos
      Mavrogiannopoulos">
         <organization abbrev="KUL">ESAT/COSIC Katholieke Universiteit Leuven</organization>
         <address>
            <postal>
               <street>Kasteelpark Arenberg 10, bus 2446</street>
               <city>Leuven-Heverlee</city>
               <region></region>
               <code>B-3001</code>
               <country>Belgium</country>
            </postal>
            <email>nikos.mavrogiannopoulos@esat.kuleuven.be</email>
<!--            <email>nmav@gnutls.org</email>-->
<!--            <uri>http://www.gnutls.org/</uri>-->
         </address>
      </author>

      <date month="June" year="2011"/>
      <area>Security</area>

<!-- [rfced] Please note that after you have approved the document,
post-xml2rfc changes will be made to update the header and boilerplate as
described in RFC 5741. -->

      <abstract>
         <t>
This memo defines two TLS protocol extensions. The extensions defined
here allow the negotiation of a uniform level of security for the TLS 
authentication algorithms, and make the TLS fallback protocol version negotiation
explicit.
         </t>
      </abstract>
   </front>

   <middle>
      <section anchor="intro" title="Introduction">
        <t>
        In this document we define two new TLS protocol <xref target="RFC5246"/>
        extension types. The "MAC security parameter" and the "Fallback
        protocols". The former is an extension to impose a uniform
        level of security to the TLS authentication algorithms, and the latter
        modifies the TLS protocol version negotiation by making
        explicit the fallback protocol version.
        We elaborate on the rationale for each extension on the subsequent
        sections. 
        </t>
     </section>

     <section anchor="terms" title="Terminology">
        <t>
         This document uses the same notation and terminology used in the TLS Protocol specification
         <xref target="RFC5246"/>.
        </t>
        <t>
         The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
         NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
         "OPTIONAL" in this document are to be interpreted as described in
         <xref target="RFC2119"/>.
        </t>
<t>
In this document we use the term security parameter, to describe the
security level of an authentication algorithm. The security parameter
is in bits and for a parameter X it would imply that on average 2^X operations
would be required for a successful attack. This notion is identical
with the security level of <xref target="ECRYPT"/>. and the "bits of security" 
term defined in <xref target="SP800-57"/>.
</t>
      </section>

      <section anchor="mac" title="MAC security parameter">
      <section anchor="mac:rationale" title="Rationale">
        <t>
        Each TLS ciphersuite specifies among others the MAC algorithm to be
        used for record message authentication, as well as the PRF that
        is used for handshake finished message authentication. Those algorithms serve
        a similar purpose (message authentication), but do not necessarily
        match. 
        For example TLS_RSA_WITH_AES_256_CBC_SHA256
        from the main TLS protocol specification <xref target="RFC5246"/>
        uses the 256-bit HMAC-SHA256 for record message
        authentication and only the 96-bits of the HMAC-SHA256 PRF for finished
        message authentication.
        </t>
        <t>
        Moreover the TLS PRF output size for the handshake finished message
        is fixed for all known ciphersuites to 96-bits, but the MAC algorithm
        for the record messages can be negotiated and typically is the full 
        output of SHA1 or SHA256.
        This discrepancy causes confusion on profiles that explicitly 
        specify a security parameter of 128-bits or 192-bits as in <xref target="RFC5430"/>,
        as it can be argued that the actual security parameter cannot be more
        than 96-bits. That is because in these cases the weakest link in message
        authentication is the MAC for the handshake finished message, 
        which has a security parameter of 96-bits.
        </t>
        <t>
        Having varying security parameters in an authentication protocol
        makes the weakest links best candidates for attacks, thus it
        is desirable to offer a consistent security parameter for the whole
        protocol duration. This will benefit profiles and applications that 
        require a fixed security parameter. Also in case the security parameter
        is lower than the output of the hash function this extension will
        reduce the extra transferred bytes used for the record layer MAC.
        The latter is useful for DTLS <xref target="RFC4347"/> datagrams that are often
        transferred using a small maximum transfer unit.
        </t>
      </section>
      <section anchor="mac:extension" title="The extension">  
        <t>
        To allow negotiation of a consistent security parameter for a
        session's MAC algorithms we add a
        new extension "mac_security_parameter", with value TBD-BY-IANA, 
        to the enumerated ExtensionType defined in <xref target="RFC5246"/>.
        Clients MAY include the extension of type "mac_security_parameter" 
	in the (extended) client hello. The "extension_data" field of this extension MUST
	contain a "MACSecurityParameterList":
     <figure>
      <artwork><![CDATA[
      enum{
          96(1), 112(2), 128(3), 192(4), 256(5) (255)
      } MACSecurityParameter;

      struct {
          MACSecurityParameter mac_security_parameter_list<1..2^8-1>
      } MACSecurityParameterList;

      ]]></artwork>
        </figure>

	The "MACSecurityParameter" contains the security parameters to be negotiated
	in bits.
	</t>

	<t>
   Servers that receive an extended client hello containing a
   "mac_security_parameter" extension, MAY accept the requested maximum
   fragment length by including an extension of type
   "mac_security_parameter" in the (extended) server hello.  The
   "extension_data" field of this extension SHALL contain
   "MACSecurityParameter" whose value is one of the requested parameters.
	</t>
	<t>
	If the server replies with a "MACSecurityParameter" then
	the MAC of the record messages MUST be restricted to the minimum
	between the allowed size of the negotiated MAC and the selected
        MACSecurityParameter size, by both parties. The "verify_data_length" 
        of the Finished message SHALL be set equal to the negotiated 
        "MACSecurityParameter" size.
        </t>
        <t>
        Note: TLS 1.2 allows ciphersuites to specify individually the "verify_data_length".
        Implementations conforming to this document MUST ignore the
        ciphersuite "verify_data_length" if a "MACSecurityParameter" has been
        selected by the server.
        </t>
        <t>
        Note: A client MUST NOT send both this extension and the truncated HMAC 
        extension <xref target="RFC6066"/>. Servers that received both
        extensions MAY terminate the handshake with an "illegal_parameter" alert.
        If the server chooses not to terminate the handshake it MUST ignore
        the truncated HMAC extension. 
        </t>

	</section>
      </section>

      <section anchor="negotiation" title="Fallback protocols">
      <section anchor="negotiation:rationale" title="Rationale">
        <t>
	The TLS protocol negotiation works by having the client send
	the highest supported version in the client hello message. If
	the server does not support this protocol version has to reply
	with his highest version. For example if the client's highest
	version is TLS 1.2, and the server's is TLS 1.1, the following
	negotiation should occur:
     <figure>
      <artwork><![CDATA[
      Client                                               Server

      ClientHello (TLS 1.2)       -------->
                                  <--------  ServerHello (TLS 1.1)
      ]]></artwork>
        </figure>
        This however requires the client to implement TLS 1.1, as well
        as TLS 1.0 and SSL 3.0, because it is not possible for the client
        to predict the highest supported version by the server.
        That requirement increases client complexity as there is no way 
        for a client to support only a single protocol, e.g. TLS 1.0 or 
        SSL 3.0, to be used as a fallback from TLS 1.2.
        </t>
        </section>
        
        <section anchor="negotiation:ext" title="The extension">
        <t>
        This extension allows clients to indicate precisely the supported
        TLS protocol versions for consideration by the server as a fallback.
        To indicate the supported protocol versions clients MAY include 
        an extension of type "fallback_protocols" in the (extended) client hello. 
        The "extension_data" field of this extension MUST
	contain a "ProtocolVersionList":
	</t>
     <figure>
      <artwork><![CDATA[
      struct {
          uint8 major;
          uint8 minor;
      } ProtocolVersion;

      struct {
          ProtocolVersion supported_protocol_list<1..2^8-1>
      } ProtocolVersionList;

      ]]></artwork>
        </figure>
        <t>
        The advertised in the client hello TLS protocol version SHOULD NOT
        be included in the "ProtocolVersionList".
        </t>
	<t>
   A server that receives a client hello containing the "fallback_protocols"
   extension, MAY use the information contained in the extension to
   select the highest commonly supported protocol version.
   Servers MUST NOT send this extension.
        </t>
        </section>
      </section>

      <section anchor="security" title="Security considerations">
        <section anchor="sec:mac" title="MAC security parameter">
        <t>
        This extension poses a common security parameter on both the algorithms
        used for the record message authentication, and the algorithm uses
        for handshake finished message authentication. These are typically
        different algorithms but adhere to the MAC definition of <xref target="ECRYPT"/>.
        Under that definition the upper bounds on the security of the
        MAC are the size of the key used and the length of the MAC itself.
        </t>
        <t>
        In the finished messages the TLS "master_secret" is used as
        the key of the MAC, that consists of 384 bits of keying material.
        The MAC if this extension is used will be truncated to
        the selected "MACSecurityParameter" size (which is always less than 384),
        providing a maximum security parameter of the truncated size.
        </t>
        
        <t>
        The defined ciphersuites in TLS use either HMAC or the GCM cipher
        mode to authenticate the record messages. When HMAC is used
        the keying material used for HMAC is of the same size as the
        HMAC output, thus if truncated to the "MACSecurityParameter"
        will provide a maximum security parameter of the truncated size.
        If no truncation occurs the security parameter is that of the
        HMAC output size. The GCM ciphers according to <xref target="NIST-GCM"/>
        have issues when the security parameter is low (32 or 64 bits)
        that require special constrains, but no issues are known for
        the security parameters defined in this document. The maximum
        security parameter supported by GCM is 128.
        </t>
        </section>
        <section anchor="sec:negotiation" title="Fallback protocols">
        <t>
	The addition of the fallback cipher turns the implicit TLS version
	fallback mechanism to an explicit one, similar to the ciphersuite
	negotiation. For this reason it is believed that no security 
	complications not already present in TLS are introduced.
        </t>
        </section>
      </section>

      <section anchor="IANA" title="IANA Considerations">
  <t>
   This document defines new TLS extensions 
   "mac_security_parameter" (value TBD-BY-IANA), "fallback_protocols" (value TBD-BY-IANA)
   whose value should be assigned from the TLS ExtensionType Registry defined
   in <xref target="RFC5246"/>.

  </t>
      </section>

      <!--
      <section title="Acknowledgements">
        <t>
        </t>
      </section>
      -->

   </middle>

   <back>
    <references title="Normative References">
   &RFC2119;
   &RFC5246;
   &RFC6066;
   
       <reference anchor='SP800-57'>
    <front>
        <title>Recommendation for Key Management</title>
        <author><organization>NIST FIPS SP 800-57</organization>
        </author>

        <date month='March' year='2007' />
    </front>
    <seriesInfo name="National Institute of Standards and Technology, U.S.
    Department of Commerce" value=""/>
    </reference>
        <reference anchor='ECRYPT'>
        <front>
            <title>ECRYPT II Yearly Report on Algorithms and Keysizes</title>
            <author initials='N.' surname='Smart'
                    fullname='Nigel Smart'>
            </author>

            <date month='March' year='2010' />
        </front>
        </reference>

	<reference anchor='NIST-GCM'>
	<front>
	    <title>Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC</title>
	    <author><organization>NIST FIPS PUB 800-38D</organization>
	    </author>

	    <date month='November' year='2007' />
	</front>
	<seriesInfo name="National Institute of Standards and Technology, U.S.
	Department of Commerce" value=""/>
	</reference>

  </references>

  <references title="Informative References">
   &RFC5430;
   &RFC4347;
  </references>

  </back>
</rfc>
