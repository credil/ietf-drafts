<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1034 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2045 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2045.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2616 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC3629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY RFC3986 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC4287 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4287.xml">
<!ENTITY RFC4944 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4944.xml">
<!ENTITY RFC5198 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5198.xml">
<!ENTITY RFC5234 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC5226 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC5785 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5785.xml">
<!ENTITY RFC5988 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5988.xml">
<!ENTITY I-D.ietf-core-coap SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-core-coap.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="3"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" ipr="trust200902" docName="draft-ietf-core-link-format-09">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>


    <front>
        <title>CoRE Link Format</title>

        <author initials="Z" surname="Shelby" fullname="Zach Shelby">
          <organization>
             Sensinode
          </organization>
          <address>
            <postal>
             <street>Kidekuja 2</street>
             <city>Vuokatti</city>
             <code>88600</code>
             <country>FINLAND</country>
            </postal>
            <phone>+358407796297</phone>
            <email>zach@sensinode.com</email>
    </address>
        </author>
        

  <date year="2011"/>

  <area>Internet</area>

  <workgroup>CoRE</workgroup>
  <keyword>CoRE, Link Format, HTTP Link Header Format, Resource Discovery</keyword>

    <abstract>
    <t>
	This document defines Web Linking using a link format for use by constrained web servers to describe hosted resources, their attributes and other relationships between links. Based on the HTTP Link Header format defined in RFC5988, the CoRE Link Format is carried as a payload and is assigned an Internet media type. A well-known URI is defined as a default entry-point for requesting the links hosted by a server.
    </t> 
    
    </abstract>
    </front>

    <middle>



  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <section anchor='introduction' title="Introduction">

  <t>
  The Constrained RESTful Environments (CoRE) working group aims at realizing the Representational State Transfer (REST) architecture <xref target="REST"/> in a suitable form for the most constrained nodes (e.g. 8-bit microcontrollers with limited memory) and networks (e.g. 6LoWPAN <xref target="RFC4944"/>). CoRE is aimed at Machine-to-Machine (M2M) applications such as smart energy and building automation.
  </t>
  <t>
  The discovery of resources hosted by a constrained server is very important in machine-to-machine applications where there are no humans in the loop and static interfaces result in fragility. The discovery of resources provided by an HTTP <xref target="RFC2616"/> Web Server is typically called Web Discovery and the description of relations between resources is called Web Linking <xref target="RFC5988"/>. In the present document we refer to the discovery of resources hosted by a constrained web server, their attributes and other resource relations as CoRE Resource Discovery.
  </t>
  <t>
  The main function of such a discovery mechanism is to provide Universal Resource Identifiers (URIs, called links) for the resources hosted by the server, complemented by attributes about those resources and possible further link relations. In CoRE this collection of links is carried as a resource of its own (as opposed to HTTP headers delivered with a specific resource). This document specifies a link format for use in CoRE Resource Discovery by extending the HTTP Link Header Format <xref target="RFC5988"/> to describe these link descriptions. The CoRE Link Format is carried as a payload and is assigned an Internet media type. A well-known URI "/.well-known/core" is defined as a default entry-point for requesting the list of links about resources hosted by a server, and thus performing CoRE Resource Discovery. 
  </t>


    <section title="Web Linking in CoRE">
    
    <t>
    What is the difference between the CoRE Link Format and <xref target="RFC5988"/>? Technically the CoRE Link Format is a serialization of a typed link as specified in <xref target="RFC5988"/>, used to describe relationships between resources, so-called "Web Linking". In this specification Web Linking is extended with specific constrained M2M attributes, links are carried as a message payload rather than in an HTTP Link Header, and a default interface is defined to discover resources hosted by a server. This specification also defines a new relation type "hosts", which indicates that the resource is hosted by the server from which the link document was requested.  
    </t>
    <t>
    Why not just use the HTTP Link Header? In HTTP, the Link Header can be used to carry link information about a resource along with an HTTP response. This works well for the typical use case for a web server and browser, where further information about a particular resource is useful after accessing it. In CoRE the main use case for Web Linking is the discovery of which resources a server hosts in the first place. Although some resources may have further links associated with them, this is expected to be an exception. For that reason the CoRE Link Format serialization is carried as a resource representation of a well-known URI. The CoRE Link Format does re-use the format of the HTTP Link Header serialization defined in <xref target="RFC5988"/>.
    </t>

	</section>

    <section title="Use Cases">
    
    <t>
    Typical use cases for Web Linking on today's web include e.g. describing the author of a web page, or describing relations between web pages (next chapter, previous chapter etc.). Web Linking can also be applied to M2M applications, where typed links are used to assist a machine client in finding and understanding how to use resources on a server. In this section a few use cases are described for how the CoRE Link Format could be used in M2M applications. For further technical examples see <xref target="examples"/>. As there are a large range of M2M applications, these use cases are purposely generic. This document assumes that different deployments or application domains will define the appropriate REST interface descriptions along with Resource Types to make discovery meaningful.  
    </t>

	  <section title="Discovery">
		<t>
		  In M2M applications, for example home or building automation, there is a need for local clients and servers to find and interact with each other without human intervention. The CoRE Link Format can be used by servers in such environments to enable Resource Discovery of the resources hosted by the server. 
		</t>
		<t>
		  Resource Discovery can be performed either unicast or multicast. When a server's IP address is already known, either a priori or resolved via the Domain Name System (DNS) <xref target="RFC1034"/><xref target="RFC1035"/>, unicast discovery is performed in order to locate the entry point to the resource of interest. This is performed using a GET to /.well-known/core on the server, which returns a payload in the CoRE Link Format. A client would then match the appropriate Resource Type, Interface Description and possible Content-Type <xref target="RFC2045"/> for its application. These attributes may also be included in the query string in order to filter the number of links returned in a response.   
		</t>
		<t>
		  Multicast resource discovery is useful when a client needs to locate a resource within a limited scope, and that scope supports IP multicast. A GET request to the appropriate multicast address is made for /.well-known/core. In order to limit the number and size or responses, a query string is recommended with the known attributes. Typically a resource would be discovered based on its Resource Type and/or Interface Description, along with possible application specific attributes.    
		
		</t>
	  </section>
	  
	  <section title="Resource Collections">
		<t>
		  RESTful designs of M2M interfaces often make use of collections of resources. For example an index of temperature sensors on a data collection node or a list of alarms on a home security controller. The CoRE Link Format can be used to make it possible to find the entry point to a collection and traverse its members. The entry point of a collection would always be included in /.well-known/core to enable its discovery. The members of the collection can be defined either through the interface description of the resource along with a parameter resource for the size of the collection, or by using the link format to describe each resource in the collection. These links could be located under /.well-known/core or hosted for example in the root resource of the collection. 
		</t>
	  </section>
	  
	  <section title="Resource Directory">
		<t>
		  In many deployment scenarios, for example constrained networks with sleeping servers, or large M2M deployments with bandwidth limited access networks, it makes sense to deploy resource directory entities which store links to resources stored on other servers. Think of this as a limited search engine for constrained M2M resources.  
		</t>
		<t>
		  The CoRE Link Format can be used by a server to register resources with a resource directory, or to allow a resource directory to poll for resources. Resource polling uses the same process as unicast or multicast discovery, however usually without filtering. Resource registration can be archived by having each server POST their resources to /.well-known/core on the resource directory. This in turn adds links to the resource directory under an appropriate resource. These links can then be discovered by any client by a performing a GET on the resource directory using a query string filter. 
		</t>
	  </section>	  
	  
	 </section>
	

      <section anchor="terminology" title="Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119"/>.</t>

        <t>This specification requires readers to be familiar with all the terms
        and concepts that are discussed in <xref target="RFC5988"/>. This specification makes use of the following terminology:
        <list style="hanging">
          <t hangText="Web Linking"><vspace />
            A framework for indicating the relationships between web resources.</t>

          <t hangText="Link"><vspace />
            Also called "typed links" in RFC5988. A link is a typed connection between two resources identified by URIs. Made up of a context URI, a link relation type, a target URI, and optional target attributes.</t>
            
          <t hangText="Link Format"><vspace />
            A particular serialization of typed links.</t>            

          <t hangText="CoRE Link Format"><vspace />
            A particular serialization of typed links based the HTTP Link Header serialization defined in Section 5 of RFC5988, but carried as a resource representation with a MIME type.</t>

          <t hangText="Attribute"><vspace />
            Properly called "Target Attribute" in RFC5988. A set of key/value pairs that describe the link or its target.</t>

          <t hangText="CoRE Resource Discovery"><vspace />
            When a client discovers the list of resources hosted by a server, their attributes and other link relations by accessing /.well-known/core.</t>

        </list>
        </t>

      </section>

  </section>
  
 
 
  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <section anchor='format' title="Link Format">

    <t>
    The CoRE Link Format extends the HTTP Link Header format specified in <xref target="RFC5988"/>. The format does not require special XML or binary parsing, is fairly compact, and is extensible - all important characteristics for CoRE. It should be noted that this link format is just one serialization of typed links defined in <xref target="RFC5988"/>, others include HTML link, Atom feed links <xref target="RFC4287"/> or HTTP Link Headers. It is expected that resources discovered in the CoRE Link Format may also be made available in alternative formats on the greater Internet. The CoRE Link Format is only expected to be supported in constrained networks and M2M systems.
    </t>
    <t>
    Section 5 of <xref target="RFC5988"/> did not require an Internet media type for the defined link format, as it was defined to be carried in an HTTP header. This specification thus defines the Internet media type "application/link-format" for the CoRE Link Format (see <xref target="iana-mime"/>). Whereas the HTTP Link Header format depends on <xref target="RFC2616"/> for its encoding, the CoRE Link Format is encoded as UTF-8 <xref target="RFC3629"/>. A decoder of the format is not expected to (but not prohibited from) validate UTF-8 encoding and doesn't need to perform any UTF-8 normalization. UTF-8 data can be compared bit-wise, which allows values to contain UTF-8 data without any added complexity for constrained nodes.
    </t>
    <t>    
    The CoRE link format is the <xref target="RFC5988"/> production named "Link", and imports the ABNF description and associated rules in Section 5 of that document. The "Link:" text is omitted as that is part of the HTTP Link Header. Note that the ABNF in the present document is compliant with <xref target="RFC5234"/>.  As in <xref target="RFC5988"/>, multiple link descriptions are separated by commas. Note that commas can also occur in quoted strings and URIs but do not end a description.  
    </t>
    
    
	<section title="Target and context URIs">
	
	 	 <t>
         Each link conveys one target URI as a URI-reference inside angle brackets ("<>"). The context URI of a link (also called base URI in <xref target="RFC3986"/>) conveyed in the CoRE Link Format is by default built from the scheme and authority parts of the target URI. In the absence of this information in the target URI, the context URI is built from the scheme and authority that was used for referencing the resource returning the set of links, replacing the path with an empty path. Thus by default links can be thought of as describing a target resource hosted by the server. Other relations can be expressed by including an anchor parameter (which defines the context URI) along with an explicit relation parameter. This is an important difference to the way the HTTP Link Header format is used, as it is included in the header of an HTTP response for some URI (this URI is by default the context URI). Thus the HTTP Link Header is by default relating the target URI to the URI that was requested. In comparison, the CoRE link format includes one or more links, each describing a resource hosted by a server by default. Other relations can be expressed by using the anchor parameter. See Section 5 of <xref target="RFC3986"/> for a description of how URIs are constructed from URI references.
         </t>
	</section>

	<section title="Link relations">
	
	 	 <t>
         Since links in the CoRE Link Format are typically used to describe resources hosted by a server, and thus in the absence of the relation parameter the new relation type "hosts" is assumed (see <xref target="iana-relation"/>). The "hosts" relation type indicates that the target URI is a resource hosted by the server given by the base URI, or, if present, the anchor parameter. 
         </t>
         <t>
         To express other relations a links can make use of any registered relation parameter or target attributes by including the relation parameter. The context of a relation can be defined using the anchor parameter. In this way, relations between resources hosted on a server, or between hosted resources and external resources can be expressed.</t>

	
	</section>

	<section title="Use of anchors">
	
         <t>
         As per Section 5.2 of <xref target="RFC5988"/> a link description MAY include an "anchor" attribute, in which case the context is the URI included in that attribute. This is used to describe a relationship between two resources. A consuming implementation can however choose to ignore such links. It is not expected that all implementations will be able to derive useful information from explicitly anchored links.
         </t>
	
	</section>

	</section>

	<section title="CoRE link extensions">

	<t>
	The following CoRE specific target attributes are defined in addition 
   to the ABNF rules in Section 5 of <xref target="RFC5988"/>. These attributes describe information useful in accessing the target link of the relation, and in some cases may be URIs. These URIs MUST be treated as non resolvable identifiers (they are not meant to be retrieved). When attributes are compared, they MUST be compared as strings. Relationships to resources that are meant to be retrieved should be expressed as separate links using the anchor attribute and the appropriate relation type. 
    </t>

       <figure>
         <artwork><![CDATA[
   link-extension    = <Defined in RFC5988>
   link-extension    =/ ( "rt=" quoted-string )
   link-extension    =/ ( "if=" quoted-string )
   link-extension    =/ ( "sz=" cardinal )
   cardinal          = "0" / %x31-39 *DIGIT 

         ]]></artwork>
       </figure>


	<section title="Resource type 'rt' attribute">
	
	 	 <t>
	 	 The resource type "rt" attribute is an opaque string used to assign a semantically important type to a resource. One can think of this as a noun describing the resource. In the case of a temperature resource this could be e.g. an application-specific semantic type like "OutdoorTemperature", a Universal Resource Name (URN) like "urn:temperature:outdoor" or a URI referencing a specific concept in an ontology like "http://sweet.jpl.nasa.gov/2.0/phys.owl#Temperature". Multiple resource type attributes MAY appear in a link.
         </t>
         <t>
         The resource type attribute is not meant to used to assign a human readable name to a resource. The "title" attribute defined in <xref target="RFC5988"/> is meant for that purpose.
         </t>
	
	</section>

	<section title="Interface description 'if' attribute">
	
	 	 <t>
	 	 The interface description "if" attribute is an opaque string used to provide a name, URI or URN indicating a specific interface definition used to interact with the target resource. One can think of this as describing verbs usable on a resource. The interface description attribute is meant to describe the generic REST interface to interact with a resource or a set of resources. It is expected that an interface description will be re-used by different resource types. For example the resource types "OutdoorTemperature", "DewPoint" and "RelHumidity" could all be accessible using the interface description "http://www.example.org/myapp.wadl#sensor". 
	 	 </t>
	 	 <t>
	 	 The interface description could be for example the URI of a Web Application Description Language (WADL) <xref target="WADL"/> definition of the target resource "http://www.example.org/myapp.wadl#sensor", a URN indicating the type of interface to the resource "urn:myapp:sensor", or an application-specific name "Sensor". Multiple interface description attributes MAY appear in a link.
         </t>
	
	</section>


	<section title="Maximum size estimate 'sz' attribute">
	
	 	 <t>
		 The maximum size estimate attribute "sz" gives an indication of the maximum size of the resource indicated by the target URI. This attribute is not expected to be included for small resources that can comfortably by carried in a single Maximum Transmission Unit (MTU), but SHOULD be included for resources larger than that. The maximum size estimate attribute MUST NOT appear more than once in a link.
         </t>
         <t>
         Note that there is no defined upper limit to the value of the sz attributes. Implementations MUST be prepared to accept large values.  
         One implementation strategy is to convert any value larger than a reasonable size limit for this implementation to a special value "Big", which in further processing would indicate that a size value was given that was so big that it cannot be processed by this implementation.
         </t>
	
	</section>


  </section>
  
  

  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <section anchor='well-known' title="Well-known Interface">

  <t>
  Resource discovery in CoRE is accomplished through the use of a well-known resource URI which returns a list of links about resources hosted by that server and other link relations. Well-known resources have a path component that begins with "/.well-known/" as specified in  <xref target="RFC5785"/>. This document defines a new well-known resource for CoRE Resource Discovery "/.well-known/core".</t>  
  
  <t>A server implementing this specification MUST support this resource on the default port appropriate for the protocol for the purpose of resource discovery. It is however up to the application which links are included and how they are organized. The resource /.well-known/core is meant to be used to return links to the entry points of resource interfaces on a server. More sophisticated link organization can be achieved by including links to CoRE Link Format resources located elsewhere on the server, for example to achieve an index. In the absence of any links, a zero-length payload is returned. The resource representation of this resource MUST be the CoRE Link Format described in <xref target="format"/>. 
  </t>
  
  <t>
  The CoRE resource discovery interface supports the following interactions:
    <list style="symbols">
      <t>Performing a GET on /.well-known/core to the default port returns a set of links available from the server (if any) in the CoRE Link Format. These links might describe resources hosted on that server, on other servers, or express other kinds of link relations as described in <xref target="format"/>. </t>
      
      <t>Filtering may be performed on any of the link format attributes using a query string as specified in <xref target="filtering"/>. For example [GET /.well-known/core?rt=TemperatureC] would request resources with the name TemperatureC. A server is not however required to support filtering.
      </t>
      
      <t>More capable servers such as proxies could support a resource directory by requesting the resource descriptions of other end-points or allowing servers to POST requests to /.well-known/core. The details of such resource directory functionality is however out of scope for this document, and is expected to be specified separately.</t>

    </list>
  </t>
  

  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <section anchor='filtering' title="Query Filtering">
	<t>
	A server implementing this document MAY recognize the query part of a resource discovery URI as a filter on the resources to be returned.  The query part should conform to the following syntax. Note that this only defines querying for a single parameter at a time.
	</t>
	
       <figure>
         <artwork><![CDATA[
 
     filter-query = resource-param "=" query-pattern
     resource-param = "uri" / parmname
     query-pattern = ptoken [ "*" ]
     ptoken = <Defined in RFC5988>
	
	]]></artwork>
       </figure>	

	<t>
	The resource-param "uri" refers to the URI-reference between the <![CDATA["<" and ">"]]> characters of a link.  Other resource-param values refer to the link attribute they name. Filtering is performed by comparing the query-pattern against the value of the attribute identified by the resource-param for each link-value in the collection of resources identified by the URI path.</t>

	<t>
	If the decoded query-pattern does not end with "*", a link value matches the query only if the value of the attribute or URI-reference denoted by the resource-param is bytewise identical to the query-pattern. If the decoded query-pattern ends with "*", it is sufficient that the remainder of the query-pattern be a prefix of the value denoted by the resource-param. A query-pattern of "*" will match that resource-param with an empty string value. It is not expected that very constrained nodes support filtering. Implementations not supporting filtering MUST simply ignore the query string and return the whole resource for unicast requests. 
	</t>
	
	<t>When using a transfer protocol like the Constrained Application Protocol (CoAP) that supports multicast requests, special care is taken. A multicast request with a query string MUST NOT be responded to if filtering is not supported or if the filter does not match (to avoid a needless response storm). 
	</t>

  </section>


  </section>


  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <!-- **************************************************************** -->

  <section anchor='examples' title="Examples">

  <t>
  A few examples of typical link descriptions in this format follows. Multiple resource descriptions in a representation are separated by commas. Linefeeds never occur in the actual format, but are shown in these examples for readability. Although the following examples use CoAP response codes, the examples are applicable to HTTP as well (the corresponding response code would be 200 OK). </t>

  <t>This example includes links to two different sensors sharing the same interface description.</t>

       <figure>
         <artwork><![CDATA[
REQ: GET /.well-known/core

RES: 2.05 "Content"         
</sensors/temp>;rt="TemperatureC";if="sensor",
</sensors/light>;rt="LightLux";if="sensor"
]]></artwork>
       </figure>

<t>Without the linefeeds included for readability, the format actually looks as follows.</t>

       <figure>
         <artwork><![CDATA[         
</sensors/temp>;rt="TemperatureC";if="sensor",
</sensors/light>;rt="LightLux";if="sensor"
]]></artwork>
       </figure>

  
  <t>This example arranges link descriptions hierarchically, with the entry point including a link to a sub-resource containing links about the sensors.</t>

       <figure>
         <artwork><![CDATA[
REQ: GET /.well-known/core

RES: 2.05 "Content" 
</sensors>;rt="index"

REQ: GET /sensors

RES: 2.05 "Content" 
</sensors/temp>;rt="TemperatureC";if="sensor",
</sensors/light>;rt="LightLux";if="sensor"

]]></artwork>
       </figure>

<t>
An example query filter may look like:
	</t>

       <figure>
         <artwork><![CDATA[
REQ: GET /.well-known/core?rt=LightLux

RES: 2.05 "Content" 
</sensors/light>;rt="LightLux";if="sensor"
]]></artwork>
       </figure>

<t>This example shows the use of an anchor attribute to relate the temperature sensor resource to an external description and to an alternative URL.</t>

       <figure>
         <artwork><![CDATA[
REQ: GET /.well-known/core

RES: 2.05 "Content" 
</sensors>;rt="index";title="Sensor Index",         
</sensors/temp>;rt="TemperatureC";if="sensor",
</sensors/light>;rt="LightLux";if="sensor",
<http://www.example.com/sensors/t123>;anchor="/sensors/temp"
;rel="describedby",
</t>;anchor="/sensors/temp";rel="alternate"

]]></artwork>
       </figure>
 
<t>If a client is interested to find relations about a particular resource, it can perform a query on the anchor parameter:</t>

       <figure>
         <artwork><![CDATA[
REQ: GET /.well-known/core?anchor=/sensors/temp

RES: 2.05 "Content"
<http://www.example.com/sensors/temp123>;anchor="/sensors/temp"
;rel="describedby",
</t>;anchor="/sensors/temp";rel="alternate"

]]></artwork>
       </figure>
 

<t>The following example shows a large firmware resource with a size attribute. The consumer of this link would use the sz attribute to determine if the resource representation is too large and if block transfer would be required to request it. In this case a client with only a 64 KiB flash might only support a 16-bit integer for storing the sz attribute. Thus a special flag or value should be used to indicate "Big" (larger than 64 KiB).</t>

       <figure>
         <artwork><![CDATA[
REQ: GET /.well-known/core?rt=firmware

RES: 2.05 "Content" 
</firmware/v2.1>;rt="firmware";sz=262144

]]></artwork>
       </figure> 


 
  </section>


  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <!-- **************************************************************** -->

  <section title="Security Considerations">
         <t> 
         This document needs the same security considerations as described in Section 7 of <xref target="RFC5988"/>. The /.well-known/core resource may be protected e.g. using DTLS when hosted on a CoAP server as per <xref target="I-D.ietf-core-coap"/> Section 10.2. 
     	 </t>
     	 <t>
     	 Multicast requests using CoAP for the well-known link-format resources could be used to perform denial of service on a constrained network. A multicast request SHOULD only be accepted if the request is sufficiently authenticated and secured using e.g. IPsec or an appropriate object security mechanism. 
     	 </t>
         <t> 
         CoRE link format parsers should be aware that a link description may be cyclical, i.e., contain a link to itself. These cyclical links could be direct or indirect (i.e., through referenced link resources). Care should be taken when parsing link descriptions and accessing cyclical links.
         </t>

  </section>

  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <!-- **************************************************************** -->

  <section title="IANA Considerations">

	<section anchor='iana-well-known' title="Well-known 'core' URI">

		<t>This memo registers the "core" well-known URI in the Well-Known
  		 URI Registry as defined by [RFC5785].</t>

   		<t>URI suffix:  core</t>

   		<t>Change controller:  IETF</t>

   		<t>Specification document(s):  [[ this document ]]</t>

   		<t>Related information:  None</t>
   		
	</section>

	<section anchor='iana-relation' title="New 'hosts' relation type">

		<t>This memo registers the new "hosts" Web Linking relation type as per [RFC5988].</t>

   		<t>Relation Name: hosts</t>

   		<t>Description: Refers to a resource hosted by the server indicated by the link context.</t>

   		<t>Reference:  [[ this document ]]</t>

   		<t>Notes: This relation is used in CoRE where links are retrieved as a /.well-known/core resource representation, and by default the context of the links is the server at coap://authority from which /.well-known/core was requested.</t>
   		
   		<t>Application Data: None</t>
   		
	</section>

	<section anchor='iana-mime' title="New link-format Internet media type">

		<t>This memo registers the a new Internet media type for the CoRE link format, application/link-format. </t>
		
		<t>Type name: application </t>

  		<t>Subtype name: link-format </t>

   		<t>Required parameters: None </t>

   		<t>Optional parameters: None </t>  

  		<t>Encoding considerations: Binary data </t>

   		<t>Security considerations: </t>
   		<t>
   		Multicast requests using CoAP for the well-known link-format resources could be used to perform denial of service on a constrained network. A multicast request SHOULD only be accepted if the request is sufficiently authenticated and secured using e.g. IPsec or an appropriate object security mechanism. 
   		</t>
   		<t>
   		CoRE link format parsers should be aware that a link description may be cyclical, i.e., contain a link to itself. These cyclical links could be direct or indirect (i.e., through referenced link resources). Care should be taken when parsing link descriptions and accessing cyclical links. </t>

   		<t>Interoperability considerations: </t>

   		<t>Published specification: [[ this document ]] </t>

   		<t>Applications that use this media type: CoAP server and client implementations for resource discovery and HTTP applications that use the link-format as a payload.</t>

  		<t>Additional information: </t>

     		<t>Magic number(s):  </t>
     		<t>File extension(s): *.wlnk </t>
     		<t>Macintosh file type code(s):  </t>

   		<t>Intended usage: COMMON </t>

   		<t>Restrictions on usage: None </t>

   		<t>Author: CoRE WG </t>

   		<t>Change controller: IETF </t>

	</section>
     
  </section>

<!------------------------------------------------------>
<!--  SECTION: ACKNOWLEDGMENTS          -->
<!------------------------------------------------------>

<section title="Acknowledgments">

<t>Special thanks to Peter Bigot, who has made a considerable number reviews and text contributions that greatly improved the document. In particular, Peter is responsible for the ABNF descriptions and the idea for a new "hosts" relation type.   
</t>

<t>Thanks to Mark Nottingham and Eran Hammer-Lahav for the discussions and ideas that led to this draft, and to Carsten Bormann, Martin Thomson, Alexey Melnikov and Peter Saint-Andre for extensive comments and contributions that improved the text.</t>

<t>Thanks to Michael Stuber, Richard Kelsey, Cullen Jennings, Guido Moritz, Peter Van Der Stok, Adriano Pezzuto, Lisa Dussealt, Alexey Melnikov, Gilbert Clark, Salvatore Loreto, Petri Mutka, Szymon Sasin, Robert Quattlebaum, Robert Cragie, Angelo Castellani, Tom Herbst, Ed Beroset, Gilman Tolle, Robby Simpson, Colin O'Flynn and David Ryan for helpful comments and discussions that have shaped the document.</t>

</section>

  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <!-- **************************************************************** -->
  <!-- **************************************************************** -->

  <section title="Changelog">

    <t>Changes from ietf-08 to ietf-09:
      <list>	
        <t>o Corrected ABNF and editorial nits.</t>
        <t>o Elided empty responses to multicast request.</t>
      </list>
    </t>

    <t>Changes from ietf-07 to ietf-08:
      <list>
        <t>o IESG submission nits.</t>
      </list>
    </t>

    <t>Changes from ietf-06 to ietf-07:
      <list>
        <t>o Moved the Content-type attribute (ct=) to the base CoAP specification.</t>
      </list>
    </t>

    <t>Changes from ietf-05 to ietf-06:
      <list>
        <t>o Added improved text about the encoding of the format as UTF-8, but treating it as binary data without normalization.</t>
      </list>
    </t>

    <t>Changes from ietf-04 to ietf-05:
      <list>
        <t>o Removed mention of UTF-8 as this is already defined by RFC5988 (#158)</t>
        <t>o Changed encoding considerations to "Binary data" (#157)</t>
        <t>o Updated ABNF to disallow leading zeros in integers (#159)</t>
        <t>o Updated examples and reference for coap-06 (#152)</t>
        <t>o Removed the application/link-format CoAP code registration, now included in the CoAP specification directly (#160)</t>
      </list>
    </t>

    <t>Changes from ietf-03 to ietf-04:
      <list>
        <t>o Removed the attribute registry (#145).</t>
        <t>o Requested a CoAP media type for application/link-format (#144).</t>
        <t>o Editorial and reference improvements from AD review (#146).</t>
        <t>o Added a range limitation for ct attribute.</t>
        <t>o Added security considerations and file extension for application/link-format registration.</t>
      </list>
    </t>

    <t>Changes from ietf-02 to ietf-03:
      <list>
        <t>o Removed 'obs' attribute definition, now defined in the CoAP Observation spec (#99).</t>
		<t>o Changed Resource name (n=) to Resource type (rt=) and d= to if= (#121).</t>
		<t>o Hierarchical organization of links under /.well-known/core removed (#95).</t>
		<t>o Bug in Section 3.1 on byte-wise query matching fixed (#91).</t>
		<t>o Explanatory text added about alternative Web link formats (#92). </t>
		<t>o Fixed a bug in Section 2.2.4 (#93). </t>
		<t>o Added use case examples (#89). </t>
		<t>o Clarified how the CoRE link format is used and how it differs from RFC5988 (#90, #98). </t>
		<t>o Changed the Interface definition format to quoted-string to match the resource type. </t>
		<t>o Added an IANA registry for CoRE Link Format attributes (#100). </t>
      </list>
    </t>

    <t>Changes from ietf-01 to ietf-02:
      <list>
        <t>o Added references to RFC5988 (#41).</t>
		<t>o Removed sh and id link-extensions (#42).</t>
		<t>o Defined the use of UTF-8 (#84).</t>
		<t>o Changed query filter definition for any parameter (#70).</t>
		<t>o Added more example, now as a separate section (#43).</t>
		<t>o Mentioned cyclical links in the security section (#57).</t>
		<t>o Removed the sh and id attributes, added obs and sz attributes (#42).</t>
		<t>o Improved the context and relation description wrt RFC5988 and requested a new "hosts" default relation type (#85).</t>
      </list>
    </t>

    <t>Changes from ietf-00 to ietf-01:
      <list>
        <t>o Editorial changes to correct references. </t>
		<t>o Formal definition for filter query string.</t>
		<t>o Removed URI-reference option from "n" and "id". </t>
		<t>o Added security text about multicast requests. </t>
      </list>
    </t>

    <t>Changes from shelby-00 to ietf-00:
      <list>
        <t>o Fixed the ABNF link-extension definitions (quotes around URIs, integer definition). </t>
        <t>o Clarified that filtering is optional, and the query string is to be ignored if not supported (and the URL path processed as normally). </t>
        <t>o Required support of wildcard * processing if filtering is supported.</t>
        <t>o Removed the assumption of a default content-type assumption.</t>
      </list>
    </t>

  </section>

    </middle>

    <back>
    <references title='Normative References'>
    
       &RFC2119;
       &RFC3629;
       &RFC3986;
       &RFC5988;
       &RFC5234;
            
    </references>

    <references title='Informative References'>
       &I-D.ietf-core-coap;
       &RFC1034;
       &RFC1035;
       &RFC2045;
       &RFC2616;
       &RFC4287;  
       &RFC4944;
       &RFC5785;

       <reference anchor="REST" target="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">
        <front>
            <title>Architectural Styles and the Design of Network-based Software Architectures</title>
            <author initials="R.F." surname="Fielding" fullname="Roy Fielding">
                <organization>University of California, Irvine</organization>
            </author>
            <date year="2000" />
        </front>
       </reference>
       
       <reference anchor="WADL"
                 target="http://java.net/projects/wadl/sources/svn/content/trunk/www/wadl20090202.pdf">
        <front>
          <title>Web Application Description Language (WADL)</title>

          <author fullname="Marc J. Hadley" initials="M.J.H" surname="Hadley">
            <organization>Sun Microsystems Inc.</organization>
          </author>

          <date year="2009" />
        </front>
      </reference>
       
    </references>

    </back>

</rfc>
