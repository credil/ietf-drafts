<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="no" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-pechanec-pkcs11uri-03" ipr="trust200902">

<front>

<title>The PKCS#11 URI Scheme</title>

<author initials="J." surname="Pechanec" fullname="Jan Pechanec">
	<organization>Oracle Corporation</organization>

	<address>
		<postal>
			<street>The Park, building 3</street>
			<street>V parku 2308/8</street>
			<city>Prague</city>
			<code>14800</code>
			<country>CZ</country>
		</postal>

		<phone>+420 233 009 380</phone>
		<email>Jan.Pechanec@Oracle.COM</email>
		<uri>http://www.oracle.com</uri>
	</address>
</author>

<author initials="D. J." surname="Moffat" fullname="Darren J. Moffat">
	<organization>Oracle Corporation</organization>

	<address>
		<postal>
			<street>Guillemont Park</street>
			<street>Building 3</street>
			<city>Camberley</city>
			<code>GU17 9QG</code>
			<country>UK</country>
		</postal>

		<email>Darren.Moffat@Oracle.COM</email>
		<uri>http://www.oracle.com</uri>
	</address>
</author>

<date month="November" year="2010" />

<area>General</area>
<workgroup>Network Working Group</workgroup>
<keyword>RFC</keyword>
<keyword>Request for Comments</keyword>
<keyword>I-D</keyword>
<keyword>Internet-Draft</keyword>
<keyword>XML</keyword>
<keyword>Extensible Markup Language</keyword>
<abstract>
	<t>This memo specifies a PKCS#11 Uniform Resource Identifier (URI)
	Scheme for identifying PKCS#11 objects stored in PKCS#11 tokens, for
	identifying PKCS#11 libraries, or for identifying PKCS#11 tokens
	themselves. The URI is based on how PKCS#11 objects, libraries, and
	tokens are identified in the PKCS#11 Cryptographic Token Interface
	Standard.</t>
</abstract>
</front>

<middle>

<section anchor="intro" title="Introduction">

<t>The PKCS #11: Cryptographic Token Interface Standard <xref
target="pkcs11_spec" /> specifies an API, called Cryptoki, for devices which
hold cryptographic information and perform cryptographic functions. Cryptoki,
pronounced crypto-key and short for cryptographic token interface, follows a
simple object-based approach, addressing the goals of technology independence
(any kind of device may be used) and resource sharing (multiple applications
may access multiple devices), presenting applications with a common, logical
view of the device - a cryptographic token.</t>

<t>It is desirable for applications or libraries that work with PKCS#11 tokens
to accept a common identifier that consumers could use to identify an existing
PKCS#11 object in a PKCS#11 token, or an existing token itself, or an existing
Cryptoki library. The set of object types that can be stored in a PKCS#11 token
includes a public key, a private key, a certificate, a secret key, and a data
object. These objects can be uniquely identifiable via the PKCS#11 URI scheme
defined in this document. The set of attributes describing an object can contain
an object label, its type, and its ID. The set of attributes that identifies a
PKCS#11 token can contain a token label, a manufacturer name, a serial number,
and a token model. Attributes that can identify a Cryptoki library are a library
manufacturer, a library description, and a library version.</t>

<t>Note that the PKCS#11 URI is not intended to be used to create new PKCS#11
objects in tokens, or to create PKCS#11 tokens. It is solely to be used to
identify existing objects, tokens, or Cryptoki libraries.</t>

<t>The URI scheme defined in this document is designed specifically with a
mapping to the PKCS#11 API in mind. The URI uses only the scheme and the path
components which are required by the Uniform Resource Identifier generic syntax
<xref target="RFC3986" />. The URI scheme does not use the hierarchical element
for a naming authority in the path since the authority part could not be mapped
to PKCS#11 API elements. The URI scheme does not use the optional query and
fragment elements.</t>
</section>

<section anchor="contributors" title="Contributors">

<t>Stef Walter, Nikos Mavrogiannopoulos, and Nico Williams contributed to the
development of this document.</t>
</section>

<section anchor="scheme_def" title="PKCS#11 URI Scheme Definition">

<t>In accordance with <xref target="RFC4395" />, this section provides the
information required to register the PKCS#11 URI scheme.</t>

<section anchor="scheme_name" title="PKCS#11 URI Scheme Name">
<t>pkcs11</t>
</section>

<section anchor="scheme_status" title="PKCS#11 URI Scheme Status">
<t>Permanent.</t>
</section>

<section anchor="scheme_syntax" title="PKCS#11 URI Scheme Syntax">

<t>The PKCS#11 URI scheme is a sequence of attribute value pairs. Most
attributes allow for an UTF-8 string to be used as an value. In accordance with
<xref target="RFC3986" />, the data should first be encoded as octets according
to the UTF-8 character encoding <xref target="RFC3629" />; then only those
octets that do not correspond to characters in the unreserved set or to
permitted characters from the reserved set should be percent-encoded. Rules
"unreserved" and "pct-encoded" in the PKCS#11 URI specification below were
imported from <xref target="RFC3986" />. As a special case, note that according
to <xref target="RFC3986" />, a space must be percent-encoded.</t>

<figure>
<preamble>A PKCS#11 URL takes the form (for explanation of Augmented BNF, see
<xref target="RFC5234" />):</preamble>
<artwork>
pk11-URI		= "pkcs11" ":" pk11-identifier
pk11-identifier	   	= *1(pk11-attr *(";" pk11-attr))
pk11-attr		= pk11-token / pk11-manuf / pk11-serial /
			  pk11-model / pk11-lib-manuf / pk11-lib-ver /
			  pk11-lib-desc / pk11-object /
			  pk11-objecttype / pk11-id / pk11-pinfile
; Section 2.2 of RFC 3986 specifies that all potentially reserved
; characters that do not conflict with actual delimiters of the URI
; do not have to be percent-encoded. So, we just removed ";".
pk11-reserved-avail	= ":" / "/" / "?" / "#" / "[" / "]" / "@" /
			  "!" / "$" / "&amp;" / "'" / "(" / ")" / "*" /
			  "+" / "," / "="
pk11-value		= *(unreserved / pk11-reserved-avail /
			  pct-encoded)
; The "pk11-ck-char" rule contains a complete list of characters
; of the CK_CHAR type as defined in the PKCS#11 specification. Those
; are a-z, A-Z, 0-9, a space, and all special characters from the
; following list: !"#%&amp;'()*+,-./:;&lt;=&gt;?[\]^_{|}~. Note that some
; special characters not part of the reserved and unreserved sets
; must be percent-encoded.
pk11-ck-char		= unreserved / "%20" / "!" / "%22" / "#" /
			  "%25" / "&amp;" / "'" / "(" / ")" / "*" /
			  "+" / "," / "-" / "." / "/" / ":" / "%3B" /
			  "%3C" / "=" / "%3E" / "?" / "[" / "%5C" /
			  "]" / "%5E" / "_" / "%7B" / "%7C" / "%7D" /
			  "~"
; Corresponds to the label field of the CK_TOKEN_INFO structure.
pk11-token		= "token" "=" pk11-value
; Corresponds to the manufacturerID field of the CK_TOKEN_INFO
; structure.
pk11-manuf		= "manufacturer" "=" pk11-value
; Corresponds to the serialNumber field of the CK_TOKEN_INFO structure.
pk11-serial		= "serial" "=" *pk11-ck-char
; Corresponds to the model field of the CK_TOKEN_INFO structure.
pk11-model		= "model" "=" pk11-value
; Corresponds to the manufacturerID field of the CK_INFO structure.
pk11-lib-manuf		= "library-manufacturer" "=" pk11-value
; Corresponds to the libraryDescription field of the CK_INFO structure.
pk11-lib-desc		= "library-description" "=" pk11-value
; Corresponds to the libraryVersion field of the CK_INFO structure.
pk11-lib-ver		= "library-version" "=" 1*DIGIT *("." 1*DIGIT)
; Corresponds to the CKA_LABEL object attribute.
pk11-object		= "object" "=" pk11-value
; Corresponds to the CKA_CLASS object attribute.
pk11-objecttype	   	= "objecttype" "=" ("public" / "private" /
			  "cert" / "secretkey" / "data")
; Corresponds to the CKA_ID object attribute.
pk11-id			= "id" "=" *pct-encoded
pk11-pinfile		= "pinfile" "=" pk11-value
</artwork>
</figure>

<t>While the PKCS#11 specification limits the length of some fields, eg. the
manufacturer label can be up to thirty-two characters long, the PKCS#11 URI does
not impose such limitations. It is up to the consumer of the PKCS#11 URI to
perform any necessary sanity length checks.</t>

<t>The attribute "token" represents a token label, the attribute "manufacturer"
represents a token manufacturer ID, the attribute "serial" represents a token serial
number, the attribute "model" represents a token model, the attribute
"library-manufacturer" represents the Cryptoki library manufacturer, the attribute
"library-description" represents the character string description of the
library, the attribute "library-version" represents the Cryptoki library
version, the attribute "object" represents a PKCS#11 object label, the attribute
"objecttype" represents the type of the object, the attribute "id" represents
the object ID, and the attribute "pinfile" specifies where the application or
library should find the token PIN, if needed. Application could overload this
attribute. For example, "pinfile=%7Cprog-name" could mean to read a PIN from an
external application (%7C denotes a pipe '|' character). Note that an
application can always ask for a PIN by any means it decides to.</t>
</section>
</section>

<section anchor="examples" title="Examples of PKCS#11 URI Schemes">

<t>This section contains some examples of how PKCS#11 tokens or PKCS#11 token
objects can be identified using the PKCS#11 URI scheme. Note that in some of the
following examples, newlines and spaces were inserted for better readability
which is allowed by <xref target="RFC3986" />. Also note that all spaces as part
of the URI are percent-encoded, as required by <xref target="RFC3986" />.</t>

<figure>
<preamble>An empty PKCS#11 URI might be useful to PKCS#11 consumers:</preamble>
<artwork>
  pkcs11:
</artwork>
</figure>

<figure>
<preamble>One of the simplest and most useful forms might be a PKCS#11 URI that
specifies only an object label and its type. The default token is used so the
URI does not specify it. Note that when specifying public objects, a token PIN
might not be required.</preamble>
<artwork>
  pkcs11:object=my-pubkey;objecttype=public
</artwork>
</figure>

<figure>
<preamble>When a private key is specified either the "pinfile" attribute or an
application specific method must be used.  Also note that we can not use literal
"/" in the "pinfile" attribute since this character is part of the reserved set,
used to delimit components that are significant to the generic parser's
hierarchical interpretation of an identifier. We must percent-encode
it.</preamble>
<artwork>
  pkcs11:object=my-key;objecttype=private;pinfile=%2Fetc%2Ftoken_pin
</artwork>
</figure>

<figure>
<preamble>The following example identifies a certificate in the software token.
Note that all attributes aside from "objecttype" may have an empty value. In our
case, "serial" is empty. It is up to the consumer of the URI to perform
necessary checks if that is not allowed. Note the notation of the "id" attribute
value which is entirely percent-encoded. We do not have to percent-encode ","
which is in the reserverd set since it does not conflict with any sub-delimiter
used. The '#' character is a general delimiter as "/" so we must percent-encode
it.</preamble>
<artwork>
  pkcs11:token=The%20Software%20PKCS%2311%20softtoken;
         manufacturer=Snake%20Oil,%20Inc.;
         serial=;
         model=1.0;
         object=my-certificate;
         objecttype=cert;
         id=%69%95%3E%5C%f4%BD%EC%91;
         pinfile=%2Fetc%2Fssh%2Ftoken_pin
</artwork>
</figure>

<figure>
<preamble>The token alone can be identified without specifying any PKCS#11
objects. A PIN may still be needed to list all objects, for example.</preamble>
<artwork>
  pkcs11:token=Software%20PKCS%2311%20softtoken;
         manufacturer=Snake%20Oil,%20Inc.;
         pinfile=%2Fetc%2Fssh%2Ftoken_pin
</artwork>
</figure>

<figure>
<preamble>The Cryptoki library alone can be also identified without specifying
any PKCS#11 objects.</preamble>
<artwork>
  pkcs11:library-manufacturer=Snake%20Oil,%20Inc.;
         library-description=Soft%20Token%20Library;
         library-version=1.23
</artwork>
</figure>


<figure>
<preamble>The following example shows that the attribute value can contain a
semicolon. In such case, it is percent-encoded. We can also have lower
characters in the "id" attribute value but note that <xref target="RFC3986" />
recommends to use upercase hexadecimal digits for all percent-encoded
characters.
</preamble>
<artwork>
  pkcs11:token=My%20token%25%20created%20by%20Joe;
         object=my-certificate;
         objecttype=cert;
         id=%69%95%3e%5c%f4%bd%ec%91;
         pinfile=%2Fetc%2Fssh%2Ftoken_pin
</artwork>
</figure>

<figure>
<preamble>And if there is any need to include literal '%;' substring, for
example, we must escape both characters. The token value must be read as "The
token name with a strange substring '\;'" then.</preamble>
<artwork>
  pkcs11:token=A%20name%20with%20a%20strange%20substring%20'%25%3B';
         object=my-certificate;
         objecttype=cert;
         pinfile=/etc/ssh/token_pin
</artwork>
</figure>

<figure>
<preamble>The next example includes a small A with acute in the token
name. We must encode it in octets according to the UTF-8 character encoding and
then use the percent-encoding. Given that a small A with acute is U+225 unicode
code point, the UTF-8 encoding is 195 161 in decimal, which is "%C3%A1" in the
percent-encoding.</preamble>
<artwork>
  pkcs11:token=Name%20with%20a%20small%20A%20with%20acute:%20%C3%A1;
         object=my-certificate;
         objecttype=cert;
</artwork>
</figure>


</section>

<section anchor="iana" title="IANA Considerations">

<t>This document registers a URI scheme.  The registration template can be found
in Section 2 of this document.</t>

</section>

<section anchor="security" title="Security Considerations">

<t> There are many security considerations for URI schemes discussed in
<xref target="RFC3986" />.</t>

<t>Given that the PKCS#11 URI is also supposed to be used in command line
arguments to running programs, and those arguments can be world readable on some
systems, the URI intentionaly does not allow for specifying the PKCS#11 token
PIN as a URI attribute.</t>
</section>

</middle>

<back>
<references title="Normative References">
<reference anchor="pkcs11_spec">
	<front>
		<title>PKCS #11: Cryptographic Token Interface
		Standard v2.20</title>
		<author>
			<organization>RSA
			Laboratories</organization>
		</author>
		<date month="June" year="2004" />
	</front>
</reference>
<reference anchor="RFC3986">
	<front>
		<title>Uniform Resource Identifier (URI):
		Generic Syntax</title>

		<author initials="T." surname="Berners-Lee"
		fullname="Tim Berners-Lee">
		</author>
		<author initials="R. T." surname="Fielding"
		fullname="Roy T. Fielding">
		</author>
		<author initials="L." surname="Masinter"
		fullname="Larry Masinter">
		</author>

		<date month="January" year="2005" />
	</front>
	<seriesInfo name="RFC" value="3986" />
	<seriesInfo name="STD" value="66" />
</reference>
<reference anchor="RFC5234">
	<front>
		<title>Augmented BNF for Syntax Specifications: ABNF</title>

		<author initials="D. H." surname="Crocker"
		fullname="David H. Crocker">
		</author>
		<author initials="P." surname="Overell"
		fullname="Paul Overell">
		</author>

		<date month="January" year="2008" />
	</front>
	<seriesInfo name="RFC" value="5234" />
</reference>
<reference anchor="RFC4395">
	<front>
		<title>Guidelines and Registration Procedures for New URI
		Schemes</title>

		<author initials="T." surname="Hansen"
		fullname="Tony Hansen">
		</author>
		<author initials="T." surname="Hardie"
		fullname="Ted Hardie">
		</author>
		<author initials="L." surname="Masinter"
		fullname="Larry Masinter">
		</author>

		<date month="February" year="2006" />
	</front>
	<seriesInfo name="RFC" value="4395" />
</reference>
<reference anchor="RFC3629">
	<front>
		<title>UTF-8, a transformation format of ISO 10646</title>

		<author initials="F." surname="Yergeau"
		fullname="Francois Yergeau">
		</author>

		<date month="November" year="2003" />
	</front>
	<seriesInfo name="RFC" value="3629" />
	<seriesInfo name="STD" value="63" />
</reference>

</references>
</back>

</rfc>
