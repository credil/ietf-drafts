<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 PUBLIC ''
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
<!ENTITY RFC4861 PUBLIC ''
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4861.xml'>
<!ENTITY RFC2460 PUBLIC ''
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2460.xml'>
<!ENTITY RFC4862 PUBLIC ''
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4862.xml'>
<!ENTITY RFC3315 PUBLIC ''
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3315.xml'>
<!ENTITY RFC3633 PUBLIC ''
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3633.xml'>
<!ENTITY RFC3736 PUBLIC ''
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3736.xml'
]>
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="info"
     docName="draft-dannewitz-ppsp-secure-naming-00"
     ipr="pre5378Trust200902"
>
  <front>
    <title abbrev="ppsp-secure-naming">Secure naming structure and p2p application interaction</title>



    <author fullname="Christian Dannewitz" initials="C" surname="Dannewitz">
      <organization>University of Paderborn</organization>
      <address>
         <postal>
            <!--street>street and number</street-->
            <city>Paderborn</city>
            <!--code> 12345</code-->
            <country>Germany</country>
         </postal>
         <email>cdannewitz@upb.de</email>
      </address>
      </author>

    <author initials="T" surname="Rautio" fullname="Teemu Rautio">
      <organization>VTT Technical Research Centre of Finland</organization>
      <address>
         <postal>
            <!--street>Kaitoväylä 1</street-->
            <city>Oulu</city>
            <!--code>90571 Oulu</code-->
            <country>Finland</country>
         </postal>
         <email>teemu.rautio@vtt.fi</email>
      </address>
      </author>

    <author initials="O" surname="Strandberg" fullname="Ove Strandberg">
      <organization>Nokia Siemens Networks</organization>
      <address>
         <postal>
            <!--street>Linnoitustie 6</street-->
            <city>Espoo</city>
            <!--code>02600 Espoo</code-->
            <country>Finland</country>
         </postal>
         <email>ove.strandberg@nsn.com</email>
      </address>
      </author>

    <date year="2010" />

    <area>Transport</area>

    <workgroup>Individual Submission</workgroup>
    <keyword>Naming data model</keyword>
    <keyword>secure naming</keyword>
    <keyword>tracker reference ID</keyword>


    <abstract>
      <t>Many P2P applications use their own way to identify and address data relying on host centric addressing, limiting the access to the same data on potentially multiple locations for multiple P2P applications. There are potential benefits in providing a generic way to identify and address data so that multiple P2P systems can use the same data regardless of data location. The proposed secure naming structure provides a potential way to address these challenges with a common naming structure for all data and different needs. The additional feature of the proposal is securing the way data is addressed such that the receiver has the possibility to verify that the correct data is received. The secure naming structure should be beneficial as potential design principle in defining the two protocols identified as objectives in the PPSP charter. This document enumerates a number of design considerations to impact the design and implementation of the tracker-peer signaling and peer-peer streaming signaling protocols.  </t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"/>.</t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t>Today's dominating naming schemes in the Internet, i.e., IP addresses and URLs, are rather host-centric with respect to the fact that they are bound to a location. This kind of naming scheme is not suitable for P2P systems as they are based on an information-centric thinking, i.e., putting the information at the focus whereas the source for this information is constantly changing and might involve more than one source at once.</t>

<t>Numerous P2P applications use their own data model and protocol for keeping track of data and locations. This poses a challenge for use of the same information for several applications. A common naming scheme e.g. data model would be important to enable interconnectivity between different P2P systems. To be able to build a common P2P infrastructure that can serve a multitude of applications there is a need for a common application independent naming scheme. With such a naming scheme different applications can use and refer to the same information/data objects.
</t>
<t>It is possible to introduce false data into P2P systems, only detectable when the content is played out in the user application. The false data copies can be identified and sorted out if the P2P system can verify the reference used in the tracker protocol towards data received at the peer. One option to address this can be to secure the naming structure i.e. make the data reference be dependent on the data and related metadata.
</t> 
<t>For any type of caching solution (network based or P2P) and network based storage, e.g. DECADE, a common application independent naming scheme is essential to be able to identify cached copies of information/data objects.
      </t>
      <t> This document enumerates and explains the rationale for why a naming structure for information/data objects should be part of a specification for a protocol for PPSP. The main advantage is probably in the definition of a protocol for signaling and control between trackers and peers (the PPSP "tracker protocol") but also a signaling and control protocol for communication among the peers (the PPSP "peer protocol") might have benefits from a common and secure naming scheme.
   </t>
        
    </section>

    <section title="Naming requirements">
    <t>In the following, we discuss the requirements that a common naming scheme for P2P systems has to fulfill.
    </t> 
 <t>To enable efficient, large scale data dissemination that can make use of any available data copy, identifiers (IDs) in P2P systems have to be location-independent. Thereby, identical data can be identified by the same ID independently of its storage location and improved data dissemination can then benefit from all available copies. This should be possible without compromising trust in data regardless of its network source.
</t> 
 <t>Security in a P2P system needs to be implemented differently than in host-centric networks. In the latter, most security mechanisms are based on host authentication and then trusting the data that the host delivers. In a P2P system, host authentication cannot be relied upon, or one of the main advantages of a P2P system, i.e., benefiting from any available copy, is defeated. Host authentication of a random, untrusted host that happens to have a copy does not establish the needed trust. Instead, the security has to be directly attached to the data which can be done via the scheme used to name the data.
</t> 
 <t> Therefore, _self-certification_ is a main requirement for the naming scheme. Self-certification ensures the integrity of data and securely binds this data to its ID. More precisely, this property means that any unauthorized change of data with a given ID is detectable without requiring a third party for verification. Beforehand, secure retrieval of IDs (e.g., via search, embedded in a Web page as link, etc.) is required to ensure that the user has the right ID in the first place.  Secure ID retrieval can be achieved by using recommendations, past experience, and specialized ID authentication services and mechanisms that are out of the scope of this discussion.
</t> 
 <t>Another important requirement is _name persistence_, not only with respect to storage location changes as discussed above, but also with respect to changes of owner and/or owner's organizational structure, and content changes producing a new version of the information.  Information should always be identifiable with the same ID as long as it remains _essentially equivalent_. Spreading of persistent naming schemes like the Digital Object Identifier (DOI) <xref target="Paskin2010"></xref> also emphasizes the need for a persistent naming scheme. However, name persistence and self-certification are partly contradictory and achieving both simultaneously for _dynamic_ content is not trivial.
</t> 
 <t>From a user's perspective, persistent IDs ensure that links and bookmarks remain valid as long as the respective information exists somewhere in the network, reducing today's problem of "404 - file not found" errors triggered by renamed or moved content. From a content provider's perspective, name persistence simplifies data management as content can, e.g., be moved between folders and different servers as desired. Name persistence with respect to content changes makes it possible to identify different versions of the same information by the same consistent ID. If it is important to differentiate between multiple versions, a dedicated versioning mechanism is required, and version numbers may be included as a special part of the ID.
</t> 
 <t>The requirement of building trust in a P2P system combined with the desire for anonymous publication as well as accountability (at least for some content) can be translated into two related naming requirements. The first is _owner authentication_, where the owner is recognized as the same entity, which repeatedly acts as the object owner, but may remain _anonymous_. The second is _owner identification_, where the owner is also identified by a physically verifiable identifier, such as a personal name. This separation is important to allow for anonymous publication of content, e.g., to support free speech, while at the same time building up trust in a (potentially anonymous) owner.
</t> 
 <t>In general, the naming scheme should be able to adapt to future needs. Therefore, the naming scheme should be extensible, i.e., it should be able to add new information (e.g., a chunk number for BitTorrent-like protocols) to the naming scheme. The need for such extensions is stressed by today's variety of naming schemes (e.g., DOI or PermaLink) added on top of the original Internet architecture that fulfill specialized needs which cannot be met by the common Internet naming schemes, i.e., IP addresses and URLs.</t> 

     </section>

     <section title="Basic Concepts for an Application-independent P2P Naming Scheme">

      <t>In this section, we introduce an examplary naming scheme that illustrates a possible way to fulfill the requirements posed upon an application-independent naming scheme for P2P networks. The naming scheme integrates security deeply into the system architecture. Trust is based on the data's ID in combination with additional _security metadata_. Section 3.1 gives an overview of the naming scheme in general with details about the ID structure, and Section 3.2 describes the security metadata in more detail.
      </t>
      <section title="Overview">
<t>
Building on an identifier/locator split, each data element, e.g., file, is given a unique ID with cryptographic properties. Together with the additional security metadata, the ID can be used to verify data integrity, owner authentication, and owner identification. The security metadata contains information needed for the security functions of the naming scheme, e.g., public keys, content hashes, certificates, and a data signature authenticating the content. In comparison with the security model in today's host-centric networks, this approach minimizes the need for trust in the infrastructure, especially in the host(s) providing the data.
 </t>
<t>
In a P2P network, multiple copies of the same data element typically exist at different locations. Thanks to the ID/locator split and the application-independent naming scheme, those identical copies have the same ID and, hence, each P2P application can benefit from all available copies.
 </t>
<t>
Data elements are manipulated (e.g., generated, modified, registered, and retrieved) by physical entities such as nodes (clients or hosts), persons, and companies.  Physical entities able of generating, i.e., creating or modifying data elements are called _owners_ here. Several security properties of this naming scheme are based on the fact that each ID contains the hash of a public key that is part of a public/secret key pair PK/SK. This PK/SK pair is conceptually bound to the data element itself and not directly to the owner as in other systems like DONA <xref target="Koponen"></xref>. If desired, the PK/SK pair can be bound to the owner only _indirectly_, via a certificate chain. This is important to note because it enables owner change while keeping persistent IDs. The key pair bound to the _d_ata is thus denoted as PK_D/SK_D.
 </t>
<t>
Making the (hash of the) public key part of ID enables self-certification of _dynamic_ content while keeping persistent IDs. Self-certification of _static_ content can be achieved by simply including the hash of content in the ID, but this would obviously result in non-persistent IDs for dynamic content. For dynamic content, the public key in the ID can be used to securely bind the hash of content to the ID, by signing it with the corresponding secret key, while not making it part of ID.
 </t>
<t>
The owner's PK as part of the ID inherently provides _owner authentication_. If the public key is bound to the owner's identity (i.e., to its real-world name) via a trusted third party certificate, this also allows _owner identification_. Without this additional certificate, the owner can remain anonymous.
 </t>
<t>
To support the potentially diverse requirements of certain groups of P2P applications and adapt to future changes, the naming scheme can enable flexibility and extensibility by supporting different name structures, differentiated via a _Type field_ in the ID.
 </t>
      </section>

      <section title="ID Structure">
      <t>
      The naming scheme uses flat IDs to support self-certification and name persistence. In addition, flat IDs are advantageous when it comes to mobility and they can be allocated without an administrative authority by relying on statistical uniqueness in a large namespace, with the rare case of ID collisions being handled by the P2P system.
Although IDs are not hierarchical, they have a specified basic ID structure. The ID structure given as ID = (Type field | A = hash(PK) | L) is described subsequently.
</t>
<t>
The _Authenticator_ field A=Hash(PK_D) binds the ID to a public key PK_D. The hash function _Hash_ is a cryptographic hash function, which is required to be one-way and collision-resistant. The hash function serves only to reduce the bit length of PK_D. PK_D is generated in accordance with a chosen public-key cryptosystem. The corresponding secret key SK_D should only be known to a legitimate owner. In consequence, an owner of the data is defined as any entity who (legitimately) knows SK_D.
</t>
<t>
The pair (A, L) has to be globally unique. Hence, the _Label_ field L provides global uniqueness if PK_D is repeatedly used for different data.
</t>
<t>
To build a flexible and extensible naming scheme, e.g., to adapt the naming scheme to future changes, different types of IDs are supported by the naming scheme and differentiated via a mandatory and globally standardized _Type field_ in each ID. For example, the Type field specifies the hash functions used to generate the ID. If a used hash function becomes insecure, the Type field can be exploited by the P2P system in order to automatically mark the IDs using this hash function as invalid.
      </t>
      </section>

      <section title="Security Metadata Structure">
      <t>
The security metadata is extensible and contains all information required to perform the security functions embedded in the naming scheme. The metadata (or selected parts of it) will be signed by SK_D corresponding to PK_D. This securely binds the metadata to the ID, i.e., to the Hash(PK_D) which is part of the ID.  
For example, the security metadata may include:
</t>
            <list style="symbols">
                <t>specification of the hash function _h_ and the algorithm _DSAlg_ used for the digital signature</t>
                <t>complete PK_D (not only Hash(PK_D))</t>
                <t>specification of the parts of data that are self-certified, i.e., authenticated via the signature</t>
                <t>hash of the self-certified data</t>
                <t>signature of the self-certified data signed by SK_D</t>
                <t>all data required for owner authentication and identification</t>
            </list>

<t>
A detailed description and security analysis of this naming scheme and its security properties, especially self-certification, name persistence, owner authentication, and owner identification can be found in Dannewitz et al. <xref target="Dannewitz_10"></xref>.
</t>

      </section>

     </section>

    <section title="Application use of secure naming structure ">
     
      <t>From an application perspective the main advantage of a secure naming structure for a P2P infrastructure is that multiple applications can have common access to the same data elements. Another benefit of application-independent naming is that locally available and cached copies can easily be located. The secure naming also enables that data can be verified even if it is received from an untrusted host.
      </t>
      <t>For example, when an application like BitTorrent <xref target="WWWbittorrent"></xref> uses self-certifying names, the user is guaranteed that the data received is actually the data that has been requested, without having to trust any servers in the network (e.g., the tracker) or the peers that provide the data.
 </t>
<t>This means that BitTorrent's validation of the data integrity can be improved significantly using the presented secure naming structure. Currently, a standard BitTorrent system has no means to verify the integrity of the torrent file and consequently of the data. The torrent file contains the SHA1 hashes of the content pieces. However, anyone can modify a torrent file to bind different content to this file. If the torrent file gets modified, the user has no means any more to verify the integrity of the data. If, in addition, the tracker delivers forged data (consistent with the forged torrent file), a user could effectively be tricked into downloading forged content which would falsely be identified as being correct by the BitTorrent client. I.e., in the current BitTorrent system, a user has no guarantee that the downloaded content actually matches the expected/correct content.
</t>
<t>
The secure naming structure presented in this draft can provide a simple solution for this problem by securely binding the content of the torrent file to the name/ID of the torrent file. This can be done by extending the torrent file to include the above described security metadata information. In practice, an object owner would sign the hash values in the torrent file with the private key (SK_D) and would store this signature, the public key (PK_D), and some additional security metadata in the torrent file during torrent file creation. The respective torrent file ID would be generated according to the rules described in Section 3. Consequently, whenever a user knows the ID of the content/torrent file and retrieves the torrent file, she/he can now verify the integrity of the torrent file, can download the data pieces, and can use the included (and secured) hash(es) to verify the integrity of the received data. As a result, the user can be sure that the correct content was retrieved.
      </t>

    </section>

    <section title="Conclusion">

      <t>The secure naming structure is proposed for consideration as common reference ID structure in PPSP WG. For any P2P streaming application to have fair and multitude of data access, it is essential to have a common naming structure that is suitable for many different needs. The common naming is probably best displayed in the tracker protocol case but potential benefit in the actual streaming protocol case has to still be identified. The secure binding of reference ID to the actual content is manifested in the end user peer possibility to check correct data reception in regard to the used ID.
</t>
<t>The naming structure has been implemented in the 4WARD project prototypes and has been released as open source (www.netinf.org). The naming structure is also available through a public NetInf registration service at www.netinf.org. Three NetInf-enabled applications have also been published, the InFox (Firefox plugin), InBird (Thunderbird plugin), and a NetInf Information Object Management Tool, all available at the www.netinf.org site.
      </t>    

    </section>
    
   <section anchor="IANA" title="IANA Considerations">
      <t>This document has no requests to IANA.
      </t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>There are considerations about what private/public key and hash algorithms to utilize when designing the naming structure in a secure way. 
      </t>
    
    </section>

    <section title="Acknowledgements">
     <t>We would like to thank especially Borje Ohlman for excellent discussion and review of the draft. Thanks also goes to all persons participating in the Network of Information work package in the EU FP7 project 4WARD, the project SAIL and the Finnish ICT SHOK Future Internet 2 project for contributions and feedback to this document.</t>
    </section>

  </middle>

  <back>
    <references title="Informative References">
	&RFC2119;

	<reference anchor="Dannewitz_10">
	  <front>
  <title>Secure Naming for a Network of Information</title>
    <author initials="C." surname="Dannewitz" fullname="Christian Dannewitz"  ><organization></organization></author>
    <author initials="J." surname="Golic" fullname="Jovan Golic"  ><organization></organization></author>
    <author initials="B." surname="Ohlman" fullname="Borje Ohlman"  ><organization></organization></author>
    <author initials="B." surname="Ahlgren" fullname="Bengt Ahlgren"  ><organization></organization></author>
  <date year="2010" />
  </front>
    <seriesInfo name="13th IEEE Global Internet Symposium" value=""/>
</reference>
	<reference anchor="Paskin2010">
		<front>
			<title>Digital Object Identifier ({DOI}®) System</title>
			<author initials="N." surname="Paskin" fullname="Norman Paskin"  >
				<organization></organization>
			</author>
			<date year="2010" />
		</front>
		<seriesInfo name="Encyclopedia of Library and Information Sciences" value=""/>
	</reference>
		<reference anchor="Koponen">
			<front>
				<title>A Data-Oriented (and beyond) Network Architecture</title>
				<author initials="T." surname="Koponen" fullname="T. Koponen"  >
					<organization></organization>
				</author>
				<author initials="M." surname="Chawla" fullname="M. Chawla"  >
					<organization></organization>
				</author>
				<author initials="B.-G." surname="Chun" fullname="B.-G. Chun"  >
					<organization></organization>
				</author>
				<author initials="A." surname="Ermolinskiy" fullname="A. Ermolinskiy"  >
					<organization></organization>
				</author>
				<author initials="K. H." surname="Kim" fullname="K. H. Kim"  >
					<organization></organization>
				</author>
				<author initials="S." surname="Shenker" fullname="S. Shenker"  >
					<organization></organization>
				</author>
				<author initials="I." surname="Stoica" fullname="I. Stoica"  >
					<organization></organization>
				</author>				
				<date year="2007" />
			</front>
			<seriesInfo name="Proc. ACM SIGCOMM" value=""/>
		</reference>

	<reference anchor="WWWbittorrent">
		<front>
			<title>The BitTorrent Protocol Specification</title>
			<author initials="B." surname="Cohen" fullname="Bram Cohen">
				<organization></organization>
			</author>
			<date year="2008" />
		</front>
		<seriesInfo name="http://www.bittorrent.org/beps/bep_0003.html" value=""/>
	</reference>

	
  </references>
  </back>
</rfc>
