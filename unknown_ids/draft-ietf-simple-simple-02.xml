<?xml version="1.0" encoding="utf-8"?>
<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc='yes'?>
<?rfc tocdepth='5'?>
<?rfc symrefs="yes"?>

<?rfc compact='yes'?>
<?rfc subcompact='no'?>

<rfc ipr="full3978" category="info">


    <front>
        <title abbrev="Simple Made Simple">
SIMPLE made Simple: An Overview of the IETF Specifications
for Instant Messaging and Presence using the Session
Initiation Protocol (SIP)</title>
    
        <author initials="J.R." surname="Rosenberg"
                fullname="Jonathan Rosenberg">
            <organization>Cisco</organization>
    
            <address>
                <postal>
                    <city>Edison</city> <region>NJ</region>
                    <country>US</country>
                </postal>
    
                <phone>+1 973 952-5000</phone>
                <email>jdrosen@cisco.com</email>
                <uri>http://www.jdrosen.net</uri>
            </address>
        </author>
    
        <date month="February" year="2008" />
    
        <area>RAI</area>
        <workgroup>SIMPLE</workgroup>
        <keyword>SIP</keyword>
        <keyword>SIMPLE</keyword>
        <keyword>presence</keyword>
        <keyword>IM</keyword>
        <abstract>
            <t>The IETF has produced many specifications related to
	    Presence and Instant Messaging with the Session Initiation
	    Protocol (SIP). Collectively, these specifications are
	    known as SIMPLE - SIP for Instant Messaging and Presence
	    Leveraging Extensions. This document serves as a guide to
	    the SIMPLE suite of specifications. It breaks them up into
	    categories and explains what each is for and how they
	    relate to each other.</t>
        </abstract>
    </front>

<middle>


<section title="Introduction">

<t>
The IETF has produced many specifications related to Presence and
Instant Messaging with the Session Initiation Protocol
(SIP) <xref target="RFC3261"/>. Collectively, these specifications are
known as SIMPLE - SIP for Instant Messaging and Presence Leveraging
Extensions. These specifications cover topics ranging from protocols
for subscription and publication, to presence document formats, to
protocols for managing privacy preferences. The large number of
specifications can make it hard to figure out exactly what exactly
SIMPLE is, what specifications cover it, what functionality it
provides, and how these specifications relate to each other.
</t>

<t>
This document serves to address this problem. It provides an
enumeration of the protocols which make up the SIMPLE suite of
specifications from IETF. It categorizes them into related areas of
functionality, and briefly explains the purpose of each and how the
specifications relate to each other. Each
specification also includes a letter that designates its category in
the standards track <xref target="RFC2026"/>. These values are: </t>

<t><list style="hanging">

<t hangText="S:">Standards Track (Proposed Standard, Draft Standard, or
Standard)</t>

<t hangText="E:">Experimental</t>

<t hangText="B:">Best Current Practice</t>

<t hangText="I:">Informational</t>

</list></t>

</section>

<section title="Presence">

<t>SIMPLE provides for both presence and IM capabilities. Though both
of these fit underneath the broad SIMPLE umbrella, they are well
separated from each other and are supported by different sets of
specifications. That is a key part of the SIMPLE story; presence is
much broader than just IM, and it enables communications using voice
and video along with IM.
</t>

<t>
The SIMPLE presence specifications can be broken up into:
</t>

<list style="symbols">
<t>The core
protocol machinery, which provides the actual SIP extensions for
subscriptions, notifications and publications
</t>

<t>Presence documents, which are XML documents that provide for rich
presence and are carried by the core protocol machinery
</t>

<t>
Privacy and policy, which are documents for expressing privacy
preferences about how those presence documents are to be shown (or not
shown) to other users
</t>

<t>
Provisioning, which describes how users manage their privacy policies,
buddy lists and other pieces of information required for SIMPLE
presence to work
</t>

<t>
Optimizations, which are improvements in the core protocol machinery
that were defined to improve the performance of SIMPLE, particularly
on wireless links
</t>

</list>



<section title="Core Protocol Machinery">

<t>
<list style="hanging">

<t hangText="RFC 3265, SIP-Specific Event Notification (S):"> <xref
target="RFC3265">RFC 3265</xref>
defines the SUBSCRIBE and NOTIFY methods for SIP, forming the core of
the SIP event notification framework. To actually use the
framework, extensions need to be defined for specific event
packages. Presence is defined as an event package within this
framework. Packages exist for other, non-presence related functions,
such as message waiting indicators and dialog state changes.
</t>

<t hangText="RFC 3856, A Presence Event Package for SIP (S):"> RFC 3856
<xref target="RFC3856"/> defines an event package for indicating user
presence through SIP. Through this package, a SIP user agent can ask
to be notified of the presence state of a presentity (presence
entity). The content of the NOTIFY messages in this package are
presence documents, discussed in <xref target="sec-docs"/>
</t>

<t hangText="RFC 4662, A Session Initiation Protocol (SIP) Event
Notification Extension for Resource Lists (S):"> <xref
target="RFC4662">RFC 4662</xref> defines an
extension to RFC 3265 that allows a client to subscribe to a list of
resources using a single subscription. The server, called a Resource
List Server (RLS) will "expand" the subscription and subscribe to each
individual member of the list. Its primary usage with presence is to
allow subscriptions to "buddy lists". Without RFC 4662, a UA would
need to subscribe to each presentity individually. With RFC 4662, they
can have a single subscription to all buddies. A user can manage the
entries in their buddy list using the provisioning mechanisms in <xref
target="sec-prov"/>. 
</t>


<t hangText="RFC 3903, SIP Extension for Event State Publication (S):">
RFC 3903 <xref target="RFC3903"/> defines the PUBLISH method. With
this method, a user agent can publish its current state for any event
package, including the presence event package. Once an agent publishes
its presence state, the presence server would send notifications of
this state change using RFC 3856.
</t>

</list>
</t>

</section>

<section anchor="sec-docs" title="Presence Documents">

<t>
Once a user has generated a subscription to presence using the core
protocol machinery, they will receive notifications (SIP NOTIFY
requests) which contain presence information. That presence
information is in the form of an XML presence document. Several
specifications have been defined to describe this document format,
focusing on rich, multimedia presence.
</t>

<t><list style="hanging">

<t hangText="RFC 3863, Presence Information Data Format (S):"> <xref
target="RFC3863"/> defines the baseline XML format for a
presence document. It defines the concept of a tuple as representing a
basic communication modality, and defines a simple status for it (open
or closed). 
</t>

<t hangText="RFC 4479, A Data Model for Presence (S):"> <xref
target="RFC4479"/> extends the basic model in RFC
3863. It introduces the concepts of devices and person status, and
explains how these relate to each other. It describes how presence
documents are used to represent states in communications systems in a
consistent fashion. More than RFC 3863, it defines what a presence
document is and what it means.
</t>

<t hangText="RFC 4480, RPID: Rich Presence Extensions to PIDF (S):">
<xref target="RFC4480"/> adds many more attributes to
the presence document schema, building upon the model in RFC 4479. It
allows for indications of activities, moods, places and place types,
icons, and indications of whether a user is idle or not.
</t>

<t hangText="RFC 4481, Timed Presence Extensions to the
Presence Information Data Format (PIDF) to Indicate Status Information
for Past and Future Time Intervals (S):"> <xref target="RFC4481"/>
adds additional attributes to the presence document 
schema, again building upon the model in RFC 4479. It allows documents
to indicate status for the future or the past. For example, a user
can indicate that they will be unavailable for voice communications
from 2pm to 3pm, due to a meeting.
</t>

<t hangText="RFC 4482, CIPID: Contact Information for the Presence
Information Data Format (S):"> <xref target="RFC4482"/>
adds attributes to the presence document schema for contact
information, such as a vCard, display name, homepage, icon, or sound
(such as the pronunciation of their name). 
</t>

<t hangText="draft-ietf-simple-prescaps-ext, Session Initiation
	     Protocol (SIP) User Agent 
Capability Extension to Presence Information Data Format (PIDF) (S):">
<xref target="I-D.ietf-simple-prescaps-ext"/> adds even
more attributes to the presence document schema, this time to allow
indication of capabilities for the user agent. For example, the
extensions can indicate whether a UA supports audio and video, what
SIP methods it supports, and so on.
</t>

</list></t>

</section>

<section title="Privacy and Policy">

<t>
The rich presence capabilities defined by the specifications in <xref
target="sec-docs"/> introduces a strong need for privacy
preferences. Users must be able to approve or deny subscriptions to
their presence, and indicate what information such watchers can
see. In SIMPLE, this is accomplished through policy documents,
uploaded to the presence server using the provisioning mechanisms in
<xref target="sec-prov"/>.
</t>

<t><list style="hanging">

<t hangText="RFC 4745, Common Policy: A Document Format for Expressing
Privacy Preferences (S):"> <xref target="RFC4745"/>
defines a general XML framework for expressing privacy preferences for
both geolocation information and presence information. It introduces
the concepts of conditions, actions and transformations that are
applied to privacy-sensitive data. The common policy framework
provides privacy-safety, a property by which network error or version
incompatibilities can never cause more information to be revealed to a
watcher than the user would otherwise desire.
</t>

<t hangText="RFC 5025, Presence Authorization Rules (S):"> <xref
target="RFC5025"/> uses the
framework of RFC 4745 to define a policy document format for
describing presence privacy policies. Besides basic yes/no approvals,
this format allows a user to control what kind of information a
watcher is allowed to see.
</t>

<t hangText="RFC 3857, A Watcher Information Event Template Package
for SIP (S):"> <xref target="RFC3857"/>, also known as watcherinfo,
provides a mechanism for a user agent to find out what subscriptions
are in place for a particular event package. Though it was defined to
be used for any event package, it has particular applicability for
presence. It is used to provide reactive authorization. With reactive
authorization, a user gets alerted if someone tries to subscribe to
their presence, so that they may provide an authorization
decision. Watcherinfo is used to provide the alert that someone has
subscribed to a user's presence.
</t>

<t hangText="RFC 3858, An Extensible Markup Language (XML) Based
Format for Watcher Information (S):"> <xref target="RFC3858"/> is the
  companion to RFC 3857. It specifies the XML format 
of watcherinfo that is carried in notifications for the event template
package in RFC 3857.
</t>

</list></t>

</section>

<section anchor="sec-prov" title="Provisioning">

<t>
Proper operation of a SIMPLE presence system requires that several
pieces of data are correctly managed by the users and provisioned into
the system. These include buddy lists (used by the resource list
subscription mechanism in RFC 4662) and privacy policies (such as
those described by the XML format in <xref
target="RFC5025"/>). 
</t>

<t>
In SIMPLE, management of this data is handled by the XML Configuration
Access Protocol (XCAP) <xref target="RFC4825"/>. XCAP is used by the
user agent to manipulate buddy lists, privacy policy, and other data
that is represented by XML documents stored on a server.
</t>

<t><list style="hanging">

<t hangText="RFC 4825, The Extensible Markup Language (XML)
Configuration Access Protocol (XCAP) (S):"> <xref
target="RFC4825"/> specifies XCAP. XCAP is a usage of
HTTP that allows a user agent to manipulate the contents of XML
documents stored on a server. It can be used to manipulate any kind of
XML, and the protocol itself is independent of the particular schema
of the data it is modifying. XML schemas have been defined for buddy
lists, privacy policies and offline presence status, allowing all of
those to be managed by a user with XCAP.
</t>

<t hangText="draft-ietf-sip-xcapevent, An Extensible Markup Language
(XML) Configuration Access Protocol (XCAP) Diff Event Package (S):">
<xref target="I-D.ietf-sip-xcapevent"/> defines an extension to the
SIP user agent configuration profile, allowing a user agent to learn
about changes in its documents on an XCAP server. With this mechanism,
there can be a change made by someone else to a buddy list or privacy
policy document, and a UA will find out that a new version is
available.
</t>

<t hangText="draft-ietf-simple-xcap-diff, An Extensible Markup Language (XML) Document
Format for Indicating A Change in XML Configuration Access  Protocol
(XCAP) Resources (S):"><xref target="I-D.ietf-simple-xcap-diff"/> defines an XML format for indicating changes in XCAP
documents. It makes use of an XML diff format defined in <xref
target="I-D.ietf-simple-xml-patch-ops"/>. It is used in conjunction
with <xref target="I-D.ietf-sip-xcapevent"/> to alert a user agent
of changes made by someone else to their provisioned data.
</t>

<t hangText="RFC 4826, XML Formats for Representing Resource Lists
(S):"> <xref target="RFC4826"/> defines two XML document
formats used to represent buddy lists. One is simply a list of users
(or more generally, resources), and the other defines a buddy list
whose membership is composed of a list of users or resources. These
lists can be manipulated by XCAP, allowing a user to add or remove
members from their buddy lists. The buddy list is also accessed by the
resource list server specified in RFC 4662 for processing resource
list subscriptions.
</t>

<t hangText="RFC 4827, An Extensible Markup Language (XML)
Configuration Access Protocol (XCAP) Usage for Manipulating Presence
Document Contents (S):"> <xref target="RFC4827"/>
defines an XCAP usage that allows a user to store an "offline"
presence document. This is a presence status that is used by
a presence server when there are no presence documents published for
that user by any user agents currently running. 
</t>

</list></t>

</section>

<section title="Federation">

<t>
Federation refers to the interconnection of different presence and instant
messaging systems for the purposes of communications. Federation can
be between domains or within a domain. Documents have been developed
which describe how presence and IM federation works, the scale of
those systems have been analyzed, and optimizations have been defined
to improve on that scale.
</t>


<list style="hanging">

<t hangText="draft-ietf-speermint-consolidated-presence-im-usecases,
    Presence & Instant Messaging Peering Use Cases (I):">
    <xref target="I-D.ietf-speermint-consolidated-presence-im-usecases"/>
    describes a basic set of presence and instant messaging use cases
    for federating between providers. </t>

<t hangText="draft-ietf-simple-interdomain-scaling-analysis, Presence
	     Interdomain Scaling Analysis for SIP/SIMPLE (I):">
	     <xref target="I-D.ietf-simple-interdomain-scaling-analysis"/>
	     describes several different examples of federated
	     domains, and for each, provides a numerical analysis on
	     the volume of presence and IM traffic that can be
	     expected. </t>

<t hangText="draft-rosenberg-simple-intradomain-federation, Models
   for Intra-Domain Presence Federation (I):">,
   <xref target="I-D.rosenberg-simple-intradomain-federation"/>
   describes several different models for federating presence systems
   within a domain. Example use cases are described, along with
   considerations for routing, policy, and presence state. </t>

<t hangText="draft-rosenberg-simple-view-sharing, Optimizing Federated
	     Presence with View Sharing (S):">,
	     <xref target="I-D.rosenberg-simple-view-sharing"/>
	     defines an enhancement to <xref target="RFC3265"/> called
	     view sharing, used in federated domains. With this
	     optimization, a single document is sent from watched
	     domain to watching domain when there are multiple
	     watchers who would receive the same document
	     otherwise. </t>
</list>

</section>


<section title="Optimizations">

<t>
When running over wireless links, presence can be a very expensive
service. Notifications often get sent when the change is not really
relevant to the watcher. Furthermore, when a notification is sent, it
contains the full presence state of the watcher, rather than just an
indication of what changed. Optimizations have been defined to address
both of these cases. 
</t>

<t><list style="hanging">

<t hangText="RFC 4660, Functional Description of Event Notification
Filtering (S):"><xref target="RFC4660"/> defines a
mechanism that allows a watcher to include filters in its
subscription. These filters limit the cases in which notifications are
sent. It is used in conjunction with RFC 4661 <xref target="RFC4661"/>
which specifies the XML format of the filters themselves. The
mechanism, though targeted for presence, can be applied to any SIP
event package.
</t>

<t hangText="RFC 4661, An Extensible Markup Language (XML)-Based Format for
Event Notification Filtering (S):"><xref target="RFC4661"/> defines an
  XML format used with the event notification 
filtering mechanism defined in RFC 4660 <xref target="RFC4660"/>.
</t>

<t hangText="draft-ietf-simple-partial-pidf-format, Presence
	     Information Data format (PIDF) 
Extension for Partial Presence (S):"><xref
target="I-D.ietf-simple-partial-pidf-format"/> defines a new XML
format for representing changes in presence documents, called a
partial PIDF document. This format
contains an XML patch operation <xref
target="I-D.ietf-simple-xml-patch-ops"/>, that, when applied to the
previous presence document, yields the new presence document. The
partial PIDF document is included in presence notifications when a
watcher indicates that they support the format.
</t>

<t hangText="draft-ietf-simple-partial-publish, Publication of Partial
	     Presence Information 
(S):"> <xref target="I-D.ietf-simple-partial-publish"/>
defines a mechanism for publishing presence status using a partial
PIDF document. 
</t>

<t hangText="draft-ietf-simple-xml-patch-ops, An Extensible Markup
	     Language (XML) Patch 
Operations Framework Utilizing XML Path Language (XPath) Selectors
(S):"> <xref target="I-D.ietf-simple-xml-patch-ops"/>
defines an XML structure for representing changes in XML documents. It
is a form of "diff", but specifically for XML documents. It is used by
several of the optimization mechanisms defined for SIMPLE.
</t>

<t hangText="RFC 5112, The Presence-Specific Static Dictionary for
Signaling Compression (Sigcomp) (S):">
  <xref target="RFC5112"/> defines a
  dictionary for usage with Signaling Compression (Sigcomp)
  <xref target="RFC3320"/> to improve the compressability of presence
  documents.
</t>

</list></t>

</section>

</section>

<section title="Instant Messaging">

<t>
SIMPLE defines two modes of instant messaging. These are page mode and
session mode. In page mode, instant messages are sent by sending a SIP
request that contains the contents of the instant message. In session
mode, IM is viewed as another media type - along with audio and video
- and an INVITE request is used to set up a session that includes IM
as a media type. While page mode is more efficient for one or two
message conversations, session mode is more efficient for longer
conversations since the messages are not sent through the SIP
servers. Furthermore, by viewing IM as a media type, all of the
features available in SIP signaling - third party call control,
forking, and so on, are available for IM.
</t>

<section title="Page Mode">

<t><list style="hanging">

<t hangText="RFC 3428, Session Initiation Protocol (SIP) Extension for
Instant Messaging (S):"> <xref target="RFC3428"/>
introduces the MESSAGE method, which can be used to send an instant
message through SIP signaling. </t>

<t hangText="draft-ietf-sip-uri-list-message, Multiple-Recipient
	     MESSAGE Requests in the 
Session Initiation Protocol (SIP) (S):">
  <xref target="I-D.ietf-sip-uri-list-message"/> defines a mechanism
  whereby a client can send a single SIP MESSAGE to multiple
  recipients. This is accomplished by including the list of recipients
  as an object in the body, and having a network server send a copy to
  each recipient.
</t>

</list></t>

</section>

<section title="Session Mode">

<list style="hanging">

<t hangText="RFC 4975, The Message Session Relay Protocol (MSRP)
(S):"> <xref target="RFC4975"/>
defines a small text-based protocol for exchanging arbitrarily sized
content of any time between users. An MSRP session is set up by
exchanging certain information, such as an MSRP URI, within SIP and
SDP signaling.
</t>

<t hangText="RFC 3862, Common Presence and Instant Messaging (CPIM):
Message Format (S):"> <xref target="RFC3862"/> defines a
wrapper around instant message content, providing meta-data such as
the sender and recipient identity. The CPIM format is carried in
MSRP. 
</t>

<t hangText="RFC 4976, Relay Extensions for the Message Sessions Relay
Protocol (MSRP) (S):"> <xref target="RFC4976"/> adds support for
  relays to MSRP. These relay servers 
receive MSRP messages and send them towards the destination. They
provide support for firewall and NAT traversal, and allow for features
such as recording and inspection to be implemented.
</t>

</list>

</section>

<section title="IM Chat Rooms">

<t>
In SIMPLE, IM multi-user chat, also known as chat-rooms, are provided
using regular SIP conferencing mechanisms. The framework for SIP
conferencing <xref target="RFC4353"/> and conference control <xref
target="I-D.ietf-xcon-framework"/> describe how all SIP-based
conferencing works, including joining and leaving, persistent and
temporary conferences, floor control and moderation, and learning of
conference membership, amongst other functions. All that is necessary
are extensions to provide features that are specific to IM.
</t>

<list style="hanging">

<t hangText="draft-ietf-simple-chat, Multi-party Instant Message (IM) Sessions 
the Message Session Relay Protocol (MSRP) (S):"> <xref
target="I-D.ietf-simple-chat"/> defines how MSRP is used
to provide support for nicknames and private chat within an IM
conference. 
</t>

</list>

</section>

<section title="IM Features">

<t>
Several specifications have been written to provide IM-specific
features for SIMPLE. These include "is-typing" indications, allowing a
user to know when their messaging peer is composing a response, and
delivery notifications, allowing a user to know when their IM has been
received. 
</t>

<list style="hanging">

<t hangText="RFC 3994, Indication of Message Composition for Instant
Messaging (S):"> <xref target="RFC3994"/> defines an XML
format that can be sent in instant messages that indicates the status
of message composition. This provides the familiar "is-typing"
indication in IM systems, but also supports voice, video and other
message types.
</t>

<t hangText="draft-ietf-simple-imdn, Instant Message Disposition
	     Notification (S):"> 
<xref target="I-D.ietf-simple-imdn"/> provides delivery
notifications of IM receipt. This allows a user to know with certainty
that a message has been received. 
</t>

</list>

</section>

</section>

<section title="Security Considerations">

<t>
This specification is an overview of existing specifications, and does
not introduce any security considerations on its own. 
</t>

</section>

<section title="IANA Considerations">

<t>
None.
</t>

</section>

</middle>

<back>
<references title="Informative References">
<?rfc include="reference.RFC.3261"?>
<?rfc include="reference.RFC.3265"?>
<?rfc include="reference.RFC.3856"?>
<?rfc include="reference.RFC.4662"?>
<?rfc include="reference.RFC.3903"?>
<?rfc include="reference.RFC.3863"?>
<?rfc include="reference.RFC.4479"?>
<?rfc include="reference.RFC.4480"?>
<?rfc include="reference.RFC.4481"?>
<?rfc include="reference.RFC.4482"?>
<?rfc include="reference.I-D.ietf-simple-prescaps-ext"?>
<?rfc include="reference.RFC.4745"?>
<?rfc include="reference.RFC.5025"?>
<?rfc include="reference.RFC.3857"?>
<?rfc include="reference.RFC.3858"?>
<?rfc include="reference.RFC.4825"?>
<?rfc include="reference.RFC.4826"?>
<?rfc include="reference.RFC.4827"?>
<?rfc include="reference.I-D.ietf-sip-xcapevent"?>
<?rfc include="reference.I-D.ietf-simple-xcap-diff"?>
<?rfc include="reference.I-D.ietf-simple-xml-patch-ops"?>
<?rfc include="reference.RFC.4660"?>
<?rfc include="reference.RFC.4661"?>
<?rfc include="reference.I-D.ietf-simple-partial-publish"?>
<?rfc include="reference.I-D.ietf-simple-partial-pidf-format"?>
<?rfc include="reference.RFC.3428"?>
<?rfc include="reference.RFC.4975"?>
<?rfc include="reference.RFC.4976"?>
<?rfc include="reference.RFC.4353"?>
<?rfc include="reference.I-D.ietf-xcon-framework"?>
<?rfc include="reference.I-D.ietf-simple-chat"?>
<?rfc include="reference.RFC.3994"?>
<?rfc include="reference.RFC.3862"?>
<?rfc include="reference.RFC.2026"?>
<?rfc include="reference.I-D.ietf-simple-imdn"?>
<?rfc include="reference.RFC.5112"?>
<?rfc include="reference.RFC.3320"?>
<?rfc include="reference.I-D.ietf-sip-uri-list-message"?>
<?rfc include="reference.I-D.ietf-speermint-consolidated-presence-im-usecases"?>
<?rfc include="reference.I-D.ietf-simple-interdomain-scaling-analysis"?>
<?rfc include="reference.I-D.rosenberg-simple-intradomain-federation"?>
<?rfc include="reference.I-D.rosenberg-simple-view-sharing"?>
</references>

</back>
</rfc>
