<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC2616 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-vinayak-http-latency-00" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="HTTP Latency Metrics"> HTTP Latency Metrics </title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Vinayak Hegde" initials="V." role="editor"
            surname="Hegde">
      <organization>Inmobi India Pvt. Ltd.</organization>

      <address>
        <postal>
          <street></street>

          <!-- Reorder these if your country does things differently -->

          <city>Bangalore</city>

          <region></region>

          <code></code>

          <country> India </country>
        </postal>

        <phone>+91 94498 34401 </phone>

        <email>vinayak.hegde@inmobi.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date month="July" year="2010" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>template</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>This RFC will outline the different components of end-to-end HTTPS Latency Metrics. Each of these components is either a specific protocol or connection-oriented metrics. Taken together each of these components can reveal the characteristics of the application and the it's beaviour and interaction with the underlying protocol. This draft will however not cover the methodology or tools for measuring this and it is outside the scope of the current document.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t> HTTP has become ubiquitous over the Internet powering several websites and even a small downtime can cause millions of dollars of losses. However most measurement tools and sites either us their own metrics or use different terminology. Some of these metrics are artificial and do not rflect the different stages in a download of an HTML page. In tis draft I will outline the different metrics that matter and their significance to the lifecycle of a html page download. </t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>

    <section anchor="simple_list" title="List of HTTP Latency Metrics">
      <t> The different components of HTTP Latency metrics are as follows.</t>

      <t><list style="numbers">
          <t> DNS Query time</t>

          <t> Connection Setup Time</t>
	
	  <t> SSL Handshake Time</t> 

	  <t> Request Time </t>

	  <t> First Byte Time </t>
	
	  <t> Content Download Time </t>

	  <t> Embedded Content Download </t>
        </list> The definition of each of these terms can be found in the following section.</t>
    </section>

    <section title="Detailed definition of each component">
	<section title="DNS Query Time">
		<t> DNS Query Time is the a measure of the time taken from the instant that an application starts writing the first byte of the request to the socket to the instant when the last byte of the resolved DNS response is received. </t> 	
	</section>
	<section title="Connection Setup Time">	
		<t> Once the IP address has been received by the application, it will try to setup a connection. The connection time is the difference between the instant from when the first SYN packet is sent to the destination host to the time when the final ACK is received by the sender host</t>
	</section>

	<section title="SSL Handshake Time">
		<t> TBD </t>
	</section>
	<section title="Request Time">
		<t> Sometime the sender host might take sometime to generate and send the HTTP Request that might be spread over several TCP segments. Request Time is the time difference between the time instant when the (secure) connection is setup and the time instant when the last byte is written to the socket.</t>
	</section>
	<section title="First Byte Time">
		<t> Once the request has been sent to the destination host, the destination host will take some time to respond to the request and start writing a response to it. The first byte time is the time difference between time instant the last byte of the request is written to the socket and the time instant when the first byte of the response from the server is received.</t>
	</section>
	<section title="Content Download Time">
		<t> The Content Download time is the time difference between the instant the first byte of response is recieved by the sending host and the time instant when the last byte of the response is received by the sending host.</t>
	</section>
    </section>

    <section title="Explanation of components of HTTP Latency">
	<section title="DNS Query time">
		<t> DNS query time can reveal problems with the DNS infrastructure such as 
			<list style="numbers"> 
				<t> Improper DNS server configuration. </t>
				<t> Overloaded DNS server. </t>
				<t> Too short TTL set for caching of DNS responses. </t>
				<t> Too many levels of delegation before getting to the right DNS servers. </t>
				<t> Too many CNAME to be resolved before getting an A record. </t> 
			</list> 
		    In the overall scheme of things, DNS resolution time is actually less except in the case when the content itself is very small and spread over several domain names. A common example of this is thumbnails distributed on many different subdomains.
		</t>
	</section>

	<section title="Connection Setup Time">
		<t> The connection setup time can give an indication of how busy the server is (to be able to accept new connections) or even the packet loss on the network. A packet lost during the connection setup time is usually more costly as compared to those later in the data transfer period. Hence on a lossy network connection setup time can take gives an indication of packet loss.</t>
	</section>

	<section title="SSL Handshake Time">
		<t> TBD </t>
	</section>
	<section title="Request Time">
 		<t> The request time can give an indication of how much time was taken in creating the queries and sending it across the wire to the destination. This time can be significantly large in the case of the large HTTP POST (which browsers use sometimes to upload objects such as photos and videos files). Even normally, web browsers are seen to send small form requests that should usually fit into one TCP segment over two TCP segments - one TCP segment for headers and another for the actual form data adding overhead to the request time. In the overall scheme of things, request time should be insignificant except in the case of testing HTTP end-to-end latency for uploads. </t>
	</section>

	<section title="First Byte Time">
		<t> Once the request has been sent, the destionation host takes some time to process it. The processing may involve amongst other things generating a page based on a template, connecting to the database to get data, adding inline style tags and javascript. The time taken for doing all this is typicall seen in first byte time (the idle time at the sender after sending the request). Howver some webservers can be configured to flush data as soon as a request is received. An example of this is flushing out initial lines of the header which could be common to the whole website and the server. In this case the processing time taken by the server can be hidden as the webserver starts pushing data out while parsing the temple and inserting data at appropriate placs in the template.</t>	
	</section>

	<section title="Content Download Time">
		<t> The content download time can be affected by a whole lot of factors including congestion algorithms, packet loss and whether the sender and receiver support compression or not.</t>
	</section> 
    </section>

    <section title="Special Considerations">
	<section title="DNS Query time"> 
		<t> The application is generally oblivious to the underlying API that does the DNS query. In effect, the process of DNS resolution might involve both UDP and TCP and several sequential lookups (in the case of non-recursive DNS servers). Also DNS servers cache their replies so there might be the problem of spiky behavior when doing continuous end-to-end tests. This effect cannot be completely removed from most measurements as the reply to DNS query can be cached at any level of the DNS heirarchy and depends on the configuration of each client.</t>
		<t> Several CDNs also set the TTLs of their replies very small (as small as ~5 seconds). This can have an effect on the end-to-end measurement as the DNS caching layer might not be able to handle small TTLs. Some webbrowsers are alsoo know to have their own internal cache to cache replies from the most recent queries while overllooking the TTLs in the response.</t>
	</section>

	<section title="Redirects">
		<t> In the real world, the response to an DNS query or an HTTP request may not be immediate. Examples of both:
		<list style="symbols">
			<t> DNS CNAME : Some CDNs and several large websites have a bunch of CNAMEs that need to be followed and resolved before getting the A record with an IP address as an answer. Example TBD </t>
			<t> HTTP 3xx Redirects : HTTP redirects are often used (and abused) by websites. This should be avoided except in rare cases as they will add time delay of atleast one RTT to every HTTP response. </t>
			<t> HTML Redirect : Though this does not fall under the purview of the protocol, HTML META Refresh tags can also be used to reload a page or redirect it to another website. This happens though after the HTTP response has been recived and interpreted by the sending hosti. Example TBD </t>
		</list>
		</t>
	</section>

	<section title="Embedded Content Download Time">
		<t> The Embedded Content download time is the time difference from which the first DNS request is sent for the embedded content of the page to the time instant of the receipt of the last byte of the page. This does not take care of pages which have continuously flowing data such as stock tickers or pages in which some external or user event trigger another HTTP Request without refreshing the page. Embedded Content Download time is an measure of the time taken to download all the embedded components of the page when the HTML page was first recieved by the sending host.</t>
	</section>

	<section title="Compression">
		<t> If both the sender and the receiver support compression then the content download time can be signifiantly reduced. However there are resources and time required at both the sender and receiver for compression and decompression. Also some content compresses better than other. e.g Test can be significantly compressed on-the-fly as compared to video and images (which are generally compressed beforehand using more efficient codecs). But for this to be done the right HTTP headers have to be send by both the sender and receiver </t>
	</section>
    </section>
    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t> I acknowledge Al Morton for his help in creating this draft and his constant encouragement. ISOC also helped me by funding my travel to the IETF.</t>

    </section>

    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>

      <t>All drafts are required to have an IANA considerations section (see
      <xref target="I-D.narten-iana-considerations-rfc2434bis">the update of
      RFC 2434</xref> for a guide). If the draft does not require IANA to do
      anything, the section contains an explicit statement that this is the
      case (as above). If there are no requirements for IANA, the section will
      be removed during conversion into an RFC by the RFC Editor.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>All drafts are required to have a security considerations section.
      See <xref target="RFC3552">RFC 3552</xref> for a guide.</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC. anchor="DOMINATION"
                 target="http://www.example.com/dominator.html">
        <front>
          <title>Ultimate Plan for Taking Over the World</title>

          <author>
            <organization>Mad Dominators, Inc.</organization>
          </author>

          <date year="1984" />
        </front>
      </reference>
 .xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
     <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;

      <reference anchor="min_ref">
        <!-- the following is the minimum to make xml2rfc happy -->

        <front>
          <title>Minimal Reference</title>

          <author initials="V" surname="Hegde">
            <organization></organization>
          </author>

          <date year="2010" />
        </front>
      </reference>
    </references>

    <references title="Informative References">
      <!-- Here we use entities that we defined at the beginning. -->

      &RFC2616;

      &RFC3552;

      &I-D.narten-iana-considerations-rfc2434bis;

   </references>

    <section anchor="app-additional" title="Additional Stuff">
      <t>This becomes an Appendix.</t>
    </section>

    <!-- Change Log

v00 2006-03-15  VVH   Initial version -->
  </back>
</rfc>
