<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="no"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-doran-geopriv-proto-map-00" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="Location Protocol Model">A Logical Data Model for Location Protocols</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->
    
    <author fullname="Kevin M. Doran" initials="K.M." surname="Doran">
      <organization>BBN Technologies</organization>
      <address>
        <postal>
          <street>9861 Broken Land Parkway</street>
          <city>Columbia</city>
          <region>MD</region>
          <code>21046</code>
          <country>US</country>
        </postal>
        <phone>+1 410 290 6175</phone>
        <email>kdoran@bbn.com</email>
      </address>
    </author>
    
    <author fullname="Richard L. Barnes" initials="R.L." surname="Barnes">
      <organization>BBN Technologies</organization>
      <address>
        <postal>
          <street>9861 Broken Land Parkway</street>
          <city>Columbia</city>
          <region>MD</region>
          <code>21046</code>
          <country>US</country>
        </postal>
        <phone>+1 410 290 6169</phone>
        <email>rbarnes@bbn.com</email>
      </address>
    </author>

    <date year="2010" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>RAI</area>

    <workgroup>GEOPRIV</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>geopriv, geolocation, location, protocol, 
    model, held, gears, parlay, mlp, locsip</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>There are currently several protocols developed by different standards organizations that implement a basic design pattern where a client requests location from a location server and the server responds with location information. This document defines a general data model for such protocols, and describes how some existing geolocation protocols can be mapped into this unified model.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="intro-sec" title="Introduction">
      
      <t>Over time, the increasing mobility of Internet endpoints, and the global basis on which Internet applciations are delivered, have driven demand for geolocation information about Internet hosts.  In order to respond to the demand, many different organizations have developed geolocation platforms and protocols. For example, the SUPL and MLP location protocols for cellular networks were developed in the 3GPP and OMA, while the Parlay/X location protocol for tradional fixed-line telephone networks was developed in ETSI.  While many of these protocols have matured idependently, because they are similiar in purpose, the data models that they define are also similiar.  While the terminoligy for data elements may vary, the definitions are often analogous, if not equivalent.  Despite the clear overlap of function, different protocols continue to be used independently, perpetuating a fragmented marketplace for location services. This fragmentation did not cause problems while the domains of different protocols remained distinct.  However, many different types of networks, with their own "native" location protocols, are now being used to carry IP traffic.  At the same time, geolocation functiosn are being introduced as core components of modern web browsers and operating systems.  These trends argue for a unification of the current space of location protocols in order to facilitate location services that are interoperable across the entire Internet.</t>
      
      <t>Obviously, a proliferation of protocols has practical implications as well.  Without a single universal data model, developers are forced to choose which protocols to use or support in their implemetations.  Server and client components have little re-usability and interoperability across protocols.  Transitioning from one protocol to another is expensive and difficult.  This is an unfortunate situation, espescially because it could be avoided given the similarities among protocols.  In fact, if a universal data model is agreed upon, and the process for mapping various protocols to and from that data model is standardized, these problems can be resolved.</t>

      <t>This document introduces a universal geolocation data model that will meet the needs of the majority of exisiting protocols and be extensible to accomodate future protocols.  <!-- This document names this universal data model "[insert name here]," which is abbrieviated as "[insert acronym here]".--></t>
      
      <t>This document also provides mappings of some exisiting geolocation protocols to this data model.  A main goal of these mappings is to reduce confusion resulting from the use of different terminology to mean the same thing in different specifications.</t>
    </section>

    <section anchor="def-sec" title="Definitions">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </section>
   
    <section anchor="overview-sec" title="Data Model Overview">
      
      <t>It is logical for the data model to consist of two top level objects: Request and Response.
      The two natural architectures for location sharing are pull and push style systems.  In both of
      these systems, there is an entity that wants to know location (requester) and an entity that
      provides location (responder).  The request object represents the messages that originate from
      requesters, and likewise, the response object represents messages originating from responders.</t>
      
      <t>A geolocation data model organized into top level request and response objects would satistfy
      the needs nearly all current location location protocols. Protocols that use client-request/server-response
      message flows (HELD, MLP, Parlay/X, Google Gears) are well aligned to use this data model.
      The data model also fits into protocols that use client-subscribe/server-notify message flows
      (Parlay/X, [LOC]SIP).  Geolocation platforms that depend on client-post location updates can also
      sue this data model.  In short, this request/response structured data model is flexible enough to
      fit into many different types of protocols and message flows.</t>
      
      <t>The request object contains any information that is necessary/helpful for a location provider.
      This includes the type of request, identifiers, measurements, constraints on the 
      response, callback URIs, and other relevant information.</t>
      
      <t>The response object contains any information relevant to the location requester. In addition to
      a location object, this includes the type of response, identifiers, time information, error messages,
      and any other useful information.  Furthermore, a response object does not necessarily have to be used
      as a "response" in a message flow.  It can be used by any entity that wants to send a location object
      to another, ie, a client posting a location update to a location server.</t>
      
      <t>Obviously, the standard request and response objects will not cover all elements of all protocols;
      hovever, they are both extensible so they can be customized for individual protocols and extended for 
      futurue use.  This document will define a standard way of generically extending the universal data model.</t>
    </section>

    <section anchor="rq-sec" title="Request parameters">
      <section anchor="rq-gen-sec" title="General">
        <t>Parameters listed under "General" are top level parameters not falling under any particular 
        categorization.</t>
        <section anchor="rq-gen-tar-sec" title="Target">
          <t>The Request object MAY specify the target device to which the location request should be sent
          using the "target" parameter.  The value of this paramter is a URI.</t>
        </section>
        <section anchor="rq-gen-cb-sec" title="Callback">
          <t>The Request object MAY specify a callback address to which the location response should be sent
          using the "callback" parameter.  The value of this paramter is a URI.  In the case of a third-party
          location query, this field SHOULD be used to specify the address of the first-party device that 
          is performing the lookup on behalf of the third-party device.</t>
        </section>
        <section anchor="rq-gen-lang-sec" title="Language">
          <t>The Request objecy MAY define the requested langauge for a response containing a civic address
          using the "language" parameter.  Language values should follow two-character and three-character
          representations defined is ISO639.</t>
        </section>
        <section anchor="rq-gen-acc-sec" title="Accuracy">
          <t>The Request object MAY define the requested accuracy for a response containing a geodetic 
          address using the "accuracy" parameter. [What units should accuracy use?  How should protocols
           that request mutliple accuracies be mapped to the unified data model?]</t>
        </section>
        <section anchor="rq-gen-age-sec" title="Age">
          <t>The Request object MAY define the maximum age of the location in the response using the
          "age" parameter.  [How should we handle tolerance of this request parameter if it cannot be 
          satisfied? Let each protocol define it? Add tolerance parameters?]</t>
        </section>
        <section anchor="rq-gen-time-sec" title="Response Time">
          <t>The Request object MAY define the requested maximum response time for the location provider
          to respond to the location request using the "response_time" parameter. [How should this 
          be represented? milliseconds? let protocol decide/define untis?]</t>
        </section>
      </section>
      <section anchor="rq-proto-sec" title="Protocol">
        <t>A Request object MAY define a Protocol object that defines the protocol specific
        aspects of the request.</t>
        <section anchor="rq-proto-name-sec" title="Protocol Name">
          <t>The "protocol:name" parameter is a string representation of the protocol being
          used by the universal data model, ie "HELD".</t>
        </section>
        <section anchor="rq-proto-ver-sec" title="Protocol Version">
          <t>The "protocol:version" parameter is a string representation of the version of the protocol
          being used, which is defined by the "protocol:name" parameter.  An example value for this
          field is "1.1".</t>
        </section>
        <section anchor="rq-proto-req-type-sec" title="Request Type">
          <t>Protocols that have multiple types of requests can use this field to define what request
          type to use.  For example, Parlay/X might use this field to distinguish a "getLocation"
          request from a "getTerminalDistance" request or a "startPeriodicalNotification" subscription
          request.</t>
        </section>
      </section>
      <section anchor="rq-id-sec" title="Identifiers">
        <t>Identifiers are parameters that identify the device that is requesting location.  For third-party
        location queries, these should describe the third-party device, not the first-party requester.  That is,
        if Device A requesting location on behalf of Device B, identifiers should describe Device B, and Device A
        can be specified via the "callback" parameter.</t>
        <section anchor="rq-id-uid-sec" title="Unique Identifier (UID)">
          <t>The "uid" parameter MAY be used to define any Unique Identifier applicable to the protocol being
          represented. [ie, "DUID" for location over dhcp]</t>
          <t>A "uid" should not be confused with a network access identifier (see NAI).</t>
        </section>
        <section anchor="rq-id-nai-sec" title="Network Access Identifier (NAI)">
          <t>To be used with protocols that require authentication ie, username, user@domain [See RFC4282]</t>
        </section>
        <section anchor="rq-id-nap-sec" title="Network Access Password">
          <t>Password associated with UNI for networks that require username/password authentication</t>
        </section>
        <section anchor="rq-id-grp-sec" title="Group">
          <t>The "group" parameter MAY be used to define a group/buddy list when looking up a location for 
          multiple users. This is used for third-party requests.</t>
        </section>
        <section anchor="rq-id-ip-sec" title="IP Address">
          <t>The IP address of the requester can be stored using the "ip" parameter.</t>
        </section>
        <section anchor="rq-id-mac-sec" title="MAC Address">
          <t>The MAC address (bssid) of the requester can be stored using the "mac" parameter.</t>
        </section>
        <section anchor="rq-id-port-sec" title="Port Number">
          <t>The "port" parameter MAY be used to specify the UDP or TCP Port being used.  
          This is useful for mulitple requesters running on same IP on different ports.</t>
        </section>
        <section anchor="rq-id-uri-sec" title="URI">
          <t>A URI specifying the requester can be stored in the "uri" parameter.  For a first-party
          location query, this SHOULD be the same as the "callback" parameter if both contain values.</t>
        </section>
        <section anchor="rq-id-fqdn-sec" title="Fully Qualified Domain Name">
          <t>The fully qualified domain name of the requester can be stored in the "fqdn" parameter.
          This should be a domain name that resolves to a SINGLE device. ie, server-1.example.com.</t>
        </section>
        <section anchor="rq-id-cell-sec" title="[Cellular] Telephony">
          <t>The "telephony" parameter can be used to store various telephony identifiers, such as
          MSISDN, IMSI, IMEI, MIN, MDN.</t>
        </section>
      </section>
      <section anchor="rq-meas-sec" title="Measurements">
        <t>Measurements get a little bit tricky with fields, attributes, and units varying across protocols...  Need to consider these factors when deciding how to map them to a unversial data model</t>
        <section anchor="re-meas-wf-sec" title="WiFi"><t>Parameters for storing WiFi Data.</t></section>
        <section anchor="re-meas-cell-sec" title="Cellular"><t>Parameters for storing Cellular Data.</t></section>
        <section anchor="re-meas-wm-sec" title="w16e"><t>Parameters for storing w16e Data</t></section>
        <section anchor="re-meas-gnss-sec" title="GNSS"><t>Parameters for storing GNSS Data</t></section>
      </section>
      <section anchor="rq-other-sec" title="Other parameters">
        <t>Describle how the universal data model can be extended here.</t>
      </section>
    </section>

    <section anchor="rs-sec" title="Response parameters">
      <section anchor="rs-gen-sec" title="General parameters">
        <t>Parameters listed under "General" are top level parameters not falling under any particular 
        categorization.</t>
        <section anchor="rs-gen-time-sec" title="Timestamp">
          <t>The time the location was discovered.</t>
        </section>
        <section anchor="rs-gen-tar-sec" title="Target">
          <t>The device to receiving the response.  The value of this parameter is a URI.</t>
        </section>
      </section>
      <section anchor="rs-loc-sec" title="Location [PIDF-LO]">
        <t>The Location model is essentially a one-to-one mapping of a PIDF-LO.</t>
        <section anchor="rs-geo-sec" title="Geodetic location"><t></t></section>
        <section anchor="rs-civic-sec" title="Civic location"><t></t></section>
        <section anchor="rs-uri-sec" title="Location by reference"><t></t></section>
      </section>
      <section anchor="rs-other-sec" title="Other parameters"><t></t></section>
    </section>

    <section anchor="map-sec" title="Protocol mapping summary">
          <t>This section shows how existing protocols map to the above unified data model
            <list style='symbols'>
              <t>[(model, HELD, DHCP, MLP, Gears, LOCSIP)]</t>
            </list>
          </t>

      <section anchor="map-gears-sec" title="Google Gears Geolocation API Mapping">
        <t></t>
        <texttable anchor='map-gears-rq-table'>
          <preamble></preamble>
          <ttcol align='center'>Request Model</ttcol>
          <ttcol align='center'>Gears</ttcol>
          <c>language</c> <c>address_language</c>
          <c>target</c> <c>host</c>
          <c>callback</c> <c></c>
          <c>accuracy</c> <c></c>
          <c>response_age</c> <c></c>
          <c>response_time</c> <c></c>
          <c>protocol:name</c> <c>"Google Gears Geolocation"</c>
          <c>protocol:version</c> <c></c>
          <c>protocol:request_type</c> <c>request_address</c>
          <c>identifiers:uid</c> <c>access_token</c>
          <c>identifiers:nai</c> <c></c>
          <c>identifiers:nap</c> <c></c>
          <c>identifiers:group</c> <c></c>
          <c>identifiers:ip</c> <c></c>
          <c>identifiers:mac</c> <c></c>
          <c>identifiers:port</c> <c></c>
          <c>identifiers:uri</c> <c></c>
          <c>identifiers:fqdn</c> <c></c>
          <c>identifiers:cellular</c> <c></c>
          <c>measurements:wifi</c> <c>WiFi Data</c>
          <c>measurements:cellular</c> <c>Cell Data</c>
          <c>measurements:w16e</c> <c></c>
          <c>measurements:gnss</c> <c></c>
          <postamble>Table 1: Mapping for Google Gears Geolocation API to Request Object</postamble>
        </texttable>
    
        <texttable anchor='map-gears-rs-table'>
          <preamble></preamble>
          <ttcol align='center'>Response Model</ttcol>
          <ttcol align='center'>Gears</ttcol>
          <c>timestamp</c> <c></c>
          <c>target</c> <c></c>
          <c>location</c> <c></c>
          <c>location:geo</c> <c></c>
          <c>location:geo:point:latitude</c> <c>latitude</c>
          <c>location:geo:point:longitude</c> <c>longitude</c>
          <c>location:geo:point:altitude</c> <c>altitude</c>
          <c>location:geo:point:accuracy</c> <c>accuracy</c>
          <c>location:geo:point:altitude_accuracy</c> <c>altitude_accuracy</c>
          <c>location:civic</c> <c></c>
          <c>location:civic:language</c> <c></c>
          <c>location:civic:country</c> <c>address:country</c>
          <c>location:civic:a1</c> <c>address:region</c>
          <c>location:civic:a2</c> <c>address:country</c>
          <c>location:civic:a3</c> <c>address:city</c>
          <c>location:civic:a4</c> <c></c>
          <c>location:civic:a5</c> <c></c>
          <c>location:civic:a6</c> <c>address:street</c>
          <c>location:civic:prd</c> <c></c>
          <c>location:civic:pod</c> <c></c>
          <c>location:civic:sts</c> <c>address:street_number</c>
          <c>location:civic:hno</c> <c></c>
          <c>location:civic:hns</c> <c></c>
          <c>location:civic:lmk</c> <c></c>
          <c>location:civic:loc</c> <c></c>
          <c>location:civic:name</c> <c></c>
          <c>location:civic:pc</c> <c>address:postal_code</c>
          <c>location:civic:bld</c> <c>address:premises</c>
          <c>location:civic:unit</c> <c></c>
          <c>location:civic:flr</c> <c></c>
          <c>location:civic:room</c> <c></c>
          <c>location:civic:plc</c> <c></c>
          <c>location:civic:pcn</c> <c></c>
          <c>location:civic:pobox</c> <c></c>
          <c>location:civic:addcode</c> <c></c>
          <c>location:civic:seat</c> <c></c>
          <c>location:civic:rd</c> <c></c>
          <c>location:civic:rdsec</c> <c></c>
          <c>location:civic:rdbr</c> <c></c>
          <c>location:civic:rdsubbr</c> <c></c>
          <c>location:civic:prm</c> <c></c>
          <c>location:civic:pom</c> <c></c>
          <c>location:reference</c> <c></c>
          <c>location:reference:uris</c> <c></c>
          <postamble>Table 2: Mapping for Google Gears Geolocation API to Response Object</postamble>
        </texttable>
       </section>
       
    </section>

    <section anchor="uses-sec" title="Applications">
     <t>This section provides use cases for the unified data model (UDM):
        <list style='symbols'>
          <t>Implementing Single Protocol [Protocol A] Client
          <list style='symbols'>
            <t>Pre-designed, pre-implemented data model - developers will not have to design and implement their own</t>
            <t>The client is already designed to support additional protocols if they are later added</t>
          </list>
          </t>
          <t>Implementing Multiple Protocol [Protocols A, B, C] Client
          <list style='symbols'>
            <t>Single Data Model, Multiple Protocols</t>
          </list>
          </t>
          <t>Transitioning from Protocol A to Protocol B
          <list style='symbols'>
            <t>Mapping in this docuemnt provides instructions for how to map Protocol A to UDM to Protocol B</t>
            <t>All Protocol A code / components / assets can still be used, just add a translation layer</t>
          </list>
          </t>
          <t>Reusing Server Components
          <list style='symbols'>
            <t>A location server can accept multiple protocols on the front-end, normalize them all to UDM, allowing
            other parts of the server to be usable for all protocols (eg, logging, caching)</t>
          </list>
          </t>
          <t>Interoperability of Protocols
          <list style='symbols'>
            <t>Implement a location server that accepts [Protocol A] Requests, in case of [Protocol A] failure, 
            it degrades to use [Protocol B], and the translation / [Protocol B] query is done server-side, with
            the [Protocol B] response being translate back to [Protocol A] to send to the client.</t>
          </list>
          </t>
         </list>
      </t>
    </section>
    
    <section anchor="priv-cons-sec" title="Privacy Considerations">
      <t>[Text here]</t>
    </section>
    
    <section anchor="sec-cons-sec" title="Security Considerations">
      <t>[Text here]</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <references title="Normative References">
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4745.xml"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.3688.xml"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-geopriv-policy"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-geopriv-http-location-delivery"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-geopriv-dhcp-lbyr-uri-option"?>
    </references>

    <references title="Informative References">
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4119.xml"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5606.xml"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-geopriv-lbyr-requirements"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-geopriv-l7-lcp-ps"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-geopriv-rfc3825bis"?>
    </references>

  </back>
</rfc>
