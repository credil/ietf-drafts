


Network Working Group                                        M. Blanchet
Internet-Draft                                                  Viagenie
Obsoletes: 3454 (if approved)                             P. Saint-Andre
Intended status: Standards Track                                   Cisco
Expires: November 18, 2011                                  May 17, 2011


   PRECIS Framework: Handling Internationalized Strings in Protocols
                   draft-blanchet-precis-framework-01

Abstract

   Application protocols that make use of Unicode code points in
   protocol strings need to prepare such strings in order to perform
   comparison operations (e.g., for purposes of authentication or
   authorization).  In general, this problem has been labeled the
   "preparation and comparison of internationalized strings" or
   "PRECIS".  This document defines a framework that enables application
   protocols to prepare various classes of strings in a way that depends
   on the properties of Unicode code points.  Because this framework
   does not depend on large tables of Unicode code points as in
   stringprep (RFC 3454), it is more agile with regard to changes in the
   underlying Unicode database and thus provides improved flexibility to
   application protocols.  A specification that reuses this framework
   either can directly use the base string classes defined in this
   document or can subclass the base string classes as needed.  This
   framework uses an approach similar to that of the revised
   internationalized domain names in applications (IDNA) technology (RFC
   5890, RFC 5891, RFC 5892, RFC 5893, RFC 5894) and thus adheres to the
   high-level design goals described in RFC 4690, albeit for non-IDNA
   technologies.  This document obsoletes RFC 3454.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on November 18, 2011.



Blanchet & Saint-Andre  Expires November 18, 2011               [Page 1]

Internet-Draft              PRECIS Framework                    May 2011


Copyright Notice

   Copyright (c) 2011 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

   This document may contain material from IETF Documents or IETF
   Contributions published or made publicly available before November
   10, 2008.  The person(s) controlling the copyright in some of this
   material may not have granted the IETF Trust the right to allow
   modifications of such material outside the IETF Standards Process.
   Without obtaining an adequate license from the person(s) controlling
   the copyright in such materials, this document may not be modified
   outside the IETF Standards Process, and derivative works of it may
   not be created outside the IETF Standards Process, except to format
   it for publication as an RFC or to translate it into languages other
   than English.

























Blanchet & Saint-Andre  Expires November 18, 2011               [Page 2]

Internet-Draft              PRECIS Framework                    May 2011


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  5
   2.  Terminology  . . . . . . . . . . . . . . . . . . . . . . . . .  6
   3.  String Classes . . . . . . . . . . . . . . . . . . . . . . . .  6
     3.1.  Nameything . . . . . . . . . . . . . . . . . . . . . . . .  7
       3.1.1.  Valid  . . . . . . . . . . . . . . . . . . . . . . . .  7
       3.1.2.  Disallowed . . . . . . . . . . . . . . . . . . . . . .  7
       3.1.3.  Unassigned . . . . . . . . . . . . . . . . . . . . . .  8
       3.1.4.  Directionality . . . . . . . . . . . . . . . . . . . .  8
       3.1.5.  Case Mapping . . . . . . . . . . . . . . . . . . . . .  8
       3.1.6.  Normalization  . . . . . . . . . . . . . . . . . . . .  8
     3.2.  Wordything . . . . . . . . . . . . . . . . . . . . . . . .  8
       3.2.1.  Valid  . . . . . . . . . . . . . . . . . . . . . . . .  8
       3.2.2.  Disallowed . . . . . . . . . . . . . . . . . . . . . .  9
       3.2.3.  Unassigned . . . . . . . . . . . . . . . . . . . . . .  9
       3.2.4.  Directionality . . . . . . . . . . . . . . . . . . . .  9
       3.2.5.  Case Mapping . . . . . . . . . . . . . . . . . . . . .  9
       3.2.6.  Normalization  . . . . . . . . . . . . . . . . . . . .  9
     3.3.  Stringything . . . . . . . . . . . . . . . . . . . . . . . 10
       3.3.1.  Valid  . . . . . . . . . . . . . . . . . . . . . . . . 10
       3.3.2.  Disallowed . . . . . . . . . . . . . . . . . . . . . . 10
       3.3.3.  Unassigned . . . . . . . . . . . . . . . . . . . . . . 10
       3.3.4.  Directionality . . . . . . . . . . . . . . . . . . . . 10
       3.3.5.  Case Mapping . . . . . . . . . . . . . . . . . . . . . 10
       3.3.6.  Normalization  . . . . . . . . . . . . . . . . . . . . 10
   4.  Reuse of PRECIS String Classes . . . . . . . . . . . . . . . . 11
     4.1.  Principles . . . . . . . . . . . . . . . . . . . . . . . . 11
     4.2.  Subclassing  . . . . . . . . . . . . . . . . . . . . . . . 11
     4.3.  Template . . . . . . . . . . . . . . . . . . . . . . . . . 11
     4.4.  Registration . . . . . . . . . . . . . . . . . . . . . . . 11
   5.  Code Point Properties  . . . . . . . . . . . . . . . . . . . . 12
   6.  Category Definitions Used to Calculate Derived Property
       Value  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
     6.1.  LetterDigits (A) . . . . . . . . . . . . . . . . . . . . . 14
     6.2.  Unstable (B) . . . . . . . . . . . . . . . . . . . . . . . 14
     6.3.  IgnorableProperties (C)  . . . . . . . . . . . . . . . . . 14
     6.4.  IgnorableBlocks (D)  . . . . . . . . . . . . . . . . . . . 15
     6.5.  LDH (E)  . . . . . . . . . . . . . . . . . . . . . . . . . 15
     6.6.  Exceptions (F) . . . . . . . . . . . . . . . . . . . . . . 15
     6.7.  BackwardCompatible (G) . . . . . . . . . . . . . . . . . . 16
     6.8.  JoinControl (H)  . . . . . . . . . . . . . . . . . . . . . 17
     6.9.  OldHangulJamo (I)  . . . . . . . . . . . . . . . . . . . . 17
     6.10. Unassigned (J) . . . . . . . . . . . . . . . . . . . . . . 17
     6.11. ASCII7 (K) . . . . . . . . . . . . . . . . . . . . . . . . 17
     6.12. Controls (L) . . . . . . . . . . . . . . . . . . . . . . . 18
     6.13. PrecisIgnorableProperties (M)  . . . . . . . . . . . . . . 18
     6.14. Spaces (N) . . . . . . . . . . . . . . . . . . . . . . . . 18



Blanchet & Saint-Andre  Expires November 18, 2011               [Page 3]

Internet-Draft              PRECIS Framework                    May 2011


     6.15. Symbols (O)  . . . . . . . . . . . . . . . . . . . . . . . 18
     6.16. Punctuation (P)  . . . . . . . . . . . . . . . . . . . . . 18
     6.17. HasCompat (Q)  . . . . . . . . . . . . . . . . . . . . . . 19
   7.  Calculation of the Derived Property  . . . . . . . . . . . . . 19
   8.  Code Points  . . . . . . . . . . . . . . . . . . . . . . . . . 20
   9.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 20
     9.1.  PRECIS Derived Property Value Registry . . . . . . . . . . 20
     9.2.  PRECIS Contextual Rules Registry . . . . . . . . . . . . . 21
   10. Security Considerations  . . . . . . . . . . . . . . . . . . . 21
   11. Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 21
   12. Codepoints 0x0000 - 0x10FFFF . . . . . . . . . . . . . . . . . 21
     12.1. Codepoints in Unicode Character Database (UCD) format  . . 22
   13. References . . . . . . . . . . . . . . . . . . . . . . . . . . 22
     13.1. Normative References . . . . . . . . . . . . . . . . . . . 22
     13.2. Informative References . . . . . . . . . . . . . . . . . . 22
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 23



































Blanchet & Saint-Andre  Expires November 18, 2011               [Page 4]

Internet-Draft              PRECIS Framework                    May 2011


1.  Introduction

   A number of IETF application technologies use stringprep [RFC3454] as
   the basis for comparing protocol strings that contain Unicode
   characters or "code points" [UNICODE].  Since the publication of
   [RFC3454] in 2002, the Internet community has gained much more
   experience with internationalization, some of it reflected in
   [RFC4690].  In particular, the IETF's technology for
   internationalized domain names (IDNs) has changed significantly:
   IDNA2003 [RFC3490], which was based on stringprep, has been
   superseded by IDNA2008 ([RFC5890], [RFC5891], [RFC5892], [RFC5893],
   [RFC5894]), which does not use stringprep.  This migration away from
   stringprep for internationalized domain names has prompted other
   "customers" of stringprep to consider new approaches to the
   preparation and comparison of internationalized strings ("PRECIS"),
   as described in [PROBLEM].

   This document proposes a technical framework for a post-stringprep
   approach to the preparation and comparison of internationalized
   strings in application protocols.  The framework is based on several
   principles:

   1.  Define a small set of base string classes appropriate for common
       application protocol constructs such as usernames, passwords, and
       free-form identifiers.

   2.  Define each base string class in terms of Unicode code points and
       their properties, specifying whether each code point or category
       of code points is valid, disallowed, or unassigned.

   3.  Enable application protocols to subclass the base string classes.

   4.  Mapping operations (e.g., case preservation or lowercasing,
       Unicode normalization, right-to-left characters) are the
       responsibility of application protocols, as was done for IDNA2008
       via [RFC5895].

   It is expected that this framework will yield the following benefits:

   o  Application protocols will be more version-agile with regard to
      the Unicode database.
   o  Implementers will be able to share code point tables and software
      code across application protocols, most likely by means of code
      libraries.
   o  End users will be able to build more accurate expectations about
      the code points that are acceptable in various contexts.  Given
      this more uniform set of string classes, it is also expected that
      copy/paste operations between software implementing different



Blanchet & Saint-Andre  Expires November 18, 2011               [Page 5]

Internet-Draft              PRECIS Framework                    May 2011


      application protocols will be more predictable and coherent.

   Although this framework is similar to IDNA2008, it defines additional
   string classes to meet the needs of common application protocols.


2.  Terminology

   Many important terms used in this document are defined in [PROBLEM],
   [I18N-TERMS], [RFC5890], and [UNICODE].

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [RFC2119].


3.  String Classes

   IDNA2008 essentially defines a base string class of internationalized
   domain name, although it does not use the term "string class".  (This
   document does not redefine a string class for domain names, and
   application protocols are strongly encouraged to IDNA2008 as the
   appropriate method to prepare domain names and hostnames.)

   We propose the following additional base string classes for use in
   application protocols:

   Nameything:  a word or set of words that is used to identify or
      address a network entity such as a user, an account, a venue
      (e.g., a chatroom), an information source (e.g., a data feed), or
      a collection of data (e.g., a file).

   Wordything:  a sequence of letters, numbers, and symbols that is used
      as a secret for access to some resource on a network (e.g., a
      password or passphrase).

   Stringything:  a sequence of letters, numbers, symbols, spaces, and
      other code points that is used for more expressive purposes in an
      application protocol (e.g., a nickname in a chatroom).

   The following subsections discuss these string classes in more
   detail, with reference to the dimensions described in Section 3 of
   [PROBLEM].

   Each string class is defined by the following behavioral rules:





Blanchet & Saint-Andre  Expires November 18, 2011               [Page 6]

Internet-Draft              PRECIS Framework                    May 2011


   Valid:  defines which code points and code point categories are
      treated as valid input to preparation of the string.
   Disallowed:  defines which code points and code point categories are
      treated as disallowed during preparation of the string.
   Unassigned:  defines application behavior in the presence of code
      points that are unassigned, i.e. unknown for the version of
      Unicode the application is built upon.
   Directionality:  defines application behavior in the presence of code
      points that have directionality, in particular right-to-left code
      points as defined in the Unicode database (see [UAX9].
   Casemapping:  defines if case mapping is used for this class, and how
      the mapping is done.
   Normalization:  defines which Unicode normalization form (D, KD, C,
      or KC) is to be applied (see [UAX15]).

   This document defines the valid, disallowed, and unassigned rules.
   Application protocols that use the PRECIS string classes MUST define
   the directionality, casemapping, and normalization rules, as further
   described under Section 4.

3.1.  Nameything

   Most application technologies need a special class of strings that
   can be used to refer to, include, or communicate things like
   usernames, chatroom names, file names, and data feed names.  We group
   such things into a bucket called "nameythings" having the following
   features.

3.1.1.  Valid

   o  Letters and numbers, i.e., the LetterDigits ("A") category first
      defined in [RFC5892] and listed here under Section 6.1.
   o  Code points in the range U+0021 through U+007E, i.e., the ASCII7
      ("K") rule defined under Section 6.11.  These code points are
      valid even if they would otherwise be disallowed according to the
      property-based rules specified in the next section.

3.1.2.  Disallowed

   o  Control characters, i.e., the Controls ("L") category defined
      under Section 6.12.
   o  Space characters, i.e., the Spaces ("N") category defined under
      Section 6.14.
   o  Symbol characters, i.e., the Symbols ("O") category defined under
      Section 6.15.
   o  Punctuation characters, i.e., the Punctuation ("P") category
      defined under Section 6.16.




Blanchet & Saint-Andre  Expires November 18, 2011               [Page 7]

Internet-Draft              PRECIS Framework                    May 2011


   o  Any character that has a compatibility equivalent, i.e., the
      HasCompat ("Q") category defined under Section 6.17.  These code
      points are disallowed even if they would otherwise be valid
      according to the property-based rules specified in the previous
      section.

3.1.3.  Unassigned

   Any code points that are not yet assigned in the Unicode character
   set shall be considered Unassigned for purposes of PRECIS string
   classes.

3.1.4.  Directionality

   To be defined by application protocols.

3.1.5.  Case Mapping

   To be defined by application protocols.

3.1.6.  Normalization

   To be defined by application protocols.

   ### OPEN ISSUE: Perhaps recommend that application protocols use NFC,
   in accordance with [RFC5198], normalization form C (NFC) is
   RECOMMENDED. ###

3.2.  Wordything

   Many application technologies need a special class of strings that
   can be used to communicate secrets of the kind that are typically
   used as passwords or passphrases.  We group such things into a bucket
   called "wordythings" having the following features.

   NOTE: Some application protocols use passwords and passphrases
   directly, whereas others reuse technologies that process passwords
   (e.g., the Simple Authentication and Security Layer [RFC4422]).
   Moreover, passwords are often carried by a sequence of protocols with
   backends such as RADIUS or LDAP.  Developers of application protocols
   are encouraged to look into reusing these profiles instead of
   defining new ones, so that expectations for passwords by end-users
   are consistent no matter what application protocol is used.

3.2.1.  Valid






Blanchet & Saint-Andre  Expires November 18, 2011               [Page 8]

Internet-Draft              PRECIS Framework                    May 2011


   o  Letters and numbers, i.e., the LetterDigits ("A") category first
      defined in [RFC5892] and listed here under Section 6.1.
   o  Code points in the range U+0021 through U+007E, i.e., the ASCII7
      ("K") rule defined under Section 6.11.  These code points are
      valid even if they would otherwise be disallowed according to the
      property-based rules specified in the next section.
   o  Any character that has a compatibility equivalent, i.e., the
      HasCompat ("Q") category defined under Section 6.17.

3.2.2.  Disallowed

   o  Control characters, i.e., the Controls ("L") category defined
      under Section 6.12.
   o  Space characters, i.e., the Spaces ("N") category defined under
      Section 6.14.
   o  Symbol characters, i.e., the Symbols ("O") category defined under
      Section 6.15.
   o  Punctuation characters, i.e., the Punctuation ("P") category
      defined under Section 6.16.

   ### OPEN ISSUE: Why not allow symbols and punctuation characters in
   wordythings? ###

3.2.3.  Unassigned

   Any code points that are not yet assigned in the Unicode character
   set shall be considered Unassigned for purposes of PRECIS string
   classes.

3.2.4.  Directionality

   To be defined by application protocols.

3.2.5.  Case Mapping

   To be defined by application protocols.

   ### OPEN ISSUE: Perhaps recommend that application protocols map
   uppercase and titlecase code points to their lowercase equivalents,
   in order to maximize the entropy of passwords and passphrases. ###

3.2.6.  Normalization

   To be defined by application protocols.

   ### OPEN ISSUE: Perhaps recommend that application protocols use NFC,
   in accordance with [RFC5198], normalization form C (NFC) is
   RECOMMENDED. ###



Blanchet & Saint-Andre  Expires November 18, 2011               [Page 9]

Internet-Draft              PRECIS Framework                    May 2011


3.3.  Stringything

   Some application technologies need a special class of strings that
   can be used in a free-form way (e.g., a nickname in a chatroom).  We
   group such things into a bucket called "stringythings" having the
   following features.

3.3.1.  Valid

   o  Letters and numbers, i.e., the LetterDigits ("A") category first
      defined in [RFC5892] and listed here under Section 6.1.
   o  Code points in the range U+0021 through U+007E, i.e., the ASCII7
      ("K") rule defined under Section 6.11.
   o  Any character that has a compatibility equivalent, i.e., the
      HasCompat ("Q") category defined under Section 6.17.
   o  Space characters, i.e., the Spaces ("N") category defined under
      Section 6.14.
   o  Symbol characters, i.e., the Symbols ("O") category defined under
      Section 6.15.
   o  Punctuation characters, i.e., the Punctuation ("P") category
      defined under Section 6.16.

3.3.2.  Disallowed

   o  Control characters, i.e., the Controls ("L") category defined
      under Section 6.12.

3.3.3.  Unassigned

   Any code points that are not yet assigned in the Unicode character
   set shall be considered Unassigned for purposes of PRECIS string
   classes.

3.3.4.  Directionality

   To be defined by application protocols.

3.3.5.  Case Mapping

   To be defined by application protocols.

3.3.6.  Normalization

   To be defined by application protocols.

   ### OPEN ISSUE: Perhaps recommend that application protocols use NFC,
   in accordance with [RFC5198], normalization form C (NFC) is
   RECOMMENDED. ###



Blanchet & Saint-Andre  Expires November 18, 2011              [Page 10]

Internet-Draft              PRECIS Framework                    May 2011


4.  Reuse of PRECIS String Classes

4.1.  Principles

   This document defines the valid, disallowed, and unassigned rules.
   Application protocols that use the PRECIS string classes MUST define
   the directionality, casemapping, and normalization rules.  Such
   definitions MUST at a minimum specify the following:

   Directionality:  Whether any instance of the class that contains a
      right-to-left code point is to be considered a right-to-left
      string, or whether a more complex rule is to be applied (e.g., the
      "Bidi Rule" from [RFC5893]).
   Casemapping:  Whether uppercase and titlecase code points are to be
      (a) preserved or (b) mapped to lowercase.
   Normalization:  Which Unicode normalization form (D, KD, C, or KC) is
      to be applied (see [UAX15] for background information and
      [RFC5198] for relevant considerations).

4.2.  Subclassing

   Application protocols are allowed to subclass the base string classes
   specified in this document.  As the word "subclass" implies, a
   subclass MUST NOT add as valid any code points or code point
   categories that are disallowed by the base string class.  However, a
   subclass MAY do either of the following:

   1.  Exclude specific code points that are included in the base string
       class.
   2.  exclude characters matching certain Unicode properties (e.g.,
       math symbols) that are included in the base string class.

4.3.  Template

   The following template can be used by application protocols that
   reuse the PRECIS string classes.

   Base Class:  [which base class is being reused]
   Subclassing:  [whether the base class is being subclassed]
   Directionality:  [the behavioral rule for handling of right-to-left
      code points]
   Casemapping:  [the behavioral rule for handling of case]
   Normalization:  [which Unicode normalization form is applied]

4.4.  Registration

   ### OPEN ISSUE: Perhaps define an IANA registry for application
   protocols that reuse the PRECIS string classes.



Blanchet & Saint-Andre  Expires November 18, 2011              [Page 11]

Internet-Draft              PRECIS Framework                    May 2011


5.  Code Point Properties

   In order to implement the string classes described above, this
   document does the following:

   1.  Reviews and classifies the collections of code points in the
       Unicode character set by examining various properties of the code
       points.
   2.  Defines an algorithm for determining a derived property value,
       which can vary depending on the string class being used by the
       relevant application protocol.

   NOTE: This document specifies a procedure that can be applied to code
   points, and not a table of code points, so that the algorithm can be
   used to determine code point sets independent of the version of
   Unicode that is in use.

   This document is not intended to specify precisely how derived
   property values are to be applied in protocol strings.  That
   information should be defined in the protocol specification that uses
   or subclasses a base string class from this document.

   The value of the property is to be interpreted as follows.

   o  PROTOCOL VALID: Those that are allowed to be used in any PRECIS
      string class (nameything, wordything, and stringything).  Code
      points with this property value are permitted for general use in
      any string class.  The abbreviated term PVALID is used to refer to
      this value in the rest of this document.
   o  SPECIFIC CLASS PROTOCOL VALID: Those that are allowed to be used
      in specific string classes.  Code points with this property value
      are permitted for use in specific string classes.  In the rest of
      this document, the abbreviated term *_PVALID is used, where * =
      (NAMEY, WORDY, STRINGY).
   o  CONTEXTUAL RULE REQUIRED: Some characteristics of the character,
      such as it being invisible in certain contexts or problematic in
      others, requires that it not be used in labels unless specific
      other characters or properties are present.  The abbreviated term
      CONTEXT is used to refer to this value in the rest of this
      document.  There are two subdivisions of CONTEXTUAL RULE REQUIRED,
      the first for Join_controls (called CONTEXTJ) and the second for
      other characters (called CONTEXTO).
   o  DISALLOWED: Those that must not be included in any string class.
      Code points with this property value are not permitted in any
      string class.
   o  SPECIFIC CLASS DISALLOWED: Those that are not to be included in a
      specific string class.  Code points with this property value are
      not permitted in one of the string classes but might be permitted



Blanchet & Saint-Andre  Expires November 18, 2011              [Page 12]

Internet-Draft              PRECIS Framework                    May 2011


      in others.  In the rest of this document, the abbreviated term
      *_DISALLOWED is used, where * = (NAMEY, WORDY, STRINGY).
   o  UNASSIGNED: Those code points that are not designated (i.e. are
      unassigned) in the Unicode Standard.

   The mechanisms described here allow determination of the value of the
   property for future versions of Unicode (including characters added
   after Unicode 5.2 or 6.0 depending on the category, since some
   categories in this document are re-used from IDNA2008).  Changes in
   Unicode properties that do not affect the outcome of this process do
   not affect this framework.  For example, a character can have its
   Unicode General_Category value [UNICODE] change from So to Sm, or
   from Lo to Ll, without affecting the algorithm results.  Moreover,
   even if such changes were to result, the BackwardCompatible list
   (Section 6.7) can be adjusted to ensure the stability of the results.

   ### OPEN ISSUE: How to handle a backward compatible list on the level
   of PRECIS string classes or sub-classes. ###

   Some code points need to be allowed in exceptional circumstances, but
   should be excluded in all other cases; these rules are also described
   in other documents.  The most notable of these are the Join Control
   characters, U+200D ZERO WIDTH JOINER and U+200C ZERO WIDTH NON-
   JOINER.  Both of them have the derived property value CONTEXTJ.  A
   character with the derived property value CONTEXTJ or CONTEXTO
   (CONTEXTUAL RULE REQUIRED) is not to be used unless an appropriate
   rule has been established and the context of the character is
   consistent with that rule.  It is invalid to generate a string
   containing these characters unless such a contextual rule is found
   and satisfied.  Please see Appendix A of [RFC5892] for more
   information.


6.  Category Definitions Used to Calculate Derived Property Value

   The derived property obtains its value based on a two-step procedure:

   1.  Characters are placed in one or more character categories based
       on either core properties defined by the Unicode Standard or by
       treating the code point as an exception and addressing the code
       point by its code point value.  These categories are not mutually
       exclusive.
   2.  Set operations are used with these categories to determine the
       values for an string class specific property.  These operations
       are specified under Section 7.

   (NOTE: Unicode property names and property value names might have
   short abbreviations, such as gc for the General_Category property,



Blanchet & Saint-Andre  Expires November 18, 2011              [Page 13]

Internet-Draft              PRECIS Framework                    May 2011


   and Ll for the Lowercase_Letter property value of the gc property.)

   In the following specification of categories, the operation which
   returns the value of a particular Unicode character property for a
   code point is designated by using the formal name of that property
   (from PropertyAliases.txt) followed by '(cp)'.  For example, the
   value of the General_Category property for a code point is indicated
   by General_Category(cp).

   The first ten categories (A-J) shown below were previously defined
   for IDNA2008 and are copied directly from [RFC5892].  Some of these
   categories are re-used in PRECIS and some of them are not; however,
   the lettering of categories is retained to prevent overlap and to
   ease implementation of both IDNA2008 and PRECIS in a single software
   application.  The next seven categories (K-Q) are specific to PRECIS.

6.1.  LetterDigits (A)

   NOTE: This category is defined in [RFC5892] and copied here for use
   in PRECIS.

   A: General_Category(cp) is in {Ll, Lu, Lo, Nd, Lm, Mn, Mc}

   These rules identify characters commonly used in mnemonics and often
   informally described as "language characters".

   For more information, see section 4.5 of [UNICODE].

   The categories used in this rule are:
   o  Ll - Lowercase_Letter
   o  Lu - Uppercase_Letter
   o  Lo - Other_Letter
   o  Nd - Decimal_Number
   o  Lm - Modifier_Letter
   o  Mn - Nonspacing_Mark
   o  Mc - Spacing_Mark

6.2.  Unstable (B)

   NOTE: This category is defined in [RFC5892] but not used in PRECIS.

6.3.  IgnorableProperties (C)

   NOTE: This category is defined in [RFC5892] but not used in PRECIS.
   See the "PrecisIgnorableProperties (M)" category below for a more
   inclusive category used in non-IDN identifiers.





Blanchet & Saint-Andre  Expires November 18, 2011              [Page 14]

Internet-Draft              PRECIS Framework                    May 2011


6.4.  IgnorableBlocks (D)

   NOTE: This category is defined in [RFC5892] but not used in PRECIS.

6.5.  LDH (E)

   NOTE: This category is defined in [RFC5892] but not used in PRECIS.
   See the "ASCII7 (K)" category below for a more inclusive category
   used in non-IDN identifiers.

6.6.  Exceptions (F)

   NOTE: This category is defined in [RFC5892] and might be used in a
   future version of this specification.

   F: cp is in {00B7, 00DF, 0375, 03C2, 05F3, 05F4, 0640, 0660,
                0661, 0662, 0663, 0664, 0665, 0666, 0667, 0668,
                0669, 06F0, 06F1, 06F2, 06F3, 06F4, 06F5, 06F6,
                06F7, 06F8, 06F9, 06FD, 06FE, 07FA, 0F0B, 3007,
                302E, 302F, 3031, 3032, 3033, 3034, 3035, 303B,
                30FB}

   This category explicitly lists code points for which the category
   cannot be assigned using only the core property values that exist in
   the Unicode standard.  The values are according to the table below:

   PVALID -- Would otherwise have been DISALLOWED

   00DF; PVALID     # LATIN SMALL LETTER SHARP S
   03C2; PVALID     # GREEK SMALL LETTER FINAL SIGMA
   06FD; PVALID     # ARABIC SIGN SINDHI AMPERSAND
   06FE; PVALID     # ARABIC SIGN SINDHI POSTPOSITION MEN
   0F0B; PVALID     # TIBETAN MARK INTERSYLLABIC TSHEG
   3007; PVALID     # IDEOGRAPHIC NUMBER ZERO

   CONTEXTO -- Would otherwise have been DISALLOWED

   00B7; CONTEXTO   # MIDDLE DOT
   0375; CONTEXTO   # GREEK LOWER NUMERAL SIGN (KERAIA)
   05F3; CONTEXTO   # HEBREW PUNCTUATION GERESH
   05F4; CONTEXTO   # HEBREW PUNCTUATION GERSHAYIM
   30FB; CONTEXTO   # KATAKANA MIDDLE DOT

   CONTEXTO -- Would otherwise have been PVALID

   0660; CONTEXTO   # ARABIC-INDIC DIGIT ZERO
   0661; CONTEXTO   # ARABIC-INDIC DIGIT ONE
   0662; CONTEXTO   # ARABIC-INDIC DIGIT TWO



Blanchet & Saint-Andre  Expires November 18, 2011              [Page 15]

Internet-Draft              PRECIS Framework                    May 2011


   0663; CONTEXTO   # ARABIC-INDIC DIGIT THREE
   0664; CONTEXTO   # ARABIC-INDIC DIGIT FOUR
   0665; CONTEXTO   # ARABIC-INDIC DIGIT FIVE
   0666; CONTEXTO   # ARABIC-INDIC DIGIT SIX
   0667; CONTEXTO   # ARABIC-INDIC DIGIT SEVEN
   0668; CONTEXTO   # ARABIC-INDIC DIGIT EIGHT
   0669; CONTEXTO   # ARABIC-INDIC DIGIT NINE
   06F0; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT ZERO
   06F1; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT ONE
   06F2; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT TWO
   06F3; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT THREE
   06F4; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT FOUR
   06F5; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT FIVE
   06F6; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT SIX
   06F7; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT SEVEN
   06F8; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT EIGHT
   06F9; CONTEXTO   # EXTENDED ARABIC-INDIC DIGIT NINE

   DISALLOWED -- Would otherwise have been PVALID

   0640; DISALLOWED # ARABIC TATWEEL
   07FA; DISALLOWED # NKO LAJANYALAN
   302E; DISALLOWED # HANGUL SINGLE DOT TONE MARK
   302F; DISALLOWED # HANGUL DOUBLE DOT TONE MARK
   3031; DISALLOWED # VERTICAL KANA REPEAT MARK
   3032; DISALLOWED # VERTICAL KANA REPEAT WITH VOICED SOUND MARK
   3033; DISALLOWED # VERTICAL KANA REPEAT MARK UPPER HALF
   3034; DISALLOWED # VERTICAL KANA REPEAT WITH VOICED SOUND MARK
                      UPPER HA
   3035; DISALLOWED # VERTICAL KANA REPEAT MARK LOWER HALF
   303B; DISALLOWED # VERTICAL IDEOGRAPHIC ITERATION MARK

6.7.  BackwardCompatible (G)

   NOTE: This category is defined in [RFC5892] and copied here for use
   in PRECIS.

   G: cp is in {}

   This category includes the code points that property values in
   versions of Unicode after 5.2 have changed in such a way that the
   derived property value would no longer be PVALID or DISALLOWED.  If
   changes are made to future versions of Unicode so that code points
   might change property value from PVALID or DISALLOWED, then this
   table can be updated and keep special exception values so that the
   property values for code points stay stable.





Blanchet & Saint-Andre  Expires November 18, 2011              [Page 16]

Internet-Draft              PRECIS Framework                    May 2011


6.8.  JoinControl (H)

   NOTE: This category is defined in [RFC5892] and copied here for use
   in PRECIS.

   H: Join_Control(cp) = True

   This category consists of Join Control characters (i.e., they are not
   in LetterDigits (Section 6.1)) but are still required in strings
   under some circumstances.

6.9.  OldHangulJamo (I)

   NOTE: This category is defined in [RFC5892] and copied here for use
   in PRECIS.

   I: Hangul_Syllable_Type(cp) is in {L, V, T}

   This category consists of all conjoining Hangul Jamo (Leading Jamo,
   Vowel Jamo, and Trailing Jamo).

   Elimination of conjoining Hangul Jamos from the set of PVALID
   characters results in restricting the set of Korean PVALID characters
   just to preformed, modern Hangul syllable characters.  Old Hangul
   syllables, which must be spelled with sequences of conjoining Hangul
   Jamos, are not PVALID for string classes.

6.10.  Unassigned (J)

   NOTE: This category is defined in [RFC5892] and copied here for use
   in PRECIS.

   J: General_Category(cp) is in {Cn} and
      Noncharacter_Code_Point(cp) = False

   This category consists of code points in the Unicode character set
   that are not (yet) assigned.  It should be noted that Unicode
   distinguishes between 'unassigned code points' and 'unassigned
   characters'.  The unassigned code points are all but (Cn -
   Noncharacters), while the unassigned *characters* are all but (Cn +
   Cs).

6.11.  ASCII7 (K)

   This category exempts most "ASCII7" characters from other rules that
   might be applied during PRECIS processing, on the assumption that
   these code points are in such wide use that disallowing them would be
   counter-productive.



Blanchet & Saint-Andre  Expires November 18, 2011              [Page 17]

Internet-Draft              PRECIS Framework                    May 2011


   K: cp is in {0021..007E}

6.12.  Controls (L)

   L: Control(cp) = True

6.13.  PrecisIgnorableProperties (M)

   This category is used to group code points that are not recommended
   for use in PRECIS string classes.

   M: Default_Ignorable_Code_Point(cp) = True or
      Noncharacter_Code_Point(cp) = True

   The definition for Default_Ignorable_Code_Point can be found in
   DerivedCoreProperties.txt [1] and at the time of Unicode 6.0 is as
   follows:

     Other_Default_Ignorable_Code_Point
   + Cf (Format characters)
   + Variation_Selector
   - White_Space
   - FFF9..FFFB (Annotation Characters)
   - 0600..0603, 06DD, 070F (exceptional Cf characters
                             that should be visible)

6.14.  Spaces (N)

   This category is used to group code points that are space characters.

   N: General_Category(cp) is in {Zs}

6.15.  Symbols (O)

   This category is used to group code points that are symbols.

   O: General_Category(cp) is in {Sc}

6.16.  Punctuation (P)

   This category is used to group code points that are punctuation
   marks.

   P: General_Category(cp) is in {Pi}







Blanchet & Saint-Andre  Expires November 18, 2011              [Page 18]

Internet-Draft              PRECIS Framework                    May 2011


6.17.  HasCompat (Q)

   This category is used to group code points that have compatibility
   equivalents as explained in Chapter 2 and Chapter 3 of [UNICODE].

   Q: toNFKC(cp) != cp

   The toNFKC() operation returns the code point in normalization form
   KC.  For more information, see Section 5 of [UAX15].


7.  Calculation of the Derived Property

   Possible values of the derived property are:

   o  PVALID
   o  NAMEY_VALID
   o  WORDY_VALID
   o  STRINGY_VALID
   o  CONTEXTJ
   o  CONTEXTO
   o  DISALLOWED
   o  NAMEY_DISALLOWED
   o  WORDY_DISALLOWED
   o  STRINGY_DISALLOWED
   o  UNASSIGNED

   In some instances, the value of the derived property calculated
   depends on the string class.

   The algorithm to calculate the value of the derived property is as
   follows.  (NOTE: If the name of a rule (such as Exception) is used,
   that implies the set of code points that the rule define, while the
   same name as a function call (such as Exception(cp)) imply the value
   cp has in the Exceptions table.)
















Blanchet & Saint-Andre  Expires November 18, 2011              [Page 19]

Internet-Draft              PRECIS Framework                    May 2011


   If .cp. .in. Exceptions Then Exceptions(cp);
   Else If .cp. .in. BackwardCompatible Then BackwardCompatible(cp);
   Else If .cp. .in. Unassigned Then UNASSIGNED;
   Else If .cp. .in. ASCII7 Then PVALID;
   Else If .cp. .in. JoinControl Then CONTEXTJ;
   Else If .cp. .in. PrecisIgnorableProperties Then DISALLOWED;
   Else If .cp. .in. Controls Then DISALLOWED;
   Else If .cp. .in. OldHangulJamo Then DISALLOWED;
   Else If .cp. .in. LetterDigits Then PVALID;
   Else If .cp. .in. Spaces Then NAMEY_DISALLOWED
                     or WORDY_DISALLOWED
                     or STRINGY_VALID;
   Else If .cp. .in. Symbols Then NAMEY_DISALLOWED
                     or WORDY_DISALLOWED
                     or STRINGY_VALID;
   Else If .cp. .in. Punctuation Then NAMEY_DISALLOWED
                     or WORDY_DISALLOWED
                     or STRINGY_VALID;
   Else If .cp. .in. HasCompat Then NAMEY_DISALLOWED
                     or WORDY_VALID
                     or STRINGY_VALID;
   Else DISALLOWED;


8.  Code Points

   The Categories and Rules defined in Section 6 and Section 7 apply to
   all Unicode code points.  The table in Section 12 shows, for
   illustrative purposes, the consequences of the categories and
   classification rules, and the resulting property values.

   The list of code points that can be found in Section 12 is non-
   normative.  Section 6 and Section 7 are normative.


9.  IANA Considerations

9.1.  PRECIS Derived Property Value Registry

   IANA is to create a PRECIS-specific registry with the Derived
   Properties for the versions of Unicode that are released after (and
   including) version 6.0.  The derived property value is to be
   calculated in cooperation with a designated expert [RFC5226]
   according to the specifications in Section 6 and Section 7, and not
   by copying the non-normative table found in Section 12.

   If during this process (creation of the table of derived property
   values) followed by a designated expert review, either non-backward



Blanchet & Saint-Andre  Expires November 18, 2011              [Page 20]

Internet-Draft              PRECIS Framework                    May 2011


   compatible changes to the table of derived properties are discovered,
   or otherwise problems during the creation of the table arises, that
   is to be flagged to the IESG.  Changes to the rules (as specified in
   Section 6 and Section 7) require IETF Review, as described in
   [RFC5226].

9.2.  PRECIS Contextual Rules Registry

   For characters that are defined in the IDNA derived property value
   registry as CONTEXTO or CONTEXTJ and that therefore require a
   contextual rule, IANA will create and maintain a list of approved
   contextual rules.  Additions or changes to these rules require IETF
   Review, as described in [RFC5226].

   Appendix A (TBD) contains further discussion and a table from which
   that registry can be initialized.


10.  Security Considerations

   This section has yet to be defined.  However, the security
   considerations provided in [RFC5890] provide a good starting point.


11.  Acknowledgements

   The authors would like to acknowledge the comments and contributions
   of the following people: David Black, Mark Davis, Alan DeKok, Martin
   Duerst, Patrik Faltstrom, Ted Hardie, Joe Hildebrand, Paul Hoffman,
   Jeffrey Hutzelman, Simon Josefsson, John Klensin, Alexey Melnikov,
   Pete Resnick, Andrew Sullivan, and Dave Thaler.

   Some algorithms and textual descriptions have been borrowed from
   [RFC5892].


12.  Codepoints 0x0000 - 0x10FFFF

   If one applies the rules (Section 7) to the code points 0x0000 to
   0x10FFFF to Unicode 6.0, the result is as follows.

   NOTE: This list is non-normative, and only included for illustrative
   purposes.  Specifically, what is displayed in the third column is not
   the formal name of the code point (as defined in [UNICODE]).  The
   differences exists for example for the code points that have the code
   point value as part of the name (example: CJK UNIFIED IDEOGRAPH-4E00)
   and the naming of Hangul syllables.  For many code points, what you
   see is the official name.



Blanchet & Saint-Andre  Expires November 18, 2011              [Page 21]

Internet-Draft              PRECIS Framework                    May 2011


12.1.  Codepoints in Unicode Character Database (UCD) format

   0000..10FFFF; TBD!


13.  References

13.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC5198]  Klensin, J. and M. Padlipsky, "Unicode Format for Network
              Interchange", RFC 5198, March 2008.

   [UNICODE]  The Unicode Consortium, "The Unicode Standard, Version
              6.0", 2010,
              <http://www.unicode.org/versions/Unicode6.0.0/>.

13.2.  Informative References

   [I18N-TERMS]
              Hoffman, P. and J. Klensin, "Terminology Used in
              Internationalization in the IETF",
              draft-hoffman-rfc3536bis-02 (work in progress),
              April 2011.

   [PROBLEM]  Blanchet, M. and A. Sullivan, "Stringprep Revision Problem
              Statement", draft-ietf-precis-problem-statement-02 (work
              in progress), March 2011.

   [RFC3454]  Hoffman, P. and M. Blanchet, "Preparation of
              Internationalized Strings ("stringprep")", RFC 3454,
              December 2002.

   [RFC3490]  Faltstrom, P., Hoffman, P., and A. Costello,
              "Internationalizing Domain Names in Applications (IDNA)",
              RFC 3490, March 2003.

   [RFC4422]  Melnikov, A. and K. Zeilenga, "Simple Authentication and
              Security Layer (SASL)", RFC 4422, June 2006.

   [RFC4690]  Klensin, J., Faltstrom, P., Karp, C., and IAB, "Review and
              Recommendations for Internationalized Domain Names
              (IDNs)", RFC 4690, September 2006.

   [RFC5226]  Narten, T. and H. Alvestrand, "Guidelines for Writing an
              IANA Considerations Section in RFCs", BCP 26, RFC 5226,



Blanchet & Saint-Andre  Expires November 18, 2011              [Page 22]

Internet-Draft              PRECIS Framework                    May 2011


              May 2008.

   [RFC5890]  Klensin, J., "Internationalized Domain Names for
              Applications (IDNA): Definitions and Document Framework",
              RFC 5890, August 2010.

   [RFC5891]  Klensin, J., "Internationalized Domain Names in
              Applications (IDNA): Protocol", RFC 5891, August 2010.

   [RFC5892]  Faltstrom, P., "The Unicode Code Points and
              Internationalized Domain Names for Applications (IDNA)",
              RFC 5892, August 2010.

   [RFC5893]  Alvestrand, H. and C. Karp, "Right-to-Left Scripts for
              Internationalized Domain Names for Applications (IDNA)",
              RFC 5893, August 2010.

   [RFC5894]  Klensin, J., "Internationalized Domain Names for
              Applications (IDNA): Background, Explanation, and
              Rationale", RFC 5894, August 2010.

   [RFC5895]  Resnick, P. and P. Hoffman, "Mapping Characters for
              Internationalized Domain Names in Applications (IDNA)
              2008", RFC 5895, September 2010.

   [UAX15]    The Unicode Consortium, "Unicode Standard Annex #15:
              Unicode Normalization Forms", September 2010,
              <http://unicode.org/reports/tr15/>.

   [UAX9]     The Unicode Consortium, "Unicode Standard Annex #9:
              Unicode Bidirectional Algorithm", September 2010,
              <http://unicode.org/reports/tr9/>.

URIs

   [1]  <http://unicode.org/Public/UNIDATA/DerivedCoreProperties.txt>















Blanchet & Saint-Andre  Expires November 18, 2011              [Page 23]

Internet-Draft              PRECIS Framework                    May 2011


Authors' Addresses

   Marc Blanchet
   Viagenie
   2600 boul. Laurier, suite 625
   Quebec, QC  G1V 4W1
   Canada

   Email: Marc.Blanchet@viagenie.ca
   URI:   http://www.viagenie.ca


   Peter Saint-Andre
   Cisco
   1899 Wyknoop Street, Suite 600
   Denver, CO  80202
   USA

   Phone: +1-303-308-3282
   Email: psaintan@cisco.com































Blanchet & Saint-Andre  Expires November 18, 2011              [Page 24]

