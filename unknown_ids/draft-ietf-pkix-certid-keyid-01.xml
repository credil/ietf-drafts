<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2634 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2634.xml">
<!ENTITY RFC2560 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2560.xml">
<!ENTITY RFC3279 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3279.xml">
<!ENTITY RFC5035 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5035.xml">
<!ENTITY RFC5055 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5055.xml">
<!ENTITY RFC5280 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC5755 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5755.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="no"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->

<?rfc autobreaks="yes" ?>

<rfc category="std" docName="draft-ietf-pkix-certid-keyid-01" ipr="trust200902">
  <front>
    <title abbrev="Unambiguous Certificate and Key IDs">Syntaxes for Unambiguous
		Identification
		of Certificates and Public Keys</title>

    <author fullname="Sean Leonard" initials="S.L." surname="Leonard">
      <organization>Penango, Inc.</organization>
      <address>
        <postal>
          <street>1215 K Street</street>
					 <street>17th Floor</street>
          <city>Sacramento</city><region>CA</region><code>95814</code>
          <country>USA</country>
        </postal>

        <email>dev+ietf@seantek.com</email>
				 <uri>http://www.penango.com/</uri>
        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date month="March" year="2010" />
    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->
    <!-- Meta-data Declarations -->
    <area>Security</area>

    <workgroup>Network Working Group</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

   <keyword>otherName</keyword>
   <keyword>CertID</keyword>
	 <keyword>KeyID</keyword>
	 <keyword>ESSCertIDv2</keyword>
	 <keyword>GeneralName</keyword>

    <abstract>
      <t>This document discusses methods to unambiguously identify a particular
			certificate and a particular public key that may or may not be in
			a certificate. This document further proposes standardizing on one of these structures
			on a going-forward basis throughout new PKIX standards.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>When working with X.509 certificates and other cryptographic structures, it
			is frequently desirable to refer to another certificate, or to a raw public key,
			directly and unambiguously.
			The "gold standard" for certificates is to refer to the
			certificate's issuer name and serial number. Furthermore,
			<xref target="RFC5280" /> and <xref target="X.509" />
			define a subject key identifier extension, which provides a means of identifying
			distinct keys used by the same subject.</t>
			<t>Unfortunately, neither the issuer name and serial number, nor the subject key
			identifier, are guaranteed to be universally unique. Multiple CA certificates
			can share the same subject name. The subject key identifier is
			meant to facilitate path construction <xref target="RFC5280" />, but is only unique
			to the extent that the certificate issuer guarantees it to be unique
			within some domain. While still being compliant with RFC 5280, it is possible
			to create subject key identifiers in different certificates that refer to the same
			subject public key. It is also possible for agents to ignore or reuse subject key
			identifiers with impunity, and to use those identifiers for interchange.</t>
			<t>This document provides a review of the existing ASN.1 structures to unambiguously
			identify a particular certificate and a particular public key. This document further proposes
			standardizing on a single certificate identifier structure on a going-forward basis
			throughout new PKIX standards.</t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119" format="none">RFC 2119</xref>.</t>
      </section>
			<section title="Errata">
			<t>This document may be fit for Standards Track or Best Current Practice (BCP)
			status, depending on input from the Internet community.
			This draft is under consideration for PKIX WG adoption; it is not yet
			a PKIX WG document.</t>
			</section>
    </section>
		
		<section title="Existing Structures for Identifying Certificates">
			<t>At least four structures are used throughout IETF documents to identify
			a certificate uniquely:
			ESSCertID <xref target="RFC2634"/>,
			CertID from OCSP <xref target="RFC2560"/>,
			ESSCertIDv2 <xref target="RFC5035"/>,
			and SCVPCertID <xref target="RFC5055"/>. These structures use the same basic
			techniques: digest the
			target with a cryptographic hash algorithm, and optionally
			refer to the target using standardized naming. Using this method,
			an implementation can cryptographically verify
			that the right certificate or public key is chosen,
			but can also use standard methods to locate
			the certificate or public key
			if the search facility does not index by the particular hash.</t>

			<t>Each of these structures, however, uses slightly different methods from
			each other to do the same thing, resulting in a proliferation of implementations
			when only one is needed. Furthermore, some of these structures lack
			algorithm agility, and therefore are susceptible to attack when practical
			collisions can be found in the underlying
			cryptographic algorithms.</t>
		</section>
		
		<section title="Uniform Structure for Identifying Certificates">
			<t>In order to reduce the variance of implementations, this document proposes
			standardizing on a single structure for uniquely identifying certificates
			on a going-forward basis: ESSCertIDv2 from
			<xref target="RFC5035" format="none">RFC 5035</xref>, with additional clarifying
			semantics discussed below. In this document, ESSCertIDv2 is aliased to PKIXCertID.
			Future new standards SHOULD define
			and use PKIXCertID when attempting to identify a specific, existing certificate.
			Future revisions of existing standards can continue
			to use their old structures for backwards-compatibility purposes.</t>
			<figure>
				<artwork><![CDATA[
  PKIXCertID ::= ESSCertIDv2
]]></artwork>
			</figure>
			<figure>
			<preamble>ESSCertIDv2 is reproduced below for convenience.</preamble>
				<artwork><![CDATA[
    ESSCertIDv2 ::=  SEQUENCE {
        hashAlgorithm           AlgorithmIdentifier
               DEFAULT {algorithm id-sha256},
        certHash                 Hash,
        issuerSerial             IssuerSerial OPTIONAL
    }

    Hash ::= OCTET STRING

    IssuerSerial ::= SEQUENCE {
        issuer                   GeneralNames,
        serialNumber             CertificateSerialNumber
    }
]]></artwork>
			</figure>
			<t>The fields of PKIXCertID (ESSCertIDv2, as used here) are defined as follows.</t>
			<t>hashAlgorithm contains the identifier of the algorithm used
			in computing certHash.</t>
			<t>certHash is computed over the entire DER-encoded certificate, including
			the signature, tag, and length octets, using the algorithm specified in
			hashAlgorithm.</t>
			<t>issuerSerial holds the identification of the certificate.
			issuerSerial is optional. If present, it MAY be used to facilitate lookup
			of the certificate. Additionally, an implementation MAY use issuerSerial
			to eliminate a certificate from consideration early if the implementation
			does not support the certificate type.</t>
			<t>The issuerSerial field is normative if it is present. Specifically,
			if a certificate is found that matches the issuerSerial, but does not match
			the hash, an implementation MUST skip or reject that certificate,
			because it does not match the hash. If a certificate is found that matches
			the hash, but does not match the issuerSerial, an implementation MUST
			skip or reject that certificate, because it does not match the issuerSerial.
			The assumption is that the implementation that generated identifier will have
			the certificate and there will actually process it in order to create a proper
			issuerSerial for it.</t>
			<t>The semantics of issuerSerial are the same as those in
			<xref target="RFC5035" format="none">RFC 5035</xref>.</t>
			<t>The rationale for choosing ESSCertIDv2 is based on several considerations.
			The ordering seems optimal: an implementation that cannot process
			a particular hash algorithm is best served by figuring out the hash algorithm first,
			then skipping the rest of the structure if it cannot work with that hash algorithm.
			The default algorithm, SHA-256, is a reasonable choice on a going-forward basis
			and maintains compatibility with RFC 5035. (Note that this specification makes
			no requirement to support any particular hash algorithm;
			specifying the DEFAULT merely saves octets on the wire.)
			Finally, IssuerSerial is not strictly limited to X.509 public key certificates;
			other certificates such as attribute certificates can be identified.
			</t>
			<t>This structure has a similar structure in attribute certificates, except
			that the attribute certificate profile's IssuerSerial structure includes
			an optional issuerUID UniqueIdentifier OPTIONAL at the end <xref target="RFC5755" />.
			The structure in this specification explicitly does not include issuerUID for several reasons.
			First, compatibility with RFC 5035 is desired. Second, UniqueIdentifier fields are
			properties of version 2 certificates, which are rarely seen in practice. Third,
			UniqueIdentifier fields were seen as insufficient to solve the identification
			problems with certificates, since any CA can put anything in a UniqueIdentifier field
			(thus making their uniqueness guarantees suspect).
			</t>
			<t>New protocol designers need to decide first whether it is necessary to uniquely
			identify an existing certificate, or whether it is sufficient to identify
			certificates non-uniquely. If uniqueness is required, then PKIXCertID
			SHOULD [TBD: MUST] be used. If uniqueness is not required, another matching method
			is appropriate, such as issuer and serial number, subject name, and so forth.</t>
		</section>
		<section title="Uniform Structures for Identifying Public Keys">
			<t>Unlike the CertID structure, there is not a proliferation of structures
			(among the various standards surveyed) to unambiguously identify a public key.
			The argument against providing such a method is mainly that PKIX works with
			certified keys, not with "raw" keys.</t>
			<t>In fact there are at least two common structures for identifying keys.
			One can use the SubjectPublicKeyInfo field to actually specify a public key:
			this technique is the equivalent of identifying a public key by its value.
			To refer to a public key by reference, one can use the ObjectDigestInfo
			structure of attribute certificates, as specified in
			<xref target="RFC5755" format="none">RFC 5755</xref>, to identify a public key by
			its hash. When used in context, these structures can refer to "raw" keys, or can refer
			to all certificates that contain the keys (hence ceritified keys).
			The remainder of this section discusses how to use ObjectDigestInfo to refer
			to a public key by reference.</t>
			<figure>
				<artwork><![CDATA[

  ObjectDigestInfo ::= SEQUENCE {
    digestedObjectType  ENUMERATED {
      publicKey            (0),
      publicKeyCert        (1),
      otherObjectTypes     (2) },
    -- otherObjectTypes MUST NOT
    -- be used in this profile
    otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,
    digestAlgorithm     AlgorithmIdentifier,
    objectDigest        BIT STRING
  }
]]></artwork>
			</figure>
			<t>The ObjectDigestInfo field is reproduced above for convenience.
			When identifying a public key by reference, the ObjectDigestInfo field's
			digestedObjectType is set to publicKey(0), otherObjectTypeID is ABSENT,
			and the digestAlgorithm and objectDigest identify the hash algorithm and hash of the public key's
			DER-encoded SubjectPublicKeyInfo representation. Note that the SubjectPublicKeyInfo
			representation might differ from the SubjectPublicKeyInfo in a certificate if
			the public key algorithm uses parameters inherited through a CA's public key certificate.
			For details, see Section 7.3 of <xref target="RFC5755" />.</t>
			<t>Using ObjectDigestInfo alone could be insufficient for a recipient to look up
			a public key. In such a circumstance, the ObjectDigestInfo MAY be placed
			in a Holder field of <xref target="RFC5755" />. The baseCertificateID of Holder
			MAY be used to look up a certificate containing the partial or complete
			SubjectPublicKeyInfo. In this case, the baseCertificateID is advisory in nature,
			because the intent of the sender is to identify a key or all certificates containing a key,
			not a particular certificate. A failure MUST NOT be generated merely because
			an implementation cannot find a certificate matching baseCertificateID.
			</t>
			<t>Generating a public key identifier that is a public key by value
			(SubjectPublicKeyInfo) is useful
			when the public key is sufficiently small, and a strong hash is either similarly-sized or larger.
			Referring to the public key by value will also save time compared to
			looking up the public key from a database.</t>
			<t>It is worth noting that a public key identifier can only refer to a
			public key of an asymmetric keypair; it MUST NOT
			refer to a symmetric key or to an asymmetric private key.
			The <xref target="Security" format="none">Security Considerations</xref>
			section provides further discussion.</t>
		</section>
		
    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->

    <?rfc needLines="8" ?>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The author thanks Russ Housley and Jim Schaad for direction and guidance
			during the development of this document.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
			<t>The PKIXCertID and public key identifier structures discussed here
			provide integrity checking of the named certificate or key,
			but are not themselves integrity-checked. An
			implementer SHOULD use these structures within other integrity-checked
			structures, such as within X.509 public key or attribute certificates.</t>
			<t>Weak hash algorithms will limit the utility of these structures.
			An implementation MUST skip or reject certificates or keys when the
			cryptographic integrity of the hash function is compromised.
			On the other hand, an advanced algorithm might not be broadly compatible
			with all possible relying parties. Implementers SHOULD be aware of this tension
			when choosing a hash algorithm.</t>
      <t>A public key identifier MUST NOT refer to a symmetric key or to an asymmetric private key.
			Referring to such keys by value (with SubjectPublicKeyInfo)
			would destroy the security properties
			of keeping such keys secret, since KeyID is intended for use in public documents
			such as certificates or other signed objects. Similar considerations
			apply to referring to such keys by reference (with ObjectDigestInfo).
			Additionally,
			<xref target="RFC5280" format="none">RFC 5280</xref> and
			<xref target="RFC3279" format="none">RFC 3279</xref>
			fix the semantics of SubjectPublicKeyInfo
			(and by extension, SubjectPublicKeyRef) to asymmetric public keys.
			</t>
    </section>
    <?rfc needLines="8" ?>
  </middle>

  <back>
    <references title="Normative References">
			&RFC5280;
      &RFC2119;
      &RFC5035;
      &RFC3279;
			&RFC5755;
      <reference anchor="X.509">
			<!-- TIP: remove the quotes in the text output -->
<front><title>Information technology - Open Systems Interconnection -
The Directory: Public-key and attribute certificate frameworks</title>
<author><organization>ITU-T Recommendation X.509 (2005) | ISO/IEC 9594-8:2005</organization></author>
</front>
      </reference>
    </references>
		<references title="Informative References">
			&RFC2634;
			&RFC2560;
			&RFC5055;
		</references>

    <section anchor="app-asn1" title="ASN.1 Modules">
      <t>This Appendix will provide ASN.1 modules in a future
			revision.</t>
			<section anchor="app-asn1-1988" title="1988 ASN.1 Module">
				<t>TBD</t>
			</section>
    </section>
  </back>
</rfc>
