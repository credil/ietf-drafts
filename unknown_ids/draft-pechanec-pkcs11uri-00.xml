<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="no" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-pechanec-pkcs11uri-00" ipr="trust200902">

<front>

<title>The PKCS#11 URI Scheme</title>

<author initials="J." surname="Pechanec" fullname="Jan Pechanec">
	<organization>Sun Microsystems, Inc.</organization>

	<address>
		<postal>
			<street>The Park, building 3</street>
			<street>V parku 2308/8</street>
			<city>Prague</city>
			<code>14800</code>
			<country>CZ</country>
		</postal>

		<phone>+420 233 009 380</phone>
		<email>Jan.Pechanec@Sun.COM</email>
		<uri>http://www.sun.com</uri>
	</address>
</author>

<author initials="D. J." surname="Moffat" fullname="Darren J. Moffat">
	<organization>Oracle Corporation</organization>

	<address>
		<postal>
			<street>Guillemont Park</street>
			<street>Building 3</street>
			<city>Camberley</city>
			<code>GU17 9QG</code>
			<country>UK</country>
		</postal>

		<email>Darren.Moffat@Sun.COM</email>
		<uri>http://www.oracle.com</uri>
	</address>
</author>

<date month="March" year="2010" />

<area>General</area>
<workgroup>Network Working Group</workgroup>
<keyword>RFC</keyword>
<keyword>Request for Comments</keyword>
<keyword>I-D</keyword>
<keyword>Internet-Draft</keyword>
<keyword>XML</keyword>
<keyword>Extensible Markup Language</keyword>
<abstract>
	<t>This memo specifies a PKCS#11 Uniform Resource Identifier (URI)
	Scheme for identifying PKCS#11 objects stored in PKCS#11 tokens, or for
	identifying PKCS#11 tokens themselves. The URI is based on how PKCS#11
	objects are identified in the PKCS #11 Cryptographic Token Interface
	Standard.</t>
</abstract>
</front>

<middle>

<section anchor="intro" title="Introduction">

<t>The PKCS #11: Cryptographic Token Interface Standard <xref
target="pkcs11_spec" /> specifies an API, called Cryptoki, for devices which
hold cryptographic information and perform cryptographic functions. Cryptoki,
pronounced crypto-key and short for cryptographic token interface, follows a
simple object-based approach, addressing the goals of technology independence
(any kind of device may be used?) and resource sharing (multiple applications
may access multiple devices), presenting applications with a common, logical
view of the device - a cryptographic token.</t>

<t>It is desirable for applications or libraries that work with PKCS#11 tokens
to accept a common identifier that consumers could use to identify an existing
PKCS#11 object in a PKCS#11 token, or an existing token itself. The set of
object types that can be stored in a PKCS#11 token includes a public key, a
private key, a certificate, a secret key, and a data object. These objects can
be uniquely identifiable via the PKCS#11 URI scheme defined in this document.
The set of attributes that identifies a PKCS#11 token can contain a token label,
a manufacturer name, a serial number, and a token model.</t>

<t>Note that the PKCS#11 URI is not intended to be used to create new PKCS#11
objects in tokens, or to create PKCS#11 tokens. It is solely to be used to
identify existing objects or existing tokens.</t>
</section>

<section anchor="scheme_def" title="PKCS#11 URI Scheme Definition">

<t>In accordance with <xref target="RFC4395" />, this section provides the
information required to register the PKCS#11 URI scheme.</t>

<section anchor="scheme_name" title="PKCS#11 URI Scheme Name">
<t>pkcs11</t>
</section>

<section anchor="scheme_status" title="PKCS#11 URI Scheme Status">
<t>Permanent.</t>
</section>

<section anchor="scheme_syntax" title="PKCS#11 URI Scheme Syntax">

<t>The PKCS#11 URI scheme is a sequence of attribute value pairs. Given that the
PKCS#11 specification allows for any byte value to be used in the PKCS#11
attributes used, any byte sequence must also be allowed in the URI. Semicolons
may be escaped with a backslash.</t>

<figure>
<preamble>A PKCS#11 URL takes the form (for explanation of Augmented BNF, see
<xref target="RFC5234" />):</preamble>
<artwork>
  pk11-URI		= pk11-scheme ":" pk11-identifier
  pk11-scheme		= "pkcs11"
  pk11-identifier	= *1(pk11-attr *(%x3B pk11-attr))
  pk11-attr		= pk11-token / pk11-manufacturer /
 			  pk11-serial / pk11-model / pk11-object /
  			  pk11-objecttype / pk11-passphrasedialog
  pk11-semicolon	= "\" %x3B
  pk11-label		= *(%x00-3A / %x3C-FF / pk11-semicolon)
  pk11-token		= "token" "=" pk11-label
  pk11-manufacturer	= "manufacturer" "=" pk11-label
  pk11-serial		= "serial" "=" pk11-label
  pk11-model		= "model" "=" pk11-label
  pk11-object		= "object" "=" pk11-label
  pk11-objecttype	= "objecttype" "=" ("public" / "private" /
  			  "cert" / "secretkey" / "data")
  pk11-passphrasedialog	= "passphrasedialog" "=" "builtin" / exec
  exec			= "exec" ":" filename
  filename		= 1*(%x00-3A / %x3C-FF / pk11-semicolon)
</artwork>
</figure>

<t>While the PKCS#11 specification limits the length of some fields, eg. the
manufacturer label can be up to thirty-two characters long, the PKCS#11 URI does
not impose such limitations. It is up to the consumer of the PKCS#11 URI to
perform any necessary sanity checks.</t>

<t>The attribute "token" represents a token label, the attribute "manufacturer"
represents a manufacturer ID, the attribute "serial" represents a token serial
number, the attribute "model" represents a token model, the attribute "object"
represents a PKCS#11 object label, the attribute "objecttype" represents the
type of the object, and the attribute "passphrasedialog" specifies how the
application or library should ask for the token PIN, if needed. The "builtin"
value suggests that the application or the library should use whatever means of
reading the PIN it can provide, and the "exec:&lt;filename>" value specifies an
external application whose standard output should be used as the token PIN.</t>
</section>
</section>

<section anchor="examples" title="Examples of PKCS#11 URI Schemes">

<t>This section contains some examples of how PKCS#11 tokens or PKCS#11 token
objects can be identified using the PKCS#11 URI scheme.</t>

<figure>
<preamble>An empty PKCS#11 URI might be useful to PKCS#11 consumers:</preamble>
<artwork>
  pkcs11:
</artwork>
</figure>

<figure>
<preamble>One of the simplest and most useful forms might be a PKCS#11 URI that
specifies only an object label and its type. The default token is used so the
URI does not specify it. Note that when specifying public objects, a token PIN
might not be required.</preamble>
<artwork>
  pkcs11:object=my-pubkey;objecttype=public
</artwork>
</figure>

<figure>
<preamble>Specifying a private key will usually need to use the
"passphrasedialog" attribute:</preamble>
<artwork>
  pkcs11:object=my-key;objecttype=private;passphrasedialog=builtin
</artwork>
</figure>

<figure>
<preamble>The following example identifies a certificate in the software token.
Note that all attributes aside from "passphrasedialog" and "objecttype" may have
an empty value. In our case, "serial" is empty. It's up to the consumer of the
URI to perform necessary checks if that is not allowed. Also note that in all
three of the following examples, newlines and spaces were inserted for better
readability. Usage of newlines or spaces after semicolons is illegal in the
PKCS#11 URI scheme defined above.</preamble>
<artwork>
  pkcs11:token=Software PKCS#11 softtoken;
         manufacturer=Snake Oil, Inc.;
         serial=;
         model=1.0;
         object=my-certificate;
         objecttype=cert;
         passphrasedialog=exec:/bin/askpass.sh
</artwork>
</figure>

<figure>
<preamble>The token alone can be identified without specifying any PKCS#11
objects. A PIN may still be needed to list all objects, for example.</preamble>
<artwork>
  pkcs11:token=Sun Software PKCS#11 softtoken;
         manufacturer=Sun Microsystems, Inc.;
         passphrasedialog=exec:/bin/askpass.sh
</artwork>
</figure>

<figure>
<preamble>The following example shows that the attribute value can contain a
semicolon. In this case, it must be escaped.</preamble>
<artwork>
  pkcs11:token=The token\; created by Joe;
         object=my-certificate;
         objecttype=cert;
         passphrasedialog=exec:/bin/askpass.sh
</artwork>
</figure>

</section>

<section anchor="iana" title="IANA Considerations">

<t>This document registers a URI scheme.  The registration template can be found
in Section 2 of this document.</t>

</section>

<section anchor="security" title="Security Considerations">

<t> There are many security considerations for URI schemes discussed in
<xref target="RFC3986" />.</t>

<t>Given that the PKCS#11 URI is also supposed to be used in command line
arguments to running programs, and those arguments can be world readable on some
systems, the URI intentionaly does not allow for specifying the PKCS#11 token
PIN as a URI attribute.</t>
</section>

</middle>

<back>
<references title="Normative References">
<reference anchor="pkcs11_spec">
	<front>
		<title>PKCS #11: Cryptographic Token Interface
		Standard v2.20</title>
		<author>
			<organization>RSA
			Laboratories</organization>
		</author>
		<date month="June" year="2004" />
	</front>
</reference>
<reference anchor="RFC3986">
	<front>
		<title>Uniform Resource Identifier (URI):
		Generic Syntax</title>

		<author initials="T." surname="Berners-Lee"
		fullname="Tim Berners-Lee">
		</author>
		<author initials="R. T." surname="Fielding"
		fullname="Roy T. Fielding">
		</author>
		<author initials="L." surname="Masinter"
		fullname="Larry Masinter">
		</author>

		<date month="January" year="2005" />
	</front>
	<seriesInfo name="RFC" value="3986" />
	<seriesInfo name="STD" value="66" />
</reference>
<reference anchor="RFC5234">
	<front>
		<title>Augmented BNF for Syntax Specifications: ABNF</title>

		<author initials="D. H." surname="Crocker"
		fullname="David H. Crocker">
		</author>
		<author initials="P." surname="Overell"
		fullname="Paul Overell">
		</author>

		<date month="January" year="2008" />
	</front>
	<seriesInfo name="RFC" value="5234" />
</reference>
<reference anchor="RFC4395">
	<front>
		<title>Guidelines and Registration Procedures for New URI
		Schemes</title>

		<author initials="T." surname="Hansen"
		fullname="Tony Hansen">
		</author>
		<author initials="T." surname="Hardie"
		fullname="Ted Hardie">
		</author>
		<author initials="L." surname="Masinter"
		fullname="Larry Masinter">
		</author>

		<date month="February" year="2006" />
	</front>
	<seriesInfo name="RFC" value="4395" />
</reference>
</references>
</back>

</rfc>
