<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="XML/rfc2629.css"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "XML/rfc2629/rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC1321 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1321.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC3851 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3851.xml">
<!ENTITY RFC5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt'?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes"?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes"?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes"?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no"?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-hamrick-vwrap-authentication-01" ipr="trust200902">
  <front>
    <title abbrev="VWRAP Authentication">VWRAP Trust Model and User
      Authentication</title>
    <author fullname="Tess Chu" initials="T." surname="Chu">
      <organization>Linden Research, Inc.</organization>
      <address>
        <postal>
          <street>945 Battery St.</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94111</code>
          <country>US</country>
        </postal>
        <phone>+1 415 243 9000</phone>
        <email>tess@lindenlab.com</email>
      </address>
    </author>
    <author fullname="Meadhbh Siobhan Hamrick" initials="M. S."
      surname="Hamrick">
      <address>
        <postal>
          <street>P.O.Box 783</street>
          <city>Boulder Creek</city>
          <region>CA</region>
          <code>95006</code>
          <country>US</country>
        </postal>
        <phone>+1 650 283 0344</phone>
        <email>OhMeadhbh@gmail.com</email>
      </address>
    </author>
    <author fullname="Mark Lentczner" initials="M." surname="Lentczner">
      <organization>Linden Research, Inc.</organization>
      <address>
        <postal>
          <street>945 Battery St.</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94111</code>
          <country>US</country>
        </postal>
        <phone>+1 415 243 9000</phone>
        <email>zero@lindenlab.com</email>
      </address>
    </author>
    <date year="2010" month="March" day="8"/>
    <area>Applications</area>
    <workgroup>Virtual World Region Agent Protocol</workgroup>
    <keyword>virtual world</keyword>
    <keyword>authentication</keyword>
    <keyword>trust model</keyword>
    <abstract>
      <t>Authentication in the Virtual World Region Agent Protocol
        establishes an         application layer association between a
        client application and         a remote service responsible for
        managing the end user's         identity. The objective of
        authentication is to verify the user         of a client
        application possesses appropriate credentials before
        granting capabilities sufficient to assert control over the
        user's agent and digital assets.</t>
    </abstract>
  </front>


  <middle>
    <section title="Introduction">
      <t>Authentication is the first step in associating a client
        application with the agent domain (the remote service
        responsible for agent identity management.) Before a client
        application may interact with the agent domain or one or more
        hosts responsible for virtual world simulation, it must
        authenticate itself by presenting credentials demonstrating
        its right to control the agent. Authentication is the process
        of presenting an "Identifier" and an "Authenticator" to the
        agent domain and receiving a "Seed Capability" providing further
        access to system resources or an actionable error description.
        The protocol defines an identifier as an agent or account
        information, distinct from its related authenticator.</t>


      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
          "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described
          in <xref target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>


    <section title="Agent Login (Resource Class)">
      <section title="Introduction">
        <t>Authentication begins by requesting the agent_login resource;
          that is, POSTing the "LLSD" description of an identifier and
          an authenticator to a well-known URL. <xref
            target="draft-hamrick-vwrap-type-system-00"/>           The agent domain
          managing this resource then makes an access           control
          decision based on the verity of the credential and
          the state of the agent domain. The result of this
          authentication, whether success or failure, it is returned to
          the client application via a LLSD message. The content and
          form of these messages are provided below in "LLIDL
          format."</t>
        <t>The authentication process results in one of seven classes
          of response from the agent domain:</t>
        <t>
          <list style="symbols">
            <t>success</t>
            <t>deferred success due to maintenance</t>
            <t>authentication non-success due to missing secret</t>
            <t>authentication failure</t>
            <t>agent selection failure</t>
            <t>"user intervention required" failure, and</t>
            <t>"non-specified" failure.</t>
          </list>
        </t>
        <t>Responses to authentication requests are successes,
          non-successes and failures.                A "success"
          indicates the client application should have enough
          information to progress                past the authentication
          phase and begin using the service. A "deferred success"
          implies                use of the system will continue after a
          "short" period. In either case, the agent domain
          does not expect the client application to re-submit the
          agent_login request.                Authentication
          "non-success" results from a client requesting per-agent or
          per-account                authentication parameters. After
          sending a "non-success", the agent domain expects the
          client to resubmit the agent_login request "shortly." Failures
          of all type indicate the                agent domain believes
          a condition exists requiring explicit user intervention. In
          the case                of an authentication failure, the user
          should either retry the authentication request or
          recover their password. A failure due to "user intervention
          required" indicates the agent                domain believes
          the user's account is in a state that required "out of band"
          recovery.                Reading and accepting the agent
          domain's Terms of Service or Critical Messages are
          examples of recovering from "user intervention required"
          failures. Non-Specified                failures indicate a
          non-recoverable problem that is not defined in this
          specification.</t>
        <t>The section below on Processing Expectations provides more
          guidance.</t>
        <section title="Account identifiers and Agent identifiers">
          <t>Client applications may authenticate using an "Account
            Identifier" or an "Agent Identifier". Either type of
            identifier may be used for authentication. An agent domain
            MUST support one of the two types of identifiers, and MAY
            support both. Client applications SHOULD support both
            identifier types.</t>
          <t>An "Account" is an administrative object holding one or
            more references to an "Agent." This is advantageous in
            situations where:</t>
          <t>
            <list style="numbers">
              <t>the agent domain does not wish to use an agent first
                name and last name to identify a user, but wishes to use
                another identifier (such as an email address or account
                number,) or</t>
              <t>the agent domain wishes to allow users with several
                agents to authenticate with the same authenticator,
                freeing them from the requirement of memorizing each
                individual agent authenticator.</t>
            </list>
          </t>
          <t>Please note this spec does not imply a structure to the
            account identifier. Though an agent domain may use an email
            address as an account identifier, the protocol does not
            require it and treats the identifier simply as an opaque
            sequence of octets.</t>
        </section>
        <section title="Flexible Authentication">
          <t>This revision of the Virtual World Region Agent Protocol
            defines, but does not require the use of,
            three authentication schemes: hashed password,
            challenge-response and                   PKCS#5 Key
            Derivation 2.</t>
        </section>
      </section>
      <section title="Service Location">
        <t>Each Agent Domain MUST have a well known and published
          authentication URL.</t>
      </section>
      <section title="Inputs">
        <t>LLIDL descriptions are provided below for both agent
          identifiers and account identifiers. Client applications may
          use either as the basis for authentication.</t>
        <section title="Agent Identifier">
          <t>An agent identifier contains the first and last name of an
            agent.</t>
        </section>
        <section title="Account Identifier">
          <t>An account identifier must contain the account_name key.
            This is the opaque sequence of                   octets used
            by the agent domain to identify the user. If an account is
            associated with                   multiple agents, the
            client application SHOULD include the first_name and
            last_name of                   the agent the user wishes to
            use.</t>
        </section>
	<section title="Transport Authentication and Authorization">
	  <t>The absense of an account or agent identifier SHOULD be interpreted
	  to mean that authentication or authorization is carried by the transport.
	  The use of OAuth, TLS client certificates or HTTP authentication are examples
	  of transport authentication techniques. Compliant implementations are not
	  required to support these authentication or authorization using these
	  mechanisms. However, compliant implementations choosing to use transport
          authentication or authorization when requesting a seed capability MUST
	  signify this condition by sending an agent_login request without an
	  agent or account identifier.</t>
	</section>
        <section title="Hashed Password Authenticator">
          <t>When a hashed password is used as an authenticator, the
            string '$1$' is prepended to                   the UTF-8
            encoding of the password and processed with the MD5
            cryptographic hash                   function. <xref
              target="RFC1321"/>                     This revision of
            the Virtual World Region Agent Protocol specification
            requires the use of MD5 with                     the hashed
            password authenticator. It also requires the presence of the
            algorithm                     key, and that the value of
            this key be the string 'md5'. Note that future versions
            of this specification may ALLOW or REQUIRE the use of other
            cryptographic hash                     functions.</t>
        </section>
        <section title="Challenge-Response Authenticator">
          <t>The Challenge-Response scheme allows the agent domain to
            select a session specific "Salt" to be used in conjunction
            with the user's password to generate an authenticator. In
            this scheme the authenticator is the hash of the salt
            prepended to the hash of '$1$' prepended to the password.
            This revision of the Virtual World Region Agent Protocol
            specification requires the use of SHA256 with the
            challenge-response authenticator. <xref target="sha256"/> It
            also requires the presence of the algorithm key, and that
            the value of this key be the string 'sha256'. Note that
            future versions of this specification may ALLOW or REQUIRE
            the use of other cryptographic hash functions.</t>
          <t>To retrieve a session specific salt for use with the
            Challenge-Response authentication scheme from the agent
            domain, the client application sends a login request with a
            Challenge-Response authenticator without the secret item. If
            the agent domain supports this authenticator, it MUST
            respond with a 'key' condition including a salt and MAY
            include a duration in the response. If the duration is
            present, it denotes the number of seconds for which the salt
            will be valid.</t>
          <t>
            <list style="empty">
              <t>The Challenge-Response Authentication Scheme is not
                currently deployed on the Second Life Grid.</t>
            </list>
          </t>
        </section>
        <section title="PKCS#5 PBKDF2 Authenticator">
          <t>The PKCS#5 PBKDF2 authenticator is an implementation of RSA
            Labs' Public Key Cryptographic Standards #5 v2.1 Password
            Based Key Derivation Function #2. <xref target="pkcs5"/> In
            this scheme, the hash of the string '$1$' prepended to the
            password is used in conjunction with a salt, iteration count
            and hash function to generate an authenticator. This
            revision of the Virtual World Region Agent Protocol
            specification requires the use of SHA256 with the PKCS#5
            PBKDS2 authenticator. It also requires the presence of the
            algorithm key, and that the value of this key be the string
            'sha256'. Note that future versions of this specification
            may ALLOW or REQUIRE the use of other cryptographic hash
            functions.</t>
          <t>As with the Challenge-Response authenticator, the agent
            domain MUST include the salt and iteration count in its
            response to an authentication request that is made without a
            secret item. Conforming agent domains may include a duration
            in their response indicating the number of seconds for which
            the salt and iteration count will be valid.</t>
        </section>
      </section>
      <section title="Response">
        <t>The response to the agent login message is notice of one of
          seven "conditions":</t>
        <t>
          <list style="symbols">
            <t>authentication success</t>
            <t>maintenance deferred success</t>
            <t>authentication non-success</t>
            <t>authentication failure</t>
            <t>agent selection failure</t>
            <t>"user intervention required" failure, and</t>
            <t>"non-specific" failure.</t>
          </list>
        </t>
        <t>The specification recognizes three "non-failure" responses:</t>
        <section title="Success">
          <t>Upon success, the agent domain will respond with a message
            containing the "Agent Seed Capability". Receipt of this
            capability indicates authentication was successful. This
            capability is then used for further interactions with the
            system.</t>
        </section>
        <section title="Maintenance Deferred Success">
          <t>This condition indicates per-agent (or per-account)
            login-time maintenance is being performed. It is not an
            error. The response includes a maintenance cap the client
            application should use to get information about currently
            executing maintenance. For more information about
            maintenance, see the Maintenance section below.</t>
        </section>
        <section title="Authentication Non-Success">
          <t>Authentication Non-Success is the response given when a
            client queries the agent domain for agent-specific or
            account-specific authentication parameters. In that it is
            the expected response to such a query, it is not an error or
            exception. But it is not an indication of successful
            authentication.</t>
        </section>
      </section>
      <section title="Errors and Exceptions">
        <section title="Authentication Failure">
          <t>An authentication failure indicates the client application
            did not provide enough information to authenticate the
            account or the agent.</t>
        </section>
        <section title="Agent Selection Failure">
          <t>An agent selection failure occurs when an account
            authentication request is ambiguous. In other words, the
            account a user has attempted to use to log in is associated
            with more than one agent account and the client application
            did not specify which account to use. The response includes
            a list of first_name / last_name pairs. It is expected that
            the client application will present this list to the user
            and ask which agent to use.</t>
        </section>
        <section title="&#34;User Intervention Required&#34; Failure">
          <t>This error indicates that the agent domain cannot
            authenticate the user for non-technical reasons. The
            protocol does not attempt to describe why, or imply
            remediation for this error. But an agent domain that returns
            this response MUST provide a URL containing a message
            describing the condition leading to the error and
            remediation, if known.</t>
        </section>
        <section title="&#34;Non Specific&#34; Failure">
          <t>This error indicates some other error exists which does not
            fall into one of the previous six conditions.</t>
        </section>
      </section>
      <section title="Preconditions">
        <section title="Client Preconditions">
          <t>It is generally assumed that before a user attempts to log
            into an agent domain, they will not be actively connected to
            that agent domain.</t>
          <t>It is also assumed that the user has registered their
            account and/or agent; user registration is outside the scope
            of this specification.</t>
          <t>The client application SHOULD present the agent domain's
            Terms of Service and Critical Messages and allow a user to
            accept or decline them prior to attempting to
          authenticate.</t>
        </section>
        <section title="Agent Domain Preconditions">
          <t>If the agent domain requires users to read and agree to the
            Terms of Service or acknowledge receipt of Critical Messages
            prior to authentication, it must maintain a record of which
            accounts and agents have accepted and acknowledged these
            items.</t>
          <t>Agent domains that support the concept of "suspension" or
            "disablement" should also maintain a record of which
            accounts and agents are suspended or disabled.</t>
        </section>
      </section>
      <section title="Postconditions">
        <section title="Client Postconditions">
          <t>Following successful authentication, the client application
            SHOULD note that the agent has been authenticated to the
            agent domain. The Virtual World Region Agent Protocol is NOT
            stateless.</t>
        </section>
        <section title="Agent Domain Postconditions">
          <t>After an agent (or account) is authenticated, a seed
            capability is allocated for the agent. The agent domain
            SHOULD maintain the association between agent credentials
            (first_name and last_name) and the seed capability so it may
            be re-used if the client attempts to re-authenticate the
            user.</t>
        </section>
      </section>
      <section title="Side Effects">
        <t>The agent domain SHOULD maintain the "presence" state of an
          agent. This state should include the agent's seed capability.
          If a previously authenticated and "present" agent
          re-authenticates successfully, the agent domain MAY return the
          same seed capability.</t>
        <t>After successful authentication, it is expected that the
          client will issue another request against the seed capability.
          To defend against potential Denial of Service attacks against
          the agent domain, the agent domain MAY define a timeout period
          for the seed capability. If the timeout period expires without
          a request being made against the seed capability, that seed
          capability will expire. Successful authentication of an agent
          who is "not present" has the effect of starting this timer.</t>
        <t>The Challenge-Response Authenticator is intended to be used
          with a new, randomly generated salt for each authentication
          request. If the agent domain supports the Challenge-Response
          authentication scheme, it must maintain the "most recently
          generated salt" for some period of time (generally until the
          expiration of the duration period given in the authentication
          non-success response.)</t>
        <t>After the salt has "timed out" following an unsuccessful
          Challenge-Response authentication request, the agent domain
          MUST NOT allow the use of a previous or fixed salt value. That
          is, it is not correct, after the salt has expired, to use a
          null, fixed or previous salt. The agent domain MUST generate a
          new salt and return it to the client application. An
          unsuccessful authentication request with the
          Challenge-Response scheme also has the side effect of starting
          the salt duration timer. When this timer expires, the agent
          domain MUST NOT allow authentication with previously generated
          salts.</t>
      </section>
      <section title="Sequence of Events">
        <t>It is possible for an authentication request to occur in
          conditions where multiple errors or exceptions COULD be
          returned. As the protocol does not support reporting multiple
          failure conditions, the following sequence is provided to
          determine the priority of failure conditions. This sequence of
          events is motivated by the following principles:</t>
        <t>
          <list style="symbols">
            <t>The agent domain should leak no account status
              information to an unauthenticated user.</t>
            <t>Maintenance should occur after successful authentication
              and before account status checking in case maintenance
              involves the representation of these states by the agent
              domain.</t>
            <t>The agent domain should check for "administrative issues"
              after maintenance is complete.</t>
          </list>
        </t>
        <t>The sequence for authentication is as follows. At the first
          error, the system produces an appropriate error response.</t>
        <t>
          <list style="numbers">
            <t>If the authenticator provided is a Challenge-Response or
              PKCS#5 PBKDF2 type AND a secret is not included, the
              system returns an authentication non-success response.</t>
            <t>The secret and optional authentication parameters are
              used to verify the client is in possession of the shared
              secret. If authentication is unsuccessful, an
              authentication failure response is returned.</t>
            <t>If per-user login-time maintenance must be performed, the
              agent domain allocates a maintenance capability and
              returns it to the client application as a maintenance
              deferred success response.</t>
            <t>If an account credential was used for authentication and
              the account "contains" two or more agents and the client
              application did not provide the first_name and last_name
              of the agent to log in as, generate a list of all agents
              associated with this account and return an agent selection
              failure response.</t>
            <t>If an "administrative issue" exists such as the user is
              suspended, banned, must agree to the terms of service or
              read critical messages, the system returns a "user
              intervention required" response, providing a URL
              referencing a web resource explaining the administrative
              issue and describing remediation steps.</t>
            <t>Check to see if the authenticated agent is associated
              with an agent seed capability already. If so, return a
              success response referencing that seed capability.</t>
            <t>Start the seed capability timer. Allocate an agent seed
              capability and return it to the client application via a
              success response.</t>
          </list>
        </t>
      </section>
      <section title="Interface (POST)">
        <t>The following text describes the LLIDL description of the
          agent_login messages.</t>
        <figure>
          <artwork>; authenticators

  ; hashed password authenticator

  &amp;authenticator = {
    type: 'hash',           ; identifies this as "hashed" type
    algorithm: 'md5',       ;
    secret: binary          ; hash of salt prepended to the password;
                            ;   s = h( '$1$' | pw )
  }

  ; challenge response style authenticator

  &amp;authenticator = {
    type: 'challenge',      ; identifies this as a "challenge response"
    algorithm: 'sha256',    ; 
    salt: binary,           ; optional - default is ( 0x24, 0x31, 0x24 )
    secret: binary          ; hash of the salt prepended to the password
                            ;   s = h( salt | h( '$1$' | pw ) )
  }

  ; PKCS#5 PBKDF2 style authenticator

  &amp;authenticator = {
    type: 'pkcs5pbkdf2',    ; identifies authenticator as PKCS#5 PBKDF2
    algorithm: string,      ; identifier for hash ('md5' or 'sha256') 
    salt: binary,           ; optional - default is ( 0x24, 0x31, 0x24 )
    count: int,             ; optional - 1 used if not present
    secret: binary          ; hash of the salt prepended to the password
                            ; s = pbkdf2( h('$1$' | pw),salt,count,128)
  }

; identifier types

  ; account identifier

  &amp;identifier = {
    type: 'account',        ; identifies this as an "account identifier"
    account_name: string,
    first_name: string,     ; optional - first_name and last_name
    last_name: string       ; identify agent to log in as for accounts
                            ; with more than one agent
  }

  ; agent identifier

  &amp;identifier = {
    type: 'agent',           ; identifies this as an "agent identifier"
    first_name: string,
    last_name: string
  }

; request

  &amp;credential = {
    identifier: &amp;identifier,       ; account or agent identifier
    authenticator: &amp;authenticator  ; 'hash', 'challenge'
                                       ;  or 'pkcs5pbkdf2'
  }

; response

  ; successful response

  &amp;response = {
    condition: 'success',
    agent_seed_capability: uri    ; URL of the agent seed cap
  }

  ; authentication failure

  &amp;response = {
    condition: 'key',
    salt: binary,            ; optional - salt for challenge and PKCS5 
    count: int,              ; optional - iteration count for PKCS5 
    duration: int            ; optional - the duration of the validity 
                             ; period of salt and count values in
                             ; seconds
  }

  ; maintenance "non success"

  &amp;response = {
    condition: 'maintenance',
    maintenance_capability: uri,  ; URL of the maintenance cap
    completion: int               ; an estimate for maintenance duration
                                  ; (in seconds)
  }
 
  ; agent select failure

  &amp;response = {
    condition: 'select',
    agents: [ { first_name: string, last_name: string } , ... ]
  }
          
  ; administrative failure

  &amp;response = {
    condition: 'intervention',
    message: uri                 ; a URI with human-readable text
                                 ; explaining what the user must do to
                                 ; continue
  }

  ; non-specific error

  &amp;response = {
    condition: 'nonspecific',
    message: string              ; a string describing the failure

; resource definition

%% agent_login
-&gt;&amp;credential
&lt;-&amp;response</artwork>
        </figure>
      </section>
    </section>
    <section title="Login-Time Maintenance (Resource Class)">
      <t>An agent domain has the option of performing "per-user,
        login-time maintenance" as part of the authentication sequence.
        Performing maintenance after a user is authenticated and before
        an avatar is "rezzed" in a region has several advantages:</t>
      <t>
        <list style="symbols">
          <t>it reduces system-wide downtime</t>
          <t>it distributes maintenance across time, and</t>
          <t>it consumes computational resources only for those agents
            who use the system</t>
        </list>
      </t>
      <t>The agent domain signals it is performing maintenance by
        returning a "Maintenance Capability" instead of a seed
        capability following successful authentication. The maintenance
        capability represents a finite sequence of transactions
        performed by the agent domain on the user's behalf. It is
        expected that maintenance is a task that will complete in a
        "tractable" amount of time.</t>
      <t>The maintenance capability may be queried to retrieve
        information about the transactions that are occuring, including:</t>
      <t>
        <list style="symbols">
          <t>a textual description of the maintenance being performed</t>
          <t>an estimate for how long the maintenance will take to
            complete</t>
        </list>
      </t>
      <section title="Service Location">
        <t>The agent domain may provide a maintenance capability to the
          client application in response to successful authentication.
          This capability is communicated as an URL to a web based
          service that accepts LLSD queries.</t>
        <figure>
          <artwork>'maintenance' capability from</artwork>
        </figure>
      </section>
      <section title="Verb">
        <figure>
          <artwork>GET</artwork>
        </figure>
      </section>
      <section title="Inputs">
        <t>There are no parameters to a maintenance capability
        request.</t>
      </section>
      <section title="Response">
        <t>There are three responses to a maintenance capability: a
          description of ongoing maintenance, a new maintenance
          capability describing another sequence of maintenance
          transactions, or a seed capability. These responses are
          identified with the condition items: 'ongoing', 'next' and
          'complete'.</t>
        <t>The 'ongoing' response to a maintenance capability request
          includes a simple textual description of the maintenance
          performed, an estimate for how long the maintenance is
          expected to take, and a validity duration for the capability.
          The estimate for how long maintenance will take is provided so
          client applications may provide feedback to the user. The
          validity duration gives the viewer a minimim time period the
          agent domain will maintain the maintenance capability.</t>
        <t>When the agent domain returns a 'next' response, it indicates
          that the current maintenance is complete, but a new
          maintenance must be performed before the agent may be placed
          into a region. The 'next' response includes the URL of the
          next maintenance capability as well as an integer describing
          the minimum time period the agent domain will maintain the
          maintenance capability.</t>
        <t>When an agent domain returns a 'complete' response, it
          indicates that all maintenance is complete. The response
          includes the agent seed capability that may be used to place
          the user's avatar in a region. It also includes an item
          describing the validity period for the current maintenance
          capability.</t>
      </section>
      <section title="Interface (GET)">
        <t>The following text describes the LLIDL description of the
          agent_login messages.</t>
        <figure>
          <artwork>&amp;response = {
  condition: 'ongoing',
  description: string,
  duration: int,               ; seconds before maintenance is complete
  validity: int                ; seconds before this capability expires
}

&amp;response = {
  condition: 'next',
  description: string,
  maintenance_capability: uri, ; URL for the next maintenance capability
  validity: int                ; seconds before this capability expires
}

&amp;response = {
  condition: 'complete',
  agent_seed_capability: uri,  ; the agent's seed cap
  validity: integer            ; seconds before this capability expires
}

%% maintenance
&lt;&lt;response</artwork>
        </figure>
      </section>
    </section>
    <section anchor="Security" title="Security Considerations">
      <t><xref target="RFC3552">RFC 3552</xref> describes
        several aspects to use when evaluating the security of a
        specification or             implementation. We believe most
        common security concerns users of this specification
        will encounter are more appropriately considered as transport,
        network or link layer             issues. However, the following
        "application security" issues should be considered.</t>


      <t>The MD5 cryptographic hash functions has been deprecated
        and SHOULD be used only for compatibility with older
        applications.</t>


      <t>The use of the hashed password authenticator could result in a
        replay attack if not             used in conjunction with an
        appropriate confidentiality preserving transport.
        Implementations using the hashed password authenticator SHOULD
        utilize appropriate              encryption schemes such as
          <xref target="RFC5246">TLS</xref> or <xref target="RFC3851"
          >S/MIME</xref>.</t>
    </section>
    <section anchor="IANA" title="IANA Considerations">
      <t>This document has no actions for IANA.</t>
    </section>
  </middle>
  <back>
    <references title="Normative References"> &RFC1321; &RFC2119;
      <reference anchor="sha256">
        <front>
          <title>"Federal Information Processing Standards Publication
            180-2 (+ Change Notice to include SHA-224)</title>
          <author>
            <organization/>
          </author>
          <date/>
        </front>
      </reference>
      <reference anchor="pkcs5">
        <front>
          <title>PKCS #5: Password-Based Cryptography Specification
            Version 2.0</title>
          <author initials="B." surname="Kaliski">
            <organization>RSA Data Security, Inc.</organization>
          </author>
          <date/>
        </front>
      </reference>
      <reference anchor="draft-hamrick-vwrap-type-system-00">
        <front>
          <title>Linden Lab Structured Data</title>
          <author initials="A." surname="Brashears">
            <organization>Linden Research, Inc.</organization>
          </author>
          <author initials="M." surname="Hamrick">
            <organization>Linden Research, Inc.</organization>
          </author>
          <author initials="M." surname="Lentczner">
            <organization>Linden Research, Inc.</organization>
          </author>
          <date year="2010"/>
        </front>
      </reference>
    </references>
    <references title="Informative References"> &RFC3851;
      <!-- Here we use entities that we defined at the beginning. -->
      &RFC3552; &RFC5246;
    </references>
  </back>
</rfc>
