<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE rfc SYSTEM 'rfc2629.dtd' [  <!ENTITY rfc2119 PUBLIC ''   'bibxml/reference.RFC.2119.xml'>  <!ENTITY rfc2177 PUBLIC ''   'bibxml/reference.RFC.2177.xml'>  <!ENTITY rfc2244 PUBLIC ''   'bibxml/reference.RFC.2244.xml'>  <!ENTITY rfc3501 PUBLIC ''   'bibxml/reference.RFC.3501.xml'>  <!ENTITY rfc3629 PUBLIC ''   'bibxml/reference.RFC.3629.xml'>  <!ENTITY rfc4234 PUBLIC ''   'bibxml/reference.RFC.4234.xml'>  <!ENTITY rfc4466 PUBLIC ''   'bibxml/reference.RFC.4466.xml'>  <!ENTITY rfc4790 PUBLIC ''   'bibxml/reference.RFC.4790.xml'>  <!ENTITY rfc5051 PUBLIC ''   'bibxml/reference.RFC.5051.xml'>  <!ENTITY idLISTEXT PUBLIC ''   'bibxml3/reference.I-D.ietf-imapext-list-extensions.xml'>  <!ENTITY idSORT PUBLIC ''   'bibxml3/reference.I-D.ietf-imapext-sort.xml'>  <!ENTITY idANNOTATE PUBLIC '' 'bibxml3/reference.I-D.ietf-imapext-annotate.xml'>  <!ENTITY idIMAPI18N PUBLIC ''  'bibxml3/reference.I-D.ietf-imapext-i18n.xml'>  <!ENTITY idENABLE PUBLIC '' 'bibxml3/reference.I-D.gulbrandsen-imap-enable.xml'>]><?rfc toc="yes" ?><?rfc symrefs="yes" ?><?rfc sortrefs="yes"?><?rfc compact="yes"?><rfc category='std' ipr='full3978' docName='draft-daboo-imap-annotatemore-12'><front><title>IMAP METADATA Extension</title>  <author initials="C." surname="Daboo" fullname="Cyrus Daboo">    <organization abbrev="Apple">Apple Inc.</organization>    <address>      <postal>        <street>1 Infinite Loop</street>        <city>Cupertino</city>        <region>CA</region>        <code>95014</code>        <country>USA</country>      </postal>      <email>cyrus@daboo.name</email>      <uri>http://www.apple.com/</uri>    </address>  </author><date year='2007' /><area>Applications</area><abstract><t>The METADATA extension to the Internet Message Access Protocol permits clients and servers to maintain "annotations" or "meta data" on IMAP servers. It is possible to have annotations on a per-mailbox basis or on the server as a whole. For example, this would allow comments about the purpose of a particular mailbox to be "attached" to that mailbox, or a "message of the day" containing server status information to be made available to anyone logging in to the server.</t></abstract></front><middle><section title='Introduction and Overview'><t>The goal of the METADATA extension is to provide a means for clients to set and retrieve "annotations" or "meta data" on an IMAP server. The annotations can be associated with specific mailboxes or the server as a whole. The server can choose to support only server annotations or both server and mailbox annotations.</t><t>A server that supports both server and mailbox annotations indicates the presence of this extension by returning "METADATA" as one of the supported capabilities in the CAPABILITY command response. The "LIST-EXTENDED" <xref target='I-D.ietf-imapext-list-extensions' /> and "ENABLE" <xref target='I-D.gulbrandsen-imap-enable' /> extensions MUST also be present.</t><t>A server that supports only server annotations indicates the presence of this extension by returning "METADATA-SERVER" as one of the supported capabilities in the CAPABILITY command response. The "ENABLE" <xref target='I-D.gulbrandsen-imap-enable' /> extension MUST also be present. There is no requirement that other extensions, including "LIST-EXTENDED", be present in this case.</t><t>The METADATA extension adds two new commands and one new untagged response to the IMAP base protocol. It adds one new <xref target='I-D.ietf-imapext-list-extensions'>LIST-EXTENDED "selection"</xref> option type and one new <xref target='I-D.ietf-imapext-list-extensions'>LIST-EXTENDED "return"</xref> option type.</t><t>This extension makes the following changes to the IMAP protocol:</t><vspace blankLines='1' /><list><t>For server annotations only:<vspace blankLines='1' /><list style='symbols'><t>adds a new SETMETADATA command</t><t>adds a new GETMETADATA command</t><t>adds a new METADATA untagged response</t><t>adds a new METADATA response code</t></list></t><vspace blankLines='1' /><t>For server and mailbox annotation support:<vspace blankLines='1' /><list style='symbols'><t>adds a new SETMETADATA command</t><t>adds a new GETMETADATA command</t><t>adds a new METADATA untagged response</t><t>adds a new METADATA response code</t><t>adds a new METADATA LIST-EXTENDED selection option type</t><t>adds a new METADATA LIST-EXTENDED return option type</t></list></t></list><t>The data model used in METADATA is exactly the same as that used in the <xref target='I-D.ietf-imapext-annotate'>ANNOTATE</xref> extension to IMAP. This is modeled after that of the <xref target='RFC2244'>Application Configuration Access Protocol</xref> with the exception of inheritance which is not deemed necessary here.</t><t>Text comparisons may be done as part of the GETMETADATA or LIST-EXTENDED commands. If the <xref target="I-D.ietf-imapext-i18n">COMPARATOR</xref> extension is present, then comparisons are done using the comparator in effect at the time. If the COMPARATOR extension is not present, then comparisons MUST use the i;unicode-casemap comparator, as defined in <xref target='RFC5051' />.</t><t>The rest of this document describes the data model and protocol changes more rigorously.</t></section><section title='Conventions Used in This Document'><t>In examples, "C:" and "S:" indicate lines sent by the client and server respectively.</t><t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT","SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in thisdocument are to be interpreted as described in <xref target='RFC2119'/>.</t><t>Whitespace and line breaks have been added to the examples in this document to promote readability.</t></section><section title='Data Model'><section title='Overview'><t>Mailboxes or the server as a whole may have zero or more annotations associated with them. An annotation contains a uniquely named entry with a set of uniquely named attributes, each of which has a value. Annotations can be added to mailboxes when a mailbox name is provided as the first argument to the new command, or to the server as a whole when the empty string is provided as the first argument to the new command.</t><t>For example, a general comment being added to a mailbox may have an entry name of "/comment". This entry could include named attributes such as "value" and "size" etc to represent properties and data associated with the entry.</t><t>The protocol changes to IMAP described below allow a client to access or change the values of any attributes in any annotation entry, assuming it has sufficient access rights to do so.</t></section><section title='Namespace of entries and attributes'><t>Each annotation is an entry that has a hierarchical name, with each component of the name separated by a slash ("/"). An entry name MUST NOT contain two consecutive "/" characters and MUST NOT end with a "/" character.</t><t>Each entry is made up of a set of attributes. Each attribute has a hierarchical name, with each component of the name separated by a period ("."). An attribute name MUST NOT contain two consecutive "." characters and MUST NOT end with a "." character.</t><t>The value of an attribute is NIL (has no value), or a string of zero or more octets.</t><t>Entry and attribute names MUST NOT contain asterisk ("*") or percent ("%") characters and MUST NOT contain non-ASCII characters or the NUL octet. Invalid entry or attribute names result in a BAD response in any IMAP commands where they are used.</t><t>Attribute names MUST NOT contain any hierarchical components with the names "priv" or "shared" as those have special meaning (see <xref target='ACCESS'/>).</t><t>Entry and attribute names are case-sensitive.</t><t>Use of control or punctuation characters in entry and attribute names is strongly discouraged.</t><t>This specification defines an initial set of entry and attribute names available for use with mailbox and server annotations. In addition an extension mechanism is described to allow additional names to be added for extensibility.</t><section title='Entry Names'><t>Entry names MUST be specified in a standards track or IESG approved experimental RFC, or fall under the vendor namespace. See <xref target='IANAREGISTER' /> for the registration template.</t><section title='Server Entries'><t>These entries are used when the mailbox name argument to the new SETMETADATA command is the empty string or with the new GETMETADATA command.</t><t>/comment</t><list><t>Defines a comment or note associated with the server.</t></list><t>/motd</t><list><t>Defines a "message of the day" for the server. This entry is always read-only - clients cannot change it.</t></list><t>/admin</t><list><t>Indicates a method for contacting the server administrator. The value MUST be a URI (e.g., a mailto: or tel: URL). This entry is always read-only - clients cannot change it.</t></list><t>/vendor/&lt;vendor-token&gt;</t><list><t>Defines the top-level of entries associated with the server as created by a particular product of some vendor. This entry can be used by vendors to provide server or client specific annotations. The vendor-token MUST be registered with IANA, using the <xref target='RFC2244'>ACAP</xref> vendor subtree registry.</t></list></section><section title='Mailbox Entries'><t>These entries are used when the mailbox name argument to the new SETMETADATA command is not the empty string, or with the new LIST-EXTENDED selection option type, or in responses to these commands.</t><t>/comment</t><list><t>Defines a comment or note associated with a mailbox.</t></list><t>/sort</t><list><t>Defines the default sort criteria <xref target='I-D.ietf-imapext-sort' /> to use when first displaying the mailbox contents to the user, or NIL if sorting is not required. The text value MUST use the 'sort-criteria' syntax defined by the Formal Syntax of <xref target='I-D.ietf-imapext-sort' /> Section 5. Note that the presence of this attribute does not imply that the server supports the IMAP <xref target='I-D.ietf-imapext-sort'>SORT</xref> extension - servers can choose to support or not support SORT independently of this extension. In the absence of the SORT extension, clients can choose to interpret this entry as suggesting a client-side sort ordering of the corresponding mailbox.</t></list><t>/thread</t><list><t>Defines the default thread criteria <xref target='I-D.ietf-imapext-sort' /> to use when first displaying the mailbox contents to the user, or NIL if threading is not required. If both sort and thread are not NIL, then threading should take precedence over sorting.  The text value MUST use the 'thread-alg' syntax defined by the Formal Syntax of <xref target='I-D.ietf-imapext-sort' /> Section 5. Note that the presence of this attribute does not imply that the server supports the IMAP <xref target='I-D.ietf-imapext-sort'>THREAD</xref> extension - servers can choose to support or not support THREAD independently of this extension. In the absence of the THREAD extension, clients can choose to interpret this entry as a client-side thread ordering of the corresponding mailbox.</t></list><t>/check</t><list><t>Boolean value "true" or "false" that indicates whether this mailbox should be checked at regular intervals by the client. The interval in minutes is specified by the /checkperiod entry. When appropriate clients SHOULD use the IMAP IDLE <xref target='RFC2177' /> extension to poll the currently selected mailbox even when this value is set to "true".</t></list><t>/checkperiod</t><list><t>Numeric value indicating a period of minutes that the client uses to determine the interval of regular 'new mail' checks for the corresponding mailbox.</t></list><t>/vendor/&lt;vendor-token&gt;</t><list><t>Defines the top-level of entries associated with a specific mailbox as created by a particular product of some vendor. This entry can be used by vendors to provide client specific annotations. The vendor-token MUST be registered with IANA, using the <xref target='RFC2244'>ACAP</xref> vendor subtree registry.</t></list></section></section><section title='Attribute Names'><t>This specification defines two attribute names. Each attribute name implicitly has a ".priv" and a ".shared" suffix which maps to private and shared versions of the entry. Retrieving an annotation without using either suffix includes both. The client MUST specify either a ".priv" or ".shared" suffix when setting an annotation.</t><t>value</t><list><t>A string or binary data representing the value of the annotation. To delete an annotation, the client can store "NIL" into the value. The content represented by the string is determined by the Content-Type used to register the entry (see <xref target='IANAREGISTER'/> for entry registration templates). Where applicable, the registered Content-Type MUST include a charset parameter. Text values SHOULD use the <xref target='RFC3629'>utf-8</xref> charset.</t><t>Note that binary data (data which may contain the NUL octet) is allowed (e.g., for storing images etc), and this extension uses the "literal8" syntax element <xref target='RFC4466' /> to allow such data to be written to or read from the server.</t></list><t>size</t><list><t>The size of the value, in octets. Set automatically by the server, read-only to clients. The text value MUST use the 'number' syntax defined by the Formal Syntax of <xref target='RFC3501' /> Section 9. In particular neither "NIL" nor the empty string are allowed. If the client requests the size attribute for a non-existent entry, then the server MUST return "0" (zero) for the size.</t></list></section></section><section anchor='ACCESS' title='Private versus Shared and Access Control'><t>As discussed in the <xref target='I-D.ietf-imapext-annotate'>ANNOTATE</xref> extension there is a need to support both private and shared annotations. This document adopts the scheme used in <xref target='I-D.ietf-imapext-annotate' /> that adds two standard suffixes for all attributes: ".shared" and ".priv". A GETMETADATA or extended LIST command which specifies neither uses both. SETMETADATA commands MUST explicitly use .priv or .shared suffixes.</t><t>A user can only set and retrieve private or shared annotations on a mailbox which exists and is returned to them via a LIST or LSUB command, irrespective of whether they have read or write access to the actual message content of the mailbox. If the client attempts to set or retrieve annotations on other mailboxes, the server MUST respond with a NO response.</t><t>If the METADATA extension is present, support for shared annotations is REQUIRED, whilst support for private annotations is OPTIONAL.  This recognizes the fact that support for private annotations may introduce significantly more complexity to a server in terms of tracking ownership of the annotations, how quota is determined for users based on their own annotations etc.  Clients that support the METADATA extension MUST handle both shared and private annotations.</t></section></section><section title='IMAP Protocol Changes'><section title='General Considerations'><t>The new SETMETADATA command and the METADATA response each have a mailbox name argument. An empty string is used for the mailbox name to signify server annotations. A non-empty string is used to signify mailbox annotations attached to the corresponding mailbox.</t><t>Both "*" and "%" list wildcard characters MAY be used in the mailbox name argument in the SETMETADATA command to match all possible occurrences of a mailbox name pattern. However, "*" or "%" by themselves MUST NOT match the empty string (server) entries. Server entries can only be accessed by explicitly using the empty string as the mailbox name.</t><t>Servers SHOULD ensure that mailbox annotations are automatically moved when the mailbox they refer to is renamed, i.e. the annotations follow the mailbox. This applies to a rename of the INBOX, with the additional behavior that the annotations are copied from the original INBOX to the renamed mailbox. i.e. mailbox annotations are preserved on the INBOX when it is renamed.</t><t>Servers SHOULD delete annotations for a mailbox when the mailbox is deleted, so that a mailbox created with the same name as a previously existing mailbox does not inherit the old mailbox annotations.</t><t>Servers SHOULD allow annotations on all 'types' of mailbox, including ones reporting \Noselect for their LIST response. Servers can implicitly remove \Noselect mailboxes when all child mailboxes are removed, and as such any annotations associated with the \Noselect mailbox SHOULD be removed.</t><t>The server is allowed to impose limitations on the size of any one annotation or the total number of annotations for a single mailbox or for the server as a whole. However, the server MUST accept a minimum annotation data size of at least 1024 bytes, and a minimum annotation count per server or mailbox of at least 10.</t><t>Some annotations may be "read-only" - i.e. they are set by the server and cannot be changed by the client. Also, such annotations may be "computed" - i.e. the value changes based on underlying properties of the mailbox. For example, an annotation reporting the total size of all messages in the mailbox would change as messages are added or removed. Or, an annotation containing an IMAP URL for the mailbox would change if the mailbox was renamed.</t><t>This extension defines some unsolicited responses for use when annotations are changed by some "third-party" (see <xref target='unsolicited1' /> and <xref target='unsolicited2' />). The server MUST only send these unsolicited responses if the client used the ENABLE command <xref target='I-D.gulbrandsen-imap-enable' /> extension with the capability string "METADATA" earlier in the session.</t></section><section title='GETMETADATA Command'><t>This extension adds the GETMETADATA command. This allows clients to retrieve server annotations. Mailbox annotations are retrieved via the extended LIST command described in the next section.</t><t>This command is only available in authenticated or selected state <xref target='RFC3501' />.</t><figure><artwork><![CDATA[    Arguments:  entry-specifier                attribute-specifier    Responses:  required METADATA response    Result:     OK - command completed                NO - command failure: can't access annotations on                     the server                BAD - command unknown or arguments invalid]]></artwork></figure><t>Example:</t><figure><artwork><![CDATA[        C: a GETMETADATA /comment value.priv        S: * METADATA /comment (value.priv "My comment")        S: a OK GETMETADATA complete]]></artwork></figure><list><t>In the above example, the contents of the "value.priv" attribute for the "/comment" server entry is requested by the client and returned by the server.</t></list><t>"*" and "%" wildcard characters can be used in the entry specifier to match one or more characters at that position, with the exception that "%" does not match the "/" hierarchy delimiter. Thus an entry specifier of "/%" would match entries such as "/comment" and "/motd", but not "/comment/note".</t><t>Example:</t><figure><artwork><![CDATA[        C: a GETMETADATA /* value.priv        S: * METADATA /comment (value.priv "My comment")                      /motd (value.priv "Closed at 1 pm")        S: a OK GETMETADATA complete]]></artwork></figure><list><t>In the above example, the contents of the "value.priv" attributes for any server entries are requested by the client and returned by the server.</t></list><t>Example:</t><figure><artwork><![CDATA[        C: a GETMETADATA /% value        S: * METADATA /comment (value.priv "My comment")                               (value.shared "Your comment")                      /motd (value.priv "Its sunny outside!"                            (value.shared "Today is a Holiday")        S: a OK GETMETADATA complete]]></artwork></figure><list><t>In the above example, the contents of the "value" attributes for server entries at the top level of the entry hierarchy only, are requested by the client and returned by the server. Both the .priv and .shared values are returned, as neither were explicitly requested.</t></list><t>Entry and attribute specifiers can be lists of atomic specifiers, so that multiple items of each type may be returned in a single GETMETADATA command.</t><t>Example:</t><figure><artwork><![CDATA[        C: a GETMETADATA (/comment /motd) value.priv        S: * METADATA /comment (value.priv "My comment")                      /motd (value.priv "Its sunny outside!")        S: a OK GETMETADATA complete]]></artwork></figure><list><t>In the above example, the contents of the "value.priv" attributes for the two server entries "/comment" and "/motd" are requested by the client and returned by the server.</t></list><t>Example:</t><figure><artwork><![CDATA[        C: a GETMETADATA /comment (value.priv                                   size.priv)        S: * METADATA /comment (value.priv "My comment"                                size.priv "10")        S: a OK GETMETADATA complete]]></artwork></figure><list><t>In the above example, the contents of the "value.priv" and "size.priv" attributes for the "/comment" server entry are requested by the client and returned by the server.</t></list></section><section title='Extended LIST Command Extensions'><t>This extension adds the METADATA LIST command selection and return option types, extending the LIST-EXTENDED extension. This allows clients to retrieve mailbox annotations.</t><t>The LIST-EXTENDED "METADATA" selection option type is used to request that the extended LIST command match mailboxes which have an annotation with a specific entry and value. It can also be used to test for the existence of a particular annotation entry on a mailbox. This selection option takes one or more entry/attribute/value triples to use as tests. A mailbox matches this criteria if it has an entry, attribute and value matching the ones specified. In the case of multiple criteria being specified, mailbox MUST only match when all criteria match ("and" operation). To test for the existence of an entry, a test for the attribute "value" with the empty string "" as the value argument can be used. To test for the absence of an entry, a test for the attribute "value" with NIL as the value argument can be used. Clients SHOULD only use entries defined with a "text" Content-Type in the selection option arguments.</t><t>Each entry/attribute/value triple specified in the selection option MAY include a match type specifier and MAY include a <xref target="I-D.ietf-imapext-i18n">collation</xref> identifier. If the match type is specified, then that match operation MUST be used when matching the provided value with the corresponding annotation entry values in mailboxes. If the match type is not specified, then a default of "CONTAINS" (substring match) MUST be used. If the collation identifier is specified, then that collation MUST be used to do the comparison of the annotation entry values being tested. If the collation identifier is not specified, then the active collation as defined by <xref target="I-D.ietf-imapext-i18n"/> is used. If the client specifies a collation identifier not known to the server, the server MUST return a BAD response. Possible values for the match type are:<texttable><ttcol>Match</ttcol><ttcol>Description</ttcol><c>IS</c><c>Equality test is done</c><c>CONTAINS</c><c>Substring match is done</c><c>GT</c><c>Greater than relational test is done</c><c>GE</c><c>Greater than or equal relational test is done</c><c>LE</c><c>Less than or equal relational test is done</c><c>LT</c><c>Less than relational test is done</c></texttable>The "NOT" match type modifier results in a negation of the comparison - i.e. it adds the ability to search for annotations that do not match or contain specific text.</t><t>The LIST-EXTENDED "METADATA" return option type is used to request that the extended LIST command return specific annotation entries for each mailbox returned in the LIST responses. A list of entries and attributes to return can be specified in a manner similar to the GETMETADATA command.</t><t>Example:</t><figure><artwork><![CDATA[        C: a LIST "" "INBOX" RETURN (METADATA (/comment value.priv))        S: * LIST "/" "INBOX"                (METADATA (/comment (value.priv "My comment")))        S: a OK LIST complete]]></artwork></figure><list><t>In the above example, the contents of the "value.priv" attribute for the "/comment" entry for the mailbox INBOX is requested by the client and returned by the server.</t></list><t>"*" and "%" wildcard characters can be used in the entry specifier to match one or more characters at that position, with the exception that "%" does not match the "/" hierarchy delimiter. Thus an entry specifier of "/%" would match entries such as "/comment" and "/check", but not "/comment/note".</t><t>Example:</t><figure><artwork><![CDATA[        C: a LIST "" "INBOX" RETURN (METADATA (/* value.priv))        S: * LIST "/" "INBOX"                (METADATA (/comment (value.priv "My comment")                           /check (value.priv "true")))        S: a OK LIST complete]]></artwork></figure><list><t>In the above example, the contents of the "value.priv" attributes for any entries  for the mailbox INBOX are requested by the client and returned by the server.</t></list><t>Example:</t><figure><artwork><![CDATA[        C: a LIST "" "INBOX" RETURN (METADATA (/% value))        S: * LIST "/" "INBOX"                (METADATA (/comment (value.priv "My comment")                                    (value.shared "Your comment")                           /motd (value.priv "Its sunny outside!"                                 (value.shared "Today is a Holiday")))        S: a OK LIST complete]]></artwork></figure><list><t>In the above example, the contents of the "value" attributes for entries for the mailbox INBOX at the top level of the entry hierarchy only, are requested by the client and returned by the server. Both the .priv and .shared values are returned, as neither were explicitly requested.</t></list><t>Entry and attribute specifiers can be lists of atomic specifiers, so that multiple items of each type may be returned in a single LIST command.</t><t>Example:</t><figure><artwork><![CDATA[        C: a LIST "" "INBOX" RETURN (METADATA ((/comment /motd)                                               value.priv))        S: * LIST "/" "INBOX"                (METADATA (/comment (value.priv "My comment")                           /motd (value.priv "Its sunny outside!")))        S: a OK LIST complete]]></artwork></figure><list><t>In the above example, the contents of the "value.priv" attributes for the two entries "/comment" and "/motd" for the mailbox INBOX are requested by the client and returned by the server.</t></list><t>Example:</t><figure><artwork><![CDATA[        C: a LIST "" "INBOX" RETURN (METADATA (/comment                                               (value.priv size.priv)))        S: * LIST "/" "INBOX"                (METADATA (/comment (value.priv "My comment"                                     size.priv "10")))        S: a OK LIST complete]]></artwork></figure><list><t>In the above example, the contents of the "value.priv" and "size.priv" attributes for the "/comment" entry for the mailbox INBOX are requested by the client and returned by the server.</t></list><t>Example:</t><figure><artwork><![CDATA[        C: a LIST "" ("INBOX" "FOOBOX" "BARBOX") RETURN                (METADATA (/comment value.priv))        S: * LIST "/" "INBOX"                (METADATA (/comment (value.priv "My comment")))        S: * LIST "/" "FOOBOX"                (METADATA (/comment (value.priv "Another comment")))        S: * LIST "/" "BARBOX"                (METADATA (/comment (value.priv NIL)))        S: a OK LIST complete]]></artwork></figure><list><t>In the above example, the contents of the "value.priv" attribute for the "/comment" entry for the mailboxes INBOX, FOOBOX and BARBOX are requested by the client and returned by the server. Note that the mailbox BARBOX does not contain the entry, hence NIL is returned for the attribute value.</t></list><t>Example:</t><figure><artwork><![CDATA[        C: a LIST (METADATA ("/comment" "value" "comm"                             (NOT CONTAINS))) "" "*"        S: * LIST () "/" "INBOX"        S: * LIST (\NoInferiors) "/" "FOOBOX"        S: a OK LIST complete]]></artwork></figure><list><t>In the above example, the client requests that any mailbox in the entire hierarchy that does not contain the text "comm" in any "value" attribute of the "/comment" entry be returned. Two mailboxes are returned in separate responses. Note that the client did not ask for annotations to be returned in the responses.</t></list><t>Example:</t><figure><artwork><![CDATA[        C: a LIST (METADATA ("/comment" "value" ""))                  "" "*"        S: * LIST () "/" "INBOX"        S: * LIST (\NoInferiors) "/" "FOOBOX"        S: a OK LIST complete]]></artwork></figure><list><t>In the above example, the client requests that any mailbox in the entire hierarchy containing the "/comment" entry be returned. Two mailboxes are returned in separate responses. Note that the client did not ask for annotations to be returned in the responses.</t></list><t>Example:</t><figure><artwork><![CDATA[        C: a LIST (METADATA ("/comment" "value" NIL))                  "" "*"        S: * LIST (\NoInferiors) "/" "BARBOX"        S: a OK LIST complete]]></artwork></figure><list><t>In the above example, the client requests that any mailbox in the entire hierarchy that does not have a "/comment" entry be returned. One mailbox is returned in a response. Note that the client did not ask for annotations to be returned in the responses.</t></list><t>Example:</t><figure><artwork><![CDATA[        C: a LIST (METADATA ("/comment" "value" "HELP"                             (IS "i;octet")) "" "*"                  RETURN (METADATA (/comment size.priv))        S: * LIST "/" "INBOX"                (METADATA (/comment (size.priv "10")))        S: * LIST "/" "FOOBOX"                (METADATA (/comment (size.priv "15")))        S: a OK LIST complete]]></artwork></figure><list><t>In the above example, the client requests that any mailbox in the entire hierarchy with the exact text "HELP" in any "value" attribute of the "/comment" entry be returned. The client provides an explicit match type and collation identifier. Two mailboxes are returned in separate responses. The client also asked for annotation sizes to be returned in the responses.</t></list><section title="Unsolicited LIST response" anchor='unsolicited1'><t>Subject to unsolicited responses being activated by the ENABLE <xref target='I-D.gulbrandsen-imap-enable' /> command for this extension, servers SHOULD send unsolicited LIST responses if mailbox annotations are changed by a third-party, allowing servers to keep clients updated with changes. Unless explicitly changed by an IMAP extension, unsolicited mailbox annotations MUST only be returned for the currently selected mailbox.</t><t>Unsolicited LIST responses MUST only contain entry names, not the attributes and values. If the client wants to update any cached values it must explicitly retrieve those using a LIST command.</t><t>The LIST response can contain multiple entries in a single response,  but the server is free to return multiple responses for each entry or group of entries if it desires.</t><t>Example:</t><figure><artwork><![CDATA[        C: a NOOP        S: * LIST "/" "INBOX" (METADATA (/comment))        S: a OK NOOP complete]]></artwork></figure><list><t>In the above example, the server sends an unsolicited LIST response indicating that the "/comment" entry of the mailbox "INBOX" has been changed.</t></list></section></section><section title='SETMETADATA Command'><t>This extension adds the SETMETADATA command. This allows clients to set annotations.</t><t>This command is only available in authenticated or selected state <xref target='RFC3501' />.</t><figure><artwork><![CDATA[    Arguments:  mailbox-name                entry                attribute-value                list of entry, attribute-values    Responses:  no specific responses for this command    Result:     OK - command completed                NO - command failure: can't set annotations,                     or annotation too big or too many                BAD - command unknown or arguments invalid]]></artwork></figure><t>This command sets the specified list of entries by adding or replacing the specified attributes with the values provided, on the specified existing mailboxes or on the server (if the mailbox argument is the empty string). Clients can use NIL for values of attributes it wants to remove from entries. The server SHOULD NOT return a METADATA or LIST response containing the updated annotation data. Clients MUST NOT assume that a METADATA or LIST response will be sent, and MUST assume that if the command succeeds then the annotation has been changed.</t><t>If the server is unable to set an annotation because the size of its value is too large, the server MUST return a tagged NO response with a "[METADATA TOOBIG]" response code.</t><t>If the server is unable to set a new annotation because the maximum number of allowed annotations has already been reached, the server MUST return a tagged NO response with a "[METADATA TOOMANY]" response code.</t><t>If the server is unable to set a new annotation because it does not support private annotations on one of the specified mailboxes, the server MUST return a tagged NO response with a "[METADATA NOPRIVATE]" response code.</t><t>Example:</t><figure><artwork><![CDATA[        C: a SETMETADATA INBOX /comment                                 (value.priv "My new comment")        S: a OK SETMETADATA complete]]></artwork></figure><list><t>In the above example, the entry "/comment" for the mailbox "INBOX" is created (if not already present) and the private attribute "value" with data set to "My new comment" is created if not already present, or replaced if it previously exists.</t></list><t>Example:</t><figure><artwork><![CDATA[        C: a SETMETADATA INBOX /comment (value.priv NIL)        S: a OK SETMETADATA complete]]></artwork></figure><list><t>In the above example, the private "value" attribute of the entry "/comment" is removed from the mailbox "INBOX".</t></list><t>Annotations on multiple mailboxes can be set in a single SETMETADATA command by using a wildcard specification for the mailbox name.</t><t>Example:</t><figure><artwork><![CDATA[        C: a SETMETADATA INBOX.% /comment                                   (value.priv "My new comment")        S: a OK SETMETADATA complete]]></artwork></figure><list><t>In the above example, the entry "/comment" for all mailboxes at the top-level of the "INBOX" hierarchy are created (if not already present) and the private attribute "value" are created respectively for each entry if not already present, or replaced if they previously existed.</t></list><t>Multiple entries can be set in a single SETMETADATA command by listing entry-attribute-value pairs in the list.</t><t>Example:</t><figure><artwork><![CDATA[        C: a SETMETADATA INBOX (/comment                                  (value.priv "My new comment")                                  /thread                                  (value.priv "REFERENCES ALL"))        S: a OK SETMETADATA complete]]></artwork></figure><list><t>In the above example, the entries "/comment" and "/thread" for the mailbox "INBOX" are created (if not already present) and the "value.priv" attributes are created respectively for each entry if not already present, or replaced if they previously existed.</t></list><t>Multiple attributes can be set in a single SETMETADATA command by listing multiple attribute-value pairs in the entry list.</t><t>Example:</t><figure><artwork><![CDATA[        C: a SETMETADATA INBOX /comment                             (value.priv "My new comment"                              value.shared "foo's bar")        S: a OK SETMETADATA complete]]></artwork></figure><list><t>In the above example, the entry "/comment" for the mailbox "INBOX" is created (if not already present) and the attributes "value.priv" and "value.shared" are created if not already present, or replaced if they previously existed.</t></list><t>Example:</t><figure><artwork><![CDATA[        C: a SETMETADATA INBOX /comment                                 (value.priv "My new comment")        S: a NO [METADATA TOOMANY] SETMETADATA failed]]></artwork></figure><list><t>In the above example, the server is unable to set the requested (new) annotation as it has reached the limit on the number of annotations it can support on the specified mailbox.</t></list></section><section title='METADATA Response' anchor='unsolicited2'><t>The METADATA response displays results of a GETMETADATA command, or can be returned as an unsolicited response at anytime by the server in response to a change in a server annotation.</t><t>Subject to unsolicited responses being activated by the ENABLE <xref target='I-D.gulbrandsen-imap-enable' /> command for this extension, servers SHOULD send unsolicited METADATA responses if server annotations are changed by a third-party, allowing servers to keep clients updated with changes.</t><t>Unsolicited METADATA responses MUST only contain entry names, not the attributes and values. If the client wants to update any cached values it must explicitly retrieve those using a GETMETADATA command.</t><t>The METADATA response can contain multiple entries in a single response,  but the server is free to return multiple responses for each entry or group of entries if it desires.</t><t>This response is only available in authenticated or selected state <xref target='RFC3501' />.</t><section title='METADATA response with attributes and values'><t>The response consists of a list of entries each of which has a list of attribute-value pairs.</t><t>Example:</t><figure><artwork><![CDATA[        C: a GETMETADATA /comment value.priv        S: * METADATA /comment (value.priv "My comment")        S: a OK GETMETADATA complete]]></artwork></figure><list><t>In the above example, a single entry with a single attribute-value pair is returned by the server.</t></list><t>Example:</t><figure><artwork><![CDATA[        C: a GETMETADATA (/comment /motd) value.priv        S: * METADATA /comment (value.priv "My comment")                      /motd (value.priv "Its sunny outside!")        S: a OK GETMETADATA complete]]></artwork></figure><list><t>In the above example, two entries each with a single attribute-value pair is returned by the server.</t></list><t>Example:</t><figure><artwork><![CDATA[        C: a GETMETADATA (/comment /motd) value.priv        S: * METADATA /comment (value.priv "My comment")        S: * METADATA /motd (value.priv "Its sunny outside!")        S: a OK GETMETADATA complete]]></artwork></figure><list><t>In the above example, the server returns two separate responses for each of the two entries requested.</t></list><t>Example:</t><figure><artwork><![CDATA[        C: a GETMETADATA /comment (value.priv size.priv)        S: * METADATA /comment (value.priv "My comment"                                       size.priv "10")        S: a OK GETMETADATA complete]]></artwork></figure><list><t>In the above example, a single entry with two attribute-value pairs is returned by the server.</t></list></section><section title='Unsolicited METADATA response without attributes and values'><t>The response consists of a parenthesized list of entries, each of which have changed on the server.</t><t>Example:</t><figure><artwork><![CDATA[        C: a NOOP        S: * METADATA (/comment)        S: a OK NOOP complete]]></artwork></figure><list><t>In the above example, the server indicates that the "/comment" server entry has been changed.</t></list><t>Example:</t><figure><artwork><![CDATA[        C: a NOOP        S: * METADATA (/comment /motd)        S: a OK NOOP complete]]></artwork></figure><list><t>In the above example, the server indicates a change to two server entries.</t></list></section></section></section><section title='Formal Syntax'><t>The following syntax specification uses the Augmented Backus-Naur Form (ABNF) notation as specified in <xref target='RFC4234' />.</t><t>Non-terminals referenced but not defined below are as defined by <xref target='RFC3501' /> with the new definitions in <xref target='RFC4466' /> superseding those in <xref target='RFC3501' />.</t><t>Except as noted otherwise, all alphabetic characters are case- insensitive. The use of upper or lower case characters to define token strings is for editorial clarity only. Implementations MUST accept these strings in a case-insensitive fashion.</t><figure><artwork><![CDATA[    annotate-data     = "METADATA" SP entry-list    att-select        = "value" / "value.priv" / "value.shared"                       ; the only attributes that can be selected    att-value         = attrib SP value    attrib            = astring                        ; dot-separated attribute name                        ; MUST NOT contain "*" or "%"    attribs           = attrib / "(" attrib *(SP attrib) ")"                        ; one or more attribute specifiers    capability        =/ "METADATA" / "METADATA-SERVER"                        ; defines the capabilities for this extension    command-auth      =/ setmetadata / getmetadata                        ; adds to original IMAP command    collation         = astring                        ; collation identifier as defined by                        ; [RFC4790]    entries           = entry-match /                        "(" entry-match *(SP entry-match) ")"                        ; entry specifiers that can include wildcards    entry             = astring                        ; slash-separated path to entry                        ; MUST NOT contain "*" or "%"    entry-att         = entry SP "(" att-value *(SP att-value) ")"    entry-list        = entry-att *(SP entry-att) /                        "(" entry *(SP entry) ")"                        ; entry attribute-value pairs list for                         ; GETMETADATA response, or                        ; parenthesised entry list for unsolicited                        ; notification of annotation changes    entry-match       = list-mailbox                        ; slash-separated path to entry                        ; MAY contain "*" or "%" for use as wildcards     getmetadata       = "GETMETADATA" SP entries SP attribs    list-select-base-opt =/ "METADATA" SP                            "(" list-select-metadata                                 *(SP list-select-metadata) ")"                        ; adds a new selection option type to                        ; LIST-EXTENDED. When evaluating multiple entry,                        ; attribute, value combinations, a match to                        ; a mailbox must occur when all items match.                                                    list-select-metadata = entry-match SP att-select SP value                           [SP "(" matchtype [SP collation] ")"]                        ; value set to the empty string means match                        ; if that entry and attribute exist.                        ; value set to NIL means match if that entry                        ; and attribute do not exist.                        ; An optional match type and collation can also                        ; be specified.    matchtype         = ["NOT" SP] ("IS" / "CONTAINS" /                                    "GT" / "GE" / "LE" / "LT")                        ; match types for LIST-EXTENDED string                        ; comparisons - see Section 4.3.    response-payload  =/ annotate-data                        ; adds to original IMAP data responses    resp-text-code    =/ "METADATA" SP ("TOOBIG" / "TOOMANY" /                                        "NOPRIVATE")                        ; new response codes for SETMETADATA                        ; failures    setmetadata       = "SETMETADATA" SP list-mailbox                                      SP setentryatt                        ; empty string for list-mailbox implies                        ; server annotation.    setentryatt       = entry-att / "(" entry-att *(SP entry-att) ")"    value             = nstring / literal8]]></artwork></figure></section><section title='IANA Considerations'><t>Entry names MUST be specified in a standards track or IESG approved experimental RFC, or fall under the vendor namespace.</t><t>Each entry registration MUST include a content-type that is used to indicate the nature of the annotation value. Where applicable a charset parameter MUST be included with the content-type.</t><section anchor='IANAREGISTER' title='Entry and Attribute Registration Template'><figure><artwork><![CDATA[    To: iana@iana.org    Subject: IMAP METADATA Entry Registration    Type:         [Either "Mailbox" or "Server"]    Name:         [the name of the entry]    Description:  [a description of what the entry is for]        Content-type: [MIME Content-Type and charset for the entry value]    RFC Number:   [for entries published as RFCs]    Contact:      [email and/or physical address to contact for                   additional information]]]></artwork></figure></section><section title='Server Entry Registrations'><t>The following templates specify the IANA registrations of annotation entries specified in this document.</t><section title='/comment'><figure><artwork><![CDATA[    To: iana@iana.org    Subject: IMAP METADATA Entry Registration    Type:         Server    Name:         /comment    Description:  Defined in IMAP METADATA extension document.      Content-type: text/plain; charset=utf-8    RFC Number:   This RFC.    Contact:      IMAP Extensions <ietf-imapext@imc.org>]]></artwork></figure></section><section title='/motd'><figure><artwork><![CDATA[    To: iana@iana.org    Subject: IMAP METADATA Entry Registration    Type:         Server    Name:         /motd    Description:  Defined in IMAP METADATA extension document.      Content-type: text/plain; charset=utf-8    RFC Number:   This RFC.    Contact:      IMAP Extensions <ietf-imapext@imc.org>]]></artwork></figure></section><section title='/admin'><figure><artwork><![CDATA[    To: iana@iana.org    Subject: IMAP METADATA Entry Registration    Type:         Server    Name:         /admin    Description:  Defined in IMAP METADATA extension document.      Content-type: text/plain; charset=utf-8    RFC Number:   This RFC.    Contact:      IMAP Extensions <ietf-imapext@imc.org>]]></artwork></figure></section></section><section title='Mailbox Entry Registrations'><t>The following templates specify the IANA registrations of annotation entries specified in this document.</t><section title='/comment'><figure><artwork><![CDATA[    To: iana@iana.org    Subject: IMAP METADATA Entry Registration    Type:         Mailbox    Name:         /comment    Description:  Defined in IMAP METADATA extension document.      Content-type: text/plain; charset=utf-8    RFC Number:   This RFC.    Contact:      IMAP Extensions <ietf-imapext@imc.org>]]></artwork></figure></section><section title='/sort'><figure><artwork><![CDATA[    To: iana@iana.org    Subject: IMAP METADATA Entry Registration    Type:         Mailbox    Name:         /sort    Description:  Defined in IMAP METADATA extension document.      Content-type: text/plain; charset=utf-8    RFC Number:   This RFC.    Contact:      IMAP Extensions <ietf-imapext@imc.org>]]></artwork></figure></section><section title='/thread'><figure><artwork><![CDATA[    To: iana@iana.org    Subject: IMAP METADATA Entry Registration    Type:         Mailbox    Name:         /thread    Description:  Defined in IMAP METADATA extension document.      Content-type: text/plain; charset=utf-8    RFC Number:   This RFC.    Contact:      IMAP Extensions <ietf-imapext@imc.org>]]></artwork></figure></section><section title='/check'><figure><artwork><![CDATA[    To: iana@iana.org    Subject: IMAP METADATA Entry Registration    Type:         Mailbox    Name:         /check    Description:  Defined in IMAP METADATA extension document.      Content-type: text/plain; charset=utf-8    RFC Number:   This RFC.    Contact:      IMAP Extensions <ietf-imapext@imc.org>]]></artwork></figure></section><section title='/checkperiod'><figure><artwork><![CDATA[    To: iana@iana.org    Subject: IMAP METADATA Entry Registration    Please register the following IMAP METADATA entry:    Type:         Mailbox    Name:         /checkperiod    Description:  Defined in IMAP METADATA extension document.      Content-type: text/plain; charset=utf-8    RFC Number:   This RFC.    Contact:      IMAP Extensions <ietf-imapext@imc.org>]]></artwork></figure></section></section><section title="LIST-EXTENDED Registration"><figure><artwork><![CDATA[    To: iana@iana.org    Subject: Registration of LIST-EXTENDED option METADATA    LIST-EXTENDED option name: METADATA    LIST-EXTENDED option type: SELECTION    Implied return options(s): (none)    LIST-EXTENDED option description:      The "METADATA" selection option type is used to request      that the extended LIST command match mailboxes which have      an annotation with a specific entry and value.  It can      also be used to test for the existence of a particular      annotation entry on a mailbox.    Published specification : XXXX, Section 4.3.    Security considerations: XXXX, Section 7.    Intended usage: COMMON    Person and email address to contact for further information:       IMAP Extensions <ietf-imapext@imc.org>    Owner/Change controller: iesg@ietf.org    To: iana@iana.org    Subject: Registration of LIST-EXTENDED option METADATA    LIST-EXTENDED option name: METADATA    LIST-EXTENDED option type: RETURN    LIST-EXTENDED option description: Causes the LIST command to    return the specified mailbox annotations.    Published specification : XXXX, Section 4.3.    Security considerations: XXXX, Section 7.    Intended usage: COMMON    Person and email address to contact for further information:       IMAP Extensions <ietf-imapext@imc.org>    Owner/Change controller: iesg@ietf.org]]></artwork></figure></section></section><section title='Security Considerations'><t>Annotations whose values are intended to remain private MUST use .priv values, and not .shared values which may be accessible to other users.</t><t>Annotations can contain arbitrary sized data. As such servers MUST ensure that size limits are enforced to prevent a user from using up all available space on a server and preventing use by others.</t><t>Excluding the above issues the METADATA extension does not raise any security considerations that are not present in the base IMAP protocol, and these issues are discussed in <xref target='RFC3501' />.</t></section></middle><back><references title='Normative References'>&rfc2119;&rfc2244;&rfc3501;&rfc3629;&rfc4234;&rfc4466;&rfc4790;&rfc5051;&idLISTEXT;&idSORT;&idIMAPI18N;&idENABLE;</references><references title='Informative References'>&rfc2177;&idANNOTATE;</references><section title='Acknowledgments'><t>The ideas expressed in this document are based on the message annotation document that was co-authored by Randall Gellens. The participants of the IMAPext working group made significant contributions to this work.</t></section><section title='Change History (to be removed prior to publication as an RFC)'><t>Changes from -11 to -12:</t><list style='numbers'><t>Allow server annotations to be used without mailbox annotations.</t><t>Require i;unicode-casemap when COMPARATOR is not present.</t><t>Use ENABLE to turn on unsolicited responses.</t><t>Use formal syntax elements from SORT/THREAD extensions to define the values for /sort and /thread entries.</t><t>Added a comment that use of IDLE is preferred even when /check is true.</t><t>Use formal syntax element from base spec for the /size value.</t><t>Removed IANA registration for attributes as we don't expect any more to be defined.</t><t>Tweaked IANA registration template to be more compact and add RFC Number reference.</t><t>Some minor re-phrasing was done.</t><t>Added text about handling of annotations on INBOX when it is renamed.</t><t>Require a BAD response when an unknown collation is used in LISTEXT selection option.</t></list><t>Changes from -10 to -11:</t><list style='numbers'><t>Added new paragraph to indicate that values may be read-only or computed.</t><t>/admin server annotation value now must be a URI.</t><t>Clarified that SORT and THREAD extensions are not required.</t><t>Fixed use of undefined entries in some examples.</t><t>Fixed many examples.</t><t>Added IANA registration for LIST-EXTENDED items.</t><t>Added match type and collation identifier to the LIST-EXTENDED selection option.</t><t>Made support for IMAP-I18N a requirement.</t><t>Minor text clarifications applied.</t><t>Remove mailbox list set atomicity requirement.</t><t>Clarified that annotations can only be set on mailboxes that actually exist.</t></list><t>Changes from -09 to -10:</t><list style='numbers'><t>Updated to rfc 4466 reference.</t><t>Reworded data model description.</t><t>Reworked LIST-EXTENDED so that responses have metadata items after the mailbox info.</t><t>Various spelling fixes.</t></list><t>Changes from -08 to -09:</t><list style='numbers'><t>Remove content-language attribute and reference.</t><t>Changed capability and command names.</t><t>Revised abstract.</t></list><t>Changes from -07 to -08:</t><list style='numbers'><t>Changed 'string' formal syntax to 'list-mailbox' and 'astring' for entry/attribute names.</t><t>Updated examples to match new astring syntax.</t><t>Changed CAPABILITY name due to incompatible syntax change.</t><t>Removed content-type attribute.</t><t>Added Content-type to IANA registration for entries.</t><t>Removed vendor attributes.</t><t>Fixed examples in section 3.3 for multi-mailbox and multi-entry cases.</t><t>Removed wildcards for attributes.</t><t>Entry/attributes can now only be ASCII.</t><t>Tied up text wrt storing/fetching.</t><t>Added Conventions section</t><t>Entry/attributes MUST NOT contain consecutive or trailing '/' or '.'.</t><t>Changed to use IMAP ABNF extensions document for some formal syntax items.</t></list><t>Changes from -06 to -07:</t><list style='numbers'><t>Reworded /checkperiod item.</t><t>Clarified unsolicited response behavior.</t></list><t>Changes from -05 to -06:</t><list style='numbers'><t>Removed 'modifiedsince' attribute as there is currently no use for it.</t><t>Added content-language attribute.</t><t>Changed access to allow .priv and .shared on any mailbox returned by LIST/LSUB.</t><t>Added IANA registrations for items defined in this document.</t><t>Added latest IPR statement.</t><t>Updated references.</t></list><t>Changes from -04 to -05:</t><list style='numbers'><t>Fix for valid IMAP state of commands.</t><t>Fix formatting, ID nits etc.</t></list><t>Changes from -03 to -04:</t><list style='numbers'><t>Allow retrieval of shared annotations for READ-ONLY mailbox.</t><t>Clarification of annotation loss on implicit removal of \Noselect mailboxes.</t><t>Now requires roll-back of all changes to matching mailboxes if there is a partial failure in SETANNOTATION.</t></list><t>Changes from -02 to -03:</t><list style='numbers'><t>Reworked entry naming scheme to split out mailbox name and use empty string for server items.</t></list><t>Changes from -01 to -02:</t><list style='numbers'><t>SETANNOTATION lists use (..).</t><t>Explicitly state behavior of unsolicited responses.</t><t>Adding SHOULD behavior for rename/delete of mailboxes.</t><t>Added statement about supporting annotations on \Noselect mailboxes.</t><t>Cleaned up formal syntax to use IMAP string type for entry and attributes, with requirements on how the string is formatted.</t><t>Use of ACAP vendor subtree registry for vendor tokens.</t></list><t>Changes from -00 to -01:</t><list style='numbers'><t>Multiple entry-att responses are now simply delimited by spaces in line with ANNOTATE spec. Adjusted examples to match.</t><t>Fixed entry-list formal syntax item to account for unsolicited parenthesized list of entries.</t><t>Removed setentries formal syntax item for simplicity since its only used once.</t><t>Removed reference to 'message annotation' in section 5.1.</t><t>Changed formal syntax to restrict top level entries to /server and /mailbox/{...} only. Re-arranged entry names section to account for this change.</t><t>Added comment and example for ANNOTATION response to allow servers to return separate responses for each entry if desired.</t></list></section></back></rfc>