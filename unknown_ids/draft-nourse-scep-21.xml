<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2315 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2315.xml">
<!ENTITY RFC2986 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2986.xml">
<!ENTITY RFC2985 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2985.xml">
<!ENTITY RFC5280 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC4346 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4346.xml">
<!ENTITY RFC4306 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4306.xml">
<!ENTITY RFC4210 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4210.xml">
<!ENTITY RFC5272 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5272.xml">
<!ENTITY RFC2409 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2409.xml">
<!ENTITY RFC4945 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4945.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-nourse-scep-21" ipr="pre5378Trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="SCEP">Cisco Systems' Simple Certificate Enrollment
    Protocol</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Max Pritikin" initials="M" role="editor"
            surname="Pritikin">
      <organization>Cisco Systems, Inc</organization>

      <address>
        <postal>
          <street></street>
        </postal>

        <email>pritikin@cisco.com</email>
      </address>
    </author>

    <author fullname="Andrew Nourse" initials="A" surname="Nourse">
      <organization>Cisco Systems, Inc</organization>

      <address>
        <postal>
          <street></street>
        </postal>

        <email>nourse@cisco.com</email>
      </address>
    </author>

    <author fullname="Jan Vilhuber" initials="J" surname="Vilhuber">
      <organization>Cisco Systems, Inc</organization>

      <address>
        <postal>
          <street></street>
        </postal>

        <email>vilhuber@cisco.com</email>
      </address>
    </author>

    <date month="September" year="2010" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>Security</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>pki</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>This document specifies the Simple Certificate Enrollment Protocol, a
      PKI communication protocol which leverages existing technology by using
      PKCS#7 and PKCS#10 over HTTP. SCEP is the evolution of the enrollment
      protocol developed by VeriSign, Inc. for Cisco Systems, Inc. It now
      enjoys wide support in both client and CA implementations.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>Public key technology is widely available and increasingly widely
      deployed. X.509 certificates serve as the basis for several
      standards-based security protocols in the IETF, such as <xref
      target="RFC2409">IKE</xref> and <xref target="RFC4306">IKEv2</xref>, and
      <xref target="RFC4346">TLS</xref>. When an X.509 certificate is issued
      by other than the certificate subject (a self-issued certificate), there
      typically is a need for a certificate management protocol. Such a
      protocol enables a PKI client to request a certificate, certificate
      renewal, or certificate revocation from a certification authority. Often
      there also is a need for protocols to request a certificate or
      certificate status information, although these functions are often
      provided by distinct protocols.</t>

      <t>This specification defines a protocol, SCEP, for certificate
      management and certificate and CRL queries in a closed environment.
      While widely deployed, this protocol omits some certificate management
      features, e.g., in-band certificate revocation transactions, that can
      significantly enhance the security achieved in a PKI. The IETF protocol
      suite currently includes two certificate management protocols with more
      comprehensive functionality: <xref target="RFC4210">CMP</xref> and <xref
      target="RFC5272">Certificate Management over CMS</xref>. Where
      interoperability with the installed base of SCEP implementations is
      required, implementers are encouraged to support a comprehensive
      standards track certificate management protocol in addition to the
      protocol defined in this specification. This implementation strategy
      balances near term requirements for interoperability with longer term
      security goals.</t>

      <t>As a reflection of the history of SCEP implementations some of the
      operations described in this document are indicated as 'SHOULD' or 'MAY'
      where a stricter protocol specification might have indicated a
      'MUST'.</t>

      <t>The protocol supports the following general operations:</t>

      <t><list style="symbols">
          <t>CA and RA public key distribution</t>

          <t>Certificate enrollment</t>

          <t>Certificate query</t>

          <t>CRL query</t>
        </list>SCEP makes extensive use of <xref
      target="RFC2315">PKCS#7</xref> and <xref
      target="RFC2986">PKCS#10</xref>.</t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119"></xref>.</t>
      </section>
    </section>

    <section anchor="scepops" title="SCEP Overview">
      <t>In this section, we give a high level overview of the functionality
      of SCEP.</t>

      <section anchor="scep_entities" title="SCEP Entities">
        <t>The entity types defined in SCEP are <list style="symbols">
            <t>the <xref target="requester">Requester</xref> (e.g., IPSEC
            clients)</t>

            <t>the Server, which may be either a <xref
            target="certauth">Certification Authority (CA)</xref> or a <xref
            target="reg_auth">Registration Authority (RA)</xref></t>
          </list></t>

        <section anchor="requester" title="Requester">
          <t>The requester is sometimes called a "client" in this document. It
          is the client of the SCEP exchange.</t>

          <t>The requester MAY submit SCEP messages for itself or it MAY
          submit SCEP messages on behalf of peers as described in <xref
          target="reg_auth">Registration Authority</xref>. This section
          focuses on the requester that is obtaining certificates for its own
          use.</t>

          <t>Before a requester can start a PKI transaction, it MUST have at
          least one RSA key pair use for signing the <xref
          target="signeddata">SCEP pkiMessage</xref>.</t>

          <t>The requester MUST use RSA keys for all symmetric key operations.
          (The message types, being based on <xref
          target="RFC2315">PKCS#7</xref>, fully support algorithm
          agility).</t>

          <t>A requester MUST have the following information locally
          configured:</t>

          <t><list style="numbers">
              <t>The Certification Authority IP address or fully qualified
              domain name</t>

              <t>The Certification Authority HTTP CGI script path</t>

              <t>The identifying information that is used for authentication
              of the Certification Authority in <xref
              target="getcacertresp"></xref>. This information MAY be obtained
              from the user, or presented to the end user for manual
              authorization during the protocol exchange (e.g. the user
              indicates acceptance of a fingerprint via a user-interface
              element).</t>
            </list></t>

          <t>The requester MUST have MESSAGE information configured if the
          Certification Authority requires it (see <xref
          target="sceptransport_get"></xref>).</t>

          <t>The requester MAY maintain multiple independent configurations
          appropriate for multiple Certification Authorities. Doing so does
          not effect the protocol operation and is not in scope of this
          document.</t>

          <t>Certificate requests for certificates whose purpose is a specific
          solution are encouraged to conform to the solution's profile, e.g.
          <xref target="RFC4945"></xref> section 5 for IKE/IPsec
          certificates.</t>
        </section>

        <section anchor="certauth" title="Certification Authority">
          <t>An SCEP Certification Authority (CA) is the entity that signs
          client certificates. The CAs name appears in the issuer field of
          resulting certificates.</t>

          <t>Before any PKI operations can occur, the SCEP CA server obtains a
          'CA' certificate that matches the profile in <xref
          target="RFC5280"></xref>. This MAY be a CA certificate that was
          issued by a higher level CA.</t>

          <t>The SCEP server CA certificate MUST be provided out-of-band to
          the SCEP requester. The CA certificate fingerprint MAY be used to
          authenticate a CA Certificate distributed by the <xref
          target="getcacertresp">GetCACert response</xref>. The fingerprint is
          created by calculating a SHA-1, SHA-256, SHA-512, or MD5 hash on the
          whole CA certificate.</t>

          <t>The certification authority MUST either include a
          cRLDistributionPoint extension in every certificate it issues or
          answer CRL queries itself, in which case it SHOULD be online at all
          times. The certification authority SHOULD either answer certificate
          queries or make certificates available via LDAP.</t>

          <t>A certification authority may enforce any arbitrary policies,
          including name uniqueness policies, and apply them to certification
          requests. The certification authority MAY reject any request. If the
          client has already been issued a certificate for this keypair the
          server MAY return the previously created certificate. The requester
          MUST NOT assume any of the fields in the certification request,
          except for the public key, will be the same in the certificate
          issued.</t>

          <t>If a client times out from polling for a pending request it can
          resynchronize by reissuing the original request with the original
          subject name, key, and transaction ID. The CA SHOULD return the
          status of the original transaction, including the certificate if it
          was granted. The CA SHOULD NOT create a new transaction unless the
          original certificate has been revoked, or the transaction arrives
          more than halfway through the validity period of the original
          certificate.</t>
        </section>

        <section anchor="reg_auth" title="Registration Authority">
          <t>An SCEP Registration Authority (RA) is an SCEP server that
          performs validation and authorization checks of the SCEP requester
          but forwards the certification requests to the CA. The RAs name does
          not appear in the issuer field of resulting certificates.</t>

          <t>The RA MUST return the RA certificate, in addition to the CA
          certificate, in the GetCACert Response (see <xref
          target="cararesp"></xref>). The existence of an RA certificate in
          this response indicates to the client that an RA is in use. In order
          to securely communicate with an RA using <xref
          target="pkcs7_transport">SCEP Secure Message Objects</xref> the
          client MUST use the RA's keys instead of the CA's keys to sign the
          messages.</t>

          <t>In order to service certification requests the RA must pass the
          requests to the CA server for signing. The RA MAY use SCEP to
          communicate with the CA, in which case the RA acts as both an SCEP
          server (between the client and the RA) and an SCEP requester
          (between the RA and the CA). The RA MAY respond to client
          certificate requests with a PENDING response while communicating
          with the CA; for example if the CA must manually authorize a
          certification request and thus returns PENDING to the RA the RA may
          respond with PENDING to the client while polling the CA.</t>

          <t>Communication between the RA and the CA MAY be over other
          protocols such as <xref target="RFC5272">Certificate Management over
          CMS</xref>.</t>
        </section>
      </section>

      <section anchor="req_auth" title="Requester authentication">
        <t>As with every protocol that uses public-key cryptography, the
        association between the public keys used in the protocol and the
        identities with which they are associated must be authenticated in a
        cryptographically secure manner. This requirement is needed to prevent
        a "man-in-the-middle" attack, in which an adversary can manipulate the
        data as it travels between the protocol participants and subvert the
        security of the protocol.</t>

        <t>The communication between the requester and the certification
        authority are secured using <xref target="pkcs7_transport">SCEP Secure
        Message Objects</xref> which specifies how <xref
        target="RFC2315">PKCS#7</xref> is used to encrypt and sign the data.
        In order to perform the signing operation the client uses an
        appropriate local certificate:</t>

        <t><list style="numbers">
            <t>If the requesting system already has a certificate issued by
            the SCEP server, and the server supports RENEWAL (see <xref
            target="cacaps"></xref>), that certificate SHOULD be used.</t>

            <t>If the requesting system has no certificate issued by the new
            CA, but has credentials from an alternate CA the certificate
            issued by the alternate CA MAY be used. Policy settings on the new
            CA will determine if the request can be accepted or not. This is
            useful when enrolling with a new administrative domain; by using a
            certificate from the old domain as credentials.</t>

            <t>If the requester does not have an appropriate existing
            certificate, then a locally generated self-signed certificate MUST
            be used instead. The self-signed certificate MUST use the same
            subject name as in the PKCS#10 request.</t>
          </list>During the certificate enrollment, the requester MUST use the
        selected certificate to sign the <xref target="RFC2315">PKCS#7</xref>
        (see <xref target="pkcs7_transport"></xref>). The server CertResp uses
        this signing certificate when encrypting the response (see <xref
        target="certrep"></xref>).</t>

        <t>When the certification authority creates the <xref
        target="RFC2315">PKCS#7</xref> envelope on the issued certificate, it
        SHOULD use the public key, issuer name, and serial number conveyed in
        the above included certificate. This will inform the end entity of
        which private key should be used to open the envelope. Note that when
        a client enrolls for separate encryption and signature certificates,
        it MAY use the signature certificate to sign both requests, and then
        expect its signature key to be used to encrypt both responses. In any
        case, the RecipientInfo on the envelope MUST reflect the key used to
        encrypt the request.</t>
      </section>

      <section anchor="enrollment_authz" title="Enrollment authorization">
        <t>There are two mechanisms for automated enrollment
        authorization.</t>

        <t>Since the client uses an existing certificate to sign SCEP messages
        the server MAY use this certificate to authenticate the client and
        determine the appropriate authorization. In addition to the policy
        requirements implied by optional support of RENEWAL, see <xref
        target="cert_renew"></xref>, the SCEP server SHOULD implement
        appropriate logic to support client authentication and automated
        enrollment using existing client credentials that were issued by an
        alternate PKI hierarchy.</t>

        <t>Additionally <xref target="RFC2986">PKCS#10</xref> specifies the
        use of a <xref target="RFC2985">PKCS#9</xref> challengePassword
        attribute to be sent as part of the enrollment request. SCEP
        optionally uses this challengePassword to allow for unauthenticated
        authorization of enrollment requests. The <xref
        target="RFC2315">PKCS#7</xref> envelope protects the privacy of the
        challenge password.</t>

        <t>When utilizing the challengePassword, the server distributes a
        shared secret to the requester which will uniquely associate the
        enrollment request with the requester. The distribution of the secret
        must be private: only the end entity should know this secret. If a
        challengePassword is provided by the CA operator the client SHOULD use
        this in the certification request. The actual binding mechanism
        between the requester and the secret is subject to the server policy
        and implementation. . The requester MAY use any of the requester
        authentication mechanisms to provide additional authentication
        material, although the server MAY ignore everything but the
        challengePassword.</t>

        <t>In the manual mode the requester's messages wait, or are placed in
        the PENDING state, until the CA operator authorizes or rejects them.
        Manual authorization is used when the client has only a self-signed
        certificate and/or a challengePassword is not available..</t>

        <t>The requester generates a SHA-1, SHA-256, SHA-512, or MD5
        'fingerprint' of the <xref target="RFC2986">PKCS#10</xref> (before
        <xref target="RFC2315">PKCS#7</xref> enveloping and signing). This
        fingerprint is sent to the CA operator using an out-of-band method.
        The CA operator MUST compared this fingerprint to a locally generated
        fingerprint based on the message received during the SCEP
        exchange.</t>

        <t>SCEP clients and CAs (or RAs, if appropriate) MUST support display
        of this fingerprint to the operator to enable this authorization
        method. The out-of-band distribution and comparison of fingerprints is
        not covered by this document.</t>
      </section>

      <section anchor="cara_dist" title="CA/RA Certificate Distribution">
        <t>If the CA and/or RA certificates have not previously been acquired
        by the requester in some other means, the requester MUST retrieve the
        CA/RA certificates before any <xref target="pkcs7_transport">PKI
        operation</xref> can be started.</t>

        <t>Since no public key has yet been exchanged between the requester
        and the CA/RA, the messages cannot be secured using <xref
        target="RFC2315">PKCS#7</xref>, and the data is instead transferred in
        the clear.</t>

        <t>If an RA is in use, a certificates-only <xref
        target="RFC2315">PKCS#7</xref> SignedData with a certificate chain
        consisting of both RA and CA certificates is returned. Otherwise the
        CA certificate itself is returned. The <xref
        target="scep_transport">transport protocol</xref> MUST indicate which
        one is returned.</t>

        <t>After the requester gets the CA certificate, it MUST authenticate
        the CA certificate by comparing the CA certificate fingerprint (see
        <xref target="certauth"></xref>) with the locally configured,
        out-of-band distributed, identifying information.</t>

        <t>Since the optional RA certificates are signed by the CA there is no
        need to authenticate them against the out-of-band data. Clients MUST
        verify the RA certificate signature before use during protocol
        exchanges. Clients MUST verify the authorization of the RA
        certificates. The authorization mechanism is specified by the CA
        administrator and is out of scope for this document.</t>

        <t>Because a long time can pass between queries from a requester to a
        CA/RA and because RA certificates can change at any time, it is
        recommended that a requester not store RA certificates. Instead, the
        requester SHOULD retrieve the CA/RA certificates before each
        operation.</t>
      </section>

      <section anchor="certenroll" title="Certificate Enrollment">
        <t>A requester starts an <xref target="pkcsreq">enrollment</xref>
        transaction by creating a certificate request using <xref
        target="RFC2986">PKCS#10</xref> and sends it to the CA/RA enveloped
        using the <xref target="pkcs7_transport">PKCS#7</xref>.</t>

        <t>It is up to local CA policy (and CA implementation) as to whether a
        certificate is granted automatically, or whether it is manually
        granted by the administrator. The challengePassword MAY be used to
        automatically authenticate the request.</t>

        <t>If the CA/RA returns a <xref target="certrep">CertRep</xref>
        message with status set to PENDING, the requester enters into polling
        mode by periodically sending a <xref
        target="getcertinitial">GetCertInitial</xref> PKI message to the
        CA/RA, until the CA/RA operator completes the manual authentication
        (approving or denying the request).</t>

        <t>In general, the requester will send a single <xref
        target="pkcsreq">PKCSReq</xref> message, followed by 0 or more <xref
        target="getcertinitial">GetCertInitial</xref> messages, if polling
        mode is entered.</t>

        <t>In general, the CA/RA will send 0 or more <xref
        target="certrep">CertRep</xref> messages with status set to PENDING,
        followed by a single <xref target="certrep">CertRep</xref> with status
        set to either SUCCESS or FAILURE.</t>

        <section title="Client State Transitions">
          <t>The requester state transitions during enrollment operation are
          indicated in <xref target="statetransdiag"></xref>.</t>

          <figure anchor="statetransdiag" title="State Transition Diagram">
            <artwork><![CDATA[                      GetCertInitial
                        +----<---+ 
                        |        | CertRep(PENDING),
                        |        | GetCertInitial send-timeout, 
                        |        | new-poll timer
                        |        | 
[CERT-NONEXISTANT] -----+---> [CERT-REQ-PENDING]      [CERT-ISSUED]
      ^             PKCSReq      |          |               ^
      |                          |          |               |
      |                          |          +---------------+
      |                          |           CertRep(SUCCESS)
      +--------------------------+
      CertRep(FAILURE),
      PKCSReq send-timeout,      
      max-time/max-polls exceeded]]></artwork>
          </figure>

          <t>Certificate enrollment starts at the state CERT-NONEXISTANT.</t>

          <t>Sending a PKCSReq message changes the state to CERT-REQ-PENDING.
          If there is no response, or sending is not possible, the state
          reverts back to CERT-NONEXISTANT.</t>

          <t>Receiving a CertRep message with pkiStatus set to SUCCESS changes
          the state to CERT-ISSUED.</t>

          <t>Receiving a CertRep message with pkiStatus set to FAILURE changes
          the state to CERT-NONEXISTANT.</t>

          <t>If the server sends back a CertRep message with pkiStatus set to
          PENDING, the requester will keep polling by sending a GetCertInitial
          message to the server, until either a CertRep message with status
          set to SUCCESS or FAILURE is received, or the maximum number of
          polls has been exceeded.</t>

          <t>If the maximum number of polls has been exceeded or a CertRep
          message with pkiStatus set to FAILURE is received while in the
          CERT-REQ-PENDING state, the end entity will transition to the
          CERT-NONEXISTANT state, and the SCEP client can eventually initiate
          another enrollment request. It is important to note that, as long as
          the requester does not change its subject name or keys, the same
          transaction ID will be used in the "new" transaction. This is
          important because based on this transaction ID, the certification
          authority can recognize this as an existing transaction instead of a
          new one.</t>

          <figure anchor="successauto" title="Automatic mode transaction">
            <preamble>A successful transaction in automatic mode:</preamble>

            <artwork><![CDATA[         REQUESTER                           CA SERVER      

     PKCSReq: PKI cert. enrollment msg
     --------------------------------> CertRep: pkiStatus = SUCCESS
                                       certificate attached
                                      <------------------------------
     Receive issued certificate. ]]></artwork>
          </figure>

          <figure anchor="successmanual" title="Manual mode transaction">
            <preamble>A successful transaction in manual mode:</preamble>

            <artwork><![CDATA[         REQUESTER                           CA SERVER 
     PKCSReq: PKI cert. enrollment msg 
     --------------------------------> CertRep: pkiStatus = PENDING 
                                       <------------------------------
     GetCertInitial: polling msg 
     --------------------------------> CertRep: pkiStatus = PENDING 
                                       <------------------------------
     ................ <manual identity authentication>...............
  
     GetCertInitial: polling msg 
     --------------------------------> CertRep: pkiStatus = SUCCESS
                                       certificate attached
                                       <------------------------------
     Receive issued certificate. ]]></artwork>
          </figure>
        </section>
      </section>

      <section anchor="cert_access" title="Certificate Access">
        <t>There are two methods to query certificates. The first method is to
        use LDAP as a query protocol. Using LDAP to query assumes the client
        understands the LDAP scheme supported by the CA. The SCEP client
        assumes that the subject DN in the certificate is used as the URL to
        query the certificate. The standard attributes (userCertificate and
        caCertificate) are used as filter.</t>

        <t>For the environment where LDAP is not available, a certificate
        query message is defined to retrieve the certificates from the CA.</t>

        <t>To query a certificate from the certification authority, a
        requester sends a request consisting of the certificate's issuer name
        and serial number. This assumes that the requester has saved the
        issuer name and the serial number of the issued certificate from the
        previous enrollment transaction. The transaction to query a
        certificate consists of one <xref target="getcert">GetCert</xref>
        message and one <xref target="certrep">CertRep</xref> message, as
        shown in <xref target="getcertdiag"></xref>.</t>

        <figure anchor="getcertdiag" title="GetCert Transaction">
          <artwork><![CDATA[        REQUESTER                           CA SERVER 
     GetCert: PKI certificate query msg 
     -------------------------------> CertRep:  pkiStatus = SUCCESS
                                      certificate attached
                                      <-----------------------------
     Receive the certificate.]]></artwork>
        </figure>
      </section>

      <section anchor="crl_access" title="CRL Access">
        <t>SCEP clients request a CRL via one of two methods:</t>

        <t><list style="numbers">
            <t>If the CA supports <xref target="RFC5280">CRL Distribution
            Points</xref> (section 4.2.1.13), then the CRL MUST be retrieved
            via the mechanism specified in the CDP.</t>

            <t>If the CA does not support CDP's, a CRL query is composed by
            creating a GetCRL message consisting of the issuer name and serial
            number from a certificate within the scope of the CRL to be
            retrieved (e.g. from a certificate to be validated).</t>
          </list></t>

        <t>The server SHOULD NOT support the GetCRL method because:<list
            style="symbols">
            <t>it does not scale well due to the unnecessary cryptography
            (see, <xref target="unnecessarycrypto"></xref>)</t>

            <t>it requires the CA to be a high-availability service</t>

            <t>only limited information to determine the CRL scope is provided
            (see <xref target="RFC5280"></xref> Section 5).</t>
          </list></t>

        <t>The message is sent to the SCEP server in the same way as the other
        SCEP requests: The transaction to retrieve a CRL consists of one
        GetCRL PKI message and one CertRep PKI message, which contains only
        the CRL (no certificates), as shown in <xref
        target="getcrldiag"></xref>.</t>

        <t>On receipt of this message, the SCEP server MAY use the
        IssuerAndSerial information to return an appropriate CRL.</t>

        <figure anchor="getcrldiag" title="GetCRL Transaction">
          <artwork><![CDATA[
         REQUESTER                           CA SERVER 
     GetCRL: PKI CRL query msg 
  ---------------------------------->
                                    CertRep:  CRL attached 
                                 <-------------------------------- ]]></artwork>
        </figure>
      </section>

      <section anchor="certrevoke" title="Certificate Revocation">
        <t>SCEP does not specify a method to request certificate
        revocation.</t>

        <t>In order to revoke a certificate, the requester must contact the CA
        server operator using a non-SCEP defined mechanism. Although the <xref
        target="RFC2986"> PKCS#10</xref> challengePassword is used by SCEP for
        enrollment authorization (see <xref
        target="enrollment_authz">Enrollment authorization</xref>) this does
        not inhibit the CA server from maintaining a record of the
        challengePassword to use during subsequent revocation operations as
        implied by <xref target="RFC2985"></xref>.</t>
      </section>
    </section>

    <section anchor="pkcs7_transport" title="SCEP Secure Message Objects">
      <t><xref target="RFC2315">PKCS#7</xref> is a general enveloping
      mechanism that enables both signed and encrypted transmission of
      arbitrary data.</t>

      <t>All messages MUST be valid <xref target="RFC2315">PKCS#7</xref>
      structures, unless otherwise noted.</t>

      <t>SCEP messages that require confidentiality use two layers of PKCS#7,
      as shown in <xref target="pkcspic"></xref>. By applying both enveloping
      and signing transformations, the SCEP message is protected both for the
      integrity of its end-to-end transaction information and the
      confidentiality of its information portion. The advantage of this
      technique over the conventional transaction message format is that the
      signed transaction type information and the status of the transaction
      can be determined prior to invoking security handling procedures
      specific to the information portion being processed.</t>

      <t>Some messages do not require enveloping, in which case the
      EnvelopedData in <xref target="pkcspic"></xref> is omitted.</t>

      <figure anchor="pkcspic" title="PKCS#7 Layering">
        <preamble></preamble>

        <artwork><![CDATA[ ContentType = SignedData (called pkiMessage)
   SignerInfo
      Signature
      authenticatedAttributes
         transactionID
         messageType
         pkiStatus
         failInfo
         senderNonce
         recipientNonce
         etc
   ContentInfo type = EnvelopedData (called pkcsPKIEnvelope; optional)
      RecipientInfo
      ContentInfo type = Data
         messageData]]></artwork>
      </figure>

      <t>Description:<list style="symbols">
          <t>The outer PKCS#7 is a <xref
          target="signeddata">pkiMessage</xref>.</t>

          <t>The SignedData ContentInfo, if present (e.g. FAILURE and PENDING
          CertRep messages will lack any signed content), MUST be a <xref
          target="envelope">pkcsPKIEnvelope</xref>.</t>
        </list>When a particular SCEP message carries data, this data is
      carried in the messageData.</t>

      <t>Note: The remainder of this document will refer only to
      'messageData', but it is understood to always be encapsulated in the
      <xref target="envelope">pkcsPKIEnvelope</xref>. The format of the data
      in the messageData is defined by the messageType attribute (see <xref
      target="signedAttributes"></xref>) of the SignedData. If there is no
      messageData to be transmitted, the entire pkcsPKIEnvelope MUST be
      omitted.</t>

      <section anchor="signeddata" title="SCEP pkiMessage">
        <t>The basic building block of all secured SCEP messages is the SCEP
        pkiMessage. It consists of an PKCS#7 signed-data content type, as
        defined in <xref target="RFC2315">PKCS#7</xref> Section 9. The
        following restrictions apply:</t>

        <t><list style="symbols">
            <t>version MUST be 1</t>

            <t>the contentType in contentInfo MUST be data ({pkcs-7 1}) as
            defined in <xref target="RFC2315">PKCS#7</xref> Section 8.</t>

            <t>The signed content, if present (e.g. FAILURE and PENDING
            CertRep messages will lack any signed content), MUST be a <xref
            target="envelope">pkcsPKIEnvelope</xref>, and must match the
            messageType attribute.</t>

            <t>The SignerInfo MUST contain a set of authenticatedAttributes
            (see <xref target="RFC2315">PKCS#7</xref> Section 9.2 as well as
            <xref target="signedAttributes"></xref> in this document). All
            messages MUST contain<list style="symbols">
                <t>an SCEP transactionID attribute</t>

                <t>an SCEP messageType attribute</t>

                <t>an SCEP senderNonce attribute</t>

                <t>any attributes required by <xref
                target="RFC2315">PKCS#7</xref> section 9.2</t>
              </list>If the message is a response, it MUST also include <list
                style="symbols">
                <t>an SCEP pkiStatus attribute</t>

                <t>an SCEP recipientNonce attribute</t>
              </list></t>
          </list></t>

        <section anchor="signedAttributes"
                 title="Signed Transaction Attributes">
          <t>The following transaction attributes are encoded as authenticated
          attributes, and are carried, as specified in <xref
          target="RFC2315">PKCS#7</xref> Section 9.2, in the SignerInfo for
          this signedData.</t>

          <t>Please refer to <xref target="oiddef"></xref> for the OID
          definitions.</t>

          <texttable title="Transaction Attributes">
            <ttcol>Attribute</ttcol>

            <ttcol>Encoding</ttcol>

            <ttcol>Comment</ttcol>

            <c>transactionID</c>

            <c>PrintableString</c>

            <c>Hash value as a string</c>

            <c>messageType</c>

            <c>PrintableString</c>

            <c>Decimal value as a string</c>

            <c>pkiStatus</c>

            <c>PrintableString</c>

            <c>Decimal value as a string</c>

            <c>failInfo</c>

            <c>PrintableString</c>

            <c>Decimal value as a string</c>

            <c>senderNonce</c>

            <c>OCTET STRING</c>

            <c></c>

            <c>recipientNonce</c>

            <c>OCTET STRING</c>

            <c></c>
          </texttable>

          <t>The attributes are detailed in the following sections.</t>

          <section anchor="transactID" title="transactionID">
            <t>A PKI operation is a transaction consisting of the messages
            exchanged between a requester and the server. The transaction
            identifier is a string generated by the client when starting a
            transaction. The client MUST generate a unique string as the
            transaction identifier, which MUST be used for all PKI messages
            exchanged for a given enrollment, encoded as a
            PrintableString.</t>

            <t>The transaction identifier SHOULD be generated as a SHA-1,
            SHA-256, SHA-512 or MD5 hash on the public key value for which the
            enrollment request is made. This allows the SCEP client to
            automatically generate the same transaction id for any given
            keypair. The SCEP protocol requires that transaction identifiers
            be unique, so that subsequent polling queries can be matched with
            previous transactions. Thus, if separate signing and encryption
            certificates are requested by the client the keys must be
            different.</t>

            <t>When using the certificate query and CRL query messages defined
            in this protocol, the transaction identifier is still required so
            that the requester can match the response message with the
            outstanding request message. When using LDAP to query the
            certificate and the CRL, the behavior is specified by the LDAP
            protocol. For a non-enrollment message (for example GetCert and
            GetCRL), the transactionID SHOULD be a number unique to the
            client.</t>
          </section>

          <section anchor="messType" title="messageType">
            <t>The messageType attribute specifies the type of operation
            performed by the transaction. This attribute MUST be included in
            all PKI messages. Currently, the following message types are
            defined:</t>

            <t><list style="symbols">
                <t>PKCSReq (19) -- <xref target="RFC2986">PKCS#10</xref>
                certificate request</t>

                <t>CertRep (3) -- Response to certificate or CRL request</t>

                <t>GetCertInitial (20) -- Certificate polling in manual
                enrollment</t>

                <t>GetCert (21) -- Retrieve a certificate</t>

                <t>GetCRL (22) -- Retrieve a CRL</t>
              </list></t>
          </section>

          <section anchor="pkiStatus" title="pkiStatus">
            <t>All response messages MUST include transaction status
            information, which is defined as pkiStatus attribute:</t>

            <t><list style="symbols">
                <t>SUCCESS (0) -- request granted</t>

                <t>FAILURE (2) -- request rejected. When pkiStatus is FAILURE,
                the failInfo attribute, as defined in <xref
                target="failInfo"></xref>, MUST also be present.</t>

                <t>PENDING (3) -- request pending for manual approval</t>
              </list></t>
          </section>

          <section anchor="failInfo" title="failInfo">
            <t>The failInfo attribute MUST contain one of the following
            failure reasons:</t>

            <t><list style="symbols">
                <t>badAlg (0) -- Unrecognized or unsupported algorithm
                identifier</t>

                <t>badMessageCheck (1) -- integrity check failed</t>

                <t>badRequest (2) -- transaction not permitted or
                supported</t>

                <t>badTime (3) -- The signingTime attribute from the PKCS#7
                authenticatedAttributes was not sufficiently close to the
                system time (see <xref target="signingTime"></xref>).</t>

                <t>badCertId (4) -- No certificate could be identified
                matching the provided criteria</t>
              </list></t>
          </section>

          <section anchor="nonces" title="senderNonce and recipientNonce">
            <t>The attributes of senderNonce and recipientNonce are 16 byte
            random numbers generated for each transaction to prevent replay
            attacks.</t>

            <t>When a requester sends a PKI message to the server, a
            senderNonce MUST be included in the message.</t>

            <t>The recipient SHOULD copy the senderNonce into the
            recipientNonce of the reply as a proof of liveliness.</t>

            <t>The requester SHOULD verify that the recipientNonce of the
            reply matches the senderNonce it sent in the request.</t>
          </section>

          <section anchor="signingTime" title="signingTime Attribute">
            <t>The signingTime Attribute is defined in <xref
            target="RFC2985"></xref> Section 5.3.3, and is carried as defined
            in a <xref target="RFC2315"></xref> authenticated attribute
            (Section 9.2). This attribute is optional.</t>
          </section>
        </section>

        <section anchor="envelope" title="SCEP pkcsPKIEnvelope">
          <t>The information portion of a SCEP message is carried inside an
          enveloped-data content type, as defined in <xref
          target="RFC2315">PKCS#7</xref> Section 10, with the following
          restrictions:</t>

          <t><list style="symbols">
              <t>version MUST be 0</t>

              <t>contentType in encryptedContentInfo MUST be data ({pkcs-7 1})
              as defined in <xref target="RFC2315">PKCS#7</xref> Section
              8.</t>

              <t>encryptedContent MUST be the SCEP message being transported
              (see <xref target="scepmessages"></xref>), and must match the
              messageType authenticated Attribute in the pkiMessage.</t>
            </list>The <xref target="RFC2315">PKCS#7</xref> content-encryption
          key (see Section 10, step 2) is encrypted using the public key of
          the recipient of the message, i.e. the RA or the CA public key (if
          sent from the requester), or the requester public key (if sent as a
          reply to the requester).</t>
        </section>
      </section>

      <section title="SCEP pkiMessage types">
        <t>All of the messages in this section are <xref
        target="signeddata">pkiMessages</xref>, where the type of the message
        MUST be specified in the 'messageType' authenticated Attribute. Each
        section defines a valid message type, the corresponding messageData
        formats, and mandatory authenticated attributes for that type.</t>

        <section anchor="pkcsreq" title="PKCSReq">
          <t>The messageData for this type consists of a DER-encoded <xref
          target="RFC2986">PKCS#10 Certification Request</xref>. The
          certification request MAY contain any fields defined in <xref
          target="RFC2986">PKCS#10</xref>, and MUST contain at least the
          following items:<list style="symbols">
              <t>the subject Distinguished Name</t>

              <t>the subject public key</t>

              <t>a challengePassword attribute. The Challenge Password may be
              used to (out-of-band) authenticate the enrollment request
              itself, or in an out-of-band revocation request for the issued
              certificate.</t>
            </list>In addition to the authenticatedAttributes required for a
          valid <xref target="RFC2315">PKCS#7</xref>, this pkiMessage MUST
          include the following attributes:<list style="symbols">
              <t>a <xref target="transactID">transactionID</xref>
              attribute</t>

              <t>a <xref target="messType">messageType</xref> attribute set to
              PKCSReq</t>

              <t>a <xref target="nonces">senderNonce</xref> attribute</t>
            </list>The pkcsPKIEnvelope for this message type is protected
          using the public key of the recipient as detailed in <xref
          target="envelope"></xref>. For example the CA or RA public key.</t>
        </section>

        <section anchor="certrep" title="CertRep">
          <t>The messageData for this type consists of a DER-encoded <xref
          target="degeneratep7">degenerate certificates-only
          Signed-data</xref>. The exact contents required for certain CertRep
          replies depends on the type of request this message is a reply to
          and is detailed in <xref target="certreptypes"></xref> and in <xref
          target="scepmessages"></xref>.</t>

          <t>In addition to the authenticatedAttributes required for a valid
          <xref target="RFC2315">PKCS#7</xref>, this pkiMessage MUST include
          the following attributes:<list style="symbols">
              <t>the <xref target="transactID">transactionID</xref> attribute
              copied from the request we are responding to</t>

              <t>a <xref target="messType">messageType</xref> attribute set to
              CertRep</t>

              <t>a <xref target="nonces">senderNonce</xref> attribute</t>

              <t>a <xref target="nonces">recipientNonce attribute</xref>
              copied from the senderNonce from the request we are responding
              to.</t>

              <t>a <xref target="pkiStatus">pkiStatus</xref> set to the status
              of the reply.</t>
            </list></t>

          <t>The pkcsPKIEnvelope for this message type is protected using the
          public key of the recipient as detailed in <xref
          target="envelope"></xref>. For example if a self-signed certificate
          was used to send the original request then this self-signed
          certificate's public key is used to encrypt the content-encryption
          key of the SUCCESS response's pkcsPKIEnvelope.</t>

          <section title="CertRep SUCCESS">
            <t>When the pkiStatus attribute is set to SUCCESS, the messageData
            for this message consists of a DER-encoded <xref
            target="degeneratep7">degenerate certificates-only
            Signed-data</xref>. The contents of this degenerate
            certificates-only Signed-Data depends on what the original request
            was, as outlined in <xref target="certreptypes"></xref>.</t>

            <texttable anchor="certreptypes" title="CertRep Types">
              <ttcol>Request-type</ttcol>

              <ttcol>Reply-contents</ttcol>

              <c>PKCSReq</c>

              <c>the reply MUST contain at least the issued certificate in the
              certificates field of the Signed-Data. The reply MAY contain
              additional certificates, but the issued certificate MUST be the
              first in the list. The reply MUST NOT contain any CRL's. All
              returned certificates MUST conform to <xref
              target="RFC5280"></xref>.</c>

              <c>GetCertInitial</c>

              <c>same as PKCSReq</c>

              <c>GetCert</c>

              <c>the reply MUST contain at least the requested certificate in
              the certificates field of the Signed-Data. The reply MAY contain
              additional certificates, but the requested certificate MUST be
              the first in the list. The reply MUST NOT contain any CRL's. All
              returned certificates MUST conform to <xref
              target="RFC5280"></xref>.</c>

              <c>GetCRL</c>

              <c>the reply MUST contain the CRL in the crls field of the
              Signed-Data. The reply MUST NOT contain any certificates. The
              CRL MUST be a valid CRL according to <xref
              target="RFC5280"></xref>.</c>
            </texttable>
          </section>

          <section title="CertRep FAILURE">
            <t>When the pkiStatus attribute is set to FAILURE, the reply MUST
            also contain a <xref target="failInfo">failInfo</xref> attribute
            set to the appropriate error condition describing the failure. The
            <xref target="envelope">pkcsPKIEnvelope</xref> MUST be
            omitted.</t>
          </section>

          <section title="CertRep PENDING">
            <t>When the pkiStatus attribute is set to PENDING, the <xref
            target="envelope">pkcsPKIEnvelope</xref> MUST be omitted.</t>
          </section>
        </section>

        <section anchor="getcertinitial" title="GetCertInitial">
          <t>The messageData for this type consists of a DER-encoded <xref
          target="issuerandsubject">IssuerAndSubject</xref>. The issuer is set
          to the issuerName from the certification authority from which we are
          issued certificates. The Subject is set to the SubjectName we used
          when requesting the certificate.</t>

          <t>In addition to the authenticatedAttributes required for a valid
          <xref target="RFC2315">PKCS#7</xref>, this pkiMessage MUST include
          the following attributes:<list style="symbols">
              <t>the same <xref target="transactID">transactionID</xref>
              attribute from original PKCSReq message</t>

              <t>a <xref target="messType">messageType</xref> attribute set to
              GetCertInitial</t>

              <t>a <xref target="nonces">senderNonce</xref> attribute</t>
            </list></t>

          <section anchor="issuerandsubject" title="IssuerAndSubject">
            <t>Similar to the IssuerAndSerial defined in <xref
            target="RFC2315">PKCS#7</xref> Section 6.7, we need to define an
            <xref target="issuerandsubjectpic">IssuerAndSubject ASN.1
            type</xref>.</t>

            <figure anchor="issuerandsubjectpic"
                    title="IssuerAndSubject ASN.1">
              <preamble>The ASN.1 definition of the issuerAndSubject type is
              as follows:</preamble>

              <artwork><![CDATA[issuerAndSubject ::= SEQUENCE { 
    issuer Name,
    subject Name 
}]]></artwork>
            </figure>
          </section>
        </section>

        <section anchor="getcert" title="GetCert">
          <t>The messageData for this type consists of a DER-encoded
          IssuerAndSerial as defined in <xref target="RFC2315">PKCS#7</xref>
          Section 6.7 containing the "distinguished name of the certificate
          issuer and an issuer-specific certificate serial number" which
          uniquely identifies the certificate being requested.</t>

          <t>In addition to the authenticatedAttributes required for a valid
          <xref target="RFC2315">PKCS#7</xref>, this pkiMessage MUST include
          the following attributes:<list style="symbols">
              <t>a <xref target="transactID">transactionID</xref>
              attribute</t>

              <t>a <xref target="messType">messageType</xref> attribute set to
              GetCert</t>

              <t>a <xref target="nonces">senderNonce</xref> attribute</t>
            </list>A self-signed certificate MAY be used in the signed
          envelope. This enables the requester to request their own
          certificate if they were unable to store it previously.</t>
        </section>

        <section anchor="getcrl" title="GetCRL">
          <t>The messageData for this type consists of a DER-encoded
          IssuerAndSerial as defined in <xref target="RFC2315">PKCS#7</xref>
          Section 6.7 the issuer name and serial number from the certificate
          to be validated.</t>

          <t>In addition to the authenticatedAttributes required for a valid
          <xref target="RFC2315">PKCS#7</xref>, this pkiMessage MUST include
          the following attributes:<list style="symbols">
              <t>a <xref target="transactID">transactionID</xref>
              attribute</t>

              <t>a <xref target="messType">messageType</xref> attribute set to
              GetCRL</t>

              <t>a <xref target="nonces">senderNonce</xref> attribute</t>
            </list></t>
        </section>
      </section>

      <section anchor="degeneratep7"
               title="Degenerate certificates-only PKCS#7 Signed-data">
        <t><xref target="RFC2315"></xref> section 9 includes a degenerate case
        of the PKCS#7 Signed-data content type, in which there are no signers.
        The use of such a degenerate case is to disseminate certificates and
        certificate-revocation lists. For SCEP the content field of the
        ContentInfo value of a degenerate certificates-only Signed-Data MUST
        be omitted.</t>

        <t>When carrying certificates, the certificates are included in the
        'certificates' field of the Signed-Data. When carrying a CRL, the CRL
        will be included in the 'crls' field of the Signed-Data.</t>
      </section>
    </section>

    <section anchor="scepmessages" title="SCEP Transactions">
      <t>This section describes the SCEP Transactions, without explaining the
      transport. The transport of each message is discussed in <xref
      target="scep_transport"></xref>. Some of the transaction-requests have
      no data to send, i.e. the only data is the message-type itself (e.g. a
      GetCACert message has no additional data). The use of such messages will
      become clearer in <xref target="scep_transport"></xref>.</t>

      <t>In this section, each SCEP transaction is specified in terms of the
      complete messages exchanged during the transaction.</t>

      <t>The order of the transactions in this section is mirrored in <xref
      target="transportdetails"></xref> for better organization and
      readability.</t>

      <section anchor="getcacert" title="Get CA Certificate">
        <t>To get the CA certificate(s), the requester sends a GetCACert
        message to the server. There is no request data associated with this
        message (see <xref target="getcacerttrans"></xref>).</t>

        <section anchor="getcacertresp"
                 title="Get CA Certificate Response Message Format">
          <t>The response depends on whether the responding server has RA
          certificates or only a single CA certificate. The server MUST
          indicate which response it is sending via the transport protocol
          used (see <xref target="getcacerttrans"></xref>).</t>

          <t>All returned certificates MUST conform to <xref
          target="RFC5280"></xref>.</t>

          <t>Once the CA certificate is received by the requester (regardless
          of the presence of RA certificates), a fingerprint is generated
          using the SHA1, SHA256, SHA512 or MD5 hash algorithm on the whole CA
          certificate. If the requester does not have a certificate path to a
          trusted CA certificate, this fingerprint may be used to verify the
          certificate, by some positive out-of-band means, such as a phone
          call or pre-provisioning.</t>

          <section anchor="getcarespca"
                   title="CA Certificate Response Message Format">
            <t>If the server is a certification authority and does not have
            any RA Certificates, the response consists of a single DER-encoded
            X.509 CA certificate.</t>
          </section>

          <section anchor="getcarespcara"
                   title="CA/RA Certificate Response Message Format">
            <t>If the server has RA Certificates, the response consists of a
            DER-encoded <xref target="degeneratep7">degenerate
            certificates-only Signed-data</xref> containing the CA certificate
            and RA certificates.</t>
          </section>
        </section>
      </section>

      <section title="Certificate Enrollment">
        <t>A <xref target="pkcsreq">PKCSReq</xref> message is used to perform
        a certificate enrollment transaction.</t>

        <t>The reply MUST be a <xref target="certrep">CertRep</xref> message
        sent back from the server, indicating SUCCESS, FAILURE, or
        PENDING.</t>

        <t>Precondition: Both the requester and the certification authority
        have completed their initialization process. The requester has already
        been configured with the CA/RA certificate.</t>

        <t>Postcondition: Either the certificate is received by the requester,
        or the end entity is notified to do the manual authentication, or the
        request is rejected.</t>

        <section anchor="certEnrollResp"
                 title="Certificate Enrollment Response Message">
          <t>If the request is granted, a <xref
          target="certrep">CertRep</xref> message with pkiStatus set to
          SUCCESS is returned. The reply MUST also contain the certificate
          (and MAY contain any other certificates needed by the requester).
          The issued certificate MUST be the first in the list.</t>

          <t>If the request is rejected, a <xref
          target="certrep">CertRep</xref> message with pkiStatus set to
          FAILURE is returned. The reply MUST also contain a failInfo
          attribute.</t>

          <t>If the the CA is configured to manually authenticate the
          requester, a <xref target="certrep">CertRep</xref> message with
          pkiStatus set to 'PENDING' MAY be returned.</t>
        </section>
      </section>

      <section anchor="getcertinitialtrans"
               title="Poll for Requester Initial Certificate">
        <t>Triggered by a <xref target="certrep">CertRep</xref> with pkiStatus
        set to PENDING, a requester will enter the polling state by
        periodically sending <xref
        target="getcertinitial">GetCertInitial</xref> to the server, until
        either the request is granted and the certificate is sent back, or the
        request is rejected, or the configured time limit for polling (or
        maximum number of polls) is exceeded.</t>

        <t>Since GetCertInitial is part of the enrollment, the messages
        exchanged during the polling period MUST carry the same transactionID
        attribute as the previous PKCSReq. A server receiving a GetCertInitial
        for which it does not have a matching PKCSReq MUST ignore this
        request.</t>

        <t>Since at this time the certificate has not been issued, the
        requester can only use its own subject name (which was contained in
        the original PKCS#10 sent via PKCSReq) to identify the polled
        certificate request. Since there can be multiple outstanding requests
        from one requester (for example, if different keys and different
        key-usages were used to request multiple certificates), the
        transaction ID must also be included, to disambiguate between multiple
        requests.</t>

        <t>PreCondition: The requester has received a CertRep with pkiStatus
        set to PENDING.</t>

        <t>PostCondition: The requester has either received a valid response,
        which could be either a valid certificate (pkiStatus = SUCCESS), or a
        FAILURE message, or the polling period times out.</t>

        <section anchor="getcertinitresp"
                 title="Polling Response Message Format">
          <t>The response messages for GetCertInitial are the same as in <xref
          target="certEnrollResp"></xref>.</t>
        </section>
      </section>

      <section anchor="getcerttrans" title="Certificate Access">
        <t>The certificate query message is an option when the LDAP server is
        not available to provide the certificate query. A requester should be
        able to query an issued certificate from the certification authority,
        as long as the issuer name and the issuer assigned certificate serial
        number is known to the requesting end entity. This transaction is not
        intended to provide the service as a certificate directory service. A
        more complicated query mechanism would have to be defined in order to
        allow a requester to query a certificate using various different
        fields.</t>

        <t>This transaction consists of one <xref
        target="getcert">GetCert</xref> message sent to the server by a
        requester, and one <xref target="certrep">CertRep</xref> message sent
        back from the server.</t>

        <t>PreCondition: The queried certificate have been issued by the
        certification authority and the issuer assigned serial number is
        known.</t>

        <t>PostCondition: Either the certificate is sent back or the request
        is rejected.</t>

        <section anchor="getcertresp"
                 title="Certificate Access Response Message Format">
          <t>In this case, the CertRep from the server is same as in <xref
          target="certEnrollResp"></xref>, except that the server will only
          either grant the request (SUCCESS) or reject the request
          (FAILURE).</t>
        </section>
      </section>

      <section anchor="getcrltrans" title="CRL Access">
        <t>Clients MAY request a CRL from the SCEP server as described in
        <xref target="crl_access"></xref>.</t>

        <t>PreCondition: The certification authority certificate has been
        downloaded to the end entity.</t>

        <t>PostCondition: CRL sent back to the requester.</t>

        <section anchor="getcrlresp"
                 title="CRL Access Response Message Format">
          <t>The CRL is sent back to the requester in a <xref
          target="certrep">CertRep</xref> message. The information portion of
          this message is a <xref target="degeneratep7">degenerate
          certificates-only Signed-data</xref> which contains only the most
          recent CRL in the crls field of the Signed-Data.</t>

          <t>The server MAY return any appropriate CRL.</t>
        </section>
      </section>

      <section title="Get Next Certification Authority Certificate">
        <t>When a CA certificate is about to expire, clients need to retrieve
        the CA's next CA certificate (i.e. the Rollover Certificate). This is
        done via the GetNextCACert message. There is no request data
        associated with this message (see <xref
        target="getnextcacerttrans"></xref>).</t>

        <section anchor="getnextcacertresp"
                 title="Get Next CA Response Message Format">
          <t>The response consists of a SignedData <xref
          target="RFC2315">PKCS#7</xref>, signed by the current CA (or RA)
          signing key.</t>

          <t>Clients MUST validate the signature on the the SignedData <xref
          target="RFC2315">PKCS#7</xref> before accepting any of its
          contents.</t>

          <t>The content of the SignedData <xref
          target="RFC2315">PKCS#7</xref> is a <xref
          target="degeneratep7">degenerate certificates-only
          Signed-data</xref> message containing the new CA certificate and any
          new RA certificates, as defined in <xref target="cararesp"></xref>,
          to be used when the current CA certificate expires.</t>

          <t>If the CA (or RA) does not have the Rollover certificate(s) it
          MUST reject the request. It SHOULD also remove the GetNextCACert
          setting from the capabilities until it does have rollover
          certificates.</t>

          <t>If there are any RA certificates in this response, clients MUST
          check that these RA certificates are signed by the CA, and MUST
          check authorization of these RA certificates (see <xref
          target="reg_auth"></xref>).</t>
        </section>
      </section>
    </section>

    <section anchor="scep_transport" title="SCEP Transport">
      <t>HTTP is used as the transport protocol for SCEP Message Objects.</t>

      <section anchor="sceptransport_get"
               title="HTTP &quot;GET&quot; Message Format">
        <t>SCEP uses the HTTP "GET" messages to request information from the
        CA. The following is the syntax definition of a HTTP GET message sent
        from a requester to a certification authority server:</t>

        <figure title="">
          <artwork><![CDATA["GET" CGI-PATH CGI-PROG "?operation=" OPERATION "&message=" MESSAGE]]></artwork>
        </figure>

        <t>where:</t>

        <t><list style="symbols">
            <t>CGI-PATH defines the actual CGI path to invoke the CGI program
            that parses the request.</t>

            <t>CGI-PROG is set to be the string "pkiclient.exe". This is
            intended to be the program that the CA will use to handle the SCEP
            transactions, though the CA may ignore CGI-PROG and use only the
            CGI-PATH.</t>

            <t>OPERATION depends on the SCEP transaction and is defined in the
            following sections.</t>

            <t>MESSAGE depends on the SCEP transaction and is defined in the
            following sections.</t>
          </list>If the CA supports it, requests may also be done via an HTTP
        POST. This is described in <xref target="postop"></xref>.</t>

        <section title="Response Message Format">
          <t>For each GET operation, the CA/RA server MUST return a
          Content-Type and appropriate response data, if any.</t>
        </section>
      </section>

      <section anchor="transportdetails" title="SCEP HTTP Messages">
        <t></t>

        <section anchor="getcacerttrans" title="GetCACert">
          <t>OPERATION MUST be set to "GetCACert".</t>

          <t>MESSAGE MAY be omitted, or it MAY be a string that represents the
          certification authority issuer identifier, if such has been set by
          the CA Administrator.</t>

          <section title="GetCACert Response">
            <t>The response for GetCACert is different between the case where
            the CA directly communicates with the requester during the
            enrollment, and the case where a RA exists and the requester
            communicates with the RA during the enrollment.</t>

            <section anchor="caresp" title="CA Certificate Only Response">
              <t>The response will have a Content-Type of
              "application/x-x509-ca-cert".</t>

              <t>The body of this response consists of a DER-encoded X.509 CA
              certificate, as defined in <xref
              target="getcarespca"></xref>.</t>

              <figure title="">
                <artwork><![CDATA["Content-Type:application/x-x509-ca-cert\n\n"<DER-encoded X.509>]]></artwork>
              </figure>
            </section>

            <section anchor="cararesp" title="CA and RA Certificates Response">
              <t>The response will have a Content-Type of
              "application/x-x509-ca-ra-cert".</t>

              <t>The body of this response consists of a DER-encoded <xref
              target="degeneratep7">degenerate certificates-only
              Signed-data</xref> containing both CA and RA certificates, as
              defined in <xref target="getcarespcara"></xref>.</t>

              <figure title="">
                <artwork><![CDATA["Content-Type:application/x-x509-ca-ra-cert\n\n"<DER-encoded PKCS7>]]></artwork>
              </figure>
            </section>
          </section>
        </section>

        <section anchor="pkcsreqhttp" title="PKCSReq">
          <t>OPERATION MUST be set to "PKIOperation".</t>

          <t>MESSAGE consists of a base64-encoded DER-encoded PKCSReq SCEP
          message.</t>

          <t>An example PKIOperation request might look as follows:</t>

          <figure title="">
            <artwork><![CDATA[GET /cgi-bin/pkiclient.exe?operation=PKIOperation&message=MIAGCSqGSIb3D
QEHA6CAMIACAQAxgDCBzAIBADB2MGIxETAPBgNVBAcTCE ......AAAAAA== HTTP/1.0]]></artwork>
          </figure>

          <section title="PKCSReq Response">
            <t>The response will have a Content-Type of
            "application/x-pki-message".</t>

            <t>The body of this response consists of a DER-encoded CertRep
            SCEP message defined in <xref target="certEnrollResp"></xref>. The
            following is an example of the response:</t>

            <figure title="">
              <artwork><![CDATA["Content-Type:application/x-pki-message\n\n"<DER-encoded CertRep msg>]]></artwork>
            </figure>
          </section>
        </section>

        <section title="GetCertInitial">
          <t>OPERATION MUST be set to "PKIOperation".</t>

          <t>MESSAGE consists of a base64-encoded DER-encoded GetCertInitial
          SCEP message.</t>

          <section title="GetCertInitial Response">
            <t>The body of this response consists of a DER-encoded CertRep
            SCEP message defined in <xref
            target="getcertinitresp"></xref>.</t>
          </section>
        </section>

        <section title="GetCert">
          <t>OPERATION MUST be set to "PKIOperation".</t>

          <t>MESSAGE consists of a base64-encoded DER-encoded GetCert SCEP
          message.</t>

          <section title="GetCert Response">
            <t>The body of this response consists of a DER-encoded CertRep
            SCEP message defined in <xref target="getcertresp"></xref>.</t>
          </section>
        </section>

        <section title="GetCRL">
          <t>OPERATION MUST be set to "PKIOperation".</t>

          <t>MESSAGE consists of a base64-encoded DER-encoded GetCRL SCEP
          message.</t>

          <section title="GetCRL Response">
            <t>The body of this response consists of a DER-encoded CertRep
            SCEP message defined in <xref target="getcrlresp"></xref>.</t>
          </section>
        </section>

        <section anchor="getnextcacerttrans" title="GetNextCACert">
          <t>OPERATION MUST be set to "GetNextCACert".</t>

          <t>MESSAGE MAY be ommitted, or it MAY be a string that represents
          the certification authority issuer identifier, if such has been set
          by the CA Administrator.</t>

          <section title="GetNextCACert Response">
            <t>The response will have a Content-Type of
            "application/x-x509-next-ca-cert".</t>

            <t>The body of this response consists of a SignedData <xref
            target="RFC2315">PKCS#7</xref>, as defined in <xref
            target="getnextcacertresp"></xref>. (This is similar to the
            GetCert response but does not include any of the attributes
            defined in <xref target="signedAttributes"></xref>.)</t>

            <figure title="">
              <artwork><![CDATA["Content-Type:application/x-x509-next-ca-cert\n\n"
<BER-encoded SignedData<DER-encoded degenerate PKCS7>>]]></artwork>
            </figure>
          </section>
        </section>
      </section>
    </section>

    <section title="Contributors/Acknowledgements">
      <t>The editor would like to thank all the previous authors and
      contributors: Cheryl Madson, Xiaoyi Liu, David McGrew, David Cooper, etc
      for their work on the draft over the years.</t>

      <t>The authors would like to thank Peter William of ValiCert, Inc.
      (formerly of VeriSign, Inc.) and Alex Deacon of VeriSign, Inc. and
      Christopher Welles of IRE, Inc. for their contributions to early
      versions of this protocol and this document.</t>
    </section>

    <section title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>
    </section>

    <section title="Security Considerations">
      <t>The security goals of SCEP are that no adversary can:</t>

      <t><list style="symbols">
          <t>subvert the public key/identity binding from that intended,</t>

          <t>discover the identity information in the enrollment requests and
          issued certificates,</t>

          <t>cause the revocation of certificates with any non-negligible
          probability.</t>
        </list>Here an adversary is any entity other than the requester and
      the CA (and optionally the RA) participating in the protocol that is
      computationally limited, but that can manipulate data during
      transmission (that is, a man-in-the-middle). The precise meaning of
      'computationally limited' depends on the implementer's choice of
      cryptographic hash functions and ciphers. The required algorithms are
      RSA, DES and MD5. Depending on the CA capabilities (see <xref
      target="cacaps"></xref>), Triple-DES MAY be used instead of DES, and
      SHA-1, SHA-256, or SHA-512 MAY be used instead of MD5.</t>

      <t>The first and second goals are met through the use of <xref
      target="RFC2315">PKCS#7</xref> and <xref target="RFC2986">PKCS#10</xref>
      encryption and digital signatures using authenticated public keys. The
      CA's public key is authenticated via the checking of the CA fingerprint,
      as specified in <xref target="certauth"></xref>, and the SCEP client's
      public key is authenticated through the manual authentication or
      pre-shared secret authentication, as specified in <xref
      target="req_auth"></xref>. The third goal is met through the use of a
      challenge password for revocation, which is chosen by the SCEP client
      and communicated to the CA protected by the <xref
      target="RFC2315">PKCS#7</xref> encryptedData, as specified in <xref
      target="certrevoke"></xref>.</t>

      <t>The motivation of the first security goal is straightforward. The
      motivation for the second security goal is to protect the identity
      information in the enrollment requests and certificates. For example,
      two IPSEC hosts behind a firewall may need to exchange certificates, and
      may need to enroll certificates with a CA that is outside of a
      firewall.</t>

      <t>Most networks with firewalls seek to prevent IP addresses and DNS
      information from the trusted network leaving that network. The second
      goal enables the hosts in this example to enroll with a CA outside the
      firewall without revealing this information. The motivation for the
      third security goal is to protect the SCEP clients from denial of
      service attacks.</t>

      <section title="General Security">
        <t>Common key-management considerations such as keeping private keys
        truly private and using adequate lengths for symmetric and asymmetric
        keys must be followed in order to maintain the security of this
        protocol.</t>

        <t>This is especially true for CA keys, which, when compromised,
        compromise the security of all relying parties.</t>
      </section>

      <section title="Use of the CA keypair">
        <t>A CA key pair is generally meant for (and is usually flagged as)
        "certificate signing" (exclusively), rather than 'data signing' or
        'data encryption'. The SCEP protocol, however, uses the CA key pair to
        encrypt and sign <xref target="RFC2315">PKCS#7</xref> transport
        messages, regardless of the key usage of the CA certificate. This is
        generally considered undesirable, as it widens the possibility of an
        implementation weakness, and provides<list style="symbols">
            <t>another place that the private key must be used (and hence is
            slightly more vulnerable to exposure),</t>

            <t>another place where a side channel attack (say, timing or power
            analysis) might be used,</t>

            <t>another place that the attacker might somehow insert his own
            text, and get it signed by the private key.</t>
          </list></t>

        <t>While the CA key pair can be generated with the 'data encryption'
        and 'data signing' flags set, this is operationally not encouraged. It
        would make using the key as a <xref target="RFC2315">PKCS#7</xref>
        transport key 'legal', but the discussion from the previous paragraph
        still applies.</t>

        <t>A solution is to use RA keys to secure the SCEP transport (i.e.
        message signing and encrypting), which allows the CA keys to be used
        only for their intended purpose of "certificate signing".</t>

        <t>An RA can be implemented in two ways: physically separate or
        implicit. In the implicit case, the CA simply creates an extra key
        pair. A physically separate RA allows the CA to be inside the secure
        network, not accessible to hackers at all.</t>
      </section>

      <section title="ChallengePassword">
        <t>The challengePassword sent in the PKCS#10 enrollment request is
        signed and encrypted by way of being encapsulated in a pkiMessage.
        When saved by the CA, care should be taken to protect this
        password.</t>

        <t>If the challengePassword is used to automatically authenticate an
        enrollment request, it is recommended that some form of one-time
        password be used to minimize damage in the event the data is
        compromised.</t>
      </section>

      <section anchor="transidsecurity" title="transactionID">
        <t>A well-written CA/RA SHOULD NOT rely on the transactionID to be
        correct or as specified in this document. Requesters with buggy
        software might add additional undetected duplicate requests to the
        CA's queue (or worse). A well-written CA/RA should never assume the
        data from a requester is well-formed.</t>
      </section>

      <section title="Nonces and Replay">
        <t>In order to detect replay attacks, both sides need to maintain
        state information sufficient to detect a repeated, duplicate
        senderNonce.</t>

        <t>Since existing implementations do not copy the senderNonce from a
        CertRep into subsequent GetCertinitial requests, the server will never
        see its own nonce reflected back to it. The transactionID links
        together the GetCertInitial and PKCSReq, in any case.</t>
      </section>

      <section title="Key Usage Issues">
        <t>Key pairs may be intended for particular purposes, such as
        encryption only or signing only. The usage of any associated
        certificate can be restricted by adding key usage and extended key
        usage attributes to the <xref target="RFC2986">PKCS#10</xref>. If key
        usage is not present, the public key is assumed to be a general
        purpose key that may be used for all purposes.</t>

        <t>When building a pkiMessage, clients MUST have a certificate to sign
        the <xref target="RFC2315">PKCS#7</xref> signed-data (because <xref
        target="RFC2315">PKCS#7</xref> requires it). Clients MUST either use
        an existing certificate, or create a self-signed certificate (see
        <xref target="enrollment_authz"></xref>). If this certificate has a
        key usage extension in it, then this key usage MUST be ignored by both
        the SCEP client and SCEP server for the duration of the transaction
        (the key will be used for signing during the creation of the PKCSReq
        message, and for encryption during the creation of the CertRep
        message).</t>
      </section>

      <section title="GetCACaps Issues">
        <t>The GetCACaps response is not signed. This allows an attacker to
        use downgrade attacks (as well as "upgrade attacks") on the
        cryptographic capabilities of the CA.</t>
      </section>

      <section anchor="unnecessarycrypto" title="Unnecessary cryptography">
        <t>Some of the SCEP exchanges use signing and encryption operations
        that are not necessary. In particular the GetCert and GetCRL exchanges
        are encrypted and signed in both directions. The information requested
        is public and thus signing the requests is of questionable value but
        also CRLs and Certificates, i.e. the respective responses, are already
        signed by the CA and can be verified by the recipient without
        requiring additional signing and encryption.</t>

        <t>This may affect performance and scalability of the CA which could
        be used as an attack vector on the CA (though not an anonymous one).
        The use of CDPs is recommended for CRL access, as well as other ways
        of retrieving certificates (LDAP, direct HTTP access, etc.).</t>
      </section>

      <section title="GetNextCACert">
        <t>Servers implementing early versions of the SCEP draft might return
        an unsigned GetNextCACert response by erroneously mirroring the
        (unsigned) functionality of GetCACert. Client receiving such responses
        MUST ignored them.</t>

        <t>GetNextCACert depends on a 'flag moment' at which every client in
        the PKI infrastructure switches from the current CA certificate (and
        client certificate) to the new CA certificate and client certificates.
        Proper monitoring of the network infrastructure can ensure that this
        will proceed as expected but any errors in processing or
        implementation can result in a failure of the PKI infrastructure.</t>
      </section>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      &RFC2119;

      &RFC2315;

      &RFC2986;

      &RFC2985;

      &RFC5280;

      &RFC4346;

      &RFC4306;

      &RFC4210;

      &RFC5272;

      &RFC2409;

      &RFC4945;
    </references>

    <!-- references title="Informative References">
    </references -->

    <section anchor="oiddef" title="Private OID Definitions">
      <t>The OIDs used in SCEP are VeriSign self-maintained OIDs.</t>

      <texttable>
        <ttcol>Name</ttcol>

        <ttcol>ASN.1 Definition</ttcol>

        <c>id-VeriSign</c>

        <c>OBJECT_IDENTIFIER ::= {2 16 US(840) 1 VeriSign(113733)}</c>

        <c>id-pki</c>

        <c>OBJECT_IDENTIFIER ::= {id-VeriSign pki(1)}</c>

        <c>id-attributes</c>

        <c>OBJECT_IDENTIFIER ::= {id-pki attributes(9)}</c>

        <c>id-messageType</c>

        <c>OBJECT_IDENTIFIER ::= {id-attributes messageType(2)}</c>

        <c>id-pkiStatus</c>

        <c>OBJECT_IDENTIFIER ::= {id-attributes pkiStatus(3)}</c>

        <c>id-failInfo</c>

        <c>OBJECT_IDENTIFIER ::= {id-attributes failInfo(4)}</c>

        <c>id-senderNonce</c>

        <c>OBJECT_IDENTIFIER ::= {id-attributes senderNonce(5)}</c>

        <c>id-recipientNonce</c>

        <c>OBJECT_IDENTIFIER ::= {id-attributes recipientNonce(6)}</c>

        <c>id-transId</c>

        <c>OBJECT_IDENTIFIER ::= {id-attributes transId(7)}</c>

        <c>id-extensionReq</c>

        <c>OBJECT_IDENTIFIER ::= {id-attributes extensionReq(8)}</c>
      </texttable>

      <t></t>
    </section>

    <section anchor="statetrans" title="SCEP State Transitions">
      <t>SCEP state transitions are indexed by the transactionID attribute.
      The design goal is to ensure the synchronization between the CA and the
      requester under various error situations.</t>

      <t>Each enrollment transaction is uniquely associated with a transaction
      identifier (carried in the transactionID signed attribute (see <xref
      target="transactID"></xref>). Because the enrollment transaction could
      be interrupted by various errors, including network connection errors or
      client reboot, the SCEP client generates a transaction identifier by
      calculating a hash on the public key value for which the enrollment is
      requested. This retains the same transaction identifier throughout the
      enrollment transaction, even if the client has rebooted or timed out,
      and issues a new enrollment request for the same key pair. It also
      provides the way for a CA to uniquely identify a transaction in its
      database. At the requester side, it generates a transaction identifier
      which is included in PKCSReq. If the CA returns a response of PENDING,
      the requester will poll by periodically sending out GetCertInitial with
      the same transaction identifier until either a response other than
      PENDING is obtained, or the configured maximum time has elapsed.</t>

      <t>If the client times out or the client reboots, the client
      administrator will start another enrollment transaction with the same
      key pair. The second enrollment will have the same transaction
      identifier. At the server side, instead of accepting the PKCSReq as a
      new enrollment request, it should respond as if another GetCertInitial
      message had been sent with that transaction ID. The second PKCSReq
      should be taken as a resynchronization message to allow the enrollment
      to resume as the same transaction.</t>

      <t>It is important to keep the transaction ID unique since SCEP requires
      the same policy and same identity be applied to the same subject name
      and key pair binding. In the current implementation, an SCEP client can
      only assume one identity. At any time, only one key pair, with a given
      key usage, can be associated with the same identity.</t>

      <t>The following gives several examples of client to CA
      transactions.</t>

      <t>Client actions are indicated in the left column, CA actions are
      indicated in the right column. A blank action signifies that no message
      was received.</t>

      <t>The first transaction, for example, would read like this:</t>

      <t>"Client Sends PKCSReq message with transaction ID 1 to the CA. The CA
      signs the certificate and constructs a CertRep Message containing the
      signed certificate with a transaction ID 1. The client receives the
      message and installs the certificate locally."</t>

      <figure title="">
        <preamble>Successful Enrollment Case: no manual
        authentication</preamble>

        <artwork><![CDATA[PKCSReq (1)             ----------> CA Signs Cert 
Client Installs Cert    <---------- CertRep (1) SIGNED CERT]]></artwork>
      </figure>

      <figure title="">
        <preamble>Successful Enrollment Case: manual authentication
        required</preamble>

        <artwork><![CDATA[PKCSReq (10)            ----------> Cert Request goes into Queue 
Client Polls            <---------- CertRep (10) PENDING 
GetCertInitial (10)     ----------> Still pending 
Client Polls            <---------- CertRep (10) PENDING 
GetCertInitial (10)     ----------> Still pending 
Client Polls            <---------- CertRep (10) PENDING 
GetCertInitial (10)     ----------> Still pending 
Client Polls            <---------- CertRep (10) PENDING 
GetCertInitial (10)     ----------> Cert has been signed 
                        <---------- CertRep (10) SIGNED CERT
Client Installs Cert]]></artwork>
      </figure>

      <figure title="">
        <preamble>Resync Case 1 - CA Receives PKCSReq, sends PENDING,
        eventually grants the certificate and returns SUCCESS, with the
        certificate. The SUCCESS gets lost:</preamble>

        <artwork><![CDATA[PKCSReq (3)           ----------> Cert Request goes into queue 
                      <---------- CertRep (3) PENDING 
GetCertInitial (3)    ----------> Still pending
                      <---------- CertRep (3) PENDING 
GetCertInitial (3)    -----------> Cert has been signed
                        X-------- CertRep(3) SIGNED CERT
(Time Out) 
PKCSReq (3)           ----------> Cert already granted
                      <---------- CertRep (3) SIGNED CERT
Client Installs Cert   ]]></artwork>
      </figure>

      <figure title="">
        <preamble>Resync Case 2 - CA Receives PKCSReq, sends PENDING, PENDING
        reply gets lost:</preamble>

        <artwork><![CDATA[PKCSReq (3)           ----------> Cert Request goes into queue 
                        X-------- CertRep (3) PENDING 
(Time Out)
PKCSReq (3)           ----------> 
                      <---------- CertRep (3) PENDING 
etc...]]></artwork>
      </figure>

      <figure title="">
        <preamble>Case when the Certificate is lost, the CA arbitrarily
        refuses to sign a replacement (enforcing name-uniqueness) until the
        original certificate has been revoked (there is no change of name
        information):</preamble>

        <artwork><![CDATA[PKCSReq (4)           ----------> CA Signs Cert 
                      <---------- CertRep (4) SIGNED CERT 
Client Installs Cert
(Client looses Cert) 
PKCSReq (5)           ----------> There is already a valid cert with 
                                  this DN. 
                      <---------- CertRep (5) BAD REQUEST 
                                  Admin Revokes
PKCSReq (5)           ----------> CA Signs Cert 
                      <---------- CertRep (5) SIGNED CERT 
Client Installs Cert]]></artwork>
      </figure>
    </section>

    <section anchor="cacaps" title="CA Capabilities">
      <t></t>

      <section title="GetCACaps HTTP Message Format">
        <t>"GET" CGI-PATH CGI-PROG "?operation=GetCACaps" "&amp;message="
        CA-IDENT</t>

        <t>This message requests capabilities from CA. The response is a list
        of text capabilities, as defined in <xref target="cacapsresp"></xref>.
        CA servers SHOULD support the GetCACaps message.</t>
      </section>

      <section anchor="cacapsresp" title="CA Capabilities Response Format">
        <t>The response for a GetCACaps message is a list of CA capabilities,
        in plain text, separated by &lt;LF&gt; characters, as follows
        (quotation marks are NOT sent):</t>

        <texttable>
          <ttcol>Keyword</ttcol>

          <ttcol>Description</ttcol>

          <c>"GetNextCACert"</c>

          <c>CA Supports the GetNextCACert message.</c>

          <c>"POSTPKIOperation"</c>

          <c>PKIOPeration messages may be sent via HTTP POST.</c>

          <c>"Renewal"</c>

          <c>Clients may use current certificate and key to authenticate an
          enrollment request for a new certificate.</c>

          <c>"SHA-512"</c>

          <c>CA Supports the SHA-512 hashing algorithm.</c>

          <c>"SHA-256"</c>

          <c>CA Supports the SHA-256 hashing algorithm.</c>

          <c>"SHA-1"</c>

          <c>CA Supports the SHA-1 hashing algorithm.</c>

          <c>"DES3"</c>

          <c>CA Supports the triple-DES encryption algorithm.</c>
        </texttable>

        <t>The client SHOULD use SHA-1, SHA-256, or SHA-512 in preference to
        MD5 hashing if it is supported by the CA.</t>

        <t>The server MUST use the texual case specified here, but clients
        SHOULD ignore the textual case when processing this message. A client
        MUST be able to accept and ignore any unknown keywords that might be
        sent back by a CA.</t>

        <t>If none of the above capabilities are supported by the CA, a server
        SHOULD return an empty message. A server MAY simply return an HTTP
        Error. A client that receives an empty message or an HTTP error SHOULD
        interpret the response as if none of the requested capabilities are
        supported by the CA.</t>

        <t>The Content-type of the reply SHOULD be "text/plain". Clients
        SHOULD ignore the Content-type, as older server implementations of
        SCEP may send various Content-types.</t>

        <t>Example:</t>

        <figure title="">
          <artwork><![CDATA[GET /cgi-bin/pkiclient.exe?operation=GetCACaps&message=myca]]></artwork>
        </figure>

        <t>might return:</t>

        <figure title="">
          <artwork><![CDATA[GetNextCACert<LF>POSTPKIOperation]]></artwork>
        </figure>

        <t>This means that the CA supports the GetNextCACert message and
        allows PKIOperation messages (PKCSreq, GetCert, GetCertInitial, ...)
        to be sent using HTTP POST.</t>
      </section>
    </section>

    <section anchor="cert_renew" title="Client Certificate Renewal">
      <t>An enrollment request that occurs more than halfway through the
      validity period of an existing certificate for the same subject name and
      key usage MAY be interpreted as a re-enrollment or renewal request and
      be accepted. A new certificate with new validity dates may be issued,
      even though the old one is still valid, if the CA policy permits. The
      server MAY automatically revoke the old client certificate. Clients MUST
      use GetCACaps (see <xref target="cacaps"></xref>) to determine if the CA
      supports renewal. Clients MUST support servers that do not implement
      renewal, or that reject renewal requests.</t>

      <t>To renew a client certificate, the client uses the PKCSreq message
      and signs it with the existing client certificate. The client SHOULD use
      a new keypair when requesting a new certificate. The client MAY request
      a new certicate using the old keypair.</t>
    </section>

    <section anchor="ca_keyrollover" title="CA Key Rollover">
      <t>When the CA certificate expires all certificates that have been
      signed by it are no longer valid. CA key rollover provides a mechanism
      by which the server MAY distribute a new CA certificate which is valid
      in the future; when the current certificate has expired. Clients MUST
      use GetCACaps (see <xref target="cacaps"></xref>) to determine if the CA
      supports GetNextCACert.</t>

      <t>To obtain the new CA certificate prior to the expiration of the
      current one, the client uses the GetNextCACert message.</t>

      <t>To obtain a new client certificate signed by the new CA certificate,
      use the new CA or RA certificate in the PKCSreq message envelope.</t>

      <t>Clients MUST store the not-yet-valid CA certificate, and any
      not-yet-valid client certificates obitained, until such time that they
      are valid. At which point clients switch over to using the newly valid
      certificates.</t>

      <t>Example:</t>

      <figure title="">
        <artwork><![CDATA[
GetNextCACert           ----------> 
                        <---------- New CA certificate

PKCSReq*                ----------> CA Signs certificate with NEW key
Client Stores Cert      <---------- CertRep - Certificate issued
for installation when               from NEW CA certificate and key pair
existing cert expires.

*enveloped for new CA or RA cert and key pair.  The CA will use the 
envelope to determine which key and certificate to use to issue the 
client certificate.]]></artwork>
      </figure>
    </section>

    <section anchor="postop" title="PKIOperation via HTTP POST Message">
      <t>If the remote CA supports it, any of the <xref
      target="RFC2315">PKCS#7</xref>-encoded SCEP messages may be sent via
      HTTP POST instead of HTTP GET. This is allowed for any SCEP message
      except GetCACert, GetNextCACert, or GetCACaps. In this form of the
      message, Base 64 encoding is not used.</t>

      <figure title="General POST Syntax">
        <artwork><![CDATA[POST /cgi-bin/pkiclient.exe?operation=PKIOperation HTTP/1.0
Content-Length: <length of data>

<binary PKCS#7 data>]]></artwork>
      </figure>

      <t>The client can verify that the CA supports SCEP messages via POST by
      looking for the "POSTPKIOperation" capability (See <xref
      target="cacaps"></xref>).</t>
    </section>

    <!-- Change Log

 -->
  </back>
</rfc>
