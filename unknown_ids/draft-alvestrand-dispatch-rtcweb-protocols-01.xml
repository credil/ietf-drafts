<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-alvestrand-dispatch-rtcweb-protocols-01"
     ipr="trust200902">
  <front>
    <title abbrev="Browser RTC">Overview: Real Time Protocols for Brower-based
    Applications</title>

    <author fullname="Harald T. Alvestrand" initials="H. T. "
            surname="Alvestrand">
      <organization>Google</organization>

      <address>
        <postal>
          <street>Kungsbron 2</street>

          <city>Stockholm</city>

          <region></region>

          <code>11122</code>

          <country>Sweden</country>
        </postal>

        <email>harald@alvestrand.no</email>
      </address>
    </author>

    <date day="13" month="March" year="2011" />

    <abstract>
      <t>This document gives an overview and context of a protocol suite
      intended for use with real-time applications that can be deployed in
      browsers - "real time communication on the Web".</t>

      <t>It intends to serve as a starting and coordination point to make sure
      all the parts that are needed to achieve this goal are findable, and
      that the parts that belong in the Internet protocol suite are fully
      specified and on the right publication track.</t>

      <t>This work is an attempt to synthesize the input of many people, but
      makes no claims to fully represent the views of any of them. All parts
      of the document should be regarded as open for discussion, with the
      intended discussion forum being the "RTCWEB" WG (in formation).</t>

      <t>Currently, discussion is on the rtc-web@alvestrand.no mailing
      list.</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t>The Internet was, from very early in its lifetime, considered a
      possible veichle for the deployment of real-time, interactive
      applications - with the most easily imaginable being audio conversations
      (aka "Internet telephony") and videoconferencing.</t>

      <t>The first attempts to build this were dependent on special networks,
      special hardware and custom-built software, often at very high prices or
      at low quality, placing great demands on the infrastructure.</t>

      <t>As the available bandwidth has increased, and as processors and other
      hardware has become ever faster, the barriers to participation have
      decreased, and it is possible to deliver a satisfactory experience on
      commonly available computing hardware.</t>

      <t>Still, there are a number of barriers to the ability to communicate
      universally - one of these is that there are, as of yet, no single set
      of communication protocols that all agree should be made available for
      communication; another is the sheer lack of universal identification
      systems (such as is served by telephone numbers or email addresses in
      other communications systems).</t>

      <t>Development of The Universal Solution has proved hard, however, for
      all the usual reasons. This memo aims to take a more
      building-block-oriented approach, and try to find consensus on a set of
      substrate components that we think will be useful in any real-time
      communications systems.</t>

      <t>The last few years have also seen a new platform rise for deployment
      of services: The browser-embedded application, or "Web application". It
      turns out that as long as the browser platform has the necessary
      interfaces, it is possible to deliver almost any kind of service on
      it.</t>

      <t>Traditionally, these interfaces have been delivered by plugins, which
      had to be downloaded and installed separately from the browser; in the
      development of HTML5, much promise is seen by the possiblitiy of making
      those interfaces available in a standardized way within the browser.</t>

      <t>Other efforts, for instance the W3C Web Applications and Device API
      working groups, focus on making standardized APIs and interfaces
      available, within or alongside the HTML5 effort, for those functions;
      this memo concentrates on specifying the protocols and subprotocols that
      are needed to specify the interactions that happen across the
      network.</t>

      <t></t>
    </section>

    <section title="On interoperability and innovation">
      <t>The "Mission statement of the IETF" <xref target="RFC3935"></xref>
      states that "The benefit of a standard to the Internet is in
      interoperability - that multiple products implementing a standard are
      able to work together in order to deliver valuable functions to the
      Internet's users."</t>

      <t>Communication on the Internet frequently occurs in two phases:</t>

      <t><list style="symbols">
          <t>Two parties communicate, through some mechanism, what
          functionality they both are able to support</t>

          <t>They use that shared communicative functionality to communicate,
          or, failing to find anything in common, give up on
          communication.</t>
        </list>There are often many choices that can be made for communicative
      functionality; the history of the Internet is rife with the proposal,
      standardization, implementation, and success or failure of many types of
      options, in all sorts of protocols.</t>

      <t>The goal of having a mandatory to implement function set is to
      prevent negotiation failure, not to preempt or prevent negotiation.</t>

      <t>The presence of a mandatory to implement function set serves as a
      strong changer of the marketplace of deployment - in that it gives a
      guarantee that, as long as you conform to a specification, and the other
      party is willing to accept communication at the base level of that
      specification, you can communicate successfully.</t>

      <t>The alternative - that of having no mandatory to implement - does not
      mean that you cannot communicate, it merely means that in order to be
      part of the communications partnership, you have to implement the
      standard "and then some" - that "and then some" usually being called a
      profile of some sort; in the version most antithetical to the Internet
      ethos, that "and then some" consists of having to use a specific
      vendor's product only.</t>
    </section>

    <section title="Functionality groups">
      <t>The functionallity groups that are needed can be specified, more or
      less from the bottom up, as:</t>

      <t><list style="symbols">
          <t>Data transport: TCP, UDP and the means to securely set up
          connections between entities.</t>

          <t>Data framing: RTP and other data formats that serve as
          containers, and their functions for data confidentiality and
          integrity.</t>

          <t>Data formats: Codec specifications, format specifications and
          functionality specifications for the data passed between systems.
          Audio and video codecs, as well as formats for data and document
          sharing, belong in this category.</t>

          <t>Connection management: Setting up connections, agreeing on data
          formats, changing data formats during the duration of a call; SIP
          and Jingle/XMPP belong in this category.</t>

          <t>Presentation and control: What needs to happen in order to ensure
          that interactions behave in a non-surprising manner. This can
          include floor control, screen layout, voice activated image
          switching and other such functions - where part of the system
          require the cooperation between parties. Cisco/Tandberg's TIP was
          one attempt at specifying this functionality.</t>

          <t>Local system support functions: These are things that need not be
          specified uniformly, because each participant may choose to do these
          in a way of the participant's choosing, without affecting the bits
          on the wire in a way that others have to be cognizant of. Examples
          in this category include echo cancellation (some forms of it), local
          authentication and authorization mechanisms, OS access control and
          the ability to do local recording of conversations.</t>
        </list>Within each functionality group, it is important to preserve
      both freedom to innovate and the ability for global communication.
      Freedom to innovate is helped by doing the specification in terms of
      interfaces, not implementation; any implementation able to communicate
      according to the interfaces is a valid implementation. Ability to
      communicate globally is helped both by having core specifications be
      unencumbered by IPR issues and by having the formats and protocols be
      fully enough specified to allow for independent implementation.</t>

      <t>One can think of the three first groups as forming a "media transport
      infrastructure", and of the three last groups as forming a "media
      service". In many contexts, it makes sense to use a common specification
      for the media transport infrastructure, which can be embedded in
      browsers and accessed using standard interfaces, and "let a thousand
      flowers bloom" in the "media service" layer; to achieve interoperable
      services, however, at least the first five of the six groups need to be
      specified.</t>
    </section>

    <section title="Data transport">
      <t>Datagram transport is the subject of a separate draft, "A Datagram
      Transport for the RTC-Web profile".<xref
      target="I-D.alvestrand-dispatch-rtcweb-datagram"></xref> The basic
      approach is to use ICE as a setup mechanism, and to specify mechanisms
      to use ICE over connections that utilize UDP and TCP if needed to
      support a basic datagram-passing function with adequate security. In
      order to deal with complex NAT/firewall situations, relaying using TURN
      MUST be supported.</t>

      <t>For octet-stream transport, TCP is used. (QUESTION: Do we need a TCP
      relay specification? The use of TURN over TCP and TLS is specified in
      the TURN RFC - is it suitable?)</t>

      <t>(The role of Web Sockets <xref
      target="I-D.ietf-hybi-thewebsocketprotocol"></xref> needs to be
      clarified.) </t>

      <t>The data transport MUST behave reasonably in the presence of
      congested networks; this is usually interpreted as reducing the send
      rate when congestion is encountered. TCP, when correctly implemented,
      does this automatically; this is not the case with UDP, and the RTP
      framing specification does not contain a congestion control
      component.</t>

      <t>Determining an useful congestion handling mechanism is a high
      priority for work with this specification suite.</t>
    </section>

    <section title="Data framing and securing">
      <t>RTP <xref target="RFC3550"></xref>and SRTP <xref
      target="RFC3711"></xref>. The RTP/SAVP profile, defined as part of SRTP,
      is supported, and "extended RTCP", RTP/SAVPF <xref
      target="RFC4585"></xref>, with its secured version RTP/SAVPF <xref
      target="RFC5124"></xref>is used in order to support codec functionality
      that depends on this RTP profile, such as</t>

      <t>The implementation of SRTP used MUST support encryption using AES-CM
      with MIC, on both RTP and RTCP channels. &lt;TODO: Add pointer to
      appropriate profile here&gt; (Note that like for all
      mandatory-to-implement, there is no requirement that these protocols be
      used, just that it is possible to negotiate them.)</t>

      <t>[OPEN ISSUE; We need to specify a securable format of passing data
      that is not RTP. This should probably be a profile on using TLS and/or
      DTLS, although specifying a "data codec" and using SRTP has been
      proposed too.]</t>
    </section>

    <section title="Data formats">
      <t>The intent of this specification is to allow each communications
      event to use the data formats that are best suited for that particular
      instance, where a format is supported by both sides of the connection.
      However, a minimum standard is greatly helpful in order to ensure that
      communication can be achieved. This document specifies a minimum
      baseline that will be supported by all implementations of this
      specification, and leaves further codecs to be included at the will of
      the implementor.</t>

      <t>NOTE IN DRAFT: The particular codecs named are NOT A DECISION. They
      are included to illustrate possible choices, and to check with the group
      that the references given are necessary and sufficient for the purpose
      of specifying an interoperable codec suite.</t>

      <t>In audio, the OPUS codec<xref target="I-D.ietf-codec-opus"></xref>
      MUST be supported. For ease of interoperability with gateways to older
      equipment, G.711 U-law, audio/PCMU, defined in <xref
      target="RFC1890">RFC 1890</xref> section 4.4.12, is also mandatory to
      implement. There is no third mandatory to implement.</t>

      <t>In video, the VP8 codec <xref target="I-D.westin-payload-vp8"></xref>
      MUST be supported.</t>

      <t>The Theora codec is also freely available. H.264/AVC and H.264/SVC
      <xref target="I-D.ietf-avt-rtp-svc"></xref> are widely enough used that
      it gives a wider range of communications partners if they are
      supported.</t>

      <t></t>
    </section>

    <section title="Connection management">
      <t>This specification is silent on the definition of connection
      management protocols. It envisions that implementors will make a choice
      on whether to implement connection management protocols as a
      downloadable component, as a browser plug-in, or as a frontend/backend
      split, where a part of the protocol machinery is downloaded into the
      browser and uses some mechanism (for instance WebSockets) to communicate
      back to a backend implementing the rest of the connection management
      protocol.</t>

      <t>XMPP, and its Jingle component, has proved a versatile tool in
      building interoperable communities, and so has SIP. This suite requires
      that the browser support establishing and describing connections using a
      data format capable of representing the information needed by these two
      protocols, such as one that can be one-to-one transformed into SDP. The
      exact specification of this API is done elsewhere &lt;insert reference
      when available&gt;; this API is powerful enough that all interesting
      parameters of the transport mechanisms specified above are settable, and
      clear enough that how to connect the API to the protocols is
      obvious.</t>

      <t></t>
    </section>

    <section title="Presentation and control">
      <t>The most important part of control is the user's control over the
      browser's interaction with input/output devices and communications
      channels. It is important that the user have some way of figuring out
      where his audio, video or texting is being sent, for what purported
      reason, and what guarantees are made by the parties that form part of
      this control channel. This is largely a local function between the
      browser, the underlying operating system and the user interface; this is
      being worked on in &lt;insert reference here when available&gt;.</t>

      <t></t>
    </section>

    <section title="Local system support functions">
      <t>These are characterized by the fact that the quality of these
      functions strongly influences the user experience, but the exact
      algorithm does not need coordination. In some cases (for instance echo
      cancellation, as described below), the overall system definition may
      need to specify that the overall system needs to have some
      characteristics for which these facilities are useful, without requiring
      them to be implemented a certain way.</t>

      <t>Local functions include echo cancellation, volume control, camera
      management including focus, zoom, pan/tilt controls (if available), and
      more.</t>

      <t>Certain parts of the system SHOULD conform to certain properties, for
      instance:</t>

      <t><list style="symbols">
          <t>Echo cancellation should be good enough that feedback (defined as
          a rising volume of sound with no local sound input) does not
          occur.</t>

          <t>Privacy concerns must be satisfied; for instance, if remote
          control of camera is offered, the APIs should be available to let
          the local participant to figure out who's controlling the camera,
          and possibly decide to revoke the permission for camera usage.</t>

          <t>Automatic gain control, if present, should normalize a speaking
          voice into &lt;whatever dB metrics makes sense here - most important
          that we have one only&gt;</t>
        </list></t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes no request of IANA.</t>

      <t>Note to RFC Editor: this section may be removed on publication as an
      RFC.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>Security of the web-enabled real time communications comes in several
      pieces:</t>

      <t><list style="symbols">
          <t>Security of the components: The browsers, and other servers
          involved. The most target-rich environment here is probably the
          browser; the aim here should be that the introduction of these
          components introduces no additional vulnerability.</t>

          <t>Security of the communication channels: It should be easy for a
          participant to reassure himself of the security of his communication
          - by verifying the crypto parameters of the links he himself
          participates in, and to get reassurances from the other parties to
          the communication that they promise that appropriate measures are
          taken.</t>

          <t>Security of the partners' identity: verifying that the
          participants are who they say they are (when positivie
          identification is appropriate), or that their identity cannot be
          uncovered (when anonymity is a goal of the application).</t>
        </list>This specification addresses some, but not all, of these
      concerns, and makes some assumptions about the security considerations
      of other parts of the environment; it is up to the implementor to see
      that these security assumptions are warranted. In particular:</t>

      <t><list style="symbols">
          <t>We assume that the ICE security mechanism is a necessary and
          sufficient criterion for accepting that a connection attempt is from
          a communications partner. This means that we trust the randomness of
          ICE "usernames" and the security of ICE "passwords".</t>

          <t>We assume that the SRTP key exchange mechanisms and security
          profiles specified provide an adequate level of protection for audio
          and video media.</t>
        </list></t>

      <t>(there needs to be more text here)</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t></t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include='reference.RFC.1890'?>

      <?rfc include='reference.RFC.3550'?>

      <?rfc include='reference.RFC.3711'?>

      <?rfc include='reference.RFC.4585'?>

      <?rfc include='reference.RFC.5124'?>

      <?rfc include='reference.I-D.ietf-codec-opus'?>

      <?rfc include='reference.I-D.ietf-hybi-thewebsocketprotocol'?>

      <?rfc include='reference.I-D.alvestrand-dispatch-rtcweb-datagram'?>

      <?rfc include='reference.I-D.westin-payload-vp8'?>

      <?rfc ?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.I-D.ietf-avt-rtp-svc'?>

      <?rfc include='reference.RFC.3935'?>
    </references>
  </back>
</rfc>
