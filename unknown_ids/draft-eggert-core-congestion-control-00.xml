<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="no"?>
<?rfc strict="yes"?>
<?rfc tocompact="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc tocdepth="2"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes" ?>
<!--<?rfc rfcedstyle="yes"?>-->
<?rfc sortrefs="yes" ?>

<rfc category="exp" ipr="noModificationTrust200902" docName="draft-eggert-core-congestion-control-00" updates="" obsoletes="">

<front>
<title abbrev="Congestion Control for CoAP">
	Congestion Control for the Constrained Application Protocol (CoAP)
</title>

<author initials="L." surname="Eggert" fullname="Lars Eggert">
	<organization abbrev="Nokia">
		Nokia Research Center
	</organization>
	<address>
		<postal>
			<street>P.O. Box 407</street>
			<code>00045</code> <city>Nokia Group</city>
			<country>Finland</country>
		</postal>
		<phone>+358 50 48 24461</phone>
		<email>lars.eggert@nokia.com</email>
		<uri>
			http://research.nokia.com/people/lars_eggert
		</uri>
	</address>
</author>

<date year="2010"/>

<abstract>
	<t>
The Constrained Application Protocol (CoAP) is a simple, low-overhead, UDP-based protocol for use with resource-constrained IP networks and nodes. CoAP defines a simple technique to individually retransmit lost messages, but has no other congestion control mechanisms.

This document motivates the need for additional congestion control mechanisms, and defines some simple strawman proposals. The goal is to encourage experimentation with these and other proposals, in order to determine which mechanisms are feasible to implement on resource-constrained nodes and are effective real deployments.
	</t>
</abstract>
</front>



<middle>
<section title="Introduction" anchor="intro">
	<t>
The Constrained Application Protocol (CoAP) <xref target="I-D.ietf-core-coap"/> is a simple, low-overhead, UDP-based protocol for use with resource-constrained IP networks and nodes. 
	</t>
	<t>
CoAP defines two kinds of interactions between end-points:
	<list style="numbers">
	<t>a client/server interaction model, where request or notify messages initiate a transaction with a server, which may send a response to the client with a matching transaction ID</t>

	<t>an asynchronous subscribe/notify interaction model, where a server can send notify messages to a client about a resource which the client has subscribed to
	</t>
	</list>

CoAP uses the User Datagram Protocol (UDP) <xref target="RFC0768"/> to transmit these messages and defines a simple mechanism to individually retransmit lost messages using an exponentially backed-off timer.
	</t>
	
	<t>
This document argues that although this retransmission mechanism is a required first step to implement congestion control for CoAP, it alone is not sufficient to alleviate network overload in all conditions. <xref target="background"/> gives a short summary of Internet congestion control principles, and <xref target="proposal"/> presents some simple strawman proposals that attempt to complement the current message retransmission mechanism in CoAP.
	</t>	
</section>


<section title="Discussion of Internet Congestion Control Principles" anchor="background">
	<t>
<xref target="RFC2914"/> describes the best current practices for congestion control in the Internet, and requires that Internet communication employ congestion control mechanisms. Because UDP itself provides no congestion control mechanisms, it is up to the applications and application-layer protocols that use UDP for Internet communication to employ suitable mechanisms to prevent congestion collapse and establish a degree of fairness. CoAP is one such application-layer protocol.
	</t>
	<t>
<xref target="RFC2914"/> identifies two major reasons why congestion control mechanisms are critical for the stable operation of the Internet:

	<list style="numbers">
		<t>
The prevention of congestion collapse, i.e., a state where an increase in network load results in a decrease in useful work done by the network. 
		</t>
		<t>
The establishment of a degree of fairness, i.e., allowing multiple flows to share the capacity of a path reasonably equitably. 
		</t>
	</list>
	</t>
	<t>
The overwhelming majority of the bytes on the Internet are caused by bulk transfers, and the traditional congestion control mechanisms are engineered to saturate the network without driving it into congestive collapse. Fairness between flows is an important consideration when the network operates around the saturation point, so that new flows are not disadvantaged compared to established flows, and can obtain a reasonable share of the capacity quickly.
	</t>
	<t>
The environments that CoAP targets are IP networks, although more resource-constrained ones than the "big-I" Internet. This does not eliminate the need for end-point-based congestion control. If anything, the environments that CoAP will be deployed in have fewer capabilities for network provisioning, traffic engineering and capacity allocation, which are among the techniques that can sometimes offset the need for end-to-end congestion control to some degree. 
	</t>
	<t>
However, the environments that CoAP targets are sufficiently different from the "big-I" Internet so that the motivations for congestion control from <xref target="RFC2914"/> should probably be weighted differently. CoAP networks will not be used for bulk data transfers and CoAP nodes will not need to use a significant fraction of the capacity of a path to provide a useful service. (In fact, they are often too resource-constrained to do so in the first place.) Under normal operation, a CoAP network will be mostly idle, which means that fairness between the transmissions of different CoAP nodes is not a large issue. A CoAP congestion control mechanism can hence focus on preventing congestion collapse, which is a much more tractable problem given the specific conditions of CoAP environments.
	</t>
	<t>
The current IETF congestion control mechanisms, such as TCP <xref target="RFC5681"/> or TFRC <xref target="RFC5348"/>, all focus on determining a "safe" sending rate for a bulk transfer, i.e., for a single flow of many packets between a sender and destination where many packets are in flight at any given time. They measure the path characteristics, such as round-trip time (RTT) and packet loss rate, by monitoring the ongoing transfer and use this information to adjust the sending rate of the flow during the transmission.
	</t>
	<t>
This approach is not feasible for CoAP. The infrequent request/response interaction that CoAP supports does not generate sufficient data about the path characteristics to drive a traditional congestion control loop, even if the notion of "a flow" to a destination is extended from "one CoAP transaction" to "a sequence of CoAP transactions". This approach is also not applicable to multicast transmissions, which CoAP offers.
	</t>
	<t>
<xref target="RFC5405"/> documents the IETF's current best practices for using UDP for unicast communication in the Internet. It provides guidance on topics such as message sizes, reliability, checksums, middlebox traversal and congestion control. Section 3.1.2 of <xref target="RFC5405"/>, which focuses on congestion control for low data-volume applications, is especially relevant to CoAP. 
	</t>
	<t>
Section 3.1.2 of <xref target="RFC5405"/> acknowledges that the traditional IETF congestion control mechanisms are not applicable for low data-volume application protocols such as CoAP. Instead, it recommends that such application protocols:

	<list style="symbols">
	<t>maintain an estimate of the RTT for any destination with which they communicate, or assume a conservative fixed value of 3 seconds when no RTT estimate can be obtained (e.g., unidirectional communication)</t>
	<t>control their transmission behavior by not sending on average more than one UDP datagram per RTT to a destination</t>
	<t>detect packet loss and exponentially back their retransmission timer off when a loss event occurs</t>
	<t>employ congestion control for both directions of a bi-directional communication</t>
	</list>
	</t>

	<t>
CoAP follows some of these guidelines already. It uses a fixed value of 1 second for its retransmission timer for both requests and responses, which although shorter than the recommended value in <xref target="RFC5405"/> is likely appropriate for many of its deployment scenarios. CoAP also uses exponential back-off for its retransmission timer.
	</t>
	<t>
This alone, however, does not result in a complete congestion control mechanism for CoAP. <xref target="proposal"/> defines an experimental complement to the current CoAP mechanism described in <xref target="I-D.ietf-core-coap"/>.
	</t>
</section>


<section title="CoAP Congestion Control" anchor="proposal">
	<t>
This section proposes several congestion control techniques for CoAP that are intended to improve its ability to prevent congestion collapse. At the moment, these techniques are described with the intent of encouraging experimentation with such proposals in CoAP simulations and testbed deployments. Of particular interest are mechanism requiring little computation and state, i.e., mechanisms that can be implemented in resource-constrained nodes without much overhead. 
	</t>	

<section title="Retransmissions" anchor="timers">
	<t>
	CoAP already defines a simple retransmission scheme with exponential back-off, where messages that have not been responded to in RESPONSE_TIMEOUT are retransmitted, followed by doubling RESPONSE_TIMEOUT. Up to MAX_RETRANSMIT retransmission attempts are made. (At the moment, <xref target="I-D.ietf-core-coap"/> defines RESPONSE_TIMEOUT to be 1 second and MAX_RETRANSMIT to be five attempts.) As stated above, although RESPONSE_TIMEOUT is shorter than what <xref target="RFC5405"/> recommends, the shorter value is likely to not cause large issues in many deployments that CoAP targets. 	
	</t>
	<t>
However, using a fixed value for RESPONSE_TIMEOUT instead of basing it on the measured RTT to a destination has some minor drawbacks. CoAP may be used in deployments where the path RTTs can approach the currently defined RESPONSE_TIMEOUT of 1 second, such as Internet deployments involving GSM or 3G links, or cases where preparing a response can involve significant computation or where it otherwise incurs delays, such as long sleep cycles at the receiver. Fixed timeouts that are too short can cause spurious retransmissions, i.e., unnecessary retransmissions in cases where either the request or the response are still in transit. Spurious retransmissions, especially persistent ones, waste resources.
	</t>
	<t>
This section therefore proposes that CoAP deployments experiment with maintaining an estimate of the RTT for any destination with which they communicate. Specifically, it is suggested that deployments experiment with the algorithm specified in <xref target="RFC2988"/> to compute a smoothed RTT (SRTT) estimate, and compute RESPONSE_TIMEOUT in the same way <xref target="RFC2988"/> computes RTO.
	</t>
	<t>
A second suggestion is to experiment with a longer RESPONSE_TIMEOUT, such as 3 seconds, which is what <xref target="RFC5405"/> recommends, in order to determine if there are significant drawbacks or whether this value could be lengthened.
	</t>
</section>

<section title="Aggregate Congestion Control" anchor="aggregate">
	<t>
Traditional Internet congestion control algorithms control the sending rate of a single flow. When a node establishes multiple, parallel flows, their congestion control loops run (mostly) independently of one another. Interactions between the control loops of parallel flows is (mostly) indirect, e.g., a rate increase of one flow may cause packet loss and a rate decrease to another.
	</t>
	<t>
CoAP "flows", i.e., sequences of infrequent CoAP transactions between the same two nodes, do not require much more per-flow congestion control than a retransmission scheme that reduces the rate (increases the back-off) of a flow under loss, and a (low) cap on the number of allowed outstanding requests to a destination. (<xref target="RFC5405"/> recommends "on average not more than one" outstanding transaction to a given destination.)
	</t>
	<t>
On the other hand, CoAP applications may potentially want to initiate many transactions with different nodes at the same time. Allowing CoAP applications to initiate an unlimited number of parallel transactions gives them the means for causing overload, and depends on application-level measures to detect and correctly mitigate this failure. Because each transaction only consumes a very limited amount of resources, it is arguably more important to control the total outstanding number of transactions, compared to controlling the rate at which each individual one is being (re)transmitted. The CoAP spec <xref target="I-D.ietf-core-coap"/> does currently not impose any limit on how many parallel transactions to different nodes an end-point may have outstanding.
	</t>
	<t>
Given the importance of preventing congestion collapse, this document argues that the CoAP protocol should specify a common mechanism for congestion controlling the aggregate traffic a CoAP node sends into the network. In other words, the CoAP stack should locally drop application-generated messages under overload situations, rather than attempting to send them into the network, irrespective of the destination.
	</t>
	<t>
One proposal is to implement a simple windowing algorithm. In this mechanism, a CoAP node has a certain number of "transmission credits" available during a time interval. Sending one CoAP message consumes one transmission credit, independent of which destination it is being sent to. If all transmission credits have been used up during a time interval, the CoAP node drops any additional messages that the applications attempt to send during the remainder of the time interval. At the end of a time interval, the CoAP node determines whether responses have been received for all requests it has issued within the time interval. If this is the case, the CoAP node increases the number of send credits by one for the following time interval. If responses fail to arrive for some of the requests issued during the time interval, the number of permitted CoAP requests is cut in half for the next interval.
	</t>
	<t>
The description above leaves several questions unanswered. These include the length of the time interval and whether it is fixed or adapted over time, whether an increase by one and a reduction by half are the correct parameters for the proposed AIMD (additive increase, multiplicative decrease) scheme, whether the decrease should be proportional to the loss rate, and others.
	</t>
	<t>
This document does at the moment not attempt to answer these questions. Instead, it encourages simulations and implementations to explore the design space, and also consider other non-windowing approaches.
	</t>
		
</section>

<section title="Explicit Congestion Notification" anchor="ecn">
	<t>
Explicit Congestion Notification (ECN) <xref target="RFC3168"/> is an extension to IP that allows routers to inform end nodes when they approach congestion by setting a bit in the IP header. The receiver of a message echoes this bit to the sender, which reacts as if a packet loss had occurred for the flow.
	</t>
	<t>
Deployment of ECN can reduce overall packet loss, because senders can react to congestion early, i.e., before packet loss occurs. This is especially attractive  in resource-constrained environments, because retransmissions can be avoided.
	</t>
	<t>
If CoAP uses an aggregate congestion control mechanism such as described in Section <xref target="aggregate"/>, it will reduce the amount of transmission credits for the next time interval when some of the responses received had the ECN bit set. (Other reactions to ECN markings may be possible.)
	</t>
	<t>
Whether ECN support is possible in CoAP deployments remains to be investigated, because ECN usage requires a negotiation handshake (can potentially be avoided if support is made mandatory for CoAP deployments) and because routers need to support ECN marking. At this point, simulations attempting to quantify the benefits may therefore be easiest to obtain.
	</t>

</section>

<section title="Multicast Considerations" anchor="multicast">
	<t>
CoAP requests may be multicast, and result in several replies from different end-points, potentially consuming much more resource capacity for the request and response transmissions than a single unicast transaction. It can therefore be argued that sending multicast requests should be more conservatively controlled than the sending of unicast requests.
	</t>
	<t>
CoAP already acknowledges this to some degree by not retransmitting multicast requests at the CoAP-level. Unfortunately, CoAP currently has no means for preventing an application from doing application-level retransmissions of multicast requests. Given that the prevention of congestion collapse is important, such a mechanism should be added.
	</t>
	<t>
The aggregate congestion control proposal in Section <xref target="aggregate"/> puts a cap on the number of transmissions allowed during a time interval, including multicast requests. It is currently unclear whether additional means are required for CoAP deployments that make heavy use of multicast. As before, experimentation is encouraged to understand the problem space. </t>
</section>

</section>


<section title="IANA Considerations" anchor="ianacons">
	<t>
This document requests no actions from IANA.
	</t>
	<t>
[Note to the RFC Editor: Please remove this section upon publication.]
	</t>
</section>

<section title="Security Considerations" anchor="seccons">
	<t>
This document has no known security implications.
	</t>
	<t>
[Note to the RFC Editor: Please remove this section upon publication.]
	</t>
</section>

<section title="Acknowledgments" anchor="ack">
	<t>
Lars Eggert is partly funded by <xref target="TRILOGY"/>, a research project supported by the European Commission under its Seventh Framework Program.
	</t>
</section>
</middle>

    <!-- REFERENCE TEMPLATE
        <reference anchor="reference.XXX">
                <front>
                        <title>XXX</title>
                        <author initials="X." surname="XXX" fullname="XXX">
                                <organization abbrev="XXX">XXX</organization>
                                <address>
                                        <postal>
                                                <street>XXX</street>
                                                <city>XXX</city>
                                                <region>XXX</region>
                                                <code>XXX</code>
                                                <country>XXX</country>
                                        </postal>
                                        <phone>XXX</phone>
                                        <facsimile>XXX</facsimile>
                                        <email>XXX</email>
                                        <uri>XXX</uri>
                                </address>

                        </author>
                        <date month="XXX" year="XXX"/>
                </front>
                <seriesInfo name="XXX" value="XXX"/>
                <format type="XXX" target="XXX"/>                       
        </reference>
        -->


<back>

<references title='Normative References'>
	<?rfc include="reference.RFC.0768" ?>
	<?rfc include="reference.RFC.2914" ?>
	<?rfc include="reference.RFC.2988" ?>
	<?rfc include="reference.RFC.3168" ?>
	<?rfc include="reference.RFC.5405" ?>

      <?rfc include="reference.I-D.ietf-core-coap.xml"?>
	
</references>

<references title='Informative References'>
	<?rfc include="reference.RFC.5348" ?>
	<?rfc include="reference.RFC.5681" ?>

        <reference anchor="TRILOGY">
                <front>
                        <title>Trilogy Project</title>
                        <author><organization /></author>
                </front>
                <seriesInfo name="" value="http://www.trilogy-project.org/"/>
        </reference>

</references>
</back>
</rfc>
