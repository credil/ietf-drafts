<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes" ?> 
<rfc ipr="full3978"
     docName="draft-ietf-opsawg-snmp-engineid-discovery-02.txt"
     updates="3411"
     category="std">

  <!--
  $Id: snmp-discover.xml 2237 2007-04-14 20:41:33Z schoenw $
  -->

  <front>

    <title abbrev="SNMP Context EngineID Discovery">
      Simple Network Management Protocol (SNMP) Context EngineID
      Discovery
    </title>
    
    <author initials="J." surname="Schoenwaelder"
            fullname="Juergen Schoenwaelder">
      <organization>Jacobs University Bremen</organization>
      <address>
        <postal>
          <street>Campus Ring 1</street>
          <city>28725 Bremen</city>
          <country>Germany</country>
        </postal>
        <phone>+49 421 200-3587</phone>
        <email>j.schoenwaelder@jacobs-university.de</email>
      </address>
    </author>

    <date month="February" year="2008"/>

      <area>Operations and Management</area>

      <keyword>Network Management</keyword>
      <keyword>Simple Network Management Protocol</keyword>
      <keyword>SNMP</keyword>

      <abstract>
        <t>
          The Simple Network Management Protocol (SNMP) version three
	  (SNMPv3) requires that an application knows the identifier
	  (snmpEngineID) of the remote SNMP protocol engine in order
	  to retrieve or manipulate objects maintained on the remote
	  SNMP entity.
        </t>
	<t>
          This document introduces a well-known localEngineID and a
          discovery mechanism which can be used to learn the
          snmpEngineID of a remote SNMP protocol engine. The proposed
          mechanism is independent of the features provided by SNMP
          security models and may also be used by other protocol
          interfaces providing access to managed objects.
        </t>
	<t>
	  This document updates RFC 3411.
	</t>
      </abstract>

  </front>

  <middle>

    <section anchor="introduction" title="Introduction">
      <t>
        To retrieve or manipulate management information using the
        third version of the Simple Network Management Protocol
        (SNMPv3) <xref target="RFC3410"/>, it is necessary to know the
        identifier of the remote SNMP protocol engine, the so called
        snmpEngineID <xref target="RFC3411"/>. While an appropriate
        snmpEngineID can in principle be configured on each management
        application for each SNMP agent, it is often desirable to
        discover the snmpEngineID automatically.
      </t>
      <t>
        This document introduces a discovery mechanism which can be
        used to learn the snmpEngineID of a remote SNMP protocol
        engine. The proposed mechanism is independent of the features
        provided by SNMP security models. The mechanism has been
        designed to co-exist with discovery mechanisms that may
        exist in SNMP security models, such as the authoritative
        engine identifier discovery of the User-based Security Model
        (USM) of SNMP <xref target="RFC3414"/>.
      </t>
      <t>
	This document updates RFC 3411 <xref target="RFC3411"/> by
	clarifying the IANA rules for the maintenance of the
	SnmpEngineID format registry.
      </t>
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
        NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described
        in RFC 2119 <xref target="RFC2119"/>.
      </t>
    </section>

    <section anchor="background" title="Background">
      <t>
        Within an administrative domain, an SNMP engine is uniquely
        identified by an snmpEngineID value
        <xref target="RFC3411"/>. An SNMP entity, which consists of an
        SNMP engine and several SNMP applications, may provide access
        to multiple contexts.
      </t>
      <t>
        An SNMP context is a collection of management information
        accessible by an SNMP entity.  An item of management
        information may exist in more than one context and an SNMP
        entity potentially has access to many contexts
        <xref target="RFC3411"/>. A context is identified by the
        snmpEngineID value of the entity hosting the management
        information (also called a contextEngineID) and a context name
        which identifies the specific context (also called a
        contextName).
      </t>
      <t>
        To identify an individual item of management information
        within an administrative domain, a four tuple is used
        consisting of
      </t>
      <t>
        <list style="numbers">
        <t>a contextEngineID,</t>
        <t>a contextName,</t>
        <t>an object type, and</t>
        <t>its instance identification.</t>
        </list>
      </t>
      <t>
        The last two elements are encoded in an object identifier
        (OID) value. The contextName is a character string (following
        the SnmpAdminString textual convention of the
        SNMP-FRAMEWORK-MIB <xref target="RFC3411"/>) while the
        contextEngineID is an octet string constructed according to
        the rules defined as part of the SnmpEngineID textual
        convention of the SNMP-FRAMEWORK-MIB <xref target="RFC3411"/>.
      </t>
      <t>
        The SNMP protocol operations and the protocol data units
        (PDUs) operate on OIDs and thus deal with object types and
        instances <xref target="RFC3416"/>.  The SNMP architecture
        <xref target="RFC3411"/> introduces the concept of a scopedPDU
        as a data structure containing a contextEngineID, a
        contextName, and a PDU. The SNMP version 3 (SNMPv3) message
        format uses ScopedPDUs to exchange management information
        <xref target="RFC3412"/>.
      </t>
      <t>
        Within the SNMP framework, contextEngineIDs serve as
        end-to-end identifiers. This becomes important in situations
        where SNMP proxies are deployed to translate between protocol
        versions or to cross middleboxes such as network address
        translators. In addition, snmpEngineIDs separate the
        identification of an SNMP engine from the transport addresses
        used to communicate with an SNMP engine. This property can be
        used to correlate management information easily even in
        situations where multiple different transports were used to
        retrieve the information or where transport addresses can
        change dynamically.
      </t>
      <t>
        To retrieve data from an SNMPv3 agent, it is necessary to know
        the appropriate contextEngineID.  The User-based Security
        Model (USM) of SNMPv3 provides a mechanism to discover the
        snmpEngineID of the remote SNMP engine since this is needed
        for security processing reasons. The discovered snmpEngineID
        can subsequently be used as a contextEngineID in a ScopedPDU
        to access management information local to the remote SNMP
        engine. Other security models, such as the Transport Security
        Model (TSM) <xref target="I-D.TSM"/>, lack such a procedure
        and may use the discovery mechanism defined in this memo.
      </t>
    </section>

    <section anchor="procedure" title="Procedure">
      <t>
        The proposed discovery mechanism consists of two parts, namely
        (i) the definition of a special well-known snmpEngineID value,
        called the localEngineID, which always refers to a local default
        context, and (ii) the definition of a procedure to acquire the
        snmpEngineID scalar of the SNMP-FRAMEWORK-MIB
        <xref target="RFC3411"/> using the special well-known local
        localEngineID value.
      </t>
      
      <section anchor="local" title="Local EngineID">
        <t>
          An SNMP command responder implementing this specification
          MUST register their pduTypes using the localEngineID
          snmpEngineID value (defined below) using the
          registerContextEngineID() Abstract Service Interface (ASI)
          defined in RFC 3412 <xref target="RFC3412"/>. This
          registration is done in addition to the normal registration
          under the SNMP engine's snmpEngineID.  This is consistent
          with the SNMPv3 specifications since they explicitly allow
          to register multiple engineIDs and multiple pduTypes
          <xref target="RFC3412"/>.
        </t>
        <t>
          The SnmpEngineID textual convention <xref target="RFC3411"/>
          defines that an snmpEngineID value MUST be between 5 and 32
          octets long.  This specification proposes to use the
          variable length format 3) and to allocate the reserved,
          unused format value 6, using the enterprise ID 0 for the
          localEngineID.  An ASN.1 definition for localEngineID would
          look like this:
        </t>
	<figure>
          <artwork>
            localEngineID OCTET STRING ::= '8000000006'H
          </artwork>
	</figure>
        <t>
          The localEngineID value always provides access to the
          default context of an SNMP engine. Note that the
          localEngineID value is intended to be used as a special
          value for the contextEngineID field in the ScopedPDU. It
          MUST NOT be used as a value to identify an SNMP engine, that
          is this value MUST NOT be used in the snmpEngineID.0 scalar
          <xref target="RFC3418"/> or in the msgAuthoritativeEngineID
          field in the securityParameters of the User-based Security
          Model (USM) <xref target="RFC3414"/>.
        </t>
      </section>

      <section anchor="discovery" title="EngineID Discovery">

        <t>
          Discovery of the snmpEngineID is done by sending a Read
          Class protocol operation (see section 2.8 of
          <xref target="RFC3411"/>) to retrieve the snmpEngineID
          scalar using the localEngineID defined above as a
          contextEngineID value.  Implementations SHOULD only perform
          this discovery step when it is needed. In particular, if
          security models are used that already discover the remote
          snmpEngineID (such as USM), then no further discovery is
          necessary. The same is true in situations where the
          application already knows a suitable snmpEngineID value.
        </t>
	<t>
	  The procedure to discover the snmpEngineID of a remote SNMP
	  engine can be described as follows:
	</t>
	<t>
	  <list style="numbers">
	    <t>
	      Check whether a suitable contextEngineID value is
	      already known. If yes, use the provided contextEngineID
	      value and stop the discovery procedure.
	    </t>
	    <t>
	      Check whether the selected security model supports
	      discovery of the remote snmpEngineID (e.g., USM with its
	      discovery mechanism). If yes, let the security model
	      perform the discovery. If the remote snmpEngineID value
	      has been successfully determined, assign it to the
	      contextEngineID and stop the discovery procedure.
	    </t>
	    <t>
	      Send a Read Class operation to the remote SNMP engine
	      using the localEngineID value as the contextEngineID in
	      order to retrieve the scalar snmpEngineID.0 of the
	      SNMP-FRAMEWORK-MIB <xref target="RFC3411"/>. If
	      successful, set the contextEngineID to the retrieved
	      value and stop the discovery procedure.
	    </t>
	    <t>
	      Return an error indication that a suitable
	      contextEngineID could not be discovered.
	    </t>
	  </list>
	</t>
	<t>
	  The procedure outlined above is an example and can be
	  modified to retrieve more variables in step 3), such as the
	  sysObjectID.0 scalar or the snmpSetSerialNo.0 scalar of the
	  SNMPv2-MIB <xref target="RFC3418"/>.
	</t>
      </section>
    </section>

    <section title="IANA Considerations">
      <t>
	RFC 3411 requested IANA to create a registry for SnmpEngineID
	formats. However, RFC 3411 did not ask IANA to record the
	initial assignments made by RFC 3411 nor did RFC 3411 spell
	out the precise allocation rules. To address this issue, the
	following rules are hereby established.
      </t>
      <t>
        IANA has to maintain a registry for SnmpEngineID formats. The
	first four octets of an SnmpEngineID carry an enterprise
	number while the fifth octet in a variable length SnmpEngineID
	value, called the format octet, indicates how the following
	octets are formed. The following format values were allocated
	in <xref target="RFC3411"/>:
      </t>
     <figure>
        <artwork>
  Format    Description                     References
  -------   -----------                     ----------
       0    reserved, unused                 [RFC3411]
       1    IPv4 address                     [RFC3411]
       2    IPv6 address                     [RFC3411]
       3    MAC address                      [RFC3411]
       4    administratively assigned text   [RFC3411]
       5    administratively assigned octets [RFC3411]
    6-127   reserved, unused                 [RFC3411]
  128-255   enterprise specific              [RFC3411]
        </artwork>
     </figure>
     <t>
       IANA can assign new format values out of the originally
       assigned and reserved number space 1-127. For new assignments
       in this number space, a specification is required as per
       <xref target="RFC2434"/>. The number space 128-255 is
       enterprise specific and not controlled by IANA.
     </t>
     <t>
       This document requested the following assignment:
     </t>
     <figure>
        <artwork>
  Format    Description                     References
  -------   -----------                     ----------
       6    local engine                     [RFCXXXX]

  [RFC Ed.: replace XXXX with RFC number assigned to the document]
        </artwork>
     </figure>
    </section>

    <section title="Security Considerations">
      <t>
        SNMP version 3 (SNMPv3) provides cryptographic security to
	protect devices from unauthorized access. This specification
	recommends to use the security services provided by SNMPv3. In
	particular, it is RECOMMENDED to protect the discovery
	exchange.
      </t>
      <t>
	In situations where SNMPv3 is used without security (i.e., the
	security level of noAuthNoPriv is used), the introduction of a
	localEngineID may make it slightly easier for an attacker to
	discover suitable snmpEngineID values. However, since SNMP
	messages with a security level of noAuthNoPriv are normally
	carried in clear-text over the wire, it is usually easy for an
	attacker to discover snmpEngineID values by sniffing on the
	wire and any attempts to keep snmpEngineID values private will
	not lead to strong security. The usage of SNMPv3 without
	security is therefore generally NOT RECOMMENDED.
      </t>
      <t>
	If a device configuration permits non-secure SNMPv1/v2c access
	to a target system, then reading the snmpEngineID variable of
	the SNMP-FRAMEWORK-MIB will also reveal a suitable
	contextEngineID value for subsequent SNMPv3 usage. However,
	implementations should not rely on non-secure SNMPv1/v2c
	access and therefore MUST implement this specification to
	enable secure contextEngineID discovery.
      </t>
      <t>
	The isAccessAllowed() abstract service primitive of the SNMP
	access control subsystem does not take the contextEngineID
	into account when checking access rights
	<xref target="RFC3411"/>. As a consequence, it is not possible
	to define a special view for context engineID discovery. A
	request with a localEngineID is thus treated like a request
	with the correct snmpEngineID by the access control subsystem.
	This is inline with the SNMPv3 design where the authenticated
	identity is the securityName (together with the securityModel
	and securityLevel information) and transport addresses or
	knowledge of contextEngineID values do not impact to the
	access control decision.
      </t>
    </section>

    <section title="Acknowledgments">
      <t>
        Dave Perkins suggested to introduce a "local" contextEngineID
        during the interim meeting of the ISMS working group in
        Boston, 2006. Joe Fernandez, David Harrington, Dan Romascanu,
        and Bert Wijnen provided helpful review and feedback, which
        helped to improve this document.
      </t>
    </section>
      
  </middle>

  <back>

    <references title="Normative References">

      
      <reference anchor="RFC2119">
        <front>
          <title>
            Key words for use in RFCs to Indicate Requirement Levels
          </title>
          <author initials="S." surname="Bradner" fullname="Scott Bradner">
            <organization>Harvard University</organization>
          </author>
          <date month="March" year="1997"/>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="2119"/>
      </reference>

      <reference anchor="RFC3411">
        <front>
          <title>
            An Architecture for Describing Simple Network Management 
            Protocol (SNMP) Management Frameworks
          </title>
          <author initials="D." surname="Harrington" fullname="Dave Harrington">
            <organization>Enterasys Networks</organization>
          </author>
          <author initials="R." surname="Presuhn" fullname="Randy Presuhn">
            <organization>BMC Software, Inc.</organization>
          </author>
          <author initials="B." surname="Wijnen" fullname="Bert Wijnen">
            <organization>Lucent Technologies</organization>
          </author>
          <date month="December" year="2002"/>
        </front>
        <seriesInfo name="STD" value="62"/>
        <seriesInfo name="RFC" value="3411"/>
      </reference>

      <reference anchor="RFC3412">
        <front>
          <title>
            Message Processing and Dispatching for the
            Simple Network Management Protocol (SNMP)
          </title>
          <author initials="J." surname="Case" fullname="Jeff Case">
            <organization>SNMP Research, Inc.</organization>
          </author>
          <author initials="D." surname="Harrington" fullname="Dave Harrington">
            <organization>Enterasys Networks</organization>
          </author>
          <author initials="R." surname="Presuhn" fullname="Randy Presuhn">
            <organization>BMC Software, Inc.</organization>
          </author>
          <author initials="B." surname="Wijnen" fullname="Bert Wijnen">
            <organization>Lucent Technologies</organization>
          </author>
          <date month="December" year="2002"/>
        </front>
        <seriesInfo name="STD" value="62"/>
        <seriesInfo name="RFC" value="3412"/>
      </reference>

      <reference anchor="RFC3414">
        <front>
          <title>
            User-based Security Model (USM) for version 3 of the
            Simple Network Management Protocol (SNMPv3)
          </title>
          <author initials="U." surname="Blumenthal" fullname="Uri Blumenthal">
            <organization>Lucent Technologies</organization>
          </author>
          <author initials="B." surname="Wijnen" fullname="Bert Wijnen">
            <organization>Lucent Technologies</organization>
          </author>
          <date month="December" year="2002"/>
        </front>
        <seriesInfo name="STD" value="62"/>
        <seriesInfo name="RFC" value="3414"/>
      </reference>

      <reference anchor="RFC3416">
        <front>
          <title>
            Version 2 of the Protocol Operations for
            the Simple Network Management Protocol (SNMP)
          </title>
          <author initials="R." surname="Presuhn" fullname="Randy Presuhn">
            <organization>BMC Software, Inc.</organization>
          </author>
          <date month="December" year="2002"/>
        </front>
        <seriesInfo name="STD" value="62"/>
        <seriesInfo name="RFC" value="3416"/>
      </reference>

      <reference anchor="RFC3418">
        <front>
          <title>
	    Management Information Base (MIB) for the
            Simple Network Management Protocol (SNMP)
          </title>
          <author initials="R." surname="Presuhn" fullname="Randy Presuhn">
            <organization>BMC Software, Inc.</organization>
          </author>
          <date month="December" year="2002"/>
        </front>
        <seriesInfo name="STD" value="62"/>
        <seriesInfo name="RFC" value="3418"/>
      </reference>

      <reference anchor="RFC2434">
        <front>
          <title>
            Guidelines for Writing an IANA Considerations Section in RFCs
          </title>
          <author initials="T." surname="Narten" fullname="Narten">
            <organization>IBM</organization>
          </author>
          <author initials="H." surname="Alvestrand" fullname="Alvestrand">
            <organization>Maxware</organization>
          </author>
          <date month="October" year="1998"/>
        </front>
	<seriesInfo name="BCP" value="26"/>
        <seriesInfo name="RFC" value="2434"/>
      </reference>

    </references>


    <references title="Informative References">

      <reference anchor="RFC3410">
        <front>
          <title>
            Introduction and Applicability Statements for Internet-Standard Management Framework 
          </title>
          <author initials="J." surname="Case" fullname="Jeff Case">
            <organization>SNMP Research, Inc.</organization>
          </author>
          <author initials="R." surname="Mundy" fullname="Russ Mundy">
            <organization>Network Associates Laboratories</organization>
          </author>
          <author initials="D." surname="Partain" fullname="David Partain">
            <organization>Ericsson</organization>
          </author>
          <author initials="B." surname="Stewart" fullname="Bob Stewart">
            <organization>Retired</organization>
          </author>
          <date month="December" year="2002"/>
        </front>
        <seriesInfo name="RFC" value="3410"/>
      </reference>

      <reference anchor="I-D.TSM">
        <front>
          <title>
            Transport Security Model for SNMP
          </title>
          <author initials="D." surname="Harrington" fullname="Dave Harrington">
            <organization>Huawei Technologies (USA)</organization>
          </author>
          <date month="November" year="2007"/>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-isms-transport-security-model-07.txt"/>
      </reference>

    </references>


  </back>
    

</rfc>

<!-- Local Variables:                                           -->
<!-- compile-command: "xml2rfc snmp-discover.xml"               -->
<!-- ispell-local-dictionary: "american"                        -->
<!-- sgml-declaration: "/usr/lib/sgml/declaration/xml.decl"     -->
<!-- sgml-omittag:nil                                           -->
<!-- sgml-shorttag:t                                            -->
<!-- sgml-namecase-general:t                                    -->
<!-- sgml-minimize-attributes:nil                               -->
<!-- sgml-always-quote-attributes:t                             -->
<!-- sgml-indent-step:2                                         -->
<!-- sgml-indent-data:t                                         -->
<!-- sgml-parent-document:nil                                   -->
<!-- sgml-exposed-tags:nil                                      -->
<!-- sgml-local-catalogs:nil                                    -->
<!-- sgml-local-ecat-files:nil                                  -->
<!-- End:                                                       -->
