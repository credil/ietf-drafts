<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="no"?>
<?rfc iprnotified="no" ?>
<?rfc strict="no" ?>
<?rfc compact="no" ?>
<?rfc subcompact="no" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2865 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2865.xml">
<!ENTITY RFC3588 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3588.xml">
<!ENTITY RFC3748 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3748.xml">
<!ENTITY RFC4072 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4072.xml">
<!ENTITY RFC2904 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2904.xml">
<!ENTITY RFC3579 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3579.xml">
<!ENTITY RFC2138 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2138.xml">
<!ENTITY I-D.nir-tls-eap SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.nir-tls-eap.xml">
<!ENTITY I-D.ietf-abfab-gss-eap SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-abfab-gss-eap.xml">
<!ENTITY I-D.hansen-privacy-terminology SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.hansen-privacy-terminology.xml">
<!ENTITY SAML20 SYSTEM "http://xml.resource.org/public/rfc/bibxml2/reference.OASIS.saml-core-2.0-os.xml">
]>
<rfc category="info" docName="draft-lear-abfab-arch-00.txt" ipr="trust200902">
  <front>
    <title abbrev="ABFAB Architecture">Application Bridging for Federated Access Beyond Web (ABFAB) Architecture</title>

    <author initials="J." surname="Howlett" fullname="Josh Howlett">
      <organization>JANET(UK)</organization>
      <address>
        <postal>
          <street> </street>
          <city> </city>
          <code> </code>
          <country> </country>
        </postal>
        <phone> </phone>
        <email>Josh.Howlett@ja.net</email>
      </address>
    </author>
    <author initials="S." surname="Hartmann" fullname="Sam Hartman">
      <organization>Painless Security</organization>
      <address>
        <postal>
          <street> </street>
          <city> </city>
          <code> </code>
          <country> </country>
        </postal>
        <phone> </phone>
        <email>hartmans-ietf@mit.edu</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Nokia Siemens Networks</organization>
      <address>
        <postal>
          <street>Linnoitustie 6</street>
          <city>Espoo</city>
          <code>02600</code>
          <country>Finland</country>
        </postal>
        <phone>+358 (50) 4871445</phone>
        <email>Hannes.Tschofenig@gmx.net</email>
        <uri>http://www.tschofenig.priv.at</uri>
      </address>
    </author>
    <author fullname="Eliot Lear" initials="E." surname="Lear">
      <organization>Cisco Systems GmbH</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <region>ZH</region>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <date year="2010"/>
    <area>Internet</area>
    <workgroup>ABFAB</workgroup>
    <keyword>Internet-Draft</keyword>
    <keyword>Federated Authentication</keyword>
    <keyword>AAA</keyword>
    <keyword>RADIUS</keyword>
    <keyword>Diameter</keyword>
    <keyword>GSS-API</keyword>
    <keyword>EAP</keyword>
    <keyword>SASL</keyword>
    <abstract>
<t>Over the last decade a substantial amount of work has occurred in
  the space of federated authentication and authorization.  Most of
  this effort has focused on two common use cases: network and
  web-based access, with few common building blocks within the
  architecture.  This memo describes an architecture that makes use of
  extensions to the commonly used mechanisms for both federated and
  non-federated authentication and authorization, including
  Radius/Diameter, GSS/GS2, and SAML, to primarily address non-web
  based authentication, in a that will scale to large numbers of
  federations.
</t>
    </abstract>
  </front>

  <middle>
    <!-- ////////////////////////////////////////////////////////////////////////////////// -->

    <section anchor="introduction" title="Introduction">
<t>XXX This document is a first draft.  Comments and contributions are
  requested.
</t>
<t>The Internet makes uses of numerous authentication methods to grant
access to various resources.  These mechanisms have been generalized
and scaled over the last decade through mechanisms such as
  GS2, <xref target="OASIS.saml-core-2.0-os">Security Assertion Markup Language (SAML)</xref>,
Radius, and Diameter.  So-called "federated" access has evolved over
the last decade between web servers through such standards as SAML,
OpenID, and OAUTH, allowing entire domains of individuals to be
authorized for resources.  The key scaling points that have been
addressed are the following:
<list style="symbols">
<t>An Internet service need not copy manually authentication
  information from a domain to allow for authentication and
  authorization.
</t>
<t>Individual users are able to make use of a single credential to
  authenticate to such services.
</t>
</list>
</t>
<t>As the number of such federated services has proliferated, however,
  the role of the individual has become ambiguous in certain
  circumstances.  For example, a school might provide online access to
  grades to a parent who is also a teacher.  She must
  clearly distinguish her role upon access.  After all, she is
  probably not allowed to edit her own child's grades.
</t>
<t>Similarly, as the number of federations proliferates, it becomes
  increasingly difficult to discover which identity provider a user is
  associated with.  This is true for both the web and non-web case,
  but particularly acute for the latter ans many non-web
  authentication systems are not semantically rich enough on their own
  to allow for such ambiguities.  For instance, in the case of an
  email provider, the use of SMTP and IMAP protocols does not on its
  own provide for a way to select a federation.  However, the building
  blocks do exist to add this functionality.
</t>
<section title="Federation Description">
      <t>The typical setup for a three party protocol involves the following entities:
      </t>
      <t>
      <list style="symbols">
      <t>the End Host,</t>
      <t>the Identity Provider, and </t>
      <t>the Relying Party.</t>
      </list>
      </t>
      <t>
      These entities are illustrated graphically in <xref
        target="framework"/>.
      </t>
      <t>
        <figure title="Three Party Authentication Framework" anchor="framework">
          <artwork><![CDATA[
                       -----
                     /-     -\
                   //         \\
                   /           \
                  |             |
 ,----------\    |               |   ,---------\
 | Identity |    |               |   | Relying |
 | Provider +----+   Federation  +---+ Party   |
 `----------'    |               |   '---------'
          <      |               |        >
           \      |             |        /
            \      \           /        /
             \     \\         //       /
             \       \-     -/        /
              \        -----         /
               \                    /
                \  +------------+  /
                 \ |            | /
                  v|  End Host  |v
                   |            |
                   +------------+
                   ]]></artwork>
        </figure>
      </t>
      <t><xref
        target="framework"/> also shows the logical entity
        'Federation'.  In a federation, policy is agreed upon by some
        form of administrative management, and then instantiated through an
        operational framework that the members use, and where
        compliance is measured in some fashion.  Some deployments
        may be required to deploy message routing intermediaries, such as application layer relays or proxies, to offer the required technical functionality while in other deployments those are missing.
      </t>

      <t>Often a real world entity is associated with the end host and
        responsible for interacting with the identity provider, even if it is
        only as weak as completing a web form and confirming the verification email. The outcome of
        this initial registration step is that credentials are made available to the identity
        provider and to the end host.
        It is important to highlight that in some
        scenarios there might indeed be a human behind the device denoted as end host and in other
        cases there is no human involved in the actual protocol execution.</t>

      <t>To support the more generic deployment case, we assume that the identity provider and the relying party belong to different
        administrative domains. The nature of federation dictates that there is some form of relationship between the identity
        provider and the relying party. This is particularly important when the relying party wants
        to use information obtained from the identity provider for authorization decisions and when
        the identity provider does not want to release information to every relying party (or only
        under certain conditions). While it is possible to have a bilateral agreement between every
        identity provider and every relying party; on an Internet scale this setup requires the introduction of a
        federation concept, as the management of such pair-wise
        relationships would otherwise prove burdensome.
        While many of the non-technical aspects of such a federation, such as business practices and operational arrangements, are outside the
        scope of the IETF they still impact the architecture setup on how to ensure the dynamic establishment of trust. </t>


<t>Our key design goals are as follows:</t>
<t>
<list style="symbols">
<t>Each party of a transaction will be authenticated, and the
  principal will be authorized for access to a specific resource .</t>
<t>Means of authentication is decoupled so as to allow for multiple
  authentication methods.</t>
<t>Hence, the architecture requires no sharing of long term private
  keys.</t>
<t>The system will scale to large numbers of identity providers,
  relying parties, and users.</t>
<t>The system will be designed primarily for non-Web-based
  authentication.</t>
<t>The system will build upon existing standards, components, and
  operational practices.
</t>
</list>
</t>
      <t>Designing new three party authentication and authorization
        protocols is hard and frought with risk ofcryptographic
        flaws. Achieving widespead deployment is even more
        difficult. A lot of attention on federated access has been devoted to the Web. This document instead
        focuses on a non-Web-based environment and focuses on those protocols where HTTP is not
        used. Despite the increased excitement for layering every protocol on top of HTTP there are
        still a number of protocols available that do not use HTTP-based transports. Many of these
        protocols are lacking a native authentication and authorization framework of the style shown in
          <xref target="framework"/>.</t>

      <t>Interestingly, for network access authentication the usage of the AAA framework with RADIUS
          <xref target="RFC2865"/> and Diameter <xref target="RFC3588"/> was quite successful from a
        deployment point of view. To map the terminology used in <xref target="framework"/> to the
        AAA framework the identity provider corresponds to the AAA server, the relying party
        corresponds to the AAA client, and the technical building blocks of a federation are AAA proxies, relays
        and redirect agents
        (particularly if they are operated by third parties, such as AAA brokers and clearing
        houses). The front-end, i.e. the end host to AAA client communication, is in case of network
        access authentication offered by link layer protocols that forward authentication protocol
        exchanges back-and-forth.  An example of a large scale
          Radius-based federation
          is <eref target="http://www.eduroam.org">EDUROAM</eref>.</t>

      <t>Is it possible to design a system that builds on top of successful protocols to offer
        non-Web-based protocols with a solid starting point for authentication and authorization in
        a distributed system? </t>

</section>
    </section>


    <!-- ////////////////////////////////////////////////////////////////////////////////// -->

    <section anchor="terminology" title="Terminology">

      <t>This document uses identity management and privacy terminology from <xref target="I-D.hansen-privacy-terminology"/>.</t>

    </section>


    <!-- ////////////////////////////////////////////////////////////////////////////////// -->

    <section title="Architecture">


      <t><xref target="introduction"/> already introduced the federated access architecture, with the illustration
       of the different actors that need to interact, but it did not expand on the specifics of providing support for non-Web based applications. This section details this aspect and motivates
      design decisions. The main theme of the work described in this document is focused on re-using existing building blocks that have been deployed already and to re-arrange them in a novel way.</t>

      <t>A key design goal is the re-use an existing infrastructure,
      we build upon the AAA framework as utilized by RADIUS
      <xref target="RFC2138"/> and Diameter
      <xref target="RFC3588"/>. Since this document does not aim to
      re-describe the AAA framework the interested reader is referred
      to <xref target="RFC2904"/>. Building on the AAA infrastructure,
      and RADIUS and Diameter as protocols, modifications to that
      infrastructure is to be avoided. Also, modifications to AAA
      servers should be kept at a minimum.</t> 
<t>The astute reader will notice that RADIUS and Diameter have
  substantially similar characteristics.  Why not pick one?  A key
  difference is that today RADIUS is largely transported upon TCP, and
  its use is largely, though not exclusively, intra-domain.  Diameter
  itself was designed to scale to broader uses.  We leave as a
  deployment decision, which protocol will be appropriate.
</t>
      <t>Experience has taught us one key security and scalability requirement:
        it is important that the relying party not get in possession of the
        long-term secret of the entity being authenticated by the AAA
        server. Aside from a valuable secret being exposed, a
        synchronization problem can also often develop.
Since there is
        no single authentication mechanism that will be used everywhere there is another associated
        requirement: The authentication framework must allow for the flexible integration of
        authentication mechanisms. For instance, some identity
        providers may require hardware tokens while others may use
        passwords.  A service provider would want to support both
        sorts of federations, and others.</t>

      <t>Fortunately, these requirements can be met by utilizing standardized and successfully deployed technology, namely by the Extensible Authentication
            Protocol (EAP) framework
            <xref target="RFC3748"/>.
      <xref
          target="abfab-arch"/> illustrates the integration graphically.</t>

<t>  EAP is an end-to-end framework; it provides for two-way
            communication between a peer (i.e,service client or
            principal) through the
            authenticator (i.e., service provider) to the back-end (i.e.,
            identity provider).  Conveniently, this is precisely the
            communication path that is needed for federated identity.
        Although EAP support is already integrated in AAA systems (see
            <xref target="RFC3579"/> and <xref target="RFC4072"/>)
            several challenges remain: one is to carry EAP payloads
            from the end host to the relying party, and the other is
            to determine where identity provider.  We will look at
            these challenges in turn. [XXX but we don't get to
            discovery just yet.]</t>

      <t>
        Although this architecture assumes updates to both the relying party as well as to the end host for application integration, those changes
        are kept at a minimum.  A mechanism that can
        demonstrate deployment benefits (based on ease of update of existing
        software, low implementation effort, etc.)is preferred and there may be a need
        to specify multiple mechanisms to support the range of different
        deployment scenarios.
        </t>

      <t>There are a number of ways for encapsulating EAP into an application protocol. For ease of integration with a wide range of non-Web based application protocols the usage of the GSS-API was chosen. Encapsulating EAP into the GSS-API also allows EAP to be used in SASL. A description of the technical specification can be found in <xref target="I-D.ietf-abfab-gss-eap"/>. Other alternatives exist as well and may be considered later, such as "TLS using EAP Authentication" <xref target="I-D.nir-tls-eap"/>.</t>

       <t>
        <figure title="Architecture for Federated Access of non-Web based Applications" anchor="abfab-arch">
          <artwork><![CDATA[
                                 +--------------+
                                 |  AAA Server  |
                                 |  (Identity   |
                                 |  Provider)   |
                                 +-^----------^-+
                                   * EAP      | RADIUS/
                                   *          | Diameter
                                 --v----------v--
                              ///                \\\
                            //                      \\   ***
                           |        Federation        |  back-
                           |                          |  end
                            \\                      //   ***
                              \\\                ///
                                 --^----------^--
                                   * EAP      | RADIUS/
                 Application       *          | Diameter
+-------------+  Data            +-v----------v--+
|             |<---------------->|               |
| Client      |  EAP/EAP Method  | Server Side   |
| Application |<****************>| Application   |
| @ End Host  |  GSS-API         |(Relying Party)|
|             |<---------------->|               |
|             |  Application     |               |
|             |  Protocol        |               |
|             |<================>|               |
+-------------+                  +---------------+
               *** front-end ***

Legend:

 <****>: End-to-end exchange
 <---->: Hop-by-hop exchange
 <====>: Protocol through which GSS-API/GS2 exchanges are tunnelled
]]></artwork>
        </figure>
      </t>
    </section>

    <!-- ////////////////////////////////////////////////////////////////////////////////// -->

    <section anchor="privacy-cons" title="Privacy Considerations">
      <t>Sharing identity information may lead to privacy violations. A future verison of this document
      will provide a discussion of privacy considerations in a federated access environment.</t>
    </section>

    <!-- ////////////////////////////////////////////////////////////////////////////////// -->

    <section anchor="sec-cons" title="Security Considerations">
      <t>This entire document is about security. A future version of the document will highlight some important security concepts.</t>
    </section>


    <!-- ////////////////////////////////////////////////////////////////////////////////// -->

    <section anchor="iana" title="IANA Considerations">
      <t>This document does not require actions by IANA.</t>
    </section>

    <!-- ////////////////////////////////////////////////////////////////////////////////// -->

    <section title="Acknowledgments">
<!--      <t>The author would like to thank Sam Hartman for a discussion about all aspects of the
        "Federated Authentication Beyond The Web" effort when he was visiting MIT in June 2010.</t>-->
      <t>We would like to thank Mayutan Arumaithurai and        Klaas Wierenga for their feedback. Additionally, we would like to
      thank Eve Maler, Nicolas Williams, Bob Morgan, Scott Cantor, Jim Fenton, and Luke Howard for their feedback on the
      federation terminology question.</t>
      <t>Furthermore, we would like to thank Klaas Wierenga for his review of the pre-00 draft version.</t>
    </section>

    <!-- ////////////////////////////////////////////////////////////////////////////////// -->
  </middle>

  <!-- ////////////////////////////////////////////////////////////////////////////////// -->

  <back>
    <references title="Normative References">
      &RFC2865; &RFC3588;
      &RFC3748;  &RFC3579; &RFC4072;
      &I-D.hansen-privacy-terminology;
      &I-D.ietf-abfab-gss-eap;
    </references>

    <references title="Informative References">
      &I-D.nir-tls-eap;
      &RFC2138;
      &SAML20;
      &RFC2904;
    </references>
  </back>
</rfc>
