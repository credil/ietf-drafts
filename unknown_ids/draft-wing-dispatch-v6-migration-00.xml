<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc3484 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3484.xml">
<!ENTITY rfc4091 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4091.xml">
<!ENTITY rfc5245 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5245.xml">
<!ENTITY rfc4961 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4961.xml">
<!ENTITY rfc4213 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4213.xml">
<!ENTITY I-D.hutton-mmusic-icemicrolite SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.hutton-mmusic-icemicrolite.xml">
<!ENTITY I-D.wing-http-new-tech SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.wing-http-new-tech.xml">
<!ENTITY I-D.ietf-mmusic-media-path-middleboxes SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-mmusic-media-path-middleboxes.xml">
<!ENTITY I-D.boucadair-mmusic-altc SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.boucadair-mmusic-altc.xml">
<!ENTITY I-D.ietf-mmusic-sdp-capability-negotiation SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-mmusic-sdp-capability-negotiation.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc rfcprocack="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc sortrefs="yes" ?>
<?rfc colonspace='yes' ?>
<?rfc tocindent='yes' ?>
<rfc category="std" docName="draft-wing-dispatch-v6-migration-00"
     ipr="trust200902">
  <front>
    <title abbrev="Happy Eardrums: SIP Media IPv6 Migration">Migrating SIP to
    IPv6 Media Without Connectivity Checks</title>

    <author fullname="Dan Wing" initials="D." surname="Wing">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>170 West Tasman Drive</street>

          <city>San Jose</city>

          <region>CA</region>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <email>dwing@cisco.com</email>
      </address>
    </author>

    <author fullname="Andrew Yourtchenko" initials="A." surname="Yourtchenko">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>6a de Kleetlaan</street>

          <city></city>

          <region>Diegem</region>

          <code>1831</code>

          <country>Belgium</country>
        </postal>

        <email>ayourtch@cisco.com</email>
      </address>
    </author>

    <date year="2010" />

    <workgroup>DISPATCH working group</workgroup>

    <abstract>
      <t>During the migration from IPv4 to IPv6, it is anticipated that an
      IPv6 path might be broken for a variety of reasons, causing endpoints to
      not receive RTP data. Connectivity checks would detect and avoid the
      user noticing such a problem, but there is industry reluctance to
      implement connectivity checks.</t>

      <t>This document describes a mechanism allowing dual-stack SIP endpoints
      to attempt communications over IPv6 and fall back to IPv4 if the IPv6
      path is not working. The mechanism does not require connectivity
      checks.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>During the deployment of a dual-stack network and dual-stack SIP
      endpoints, the IPv4 network is likely to remain more robust and reliable
      than the newly-deployed IPv6 network. An IPv6 network might be a
      disconnected island (not connected to another IPv6 network) or due to
      human error a firewall rule or routing error might prevent two IPv6
      networks from communicating. Non-SIP applications and their underlying
      hosts typically follow <xref target="RFC3484">IPv6 address
      selection</xref> which prefers IPv6 over IPv4, but will try IPv4 after
      timing out connection attempts to the IPv6 address. This timeout obvious
      negative effects on the user's experience to such a degree that IPv6 has
      been avoided by many large content providers on the Internet <xref
      target="whitelist"></xref>.</t>

      <t>To achieve a similar function on the media plane, SIP endpoints are
      expected to use <xref target="RFC5245">connectivity checks</xref> to
      ensure there is IPv6 (or IPv4) connectivity. ICE has an advantage over
      the technique currently used by web browser, in that ICE does not wait
      for a user-noticeable timeout before trying other addresses. However,
      ICE is considered overkill for the problem of migrating to IPv6 because
      of the overhead of timers, interaction with existing media state
      machines, and CPU impact of SHA1 on large devices processing many
      sessions and on small devices.</t>

      <t>The mechanism described in this document avoids these problems by
      combining the idea of "media-latching" (commonly used by SBCs, <xref
      target="I-D.ietf-mmusic-media-path-middleboxes"></xref>) with the
      preference for IPv6, while allowing dual-stack hosts the ability to fall
      back to IPv4. In this way, dual-stack endpoints do not suffer broken
      media if the IPv6 network between two endpoints is down.</t>
    </section>

    <section title="Notational Conventions">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref>.</t>
    </section>

    <section title="Operation for connectionless media (RTP over UDP)">
      <t>Offers and Answers are constructed containing both IPv6 and IPv4
      addresses, using an agreed-upon SDP syntax (see <xref
      target="sec_sdp"></xref>). When a dual-stack SIP UA has media to send,
      it sends the media over IPv6, while at the same time simultaneously
      sending T milliseconds worth of data (<xref
      target="sec_asymmetric"></xref>) of the media over IPv4 using the same
      RTP sequence numbers and timestamps as thats RTP data sent over
      IPv6.</t>

      <t><list style="empty">
          <t>Note: an alternative is for y% of packets to be sent over IPv6,
          and x% of packets to be sent over IPv4 (x+y=100%). For example,
          50%/50%, 90%/10%, or 10%/90%. This has an advantage that we don't
          double the bandwidth used; however, it has the drawback that if IPv6
          is broken, it is noticeable to the user.</t>
        </list></t>

      <t>With two endpoints, Alice and Bob, there are four situations:</t>

      <t><list style="numbers">
          <t>IPv6 from Alice to Bob is working and IPv6 from Bob to Alice is
          working. This is the only situation handled by other proposed
          techniques which do not perform connectivity checks.</t>

          <t>IPv6 from Alice to Bob is working, but IPv6 from Bob to Alice is
          failing</t>

          <t>IPv6 from Alice to Bob is failing, but IPv6 from Bob to Alice is
          working</t>

          <t>IPv6 from Alice to Bob is failing, and IPv6 from Bob to Alice is
          failing</t>
        </list></t>

      <t>The success scenario (1) is straightforward. To deal with the failure
      scenarios (2-4), the following procedures are followed by the
      endpoints:</t>

      <t>If a SIP endpoints has received T/2 milliseconds worth of RTP data
      over IPv4, and no packets over IPv6, it knows the IPv6 path from its
      peer is not working (it is the receiving peer in scenario 2, 3, or 4,
      above). It assumes the IPv6 path to its peer is also not working, and
      assumes the IPv4 path to its peer is working. So, it ceases sending RTP
      (and RTCP) over IPv6 and sends all subsequent RTP (and RTCP) over
      IPv4.</t>

      <t>If a SIP endpoint is sending RTP over IPv6 and receives ICMP hard or
      soft errors, it immediately stops sending RTP over IPv6 and starts
      sending RTP (and RTCP) over IPv4. ICMP errors received from sending IPv4
      are processed normally (they are usually ignored).</t>

      <t>Both endpoints MUST support <xref target="RFC4961">Symmetric RTP and
      RTCP</xref>, which is already widely implemented and also a requirement
      of <xref target="I-D.ietf-mmusic-media-path-middleboxes">SBC 'media
      latching'</xref>.</t>
    </section>

    <section title="Operation, connection-oriented media (TCP)">
      <t>First completed TCP handshake wins. [[To be completed.]]</t>
    </section>

    <section title="Considerations for recvonly/sendonly/inactive">
      <t>An endpoint only sends RTP when it normally needs to send RTP. Thus,
      if an endpoint is currently in 'recvonly' or 'inactive', it won't send
      RTP. However, it may of course be receiving RTP over IPv6 or over IPv4.
      This provides an indication to the receiver that the (incoming) IPv6 or
      IPv4 path is working. Just as if it was sending RTP, the receipt of only
      IPvX indicates the IPvY path is broken. Thus, when it does eventually
      need to send RTP packets, it SHOULD only send using the working (IPvX)
      path.</t>
    </section>

    <section anchor="sec_asymmetric"
             title="Bandwidth, Delay, and Asymmetric Results">
      <t>If IPv6 is not working and a switchover to IPv4 occurs, there will be
      an audible artifact (or visible artifact, if using video). This can be
      avoided by sending data simultaneously over IPv4 and over IPv6 until
      both ends see IPv6 traffic and both ends stop sending over IPv4.
      However, this causes twice the bandwidth consumption at the beginning of
      the phone call and is undesirable. That is why only "T" milliseconds of
      traffic are proposed to be sent.</t>

      <t>It is possible that IPv6 works in one direction but not the other.
      This can result in a false positive on one endpoint. When this occurs,
      the other endpoint will have received no IPv6 packets (but will have
      received IPv4 packets), and will thus switch over to IPv4. So, this is
      self correcting and the traffic will be sent over IPv4.</t>
    </section>

    <section anchor="sec_sdp" title="Session Description Protocol">
      <t>A new SDP session-level attribute, happy-eardrums, is defined. It
      contains one value, T, expressed in milliseconds. Presence of this
      attribute indicates the endpoint supports the mechanism described in
      this document. The happy-eardrums attribute adheres to the RFC 4566
      "attribute" production. The ABNF syntax of happy-eardrums is provided
      below:</t>

      <figure>
        <artwork align="center"><![CDATA[
he-attribute = "a=happy-eardrums=" he-value
he-value     = 1*5DIGIT
]]></artwork>
      </figure>

      <t>Additionally, it is necessary to have SDP which encodes the IPv6
      address and port. <xref target="RFC4091">ANAT</xref> has poor backwards
      compatibility with devices that do not understand ANAT, thus it SHOULD
      NOT be used. Superior to ANAT are the encodings described in <xref
      target="I-D.hutton-mmusic-icemicrolite"></xref>, <xref
      target="I-D.boucadair-mmusic-altc"></xref>, and <xref
      target="I-D.ietf-mmusic-sdp-capability-negotiation"></xref>.</t>

      <t>However, for the mechanism in this draft to function, the Answer MUST
      include both IPv6 and IPv4 addresses in its answer. All of the existing
      mechanisms (enumerated above) do not provide this functionality. For
      example, ANAT recommends the answerer set the port number to 0 in the
      answer, and <xref target="I-D.hutton-mmusic-icemicrolite"></xref> has
      the answer only include the candidate address family. Thus, existing O/A
      procedures for communicating IPv6 address do not work, as-is, with the
      mechanism proposed in this document.</t>

      <t><list style="empty">
          <t>Note: this draft is not dependent on any particular SDP encoding
          of IPv6. But, of course, it does require that all end nodes use the
          same SDP encoding of IPv6. A consensus on backwards-compatible IPv6
          SDP encoding still needs to be reached.</t>
        </list></t>
    </section>

    <section title="Sending SIP Re-Invite">
      <t>To provide information to on-path devices that elevate the QoS for
      certain flows, and to release resources on the other endpoint, an
      endpoint MUST send a SIP re-INVITE after it has decided which IP address
      family to use. [[details to be added.]]</t>
    </section>

    <section anchor="security_considerations" title="Security Considerations">
      <t>An attacker, sending UDP data on IPv6 to a newly-starting endpoint
      within the negotiated T time, could cause the endpoint to think IPv6 is
      working when IPv6 is failing.</t>
    </section>

    <section title="Acknowledgements">
      <t>This idea was inspired from discussions with attendees and invitees
      to the SIP/IPv6 Bar BoF at IETF78.</t>

      <t>Thanks to Simon Perreault for his review. Thanks to Marc
      Petit-Huguenin for his review, and for suggesting the 90%/10% media
      split. Thanks to Muthu Perumal for suggesting re-invite after deciding
      which address family works, and explaining problem with semantics of
      current mechanisms to exchange IPv6 address in SDP.</t>

      <t>The nickname of this draft is derived from Happy Eyeballs, which
      provides quick delivery of IPv6 or IPv4 content to HTTP browsers <xref
      target="I-D.wing-http-new-tech"></xref>.</t>
    </section>

    <section title="IANA Considerations">
      <t>Register new SDP attribute.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &rfc2119;

      &rfc3484;

      &rfc4961;
    </references>

    <references title="Informational References">
      &rfc5245;

      &rfc4091;

      &I-D.wing-http-new-tech;

      &I-D.ietf-mmusic-media-path-middleboxes;

      &I-D.hutton-mmusic-icemicrolite;

      &I-D.boucadair-mmusic-altc;

      &I-D.ietf-mmusic-sdp-capability-negotiation;

      <reference anchor="whitelist"
                 target="http://www.google.com/intl/en/ipv6">
        <front>
          <title>Google IPv6 DNS Whitelist</title>

          <author fullname="Google" surname="Google">
            <organization></organization>
          </author>

          <date month="March" year="2008" />
        </front>
      </reference>
    </references>
  </back>
</rfc>
