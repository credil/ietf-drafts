<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [


    <!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
    <!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
    <!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
    <!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="info" docName="draft-hallambaker-dpls-00" ipr="noModificationTrust200902">

    <front>


        <title>DNS Packet Layer Security</title>
        <author fullname="Phillip Hallam-Baker" initials="P. M."
                surname="Hallam-Baker">
            <organization>Comodo Inc.</organization>
            <address>
                <email>philliph@comodo.com</email>
            </address>
        </author>
        <author fullname="Brian Smith" initials="B."
                 surname="Smith">
            <organization>DNS.com</organization>
            <address>
                <email>brian@dns.com</email>
            </address>
        </author>
        <date month="October" year="2010" />

        <area>General</area>
        <workgroup>Internet Engineering Task Force</workgroup>
        <keyword>DNS</keyword>

        <abstract>
            <t>
                A mechanism for encrypting and authenticating communication
                between a DNS Client and server is presented. The mechanism
                is designed to compliment use of DNSSEC in the case where 
                DNSSEC validation is performed at the resolver and it is not
                desirable to repeat validation at the server.
            </t>
        </abstract>
    </front>

    <middle>
        <section title="Definitions">
            <t>The following definitions are used in this document:</t>
            <t>
                <list style="hanging">
                    <t hangText="DNS Resource Record">
                        A DNS Resource Record as defined in
                        [TBS]
                    </t>
                </list>

            </t>



            <section title="Requirements Language">
                <t>
                    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
                    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
                    document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.
                </t>
            </section>
        </section>
        <section title="Purpose">
            <t>
                DNS Packet Layer Security (DPLS) enables efficient encryption and 
                authentication of DNS protocol messages. In particular, DPLS is 
                optimized for use in cases in which a DNS client expects to exchange
                a large number of messages with a particular DNS server as is typical 
                of a DNS client that makes us of a DNS resolver.
            </t>
            <t>
                In the prefered DNS deployment scenario, all DNS traffic is intermediated
                by a DNS caching resolver in order to minimize load on the authoritative
                name servers.
            </t>
            <t>
                DPLS is complimentary to use of DNSSEC. DNSSEC is designed to permit
                authoritative name servers to perform all necessary public key operations 
                offline. The DNS zone is signed before it is handed toi the authoritative 
                name server for publication. This approach minimizes impact on the 
                publishers of DNS data but maximizes impact on relying parties which
                may be required to perform multiple public key verification operations
                for each DNS lookup. In particular the DNS Client that originates a 
                DNS request is required to perform multiple signature validations per
                new request with little chance of being able to mitigate performance impact
                through caching.
            </t>
            <t>
                DPLS allows for more efficient secure DNS resolution by enabling a trusted
                resolver to efficiently authenticate communiction with a client. Instead
                of re-verifying the record chain, the client relies on the verification
                performed at the resolver.
            </t>
            <t>
                A secondary advantage of using DPLS is that it enables traffic between the
                DNS client and resolver to be encrypted, thus reducing exposure to
                confidentiality attacks.
            </t>
            <t>
                In both cases, the advantage of DPLS is enhanced when deployed at a
                caching resolver that caches the result of DNSSEC validation operations
                and performs pre-fetches on frequently used DNS RRs before expiry. This
                approach minimizes response latency and correlation between encrypted traffic
                between the DNS resolver and the client and external DNS traffic exchanged
                en-clair
            </t>
            <t>
                When deployed at a caching resolver with a very high percentage of cache
                hits, the performance of a DNSSEC/DPLS server approaches the performance
                of the same system without using DNSSEC or DPLS.
            </t>
            <section title="Use Scenarios">
                <t>
                    Use scenarios for DPLS are drawn from observed patterns of using DNS. 
                </t>
                <t>
                    In particular note is taken of the fact that accepted practice at 
                    enterprise Internet deployment differs in significant respects from
                    the traditional DNS deployment scenario in which confidentiality
                    is not a concern and in particular adversaried are deemed to be 
                    capable of performing unrestricted traffic analysis.
                </t>
                <section title="Trusted Resolver">
                    <t>
                    In the traditional model of DNS, client access to the DNS is always mediated
                    through a resolver. Although the DNS resolver is performing a trusted
                    role, the use of unauthenticated requests and responses mean that the 
                    resolver is not trustworthy.
                    </t>

                </section>
                <section title="Split Horizon DNS">
                    <t>
                    [many enterprises deploy a split horizon DNS in which internal DNS entries
                    are not visible to unauthorized parties. This is typically implemented today 
                    using very coarse level access control schemes in which a party has either 
                    full access to a domain node or does not.]
                    </t>
                    <t>
                    [A fine grained access control model in which individual hosts and/or 
                    end users access can be controlled is highly desirable]
                    </t>
                </section>
                <section title="Curated DNS">
                    <t>
                        [In the traditional model of DNS, every Internet host has access to
                        the public DNS records published by every DNS name owner regardless
                        of the trustworthiness of the publisher.
                    </t>
                    <t>
                    [In general a relying party wants to have unrestricted access to the
                    parts of the Internet known to be safe and does not want to risk accessing 
                    domains known to be primarily used for criminal purposes such as distribution
                    of malware and bank fraud.
                    </t>
                </section>              
            </section>
            <section title="Security Requirements">
                <t>
                Security model is that the trust relationship between the client and resolver is
                supreme and superceeds any trust relationship that the network operator might attempt 
                to impose.
                </t>
                
                <section title="Confidential DNS Data">
                    <t>
                        Some or all of the data in a DNS zone
                        MAY be subject to confidentiality requirements.
                    </t>
                    <t>
                        For example, in a split horizon DNS configuration a perimeter security 
                        model is employed. The only DNS data accessible from the public network 
                        is data that corresponds to public Internet hosts. Access to DNS data
                        for private hosts is only available within a security perimeter established
                        by means of a firewall or VPN.
                    </t>
                    <t>
                        Split horizon DNS has proved to be an essential enterprise security
                        control since the deployment and naming of hosts can reveal a lot
                        of security sensitive information. A speculator noting the addition 
                        of new hosts named sales31, sales32... sales50 may draw one conclusion 
                        while the addition of a host named secaudit may draw another.
                    </t>
                    <t>
                        In a default-deny security configuration access is only granted on
                        a need to know basis. Deployment of a default deny infrastructure 
                        requires access control at the level of individual users and hosts.
                    </t>
                    <t>
                        Requirement: Confidentiality of DNS data.
                    </t>

                </section>

                <section title="Integrity of requests">
                    <t>
                        The requirement for fine grained access control entails a requirement
                        for identification of individual
                        requestors at the host or user level and authentication of their requests.
                    </t>
                    <t>
                        Requirement: Authentication of Requestors.
                    </t>
                    <t>
                        Requirement: Authentication of Requests.
                    </t>
                </section>
                <section title="Integrity of responses">
                    <t>
                        A DNS resolver performs a trusted role in the Internet architecture.
                        Authenticity of responses is thus a primary security concern.
                    </t>
                    <t>
                        Requirement: Authentication of Responder.
                    </t>
                    <t>
                        Requirement: Authentication of Response.
                    </t>
                </section>
                <section title="Confidentiality of requests">
                    <t>
                        Request data may disclose confidential information. 
                    </t>
                    <t>
                        Requirement: Optional Encryption of Requests.
                    </t>
                </section>
                <section title="Confidentiality of responses">
                    <t>
                        Response data may disclose confidential information.
                    </t>
                    <t>
                        Requirement: Optional Encryption of Responses.
                    </t>
                </section>
                <section title="Service">
                    <t></t>
                </section>


            </section>
            <section title="Constraints">
                <t>

                </t>
                <section title="Server">
                    <t>
                    [A DNS resolver is typically high throughput and must avoid the need to perform 
                    public key operations at time-critical moments. ]
                    </t>
                    <t>
                    [Support for high volume resolvers is particularly important as the efficiency
                    of the protocol rests on a high cache hit rate]
                    </t>
                    <t>
                    [Server cannot support any per client state. This rules out use of IPSEC and 
                    TKEY]
                    </t>
                </section>
                <section title="Client">
                    <t>
                    [Avoid need for extensive state]
                    </t>
                    <t>
                    [Allow for tunnelling an bypass.
                    </t>
                    <t>
                    [Enable easy configuration and audit of trust configuration
                    </t>
                </section>
                <section title="Network">
                    <t>
                        [Firewalls louse things up]
                    </t>
                    <t>
                        [Allow for tunnelling and bypass to prevent unintentional blocking]
                    </t>
                    <t>
                        [But traffic should be identifiable by DPLS aware firewall.
                    </t>
                    <t>
                        [Response truncation issues, most DNS requests fit in one small
                        packet, more efficient to allow for long responses and enable 
                        effective control of fragmentation]
                    </t>
                </section>
            </section>

            <section title="Engineering Requirements">
                <t>
                    [No server side state means a ticket approach]
                </t>
                <t>
                    [Try to avoid need for new key exchange protocol]
                </t>

            </section>
        </section>
        <section title="Discovery">
            <t>
                [A client discovers the existence of a DPLS service option by
                means of an ESRV query for the _dns._udp service.
            </t>
            <t>
                [The service option for DPLS is _dpls._ws]
            </t>
            <figure>
                <artwork>
                    <![CDATA[_dns._udp.example.com   ESRV "prot=_dpls._ws"]]>
                </artwork>
            </figure>
        </section>
        <section title="Key Exchange">
            <t>
                [Server specifies the key exchange mechanism(s) supported by means of the
                ESRV exch property. Initially, only the TLS exchange mechanism is defined]
            </t>
        
            <t>
                [Although TKEY is defined as a key exchange mechanism in RFC2390, the description in 
                that document falls far short of being implemented and the document has not been
                updated in ten years to keep pace with developments in cryptography since]
            </t>
            <t>
                [Description and implementation of a new version of TKEY that supported 
                appropriate cryptographic algorithms and key exchange schemes requires considerably
                more effort than reuse of TLS that already has these features.
            </t>

            <section title="TLS">
                <t>
                    [Client uses HTTP/TLS with RFC4507 Session
                    Resumption without Server-Side State options
                </t>
                <t>
                    [Client sends a SessionTicket extension.]
                </t>
                <t>
                    Server is responsible for delivering a ticket that will work with the 
                    DNS service.
                </t>
                <t>
                    Server may employ TLS client auth to authenticate the request, alternatively
                    HTTP authenticate option may be employed.
                </t>
                <t>
                    At conclusion of the protocol, the server MAY specify an alternative set of 
                    IP addresses for the DNS service, plus control information such as an expiry
                    interval for the session parameters.
                </t>
                <t>
                    It is envisaged that the expiry interval would typically be of the order months 
                    to years and that re-authentication should be automatic and not require
                    new user authentication.
                </t>

            </section>



        </section>
        <section title="Transport">
            <t>
                One of the principle motivations behind the proposal for a new cryptographic 
                packet format is the unique nature of DNS responses and requests.
            </t>
            <t>
                In particular, a DNS request is typically very small, almost never exceeding
                the 500 byte limit specified for UDP transport in the original protocol. 
                DNS responses are usually smaller than 500 bytes but may exceed the 1400 
                byte limit set by the Ethernet MTU, particularly if DNSSEC is in employed
                but should not normally exceed 4048 bits.
            </t>

            <t>
                The UPDP packet transport is designed to support the following criteria
                when used in conjunction with a network offering an MTU of at least
                1500 bytes (i.e. ethernet)
            </t>
            <t>
                <list>
                    <t>Requests of 500 bytes or less</t>
                    <t>Responses of 32768 bytes or less</t>
                </list>
            </t>
            <section title="Field Encoding">
                <t>
                    Each field except for Version is encoded in length:data format as follows:
                </t>
                <t>
                    If the first bit of the first byte in the length field is 0 then the
                    length field is one byte long and the lower 7 bits specify the length of
                    the following data field in octets. Otherwise the lower 7 bits of the
                    first byte specify the most significant byte and the following octet
                    specifies the least significant byte of a two byte length field
                    specifying the number of octets that follow.
                </t>
            </section>
            <section title="Message Format">
                <t>
                    <list>
                        <t>
                            Header
                        </t>
                        <t>
                            <list>
                                <t>Version (MUST be 0)</t>
                                <t>Flags</t>
                                <t>Request Identifier</t>
                                <t>Initialization Vector</t>
                                <t>Request Data (only for requests)</t>

                            </list>
                        </t>
                        <t>
                            Authenticated Data
                        </t>
                        <t>
                            <list>
                                <t>MAC</t>
                                <t>Data or Encrypted Data</t>
                            </list>
                        </t>
                    </list>
                </t>
                <section title="Version">
                    <t>The version field is the only fied length field used in the
                    packet format and MUST be set to 0 for this version of the
                    packet format.</t>
                </section>
                <section title="Flags">
                    <t>The following flags values are specified</t>
                    <t>
                        <list style="hanging">
                            <t  hangText ="4-0">Packet Count</t>
                            <t  hangText ="5">Not Encrypted (1) or Encrypted (0)</t>
                            <t  hangText ="6">Continuation  (1) or Initial packet (0)</t>
                            <t  hangText ="7">Request (1) or Response (0)</t>
                            <t  hangText ="8">Error (1) or Success (0)</t>                            
                        </list>
                    </t>
                    <t>
                        In an initial packet, the packet count specifies the total number of
                        packets across which the message is spread excluding the initial
                        packet. In continuation packets the packet count specifies the
                        sequence number of the packet.
                    </t>
                    <t>
                        Flag values that are unspecified are assumed to be 0. thus a 
                        successful, encrypted response that fits in a single packet
                        will have all flags set to zero and a flag length specifier of 0x00.
                    </t>
                </section>
                <section title="Request Identifier">
                    <t>
                        In a request the request identifier is value assigned by the client to
                        differentiate requests and responses. Since the request identifier is
                        only used for this purpose and not as a weak form of authentication,
                        the request identifier does not need to be any larger than is necessary
                        to prevent ambiguity.
                    </t>
                    <t>
                        [Note: the Request Identifier is only required if continuation packets 
                        are in use and could possibly be eliminated by combining it with the 
                        IV]
                    </t>
                </section>
                <section title="Initialization Vector">
                    <t>
                        The Initialization Vector (IV) is generated by the client and serves as 
                        a nonce for use in the authentication mechanism and an Initialization
                        Vector when encryption is in use.
                    </t>
                    <t>
                        The IV specified in a response MUST match that specified in the
                        corresponding request.
                    </t>
                </section>
                <section title="Request Data">
                    <t>
                        Additional information is required in a request to enable the 
                        server to establish the cryptographic context.
                    </t>
                    <t>
                        <list>
                            <t>Server ticket</t>
                            <t>MTU</t>
                        </list>
                    </t>
                    <section title="Server ticket">
                        <t>
                            The server ticket established during the key exchange phase.
                        </t>
                        <t>
                            The server ticket carries all the state that the server considers 
                            necessary to locate the keys required for the necessary
                            authentication, authorization and cryptographic operations.
                        </t>
                    </section>

                    <section title="MTU">
                        <t>
                            The Maximum Transmission Unit for the network link. 
                            If the value 00 is specified, the MTU is unspecified.
                        </t>
                        <t>
                            A client MUST NOT specify a value less than 512 bytes 
                            for the MTU. A client SHOULD NOT specify an MTU value 
                            unless it is known that a larger packet is either certain
                            to fail or very likely to fail.
                        </t>
                        <t>
                            A server MUST NOT generate response packets larger than
                            the specified MTU.
                        </t>
                        <t>
                            In normal circumstances, specification of MTUs less than 
                            1452 bytes (the Ethernet MTU minus the IPv6 header length
                            minus the UDP header length) is not necessary.
                        </t>
                        <t>
                            In the case that the MTU size is unspecified, 
                            servers SHOULD attempt to select an MTU size that balances the 
                            overhead of sending additional packets and the need to 
                            avoid UDP packet fragmentation.
                        </t>
                    </section>
                </section>

                <section title="Authenticated Data">
                    <t>
                        The authernticated data section consists of the MAC field and
                        the Data section.
                    </t>

                    <section title="MAC">
                        <t>
                            The MAC value is only specified in the first packet and is calculated over
                            the header of the initial packet concatenated
                            to the data section. Continuation header data is ignored in
                            calculating the MAC value. 
                        </t>
                        <t>
                            The Message Authentication Code calculated according to the
                            cryptographic
                            algorithms agreed in the key negotiation phase. The key
                            used is the client_write_MAC_secret in the case of a request
                            and the server_write_MAC_secret in the case of a response.
                        </t>
                        <t>
                            There is no need to specify the cryptographic algorithm since
                            a server that is capable of supporting multiple algorithms MAY encode
                            the algorithm information in the ticket.
                        </t>

                    </section>                    
                    <section title="Authentication Only Data">
                        <t>
                            The data section consists of the DNS request or response data.
                        </t>
                        <t>
                            If the DNS data is too large to allow a single packet to be used, 
                            the data is partitioned into segments so that each segment is small
                            enough to fit within the specified MTU.
                        </t>
                    </section>
                    <section title="Authentication and Encryption Data">
                        <t>
                            The entire authenticated data section (MAC and data) is encrypted
                            under the client_write_key in the case of a request or the
                            server_write_key in the case of a response.
                        </t>
                    </section>
                </section>                                               
            </section>
            <section title="Continuation Packet">
                <t>
                    If the data section of a response is larger than the MTU specified 
                    in the request, the additional data is sent as continuation
                    packets.
                </t>
                <t>
                    DNS clients MUST NOT issue requests with continuation packets unless
                    the server has stated that they will be accepted via means out of 
                    scope for this draft.
                </t>

                <t>

                    <list>
                        <t>
                            Header
                        </t>
                        <t>
                            <list>
                                <t>Version (MUST be 0)</t>
                                <t>Flags</t>
                                <t>Request Identifier</t>
                            </list>
                        </t>                        
                        <t>Data</t>
                    </list>
                </t>

                <section title="Flags">
                    <t>
                        The flags value set in a continuation packet enables the 
                        receiver to match requests and responses and 
                        re-assemble data segments in the correct sequence.
                    </t>
                    <t>
                        <list style="hanging">
                            <t  hangText ="4-0">Packet Number</t>
                            <t  hangText ="5">Ignored</t>
                            <t  hangText ="6">MUST be 1</t>
                            <t  hangText ="7">Request (1) or Response (0)</t>
                        </list>
                    </t>
                </section>
                <section title="Request Identifier">
                    <t>
                        Value must match that specified in the initial packet.
                    </t>
                </section>
                <section title="Data">
                    <t>
                        The continuation data.
                    </t>
                </section>

            </section>



        </section>
        <section title="Security Considerations">
            <t>
                [This will need considerable expansion]
            </t>
            <section title="Trusted Resolver">
                <t>
                    The DNS server performs a trusted role in the standard DNS model but
                    is not required to be trusted in the end-to-end model of DNSSEC deployment.
                </t>
                <t>
                    DPLS is designed to support a configuration where the DNS resolver is trusted
                    to perform DNSSEC operations on behalf of the client.
                </t>
            </section>
            <section title="Resolver Substitution">
                <t>
                    DPLS provides for server authentication in all cases and mutual authentication
                    when client authentication is employed.
                </t>
            </section>
        </section>

        <section title="IANA Considerations">
            <t>
                Will need to establish a registry for the flags values
            </t>
            <t>
                Will need to register DPLP as a protocol prefix.
            </t>
        </section>
    </middle>
    <back>
        <references title="Normative References">
            &RFC2119;
        </references>

        <references title="Non-Normative References">
            &RFC3552;  


        </references>
    </back>
</rfc>
