


Network Working Group                                    P. Hallam-Baker
Internet-Draft                                              VeriSign Inc
Intended status: Informational                             March 3, 2009
Expires: September 4, 2009


                         OCSP Algorithm Agility
                     draft-ietf-pkix-ocspagility-00

Status of this Memo

   This Internet-Draft is submitted to IETF in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on September 4, 2009.

Copyright Notice

   Copyright (c) 2009 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents in effect on the date of
   publication of this document (http://trustee.ietf.org/license-info).
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Abstract

   The OSCP specification defined in RFC 2560 requires server responses
   to be signed but does not specify a mechanism for selecting the
   signature algorithm to be used leading to possible interoperability



Hallam-Baker            Expires September 4, 2009               [Page 1]

Internet-Draft           OCSP Algorithm Agility               March 2009


   failures in contexts where multiple signature algorithms are in use.
   This document specifies an algorithm for server signature algorithm
   selection and an extension that allows a client to advise a server
   that specific signature algorithms are supported.


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . 3
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . . . 3
   2.  OCSP Algorithm Agility Requirements . . . . . . . . . . . . . . 3
   3.  Client Indication of Preferred Signature Algorithms . . . . . . 4
   4.  Responder Signature Algorithm Selection . . . . . . . . . . . . 5
     4.1.  Dynamic Response  . . . . . . . . . . . . . . . . . . . . . 5
     4.2.  Static Response . . . . . . . . . . . . . . . . . . . . . . 5
   5.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . 6
   6.  Security Considerations . . . . . . . . . . . . . . . . . . . . 6
     6.1.  Use of insecure algorithms  . . . . . . . . . . . . . . . . 6
     6.2.  Man in the Middle Downgrade Attack  . . . . . . . . . . . . 6
   7.  Normative References  . . . . . . . . . . . . . . . . . . . . . 7
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . . . 7






























Hallam-Baker            Expires September 4, 2009               [Page 2]

Internet-Draft           OCSP Algorithm Agility               March 2009


1.  Introduction

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].


2.  OCSP Algorithm Agility Requirements

   OCSP RFC 2560 [RFC2560] defines a protocol for obtaining certificate
   status information from an online service.  A particular OCSP server
   may or may not be provided by the CA that issued the certificate
   whose status is being queried and may or may provide a realtime
   indication of the certificate status or a time delayed status
   indication.

   RFC 2560 [RFC2560] specifies a means for an OCSP responder to
   indicate the signature and digest algorithms used in a response but
   not how those algorithms are specified.  The only algorithm mandated
   by the protocol specification is that the OCSP client SHALL support
   the DSA sig-alg-oid specified in section 7.2.2 of [RFC2459] and
   SHOULD be capable of processing RSA signatures as specified in
   section 7.2.1 of [RFC2459].  The only requirement placed on
   responders is that they SHALL support the SHA1 hashing algorithm.

   This requirement is clearly insufficient to ensure interoperabilty.

   While the responder may apply heuristics such as using the signature
   algorithm employed by the certificate issuer, such heuristics fail in
   many common real-world situations where multiple signature algorithms
   are employed:

   o  The algorithm used to sign the certificate may differ from the
      subject key algorithm

   o  The properties of the OCSP responder certificate chain are
      frequently only known to the responder after the fact.

   o  In an extended PKI deployment, the task of verifying certificate
      status may be separated from the task(s) that make use of the
      certificate.

   o  A responder cannot infer anything if a request for an unknown
      certificate is issued.

   The last criterion is significant as it occurs frequently in real



Hallam-Baker            Expires September 4, 2009               [Page 3]

Internet-Draft           OCSP Algorithm Agility               March 2009


   world PKI deployments and cannot be resolved through the information
   available from in-band signalling using the RFC 2560 [RFC2560]
   protocol without modification.

   In addition, a system that employs a signature algorithm other than
   the de-facto default is frequently doing so to achieve very specific
   security properties that may not be captured by a heuristic
   assumptuion designed to facilitate interoperability rather than
   performance.  In particular:

   o  An implementation may intentionally employ an algorithm for
      certificate status response that is less computationally demanding
      than for signing the certificate itself, thus allowing for more
      frequent certificate status validation.

   o  An implementation may intentionally wish to guard against the
      possibility of a compromise resulting from a signature algorithm
      compromise by employing two separate encryption algorithms.

   This document describes:

   o  A mechanism that allows a client to indicate the set of preferred
      signature algorithms.

   o  An algorithm for signature algorithm selection that maximizes the
      probability of successful operation in the case that no supported
      prefered algorithm(s) are specified.


3.  Client Indication of Preferred Signature Algorithms

   A client MAY declare a preferred set of algorithms algorithms in a
   request using the preferred signature algorithm extension.


   id-pkix-ocsp-preferred-signature-algorithms OBJECT IDENTIFIER ::= {
         id-pkix-ocsp x }

   PreferredSignatureAlgorithms   ::=     SEQUENCE {
         Algorithms      SEQUENCE OF AlgorithmIdentifier
         }


   If a set of preferred signature algorithms is declared the client
   MUST support each of the specified algorithms.

   If a set of preferred algorithms is declared the OCSP responder
   SHOULD use one of the specified signing algorithms.



Hallam-Baker            Expires September 4, 2009               [Page 4]

Internet-Draft           OCSP Algorithm Agility               March 2009


4.  Responder Signature Algorithm Selection

   RFC 2560 [RFC2560] does not specify a mechanism for deciding the
   signature algorithm to be used in an OCSP response.  As previously
   noted this does not provide a sufficient degree of certainty as to
   the algorithm selected to guarantee interoperation.

4.1.  Dynamic Response

   A responder MAY maximize the potential for ensuring interoperability
   by selecting a supported signature algorithm using the following
   order of precedence where the first method has the highest
   precedence:

   1.  Using an algorithm specified as a preferred signing algorithm in
       the client request.

   2.  Using the signing algorithm used to sign the CertID specified in
       the query.

   3.  Using the signing algorithm used to sign a CRL issued by the
       certificate issuer providing status information for the
       certificate specified by CertID.

   4.  Using a signature algorithm that has been advertised as being the
       default signature algorithm for the signing service using an out
       of band mechanism

   5.  Using a mandatory signing algorithm specified for the version of
       the OCSP protocol in use.

   A responder SHOULD always apply the lowest numbered selection
   mechanism that is known, supported and meets the responder's criteria
   for cryptographic algorithm strength.

4.2.  Static Response

   For purposes of efficiency, an OCSP responder is permitted to
   generate static responses in advance of a request.  Although this
   case does not permit the responder to make use of the client data
   directly, the responder may anticipate the client request and
   generate a set of signed responses so as to maximize the probability
   that it is possible to generate a response that is assigned the
   highest preference weighting.







Hallam-Baker            Expires September 4, 2009               [Page 5]

Internet-Draft           OCSP Algorithm Agility               March 2009


5.  Acknowledgements

   The author acknowleges the helpful comments made on earlier drafts of
   this work by Santosh Chokhani and Stefan Santesson


6.  Security Considerations

   The mechanism used to choose the response signing algorithm MUST be
   considered to be sufficiently secure against cryptanalytic attack for
   the intended application.

   In most applications it is sufficient for the signing algorithm to be
   at least as secure as the signing algorithm used to sign the original
   certificate whose status is being queried.  This criteria may not
   hold in long term archival applications however in which the status
   of a certificate is being queried for a date in the distant past,
   long after the signing algorithm has ceased being considered
   trustworthy.

6.1.  Use of insecure algorithms

   It is not always possible for a responder to generate a response that
   the client is expected to understand and meets contemporary standards
   for cryptographic security.  In such cases an application MUST
   balance the risk of employing a compromised security solution and the
   cost of mandating an upgrade, including the risk that the alternative
   chosen by end users will offer even less security or no security.

   In archival applications it is quite possible that an OCSP responder
   might be asked to report the validity of a certificate on a date in
   the distant past.  Such a certificate might employ a signing method
   that is no longer considered acceptably secure.  In such
   circumstances the responder MUST NOT generate a signature for a
   signing mechanism that is considered unacceptably insecure.

   A client MUST accept any signing algorithm in a response that it
   specified as a preferred signing algorithm in the request.  It
   follows therefore that a client MUST NOT specify as a preferred
   signing algorithm any signing algorithm that is either not supported
   or not considered acceptably secure.

6.2.  Man in the Middle Downgrade Attack

   The mechanism to support client indication of preferred signature
   algorithms is not protected against a man in the middle downgrade
   attack.  This constraint is not considered to be a significant
   security concern as the client MUST NOT accept any signing algorithm



Hallam-Baker            Expires September 4, 2009               [Page 6]

Internet-Draft           OCSP Algorithm Agility               March 2009


   that does not meet its own criteria for acceptable cryptographic
   security no matter what mechanism is used to determine the signing
   algorithm of the response.


7.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2560]  Myers, M., Ankney, R., Malpani, A., Galperin, S., and C.
              Adams, "X.509 Internet Public Key Infrastructure Online
              Certificate Status Protocol - OCSP", RFC 2560, June 1999.


Author's Address

   Phillip Hallam-Baker
   VeriSign Inc

   Email: pbaker@verisign.com






























Hallam-Baker            Expires September 4, 2009               [Page 7]


