<?xml version="1.0"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2616 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml'>
<!ENTITY rfc4918 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4918.xml'>
<!ENTITY rfc2119 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
<!ENTITY rfc3864 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3864.xml'>
]>
<?rfc toc="yes"?>
<?rfc strict="yes"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<rfc ipr="trust200902" category="std" docName="draft-dusseault-http-patch-14">
<front>
  <title abbrev="HTTP PATCH">
    PATCH Method for HTTP
  </title>

  <author initials="L.M." surname="Dusseault" fullname="Lisa Dusseault">
    <organization abbrev="Messaging Architects">Messaging Architects</organization>
    <address>
      <postal>
        <street>180 Peel Street, Suite 333</street>
        <city>Montreal</city> <region>QC</region>

        <code>H3C 2G7</code>
        <country>Canada</country>
      </postal>
      <email>lisa.dusseault@messagingarchitects.com</email>
    </address>
  </author>

  <author initials="J.M." surname="Snell" fullname="James M. Snell">
    <organization></organization>
    <address>
      <email>jasnell@gmail.com</email>
      <uri>http://www.snellspace.com</uri>
    </address>
  </author>

  <date month="April" year="2009"/>

  <area>Applications</area>
  <keyword>http</keyword>
  <keyword>patch</keyword>

  <abstract>
    <t>Several applications extending the Hypertext Transfer Protocol (HTTP) 
	require a feature to do 
    partial resource modification.  The existing HTTP PUT method only allows 
    a complete replacement of a document. This proposal adds a new HTTP 
    method, PATCH, to modify an existing HTTP resource.</t>
  </abstract>

</front>


<middle>
  <section anchor="intro" title="Introduction">

    <t>This specification defines the new HTTP/1.1 <xref target="RFC2616" /> method 
    PATCH that is used to apply partial modifications to a resource.</t>

    <t>A new method is necessary to improve interoperability and prevent errors.  
    The PUT method is already defined to overwrite a resource with a complete 
    new body, and can not be reused to do partial changes. Otherwise, proxies 
    and caches and even clients and servers may get confused as to the result 
    of the operation. </t>

    <t>In this document, the key words "MUST", "MUST NOT", "REQUIRED", "SHALL", 
    "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" 
    are to be  interpreted as described in <xref target="RFC2119" />.</t>

    <t>Furthermore, this document uses the ABNF syntax defined in
    Section 2.1 of <xref target="RFC2616"/>.

    </t>

  </section>

  <section title="The PATCH Method" anchor="patch" >

    <t>The PATCH method requests that a set of changes described in 
       the request entity be applied to the resource identified by the Request-URI.
       The set of changes is represented in a format called a "patch document"
       identified by a media type. If the Request-URI does not 
       point to an existing resource, the server MAY create a 
		new resource, depending on the patch document type (whether it can 
		logically modify a null resource) and permissions etc.  </t>

   <t>	PATCH is neither safe or idempotent as defined 
       by <xref target="RFC2616" />, Section 9.1.</t>

    <t>The difference between the PUT and PATCH requests is reflected in the
       way the server processes the enclosed entity to modify the resource 
       identified by the Request-URI.  In a PUT request, the enclosed entity
       is considered to be a modified version of the resource stored on the 
       origin server and the client is requesting that the stored version be replaced.
       With PATCH, however, the enclosed entity contains a set of instructions 
       describing how a resource currently residing on the origin server should
       be modified to produce a new version.  The PATCH method affects  
	the resource identified by the Request-URI, and also MAY have side effects on 
	other resources; i.e., new resources may be created, or existing ones modified, 
	by the application of a PATCH (again, depending on the patch document type).  </t>

    <t>The server MUST apply the entire set of changes atomically and never
       provide (e.g. in response to a GET during this operation) a partially-modified 
       representation.  If the entire patch document cannot be successfully applied 
       then the server MUST fail the entire request, applying none of the changes. 
       The determination of what constitutes a successful PATCH can vary depending 
       on the patch document and the type of resource being modified. See Error Handling in <xref target="error.handling"/> 
       for details on status codes and possible error conditions.</t>

    <t>If the request passes through a cache and the Request-URI identifies
       one or more currently cached entities, those entries SHOULD be
       treated as stale. Responses to this method are only cacheable if the server 
		indicates, and if the cacheable resource is indicated with the Content-Location header.</t>

    <t>Collisions from multiple PATCH requests are more dangerous than PUT collisions, 
       because a patch document that is not operating from a known base point may 
       corrupt the resource.  Clients wishing to apply a patch document to a known 
       entity can first acquire the strong ETag of the resource to be modified, 
       and use that Etag in the If-Match header on the PATCH request to verify 
       that the resource is still unchanged.  If a strong ETag is not available 
       for a given resource, the client can use If-Unmodified-Since as a 
       less-reliable safeguard.</t>

    <t>Note that entity-headers contained in the request apply only to the contained 
       patch document and MUST NOT be applied to the resource being modified.  Thus, a 
		Content-Language header could be present on the request but it would only mean
		(for whatever that's worth) that the patch document had a language. Servers 
		SHOULD NOT store such headers except as trace information, and SHOULD NOT use
		such header values the same way they might be used on PUT requests.  Therefore,
		this document does not specify a way to modify a document's Content-Type or 
		Content-Language value through headers, though a mechanism could well be 
		designed to achieve this goal through a patch document. </t>

    <t>There is no guarantee that a resource can be modified with PATCH. 
       Further, it is expected that different patch document formats will be 
       appropriate for different types of resources and that no single format 
       will be appropriate for all types of resources. Therefore, there is no single 
       default patch document format that implementations are required to support. 
       Servers MUST ensure that a received patch document is appropriate for the type
       of resource identified by the Request-URI.</t>

    <t>
	  Clients need to choose when to use
	  PATCH rather than PUT. For example, if the patch document size is
	  larger than the size of the new resource data that would be used in a
	  PUT, then it might make sense to use PUT instead of PATCH.  A comparison
	to POST is even more difficult, because POST is used in widely varying ways
	and can encompass PUT and PATCH-like operations if the server chooses.  
	If the operation does not modify the resource identified by the Request-URI in a 
	predictable way, POST should be considered instead of PATCH or PUT.</t>
    <section title="A simple PATCH example">

      <figure><artwork type='message/http: msgtype="request"'>
PATCH /file.txt HTTP/1.1
Host: www.example.com
Content-Type: application/example
If-Match: "e0023aa4e"
Content-Length: 100

[description of changes]
</artwork></figure>

      <t>This example illustrates use of a hypothetical patch document on an existing resource.</t>

      <figure>
        <preamble>Successful PATCH response to existing text file</preamble>
          <artwork type='message/http: msgtype="response"'>
HTTP/1.1 204 No Content
ETag: "e0023aa4f"
</artwork>
        </figure>

      </section>

      <section title="Error handling" anchor="error.handling">

      <t>There are several known conditions under which a PATCH request can fail.</t>

      <t><list style="hanging">
        <t hangText="Malformed patch document:">  Can be specified using a 
        400 (Bad Request) when the server finds that the patch document provided 
        by the client was not properly formatted.  The definition of badly formatted 
        depends on the patch document chosen, but generally if the server finds it 
        cannot handle the patch due to the serialization of the patch document, 
        this response ought to be appropriate.</t> 

        <t hangText="Unsupported patch document:">  Can be specified using a 415 (Unsupported
        Media Type) when the client sends a patch document format that the server
        does not support for the resource identified by the Request-URI. 
        Such a response SHOULD include an Accept-Patch response header as 
        described in <xref target="accept-patch"/> to notify the client what patch document formats 
        are supported.</t>

        <t hangText="Unprocessable request:"> Can be specified with a 422 (Unprocessable
        Entity) (<xref target="RFC4918" />, Section 11.2) when the server understands the patch 
        document and the syntax of the patch document appears valid, but the server 
        is incapable of processing the request. This might include attempts to modify a 
		resource in a way that would
          cause the resource to become invalid: for instance, a modification 
          to a well-formed XML document that would cause it to no longer 
          be well-formed.  There may also be more specific errors like "Conflicting State"
		that could be signaled with this status code, but the more specific error would 
		generally be more helpful. </t>

		<t hangText="Resource Not Found:">  Can be specified with a 404 (Not Found)
			status code, when the client attempted to apply a patch document to a 
			non-existent resource, but the patch document chosen cannot be 
          applied to a non-existent resource. </t>

		<t hangText = "Conflicting State:">  Can be specified with a 409 (Conflict) when 
			the request cannot be applied given the state of the resource.  For example,
			if the client attempted to apply a structural modification and 
          the structures assumed to exist did not exist (with XML, a patch  
          might specify changing element 'foo' to element 'bar' but 
          element 'foo' might not exist). </t>

        <t hangText="Conflicting modification:"> Specified with a 
        412 (Precondition Failed) when a client uses either the If-Match or
        If-Unmodified-Since request headers and attempts to apply a patch 
        document to a resource whose state has changed since the patch 
        was created. If the server detects a possible conflicting 
        modification and neither the If-Match or If-Unmodified-Since request
        headers are used, the server can return a 409 (Conflict) response.</t>

        <t hangText="Concurrent modification:"> When a server receives multiple
        concurrent requests to modify a resource, those requests SHOULD be
        queued and processed in the order in which they are received. If
        a server is incapable of queuing concurrent requests, all subsequent 
        requests SHOULD be rejected with a 409 (Conflict) until the first 
        modification request is complete.</t>
	</list></t>

       <t>Other HTTP status codes can also be used under the appropriate circumstances. </t>

       <t>The entity body of error responses SHOULD contain enough information
        to communicate the nature of the error to the client. The content-type 
        of the response entity can vary across implementations.</t>

    </section>

  </section>

  <section anchor="adv" title="Advertising Support in OPTIONS">

      <t>A server can advertise its support for the PATCH method by adding
      it to the listing of allowed methods in the "Allow" OPTIONS response 
      header defined in HTTP/1.1.  The PATCH method MAY appear in the "Allow" 
		header even if the Accept-Patch header is absent, in which case the list
		of allowed patch documents is not advertised.</t>

      <section anchor="accept-patch" title="The Accept-Patch Header">

      <t>This specification introduces a new response header "Accept-Patch"
      used to specify the patch document formats accepted by the server.
      "Accept-Patch" MUST appear in the OPTIONS response for any resource 
      that supports the use of the PATCH method.  The presence of the "Accept-Patch"
      header in response to any method is an implicit indication that PATCH is allowed 
      on the resource identified by the Request-URI.  The presence of a specific
	patch document format in this header indicates that specific format is 
	allowed on the resource identified by the Request-URI.</t>

      <figure><artwork type="abnf2616">
Accept-Patch = "Accept-Patch" ":" 1#media-type </artwork></figure>

      <t>The Accept-Patch header specifies a comma separated listing of media-types
      as defined by <xref target="RFC2616"/>, Section 3.7.</t>

      </section>

      <section title="Example OPTIONS Request and Response">

      <figure>
      <preamble>[request]</preamble>
      <artwork type='message/http: msgtype="request"'>
OPTIONS /example/buddies.xml HTTP/1.1
Host: www.example.com
</artwork>
</figure>
      <figure>
      <preamble>[response]</preamble>
      <artwork type='message/http: msgtype="response"'>
HTTP/1.1 200 OK
Allow: GET, PUT, POST, OPTIONS, HEAD, DELETE, PATCH
Accept-Patch: application/example, text/example
</artwork></figure>


      <t>The examples show a server that supports PATCH generally using two 
      hypothetical patch document formats.</t>

    </section>
  </section>

  <section title="IANA Considerations">

    <section title="The 'Accept-Patch' Response Header">

      <t>The 'Accept-Patch' response header should be added to the permanent 
      registry (see <xref target="RFC3864" />).</t>

  <t><list style="hanging">
    <t hangText="Header field name:">
      Accept-Patch
    </t>
    <t hangText="Applicable Protocol:">
      HTTP
    </t>
    <t hangText="Author/Change controller:">
      IETF
    </t>
    <t hangText="Specification document:">
      this specification
    </t>
  </list></t>

    </section>


  </section>


  <section title="Security Considerations">
    <t>The security considerations for PATCH are nearly identical to the 
    security considerations for PUT (<xref target="RFC2616"/>, Section 9.6).  These 
    include authorizing requests (possibly through access control and/or authentication)
    and ensuring that data is not corrupted through transport errors or through
    accidental overwrites.  Whatever mechanisms are used for PUT can be used for PATCH
    as well.  The following considerations apply specially to PATCH.</t>

    <t>A document that is patched might be more likely to be corrupted than a document
	that is overridden in entirety, but that 
    concern can be addressed through the use of mechanisms such as conditional
    requests using ETags and the If-Match request header.
    </t>

    <t>Sometimes an HTTP intermediary might try to detect viruses being sent via HTTP by 
    checking the body of the PUT/POST request or GET response.  The PATCH method 
    complicates such watch-keeping because neither the source document nor the patch
    document might be a virus, yet the result could be. This security consideration is
    not materially different from those already introduced by byte-range downloads, 
    downloading patch documents, uploading zipped (compressed) files and so on.</t>

    <t>Individual patch documents will have their own specific security considerations
    that will likely vary depending on the types of resources being patched.
    The considerations for patched binary resources, for instance, will be different 
    than those for patched XML documents.  Servers MUST take adequate precautions to ensure that malicious
	  clients cannot consume excessive server resources (e.g., CPU, disk I/O)
	  through the client's use of PATCH.</t>
  </section>

</middle>

<back>

  <references title="Normative References">
    &rfc2119;
    &rfc2616;
    &rfc3864;
  </references>

  <references title="Informative References">
    &rfc4918;
  </references>

  <section title="Acknowledgements">
    <t>PATCH is not a new concept, it first appeared in HTTP in drafts of 
    version 1.1 written by Roy Fielding and Henrik Frystyk and also 
    appears in Section 19.6.1.1 of RFC 2068.</t>
    <t>Thanks to Adam Roach, Chris Sharp, Julian Reschke, Geoff Clemm,
    Scott Lawrence, Jeffrey Mogul, Roy Fielding, Greg Stein, Jim Luther, 
    Alex Rousskov, Jamie Lokier, Joe Hildebrand, Mark Nottingham, 
      Michael Balloni and Cyrus Daboo
    for review and advice on this document.</t>

  </section>
  <section title="Changes">
    <section title="Changes from -00">
      <t>OPTIONS support: removed "Patch" header definition and used
      Allow and new "Accept-Patch" headers instead.  </t>
      <t>Supported delta encodings: removed vcdiff and diffe as these
      do not have defined MIME types and did not seem to be strongly 
      desired.</t>
      <t>PATCH method definition: Clarified cache behavior.</t>
    </section>

    <section title="Changes from -01">
      <t>Removed references to XCAP - not yet a RFC.</t>
      <t>Fixed use of MIME types (this "fix" now obsolete) </t>
      <t>Explained how to use MOVE or COPY in conjunction with PATCH,
      to create a new resource based on an existing resource
      in a different location. </t>
    </section>
    <section title="Changes from -02">
      <t>Clarified that MOVE and COPY are really independent of PATCH.</t>

      <t>Clarified when an ETag must change, and when Last-Modified must be used.</t>
      <t>Clarified what server should do if both Content-Type and IM headers appear 
      in PATCH request.</t>
      <t>Filled in missing reference to DeltaV and ACL RFCs.</t>
      <t>Stopped using 501 Unsupported for unsupported delta encodings.</t>
      <t>Clarified what a static resource is.</t>
      <t>Refixed use of MIME types for patch formats.</t>

      <t>Limited the scope of some restrictions to apply only to usage
      of required diff format.</t>
    </section>
    <section title="Changes from -03">
      <t>Various typographical, terminology consistency, and other minor
      clarifications or fixes.</t>
    </section>
    <section title="Changes from -04">
      <t>Moved paragraphs on ACL and RFC3229 interoperability to new section.</t>

      <t>Added security considerations.</t>
      <t>Added IANA considerations, registration of new namespace, and discontinued use
      of "DAV:" namespace for new elements. </t>
      <t>Added example of error response.</t>
    </section>
    <section title="Changes from -05">
      <t>Due to various concerns it didn't seem likely the application/gdiff
        registration could go through so switching to vcdiff as required 
      diff format, and to RFC3229's approach to specifying diff formats, including
      use of the IM header.</t>
      <t>Clarified what header server MUST use to return MD5 hash.</t>

      <t>Reverted to  using 501 Unsupported for unsupported delta encodings.</t>
    </section>

    <section title="Changes from -06">
      <t>The reliance on RFC 3229 defined patch documents has been factored
      out in favor of delta encodings identified by MIME media type.</t>
      <t>The required use of DeltaV-based error reporting has been removed
      in favor of using basic HTTP status codes to report error conditions.</t>
      <t>The Accept-Patch response header has been redefined as a listing of
      media-ranges, similar to the Accept request header.</t>
      <t>Added James Snell as a co-author.</t>
    </section>

    <section title="Changes from -07">
      <t>Terminology change from "delta encoding" to "patch document"</t>
      <t>Added clarification on the safety and idempotency of PATCH</t>
      <t>Updated the caching rules of PATCH responses</t>
      <t>200 responses MUST include a representation of the modified resource. 
      204 responses are used to indicate successful response without returning a representation.</t>
      <t>Suggest using 422 Unprocessable Entity to indicate that a properly formatted patch document cannot be processed</t>
      <t>Clarify the use of 412 and 409 to indicate concurrent and conflicting resource modifications.</t>
      <t>Added registration for the Accept-Patch header.</t>
      <t>Relaxed the requirements for the use of If-Match and If-Unmodified-Since.</t>
      <t>Add language that clarifies the difference between PUT and PATCH.</t>
      <t>Add language that clarifies the issues with PATCH and Content Negotiation.</t>
      <t>Use of Accept-Patch on any response implies that PATCH is supported.</t>
      <t>Add language advising caution when pipelining PATCH requests.</t>
    </section>

    <section title="Changes from -08">
      <t>Addition of the 209 Content Returned status code</t>
      <t>Addition of the Prefer header field mechanism</t>
      <t>Removed the paragraph discussing the use of 200+Content-Location. This 
      is replaced by the 209 Content Returned status code.</t>
    </section>

    <section title="Changes from -09">
      <t>Move the prefer header to a separate document</t>
      <t>Restructure the document sections.</t>
    </section>

    <section title="Changes from -10">
      <t>Remove paragraph about pipelined requests. This is covered adequately by RFC2616.</t>
      <t>Remove paragraph about content negotiation. This is covered adequately by RFC2616.</t>
      <t>Explicitly indicate that PATCH can be used to create new resources.</t>
      <t>Remove recommendation for servers to provide strong etags. This is recommendation is implied and does
      not need to be explicitly.</t>
      <t>Change Allow-Patch to a listing of media-type and not media-range.</t>
    </section>

    <section title="Changes from -11">
      <t>Fix section links.</t>
      <t>State that this uses RFC2616-style ABNF.</t>
      <t>Fix grammar for Accept-Patch.</t>
      <t>Remove requirements for handling entity-headers on PATCH and replace with general discussion of 
	     issues and consequences of having no handling requirements.</t>
	   <t>Update Security Considerations to make it clear what security considerations for PUT are, for comparison.</t>
    </section>

    <section title="Changes from -12">
	  <t>Remove status 209 again.</t>
	  <t>Add security consideration about using too much server resources.</t>
	  <t>Remove Content-MD5 from example.</t>
	</section>
	
	<section title="Changes from -13">
		<t>Remove '*' value from Accept-Patch again.</t>
		<t>Allow caching but only if context is clear.</t> 
		<t>Clarify how some patch formats might allow creating a new document.</t>
		<t>Add comparison of PATCH to POST</t>
	</section>

  </section>

  <section title="Notes to RFC Editor">
    <t>The RFC Editor should remove this section and the Changes section.</t>
  </section>

</back>

</rfc>