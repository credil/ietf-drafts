<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc1035 PUBLIC "" "bibxml/reference.RFC.1035.xml">
  <!ENTITY rfc2119 PUBLIC "" "bibxml/reference.RFC.2119.xml">
  <!ENTITY rfc2616 PUBLIC "" "bibxml/reference.RFC.2616.xml">
  <!ENTITY rfc2782 PUBLIC "" "bibxml/reference.RFC.2782.xml">
  <!ENTITY rfc2818 PUBLIC "" "bibxml/reference.RFC.2818.xml">
  <!ENTITY rfc3688 PUBLIC "" "bibxml/reference.RFC.3688.xml">
  <!ENTITY rfc3864 PUBLIC "" "bibxml/reference.RFC.3864.xml">
  <!ENTITY rfc3986 PUBLIC "" "bibxml/reference.RFC.3986.xml">
  <!ENTITY rfc4033 PUBLIC "" "bibxml/reference.RFC.4033.xml">
  <!ENTITY rfc4398 PUBLIC "" "bibxml/reference.RFC.4398.xml">
  <!ENTITY rfc5234 PUBLIC "" "bibxml/reference.RFC.5234.xml">
  <!ENTITY rfc5246 PUBLIC "" "bibxml/reference.RFC.5246.xml">
  <!ENTITY rfc4791 PUBLIC "" "bibxml/reference.RFC.4791.xml">
  <!ENTITY rfc4871 PUBLIC "" "bibxml/reference.RFC.4871.xml">
  <!ENTITY rfc5545 PUBLIC "" "bibxml/reference.RFC.5545.xml">
  <!ENTITY rfc5546 PUBLIC "" "bibxml/reference.RFC.5546.xml">
  <!ENTITY rfc5585 PUBLIC "" "bibxml/reference.RFC.5585.xml">
  <!ENTITY I-D.ietf-calsify-rfc2447bis PUBLIC "" "bibxml3/reference.I-D.ietf-calsify-rfc2447bis.xml">
  <!ENTITY I-D.desruisseaux-caldav-sched PUBLIC "" "bibxml3/reference.I-D.desruisseaux-caldav-sched.xml">
  <!ENTITY I-D.nottingham-site-meta PUBLIC "" "bibxml3/reference.I-D.nottingham-site-meta.xml">
  <!ENTITY W3C.REC-xml-20081126 PUBLIC "" "bibxml4/reference.W3C.REC-xml-20081126.xml">
]>

<?rfc rfcedstyle="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?><!-- default = 3 -->
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc category="std"
     ipr="trust200902"
     docName="draft-desruisseaux-ischedule-01"
     updates="4871">
<front>
  <title abbrev="iSchedule">Internet Calendar Scheduling Protocol (iSchedule)</title>
  <author initials="C." surname="Daboo" fullname="Cyrus Daboo">
    <organization abbrev="Apple">Apple Inc.</organization>
    <address>
      <postal>
        <street>1 Infinite Loop</street>
        <city>Cupertino</city>
        <region>CA</region>
        <code>95014</code>
        <country>USA</country>
      </postal>
      <email>cyrus@daboo.name</email>
      <uri>http://www.apple.com/</uri>
    </address>
  </author>
  <author initials="B." surname="Desruisseaux" 
    fullname="Bernard Desruisseaux">
    <organization abbrev="Oracle">Oracle Corporation</organization>
    <address>
      <postal>
        <street>600 Blvd. de Maisonneuve West</street>
        <street>Suite 1900</street>
        <city>Montreal</city>
        <region>QC</region>
        <code>H3A 3J2</code>
        <country>CANADA</country>
      </postal>
      <email>bernard.desruisseaux@oracle.com</email>
      <uri>http://www.oracle.com/</uri>
    </address>
  </author>
  <date month="March" year="2010"/>
  <area>Applications</area>
  <keyword>calsched</keyword>
  <keyword>calsch</keyword>
  <keyword>caldav</keyword>
  <keyword>calendar</keyword>
  <keyword>calendaring</keyword>
  <keyword>calsify</keyword>
  <keyword>HTTP</keyword>
  <keyword>iCal</keyword>
  <keyword>iCalendar</keyword>
  <keyword>iMIP</keyword>
  <keyword>iTIP</keyword>
  <keyword>iRIP</keyword>
  <keyword>iSchedule</keyword>
  <keyword>scheduling</keyword>
  <keyword>text/calendar</keyword>
  <keyword>DKIM</keyword>
  <keyword>DomainKeys Identified Mail</keyword>
  <abstract>
    <t>
      This document defines the Internet Calendar Scheduling
      Protocol (iSchedule), which is a binding from the iCalendar
      Transport-independent Interoperability Protocol (iTIP) to the
      Hypertext Transfer Protocol (HTTP) to enable interoperability
      between calendaring and scheduling systems over the Internet.
    </t>
  </abstract>
</front>
<middle>
<section anchor="intro" title="Introduction">
  <t>
    This binding document provides the transport specific information
    necessary to convey iCalendar Transport-independent Interoperability
    Protocol <xref target="RFC5546">(iTIP)</xref>
    messages over the Hypertext Transfer Protocol
    <xref target="RFC2616">(HTTP)</xref>.
  </t>
  <t>
    The Internet Calendar Scheduling Protocol (iSchedule) enables
    interoperability between different calendaring and scheduling
    systems. Calendaring and scheduling systems that provide support for
    iSchedule allow their users to perform scheduling transactions such as
    schedule, reschedule, respond to scheduling request or cancel scheduled
    calendar components, as well as search for busy time information with
    users of other calendaring and scheduling systems on the Internet.
  </t>
  <t>
    iSchedule leverages the DomainKeys Identified Mail (DKIM) service
    <xref target="RFC4871"/> to provide end-to-end domain-level
    authentication based on message content and transparent to end users.
  </t>
  <t>
    Discussion of this Internet-Draft is taking place on the mailing list
    &lt;https://www.ietf.org/mailman/listinfo/ischedule&gt;.
  </t>
  <section title="Motivations">
    <t>
      The iCalendar Message-Based Interoperability Protocol
      <xref target="I-D.ietf-calsify-rfc2447bis">(iMIP)</xref>, has
      proven to be insufficient to allow users to seamlessly perform the
      same scheduling operations with users of other calendaring and
      scheduling systems on the Internet as with users of their own
      system. This section clarifies the motivations for a binding from
      the iCalendar Transport-independent Interoperability Protocol
      <xref target="RFC5546">(iTIP)</xref> to a transport that allows
      synchronous end-to-end connectivity.
    </t>
    <t>
      A binding to an email-based transport is clearly inadequate to
      search for busy time information  since users need and expect to
      get an immediate response. As such, some calendaring and scheduling
      systems allow users to publish their free busy information in a
      resource accessible to others on the Internet. In the absence of a
      standardized mechanism to locate the resource that provides the free
      busy information of a user, one thus needs to know the location of
      this resource in addition to the calendar user address of the users
      one wish to schedule with.
    </t>
    <t>
      With an email-based transport, the transparent processing of
      incoming scheduling messages on the server is only possible when
      the calendaring and scheduling system is integrated with the email
      system. Commonly, the processing of incoming scheduling messages
      occurs on the client instead and requires user intervention, which
      yield the following consequences:
      <list style="numbers">
        <t>
          The processing of incoming scheduling messages and the
          corresponding updates to the calendar only occurs when the client
          is active. As such, free busy information may be inaccurate
          (e.g., user still appears busy when the organizer actually
          rescheduled or canceled the meeting).
        </t>
        <t>
          Calendaring and scheduling systems generally restrain the number
          of updates sent to users to reduce the number of messages that
          will clutter their email inbox. As a result, attendees rarely
          obtain up to date participation status of other attendees.
        </t>
        <t>
          The client becomes responsible for verification of the
          authenticity and integrity of the scheduling message.
        </t>
      </list>
    </t>
    <!--
      Other motivations:
       * Synchronous delivery status.
       * Synchronous resource booking (first come first server).
    -->
  </section><!-- Motivations -->

  <section title="Related Memos">
    <t>
      Implementers will need to be familiar with other documents that,
      along with this document, form a framework for Internet calendaring
      and scheduling standards.
    </t>
    <t>
      This document specifies a binding from iTIP to HTTP.
    </t>
    <t>
      <list style="symbols">
        <t>
          <xref target="RFC5545">iCalendar</xref>
          specifies a core specification of objects, data types,
          properties and property parameters;
        </t>
        <t>
          <xref target="RFC5546">iTIP</xref>
          specifies an interoperability protocol for scheduling
          between different implementations.
        </t>
      </list>
    </t>
    <t>
      Furthermore, implementers will need to be familiar with the
      DomainKeys Identified Mail (DKIM) service defined in
      <xref target="RFC4871"/>. An overview of DKIM can be found
      in <xref target="RFC5585"/>.
    </t>
    <t>
      This document does not attempt to repeat the specification of
      concepts or definitions from these other documents. Where possible,
      references are made to the document that provides the
      specification of these concepts or definitions.
    </t>
  </section>
  <section title="Notational Conventions">
    <t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL"
      in this document are to be interpreted as described in
      <xref target="RFC2119"/>.
    </t>
    <t>
      The Augmented BNF (ABNF) syntax used by this document to describe
      protocol elements is defined in <xref target="RFC5234"/>.
    </t>
<!--
    <t>
      The Augmented BNF used by this document to describe protocol
      elements is described in Section 2.1 of <xref target="RFC2616"/>.
      Because this augmented BNF uses the basic production rules provided
      in Section 2.2 of <xref target="RFC2616"/>, those rules apply to
      this document as well.
    </t>
-->
    <t>
      Definitions of XML elements in this document use XML element
      type declarations (as found in XML Document Type Declarations),
      described in Section 3.2 of <xref target="W3C.REC-xml-20081126"/>.
    </t>
    <t>
      The namespace "urn:ietf:params:xml:ns:ischedule" is reserved for the
      XML elements defined in this specification, or in other Standards
      Track IETF RFCs written to extend iSchedule. It MUST NOT be used
      for proprietary extensions.
    </t>
    <t>
      Note that the XML declarations used in this document are
      incomplete, in that they do not include namespace information.
      Thus, the reader MUST NOT use these declarations as the only way
      to validate iSchedule XML element types.
    </t>
  </section><!-- Notational Conventions -->
</section><!-- Introduction -->

<section title="iSchedule Model">
  <t>
    The iSchedule design can be pictured as:
    <figure><artwork><![CDATA[
+----------+   +----------+            +----------+   +----------+
| Calendar |   | Calendar | iSchedule  | Calendar |   | Calendar |  
| User     |-->| Service  |----------->| Service  |-->| Store    |
| Agent    |   |          |            |          |   |          |
+----------+   +----------+            +----------+   +----------+
                iSchedule               iSchedule
                 Sender                  Receiver
    ]]></artwork></figure>
    When an iSchedule Sender has a scheduling message to transmit, it
    determines the iSchedule Receivers to which to delivers the message
    to and sends the appropriate iSchedule requests.  The responsability
    of an iSchedule Sender is to transfer scheduling messages to one or
    more iSchedule Receivers, or report its failure to do so.
  </t>
  <t>
    The means by which a Calendar User Agent instructs a Calendar Service,
    acting as an iSchedule Sender, to transmit scheduling messages is
    outside the scope of this document. A Calendar Service could provide
    support for a standard calendar access protocol, such as CalDAV
    <xref target="RFC4791"/>,
    <xref target="I-D.desruisseaux-caldav-sched"/>
    or any other protocol, to allow a Calendar User Agent to perform
    scheduling operations with users of other Calendar Services.
  </t>
  <t>
    Likewise, the actual processing of scheduling messages received by a
    Calendar Service, acting as an iSchedule Receiver, is also outside
    the scope of this document. Some Calendar Service implementations
    may decide to process some or all received scheduling messages, while
    other implementations may decide to leave that work to Calendar User
    Agent implementations.
  </t>
</section>

<section title="iSchedule Intermediaries">
  <t>
    From the end-to-end view, an iSchedule request is sent to an
    iSchedule Receiver and a response is returned to the iSchedule
    Sender. In practice, this may not always be the case. An
    iSchedule request may travel through several iSchedule
    intermediaries.
  </t>
  <t>
    iSchedule intermediaries can be used for different purposes, namely:
    <list style="symbols">
      <t>
        Dispatch iSchedule request to the appropriate iSchedule Receivers
        for each specified Recipient; Users of the same domain could
        actually be hosted on different iSchedule Receivers.
      </t>
      <t>
        Dispatch iSchedule request to the appropriate iSchedule Receivers
        according to the calendar component type specified in the
        requests. Different iSchedule Receivers could be responsible of
        handling, VEVENT, VTODO, VJOURNAL and VFREEBUSY requests.
      </t>
      <t>
        Scan iSchedule requests, particularly attachments, for virus.
      </t>
    </list>
  </t>
  <t>
    iSchedule intermediaries are REQUIRED to identify their hostname and
    the version number of the preceding server from which the request or
    response arrived. iSchedule intermediaries append this information
    to the "iSchedule-Via" general header, in sequential order, as the
    request travels between Sender and Receiver.
  </t>
  <t>
    For example, an iSchedule request might be submitted to an iSchedule
    Receiver with the following "iSchedule-Via" header:
    <figure><artwork>
   iSchedule-Via: 1.0 ischedule.example.com:443 (VendorX/2.0),
                  1.0 cal.internal.example.com:80 (VendorZ/4.3)
    </artwork></figure>
  </t>
</section>

<section title="iSchedule Receiver Discovery">
  <t>
    This section describes how an iSchedule Sender can discover
    the host name, the port as well as the Request-URI to use
    to submit a request to an iSchedule Receiver.
  </t>
  <section title='iSchedule SRV Service Types'>
    <t>
      This specification adds two SRV service labels for use with iSchedule:
    </t>
    <t>
      <list style="hanging">
        <t>
          Identifies an iSchedule Receiver that uses HTTP without
          transport layer security (<xref target="RFC2818"/>).
        </t>
        <t hangText="ischedules:">
          Identifies an iSchedule Receiver that uses HTTP with
          transport layer security (<xref target="RFC2818"/>).
        </t>
      </list>
    </t>
    <t>
      Example: service record for server without transport layer security
      <figure><artwork>
_ischedule._tcp.example.com. IN SRV 0 1  80 ischedule.example.com.
      </artwork></figure>
    </t>
    <t>
      Example: service record for server with transport layer security
      <figure><artwork>
_ischedules._tcp.example.com. IN SRV 0 1 443 ischedule.example.com.
      </artwork></figure>
    </t>
  </section>

  <section title="iSchedule Receiver Request-URI">
    <t>
      This specification registers a well-known URI
      <xref target="I-D.nottingham-site-meta"/>
      for the iSchedule service, namely, "ischedule"
      (see <xref target="IANA.WELL-KNOWN-URI"/>).
      iSchedule Receivers MUST support requests targeted
      at this well-known URI. iSchedule Senders MUST
      handle HTTP redirects on this well-known URI.
    </t>
  </section>

<!--
  <t>
    In order to make use of SRV records, clients have to do two
    things: map a calendar user address into a DNS identifier that
    can be used in the SRV lookup, and take the result of the SRV
    lookup and map that to a valid iSchedule server.
  </t>
-->

  <section title='Resolving Calendar User Addresses'>
    <t>
      To deliver a scheduling message via the iSchedule protocol,
      an iSchedule Sender needs to determine what iSchedule Receiver
      it needs to deliver a scheduling message to for a particular
      Recipient. Each Recipient's calendar user address is specified
      in the Recipient request header.
    </t>
    <t>
      A calendar user address as defined by iCalendar is simply
      a URI. This is typically a mailto URI, but could potentially
      be any URI type.
    </t>
<!-- Cyrus: Need to restrict to URI scheme that provide domain
            information


            No requirement.  Just add a note.
-->
    <t>
      To get the SRV record name to query for a given mailto URI,
      the "domain" portion of the mailto URI MUST be extracted
      and appended to the service label "_ischedule._tcp." or
      "_ischedules._tcp.".
    </t>
    <t>
      Example: 
      <figure><artwork><![CDATA[
  Calendar User Address:  mailto:cyrus@example.com
  
  Query SRV Record Names: _ischedules._tcp.example.com
                          _ischedule._tcp.example.com
      ]]></artwork></figure>
    </t>
    <t>
      In cases where the "domain" portion of the mailto URI contains
      one or more levels of sub-domain, clients MAY choose to remove
      successive levels of "sub-domain" if queries for that sub-domain
      fail to return any SRV records. For example, a mailto URI with
      the full domain "host.calendar.example.com" would first trigger
      a querying using the domain "host.calendar.example.com", then if
      that failed, the domain "calendar.example.com" would be tried,
      then if that failed the domain "example.com" would be tried.
    </t>
  </section>

  <section title="Using the SRV Record Result">
    <t>
      As defined in <xref target="RFC2782"/> the result of an SRV record
      lookup will be a target host name and a port. An iSchedule Sender
      uses these to contact the iSchedule Receiver.  iSchedule Senders
      MUST honor the full behavior of SRV records as defined by <xref
      target="RFC2782"/>, in particular the TTL, Priority and Weight
      options in the record, as well as handling multiple records
      being returned.
    </t>
    <t>
      Since an iSchedule server is an HTTP server, an iSchedule client
      needs to supply a Request-URI in the HTTP request it makes to the
      server, in addition to the host name and port information. When SRV
      records are being used there is no way to specify the Request-URI
      in the SRV record. As a result clients MUST use "/" as the
      Request-URI for the iSchedule server identified by an SRV record.
    </t>
  </section>
</section>

  <section title="iSchedule Receiver Capabilities"
           anchor="ISCHEDULE_RECEIVER_CAPABILITIES">
    <t>
      iSchedule Receivers supporting the features described in
      this document MUST allow iSchedule Sender to query their
      capabilities by accepting GET requests targeted at the Request-URI
      "/.well-known/ischedule?query=capabilities".
      The response body for a successful GET request targeted at this
      URI MUST be an XML document with query-result as its root element.
    </t>
    <t>
      <list>
        <t>
          Informative rationale: The GET method was favored over
          the POST method to allow iSchedule Senders to query
          capabilities with "conditional GET" requests
          (see Section 9.3 of <xref target="RFC2616"/>).
        </t>
      </list>
    </t>

    <section title="Example: Querying iSchedule Receiver Capabilities"
             anchor="ISCHEDULE_RECEIVER_CAPABILITIES_EXAMPLE">
      <figure>
        <preamble>&gt;&gt; Request &lt;&lt;</preamble>
        <artwork><![CDATA[
GET /.well-known/ischedule?query=capabilities HTTP/1.1
Host: cal.example.com
]]></artwork>
      </figure>
      <figure>
        <preamble>&gt;&gt; Response &lt;&lt;</preamble>
        <artwork><![CDATA[
HTTP/1.1 200 OK
Date: Mon, 15 Dec 2008 09:32:12 GMT
Content-Type: application/xml; charset=utf-8
Content-Length: xxxx
iSchedule-Version: 1.0
ETag: "afasdf-132afds"

<?xml version="1.0" encoding="utf-8" ?>
<query-result xmlns="urn:ietf:params:xml:ns:ischedule">
  <capability-set>
    <supported-version-set>
      <version>1.0</version>
    </supported-version-set>
    <supported-scheduling-message-set>
      <comp name="VEVENT">
        <method name="REQUEST"/>
        <method name="ADD"/>
        <method name="REPLY"/>
        <method name="CANCEL"/>
      </comp>
      <comp name="VTODO"/>
      <comp name="VFREEBUSY"/>
    </supported-scheduling-message-set>
    <supported-calendar-data-type>
      <calendar-data-type content-type="text/calendar" version="2.0"/>
    </supported-calendar-data-type>
    <supported-attachment-values>
      <inline-attachment/>
      <external-attachment/>
    </supported-attachment-values>
    <supported-recipient-uri-scheme-set>
      <scheme>mailto</scheme>
    </supported-recipient-uri-scheme-set>
    <max-content-length>102400</max-content-length>
    <min-date-time>19910101T000000Z</min-date-time>
    <max-date-time>20381231T000000Z</max-date-time>
    <max-instances>150</max-instances>
    <max-recipients>250</max-recipients>
    <administrator>mailto:ischedule-admin@example.com</administrator>
  </capability-set>
</query-result>
        ]]></artwork>
      </figure>
    </section>
  </section>

  <section title="Scheduling">
    <t>
      This section defines how an iSchedule Sender can use the
      HTTP POST method to submit a scheduling message to an
      iSchedule Receiver.
    </t>

    <section anchor="schedule" title="POST Method">
      <t>
        The POST method submits a scheduling message to one or more
        recipients by targeting the request at the Request-URI
        of an iSchedule Receiver.  The request body of a POST method
        MUST contain a scheduling message or free-busy message (e.g., an
        iCalendar object that follows the iTIP semantic).
      </t>
      <t>
        A submitted scheduling message will be delivered to the calendar
        user addresses specified in the Recipient request header. A
        submitted free-busy message will be immediately executed and a
        free-busy response returned.
      </t>
      <t>
        Every POST request MUST include the iSchedule-Version request
        header.
      </t>
      <t>
        Every POST request MUST include a single Originator request header
        that specifies the calendar user address of the originator of
        the scheduling message.
        The value of the Originator request header MUST match the value
        of the ORGANIZER property or one of the specified ATTENDEE
        property depending on the specify METHOD property value as
        summarized in the following table:
      </t>
      <texttable>
        <ttcol>Method</ttcol>  <ttcol>Originator Requirement</ttcol>
        <c>PUBLISH</c>         <c>None</c>
        <c>REQUEST</c>         <c>MUST match ORGANIZER or ATTENDEE</c>
        <c>REPLY</c>           <c>MUST match ATTENDEE</c>
        <c>ADD</c>             <c>MUST match ORGANIZER</c>
        <c>CANCEL</c>          <c>MUST match ORGANIZER</c>
        <c>REFRESH</c>         <c>None</c>
        <c>COUNTER</c>         <c>MUST match ATTENDEE</c>
        <c>DECLINECOUNTER</c>  <c>MUST match ORGANIZER</c>
      </texttable>
      <t>
        Every POST request MUST include one or more Recipient
        request headers. The value of this header is a list of one
        or more calendar user addresses and corresponds to the set of
        calendar users who will have the scheduling message delivered
        to them.
      </t>
<!--
      <t>
        The Content-Type general header MUST include the type parameters
        "component" and "method" defined in <xref target="RFC5545"/>.
        The value of the "component" MUST correspond to the component type
        (e.g., "VEVENT") specified in the iCalendar object.  The value
        of the "method" parameter MUST be the same as the value of the
        "METHOD" calendar property within the iCalendar object.
      </t>
-->
      <section anchor="schedule-response" title="Schedule Response">
        <t>
          A POST request may deliver a scheduling message to one or
          more calendar users specified in the Recipient request header.
          Since the behavior of each recipient may vary, it is useful
          to get response status information for each recipient in the
          overall POST response. This specification defines a new
          XML response to convey multiple recipient status.  
        </t>
        <t>
          A response to a POST method that indicates status for
          one or more recipients MUST be a schedule-response
          XML element. This MUST contain one or more response
          elements for each recipient, with each of those containing
          elements that indicate which recipient they correspond to,
          the scheduling status of the request for that recipient,
          any error codes and an optional description.
        </t>
        <t>
          In the case of a free-busy request, the response elements
          can also contain calendar-data elements which contain
          free busy information (e.g., an iCalendar VFREEBUSY component)
          indicating the busy state of the corresponding recipient,
          assuming that the free-busy request for that recipient succeeded.
        </t>
        <t>
          TODO: Define the response body for a failed request.
        </t>
        <t>
<?rfc compact="no" ?>
          <list>
            <t>
              (supported-calendar-data-type): The resource submitted in
              the POST request MUST be a supported media type (i.e.
              text/calendar) for scheduling or free-busy messages;
            </t>
            <t>
              (valid-calendar-data): The resource submitted in the
              POST request MUST be valid data for the media type being
              specified (i.e. valid iCalendar object);
            </t>
            <t>
              (valid-scheduling-message): The resource submitted in
              the POST request MUST obey all restrictions specified for
              the POST request (e.g., the scheduling message follows the
              restrictions of iTIP);
            </t>
            <t>
              (originator-specified): The POST request MUST include a
              valid Originator request header specifying the calendar
              user address of the originator of the scheduling message.
            </t>
            <t>
              (recipient-specified): The POST request MUST include
              one or more valid Recipient request headers specifying the
              calendar user address of users to whom the scheduling message
              will be delivered.
            </t>
            <t>
              (originator-reply): The calendar user identified by the
              Originator request header in the POST request MUST have
              previously received the scheduling message that is being
              replied to when the scheduling message is an incoming
              scheduling message;
            </t>
            <t>
              (max-content-length): The request body submitted in the
              POST request MUST have an octet size less than or equal to
              the value of the max-content-length capability of
              the iSchedule Receiver.
            </t>
          </list>
<?rfc compact="yes" ?>
        </t>

      </section>

      <section anchor="schedule-status-codes" title="Status Codes for use with the POST method">
        <t>The following are examples of response codes one would expect to be
           used for this method. Note, however, that unless explicitly
           prohibited any 2/3/4/5xx series response code may be used in a
           response.</t>
           <t>
<?rfc compact="no" ?>
			<list>
				<t>
					200 (OK) - The command succeeded.
				</t>
				<t>
					400 (Bad Request) - The Sender has provided an invalid scheduling message.
				</t>
				<t>
					403 (Forbidden) - The Sender cannot submit a scheduling message to the specified Request-URI.
				</t>
				<t>
					404 (Not Found) - The URL in the Request-URI was not present.
				</t>
				<t>
					507 (Insufficient Storage) - The server did not have sufficient space to record the scheduling message.
				</t>
			</list>
<?rfc compact="yes" ?>
           </t>
      </section><!-- schedule-status-codes -->

    </section>
  </section>

  <section title="iSchedule Domain-Level Authentication">
    <t>
      iSchedule uses and extends the mechanism defined by
      DomainKeys Identified Mail (DKIM) <xref target="RFC4871"/>.
      DKIM defines a domain-level digital signature authentication
      framework for email, using public-key cryptography, with
      the domain name service (DNS) as its key server technology.
    </t>
    <t>
      The following sections describes how the DomainKeys Identified
      Mail (DKIM) service can fit into a scheduling service.
    </t>

    <section title="Signature Content">
      <t>
        The following HTTP headers MUST be included in the
        signature of a message:
        <list style="symbols">
          <t>Content-Type</t>
          <t>Host</t>
          <t>Originator</t>
          <t>Recipient</t>
        </list>

        <!--Cyrus:

        I think we need to require the Host header here to
        avoid replay on a different host. A consequence is
        that an iSchedule front-end Receiver will not be
        able to redirect a request as is to an internal
        iSchedule Receiver without breaking the signature.
        As such, I'm suggesting we also require the
        Recipient header as well...
        -->
      </t>

      <t>
        To allow iSchedule messages to transit via HTTP intermediaries,
        hop-by-hop headers, such as the following HTTP/1.1 headers
        MUST NOT be included in the signature of a message:
        <list style="symbols">
          <t>Connection</t>
          <t>Keep-Alive</t>
          <t>Proxy-Authenticate</t>
          <t>Proxy-Authorization</t>
          <t>TE</t>
          <t>Trailers</t>
          <t>Transfer-Encoding</t>
          <t>Upgrade</t>
        </list>
      </t>
    </section>

    <section title="Canonicalization">
      <t>
        Transformations can be applied to the message body during
        transit in order to safely transfer it between the iSchedule
        Sender and the iSchedule Receiver. Notably, one or more
        transfer-codings may be applied to an entity.
      </t>
      <t>
        To avoid breaking the DKIM signature of a message, the
        signer/verifier MUST compute the hash of a message body against
        the entity-body, that is, with no transfer-encoding applied to
        the message body.
      </t>
<!--
Open Issue:

Does the following work have any impact on canonicalization?

Application of RFC 2231 Encoding to Hypertext Transfer Protocol
(HTTP) Header Fields
http://tools.ietf.org/html/draft-reschke-rfc2231-in-http
-->
      <section title='The "simple-http" Header Canonicalization Algorithm'>
        <t>
          TODO.
        </t>
      </section>
      <section title='The "simple-http" Body Canonicalization Algorithm'>
        <t>
          TODO.
        </t>
      </section>
    </section>

    <section title="Key Management">
      <t>
        DKIM allows an Administrative Management Domain (ADMD) to constrain
        the use of a key to specific service types. By default, keys are
        not constrained to specific service types. As such, the same key
        could be used to sign email and calendar messages.
      </t>
      <t>
        This specification defines a new service type "calendar" to
        constrain the use of a key to calendaring and scheduling
        services:
      </t>
      <texttable>
        <ttcol>Service Type</ttcol>
        <ttcol>Description</ttcol>
        <c>calendar</c>
        <c>calendaring and scheduling service
           (not necessarily limited to iSchedule)</c>
      </texttable>
    </section>

    <section title="Delegation of Signing Authority">
      <t>
        An Administrative Management Domain (ADMD) MAY delegate
        signing authority to other ADMD by publishing a Procuration
        record. The DNS is proposed as the initial mechanism for
        Procuration records.
      </t>
      <section title="Publication of Procuration Record">
        <t>
          Signing Procuration records are published using the
          DNS TXT resource record type.
        </t>
        <t>
          _procuration._domainkey.aaa.example TXT "v=1.0 d=bbb.example"
        </t>
        <t>
          TODO: Detailed record syntax specification.
          Clarify how an ADMD can delegate signing authority to
          multiple ADMD.
        </t>
      </section>
      <section title="Procuration Lookup Procedure">
        <t>
          If the Signing Domain IDentifier (SDID) contained in the
          "d=" tag of DKIM-Signature request header specifies a
          different domain than the value of the Originator request
          header, the iSchedule Receiver MUST provide a way to verify
          whether the owner of the domain of the Originator authorize
          the domain specified in the SDID to sign on its behalf.
        </t>
        <t>
          The iSchedule Receiver MAY query DNS for a TXT record
          corresponding to the Originator's domain prefixed
          by "_procuration._domainkey." (note the trailing dot).
        </t>
        <t>
          If the result of this query is a NOERROR response (rcode=0
          in <xref target="RFC1035"/>) with an answer that is a single
          record that is a valid Procuration record, use that record,
          and the algorithm terminates.
        </t>
        <t>
          If the result of the query is NXDOMAIN or NOERROR with zero
          records, there is no Procuration record.  If the result of the
          query contains more than one record, or a record that is not
          a valid Procuration record, the Procuration result is undefined.
        </t>
        <t>
          If a query results in a "SERVFAIL" error response (rcode=2 in
          <xref target="RFC1035"/>), the algorithm terminates without
          returning a result; possible actions include queuing the message
          or returning an iSchedule error indicating a temporary failure.
        </t>
      </section>
    </section>
  </section>

  <section title="HTTP Headers" anchor="http.headers">
    <t>
      This section defines the syntax and semantics of additional
      HTTP/1.1 header fields.
    </t>
    <t>
      The header's syntax uses the optional whitespace (OWS) rule
      defined as follows:
      <figure><artwork>
   OWS = *( [ CRLF ] WSP )
      </artwork></figure>
    </t>
    <section title="DKIM-Signature Request Header" anchor="dkim-signature.header">
      <t>
        The DKIM-Signature request header MUST be specified by the
        iSchedule Sender on all scheduling requests to specify all
        of the signature and key-fetching data.
      </t>
      <figure><artwork><![CDATA[
   DKIM-Signature   = "DKIM-Signature" ":" OWS DKIM-Signature-v
   DKIM-Signature-v = tag-list
   ; tag-list is defined in Section 3.2 of <xref target="RFC4871"/>
      ]]></artwork></figure>
    </section>

    <section title="iSchedule-Version General Header" anchor="ischedule-version.header">
      <t>
        The iSchedule-Version general header field MUST be specified by
        the iSchedule Sender on requests, and by the iSchedule Receiver
        on responses.
      </t>
      <figure><artwork><![CDATA[
   iSchedule-Version      = "iSchedule-Version" ":" OWS
                            iSchedule-Version-v
   iSchedule-Version-v    = iSchedule-Version-elem
                            *( OWS "," OWS iSchedule-Version-elem )
   iSchedule-Version-elem =  1*DIGIT "." 1*DIGIT
      ]]></artwork></figure>
    </section>

    <section title="iSchedule-Via General Header" anchor="ischedule-via.header">
      <t>
        The iSchedule-Via general header field MUST be used by iSchedule
        intermediaries to indicate the intermediate protocols and
        recipients between the iSchedule Sender and the iSchedule Receiver
        on requests.
      </t>
      <figure><artwork><![CDATA[
   iSchedule-Via      = "iSchedule-Via" ":" OWS iSchedule-Via-v
   iSchedule-Via-v    = iSchedule-Via-elem
                        *( OWS "," OWS iSchedule-Via-elem )
   iSchedule-Via-elem = ( received-protocol received-by [ comment ] )

   ; received-protocol as defined in [RFC2616]
   ; received-by as defined in [RFC2616]
   ; comment as defined in [RFC2616]
      ]]></artwork></figure>
    </section>

    <section title="Originator Request Header" anchor="originator.header">
      <t>
        The Originator request header value is a URI which specifies the
        calendar user address of the originator of the scheduling message.
        Note that the absoluteURI rule is defined in
        <xref target="RFC3986"/>.
        <figure><artwork><![CDATA[
   Originator   = "Originator" ":" OWS Originator-v
   Originator-v = absoluteURI
        ]]></artwork></figure>
      </t>
    </section>

    <section title="Recipient Request Header" anchor="recipient.header">
      <t>
        The Recipient request header value is a URI which specifies the
        calendar user address of the recipients to which the POST method
        should deliver the submitted scheduling message.
        Note that the absoluteURI rule is defined in
        <xref target="RFC3986"/>.
      </t>
      <figure>
        <artwork><![CDATA[
   Recipient      = "Recipient" ":" OWS Recipient-v
   Recipient-v    = Recipient-elem *( OWS "," OWS Recipient-elem )
   Recipient-elem = absoluteURI
        ]]></artwork>
      </figure>
    </section>

  </section><!-- http.headers -->

  <section title="XML Element Definitions">
    <t>
      TODO: Re-write XML element definitions using the
      RELAX NG Compact Syntax <xref target="RELAX-NG"/>.

      <!--
        Reference to RELAX-NG might need to be informative.

        Atom Format (RFC4287) says: 

          Some sections of this specification are illustrated
          with fragments of a non-normative RELAX NG Compact schema
          [RELAX-NG].  However, the text of this specification provides
          the definition of conformance.  A complete schema appears in
          Appendix B.
      -->
    </t>
    <section anchor="schedule_response_element" title="schedule-response XML Element">
      <t>
<?rfc compact="no" ?>
        <list style="hanging">
          <t hangText="Name:">schedule-response</t>
          <t hangText="Namespace:">urn:ietf:params:xml:ns:ischedule</t>
          <t hangText="Purpose:">Contains the set of responses for a POST
                                 method request.</t>
          <t hangText="Description:">
            See <xref target="schedule-response"/>.
          </t>
          <t hangText="Definition:">
            <figure><artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT schedule-response (response*)>
              ]]></artwork>
            </figure>
          </t>
        </list>
<?rfc compact="yes" ?>
      </t>
      <section anchor="response_element" title="response XML Element">
        <t>
<?rfc compact="no" ?>
          <list style="hanging">
            <t hangText="Name:">response</t>
            <t hangText="Namespace:">urn:ietf:params:xml:ns:ischedule</t>
            <t hangText="Purpose:">Contains a single response for a POST
                                   method request.</t>
            <t hangText="Description:">
              See <xref target="schedule-response"/>.
            </t>
            <t hangText="Definition:">
              <figure>
                <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT response (recipient,
                         request-status,
                         calendar-data?,
                         error?,
                         responsedescription?)>
                ]]></artwork>
              </figure>
            </t>
          </list>
<?rfc compact="no" ?>
        </t>
        <section anchor="recipient_element" title="recipient XML Element">
          <t>
<?rfc compact="no" ?>
            <list style="hanging">
              <t hangText="Name:">recipient</t>
              <t hangText="Namespace:">urn:ietf:params:xml:ns:ischedule</t>
              <t hangText="Purpose:">The calendar user address (recipient header
                                     value) that the enclosing response for a
                                     POST method request is for.</t>
              <t hangText="Description:">
                See <xref target="schedule-response"/>.
              </t>
              <t hangText="Definition:">
                <figure>
                  <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT recipient (#PCDATA)>
                  ]]></artwork>
                </figure>
              </t>
            </list>
<?rfc compact="yes" ?>
          </t>
        </section>
        <section anchor="response_status_element" title="request-status XML Element">
          <t>
<?rfc compact="no" ?>
            <list style="hanging">
              <t hangText="Name:">request-status</t>
              <t hangText="Namespace:">urn:ietf:params:xml:ns:ischedule</t>
              <t hangText="Purpose:">The iTIP REQUEST-STATUS property value for
                                     this response.</t>
              <t hangText="Description:">
                See <xref target="schedule-response"/>.
              </t>
              <t hangText="Definition:">
                <figure>
                  <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT request-status (#PCDATA)>
                  ]]></artwork>
                </figure>
              </t>
            </list>
<?rfc compact="yes" ?>
          </t>
        </section>

        <section title="calendar-data XML Element">
          <t>
<?rfc compact="no" ?>
            <list style="hanging">
              <t hangText="Name:">calendar-data</t>
              <t hangText="Namespace:">urn:ietf:params:xml:ns:ischedule</t>
              <t hangText="Purpose:">An iCalendar object in a response to a
                                     seach for busy time information.</t>
              <t hangText="Description:">
                See <xref target="schedule-response"/>.
              </t>
              <t hangText="Definition:">
                <figure>
                  <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT calendar-data (#PCDATA)>
                  ]]></artwork>
                </figure>
              </t>
            </list>
<?rfc compact="yes" ?>
          </t>
        </section>

        <section title="error XML Element">
          <t>
<?rfc compact="no" ?>
            <list style="hanging">
              <t hangText="Name:">error</t>
              <t hangText="Namespace:">urn:ietf:params:xml:ns:ischedule</t>
              <t hangText="Purpose:">Error responses sometimes need more
                information to indicate what went wrong.</t>
              <t hangText="Description:">
                See <xref target="schedule-response"/>.
              </t>
              <t hangText="Definition:">
                <figure>
                  <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT error ANY>
                  ]]></artwork>
                </figure>
              </t>
            </list>
<?rfc compact="yes" ?>
          </t>
        </section>
        <section title="responsedescription XML Element">
          <t>
<?rfc compact="no" ?>
            <list style="hanging">
              <t hangText="Name:">responsedescription</t>
              <t hangText="Namespace:">urn:ietf:params:xml:ns:ischedule</t>
              <t hangText="Purpose:">Contains information about a status
                                    response</t>
              <t hangText="Description:">
                See <xref target="schedule-response"/>.
              </t>
              <t hangText="Definition:">
                <figure>
                  <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT responsedescription (#PCDATA)>
                  ]]></artwork>
                </figure>
              </t>
            </list>
<?rfc compact="yes" ?>
          </t>
        </section>
      </section>
    </section>
    <section title="query-result XML Element">
      <t>
<?rfc subcompact="no" ?>
        <list style="hanging">
          <t hangText="Name:">
            query-result
          </t>
          <t hangText="Namespace:">
            urn:ietf:params:xml:ns:ischedule
          </t>
          <t hangText="Purpose:">
            Contains result of a query request.
          </t>
          <t hangText="Description:">
            A generic container for the result of a query request, such as
            a query of the capabilities of an iSchedule Receiver.
          </t>
          <t hangText="Definition:">
            <figure>
              <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT query-result (capability-set)>
              ]]></artwork>
            </figure>
          </t>
        </list>
<?rfc subcompact="yes" ?>
      </t>

      <section title="capability-set XML Element">
        <t>
<?rfc subcompact="no" ?>
          <list style="hanging">
            <t hangText="Name:">
              capability-set
            </t>
            <t hangText="Namespace:">
              urn:ietf:params:xml:ns:ischedule
            </t>
            <t hangText="Purpose:">
              Contains iSchedule Receiver capabilities.
            </t>
            <t hangText="Description:">
              The capability-set element contains capabilities
              of the iSchedule Receiver.
            </t>
            <t hangText="Definition:">
              <figure>
                <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT capability-set (supported-version-set,
                             supported-scheduling-message-set,
                             supported-calendar-data-type,
                             supported-attachment-values,
                             supported-recipient-uri-scheme-set,
                             max-content-length,
                             min-date-time,
                             max-date-time,
                             max-instances,
                             max-recipients,
                             administrator) >
                ]]></artwork>
              </figure>
            </t>
          </list>
<?rfc subcompact="yes" ?>
        </t>

        <section title="supported-version-set XML Element">
          <t>
<?rfc subcompact="no" ?>
            <list style="hanging">
              <t hangText="Name:">
                supported-version-set
              </t>
              <t hangText="Namespace:">
                urn:ietf:params:xml:ns:ischedule
              </t>
              <t hangText="Purpose:">
                Identifies the iSchedule versions supported by the
                iSchedule Receiver.
              </t>
              <t hangText="Description:">
                An iSchedule Receiver MAY advertise support for
                multiple versions of the iSchedule protocol.
              </t>
              <t hangText="Definition:">
                <figure>
                  <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT supported-version-set (version)+>
                  ]]></artwork>
                </figure>
              </t>
            </list>
<?rfc subcompact="yes" ?>
          </t>
          <section title="version XML Element">
            <t>
  <?rfc subcompact="no" ?>
              <list style="hanging">
                <t hangText="Name:">
                  version
                </t>
                <t hangText="Namespace:">
                  urn:ietf:params:xml:ns:ischedule
                </t>
                <t hangText="Purpose:">
                  Specifies an iSchedule version.
                </t>
                <t hangText="Definition:">
                  <figure>
                    <artwork><![CDATA[
     <!ELEMENT version (#PCDATA)>
     <!-- PCDATA value: version number -->
                    ]]></artwork>
                  </figure>
                </t>
              </list>
  <?rfc subcompact="yes" ?>
            </t>
          </section><!-- version -->
        </section><!-- supported-version-set -->

        <section title="supported-scheduling-message-set XML Element">
          <t>
<?rfc subcompact="no" ?>
            <list style="hanging">
              <t hangText="Name:">
                supported-scheduling-message-set
              </t>
              <t hangText="Namespace:">
                urn:ietf:params:xml:ns:ischedule
              </t>
              <t hangText="Purpose:">
                Identifies the type of supported scheduling messages.
              </t>
              <t hangText="Description:">
                An iSchedule Receiver could advertise that it only provides
                support for event and free-busy scheduling messages,
                and not for to-do scheduling messages, with this capabilities.
              </t>
              <t hangText="Definition:">
                <figure>
                  <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT supported-scheduling-message-set (comp)+>
                  ]]></artwork>
                </figure>
              </t>
            </list>
<?rfc subcompact="yes" ?>
          </t>
          <section title="comp XML Element">
            <t>
<?rfc subcompact="no" ?>
              <list style="hanging">
                <t hangText="Name:">
                  comp
                </t>
                <t hangText="Namespace:">
                  urn:ietf:params:xml:ns:ischedule
                </t>
                <t hangText="Purpose:">
                  Identifies a calendar component type.
                </t>
                <t hangText="Description:">
                </t>
                <t hangText="Definition:">
                  <figure>
                    <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT comp (method)*>

     <!ATTLIST comp name CDATA #REQUIRED>
     <!-- name value: a calendar component name -->
                    ]]></artwork>
                  </figure>
                </t>
              </list>
<?rfc subcompact="yes" ?>
            </t>
            <section title="method XML Element">
              <t>
<?rfc subcompact="no" ?>
                <list style="hanging">
                  <t hangText="Name:">
                    method
                  </t>
                  <t hangText="Namespace:">
                    urn:ietf:params:xml:ns:ischedule
                  </t>
                  <t hangText="Purpose:">
                    Specifies an iCalendar method type.
                  </t>
                  <t hangText="Description:">
                  </t>
                  <t hangText="Definition:">
                    <figure>
                      <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT method EMPTY>

     <!ATTLIST method name CDATA #REQUIRED>
     <!-- name value: a method type -->
                      ]]></artwork>
                    </figure>
                  </t>
                </list>
<?rfc subcompact="yes" ?>
              </t>
            </section><!-- method -->
          </section><!-- comp -->
        </section><!-- supported-scheduling-message-set -->

        <section title="supported-calendar-data-type XML Element">
          <t>
<?rfc subcompact="no" ?>
            <list style="hanging">
              <t hangText="Name:">
                supported-calendar-data-type
              </t>
              <t hangText="Namespace:">
                urn:ietf:params:xml:ns:ischedule
              </t>
              <t hangText="Purpose:">
              </t>
              <t hangText="Description:">
              </t>
              <t hangText="Definition:">
                <figure>
                  <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT supported-calendar-data-type (calendar-data-type)+>
                  ]]></artwork>
                </figure>
              </t>
            </list>
<?rfc subcompact="yes" ?>
          </t>
          <section title="calendar-data-type XML Element">
            <t>
<?rfc subcompact="no" ?>
              <list style="hanging">
                <t hangText="Name:">
                  calendar-data-type
                </t>
                <t hangText="Namespace:">
                  urn:ietf:params:xml:ns:ischedule
                </t>
                <t hangText="Purpose:">
                  Specified a supported media type for scheduling messages.
                </t>
                <t hangText="Description:">
                </t>
                <t hangText="Definition:">
                  <figure>
                    <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT calendar-data-type EMPTY>

     <!ATTLIST calendar-data-type content-type CDATA "text/calendar"
                                  version CDATA "2.0">
     <!-- content-type value: a MIME media type -->
     <!-- version value: a version string -->
                    ]]></artwork>
                  </figure>
                </t>
              </list>
<?rfc subcompact="yes" ?>
            </t>
          </section><!-- calendar-data-type -->
        </section><!-- supported-calendar-data-type -->
        <section title="supported-attachment-values XML Element">
          <t>
<?rfc subcompact="no" ?>
            <list style="hanging">
              <t hangText="Name:">
                supported-attachment-values 
              </t>
              <t hangText="Namespace:">
                urn:ietf:params:xml:ns:ischedule
              </t>
              <t hangText="Purpose:">
                Identifies the attachment values supported.
              </t>
              <t hangText="Description:">
              </t>
              <t hangText="Definition:">
                <figure>
                  <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT supported-attachment-values (inline-attachment?,
                                            external-attachment?)>
                  ]]></artwork>
                </figure>
              </t>
            </list>
<?rfc subcompact="yes" ?>
          </t>
          <section title="inline-attachment XML Element">
            <t>
<?rfc subcompact="no" ?>
              <list style="hanging">
                <t hangText="Name:">
                  inline-attachment
                </t>
                <t hangText="Namespace:">
                  urn:ietf:params:xml:ns:ischedule
                </t>
                <t hangText="Purpose:">
                  Specifies inline attachment as a supported attachment value.
                </t>
                <t hangText="Description:">
                </t>
                <t hangText="Definition:">
                  <figure>
                    <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT inline-attachment EMPTY>
                    ]]></artwork>
                  </figure>
                </t>
              </list>
<?rfc subcompact="yes" ?>
            </t>
          </section><!-- inline-attachment -->
          <section title="external-attachment XML Element">
            <t>
<?rfc subcompact="no" ?>
              <list style="hanging">
                <t hangText="Name:">
                  external-attachment
                </t>
                <t hangText="Namespace:">
                  urn:ietf:params:xml:ns:ischedule
                </t>
                <t hangText="Purpose:">
                  Specifies external attachment as a supported attachment value.
                </t>
                <t hangText="Description:">
                </t>
                <t hangText="Definition:">
                  <figure>
                    <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT external-attachment EMPTY>
                    ]]></artwork>
                  </figure>
                </t>
              </list>
<?rfc subcompact="yes" ?>
            </t>
          </section><!-- external-attachment -->
        </section><!-- supported-attachment-values -->
        <section title="supported-recipient-uri-scheme-set XML Element">
          <t>
<?rfc subcompact="no" ?>
            <list style="hanging">
              <t hangText="Name:">
                supported-recipient-uri-scheme-set
              </t>
              <t hangText="Namespace:">
                urn:ietf:params:xml:ns:ischedule
              </t>
              <t hangText="Purpose:">
                Identifies the supported URI schemes supported in
                the Recipient HTTP request header.
              </t>
              <t hangText="Description:">
              </t>
              <t hangText="Definition:">
                <figure>
                  <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT supported-recipient-uri-scheme-set (scheme+)>
                  ]]></artwork>
                </figure>
              </t>
            </list>
<?rfc subcompact="yes" ?>
          </t>
          <section title="scheme XML Element">
            <t>
<?rfc subcompact="no" ?>
              <list style="hanging">
                <t hangText="Name:">
                  scheme
                </t>
                <t hangText="Namespace:">
                  urn:ietf:params:xml:ns:ischedule
                </t>
                <t hangText="Purpose:">
                  Specifies a supported URI scheme.
                </t>
                <t hangText="Description:">
                </t>
                <t hangText="Definition:">
                  <figure>
                    <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT scheme (#PCDATA)>
     <!-- PCDATA value: URI scheme (e.g., mailto) -->
                    ]]></artwork>
                  </figure>
                </t>
              </list>
<?rfc subcompact="yes" ?>
            </t>
          </section><!-- scheme -->
        </section><!-- supported-recipient-uri-scheme-set -->
        <section title="max-content-length XML Element">
          <t>
<?rfc subcompact="no" ?>
            <list style="hanging">
              <t hangText="Name:">
                max-content-length
              </t>
              <t hangText="Namespace:">
                urn:ietf:params:xml:ns:ischedule
              </t>
              <t hangText="Purpose:">
                Specifies the maximum size allowed for a scheduling
                message in octets.
              </t>
              <t hangText="Description:">
              </t>
              <t hangText="Definition:">
                <figure>
                  <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT max-content-length (#PCDATA)>
     <!-- PCDATA value: a numeric value (positive integer) -->
                  ]]></artwork>
                </figure>
              </t>
            </list>
<?rfc subcompact="yes" ?>
          </t>
        </section><!-- max-content-length -->
        <section title="min-date-time XML Element">
          <t>
<?rfc subcompact="no" ?>
            <list style="hanging">
              <t hangText="Name:">
                min-date-time
              </t>
              <t hangText="Namespace:">
                urn:ietf:params:xml:ns:ischedule
              </t>
              <t hangText="Purpose:">
                Specifies a DATE-TIME value indicating the earliest date and
                time in UTC that the server is willing to accept for any DATE
                or DATE-TIME value in a scheduling message.
              </t>
              <t hangText="Description:">

              </t>
              <t hangText="Definition:">
                <figure>
                  <artwork type="application/xml-dtd"><![CDATA[
   <!ELEMENT min-date-time (#PCDATA)>
   <!-- PCDATA value: an iCalendar format DATE-TIME value in UTC -->
                  ]]></artwork>
                </figure>
              </t>
            </list>
<?rfc subcompact="yes" ?>
          </t>
        </section><!-- min-date-time -->
        <section title="max-date-time XML Element">
          <t>
<?rfc subcompact="no" ?>
            <list style="hanging">
              <t hangText="Name:">
                max-date-time
              </t>
              <t hangText="Namespace:">
                urn:ietf:params:xml:ns:ischedule
              </t>
              <t hangText="Purpose:">
                Specifies a DATE-TIME value indicating the latest date and
                time in UTC that the server is willing to accept for any DATE
                or DATE-TIME value in a scheduling message.
              </t>
              <t hangText="Description:">
              </t>
              <t hangText="Definition:">
                <figure>
                  <artwork type="application/xml-dtd"><![CDATA[
   <!ELEMENT max-date-time (#PCDATA)>
   <!-- PCDATA value: an iCalendar format DATE-TIME value in UTC -->
                  ]]></artwork>
                </figure>
              </t>
            </list>
<?rfc subcompact="yes" ?>
          </t>
        </section><!-- max-date-time -->
        <section title="max-instances XML Element">
          <t>
<?rfc subcompact="no" ?>
            <list style="hanging">
              <t hangText="Name:">
                max-instances
              </t>
              <t hangText="Namespace:">
                urn:ietf:params:xml:ns:ischedule
              </t>
              <t hangText="Purpose:">
                Specifies the maximum number of recurrence instances
                allowed in a scheduling message.
              </t>
              <t hangText="Description:">
              </t>
              <t hangText="Definition:">
                <figure>
                  <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT max-instances (#PCDATA)>
     <!-- PCDATA value: a numeric value (positive integer) -->
                  ]]></artwork>
                </figure>
              </t>
            </list>
<?rfc subcompact="yes" ?>
          </t>
        </section><!-- max-instances -->
        <section title="max-recipients XML Element">
          <t>
<?rfc subcompact="no" ?>
            <list style="hanging">
              <t hangText="Name:">
                max-recipients
              </t>
              <t hangText="Namespace:">
                urn:ietf:params:xml:ns:ischedule
              </t>
              <t hangText="Purpose:">
                Specifies the maximum number of recipients allowed
                for a scheduling message.
              </t>
              <t hangText="Description:">
              </t>
              <t hangText="Definition:">
                <figure>
                  <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT max-recipients (#PCDATA)>
     <!-- PCDATA value: a numeric value (positive integer) -->
                  ]]></artwork>
                </figure>
              </t>
            </list>
<?rfc subcompact="yes" ?>
          </t>
        </section><!-- max-recipients -->
        <section title="administrator XML Element">
          <t>
<?rfc subcompact="no" ?>
            <list style="hanging">
              <t hangText="Name:">
                administrator
              </t>
              <t hangText="Namespace:">
                urn:ietf:params:xml:ns:ischedule
              </t>
              <t hangText="Purpose:">
                Provides contact information for the administrator
                of the iSchedule Receiver.
              </t>
              <t hangText="Description:">
              </t>
              <t hangText="Definition:">
                <figure>
                  <artwork type="application/xml-dtd"><![CDATA[
     <!ELEMENT administrator (#PCDATA)>
     <!-- PCDATA value: URI to contact administrator -->
                  ]]></artwork>
                </figure>
              </t>
            </list>
<?rfc subcompact="yes" ?>
          </t>
        </section><!-- administrator -->
      </section><!-- capabilities-set -->
    </section><!-- query-result -->
  </section>

  <section title="Security Considerations">
    <t>
      The process of scheduling involves the sending and receiving of
      scheduling messages. As a result, the security problems related
      to messaging in general are relevant here. In particular the
      authenticity of the scheduling messages needs to be verified.
    </t>
    <t>
      Potential attacks described in the security considerations of
      DKIM <xref target="RFC4871"/> are also applicable to iSchedule.
    </t>
    <section title="Privacy">
      <t>
        iSchedule Senders and iSchedule Receivers MUST use an
        HTTP connection protected with TLS <xref target="RFC5246"/>
        as defined in <xref target="RFC2818"/> for all transactions.
      </t>
    </section>

    <section title="Authentication">
      <t>
        iSchedule uses and extends the mechanism defined by
        DomainKeys Identified Mail (DKIM) <xref target="RFC4871"/>.
        DKIM defines a domain-level digital signature authentication
        framework for email, using public-key cryptography, with
        the domain name service as its key server technology.
      </t>
    </section>

    <section title="DNS Considerations">
      <t>
        DNS security issues are addressed by DNSSEC
        <xref target="RFC4033"/>.
      </t>
    </section>

<!--
    <section title="Authentication">
      <t>
      </t>
    </section>
    <section title="Authorization">
      <t>
        Once an iSchedule Sender has been successfully authenticated,
        the iSchedule Receiver MUST verify that the iSchedule Sender
        has the authority to send a scheduling message on behalf of
        the Originator.
      </t>
      <t>
        TODO: Clarify how verification must be done.
        Should trusted iSchedule Sender be identified as such in DNS
        (e.g., by storing their certificate in the DNS (see <xref
        target="RFC4398"/>))
        Should the iSchedule Receiver contact the iSchedule
        Receiver of the domain of the iSchedule Sender to find
        out whether it should be trusted or not?
      </t>
    </section>
-->

  </section>

  <section title="IANA Considerations" anchor="IANA">
    <section title="Namespace Registration" anchor="IANA_NS">
      <t>
        This specification registers a new URN to identify a new
        XML namespace as per <xref target="RFC3688"/>.
      </t>
      <section title="iSchedule Namespace Registration"
        anchor="IANA_NS_ISCHEDULE">  
        <t>
          Registration request for the iSchedule namespace:
        </t>  
        <t>
          URI: urn:ietf:params:xml:ns:ischedule
        </t>  
        <t>
          Registrant Contact: See the "Authors' Addresses" section of   
          this document.
        </t>  
        <t>
          XML: None. Namespace URIs do not represent an XML   
          specification.
        </t>  
      </section>
    </section>
    <section title="HTTP Headers Registration" anchor="IANA_HTTP">
      <t>
        This specification registers new headers for use with
        HTTP as per <xref target="RFC3864"/>.
      </t>
      <section title="DKIM-Signature Request Header Registration"
        anchor="IANA_HTTP_DKIM_SIGNATURE">
        <t>
          Header field name: DKIM-Signature
        </t>
        <t>
          Applicable protocol: http
        </t>
        <t>
          Status: standard
        </t>
        <t>
          Author/Change controller: IETF
        </t>
        <t>
          Specification document(s): this specification
        </t>
        <t>
          Related information: none
        </t>
      </section>
      <section title="iSchedule-Version General Header Registration"
        anchor="IANA_HTTP_ISCHEDULE_VERSION">
        <t>
          Header field name: iSchedule-Version
        </t>
        <t>
          Applicable protocol: http
        </t>
        <t>
          Status: standard
        </t>
        <t>
          Author/Change controller: IETF
        </t>
        <t>
          Specification document(s): this specification
        </t>
        <t>
          Related information: none
        </t>
      </section>
      <section title="iSchedule-Via General Header Registration"
        anchor="IANA_HTTP_ISCHEDULE_VIA">
        <t>
          Header field name: iSchedule-Via
        </t>
        <t>
          Applicable protocol: http
        </t>
        <t>
          Status: standard
        </t>
        <t>
          Author/Change controller: IETF
        </t>
        <t>
          Specification document(s): this specification
        </t>
        <t>
          Related information: none
        </t>
      </section>
      <section title="Originator Request Header Registration"
        anchor="IANA_HTTP_ORIGINATOR">
        <t>
          Header field name: Originator
        </t>
        <t>
          Applicable protocol: http
        </t>
        <t>
          Status: standard
        </t>
        <t>
          Author/Change controller: IETF
        </t>
        <t>
          Specification document(s): this specification
        </t>
        <t>
          Related information: none
        </t>
      </section>
      <section title="Recipient Request Header Registration"
        anchor="IANA_HTTP_RECIPIENT">
        <t>
          Header field name: Recipient
        </t>
        <t>
          Applicable protocol: http
        </t>
        <t>
          Status: standard
        </t>
        <t>
          Author/Change controller: IETF
        </t>
        <t>
          Specification document(s): this specification
        </t>
        <t>
          Related information: none
        </t>
      </section>
    </section>

    <section title="Well-Known URI Registration">
      <t>
        This specification registers a new well-known URI
        as per <xref target="I-D.nottingham-site-meta"/>.
      </t>
      <section title="iSchedule Well-Known URI Registration" anchor="IANA.WELL-KNOWN-URI">
        <t>
          URI suffix: ischedule
        </t>
        <t>
          Change controller:  IETF.
        </t>
        <t>
          Specification document(s): this specification
        </t>
        <t>
          Related information: none
        </t>
      </section>
    </section>

    <section title="DKIM Parameters Registration">
      <!-- See: http://www.iana.org/assignments/dkim-parameters/dkim-parameters.xhtml -->

<!--
      <section title="DKIM-Signature Tag Specification Registration">
        <t>
          This specification registers a new tag that can be used in
          DKIM-Signature fields.
          The following value should be added to the DKIM-Signature
          Tag Specifications registery established in
          Section 7.1 of <xref target="RFC4871"/>:
        </t>
        <texttable>
          <ttcol>Type</ttcol>
          <ttcol>Reference</ttcol>

          <c>n</c>
          <c>RFC XXXX</c>
        </texttable>
      </section>
-->

      <section title="DKIM-Signature Canonicalization Algorithm Registration">
        <t>
          This specification registers new canonicalization algorithms
          for the header and body of HTTP requests
          as per <xref target="RFC4871"/>.
        </t>
        <t>
          The following value should be added to the DKIM-Signature
          Canonicalization Header registery established in
          Section 7.3 of <xref target="RFC4871"/>:
        </t>
        <texttable>
          <ttcol>Type</ttcol>
          <ttcol>Reference</ttcol>

          <c>simple-http</c>
          <c>RFC XXXX</c>
        </texttable>
        <t>
          The following value should be added to the DKIM-Signature
          Canonicalization Body registery established in
          Section 7.3 of <xref target="RFC4871"/>:
        </t>
        <texttable>
          <ttcol>Type</ttcol>
          <ttcol>Reference</ttcol>

          <c>simple-http</c>
          <c>RFC XXXX</c>
        </texttable>
      </section>
      <section title="DKIM Service Type Registration">
        <t>
          This specification registers a new DKIM service type to specify
          that a given selector MUST only be used to verify messages
          of calendar services (not necessarily limited to iSchedule).
          The following value should be added to the DKIM Service Type
          Registry established in Section 7.7 of <xref target="RFC4871"/>:
        </t>
        <texttable>
          <ttcol>Type</ttcol>
          <ttcol>Reference</ttcol>

          <c>calendar</c>
          <c>RFC XXXX</c>
        </texttable>
      </section>
    </section>

  </section><!-- IANA -->

  <section title="Acknowledgments">
    <t>
      The authors would like to thank the following individuals for
      contributing their ideas and support for writing this specification:
      Mattias Amnefelt,
      Mike Douglass,
      Tomas Hnetila,
      Ciny Joy,
      Barry Leiba,
      Simon Pilette,
      Arnaud Quillaud,
      Simon Vaillancourt, and
      Wilfredo Sanchez Vega.
    </t>
    <t>
      The authors would also like to thank the Calendaring and
      Scheduling Consortium for advice with this specification,
      and for organizing interoperability testing events to help
      refine it.
    </t>
  </section>
</middle>
<back>

  <references title="Normative References">
    &rfc1035;
    &rfc2119;
    &rfc2616;
    &rfc2782;
    &rfc2818;
    &rfc3688;
    &rfc3986;
    &rfc4033;
    &rfc4871;
    &rfc5234;
    &rfc5246;
    &rfc5545;
    &rfc5546;
    &I-D.nottingham-site-meta;
    &W3C.REC-xml-20081126;
  </references>

  <references title="Informative References">
    &rfc3864;
    <!-- &rfc4398; -->
    &rfc4791;
    &rfc5585;
    &I-D.desruisseaux-caldav-sched;
    &I-D.ietf-calsify-rfc2447bis;
    <reference anchor="RELAX-NG"
      target="http://www.oasis-open.org/committees/relax-ng/compact-20021121.html">
      <front>
        <title>RELAX NG Compact Syntax</title>
        <author initials="J" surname="Clark" fullname="James Clark">
          <organization>OASIS Technical Committee: RELAX NG</organization> 
        </author> 
        <date year="2001" month="December" day="03"/>
      </front> 
    </reference> 
  </references>

  <section title="Example Scheduling Transactions" anchor="examples">
    <t>
      This section describes some example scheduling transactions that
      give a general idea of how scheduling is carried out between an
      iSchedule Sender and an iSchedule Receiver.
    </t>
    <section anchor="schedule-example" title="Example: Simple Meeting Invitation">
      <t>
        In the following example, the iSchedule Sender requests the iSchedule
        Receiver to deliver a meeting invitation (scheduling REQUEST)
        to the calendar user mailto:cyrus@example.org.
        The response indicates that delivery of the scheduling message
        was successful.
      </t>
      <figure>
        <preamble>&gt;&gt; Request &lt;&lt;</preamble>
        <artwork><![CDATA[
POST /.well-known/ischedule HTTP/1.1
DKIM-Signature: a=rsa-sha256; d=example.com; s=jupiter;
 c=simple-http; q=dns/txt; t=1268069852; x=1283918400;
 h=Originator:Recipient:Host:Content-Type;
 bh=XXXxxxXXXxxxXXXxxxXXXxxxXXXxxxXXXxxx;
 b=XXXxxxXXXxxxXXXxxxXXXxxxXXXxxxXXXxxxXXXxxxXXXxxxXXXxxx
Host: cal.example.org
iSchedule-Version: 1.0
Originator: mailto:bernard@example.com
Recipient: mailto:cyrus@example.org
Content-Type: text/calendar; component=VEVENT; method=REQUEST
Content-Length: xxxx

BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//Example Corp.//EN
METHOD:REQUEST
BEGIN:VEVENT
DTSTAMP:20040901T200200Z
ORGANIZER:mailto:bernard@example.com
DTSTART:20040902T130000Z
DTEND:20040902T140000Z
SUMMARY:Design meeting
UID:34222-232@example.com
ATTENDEE;PARTSTAT=ACCEPTED;ROLE=CHAIR;CUTYPE=IND
 IVIDUAL;CN=Bernard Desruisseaux:mailto:bernard@
 example.com
ATTENDEE;PARTSTAT=NEEDS-ACTION;RSVP=TRUE;ROLE=RE
 Q-PARTICIPANT;CUTYPE=INDIVIDUAL;CN=Cyrus Daboo:
 mailto:cyrus@example.org
END:VEVENT
END:VCALENDAR
]]>
        </artwork>
      </figure>
      <figure>
        <preamble>&gt;&gt; Response &lt;&lt;</preamble>
        <artwork><![CDATA[
HTTP/1.1 200 OK
Date: Thu, 02 Sep 2004 16:53:32 GMT
Content-Type: application/xml; charset=utf-8
Content-Length: xxxx
iSchedule-Version: 1.0

<?xml version="1.0" encoding="utf-8" ?>
<schedule-response xmlns="urn:ietf:params:xml:ns:ischedule">
<response>
<recipient>mailto:cyrus@example.org</recipient>
<request-status>2.0;Success</request-status>
<responsedescription>Delivered to recipient</responsedescription>
</response>
</schedule-response>
]]>
        </artwork>
      </figure>
    </section>

    <section anchor="schedule-fb-example" title="Example: Search for Busy Time Information">
      <t>
        In the following example, the iSchedule Sender requests the iSchedule
        Receiver to determine the busy information of the calendar
        user mailto:cyrus@example.org, over the time range specified
        by the scheduling message sent in the request. The response
        includes VFREEBUSY components with the busy time of the
        requested calendar user.
      </t>
      <figure>
        <preamble>&gt;&gt; Request &lt;&lt;</preamble>
        <artwork><![CDATA[
POST /.well-known/ischedule HTTP/1.1
DKIM-Signature: a=rsa-sha256; d=example.com; s=jupiter;
 c=simple-http; q=dns/txt; t=1268069852; x=1283918400;
 h=Originator:Recipient:Host:Content-Type;
 bh=XXXxxxXXXxxxXXXxxxXXXxxxXXXxxxXXXxxx;
 b=XXXxxxXXXxxxXXXxxxXXXxxxXXXxxxXXXxxxXXXxxxXXXxxxXXXxxx
Host: cal.example.org
iSchedule-Version: 1.0
Originator: mailto:bernard@example.com
Recipient: mailto:cyrus@example.org
Content-Type: text/calendar; component=VFREEBUSY; method=REQUEST
Content-Length: xxxx

BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//Example Corp.//EN
METHOD:REQUEST
BEGIN:VFREEBUSY
DTSTAMP:20040901T200200Z
ORGANIZER:mailto:bernard@example.com
DTSTART:20040902T000000Z
DTEND:20040903T000000Z
UID:34222-232@example.com
ATTENDEE;CN=Cyrus Daboo:mailto:cyrus@example.org
END:VFREEBUSY
END:VCALENDAR
]]>
        </artwork>
      </figure>
      <figure>
        <preamble>&gt;&gt; Response &lt;&lt;</preamble>
        <artwork><![CDATA[
HTTP/1.1 200 OK
Date: Thu, 02 Sep 2004 16:53:32 GMT
Content-Type: application/xml; charset=utf-8
Content-Length: xxxx
iSchedule-Version: 1.0

<?xml version="1.0" encoding="utf-8" ?>
<schedule-response xmlns="urn:ietf:params:xml:ns:ischedule">
<response>
<recipient>mailto:cyrus@example.org</recipient>
<request-status>2.0;Success</request-status>
<calendar-data>BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//Example Corp.//EN
METHOD:REPLY
BEGIN:VFREEBUSY
DTSTAMP:20040901T200200Z
ORGANIZER:mailto:bernard@example.com
DTSTART:20040902T000000Z
DTEND:20040903T000000Z
UID:34222-232@example.com
ATTENDEE;CN=Cyrus Daboo:mailto:cyrus@example.org
FREEBUSY;FBTYPE=BUSY-UNAVAILABLE:20040902T000000Z/
 20040902T090000Z,20040902T170000Z/20040903T000000Z
FREEBUSY;FBTYPE=BUSY:20040902T120000Z/20040902T130000Z
END:VFREEBUSY
END:VCALENDAR
</calendar-data>
</response>
</schedule-response>
]]>
        </artwork>
      </figure>
    </section>

    <section anchor="schedule-example-task" title="Example: Simple Task Assignment">
      <t>
        In the following example, the iSchedule Sender requests the iSchedule
        Sender to deliver a task assignment (scheduling REQUEST) to
        the calendar user mailto:cyrus@example.org.
        The response indicates that delivery of the scheduling message
        was successful.
      </t>
      <figure>
        <preamble>&gt;&gt; Request &lt;&lt;</preamble>
        <artwork><![CDATA[
POST /.well-known/ischedule HTTP/1.1
DKIM-Signature: a=rsa-sha256; d=example.com; s=jupiter;
 c=simple-http; q=dns/txt; t=1268069852; x=1283918400;
 h=Originator:Recipient:Host:Content-Type;
 bh=XXXxxxXXXxxxXXXxxxXXXxxxXXXxxxXXXxxx;
 b=XXXxxxXXXxxxXXXxxxXXXxxxXXXxxxXXXxxxXXXxxxXXXxxxXXXxxx
Host: cal.example.org
iSchedule-Version: 1.0
Originator: mailto:bernard@example.com
Recipient: mailto:cyrus@example.org
Content-Type: text/calendar; component=VTODO; method=REQUEST
Content-Length: xxxx

BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//Example Corp.//CalDAV Client//EN
METHOD:REQUEST
BEGIN:VTODO
DTSTAMP:20040901T200200Z
ORGANIZER:mailto:bernard@example.com
DUE:20070505
SUMMARY:Review Internet-Draft
UID:34222-456@example.com
ATTENDEE;PARTSTAT=NEEDS-ACTION;RSVP=TRUE;ROLE=RE
 Q-PARTICIPANT;CUTYPE=INDIVIDUAL;CN=Cyrus Daboo:
 mailto:cyrus@example.org
END:VEVENT
END:VCALENDAR
]]>
        </artwork>
      </figure>
      <figure>
        <preamble>&gt;&gt; Response &lt;&lt;</preamble>
        <artwork><![CDATA[
HTTP/1.1 200 OK
Date: Thu, 02 Sep 2004 16:53:32 GMT
Content-Type: application/xml; charset=utf-8
Content-Length: xxxx
iSchedule-Version: 1.0

<?xml version="1.0" encoding="utf-8" ?>
<schedule-response xmlns="urn:ietf:params:xml:ns:ischedule">
<response>
<recipient>mailto:cyrus@example.org</recipient>
<request-status>2.0;Success</request-status>
<responsedescription>Delivered to recipient</responsedescription>
</response>
</schedule-response>
]]>
        </artwork>
      </figure>
    </section>
  </section>

  <section title="Open Issues">
    <t>
      <list style="numbers">
        <t>
          As specified in Section 3.6 of DKIM, parameters to the key
          lookup algorithm are the type of the lookup (the "q=" tag),
          the domain of the signer (the "d=" tag of the DKIM-Signature
          header field), and the selector (the "s=" tag).
          Is the use of the "s=" and "d=" tags sufficient to allow
          "email" and "calendar" DKIM keys to be managed separately,
          or should a new tag be introduced to override the default
          DNS name to look for (e.g., "n=_calendardomainkey", to
          override "_domainkey")?
        </t>
        <t>
          Should we forbid the "DKIM-Signature" header to be
          listed in the HTTP "Trailer" header?  Else, should we require a
          "DKIM-Signature-Header" header that would specify the algorithm
          (a= tag) up front (along with s= and d= tags to match the
          proper DKIM-Signature if multiple values are provided) when
          the "DKIM-Signature" header is listed in the "Trailer" header?
          Knowning the algorithm up front would avoid going through the
          data twice. "Trailer: Content-MD5" doesn't have this issue
          since the algorithm is implicit.
        </t>
        <t>
          Should the "Host" and "Recipient" request header really be
          REQUIRED to be signed?   Should we required the actual
          Request-URI to be signed as well?
        </t>
      </list>
    </t>
  </section>

  <section title="Change Log (to be removed by RFC Editor prior to publication)">
    <section title="Changes in -01">
      <t>
        <list style="letters">
          <t>
            Introduced use of DKIM for calendaring and scheduling services.
          </t>
          <t>
            The XML elements "supported-calendar-data" and "calendar-data"
            were renamed to "supported-calendar-data-type" and
            "calendar-data-type" respectively to avoid confusion with
            the "calendar-data" XML element being used in the
            "response" XML element.
          </t>
          <t>
            The "recipient" XML element was redefined to accept
            (#PCDATA) instead of an "href" XML element.
          </t>
          <t>
            The grammar of new HTTP headers is now using the ABNF
            syntax defined in <xref target="RFC5234"/>.
          </t>
          <t>
            Fixed various typos.
          </t>
        </list>
      </t>
    </section>
  </section>
</back>
</rfc>

<!--
TODO:

- Version handling for capabilities query?

> Receiver MUST return a response compatible with the
> iSchedule-Version sent by iSchedule Sender, or else return an error...

-->
