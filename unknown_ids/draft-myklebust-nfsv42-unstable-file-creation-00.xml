<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<rfc category="std" ipr="trust200902">
<?rfc iprnotified="no" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc toc="yes" ?>
<?rfc compact="no"?>
<?rfc subcompact="yes"?>

<front>
	<title abbrev="NFSv4.2 file creation and updates">
		NFS Version 4 Minor Version 2 unstable file creation and attribute update improvements
	</title>
	<author initials="T." surname="Myklebust"
		fullname="Trond Myklebust">
		<organization>
			NetApp
		</organization>
		<address>
			<postal>
				<street>3215 Bellflower Ct</street>
				<city>Ann Arbor</city>
				<region>MI</region>
				<code>48103</code>
				<country>USA</country>
			</postal>
			<phone>+1-734-662-6608</phone>
			<email>Trond.Myklebust@netapp.com</email>
		</address>
	</author>
	<date month="October" year="2010" />
	<area>Transport</area>
	<workgroup>NFSv4</workgroup>
	<keyword>RFC</keyword>
	<keyword>Request for Comments</keyword>
	<keyword>NFSv4</keyword>
	<keyword>Network File System</keyword>
	<keyword>NFSv4.2 file unstable file creation and attribute updates</keyword>
	<abstract>
		<t>
			This document describes an extension to the
			NFSv4 protocol to allow clients to create and
			write files with greater efficiency.
		</t>
		<t>
			The first proposal allows the server to defer
			creating the file on stable storage when replying
			to an OPEN call. The aim is to improve server
			efficiency and scalability by reducing the number
			of required disk accesses when writing a file from
			scratch.
		</t>
		<t>
			The second proposal allows the server to
			share information about the implementation of its
			change attribute with the client. The aim is to
			improve the client's ability to determine the order
			in which parallel updates to the same file were
			processed.
		</t>
	</abstract>
	<note title="Keywords">
		<t>
			The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
			"SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
			and "OPTIONAL" in this document are to be interpreted as
			described in <xref target="RFC2119"/>.
		</t>
	</note>
</front>
<middle>
	<section title="Introduction">
		<t>
			One of the remaining sources of performance and
			scalability issues in the NFSv4.1 protocol
			<xref target="RFC5661" />,
			for workloads that require the
			creation of large numbers of files, is that file
			creation is still required to be synchronous.
			This limitation means that the minimum number
			of disk accesses in a workload that involves
			creating a file, writing to it and then closing it
			is 2: one at OPEN time, and one at COMMIT.
			The following proposal allows the client to indicate
			to the server, by means of a new attribute, that
			it is prepared to take on the burden of re-creating
			the file from scratch if the server should reboot
			before the file has been fully written.
			The same attribute also allows the client to check
			on the state of the file on the server, and thus
			perhaps to optimise away unnecessary COMMIT requests.
		</t>
		<t>
			Another frequent source of inefficiencies is due
			to the lack of clarity in the protocol defining the
			change attribute. While the change attribute itself
			is a mandatory attribute, it is not sufficiently well
			defined to allow the client to conclude which value
			represents the current state of the file, after two
			COMPOUNDs, both containing WRITE and GETATTR requests
			for the same file, have been sent in parallel. In
			some cases, the only recourse available to the client
			may be to send a third COMPOUND containing a
			GETATTR after receiving the responses to the first two.
			The solution is to allow the server to share details
			about how the change attribute is expected to evolve
			in this kind of situation.
		</t>
	</section>
	<section title="Definition of the 'stable_state' per-file attribute">
		<figure><artwork>
const NFS4_UNSTABLE_METADATA = 0x00000001;
const NFS4_UNSTABLE_DATA     = 0x00000002;
const NFS4_UNSTABLE_PNFS     = 0x00000004;

		</artwork></figure>
		<texttable>
			<ttcol align="left">Name</ttcol>
			<ttcol align="center">Id</ttcol>
			<ttcol align="left">Data Type</ttcol>
			<ttcol align="left">Acc</ttcol>
			<c>stable_state</c>
			<c>XX</c>
			<c>uint32_t</c>
			<c>R W</c>
		</texttable>
		<t>
			The attribute 'stable_state' is an optional
			per-file attribute that can be used by the
			client to determine whether or not the server
			believes that all metadata and data has
			been committed to persistent storage. It is
			expected that clients may wish to poll it as
			part of a post-op attribute request or an
			attribute refresh.

			<list style="symbols">
				<t>
					If the server returns a zero value, then the
					client may assume that all metadata and data
					changes that were made since the server last
					rebooted have been committed to persistent
					storage.
				</t>
				<t>
					If the server sets the bits NFS4_UNSTABLE_METADATA
					and/or NFS4_UNSTABLE_DATA, then this means that
					there may be respectively metadata, or data that
					has not been synced to disk. The client should
					be prepared to send a COMMIT request in order to
					ensure persistence of metadata and data.
				</t>
				<t>
					If the server sets the bit NFS4_UNSTABLE_PNFS,
					then this indicates that there are outstanding
					layouts for write, and thus the state of the
					file may not be fully known to the server.
				</t>
			</list>
		</t>
		<t>
			A naive server may choose to implement 'stable_state'
			in terms of a simple flag: it sets NFS4_UNSTABLE_DATA
			when it receives an unstable WRITE request, sets
			NFS4_UNSTABLE_METADATA when it receives an unstable
			OPEN or SETATTR requests and clears both flags
			when it receives a COMMIT. While such an
			implementation may not be as useful for avoiding
			unnecessary COMMIT operations, it is sufficient
			to support unstable OPEN and SETATTR.
		</t>
		<section title="Use of the 'stable_state' attribute for unstable OPEN requests">
			<t>
				We propose a new mode of file creation named
				"unstable file creation". By choosing this
				mode of creation, the client is notifying the
				server that it may defer syncing to disk the
				new file's directory entry as well as the new
				file metadata. In case of a server reboot, the
				client is then responsible for replaying the
				file creation if the reboot occurred before
				the file metadata was committed to disk.
			</t>
			<section title="Client use of the 'stable_state' attribute">
				<t>
					In order to indicate that the client wishes
					to have the server use unstable file creation,
					it must set the NFS4_UNSTABLE_METADATA bit in
					the optional attribute 'stable_state'. Upon
					return of the OPEN call, the client then
					checks that 'stable_state' was indeed set by
					inspecting the 'attrset' bitmap in the usual
					way. It can assume that if the 'stable_state'
					was not set, then the file has been created
					in persistent storage.
				</t>
				<t>
					The client MUST NOT set the 'stable_state'
					to any value other than NFS4_UNSTABLE_METADATA.
					The server SHOULD return NFS4ERR_INVAL if it
					receives an invalid value.
				</t>
				<t>
					Once the client is done making changes to the
					file, it may use a COMMIT to force the server
					to flush all data and metadata changes to
					persistent storage.
				</t>
			</section>
			<section title="Server response upon receiving an unstable OPEN request">
				<t>
					Upon receiving an OPEN request that
					includes a 'stable_state' attribute,
					the server MAY choose to ignore it,
					and simply apply the NFSv4.1 rule
					that all metadata must be committed
					to persistent storage. If so, it
					simply omits the 'stable_state' bit
					from the returned attribute bitmap.
				</t>
				<t>
					The server MUST NOT set the
					'stable_state' flag if the file already
					exists.
				</t>
				<t>
					If the server does choose to honour
					the 'stable_state' attribute, then it
					MUST also return a write delegation to
					the client. This write delegation is
					needed in order to allow the client
					to detect the recovery edge condition
					in which a second client attempts
					to rename the file or delete it just
					prior to a server reboot.
				</t>
				<t>
					Once the file has been created in the
					server cache memory, the server is
					then free to process the remaining
					elements of the COMPOUND without
					syncing the new file metadata to
					disk.
				</t>
			</section>
			<section title="Delegation return and unstable OPEN">
				<t>
					If the client returns the write delegation,
					then it MUST ensure that the file metadata is
					in a stable state. It does so by
					sending a COMMIT operation, unless polling
					has already established that the
					'stable_state' attribute no longer
					sets the NFS4_UNSTABLE_METADATA bit.
				</t>
			</section>
			<section title="Client unstable OPEN recovery in case of a server reboot">
				<figure><artwork>
enum open_claim_type4 {
        /*
         * Not a reclaim.
         */
        CLAIM_NULL              = 0,

        CLAIM_PREVIOUS          = 1,
        CLAIM_DELEGATE_CUR      = 2,
        CLAIM_DELEGATE_PREV     = 3,

        /*
         * Not a reclaim.
         *
         * Like CLAIM_NULL, but object identified
         * by the current filehandle.
         */
        CLAIM_FH                = 4, /* new to v4.1 */

        /*
         * Like CLAIM_DELEGATE_CUR, but object identified
         * by current filehandle.
         */
        CLAIM_DELEG_CUR_FH      = 5, /* new to v4.1 */

        /*
         * Like CLAIM_DELEGATE_PREV, but object identified
         * by current filehandle.
         */
        CLAIM_DELEG_PREV_FH     = 6, /* new to v4.1 */

        /*
         * Like CLAIM_PREVIOUS, but object identified
         * by directory filehandle + filename.
         */
        CLAIM_PREVIOUS_UNSTABLE = 7
};

union open_claim4 switch (open_claim_type4 claim) {
 /*
  * No special rights to file.
  * Ordinary OPEN of the specified file.
  */
 case CLAIM_NULL:
        /* CURRENT_FH: directory */
        component4      file;

 /*
  * Right to the file established by an
  * open previous to server reboot.  File
  * identified by filehandle obtained at
  * that time rather than by name.
  */
 case CLAIM_PREVIOUS:
        /* CURRENT_FH: file being reclaimed */
        open_delegation_type4   delegate_type;

 /*
  * Right to file based on a delegation
  * granted by the server.  File is
  * specified by name.
  */
 case CLAIM_DELEGATE_CUR:
        /* CURRENT_FH: directory */
        open_claim_delegate_cur4        delegate_cur_info;

 /*
  * Right to file based on a delegation
  * granted to a previous boot instance
  * of the client.  File is specified by name.
  */
 case CLAIM_DELEGATE_PREV:
        /* CURRENT_FH: directory */
        component4      file_delegate_prev;

 /*
  * Like CLAIM_NULL.  No special rights
  * to file.  Ordinary OPEN of the
  * specified file by current filehandle.
  */
 case CLAIM_FH: /* new to v4.1 */
        /* CURRENT_FH: regular file to open */
        void;

 /*
  * Like CLAIM_DELEGATE_PREV.  Right to file based on a
  * delegation granted to a previous boot
  * instance of the client.  File is identified by
  * by filehandle.
  */
 case CLAIM_DELEG_PREV_FH: /* new to v4.1 */
        /* CURRENT_FH: file being opened */
        void;

 /*
  * Like CLAIM_DELEGATE_CUR.  Right to file based on
  * a delegation granted by the server.
  * File is identified by filehandle.
  */
 case CLAIM_DELEG_CUR_FH: /* new to v4.1 */
         /* CURRENT_FH: file being opened */
         stateid4       oc_delegate_stateid;

 /*
  * Right to the file established by an
  * unstable open previous to server reboot.
  * File is specified by name.
  */
 case CLAIM_PREVIOUS_UNSTABLE: /* new to v4.2 */
        /* CURRENT_FH: directory */
        component4     file_previous_unstable;
};
				</artwork></figure>
				<t>
					A server that supports unstable file
					creation SHOULD reject all CREATE and
					ordinary file creation attempts during
					the grace period using the error
					NFS4ERR_GRACE in order to allow
					clients to recover any unstable files
					that may have been lost.
				</t>
				<t>
					In order to recover the file,
					the client MUST replay the original
					OPEN that was used to create the file,
					using an open claim type of
					CLAIM_PREVIOUS_UNSTABLE.
					<list style="symbols">
						<t>
							If the server discovers
							that the file already
							exists, it treats the
							OPEN as if it were a
							CLAIM_PREVIOUS request
							for a write delegation.
						</t>
						<t>
							If the file does not
							exist, then the server
							creates the file in
							the usual fashion
							and returns a valid
							write delegation.
						</t>	
					</list>
				</t>
				<t>
				</t>
			</section>
			<section title="Directory cache consistency and unstable files">
				<t>
					While the client that created the file
					can easily recover in case of a server
					reboot, it is not necessarily so easy
					for other clients to do so. While the
					write delegation does indeed ensure
					that those clients do not hold the
					file open (neither do they hold any
					cached data), it does not guarantee
					that they are not caching LOOKUP or
					READDIR data.
				</t>
				<t>
					In order to avoid issues with directory
					cache consistency across server reboots, it is
					therefore RECOMMENDED that servers
					ensure that initial file metadata be
					committed to persistent storage prior
					to replying to a another client's
					LOOKUP of the new file, or READDIR
					of the directory in which the new file
					was created. This will also prevent
					those clients from seeing
					filehandles and fileids that might
					change upon server reboot.
				</t>
			</section>
		</section>
		<section title="Use of the 'stable_state' attribute in unstable SETATTR requests">
			<t>
				If it holds a write delegation, the client may
				also use the 'stable_state' attribute in a
				SETATTR request to indicate to the server that
				it is ready to replay this SETATTR in the case
				of a server reboot.
			</t>
			<t>
				The procedure is the same as for OPEN. In order
				to indicate to the server that it wants the
				SETATTR request to be unstable, the client
				sets the 'stable_state' attribute to the value
				NFS4_UNSTABLE_METADATA.
			</t>
			<t>
				Again, the server MAY ignore the 'stable_state'
				attribute, in which case it MUST immediately
				commit the attributes to stable storage, and
				MUST clear the 'stable_state' bit in the
				returned attribute bitmap.
			</t>
			<t>
				If the client does not hold a valid
				write delegation, then the server MUST also
				ignore the 'stable_state' attribute.
			</t>
			<section title="Client unstable SETATTR recovery in case of a server reboot">
				<t>
					If the server reboots before the client
					has had a chance to issue a COMMIT,
					then after recovering the write
					delegation, the client SHOULD
					check the server attributes against
					its own cached values. If there is
					a mismatch, then it is responsible
					for correcting this by replaying
					the relevant SETATTR calls.
				</t>
			</section>
			<section title="Delegation return and unstable SETATTR">
				<t>
					If the client returns the write delegation,
					then it MUST ensure that the file metadata is
					in a stable state. It does so by
					sending a COMMIT operation, unless polling
					has already established that the
					'stable_state' attribute no longer
					sets the NFS4_UNSTABLE_METADATA bit.
				</t>
			</section>
		</section>
	</section>
	<section title="Definition of the 'change_attr_type' per-file system attribute">
		<figure><artwork>
enum change_attr_typeinfo = {
        NFS4_CHANGE_TYPE_IS_MONOTONIC_INCR         = 0,
        NFS4_CHANGE_TYPE_IS_VERSION_COUNTER        = 1,
        NFS4_CHANGE_TYPE_IS_VERSION_COUNTER_NOPNFS = 2,
        NFS4_CHANGE_TYPE_IS_TIME_METADATA          = 3,
        NFS4_CHANGE_TYPE_IS_UNDEFINED              = 4
};
		</artwork></figure>
		<texttable>
			<ttcol align="left">Name</ttcol>
			<ttcol align="center">Id</ttcol>
			<ttcol align="left">Data Type</ttcol>
			<ttcol align="left">Acc</ttcol>
			<c>change_attr_type</c>
			<c>XX</c>
			<c>enum change_attr_typeinfo</c>
			<c>R</c>
		</texttable>
		<t>
			Although the original NFSv4 protocol
			<xref target="RFC3530" /> does describe a possible
			implementation of the change attribute in terms of
			the time_metadata attribute, it does little to limit
			the implementation other than to state that the value
			changes if the file data, directory contents or
			attributes change.
		</t>
		<t>
			While this allows for a wide range of implementations,
			it also leaves the client with a conundrum: how does
			it determine which is the most recent value for the
			change attribute in a case where several RPC calls
			have been issued in parallel?
		</t>
		<t>
			The proposed solution is to have the NFS server
			provide additional information about how it
			expects the change attribute value to evolve. To
			do so, we provide for a new optional attribute,
			'change_attr_type', which may take values from
			enum change_attr_typeinfo as follows:
			<list style="hanging">
				<t hangText="NFS4_CHANGE_TYPE_IS_MONOTONIC_INCR:">
					The change attribute MUST change in
					a monotonically increasing
					manner.
				</t>
				<t hangText="NFS4_CHANGE_TYPE_IS_VERSION_COUNTER:">
					The change attribute MUST increment by
					the value "1" for every atomic change to the
					file data, attributes or directory
					contents. This property is preserved
					when writing to pNFS data servers.
				</t>
				<t hangText="NFS4_CHANGE_TYPE_IS_VERSION_COUNTER_NOPNFS:">
					The change attribute MUST increment by
					the value "1" for every atomic change to the
					file data, attributes or directory
					contents. In the case where the client
					is writing to pNFS data servers, the
					number of increments is not guaranteed
					to exactly match the number of writes.
				</t>
				<t hangText="NFS4_CHANGE_TYPE_IS_TIME_METADATA:">
					The change attribute is implemented as
					suggested in the NFSv4 spec
					<xref target="RFC3530" /> in terms of
					the time_metadata attribute.
				</t>
				<t hangText="NFS4_CHANGE_TYPE_IS_UNDEFINED:">
					The change attribute does not take
					values that fit into any of these
					categories.
				</t>
			</list>
		</t>
		<t>
			If either NFS4_CHANGE_TYPE_IS_MONOTONIC_INCR,
			NFS4_CHANGE_TYPE_IS_VERSION_COUNTER, or
			NFS4_CHANGE_TYPE_IS_TIME_METADATA are set, then
			the client knows at the very least that the
			change attribute is monotonically increasing, which
			is sufficient to resolve the question of which
			value is the most recent.
		</t>
		<t>
			If the client sees the value
			NFS4_CHANGE_TYPE_IS_TIME_METADATA, then by inspecting
			the value of the 'time_delta' attribute it
			additionally has the option of detecting rogue server
			implementations that use time_metadata in violation
			of the spec.
		</t>
		<t>
			Finally, if the client sees NFS4_CHANGE_TYPE_IS_VERSION_COUNTER,
			it has the ability to predict what the resulting change
			attribute value should be after a COMPOUND containing
			a SETATTR, WRITE, or CREATE. This again allows it to
			detect changes made in parallel by another client.
			The value NFS4_CHANGE_TYPE_IS_VERSION_COUNTER_NOPNFS
			permits the same, but only if the client is not
			doing pNFS WRITEs.
		</t>
	</section>
</middle>
<back>
	<references>
		<reference anchor="RFC2119">
			<front>
				<title>
					Key words for use in RFCs to Indicate Requirement Levels
				</title>
				<author initials="S." surname="Bradner" fullname="S. Bradner">
					<organization abbrev="Harvard University">
						Harvard University
					</organization>
				</author>
			</front>
			<seriesInfo name="RFC" value="2119" />
		</reference>
		<reference anchor="RFC5661">
			<front>
				<title>
					Network File System (NFS) Version 4 Minor Version 1 Protocol
				</title>
				<author initials="S." surname="Shepler" fullname="S. Shepler, Ed">
					<organization abbrev="Speedstor">
						Speedstor, Inc.
					</organization>
				</author>
				<author initials="M." surname="Eisler" fullname="M. Eisler, Ed">
					<organization abbrev="NetApp">
						NetApp
					</organization>
				</author>
				<author initials="D." surname="Noveck" fullname="D. Noveck, Ed">
					<organization abbrev="NetApp">
						NetApp
					</organization>
				</author>
			</front>
			<seriesInfo name="RFC" value="5661" />
		</reference>
		<reference anchor="RFC3530">
			<front>
				<title>
					Network File System (NFS) version 4 Protocol
				</title>
				<author initials="S." surname="Shepler" fullname="S. Shepler, Ed">
					<organization abbrev="Sun Microsystems">
						Sun Microsystems, Inc.
					</organization>
				</author>
				<author initials="B." surname="Callaghan" fullname="B. Callaghan">
					<organization abbrev="Sun Microsystems">
						Sun Microsystems, Inc.
					</organization>
				</author>
				<author initials="D." surname="Robinson" fullname="D. Robinson">
					<organization abbrev="Sun Microsystems">
						Sun Microsystems, Inc.
					</organization>
				</author>
				<author initials="R." surname="Thurlow" fullname="R. Thurlow">
					<organization abbrev="Sun Microsystems">
						Sun Microsystems, Inc.
					</organization>
				</author>
				<author initials="C." surname="Beame" fullname="C. Beame">
					<organization abbrev="Hummingbird">
						Hummingbird, Inc.
					</organization>
				</author>
				<author initials="M." surname="Eisler" fullname="M. Eisler">
					<organization abbrev="Network Appliance">
						Network Appliance, Inc
					</organization>
				</author>
				<author initials="D." surname="Noveck" fullname="D. Noveck">
					<organization abbrev="Network Appliance">
						Network Appliance, Inc
					</organization>
				</author>
			</front>
			<seriesInfo name="RFC" value="3530" />
		</reference>
	</references>
</back>
</rfc>
