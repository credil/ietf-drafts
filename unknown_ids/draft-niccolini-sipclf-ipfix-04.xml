<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>
<?rfc compact="yes" ?>
<rfc category="info" docName="draft-niccolini-sipclf-ipfix-04"
     ipr="trust200902">
  <front>
   <title abbrev="SIPCLF - IPFIX">
     A Common Log Format for SIP using IPFIX Files
   </title>

   <author fullname="Saverio Niccolini" initials="S." surname="Niccolini">
    <organization abbrev="NEC">
      NEC Laboratories Europe, NEC Europe Ltd.
    </organization>
      <address>
        <postal>
          <street>Kurfuersten-Anlage 36</street>
          <city>Heidelberg</city>
          <code>69115</code>
          <country>Germany</country>
        </postal>
        <phone>+49 (0) 6221 4342 118</phone>
        <email>niccolini@neclab.eu</email>
        <uri>http://www.neclab.eu</uri>
      </address>
    </author>
    <author fullname="Benoit Claise" initials="B." surname="Claise">
      <organization>Cisco Systems Inc.</organization>
      <address>
        <postal>
          <street>De Kleetlaan 6a b1</street>
          <city>Diegem</city>
          <region></region>
          <code>1813</code>
          <country>Belgium</country>
        </postal>
        <phone>+32 2 704 5622</phone>
        <facsimile></facsimile>
        <email>bclaise@cisco.com</email>
        <uri></uri>
      </address>
    </author>
    <author initials="B." surname="Trammell" fullname="Brian Trammell">
      <organization abbrev="ETH Zurich">
        ETH Zurich 
      </organization>
      <address>
        <postal>
          <street>Gloriastrasse 35</street>
          <city>8092 Zurich</city>
          <country>Switzerland</country>
        </postal>
        <email>trammell@tik.ee.ethz.ch</email>
      </address>
    </author>
    
    <author initials="H." surname="Kaplan" fullname="Hadriel Kaplan">
      <organization abbrev="Acme Packet">Acme Packet</organization>
      <address>
        <postal>
          <street>71 Third Ave.</street>
          <city>Burlington</city>
          <region>MA</region>
          <code>01803</code>
          <country>USA</country>
        </postal>
        <phone></phone>
        <email>hkaplan@acmepacket.com</email>
      </address>
    </author>

    <date month="August" day="17" year="2010" />

    <abstract>
      <t>
        This draft defines a log file format conforming to the information 
        model defined in the SIP-CLF problem statement based upon
        the IPFIX File Format. It details the creation and interpretation of
        these files, and provides examples based on common SIP situations.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">

      <t>The SIPCLF WG is chartered to produce a format suitable for logging
      at any SIP element. The charter explicitly addresses the need to search,
      merge and summarize log records from one or more possibly diverse
      elements as well as the need to correlate messages from multiple
      elements. An additional consideration to be taken into account when
      defining the file format is the extensibility of SIP. SIPCLF is
      additionally chartered to identify the fields to appear in a log record
      and provide one or more formats for encoding those fields. As the <xref
      target="RFC5655">IPFIX File format</xref> meets these requirements,
      SIPCLF is presently considering an IPFIX File-based binary logging
      format, in addition to an ASCII text-based format. This document
      describes the IPFIX format.</t>

      <t>Specifically, this document defines new Information Elements for the
      SIPCLF IPFIX file format (based on the data model detailed in <xref
      target="I-D.ietf-sipclf-problem-statement"></xref>), proposes common
      IPFIX Templates for this data model, uses these templates to define a
      format, and presents examples of an IPFIX File logging format for
      SIPCLF. For this purpose examples were taken from <xref
      target="I-D.ietf-sipclf-problem-statement"></xref>, and torture tests to
      demonstrate the applicability of the format to uncommon situations from
      <xref target="RFC4475"></xref>. </t>

      <section anchor="intro-ipfix" title="Introduction to IPFIX">

          <t><xref target="RFC5101">IPFIX (IP Flow Export Protocol)</xref> is
          an IETF Proposed Standard protocol for the export of network traffic
          information. In addition to a transport-agnostic unidirectional
          export protocol, it defines a simple encapsulation into <xref
          target="RFC5655">files</xref> which expands its applicability into
          logging and file storage. Originally designed for flows, its flexible and
          extensible data model lends itself readily to any situation
          involving events occurring on a network.</t>

          <t>The central unit of or storage in IPFIX is the Message. An IPFIX
          Message is composed of a header and one or more Sets. The header
          contains metadata about the message such as its length and when it
          was exported; see section 3.1 of <xref target="RFC5101"/> for
          details. Each Set is prefixed by a header containing an ID, which
          identifies the type of the set's contents; and the length of the
          set; this is detailed in section 3.3 of <xref target="RFC5101"/>.</t>

          <t>The ID of the set refers to a Template describing each Record
          within the Set. A Template is an ordered list of Information
          Elements drawn from a registry covering many fields relevant to
          network traffic export. New Information Elements may be added to the
          IANA registry to cover new applications, and may also be defined on
          the fly as enterprise-specific Information Elements, scoped to
          private registries within an SMI Private Enterprise Number.</t>

          <t>Templates are exported inline, alongside data, within IPFIX Sets
          identified by special Set IDs. In this way, an IPFIX Message stream
          is self-describing with minimal overhead in situations where the
          number of records is much greater than the number of record types.
          This is a feature of the SIPCLF data model, and indicates the
          applicability of IPFIX to SIPCLF logging.</t>

      </section>

      <section anchor="ipfix-limits" title="Encoding and Limits">

          <t>Each Information Element specifies a data type, covering most
          primitives (e.g. signed and unsigned integers, floats, booleans,
          strings) as well as some network-specific types (addresses,
          timestamps). All types other than strings and octet arrays are
          stored in network byte order. Within a Template, an Information
          Element may be specified to have a fixed length or a variable
          length; if the latter, the field in the Record has a length prefix
          of one or three bytes. One-byte prefixes represent lengths from 0 to
          254; three byte prefixes are encoded as 255 followed by an
          unsigned16 in network byte order and can represent lengths from 0 to
          65535. Typically, strings are stored with variable length, so IPFIX
          string fields can be thought of as length-prefixed (or "Pascal")
          strings. Two advantages of this encoding are that each
          variable-length field in IPFIX can be skipped with one or two
          comparisons (depending on the length representation), and that the
          framing itself is immune to misformatted strings (e.g., with
          embedded NULs).</t>
          
           <t>Although IPFIX variable length Information Elements can
          represent single values up to 65535 bytes long, there is an
          additional length limit imposed by the Message format itself. Each
          Message has an unsigned 16-bit length in its header; this length
          includes the length of the header itself as well as any set headers,
          to facilitate easy framing and deframing of messages. Since the
          header is 16 bytes, and the set header 4 bytes, the minimum
          per-message overhead (a message with one set containing only one
          record) is 20 bytes, leading to a record limit of 65515 bytes. A
          record containing a single variable-length element with 3-byte
          length encoding therefore has a content limit of 65512 bytes. The
          implications this has for SIPCLF are discussed in <xref
          target="sec-64k"/>.</t>

        </section>
    </section>

    <section anchor="sec-ie" title="Information Elements for SIPCLF">

        <t>This section formally defines information elements for SIPCLF based
        on the data model proposed in <xref
        target="I-D.ietf-sipclf-problem-statement"></xref>.</t>

        <t>The IANA IPFIX Information Elements registry available at
        http://www.iana.org/assignments/ipfix/ipfix.xhtml defines a number of
        Information Elements useful to SIPCLF. These concern traditional flow
        key and timing information, and appear in the table below:</t>

        <texttable> 
        <ttcol align="left">Name</ttcol> 
        <ttcol align="left">Number</ttcol> 
        <ttcol align="left">&lt;Type&gt;/Description</ttcol>

        <c>observationTimeSeconds</c><c>322</c><c>&lt;dateTimeSeconds&gt;
        Timestamp of the request or response represented as the number of
        seconds since the Unix epoch. Used when second-level precision is adequate.</c>

        <c>observationTimeMilli- seconds</c><c>323</c> 
        <c>&lt;dateTimeMilliseconds&gt; Timestamp of the request or response
        represented as the number of milliseconds since the Unix epoch. Used
        when millisecond-level precision is required.</c>

        <c>sourceIPv4Address</c><c>8</c><c>&lt;ipv4Address&gt;
        The IPv4 address of the source of the SIP message</c>

        <c>sourceIPv6Address</c><c>27</c><c>&lt;ipv6Address&gt;
        The IPv6 address of the source of the SIP message</c>

        <c>sourceTransportPort</c><c>7</c><c>&lt;unsigned16&gt;
        The source port number of source of the SIP message</c>

        <c>destinationIPv4Address</c><c>12</c><c>&lt;ipv4Address&gt;
        The IPv4 address of the destination of the SIP message</c>

        <c>destinationIPv6Address</c><c>28</c><c>&lt;ipv6Address&gt;
        The IPv6 address of the destination of the SIP message</c>

        <c>destinationTransportPort</c><c>11</c><c>&lt;unsigned16&gt;
        The destination port number for the SIP message</c>
        
        <c>protocolIdentifier</c><c>4</c><c>&lt;unsigned8&gt;
        The type of transport for the SIP message (UDP vs. TCP vs. SCTP)</c>

        </texttable>

        <t>In addition, we define the following Information Elements to
        represent the SIP-specific mandatory fields defined in <xref
        target="I-D.ietf-sipclf-problem-statement"></xref>, many themselves
        taken from <xref target="RFC3261"></xref>. As these are not yet
        registered with IANA, but required to support experimental
        implementation during the development of this representation, these
        are provisionally located within the number space assigned to Private
        Enterprise Number (PEN), here registered within the private enterprise
        number 35566, which belongs to one of the authors of this draft. It is
        intended that these Information Elements be registered within the IANA
        number space, should this draft become a Proposed Standard.</t>

        <texttable>
        <ttcol align="left">Name</ttcol> 
        <ttcol align="left">PEN/Number</ttcol> 
        <ttcol align="left">&lt;Type&gt;/Description</ttcol>

        <c>sipObservationType</c><c>35566/419</c><c>&lt;unsigned8&gt; The
        observation type of this log entry. Denotes whether the entry was
        corresponds to a SIP message received, sent, or merely seen by a
        passive observer, as per the sipObservationType subregistry defined
        below.</c>

        <c>sipMethod</c><c>35566/402</c><c>&lt;unsigned8&gt;
        The SIP method from the CSeq header, as per the sipMethod subregistry
        defined below.</c>

        <c>sipFromURI</c><c>35566/404</c><c>&lt;string&gt;
        The From URI</c>

        <c>sipFromTag</c><c>35566/405</c><c>&lt;string&gt;
        The From header field tag parameter value</c>

        <c>sipToURI</c><c>35566/406</c><c>&lt;string&gt;
        The To URI.</c>

        <c>sipToTag</c><c>35566/407</c><c>&lt;string&gt;
        The To header field tag parameter value, if present</c>

        <c>sipCallId</c><c>35566/408</c><c>&lt;string&gt;
        The Call-ID header field value</c>
        
        <c>sipSequenceNumber</c><c>35566/409</c><c>&lt;unsigned32&gt;
        The sequence number from the CSeq header.</c>

        <c>sipRequestURI</c><c>35566/403</c><c>&lt;string&gt;
        The Request URI, including any parameters.</c>

        <c>sipResponseStatus</c><c>35566/412</c><c>&lt;unsigned16&gt;
        The SIP response code returned upstream. The presence of this 
        Information Element marks a record as describing a SIP response.</c>

        <c>sipServerTransaction</c><c>35566/413</c><c>&lt;string&gt;
        The transaction identifier associated with the server transaction</c>

        <c>sipClientTransaction</c><c>35566/414</c><c>&lt;string&gt;
        The transaction identifier associated with the server transaction</c>
        
        </texttable>

       <t>The sipObservationType IE encodes whether the device logging the
       entry was the sender or received of the message. It can take the
       following four values:</t>

        <texttable> 
        <ttcol align="left">Number</ttcol> 
        <ttcol align="left">Name</ttcol> 
        <ttcol align="left">Description</ttcol>
        
  <c>0</c><c>unknown</c><c>The logging process does not specify the observation type.</c>
  <c>1</c><c>receiver</c><c>This entry was logged by the receiver of the message.</c>
  <c>2</c><c>sender</c><c>This entry was logged by the sender of the message.</c>
  <c>3</c><c>passive</c><c>This entry was logged by a passive observer of the message, e.g. a passive metering process parsing the SIP message from a sniffed packet stream.</c>
        </texttable>

        <t>The sipMethod IE encodes the supported methods from <xref
        target="RFC3261"/> as integers, by the order in which they appear in
        the IANA SIP Parameters Methods registry at
        http://www.iana.org/assignments/sip-parameters:</t>

        <texttable> 
        <ttcol align="left">Number</ttcol> 
        <ttcol align="left">Method</ttcol> 
        <ttcol align="left">Notes</ttcol>
        
  <c>0 </c><c>Unknown</c><c>The logging process did not recognize the SIP method.</c>
  <c>1 </c><c>ACK      </c><c>defined in RFC3261</c>
  <c>2 </c><c>BYE      </c><c>defined in RFC3261</c>
  <c>3 </c><c>CANCEL   </c><c>defined in RFC3261</c>
  <c>4 </c><c>INFO     </c><c>defined in RFC2976</c>
  <c>5 </c><c>INVITE   </c><c>defined in RFC3261</c>
  <c>6 </c><c>MESSAGE  </c><c>defined in RFC3428</c>
  <c>7 </c><c>NOTIFY   </c><c>defined in RFC3265</c>
  <c>8 </c><c>OPTIONS  </c><c>defined in RFC3261</c>
  <c>9 </c><c>PRACK    </c><c>defined in RFC3262</c>
  <c>10</c><c>PUBLISH  </c><c>defined in RFC3903</c>
  <c>11</c><c>REFER    </c><c>defined in RFC3515</c>
  <c>12</c><c>REGISTER </c><c>defined in RFC3261</c>
  <c>13</c><c>SUBSCRIBE</c><c>defined in RFC3265</c>
  <c>14</c><c>UPDATE   </c><c>defined in RFC3311</c>
        </texttable>

        <t>The following Information Elements are defined to represent
        additional SIP fields which have been identified as potentially useful
        by the SIPCLF working group.</t>

        <texttable>
        <ttcol align="left">Name</ttcol> 
        <ttcol align="left">PEN/Number</ttcol> 
        <ttcol align="left">&lt;Type&gt;/Description</ttcol>
        
        <c>sipAuthUsername</c><c>35566/401</c><c>&lt;string&gt;
        The SIP user name by which the user has been authenticated</c>
        
        <c>sipContactURI</c><c>35566/410</c><c>&lt;string&gt;
        The Contact URI, possibly multiple</c>
        
        <c>sipPaiURI</c><c>35566/411</c><c>&lt;string&gt;
        The P-Asserted-Identity URI</c>
        
        <c>sipSessionId</c><c>35566/415</c><c>&lt;octetArray&gt;
        A 128-bit session identifier, as in <xref target="I-D.kaplan-dispatch-session-id"/></c>
        
        <c>sipBodySection</c><c>35566/416</c><c>&lt;octetArray&gt;
        Section of a SIP body. If a sipBodySectionOffset is present, this section begins that many octets into the SIP body; otherwise, the section begins with the start of the SIP body.
        </c>

        <c>sipBodySectionOffset</c><c>35566/417</c><c>&lt;unsigned64&gt;
        Offset of the original SIP body, in octets, from which the 
        sipBodySection in this record was taken.
        </c>
   
        <c>sipBodyLength</c><c>35566/418</c><c>&lt;unsigned64&gt;
        Total length of the SIP body.
        </c>
        
        </texttable>

        <t>Bringing this all together, the additional Information Elements
        required by SIPCLF, in <xref
        target="I-D.trammell-ipfix-text-iespec">textual IE specification
        format</xref> is as follows; IE numbers appear in parentheses, IPFIX
        types in angle brackets, and sizes ("v" for variable-length) in square
        brackets:</t>

        <figure title="Information Model" anchor="sipclf-fim">
        <artwork><![CDATA[
sipAuthUsername(35566/401)<string>[v]
sipMethod(35566/402)<unsigned8>[1]
sipRequestURI(35566/403)<string>[v]
sipFromURI(35566/404)<string>[v]
sipFromTag(35566/405)<string>[v]
sipToURI(35566/406)<string>[v]
sipToTag(35566/407)<string>[v]
sipCallId(35566/408)<string>[v]
sipSequenceNumber(35566/409)<unsigned32>[4]
sipContactURI(35566/410)<string>[v]
sipPaiURI(35566/411)<string>[v]
sipResponseStatus(35566/412)<unsigned16>[2]
sipServerTransaction(35566/413)<string>[v]
sipClientTransaction(35566/414)<string>[v]
sipSessionId(35566/415)<octetArray>[16]
sipBodySection(35566/416)<octetArray>[v]
sipBodySectionOffset(35566/417)<unsigned64>[8]
sipBodyLength(35566/418)<unsigned64>[8]
sipObservationType(35566/419)<unsigned8>[8]
        ]]></artwork>
        </figure>
        
    </section>

    <section anchor="sec-templates" title="Recommended Templates for SIPCLF">

        <t>The following Templates are defined as recommended Templates for
        SIPCLF request and response messages. These are base templates,
        containing only mandatory Information Elements. Request and Response
        Templates MUST contain at lease the Information Elements defined here.
        Optional Information Elements MAY be added to them, and the IPv4
        addresses within these Templates MUST be replaced with IPv6 addresses
        for logging IPv6 transport of SIP messages. A sipServerTransaction
        Information Element SHOULD be added for all messages logged by a User
        Agent Server, and a sipClientTransaction Information Element SHOULD be
        added for all messages logged by a User Agent Client. These templates
        follow the recommended fields for request and response logging in
        <xref target="I-D.ietf-sipclf-problem-statement"></xref>, and are
        defined using the representation in <xref
        target="I-D.trammell-ipfix-text-iespec"/>.</t>

      <figure title="Base Request Template (IPv4)" anchor="sipclf-reqtmpl-v4">
        <artwork><![CDATA[
observationTimeMilliseconds(323)[8]
sipSequenceNumber(35566/409)[4]
sourceIPv4Address(8)[4]
destinationIPv4Address(12)[4]
sourceTransportPort(7)[2]
destinationTransportPort(11)[2]
protocolIdentifier(4)[1]
sipMethod(35566/402)[1]
sipObservationType(35566/419)[1]
sipRequestURI(35566/403)[v]
sipToURI(35566/406)[v]
sipToTag(35566/407)[v]
sipFromURI(35566/404)[v]
sipFromTag(35566/405)[v]
sipCallId(35566/408)[v]
        ]]></artwork>
      </figure>

      <figure title="Base Response Template (IPv4)" anchor="sipclf-resptmpl-v4">
        <artwork><![CDATA[
observationTimeMilliseconds(323)[8]
sipSequenceNumber(35566/409)[4]
sourceIPv4Address(8)[4]
destinationIPv4Address(12)[4]
sourceTransportPort(7)[2]
destinationTransportPort(11)[2]
sipResponseStatus(35566/412)[2]
protocolIdentifier(4)[1]
sipMethod(35566/402)[1]
sipObservationType(35566/419)[1]
sipToURI(35566/406)[v]
sipToTag(35566/407)[v]
sipFromURI(35566/404)[v]
sipFromTag(35566/405)[v]
sipCallId(35566/408)[v]
        ]]></artwork>
      </figure>

      <t>Note that the Information Elements in these templates are ordered to
      place the fixed-length elements before the variable-length ones, which
      speeds random access to fixed-length elements. Elements are also kept in
      native alignment within records. However, since element order within a
      record is unimportant in IPFIX, any ordering of the mandatory
      Information Elements within a record MUST be accepted as a valid SIPCLF
      record for that record type.</t>

      <t>The record type is determined by the presence of the
      sipResponseStatus field. If present in the Template, the Template
      describes a response record. If absent, it describes a request
      record.</t>
      
    </section>
    
    <section anchor="sec-fileformat" title="IPFIX File Format for SIPCLF">

      <t>Now that we have defined Information Elements to support the SIPCLF
      Data Model and recommended Templates to define the records, we combine
      this data model to the IPFIX File format to define the SIPCLF format
      over IPFIX.</t>

      <t>The IPFIX File format is defined in <xref target="RFC5655"/> as a
      serialized set of IPFIX Messages containing Data Records organized in
      Sets defined by Templates; these are in turn defined in <xref
      target="RFC5101">the IPFIX Protocol specification</xref>. The file
      format is designed to facilitate interoperability, flexibility, and
      reusability among a wide variety of storage, processing, and analysis
      tools.</t>

      <t>A SIPCLF-IPFIX file is then defined as an IPFIX File as in <xref
      target="RFC5655"/> containing Templates containing at least the
      Information Elements defined in the recommended Templates above,
      followed by Data Sets containing records defined by those Templates.</t>

      <t>The Template mechanism provided by IPFIX allows some flexibility
      here. A SIPCLF-IPFIX file writer MAY include other Information Elements
      in the Templates it uses for SIP logging (for example, to add additional
      information such as in the list of optional Information Elements,
      above), and MAY include Templates and records described by them which do
      not contain SIPCLF information; these latter records MAY be ignored by
      SIPCLF file readers.</t>

      <t>Some specific considerations for SIPCLF-IPFIX files are detailed in
      the subsections below.</t>

      <section anchor="sec-64k" title="Logging Large SIP Bodies">

          <t>As noted in <xref target="ipfix-limits"/>, the IPFIX Message
          format places a practical limit of 65515 bytes of content per
          Message. Some SIPCLF fields, particularly the SIP Body, may contain
          more than 65515 bytes of information. There are two ways to address
          this.</t>
          
           <t>First, for applications where the requirements do not include
          full body export, the body can be truncated. This specification
          provides the sipBodySection and sipBodyLength Information Elements
          to represent this. Here, the first N bytes of the body would be
          exported in the variable-length sipBodySection Information Element,
          and the total length of the SIP body in the sipBodyLength
          Information Element. A template for requests received at a UAS is
          shown in <xref target="sipclf-body-base"/>.</t>

      <figure title="Template for Request Record with Partial Body at UAS" anchor="sipclf-body-base">
        <artwork><![CDATA[
observationTimeMilliseconds(323)[8]
sipSequenceNumber(35566/409)[4]
sipBodyLength(35566/418)[4]
sourceIPv4Address(8)[4]
destinationIPv4Address(12)[4]
sourceTransportPort(7)[2]
destinationTransportPort(11)[2]
protocolIdentifier(4)[1]
sipMethod(35566/402)[1]
sipObservationType(35566/419)[1]
sipRequestURI(35566/403)[v]
sipToURI(35566/406)[v]
sipToTag(35566/407)[v]
sipFromURI(35566/404)[v]
sipFromTag(35566/405)[v]
sipCallId(35566/408)[v]
sipServerTransaction(35566/413)[v]
sipBodySection(35566/416)[v]
        ]]></artwork>
      </figure>

      <t>For exporting large complete SIP bodies, a second
      continuation template is necessary, as in figure <xref
      target="sipclf-body-cont"/>. In this case, a record containing the first
      64k (minus the length of the other fields) is exported using a template
      similar to the partial body template above. Then additional sections of
      the SIP body at subsequent specified offsets into the SIP body are
      exported in continuation records in subsequent messages. The SIP message
      whose body is continued is uniquely identified by the 5-tuple flow key
      and the observation time. This template allows the export of up to 65487
      bytes of body per IPFIX message (65515 message payload - 25 fixed fields
      - 3 sipBodySection length).</t>
      
<figure title="Template for Request Record Body Continuation" anchor="sipclf-body-cont"> 
  <artwork><![CDATA[
observationTimeMilliseconds(323)[8] 
sipBodyOffset(35566/417)[4]
sourceIPv4Address(8)[4] 
destinationIPv4Address(12)[4]
sourceTransportPort(7)[2] 
destinationTransportPort(11)[2]
protocolIdentifier(4)[1] 
sipBodySection(35566/416)[v] 
  ]]></artwork>
</figure>

      </section>

      <section title="Supporting fast searches of SIPCLF log files">

        <t>The order of fields in an IPFIX data record is semantically
        unimportant, since the Template defines where each field in the record
        is. However, note that in all the Templates defined to this point, we
        have placed fixed-length fields before variable length fields. This
        increases the efficiency of both Message export and decoding, since
        each fixed length field as well as the first variable-length field
        have fixed offsets into the Message.</t>

        <t>Random access to a field within a record (i.e., for comparison
        purposes during a sequential scan) is therefore constant-time for
        fixed-length fields, and requires one or two comparisons per
        subsequent field for variable-length fields.</t>

        <t>However, since Sets encode the length of the Set, not of the
        records therein, and each Set may contain multiple records, a Set
        containing records with variable-length fields must be sequentially
        searched in order to find the beginning of the next Message. This
        situation can be improved by exporting only one Record per Set: in
        this case, the Set length equals the Record length minus the constant
        Set header length (4), reducing the number of comparisons needed for
        skipping records.</t>

       </section>

  </section>
  
    <section anchor="sec-efficiency" title="Efficiency Analysis">
      <t>[TODO]</t>
    </section>

    <section anchor="sec-example" title="Examples">

        <t>This section presents several views of an example IPFIX-based
        SIPCLF log, in order to increase understanding of what IPFIX would
        mean for SIPCLF. We present both binary and textual forms. The tools
        to generate this section are based upon the open-source <xref
        target="ripfix">ripfix</xref> implementation of IPFIX, maintained by
        one of the authors of this draft.</t>

        <t>Here we show the log entries generated by the situations in
        sections 9.1 through 9.4 of <xref
        target="I-D.ietf-sipclf-problem-statement"></xref>.</t>

        <section anchor="sec-example-template" title="Base Template Export">

          <t>A SIPCLF log file is, as described above just an IPFIX File with
          SIPCLF Templates. As Templates are themselves exported in IPFIX
          Messages, and a File is simply composed of a stream of Messages,
          first, we can export a Message containing only Templates describing
          the record formats we will use in subsequent examples. These
          Templates are as shown in <xref target="sipclf-reqtmpl-v4"/> and
          <xref target="sipclf-resptmpl-v4"/>.</t>

          <t>Exporting these Templates results in the following IPFIX message,
          illustrated as an annotated hexdump in <xref target="ex-template-hex"/>.</t>

          <figure title="Base template message export" anchor="ex-template-hex">
            <artwork><![CDATA[
0000: 00 0a 00 ec 4c 62 7f e8 00 00 00 00 00 00 30 39  ....Lb........09
     [ IPFIX message header, length 236              ]
0010: 00 02 00 dc                                      ....
     [ Template set (ID 2) header, length 220 ]
0014:             01 01 00 10                              ....
                 [ Template ID 257, count 16 IEs ]
0018:                         01 43 00 08 81 99 00 04          .C......
0020: 00 00 8a ee 00 08 00 04 00 0c 00 04 00 07 00 02  ................
0030: 00 0b 00 02 00 04 00 01 81 92 00 01 00 00 8a ee  ................
0040: 81 93 ff ff 00 00 8a ee 81 96 ff ff 00 00 8a ee  ................
0050: 81 97 ff ff 00 00 8a ee 81 94 ff ff 00 00 8a ee  ................
0060: 81 95 ff ff 00 00 8a ee 81 98 ff ff 00 00 8a ee  ................
0070: 81 9e ff ff 00 00 8a ee 81 9d ff ff 00 00 8a ee  ................
     [ Base request template content (ID 257)        ]
0080: 01 02 00 10                                      ....
     [ Template ID 258, count 16 IEs ]
0084:             01 43 00 08 81 99 00 04 00 00 8a ee      .C..........
0090: 00 08 00 04 00 0c 00 04 00 07 00 02 00 0b 00 02  ................
00a0: 81 9c 00 02 00 00 8a ee 00 04 00 01 81 92 00 01  ................
00b0: 00 00 8a ee 81 96 ff ff 00 00 8a ee 81 97 ff ff  ................
00c0: 00 00 8a ee 81 94 ff ff 00 00 8a ee 81 95 ff ff  ................
00d0: 00 00 8a ee 81 98 ff ff 00 00 8a ee 81 9e ff ff  ................
00e0: 00 00 8a ee 81 9d ff ff 00 00 8a ee              ............
     [ Base response template content (ID 258)       ]
          ]]></artwork>
          </figure>

        </section>

        <section anchor="sec-example-uacreg" title="UAC registration">

            <t>Having exported templates, now we create a simple SIPCLF-IPFIX
            log message representing a UAC registration as seen from the UAC,
            corresponding to example 9.1 in <xref
            target="I-D.ietf-sipclf-problem-statement"></xref>. This message
            contains two records, including the UAS registration request, and
            the response received. This is shown in the annotated hexdump in 
            <xref target="ex-uacreg-hex"/>.</t>

          <figure title="Message containing two log entries for UAC registration" anchor="ex-uacreg-hex">
            <artwork><![CDATA[
0000: 00 0a 00 d8 4c 62 8f 37 00 00 00 00 00 00 30 39  ....Lb.7......09
     [ IPFIX message header, length 218              ]
0010: 01 01 00 6b                                      ...k
     [ Data set (ID 257) header, length 107 ] 
0014:             00 00 01 29 13 66 13 93 00 00 00 01      ...).f......
0020: c6 33 64 0a c6 33 64 01 13 c4 13 c4 11 0c 02 0f  .3d..3d.........
0030: 73 69 70 3a 65 78 61 6d 70 6c 65 2e 63 6f 6d 00  sip:example.com.
0040: 00 15 73 69 70 3a 61 6c 69 63 65 40 65 78 61 6d  ..sip:alice@exam
0050: 70 6c 65 2e 63 6f 6d 05 37 36 79 68 68 15 66 38  ple.com.76yhh.f8
0060: 31 2d 64 34 2d 66 36 40 65 78 61 6d 70 6c 65 2e  1-d4-f6@example.
0070: 63 6f 6d 06 63 2d 74 72 2d 31 00                 com.c-tr-1.
     [ Request record content                        ] 
007b:                                  01 02 00 5d                ...]
            [ Data set (ID 258) header, length 93 ] 
007f:                                              00                 .
0080: 00 01 29 13 66 15 24 00 00 00 01 c6 33 64 01 c6  ..).f.$.....3d..
0090: 33 64 0a 13 c4 13 c4 00 c8 11 0c 01 00 00 15 73  3d.............s
00a0: 69 70 3a 61 6c 69 63 65 40 65 78 61 6d 70 6c 65  ip:alice@example
00b0: 2e 63 6f 6d 05 37 36 79 68 68 15 66 38 31 2d 64  .com.76yhh.f81-d
00c0: 34 2d 66 36 40 65 78 61 6d 70 6c 65 2e 63 6f 6d  4-f6@example.com
00d0: 06 63 2d 74 72 2d 31 00                          .c-tr-1.
     [ Response record content                       ] 

          ]]></artwork>
          </figure>

          <t>While this demonstrates the binary nature of the SIPCLF-IPFIX
          format, and shows the content framing for this message, it is not
          readable for illustration purposes. In <xref
          target="ex-uacreg-rfd"/>, as in all subsequent examples, we run the
          message through the rfdump tool provided with ripfix to provide a
          more human-readable view. Note that the sipMethod and
          sipObservationType are encoded according to the registries in <xref
          target="sec-ie"/>.</t>

          <figure title="Message containing two log entries for UAC registration" anchor="ex-uacreg-rfd">
            <artwork><![CDATA[
==== message sequence 0 in domain 12345 at 2010-08-11 11:53:27 UTC ====
---- record 12345/257 ----
observationTimeMilliseconds => 2010-06-07 17:12:23 UTC
sipSequenceNumber => 1
sourceIPv4Address => 198.51.100.10
destinationIPv4Address => 198.51.100.1
sourceTransportPort => 5060
destinationTransportPort => 5060
protocolIdentifier => 17
sipMethod => 12
sipObservationType => 2
sipRequestURI => sip:example.com
sipToURI => 
sipToTag => 
sipFromURI => sip:alice@example.com
sipFromTag => 76yhh
sipCallId => f81-d4-f6@example.com
sipClientTransaction => c-tr-1
sipServerTransaction => 
---- record 12345/258 ----
observationTimeMilliseconds => 2010-06-07 17:12:24 UTC
sipSequenceNumber => 1
sourceIPv4Address => 198.51.100.1
destinationIPv4Address => 198.51.100.10
sourceTransportPort => 5060
destinationTransportPort => 5060
sipResponseStatus => 200
protocolIdentifier => 17
sipMethod => 12
sipObservationType => 1
sipToURI => 
sipToTag => 
sipFromURI => sip:alice@example.com
sipFromTag => 76yhh
sipCallId => f81-d4-f6@example.com
sipClientTransaction => c-tr-1
sipServerTransaction => 
            ]]></artwork>
          </figure>

        </section>
        
        <section anchor="sec-example-direct" title="Direct Call">
          <t>[TODO: from section 9.2]</t>
        </section>

        <section anchor="sec-example-branch" title="Single Downstream Branch Call">
          <t>[TODO: from section 9.3]</t>
        </section>

        <section anchor="sec-example-fork" title="Forked Call">
          <t>[TODO: from section 9.4]</t>
        </section>

        
        <section title="Torture Tests">

          <t>To demonstrate that the SIPCLF-IPFIX file format can handle other
          than simple situations, here we show how log entries from selected
          SIP torture tests given in <xref target="RFC4475"/>. Note that this
          demonstrates only that there is nothing inherent to the logging
          format that precludes handling these cases; implementors of logging
          using SIPCLF-IPFIX must still take care that the SIP-specific side
          of the implementation handles these torture tests correctly. Each of
          these tests displays a resulting record with templates defined in
          <xref target="sec-example-template"/> and values for unspecified
          fields taken from <xref target="sec-example-uacreg"/>.</t>

          <t>The torture test in section 3.1.1.2 tests the handling of unusual
          characters. Assuming that the SIP parser is able to handle this
          message, the resulting log entry in rfdump format is shown in <xref
          target="ex-chars-rfd"/> (hand-edited to fit long lines within
          Internet-Draft limits). Note that the unknown SIP method is logged
          as such (method 0 = Unknown).</t>

          <figure title="Message containing wide variety of characters"
            anchor="ex-chars-rfd"> <artwork><![CDATA[ 
==== message sequence 0 in domain 12345 at 2010-08-12 07:44:33 UTC ====
---- record 12345/257 ----
observationTimeMilliseconds => 2010-08-12 07:44:33 UTC
sipSequenceNumber => 139122385
sourceIPv4Address => 198.51.100.10
destinationIPv4Address => 198.51.100.1
sourceTransportPort => 5060
destinationTransportPort => 5060
protocolIdentifier => 17
sipMethod => 0
sipObservationType => 1
sipRequestURI => sip:1_unusual.URI~(to-be!sure)&isn't+it$/crazy?,/
  ;;*:&it+has=1,weird!*pas$wo~d_too.(doesn't-it)@example.com
sipToURI => sip:1_unusual.URI~(to-be!sure)&isn't+it$/crazy?,/
  ;;*@example.com
sipToTag => 
sipFromURI => sip:mundane@example.com
sipFromTag => _token~1'+`*%!-.
sipCallId => intmeth.word%ZK-!.*_+'@word`~)(><:\/"][?}{
sipClientTransaction => 
sipServerTransaction =>             
            ]]></artwork> 
          </figure>

          <t>The torture test in section 3.1.1.4 tests the handling of
          embedded NULs in strings. Since IPFIX uses length-prefixing for
          variable length strings, this does not present a problem for
          logging. The resulting record rfdump format in <xref
          target="ex-nulls-rfd"/>. Here, hex escaping shows that the NUL is
          properly embedded in the string.</t>

          <figure title="Message containing NULs in URIs" anchor="ex-nulls-rfd">
            <artwork><![CDATA[
==== message sequence 0 in domain 12345 at 2010-08-11 13:01:05 UTC ====
---- record 12345/257 ----
observationTimeMilliseconds => 2010-08-11 13:01:05 UTC
sipSequenceNumber => 14398234
sourceIPv4Address => 198.51.100.10
destinationIPv4Address => 198.51.100.1
sourceTransportPort => 5060
destinationTransportPort => 5060
protocolIdentifier => 17
sipMethod => 12
sipObservationType => 2
sipRequestURI => sip:example.com
sipToURI => sip:null-\x00-null@example.com
sipToTag => 
sipFromURI => sip:null-\x00-null@example.com
sipFromTag => 839923423
sipCallId => escnull.39203ndfvkjdasfkq3w4otrq0adsfdfnavd
sipClientTransaction => 
sipServerTransaction => 
             ]]></artwork>
          </figure>

          <t>The sipToURI portion of the record is shown in <xref
          target="ex-nulls-hex"/> as an annotated hexdump. Note the length
          byte at the beginning of the string, and the NUL embedded
          inside.</t>

          <figure title="Message containing NULs in URIs" anchor="ex-nulls-hex">
            <artwork><![CDATA[
003f:                                              1b                 .
                          [ varlen record, length 27 ]
0040: 73 69 70 3a 6e 75 6c 6c 2d 00 2d 6e 75 6c 6c 40  sip:null-.-null@
                 [ note NUL here ^^ ]
0050: 65 78 61 6d 70 6c 65 2e 63 6f 6d                 example.com
             ]]></artwork>
          </figure>

          <t>[TODO multipart body in 3.1.1.11]</t>
        </section> 
    </section>

    <section title="Security Considerations">
      <t>
        [TODO]
      </t>
    </section>

    <section title="IANA Considerations">
      <t>
        [TODO: add new SIP IEs to, create new SIP Method registry, or add numbering to existing registry.]
      </t>
    </section>

    <section title="Acknowledgments">
      <t>
        Cullen Jennings has provided insightful discussions, 
        specific comments and much needed corrections.
        Nico d'Heureuse helped with the RFC 3665 examples.
      </t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.5101" ?>
      <?rfc include="reference.RFC.5655" ?>
    </references>
    
    <references title="Informative References">
    
      <?rfc include="reference.I-D.ietf-sipclf-problem-statement" ?>
      <?rfc include="reference.I-D.trammell-ipfix-text-iespec" ?>
      <?rfc include="reference.I-D.kaplan-dispatch-session-id" ?>
      <?rfc include="reference.RFC.3261" ?>
      <?rfc include="reference.RFC.3665" ?>
      <?rfc include="reference.RFC.4475" ?>
     
      <reference anchor="ripfix">
        <front>
          <title>
            ripfix: IPFIX for Ruby
          </title>

          <author fullname="B. Trammell" initials="B." surname="Trammell">
            <organization>ETH Zurich</organization>
          </author>

        </front>
        
        <seriesInfo name="" value="available at http://ripfix.rubyforge.org/" />
      </reference>

            
    </references>
  </back>
</rfc>




