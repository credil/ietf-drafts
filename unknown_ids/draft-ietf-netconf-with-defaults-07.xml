<?xml version="1.0" encoding="UTF-8"?>


<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
	  <!ENTITY rfc2119 PUBLIC '' 
		   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
	  <!ENTITY rfc3688 PUBLIC '' 
		   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3688.xml'>
	  <!ENTITY rfc4741 PUBLIC '' 
		   'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4741.xml'>
	  <!ENTITY xmlspec PUBLIC '' 
		   'http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-xml-20081126'>
	  <!ENTITY yangspec PUBLIC '' 
		   'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-netmod-yang.xml'>
	  <!ENTITY netconfspec PUBLIC '' 
		   'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-netconf-4741bis.xml'>

	  ]>

<rfc 
   category="std" 
   docName="draft-ietf-netconf-with-defaults-07" 
   ipr="pre5378Trust200902">

  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc strict="yes"?>
  <?rfc comments="no" ?>
  <?rfc inline="no" ?>
  <?rfc editing="no" ?>
  <?rfc toc="yes"?>
  <?rfc tocompact="yes"?>
  <?rfc tocdepth="4"?>
  <?rfc symrefs="yes"?>
  <?rfc sortrefs="no" ?>
  <?rfc compact="yes"?>
  <?rfc iprnotified="no"?>

  <front>
    <title abbrev="with-defaults">
      With-defaults capability for NETCONF
    </title>

    <author fullname="Andy Bierman" 
            initials="A.B."
            surname="Bierman">
      <organization>InterWorking Labs</organization>
      <address>
	<postal>
	  <street></street>
	  <city>Santa Cruz</city>
	  <region>CA</region>
	  <code></code>
	  <country>USA</country>
	</postal>
	<phone>+1 831 460 7010</phone>
	<email>andyb@iwl.com</email>
      </address>
    </author>
    
    <author fullname="Balazs Lengyel" initials="B. L."
	    surname="Lengyel">
      <organization>Ericsson</organization>
      <address>
	<postal>
	  <street></street>
	  <city>Budapest</city>
	  <region></region>
	  <code></code>
	  <country>Hungary</country>
	</postal>
	<email>balazs.lengyel@ericsson.com</email>
      </address>
    </author>
    
    <date />
    <area>OPS</area>
    <workgroup>NETCONF</workgroup>
    <keyword>with-defaults</keyword>
    <keyword>XML</keyword>
    <abstract>
      <t>
	The NETCONF protocol defines ways to read configuration data
	from a NETCONF server. Part of this data is not set by the NETCONF client, 
	but rather a default value is used. In many situations the 
	NETCONF client has a priori knowledge about default data, so the NETCONF 
	server does not need to send it to the client. In other situations the 
	NETCONF client will need this data as part of the NETCONF &lt;rpc-reply> messages. 
	This document defines a capability-based extension to 
	the NETCONF protocol that allows the NETCONF client to control whether 
	default values are part of NETCONF &lt;rpc-reply> messages or &lt;copy-config> output to the target URL.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>
	The NETCONF protocol <xref target="RFC4741"/> defines ways to read configuration
        and state data from a NETCONF server. 
        Part of the configuration data may not be set by the NETCONF client, 
	but rather by a default value from the data model. In many situations the 
	NETCONF client has a priori knowledge about default data, so the NETCONF 
	server does not need to send it to the client. A priori knowledge can be 
	e.g., a document formally describing the data models supported by the NETCONF server. 
	<vspace blankLines="1"/>
	A networking device may have a large number of default values. 
	Often the default values are not interesting or specifically defined 
	with a "reasonable" value, so that the management user does not have to handle them.
	For these reasons it is quite common for networking devices to
	suppress the output of parameters having the default value.
	<vspace blankLines="1"/>
	However there are use-cases when a NETCONF client 
	will need the default data from the node:
	<vspace blankLines="1"/>
	<list style="symbols">
	  <t>
            The management application often needs a single, definitive and complete 
            set of configuration values that determine how the a networking device works.
          </t>
	  <t>Documentation about default values can be unreliable or unavailable.</t>
	  <t>Some management applications might not have the capabilities to 
	    correctly parse and interpret formal data models.
          </t>
	  <t>Human users might want to understand the received 
	    data without consultation of the documentation.
          </t>
	</list>
	<vspace blankLines="1"/>
	In all these cases the NETCONF client will need default data as part of the 
	NETCONF &lt;rpc-reply> messages. 
	<vspace blankLines="1"/>
	This document defines a capability-based extension to 
	the NETCONF protocol that allows the NETCONF client to control whether 
	default data is part of NETCONF &lt;rpc-reply> messages.
      </t>

      <section title="Terminology">
	<t>
	  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
	  "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
	  and "OPTIONAL" in this document are to be interpreted as
	  described in <xref target="RFC2119"/>.
	</t>
	<t>
	  <list style="hanging">
	    <t hangText="Data model schema:">
	      A document or set of documents describing the 
	      data models supported by the NETCONF server.
	    </t>
	    <t hangText="Management Application:">
              A computer program running outside the NETCONF server  
              that configures or supervises the NETCONF server. 
              A management application can reach the device e.g. via NETCONF, CLI or SNMP.
	    </t>
	    <t hangText="Default data:">
              Data specified in the data model schema as default, 
              that is set or used by the device whenever the NETCONF client or 
              other management application/user does not provide a specific 
              value for the relevant data item.             
              Default data MAY or may not be stored as part of a configuration datastore.
	    </t>       
	    <t hangText="Explicitly set data:">
              Data that is set to any value by a NETCONF client or 
              other management application by the way of an actual management operation,
              including any data model schema default value.
              Any value set by the NETCONF server which is not the schema defined default value
              is also considered explicitly set data.
	    </t>
	  </list>      
	</t>     
	<t>
	  In addition the following terms are defined in RFC 4741 and are not redefined here:
	  <list style="symbols">
	    <t>client</t>
	    <t>operation</t>
	    <t>server</t>
	  </list>
	</t>     
      </section>

      <section title="Current handling of default data" anchor="basicHandling">
	<t>
	  NETCONF does not define whether default data is part of the
	  datastore/data model, or if it is meta-data that influences the
	  behavior of the NETCONF server, but is not actually part of
	  the datastore.  This document is intended to support either
	  type of implementation, without deciding which approach is better.      
	  <vspace blankLines="1"/>
	  As a consequence of this approach,  
	  NETCONF servers that do not implement the :with-defaults capability may or may not 
	  return default data. 
	  <vspace blankLines="1"/>
	  Different NETCONF servers report default data in different ways. This 
	  document specifies the following three basic modes:
	  <vspace blankLines="1"/>
	  <list style="hanging">
	    <t hangText="report-all:">
              All default data is always reported.
	    </t>
	    <t hangText="trim:">
              Values are not reported if they match the default value (as
              specified in the data model schema).  Note that non-configuration
              data nodes containing the schema default value are not reported
              either.
	    </t>
	    <t hangText="explicit:">
              Report only values that match the definition of explicitly set data.
              For non-configuration data, this has the same affect as 'report-all'.
	    </t>
	  </list>  
	</t>
      </section>
    </section>

    <section anchor="WDCAP" title="With-defaults Capability">
      <section title="Overview"><t>
	  The :with-defaults capability indicates that the NETCONF server makes it possible 
	  for the NETCONF client to control whether default data is part of NETCONF 
	  &lt;rpc-reply> messages. The capability affects both 
	  configuration and state data (while acknowledging that the usage of default 
	  values for state data is less prevalent). 
	  Sending of default data is controlled for each individual operation separately. 
	  <vspace blankLines="1"/>
	  A NETCONF server implementing the :with-defaults capability MUST indicate 
	  its basic behavior, whether it sends default data in 
	  the absence of any specific request from the NETCONF client; and MUST support the 
	  'report-all' handling mode and MAY support other modes.  
	  <vspace blankLines="1"/>
	  A server indicating 'explicit' either in the 'basic-mode' or the 'also-supported' parameter 
	  MUST be able to differentiate between normal default data and explicitly set data.
	</t>
      </section>
      <section title="Dependencies">
	<t>None</t>
      </section>
      <section title="Conformance">
	<t>Every NETCONF server SHOULD implement this capability.</t>
      </section>
      <section title="Capability Identifier" anchor="capabilityIdChapter">
	<t>
	  urn:ietf:params:netconf:capability:with-defaults
	  <vspace blankLines="1"/>
	  The identifier MUST have a parameter: "basic-mode". This indicates how 
	  the server reports default data in &lt;rpc-reply> messages, in the case the 
	  client does not specify the required behavior in the &lt;rpc> request.
	  The allowed values of this parameter are 
	  report-all, trim, explicit as listed in <xref target="basicHandling"/>. 
	</t>
	<t>
	  The identifier MAY have another parameter: "also-supported". This parameter 
	  indicates which additional default handling modes the server supports. 
	  The value of the parameter is a comma separated list of one or two modes 
	  that are supported beside the mode indicated in the 'basic-mode' parameter.
	  Possible modes are taken from the list in <xref target="basicHandling"/>.
	</t>
        <t>
          Note that this protocol capability URI is separate from the YANG module capability URI
          for the YANG module in <xref target="YANGMOD" />.  A server which implements this
          module will also advertise a YANG module capability URI according to the rules specified in
          <xref target="I-D.ietf-netmod-yang"/>.          
        </t>
	<t>Examples:
	  <vspace blankLines="1"/>
	  urn:ietf:params:netconf:capability:with-defaults?basic-mode=report-all    
	  <vspace blankLines="1"/>
	  urn:ietf:params:netconf:capability:with-defaults?basic-mode=report-all&amp;also-supported=trim,explicit    
	</t>
      </section>

      <section title="New Operations">
	<t>None</t>
      </section>  

      <section title="Modifications to Existing Operations">
	<t>
	  A new &lt;with-defaults> XML
	  child element is added to the 
	  &lt;get>, &lt;get-config> and &lt;copy-config> operations.
	  If the  &lt;with-defaults> element is present, it controls the 
	  reporting of default data. The server MUST return 
	  default data in the NETCONF &lt;rpc-reply> messages according to the value of the element.
	</t>
	<t>
	  The &lt;with-defaults> element is defined in the XML namespace for the
	  ietf-netconf-with-defaults.yang module in <xref target="YANGMOD" />, 
	  not the XML namespace for the &lt;get>, &lt;get-config> and &lt;copy-config> 
	  operations.
	</t>
	<t>
	  Allowed values of the with-defaults element are taken from 
	  the list in <xref target="basicHandling"/>. The allowed values are 
	  restricted to the values that the device indicates 
	  support for in the with-defaults capability in the basic and also-supported parameters.   
	</t>
	<t>
	  If an unsupported value is used, the NETCONF server MUST
	  return an &lt;rpc-reply> with an &lt;rpc-error> element. 
	  The &lt;error-tag> MUST be 'operation-not-supported', and
	  the &lt;error-app-tag> MUST be 'with-defaults-mode-not-supported'.
	</t>
	<t>
	  If the &lt;with-defaults> element is not present, 
	  the server follows its basic behavior as indicated 
	  by the capability identifier's 'basic-mode' parameter see <xref target="capabilityIdChapter"/>.
	</t>
	<t>    
	  Affected operations:
	  <list style="symbols">
	    <t>&lt;get></t>
	    <t>&lt;get-config></t>
	    <t>&lt;copy-config></t>
	  </list>
	  <vspace blankLines="1"/>
	  &lt;copy-config> is only affected if the target of the operation is a URL. 
	  If the target is a NETCONF datastore (running, candidate or startup) the 
	  capability has no effect; 
	  the with-defaults parameter, if present, MUST be silently ignored.
	  <vspace blankLines="1"/>
	  Other operations that return configuration data SHOULD also handle default 
	  data according to the rules set in this document, and explicitly state this in 
	  their documentation. 
	  If this is not specified in the document defining the respective operation, 
	  the default handling rules described herein do not affect these operations.
	</t>
      </section>
      <section title="Interactions with Other Capabilities"><t>None</t></section>  
    </section>

    <section anchor="YANGMOD" title="YANG Module">
      <t>
	The following YANG module defines the addition of the with-defaults element 
	to the &lt;get>,  &lt;get-config> and &lt;copy-config> operations. 
	The YANG language is defined in <xref target="I-D.ietf-netmod-yang"/>.
	The above operations are defined in YANG in <xref target="I-D.ietf-netconf-4741bis"/>.
	Every NETCONF server SHOULD implement this YANG module.
      </t>
      <t>
	<figure>
	  <artwork><![CDATA[

<CODE BEGINS> file="ietf-netconf-with-defaults.yang"

module ietf-netconf-with-defaults {

   namespace "urn:ietf:params:xml:ns:yang:ietf-netconf-with-defaults";

   prefix nwd;

   import ietf-netconf { prefix nc; }

   organization
    "IETF NETCONF (Network Configuration Protocol) Working Group";

   contact
    "WG Web:   <http://tools.ietf.org/wg/netconf/>
     WG List:  <mailto:netconf@ietf.org>

     WG Chair: Bert Wijnen
               <mailto:bertietf@bwijnen.net>

     WG Chair: Mehmet Ersue
               <mailto:mehmet.ersue@nsn.com>

     Editor: Andy Bierman
             <mailto:andyb@iwl.com>

     Editor: Balazs Lengyel
             <mailto:balazs.lengyel@ericsson.com>";

   description
    "This module defines a capability-based extension to the 
     NETCONF protocol that allows the NETCONF client to control
     whether default values are part of NETCONF 
     <rpc-reply> messages or <copy-config> output to the target URL.


     Copyright (c) 2010 IETF Trust and the persons identified as
     the document authors.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC XXXX; see
     the RFC itself for full legal notices.";
   // RFC Ed.: replace XXXX with actual RFC number and remove this note

   // RFC Ed.: remove this note
   // Note: extracted from draft-ietf-netmod-with-defaults-06.txt

   revision 2010-04-19 {
     description
       "Initial version.";
     reference
      "RFC XXXX: With-defaults capability for NETCONF";
   }
   // RFC Ed.: replace XXXX with actual RFC number and remove this note
   
   typedef with-defaults-mode {
      description 
        "Possible modes to report default data in 
         rpc-reply messages.";
      type enumeration {
         enum report-all {
             description 
               "All default data is always reported.";
         }
         enum trim {
             description 
               "Values are not reported if they match the default.";
         }
         enum explicit {
             description 
               "Report values that match the definition of 
                explicitly set data.";
         }
     }      
   }

   grouping with-defaults-parameters {
     leaf with-defaults {
       description
         "The explicit defaults processing mode requested.";
       type with-defaults-mode;
     }
   }

   // extending the get-config operation
   augment /nc:get-config/nc:input {
       uses with-defaults-parameters;
   }

   // extending the get operation
   augment /nc:get/nc:input {
       uses with-defaults-parameters;
   }

   // extending the copy-config operation
   augment /nc:copy-config/nc:input {
       uses with-defaults-parameters;
   }

}

<CODE ENDS>
                  ]]></artwork>
	</figure>
	<vspace blankLines="1"/>
      </t>   
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document registers one capability identifier URN from the 
	'Network Configuration Protocol <xref target="RFC4741"/> Capability URNs' registry, 
	and registers the same URN for the NETCONF XML namespace in 
	the "IETF XML registry" <xref target="RFC3688"></xref>. 
	Note that the capability URN is compliant to <xref target="RFC4741"></xref> section 10.3.
      </t>
      <texttable>
	<ttcol  align="left" width="24%">Index</ttcol>
	<ttcol align="left">Capability Identifier</ttcol>
	<c>:with-defaults</c>
	<c>urn:ietf:params:netconf:capability:with-defaults</c>
      </texttable>
      <t>
	This document also registers one module name in the 'YANG Module Names' registry,
	defined in <xref target="I-D.ietf-netmod-yang" /> .  The following data should be recorded
	in this registry:
      </t>
      <texttable>
	<ttcol  align="left">Field</ttcol>
	<ttcol align="left">Value</ttcol>
	<c>Module Name</c>
	<c>ietf-netconf-with-defaults</c>
	<c>Module Prefix</c>
	<c>nwd</c>
	<c>XML Namespace</c>
	<c>urn:ietf:params:xml:ns:yang:ietf-netconf-with-defaults</c>
	<c>Module RFC</c>
	<c>XXXX // RFC Ed.: replace XXXX and remove</c>
      </texttable>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>
	This document defines a minor extension to existing
	NETCONF protocol operations. It does not introduce
	any new or increased security risks into the management system.
      </t>
      <t>
	The 'with-defaults' capability
	gives client control over the retrieval of particular
	types of XML data from a configuration database.
	They only suppress data that can already be retrieved
	with the standard protocol operations, and do not
	add any data to the configuration database.
      </t>
    </section>  

    <section title="Acknowledgements">
      <t>Thanks to Martin Bjorklund, Sharon Chisholm, Phil Shafer, Juergen Schoenwaelder, Washam Fan and 
	many other members of the NETCONF WG for providing important input to this document.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &rfc2119;
      &rfc3688;
      &rfc4741;
      &netconfspec;
      &yangspec;
      &xmlspec;
    </references>


    <section title="Usage Examples">

      <section anchor="EXAMPLEMOD" title="Example YANG Module">
        <t>
	  The following YANG module defines an example interfaces table
	  to demonstrate how the &lt;with-defaults&gt; parameter behaves
	  for a specific data model.
        </t>
        <t>
	  Note that this is not a real module, and implementation
	  of this module is not required for conformance to the
	  :with-defaults protocol capability, defined in <xref target="WDCAP" />.
          This module is not to be registered with IANA.  It is
          intentionally very terse, and includes few descriptive statements.
        </t>
        <t>
	  <figure>
	    <artwork><![CDATA[
<CODE BEGINS> file="example.yang"

  module example {

  namespace "http://example.com/ns/interfaces";

  prefix exam;

  typedef itf-status-type {
     description "Interface status";
     type enumeration {
       enum ok;
       enum 'waking up';
       enum 'not feeling so good';
       enum 'better check it out';
       enum 'better call for help';
     }
     default ok;
  }

  container interfaces {
      description "Example interfaces group";

      list interface {
        description "Example interface entry";
        key name;

        leaf name {
          description 
            "The administrative name of the interface.  
             This is an identifier which is only unique 
             within the scope of this list, and only
	     within a specific server.";
          type string {
            length "1 .. max";
          }
        }

        leaf mtu {
          description 
            "The maximum transmission unit (MTU) value assigned to
	     this interface.";
          type uint32;
          default 1500;
        }

        leaf itf-status {
          description 
            "The current status of this interface.";
          type itf-status-type;
          config false;
        }
      }
    }
  }

<CODE ENDS>]]>
            </artwork>
	  </figure>
	  <vspace blankLines="1"/>
        </t>   
      </section>

      <section anchor="DATASET" title="Example Data Set">
        <t>
          The following data element shows the conceptual contents of the
          example server for the protocol operation examples in the
          next section.  This includes all the configuration data nodes,
          non-configuration data nodes, and default leafs.
        </t>
	<t>
	  <figure>
	    <artwork>
	      <![CDATA[
    <data xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
      <interfaces xmlns="http://example.com/ns/interfaces">
        <interface>
          <name>eth0</name>
          <mtu>8192</mtu>
          <itf-status>up</itf-status>
        </interface>
        <interface>
          <name>eth1</name>
          <mtu>1500</mtu>
          <itf-status>up</itf-status>
        </interface>
        <interface>
          <name>eth2</name>
          <mtu>9000</mtu>
          <itf-status>not feeling so good</itf-status>
        </interface>
        <interface>
          <name>eth3</name>
          <mtu>1500</mtu>
          <itf-status>waking up</itf-status>
        </interface>
      </interfaces>
    </data>
    ]]>
	    </artwork>
	  </figure>
	</t>
        <t>
          In this example, the 'mtu' field for each interface entry
          is set in the following manner:
        </t>
        <texttable>
	  <ttcol  align="left" width="20%">name</ttcol>
	  <ttcol  align="left" width="20%">set by</ttcol>
	  <ttcol align="left" width="20%">mtu</ttcol>
	  <c>eth0</c>
	  <c>client</c>
	  <c>8192</c>
	  <c>eth1</c>
	  <c>server</c>
	  <c>1500</c>
	  <c>eth2</c>
	  <c>client</c>
	  <c>9000</c>
	  <c>eth3</c>
	  <c>client</c>
	  <c>1500</c>
        </texttable>
      </section>

      <section title="Protocol Operation Examples">
        <t>
	  The following examples shows some &lt;get&gt; operations
	  using the 'with-defaults' element.
	  The data model used for these examples is defined in 
	  <xref target="EXAMPLEMOD" />.
        </t>
        <t>
	  The client is retrieving all the data nodes within the 'interfaces' object,
          filtered with the &lt;with-defaults&gt; parameter.
        </t>

        <section title="&lt;with-defaults&gt; = 'report-all'">
	  <t>
	    The behavior of the &lt;with-defaults&gt;
	    parameter handling for the value 'report-all'
	    is demonstrated in this example.
	  </t>
	  <t>
	    <figure>
	      <artwork>
	      <![CDATA[
    <rpc message-id="102"
         xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
      <get>
        <filter type="subtree">
          <interfaces xmlns="http://example.com/ns/interfaces"/>
        </filter>
        <with-defaults 
         xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-with-defaults">
          report-all
        </with-defaults>
      </get>
    </rpc>
    
    <rpc-reply message-id="102" 
               xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
      <data>
        <interfaces xmlns="http://example.com/ns/interfaces">
          <interface>
            <name>eth0</name>
            <mtu>8192</mtu>
            <itf-status>up</itf-status>
          </interface>
          <interface>
            <name>eth1</name>
            <mtu>1500</mtu>
            <itf-status>up</itf-status>
          </interface>
          <interface>
            <name>eth2</name>
            <mtu>9000</mtu>
            <itf-status>not feeling so good</itf-status>
          </interface>
          <interface>
            <name>eth3</name>
            <mtu>1500</mtu>
            <itf-status>waking up</itf-status>
          </interface>
        </interfaces>
      </data>
    </rpc-reply>

    ]]>
	      </artwork>
	    </figure>
	  </t>
        </section>

        <section title="&lt;with-defaults&gt; = 'trim'">
	  <t>
	    The behavior of the &lt;with-defaults &gt;
	    parameter handling for the value 'trim'
	    is demonstrated in this example.
	  </t>   
	  <t>
	    <figure>
	      <artwork>
	      <![CDATA[
    <rpc message-id="103"
         xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
      <get>
        <filter type="subtree">
          <interfaces xmlns="http://example.com/ns/interfaces"/>
        </filter>
        <with-defaults 
         xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-with-defaults">
	  trim
        </with-defaults>
      </get>
    </rpc>
    
    <rpc-reply message-id="103" 
               xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
      <data>
        <interfaces xmlns="http://example.com/ns/interfaces">
          <interface>
            <name>eth0</name>
            <mtu>8192</mtu>
          </interface>
          <interface>
            <name>eth1</name>
          </interface>
          <interface>
            <name>eth2</name>
            <mtu>9000</mtu>
            <itf-status>not feeling so good</itf-status>
          </interface>
          <interface>
            <name>eth3</name>
            <itf-status>waking up</itf-status>
          </interface>
        </interfaces>
      </data>
    </rpc-reply>
    ]]>
	      </artwork>
	    </figure>
	  </t>
        </section>

        <section title="&lt;with-defaults&gt; = 'explicit'">
	  <t>
	    The behavior of the &lt;with-defaults &gt;
	    parameter handling for the value 'explicit'
	    is demonstrated in this example.
	  </t>   
	  <t>
	    <figure>
	      <artwork>
	      <![CDATA[
    <rpc message-id="104"
         xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
      <get>
        <filter type="subtree">
          <interfaces xmlns="http://example.com/ns/interfaces"/>
        </filter>
        <with-defaults 
         xmlns="urn:ietf:params:xml:ns:yang:ietf-netconf-with-defaults">
          explicit
        </with-defaults>
      </get>
    </rpc>
    
    <rpc-reply message-id="104" 
               xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
      <data>
        <interfaces xmlns="http://example.com/ns/interfaces">
          <interface>
            <name>eth0</name>
            <mtu>8192</mtu>
            <itf-status>up</itf-status>
          </interface>
          <interface>
            <name>eth1</name>
            <itf-status>up</itf-status>
          </interface>
          <interface>
            <name>eth2</name>
            <mtu>9000</mtu>
            <itf-status>not feeling so good</itf-status>
          </interface>
          <interface>
            <name>eth3</name>
            <mtu>1500</mtu>
            <itf-status>waking up</itf-status>
          </interface>
        </interfaces>
      </data>
    </rpc-reply>
    ]]>
	      </artwork>
	    </figure>
	  </t>
        </section>
      </section>
    </section>

    <section title="Change Log"> 
      <t>
	-- RFC Ed.: remove this section before publication.
      </t>

      <section title="06-07">
        <t>
          Removed text in capability identifier section about adding
          YANG module capability URI parameters.
        </t>
	<t>Changed YANG module namespace to match YANG format,
          and updated examples to use this new namespace.</t>
        <t>Fixed some typos.</t>
      </section>

      <section title="05-06">
	<t>Removed ':1.0' from capability URI.</t>
	<t>Removed open issues section because all known issues are closed.</t>
        <t>Moved examples to a separate appendix, and expanded them.</t>
	<t>Added example.yang as an appendix to properly explain
	  the examples used within the document.
	</t>
        <t>Replaced normative term 'SHALL' with 'MUST' to be consistent within
          this document.
        </t>
        <t>Clarified &lt;with-defaults&gt; behavior for non-configuration data nodes.</t>
        <t>Clarified various sections based on WGLC comments on mailing list.</t>
        <t>Removed some unused terms.</t>
        <t>Reversed the order of the change log sections so the
          most recent changes are shown first.
        </t>
      </section>

      <section title="04-05">
	<t>Updated I-D and YANG module boiler-plate.</t>
	<t>Removed redundant 'with-defaults' YANG feature.</t>
	<t>Changed definition of 'explicit' mode to match the YANG definition</t>
	<t>Removed XSD because the YANG is normative and the XSD is unconstrained,
          and does not properly extend the 3 affected NETCONF operations.
	</t>
	<t>Made the YANG module a normative section instead of non-normative appendix.</t>
	<t>Changed YANG from an informative to a normative reference,</t>
	<t>Changed 4741bis from an informative to a normative reference because the YANG
          module imports the ietf-netconf module in order to augment some operations.</t>
	<t>Updated capability requirements to include YANG module capability parameters.</t>
	<t>Added a description statement to the with-defaults leaf definition.</t>
	<t>Update open issues section; ready to close all open issues.</t>
      </section>

      <section title="03-04">
	<t>Clarifications</t>
	<t>Added non-netconf interfaces to the definition of explicitly set default data</t>
      </section>

      <section title="02-03">
	<t>Clarifications</t>
	<t>YAM added</t>
	<t>Use the same URN for the capability and the XML namespace to 
          accommodate YANG, and avoid two separate URN/URIs being advertised 
          in the HELLO message, for such a small function.</t>
      </section>

      <section title="01-02">
	<t>report-all made mandatory</t>
	<t>Placeholder for YAM added, XSD will be removed when 4741 provides the NETCONF YAM</t>
	<t>with-defaults is valid for state data as well 
          (if state data has a defined default which might not be so frequent).
          The definition of explicit was modified for state data.
	</t>
      </section>

      <section title="00-01">
	<t>Changed value set of with-default capability and element</t>
	<t>Added version to URI</t>
      </section>

      <section title="-00">
	<t>Created from draft-bierman-netconf-with-defaults-01.txt</t>
	<t>
          It was decided by the NETCONF mailing list, that with-defaults should be a 
          sub-element of each affected operation. 
          While this violates the XSD of RFC4741 this is acceptable and follows 
          the ideas behind NETCONF and YANG.
          <vspace blankLines="1"/>
          Hopefully it will be clarified in the 4741bis RFC whether such extensions are allowed.
	</t>
      </section>
    </section>
  </back>
</rfc>

