<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-sakimura-oauth-requrl-00" ipr="trust200902">
  <front>
    <title abbrev="oauth-request_url">Request by Reference ver.1.0 for OAuth
    2.0</title>

    <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
      <organization>Nomura Research Institute</organization>

      <address>
        <postal>
          <street>1-6-5 Marunouchi, Marunouchi Kitaguchi Bldg.</street>

          <city>Chiyoda-ku</city>

          <code>100-0005</code>

          <region>Tokyo</region>

          <country>Japan</country>
        </postal>

        <phone>+81-3-5533-2111</phone>

        <email>n-sakimura@nri.co.jp</email>
      </address>
    </author>

    <date day="17" month="June" year="2010" />

    <abstract>
      <t>This document defines a simple mechanism of making request by
      reference in OAuth 2.0. The reference is given as URL and request
      parameters are defined as JSON object which is pointed by the URL.</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t>An additional parameter 'request_url' is introduced as one of the
      request parameter of the flows of <xref target="oauth2">OAuth
      2.0</xref>.</t>

      <t>There are a few cases that this is useful such as:</t>

      <t><list style="numbers">
          <t>When the User Agent looks like it would not like long URLs - It
          is entirely possible that some extension makes a long URL. For
          example, the client might want to send a public key with the
          request.</t>

          <t>When the server wants the request non-repudiation - The server
          might want the request to be non-repudiable. It is possible to sign
          the request dynamically, but a simpler way of doing it is to make a
          signed request file and put it on the client. It can just be done by
          a client utility or something, so that the private key does not even
          have to reside on the server nor the client needs to program
          anything.</t>

          <t>When the server wants the requests to be cacheable - If the
          request_url comes with sha256 hash as defined in <xref
          target="FIPS180-2">FIPS180-2</xref>of the file, the server knows if
          the file has changed without fetching it, so it does not have to
          re-fetch a same file, which is a win as well.</t>

          <t>When the client wants to simplify the implementation without
          compromising the security If the request parameters go through the
          Browser, it may be tampered at the browser even if TLS was used.
          This implies we need to have signature on the request as well.
          However, if HTTPS request_url was used, it is not going to be
          tampered, thus we now do not have to sign the request. This
          simplifies the implementation.</t>
        </list></t>
    </section>

    <section title="Terminology">
      <t>Following parameter is defined as a request and response parameter.
      <list style="hanging">
          <t hangText="request_url">The absolute URL from which request
          parameters are obtained.</t>

          <t hangText="Request File">This is a physical or logical file that
          the 'request_url' points to. It is in JSON format. It MAY include
          all the potential variables including extension and non-oauth
          variables. Request File can optionally be digitally signed. To sign
          the request file, <xref target="magic_signatures">magic
          signatures</xref> is used.</t>
        </list></t>
    </section>

    <section title="Formats">
      <t>There are several format that this document defines.</t>

      <section title="JSON OAuth Request">
        <t>The OAuth authorization request parameters are included in the
        entity body of the HTTP response using the "application/json" media
        type as defined by <xref target="RFC4627">JSON</xref>. It MAY include
        any other parameters as well. The parameters are serialized into a
        JSON structure by adding each parameter at the highest structure
        level. Parameter names and string values are included as JSON strings.
        Numerical values are included as JSON numbers.</t>

        <t>For example:</t>

        <t><figure>
            <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json

{
    "redirect_url":"https://example.com/rp/endpoint_url",
    "cliend_id":"http://example.com/rp/",
    "state":"ab890f0d"
}]]></artwork>
          </figure></t>
      </section>

      <section anchor="signed_format" title="Signed JSON OAuth Request">
        <t>To achieve non-repudiation and ascertained provenance of the JSON
        OAuth Request when it was obtained through unprotected channel, one
        MAY use asymmetric signature as in <xref
        target="magic_signatures"></xref> where parameters are as follows.</t>

        <t><list style="empty">
            <t>"data_type":"application/json"</t>

            <t>"encoding":"base64url"</t>

            <t>"alg":"RSA-SHA256"</t>

            <t>"data":base64url encoded JSON representation of the
            assertion.</t>
          </list></t>

        <t>This specification defines an additional parameter.</t>

        <t><list style="symbols">
            <t>certs_url <list style="empty">
                <t>Value: A URL from which one can retrieve PEM format X.509
                certificate. It is used as the replacement of "keyhash". Only
                either of the keyhash or certs_url MAY be used. When certs_url
                was used, the processor MUST obtain the certificate from this
                URL and use public key contained in it to verify the
                signature. In addition, the processor MUST verify the domain
                of the "request_url" against the CN of the certificate.</t>
              </list></t>
          </list></t>

        <t>Any other variables can be included in any level of the JSON
        structure. The processor MUST ignore the parameter that it does not
        understand.</t>

        <t>Following is the non-normative illustration of a signed response.
        (Note: Line wraps in the values are only for the display purpose. New
        lines MUST be escaped in JSON values.)<figure>
            <artwork><![CDATA[{
  "data_type":"application/json",
  "encoding":"base64url",
  "alg":"RSA-SHA256",
  "data":"base64url encoded data without padding",
  "sigs": [
    {
    "value": "EvGSD2vi8qYcveHnb-rrlok07qnCXjn8YSeCDDXlbhILSabgvNsPpbe76
    up8w63i2fWHvLKJzeGLKfyHg8ZomQ",
    "certs_url": "https://rp.example.com/certs.pem"
    }
  ]
}
]]></artwork>
          </figure></t>
      </section>

      <section anchor="encrypted_format" title="Encrypted Format">
        <t>The HTTP response may be encrypted by the receiving party's public
        key for audience restriction and confidentiality. If it is encrypted,
        the data is formatted as <xref target="json_enc">JSON Encryption
        Envelope</xref>. The following parameter MUST be set as follows:</t>

        <t><list style="symbols">
            <t>data_type -
            "http://openid.net/specs/ab/1.0#openid2json-enc"</t>
          </list>Following is a non-normative example of encrypted
        payload.</t>

        <t><figure>
            <artwork><![CDATA[{
    "class_id":"http://jsonenc.info/json-encryption/1.0/",
    "data_type":"http://openid.net/specs/ab/1.0#openid2json-enc",
    "enc_data":"b5guwzFgvrIUd7XcXI0bAFrg-....O69VKhY",
    "enc_type_asy":"http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p",
    "enc_type":"http://www.w3.org/2001/04/xmlenc#aes256-cbc",
    "enc_key":"mHM2ongmZlPVexe....2lsBNdw",
    "enc_iv":"_b4INfYIRwLPZdxB2L7wJg",
    "enc_ref":"https://rp.example.com/rpf_ax.json",
    "enc_thumbprint":"511e7a9cfe5eda16fa70f553c2dfa3c473e06423"
}
]]></artwork>
          </figure></t>
      </section>
    </section>

    <section title="Obtaining End-User Authorization">
      <t>When the client is obtaining End-User Authorization as in Section 3
      of <xref target="oauth2">OAuth 2.0</xref> , the client MAY use
      request_url instead of any but 'state' parameter. The corresponding
      Request File MUST have all the necessary parameters which was to be
      queried in this request. When sending the request_url, the client MAY
      provide the sha256 hash as defined in <xref target="FIPS180-2">FIPS180-2
      </xref>of the Request File as a fragment to it to assist the cache
      utilization decision of the Authorization Server.</t>

      <t>For example, the client directs the end-user's user-agent to make the
      following HTTPS request (line breaks are for display purposes only):</t>

      <t><figure>
          <artwork><![CDATA[GET /authorize?request_url=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
Host: server.example.com]]></artwork>
        </figure></t>

      <t>The Request File MAY be signed AND/OR encrypted.</t>

      <t>Upon receipt of 'requst_url' in the request, the authorization server
      MUST send a GET request to the 'request_url' to retrieve the content of
      the Request File unless it is already cached at the Authorization
      Server.</t>

      <t>If the response was signed AND/OR encrypted, it has to be decoded
      accordingly before being processed.</t>

      <t>Then, the Authorization Server MUST reconstruct the complete client
      request from the original HTTP request and the content of the Request
      File. Then, the process continues as described in Section 3 of <xref
      target="oauth2">OAuth 2.0</xref> .</t>

      <section title="Authorization Server Response">
        <t>Authorization Server Response is created and sent to the client as
        in Section 3.1 of <xref target="oauth2">OAuth 2.0</xref> .</t>

        <t>In addition, this document defines additional 'error' values as
        follows:</t>

        <t><list style="symbols">
            <t>"invalid_request_url" - The provided request_url was not
            available.</t>

            <t>"invalid_request_file_format" - The Request File format was
            invalid.</t>

            <t>"invalid_request_params" - The parameter set provided in the
            Request File was invalid.</t>
          </list></t>
      </section>
    </section>

    <section anchor="IANA" title="IANA  Considerations">
      <t>This document makes no request of IANA.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>When obtaining the Request FIle, the Authorization Server SHOULD use
      either HTTP over TLS 1.2 as defined in <xref
      target="RFC5246">RFC5246</xref> AND/OR Signed JSON Request.</t>

      <t>If the Request File contains personally identifiable or sensitive
      information, the "request_url" MUST be of one-time use and MUST have
      large enough entropy deemed necessary with applicable security policy.
      For higher security requirement, using <xref
      target="encrypted_format">Encryption described in </xref> is strongly
      recommended.</t>

      <t>[[ToDo]]</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>Following people contributed to creating this document through <xref
      target="openid_ab">the OpenID Artifact Binding 1.0</xref> . </t>

      <t>Breno de Medeiros (Google), Hideki Nara (TACT), John Bradley (Wingaa)
      &lt;author&gt;, Nat Sakimura (NRI) &lt;author/editor&gt;, Ryo Itou
      (Yahoo! Japan)</t>

      <t>Many people joined the discussion of the above at IIW and other
      occasions including Allen Tom (Yahoo!), George Fletcher (AOL), Dick
      Hardt (Independent) [[ToDo]]</t>

      <t>In addition following people contributed to this and previous
      versions through The OAuth Working Group. </t>

      <t>David Recordon (Facebook), Luke Shepard (Facebook), James H. Manger
      (Telstra), Marius Scurtescu (Google), John Panzer (Google), Dirk Balfanz
      (Google). </t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include='reference.RFC.4627'?>

      <?rfc include='reference.RFC.5246'?>

      <reference anchor="FIPS180-2">
        <front>
          <title>Secure Hash Signature Standard</title>

          <author>
            <organization>U.S. Department of Commerce</organization>
          </author>

          <author>
            <organization>National Institute of Standards and
            Technology</organization>
          </author>
        </front>

        <seriesInfo name="FIPS" value="180-2" />

        <format target="http://csrc.nist.gov/publications/fips/fips180-2/fips180-2withchangenotice.pdf"
                type="PDF" />

        <annotation>Defines Secure Hash Algorithm 256 (SHA256)</annotation>
      </reference>

      <reference anchor="oauth2">
        <front>
          <title>The OAuth 2.0 Protocol</title>

          <author fullname="E. Hammer-Lahav" initials="E."
                  surname="Hammer-Lahav">
            <organization abbrev="oidf"></organization>
          </author>

          <date day="15" month="June" year="2010" />
        </front>

        <format target="http://tools.ietf.org/html/draft-ietf-oauth-v2-08"
                type="HTML" />
      </reference>

      <reference anchor="magic_signatures">
        <front>
          <title>Magic Signatures</title>

          <author fullname="John Panzer" initials="J." surname="Panzer">
            <organization abbrev="goog">Google</organization>
          </author>

          <author fullname="Ben Laurie" initials="B." surname="Laurie">
            <organization abbrev="goog">Google</organization>
          </author>

          <date month="February" year="2010" />
        </front>

        <format target="http://salmon-protocol.googlecode.com/svn/trunk/draft-panzer-magicsig-00.html"
                type="HTML" />
      </reference>

      <reference anchor="json_enc">
        <front>
          <title>JSON Encryption Envelope</title>

          <author fullname="John Bradeley" initials="J." surname="Bradeley">
            <organization abbrev="wing">Wingaa</organization>
          </author>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="nri">Nomura Research Institute,
            Ltd.</organization>
          </author>

          <date day="4" month="February" year="2010" />
        </front>

        <format target="http://jsonenc.info/1.0/" type="HTML" />
      </reference>
    </references>

    <references title="Informative References">
      <reference anchor="openid_ab">
        <front>
          <title>OpenID Artifact Binding 1.0</title>

          <author fullname="openid-specs-ab@openid.net" initials=""
                  surname="openid-specs-ab@openid.net">
            <organization></organization>
          </author>

          <date day="12" month="June" year="2010" />
        </front>
      </reference>
    </references>
  </back>
</rfc>
