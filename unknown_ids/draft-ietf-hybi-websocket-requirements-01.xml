<?xml version="1.0"?>
<?rfc symrefs="yes"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes" ?>
<?rfc compact="yes" ?>
<?rfc sortrefs="no" ?>
<rfc category="info" docName="draft-ietf-hybi-websocket-requirements-01" ipr="trust200902">

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>

<front>
    <title abbrev="HyBi WebSocket Requirements">
        HyBi WebSocket Requirements and Features
    </title>

    <author initials="G." surname="Montenegro" fullname="Gabriel Montenegro" role="editor">
      <organization>Microsoft Corporation</organization>
      <address>
        <postal>
          <street>One Microsoft Way</street>
          <code>98052</code> 
          <city>Redmond</city> 
          <country>USA </country>

        </postal>
        <email>gabriel.montenegro@microsoft.com</email>
      </address>
    </author>

    <author initials="M." surname="Stachowiak" fullname="Maciej Stachowiak" role="editor">
      <organization>Apple</organization>
      <address>
        <email>mjs@apple.com</email>
      </address>
    </author>



        <date year="2010"/>
        <area>APP</area>
        <workgroup>HYBI Working Group</workgroup>
        <keyword>HTTP</keyword>
        <keyword>WebSocket</keyword>

	<abstract>
	<t>This document considers the requirements and resulting features needed for the design of the WebSocket Protocol.
           The goal of the document is to provide a stable base for protocol design and related discussion.
	</t>
        </abstract>

    <note title="Requirements Language">
        <t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;,
        &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;,
        &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;,
        &quot;MAY&quot;, and &quot;OPTIONAL&quot; in this document are to be
        interpreted as described in <xref target="RFC2119">RFC 2119</xref>.
        </t>
</note>
</front>


<middle>

<section title="Introduction"> 
	<t>HTTP <xref target="RFC2616"/> is a client/server protocol, where 
		the HTTP servers store the data and provide it when it 
		is requested by clients.  When used to retrieve data 
		from an HTTP server, the client sends HTTP requests 
		to the server, and the server returns the requested 
		data in HTTP responses. So the client has to poll 
		continuously the server in order to receive new data.</t>

<t>Recently, techniques that enable bidirectional communication over 
	HTTP have become more pervasive. Those techniques reduce
	the need to poll continuously the server thanks to the usage 
	of HTTP hanging requests and multiple connections between the
   client and the server <xref target="I-D.ietf-hybi-design-space"/>.</t>

<t>The goal of HyBi is to provide an efficient and clean two-way 
	communication channel between client and server.</t>
<t>The communication channel will: </t>

<t><list style="symbols">
<t>Allow each side to, independently from the other, send data when it is willing and ready to do so.</t>
</list></t>
<t><list style="symbols">
<t>Rely on a single TCP connection for traffic in both directions.</t>The protocol must support the ability to fragment a message
</list></t>
<t> <list style="symbols">
<t>Reduce the high overhead produced by HTTP headers in each request/response.</t>
</list></t>

<t>The goal of this work is to provide the set of requirements the WebSocket Protocol MUST meet.</t>

<t>In the following sections we list and analyse the requirements from the perspective of clients and servers.</t>

</section>

<section title="Terminology">

<t>
   This document uses the following HyBi-related terms:</t>
   <t><list style="hanging">
   <t hangText="connection:">A transport layer virtual circuit established between a client and a server for the purpose of communication.</t><t></t>
   <t hangText="frame:">The basic unit of WebSocket communication, consisting of a structured sequence of octets matching the syntax defined in
      the actual protocol and transmitted on the established communication channel.</t><t></t>
   <t hangText="message:">user message: a block of related data with identified boundaries. 
	   A message may comprise multiple frames.</t><t></t>
   <t hangText="origin server:">The server on which a given resource resides or is to be created.</t><t></t>
     
   <t hangText="WebSocket handshake:">
	   The process (and associated capability negotiation) that 
	   sets up the WebSocket communication channel.
   </t><t></t>
   <t hangText="WebSocket communication channel:">
	   After the WebSocket handshake is complete, the resultant bi-directional communication 
	   path between client and server over the transport (e.g., TCP, or SSL over TCP). 
   </t><t></t>

   <t hangText="WebSocket sub-protocol:">
	   The negotiated sub-protocol for use on a WebSocket communication channel that 
	   dictates framing, encoding, etc.
   </t><t></t>

   </list></t>


</section>


<section title="WebSocket Requirements"> 
<t>The following requirements for the WebSocket Protocol have been identified both in the HyBi wg input document <xref target="I-D.ietf-hybi-thewebsocketprotocol"/> 
   and in the HyBi mailing list dicussion.</t>
<t><list style="hanging">
		<t hangText="REQ. 1:">The WebSocket Protocol MUST run directly on top of 
			the transport protocol (over which the communication was running
			up to and including the WebSocket handshake).</t><t></t>
		<t hangText="REQ. 2:">The WebSocket Protocol MUST be able to handle 
			(send and receive) messages on 
			the transport protocol (over which the communication was running up to and 
			including the WebSocket handshake).</t>
</list></t>
<t>Reason:  transfer data as message obviates the need for the receiver to parse/handle partial content.
</t>
<t><list style="hanging">
		<t hangText="REQ. 3:">The protocol MUST support the ability to fragment a message into frames of a given length.
		</t><t></t>
		<t hangText="REQ. 4:">It MUST be possible to send a message when the total size is either 
			unknown or exceeds a fixed buffer size.
		</t>
</list></t>
<t>Reason:  This will allow dynamic messages to be constructed  and sent without the need to buffer the entire message.</t>
<t><list style="hanging">
		<t hangText="REQ. 5:">Textual data MUST be encoded as UTF-8.
		</t><t></t>
<t hangText="REQ. 6:">The protocol MUST support and clearly distinguish between 
	textual and binary data types (e.g. binary) via a common framing with explicit length indication.
</t><t></t>
<t hangText="REQ. 7:">The WebSocket protocol MUST allow HTTP and WebSocket connections to be 
	served from the same port. Consideration MUST be given:
</t>
<t><list style="empty">
<t>* to provide WebSocket services via  modules that plug in to existing web infrastructure.</t><t></t>
<t>* to making it possible and practical to implement standalone implementations of the protocol  without requiring a fully conforming HTTP  implementation.</t>
</list></t>
<t></t>
</list></t>
<t>Reason: Some server developers would like to integrate WebSocket support into existing HTTP servers. In addition, the default HTTP and HTTPS ports are ofter 
favoured for traffic that has to go through a firewall, so service providers will likely want to be able to use WebSocket over ports 80 and 443, even when running a Web server
on the same host. However there could be scenarios where it is not opportune or possible to setup a proxy on the same  HTTP server.
</t>
<t><list style="hanging">
		<t hangText="REQ. 8:">If using an HTTP Upgrade exchange in the WebSocket handshake,
			the protocol MUST be HTTP compatible up to and including the Upgrade exchange.
		</t>
</list></t>
<t><list style="hanging">
<t hangText="REQ. 9:">The protocol SHOULD make it possible and practical to reuse existing HTTP components where appropriate.</t>
</list></t>
<t>Reason:  Reusing existing well-debugged software decreases the number of implementation 
	errors as well as the possibility to introduce security holes, and increases development
	speed, especially when the WebSocket server is implemented as modules that 
	plug in to existing popular Web servers.
</t>

 

<section title="WebSocket Client Requirements"> 
<t><list style="hanging">
		<t hangText="REQ. 10:">The WebSocket Client MUST be able to set up a communication channel with a WebSocket 
			Server using a well-defined handshake.</t><t></t>
		<t hangText="REQ. 11:">The WebSocket Protocol MUST provide for graceful close of an active WebSocket connection on 
			request from the user Application.</t>
</list></t>
<t>Reason: a clean shutdown signals that the other endpoint has definitely received all the messages sent 
	prior to the close, so there is no protocol uncertainty about what has been processed and what can be 
	retried on another connection.</t>

<t><list style="hanging">
		<t hangText="REQ. 12:">WebSocket Protocol MUST also allow ungraceful close, either on request from 
			the user application or as a result of a detected error condition.</t><t></t>
		<t hangText="REQ. 13:">The WebSocket Client MUST be able to request the server, 
			during the handshake, to use a specific WebSocket sub-protocol.</t><t></t>
		<t hangText="REQ. 14:">The WebSocket Client MUST have the ability to send and clearly
			distinguish between arbitrary text or binary content to the server on 
			the established communication channel.</t><t></t>
</list></t>
</section>


<section title="WebSocket Server Requirements"> 
<t><list style="hanging">
		<t hangText="REQ. 15:">The WebSocket Server that accepts to set up a communication 
			channel with a WebSocket Client MUST use a well-defined handshake.</t><t></t>
		<t hangText="REQ. 16:">The WebSocket Server MUST have the ability to send and clearly 
			distinguish between arbitrary text or binary content to the client on the 
			established communication channel.</t><t></t>
</list></t>
</section>


<section title="WebSocket Proxies Requirements"> 
<t>Todo</t>
<t><list style="hanging">
		<t hangText="REQ. 17:">
			The WebSocket protocol MUST work over existing proxies to the same extent as HTTP or HTTPS already does.
		</t><t></t>
</list></t>
<t>Reason: This is in line with Req on HTTP compliance.
</t>
</section>


<section title="WebSocket Security Requirements"> 
<t><list style="hanging">
<t hangText="REQ. 18:">The WebSocket Protocol MUST use the Origin-based security model commonly used by Web browsers to restrict which Web pages can contact
a WebSocket  sever when the WebSocket protocol is used from a Web page.</t><t></t>
<t hangText="REQ. 19:">When used directly (not from a Web page), the WebSocket Protocol MUST use 
	a security model equivalent to that of direct HTTP or HTTPS usage.</t><t></t>
<t hangText="REQ. 20:">WebSocket should be designed to be robust against cross-protocol attacks. 
	The protocol design should consider and mitigate the risk presented by WebSocket clients to 
	existing servers (including HTTP servers). It should also consider and mitigate the risk to 
	WebSocket servers presented by clients for other protocols (including HTTP).</t>
</list></t>

<t>Reason: As the WebSocket protocol is expected to be often used in browsers, a careful 
	design is necessary to mitigate the chances for hostile JavaScript to use WebSocket for a 
	cross-protocol attack against vanilla HTTP resources or non-HTTP servers. More the design should 
	prevent the possibility for cross-site XMLHttpRequest (using CORS or XDomainRequest) to be used 
	for a cross-protocol attack against WebSocket resources, potentially violating integrity (though not confidentiality).
</t>


</section>

</section>







<section title="Security Considerations">
<t>
</t>
</section>

<section title="IANA Considerations">
<t>This requirements document does not mandate any immediate IANA actions. However, such IANA considerations may arise from future
HyBi specification documents which try to meet the requirements given here.</t>
</section>


<section title="Acknowledgments">
<t>
	The initial requirements were created by Salvatore Loreto.
	Thanks to Greg Wilkins for fulfilling previous editing duties.
</t>
</section>



</middle>


<back>

	<references title="Normative References">


		<?rfc include="reference.RFC.2119"?>
		<?rfc include="reference.RFC.2616"?>
                <?rfc include="reference.I-D.ietf-hybi-thewebsocketprotocol"?>

	</references>


	<references title="Informative References">


                <?rfc include="reference.I-D.ietf-hybi-design-space"?>

	</references>
</back>


<appendix title="Change Log (to be removed by RFC Editor before publication)">
<t>
	From version -00 to version -01:

<t><list style="symbols">
		<t>Modified definition of a Message to reflect recent consensus 
			that it may comprise multiple frames.
		</t>
</list></t>
<t><list style="symbols">
		<t>Added definitions for WebSocket handshake, WebSocket communication channel and
			WebSocket sub-protocol.
		</t>
</list></t>
<t><list style="symbols">
		<t>Updated references to official IETF documents, moved "design-space" to informational.
		</t>
</list></t>
<t><list style="symbols">
		<t>Added a new requirement to support the ability to fragment a message into frames of a given length
		</t>
</list></t>
<t><list style="symbols">
		<t>Reworded Req 5 to reflect recent consensus on "binary+data" as well as 
			common framing with explicit length indication
		</t>
</list></t>
<t><list style="symbols">
		<t>Reworded Req 7 to reflect recent consensus (declared in Maastricht) on 
			"HTTP compliance" 
		</t>
</list></t>
<t><list style="symbols">
		<t>Reworded Req 12 and 13 into a single Req on the client being able to send text or 
			binary content. Elided mention of "discrete blocks" as the structure of messages is captured elsewhere.
		</t>
</list></t>
<t><list style="symbols">
		<t>Reworded Req 15 and 16 into a single Req on the server being able to send text or 
			binary content. Elided mention of "discrete blocks" as the structure of messages is captured elsewhere.
		</t>
</list></t>
<t><list style="symbols">
		<t>Added a requirement in the proxies requirements section along the lines of the HTTP compliance requirement, 
			per consensus declared in Maastricht.
		</t>
</list></t>
<t><list style="symbols">
		<t>Modified security requirement when used from outside a browser to avoid wording in terms of a 
			security model equivalent to that of browser-based usage.
		</t>
</list></t>
<t><list style="symbols">
		<t>Various editorial changes.
		</t>
</list></t>

</t>
</appendix>

</rfc>
