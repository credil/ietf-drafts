<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc2578 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2578.xml">
<!ENTITY rfc2579 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2579.xml">
<!ENTITY rfc2580 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2580.xml">
<!ENTITY rfc3411 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3411.xml">
<!ENTITY rfc3412 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3412.xml">
<!ENTITY rfc3413 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3413.xml">
<!ENTITY rfc3414 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3414.xml">
<!ENTITY rfc3415 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3415.xml">
<!ENTITY rfc3418 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3418.xml">
<!ENTITY rfc3419 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3419.xml">
<!ENTITY I-D.ietf-isms-tmsm SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-isms-tmsm.xml">
<!ENTITY I-D.ietf-isms-secshell SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-isms-secshell.xml">
<!ENTITY rfc3410 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3410.xml">
<!ENTITY rfc3584 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3584.xml">

]>
<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes" ?>
<?rfc strict="yes" ?>
<?rfc rfcedstyle="yes" ?>
<rfc category="std" docName="draft-ietf-isms-transport-security-model-14"
     ipr="pre5378Trust200902">
  <!--
$Id: draft-ietf-isms-transport-security-model.xml,v 1.22 2009/04/27 11:48:36 H73653 Exp $
  -->

  <front>
    <title abbrev="Transport Security Model for SNMP">Transport Security Model
    for SNMP</title>

    <author fullname="David Harrington" initials="D" surname="Harrington">
      <organization>Huawei Technologies (USA)</organization>

      <address>
        <postal>
          <street>1700 Alma Dr. Suite 100</street>

          <city>Plano, TX 75075</city>

          <country>USA</country>
        </postal>

        <phone>+1 603 436 8634</phone>

        <email>dharrington@huawei.com</email>
      </address>
    </author>

    <author initials="W.H." surname="Hardaker" fullname="Wes Hardaker">
      <organization>Sparta, Inc.</organization>
      <address>
        <postal>
          <street>P.O. Box 382</street>
          <city>Davis</city>
          <region>CA</region>
          <code>95617</code>
          <country>US</country>
        </postal>
        <phone>+1 530 792 1913</phone>
        <email>ietf@hardakers.net</email>
      </address>
    </author>

    <date year="2009" />

    <area>Operations and Management</area>

    <!-- <workgroup>ISMS WG</workgroup> -->

    <keyword>Network Management</keyword>

    <keyword>Simple Network Management Protocol</keyword>

    <keyword>SNMP</keyword>

    <keyword>Transport Security Model</keyword>

    <keyword>Security Model</keyword>

    <abstract>
      <t>This memo describes a Transport Security Model for the Simple Network
      Management Protocol.</t>

      <t>This memo also defines a portion of the Management Information Base
      (MIB) for monitoring and managing the Transport Security Model for SNMP.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>This memo describes a Transport Security Model for the Simple Network
      Management Protocol, for use with secure Transport Models in the
      Transport Subsystem <xref target="I-D.ietf-isms-tmsm"></xref>.</t>

      <t>This memo also defines a portion of the Management Information Base
      (MIB) for monitoring and managing
      the Transport Security Model for SNMP.</t>

      <t>It is important to understand the SNMP architecture and the
      terminology of the architecture to understand where the Transport
      Security Model described in this memo fits into the architecture and
      interacts with other subsystems and models within the architecture. It
      is expected that reader will have also read and understood RFC3411 <xref
      target="RFC3411"></xref>, RFC3412 <xref target="RFC3412"></xref>,
      RFC3413 <xref target="RFC3413"></xref>, and RFC3418 <xref
      target="RFC3418"></xref>.</t>

      <section title="The Internet-Standard Management Framework">
        <t>For a detailed overview of the documents that describe the current
        Internet-Standard Management Framework, please refer to section 7 of
        RFC 3410 <xref target="RFC3410"></xref>.</t>

        <t>Managed objects are accessed via a virtual information store,
        termed the Management Information Base or MIB. MIB objects are
        generally accessed through the Simple Network Management Protocol
        (SNMP). Objects in the MIB are defined using the mechanisms defined in
        the Structure of Management Information (SMI). This memo specifies a
        MIB module that is compliant to the SMIv2, which is described in STD
        58, RFC 2578 <xref target="RFC2578"></xref>, STD 58, RFC 2579 <xref
        target="RFC2579"></xref> and STD 58, RFC 2580 <xref
        target="RFC2580"></xref>.</t>
      </section>

      <section title="Conventions">
        <t>For consistency with SNMP-related specifications, this document
        favors terminology as defined in STD62 rather than favoring
        terminology that is consistent with non-SNMP specifications that use
        different variations of the same terminology. This is consistent with
        the IESG decision to not require the SNMPv3 terminology be modified to
        match the usage of other non-SNMP specifications when SNMPv3 was
        advanced to Full Standard.</t>

        <t>Authentication in this document typically refers to the English
        meaning of "serving to prove the authenticity of" the message, not
        data source authentication or peer identity authentication.</t>

        <t>The terms "manager" and "agent" are not used in this document,
        because in the RFC 3411 architecture, all SNMP entities have the
        capability of acting as either manager or agent or both depending on
        the SNMP applications included in the engine. Where distinction is
        needed, the application names of Command Generator, Command
        Responder, Notification Originator, Notification Receiver, and Proxy
        Forwarder are used. See "SNMP Applications" <xref
        target="RFC3413"></xref> for further information.</t>

        <t>While security protocols frequently refer to a user, the
        terminology used in RFC3411 <xref target="RFC3411"></xref> and in this
        memo is "principal". A principal is the "who" on whose behalf services
        are provided or processing takes place. A principal can be, among
        other things, an individual acting in a particular role; a set of
        individuals, with each acting in a particular role; an application or
        a set of applications, or a combination of these within an
        administrative domain.</t>

        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119"></xref>.</t>
        
        <t>Non uppercased versions of the keywords should be read as in normal
        English. They will usually, but not always, be used in a context
        relating to compatibility with the RFC3411 architecture or the
        subsystem defined here, but which might have no impact on on-the-wire
        compatibility. These terms are used as guidance for designers of
        proposed IETF models to make the designs compatible with RFC3411
        subsystems and Abstract Service Interfaces (ASIs) (see section 3.2).
        Implementers are free to implement differently. Some usages of these
        lowercase terms are simply normal English usage.</t>
        
      </section>

      <section title="Modularity">
        <t>The reader is expected to have read and understood the description
        of the SNMP architecture, as defined in <xref
        target="RFC3411"></xref>, and the architecture extension specified in
        "Transport Subsystem for the Simple Network Management Protocol" <xref
        target="I-D.ietf-isms-tmsm"></xref>, which enables the use of external
        "lower layer transport" protocols to provide message security, tied
        into the SNMP architecture through the Transport Subsystem. The
        Transport Security Model is designed to work with such lower-layer
        secure Transport Models.</t>

        <t>In keeping with the RFC 3411 design decisions to use self-contained
        documents, this memo includes the elements of procedure plus
        associated MIB objects which are needed for processing the Transport
        Security Model for SNMP. These MIB objects SHOULD NOT be referenced in
        other documents. This allows the Transport Security Model to be
        designed and documented as independent and self-contained, having no
        direct impact on other modules, and allowing this module to be
        upgraded and supplemented as the need arises, and to move along the
        standards track on different time-lines from other modules.</t>

        <t>This modularity of specification is not meant to be interpreted as
        imposing any specific requirements on implementation.</t>
      </section>

      <section title="Motivation">
        <t>This memo describes a Security Model to make use of Transport
        Models that use lower layer secure transports and existing and
        commonly deployed security infrastructures. This Security Model is
        designed to meet the security and operational needs of network
        administrators, maximize usability in operational environments to
        achieve high deployment success and at the same time minimize
        implementation and deployment costs to minimize the time until
        deployment is possible.</t>
      </section>

      <section title="Constraints">
        <t>The design of this SNMP Security Model is also influenced by the
        following constraints: <list style="numbers">
            <t>In times of network stress, the security protocol and its
            underlying security mechanisms SHOULD NOT depend solely upon the
            ready availability of other network services (e.g., Network Time
            Protocol (NTP) or Authentication, Authorization, and Accounting
            (AAA) protocols).</t>

            <t>When the network is not under stress, the Security Model and
            its underlying security mechanisms MAY depend upon the ready
            availability of other network services.</t>

            <t>It might not be possible for the Security Model to determine when
            the network is under stress.</t>

            <t>A Security Model SHOULD NOT require changes to the SNMP
            architecture.</t>

            <t>A Security Model SHOULD NOT require changes to the underlying
            security protocol.</t>
          </list></t>
      </section>
    </section>

    <!-- ********************************************* -->

    <section title="How the Transport Security Model Fits in the Architecture">
      <t>The Transport Security Model is designed to fit into the RFC3411
      architecture as a Security Model in the Security Subsystem, and to
      utilize the services of a secure Transport Model.</t>
    
      <t>   For incoming messages, a secure Transport Model will pass
   a tmStateReference cache, described later.  To maintain RFC3411 modularity, the Transport Model will not know
      which securityModel will process the incoming message; the Message
      Processing Model will determine this. If the Transport Security Model is used with a non-secure
      Transport Model, then the cache will not exist or not be populated with
      security parameters, which will cause the Transport Security Model to
      return an error (see section 5.2) </t>      
   
   <t>The Transport Security Model will create the securityName and securityLevel to be passed to applications, and verify that the tmTransportSecurityLevel reported by the Transport Model is at least as strong as the securityLevel requested by the Message Processing Model.</t>
      
      <t>For outgoing messages, the Transport Security Model will create a tmStateReference cache (or use an existing one), and pass the tmStateReference to the specified Transport Model.</t>



      <section title="Security Capabilities of this Model">
        <section title="Threats">
                  <t>The Transport Security Model is compatible with the RFC3411 architecture, and provides protection against the threats identified
          by the RFC 3411 architecture. However, the Transport Security
          Model does not provide security mechanisms such as authentication
          and encryption itself. Which threats are addressed and how they are mitigated depends on the Transport Model used. To avoid creating potential security vulnerabilities, operators should configure their system so this Security Model is always used with a Transport Model that provides appropriate security, where "appropriate" for a particular deployment is an administrative decision.</t>

        </section>

        <section title="Security Levels">
          <t>The RFC 3411 architecture recognizes three levels of security:
          <list>
              <t>- without authentication and without privacy
              (noAuthNoPriv)</t>

              <t>- with authentication but without privacy (authNoPriv)</t>

              <t>- with authentication and with privacy (authPriv)</t>
            </list></t>

          <t>The model-independent securityLevel parameter is used to request
          specific levels of security for outgoing messages, and to assert
          that specific levels of security were applied during the transport
          and processing of incoming messages.</t>

          <t>The transport layer algorithms used to provide security should
          not be exposed to the Transport Security Model, as the Transport
          Security Model has no mechanisms by which it can test whether an
          assertion made by a Transport Model is accurate.</t>

          <t>The Transport Security Model trusts that the underlying secure
          transport connection has been properly configured to support
          security characteristics at least as strong as reported in
          tmTransportSecurityLevel.</t>
        </section>
      </section>

      <section title="Transport Sessions">
        <t>The Transport Security Model does not work with transport sessions
   directly.  Instead the transport-related state is associated with
   a unique combination of transportDomain, transportAddress, securityName
   and securityLevel, and referenced via the tmStateReference parameter.
   How and if this is mapped to a particular transport or channel is
   the responsibility of the Transport Subsystem.</t>
      </section>

      <section title="Coexistence">
              <t>In the RFC3411 architecture, a Message Processing Model determines
        which Security Model SHALL be called. As of this writing, IANA has
        registered four Message Processing Models (SNMPv1, SNMPv2c,
        SNMPv2u/SNMPv2*, and SNMPv3) and three other Security Models (SNMPv1,
        SNMPv2c, and the User-based Security Model).</t>
      <section title="Coexistence with Message Processing Models">

        <t>The SNMPv1 and SNMPv2c message processing described in RFC3584 (BCP
        74) <xref target="RFC3584"></xref> always selects the SNMPv1(1)
        and SNMPv2c(2) Security Models. Since there is no mechanism defined in RFC3584 to
   select an alternative Security Model, SNMPv1 and SNMPv2c messages
   cannot use the Transport Security Model.  Messages might still be able to
   be conveyed over a secure transport protocol, but the Transport
   Security Model will not be invoked.</t>

        <t>The SNMPv2u/SNMPv2* Message Processing Model is a historic artifact for which there is no existing IETF specification.</t>

        <t>The SNMPv3 message processing defined in RFC3412 <xref
        target="RFC3412"></xref>, extracts the securityModel from the
        msgSecurityModel field of an incoming SNMPv3Message. When this
        value is transportSecurityModel(YY),
        security processing is directed to the Transport Security Model. For
        an outgoing message to be secured using the Transport Security Model,
        the application MUST specify a securityModel parameter value of transportSecurityModel(YY) in the sendPdu Application Service Interface (ASI).</t>

        <t>[-- NOTE to RFC editor: replace YY with actual IANA-assigned
        number, and remove this note. ]</t>
        </section>
      <section title="Coexistence with Other Security Models">
        <t>The Transport Security Model uses its own MIB module for processing
        to maintain independence from other Security Models. This allows the
        Transport Security Model to coexist with other Security Models, such
        as the User-based Security Model <xref target="RFC3414"></xref>.</t>
         </section>
         <section title="Coexistence with Transport Models">
        <t>The Transport Security Model MAY work with multiple
   Transport Models, but the RFC3411 application service
   interfaces (ASIs) do not carry a value for the Transport Model. 
The MIB module defined in this memo allows an administrator
        to configure whether or not TSM prepends a
        transport model prefix to the securityName. This will allow SNMP applications to consider transport model as a factor when making decisions, such as access control, notification generation, and proxy forwarding.</t>
        
      <t>To have SNMP properly utilize the security services coordinated by the 
      Transport Security Model, this Security Model MUST only be used
      with Transport Models that know how to process a tmStateReference,
      such as the Secure Shell Transport Model <xref target="I-D.ietf-isms-secshell"></xref>.</t>
        
        </section>
         </section>
      </section>

      
    <!-- **************************************************** -->
  <section title="Cached Information and References">
    
          <t>When performing SNMP processing, there are two levels of state
   information that might need to be retained:  the immediate state
   linking a request-response pair, and potentially longer-term state
   relating to transport and security. <xref target="I-D.ietf-isms-tmsm">"Transport Subsystem for the Simple Network Management Protocol" </xref> defines general requirements for caches and references. </t>

<t>This document defines additional cache requirements related to the Transport Security Model.</t>
      
 <section title="Transport Security Model Cached Information">

<t>The Transport Security Model has specific responsibilities regarding the cached information.</t>
      <section title="securityStateReference">
              <t>The Transport Security Model adds   
              the tmStateReference received from the processIncomingMsg ASI to the
               securityStateReference.  This tmStateReference can then be retrieved during the 
               generateResponseMsg ASI, so that it can be passed back to the Transport Model.
</t>

	    </section>
      
      <section title="tmStateReference">
       
        <t>For outgoing messages, the Transport Security Model uses
        parameters provided by the SNMP application to lookup or create a
        tmStateReference.</t>
        
                      <t>For the Transport Security Model, the security parameters
	    used for a response MUST be the same as those used for the 
	    corresponding request.  This security model uses the tmStateReference stored as 
	    part of the securityStateReference when appropriate. For responses and reports, 
	    this security model sets the tmSameSecurity flag to true in the tmStateReference 
	    before passing it to a transport model.</t>
        
        <t>For incoming messages, the Transport Security Model uses
        parameters provided in the tmStateReference cache to establish a securityName, and to verify adequate security levels. </t>

      </section>

      <section title="Prefixes and securityNames">

        <t>The SNMP-VIEW-BASED-ACM-MIB <xref target="RFC3415"></xref>, the SNMP-TARGET-MIB module <xref target="RFC3413"></xref>,  and other MIB modules contain objects to configure security parameters for use by applications such as access control, notification generation, and proxy forwarding. </t>
      <t>Transport domains and their
   corresponding prefixes are coordinated via the IANA registry "SNMP Transport Domains".</t>
      <t>If snmpTsmConfigurationUsePrefix is set to true then all securityNames provided by, or provided to, the Transport Security Model MUST include a valid transport domain prefix.</t>
       <t>If snmpTsmConfigurationUsePrefix is set to false then all securityNames provided by, or provided to, the Transport Security Model MUST NOT include a transport domain prefix.</t>
       <t>The tmSecurityName in the tmStateReference stored as part of the securityStateReference does not contain a prefix.</t>
   
      </section>

    </section>

    </section>
    <section title="Processing an Outgoing Message">
      <t>An error indication might return an OID and value for an incremented
      counter and a value for securityLevel, and values for contextEngineID
      and contextName for the counter, and the securityStateReference if the
      information is available at the point where the error is detected.</t>

      <section title="Security Processing for an Outgoing Message">
        <t>This section describes the procedure followed by the Transport
        Security Model.</t>

        <t>The parameters needed for generating a message are supplied to the
        Security Model by the Message Processing Model via the
        generateRequestMsg() or the generateResponseMsg() ASI. The Transport
        Subsystem architectural extension has added the transportDomain,
        transportAddress, and tmStateReference parameters to the original
        RFC3411 ASIs.</t>

        <figure>
          <artwork><![CDATA[
  statusInformation =                -- success or errorIndication
        generateRequestMsg(
        IN   messageProcessingModel  -- typically, SNMP version
        IN   globalData              -- message header, admin data
        IN   maxMessageSize          -- of the sending SNMP entity
        IN   transportDomain         -- (NEW) specified by application
        IN   transportAddress        -- (NEW) specified by application
        IN   securityModel           -- for the outgoing message
        IN   securityEngineID        -- authoritative SNMP entity
        IN   securityName            -- on behalf of this principal
        IN   securityLevel           -- Level of Security requested
        IN   scopedPDU               -- message (plaintext) payload
        OUT  securityParameters      -- filled in by Security Module
        OUT  wholeMsg                -- complete generated message
        OUT  wholeMsgLength          -- length of generated message
        OUT  tmStateReference        -- (NEW)  transport info        
             )
 ]]></artwork>
        </figure>

        <figure>
          <artwork><![CDATA[
statusInformation = -- success or errorIndication
        generateResponseMsg(
        IN   messageProcessingModel  -- typically, SNMP version
        IN   globalData              -- message header, admin data
        IN   maxMessageSize          -- of the sending SNMP entity
        IN   transportDomain         -- (NEW) specified by application
        IN   transportAddress        -- (NEW) specified by application
        IN   securityModel           -- for the outgoing message
        IN   securityEngineID        -- authoritative SNMP entity
        IN   securityName            -- on behalf of this principal
        IN   securityLevel           -- Level of Security requested
        IN   scopedPDU               -- message (plaintext) payload
        IN   securityStateReference  -- reference to security state
                                     -- information from original
                                     -- request
        OUT  securityParameters      -- filled in by Security Module
        OUT  wholeMsg                -- complete generated message
        OUT  wholeMsgLength          -- length of generated message
        OUT  tmStateReference        -- (NEW) transport info
             )]]></artwork>
        </figure>

        <t></t>
      </section>

      <section title="Elements of Procedure for Outgoing Messages">
        <t>1) If there is a securityStateReference (Response or Report
         message), then this security model uses the cached information rather 
         than the information provided by the ASI. Extract the 
         tmStateReference from the securityStateReference cache. Set the
        tmRequestedSecurityLevel to the value of the extracted
        tmTransportSecurityLevel. Set the tmSameSecurity parameter in the
        tmStateReference cache to true. The cachedSecurityData for this 
        message can now be discarded. </t>
        
        <t>2) If there is no securityStateReference (e.g., a Request-type or Notification message) then create a
        tmStateReference cache. Set tmTransportDomain to the value of transportDomain, 
        tmTransportAddress to the value of transportAddress,  and tmRequestedSecurityLevel to the value of securityLevel. 
        (Implementers might optimize by pointing to saved copies of these session-specific 
        values.) Set the transaction-specific tmSameSecurity parameter to false.</t>
        
        <t>If the snmpTsmConfigurationUsePrefix object is set to false, then set tmSecurityName 
        to the value of securityName.</t>
        
        <t>If the snmpTsmConfigurationUsePrefix object is set to
	    true, then use the transportDomain to look up the corresponding prefix. (Since the
	     securityStateReference stores the tmStateReference with the tmSecurityName 
	     for the incoming message, and tmSecurityName never has a prefix, the prefix 
	     stripping step only occurs when we are not using the securityStateReference).
	  <list>
	    <t>  	
	    If the prefix lookup fails for any reason, then the 
	    snmpTsmUnknownPrefixes counter is incremented, an error indication 
	    is returned to the calling module, and message processing stops.  
   	                  <vspace blankLines='1' />
   	    If the lookup succeeds, but there is no prefix in the securityName, or
   	    the prefix returned does not match the prefix in the securityName,   
   	    or the length of the prefix is less than 1 or greater than four US-ASCII alpha-numeric
   	    characters, then the snmpTsmInvalidPrefixes
   	    counter is incremented, an error indication is returned
   	    to the calling module, and message processing stops.
              <vspace blankLines='1' /> 	
        Strip the transport-specific prefix and trailing ':'
	    character (US-ASCII 0x3a) from the securityName.  
	    Set tmSecurityName to the value of securityName.</t>  
	  </list>
	</t>
        <t>3) Set securityParameters to a zero-length OCTET STRING ('0400').</t>

        <t>4) Combine the message parts into a wholeMsg and calculate
        wholeMsgLength.</t>

        <t>5) The wholeMsg, wholeMsgLength, securityParameters and
        tmStateReference are returned to the calling Message Processing Model
        with the statusInformation set to success.</t>
      </section>

      <!--**************************************************** -->
    </section>

    <section title="Processing an Incoming SNMP Message">
      <t>An error indication might return an OID and value for an incremented
      counter and a value for securityLevel, and values for contextEngineID
      and contextName for the counter, and the securityStateReference if the
      information is available at the point where the error is detected.</t>

      <section title="Security Processing for an Incoming Message">
        <t>This section describes the procedure followed by the Transport
        Security Model whenever it receives an incoming message from a Message
        Processing Model. The ASI from a Message Processing Model to the
        Security Subsystem for a received message is:</t>

        <figure>
          <artwork><![CDATA[
statusInformation =  -- errorIndication or success
                         -- error counter OID/value if error
processIncomingMsg(
IN   messageProcessingModel    -- typically, SNMP version
IN   maxMessageSize            -- from the received message
IN   securityParameters        -- from the received message
IN   securityModel             -- from the received message
IN   securityLevel             -- from the received message
IN   wholeMsg                  -- as received on the wire
IN   wholeMsgLength            -- length as received on the wire
IN   tmStateReference          -- (NEW) from the Transport Model
OUT  securityEngineID          -- authoritative SNMP entity
OUT  securityName              -- identification of the principal
OUT  scopedPDU,                -- message (plaintext) payload
OUT  maxSizeResponseScopedPDU  -- maximum size sender can handle
OUT  securityStateReference    -- reference to security state
 )                         -- information, needed for response
        ]]></artwork>
        </figure>

        <t></t>
      </section>

      <section title="Elements of Procedure for Incoming Messages">
        <t>1) Set the securityEngineID to the local snmpEngineID.</t>

        <t>2) If tmStateReference does not refer to a cache containing
        values for tmTransportDomain, tmTransportAddress, tmSecurityName and
        tmTransportSecurityLevel, then the snmpTsmInvalidCaches
        counter is incremented, an error indication is returned to the
        calling module, and Security Model processing stops for this
        message.</t>
    
        <t>3) Copy the tmSecurityName to securityName. </t>
        
        <t>If the snmpTsmConfigurationUsePrefix object is set to true, then 
        use the tmTransportDomain to look up the corresponding prefix.
	  <list>
		<t> If the prefix lookup fails for any
	    reason, then the snmpTsmUnknownPrefixes counter is
	    incremented, an error indication is returned to the
	    calling module, and message processing stops.
   	                  <vspace blankLines='1' />
   	    If the lookup succeeds, but the prefix length is less than one or greater 
   	    than four octets, then the snmpTsmInvalidPrefixes counter is incremented, an 
   	    error indication is returned to the calling module, and message 
   	    processing stops.	    
	      <vspace blankLines='1' />
	    Set the securityName to be the concatenation of
	    the prefix, a ':' character (US-ASCII 0x3a)
	    and the tmSecurityName. 
	    </t>
	      
	  </list>
	</t>

        <t>4) Compare the value of tmTransportSecurityLevel in the
        tmStateReference cache to the value of the securityLevel parameter
        passed in the processIncomingMsg ASI. If securityLevel specifies
        privacy (Priv), and tmTransportSecurityLevel specifies no privacy
        (noPriv), or securityLevel specifies authentication (auth) and
        tmTransportSecurityLevel specifies no authentication (noAuth) was
        provided by the Transport Model, then the
        snmpTsmInadequateSecurityLevels counter is incremented, an error
        indication (unsupportedSecurityLevel) together with the OID and value
        of the incremented counter is returned to the calling module, and
        Transport Security Model processing stops for this message.</t>

        <t>5) The tmStateReference is cached as cachedSecurityData, so that a
        possible response to this message will use the same security
        parameters. Then securityStateReference is set for subsequent reference 
        to this cached data.</t>  

        <t>6) The scopedPDU component is extracted from the wholeMsg.</t>

        <t>7) The maxSizeResponseScopedPDU is calculated. This is the maximum
        size allowed for a scopedPDU for a possible Response message.</t>

        <t>8) The statusInformation is set to success and a return is made to
        the calling module passing back the OUT parameters as specified in the
        processIncomingMsg ASI.</t>
      </section>
    </section>

    <!-- **************************************************** -->

    <section title="MIB Module Overview">
      <t>This MIB module provides objects for use only by the Transport Security
      Model. It defines a configuration scalar and related error counters.</t>

      <section title="Structure of the MIB Module">
        <t>Objects in this MIB module are arranged into subtrees. Each subtree
        is organized as a set of related objects. The overall structure and
        assignment of objects to their subtrees, and the intended purpose of
        each subtree, is shown below.</t>

      <section title="The snmpTsmStats Subtree">
        <t>This subtree contains error counters specific to the Transport Security
        Model.</t>
      </section>
      
      <section title="The snmpTsmConfiguration Subtree"> <t>This
      subtree contains a configuration object that enables
      administrators to specify if they want a transport domain prefix 
      prepended to securityNames for use by applications.</t></section>
      </section>
      
      <!-- 	***************************************************** 	-->

      <section title="Relationship to Other MIB Modules">
        <t>Some management objects defined in other MIB modules are applicable
        to an entity implementing the Transport Security Model. In particular,
        it is assumed that an entity implementing the Transport Security Model
        will implement the SNMP-FRAMEWORK-MIB <xref target="RFC3411"></xref>, the SNMP-TARGET-MIB <xref target="RFC3413"></xref>, the SNMP-VIEW-BASED-ACM-MIB <xref target="RFC3415"></xref>, and the SNMPv2-MIB <xref target="RFC3418"></xref>. These are
         not needed to implement the SNMP-TSM-MIB.</t>

        <section title="MIB Modules Required for IMPORTS">
          <t>The following MIB module imports items from <xref
          target="RFC2578"></xref>,  <xref target="RFC2579"></xref>,   and <xref target="RFC2580"></xref>.</t>
        </section>
      </section>
    </section>

    <section title="MIB module definition">
      <t></t>

      <figure>
        <artwork><![CDATA[
SNMP-TSM-MIB DEFINITIONS ::= BEGIN

IMPORTS
    MODULE-IDENTITY, OBJECT-TYPE,
    mib-2, Counter32            
      FROM SNMPv2-SMI -- RFC2578
    MODULE-COMPLIANCE, OBJECT-GROUP       
      FROM SNMPv2-CONF -- RFC2580
    TruthValue
       FROM SNMPv2-TC -- RFC2579
    ;
    
snmpTsmMIB MODULE-IDENTITY
    LAST-UPDATED "200903090000Z"
    ORGANIZATION "ISMS Working Group"
    CONTACT-INFO "WG-EMail:   isms@lists.ietf.org
                  Subscribe:  isms-request@lists.ietf.org

                  Chairs:
                    Juergen Quittek
                    NEC Europe Ltd.
                    Network Laboratories
                    Kurfuersten-Anlage 36
                    69115 Heidelberg
                    Germany
                    +49 6221 90511-15
                    quittek@netlab.nec.de
                    
                    Juergen Schoenwaelder
                    Jacobs University Bremen
                    Campus Ring 1
                    28725 Bremen
                    Germany
                    +49 421 200-3587
                    j.schoenwaelder@iu-bremen.de
                     
                  Editor:
                    David Harrington
                    Huawei Technologies USA
                    1700 Alma Dr.
                    Plano TX 75075
                    USA
                    +1 603-436-8634
                    ietfdbh@comcast.net

	            Wes Hardaker
	            Sparta, Inc.
	            P.O. Box 382
	            Davis, CA  95617
	            USA
	            +1 530 792 1913
	            ietf@hardakers.net
                 "
    DESCRIPTION "The Transport Security Model MIB

                 In keeping with the RFC 3411 design decisions 
                 to use self-contained documents, the RFC which
                 contains the definition of this MIB module also
                 includes the elements of procedure which are 
                 needed for processing the Transport Security
                 Model for SNMP. These MIB objects 
                 SHOULD NOT be modified via other subsystems
                 or models defined in other documents.
                 This allows the Transport Security Model 
                 for SNMP to be designed and documented as 
                 independent and self- contained, having no 
                 direct impact on other modules, and this 
                 allows this module to be upgraded and 
                 supplemented as the need arises, and to 
                 move along the standards track on different 
                 time-lines from other modules.

   Copyright (c) 2009 IETF Trust and the persons identified as
    authors of the MIB module. All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    - Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.
    - Neither the name of Internet Society, IETF or IETF Trust, nor the
      names of specific contributors, may be used to endorse or promote
      products derived from this software without specific prior written
      permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
    CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, 
    INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
    MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED 
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
    POSSIBILITY OF SUCH DAMAGE.

    This version of this MIB module is part of RFC XXXX; 
    see the RFC itself for full legal notices.
-- NOTE to RFC editor: replace XXXX with actual RFC number
--                     for this document and remove this note
                "

    REVISION    "200903090000Z"         
    DESCRIPTION "The initial version, published in RFC XXXX.
-- NOTE to RFC editor: replace XXXX with actual RFC number
--                     for this document and remove this note
                "

    ::= { mib-2 xxxx }
-- RFC Ed.: replace xxxx with IANA-assigned number and
--          remove this note
  
-- ---------------------------------------------------------- --
-- subtrees in the SNMP-TSM-MIB
-- ---------------------------------------------------------- --

snmpTsmNotifications OBJECT IDENTIFIER ::= { snmpTsmMIB 0 }
snmpTsmMIBObjects    OBJECT IDENTIFIER ::= { snmpTsmMIB 1 }
snmpTsmConformance   OBJECT IDENTIFIER ::= { snmpTsmMIB 2 }

-- -------------------------------------------------------------
-- Objects
-- -------------------------------------------------------------

-- Statistics for the Transport Security Model 


snmpTsmStats         OBJECT IDENTIFIER ::= { snmpTsmMIBObjects 1 }

snmpTsmInvalidCaches OBJECT-TYPE
    SYNTAX       Counter32
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION "The number of incoming messages dropped because the 
                 tmStateReference referred to an invalid cache.
                "
    ::= { snmpTsmStats 1 }

snmpTsmInadequateSecurityLevels OBJECT-TYPE
    SYNTAX       Counter32
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION "The number of incoming messages dropped because
                 the securityLevel asserted by the transport model was 
                 less than the securityLevel requested by the 
                 application.
                "
    ::= { snmpTsmStats 2 }
    
snmpTsmUnknownPrefixes OBJECT-TYPE
    SYNTAX       Counter32
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION "The number of messages dropped because
                 snmpTsmConfigurationUsePrefix was set to true and
                 there is no known prefix for the specified transport
                 domain.
                "
    ::= { snmpTsmStats 3 }

snmpTsmInvalidPrefixes OBJECT-TYPE
    SYNTAX       Counter32
    MAX-ACCESS   read-only
    STATUS       current
    DESCRIPTION "The number of messages dropped because
                 the securityName associated with an outgoing message
                 did not contain a valid transport domain prefix.
                "
    ::= { snmpTsmStats 4 }
     
-- -------------------------------------------------------------
-- Configuration
-- -------------------------------------------------------------

-- Configuration for the Transport Security Model 


snmpTsmConfiguration   OBJECT IDENTIFIER ::= { snmpTsmMIBObjects 2 }

snmpTsmConfigurationUsePrefix OBJECT-TYPE
    SYNTAX      TruthValue
    MAX-ACCESS  read-write
    STATUS      current
    DESCRIPTION "If this object is set to true then securityNames
                 passing to and from the application are expected to
                 contain a transport domain specific prefix. If this
                 object is set to true then a domain specific prefix
                 will be added by the TSM to the securityName for
                 incoming messages and removed from the securityName
                 when processing outgoing messages. Transport domains 
                 and prefixes are maintained in a registry by IANA.
                 This object SHOULD persist across system reboots.
                "
    DEFVAL { false }
    ::= { snmpTsmConfiguration 1 }     

-- -------------------------------------------------------------
-- snmpTsmMIB - Conformance Information
-- -------------------------------------------------------------

snmpTsmCompliances OBJECT IDENTIFIER ::= { snmpTsmConformance 1 }

snmpTsmGroups      OBJECT IDENTIFIER ::= { snmpTsmConformance 2 }

-- -------------------------------------------------------------
-- Compliance statements
-- -------------------------------------------------------------

snmpTsmCompliance MODULE-COMPLIANCE
    STATUS      current
    DESCRIPTION "The compliance statement for SNMP engines that support 
                 the SNMP-TSM-MIB
                "
    MODULE
        MANDATORY-GROUPS { snmpTsmGroup }
    ::= { snmpTsmCompliances 1 }

-- -------------------------------------------------------------
-- Units of conformance
-- -------------------------------------------------------------  
snmpTsmGroup OBJECT-GROUP
    OBJECTS {
        snmpTsmInvalidCaches,
        snmpTsmInadequateSecurityLevels,
        snmpTsmUnknownPrefixes,
        snmpTsmInvalidPrefixes,
        snmpTsmConfigurationUsePrefix
    }
    STATUS      current
    DESCRIPTION "A collection of objects for maintaining 
                 information of an SNMP engine which implements 
                 the SNMP Transport Security Model.
                "

    ::= { snmpTsmGroups 2 }
  

END
  
  ]]></artwork>
      </figure>
    </section>

    <!---->

    <!-- 	***************************************************** 	-->

    <section title="Security Considerations">
      <t>This document describes a Security Model, compatible with
      the RFC3411 architecture, that permits SNMP to utilize
      security services provided through an SNMP Transport Model. The
      Transport Security Model relies on Transport Models for mutual
      authentication, binding of keys, confidentiality and integrity. </t>

      <t>The Transport Security Model relies on secure Transport Models to
      provide an authenticated principal identifier and an assertion of 
      whether authentication and privacy are used during transport. This 
      Security Model SHOULD always be used with Transport
      Models that provide adequate security, but "adequate security" is a 
      configuration and/or 
      run-time decision of the operator or management application. The security 
      threats and how these threats are mitigated
      should be covered in detail in the specifications of the
      Transport Models and the underlying secure transports.</t>
      
      <t>An authenticated principal identifier (securityName) is used in SNMP 
      applications, for purposes such as access control, notification 
      generation, and proxy forwarding. This security model supports multiple transport models. 
      Operators might judge some transports to be more secure than others, 
      so this security model can be configured to prepend a prefix to 
      the securityName to indicate the transport model used to authenticate the
      principal. Operators can use the prefixed securityName when making 
      application decisions about levels of access.</t>

      <section title="MIB module security">
        
      <t>There are a number of management objects defined in this MIB module
      with a MAX-ACCESS clause of read-write and/or read-create. Such objects
      may be considered sensitive or vulnerable in some network environments.
      The support for SET operations in a non-secure environment without
      proper protection can have a negative effect on network operations.
      These are the tables and objects and their
      sensitivity/vulnerability:</t>

      <t><list style="symbols">
          <t>The snmpTsmConfigurationUsePrefix object could be
          modified, creating a denial of service or authorizing
          SNMP messages that would not have previously been authorized
          by an Access Control Model (e.g. the VACM).</t>
        </list></t>

        <t>Some of the readable objects in this MIB module (i.e., objects with
        a MAX-ACCESS other than not-accessible) may be considered sensitive or
        vulnerable in some network environments. It is thus important to
        control even GET and/or NOTIFY access to these objects and possibly to
        even encrypt the values of these objects when sending them over the
        network via SNMP. These are the tables and objects and their
        sensitivity/vulnerability: <list style="symbols">

            <t>All the counters in this module refer to configuration errors and do not expose sensitive information.</t>
          </list></t>

        <t>SNMP versions prior to SNMPv3 did not include adequate security.
        Even if the network itself is secure (for example by using IPsec),
        even then, there is no control as to who on the secure network is
        allowed to access and GET/SET (read/change/create/delete) the objects
        in this MIB module.</t>

        <t>It is RECOMMENDED that implementers consider the security features
        as provided by the SNMPv3 framework (see <xref
        target="RFC3410"></xref> section 8), including full support for the
        USM and Transport Security Model cryptographic mechanisms (for
        authentication and privacy).</t>

        <t>Further, deployment of SNMP versions prior to SNMPv3 is NOT
        RECOMMENDED. Instead, it is RECOMMENDED to deploy SNMPv3 and to enable
        cryptographic security. It is then a customer/operator responsibility
        to ensure that the SNMP entity giving access to an instance of this
        MIB module is properly configured to give access to the objects only
        to those principals (users) that have legitimate rights to indeed GET
        or SET (change/create/delete) them.</t>
      </section>
    </section>

    <!-- 	***************************************************** 	-->

    <section title="IANA Considerations">
      <t>IANA is requested to assign: <list style="numbers">
          <t>an SMI number with a prefix of mib-2, in the MIB module registry under http://www.iana.org/assignments/smi-numbers, for the MIB module in this
          document,</t>

          <t>a value, preferably 4, to identify the Transport Security Model,
          in the Security Models registry at
          http://www.iana.org/assignments/snmp-number-spaces. This should
          result in the following table of values:</t>
        </list></t>

      <figure>
        <artwork><![CDATA[Value   Description                         References
-----   -----------                         ----------
  0     reserved for 'any'                  [RFC3411]
  1     reserved for SNMPv1                 [RFC3411]
  2     reserved for SNMPv2c                [RFC3411]
  3     User-Based Security Model (USM)     [RFC3411]
  YY    Transport Security Model (TSM)      [RFCXXXX]

-- NOTE to RFC editor: replace XXXX with actual RFC number
--                     for this document and remove this note
-- NOTE to RFC editor: replace YY with actual IANA-assigned number, 
                       throughout this document and remove this note.
]]></artwork>
      </figure>
    </section>

    <!-- 	***************************************************** 	-->
    
        <section title="Acknowledgements">
      <t>The editors would like to thank Jeffrey Hutzelman for sharing his SSH
      insights, and Dave Shield for an outstanding job wordsmithing
      the existing document to improve organization and clarity.</t>

      <t>Additionally, helpful document reviews were received from:
      Juergen Schoenwaelder.</t>
    </section>
    
  </middle>

  <back>
    <references title="Normative References">
      &rfc2119;

      &rfc2578;

      &rfc2579;

      &rfc2580;

      &rfc3411;

      &rfc3412;

      &rfc3413;
      
      &rfc3414;

      &I-D.ietf-isms-tmsm;
    </references>

    <references title="Informative References">
      &rfc3410;

      &rfc3415;
      &rfc3418;      
      &rfc3584;
      
      &I-D.ietf-isms-secshell;
    </references>

    <section title="Notification Tables Configuration">
      <t>The SNMP-TARGET-MIB and SNMP-NOTIFICATION-MIB <xref
      target="RFC3413"></xref> are used to configure notification originators
      with the destinations to which notifications should be sent.</t>

      <t>Most of the configuration is security-model-independent and
      transport-model-independent.</t>

      <t>The values we will use in the examples for the five model-independent
      security and transport parameters are: <list>
          <t>transportDomain = snmpSSHDomain</t>

          <t>transportAddress = 192.0.2.1:PPP</t>

          <t>securityModel = Transport Security Model</t>

          <t>securityName = alice</t>

          <t>securityLevel = authPriv</t>
        </list></t>

        <t>[-- NOTE to RFC editor: replace PPP above with actual
        IANA-assigned port number for SNMP notifications over SSH, 
        from draft-ietf-isms-secshell, and remove this note. ]</t>

      <t>The following example will configure the Notification
      Originator to send informs to a Notification Receiver at
      192.0.2.1:PPP using the securityName "alice". "alice" is the
      name for the recipient from the standpoint of the notification
      originator, and is used for processing access controls before
      sending a notification.</t>
      
        <t>[-- NOTE to RFC editor: replace PPP above with actual
        IANA-assigned port number for SNMP notifications over SSH, and
        remove this note. ]</t>

      <t>The columns marked with a "*" are the
      items that are Security Model or Transport Model specific.</t>

      <t>The configuration for the "alice" settings in the
      SNMP-VIEW-BASED-ACM-MIB objects are not shown here for brevity. First we
      configure which type of notification will be sent for this taglist
      (toCRTag). In this example, we choose to send an Inform.</t>

      <figure>
        <artwork><![CDATA[  snmpNotifyTable row:
       snmpNotifyName                 CRNotif
       snmpNotifyTag                  toCRTag 
       snmpNotifyType                 inform
       snmpNotifyStorageType          nonVolatile
       snmpNotifyColumnStatus         createAndGo]]></artwork>
      </figure>

      <t>Then we configure a transport address to which notifications
      associated with this taglist will be sent, and we specify which
      snmpTargetParamsEntry will be used (toCR) when sending to this
      transport address.</t>

      <figure>
        <artwork><![CDATA[       snmpTargetAddrTable row:
          snmpTargetAddrName              toCRAddr 
      *   snmpTargetAddrTDomain           snmpSSHDomain    
      *   snmpTargetAddrTAddress          192.0.2.1:PPP
          snmpTargetAddrTimeout           1500           
          snmpTargetAddrRetryCount        3       
          snmpTargetAddrTagList           toCRTag         
          snmpTargetAddrParams            toCR   (MUST match below) 
          snmpTargetAddrStorageType       nonVolatile
          snmpTargetAddrColumnStatus      createAndGo 

]]></artwork>
      </figure>

        <t>[-- NOTE to RFC editor: replace PPP above with actual
        IANA-assigned port number for SNMP notifications over SSH, and
        remove this note. ]</t>

      <t>Then we configure which principal at the host will receive the
      notifications associated with this taglist. Here we choose "alice",
      who uses the Transport Security Model.</t>

      <figure>
        <artwork><![CDATA[      snmpTargetParamsTable row:
          snmpTargetParamsName            toCR       
          snmpTargetParamsMPModel         SNMPv3     
      *   snmpTargetParamsSecurityModel   TransportSecurityModel       
          snmpTargetParamsSecurityName    "alice"    
          snmpTargetParamsSecurityLevel   authPriv   
          snmpTargetParamsStorageType     nonVolatile
          snmpTargetParamsRowStatus       createAndGo

]]></artwork>
      </figure>

      <t></t>

      <section title="Transport Security Model Processing for Notifications">
        <t>The Transport Security Model is called using the
        generateRequestMsg() ASI, with the following parameters (* are from
        the above tables):</t>

        <figure>
          <artwork><![CDATA[
  statusInformation =                -- success or errorIndication
        generateRequestMsg(
        IN   messageProcessingModel  -- *snmpTargetParamsMPModel
        IN   globalData              -- message header, admin data
        IN   maxMessageSize          -- of the sending SNMP entity
        IN   transportDomain         -- *snmpTargetAddrTDomain
        IN   transportAddress        -- *snmpTargetAddrTAddress
        IN   securityModel           -- *snmpTargetParamsSecurityModel
        IN   securityEngineID        -- immaterial; TSM will ignore.
        IN   securityName            -- snmpTargetParamsSecurityName
        IN   securityLevel           -- *snmpTargetParamsSecurityLevel
        IN   scopedPDU               -- message (plaintext) payload
        OUT  securityParameters      -- filled in by Security Module
        OUT  wholeMsg                -- complete generated message
        OUT  wholeMsgLength          -- length of generated message
        OUT  tmStateReference        -- reference to transport info        
             )
 ]]></artwork>
        </figure>

        <t>The Transport Security Model will determine the Transport Model
        based on the snmpTargetAddrTDomain. The selected Transport Model will
        select the appropriate transport connection using the tmStateReference cache 
        created from the values of snmpTargetAddrTAddress, 
        snmpTargetParamsSecurityName, and
        snmpTargetParamsSecurityLevel.</t>
      </section>
    </section>

    <section title="Processing Differences between USM and Secure Transport">
      <t>USM and secure transports differ in the processing order and
      responsibilities within the RFC3411 architecture. While the steps are
      the same, they occur in a different order, and might be done by different
      subsystems. The following lists illustrate the difference in the flow
      and the responsibility for different processing steps for incoming
      messages when using USM and when using a secure transport. (These lists are simplified for illustrative purposes, and do not
      represent all details of processing. Transport Models MUST provide the
      detailed elements of procedure.)</t>

      <t>With USM, SNMPv1, and SNMPv2c Security Models, security processing starts when
      the Message Processing Model decodes portions of the ASN.1 message to
      extract header fields that are used to determine which Security Model will process 
      the message to perform
      authentication, decryption, timeliness checking, integrity checking, and
      translation of parameters to model-independent parameters. By comparison, a secure
      transport performs those security functions on the message, before the
      ASN.1 is decoded.</t>

      <t>Step 6 cannot occur until after decryption occurs. Step 6 and beyond
      are the same for USM and a secure transport.</t>

      <section title="USM and the RFC3411 Architecture">
        <t><list style="hanging">
            <t hangText="1)">decode the ASN.1 header (Message Processing
            Model)</t>

            <t hangText="2)">determine the SNMP Security Model and parameters
            (Message Processing Model)</t>

            <t hangText="3)">verify securityLevel. [Security Model]</t>

            <t hangText="4)">translate parameters to model-independent
            parameters (Security Model)</t>

            <t hangText="5)">authenticate the principal, check message
            integrity and timeliness, and decrypt the message. [Security
            Model]</t>

            <t hangText="6)">determine the pduType in the decrypted portions
            (Message Processing Model), and</t>

            <t hangText="7)">pass on the decrypted portions with
            model-independent parameters.</t>
          </list></t>
      </section>

      <section title="Transport Subsystem and the RFC3411 Architecture">
        <t><list style="hanging">
            <t hangText="1)">authenticate the principal, check integrity and
            timeliness of the message, and decrypt the message. [Transport
            Model]</t>

            <t hangText="2)">translate parameters to model-independent
            parameters (Transport Model)</t>

            <t hangText="3)">decode the ASN.1 header (Message Processing
            Model)</t>

            <t hangText="4)">determine the SNMP Security Model and parameters
            (Message Processing Model)</t>

            <t hangText="5)">verify securityLevel [Security Model]</t>

            <t hangText="6)">determine the pduType in the decrypted portions
            (Message Processing Model), and</t>

            <t hangText="7)">pass on the decrypted portions with
            model-independent security parameters</t>
          </list></t>

        <t>If a message is secured using a secure transport layer, then the
        Transport Model will provide the translation from the authenticated
        identity (e.g., an SSH user name) to a human-friendly identifier (tmSecurityName) in step 2.
        The security model will provide a mapping from that identifier to a model-independent
        securityName.</t>
      </section>
    </section>

 </back>
</rfc>
<!-- Local Variables:                                           -->
<!-- compile-command: "xml2rfc snmptls.xml"                     -->
<!-- ispell-local-dictionary: "american"                        -->
<!-- sgml-declaration: "/usr/lib/sgml/declaration/xml.decl"     -->
<!-- sgml-omittag:nil                                           -->
<!-- sgml-shorttag:t                                            -->
<!-- sgml-namecase-general:t                                    -->
<!-- sgml-minimize-attributes:nil                               -->
<!-- sgml-always-quote-attributes:t                             -->
<!-- sgml-indent-step:2                                         -->
<!-- sgml-indent-data:t                                         -->
<!-- sgml-parent-document:nil                                   -->
<!-- sgml-exposed-tags:nil                                      -->
<!-- sgml-local-catalogs:nil                                    -->
<!-- sgml-local-ecat-files:nil                                  -->
<!-- End:                                                       -->
