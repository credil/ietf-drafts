<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY __reference.I-D.ietf-fecframe-framework SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-fecframe-framework.xml">
<!ENTITY __reference.I-D.ietf-fecframe-sdp-elements SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-fecframe-sdp-elements.xml">
<!ENTITY __reference.I-D.ietf-fecframe-1d2d-parity-scheme SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-fecframe-1d2d-parity-scheme.xml">
<!ENTITY __reference.I-D.roca-fecframe-rs SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.roca-fecframe-rs.xml">

<!ENTITY __reference.I-D.ietf-fecframe-pseudo-cdp SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-fecframe-pseudo-cdp.xml">
<!ENTITY __reference.I-D.ietf-fecframe-rtp-raptor SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-fecframe-rtp-raptor.xml">

<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc3550 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3550.xml">
<!ENTITY rfc4566 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4566.xml">
<!ENTITY rfc4288 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4288.xml">
<!ENTITY rfc3555 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3555.xml">
<!ENTITY rfc4756 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4756.xml">
<!ENTITY rfc5109 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5109.xml">
<!ENTITY rfc5510 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5510.xml">
<!ENTITY rfc5053 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5053.xml">




]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc='yes'?>
<?rfc symrefs="yes" ?>
<?rfc iprnotified="yes" ?>
<?rfc strict="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc sortrefs="no" ?>
<?rfc colonspace='yes' ?>
<?rfc tocindent='yes' ?>
<rfc category="std" docName="draft-galanos-fecframe-rtp-reedsolomon-00" ipr="trust200902">
  <front>
    <title abbrev="RTP Payload Format for RS FEC">RTP Payload Format for Reed Solomon FEC</title>

    <author fullname="Sarit Galanos" initials="S." surname="Galanos">
      <organization>RADVISION</organization>

      <address>
        <postal>
          <street>24 Raul Wallenberg St.</street>

          <city>Tel Aviv</city>

          <code>69719</code>

          <country>Israel</country>

        </postal>

        <email>sarit@radvision.com</email>
      </address>
    </author>

    <author fullname="Orly Peck" initials="O." surname="Peck">
      <organization>RADVISION</organization>

      <address>
        <postal>
          <street>24 Raul Wallenberg St.</street>

          <city>Tel Aviv</city>

          <code>69719</code>

          <country>Israel</country>

        </postal>

        <email>orlyp@radvision.com</email>
      </address>
    </author>


    <date day="12" month="October" year="2009" />

    <workgroup>FEC Framework</workgroup>

    <abstract>
      <t>
This document defines a new RTP payload format for the Forward Error    Correction (FEC) that uses Reed-Solomon codes.
The format defined by this document enables the protection of source media encapsulated in RTP with one or more repair flows and
is based on the FEC framework (described in [I-D.ietf-fecframe-framework]) and the SDP Elements for FEC Framework 
(described in [I-D.ietf-fecframe-sdp-elements]). The Reed-Solomon codes used in this document belong to the class of 
Maximum Distance Separable (MDS) codes which means they offer optimal protection against random and bursty packet losses.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t> This document defines new RTP payload formats for the Forward Error
   Correction (FEC) that is generated by the Reed-Solomon code.  </t>
    <t>By nature, interactive Real-time applications are extremely sensitive to delay and require very low
   latency.  As a result, retransmission of lost packets and using other
   closed-loop schemes are not valid options while the use of Forward
   Error Correction (FEC) is an effective approach.   </t>
    <t>A primary requirement from FEC for real time applications is the ability to
   correctly recover from both random and bursty packet losses.  The
   Reed-Solomon FEC codes used in this document belong to the class of
   Maximum Distance Separable (MDS) codes that are optimal in terms of
   erasure recovery capability for both situations. </t>  
    <t>The format defined by this document enables the protection of media source flow with
   one or more repair flows without adding additional information to the
   source packets.  Such behavior reduces the delay presented by any FEC
   scheme and maintains backwards compatibility with non FEC-enabled
   receivers.   </t>
   <t>Number of previous drafts were composed to draw different FEC schemes suitable for different applications. 
   The scheme defined in this draft is designed to compensate a burst of packet loss over RTP networks with minimum delay, 
   which is needed in interactive IP-based applications such as video conferencing.</t>
   <t>The method described in this document is generic to all media types and provides the sender with the flexibility of deciding if FEC protection is required and if so, how many protecting packets and how many source packets to use in a block according to network conditions. Furthermore it allows applying unequal error protection that provides different level of protection to different packets. For example, it can be combined with Scalable Video Coding to protect only the base layer packets of the video flow.
   At the receiver, both the FEC and original media are received.  If no media packets are lost, the FEC packets can be ignored.  In the event    of a loss, the FEC packets can be combined with other received media   to recover all or part of the missing media packets. 
   </t>
   
    <t>The Read-Solomon codes used in this document have already
   been specified by Luigi Rizzo (see [Rizzo97]).  The document is
   compliant with the Forward Error Correction (FEC) Framework
   (described in [I-D.ietf-fecframe-framework]) and SDP Elements for FEC
   Framework (described in [I-D.ietf-fecframe-sdp-elements]).      
   This draft completes [I-D.roca-fecframe-rs] by defining Reed-Solomon usage for RTP transport.
    </t>
    </section>

    <section title="Requirements Notation">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref>.</t>
    </section>
  
  
     <section anchor="definitions_notations_abbreviations"
               title="Definitions, Notations and Abbreviations">
        <t>
        This document uses the following definitions and notations. 
        For further definitions that apply to FEC Framework in general, see [I-D.ietf-fecframe-framework]. 
        </t>
        <section anchor="definitions"
               title="Definitions">
	       <t>FEC:  Forward Error Correction.</t>

	        <t>Source Flow:  The packet flow to which FEC protection is to be applied.</t>

	        <t>Repair Flow:  The packet flow carrying FEC data.</t>

	        <t>Source Block:  The group of source data packets which are to be FEC protected as a single block.</t>

	        <t>Source Packets: Packets that are transmitted over a source flow</t>

	        <t>Repair/FEC Packets: Packets that are transmitted over a repair flow</t>
			<t>FEC header: The header information contained in an FEC packet</t>

               
        </section>
        <section anchor="Notations"
	               title="Notations">
	               
	               
	      
			<t>K: The number of packets in a source block</t>
			<t>N-K: The number of repair FEC packets generated from a single source block</t>
         
	               
	</section>       

      </section>

  
  
    <section anchor="reed_solomon_codes"
             title="Reed Solomon Codes">
      <t>
   The detailed operation and theory behind Reed Solomon codes is out of
   the scope of this document.  In general a Reed Solomon code takes a
   group of K source packets and generates N - K repair packets.  A receiver
   needs to receive any K of the N source or repair packets in order to
   recover the remaining N-K packets.  The algorithm operates over multiple
   symbols each taken from a single source packet.  The symbol size can be
   different in different implementations.  Any symbol size can be used
   in the format offered by this document.  However, it is recommended
   for simplicity to use symbol size of 8 bits (byte).  For more  
   information on Reed Solomon codes, the reader is referred to
   [Rizzo97].

   
   </t>
    </section>
    
    
    
    <section anchor="source_block_creation"
                   title="Source Block Creation">
    <t>
   This draft defines the protection of an RTP source flow using one or more FEC repair flows. </t>
    
    
  <t>A source block for the Reed-Solomon code contains K data blocks. In the scheme presented by this document, 
  each data block contains a single RTP packet and therefore a source block contains exactly K consecutive RTP packets. 
  The Reed-Solomon code generates N-K repair blocks that are transmitted using N-K repair packets. 
  Each repair packet contains a single repair block.
  Such behavior is most suitable for packet-switched networks where errors are on packet boundaries </t>
  <t>To create a source block the steps outlined below should be followed.</t>
     <t>
      <list style="numbers">
      	<t>For each packet protected in this source block create a byte array as follows:


  	  
  	<list style="letters">
  			<t>In the first two bytes place the unsigned network-ordered 16-bit representation of the 
						RTP packet size in bytes (including RTP header size and payload size)</t>
			  			<t>Append the entire RTP packet including its RTP header</t>
			  			<t>Add padding (bytes containing binary zeroes) so that the byte array is the size of the largest 
						packet protected by this source block including the two bytes from section A 
  						(the largest packet does not contain zero padding).</t>
  	</list>
  	
	</t>

 	<t>Append all the byte arrays one after the other in the following way:
 	
 	  	<list style="letters">
	  			<t>The packets are in an increasing order of the sequence number as it appears in the RTP packet header 
				   taking wraparound into account</t>
	  			<t>The sequence number of the source packets must be consecutive in a source block.</t>
	  	</list>

 	</t>
 	
 	
 	
       </list>
      </t>





    <t>Figure 1 demonstrates how a source block is created from 4 packets (P1, P2, P3, P4) with different sizes. 
	The largest packet protected in this source block has the size of 5 (L=5) and therefore P1 and P3 are both padded with zeros to this size. 
	The source block contains the RTP packet size before each packet. (Note that this example is not a binary representation 
	of the source block. The Packet size spans over two bytes as stated above)</t>
  <figure anchor="sb_structure" title="Structure of a Source Block">
  <artwork>  

         P1          P2            P3            P4   
         L=3         L=5           L=4           L=5

         +---+       +-----+       +----+      +-----+
         |xxx|       |xxxxx|       |xxxx|      |xxxxx|       
         +---+       +-----+       +----+      +-----+
         
                  |--- Source Block (K=4)-----|
         
                  +------+------+------+------+
                  |3xxx00|5xxxxx|4xxxx0|5xxxxx|
                  +------+------+------+------+
  </artwork>
  </figure>


 <t>The FEC Reed-Solomon Scheme gets a source block created from K packets and generates N-K FEC repair packets 
 that protect the entire source block. These packets are then transmitted in the repair flow. Note that source packets padding is done 
 only for FEC packet calculation and the original payloads are transmitted without extra padding.</t>





    </section>
    

   <section anchor="packet_formats"
                   title="Packet Formats">
    <t>This section defines the formats of the source and repair packets</t>
     <section anchor="source_packets"
                   title="Source Packets">
	<t>The FEC Framework requires that source packets contain information identifying the source block 
	and the position within the source block occupied by the packet. However, in order to maintain backwards compatibility, 
	the scheme defined by this document enables the receiver to get this information without appending additional information 
	to the source packet. Specifically this information is obtained using the combination of sequence number found in the RTP
	header and information provided in the FEC header of each repair packet. Such behavior enables both non-FEC-capable and 
	FEC-capable receivers to receive and interpret the same source packets sent in a multicast session.</t>
    </section>
    
         <section anchor="repair_packets"
                       title="Repair Packets">
      <t>The FEC repair packets contain information that enables the receiver to reconstruct the source block in the remote end. 
	  This is done by using the RTP header of the repair packets as well as another header that is placed within the RTP payload. 
	  This header, referred to as the FEC header, complies with [FECFRAME-FRAMEWORK] (section 6.4.1), as shown in Figure 2.</t>
  <figure anchor="repair_packets_format" title="Format of repair packets">
  <artwork>  
       
             +------------------------------+
             |          IP Header           |
             +------------------------------+
             |       Transport Header       |
             +------------------------------+
             |          RTP Header          |
             +------------------------------+ --_
             |          FEC Header          |    \
             +------------------------------+     > RTP Payload
             |        Repair Data           |   _/
             +------------------------------+ --

  </artwork>
  </figure>

         <section anchor="rtp_header_format"
                       title="RTP header format">
                       
    <t>The RTP header is formatted according to [RFC3550] with some further clarifications listed below:    </t>
        <t>
      <list style="symbols">
 
    <t>	Marker (M) Bit:  This bit is not used for this payload type, and is set to 0.</t>
    <t>	Payload Type:  The (dynamic) payload type for the repair packets is determined through out-of-band means. Note that this document      registers new payload formats for the repair packets (Refer to      Section 5 for details).  According to [RFC3550], an RTP receiver      that cannot recognize a payload type must discard it.  This      provides for backward compatibility.  The FEC mechanisms can then be      used in a multicast group with mixed FEC-capable and non-FEC-      capable receivers.  If a non-FEC-capable receiver receives a      repair packet, it will not recognize the payload type, and hence,      will discard the repair packet.</t>
    <t>	Sequence Number (SN):  The sequence number maintains the standard definition.  It is one higher than the sequence number in the previously transmitted repair packet.  The initial value of the sequence number is random (unpredictable) [RFC3550].</t>
    <t>	Timestamp (TS):  The timestamp is set to a time corresponding to the repair packet's transmission time.  Note that the timestamp value has no use in the actual FEC protection process and is usually useful for jitter calculations. FEC packets that are the result of the same FEC operation will use the same value as their Timestamp.</t>
    <t>	Synchronization Source (SSRC):  The SSRC value is randomly assigned as suggested by [RFC3550].</t>

    
    </list>
    </t>
        
        
        </section>
	 <section anchor="fec_header_format"
		       title="FEC header format">

	<t>The FEC header includes information that enables the receiver to reconstruct the source block and to identify 
	the repair packets associated with each source block in their correct order. </t>
	<t>The format of the FEC header is shown in figure 3.</t>
	
	  <figure anchor="FEC_header_format" title="FEC Header Format">
	  <artwork>  
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    N-K        |       i       |        SN Base                | 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   	   Num Packets          |	Reserved		|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

	  </artwork>
	  </figure>

<t>The FEC header consists of the following general fields:</t>
<t>
<list style="symbols">
       <t>	N-K - The number of FEC packets used to protect this source block </t>
       <t>	i - 0 based packet index in the N-K FEC packets sequence. </t>
       <t>	SN Base - the lowest sequence number (taking wraparound into account) of the source packets protected by this repair packet. </t>
       <t>	Num Packets - The number of consecutive source packets protected by this repair packet.</t>
       <t> 	Reserved - for future use. </t>
</list>
</t>
 
</section>

<section anchor="repair_data_format" title="Repair Data Format">

<t>The repair data follows the FEC header in the RTP repair packet. It includes the result of the Reed-Solomon code over 
the source block. Note that the first two bytes of the repair data contain the result of the Reed-Solomon code over 
the packet sizes in the source block and that the size of the repair data equals the size of the largest packet protected 
by this source block plus 2. Therefore, the size of an FEC packet (FEC header and data) is larger than the longest source packet.
This should be taken under consideration when deciding on the Maximum Transmission Unit size used for the source packets.</t>
</section>

</section>

</section>
 
<section anchor="payload_formats_parameters" title="Payload Format Parameters">
<t>According to the FEC framework, when RTP is used as a transport for repair packet flows, 
the scheme must define an RTP Payload Format for the repair data. 
This section provides the media subtype registration for the Reed-Solomon FEC.  
The parameters that are required to configure the FEC encoding and decoding operations are also defined in this section.</t>

<section anchor="media_type_reg" title="Media Type Registration">
<t>This registration is done using the template defined in [RFC4288] and   following the guidance provided in [RFC3555].</t>

<section anchor="reg_audio_reed-solomon-fec" title="Registration of audio/reed-solomon-fec">

<t>Type name:  audio</t>

<t>Subtype name:  reed-solomon-fec</t>

<t>Required parameters: </t>
<t>
<list style="symbols">
	<t>max_N:  The upper limit for the sum of source and repair packets that belong to the same FEC block. max_N is a positive integer. 
	   The application can change both K and N-K. max_N is the upper limit for N.</t>
    <t>	repair-window:  The time that spans the source packets and the corresponding repair packets.  
	    The size of the repair window is specified in microseconds.</t>
    <t>symbol-size: a non-negative integer indicating the length of each encoding symbol in bits.</t> 
</list>
</t>


<t>Optional parameters:  None.</t>

<t>Encoding considerations: This media type is framed and binary, see
   section 4.8 in [RFC4288]</t>

<t>Security considerations: Please see security consideration in
   [I-D.ietf-fecframe-framework]</t>


<t>Interoperability considerations: None.</t>

<t>Published specification: TBD</t>

<t>Applications that use this media type: Multimedia applications that   want to improve resiliency against packet loss by sending redundant   data in addition to the source media.</t>

<t>Additional information: None.</t>

<t>Magic number(s): none defined</t>

<t>File extension(s): none defined</t>

<t>Macintosh file type code(s): none defined</t>

<t>Person & email address to contact for further information: Sarit Galanos, sarit@radvision.com</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: This media type depends on RTP framing, and
   hence is only defined for transfer via RTP [RFC3550].  Transport
   within other framing protocols is not defined at this time.</t>
</section>

<section anchor="reg_video_reed-solomon-fec" title="Registration of video/reed-solomon-fec">
<t>Type name:  video</t>

<t>Subtype name:  reed-solomon-fec</t>

<t>Required parameters: </t>
<t>
<list style="symbols">
	<t>max_N:  The maximum number summing of source and FEC packets. max_N is a positive integer. 
	   The application can change both K and N-K. max_N is the upper limit for N.</t>
    <t>	repair-window:  The time that spans the source packets and the corresponding repair packets.  
	    The size of the repair window is specified in microseconds.</t>
    <t>symbol-size: a non-negative integer indicating the length of each encoding symbol in bits.</t>
</list>
</t>


<t>Optional parameters:  None.</t>

<t>Encoding considerations: This media type is framed and binary, see
   section 4.8 in [RFC4288]</t>

<t>Security considerations: Please see security consideration in
   [I-D.ietf-fecframe-framework]</t>

<t>Interoperability considerations: None.</t>

<t>Published specification: TBD</t>

<t>Applications that use this media type: Multimedia applications that   want to improve resiliency against packet loss by sending redundant   data in addition to the source media.</t>

<t>Additional information: None.</t>

<t>Magic number(s): none defined</t>

<t>File extension(s): none defined</t>

<t>Macintosh file type code(s): none defined</t>

<t>Person & email address to contact for further information: Sarit Galanos, sarit@radvision.com</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: This media type depends on RTP framing, and
   hence is only defined for transfer via RTP [RFC3550].  Transport
   within other framing protocols is not defined at this time.</t>

</section>

<section anchor="reg_text_reed-solomon-fec" title="Registration of text/reed-solomon-fec">
<t>Type name:  text</t>

<t>Subtype name:  reed-solomon-fec</t>

<t>Required parameters: </t>
<t>
<list style="symbols">
	<t>max_N:  The maximum number summing of source and FEC packets. max_N is a positive integer. 
	   The application can change both K and N-K. max_N is the upper limit for N.</t>
    <t>	repair-window:  The time that spans the source packets and the corresponding repair packets.  
	    The size of the repair window is specified in microseconds.</t>
    <t>symbol-size: a non-negative integer indicating the length of each encoding symbol in bits.</t>
</list>
</t>


<t>Optional parameters:  None.</t>

<t>Encoding considerations: This media type is framed and binary, see
   section 4.8 in [RFC4288]</t>

<t>Security considerations: Please see security consideration in
   [I-D.ietf-fecframe-framework]</t>

<t>Interoperability considerations: None.</t>

<t>Published specification: TBD</t>

<t>Applications that use this media type: Multimedia applications that   want to improve resiliency against packet loss by sending redundant   data in addition to the source media.</t>

<t>Additional information: None.</t>

<t>Magic number(s): none defined</t>

<t>File extension(s): none defined</t>

<t>Macintosh file type code(s): none defined</t>

<t>Person & email address to contact for further information: Sarit Galanos, sarit@radvision.com</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: This media type depends on RTP framing, and
   hence is only defined for transfer via RTP [RFC3550].  Transport
   within other framing protocols is not defined at this time.</t>

</section>

<section anchor="reg_application_reed-solomon-fec" title="Registration of application/reed-solomon-fec">
<t>Type name:  application</t>

<t>Subtype name:  reed-solomon-fec</t>

<t>Required parameters: </t>
<t>
<list style="symbols">
	<t>max_N:  The maximum number summing of source and FEC packets. max_N is a positive integer. 
	   The application can change both K and N-K. max_N is the upper limit for N.</t>
    <t>	repair-window:  The time that spans the source packets and the corresponding repair packets.  
	    The size of the repair window is specified in microseconds.</t>
    <t>symbol-size: a non-negative integer indicating the length of each encoding symbol in bits.</t>
</list>
</t>


<t>Optional parameters:  None.</t>

<t>Encoding considerations: This media type is framed and binary, see
   section 4.8 in [RFC4288]</t>

<t>Security considerations: Please see security consideration in
   [I-D.ietf-fecframe-framework]</t>

<t>Interoperability considerations: None.</t>

<t>Published specification: TBD</t>

<t>Applications that use this media type: Multimedia applications that   want to improve resiliency against packet loss by sending redundant   data in addition to the source media.</t>

<t>Additional information: None.</t>

<t>Magic number(s): none defined</t>

<t>File extension(s): none defined</t>

<t>Macintosh file type code(s): none defined</t>

<t>Person & email address to contact for further information: Sarit Galanos, sarit@radvision.com</t>

<t>Intended usage: COMMON</t>

<t>Restrictions on usage: This media type depends on RTP framing, and
   hence is only defined for transfer via RTP [RFC3550].  Transport
   within other framing protocols is not defined at this time.</t>

</section>
</section>



<section anchor="mapping_of_SDP_parameters" title="Mapping of SDP Parameters">
<t>For a proper operation details of the FEC scheme have to be communicated between the sender and the receiver. 
Specifically, the receiver has to know the relationship between the source and the repair flows, how the sender 
applied protection to the source flow and how the repair flows can be used to recover the lost data. One way to provide 
this information is to use the Session Description Protocol (SDP) [RFC4566].  </t>
<t>The mapping of the media type specification for "reed-solomon-fec" and their parameters in SDP is as follows:</t>
<t>
<list style="symbols">
   <t>  The media type (e.g., "application") goes into the "m=" line as
      the media name.</t>

   <t>  The media subtype ("reed-solomon-fec") goes into the "a=rtpmap" line as the encoding
      name.  </t>

   <t>  The remaining required payload-format-specific parameters ("max_N", "repair-window") go into
      the "a=fmtp" line by copying them directly from the media type
      string as a semicolon-separated list of parameter=value pairs.</t>

</list>
</t>
<t>See section 9 for SDP examples.</t>

</section>
</section>
    
    
<section anchor="protection_recovery_procedures"  title="Protection and Recovery Procedures">
<t>This section provides a complete specification of the protection and recovery procedures.</t>
<section anchor="overview"  title="Overview">
<t>The FEC packets allow end-systems to recover from a loss of media   packets. 
The following sections specify the steps involved in generating the repair packets and reconstructing the
 missing source packets from the repair packets.</t>
</section>

<section anchor="repair_packet_construction"  title="Repair Packet Construction">
<t>The RTP header of a repair packet is formed based on the guidelines   given in Section 6.2.1. The FEC header is 
formed based on the guidelines   given in Section 6.2.2. The repair data is then appended to the FEC header. 
The repair data is the direct output of the protection operation calculated on the source block with Reed-Solomon code. 
Note that the repair data calculated over K source packets will span over N-K packets.</t>
</section>

<section anchor="source_packet_reconstruction"  title="Source Packet Reconstruction">
<t>Recovery requires two distinct operations.  The first determines which packets (media and FEC) must be 
   combined in order to recover the   missing packets.  Once this is done, the second step is 
   the reconstruction of the missing data.</t> 
<section anchor="associating_source_and_repair_packets"  title="Associating the Source and Repair Packets">
<t>Association of the Source and Repair packets is done using a combination of the Source packet sequence 
number and the information found in the RTP header and the FEC header of the repair packets.
The first step is to accumulate the N-K repair packets that were generated in the protection operation. 
For that the application has to follow the steps listed below:
</t>
<t>
<list style="symbols">
<t>	For each received packet, retrieve the payload type parameter from the RTP header to identify the packet as a 
repair packet of the reed-solomon scheme.</t>
<t>	Once a repair packet has been identified, retrieve the sequence number from the RTP header and the 
N-K and i parameters from the FEC header.</t>
<t>	With these parameters, identify the collection of FEC packets generated for the source block. 
For example, if N-K=4, i=2 and the sequence number is 1003, it means that 4 packets with sequence numbers 
1001,1002,1003 and 1004 were generated for a specific source block.</t>
</list>
</t>
<t>The next step is to use the SN Base and Num Packets parameters from the FEC header to identify 
the packets that constructed the source block.</t>

</section>

<section anchor="recovering_the_source_packet"  title="Recovering the source packet">
<t>In order to recover the  lost packets the application has to rebuild the source block according to the 
guidelines given in section 5 and append the repair data to it in the correct order. 
Zero padding will replace the lost packets in the constructed source block. The size of each source block data packet in 
bytes will be equal to the size of the repair data found in the repair packets. The repair data size is the size of the RTP payload 
in the repair packet without the FEC header information (see figure 2). The application will then append the repair data taken 
from each repair packet. This new block is provided to the Reed-Solomon code.</t>
<t>Reconstruction of lost packets (source or repair packets) is possible only if at least any K packets were received (source or repair packets).</t>

<t>The Reed-Solomon code will reconstruct the lost data into the provided source block overriding 
the zero padded blocks. The application can then recover the lost packets as follows:</t>
<t>
<list style="symbols">
<t>	The first two bytes specify the RTP packet size.</t>
<t>	According to the RTP packet size the application can retrieve the RTP packet (RTP header and payload).</t>
<t>	Any extra padding bytes if exist are ignored. </t>

</list>
</t>


</section>






</section>

</section>
   
    <section anchor="sdp_examples"
                       title="SDP Examples">
    <t>The following example demonstrates source flow with flow ID of 0 that is protected by a single repair flow R1.</t>
<figure anchor="xml_example">
<artwork>  
v=0
o=sarit 1122334455 1122334466 IN IP4 fec.example.com
s= Reed Solomon FEC Example
t=0 0
a=group:FEC S1 R1
m=video 30000 RTP/AVP 100
c=IN IP4 224.1.1.1/127
a=rtpmap:100 MP2T/90000
a=fec-source-flow: id=0
a=mid:S1
m=application 30000 RTP/AVP 110 
c=IN IP4 224.1.2.1/127 
a=rtpmap:110 reed-solomon-fec /90000 
a=fmtp:110 max_N:5; repair-window:200000; symbol-size:8
a=mid:R1 
</artwork>    
</figure>

    </section>
     
 
    <section anchor="offer_answer_considerations"
                       title="Offer/Answer considerations">
    <t>None.</t>
    </section>
     
         

    <section anchor="sec_security_considerations"
             title="Security Considerations">
      <t>   See [I-D.ietf-fecframe-framework]</t>
    </section>

    <section title="IANA Considerations">
      <t>   New media subtypes are subject to IANA registration.  For the
   registration of the payload formats and their parameters introduced
   in this document, refer to Section 7.
</t>
    </section>

    <section title="Acknowledgments">
      <t>Some parts of this document are borrowed from the following documents: [RFC5109], 
      [draft-ietf-fecframe-1d2d-parity-scheme-01], [draft-roca-fecframe-rs-00], [draft-ietf-avt-reedsolomon-00].  
      The author would like to thank the editors of these documents.
      The authors would also like to thank the members of the FP7 3DPresence project consortium for their contribution to this draft writing. </t>
    </section>
  </middle>

  <back>
	<references title="Normative References">
       &rfc2119;
       &rfc3550;
       &rfc4566;
       &rfc4288;
       &rfc3555;
       &rfc4756;

	</references>
   
   <references title="Informative References">
		&__reference.I-D.ietf-fecframe-1d2d-parity-scheme;
		&rfc5109;
		<reference anchor='I-D.ietf-avt-reedsolomon'>
			<front>
			  <title>An RTP Payload Format for Reed Solomon Codes</title>
			  <author initials='J.' surname='Rosenberg'>
			  <organization abbrev=''> </organization>
			 </author>
			 
			 <date month='May' year='1999' />
			</front>
		</reference>
		 <reference anchor='Rizzo97'>
        <front>
            <title>Effective Erasure Codes for Reliable Computer Communication Protocols</title>
            <author initials='L.' surname='Rizzo'>
            <organization abbrev=''> </organization>
           </author>
           <date month='April' year='1997' />
       </front>
    </reference>

    	&rfc5510;
	       &__reference.I-D.ietf-fecframe-framework;
	       &__reference.I-D.ietf-fecframe-sdp-elements;
		&__reference.I-D.roca-fecframe-rs;
		&__reference.I-D.ietf-fecframe-pseudo-cdp;
		&__reference.I-D.ietf-fecframe-rtp-raptor;
		&rfc5053;
    </references>
	
    
  </back>
</rfc>
