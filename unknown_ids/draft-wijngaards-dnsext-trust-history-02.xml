<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="no"?>
<?rfc tocompact="no"?>
<?rfc tocdepth="6"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc strict="yes"?>
<rfc ipr="trust200902" category="std" docName="draft-wijngaards-dnsext-trust-history-02">
<front>
<title abbrev="Trust History Service"> DNSSEC Trust Anchor History Service </title>

        <author fullname="Wouter Wijngaards" initials="W.C.A." surname="Wijngaards">
                <organization> NLnet Labs </organization>
                <address>
                        <postal>
                                <street>Science Park 140</street>
                                <code>1098 XG</code>
                                <city>Amsterdam</city>
                                <country>The Netherlands</country>
                        </postal>
                        <phone>+31-20-888-4551</phone>
                        <email> wouter@nlnetlabs.nl </email>
                </address>
        </author>

<date month="March" year="2009"/>
<area> Internet Area </area>
<workgroup> DNS Extensions Working Group </workgroup>
<keyword>DNS</keyword>
<keyword>DNSSEC</keyword>
<keyword>DNSKEY</keyword>
<keyword>history</keyword>
<keyword>rollover</keyword>
<keyword>trust anchor</keyword>

<abstract><t> When DNS validators have trusted keys, but have been
offline for a longer period, key rollover will fail and they are stuck
with stale trust anchors.  History service allows validators to query for
older DNSKEY RRsets and pick up the rollover trail where they left off.
</t></abstract>

<note title="Requirements Language">
<t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, 
&quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;,
&quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;,
&quot;MAY&quot;, and &quot;OPTIONAL&quot; in this document are to be
interpreted as described in  <xref target="RFC2119">RFC 2119</xref>.</t>
</note>

</front>
<middle>
<section title="Introduction">

<t> DNSSEC <xref target="RFC4034" /> validators that have been offline
of have missed an (emergency) rollover can use trust history service
to get back on track.  The trust history location is assumed available
from the validator configuration. The validator then fetches old DNSKEY
RRsets and checks they form a chain to the latest key. </t>

<t> Providers of trust history can fetch the DNSKEY data as published by
the zone they track, and copy-and-paste it.  They need not sign nor hold
private keys safe.  The algorithms for this are explained below.  </t>

</section>

<section title="Trust History Lookup">

<t> The algorithm is in steps. </t>

<t> Step 1. The validator performs a DNSKEY lookup to the target zone,
which looks like any other initial DNSKEY lookup for a trust anchor.
If the keyset verifies with the trust anchor currently held, the keyset
already works. Otherwise, store this result, the further algorithm either
ends with this result or fails. </t>

<t> Step 2. Fetch the trust history list end points.  Query type PTR to
the location configured for trust history. </t>

<t> Step 3. Go backwards through the trust history list.  Verify that the
keyset validly signs the next keyset.  This is <xref target="RFC4034" />
validation, but the RRSIG expiration date is ignored.  Replace the owner
domain name of the DNSKEY with the target zone name for verification.
Query type PTR to get previous and next locations. </t>

<t> Step 4. When the trust anchor currently held by the validator verifies
the keyset, the algorithm is done.  The initial DNSKEY from Step 1 is the
result. Use it as the new trust anchor (if using <xref target="RFC5011"
/>, put it in state VALID).  The validator SHOULD store the new trust
anchor on stable storage. </t>

</section>

<section title="Trust History Tracker">

<t> The tracker polls the target zone DNSKEY RRset from cron.  Ignore
date changes in the RRSIG.  If the tracker knows that the zone performs
responsible prepublish KSK rollovers <xref target="RFC4641" /> then also
ZSK changes can be ignored. </t>

<t> Copy the newly polled DNSKEY RRset and RRSIGs, change the owner
name to "h%d.example" or similar. With %d a new number, and .example the
history location.  Publish the new RRset. Publish PTR records that link
list elements.  Update PTR records for the list start and end. </t>

<t> The list is a double linked list, because this empowers low memory
hosts to perform consistency checks.  Thus if there is x.example PTR
y.example then there MUST be y.example PTR x.example.  Except at start
and end of list. </t>

<t> To find the start of the list, it MUST be a name before the end of the
list in canonical comparison ordering (<xref target="RFC4034" />). With
exactly one list element, one PTR record points to both start and end.</t>

</section>

<section title="Example">

<t> In this example tuhi.example.com provides trust history for
example.net. The DNSKEY rdata and RRSIG rdata is omitted for brevity,
it is a literal copy and paste of the data from example.net. </t>

<t>
<figure>
<preamble></preamble><artwork>$ORIGIN tuhi.example.com.
@ PTR h0
@ PTR h2

h0 PTR h1
h0 DNSKEY ...
h0 RRSIG ...

h1 PTR h2
h1 PTR h0
h1 DNSKEY ...
h1 RRSIG ...

h2 DNSKEY ...
h2 RRSIG ...
h2 PTR h1
</artwork><postamble></postamble>
</figure>
</t>
</section>

<section anchor="Security" title="Security Considerations">

<t> The trust history tracker only provides a cached copy of old data.
The history data can be altered or withheld; the lookup algorithm then
fails. </t>

<t> Ultimately the security depends on the key that the validator is
holding, and the keys in the chain up to the present.  If the old key
held by the validator is too old, the validator MAY not accept this risk,
and then SHOULD perform out of band key priming. </t>

<t> The algorithm looks up the initial DNSKEY like other validators do,
and then walks the history in reverse.  This avoids exposing the validator
on the network as a host with an older key and the key id. </t>

<t> Validators can (OPTIONAL) examine RRSIG dates. To account for clock
skew padding by the target zone, the middle of the inception and expiration
date SHOULD be used, if consistency checks are done. </t>

<t> The algorithm can be abused to provide a secure method to get (close
to) the current month or year. Validators without clock then know the
date that validates signatures currently in use by the zone.  </t>

</section>

<section anchor="IANA" title="IANA Considerations">

<t>-</t>

</section>

</middle>

<back>
        <references title="Informative References">
                <?rfc include="reference.RFC.4641" ?>
                <?rfc include="reference.RFC.5011" ?>
        </references>
        <references title="Normative References">
                <?rfc include="reference.RFC.2119" ?>
                <?rfc include="reference.RFC.4034" ?>
        </references>
</back>
</rfc>
