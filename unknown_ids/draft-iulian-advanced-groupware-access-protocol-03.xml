<?xml version="1.0"?>

<!--
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
<!ENTITY RFC2821 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2821.xml">
<!ENTITY RFC5545 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5545.xml">
<!ENTITY RFC3921 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3921.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY RFC1952 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1952.xml">
<!ENTITY I-D.daboo-et-al-icalendar-in-xml SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-daboo-et-al-icalendar-in-xml-08.xml">
<!ENTITY I-D.ietf-vcarddav-vcardxml SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-vcarddav-vcardxml.xml">
]>
-->

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt'?>
<?rfc strict="no"?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc tocindent="no"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc category="info" docName="draft-iulian-advanced-groupware-access-protocol-03" ipr="trust200902"
    obsoletes="" updates="" submissionType="IETF" xml:lang="en">
  <!--  ***** FRONT MATTER *****  -->
  <front>
    <title abbrev="AGAP">Advanced Groupware Access Protocol</title>
    <author fullname="Iulian Radu" initials="I.R." role="editor" surname="Radu">
      <organization/>
      <address>
        <email>iulian.radu@gmx.at</email>
      </address>
    </author>
    <date year="2011"/>
    <!--  Meta-data Declarations  -->

    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>AGAP</keyword>
    <keyword>Groupware Access Protocol</keyword>
    <keyword>Advanced Groupware Access Protocol</keyword>
    <abstract>
      <t>The Advanced Groupware Access Protocol, (AGAP) allows a client to access 
 and store electronic mail messages, contacts, events, files, and configurations
 on a server. The electronic mail messages can be grouped in folders. AGAP also 
 provides the capability for an offline client to resynchronize with the server.</t>
      <t>AGAP does not specify a means of posting electronic mail messages; 
 this function is handled by a mail transfer protocol such as
 <xref target="RFC2821">SMTP</xref>. It also does not specify a means for 
 exchanging messages with contacts that are reported as being online; this 
 function is handled by an instant messaging protocol such as 
 <xref target="RFC3921">XMPP</xref>.</t>
      <t>AGAP includes the following operations for electronic mail messages: 
 creating, deleting, renaming, moving and coping mail folders; checking for new 
 messages; permanently removing messages; moving and coping messages between 
 folders; fetching information about a message; setting and clearing tags for 
 messages; searching in messages; retrieving only a part of a message; 
 marking messages as SPAM; deleting attachments from a message.</t>
      <t>AGAP includes the following operations to manipulate the contacts: 
 creating, deleting, moving, coping, tagging, and searching contacts; checking if 
 a contact is online; fetching information about a contact.</t>
      <t>AGAP includes the following operations related to the use of the 
 events: creating, deleting, moving, coping and tagging events in
 calendar; fetching events details; searching for events.</t>
      <t>All entries are read and written in format XML encoded <xref target="RFC3629">UTF-8</xref>
 and each entry is identified by a unique alphanumeric identifier.</t>
      <t>AGAP is designed to support access only to a single server per 
 connection. It is also designed to balance the volume of text exchanged between 
 the server and clients and its readability by humans for debugging.</t>
    </abstract>
  </front>
  <!--   ***** MIDDLE MATTER *****  -->
  <middle>
    <section title="How to Read This Document" toc="default">
      <section title="Organization of This Document" toc="default">
        <t>This document is written from the point of view of someone 
 implementing an AGAP client or server, and also from the point of view
 of a server administrator. The protocol overview (chapter 2) presents 
 all aspects related to a correct implementation (like the maximum
 length of a command or response line, charset used). The material in 
 chapter 3 through 5 provides the states in which can be a connection
 at a moment, respectively what commands are valid in each state and their
 valid responses. Chapter 6 makes a summary of the return codes for each command.
 The implementers find in chapter 7 samples of conversations so that they can
 test the compliance of their applications with this standard.</t>
      </section>
      <section title="Conventions Used in This Document" toc="default">
        <t>Document conventions are noted in this chapter.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT","MAY", and "OPTIONAL" in this document are to be interpreted as
described in <xref target="RFC2119">'Key words for use in RFCs to Indicate Requirement
Levels'</xref>. The word "CAN" (not "MAY") is used to refer to a possible 
 circumstance or situation, as opposed to an optional facility of the protocol.</t>
        <t>"User" is used to refer to a human user. "Client" refers to the 
 software being run by the user. "Server" refers to the software responding to the
 client requests. In examples, "C:" and "S:" indicate lines sent by the client
 and server respectively. "Connection" refers to the entire sequence of 
 client/server interaction from the initial establishment of the network 
 connection until its termination. "Conversation" is an exchange of commands
 and responses between the client and the server. "Account" defines all folders and
 their content that can be accessed from Authenticated State. All references to
 characters order is according to the <xref target="RFC3629">UTF-8</xref>
 specification.</t>
      </section>
    </section>
    <section title="Protocol Overview" toc="default">
      <section title="Charset Used for Commands and Responses" toc="default">
        <t>All data exchanged between the server and the client is done using 
 strings encoded <xref target="RFC3629">UTF-8</xref>. If the server or client 
 send a string incorrect encoded then the other side can close immediately 
 the connection.</t>
      </section>
      <section title="Maximal Length of a Command or Response Line" toc="default">
        <t>A command or response consists of a line of text that has a maximal length of 
 1024 characters (including line end). A line of text is ended with the character LF 
 (0x0A). There can be optionally a CR character (0x0D) before the LF character.
 If the server or client sends a line with a length greater of 1024 then the other
 side can close immediately the connection.</t>
      </section>
      <section title="Numbers in Commands and Responses" toc="default">
        <t>The numbers that are used in commands are signed integers on 32 bits.
        The valid values are between -2,147,483,648 and 2,147,483,647.</t>
      </section>
      <section title="Regular Expressions in Commands" toc="default">
        <t>Following is a resume of all regular expression rules that CAN be
        used by the commands defined in this standard:
            <figure align="center" anchor="Regex">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
    Logical operators:
XY       X followed by Y
X|Y      Either X or Y
 
    Predefined character class:
.        Any character (does not match line terminators)
 
    Characters:
x        The character x
\\       The backslash character
\xhh     The character with hexadecimal value 0xhh
\uhhhh   The character with hexadecimal value 0xhhhh
\t       The tab character ('\x09')
\n       The newline (line feed) character ('\x0A')
\r       The carriage-return character ('\x0D')
 
    Character classes:
[abc]     a, b, or c (simple class)
[^abc]    Any character except a, b, or c (negation)
[a-zA-Z]  a through z or A through Z, inclusive (range)
 
    Boundary matchers:
^        The beginning of a line
$        The end of a line
\b       A word boundary
\B       A non-word boundary
 
    Greedy quantifiers:
X?       X, once or not at all
X*       X, zero or more times
X+       X, one or more times
X{n}     X, exactly n times
X{n,}    X, at least n times
X{n,m}   X, at least n but not more than m times
 
    Reluctant quantifiers:
X??      X, once or not at all
X*?      X, zero or more times
X+?      X, one or more times
X{n}?    X, exactly n times
X{n,}?   X, at least n times
X{n,m}?  X, at least n but not more than m times
              ]]></artwork>
              <postamble></postamble>
            </figure>
        </t>
      </section>
      <section title="Unique Identification Numbers" toc="default">
        <t>The length of an UID is between 1 and 32 characters.</t>
        <t>The UIDs MUST to be unique only between entries from the same folder.</t>
        <t>The characters accepted for building an UID are only
        all 26 Latin letters (A-Z) in lowercase and uppercase and all 
        10 Latin digits (0-9). An UID is case sensitive and it is valid only
        for the current connection (the same message/contact/event CAN have 
        different UIDs for different client connections).</t>
        <t>Any new message/contact/event MUST have a bigger UID as all
        other existing entries in the selected folder.
        The sorting is made according <xref target="RFC3629">UTF-8</xref> (digits before 
        letters and uppercase letters before the lowercase letters - 0..9A..Za..z). A
        short UID is before a longer one (9234 before 02345) and any zero (0) before a
        number is take into account by the server when two UIDs are compared.</t>
        <t>We get an approximately maximum number of 4.50+e+17 unique combinations
        for 32 characters long UIDs. We get a maximum number of 3381098545
        unique combinations for 8 characters long UIDs .</t>
      </section>
      <section title="Folders" toc="default">
        <section title="Naming" toc="default">
          <t>All folder names are case sensitive and they are encoded according to
          <xref target="RFC3629">UTF-8</xref>.</t>
          <t>A backslash (\) does not escape the character after it (it has no special meaning).</t>
          <t>For building a folder name, the user CAN use all <xref target="RFC3629">UTF-8</xref>
          characters with a value bigger then 0x1f (white space is the first allowed character), but
          with the exception of the slash (/ 9x2F), back slash (\ 0x5C), multiplication sign (* 0x2A),
          and question mark (? 0x3F).</t>
          <t>The following folder names are also not accepted: '.', and '..'.</t>
        </section>
        <section title="Hierarchy" toc="default">
          <t>None of the reserved folders can have subfolders, exception makes
          the TRASH that must to store also deleted folders and FILESHARE that holds
          ordinary files.</t>
          <t>The character used for delimiting path levels is the slash (/).
          A path that starts with '/' represents an absolute path. All other
          are relative to the currently selected folder (with SLCT).</t>
          <t>If there is no folder currently selected then the client MUST
          use only absolute paths. It is recommended for a client to use always
          absolute paths.</t>
        </section>
        <section title="Folder Types" toc="default">
          <t>The following folder types are defined by this standard:
            <list style="symbols">
              <t>calendar - CALE - holds events;</t>
              <t>configuration - CONF - holds user accounts configuration (the client is free to store
              all information it needs for providing roaming);</t>
              <t>contacts - ADDR - holds contact information;</t>
              <t>files - FILE - holds files that have no special meanings for the server;</t>
              <t>filter - FILT - holds the definition of a filter;</t>
              <t>folder - FOLD - contains only subfolders;</t>
              <t>journal - JRNL - holds journal entries;</t>
              <t>message - MESG - holds e-mail messages;</t>
              <t>notes - NOTE - holds short texts;</t>
              <t>tasks - TASK - holds tasks.</t>
            </list>
          </t>
          <t>Each of these types allow for subfolders in them.</t>
        </section>
        <section title="Reserved Folders" toc="default">
          <t>All the following reserved folders are located in the root of
          the user's account:
            <list style="symbols">
              <t>CALENDAR - CALE - holds the main calendar of the user;</t>
              <t>CONFIGURATION - CONF - holds account configuration (tag: NO-FOLDERS);</t>
              <t>CONTACT - ADDR - holds the main contact list;</t>
              <t>DRAFT - MESG - holds templates for e-mail messages;</t>
              <t>FILESHARE - FILE - holds files accessible read-only by other users
              (tags: READ-ONLY, and PUBLIC);</t>
              <t>INBOX - MESG - holds all new e-mail messages;</t>
              <t>JOURNAL - JRNL - holds the main journal;</t>
              <t>JUNK - MESG - holds all e-mail messages marked as SPAM or VIRUSED by the server;</t>
              <t>NOTE - NOTE - holds short texts;</t>
              <t>OUTBOX - MESG - holds all e-mail messages that wait to be sent;</t>
              <t>SENT - MESG - holds copy of sent e-mail messages;</t>
              <t>TASK - TASK - holds the main tasks list;</t>
              <t>TRASH - MESG - holds all deleted e-mail messages;</t>
            </list>
          </t>
          <t>A client can use different names for these folders when display them
          so that the client application can use localization and standard or 
          customized names for them. If this is the case, then the user cannot 
          create a folder, in the root of his account, with the same name as the
          real (reserved) name of the folder.</t>
        </section>
      </section>
      <section title="Tags" toc="default">
        <section title="Syntax" toc="default">
          <t>The client can set tags only for folder entries, but the server
          can set tags also for folders. The tags of a folder are reported by
          the STAT command.</t>
          <t>The format of a tag is a name optionally followed by the equal sign (=)
          and a value. Each time is a tag set, the new value replace the old one.
          All tags that have no value assigned are returned only as name. Assigning
          an empty value to a tag makes it to return a name followed by the equal sign
          and no value. (This means that once a value is assigned to a tag, it will
          always be returned together with an equal sign.) Hint: Deleting and setting
          again (without a value) a tag that previously had a value will make it being
          returned without an equal sign.</t>
          <t>The characters accepted for building a TAG are only all 26 Latin letters
          (A-Z) in uppercase, all 10 Latin digits (0-9) and the minus sign (-). A TAG
          is case insensitive. Its length is between 1 and 32 characters.</t>
          <t>The characters accepted for a TAG value are only all 26 Latin letters (A-Z)
          in lowercase and uppercase, all 10 Latin digits (0-9), plus the minus (-),
          underscore (_) and dot (.) characters. A TAG value is case sensitive.
          Its length is between 1 and 32 characters.</t>
          <t>The server returns always the TAG names in uppercase, even if the
          client set them using a lowercase version. The server should convert
          silently any lowercase character in a TAG name (sent by client) to its
          corresponding uppercase character.</t>
        </section>
        <section title="Reserved Tag Names" toc="default">
          <t>The following tag names have a meaning set by this standard for folders:
            <list style="symbols">
              <t>NO-COPY - the content of this folder cannot be copied with CPYF, COPY, or FCPY
              but can be deleted with DELF, DELE, or FDEL or moved with MOVF, MOVE, or FMOV;</t>
              <t>NO-DELETE - the folder or the content of this folder cannot be deleted with 
              DELF, DELE or FDEL but can be moved with MOVF, MOVE, or FMOV;</t>
              <t>NO-DELF - this folder cannot be deleted with DELF but its content can be deleted
              with DELF, DELE, or FDEL if the tag NO-DELETE is not assigned to the folder;</t>
              <t>NO-FOLDERS - this entry cannot have subfolders, so the user cannot create
              subfolders in it with MAKE;</t>
              <t>NO-MOVE - the content of this folder cannot be moved with MOVF, MOVE, or FMOV
              but can be deleted with DELF, DELE, or FDEL;</t>
              <t>NO-RENAME - the name of this folder cannot be changed with NAME;</t>
              <t>READ-ONLY - the user can read it with RETR and delete it with DELF, DELE, or FDEL
              but cannot write in it with STOR, create subfolders in it with MAKE or change the 
              tags of its content with STAG, or FTAG;</t>
              <t>RESERVED - it is a folder reserved by this standard; the user can 
              write in it with STOR but cannot delete it with DELF or rename it with NAME;</t>
              <t>PUBLIC - the content of this folder can be read by all other users;</t>
            </list>
          </t>    
          <t>When the user do a DELF for a folder with the tag NO-DELF but without the tag
          NO-DELETE then the non-folder content will gone be deleted but not the folder.</t>
          <t>When the user do a DELF for a folder with the tag NO-DELETE then the folder 
          and its content will not gone be deleted (the tag NO-DELF is ignored).</t>
          <t>Implicit a folder can be read only by its owner.</t>
          <t>The following tag names have a meaning set by this standard for messages:
            <list style="symbols">
              <t>ANSWERED - it was sent a reply to this e-mail message;</t>
              <t>SEEN - this object was already read;</t>
              <t>SPAM - this e-mail message is marked as spam;</t>
            </list>
          </t>    
        </section>
      </section>
      <section title="The Responses for Each Type of Folder" toc="default">
        <section title="Format and Conventions" toc="default">
          <t>All responses are in XML format. The tags and their attributes
          names are written only in lowercase.</t>
          <t>The content is encoded in <xref target="RFC3629">UTF-8</xref> format.</t>
          <t>Each type of folder returns its entries in a different format.</t>
          <t>Each tag written in uppercase must to be send as it is, each tag written in lowercase
          will be replaced with the right value at the time of generation.</t>
          <t>Each tag that have a star will be present only if it is the case and without the star.</t>
          <t>If a command is correct but the server cannot execute it because of
          an internal error, then the server returns the code 401.</t>
        </section>
        <section title="Response for Calendar Folders" toc="default">
          <t>The format is the same as the one defined by the
            <xref target="I-D.daboo-et-al-icalendar-in-xml">xCal</xref> standard
            (work in progress).</t>
          <t>The following example corresponds to this event definition:
            <figure align="center" anchor="Respons_Event">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
BEGIN:VCALENDAR
VERSION:2.0
CALSCALE:GREGORIAN
PRODID:-//agap/calender//NONSGML v1.0//EN
BEGIN:VEVENT
DTSTAMP:20100701T110000Z
DTSTART:20101102T000000Z
DTEND:20101102T235959Z
SUMMARY:AGAP RFC Party
UID:uidx1234@example.com
END:VEVENT
END:VCALENDAR
              ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
          <t>Example:
            <figure align="center" anchor="Example_Event">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
<icalendar xmlns="urn:ietf:params:xml:ns:icalendar-2.0">
    <vcalendar>
        <properties>
            <version><text>2.0</text></version>
            <calscale><text>GREGORIAN</text></calscale>
            <prodid>
                <text>-//agap/calender//NONSGML v1.0//EN</text>
            </prodid>
        </properties>
        <components>
            <vevent>
                <properties>
                    <dtstamp>
                        <date-time>20100701T110000Z</date-time>
                    </dtstamp>
                    <dtstart>
                        <date>20101102</date>
                    </dtstart>
                    <dtend>
                        <date>20101102</date>
                    </dtend>
                    <summary>
                        <text>AGAP RFC Party</text>
                    </summary>
                    <uid>
                        <text>uidx1234@example.com</text>
                    </uid>
                </properties>
            </vevent>
        </components>
    </vcalendar>
</icalendar>
              ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
        </section>
        <section title="Response for Configuration Folders" toc="default">
          <t>A response holding the configuration has the following structure:
            <figure align="center" anchor="Respons_Conf">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
<CONFIGURATION>
    <name>value</name>...
</CONFIGURATION>
              ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
          <t>Example:
            <figure align="center" anchor="Example_Conf">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
<configuration>
    <check-each-min>10</check-each-min>
    <quota>1024</quota>
</configuration>
              ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
        </section>
        <section title="Response for Contact Folders" toc="default">
          <t>The format is the same as the one defined by the
            <xref target="I-D.ietf-vcarddav-vcardxml">vCard XML Representation</xref>
            standard (work in progress).</t>
          <t>Example:
            <figure align="center" anchor="Example_Contact">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
<vcards xmlns="urn:ietf:params:xml:ns:vcard-4.0">
     <vcard>
       <fn><text>Iulian Radu</text></fn>
       <n>
         <surname><text>Radu</text></surname>
         <given><text>Iulian</text></given>
         <additional/>
         <prefix/>
         <suffix>
           <text>Dipl.-Ing.</text>
         </suffix>
       </n>
       <gender><sex><text>M</text></sex></gender>
       <lang>
         <parameters><pref>1</pref></parameters>
         <language-tag>de</language-tag>
       </lang>
       <org>
         <parameters><type><text>work</text></type></parameters>
         <text>Example Com</text>
       </org>
       <email>
         <parameters><type><text>work</text></type></parameters>
         <text>iulian.radu@gmx.at</text>
       </email>
       <tz><text>Europe/Vienna</text></tz>
    </vcard>
</vcards>
              ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
        </section>
        <section title="Response for File Folders" toc="default">
          <t>A response holding the content of a file has the following structure:
            <figure align="center" anchor="Respons_File">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
<FILE>
    <NAME>name</NAME>
    <CONTENT ENCODED="...">content</CONTENT>
</FILE>
              ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
          <t>The valid encodings type are: utf-8, quoted-printable, and base64.
          It CAN be case-insensitive written.</t>
          <t>Example:
            <figure align="center" anchor="Example_File">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
<file>
    <name>Example.txt</name>
    <content encoded="base64">c3VyZS4=</content>
</file>
              ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
        </section>
        <section title="Response for Filter Folders" toc="default">
          <t>An entryTag can be: and, or, not, uid, tag, is, regex. The value associated to 
          entryTag is specified as an XML text node. The is and regex tags have two attributes:
          path and op. Their values are set as for a filter command (see chapter
          "Syntax of a Filter" for more information). The first entryTag MUST to be an AND
          or OR tag.</t>
          <t>A response holding the content of a file has the following structure:
            <figure align="center" anchor="Respons_Filter">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
<FILTER>
    <entryTag>...</entryTag>
</FILTER>
              ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
          <t>Example:
            <figure align="center" anchor="Example_Filter">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
<filter>
    <or>
        <is path="header/subject" op="=">Viagra</is>
        <and>
            <uid>UIDx1234:UIDx4321</>
            <tag>SPAM</>
        </and>
    </or>
</filter>
              ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
        </section>
        <section title="Response for Journal Folders" toc="default">
          <t>A response holding the content of one record in the journal and
          it has the following structure:
            <figure align="center" anchor="Respons_Journal">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
<RECORD>
    <DATE>yyyy-mm-dd hh:mm:ss</DATE>
    <CATEGORY>...</CATEGORY>
    <CONTENT TYPE="text/..." ENCODED="...">...</CONTENT>
</RECORD>
              ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
          <t>Note: the category can be any short text. The UIDs for records
          must to respect the cronology of entries (a later record must have
          a bigger UID). The content can be encoded UTF-8 or BASE64. Implicit
          is content encoded in utf-8. The type can be any subtype of 'text/*'.
          Implicit is 'text/plain'. It is recommended to be used only 
          'text/plain' and 'text/html'. The timestamp is UTC/GMT.</t>
          <t>Example:
            <figure align="center" anchor="Example_Journal">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
<record>
    <date>2011-04-01 09:02:19</date>
    <category>new office/buying</category>
    <content type="text/plain" encoded="utf-8">A desk and a 
    	chair were brought for the new office location.</content>
</record>
              ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
        </section>
        <section title="Response for Message Folders" toc="default">
          <t>A response holding the content of a message has the following structure:
            <figure align="center" anchor="Respons_Mesg">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
<MESSAGE>
    <HEADER>
        <header-entry-once>value</header-entry-once>...
        <header-entry-multi>
            <ITEM>value n</ITEM>...
        </header-entry-multi>...
    </HEADER>
    <BODY TYPE="..." ENCODED="utf-8">
        <TEXT*>main text</TEXT>
        <HTML*>main html</HTML>
        <ATTACHMENT-{id}* PARENT="0..">
            <HEADER>
                ...
            </HEADER>
            <BODY TYPE="..." ENCODED="...">
                ...
            </BODY>
        </ATTACHMENT-{id}>...
    </BODY>
</MESSAGE>
              ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
          <t>A parent="0" for an attachment tag means that is it part of the main message or 
          the parent is unknown. The value for parent is a number used as id for another 
          attachment entry. An attachment having a wrong parent id will be considered to have
          no parent (parent="0"). It is incorrect for a tag to use the same number both for
          its id and its parent.</t>
          <t>The first item id and the first attachment id has the value 1.</t>
          <t>The id of on item tag shows the order of the entries in the original message.</t>
          <t>The default content type for the main body and an attachment is "text/plain", 
          the default content encoding is utf-8, and the default parent id is 0.</t>
          <t>The entries in the header of the main message and attachments are 
          the same with the one from the e-mail message.</t>
          <t>Example:
            <figure align="center" anchor="Example_Mesg">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
<message>
    <header>
        <from>example@no-spam.com</from>
        <to>example@example.com</to>
        <received>
            <item>
from mail.yahoo.com by example.com; Tue, 16 Mar 2010 12:14:24 +0100
            </item>
            <item>
from no-spam.com by mail.yahoo.com; Mon, 15 Mar 2010 11:13:23 +0100
            </item>
        </received>
        <content-type>multipart/mixed; boundary="XYZ"</content-type>
        <subject>A basic example</subject>
    </header>
    <body type="multipart/mixed" encoded="utf-8">
    <text>Please see the attachments.</text>
    <html>
&lt;b&gt;Please&lt;/b&gt; see the &lt;u&gt;attachments&lt;/u&gt;.
    </html>
    <attachment-1 parent="0"/>
      <header>
        <content-type>multipart/related</content-type>
      </header>
    </attachment-1>
    <attachment-2 parent="1">
      <header>
        <content-type>text/plain</content-type>
      </header>
      <body type="text/plain" encoded="utf-8">See the picture.</body>
    </attachment-2>
    <attachment-3 parent="1">
      <header>
        <content-type>image/jpeg</content-type>
        <content-transfer-encoding>base64</content-transfer-encoding>
      </header>
      <body type="image/jpeg" encoded="base64">c3VyZS4=</body>
    </attachment-3>
    </body>
</message>
              ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
          <t>The previous example corresponds to a message with the following
          structure:
            <list style="symbols">
              <t>multipart/mixed
              <list style="symbols">
                <t>multipart/alternative
                <list style="symbols">
                  <t>text/plain</t>
                  <t>text/html</t>
                </list>
                </t>
                <t>multipart/related
                <list style="symbols">
                  <t>text/plain</t>
                  <t>image/jpeg</t>
                </list>
                </t>
              </list>
              </t>
            </list>
          </t>
        </section>
        <section title="Response for Note Folders" toc="default">
          <t>A response holding the content of the note has the following structure:
            <figure align="center" anchor="Respons_Note">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
<NOTE>
    <SUBJECT>...</SUBJECT>
    <CONTENT TYPE="text/..." ENCODED="...">...</CONTENT>
</NOTE>
              ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
          <t>Note: the subject can be any short text. The content can be 
          encoded UTF-8 or BASE64. Implicit is content encoded in utf-8.
          The type can be any subtype of 'text/*'. Implicit is 'text/plain'.
          It is recommended to be used only 'text/plain' and 'text/html'.</t>
          <t>Example:
            <figure align="center" anchor="Example_Note">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
<note>
    <subject>Important!</subject>
    <content type="text/plain" encoded="utf-8">
    	To review the code.</content>
</note>
              ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
        </section>
        <section title="Response for Task Folders" toc="default">
          <t>A response holding the content of the task has the following structure:
            <figure align="center" anchor="Respons_Task">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
<TASK>
    <SUBJECT>...</SUBJECT>
    <SDATE>yyyy-mm-dd hh:mm:ss</SDATE>
    <EDATE>yyyy-mm-dd hh:mm:ss</EDATE>
    <STATUS>...</STATUS>
    <CONTENT TYPE="text/..." ENCODED="...">content</CONTENT>
</TASK>
              ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
          <t>Note: the SDATE and EDATE are empty when there is no start
          or end date for this task. The status can be any short text. A client
          GUI can assign different colored flags for different statuses.
          The subject can be any short text. The content can be encoded 
          UTF-8 or BASE64. Implicit is content encoded in utf-8. The type can 
          be any subtype of 'text/*'. Implicit is 'text/plain'. It is 
          recommended to be used only 'text/plain' and 'text/html'.
          The timestamps are UTC/GMT.</t>
          <t>Example:
            <figure align="center" anchor="Example_Task">
              <preamble></preamble>
              <artwork align="left"><![CDATA[
<task>
    <subject>buying a new desk</subject>
    <sdate></sdate>
    <edate>2011-04-01 10:30:00</edate>
    <status>PREPARING</status>
    <content type="text/plain" encoded="utf-8">To buy a new
    	desk and chair for the new office location.</content>
</task>
              ]]></artwork>
              <postamble></postamble>
            </figure>
          </t>
        </section>
      </section>
    </section>
    <section title="States" toc="default">
      <section title="Not-authenticated State" toc="default">
        <t>This is the default state when a new connection is made to the server.
        The client becomes a welcome message.</t>
        <t>From this state the client can use the command 'AUTH mechanism' to move in
        the 'Pre-authentication State'. This is the only other state in which the
        server can go.</t>
        <t>The client can use the command 'STLS' for commuting in the encrypted mode
        of the channel. After STLS the server remains in the 'Not-authenticated State'.
        There is no command for switching back to clear-text communication.</t>
        <t>The client can use the command 'SGZP' for commuting in the compressed mode
        of the channel. After SGZP the server remains in the 'Not-authenticated State'.
        There is no command for switching back to not-compressed communication.</t>
		<t>A client can use at the same time the both modes (encrypted and compressed).</t>
        <t>The client can use the command 'QUIT' for terminating the connection.</t>
        <t>For finding what extensions are installed in server, the client can use the
        'CAPA' command.</t>
      </section>
      <section title="Pre-authentication State" toc="default">
        <t>This is the state where a client authenticate itself and move to the
        'Authenticated State' or returns to the 'Not-authenticated State'.</t>
        <t>This standard defines only one method for AUTH: PLAIN. Following is a
        description of the commands flow used by this authentication mechanism.</t>
        <t>The client must send a 'USER account' followed by a 'PASS password' (if
        the server confirms the acceptance of the account name). If the pair account
        and password is accepted then the server move to the state 'Authenticated State'
        and the folder INBOX is selected by server. If this folder does not exist then
        the server moves in the 'Not-Selected State' and the client must to select an
        existing folder for operating with this account.
        If this pair is rejected then the server returns to the 'Not-authenticated State'.
        That means that the client must to send a new 'AUTH mechanism' for trying a new
        authentication.</t>
        <t>The client can use the command 'QUIT' for terminating the connection.</t>
        <t>A client can enter into this state only after a successful 'AUTH' command in
        'Not-authenticated State'.</t>
      </section>
      <section title="Authenticated (and Selected) State" toc="default">
        <t>This is the state from which a client operates with the content of an account.</t>
        <t>From this state the client can use the command 'EXIT' to move in
        the 'Not-authenticated State'. After an unsuccessful SLCT, the server
        goes in 'Not-selected State'.</t>
        <t>The client can use the command 'QUIT' for terminating the connection.</t>
        <t>Check the following chapter for finding which commands can be performed from
        this state.</t>
        <t>A client can enter into this state only after a successful authentication in
        the 'Pre-authenticated State' or after a successful 'SLCT' command in the
        'Authenticated State' or 'Not-selected State'.</t>
      </section>
      <section title="(Authenticated but) Not-selected State" toc="default">
        <t>This is the state from which a client must to select a folder for performing 
        further operations.</t>
        <t>From this state the client must use the command 'SLCT' to select a folder and to move in
        the 'Authenticated State'. This is the only other state in which the server can go.</t>
        <t>The client CAN use the command 'LIST' for finding valid folder names that eventually
        CAN be selected with 'SLCT' command.</t>
        <t>The client CAN use the command 'QUIT' for terminating the connection.</t>
        <t>A client CAN enter into this state only after an unsuccessful 'SLCT' command
        or if the INBOX folder does not exists and it cannot be selected automatically
        after a successful authentication.</t>
      </section>
    </section>
    <section title="Commands" toc="default">
      <section title="Semantic and Syntax" toc="default">
        <t>Each command has its name from 4 letters and it is matched case-insensitive.</t>
        <t>Each command is separated by its arguments by a 0x20 character.
        Also, each argument is separated from its adjacent arguments by a
        0x20 character.</t>
        <t>The minimal response has only the return code without any text.</t>
        <t>A list of elements is enclosed between parentheses (round brackets).</t>
      </section>
      <section title="Syntax of a Tag List" toc="default">
        <t>A tag list is used by the following commands: FTAG, GTAG and STAG.</t>
        <t>A tag list defines what action to be done with its tags.</t>
        <t>Syntax: ACTION TAG TAG ...</t>
        <t>ACTION:
          <list style="symbols">
            <t>= - set only these tags;</t>
            <t>+ - add this tags</t>
            <t>- - delete these tags.</t>
          </list>
        </t>
        <t>Example:
          <figure align="center" anchor="Example_Tag_List">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: STAG UIDx1234 = SEEN SPAM
C: STAG UIDx1234 + SEEN SPAM
C: STAG UIDx1234 - SEEN SPAM
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Syntax of a Filter" toc="default">
       <section title="Syntax of a Filter for a Command" toc="default">
        <t>A filter of this type is used by the following commands:
        FCPY, FDEL, FTAG, FIND and FMOV.</t>
        <t>A filter defines rules for matching the different messages.
        It is defined as lines with rules and it is ended by an empty line.</t>
        <t>The keywords of the filter are case insensitive matched
        (ex.: UID and Uid are the same).</t>
        <t>A rule must be completely defined in the same line (exception are
        grouping, and, or, and not rules).</t>
        <t>Accepted rules:
          <list style="symbols">
            <t>( ) - grouping for AND and OR;</t>
            <t>AND - the implicit rule;</t>
            <t>OR - all following rules are with OR bonded (until the end 
            of the current group);</t>
            <t>NOT - invert the result of the following rule;</t>
            <t>UID uid - one UID;</t>
            <t>UID uid_begin_range:uid_end_range - inclusive range; </t>
            <t>TAG tag_name - a tag;</t>
            <t>TAG tag_name=tag_value - a tag with a value (tag_value is the complete value);</t>
            <t>IS field_path op string - a field from the content (as XML) with an exact matched text
            (string is written between ' and ' can be escaped with \');
            op can be: &lt;, &lt;=, =, !=, &gt;=, &gt;;</t>
            <t>REGEX field_path op regex_string - a field from the content (as XML) with a regular expression
            matched text (regex_string is written between ' and ' can be escaped with \');
            op can be: =, !=; the regex_string can match only a part of the content.</t>
          </list>
        </t>
        <t>The field_path is a PATH in the response as it is returned by RETR and must have at least 3 levels
        and must point to an end leaf. An exception is for a leaf in header with have ITEM-n children.
        It contains only tag names separated with /. Example: /message/header/subject, 
        /message/header/received/item-2, /message/body/html, /message/body/attachment-1/body.</t>
        <t>Searching for a TAG without associating and a value to it will match all entries 
        that have this tag even if it have values set for it.</t>
        <t>It can be searched only in the body of attachments that have a content type of type 'text/*'.</t>
        <t>Example 1:
          These filters find all messages with the UID between UIDx0001:UIDx1000 and that were seen and
          marked as being spam or having a virus (the AND is redundant in the second case).
          Both filter definitions are equivalent.
          <figure align="center" anchor="Example_Filter_1">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: UID UIDx0001:UIDx1000 OR ( TAG SPAM TAG HAS=VIRUS ) TAG SEEN
C: UID UIDx0001:UIDx1000 AND( OR ( TAG SPAM TAG HAS=VIRUS ) TAG SEEN)
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
        <t>Example 2:
          <figure align="center" anchor="Example_Filter_2">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: IS header/subject = 'From University'
C: REGEX header/from != '[^0-9]+@example\.com$'
C: IS vcard/fn/text = 'Anonymous'
C: REGEX vcard/org/text = '^[A-Za-z]+[0-9]$'
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
       </section>
       <section title="Syntax of a Filter for a FILT Folder" toc="default">
        <t>A filter of this type is used by the following command: STOR.</t>
        <t>A filter defines rules for matching the different messages from
        different folders. It is defined as an XML with target folders and rules.</t>
        <t>The keywords of the filter are case sensitive matched (ex.: 
        UID and Uid are not the same). They are always lowercase.</t>
        <t>Accepted rules:
          <list style="symbols">
            <t>AND - all its entries must be matched;</t>
            <t>OR - at least one of its entries must be matched;</t>
            <t>NOT - invert the result of its child rule;</t>
            <t>UID uid - one UID;</t>
            <t>UID uid_begin_range:uid_end_range - inclusive range; </t>
            <t>TAG tag_name - a tag;</t>
            <t>TAG tag_name=tag_value - a tag with a value (tag_value is the complete value);</t>
            <t>IS field_path op string - a field from the content (as XML) with an exact matched text
            (string is written between ' and ' can be escaped with \');
            op can be: &lt;, &lt;=, =, !=, &gt;=, &gt;;</t>
            <t>REGEX field_path op regex_string - a field from the content (as XML) with a regular expression
            matched text (regex_string is written between ' and ' can be escaped with \');
            op can be: =, !=; the regex_string can match only a part of the content.</t>
          </list>
        </t>
        <t>The field_path is a PATH in the response as it is returned by RETR and must have at least 3 levels
        and must point to an end leaf. An exception is for a leaf in header with have ITEM-n children.
        It contains only tag names separated with /. Example: /message/header/subject, 
        /message/header/received/item-2, /message/body/html, /message/body/attachment-1/body.</t>
        <t>Searching for a TAG without associating and a value to it will match all entries 
        that have this tag even if it have values set for it (the empty string is also
        considered matched).</t>
        <t>The following two examples corresponds to the two examples from the previous chapter:
          <figure align="center" anchor="Example_Filter_3">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
<filter>
    <folders>
        <folder>/INBOX</folder>
    </folders>
    <rules>
        <and>
            <uid>UIDx0001:UIDx0010</uid>
            <or>
                <tag>SPAM</tag>
                <tag>HAS=VIRUS</tag>
            </or>
            <tag>SEEN</tag>
        </and>
    </rules>
</filter>
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
        <t>Example 2:
          <figure align="center" anchor="Example_Filter_4">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
<filter>
  <folders>
    <folder>/INBOX</folder>
  </folders>
  <rules>
    <or>
      <is path="header/subject" op="=">From University</is>
      <regex path="header/from" op="!=">[^0-9]+@example\.com$</regex>
      <is path="vcard/fn/text" op="=">Anonymous</is>
      <regex path="vcard/org/text" op="=">^[A-Za-z]+[0-9]$</regex>
    </or>
  </rules>
</filter>
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
       
       </section>
      </section>
      <section title="The Welcome Message - not-authenticated state" toc="default">
        <t>Results: 200 401 410 531</t>
        <t>Result 200 - the client is accepted for sending commands;</t>
        <t>Result 401 - there was an internal error;</t>
        <t>Result 410 - too many connections;</t>
        <t>Result 531 - the client is rejected permanently.</t>
        <t>Description: When a client connects to the server it receives a welcome message.
        This message begins with a response code that shows if the client is accepted for
        sending commands.</t>
        <t>Examples:
          <figure align="center" anchor="Example_Welcome_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
S: 200 Welcome localhost [127.0.0.1]
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Welcome_401">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
S: 401 Internal error, please contact our administrator
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Welcome_410">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
S: 410 Sorry, too many connections, please retry later
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Welcome_531">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
S: 531 Your hostname/IP (localhost:127.0.0.1) is blacklisted
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command QUIT - all states" toc="default">
        <t>Name: quit</t>
        <t>Arguments: none</t>
        <t>Result: 200</t>
        <t>Description: The QUIT command close the connection between the client and server.</t>
        <t>Example:
          <figure align="center" anchor="Example_Quit">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: QUIT
S: 200 OK Bye
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command AUTH mechanism - not-authenticated state" toc="default">
        <t>Name: authenticate</t>
        <t>Argument: mechanism</t>
        <t>Results: 200 510 511</t>
        <t>Result 200 - the mechanism is known and accepted.</t>
        <t>Result 510 - unknown command.</t>
        <t>Result 511 - the mechanism is unknown/unsupported.</t>
        <t>Description: Choose an authentication method (exists at least the mechanism PLAIN).</t>
        <t>Examples:
          <figure align="center" anchor="Example_Auth_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: AUTH PLAIN
S: 200 OK Send USER
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Auth_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: AUTH
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Auth_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: AUTH unknown
S: 511 UNKNWON method
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command CAPA - not-authenticated state" toc="default">
        <t>Name: capabilities</t>
        <t>Arguments: none</t>
        <t>Result: 200</t>
        <t>Description: Ask for the extensions known by the server.</t>
		<t>Note: If the server accepts compression then it must advertise the GZIP
		capability. If the server can encrypt the communication channel then it
		must advertise the TLS capability. (The following example shows both
		capabilities advertised.)</t>
        <t>Example:
          <figure align="center" anchor="Example_Capa">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: CAPA
S: .GZIP
S: .TLS
S: .Extension1
S: .Extension.2 argument1
S: .Extension-3 argument1 argument2
S: 200 OK CAPA completed
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command SGZP - not-authenticated state" toc="default">
        <t>Name: start using GZip</t>
        <t>Arguments: none</t>
        <t>Results: 200 510</t>
        <t>Result 200 - the communication is now compressed.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Description: Change the communication in compressed mode using
		<xref target="RFC1952">GZIP</xref> as compression method. If this command is
        executed from the compression mode then it simply returns a 200 response code.
		The response to this command is using still the not-compressed mode of the channel.
		The compression becomes effective only after a 200 response line was send by the server.</t>
		<t>Note: With GZIP the data is compressed using the LZ77 algorithm and Huffman coding.
		Starting using this mode is like starting to write clear texts into a GZIP format archive
		and reading texts from a GZIP format archive. The compression is used both by the client and
		the server and they start to use it with the next line they send after the 200 response line
		received from the server.</t>
        <t>Examples:
          <figure align="center" anchor="Example_Sgzp_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SGZP
S: 200 OK Using GZIP
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Sgzp_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SGZP
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
	  </section>
      <section title="Command STLS - not-authenticated state" toc="default">
        <t>Name: start using TLS</t>
        <t>Arguments: none</t>
        <t>Results: 200 510</t>
        <t>Result 200 - the communication is now encrypted.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Description: Change the communication in mode TLS. If this command is
        executed from the encrypted mode then it simply returns a 200 response code.
		The response to this command is using still the not-encrypted mode of the channel.
		The encryption becomes effective only after a 200 response line was send by the server.</t>
        <t>Examples:
          <figure align="center" anchor="Example_Stls_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: STLS
S: 200 OK Using TLS
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Stls_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: STLS
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
	  </section>
      <section title="Command PASS password - pre-authenticated state (PLAIN)" toc="default">
        <t>Name: password</t>
        <t>Argument: password</t>
        <t>Result: 200 510 511 512</t>
        <t>Result 200 - the pair user/password was successfully authenticated.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - invalid password.</t>
        <t>Result 512 - first send USER and then PASS.</t>
        <t>Description: Send the password associated to the previous USER.</t>
        <t>Examples:
          <figure align="center" anchor="Example_Pass_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: USER account
S: 200 OK Send PASS
C: PASS password
S: 200 OK Authenticated
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Pass_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: USER account
S: 200 OK Send PASS
C: PASS
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Pass_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: USER account
S: 200 OK Send PASS
C: PASS password
S: 511 WRONG user/password pair
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Pass_512">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: AUTH PLAIN
S: 200 OK AUTH completed
C: PASS password
S: 512 EXPECTED USER
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command USER account - pre-authenticated state (PLAIN)" toc="default">
        <t>Name: user</t>
        <t>Argument: account</t>
        <t>Result: 200</t>
        <t>Result: 200 510 511</t>
        <t>Result 200 - the user is accepted and expecting the password.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - invalid account.</t>
        <t>Description: Send an account name for authentication and authorization.</t>
        <t>Examples:
          <figure align="center" anchor="Example_User_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: AUTH PLAIN
S: 200 OK Send USER
C: USER account
S: 200 OK Send PASS
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_User_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: AUTH PLAIN
S: 200 OK Send USER
C: USER
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_User_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: AUTH PLAIN
S: 200 OK Send USER
C: USER account
S: 511 INVALID username
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command CHNG - authenticated state" toc="default">
        <t>Name: report all changes from a folder or from all folders</t>
        <t>Arguments: path?</t>
        <t>Result: 200 510 511</t>
        <t>Result 200 - the command was successful.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - unknown or not absolute path.</t>
        <t>Description: Return a list of changes in specified folder or all
        changes if there is no path specified. The changes to the tags are not reported.
        If there are not changes then the list is empty. A move is reported in
        this list as a DITM for the source folder and a NITM for destination folder.
        If the argument of CHNG is a deleted folder then is returned a 200 code
        and there is in the list only a DELF for this folder. All reported changes
        are deleted after the 200 code is returned so a subsequent call of CHNG
        will report no changes (if there are not any new changes).</t>
        <t>Returned fields:
          <list style="symbols">
            <t>DELF path - a folder was deleted. There is one entry for each deleted
              folder. Deleted subfolders of a deleted folder are reported too;</t>
            <t>NITM uid path - this item was added to the folder;</t>
            <t>DITM uid path - this item was deleted;</t>
          </list>
          The path is an absolute path.
        </t>
        <t>Examples:
          <figure align="center" anchor="Example_Chng_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: CHNG
S: .DELF /Temporary
S: .DELF /Temporary/1980
S: .NITM UID1000 /INBOX
S: .DITM UID0900 /INBOX
S: .NITM UID1001 /OLD
S: .DITM UID1001 /INBOX
S: 200 OK CHNG completed
C: CHNG /INBOX
S: .NITM UID1000 /INBOX
S: .DITM UID0900 /INBOX
S: .DITM UID1001 /INBOX
S: 200 OK CHNG completed
C: CHNG /Temporary
S: .DELF /Temporary
S: 200 OK CHNG completed
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Chng_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: CHNG
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Chng_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: CHNG ARCHIVE_FOLDER/TODAY
S: 511 PATH is relative
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command COPY - authenticated state" toc="default">
        <t>Name: copy entry</t>
        <t>Arguments: UID_source path_destination_folder</t>
        <t>Result: 200 510 511</t>
        <t>Result 200 - the copy was successful.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - unknown uid or invalid destination folder.</t>
        <t>Description: Copy a message/contact/event from the currently selected
        folder into another folder (by UID).</t>
        <t>Note: For copying a folder the client must use CPYF.</t>
        <t>Examples:
          <figure align="center" anchor="Example_Copy_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: COPY UIDx1234 ARCHIVE_FOLDER/TODAY
S: 200 OK COPY completed
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Copy_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: COPY
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Copy_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: COPY UIDx1234 ARCHIVE_FOLDER/TODAY
S: 511 INVALID UID
C: COPY MSGx1234 ARCHIVE_FOLDER/1970
S: 511 INVALID Destination
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command CPYF - authenticated state" toc="default">
        <t>Name: copy folder</t>
        <t>Arguments: path_destination_folder</t>
        <t>Result: 200 510 511</t>
        <t>Result 200 - the copy was successful.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - invalid destination folder, destination is not an absolute path
        or destination does not exists.</t>
        <t>Description: Copy the content of a folder into another folder.</t>
        <t>Note: In the destination folder are copied all non-folder entries found in the source.
        If the user needs to copy the content of the source folder in another folder then he must
        to create first a new folder with the MAKE command and then use the CPYF command.
        If the user wants to copy the folders found in the source then he must to do
        recursively MAKE and CPYF for each subfolder.</t>
        <t>Examples (in TODAY are copied only the messages from INBOX):
          <figure align="center" anchor="Example_Cpyf_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SLCT /INBOX
S: 200 Selected /INBOX
C: CPYF /ARCHIVE_FOLDER/TODAY
S: 200 OK CPYF completed
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Cpyf_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: CPYF
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Cpyf_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: CPYF MISSING
S: 511 INVALID Destination
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command DATT - authenticated state (MESG folder type)" toc="default">
        <t>Name: delete attachment</t>
        <t>Arguments: UID AttNum</t>
        <t>Result: 200 510 511 521</t>
        <t>Result 200 - the attachment was successfully deleted.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - unknown uid or uid is not for a message.</t>
        <t>Result 521 - wrong attachment number.</t>
        <t>Description: Delete from a message an attachment. The first 
        attachment has number 1. All its children are also deleted.</t>
        <t>Note: It cannot be undone.</t>
        <t>Examples:
          <figure align="center" anchor="Example_Datt_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: DATT UIDx1234 1
S: 200 OK Attachment deleted
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Datt_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: DATT
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Datt_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: DATT UIDx1234 1
S: 511 INVALID UID
C: DATT UIDx1234 -1
S: 511 INVALID Attachment number
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Datt_521">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: DATT UIDx1234 10
S: 521 There are not so many attachments
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
     </section>
      <section title="Command DELE - authenticated state" toc="default">
        <t>Name: delete entry</t>
        <t>Argument: UID</t>
        <t>Result: 200 510 511</t>
        <t>Result 200 - the entry was successfully deleted.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - unknown uid.</t>
        <t>Description: Delete a message/contact/event by uid.</t>
        <t>Note: It cannot be undone.</t>
        <t>Examples:
          <figure align="center" anchor="Example_Dele_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: DELE UIDx1234
S: 200 OK Message deleted
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Dele_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: DELE
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Dele_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: DELE 1234
S: 511 INVALID UID
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
     </section>
      <section title="Command DELF - authenticated state" toc="default">
        <t>Name: delete folder</t>
        <t>Arguments: none</t>
        <t>Result: 200 510 511</t>
        <t>Result 200 - the folder was successfully deleted.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - no folder was selected or currently selected folder is a reserved folder.</t>
        <t>Description: Delete currently selected folder and all its content and subfolders.
        A reserved folder cannot be deleted, but a read-only folder yes. If the operation is 
        successful then after it no folder is selected.</t>
        <t>Note: It cannot be undone.</t>
        <t>Examples:
          <figure align="center" anchor="Example_Delf_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: DELF
S: 200 OK Folder '/delete/me' was deleted
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Delf_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: DELF
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Delf_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: DELF
S: 511 Please select first a folder
C: DELF
S: 511 /INBOX cannot be deleted
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
     </section>
      <section title="Command EXIT - authenticated state" toc="default">
        <t>Name: exit</t>
        <t>Arguments: none</t>
        <t>Result: 200</t>
        <t>Description: Return the server to the Not-authenticated State.</t>
        <t>Example:
          <figure align="center" anchor="Example_Exit">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: EXIT
S: 200 OK EXIT completed
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command FCPY - authenticated state" toc="default">
        <t>Name: find and copy entries</t>
        <t>Arguments: path_destination_folder filter*</t>
        <t>Result: 200 510 511</t>
        <t>Result 200 - the find and copy was successful.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - invalid destination folder or wrong filter.</t>
        <t>Description: Search for messages/contacts/events only from the currently
        selected folder (no subfolders) that correspond to a filter and copy them 
        to a new folder. The tags are also copied.</t>
        <t>Note: The filter is delivered after the acceptance of the command
        (response code 110).</t>
        <t>Examples:
          <figure align="center" anchor="Example_Fcpy_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: FCPY ARCHIVE/SPAM
S: 110 OK SEND filter definition (end it with an empty line)
C: UID 00000001:00001000 AND TAG SPAM
C:
S: 200 OK FCPY completed (10 matches)
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Fcpy_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: FCPY
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Fcpy_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: FCPY MISSING
S: 511 INVALID folder
C: FCPY SEND
S: 110 OK SEND filter definition (end it with an empty line)
C: LATER
C:
S: 511 INVALID filter definition
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command FDEL - authenticated state" toc="default">
        <t>Name: find and delete entries</t>
        <t>Argument: filter*</t>
        <t>Result: 200 511</t>
        <t>Result 200 - the find and delete was successful.</t>
        <t>Result 511 - wrong filter (inclusive empty filter).</t>
        <t>Description: Search for messages/contacts/events only from the currently
        selected folder (no subfolders) that correspond to a filter and delete them
        (no copy in TRASH).</t>
        <t>Note: The filter is delivered after the acceptance of the command
        (response code 110).</t>
        <t>Examples:
          <figure align="center" anchor="Example_Fdel_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: FDEL
S: 110 OK SEND filter definition (end it with an empty line)
C: UID 00000001:00001000 AND TAG SPAM
C:
S: 200 OK FDEL completed (10 matches)
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Fdel_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: FDEL
S: 110 OK SEND filter definition (end it with an empty line)
C: LATER
C:
S: 511 INVALID filter definition
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command FIND - authenticated state" toc="default">
        <t>Name: find entry</t>
        <t>Argument: filter*</t>
        <t>Result: 200 511</t>
        <t>Result 200 - the find was successful.</t>
        <t>Result 511 - wrong filter.</t>
        <t>Description: Search for messages/contacts/events only from the currently
        selected folder (no subfolders) that correspond to a filter and return their UIDs.
        If the search is done for a filter folder then the server does not expect any filter
        and apply the current filter (if any). If there is no filter in the filter folder then
        it is returned only the return code. The answer consists of the UIDs and, for a filter folder,
        they are followed by a 0x20 character and the absolute path for which are the corresponding
        UID.</t>
        <t>Note: For not FILT folders, the filter is delivered after the 
        acceptance of the command. An empty filter matches all messages/contacts/events
        from that folder.</t>
        <t>Examples:
          <figure align="center" anchor="Example_Find_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SLCT /MESG-Folder
C: FIND
S: 110 OK SEND filter definition (end it with an empty line)
C: UID UIDx0001:UIDx9000 TAG SPAM
C:
S: .UIDx1234
S: .UIDx1235
S: .UIDx2340
S: 200 OK FIND completed (3 matches)
C: SLCT /FILT-Folder
C: FIND
S: .UIDx1234 /INBOX
S: .UIDx1234 /Trash
S: .UIDx1235 /Trash
S: 200 OK FIND completed (3 matches)
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Find_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: FIND
S: 110 OK SEND filter definition (end it with an empty line)
C: LATER
C:
S: 511 INVALID filter definition
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command FMOV - authenticated state" toc="default">
        <t>Name: find and move</t>
        <t>Arguments: path_destination_folder filter*</t>
        <t>Result: 200 510 511</t>
        <t>Result 200 - the find and move was successful.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - invalid destination folder or wrong filter.</t>
        <t>Description: Search for messages/contacts/events only from the currently
        selected folder (no subfolders) that correspond to a filter and move them 
        to a new folder. The tags are also moved.</t>
        <t>Note: The filter is delivered after the acceptance of the command
        (response code 110).</t>
        <t>Examples:
          <figure align="center" anchor="Example_Fmov_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: FMOV ARCHIVE/SPAM
S: 110 OK SEND filter definition (end it with an empty line)
C: UID 00000001:00001000 AND TAG SPAM
C:
S: 200 OK FMOV completed (10 matches)
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Fmov_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: FMOV
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Fmov_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: FMOV MISSING
S: 511 INVALID folder
C: FMOV SEND
S: 110 OK SEND filter definition (end it with an empty line)
C: LATER
C:
S: 511 INVALID filter definition
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command FTAG - authenticated state" toc="default">
        <t>Name: find and tag entries</t>
        <t>Arguments: tag_list filter*</t>
        <t>Result: 200 510 511</t>
        <t>Result 200 - the find and set of tag(s) were successful.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - invalid tag list or wrong filter.</t>
        <t>Description: Search for messages/contacts/events only from the currently
        selected folder (no subfolders) that correspond to a filter and change their 
        tags.</t>
        <t>Note: The filter is delivered after the acceptance of the command
        (response code 110).</t>
        <t>Examples:
          <figure align="center" anchor="Example_Ftag_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: FTAG + SEEN
S: 110 OK SEND filter definition (end it with an empty line)
C: UID 00000001:00001000 AND TAG NEW
C:
S: 200 OK FTAG completed (10 matches)
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Ftag_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: FTAG
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Ftag_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: FTAG SEEN
S: 511 INVALID tag list
C: FTAG + SEEN
S: 110 OK SEND filter definition (end it with an empty line)
C: LATER
C:
S: 511 INVALID filter definition
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>  
      </section>
      <section title="Command GTAG - authenticated state" toc="default">
        <t>Name: get tag</t>
        <t>Arguments: UID_range</t>
        <t>Result: 200 510 511</t>
        <t>Result 200 - the tag(s) of UIDs was/were successful displayed.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - invalid UID or UID range.</t>
        <t>Description: Return the tags associated to one or more messages/contacts/events (by UID).</t>
        <t>Examples:
          <figure align="center" anchor="Example_Gtag_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: GTAG UIDx1000
S: .UIDx1000 SEEN SPAM
S: 200 OK GTAG completed
C: GTAG UIDx1000:UIDx1234
S: .UIDx1000 SEEN SPAM
S: .UIDx1100
S: .UIDx1200 NEW
S: 200 OK GTAG completed
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Gtag_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: GTAG
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Gtag_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: GTAG -1
S: 511 INVALID UID
C: GTAG UIDx1234:UIDx1000
S: 511 INVALID UID range
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command LIST - authenticated and not-selected state" toc="default">
        <t>Name: list</t>
        <t>Arguments: path/filter?</t>
        <t>Results: 200 511 513</t>
        <t>Result 200 - the list was successful delivered (even if it is empty).</t>
        <t>Result 511 - filter is invalid, the specified path (that has no wildcard)
        does not exist, or the specified path before last folder name (which has an wildcard)
        does not exist.</t>
        <t>Description: List all folders that correspond to the filter (if it is provided),
        otherwise all direct children of currently selected folder together with their types.
        All returned folder names are prefixed with the type of the corresponding folder
        (as it is used by the MAKE command) followed by a white space and the absolute path to the
        folder.</t>
        <t>Filter's path': It is a relative (does not begins with /) or an absolute (begins with /) path.
        The slash sign (/) is used to delimit folders in the hierarchy. There can be only
        a star (*) and must to be located in the name of the last folder. The server can
        return 511 if it founds '.' or '..' as folder names or '\' in the filter definition.</t>
        <t>Examples:
          <figure align="center" anchor="Example_List_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: LIST
S: .MESG YESTERDAY
S: .MESG YEAR-2000
S: 200 OK LIST completed (2 matches)
C: LIST /*
S: .MESG /INBOX
S: .MESG /TRASH
S: .CALE /CALENDAR
S: 200 OK LIST completed (3 matches)
C: LIST YEAR-2010/J*
S: .MESG /WORK/YEAR-2010/JUN
S: .MESG /WORK/YEAR-2010/JUL
S: 200 OK LIST completed (2 matches)
C: LIST /archive*
S: 200 OK LIST completed (0 matches)
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_List_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: LIST */*
S: 511 ERROR path filter can contain only one * in last folder name
C: LIST /ARCHIVE/2000
S: 511 ERROR The specified folder does not exist
C: LIST /ARCHIVE/2000/Documents *.doc
S: 511 ERROR The folder '/ARCHIVE/2000' does not exist
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command MAKE - authenticated and not-selected state" toc="default">
        <t>Name: make folder</t>
        <t>Argument: type path</t>
        <t>Result: 200 510 511</t>
        <t>Result 200 - the folder was successfully created.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - invalid path, unknown/unsupported type or the parent of the new folder
        does not accept to have subfolders.</t>
        <t>Description: Create a folder of a certain type.</t>
        <t>Note: A new folder has not any tag, except the tag PUBLIC if its parent has it.</t>
        <t>Types: They are case insensitive
          <list style="symbols">
            <t>ADDR - it holds contacts;</t>
            <t>CALE - it holds calendar events;</t>
            <t>CONF - it holds user's settings for roaming.</t>
            <t>FILE - it holds normal folders and files;</t>
            <t>FILT - it holds the results of a filter defined by the user (there can be only
            one filter per folder);</t>
            <t>FOLD - it contains only subfolders;</t>
            <t>JRNL - it holds a journal;</t>
            <t>NOTE - it holds user's notes;</t>
            <t>MESG - it holds messages;</t>
            <t>TASK - it holds tasks;</t>
          </list>
        </t>
        <t>Note: If it requires parents that does not exist then the server will not create
        them for the client but it will return a 511 response code.</t>
        <t>Examples:
          <figure align="center" anchor="Example_Make_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: MAKE MESG /ARCHIVE/2010
S: 200 OK Folder created
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Make_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: MAKE
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Make_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: MAKE 1234
S: 511 ERROR Missing folder name
C: MAKE new 1234
S: 511 ERROR Unknown folder type
C: MAKE MESG /INBOX/1234
S: 511 ERROR The parent folder does not accept subfolders.
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command MOVE - authenticated state" toc="default">
        <t>Name: move entry</t>
        <t>Arguments: UID_source path_destination_folder</t>
        <t>Result: 200 510 511</t>
        <t>Result 200 - the move was successful.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - unknown uid or invalid destination folder.</t>
        <t>Description: Move a message/contact/event into another folder (by UID).</t>
        <t>Note: For moving a folder the client must use MOVF.</t>
        <t>Examples:
          <figure align="center" anchor="Example_Move_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: MOVE UIDx1234 ARCHIVE_FOLDER/TODAY
S: 200 OK MOVE completed
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Move_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: MOVE
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Move_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: MOVE UIDx1234 ARCHIVE_FOLDER/TODAY
S: 511 INVALID UID
C: MOVE MSGx1234 ARCHIVE_FOLDER/1970
S: 511 INVALID Destination
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command MOVF - authenticated state" toc="default">
        <t>Name: move folder</t>
        <t>Arguments: path_destination_folder</t>
        <t>Result: 200 510 511</t>
        <t>Result 200 - the move was successful.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - invalid destination folder, destination is not an absolute path
        or destination does not exists.</t>
        <t>Description: Move the content of a folder into another folder.</t>
        <t>Note: In the destination folder are moved all non-folder entries found in the source.
        If the user needs to move the content of the source folder in another folder then he must
        to create first this new folder with the MAKE command and then use the MOVF command.
        If the user wants to move the folders found in the source then he must to do
        recursively MAKE, MOVF, and DELF for each subfolder.</t>
        <t>Examples:
          <figure align="center" anchor="Example_Movf_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SLCT /INBOX
S: 200 Selected /INBOX
C: MOVF /ARCHIVE_FOLDER/TODAY
S: 200 OK MOVF completed
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Movf_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: MOVF
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Movf_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: MOVF MISSING
S: 511 INVALID Destination
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command NAME - authenticated state" toc="default">
        <t>Name: rename folder</t>
        <t>Arguments: new_name</t>
        <t>Results: 200 510 511</t>
        <t>Result 200 - the rename was successful.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - invalid new_name or trying to rename a reserved folder name.</t>
        <t>Description: Rename a folder. The currently selected folder remains selected
        even if the name was changed. A reserved folder cannot be renamed.</t>
        <t>Note: The new_name does not hold any path hierarchy.</t>
        <t>Examples:
          <figure align="center" anchor="Example_Name_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SLCT ARCHIVE/2001
S: 200 OK
C: NAME OLD-2001
S: 200 OK NAME completed
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Name_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: NAME
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Name_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SLCT /INBOX
S: 200 OK
C: NAME InBox
S: 511 ERROR The folder cannot be renamed (reserved name)
C: NAME /A/new-folder
S: 511 ERROR The argument must not be a path 
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command NOOP - authenticated state" toc="default">
        <t>Name: noop</t>
        <t>Arguments: none</t>
        <t>Result: 200</t>
        <t>Description: It does nothing (eventually announce what changes was done in current folder).</t>
        <t>Example:
          <figure align="center" anchor="Example_Noop">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: NOOP
S: 200 OK NOOP completed
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command RETR - authenticated state" toc="default">
        <t>Name: retrieve</t>
        <t>Arguments for a FILT folder: none</t>
        <t>Arguments for other types: UID part?</t>
        <t>Results: 200 510 511</t>
        <t>Result 200 - the message/contact/event was found or filter content was delivered.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - invalid UID or part name.</t>
        <t>Description: Fetch from server the message/contact/event with the given UID. For
        a filter folder, it must be called without arguments and it returns the content of the filter.
        Each line of answer is prefixed with a dot that it is not part of the returned object.</t>
        <t>Part: It is a PATH in the response as it is returned by RETR and must have at least 3 levels
        and must point to an end leaf. An exception is for a leaf in header with have ITEM-n children.
        It contains only tag names separated with /. Example: /message/header/subject, 
        /message/header/received/item-2, /message/body/html, /message/body/attachment-1/body.
        If it is present 'part' then the value of this entry is returned as text instead of XML.
        For an entry in the header with a multivalue are returned each value on its own line.</t>
        <t>Examples:
          <figure align="center" anchor="Example_Retr_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: RETR UIDx1234
S: .<message><header>...</header><body>...</body></message>
S: 200 OK RETR completed
C: RETR UIDx1234 /message/header/subject
S: .Message's subject
S: 200 OK RETR completed
C: RETR UIDx1234 /message/header/received
S: .from s0001.srv.example.com [10.11.12.13] by mx.example.com
S: . (Postfix) with ESMTP id 01234567890 for <user@example.com>;
S: . Thu, 19 Nov 2009 01\:02\:03 +0100 (CET)
S: . by userpc (192.168.192.168) id 20091119010204A;
S: . Thu, 19 Nov 2009 01\:02\:04 +0100 (CET)
S: 200 OK RETR completed
C: RETR
S: .<filter>
S: .<folders><folder>/Spam</folder></folders>
S: .<rules></rules>
S: .</filter>
S: 200 OK RETR completed
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Retr_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: RETR
S: 510 UNKNOWN command (only FILT folders do not needs arguments)
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Retr_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: RETR WrongUID
S: 511 INVALID UID
C: RETR UIDx1234 ABC
S: 511 UNKNOWN part name
C: RETR UIDx1234
S: 511 RETR with UID is not allowed for a FILT folder
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command SLCT - authenticated and not-selected state" toc="default">
        <t>Name: select a folder</t>
        <t>Argument: path</t>
        <t>Result: 200 510 511</t>
        <t>Result 200 - the folder was successfully selected.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - unknown path or '/'.</t>
        <t>Description: Select a folder. If the selection was not successful then
        no folder remains selected and the server switch in the 'Not-selected State'.
        The user cannot select the root (/) folder.</t>
        <t>Examples:
          <figure align="center" anchor="Example_Slct_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SLCT /INBOX
S: 200 OK Folder selected
C: SLCT ARCHIVE/2000
S: 200 OK Folder selected
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Slct_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SLCT
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Slct_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SLCT 1234
S: 511 INVALID folder
C: SLCT /
S: 511 You cannot select /
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command SPAM - authenticated state (MESG folder type)" toc="default">
        <t>Name: spam</t>
        <t>Argument: UID reason?</t>
        <t>Result: 200 510 511</t>
        <t>Result 200 - the entry was successfully marked.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - invalid or not found UID, or invalid reason.</t>
        <t>Description: Mark a message as SPAM/MALWARE. The server can ignore this command or
        it can check the reason (if present) and improve its SPAM detection mechanism.</t>
        <t>Reason: It can be the name of a field (ex.: header/subject) eventually followed
        by equal and the text from that field that identify it as a SPAM. If there is more
        than one criterion for marking a message as SPAM then the client must supply for
        each reason a SPAM command. If there is no reason then the whole indicated field's
        content is used.</t>
        <t>Note: It cannot be undone and no tag is set for this message.</t>
        <t>Examples:
          <figure align="center" anchor="Example_Spam_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SPAM UIDx1234
S: 200 OK Message added to the spam database
C: SPAM UIDx1234 header/subject
S: 200 OK Message added to the spam database
C: SPAM UIDx1234 body=V1AGRA
S: 200 OK Message added to the spam database
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Spam_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SPAM
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Spam_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SPAM 1234
S: 511 INVALID UID
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command STAG - authenticated state" toc="default">
        <t>Name: set tags of entries</t>
        <t>Arguments: UID_range tag_list</t>
        <t>Result: 200 510 511</t>
        <t>Result 200 - the tag(s) for UIDs were successful set.</t>
        <t>Result 510 - unknown/unsupported command.</t>
        <t>Result 511 - invalid UID or UID range.</t>
        <t>Description: Set or delete tags associated to one or more messages/contacts/events (by UID).</t>
        <t>Examples:
          <figure align="center" anchor="Example_Stag_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: STAG UIDx1000 + SEEN
S: 200 OK STAG completed
C: STAG UIDx1000:UIDx1234 + SEEN
S: 200 OK STAG completed
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Stag_510">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: STAG
S: 510 UNKNOWN command
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Stag_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: STAG -1
S: 511 INVALID UID
C: STAG -1 + SEEN
S: 511 INVALID UID
C: STAG UIDx1234 SEEN
S: 511 INVALID tag list
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command STAT - authenticated state" toc="default">
        <t>Name: status</t>
        <t>Arguments: none</t>
        <t>Result: 200 512</t>
        <t>Result 200 - the status of the folder was successfully delivered.</t>
        <t>Result 512 - no folder is selected.</t>
        <t>Description: Return the absolute path of the currently selected folder (PATH),
        its type (TYPE), an FCID that is incremented each time a change is produced into the folder,
        the tags (TAGS) and eventually additional information associated
        with this type of folder.</t>
        <t>Additional information:
          <list style="symbols">
            <t>ADDR - none;</t>
            <t>CALE - none;</t>
            <t>CONF - none.</t>
            <t>FILE - TOTAL;</t>
            <t>FILT - TOTAL and NEW;</t>
            <t>FOLD - none;</t>
            <t>JRNL - none;</t>
            <t>MESG - TOTAL and NEW;</t>
            <t>NOTE - TOTAL;</t>
            <t>TASK - TOTAL;</t>
          </list>
        </t>
        <t>Note: An FCID has the same format as a normal UID and each new value of FCID is
        bigger as the precedent one (as is described for UIDs).</t>
        <t>Examples:
          <figure align="center" anchor="Example_Stat_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: STAT
S: .PATH /INBOX
S: .TYPE MESG
S: .FCID 1
S: .TAGS RESERVED
S: .TOTAL 10
S: .NEW 2
S: 200 OK Folder status displayed
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Stat_512">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: STAT
S: 512 ERROR First select a folder
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Command STOR - authenticated state" toc="default">
        <t>Name: store</t>
        <t>Arguments: none</t>
        <t>Result: 200 410 511</t>
        <t>Result 200 - the entry was successfully deleted.</t>
        <t>Result 410 - if the item cannot be stored.</t>
        <t>Result 511 - if the data is not a valid XML or its schema does
        not correspond to the type of the destination folder.</t>
        <t>Description: Store a new message/contact/event/filter into a folder.
        If it is written a new filter into a FILT folder, then the previous filter is deleted.
        If the new filter has an invalid XML structure or cannot be saved then the folder
        remains with the old filter (if any).</t>
        <t>Note: Do not send a message content using CDATA as it can hold empty lines
        and an empty line means for the server the end of the message to be stored.</t>
        <t>Examples:
          <figure align="center" anchor="Example_Stor_200">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: STOR
S: 110 Send the message ended with an empty line
C: <message><header>...</header><body>...</body></message>
C:
S: 200 OK Message stored (UID is UIDx1234)
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Stor_410">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: STOR
S: 110 Send the message ended with an empty line
C: <message><header>...</header><body>...</body></message>
C:
S: 410 Cannot store it, not enough space
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_Stor_511">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: STOR
S: 110 Send the message ended with an empty line
C: msg
C:
S: 511 Cannot store it, the message has an incorrect format
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
    </section>
    <section title="Responses" toc="default">
      <section title="Semantic and Syntax" toc="default">
        <t>The Response-Code element is a 3-digit integer result code of the 
 attempt to understand and satisfy the request. These codes are fully defined 
 in the following section.</t>
        <t>After the Response-Code, can follow a 0x20 character and then a 
 Reason-Phrase intended to give a short textual description of the returned 
 code. The Response-Code is intended for automatic use. The Reason-Phrase is 
 intended for humane persons that debug the connection.</t>
        <t>The first digit of the Response-Code defines the class of 
 response. The last two digits do not have any categorization role. There are 4 
 values for the first digit:
          <list style="symbols">
            <t>1xx: Informational - Server waits for request continuation 
 or send unrequested data;</t>
            <t>2xx: Success - The action was successfully executed;</t>
            <t>4xx: Server Error - The server failed to perform the request, retry later;</t>
            <t>5xx: Server Error - The server failed to perform the request, permanent error;</t>
          </list>
        </t>
        <t>There are commands that return a multi-line response. These are:
        CAPA, FIND, GTAG, LIST, RETR, and STAT. In this cases, the response code
        is at the beginning of the last line of the response. All other lines start with a dot (.).</t>
      </section>
      <section title="1xx Informational" anchor="respons_code_1xx" toc="default">
        <section title="100 Reserved" anchor="respons_code_100" toc="default">
          <t>Reserved.</t>
        </section>
        <section title="110 Continue" anchor="respons_code_110" toc="default">
          <t>The client SHOULD continue sending the rest of this 
 request. This response informs the client that the server accepted the initial 
 part of the request and it is waiting for the next part of the request. The 
 server sends a final response after the request has been completely received 
 and processed.</t>
        </section>
      </section>
      <section title="2xx Success" anchor="respons_code_2xx" toc="default">
        <section title="200 OK" anchor="respons_code_200" toc="default">
          <t>The request was successfully processed.</t>
        </section>
      </section>
      <section title="4xx Temporary Server Error" anchor="respons_code_4xx" toc="default">
        <section title="400 Reserved" anchor="respons_code_400" toc="default">
          <t>Reserved.</t>
        </section>
        <section title="401 Internal Error" anchor="respons_code_401" toc="default">
          <t>The request could not be processed because it was an internal error
          (ex.: something is wrong configured).</t>
        </section>
        <section title="410 Retry later" anchor="respons_code_410" toc="default">
          <t>The operation must to be retried later. This return code is used when the data
          cannot be stored because there was an error  (ex.: not enough space on disk).</t>
        </section>
      </section>
      <section title="5xx Permanent Server Error" anchor="respons_code_5xx" toc="default">
        <section title="500 Reserved" anchor="respons_code_500" toc="default">
          <t>Reserved.</t>
        </section>
        <section title="510 Unknown Command" anchor="respons_code_510" toc="default">
          <t>The request could not be processed because this command is unknown or its syntax
          is wrong.</t>
        </section>
        <section title="511 Invalid Parameter" anchor="respons_code_511" toc="default">
          <t>The request could not be processed because the command has an invalid parameter.</t>
          <t>This answer can be returned even if there was more than one 0x20 character
          between command and its arguments or between arguments.</t>
        </section>
        <section title="512 Out of order" anchor="respons_code_512" toc="default">
          <t>This command has a valid syntax but must to be send after other command required
          by the logic of the server. (Ex.: PASS after USER in Pre-authenticated State.)</t>
        </section>
        <section title="521 Not found" anchor="respons_code_521" toc="default">
          <t>This command has a valid syntax but the searched argument does not exist
          or cannot be accessed. (Ex.: LIST with a path does not have any wildcard and
          it does not exist.)</t>
        </section>
        <section title="531 Banned" anchor="respons_code_531" toc="default">
          <t>The client is not allowed to interact with the server. (Ex.: the client's
          IP is blacklisted.)</t>
        </section>
      </section>
    </section>
    <section title="All Possible Response Codes for All Commands" toc="default">
      <section title="Not-authenticated State" toc="default">
        <t>The Welcome Message: 200 401 410 531</t>
        <t>QUIT: 200</t>
        <t>AUTH: 510 511</t>
        <t>AUTH mechanism: 200 511</t>
        <t>CAPA: 200</t>
        <t>SGZP: 200 510</t>
        <t>STLS: 200 510</t>
        <t>other: 510</t>
      </section>
      <section title="Pre-authenticating State (PLAIN method)" toc="default">
        <t>QUIT: 200</t>
        <t>PASS: 510 511 512</t>
        <t>PASS password: 200 511 512</t>
        <t>USER: 510 511</t>
        <t>USER account: 200 511</t>
        <t>other: 510</t>
      </section>
      <section title="Authenticated State" toc="default">
        <t>QUIT: 200</t>
        <t>COPY: 510 511</t>
        <t>COPY arguments: 200 511</t>
        <t>CPYF: 510 511</t>
        <t>CPYF arguments: 200 511</t>
        <t>DATT: 510 511</t>
        <t>DATT arguments: 200 511 521</t>
        <t>DELE: 510 511</t>
        <t>DELE arguments: 200 511</t>
        <t>DELF: 510 511</t>
        <t>DELF arguments: 200 511</t>
        <t>EXIT: 200</t>
        <t>FCPY: 510 511</t>
        <t>FCPY arguments: 200 511</t>
        <t>FDEL: 511</t>
        <t>FDEL arguments: 200 511</t>
        <t>FIND: 511</t>
        <t>FIND arguments: 200 511</t>
        <t>FMOV: 510 511</t>
        <t>FMOV arguments: 200 511</t>
        <t>FTAG: 510 511</t>
        <t>FTAG arguments: 200 511</t>
        <t>GTAG: 510 511</t>
        <t>GTAG arguments: 200 511</t>
        <t>LIST: 200</t>
        <t>LIST arguments: 200 511</t>
        <t>MAKE: 510 511</t>
        <t>MAKE arguments: 200 511</t>
        <t>MOVE: 510 511</t>
        <t>MOVE arguments: 200 511</t>
        <t>MOVF: 510 511</t>
        <t>MOVF arguments: 200 511</t>
        <t>NAME: 510 511</t>
        <t>NAME arguments: 200 511</t>
        <t>NOOP: 200</t>
        <t>RETR: 510 511</t>
        <t>RETR arguments: 199 200 511</t>
        <t>SLCT: 510 511</t>
        <t>SLCT arguments: 200 511</t>
        <t>SPAM: 510 511</t>
        <t>SPAM arguments: 200 511 512</t>
        <t>STAG: 510 511</t>
        <t>STAG arguments: 200 511</t>
        <t>STAT: 200 512</t>
        <t>STOR: 200 410 511</t>
        <t>other: 510</t>
      </section>
      <section title="Not-selected State" toc="default">
        <t>LIST: 200</t>
        <t>LIST arguments: 200 511</t>
        <t>SLCT: 510 511</t>
        <t>SLCT arguments: 200 511</t>
        <t>other: 510</t>
      </section>
    </section>
    <section title="Example of Conversations" toc="default">
      <section title="Successful connection and authentication" toc="default">
        <t>
          <figure align="center" anchor="Example_1">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
S: 200 Welcome
C: AUTH PLAIN
S: 200 OK Send USER
C: USER account
S: 200 OK Send PASS
C: PASS password
S: 200 OK Authenticated
C: STAT
S: .PATH /INBOX
S: .TYPE MESG
S: .TAGS RESERVED
S: .TOTAL 10
S: .NEW 2
S: 200 OK Folder status displayed
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Successful connection but unsuccessful authentication" toc="default">
        <t>
          <figure align="center" anchor="Example_2">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
S: 200 Welcome
C: AUTH PLAIN
S: 200 OK Send USER
C: USER account
S: 200 OK Send PASS
C: PASS password
S: 511 WRONG user/password pair
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Connection refused" toc="default">
        <t>
          <figure align="center" anchor="Example_3_1">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
S: 531 Your IP is blacklisted
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_3_2">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
S: 410 Too many connections, please retry later
            ]]></artwork>
            <postamble></postamble>
          </figure>
          <figure align="center" anchor="Example_3_3">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
S: 401 Internal error, the server has an error in its configuration
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Find what folders are available with messages" toc="default">
        <t>
          <figure align="center" anchor="Example_4">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: LIST /*
S: .MESG /INBOX
S: .MESG /TRASH
S: .CALE /CALENDAR
S: 200 OK LIST completed (3 matches)
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Find all entries available in a folder" toc="default">
        <t>
          <figure align="center" anchor="Example_5">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SLCT /INBOX
S: 200 OK Folder selected
C: FIND
S: 110 OK SEND filter definition (end it with an empty line)
C:
S: .UIDx1230
S: .UIDx1231
S: .UIDx1234
S: .UIDx1235
S: .UIDx2340
S: 200 OK FIND completed (5 matches)
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Retrieve a message" toc="default">
        <t>
          <figure align="center" anchor="Example_6">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SLCT /INBOX
S: 200 OK Folder selected
C: FIND
S: 110 OK SEND filter definition (end it with an empty line)
C: TAG NEW IS header/subject = 'Newsletter from Example.com'
C:
S: .UIDx1234
S: .UIDx1235
S: .UIDx2340
S: 200 OK FIND completed (3 matches)
C: RETR UIDx1234
S: .<message><header>
S: .<from>HCCP&lt;news@example.com&gt;</from>
S: .<to>newsletter@localhost.localdomain</to>
S: .<subject>HCCP Newsletter</subject>
S: .</header><body>
S: .<text>This is your weekly newsletter.</text>
S: .</body></message>
S: 200 OK RETR completed
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Retrieve a contact" toc="default">
        <t>
          <figure align="center" anchor="Example_7">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SLCT /CONTACT
S: 200 OK Folder selected
C: FIND
S: 110 OK SEND filter definition (end it with an empty line)
C: OR REGEX vcard/fn/text = 'RADU.*?'
C:    REGEX vcard/fn/text = '.*? Iulian'
C:
S: .CONx0001
S: 200 OK FIND completed (1 match)
C: RETR CONx0001
S: .<vcards xmlns="urn:ietf:params:xml:ns:vcard-4.0">
S: .    <vcard>
S: .      <fn><text>Iulian Radu</text></fn>
S: .      <n>
S: .        <surname><text>Radu</text></surname>
S: .        <given><text>Iulian</text></given>
S: .        <suffix>
S: .          <text>Dipl.-Ing.</text>
S: .        </suffix>
S: .      </n>
S: .      <sex>1</sex>
S: .      <lang>
S: .        <parameters><pref>1</pref></parameters>
S: .        <language-tag>de</language-tag>
S: .      </lang>
S: .      <org>
S: .        <parameters><type>work</type></parameters>
S: .        <text>Example Com</text>
S: .      </org>
S: .      <email>
S: .        <parameters><type>work</type></parameters>
S: .        <text>iulian.radu@gmx.at</text>
S: .      </email>
S: .      <class>PUBLIC</class>
S: .   </vcard>
S: .</vcards>
S: 200 OK RETR completed
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Retrieve an event" toc="default">
        <t>
          <figure align="center" anchor="Example_8">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SLCT /CALENDAR
S: 200 OK Folder selected
C: FIND
S: 110 OK SEND filter definition (end it with an empty line)
C: OR IS vcalendar/components/vevent/properties/location = 'Wien'
C: IS vcalendar/components/vevent/properties/uid/text =
C:       'uidx1234@example.com'
C:
S: .EVNx0001
S: 200 OK FIND completed (1 match)
C: RETR EVNx0001
S: .<icalendar xmlns="urn:ietf:params:xml:ns:icalendar-2.0">
S: .    <vcalendar>
S: .        <properties>
S: .            <prodid>
S: .                <text>-//agap/calender//NONSGML v1.0//EN</text>
S: .            </prodid>
S: .            <version><text>2.0</text></version>
S: .        </properties>
S: .        <components>
S: .            <vevent>
S: .                <properties>
S: .                    <location>Vienna</location>
S: .                    <dtstamp>
S: .                        <date-time utc='yes'>
S: .                            <year>2010</year>
S: .                            <month>1</month>
S: .                            <day>31</day>
S: .                            <hour>11</hour>
S: .                            <minute>0</minute>
S: .                            <second>0</second>
S: .                        </date-time>
S: .                    </dtstamp>
S: .                    <dtstart>
S: .                        <date>
S: .                            <year>2010</year>
S: .                            <month>11</month>
S: .                            <day>2</day>
S: .                            <hour>21</hour>
S: .                            <minute>30</minute>
S: .                            <second>0</second>
S: .                        </date>
S: .                    </dtstart>
S: .                    <dtend>
S: .                        <date>
S: .                            <year>2010</year>
S: .                            <month>11</month>
S: .                            <day>2</day>
S: .                        </date>
S: .                    </dtend>
S: .                    <summary>
S: .                        <text>An event in Wien.</text>
S: .                    </summary>
S: .                    <uid>
S: .                        <text>uidx1234@example.com</text>
S: .                    </uid>
S: .                </properties>
S: .            </vevent>
S: .        </components>
S: .    </vcalendar>
S: .</icalendar>
S: 200 OK RETR completed
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Store a message" toc="default">
        <t>
          <figure align="center" anchor="Example_9">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SLCT /OUTBOX
S: 200 OK Folder selected
C: STOR
S: 110 Send the message ended with an empty line
C: <message><header>
C: <from>HCCP&lt;news@example.com&gt;</from>
C: <to>newsletter@localhost.localdomain</to>
C: <subject>HCCP Newsletter</subject>
C: </header><body>
C: <text>This is your weekly newsletter.</text>
C: </body></message>
C:
S: 200 OK Message stored (UID is UIDx1234)
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Store a contact" toc="default">
        <t>
          <figure align="center" anchor="Example_10">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SLCT /CONTACT
S: 200 OK Folder selected
C: STOR
S: 110 Send the contact info ended with an empty line
C: <vcards xmlns="urn:ietf:params:xml:ns:vcard-4.0">
C:     <vcard>
C:       <fn><text>Iulian Radu</text></fn>
C:       <n>
C:         <surname><text>Radu</text></surname>
C:         <given><text>Iulian</text></given>
C:         <suffix>
C:           <text>Dipl.-Ing.</text>
C:         </suffix>
C:       </n>
C:       <sex>1</sex>
C:       <lang>
C:         <parameters><pref>1</pref></parameters>
C:         <language-tag>de</language-tag>
C:       </lang>
C:       <org>
C:         <parameters><type>work</type></parameters>
C:         <text>Example Com</text>
C:       </org>
C:       <email>
C:         <parameters><type>work</type></parameters>
C:         <text>iulian.radu@gmx.at</text>
C:       </email>
C:       <class>PUBLIC</class>
C:    </vcard>
C: </vcards>
C:
S: 200 OK Contact stored (UID is UIDx1234)
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Store an event" toc="default">
        <t>
          <figure align="center" anchor="Example_11">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: SLCT /CALENDAR
S: 200 OK Folder selected
C: STOR
S: 110 Send the contact info ended with an empty line
C: <icalendar xmlns="urn:ietf:params:xml:ns:icalendar-2.0">
C:     <vcalendar>
C:         <properties>
C:             <prodid>
C:                 <text>-//agap/calender//NONSGML v1.0//EN</text>
C:             </prodid>
C:             <version><text>2.0</text></version>
C:         </properties>
C:         <components>
C:             <vevent>
C:                 <properties>
C:                     <location>Vienna</location>
C:                     <dtstamp>
C:                         <date-time utc='yes'>
C:                             <year>2010</year>
C:                             <month>1</month>
C:                             <day>31</day>
C:                             <hour>11</hour>
C:                             <minute>0</minute>
C:                             <second>0</second>
C:                         </date-time>
C:                     </dtstamp>
C:                     <dtstart>
C:                         <date>
C:                             <year>2010</year>
C:                             <month>11</month>
C:                             <day>2</day>
C:                             <hour>21</hour>
C:                             <minute>30</minute>
C:                             <second>0</second>
C:                         </date>
C:                     </dtstart>
C:                     <dtend>
C:                         <date>
C:                             <year>2010</year>
C:                             <month>11</month>
C:                             <day>2</day>
C:                         </date>
C:                     </dtend>
C:                     <summary>
C:                         <text>An event in Wien.</text>
C:                     </summary>
C:                     <uid>
C:                         <text>uidx1234@example.com</text>
C:                     </uid>
C:                 </properties>
C:             </vevent>
C:         </components>
C:     </vcalendar>
C: </icalendar>
C:
S: 200 OK Event stored (UID is UIDx1234)
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Mark messages as SPAM an move them in a new folder" toc="default">
        <t>
          <figure align="center" anchor="Example_12">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: STAG UIDx1000 + SPAM
S: 200 OK STAG completed
C: SPAM UIDx1000 header/subject
S: 200 OK Message added to the spam database
C: MAKE MESG /Archive-SPAM
S: 200 OK Folder created
C: FMOV /Archive-SPAM
S: 110 OK SEND filter definition (end it with an empty line)
C: TAG SPAM
C:
S: 200 OK FMOV completed (19 matches)
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Create a filter folder, find the matching entries of the filter and read its filter definition" toc="default">
        <t>
          <figure align="center" anchor="Example_13">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: MAKE FILT /New-messages
S: 200 OK Folder created
C: STOR
S: 110 Send the filter content ended with an empty line
C: <filter>
C: <folders><folder>/INBOX</folder></folders>
C: <rules>
C: <and><not><tag>SEEN</tag></not></and>
C: </rules>
C: </filter>
C:
S: 200 OK Filter stored
C: SLCT /New-messages
S: 200 OK Folder selected
C: FIND
S: .UIDx1234 /INBOX
S: .UIDx1234 /Trash
S: .UIDx1235 /Trash
S: 200 OK FIND completed (3 matches)
C: RETR
S: .<filter>
S: .<folders><folder>/INBOX</folder></folders>
S: .<rules><not><tag>SEEN</tag></not></rules>
S: .</filter>
S: 200 OK RETR completed
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Create a folder and rename it" toc="default">
        <t>
          <figure align="center" anchor="Example_14">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: MAKE MESG /My/NewFolder
S: 200 OK Folder created
C: NOOP
S: 200 NOOP OK
C: SLCT /My/NewFolder
S: 200 OK Selected /My/NewFolder
C: NAME AFolder
S: 200 OK /My/NewFolder --> /My/AFolder
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Find the status for a folder" toc="default">
        <t>
          <figure align="center" anchor="Example_15">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: LIST /*
S: .MESG /INBOX
S: .MESG /TRASH
S: .CALE /CALENDAR
S: 200 OK LIST completed (3 matches)
C: SLCT /INBOX
S: 200 OK SELECT completed
C: STAT
S: .PATH /INBOX
S: .TYPE MESG
S: .TAGS RESERVED
S: .TOTAL 10
S: .NEW 5
S: 200 OK Folder status displayed
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Set and check the tags of a message" toc="default">
        <t>
          <figure align="center" anchor="Example_16">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: STAG UIDx1000 + SEEN
S: 200 OK STAG completed
C: GTAG UIDx1000
S: UIDx1000 SEEN SPAM
S: 200 OK GTAG completed
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
      <section title="Find messages that can be SPAM and delete them" toc="default">
        <t>
          <figure align="center" anchor="Example_17">
            <preamble></preamble>
            <artwork align="left"><![CDATA[
C: FTAG + SPAM
S: 110 OK SEND filter definition (end it with an empty line)
C: REGEX header/subject = '[Vv][i1]agra'
C:
S: 200 OK FTAG completed (10 matches)
C: FDEL
S: 110 OK SEND filter definition (end it with an empty line)
C: UID 00000001:00001000 AND TAG SPAM
C:
S: 200 OK FDEL completed (10 matches)
            ]]></artwork>
            <postamble></postamble>
          </figure>
        </t>
      </section>
    </section>
  </middle>
  <!--   ***** BACK MATTER *****  -->
  <back>
    <!--  References split into informative and normative  -->
    <references title="Normative References">
      &RFC2119;
      &RFC2629;
      &RFC3552;
    </references>
    <references title="Informative References">
      <!--  Here we use entities that we defined at the beginning.  -->
      &RFC2821;
      &RFC3921;
      &RFC5545;
      &RFC3629;
	  &RFC1952;
      &I-D.daboo-et-al-icalendar-in-xml;
      &I-D.ietf-vcarddav-vcardxml;
    </references>
  </back>
</rfc>
