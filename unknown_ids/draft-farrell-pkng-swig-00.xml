<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="exp" docName="draft-farrell-pkng-swig-00" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="PKNG SWIG">Sign What I'm Given (SWIG)</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Stephen Farrell" initials="S." surname="Farrell">
      <organization>Trinity College Dublin</organization>

      <address>
        <postal>
          <street>Trinity College</street>

          <!-- Reorder these if your country does things differently -->

          <city>Dublin</city>

          <region></region>

          <code>2</code>

          <country>Ireland</country>
        </postal>

        <phone>+353-1-896-2354</phone>

        <email>stephen.farrell@cs.tcd.ie</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <author fullname="Leif Johansson" initials="L." surname="Johansson">
      <organization>SUNET/NORDUnet</organization>

      <address>
        <postal>
          <street>Tulegatan 11</street>

          <city>Stockholm</city>

          <region></region>

          <code></code>

          <country>Sweden</country>
        </postal>

        <phone>+46703419886</phone>

        <facsimile></facsimile>

        <email>leifj@sunet.se</email>

        <uri></uri>
      </address>
    </author>

    <date month="November" year="2010" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>Internet Research Task Force</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>PKNG public key infrastructure</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>Current Internet protocols tend to be based on either X.509 based
      PKI, or Kerberos. Both have limitations and age-related issues. In this
      draft, we outline a possible approach to providing similar, and
      additional, functionality based on an abstract device that always signs
      whatever its given, and that may additionally annotate or modify its
      input in order to fulfill the security needs of other protocols. This
      draft describes a SWIG service and how it can be used to conduct
      research into a number of important problems in Internet trust and
      identity management today.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The Internet of today is a low-trust environment. The IRTF has
      identified a need to support research in this area. This draft attempts
      to describe a new protocol that is intended as a tool for
      experimentation and research in this field. While some current protocols
      (eg X.509 or kerberos) could be adopted to provide similar capabilities
      as SWIG, here we present a clean-slate approach to some of those
      problems.</t>

      <t>Current protocols and solutions in this space often focuses on the
      credentials used to perform basic functions (eg signing or encryptions).
      The operation of signing and returning a signed representation of an
      object is at the heart of many protocols. SWIG attemts to bring together
      experience from (arguably) successful security protocols while
      refocusing on the signing operation rather than on key and credentials
      formats. The authors hope that this will inspire research into a few
      problems that we believe are important to the future of the
      Internet:</t>

      <t><list style="symbols">
          <t>How can we build a trust-model for the Internet that takes
          multiple overlapping rings-of-trust into account?</t>

          <t>How can applications become involved with and informed about
          trust-related decisions made by lower layers?</t>

          <t>Internet networking today is driven by the process managing
          peering relationships in combination with the applicationof local
          policy. Is there a way to build a trust infrastructure for the
          Internet that mimics this model?</t>

          <t>How can privacy-protection be supported by default, rather than
          as an add-on to protocols?</t>
        </list></t>

      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </section>

    <section title="SWIG Service Overview">
      <t>The reader will undoubtedly notice that the SWIG model is
      conceptually similar to a lot of protocols that have been proposed,
      implemented and even in some cases widely deployed. That is entierly
      reasonable and indeed is an important aspect of SWIG: it does not
      fundamentally break the model for signing that is assumed by
      applications, but attempts to enhance those models. </t>

      <t>Furthermore the authors hope that by providing a simple extensible
      architecture it will be easier in the future for sites and individuals
      to consolidate signing operations to use a smaller set of well-managed
      keys. In a way SWIG can be considered a very simple protocol-version of
      such ABIs as PKCS#11 or CSP.</t>

      <t>A SWIG is an abstract service endpoint that observes a set of simple
      semantics. An instance of a SWIG service MUST sign what it is given, so
      the basic mode of interaction is that a client sends some data, and
      receives in return a signed representation of that data signed by the
      SWIG instance private key.</t>

      <t>The response MAY include additional data or MAY include a transformed
      version (e.g. encrypted) of the request data. How a given instance
      handles this is specific to the instance however it is expected that
      implementations of SWIG allow for easy deployment of new transformations
      through some form of plugin architecture.</t>

      <t>It is important to understand that most common instances of SWIG will
      not sign a 1-1 representation of the input request. Instead a SWIG
      instance will probably sign a representation of the request, eg by
      resolving the request as an identifier referencing some internal
      datastore.</t>

      <t>Every SWIG instance MUST respond to certain specific requests, e.g.
      to provide its public key, or identifiers for the transformations it
      supports on input data.</t>

      <t>If a requestor wishes a SWIG service to apply a specific transform to
      its input data, then it identifies that transform in its request, using
      an identifier, that can be retrieved as described in the previous
      paragraph. Specific transforms and their identifiers SHOULD be defined
      in open specifications.</t>
    </section>

    <section title="Use Cases">
      <t>This section explains how various use-cases can be suppored via
      SWIG.</t>

      <section title="X.509-like Infrastructure">
        <t>An X.509-like infrastructure could be built from a set of SWIG
        instances by having SWIG instances issue responses that are simlar to
        (or contain) public key certificates. Chains of certificate-like
        things can be built in the same manner, as can OCSP-like responders,
        and LDAP-like schemes for finding public keys. In ways, SWIG could
        resemble XKMS, in how it maps to X.509 based PKI.</t>
      </section>

      <section title="Application Layer Signing">
        <t>If a message source requires an application-layer signature that
        can be verified by a relying party, then it can send the application
        layer message to a SWIG instance, and the SWIG instance's signature
        can be directly used in the application layer protocol.</t>
      </section>

      <section title="Privacy Enhancing SWIGs">
        <t>A SWIG instance could support a transform that enhances privacy,
        for example, if personally identifying input data is encrypted by the
        SWIG, using a key known only to the SWIG, and the relying party has to
        request that from the SWIG (if necessary, for application purposes).
        The SWIG instance could also provide the RP with a "fuzzed" version of
        the identiying information, for example, only identifying the country
        of the original requestor.</t>
      </section>

      <section title="SAML Metadata Publisher">
        <t>A SAML Metadata aggregator/publisher can be described as a SWIG
        instance that accepts requests that contain as input a set of entityID
        strings and returns a signed &lt;EntityDescriptors/&gt; element
        containing the corresponding set of metadata as known by the SWIG
        instance.</t>
      </section>
    </section>

    <section title="SWIG Protocol">
      <t>There may well turn out to be a need for multiple bindings of the
      SWIG protocol. This section describes a very simple RESTful HTTP-based
      approach:</t>

      <section title="REST">
        <t>A SWIG endpoint is identified by a URI. The URI may contain a
        public identifier representing the public key used in signing
        responses (eg a key hash). A SWIG endpoint is an HTTP server that
        understands the SWIG headers.</t>

        <t>A SWIG request is an HTTP request (POST or GET) that contains at
        least the SWIG-Version header and optionally the SWIG-Transform
        header. Each SWIG endpoint MUST support the set of standard
        transformations listed in the following section. A special case is the
        Capabilities transform: a SWIG endpoint MUST treat the absense of a
        SWIG-Transform header as if the SWIG-Transform contained only the
        'capabilities' string.</t>

        <t>A SWIG response is an HTTP response that contains at least the
        SWIG-Version and optionally (if the 'capabilities' transform was
        invoked) the SWIG-Transform header. The response will also include a
        signed representation of the requested data which will be communicated
        in the HTTP response body.</t>

        <section title="SWIG HTTP Headers">
          <t>SWIG-Transform: each value of this multivalued header identifies a
          transform that is to be applied in order to produce the result that
          the SWIG instance will sign and return in the response. This header
          is also used to return the set of supported transforms for the
          'capabilities' transform. TODO: figure out if we need mime-types
          and/or mime-type options for this.</t>

          <t>SWIG-Version: a version identifying the version of the SWIG
          protocol. This MUST be the literal string "1.0" for this version of
          the SWIG protocol.</t>
        </section>
      </section>
    </section>

    <section title="SWIG Standard Transformations">
      <t>Transformations are identified using strings that are compared as
      case-insensitive UTF-8 strings.</t>

      <section title="Capabilities">
        <t>The 'cababilities' transform MUST cause the SWIG endpoint to return
        a response containing the signer public key (TBD: figure out how to
        determine which representation to return to the requestor) along with
        a list of supported transforms.</t>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA so far. But if it doesn't die,
      we'll want a port, maybe an SRV name and a registry for transform
      identifiers.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>There will be a bunch, no doubt.</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->

      &RFC2119;
    </references>
  </back>
</rfc>
