<?xml version="1.0" encoding="UTF-8"?>


<!DOCTYPE rfc SYSTEM "/export/localhome/locbll/netconf/rfcAuthoring/xml2rfc-1.34pre3/rfc2629.dtd" 
[<!ENTITY xsdspec PUBLIC '' '/export/localhome/ethbll/netconf/rfcAuthoring/bibxml4/reference.W3C.REC-xmlschema-2-20041028.xml'>]>

<rfc category="std" docName="draft-ietf-netconf-with-defaults-03" ipr="trust200902">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc strict="yes"?>
<?rfc comments="no" ?>
<?rfc inline="no" ?>
<?rfc editing="no" ?>
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="no" ?>
<?rfc compact="yes"?>
<?rfc iprnotified="no"?>

 <front>
  <title abbrev="with-defaults">
   With-defaults capability for NETCONF
  </title>
  <author fullname="Andy Bierman" initials="A.B."
   surname="Bierman">
   <organization>Netconf Central</organization>
   <address>
    <postal>
     <street></street>
     <city>Simi Valley</city>
     <region>CA</region>
     <code></code>
     <country>USA</country>
    </postal>
    <email>andy@netconfcentral.com</email>
   </address>
  </author>
  
  <author fullname="Balazs Lengyel" initials="B. L."
   surname="Lengyel">
   <organization>Ericsson</organization>
   <address>
    <postal>
     <street></street>
     <city>Budapest</city>
     <region></region>
     <code></code>
     <country>Hungary</country>
    </postal>
    <email>balazs.lengyel@ericsson.com</email>
   </address>
  </author>
  
  <date year="2009" month="August"  day="05"/>
  <area>OPS</area>
  <workgroup>NETCONF</workgroup>
  <keyword>with-defaults</keyword>
  <keyword>XML</keyword>
  <abstract>
   <t>
    The NETCONF protocol defines ways to read configuration data
    from a NETCONF server. Part of this data is not set by the NETCONF client, 
    but rather a default value is used. In many situations the 
    NETCONF client has a priori knowledge about default data, so the NETCONF 
    server does not need to send it to the client. In other situations the 
    NETCONF manger will need this data as part of the NETCONF &lt;rpc-reply> messages. 
    This document defines a capability-based extension to 
    the NETCONF protocol that allows the NETCONF client to control whether 
    default values are part of NETCONF &lt;rpc-reply> messages.
   </t>
  </abstract>
 </front>

 <middle>
  <section title="Introduction">
   <t>
    The NETCONF protocol defines ways to read configuration data
    from a NETCONF server. Part of this data is not set by the NETCONF client, 
    but rather a default value is used. In many situations the 
    NETCONF client has a priori knowledge about default data, so the NETCONF 
    server does not need to send it to the client. A priori knowledge can be 
    e.g., a document formally describing the data models supported by the NETCONF server. 
    <vspace blankLines="1"/>
    A networking device may have a large number of default values. 
    Often the default values are not interesting or specifically defined 
    with a "reasonable" value, so that the management user does not have to handle them.
    For these reasons it is quite common for networking devices to
    suppress the output of parameters having the default value.
    <vspace blankLines="1"/>
    However there are use-cases when a NETCONF client 
    will need the default data from the node:
    <vspace blankLines="1"/>
    <list style="symbols">
     <t>The management application often needs a single, definitive and complete set of configuration 
      values that determine how the a networking device works.</t>
     <t>Documentation about default values can be  unreliable or unavailable.</t>
     <t>Some management applications might not have the capabilities to 
      correctly parse and interpret formal data models.</t>
     <t>Human users might want to understand the received 
      data without consultation of the documentation.</t>
    </list>
    <vspace blankLines="1"/>
    In all theses cases the NETCONF client will need default data as part of the NETCONF &lt;rpc-reply> messages. 
    <vspace blankLines="1"/>
    This document defines a capability-based extension to 
    the NETCONF protocol that allows the NETCONF client to control whether 
    default data is part of NETCONF &lt;rpc-reply> messages.
   </t>
  <section title="Terminology">
    <section title="Requirements Notation">
     <t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
      "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
      and "OPTIONAL" in this document are to be interpreted as
      described in <xref target="RFC2119"/>.
     </t>
    </section>
   <section title="NETCONF Terms" anchor="NetconfTerms">
     <t>
      <list style="symbols">
       <t>Default data: Data that is set or used by the NETCONF 
        server whenever the NETCONF client does not provide a specific 
        value for the relevant data item. 
        Default values SHOULD be specified in documents describing the 
        data models supported by the NETCONF server.
        <vspace blankLines="1"/>
       </t>       
        <t>Explicitly set default data: Data that is explicitly set by the NETCONF client to its default value.
         Some servers MAY treat explicitly set default data as simple 
         default data, as they may not be able to differentiate between them.</t>
      </list>      
     </t>     
     <t>
      In addition the following terms are defined in RFC 4741 and are not redefined here:
      <list style="symbols">
       <t>application</t>
       <t>client</t>
       <t>operation</t>
       <t>RPC</t>
       <t>RPC request</t>
       <t>RPC response</t>
       <t>server</t>
      </list>
     </t>     
    </section>
  </section>
   <section title="Current handling of default data" anchor="basicHandling">
    <t>
     <xref target="NETCONF"/> does not define whether default data is part of the
     datastore/data model, or if it is meta-data that influences the
     behavior of the NETCONF server, but is not actually part of
     the datastore.  This document is intended to support either
     type of implementation, without deciding which approach is better.      
     <vspace blankLines="1"/>
     As a consequence of this issue,  
     NETCONF servers that do not implement the :with-defaults capability may or may not 
     return default data in NETCONF &lt;rpc-reply> messages. 
     <vspace blankLines="1"/>
     Different NETCONF servers report default data in different ways. This 
     document specifies the following three basic modes:
     <vspace blankLines="1"/>
     <list style="symbols">
      <t>report-all: All default data is always reported.</t>
      <t>trim: Values are not reported if they match the default.</t>
      <t>explicit: Report values if they are explicitly set. For state data this has the same effect as report-all</t>
     </list>  
    </t>
   </section>   
  </section>
  <section title="With-defaults Capability">
   <section title="Overview"><t>
    The :with-defaults capability indicates that the NETCONF server makes it possible 
    for the NETCONF client to control whether default data is part of NETCONF 
    &lt;rpc-reply> messages. The capability affects both 
    configuration and state data (while acknowledging that the usage of default 
    values for state data is less prevalent). 
    Sending of default data is controlled for each individual operation separately. 
    <vspace blankLines="1"/>
    A NETCONF servers implementing the :with-defaults capability MUST indicate 
    its basic behavior, whether it sends default data in 
    the absence of any specific request from the NETCONF client; and MUST support the 
    'report-all' handling mode and MAY support other modes.  
   </t>
   </section>
   <section title="Dependencies"><t>None</t></section>
   <section title="Capability Identifier" anchor="capabilityIdChapter">
    <t>
     urn:ietf:params:netconf:capability:with-defaults:1.0
     <vspace blankLines="1"/>
     The identifier MUST have a parameter: "basic". This indicates how 
     the server reports default data in &lt;rpc-reply> messages, in the case the 
     client does not specify the required behavior in the &lt;rpc> request.
     The allowed values of this parameter are 
     report-all, trim, explicit as listed in <xref target="basicHandling"/>. 
    </t>
    <t>
     The identifier MAY have another parameter: "also-supported". This indicates what 
     other default handling modes does the server support. 
     The value of the parameter is a comma separated list of one or two modes 
     that are supported beside the mode indicated in the basic parameter
     Possible modes are taken from the list in <xref target="basicHandling"/>.
    </t>
    <t>Example:
     <vspace blankLines="1"/>
     urn:ietf:params:netconf:capability:with-defaults:1.0?basic=report-all    
     <vspace blankLines="1"/>
     urn:ietf:params:netconf:capability:with-defaults:1.0?basic=report-all&amp;also-supported=trim,explicit    
    </t>
   </section>
   <section title="New Operations"><t>None</t></section>  
   <section title="Modifications to Existing Operations">
    <t>
     A new &lt;with-defaults> XML child element is added to the method-name element. 
     This is the element that indicates the type of the 
      operation e.g. &lt;get>, &lt;get-config> or &lt;copy-config>.
      If the  &lt;with-defaults> element is present, it controls the 
      reporting of default data. The server MUST return 
      default data in the NETCONF &lt;rpc-reply> messages according to the value of the element.
     </t>
     <t>
      Allowed values of the with-defaults element are taken from 
      the list in <xref target="basicHandling"/>. The allowed values are 
      restricted to the values that the device indicates 
      support for in the with-defaults capability in the basic and also-supported parameters.       
      <vspace blankLines="1"/>
      If the &lt;with-defaults> element is not present, 
      the server follows its basic behavior as indicated 
      by the capability identifier's parameter see <xref target="capabilityIdChapter"/>.
     </t>
    <t>    
     Affected operations:
     <list style="symbols">
      <t>&lt;get></t>
      <t>&lt;get-config></t>
      <t>&lt;copy-config></t>
     </list>
     <vspace blankLines="1"/>
     &lt;copy-config> is only affected if the target of the operation is a URL. 
     If the target is a NETCONF datastore (running, candidate or startup) the capability has no effect.
     <vspace blankLines="1"/>
     Other operations that return configuration data SHOULD also handle default 
     data according to the rules set in this document, and explicitly state this in their documentation. 
     If this is not specified in the document defining the respective operation, 
     the default handling rules described herein do not affect these operations.
    </t>
    <t>
     The following example shows a &lt;get-config&gt; operation
     which is using the 'with-defaults' element.
     The client is retrieving the 'interfaces' object,
     defined in the example.com data model.
     (In this simple example, the 'name' field is defined
     as the key, and the 'mtu' field is the only other
     data in the &lt;interface&gt; element).
     The default value of mtu is  '1500'. The basic default handling for the server is "trim".
     As the 'with-defaults'
     element has the value 'report-all', the mtu is returned not just for eth0 but also for eth1.
    </t>   
    <t>
     <figure anchor="with_defaults_example">
      <artwork>
       <![CDATA[
    <rpc message-id="102"
         xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
      <get-config>
        <source>
           <running/>
        </source>
        <filter type="subtree">
          <interfaces xmlns="http://example.com/interfaces/1.2"/>
        </filter>
        <with-defaults 
          xmlns="urn:ietf:params:netconf:capability:with-defaults:1.0">
          report-all
        </with-defaults>
      </get-config>
    </rpc>
 
    <rpc-reply message-id="102" 
         xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
      <data>
        <interfaces xmlns="http://example.com/interfaces/1.2">
          <interface>
            <name>eth0</name>
            <mtu>8192</mtu>
          </interface>
          <interface>
            <name>eth1</name>
            <mtu>1500</mtu>
          </interface>
        </interfaces>
      </data>
    </rpc-reply>
 ]]>
      </artwork>
     </figure>
    </t>
   </section>
  </section>
  <section title="Interactions with Other Capabilities"><t>None</t></section>  
  <section title="Data Model XSD" anchor="XSD">
   <t>
    This section contains an XML Schema Definition
    <xref target="W3C.REC-xmlschema-2-20041028"/> which
    defines the XML syntax associated for the with-defaults XML element.
   </t>

   <t>
    <figure>
     <artwork>
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns="urn:ietf:params:netconf:capability:with-defaults:1.0"
  targetNamespace="urn:ietf:params:netconf:capability:with-defaults:1.0"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  elementFormDefault="qualified" attributeFormDefault="unqualified"
  xml:lang="en">
 
  <xs:annotation>
    <xs:documentation>
      Schema defining the with-defaults element.
      
      Organization: "IETF NETCONF Working Group"
      Contact Info: balazs.lengyel@ericsson.com
    </xs:documentation>
  </xs:annotation>

  <xs:attribute name="with-defaults" >
    <xs:simpleType>
      <xs:restriction base="xs:string">
        <xs:enumeration value="report-all"/>
        <xs:enumeration value="trim"/>
        <xs:enumeration value="explicit"/>
      </xs:restriction>
    </xs:simpleType>
  </xs:attribute>

</xs:schema>
]]>
     </artwork>
    </figure>
   </t>
  </section>
  <section anchor="IANA" title="IANA Considerations">
   <t>This document registers one capability identifier URN from the 
    "Network Configuration Protocol (NETCONF) Capability URNs" registry, 
    and registers the same URN for the NETCONF XML namespace in 
    the "IETF XML registry" <xref target="RFC3688"></xref>. 
    Note that the capability URN is compliant to <xref target="NETCONF"></xref> section 10.3.</t>
   <texttable>
    <ttcol  align="left" width="20%">Index</ttcol>
    <ttcol align="left">Capability Identifier</ttcol>
    <c>:with-defaults</c>
    <c>urn:ietf:params:netconf:capability:with-defaults:1.0</c>
   </texttable>
  </section>
  <section anchor="Security" title="Security Considerations">
   <t>
    This document defines a minor extension to existing
    NETCONF protocol operations.  it does not introduce
    any new or increased security risks into the management system.
   </t>
   <t>
    The 'with-defaults' capability
    provides client controls over the retrieval of particular
    types of XML data from a configuration database.
    They only suppress data that can already be retrieved
    with the standard protocol operations, and do not
    add any data to the configuration database.
   </t>
  </section>  
  <section title="Open Issues">
   <section title="Other default handling modes in the real world?">
    <t>
     Are there any other basic default handling modes out there we need to include? 
    </t>
   </section>
  </section>
  <section title="Appendix A -  YANG Module for with-defaults (non-normative)">
   <t>The following YANG module defines the addition of the with-defaults element 
    to the &lt;get>,  &lt;get-config> and &lt;copy-config> operations. 
    The YANG language is defined in <xref target="I-D.ietf-netmod-yang"/>.
    The above operations are defined in YANG in <xref target="I-D.ietf-netconf-4741bis"/>.
    <figure>
     <artwork><![CDATA[
module ietf-netconf-with-defaults {

   namespace "urn:ietf:params:netconf:capability:with-defaults:1.0";

   prefix nwd;

   // for the uri data type
   import ietf-netconf { prefix nc; }

   description
    "This module defines a capability-based extension to the 
     NETCONF protocol that allows the NETCONF client to control
     whether default values are part of NETCONF 
     <rpc-reply> messages.

     Copyright (c) 2009 IETF Trust and the persons identified as
     the document authors.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, are permitted provided that the
     following conditions are met:

     - Redistributions of source code must retain the above
       copyright notice, this list of conditions and the
       following disclaimer.

     - Redistributions in binary form must reproduce the above
       copyright notice, this list of conditions and the
       following disclaimer in the documentation and/or other
       materials provided with the distribution.

     - Neither the name of Internet Society, IETF or IETF
       Trust, nor the names of specific contributors, may be
       used to endorse or promote products derived from this
       software without specific prior written permission.

     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
     CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED
     WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
     PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
     INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
     GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
     BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
     OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     POSSIBILITY OF SUCH DAMAGE.

     This version of this YANG module is part of RFC XXXX; see
     the RFC itself for full legal notices.";

   // RFC Ed.: replace XXXX with actual RFC number and remove this note

   reference "RFC XXXX";
   
   // RFC Ed.: replace XXXX with actual RFC number and remove this note

   // reference "draft-ietf-netconf-with-defaults-03.txt";

   // RFC Ed.: remove the reference statement above and this note.

   contact
     "Send comments to the NETCONF WG mailing list.
      <netconf@ietf.org>";

   revision 2009-07-01 {
     description
       "Initial version";
   }
   
   // with-defaults capability defined as a feature
   feature with-defaults {
       description
         "NETCONF :with-defaults capability;
          If the agent advertises the :with-defaults
          capability for a session, then this feature MUST
          also be enabled for that session.  Otherwise,
          this feature MUST NOT be enabled.";
       // RFC Ed.: replace XXXX with actual RFC number and
       // remove this note
       reference "RFC XXXX";
   }
   
   typedef with-defaults-mode-type {
      description 
        "Possible modes to report default data in 
         rpc-reply messages.";
      type enumeration {
         enum report-all {
             description 
               "All default data is always reported.";
         }
         enum trim {
             description 
               "Values are not reported if they match the default.";
         }
         enum explicit {
             description 
               "Report values if they are explicitly set.  
                For state data this has the same effect 
                as report-all";
         }
     }      
   }

   // extending the get-config operation
   augment /nc:get-config/nc:input {
       leaf with-defaults {
           type with-defaults-mode-type;
       }
   }

   // extending the get operation
   augment /nc:get/nc:input {
       leaf with-defaults {
           type with-defaults-mode-type;
       }
   }

   // extending the copy-congig operation
   augment /nc:copy-config/nc:input {
       leaf with-defaults {
           type with-defaults-mode-type;
       }
   }

}
                    ]]></artwork>
    </figure>
   </t>   
  </section>
  <section title="Appendix B  -  Change Log"> 
   <section title="02-03">
    <t>Clarifications</t>
    <t>YAM added</t>
    <t>Use the same URN for the capability and the XML namespace to 
     accommodate YANG, and avoid two separate URN/URIs being advertised 
     in the HELLO message, for such a small function.</t>
   </section>
   <section title="01-02">
    <t>report-all made mandatory</t>
    <t>Placeholder for YAM added, XSD will be removed when 4741 provides the NETCONF YAM</t>
    <t>with-defaults is valid for state data as well 
     (if state data has a defined default which might not be so frequent).
     The definition of explicit was modified for state data.
    </t>
   </section>
   <section title="00-01">
    <t>Changed value set of with-default capability and element</t>
    <t>Added version to URI</t>
   </section>
   <section title="-00">
    <t>Created from draft-bierman-netconf-with-defaults-01.txt</t>
    <t>
     It was decided by the NETCONF mailing list, that with-defaults should be a 
     sub-element of each affected operation. 
     While this violates the XSD of RFC4741 this is acceptable and follows 
     the ideas behind NETCONF and YANG.
     <vspace blankLines="1"/>
     Hopefully it will be clarified in the 4741bis RFC whether such extensions are allowed.
    </t>
   </section>
  </section>
  <section title="Acknowledgements">
   <t>Thanks to Martin Bjorklund, Sharon Chisholm, Phil Shafer, Juergen Schoenwaelder, Washam Fan and 
    many other members of the NETCONF WG for providing important input to this document.</t>
  </section>
 </middle>
 <back>
  <references title="Normative References">
    &xsdspec;
   <reference anchor='NETCONF'>
    <front>
     <title>NETCONF Configuration Protocol</title>
     <author initials='R.' surname='Enns' fullname='R. Enns'>
      <organization /></author>
     <date year='2006' month='December' />
     <abstract>
      <t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized on top of a simple Remote Procedure Call (RPC) layer. [STANDARDS TRACK]</t></abstract></front>    
    <seriesInfo name='RFC' value='4741' />
    <format type='TXT' octets='173914' target='ftp://ftp.isi.edu/in-notes/rfc4741.txt' />
   </reference>
   <reference anchor='RFC2119'>
    <front>
     <title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
     <author initials='S.' surname='Bradner' fullname='Scott Bradner'>
      <organization>Harvard University</organization>
      <address>
       <postal>
        <street>1350 Mass. Ave.</street>
        <street>Cambridge</street>
        <street>MA 02138</street></postal>
       <phone>- +1 617 495 3864</phone>
       <email>sob@harvard.edu</email></address></author>
     <date year='1997' month='March' />
     <area>General</area>
     <keyword>keyword</keyword>
     <abstract>
      <t>
       In many standards track documents several words are used to signify
       the requirements in the specification.  These words are often
       capitalized.  This document defines these words as they should be
       interpreted in IETF documents.  Authors who follow these guidelines
       should incorporate this phrase near the beginning of their document:
       
       <list>
        <t>
         The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
         NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
         "OPTIONAL" in this document are to be interpreted as described in
         RFC 2119.
        </t></list></t>
      <t>
       Note that the force of these words is modified by the requirement
       level of the document in which they are used.
      </t></abstract></front>
    
    <seriesInfo name='BCP' value='14' />
    <seriesInfo name='RFC' value='2119' />
    <format type='TXT' octets='4723' target='ftp://ftp.isi.edu/in-notes/rfc2119.txt' />
    <format type='HTML' octets='17491' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
    <format type='XML' octets='5777' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
   </reference>
   <reference anchor='RFC3688'>                
    <front>
     <title>The IETF XML Registry</title>
     <author initials='M.' surname='Mealling' fullname='M. Mealling'>
      <organization /></author>
     <date year='2004' month='January' />
     <abstract>
      <t>This document describes an IANA maintained registry for IETF standards which use 
       Extensible Markup Language (XML) related items such as Namespaces, 
       Document Type Declarations (DTDs), Schemas, and 
       Resource Description Framework (RDF) Schemas.</t></abstract></front>
    <seriesInfo name='BCP' value='81' />
    <seriesInfo name='RFC' value='3688' />
    <format type='TXT' octets='17325' target='ftp://ftp.isi.edu/in-notes/rfc3688.txt' />
   </reference>            
  </references>
  <references title="Informative References">
   
   <reference anchor='I-D.ietf-netmod-yang'>
    <front>
     <title>YANG - A data modeling language for NETCONF</title>
     
     <author initials='M' surname='Bjorklund' fullname='Martin Bjorklund'>
      <organization />
     </author>
     
     <date month='July' day='13' year='2009' />
     
     <abstract><t>YANG is a data modeling language used to model configuration and state data manipulated by the Network Configuration Protocol (NETCONF) protocol, NETCONF remote procedure calls, and NETCONF notifications.</t></abstract>
     
    </front>
    
    <seriesInfo name='Internet-Draft' value='draft-ietf-netmod-yang-07' />
    <format type='TXT'
     target='http://www.ietf.org/internet-drafts/draft-ietf-netmod-yang-07.txt' />
   </reference>
   <reference anchor='I-D.ietf-netconf-4741bis'>
    <front>
     <title>NETCONF Configuration Protocol</title>   
     <author initials='R' surname='Enns' fullname='Rob Enns'>
      <organization />
     </author>
     <author initials='M' surname='Bjorklund' fullname='Martin Bjorklund'>
      <organization />
     </author>     
     <author initials='J' surname='Schoenwaelder' fullname='Juergen  Schoenwaelder'>
      <organization />
     </author>     
     <author initials='A' surname='Bierman' fullname='Andy Bierman'>
      <organization />
     </author>     
     <date month='July' day='13' year='2009' />     
     <abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized on top of a simple Remote Procedure Call (RPC) layer.</t></abstract>     
    </front>    
    <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-4741bis-01' />
    <format type='TXT'
     target='http://www.ietf.org/internet-drafts/draft-ietf-netconf-4741bis-01.txt' />
   </reference>
  </references>  
 </back>
</rfc>

