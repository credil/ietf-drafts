<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC4506 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4506.xml">
<!ENTITY RFC5226 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="bcp" docName="draft-tkeiser-afs3-volser-tlv-01" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="AFSVol TLV RPCs">AFSVol Tag-Length-Value Remote Procedure Call Extensions</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Thomas Keiser" initials="T.E.K."
            surname="Keiser">
      <organization abbrev="Sine Nomine">Sine Nomine Associates</organization>

      <address>
        <postal>
          <street>43596 Blacksmith Square</street>

          <!-- Reorder these if your country does things differently -->

          <city>Ashburn</city>

          <region>VA</region>

          <code>20147</code>

          <country>USA</country>
        </postal>

        <phone>+1 703 723 6673</phone>

        <email>tkeiser@sinenomine.net</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <author fullname="Steven Jenkins" initials="S.J."
            surname="Jenkins">
      <organization abbrev="Sine Nomine">Sine Nomine Associates</organization>

      <address>
        <postal>
          <street>43596 Blacksmith Square</street>

          <!-- Reorder these if your country does things differently -->

          <city>Ashburn</city>

          <region>VA</region>

          <code>20147</code>

          <country>USA</country>
        </postal>

        <phone>+1 703 723 6673</phone>

        <email>sjenkins@sinenomine.net</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date year="2010" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>N/A</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>afs</keyword>
    <keyword>afs3</keyword>
    <keyword>afs-3</keyword>
    <keyword>afsvol</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>
        AFS-3 is a distributed file system based upon prototypes
        developed at Carnegie Mellon University during the 1980s.
        AFS-3 heavily leverages Remote Procedure Calls (RPCs) as 
        the foundation for its distributed architecture.  In 2003,
        new RPCs were introduced into AFS-3 that provide 
        for capability introspection between file servers and cache
        managers.  This memo introduces equivalent functionality to 
        the volume server RPC interface, thus making the volume 
        management interface more extensible.
     </t>

     <t>
        Furthermore, this memo extends the volume management interface
        to support getting and setting of AFS volume attributes via an
        extensible Tag-Length-Value (TLV) encoding, which is based upon XDR
        discriminated unions. 
        TLV-based get and set RPCs are specified, along with a tag enumeration RPC.
        The TLV encoding side-steps the typical XDR union decode problem, whereby
        failure to decode a union leg causes the entire RPC payload decode to fail,
        by mandating an XDR opaque default leg for the union, along with a standard
        mechanism for encoding new leg types inside the XDR opaque blob.
     </t>

     <t>
        Finally, tags are allocated for 
        existing volume and transaction metadata, and 
        implementation-private tags are allocated for metadata 
        related to the OpenAFS Demand Attach File Server and
        RxOSD protocol.
      </t>
    </abstract>
  </front>


  <middle>
    <section title="Introduction">
      <t>
        AFS-3 <xref target="AFS1"/> <xref target="AFS2"/>
        is a distributed file system that has its origins
        in the VICE project <xref target="CMU-ITC-84-020"/>
        <xref target="VICE1"/> at the Carnegie Mellon University
        Information Technology Center <xref target="CMU-ITC-83-025"/>, 
        a joint venture between CMU and IBM.  VICE later became AFS when
        CMU moved development to a new commercial venture called
        Transarc Corporation, which later became IBM
        Pittsburgh Labs.  AFS-3 is a suite of un-standardized 
        network protocols based on a remote procedure call (RPC)
        suite known as Rx.  While de jure standards for AFS-3
        fail to exist, the various AFS-3 implementations have 
        agreed upon certain de facto
        standards, largely helped by the existence of
        an open source fork called OpenAFS that has served
        the role of reference implementation.  In addition to
        using OpenAFS as a reference, IBM wrote and donated developer
        documentation that contains somewhat outdated specifications
        for the Rx protocol and all AFS-3 remote procedure calls, as
        well as a detailed description of the AFS-3 system architecture.
      </t>

      <t>
        The AFS-3 architecture consists of many administrative
        domains called "cells" <xref target="CMU-ITC-88-070"/> 
        which are glued together to form a globally distributed file system.  
        Each cell consists of: client nodes, which run cache manager daemons; file
        servers, which run file server daemons and volume server daemons;
        and database server nodes, which can run volume location database 
        servers, protection database servers, backup database servers, or
        several other obscure and/or deprecated database services.
      </t>

      <t>
        This memo focuses on the volume server component of AFS-3.
        The volume server provides an RPC interface for managing
        AFS volumes.  Volumes are the unit of storage administration in AFS-3.
        Each volume contains a subtree of the file system, along with
        special directory entries called mount points, which are used to
        link volumes together into a (potentially cyclic) directed graph.
        Mount points can cross cell boundaries, thus permitting construction of
        a cross-organizational, globally distributed, location-transparent
        file system.  The file system is location-transparent because mount 
        points contain volume names and cell names (which are resolved to locations
        by contacting the appropriate cell's volume location database), rather than
        encoding location directly in the pointer.
      </t>

      <t>
        This memo extends the AFS-3 volume server RPC interface with an RPC in
        support of server capability introspection, and a suite of new RPCs that
        provide extensible volume metadata get and set operations.  
      </t>

      <section title="Motivations">
        <t>
          The current AFSVol
          volume metadata introspection routines use hard-coded XDR <xref target="RFC4506"/> 
          structure definitions.  This significantly limits protocol extensibility because new
          remote procedure calls and structure definitions must be defined during each
          protocol revision.  To some degree, this has been due to the lack of protocol 
          standards documents: certain sites coopted unused protocol fields for private uses,
          thus eliminating the ability for the standards process to reclaim these fields
          without breaking existing deployments.  Hence, each time new functionality needs
          to be added, a new RPC, and typically a new XDR data structure, need to be
          defined.  This is a rather expensive process both in terms of standardization and
          implementation.  Frequently, this leads to a desire to postpone protocol feature
          enhancements until many changes can be aggregated into a major protocol upgrade.
        </t>

        <t>
          This memo introduces a new tag-length-value (TLV) encoding
          mechanism based upon XDR discriminated unions.  This TLV encoding is utilized for 
          getting and setting AFS-3 volume metadata.  The key advantage of this
          design is that new TLV tuples can be allocated without defining a new RPC.  Furthermore,
          because TLV tuples allocated after this draft are enocoded inside an XDR opaque blob,
          Rx endpoints will never fail to decode the XDR call or reply payload; they may only
          fail to decode the contents of the opaque.
        </t>
      </section>

      <section title="Goals">
        <t>
          This memo aims to standardize a new TLV encoding mechanism for volume
          metadata.  In addition, this memo will standardize the TLV encoding of
          volume metadata which is currently available via several AFSVol XDR structures,
          as well as specify the encoding of several new pieces of AFS-3 volume metadata
          that are not currently available via the AFSVol interface.  For example, metadata
          specific to the OpenAFS Demand Attach File Server will be made available via
          the AFSVol service, whereas in the past it was only available locally on the
          file server machine via a proprietary interprocess communication mechanism.
        </t>
      </section>

      <section title="Abbreviations">
        <t>
          <list style="hanging" hangIndent="8">
            <t hangText="AFS    -">Historically, AFS stood for the Andrew File System; AFS no longer stands for anything</t>
            <t hangText="AFSINT -">AFS-3 File Server / Cache Manager RPC Interface</t>
            <t hangText="AFSVol -">AFS-3 Volume Server RPC Interface</t>
            <t hangText="CM     -">AFS-3 Cache Manager</t>
            <t hangText="DAFS   -">OpenAFS Demand Attach File Server</t>
            <t hangText="FS     -">AFS-3 File Server</t>
            <t hangText="RPC    -">Remote Procedure Call</t>
            <t hangText="RX     -">AFS-3 Remote Procedure Call Mechanism</t>
            <t hangText="RXAFS  -">AFS-3 File Server Rx RPC Interface</t>
            <t hangText="RXAFSCB-">AFS-3 Cache Manager Rx RPC Interface</t>
            <t hangText="TLV    -">Tag-Length-Value encoding</t>
            <t hangText="TTL    -">Time to Live for cached data</t>
            <t hangText="VOLSER -">AFS-3 Volume Server</t>
            <t hangText="XDR    -">eXternal Data Representation</t>
          </list>
        </t>
      </section>
    </section>

    <section title="Conventions">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </section>

    <section title="AFSVol Capability Introspection Interface">
      <t>
        This memo introduces a capabilities namespace, and 
        GetCapabilities interface to the AFSVol service. The
        AFSVol GetCapabilities interface will be be 
        identical to the previously-defined AFSINT interface, 
        and its Rx interface specification will be:
      </t>

      <figure align="left" anchor="getcaps">
        <artwork><![CDATA[
proc GetCapabilities(
    OUT Capabilities * capabilities
) = XXX;
        ]]></artwork>
      </figure>

      <t>
        The "Capabilities" type is defined by the existing AFSINT 
        interface, which is included here for reference:
      </t>

      <figure align="left" anchor="getcaps_consts">
        <artwork><![CDATA[
const AFSCAPABILITIESMAX = 192;

typedef afs_int32 Capabilities<AFSCAPABILITIESMAX>;
        ]]></artwork>
      </figure>

      <section title="Capability Bit Allocations">
        <t>
          Three new capability bit allocations will need to be 
          processed by the Grand Central Registrar:
        </t>

        <t>
          <list style="hanging" hangIndent="4">
            <t hangText="VICED_CAPABILITY_DAFS">
              Announce that this file server supports the OpenAFS 
              Demand Attach File Server version 1 semantics
            </t>
            <t hangText="AFSVOL_CAPABILITY_DAFS">
              Announce that this volume server supports the OpenAFS 
              Demand Attach File Server version 1 semantics
            </t>
            <t hangText="AFSVOL_CAPABILITY_TLV">
              Announce that this volume server supports the 
              Tag-Length-Value RPC
            </t>
          </list>
        </t>
      </section>

      <section title="Capabilities Cache Coherence">
        <t>
          One important distinction between this capability introspection
          interface and the ones utilized by AFSINT is: AFSINT is
          a stateful circuit -- file servers can reset the cached state across
          themselves and clients via the RXAFSCB_InitCallBackState, 
          RXAFSCB_InitCallBackSTate2, and RXAFSCB_InitCallBackSTate3 RPCs.
          Because AFSVol is a stateless (with the exception of rxkad security state) 
          client/server protocol, there is no
          means of maintaining AFSVol capabilities cache coherence.  It is RECOMMENDED
          that clients receiving RPC error codes, or critical tags which they
          cannot decode, perform a new AFSVol_GetCapabilities invocation
          to ensure that capabilities cache incoherence is detected.
        </t>

        <t>
          Clearly, the above technique is open to races; AFSVol clients SHOULD 
          try to limit race probability by minimizing the time window between
          GetCapabilities calls, and invocation of capabilities-dependent RPCs (such as the
          TLV suite defined in <xref target="sec:tlv"/>).  All AFSVol
          clients MUST flush cached capabilities data at most two hours after
          retrieving them via AFSVol_GetCapabilities.  Additionally, if the implementation
          permits querying the epoch field of Rx RPC responses, the client MAY wish to
          use this as a means of detecting volume server restarts, and thus as means of
          detecting when to invalidate cached volume server capabilities.  However, an
          AFSVol client MUST NOT use the epoch field as a means to circumvent the two hour
          AFSVol capabilities TTL, as AFSVol servers are not required to keep the capability
          vector static throughout their operation.
        </t>
      </section>
    </section>

    <section title="TLV Interface" anchor="sec:tlv">
      <t>
        A new suite of RPCs will be standardized to get/set 
        tag-length-value tuples, and to enumerate supported tags. The 
        tag namespace will be controlled by the Grand Central 
        Registrar as an assigned numbers namespace.
      </t>

      <section title="Encoding">
        <t>
          The TLV data will be encoded using the following XDR 
          specification:
        </t>

        <figure align="center" anchor="tag_enum">
          <artwork><![CDATA[
/* registrar-controlled tag namespace */

enum AFSVol_TLV_tag {
    ...
};

const AFSINT_TLV_TAG_MAX = 1024;         /* upper-bound on number of
                                          * TLV tuples per RPC */
const AFSINT_TLV_OPAQUE_MAX = 262144;    /* upper-bound on size of
                                          * value payload */

enum afsint_TLV_type {
    AFSINT_TLV_TYPE_NULL     = 0,
    AFSINT_TLV_TYPE_TRUE     = 1,
    AFSINT_TLV_TYPE_FALSE    = 2,
    AFSINT_TLV_TYPE_UINT64   = 3,
    AFSINT_TLV_TYPE_UUID     = 4,
    AFSINT_TLV_TYPE_STRING   = 5,
    AFSINT_TLV_TYPE_OPAQUE   = 6
};

union afsint_TLV_value switch(afsint_TLV_type type) {
 case AFSINT_TLV_TYPE_NULL:
 case AFSINT_TLV_TYPE_TRUE:
 case AFSINT_TLV_TYPE_FALSE:
  void;

 case AFSINT_TLV_TYPE_UINT64:
    afs_uint64 u_64;

 case AFSINT_TLV_TYPE_UUID:
    afsUUID u_uuid;

 case AFSINT_TLV_TYPE_STRING:
    string u_string<AFSINT_TLV_OPAQUE_MAX>;

 case AFSINT_TLV_TYPE_OPAQUE:
 default:
    opaque u_opaque<AFSINT_TLV_OPAQUE_MAX>;
};

const AFSINT_TLV_FLAG_UNSUPPORTED = 0x1;
const AFSINT_TLV_FLAG_READ_ERROR = 0x2;
const AFSINT_TLV_FLAG_CRITICAL = 0x4;

struct afsint_TLV {
    afs_uint32 tlv_tag;
    afs_uint32 tlv_flags;
    afsint_TLV_value tlv_value;
};
]]></artwork>
          <postamble>TLV XDR specification</postamble>
        </figure>

        <t>
          In order to solve the XDR discriminated union decoding 
          problem, all future afsint_TLV_type allocations will 
          map to opaque. All implementations MUST support all 
          arms in the afsint_TLV_value XDR union, as defined above.
        </t>

        <t>
          When possible, future protocol augmentations 
          requiring the definition of new data types should request 
          allocation of a new standards-track payload type code. 
          Allocation of a type code should coincide with 
          standardization of the payload encoding associated with 
          the type code allocation. However, in limited 
          circumstances where:
        </t>

        <t>
          <list style="numbers">
            <t>
              it is known a priori that there will never be any 
              encoding ambiguity, and 
            </t>
            <t>
              the cost of type code allocation and encoding 
              standardization are deemed too high
            </t>
          </list>
        </t>

        <t>
          use of the type code AFSINT_TLV_TYPE_OPAQUE may be an acceptable
          alternative.
        </t>
      </section>

      <section title="Qualifiers">
        <t>
          In some cases the value associated with a tag will be 
          large, structured data. A qualifier is a tag-specific 
          parameter which allows a caller to address a subset of 
          the value stored in a tag. For TLV get interfaces, 
          specifying a qualifer can reduce the amount of data 
          sent over the wire. For TLV set interfaces, specifying 
          a qualifier permits a client to modify a subset of a 
          structured value without endangering cache coherence. 
          Qualifiers are marshalled over the wire as type 
          afsint_TLV_value. Unless otherwise noted, it should be 
          assumed that a tag only supports the null qualifier 
          (XDR union discriminator set to AFSINT_TLV_TYPE_NULL). 
          The null qualifier always references the entire value 
          for a given tag.
        </t>
      </section>
    </section>

    <section title="AFSVol TLV Interface">
      <section title="Tag Introspection">
        <t>
          The Rx procedure specification for the tag support RPC 
          will be as follows:
        </t>

        <figure align="left" anchor="tlv_get_tags">
          <artwork><![CDATA[
proc GetVolumeTLVTags(
    IN AFSVol_TLV_tag offset,
    OUT AFSVol_TLV_tag * tags<AFSINT_TLV_TAG_MAX>
) = XXX;
]]></artwork>
        </figure>

        <t>
          The call parameters are defined as follows:

          <list style="hanging" hangIndent="4">
            <t hangText="offset">
              The offset IN parameter specifies the numeric offset of 
              the first tag to return. A value of zero indicates that 
              the client wants to start the enumeration at the 
              beginning of the tag list.
            </t>
            <t hangText="tags">
              The tags OUT parameter contains a sorted list of 
              supported tags, beginning with the first supported tag 
              greater than or equal to the offset IN parameter.
            </t>
          </list>
        </t>
      </section>

      <section title="TLV Get">
        <t>
          The Rx procedure specification for the TLV get 
          interface will be as follows:
        </t>

        <figure align="center" anchor="tlv_get_single">
          <artwork><![CDATA[
struct AFSVol_TLV_query {
    AFSVol_TLV_tag tq_tag;
    afsint_TLV_value tq_qualifier;
};

proc GetOneVolumeTLV(
    IN afs_uint32 partId,
    IN afs_uint64 volId,
    IN AFSVol_TLV_query queries<AFSINT_TLV_TAG_MAX>,
    OUT afsint_TLV * tuples<AFSINT_TLV_TAG_MAX>
) = XXX;
]]></artwork>
        </figure>

        <t>
          The call parameters are defined as follows:

          <list style="hanging" hangIndent="4">
            <t hangText="partId">
              The partId IN parameter specifies the disk partition on 
              which the volume is located.
            </t>
            <t hangText="volId">
              The volId IN parameter specifies the volume for which 
              TLV tuples are being requested.
            </t>
            <t hangText="queries">
              The queries IN parameter specifies an optional list of 
              tags for which TLV tuples are desired. If this 
              parameter is zero-length, then the server will return 
              up to AFSINT_TLV_TAG_MAX TLV tuples. If an unknown tag 
              identifier is passed in the tags parameter, then the 
              server will return a tuple with the 
              AFSINT_TLV_FLAG_UNSUPPORTED bit asserted in 
              afsint_TLV.tlv_flags, and the tlv type set to 
              AFSINT_TLV_TYPE_NULL. Similarly, if the server is 
              unable to retrieve the value for a supported tag, then 
              a tuple will be returned with 
              AFSINT_TLV_FLAG_READ_ERROR set in the 
              afsint_TLV.tlv_flags field, and the tlv type set to 
              AFSINT_TLV_TYPE_NULL. The AFSVol_TLV_query.tq_qualifier 
              field contains optional tag-specific qualifiers which 
              would allow the implementation to return a subset of 
              the data for a specific tag.
            </t>
            <t hangText="tuples">
              The tuples OUT parameter contains up to 
              AFSINT_TLV_TAG_MAX TLV tuples for this volume.
            </t>
          </list>
        </t>
      </section>

      <section title="TLV Streaming Get">
        <t>
          This call is similar to the call described in the 
          previous section, with the exception that TLV tuples 
          will be returned for multiple volumes at once using an 
          Rx split call interface. The Rx procedure specification 
          is as follows:
        </t>

        <figure align="center" anchor="tlv_get_multi">
          <artwork><![CDATA[
const AFSVOL_BULK_GETVOLUME_MAX = 1024;

proc GetVolumesTLV(
    IN afs_uint32 partIds<AFSVOL_BULK_GETVOLUME_MAX>,
    IN afs_uint64 volIds<AFSVOL_BULK_GETVOLUME_MAX>,
    IN AFSVol_TLV_query queries<AFSINT_TLV_TAG_MAX>
) split = XXX;
]]></artwork>
        </figure>

        <t>
          The call parameters are defined as follows:

          <list style="hanging" hangIndent="4">
            <t hangText="partIds">
              The partIds IN parameter specifies as list of vice 
              partitions. If this list is zero-length, then TLV 
              information is requested for all volumes on all vice 
              partitions. If this list is non-zero length, then TLV 
              information is requested only for volumes on specific 
              vice partitions.
            </t>
            <t hangText="volIds">
              The volIds IN parameter specifies a list of volume IDs. 
              If this list is zero-length, then TLV information is 
              requested for all volumes on the vice partitions 
              specified in partIds. 

              <vspace blankLines="1" />
              If the volIds array is non-zero length, then its length 
              MUST match the length of the partIds array. In this 
              case, each matching index in the partIds and volIds 
              arrays together form a tuple which uniquely addresses a 
              volume on a given vice partition.
            </t>
            <t hangText="queries">
              The queries IN parameter specifies an optional list of 
              tags for which TLV tuples are desired. If this 
              parameter is zero-length, then the server will return 
              up to AFSINT_TLV_TAG_MAX TLV tuples. If an unknown tag 
              identifier is passed in the tags parameter, then the 
              server will return a tuple with the 
              AFSINT_TLV_FLAG_UNSUPPORTED bit asserted in 
              afsint_TLV.tlv_flags, and the tlv type set to 
              AFSINT_TLV_TYPE_NULL. Similarly, if the server is 
              unable to retrieve the value for a supported tag, then 
              a tuple will be returned with 
              AFSINT_TLV_FLAG_READ_ERROR set in the 
              afsint_TLV.tlv_flags field, and the tlv type set to 
              AFSINT_TLV_TYPE_NULL. The AFSVol_TLV_query.tq_qualifier 
              field contains optional tag-specific qualifiers which 
              would allow the implementation to return a subset of 
              the data for a specific tag.
            </t>
          </list>
        </t>

        <section title="Split call stream encoding">
          <t>
            The contents of the split call stream shall be an 
            xdrrec stream containing a finite sequence of 
            XDR-encoded afsint_TLV structures, each of which shall 
            be marked as a separate record (typically by calling 
            xdrrec_endofrecord). End of sequence will be annotated 
            by a dummy tuple containing the special tag type 
            AFSVOL_TLV_TAG_EOS.
          </t>
        </section>
      </section>

      <section title="TLV Set">
        <t>
          The Rx procedure specification for the TLV set 
          interface will be as follows:
        </t>

        <figure align="center" anchor="tlv_set">
          <artwork><![CDATA[
struct AFSVol_TLV_store {
    afsint_TLV ts_tuple;
    afsint_TLV_value ts_qualifier;
};

proc SetVolumeTLV(
    IN afs_int32 trans,
    IN AFSVol_TLV_store tuples<AFSINT_TLV_TAG_MAX>,
    OUT afs_int32 * results<AFSINT_TLV_TAG_MAX>
) = XXX;
]]></artwork>
        </figure>

        <t>
          The call parameters are defined as follows:

          <list style="hanging" hangIndent="4">
            <t hangText="trans">
              The trans IN parameter specifies the transaction ID 
              returned by a previous invocation of AFSVolTransCreate.
            </t>
            <t hangText="tuples">
              The tuples IN parameter contains the list of TLV tuples 
              to be set by the server. 
            </t>
            <t hangText="results">
              The results OUT parameter contains a list of error 
              codes, one per tuple. These error codes provide 
              specific information regarding the success/failure of 
              each TLV set operation. Valid error codes include: 
              VOLSERTAGUNSUPPORTED, VOLSERTAGREADONLY, 
              VOLSERTAGWRITEFAILED, VOLSERTAGDECODEFAILED, 
              VOLSERTAGUNSUPPORTEDENCODING, 
              VOLSERTAGINVALIDQUALIFIER, and VOLSERFAILEDOP.
            </t>
          </list>
        </t>

        <section title="Call preprocessing">
          <t>
            The SetVolumeTLV begins by scanning all elements within 
            the tuples array. If any elements have the 
            AFSINT_TLV_FLAG_CRITICAL bit asserted in 
            tuples[i].ts_tuple.ts_flags, then preprocessing of the 
            tuple must occur. For each tuple with the critical bit 
            set, several preprocessing validation steps will be taken.
          </t>

          <section title="Verify tag is supported">
            <t>
              The tag stored in tuples[i].ts_tuple.tlv_tag is checked 
              to ensure that the server supports it. In the event 
              that the tag is not supported, then the corresponding 
              array index in the results array will be set to 
              VOLSERTAGUNSUPPORTED, and the RPC call abort at the 
              conclusion of critical tuple preprocessing with error 
              code VOLSERFAILEDOP.
            </t>
          </section>

          <section title="Verify tag is writeable">
            <t>
              The tag stored in tuples[i].ts_tuple.tlv_flag is 
              checked to ensure that it is a writeable property. In 
              the event that the tag is read-only, then the 
              corresponding array index in the results array will be 
              set to VOLSERTAGREADONLY, and the RPC call will abort 
              at the conclusion of critical tuple preprocessing with 
              error code VOLSERFAILEDOP.
            </t>
          </section>

          <section title="Verify value encoding is supported">
            <t>
              The XDR union discriminator in 
              tuples[i].ts_tuple.tlv_value is checked to make sure 
              that it is a supported type. If the discriminator is 
              not a supported type, then the corresponding array 
              index in the results array will be set to 
              VOLSERTAGUNSUPPORTEDENCODING, and the RPC call will 
              abort at the conclusion of critical tuple preprocessing 
              with error code VOLSERFAILEDOP.
            </t>
          </section>

          <section title="Verify value can be decoded">
            <t>
              The value stored in tuples[i].ts_tuple.tlv_value is 
              checked to make sure that it can be decoded. If the 
              wire-encoded data cannot be decoded, then the 
              corresponding array index in the results array will be 
              set to VOLSERTAGDECODEFAILED, and the RPC call will 
              abort at the conclusion of critical tuple preprocessing 
              with error code VOLSERFAILEDOP.
            </t>
          </section>

          <section title="Verify qualifier is supported">
            <t>
              Qualifiers are specific to a given tag. If for any 
              reason the tag-specific validation logic determines 
              that the qualifier is invalid, it may set the 
              corresponding array index in the results array to one 
              of VOLSERTLVQUALIFIERUNSUPPORTEDENCODING, 
              VOLSERTLVQUALIFIERDECODEFAILED, or 
              VOLSERTLVQUALIFIERINVALID. As with the other validation 
              steps, if a critical tuple fails qualifier validation, 
              then the RPC call will abort at the conclusion of 
              critical tuple preprocessing with error code VOLSERFAILEDOP.
            </t>
          </section>
        </section>

        <section title="Call processing">
          <t>
            Once the necessary validation steps have been 
            performed, the call will perform the set operations for 
            each tuple. Errors encountered during the processing of 
            each tuple will be recorded in the appropriate array 
            index of the results array. At the conclusion the RPC 
            will either return 0 if all set operations succeeded, 
            or VOLSERFAILEDOP if any failed.
          </t>
        </section>
      </section>
    </section>

    <section title="Mapping of existing metadata onto TLV namespace">
      <t>
        Existing metadata available from several interfaces 
        will also be exported as TLV tuples. This is being done 
        not only for completeness, but also to prevent data 
        races between AFSVolGetOneVolumeTLV, and the various 
        legacy introspection interfaces. 
      </t>

      <section title="volintXInfo">
        <t>
          All metadata exported via the volintXInfo XDR structure 
          will now be exported as TLV tuples. Unless otherwise 
          specified, the values associated with each tag shall be 
          identical to that returned for the associated field in 
          volintXInfo by the AFSVolXListOneVolume interface. The 
          following tuples will be allocated to export existing 
          members of volintXInfo:
        </t>

        <t>
          <list style="hanging" hangIndent="4">
            <t hangText="AFSVOL_TLV_TAG_VOL_NAME">
              This is the TLV analogue of volintXInfo.name. This 
              tuple MUST have a payload of type 
              AFSINT_TLV_TYPE_STRING. The u_string payload field MUST 
              contain a null-terminated string.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_STATUS">
              This is the TLV analogue of volintXInfo.status. This 
              tuple MUST have payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_IN_USE">
              This is the TLV analogue of volintXInfo.inUse. This 
              tuple will contain a boolean value, and therefore MUST 
              have a payload type of either: AFSINT_TLV_TYPE_TRUE, or 
              AFSINT_TLV_TYPE_FALSE.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_ID">
              This is the TLV analogue of volintXInfo.volid. This 
              tuple MUST have a payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_TYPE">
              This is the TLV analogue of volintXInfo.type. This 
              tuple MUST have a payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_CLONE_ID">
              This is the TLV analogue of volintXInfo.cloneID. This 
              tuple MUST have a payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_BACKUP_ID">
              This is the TLV analogue of volintXInfo.backupID. This 
              tuple MUST have a payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_PARENT_ID">
              This is the TLV analogue of volintXInfo.parentID. This 
              tuple MUST have payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_COPY_DATE">
              This is the TLV analogue of volintXInfo.copyDate. This 
              tuple MUST have payload of type AFSINT_TLV_TYPE_UINT64. 
              This timestamp shall be encoded using the rules 
              specified in the forthcoming afs3 RPC refresh document.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_CREATE_DATE">
              This is the TLV analogue of volintXInfo.creationDate. 
              This tuple MUST have payload of type 
              AFSINT_TLV_TYPE_UINT64. This timestamp shall be encoded 
              using the rules specified in the forthcoming afs3 RPC 
              refresh document.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_ACCESS_DATE">
              This is the TLV analogue of volintXInfo.accessDate. 
              This tuple MUST have payload of type 
              AFSINT_TLV_TYPE_UINT64. This timestamp shall be encoded 
              using the rules specified in the forthcoming afs3 RPC 
              refresh document.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_UPDATE_DATE">
              This is the TLV analogue of volintXInfo.updateDate. 
              This tuple MUST have payload of type 
              AFSINT_TLV_TYPE_UINT64. This timestamp shall be encoded 
              using the rules specified in the forthcoming afs3 RPC 
              refresh document.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_BACKUP_DATE">
              This is the TLV analogue of volintXInfo.backupDate. 
              This tuple MUST have payload of type 
              AFSINT_TLV_TYPE_UINT64. This timestamp shall be encoded 
              using the rules specified in the forthcoming afs3 RPC 
              refresh document.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_SIZE">
              This is the TLV analogue of volintXInfo.size. This 
              tuple MUST have payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_FILE_COUNT">
              This is the TLV analogue of volintXInfo.filecount. This 
              tuple MUST have payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_QUOTA_BLOCKS">
              This is the TLV analogue of volintXInfo.maxquota. This 
              tuple MUST have payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_DAY_USE">
              This is the TLV analogue of volintXInfo.dayUse. This 
              tuple MUST have payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_STAT_READS">
              This is the TLV analogue of volintXInfo.stat_reads. 
              This tuple MUST have payload of type 
              AFSINT_TLV_TYPE_OPAQUE. The opaque contents shall be an 
              XDR-encoded structure defined as follows:

              <figure align="center" anchor="tlv_stat_rw">
                <artwork><![CDATA[
const VOLINT_STATS_NUM_RWINFO_FIELDS = 4;

struct AFSVol_stat_rw {
    afs_uint64 stat_rw[VOLINT_STATS_NUM_RWINFO_FIELDS];
};
]]></artwork>
              </figure>
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_STAT_WRITES">
              This is the TLV analogue of volintXInfo.stat_reads. 
              This tuple MUST have payload of type 
              AFSINT_TLV_TYPE_OPAQUE. The opaque contents shall be an 
              XDR-encoded structure as defined for 
              AFSVOL_TLV_TAG_VOL_STAT_READS.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_STAT_FILE_SAME_AUTHOR">
              This is the TLV analogue of 
              volintXInfo.stat_fileSameAuthor. This tuple MUST have 
              payload of type AFSINT_TLV_TYPE_OPAQUE. The opaque 
              contents shall be an XDR-encoded structure defined as follows:

              <figure align="center" anchor="tlv_stat_time">
                <artwork><![CDATA[
const VOLINT_STATS_NUM_TIME_FIELDS = 6;

struct AFSVol_stat_time {
    afs_uint64 stat_rw[VOLINT_STATS_NUM_TIME_FIELDS];
};
]]></artwork>
              </figure>
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_STAT_FILE_DIFFERENT_AUTHOR">
              This is the TLV analogue of 
              volintXInfo.stat_fileDiffAuthor. This tuple MUST have 
              payload of type AFSINT_TLV_TYPE_OPAQUE. The opaque 
              contents shall be the XDR-encoded structure 
              AFSVol_stat_time, as defined for 
              AFSVOL_TLV_TAG_VOL_STAT_FILE_SAME_AUTHOR.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_STAT_DIR_SAME_AUTHOR">
              This is the TLV analogue of 
              volintXInfo.stat_dirSameAuthor. This tuple MUST have 
              payload of type AFSINT_TLV_TYPE_OPAQUE. The opaque 
              contents shall be the XDR-encoded structure 
              AFSVol_stat_time, as defined for 
              AFSVOL_TLV_TAG_VOL_STAT_FILE_SAME_AUTHOR.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_STAT_DIR_DIFFERENT_AUTHOR">
              This is the TLV analogue of 
              volintXInfo.stat_dirDiffAuthor. This tuple MUST have 
              payload of type AFSINT_TLV_TYPE_OPAQUE. The opaque 
              contents shall be the XDR-encoded structure 
              AFSVol_stat_time, as defined for 
              AFSVOL_TLV_TAG_VOL_STAT_FILE_SAME_AUTHOR.
            </t>
          </list>
        </t>
      </section>

      <section title="transDebugInfo">
        <t>
          All metadata exported via the transDebugInfo XDR 
          structure will now be exported as TLV tuples. Unless 
          otherwise specified, the values associated with each 
          tag shall be identical to that returned for the 
          associated field in transDebugInfo by the 
          AFSVolMonitor interface. The following tuples will be 
          allocated to export existing members of transDebugInfo:
        </t>

        <t>
          <list style="hanging" hangIndent="4">
            <t hangText="AFSVOL_TLV_TAG_VOL_TRANS_TID">
              This is the TLV analogue of transDebugInfo.tid. This 
              tuple MUST have payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_TRANS_TIME">
              This is the TLV analogue of transDebugInfo.time. This 
              tuple MUST have payload of type AFSINT_TLV_TYPE_UINT64. 
              This timestamp shall be encoded using the rules 
              specified in the forthcoming afs3 RPC refresh document.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_TRANS_CREATE_TIME">
              This is the TLV analogue of 
              transDebugInfo.creationTime. This tuple MUST have 
              payload of type AFSINT_TLV_TYPE_UINT64. This timestamp 
              shall be encoded using the rules specified in the 
              forthcoming afs3 RPC refresh document.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_TRANS_RETURN_CODE">
              This is the TLV analogue of transDebugInfo.returnCode. 
              This tuple MUST have payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_TRANS_ATTACH_MODE">
              This is the TLV analogue of transDebugInfo.iflags. This 
              tuple MUST have payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_TRANS_STATUS">
              This is the TLV analogue of transDebugInfo.vflags This 
              tuple MUST have payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_TRANS_FLAGS">
              This is the TLV analogue of transDebugInfo.tflags. This 
              tuple MUST have payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_TRANS_LAST_PROC_NAME">
              This is the TLV analogue of 
              transDebugInfo.lastProcName. This tuple MUST have 
              payload of type AFSINT_TLV_TYPE_STRING. The u_string 
              payload field MUST contain a null-terminated string.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_TRANS_CALL_VALID">
              This is the TLV analogue of transDebugInfo.callValid. 
              This tuple MUST have payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_TRANS_READ_NEXT">
              This is the TLV analogue of transDebugInfo.readNext. 
              This tuple MUST have payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_TRANS_XMIT_NEXT">
              This is the TLV analogue of 
              transDebugInfo.transmitNext. This tuple MUST have 
              payload of type AFSINT_TLV_TYPE_UINT64.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_TRANS_LAST_RECV_TIME">
              This is the TLV analogue of 
              transDebugInfo.lastReceiveTime. This tuple MUST have 
              payload of type AFSINT_TLV_TYPE_UINT64. This timestamp 
              shall be encoded using the rules specified in the 
              forthcoming afs3 RPC refresh document.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_TRANS_LAST_SEND_TIME">
              This is the TLV analogue of 
              transDebugInfo.lastSendTime. This tuple MUST have 
              payload of type AFSINT_TLV_TYPE_UINT64. This timestamp 
              shall be encoded using the rules specified in the 
              forthcoming afs3 RPC refresh document.
            </t>
          </list>
        </t>
      </section>

      <section title="Additional de facto-standardized fields">
        <t>
          Certain fields from the IBM AFS and OpenAFS file 
          server's VolumeDiskData header are generally useful. In 
          particular, several fields exported via the 
          AFSVolGetFlags and AFSVolSetFlags RPCs should be 
          exported via the TLV interface. The full list of 
          supported TLV tuples are:
        </t>

        <t>
          <list style="hanging" hangIndent="4">
            <t hangText="AFSVOL_TLV_TAG_VOL_IN_SERVICE">
              This tuple will contain a boolean value, and therefore 
              MUST have a payload type of either: 
              AFSINT_TLV_TYPE_TRUE, or AFSINT_TLV_TYPE_FALSE. When 
              this bit is not asserted, the volume is 
              administratively prohibited from coming online.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_BLESSED">
              This tuple will contain a boolean value, and therefore 
              MUST have a payload type of either: 
              AFSINT_TLV_TYPE_TRUE, or AFSINT_TLV_TYPE_FALSE. When 
              this bit is not asserted, the volume is 
              administratively prohibited from coming online.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_RESTORED_FROM_ID">
              This tuple MUST have payload of type 
              AFSINT_TLV_TYPE_UINT64. When this field is non-zero, it 
              contains the volume ID contained in the dump from which 
              it was restored.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_DESTROYED">
              This tuple will contain a boolean value, and therefore 
              MUST have a payload type of either: 
              AFSINT_TLV_TYPE_TRUE, or AFSINT_TLV_TYPE_FALSE. When 
              this bit is asserted, this volume is flagged for deletion.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_NEEDS_SALVAGE">
              This tuple will contain a boolean value, and therefore 
              MUST have a payload type of either: 
              AFSINT_TLV_TYPE_TRUE, or AFSINT_TLV_TYPE_FALSE. When 
              this bit is asserted, this volume requires a salvage.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_OFFLINE_MESSAGE">
              This tuple MUST have payload of type 
              AFSINT_TLV_TYPE_STRING. The u_string payload field MUST 
              contain a null-terminated string. This field stores an 
              administrative message to indicate why the volume is offline.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_EXPIRATION_DATE">
              This tuple MUST have payload of type 
              AFSINT_TLV_TYPE_UINT64. This timestamp shall be encoded 
              using the rules specified in the forthcoming afs3 RPC 
              refresh document. To the best knowledge of the authors, 
              this field is not standardized by any implementation.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_RESERVATION">
              This tuple MUST have payload of type 
              AFSINT_TLV_TYPE_UINT64. This field, otherwise known as 
              minquota, specifies the amount of storage (in units of 
              1024 octets) that are reserved on the underlying 
              storage for use by this volume.
            </t>
          </list>
        </t>
      </section>
    </section>

    <section title="Extended volume state exportation">
      <t>
        In addition to exporting the existing volser state, DAFS
        state metadata will also be exported via the TLV interface.
        Specifically, an extended volume state field, and a raw
        DAFS state debugging tag, will be exported.
      </t>

      <section title="Volume state explanations" anchor="sec:mapped-volume-states">
        <t>
          Given that volume state information is useful across 
          all server implementations, a collection of generic 
          state explanations shall be standardized. The following states are 
          initially defined in the namespace:
        </t>

        <t>
          <list style="hanging" hangIndent="4">
            <t hangText="AFSVOL_VOL_STATE_EXPL_NONE">
              No further explanation is deemed necessary.
            </t>
            <t hangText="AFSVOL_VOL_STATE_EXPL_UNKNOWN">
              This volume is in its current state for unknown
              reasons.
            </t>
            <t hangText="AFSVOL_VOL_STATE_EXPL_OUT_OF_SERVICE">
              This volume is administratively out of service. For 
              example, the IBM AFS and OpenAFS implementations both 
              permit an administrator to force a volume offline by 
              mutating the blessed or inService disk header bits.
            </t>
            <t hangText="AFSVOL_VOL_STATE_EXPL_DELETED">
              This volume no longer exists on-disk.  This record merely
              serves as a pointer to tell clients that the volume has moved
              to a new location.
            </t>
            <t hangText="AFSVOL_VOL_STATE_EXPL_READY">
              This volume is ready to service requests.  If the
              primary volume state is offline, this means the
              volume is ready to be brought online as soon as
              a remote procedure call needs to access this volume.
            </t>
            <t hangText="AFSVOL_VOL_STATE_EXPL_ATTACHING">
              This volume is busy attaching.  Assuming the process completes
              successfully, the volume will be brought online.
            </t>
            <t hangText="AFSVOL_VOL_STATE_EXPL_DETACHING">
              This volume is busy detaching.
            </t>
            <t hangText="AFSVOL_VOL_STATE_EXPL_BUSY">
              This volume is busy performing some ancillary operation 
              which requires exclusive access.
            </t>
            <t hangText="AFSVOL_VOL_STATE_EXPL_IO_BUSY">
              This volume is busy performing an I/O operation which 
              requires exclusive access.
            </t>
            <t hangText="AFSVOL_VOL_STATE_EXPL_SALVAGING">
              This volume is currently being salvaged in the background.
            </t>
            <t hangText="AFSVOL_VOL_STATE_EXPL_SALVAGE_NEEDED">
              This volume is offline, and will require a salvage 
              before it can be brought online.
            </t>
            <t hangText="AFSVOL_VOL_STATE_EXPL_ERROR">
              This volume has been forced offline due to a 
              non-recoverable error. Manual intervention by an 
              administrator will be necessary to bring this volume 
              back to an operable state.
            </t>
            <t hangText="AFSVOL_VOL_STATE_EXPL_VOLUME_OPERATION">
              This volume is currently offline because a volume 
              transaction requires exclusive access.
            </t>
          </list>
        </t>
      </section>

      <section title="Mapped process types" anchor="sec:mapped-process-types">
        <t>
          It is useful to be able to track volume ownership by 
          process type. In order to do this, a new program type 
          namespace must be defined. The following types are 
          initially defined in the program type namespace:
        </t>

        <t>
          <list style="hanging" hangIndent="4">
            <t hangText="AFSINT_PROGRAM_TYPE_FILE_SERVER">
              Refers to an afs file server process (Rx service ID 1).
            </t>
            <t hangText="AFSINT_PROGRAM_TYPE_VOLUME_SERVER">
              Refers to an afs volume server process (Rx service ID 4).
            </t>
            <t hangText="AFSINT_PROGRAM_TYPE_SALVAGER">
              Refers to an afs stand-alone salvager process.
            </t>
            <t hangText="AFSINT_PROGRAM_TYPE_SALVAGE_SERVER">
              Refers to an OpenAFS DAFS salvage server process.
            </t>
            <t hangText="AFSINT_PROGRAM_TYPE_VOLUME_UTILITY">
              Refers to any ancillary stand-alone volume utility process.
            </t>
          </list>
        </t>
      </section>

      <section title="TLV tuples">
        <t>
          Volume state will be exported via five new TLV tuples:
        </t>

        <t>
          <list style="hanging" hangIndent="4">
            <t hangText="AFSVOL_TLV_TAG_VOL_STATE_ONLINE">
              This tuple MUST have payload of either type
              AFSINT_TLV_TYPE_TRUE, or AFSINT_TLV_TYPE_FALSE.
              This value SHALL tell the caller whether or not the volume
              is fully online.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_STATE_AVAILABLE">
              This tuple MUST have payload of either type
              AFSINT_TLV_TYPE_TRUE, or AFSINT_TLV_TYPE_FALSE.
              This tuple shall tell the caller whether or not the volume
              is available.  This SHOULD be asserted either when the
              volume is fully online, or when the volume can be brought
              online on-demand within a reasonable length of time following 
              receipt of an RPC call to Rx service id 1 requesting access 
              to the volume.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_STATE_EXPL">
              This tuple MUST have payload of type 
              AFSINT_TLV_TYPE_UINT64. The u_64 payload shall contain 
              a volume state explanation enumeration value, as defined in 
              <xref target="sec:mapped-volume-states"/>.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_STATE_DAFS_RAW">
              For servers exporting capability 
              AFSVOL_CAPABILITY_DAFS, this payload MUST be of type 
              AFSINT_TLV_TYPE_OPAQUE. Encoding of raw state is 
              unspecified and implementation-private.
            </t>
            <t hangText="AFSVOL_TLV_TAG_VOL_STATE_OWNING_PROCESS">
              This tag should only be advertised as available on server 
              implementations which support tracking volume ownership by 
              process type.  When available, this payload MUST be of type 
              AFSINT_TLV_TYPE_UINT64. The u_64 payload shall contain 
              a program type enumeration value, as defined in 
              <xref target="sec:mapped-process-types"/>.
            </t>
          </list>
        </t>
      </section>
    </section>

    <section title="AFS-3 Object Storage Extensions Policy Attributes">
      <t>
        RxOSD requires two TLV tuples to encode new quota types:
      </t>

      <t>
        <list style="hanging" hangIndent="4">
          <t hangText="AFSVOL_TLV_TAG_QUOTA_BLOCKS_STORED_LOCALLY">
            The value in this tuple defines the maximum allowable storage,
            in units of blocks, that may be stored on the local file server
            partition.  When storage is required beyond this limit, some data
            must be migrated to object storage devices (OSDs).  This tuple MUST
            have a payload of type AFSINT_TLV_TYPE_UINT64.
          </t>

          <t hangText="AFSVOL_TLV_TAG_QUOTA_FILES">
            The value in this tuple defines the maximum allowable file count
            for this volume.  This tuple MUST have a payload of type 
            AFSINT_TLV_TYPE_UINT64.
          </t>
        </list>
      </t>
    </section>

    <section title="Backward Compatibility">
      <t>
        AFSVol services providing extended Tag-Length-Value RPCs MUST 
        provide backwards compatible interfaces to both legacy 
        clients and servers. Additionally, interoperability 
        between TLV versions must also be specified if they do 
        not comply with the following requirements:
      </t>

      <t>
        <list style="numbers">
          <t>
            AFSVol TLV servers replying to legacy AFSVol clients MUST 
            provide the identical response to an AFSVol server.
          </t>
          <t>
            AFSVol TLV clients communicating with AFSVol servers 
            MUST fall back to using non-TLV AFSVol RPCs. 
          </t>
          <t>
            AFSVol TLV clients to AFSVol TLV servers:

            <list style="letters">
              <t>
                Where capabilities match or the server can 
                provide capabilities including those which the 
                client requests, the server MUST reply with exactly 
                the capabilities requested.
              </t>
              <t>
                Where the client requests capabilities that the 
                server does not provide it MUST either return an
                'unknown tag' error code, or (OPTIONAL) fall back 
                to an non-TLV AFSVol response.
              </t>
            </list>
          </t>
        </list>
      </t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>
        We would like to thank all of the participants at the 2009 Edinburgh AFS 
        hackathon for their input into the design of this TLV mechanism.  Alistair
        Ferguson has provided much useful feedback, especially with regard to backwards
        compatibility and discriminated union type identifier namespace allocations.
        Andrew Deason and Michael Meffie have provided considerable input with
        regard to the discriminated union XDR decoding problem, AFS registrar
        and namespace allocation concerns, what metadata should be exported in the
        initial revision, the notion of data qualifiers, as well as commentary about
        how they envision this extension being used to support future protocol
        extensions.  Derrick Brashear has provided helpful feedback with regard to
        restructuring the volume state reporting tags.  Thanks to Christof Hanke and Hartmut Reuter 
        for collaborating to make this memo compatible with their RxOSD protocol enhancments, 
        and, furthermore, for providing helpful feedback regarding the language in this draft.  
        Finally, special thanks to Jeffrey Hutzelman for providing
        considerable help with restructuring this memo to improve readability and limit
        its scope to something tractable.
      </t>
    </section>

    <!-- Possibly a 'Contributors' section ... -->

    <section title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>
    </section>

    <section title="AFS Assign Numbers Registrar Considerations">
      <t>
        The AFS Assigned Numbers Registrar will need to consider 
        several assigned numbers requests.
      </t>

      <section title="Namespace allocations">
        <t>
          First and foremost, this memo requests that the AFS 
          Registrar assume control over several new registries:
        </t>

        <t>
          <list style="numbers">
            <t>AFSVol capability bit namespace</t>
            <t>AFS-3 TLV payload type namespace</t>
            <t>AFSVol TLV tag namespace</t>
            <t>AFSVol mapped volume state namespace</t>
            <t>AFS-3 program type namespace</t>
          </list>
        </t>

        <section title="AFSVol capabilities">
          <t>
            This memo requests the allocation of a new registry with
            the formal name "AFSVol Capabilities".  This registry 
            will be used to track allocations of AFSVol capability
            bits.  The capability bit namespace contains 6272 bits,
            subdivided into 196 32-bit buckets.  Allocation requests
            for this namespace MUST be in the form of an RFC.  Furthermore,
            final approval for allocations SHALL be made by a Designated
            Expert <xref target="RFC5226"/> to be nominated by the AFS-3
            Working Group.  Should the AFS-3 Working Group be unable to
            assign a Designated Expert, the AFS Assigned Numbers
            Registrar will be free to appoint one or more Designated Experts
            to aid the registrar in the process of vetting requests for
            this namespace.  All allocation requests for this registry
            MUST include the following information:
          </t>

          <t>
            <list style="symbols">
              <t>capability name</t>
              <t>RFC section reference to definition of how this capability bit alters AFSVol protocol semantics</t>
            </list>
          </t>

          <t>
            In addition, an allocation request MAY include the following 
            optional elements:
          </t>

          <t>
            <list style="symbols">
              <t>capability description</t>
              <t>desired capability bucket number and bit position</t>
              <t>RFC section reference to discussion regarding backwards compatibility</t>
              <t>RFC section reference to relevant security considerations</t>
            </list>
          </t>
        </section>

        <section title="AFSVol TLV Payload Types">
          <t>
            ##$# TODO
          </t>
        </section>

        <section title="AFSVol TLV Tags">
          <t>
            ##$# TODO
          </t>
        </section>

        <section title="AFSVol Volume State Explanations">
          <t>
            ##$# TODO
          </t>
        </section>

        <section title="AFS-3 Program Types">
          <t>
            ##$# TODO
          </t>
        </section>
      </section>

      <section title="Assigned numbers allocations">
        <t>
          In addition to requesting the allocation of new 
          registries, this memo also requests several new 
          allocations within existing assigned numbers 
          registries. 
        </t>

        <section title="VICED capability bits">
          <t>
            One new capability bit is requested:

            <list style="symbols"><t>VICED_CAPABILITY_DAFS</t></list>

          </t>
        </section>

        <section title="AFSVol capability bits">
          <t>
            Two new capability bits are requested:

            <list style="symbols">
              <t>AFSVOL_CAPABILITY_DAFS</t>
              <t>AFSVOL_CAPABILITY_TLV</t>
            </list>
          </t>
        </section>

        <section title="AFS-3 TLV payload types">
          <t>
            The following payload type allocations are requested:
          </t>

          <t>
            <list style="symbols">
              <t>AFSINT_TLV_TYPE_NULL</t>
              <t>AFSINT_TLV_TYPE_TRUE</t>
              <t>AFSINT_TLV_TYPE_FALSE</t>
              <t>AFSINT_TLV_TYPE_UINT64</t>
              <t>AFSINT_TLV_TYPE_UUID</t>
              <t>AFSINT_TLV_TYPE_STRING</t>
              <t>AFSINT_TLV_TYPE_OPAQUE</t>
            </list>
          </t>
        </section>

        <section title="AFSVol TLV tags">
          <t>
            The following tag allocations are requested:
          </t>

          <t>
            <list style="symbols">
              <t>AFSVOL_TLV_TAG_VOL_NAME</t>
              <t>AFSVOL_TLV_TAG_VOL_STATUS</t>
              <t>AFSVOL_TLV_TAG_VOL_IN_USE</t>
              <t>AFSVOL_TLV_TAG_VOL_ID</t>
              <t>AFSVOL_TLV_TAG_VOL_TYPE</t>
              <t>AFSVOL_TLV_TAG_VOL_CLONE_ID</t>
              <t>AFSVOL_TLV_TAG_VOL_BACKUP_ID</t>
              <t>AFSVOL_TLV_TAG_VOL_PARENT_ID</t>
              <t>AFSVOL_TLV_TAG_VOL_COPY_DATE</t>
              <t>AFSVOL_TLV_TAG_VOL_CREATE_DATE</t>
              <t>AFSVOL_TLV_TAG_VOL_ACCESS_DATE</t>
              <t>AFSVOL_TLV_TAG_VOL_UPDATE_DATE</t>
              <t>AFSVOL_TLV_TAG_VOL_BACKUP_DATE</t>
              <t>AFSVOL_TLV_TAG_VOL_SIZE</t>
              <t>AFSVOL_TLV_TAG_VOL_FILE_COUNT</t>
              <t>AFSVOL_TLV_TAG_VOL_QUOTA_BLOCKS</t>
              <t>AFSVOL_TLV_TAG_VOL_DAY_USE</t>
              <t>AFSVOL_TLV_TAG_VOL_STAT_READS</t>
              <t>AFSVOL_TLV_TAG_VOL_STAT_WRITES</t>
              <t>AFSVOL_TLV_TAG_VOL_STAT_FILE_SAME_AUTHOR</t>
              <t>AFSVOL_TLV_TAG_VOL_STAT_FILE_DIFFERENT_AUTHOR</t>
              <t>AFSVOL_TLV_TAG_VOL_STAT_DIR_SAME_AUTHOR</t>
              <t>AFSVOL_TLV_TAG_VOL_STAT_DIR_DIFFERENT_AUTHOR</t>
              <t>AFSVOL_TLV_TAG_VOL_TRANS_ID</t>
              <t>AFSVOL_TLV_TAG_VOL_TRANS_TIME</t>
              <t>AFSVOL_TLV_TAG_VOL_TRANS_CREATE_TIME</t>
              <t>AFSVOL_TLV_TAG_VOL_TRANS_RETURN_CODE</t>
              <t>AFSVOL_TLV_TAG_VOL_TRANS_ATTACH_MODE</t>
              <t>AFSVOL_TLV_TAG_VOL_TRANS_STATUS</t>
              <t>AFSVOL_TLV_TAG_VOL_TRANS_FLAGS</t>
              <t>AFSVOL_TLV_TAG_VOL_TRANS_LAST_PROC_NAME</t>
              <t>AFSVOL_TLV_TAG_VOL_TRANS_CALL_VALID</t>
              <t>AFSVOL_TLV_TAG_VOL_TRANS_READ_NEXT</t>
              <t>AFSVOL_TLV_TAG_VOL_TRANS_XMIT_NEXT</t>
              <t>AFSVOL_TLV_TAG_VOL_TRANS_LAST_RECV_TIME</t>
              <t>AFSVOL_TLV_TAG_VOL_TRANS_LAST_SEND_TIME</t>
              <t>AFSVOL_TLV_TAG_VOL_IN_SERVICE</t>
              <t>AFSVOL_TLV_TAG_VOL_BLESSED</t>
              <t>AFSVOL_TLV_TAG_VOL_RESTORED_FROM_ID</t>
              <t>AFSVOL_TLV_TAG_VOL_DESTROYED</t>
              <t>AFSVOL_TLV_TAG_VOL_NEEDS_SALVAGE</t>
              <t>AFSVOL_TLV_TAG_VOL_OFFLINE_MESSAGE</t>
              <t>AFSVOL_TLV_TAG_VOL_EXPIRATION_DATE</t>
              <t>AFSVOL_TLV_TAG_VOL_RESERVATION</t>
              <t>AFSVOL_TLV_TAG_VOL_STATE_ONLINE</t>
              <t>AFSVOL_TLV_TAG_VOL_STATE_AVAILABLE</t>
              <t>AFSVOL_TLV_TAG_VOL_STATE_EXPL</t>
              <t>AFSVOL_TLV_TAG_VOL_STATE_DAFS_RAW</t>
              <t>AFSVOL_TLV_TAG_VOL_STATE_OWNING_PROCESS</t>
              <t>AFSVOL_TLV_TAG_VOL_QUOTA_BLOCKS_STORED_LOCALLY</t>
              <t>AFSVOL_TLV_TAG_VOL_QUOTA_FILES</t>
              <t>AFSVOL_TLV_TAG_EOS</t>
            </list>
          </t>
        </section>

        <section title="VOLS error table">
          <t>
            Within the VOLS error table (offset 1492325120), 
            several new codes need to be allocated: 
          </t>

          <t>
            <list style="symbols">
              <t>VOLSERTAGUNSUPPORTED</t>
              <t>VOLSERTAGREADONLY</t>
              <t>VOLSERTAGWRITEFAILED</t>
              <t>VOLSERTAGDECODEFAILED</t>
              <t>VOLSERTAGUNSUPPORTEDENCODING</t>
              <t>VOLSERTLVQUALIFIERUNSUPPORTEDENCODING</t>
              <t>VOLSERTLVQUALIFIERDECODEFAILED</t>
              <t>VOLSERTLVQUALIFIERINVALID</t>
            </list>
          </t>
        </section>

        <section title="AFSVol volume state explanations">
          <t>
            Within the new AFSVol mapped volume state explanation
            namespace,  the following initial allocations are requested:
          </t>

          <t>
            <list style="symbols">
              <t>AFSVOL_VOL_STATE_EXPL_NONE</t>
              <t>AFSVOL_VOL_STATE_EXPL_UNKNOWN</t>
              <t>AFSVOL_VOL_STATE_EXPL_OUT_OF_SERVICE</t>
              <t>AFSVOL_VOL_STATE_EXPL_DELETED</t>
              <t>AFSVOL_VOL_STATE_EXPL_READY</t>
              <t>AFSVOL_VOL_STATE_EXPL_ATTACHING</t>
              <t>AFSVOL_VOL_STATE_EXPL_DETACHING</t>
              <t>AFSVOL_VOL_STATE_EXPL_BUSY</t>
              <t>AFSVOL_VOL_STATE_EXPL_IO_BUSY</t>
              <t>AFSVOL_VOL_STATE_EXPL_SALVAGING</t>
              <t>AFSVOL_VOL_STATE_EXPL_SALVAGE_NEEDED</t>
              <t>AFSVOL_VOL_STATE_EXPL_ERROR</t>
              <t>AFSVOL_VOL_STATE_EXPL_VOLUME_OPERATION</t>
            </list>
          </t>
        </section>

        <section title="AFS-3 program types">
          <t>
            Within the new AFS program type namespace, the 
            following allocations are requested:
          </t>

          <t>
            <list style="symbols">
              <t>AFSINT_PROGRAM_TYPE_FILE_SERVER</t>
              <t>AFSINT_PROGRAM_TYPE_VOLUME_SERVER</t>
              <t>AFSINT_PROGRAM_TYPE_SALVAGER</t>
              <t>AFSINT_PROGRAM_TYPE_SALVAGE_SERVER</t>
              <t>AFSINT_PROGRAM_TYPE_VOLUME_UTILITY</t>
            </list>
          </t>
        </section>
      </section>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>
        Security and authorization issues are tag-specific.  The legacy
        AFSVol RPCs permitted rxnull connections to perform the four
        ListVolume RPCs, and AFSVolMonitor.  Arguably, it is time to 
        re-evaluate this decision, and restrict access to certain
        tags, as they do permit potentially sensitive
        volume or operational metadata to leak onto public networks.
      </t>
    </section>
  </middle>

  <!-- BACK MATTER -->

  <back>

    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;

      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5226.xml"?-->
      &RFC5226;
    </references>

    <references title="Informative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4506.xml"?-->
      &RFC4506;

      <reference anchor="CMU-ITC-84-020">
        <front>
          <title>VICE File System Services</title>

          <author initials="M.J." surname="West" fullname="MJ West">
            <organization abbrev="CMU-ITC">Carnegie Mellon University Information Technology Center</organization>
          </author>

          <date year="1984" month="August" day="7" />
        </front>
        <seriesInfo name="CMU ITC Tech. Rep." value="CMU-ITC-84-020" />
      </reference>

      <reference anchor="CMU-ITC-83-025">
        <front>
          <title>The Information Technology Center</title>

          <author initials="J.H." surname="Morris" fullname="James H. Morris">
            <organization abbrev="CMU">Carnegie Mellon University</organization>
          </author>
          <author initials="D." surname="Van Houweling" fullname="Douglas Van Houweling">
            <organization abbrev="CMU">Carnegie Mellon University</organization>
          </author>
          <author initials="K." surname="Slack" fullname="Keith Slack">
            <organization abbrev="IBM">International Business Machines Corporation</organization>
          </author>

          <date year="1983"/>
        </front>
        <seriesInfo name="CMU ITC Tech. Rep." value="CMU-ITC-83-025" />
      </reference>

      <reference anchor="CMU-ITC-88-070">
        <front>
          <title>Design and Specification of the Cellular Andrew Environment</title>

          <author initials="E.R." surname="Zayas" fullname="Edward R. Zayas">
            <organization abbrev="CMU-ITC">Carnegie Mellon University Information Technology Center</organization>
          </author>
          <author initials="C.F." surname="Everhart" fullname="Craig F. Everhart">
            <organization abbrev="CMU-ITC">Carnegie Mellon University Information Technology Center</organization>
          </author>

          <date year="1988" month="August" day="2" />
        </front>
        <seriesInfo name="CMU ITC Tech. Rep." value="CMU-ITC-88-070" />
      </reference>

      <reference anchor="VICE1">
        <front>
          <title>The ITC Distributed File System: Principles and Design</title>

          <author initials="M." surname="Satyanarayanan" fullname="M. Satyanarayanan">
            <organization abbrev="CMU-ITC">Carnegie Mellon University Information Technology Center</organization>
          </author>
          <author initials="J.H." surname="Howard" fullname="John H. Howard">
            <organization abbrev="CMU-ITC">Carnegie Mellon University Information Technology Center</organization>
          </author>
          <author initials="D.A." surname="Nichols" fullname="David A. Nichols">
            <organization abbrev="CMU-ITC">Carnegie Mellon University Information Technology Center</organization>
          </author>
          <author initials="R.N." surname="Sidebotham" fullname="Robert N. Sidebotham">
            <organization abbrev="CMU-ITC">Carnegie Mellon University Information Technology Center</organization>
          </author>
          <author initials="A.Z." surname="Spector" fullname="Alfred Z. Spector">
            <organization abbrev="CMU-ITC">Carnegie Mellon University Information Technology Center</organization>
          </author>
          <author initials="M.J." surname="West" fullname="Michael J. West">
            <organization abbrev="CMU-ITC">Carnegie Mellon University Information Technology Center</organization>
          </author>

          <date year="1985" month="December"/>
        </front>
        <seriesInfo name="Proc. 10th ACM Symp. Operating Sys. Princ." value="Vol. 19, No. 5" />
      </reference>

      <reference anchor="AFS1">
        <front>
          <title>An Overview of the Andrew File System"</title>

          <author initials="J.H." surname="Howard" fullname="John H. Howard">
            <organization abbrev="CMU-ITC">Carnegie Mellon University Information Technology Center</organization>
          </author>

          <date year="1988" month="February" />
        </front>
        <seriesInfo name="Proc. 1988 USENIX Winter Tech. Conf." value="pp. 23-26" />
      </reference>

      <reference anchor="AFS2">
        <front>
          <title>Scale and Performance in a Distributed File System</title>

          <author initials="J.H." surname="Howard" fullname="John H. Howard">
            <organization abbrev="CMU">Carnegie Mellon University</organization>
          </author>
          <author initials="M.L." surname="Kazar" fullname="Michael L. Kazar">
            <organization abbrev="CMU">Carnegie Mellon University</organization>
          </author>
          <author initials="S.G." surname="Menees" fullname="Sherri G. Menees">
            <organization abbrev="CMU">Carnegie Mellon University</organization>
          </author>
          <author initials="D.A." surname="Nichols" fullname="David A. Nichols">
            <organization abbrev="CMU">Carnegie Mellon University</organization>
          </author>
          <author initials="M." surname="Satyanarayanan" fullname="M. Satyanarayanan">
            <organization abbrev="CMU">Carnegie Mellon University</organization>
          </author>
          <author initials="R.N." surname="Sidebotham" fullname="Robert N. Sidebotham">
            <organization abbrev="CMU">Carnegie Mellon University</organization>
          </author>
          <author initials="M.J." surname="West" fullname="Michael J. West">
            <organization abbrev="CMU">Carnegie Mellon University</organization>
          </author>

          <date year="1988" month="February" />
        </front>
        <seriesInfo name="ACM Trans. Comp. Sys." value="Vol. 6, No. 1, pp. 51-81" />
      </reference>

      <reference anchor="AFS3-FSCM">
        <front>
          <title>AFS-3 Programmer's Reference: File Server/Cache Manager Interface</title>

          <author initials="E.R." surname="Zayas" fullname="Edward R. Zayas">
            <organization abbrev="Transarc">Transarc Corporation</organization>
          </author>

          <date year="1991" month="August" day="20" />
        </front>
        <seriesInfo name="Transarc Corp. Tech. Rep." value="FS-00-D162" />
      </reference>

      <reference anchor="AFS3-VVL">
        <front>
          <title>AFS-3 Programmer's Reference: Volume Server/Volume Location Server Interface</title>

          <author initials="E.R." surname="Zayas" fullname="Edward R. Zayas">
            <organization abbrev="Transarc">Transarc Corporation</organization>
          </author>

          <date year="1991" month="August" day="29" />
        </front>
        <seriesInfo name="Transarc Corp. Tech. Rep." value="FS-00-D165" />
      </reference>
    </references>


    <section anchor="app-cap-xdr" title="XDR Grammar for FS-CM Capabilities Mechanism">
      <figure align="center" anchor="fscm-cap-xdr">
        <artwork><![CDATA[
const AFSCAPABILITIESMAX = 196; 

typedef afs_uint32 Capabilities<AFSCAPABILITIESMAX>;

/* Viced Capability Flags */ 
const VICED_CAPABILITY_ERRORTRANS   = 0x0001; 
const VICED_CAPABILITY_64BITFILES   = 0x0002; 
const VICED_CAPABILITY_WRITELOCKACL = 0x0004; 
const VICED_CAPABILITY_SANEACLS     = 0x0008;

/* Cache Manager Capability Flags */ 
const CLIENT_CAPABILITY_ERRORTRANS  = 0x0001; 
]]></artwork>
      </figure>
    </section>


    <!-- Change Log
v00 2009-11-11  TEK  Initial Version
v01 2010-04-06  TEK  - reorganize document to flow better
                     - add RxOSD tags
                     - break out volume state tags into a few booleans, and
                       an enumeration to contain explanatory annotations
                     - rewrite introductory section and abstract to better
                       introduce the context of this memo (AFS-3) to new readers
     -->

  </back>

</rfc>
