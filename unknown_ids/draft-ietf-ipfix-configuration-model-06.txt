


IP Flow Information Export WG                                   G. Muenz
Internet-Draft                                               TU Muenchen
Intended status: Standards Track                               B. Claise
Expires: January 9, 2011                                       P. Aitken
                                                     Cisco Systems, Inc.
                                                            July 8, 2010


              Configuration Data Model for IPFIX and PSAMP
               <draft-ietf-ipfix-configuration-model-06>

Abstract

   This document specifies a data model for the configuration of
   Selection Processes, Caches, Exporting Processes, and Collecting
   Processes of IPFIX and PSAMP compliant Monitoring Devices using UML
   (Unified Modeling Language) class diagrams.  The configuration data
   is encoded in Extensible Markup Language (XML).  The structure of the
   data model is specified in a YANG module to ensure compatibility with
   the NETCONF protocol.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 9, 2011.

Copyright Notice

   Copyright (c) 2010 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt      [Page 1]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

   This document may contain material from IETF Documents or IETF
   Contributions published or made publicly available before November
   10, 2008.  The person(s) controlling the copyright in some of this
   material may not have granted the IETF Trust the right to allow
   modifications of such material outside the IETF Standards Process.
   Without obtaining an adequate license from the person(s) controlling
   the copyright in such materials, this document may not be modified
   outside the IETF Standards Process, and derivative works of it may
   not be created outside the IETF Standards Process, except to format
   it for publication as an RFC or to translate it into languages other
   than English.



































Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt      [Page 2]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   5
     1.1.  IPFIX Documents Overview  . . . . . . . . . . . . . . . .   6
     1.2.  PSAMP Documents Overview  . . . . . . . . . . . . . . . .   6

   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   6

   3.  Structure of the Configuration Data Model . . . . . . . . . .   9
     3.1.  Metering Process Decomposition in Selection Process
           and Cache . . . . . . . . . . . . . . . . . . . . . . . .  10
     3.2.  UML Representation  . . . . . . . . . . . . . . . . . . .  11
     3.3.  Exporter Configuration  . . . . . . . . . . . . . . . . .  16
     3.4.  Collector Configuration . . . . . . . . . . . . . . . . .  18

   4.  Configuration Parameters  . . . . . . . . . . . . . . . . . .  19
     4.1.  ObservationPoint Class  . . . . . . . . . . . . . . . . .  19
     4.2.  SelectionProcess Class  . . . . . . . . . . . . . . . . .  20
       4.2.1.  Selector Class  . . . . . . . . . . . . . . . . . . .  21
       4.2.2.  Sampler Classes . . . . . . . . . . . . . . . . . . .  22
       4.2.3.  Filter Classes  . . . . . . . . . . . . . . . . . . .  23
     4.3.  Cache Class . . . . . . . . . . . . . . . . . . . . . . .  25
       4.3.1.  CacheLayout Class . . . . . . . . . . . . . . . . . .  27
     4.4.  ExportingProcess Class  . . . . . . . . . . . . . . . . .  30
       4.4.1.  SctpExporter Class  . . . . . . . . . . . . . . . . .  31
       4.4.2.  UdpExporter Class . . . . . . . . . . . . . . . . . .  33
       4.4.3.  TcpExporter Class . . . . . . . . . . . . . . . . . .  34
       4.4.4.  FileWriter Class  . . . . . . . . . . . . . . . . . .  35
       4.4.5.  Options Class . . . . . . . . . . . . . . . . . . . .  36
     4.5.  CollectingProcess Class . . . . . . . . . . . . . . . . .  38
       4.5.1.  SctpCollector Class . . . . . . . . . . . . . . . . .  39
       4.5.2.  UdpCollector Class  . . . . . . . . . . . . . . . . .  39
       4.5.3.  TcpCollector Class  . . . . . . . . . . . . . . . . .  40
       4.5.4.  FileReader Class  . . . . . . . . . . . . . . . . . .  41
     4.6.  Transport Layer Security Class  . . . . . . . . . . . . .  42
     4.7.  Transport Session Class . . . . . . . . . . . . . . . . .  45
     4.8.  Template Class  . . . . . . . . . . . . . . . . . . . . .  49

   5.  Adaptation to Device Capabilities . . . . . . . . . . . . . .  50

   6.  YANG Module of the IPFIX/PSAMP Configuration Data Model . . .  53

   7.  Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .  96
     7.1.  PSAMP Device  . . . . . . . . . . . . . . . . . . . . . .  96
     7.2.  IPFIX Device  . . . . . . . . . . . . . . . . . . . . . .  98
     7.3.  Export of Flow Records and Packet Reports . . . . . . . . 101
     7.4.  Collector and File Writer . . . . . . . . . . . . . . . . 104
     7.5.  Deviations  . . . . . . . . . . . . . . . . . . . . . . . 104



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt      [Page 3]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   8.  Security Considerations . . . . . . . . . . . . . . . . . . . 105

   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . . 107

   Appendix A.  Acknowledgements . . . . . . . . . . . . . . . . . . 107

   10. References  . . . . . . . . . . . . . . . . . . . . . . . . . 108
     10.1. Normative References  . . . . . . . . . . . . . . . . . . 108
     10.2. Informative References  . . . . . . . . . . . . . . . . . 108

   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . . 111








































Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt      [Page 4]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


1.  Introduction

   IPFIX and PSAMP compliant Monitoring Devices (routers, switches,
   monitoring probes, Collectors etc.) offer various configuration
   possibilities that allow adapting network monitoring to the goals and
   purposes of the application, such as accounting and charging, traffic
   analysis, performance monitoring, security monitoring.  The use of a
   common vendor-independent configuration data model for IPFIX and
   PSAMP compliant Monitoring Devices facilitates network management and
   configuration, especially if Monitoring Devices of different
   implementers or manufacturers are deployed simultaneously.  On the
   one hand, a vendor-independent configuration data model helps storing
   and managing the configuration data of Monitoring Devices in a
   consistent format.  On the other hand, it can be used for local and
   remote configuration of Monitoring Devices.

   The purpose of this document is the specification of a vendor-
   independent configuration data model that covers the commonly
   available configuration parameters of Selection Processes, Caches,
   Exporting Processes, and Collecting Processes.  The configuration
   data model is defined using UML (Unified Modeling Language) class
   diagrams [UML] while the actual configuration data is encoded in
   Extensible Markup Language (XML) [W3C.REC-xml-20040204].  An XML
   document conforming to the configuration data model contains the
   configuration data of one Monitoring Device.

   In order to ensure compatibility with the NETCONF protocol [RFC4741],
   YANG [I-D.ietf-netmod-yang] is used as modeling language.  If
   required, the YANG specification of the configuration data model can
   be converted into XML Schema language [W3C.REC-xmlschema-0-20041028]
   or DSDL (Document Schema Definition Languages)
   [I-D.ietf-netmod-dsdl-map], for example by using the pyang tool
   [YANG-WEB].  YANG provides mechanisms to adapt the configuration data
   model to device-specific constraints and to augment the model with
   additional device-specific or vendor-specific parameters.

   For the configuration of remote Monitoring Devices, an appropriate
   protocol is needed to transfer the XML encoded configuration data.
   The configuration data model is compatible with the NETCONF protocol
   [RFC4741].  However, alternative protocols, such as the Simple Object
   Access Protocol (SOAP) [W3C.REC-soap12-part1-20070427], are also
   suitable for transferring XML data from a network management system
   to a Monitoring Device.

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].




Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt      [Page 5]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


1.1.  IPFIX Documents Overview

   The IPFIX protocol [RFC5101] provides network administrators with
   access to IP Flow information.  The architecture for the export of
   measured IP Flow information out of an IPFIX Exporting Process to a
   Collecting Process is defined in [RFC5470], per the requirements
   defined in [RFC3917].  The IPFIX protocol [RFC5101] specifies how
   IPFIX Data Records and Templates are carried via a number of
   transport protocols from IPFIX Exporting Processes to IPFIX
   Collecting Process.  IPFIX has a formal description of IPFIX
   Information Elements, their name, type and additional semantic
   information, as specified in [RFC5102].  [RFC5815] specifies the
   IPFIX Management Information Base (IPFIX MIB).  Finally, [RFC5472]
   describes what type of applications can use the IPFIX protocol and
   how they can use the information provided.  It furthermore shows how
   the IPFIX framework relates to other architectures and frameworks.
   Methods for efficient export of bidirectional Flow information and
   common properties in Data Records are specified in [RFC5103] and
   [RFC5473], respectively.  [RFC5610] addresses the export of extended
   type information for enterprise-specific Information Elements.  The
   storage of IPFIX Messages in a file is specified in [RFC5655].

1.2.  PSAMP Documents Overview

   The framework for packet selection and reporting [RFC5474] enables
   network elements to select subsets of packets by statistical and
   other methods, and to export a stream of reports on the selected
   packets to a Collector.  The set of packet selection techniques
   (Sampling, Filtering, and hashing) standardized by PSAMP are
   described in [RFC5475].  The PSAMP protocol [RFC5476] specifies the
   export of packet information from a PSAMP Exporting Process to a
   PSAMP Collector.  Instead of exporting PSAMP Packet Reports, the
   stream of selected packets may also serve as input to the generation
   of IPFIX Flow Records.  Like IPFIX, PSAMP has a formal description of
   its Information Elements, their name, type and additional semantic
   information.  The PSAMP information model is defined in [RFC5477].
   [I-D.ietf-ipfix-psamp-mib] describes the PSAMP Management Information
   Base (PSAMP MIB).


2.  Terminology

   This document adopts the terminologies used in [RFC5101], [RFC5103],
   [RFC5655], and [RFC5476].  As in these documents, all specific terms
   have the first letter of a word capitalized when used in this
   document.  The following listing indicates in which references the
   definitions of those terms that are commonly used throughout this
   document can be found:



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt      [Page 6]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   o  Definitions adopted from [RFC5101]:
      *  Collection Process
      *  Collector
      *  Data Record
      *  Exporter
      *  Flow
      *  Flow Key
      *  Flow Record
      *  Information Element
      *  IPFIX Device
      *  IPFIX Message
      *  Observation Domain
      *  Observation Point
      *  (Options) Template

   o  Definitions adopted from [RFC5103]:
      *  Reverse Information Element

   o  Definitions adopted from [RFC5655]:
      *  File Reader
      *  File Writer

   o  Definitions adopted from [RFC5476]:
      *  Filtering
      *  Observed Packet Stream
      *  Packet Report
      *  PSAMP Device
      *  Sampling
      *  Selection Process
      *  Selection Sequence
      *  Selection Sequence Report Interpretation
      *  Selection Sequence Statistics Report Interpretation
      *  Selection State
      *  Selector, Primitive Selector, Composite Selector
      *  Selector Report Interpretation

   The terms Metering Process and Exporting Process have different
   definitions in [RFC5101] and [RFC5476].  In the scope of this
   document, these terms are used according to the following definitions
   which cover the deployment in both PSAMP Devices and IPFIX Devices:

   Metering Process

      The Metering Process generates IPFIX Flow Records or PSAMP Packet
      Reports, depending on its deployment as part of an IPFIX Device or
      PSAMP Device.  Inputs to the process are packets observed at one
      or multiple Observation Points, as well as characteristics
      describing the packet treatment at these Observation Points.  If



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt      [Page 7]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


      IPFIX Flow Records are generated, the Metering Process MUST NOT
      aggregate packets observed at different Observation Domains in the
      same Flow.  The function of the Metering Process is split into two
      functional blocks: Selection Process and Cache.

   Exporting Process

      Depending on its deployment as part of an IPFIX Device or PSAMP
      Device, the Exporting Process sends IPFIX Flow Records or PSAMP
      Packet Reports to one or more Collecting Processes.  The IPFIX
      Flow Records or PSAMP Packet Reports are generated by one or more
      Metering Processes.

   In addition to the existing IPFIX and PSAMP terminology, the
   following terms are defined:

   Cache

      The Cache is a functional block in a Metering Process which
      generates IPFIX Flow Records or PSAMP Packet Reports from a
      Selected Packet Stream, in accordance with its configuration.  If
      Flow Records are generated, the Cache performs tasks like creating
      new records, updating existing ones, computing Flow statistics,
      deriving further Flow properties, detecting Flow expiration,
      passing Flow Records to the Exporting Process, and deleting Flow
      Records.  If Packet Reports are generated, the Cache performs
      tasks like extracting packet contents and derived packet
      properties from the Selected Packet Stream, creating new records,
      and passing them as Packet Reports to the Exporting Process.

   Cache Layout

      The Cache Layout defines the superset of fields that are included
      in the Packet Reports or Flow Records maintained by the Cache.
      The fields are specified by the corresponding Information
      Elements.  In general, the largest possible subset of the
      specified fields is derived for every Packet Report or Flow
      Record.  More specific rules about which fields must be included
      are given in Section 4.3.1.

   Cache Mode

      The Cache Mode specifies whether Packet Reports or Flow Records
      are generated by the Cache.  In the case of Flow Records, it also
      specifies the Flow expiration policy.






Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt      [Page 8]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   Monitoring Device

      A Monitoring Device implements at least one of the functional
      blocks specified in the context of IPFIX or PSAMP.  In particular,
      the term Monitoring Device encompasses Exporters, Collectors,
      IPFIX Devices, and PSAMP Devices.

   Selected Packet Stream

      The Selected Packet Stream is the set of all packets selected by a
      Selection Process.


3.  Structure of the Configuration Data Model

   The IPFIX reference model in [RFC5470] describes Metering Processes,
   Exporting Processes, and Collecting Processes as functional blocks of
   IPFIX Devices.  The PSAMP framework [RFC5474] provides the
   corresponding information for PSAMP Devices and introduces the
   Selection Process as a functional block within Metering Processes.
   In Section 2 of the document, the Cache is defined as another
   functional block within Metering Processes.  Further explanations
   about the relationship between Selection Process and Cache are given
   in Section 3.1.  IPFIX File Reader and File Writer are defined as
   specific kinds of Exporting and Collecting Processes in [RFC5655].

   Monitoring Device implementations usually maintain the separation of
   various functional blocks although they do not necessarily implement
   all of them.  Furthermore, they provide various configuration
   possibilities; some of them are specified as mandatory by the IPFIX
   protocol [RFC5101] or PSAMP protocol [RFC5476].  The configuration
   data model enables the setting of commonly available configuration
   parameters for Selection Processes, Caches, Exporting Processes, and
   Collecting Processes.  In addition, it allows specifying the
   composition of functional blocks within a Monitoring Device
   configuration and their linkage with Observation Points.

   The selection of parameters in the configuration data model is based
   on configuration issues discussed in the IPFIX and PSAMP documents
   [RFC3917], [RFC5101], [RFC5470], [RFC5476], [RFC5474], and [RFC5475].
   Furthermore, the structure and content of the IPFIX MIB module
   [RFC5815] and the PSAMP MIB module [I-D.ietf-ipfix-psamp-mib] have
   been taken into consideration.  Consistency between the configuration
   data model and the IPFIX and PSAMP MIB modules is an intended goal.
   Therefore, parameters in the configuration data model are named
   according to corresponding managed objects.  Certain IPFIX MIB
   objects containing state data have been adopted as state parameters
   in the configuration data model.  State parameters cannot be



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt      [Page 9]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   configured, yet their values can be queried from the Monitoring
   Device by a network manager.

   Section 3.2 explains how UML class diagrams are deployed to
   illustrate the structure of the configuration data model.
   Thereafter, Section 3.3 and Section 3.4 explain the class diagrams
   for the configuration of Exporters and Collectors, respectively.
   Each of the presented classes contains specific configuration
   parameters which are specified in Section 4.  Section 5 gives a short
   introduction to YANG concepts that allow adapting the configuration
   data model to the capabilities of a device.  The formal definition of
   the configuration data model in YANG is given in Section 6.
   Section 7 illustrates the usage of the model with example
   configurations in XML.

3.1.  Metering Process Decomposition in Selection Process and Cache

   In a Monitoring Device implementation, the functionality of the
   Metering Process is commonly split into packet Sampling and Filtering
   functions performed by Selection Processes, and the maintenance of
   Flow Records and Packet Reports performed by a Cache.  Figure 1
   illustrates this separation with the example of a basic Metering
   Process.

               +-----------------------------------+
               | Metering Process                  |
               | +-----------+ Selected            |
      Observed | | Selection | Packet    +-------+ |  Stream of
      Packet  -->| Process   |---------->| Cache |--> Flow Records or
      Stream   | +-----------+ Stream    +-------+ |  Packet Reports
               +-----------------------------------+

     Figure 1: Selection Process and Cache forming a Metering Process

   The configuration data model adopts the separation of Selection
   Processes and Caches in order to support the flexible configuration
   and combination of these functional blocks.  As defined in [RFC5476],
   the Selection Process takes an Observed Packet Stream as its input
   and selects a subset of that stream as its output (Selected Packet
   Stream).  The action of the Selection Process on a single packet of
   its input is defined by one Selector (called Primitive Selector) or
   an ordered composition of multiple Selectors (called Composite
   Selector).  The Cache generates Flow Records or Packet Reports from
   the Selected Packet Stream, depending on the configured Cache Mode.

   The configuration data model does not allow configuring a Metering
   Process without any Selection Process in front of the Cache.  If all
   packets in the Observed Packet Stream shall be selected and passed to



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 10]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   the Cache without any Filtering or Sampling, a Selection Process
   needs to be configured with a Selector which selects all packets
   ("SelectAll" class in Section 4.2.1.

   The configuration data model enables the configuration of a Selection
   Process which receives packets from multiple Observation Points as
   its input.  In this case, the Observed Packet Streams of the
   Observation Points are processed in independent Selection Sequences.
   As specified in [RFC5476], a distinct set of Selector instances needs
   to be maintained per Selection Sequence in order to keep the
   Selection States and statistics separate.

   With the configuration data model, it is possible to configure a
   Metering Process with more than one Selection Processes whose output
   is processed by a single Cache.  This is illustrated in Figure 2.

              +-------------------------------------+
              | Metering Process                    |
              | +-----------+ Selected              |
     Observed | | Selection | Packet                |
     Packet  -->| Process   |----------+  +-------+ |
     Stream   | +-----------+ Stream   +->|       | |  Stream of
              |      ...                  | Cache |--> Flow Records or
              | +-----------+ Selected +->|       | |  Packet Reports
     Observed | | Selection | Packet   |  +-------+ |
     Packet  -->| Process   |----------+            |
     Stream   | +-----------+ Stream                |
              +-------------------------------------+

       Figure 2: Metering Process with multiple Selection Processes

   The Observed Packet Streams at the input of a Metering Process may
   originate from Observation Points belonging to different Observation
   Domains.  By definition of the Observation Domain (see [RFC5101]),
   however, a Cache MUST NOT aggregate packets observed at different
   Observation Domains in the same Flow.  Hence, if the Cache is
   configured to generate Flow Records, it needs to distinguish packets
   according to their Observation Domains.

3.2.  UML Representation

   We use UML class diagrams [UML] to explain the structure of the
   configuration data model.  The attributes of the classes are the
   configuration or state parameters.  The configuration and state
   parameters of a given Monitoring Device are represented as objects of
   these classes encoded in XML.





Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 11]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


    +------------------------------+
    | SctpExporter                 |
    +------------------------------+    0..1 +------------------------+
    | name                         |<>-------| TransportLayerSecurity |
    | ipfixVersion = 10            |         +------------------------+
    | sourceIPAddress[0..*]        |
    | destinationIPAddress[1..*]   |    0..1 +------------------------+
    | destinationPort = 4739|4740  |<>-------| TransportSession       |
    | ifName/ifIndex[0..1]         |         +------------------------+
    | sendBufferSize {opt.}        |
    | rateLimit[0..1]              |
    | timedReliability = 0         |
    +------------------------------+

                 Figure 3: UML example: SctpExporter class

   As an example, Figure 3 shows the UML diagram of the SctpExporter
   class, which is specified in more detail in Section 4.4.1.  The upper
   box contains the name of the class.  The lower box lists the
   attributes of the class.  Each attribute corresponds to a parameter
   of the configuration data model.

   Behind an attribute's name, there may appear a multiplicity indicator
   in brackets (i.e., between "[" and "]").  An attribute with
   multiplicity indicator "[0..1]" represents an OPTIONAL configuration
   parameter which is only included in the configuration data if the
   user configures it.  Typically, the absence of an OPTIONAL parameter
   has a specific meaning.  For example, not configuring rateLimit in an
   object of the SctpExporter class means that no rate limiting will be
   applied to the exported data.  In YANG, an OPTIONAL parameter is
   specified as a "leaf" without "mandatory true" substatement.  The
   "description" substatement specifies the behavior for the case that
   the parameter is not configured.

   The multiplicity indicator "[0..*]" means that this parameter is
   OPTIONAL and MAY be configured multiple times with different values.
   In the example, multiple source IP addresses (sourceIPAddress) may be
   configured for a multi-homed Exporting Process.  In YANG, an
   attribute with multiplicity indicator "[0..*]" corresponds to a
   "leaf-list".

   The multiplicity indicator "[1..*]" means that this parameter MUST be
   configured at least once and MAY be configured multiple times with
   different values.  In the example, one or more destination IP
   addresses (destinationIPAddress) must be configured to specify the
   export destination.  In YANG, an attribute with multiplicity
   indicator "[1..*]" corresponds to a "leaf-list" with "min-elements 1"
   substatement.  Note that attributes without this multiplicity



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 12]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   indicator MUST NOT appear more than once in each object of the class.

   Attributes without multiplicity indicator may be endued with a
   default value which is indicated behind the equality symbol ("=").
   If a default value exists, the parameter does not have to be
   explicitly configured by the user.  If the parameter is not
   configured by the user, the Monitoring Device MUST use the specified
   default value for the given parameter.  In the example, IPFIX version
   10 must be used unless a different value is configured for
   ipfixVersion.  In YANG, an attribute with default value corresponds
   to a "leaf" with "default" substatement.

   In the example, there exist two default values for the destination
   port (destinationPort), namely the registered ports for IPFIX with
   and without transport layer security (i.e., DTLS or TLS), which are
   4740 and 4739, respectively.  In the UML diagram, the two default
   values are separated by a vertical bar ("|").  In YANG, such
   conditional default value alternatives cannot be specified formally.
   Instead, they are defined in the "description" substatement of the
   "leaf".

   Further attribute properties are denoted in braces (i.e., between "{"
   and "}").  An attribute with property "{opt.}", such as
   sendBufferSize in the SctpExporter class, represents a parameter that
   MAY be configured by the user.  If not configured by the user, the
   Monitoring Device MUST set an appropriate value for this parameter at
   configuration time.  As a result, the parameter will always exist in
   the configuration data, yet it is not mandatory for the user to
   configure it.  This behavior can be implemented as a static device-
   specific default value, but does not have to.  Therefore, the user
   MUST NOT expect that the device always sets the same values for the
   same parameter.  Regardless of whether the parameter value has been
   configured by the user or set by the device, the parameter value MUST
   NOT be changed by the device after configuration.  Since this
   behavior cannot be specified formally in YANG, it is specified in the
   "description" substatement of the "leaf".

   The availability of a parameter may depend on another parameter
   value.  In the UML diagram, such restrictions are indicated as
   attribute properties (e.g., "{SCTP only}").  The given example does
   not show such restrictions.  In YANG, the availability of a parameter
   is formally restricted with the "when" substatement of the "leaf".

   Another attribute property not shown in the example is "{readOnly}"
   specifying state parameters which cannot be configured.  In YANG,
   this corresponds to the "config false" substatement.

   Attributes without multiplicity indicator, without default value, and



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 13]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   without "{readOnly}" property are mandatory configuration parameters.
   These parameters MUST be configured by the user unless an attribute
   property determines that the parameter is not available.  In YANG, a
   mandatory parameter corresponds to a "leaf" with "mandatory true"
   substatement.  In the example, the user MUST configure the name
   parameter.

   If some parameters are related to each other, it makes sense to group
   these parameters in a subclass.  This is especially useful if
   different subclasses represent choices of different parameter sets,
   or if the parameters of a subclass may appear multiple times.  For
   example, the SctpExporter class MAY contain the parameters of the
   TransportLayerSecurity subclass.

   An object of a class is encoded as an XML element.  In order to
   distinguish between classes and objects, class names start with an
   upper case character while the associated XML elements start with
   lower case characters.  Paramaters appear as XML elements which are
   nested in the XML element of the object.  In XML, the parameters of
   an object can appear in any order and do not have to follow the order
   in the UML class diagram.  Unless specified differently, the order in
   which parameters appear does not have a meaning.  As an example, an
   object of the SctpExporter class corresponds to one occurrence of

     <sctpExporter>
       <name>my-sctp-export</name>
       ...
     </sctpExporter>

   There are various possibilities how objects of classes can be related
   to each other.  In the scope of this document, we use two different
   types of relationship between objects: aggregation and unidirectional
   association.  In UML class diagrams, two different arrow types are
   used as shown in Figure 4.

            +---+   0..* +---+         +---+ 0..*  1 +---+
            | A |<>------| B |         | A |-------->| B |
            +---+        +---+         +---+         +---+
             (a) Aggregation     (b) Unidirectional association

            Figure 4: Class relationships in UML class diagrams

   Aggregation means that one object is part of the other object.  In
   Figure 4 (a), an object of class B is part of an object of class A.
   This corresponds to nested XML elements:






Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 14]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


     <a>
       <b>
         ...
       </b>
       ...
     </a>

   In the example, objects of the TransportLayerSecurity class and the
   TransportSession class appear as nested XML elements
   <transportLayerSecurity> and <transportSession> within an object of
   the SctpExporter class <sctpExporter>.

   A unidirectional association is a reference to an object.  In
   Figure 4 (b), an object of class A contains a reference to an object
   of class B. This corresponds to separate XML elements that are not
   nested.  To distinguish different objects of class B, class B must
   have a key.  In the configuration data model, keys are string
   parameters called "name", corresponding to XML elements <name>.  The
   names MUST be unique within the given XML subtree.  The reference to
   a specific object of class B is encoded with an XML element <b> which
   contains the name of an object.  If an object of class A refers to
   the object of class B with name "foo", this looks as follows:

     <a>
       ...
       <b>foo</b>
       ...
     </a>

     <b>
       <name>foo</name>
       ...
     </b>

   In Figure 4, the indicated numbers define the multiplicity:

      "1": one only
      "0..*": zero or more
      "1..*": one or more

   In the case of aggregation, the multiplicity indicates how many
   objects of one class may be included in one object of the other
   class.  In Figure 4 (a), an object of class A may contain an
   arbitrary number of objects of class B. In the case of unidirectional
   association, the multiplicity at the arrowhead specifies the number
   of objects of a given class that may be referred to.  The
   multiplicity at the arrow tail specifies how many different objects
   of one class may refer to a single object of the other class.  In



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 15]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   Figure 4 (b), an object of class A refers to single object of class
   B. One object of class B can be referred to from an arbitrary number
   of objects of class A.

   Similar to classes that are referenced in UML associations, classes
   which contain configuration parameters and which occur in an
   aggregation relationship with multiplicity greater than one must have
   a key.  This key is necessary because every configuration parameter
   must be addressable in order to manipulate or delete it.  The key
   values MUST be unique in the given XML subtree (i.e., unique within
   the aggregating object).  Hence, if class B in Figure 4 (a) contains
   a configuration parameter, all objects of class B belonging to the
   same object of class A must have different key values.  Again, the
   key appears as an attribute called "name" in the concerned classes.

   A class which contains state parameters but no configuration
   parameters, such as the Template class (see Section 4.8), does not
   have a key.  This is because state parameters cannot be manipulated
   or deleted, and therefore do not need to be addressable.

   Note that the usage of keys as described above is required by YANG
   [I-D.ietf-netmod-yang] which mandates the existence of a key for
   elements which appear in a list of configuration data.

   The configuration data model for IPFIX and PSAMP makes use of
   unidirectional associations to specify the data flow between
   different functional blocks.  For example, if the output of a
   Selection Process is processed by a Cache, this corresponds to an
   object of the SelectionProcess class that contains a reference to an
   object of the Cache class.  The configuration data model does not
   mandate that such a reference exists for every functional block that
   has an output.  If such a reference is absent, the output is dropped
   without any further processing.  Although such configurations are
   incomplete, we do not consider them as invalid as they may
   temporarily occur if a Monitoring Device is configured in multiple
   steps.  Also, it might be useful to pre-configure certain functions
   of a Monitoring Device in order to be able to switch to a new
   configuration more quickly.

3.3.  Exporter Configuration

   Figure 5 below shows the main classes of the configuration data model
   which are involved in the configuration of an IPFIX or PSAMP
   Exporter.  The role of the classes can be briefly summarized as
   follows:






Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 16]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   o  The ObservationPoint class specifies an Observation Point (i.e.,
      an interface or linecard) of the Monitoring Device at which
      packets are captured for traffic measurements.  An object of the
      ObservationPoint class may be associated with one or more objects
      of the SelectionProcess class configuring Selection Processes that
      process the observed packets in parallel.  As long as an
      ObservationPoint object is specified without any references to
      SelectionProcess objects, the captured packets are not considered
      by any Metering Process.

   o  The SelectionProcess class contains the configuration parameters
      of a Selection Process.  The Selection Process may be composed of
      a single Selector or a sequence of Selectors, defining a Primitive
      or Composite Selector, respectively.

      The Selection Process selects packets from one or more Observed
      Packet Streams, each originating from a different Observation
      Point.  Therefore, a SelectionProcess object MAY be referred to
      from one or more ObservationPoint objects.

      A Selection Process MAY pass the Selected Packet Stream to a
      Cache.  Therefore, the SelectionProcess class contains a reference
      to an object of the Cache class.  If a Selection Process is
      configured without any reference to a Cache, the selected packets
      are not accounted in any Packet Report or Flow Record.

   o  The Cache class contains configuration parameters of a Cache.  A
      Cache may receive the output of one or more Selection Processes
      and maintains corresponding Packet Reports or Flow Records.
      Therefore, an object of the Cache class MAY be referred to from
      multiple SelectionProcess objects.

      Configuration parameters of the Cache class specify the size of
      the Cache, the Cache Mode and Layout, and expiration parameters.
      The Cache Mode determines if Packet Reports or Flow Records are
      generated.

      A Cache MAY pass its output to one or multiple Exporting Process.
      Therefore, the Cache class enables references to one or multiple
      objects of the ExportingProcess class.  If a Cache object does not
      specify any reference to an ExportingProcess object, the Cache
      output is dropped.

   o  The ExportingProcess class contains configuration parameters of an
      Exporting Process.  It includes various transport protocol
      specific parameters and the export destinations.  An object of the
      ExportingProcess class MAY be referred to from multiple objects of
      the Cache class.



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 17]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


      An Exporting Process MAY be configured as a File Writer according
      to [RFC5655].

                            +------------------+
                            | ObservationPoint |
                            +------------------+
                                 0..* |
                                      |
                                 0..* V
                            +------------------+
                            | SelectionProcess |
                            +------------------+
                                 0..* |
                                      |
                                 0..1 V
                            +------------------+
                            | Cache            |
                            +------------------+
                                 0..* |
                                      |
                                 0..* V
                            +------------------+
                            | ExportingProcess |
                            +------------------+

             Figure 5: Class diagram of Exporter configuration

3.4.  Collector Configuration

   Figure 6 below shows the main classes of the configuration data model
   which are involved in the configuration of a Collector.  An object of
   the CollectingProcess class specifies the local IP addresses,
   transport protocols and port numbers of a Collecting Process.
   Alternatively, the Collecting Process MAY be configured as a File
   Reader according to [RFC5655].

   An object of the CollectingProcess class may refer to one or multiple
   ExportingProcess objects configuring Exporting Processes that
   reexport the received data.  As an example, an Exporting Process can
   be configured as a File Writer in order to save the received IPFIX
   Messages in a file.










Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 18]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


                           +-------------------+
                           | CollectingProcess |
                           +-------------------+
                                0..* |
                                     |
                                0..* V
                           +-------------------+
                           | ExportingProcess  |
                           +-------------------+

            Figure 6: Class diagram of Collector configuration


4.  Configuration Parameters

   This section specifies the configuration and state parameters of the
   configuration data model separately for each class.

4.1.  ObservationPoint Class

     +-------------------------------------------------+
     | ObservationPoint                                |
     +-------------------------------------------------+
     | name                                            |
     | observationPointId {readOnly}                   |
     | observationDomainId                             |
     | ifIndex/ifName/entPhysicalIndex/entPhysicalName | 0..*
     | direction = "both"                              |----+
     +-------------------------------------------------+    | 0..*
                                                            V
                                                  +------------------+
                                                  | SelectionProcess |
                                                  +------------------+

                     Figure 7: ObservationPoint class

   Figure 7 shows the ObservationPoint class that identifies an
   Observation Point of the Monitoring Device, such as an interface or a
   linecard.

   The Observation Point ID (i.e., the value of the Information Element
   observationPointId [RFC5102]) is assigned by the Monitoring Device.
   It appears as a state parameter in the ObservationPoint class.

   The configuration parameters of the Observation Point are:






Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 19]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   observationDomainId:  This parameter defines the identifier of the
      Observation Domain the Observation Point belongs to.  Observation
      Points that are configured with the same Observation Domain ID
      belong to the same Observation Domain.

   ifIndex/ifName/entPhysicalIndex/entPhysicalName:  Exactly one of
      these parameters MUST be specified to define the interface or
      linecard where packets are observed. ifIndex and ifName correspond
      to objects in the IF-MIB [RFC2863]. entPhysicalIndex and
      entPhysicalName correspond to objects in the ENTITY-MIB [RFC4133].

   direction:  This parameter specifies if ingress traffic, egress
      traffic, or both ingress and egress traffic is captured, using the
      values "ingress", "egress", and "both", respectively.  If not
      configured, ingress and egress traffic is captured (i.e., the
      default value is "both").  If not applicable (e.g., in the case of
      a sniffing interface in promiscuous mode), the value of this
      parameter is ignored.

   An ObservationPoint object MAY refer to one or multiple
   SelectionProcess objects configuring Selection Processes that process
   the observed packets in parallel.

4.2.  SelectionProcess Class

       +------------------+
       | SelectionProcess |
       +------------------+   1..* +----------+
       | name             |<>------| Selector |
       |                  |        +----------+
       |                  |
       |                  |   0..* +--------------------------------+
       |                  |<>------| SelectionSequence              |
       |                  |        +--------------------------------+
       |                  |        | selectionSequenceId {readOnly} |
       |                  |        | observationDomainId {readOnly} |
       |                  |        +--------------------------------+
       |                  |
       |                  | 0..*  0..1 +-------+
       |                  |----------->| Cache |
       +------------------+            +-------+

                     Figure 8: SelectionProcess class

   Figure 8 shows the SelectionProcess class.  The SelectionProcess
   class contains the configuration parameters of a Selection Process
   which selects packets from one or more Observed Packet Streams and
   generates a Selected Packet Stream as its output.  A non-empty



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 20]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   ordered list defines a sequence of Selectors.  The actions defined by
   the Selectors are applied to the stream of incoming packet in the
   specified order.

   If the Selection Process receives packets from multiple Observation
   Points, the Observed Packet Streams need to be processed
   independently in separate Selection Sequences.  Each Selection
   Sequence is identified by a Selection Sequence ID which is unique
   within the Observation Domain the Observation Point belongs to (see
   [RFC5477]).  Selection Sequence IDs are assigned by the Monitoring
   Device.  As state parameters, the SelectionProcess class contains the
   list of assigned Selection Sequence IDs and corresponding Observation
   Domain IDs.  With this information, it is possible to associate
   Selection Sequence (Statistics) Report Interpretations exported
   according to the PSAMP protocol specifications [RFC5476] with the
   corresponding object of the SelectionProcess class.

   A SelectionProcess object MAY include a reference to an object of the
   Cache class to generate Packet Reports or Flow Records from the
   Selected Packet Stream.

4.2.1.  Selector Class

    +--------------------------------------+
    | Selector                             |
    +--------------------------------------+      1 +-----------------+
    | name                                 |<>------+ SelectAll/      |
    | packetsObserved {readOnly}           |        | SampCountBased/ |
    | packetsDropped {readOnly}            |        | SampTimeBased/  |
    | selectorDiscontinuityTime {readOnly} |        | SampRandOutOfN/ |
    |                                      |        | SampUniProb/    |
    |                                      |        | FilterMatch/    |
    |                                      |        | FilterHash/     |
    +--------------------------------------+        +-----------------+

                         Figure 9: Selector class

   The Selector class in Figure 9 contains the configuration and state
   parameters of a Selector.  Standardized PSAMP Sampling and Filtering
   methods are described in [RFC5475]; their configuration parameters
   are specified in the classes SampCountBased, SampTimeBased,
   SampRandOutOfN, SampUniProb, FilterMatch, and FilterHash.  In
   addition, the SelectAll class, which has no parameters, is used for a
   Selector that selects all packets.  The Selector class includes
   exactly one of these sampler and filter classes, depending on the
   applied method.

   As state parameters, the Selector class contains the Selector



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 21]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   statistics packetsObserved and packetsDropped as well as
   selectorDiscontinuityTime, which correspond to the IPFIX MIB module
   objects ipfixSelectionProcessStatsPacketsObserved,
   ipfixSelectionProcessStatsPacketsDropped, and
   ipfixSelectionProcessStatsDiscontinuityTime, respectively [RFC5815]:

   packetsObserved:  The total number of packets observed at the input
      of the Selector.  If this is the first Selector in the Selection
      Process, this counter corresponds to the total number of packets
      in all Observed Packet Streams at the input of the Selection
      Process.  Otherwise, the counter corresponds to the total number
      of packets at the output of the preceding Selector.
      Discontinuities in the value of this counter can occur at re-
      initialization of the management system, and at other times as
      indicated by the value of selectorDiscontinuityTime.

   packetsDropped:  The total number of packets discarded by the
      Selector.  Discontinuities in the value of this counter can occur
      at re-initialization of the management system, and at other times
      as indicated by the value of selectorDiscontinuityTime.

   selectorDiscontinuityTime:  Timestamp of the most recent occasion at
      which one or more of the Selector counters suffered a
      discontinuity.  In contrast to
      ipfixSelectionProcessStatsDiscontinuityTime, the time is absolute
      and not relative to sysUpTime.

   Note that packetsObserved and packetsDropped are aggregate statistics
   calculcated over all Selection Sequences of the Selection Process.
   This is in contrast to the counter values in the Selection Sequence
   Statistics Report Interpretation [RFC5476] which are related to a
   single Selection Sequence only.

4.2.2.  Sampler Classes

        +----------------+   +----------------+   +----------------+
        | SampCountBased |   | SampTimeBased  |   | SampRandOutOfN |
        +----------------+   +----------------+   +----------------+
        | packetInterval |   | timeInterval   |   | population     |
        | packetSpace    |   | timeSpace      |   | size           |
        +----------------+   +----------------+   +----------------+

        +----------------+
        | SampUniProb    |
        +----------------+
        | probability    |
        +----------------+




Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 22]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


                        Figure 10: Sampler classes

   The Sampler classes in Figure 10 contain the configuration parameters
   of specific Sampling algorithms:

   packetInterval, packetSpace:  For systematic count-based sampling,
      packetInterval defines the number of packets that are
      consecutively sampled between gaps of length packetSpace.  These
      parameters correspond to the Information Elements
      samplingPacketInterval and samplingPacketSpace [RFC5477].

   timeInterval, timeSpace:  For systematic time-based sampling,
      timeInterval defines the time interval during which all arriving
      packets are sampled. timeSpace is the gap between two sampling
      intervals.  These parameters correspond to the Information
      Elements samplingTimeInterval and samplingTimeSpace [RFC5477].
      The unit is microseconds.

   size, population:  For n-out-of-N random sampling, size defines the
      number of elements taken from the parent population. population
      defines the number of elements in the parent population.  These
      parameters correspond to the Information Elements samplingSize and
      samplingPopulation [RFC5477].

   probability:  For uniform probabilistic sampling, probability defines
      the sampling probability.  This parameter corresponds to the
      Information Element samplingProbability [RFC5477].

4.2.3.  Filter Classes

           +--------------------------+
           | FilterMatch              |
           +--------------------------+
           | ieId/ieName              |
           | ieEnterpriseNumber[0..1] |
           | value                    |
           +--------------------------+

           +--------------------------+
           | FilterHash               |
           +--------------------------+    1..* +---------------+
           | hashFunction = "BOB"     |<>-------| SelectedRange |
           | ipPayloadOffset = 0      |         +---------------+
           | ipPayloadSize = 8        |         | name          |
           | digestOutput = "false"   |         | min           |
           | initializerValue[0..1]   |         | max           |
           +--------------------------+         +---------------+




Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 23]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


                         Figure 11: Filter classes

   The Filter classes in Figure 11 contain the configuration parameters
   of specific Filtering methods.  For property match filtering, the
   configuration parameters are:

   ieId, ieName, ieEnterpriseNumber:  The property to be matched is
      specified by either ieId or ieName, specifying the ID or name of
      the Information Element, respectively. ieEnterpriseNumber MUST be
      used for enterprise-specific Information Elements.  If
      ieEnterpriseNumber is omitted or zero, this Information Element is
      registered in the IANA registry of IPFIX Information Elements
      [IANA-IPFIX].

   value:  Matching value.

   For hash-based filtering, the configuration parameters are:

   hashFunction:  Hash function to be used.  The following parameter
      values are defined by the configuration data model:
      *  BOB: BOB Hash Function as specified in [RFC5475], Appendix A.2
      *  IPSX: IP Shift-XOR (IPSX) Hash Function as specified in
         [RFC5475], Appendix A.1
      *  CRC: CRC-32 function as specified in [RFC1141]
      Default value is "BOB".

   ipPayloadOffset, ipPayloadSize:  ipPayloadOffset and ipPayloadSize
      configure the offset and the size of the payload section used as
      input to the hash function.  Default values are 0 and 8,
      respectively, corresponding to the minimum configurable values
      according to [RFC5476], Section 6.2.5.6.  These parameters
      correspond to the Information Elements hashIPPayloadOffset and
      hashIPPayloadSize [RFC5477].

   digestOutput:  digestOutput enables or disables the inclusion of the
      packet digest in the resulting PSAMP Packet Report.  This requires
      that the Cache Layout of the Cache generating the Packet Reports
      includes a digestHashValue field.  This parameter corresponds to
      the Information Element hashDigestOutput [RFC5477].

   initializerValue:  Initializer value to the hash function.  This
      parameter corresponds to the Information Element
      hashInitialiserValue [RFC5477].  If not configured by the user,
      the Monitoring Device arbitrarily chooses an initializer value.

   One or more ranges of matching hash values are defined by the min and
   max parameters of the SelectedRange subclass.  These parameters
   correspond to the Information Elements hashSelectedRangeMin and



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 24]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   hashSelectedRangeMax [RFC5477].

4.3.  Cache Class

    +---------------------------------------+
    | Cache                                 |
    +---------------------------------------+         1 +-------------+
    | name                                  |<>---------| CacheLayout |
    | cacheMode                             |           +-------------+
    | maxFlows   {opt.} {except for Cache   |
    |   Mode "immediate"}                   |
    | activeTimeout {opt.} {Cache Modes     | 0..*
    |   "timeout" and "natural" only}       |---------------+
    | inactiveTimeout {opt.} {Cache Modes   |               | 0..*
    |   "timeout" and "natural" only}       |               V
    | exportInterval {opt.} {Cache Mode     |      +------------------+
    |   "permanent" only}                   |      | ExportingProcess |
    | activeFlows {readOnly} {except for    |      +------------------+
    |   Cache Mode "immediate"}             |
    | unusedCacheEntries {readOnly}         |
    |   {except for Cache Mode "immediate"} |
    | dataRecords {readOnly}                |
    | cacheDiscontinuityTime {readOnly}     |
    +---------------------------------------+

                          Figure 12: Cache class

   Figure 12 shows the Cache class that contains the configuration and
   state parameters of a Cache.  The configuration parameters of the
   Cache class are as follows:

   cacheMode:  Configures the Cache Mode.  The following parameter
      values are specified by the configuration data model:
      *  immediate: Packets at the input of the Cache are not aggregated
         but are used to generate PSAMP Packet Reports.
      *  timeout: Packets at the input of the Cache are aggregated as
         Flows which expire after active or inactive timeout.
      *  natural: Packets at the input of the Cache are aggregated as
         Flows which expire after active or inactive timeout, or on
         natural termination (e.g., TCP FIN, or TCP RST) of the Flow.
      *  permanent: Packets at the input of the Cache are aggregated as
         Flows which do not expire, but which are periodically exported
         with interval set by exportInterval.
      In the case of "timeout", "natural", and "permanent", IPFIX Flow
      Records are generated.






Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 25]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   maxFlows:  This parameter configures the maximum number of entries in
      the Cache, which is the maximum number of Flows that can be
      measured simultaneously.
      If this parameter is configured, the Monitoring Device MUST ensure
      that sufficient resources are available to store the configured
      maximum number of Flows.  If the maximum number of Cache entries
      is in use, no additional Flows can be measured.  However, traffic
      which pertains to existing Flows can continue to be measured.
      This parameter is not available for Cache Mode "immediate".

   activeTimeout:  This parameter configures the time in milliseconds
      after which a Flow is expired even though packets matching this
      Flow are still received by the Cache.  The parameter value zero
      indicates infinity, meaning that there is no active timeout.
      If not configured by the user, the Monitoring Device sets this
      parameter.
      This parameter is only available for Cache Modes "timeout" and
      "natural".

   inactiveTimeout:  This parameter configures the time in milliseconds
      after which a Flow is expired if no packets matching this Flow are
      received by the Cache.  The parameter value zero indicates
      infinity, meaning that there is no inactive timeout.
      If not configured by the user, the Monitoring Device sets this
      parameter.
      This parameter is only available for Cache Modes "timeout" and
      "natural".

   exportInterval:  This parameter configures the interval for
      periodical export of Flow Records in milliseconds.
      If not configured by the user, the Monitoring Device sets this
      parameter.
      It is only available for Cache Mode "permanent".

   If the Cache generates Flow Records, every Flow Record MUST be
   associated with a single Observation Domain.  Hence, although a Cache
   MAY be configured to process packets observed at multiple Observation
   Domains, the Cache MUST NOT aggregate packets observed at different
   Observation Domains in the same Flow.

   An object of the Cache class includes an object of the CacheLayout
   class that defines which fields are included in the Packet Reports or
   Flow Records.  A Cache object MAY refer to one or multiple
   ExportingProcess objects configuring different Exporting Processes.

   As state parameters, the Cache class contains the Metering Process
   statistics activeFlows, unusedCacheEntries, and dataRecords, as well
   as cacheDiscontinuityTime, which correspond to the IPFIX MIB module



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 26]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   objects ipfixMeteringProcessCacheActiveFlows,
   ipfixMeteringProcessCacheUnusedCacheEntries,
   ipfixMeteringProcessDataRecords, and
   ipfixMeteringProcessDiscontinuityTime, respectively [RFC5815]:

   activeFlows:  The number of Flows currently active in this Cache
      (i.e., the number of Cache entries currently in use).
      This parameter is not available for Cache Mode "immediate".

   unusedCacheEntries:  The number of unused cache entries.  Note that
      the sum of activeFlows and unusedCacheEntries equals maxFlows if
      maxFlows is configured.
      This parameter is not available for Cache Mode "immediate".

   dataRecords:  The number of Data Records generated by this Cache.
      Discontinuities in the value of this counter can occur at re-
      initialization of the management system, and at other times as
      indicated by the value of cacheDiscontinuityTime.

   cacheDiscontinuityTime:  Timestamp of the most recent occasion at
      which dataRecords suffered a discontinuity.  In contrast to
      ipfixMeteringProcessDiscontinuityTime, the time is absolute and
      not relative to sysUpTime.

4.3.1.  CacheLayout Class

         +--------------+
         | CacheLayout  |
         +--------------+   1..* +--------------------------------+
         |              |<>------| CacheField                     |
         |              |        +--------------------------------+
         |              |        | name                           |
         |              |        | ieId/ieName                    |
         |              |        | ieLength {opt.}                |
         |              |        | ieEnterpriseNumber[0..1]       |
         |              |        | isFlowKey[0..1] {except for    |
         |              |        |   for Cache Mode "immediate"}  |
         +--------------+        +--------------------------------+

                       Figure 13: CacheLayout class

   A Cache generates and maintains Packet Reports or Flow Records
   containing information that has been extracted from the incoming
   stream of packets.  Using the CacheField class, the CacheLayout class
   specifies the superset of fields that are included in the Packet
   Reports or Flow Records (see Figure 13).

   If Packet Reports are generated (i.e., if Cache Mode is "immediate"),



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 27]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   every field specified by the Cache Layout MUST be included in the
   resulting Packet Report unless the corresponding Information Element
   is not applicable or cannot be derived from the content or treatment
   of the incoming packet.  Any other field specified by the Cache
   Layout MAY only be included in the Packet Report if it is obvious
   from the field value itself or from the values of other fields in
   same Packet Report that the field value was not determined from the
   packet.

   For example, if a field is configured to contain the TCP source port
   (Information Element tcpSourcePort [RFC5102]), the field MUST be
   included in all Packet Reports which are related to TCP packets.
   Although the field value cannot be determined for non-TCP packets,
   the field MAY be included in the Packet Reports if another field
   contains the transport protocol identifier (Information Element
   protocolIdentifier [RFC5102]).

   If Flow Records are generated (i.e., if Cache Mode is "timeout",
   "natural", or "permanent"), every Flow Key field specified by the
   Cache Layout MUST be included as Flow Key in the resulting Flow
   Record unless the corresponding Information Element is not applicable
   or cannot be derived from the content or treatment of the incoming
   packet.  Any other Flow Key field specified by the Cache Layout MAY
   only be included in the Flow Record if it is obvious from the field
   value itself or from the values of other Flow Key fields in same Flow
   Record that the field value was not determined from the packet.  Two
   packets are accounted by the same Flow Record if none of their Flow
   Key fields differ.  If a Flow Key field can be determined for one
   packet but not for the other, the two packets are accounted in
   different Flow Records.

   Every non-key field specified by the Cache Layout MUST be included in
   the resulting Flow Record unless the corresponding Information
   Element is not applicable or cannot be derived for the given Flow.
   Any other non-key field specified by the Cache Layout MAY only be
   included in the Flow Record if it is obvious from the field value
   itself or from the values of other fields in same Flow Record that
   the field value was not determined from the packet.  Packets which
   are accounted by the same Flow Record may differ in their non-key
   fields, or one or more of the non-key fields can be undetermined for
   all or some of the packets.

   For example, if a non-key field specifies an Information Element
   whose value is determined by the first packet observed within a Flow
   (which is the default rule according to [RFC5102] unless specified
   differently in the description of the Information Element), this
   field MUST be included in the resulting Flow Record if it can be
   determined from the first packet of the Flow.



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 28]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   The CacheLayout class does not have any parameters.  The
   configuration parameters of the CacheField class are as follows:

   ieId, ieName, ieEnterpriseNumber:  These parameters specify a field
      by the combination of the Information Element identifier or name,
      and the Information Element enterprise number.  Either ieId or
      ieName MUST be specified. ieEnterpriseNumber MUST be used for
      enterprise-specific Information Elements.  If ieEnterpriseNumber
      is omitted or zero, this Information Element is registered in the
      IANA registry of IPFIX Information Elements [IANA-IPFIX].
      If the enterprise number is set to 29305, this field contains a
      Reverse Information Element.  In this case, the Cache MUST
      generate Data Records in accordance to [RFC5103].

   ieLength:  This parameter specifies the length of the field in
      octets.  A value of 65535 means that the field is encoded as
      variable-length Information Element.  For Information Elements of
      integer and float type, the field length MAY be set to a smaller
      value than the standard length of the abstract data type if the
      rules of reduced size encoding are fulfilled (see [RFC5101],
      Section 6.2).  If not configured by the user, the field length is
      set by the Monitoring Device.

   isFlowKey:  If present, this field is a Flow Key. If the field
      contains a Reverse Information Element, it MUST NOT be configured
      as Flow Key. If the Cache Mode is "immediate", this parameter is
      not available.

   Note that the use of Information Elements can be restricted to
   certain Cache Modes or to Flow Key or non-key fields.  Such
   restrictions may result from Information Element definitions or from
   device-specific constraints.  According to Section 5, the Monitoring
   Device MUST notify the user if a Cache field cannot be configured
   with the given Information Element.

















Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 29]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


4.4.  ExportingProcess Class

    +-------------------------+
    | ExportingProcess        |
    +-------------------------+   1..*
    | name                    |<>--------+
    | exportMode = "parallel" |          |
    |                         |   +-------------+
    |                         |   | Destination |
    |                         |   +-------------+   1 +---------------+
    |                         |   | name        |<>---| SctpExporter/ |
    |                         |   +-------------+     | UdpExporter/  |
    |                         |                       | TcpExporter/  |
    |                         |                       | FileWriter    |
    |                         |                       +---------------+
    |                         |
    |                         |   0..* +------------------+
    |                         |<>------| Options          |
    +-------------------------+        +------------------+

                     Figure 14: ExportingProcess class

   The ExportingProcess class in Figure 14 specifies destinations to
   which the incoming Packet Reports and Flow Records are exported using
   objects of the Destination class.  The Destination class includes one
   object of the SctpExporter, UdpExporter, TcpExporter, or FileWriter
   class which contains further configuration parameters.  These classes
   are described in Section 4.4.1, Section 4.4.2, Section 4.4.3, and
   Section 4.4.4.

   The order in which objects of the Destination class appear is defined
   by the user.  However, the order has a specific meaning only if the
   exportMode parameter is set to "fallback".  The exportMode parameter
   is defined as follows:

   exportMode:  This parameter determines to which configured
      destination(s) the incoming Data Records are exported.  The
      following parameter values are specified by the configuration data
      model:
      *  parallel: every Data Record is exported to all configured
         destinations in parallel
      *  loadBalancing: every Data Record is exported to exactly one
         configured destination according to a device-specific load-
         balancing policy
      *  fallback: every Data Record is exported to exactly one
         configured destination according to the fallback policy
         described below
      If exportMode is set to "fallback", the first object of the



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 30]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


      Destination class defines the primary destination; the second
      object of the Destination class defines the secondary destination,
      and so on.  If the Exporting Process fails to export Data Records
      to the primary destination, it tries to export them to the
      secondary one.  If the secondary destination fails as well, it
      continues with the tertiary, etc.
      "parallel" is the default value if exportMode is not configured.

   Note that the exportMode parameter is related to the
   ipfixExportMemberType object in [RFC5815].  If exportMode is
   "parallel", the ipfixExportMemberType values of the corresponding
   entries in ipfixExportTable are set to parallel(3).  If exportMode is
   "loadBalancing", the ipfixExportMemberType values of the
   corresponding entries in ipfixExportTable are set to
   loadBalancing(4).  If exportMode is "fallback", the
   ipfixExportMemberType value which refers to the primary destination
   is set to primary(1); the ipfixExportMemberType values which refer to
   the remaining destinations need to be set to secondary(2).  The IPFIX
   MIB module does not define any value for tertiary destination, etc.

   The reporting of information with Options Templates is defined with
   objects of the Options class.

   The Exporting Process may modify the Packet Reports and Flow Records
   to enable a more efficient transmission or storage under the
   condition that no information is changed or suppressed.  For example,
   the Exporting Process may shorten the length of a field according to
   the rules of reduced size encoding [RFC5101].  The Exporting Process
   may also export certain fields in a separate Data Record as described
   in [RFC5476].

4.4.1.  SctpExporter Class

    +------------------------------+
    | SctpExporter                 |
    +------------------------------+    0..1 +------------------------+
    | name                         |<>-------| TransportLayerSecurity |
    | ipfixVersion = 10            |         +------------------------+
    | sourceIPAddress[0..*]        |
    | destinationIPAddress[1..*]   |    0..1 +------------------------+
    | destinationPort = 4739|4740  |<>-------| TransportSession       |
    | ifName/ifIndex[0..1]         |         +------------------------+
    | sendBufferSize {opt.}        |
    | rateLimit[0..1]              |
    | timedReliability = 0         |
    +------------------------------+

                       Figure 15: SctpExporter class



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 31]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   The SctpExporter class shown in Figure 15 contains the configuration
   parameters of an SCTP export destination.  The configuration
   parameters are:

   ipfixVersion:  Version number of the IPFIX protocol used.  If
      omitted, the default value is 10 (=0x000a) as specified in
      [RFC5101].

   sourceIPAddress:  List of source IP addresses used by the Exporting
      Process.  If configured, the specified addresses are eligible
      local IP addresses of the multi-homed SCTP endpoint.  If not
      configured, all locally assigned IP addresses are eligible local
      IP addresses.

   destinationIPAddress:  One or multiple IP addresses of the Collecting
      Process to which IPFIX Messages are sent.  The user must ensure
      that all configured IP addresses belong to the same Collecting
      Process.  The Exporting Process tries to establish an SCTP
      association to any of the configured destination IP addresses.

   destinationPort:  Destination port number to be used.  If not
      configured, standard port 4739 (IPFIX without TLS and DTLS) or
      4740 (IPFIX over TLS or DTLS) is used.

   ifIndex/ifName:  Either the index or the name of the interface used
      by the Exporting Process to export IPFIX Messages to the given
      destination MAY be specified according to corresponding objects in
      the IF-MIB [RFC2863].  If omitted, the Exporting Process selects
      the outgoing interface based on local routing decision and accepts
      return traffic, such as transport layer acknowledgments, on all
      available interfaces.

   sendBufferSize:  Size of the socket send buffer in bytes.

   rateLimit:  Maximum number of bytes per second the Exporting Process
      may export to the given destination as required by [RFC5476].  The
      number of bytes is calculated from the lengths of the IPFIX
      Messages exported.  If this parameter is not configured, no rate
      limiting is performed for this destination.

   timedReliability:  Lifetime in milliseconds until an IPFIX Message
      containing Data Sets only is "abandoned" due to the timed
      reliability mechanism of PR-SCTP [RFC3758].  If this parameter is
      set to zero, reliable SCTP transport MUST be used for all Data
      Records.  Regardless of the value of this parameter, the Exporting
      Process MAY use reliable SCTP transport for Data Sets associated
      with certain Options Templates, such as the Data Record
      Reliability Options Template specified in



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 32]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


      [I-D.ietf-ipfix-export-per-sctp-stream].

   Using the TransportLayerSecurity class described in Section 4.6,
   datagram transport layer security (DTLS) is enabled and configured
   for this export destination.

   If a Transport Session is established to the configured destination,
   the SctpExporter class includes an object of the TransportSession
   class containing state parameters of the Transport Session.  The
   TransportSession class is specified in Section 4.7.

4.4.2.  UdpExporter Class

    +-------------------------------------+
    | UdpExporter                         |
    +-------------------------------------+   0..1 +------------------+
    | name                                |<>------| TransportLayer-  |
    | ipfixVersion = 10                   |        | Security         |
    | sourceIPAddress[0..1]               |        +------------------+
    | destinationIPAddress                |
    | destinationPort = 4739|4740         |   0..1 +------------------+
    | ifName/ifIndex[0..1]                |<>------| TransportSession |
    | sendBufferSize {opt.}               |        +------------------+
    | rateLimit[0..1]                     |
    | maxPacketSize {opt.}                |
    | templateRefreshTimeout = 600        |
    | optionsTemplateRefreshTimeout = 600 |
    | templateRefreshPacket[0..1]         |
    | optionsTemplateRefreshPacket[0..1]  |
    +-------------------------------------+

                       Figure 16: UdpExporter class

   The UdpExporter class shown in Figure 16 contains the configuration
   parameters of a UDP export destination.  The parameters ipfixVersion,
   destinationPort, ifName, ifIndex, sendBufferSize, and rateLimit have
   the same meaning as in the SctpExporter class (see Section 4.4.1).
   The remaining configuration parameters are:

   sourceIPAddress:  This parameter specifies the source IP address used
      by the Exporting Process.  If this parameter is omitted, the IP
      address assigned to the outgoing interface is used as source IP
      address.








Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 33]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   destinationIPAddress:  Destination IP address to which IPFIX Messages
      are sent (i.e., the IP address of the Collecting Process).

   maxPacketSize:  This parameter specifies the maximum size of IP
      packets sent to the Collector.  If set to zero, the Exporting
      Device MUST derive the maximum packet size from path MTU discovery
      mechanisms.  If not configured by the user, this parameter is set
      by the Monitoring Device.

   templateRefreshTimeout, optionsTemplateRefreshTimeout,
   templateRefreshPacket, optionsTemplateRefreshPacket:  Template
      refresh parameters when using UDP as transport protocol.
      templateRefreshTimeout and optionsTemplateRefreshTimeout are
      specified in seconds between resendings of (Options) Templates.
      If omitted, the default value of 600 seconds (10 minutes) is used
      [RFC5101].
      templateRefreshPacket and optionsTemplateRefreshPacket specify the
      number of IPFIX Messages after which (Options) Templates are
      resent.  If omitted, the (Options) Templates are only resent after
      timeout.
      The values of these configuration parameters reappear as state
      parameters in the associated TransportSession object.

   Using the TransportLayerSecurity class described in Section 4.6,
   datagram transport layer security (DTLS) is enabled and configured
   for this export destination.

   If a Transport Session is established to the configured destination,
   the UdpExporter class includes an object of the TransportSession
   class containing state parameters of the Transport Session.  The
   TransportSession class is specified in Section 4.7.

4.4.3.  TcpExporter Class

    +------------------------------+
    | TcpExporter                  |
    +------------------------------+    0..1 +------------------------+
    | name                         |<>-------| TransportLayerSecurity |
    | ipfixVersion = 10            |         +------------------------+
    | sourceIPAddress[0..1]        |
    | destinationIPAddress         |    0..1 +------------------------+
    | destinationPort = 4739|4740  |<>-------| TransportSession       |
    | ifName/ifIndex[0..1]         |         +------------------------+
    | sendBufferSize {opt.}        |
    | rateLimit[0..1]              |
    +------------------------------+

                       Figure 17: TcpExporter class



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 34]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   The TcpExporter class shown in Figure 17 contains the configuration
   parameters of a TCP export destination.  The parameters have the same
   meaning as in the UdpExporter class (see Section 4.4.2).

   Using the TransportLayerSecurity class described in Section 4.6,
   transport layer security (TLS) is enabled and configured for this
   export destination.

   If a Transport Session is established to the configured destination,
   the TcpExporter class includes an object of the TransportSession
   class containing state parameters of the Transport Session.  The
   TransportSession class is specified in Section 4.7.

4.4.4.  FileWriter Class

      +-----------------------------------------+
      | FileWriter                              |
      +-----------------------------------------+    0..* +----------+
      | name                                    |<>-------| Template |
      | ipfixVersion = 10                       |         +----------+
      | file                                    |
      | status {readOnly}                       |
      | bytes {readOnly}                        |
      | messages {readOnly}                     |
      | discardedMessages {readOnly}            |
      | records {readOnly}                      |
      | templates {readOnly}                    |
      | optionsTemplates {readOnly}             |
      | fileWriterDiscontinuityTime {readOnly}  |
      +-----------------------------------------+

                       Figure 18: FileWriter classes

   If an object of the FileWriter class is included in an object of the
   Destination class, IPFIX Messages are written into a file as
   specified in [RFC5655].  The FileWriter class contains the following
   configuration parameters:

   ipfixVersion:  Version number of the IPFIX protocol used.  If
      omitted, the default value is 10 (=0x000a) as specified in
      [RFC5101].

   file:  File name and location specified as URI.

   The state parameters of the FileWriter class are:






Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 35]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   bytes, messages, records, templates, optionsTemplates:  The number of
      bytes, IPFIX Messages, Data Records, Template Records, and Options
      Template Records written by the File Writer.  Discontinuities in
      the values of these counters can occur at re-initialization of the
      management system, and at other times as indicated by the value of
      fileWriterDiscontinuityTime.

   discardedMessages:  The number of IPFIX Messages that could not be
      written by the File Writer due to internal buffer overflows,
      limited storage capacity etc.  Discontinuities in the value of
      this counter can occur at re-initialization of the management
      system, and at other times as indicated by the value of
      fileWriterDiscontinuityTime.

   fileWriterDiscontinuityTime:  Timestamp of the most recent occasion
      at which one or more File Writer counters suffered a
      discontinuity.  In contrast to discontinuity times in the IPFIX
      MIB module, the time is absolute and not relative to sysUpTime.

   Each object of the FileWriter class includes a list of objects of the
   Template class with information and statistics about the Templates
   written to the file.  The Template class is specified in Section 4.8.

4.4.5.  Options Class

                         +-----------------------+
                         | Options               |
                         +-----------------------+
                         | name                  |
                         | optionsType           |
                         | optionsTimeout {opt.} |
                         +-----------------------+

                         Figure 19: Options class

   The Options class in Figure 19 defines the type of specific
   information to be reported, such as statistics, flow keys, Sampling
   and Filtering parameters etc.  [RFC5101] and [RFC5476] specify
   several types of reporting information which may be exported.  The
   following parameter values are specified by the configuration data
   model:

   meteringStatistics:  Export of Metering Process statistics using the
      Metering Process Statistics Options Template [RFC5101].







Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 36]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   meteringReliability:  Export of Metering Process reliability
      statistics using the Metering Process Reliability Statistics
      Options Template [RFC5101].

   exportingReliability:  Export of Exporting Process reliability
      statistics using the Exporting Process Reliability Statistics
      Options Template [RFC5101].

   flowKeys:  Export of the Flow Key specification using the Flow Keys
      Options Template [RFC5101].

   selectionSequence:  Export of Selection Sequence Report
      Interpretation and Selector Report Interpretation [RFC5476].

   selectionStatistics:  Export of Selection Sequence Statistics Report
      Interpretation [RFC5476].

   accuracy:  Export of Accuracy Report Interpretation [RFC5476].

   reducingRedundancy:  Enables the utilization of Options Templates to
      reduce redundancy in the exported Data Records according to
      [RFC5473].  The Exporting Process decides when to apply these
      Options Templates.

   extendedTypeInformation:  Export of extended type information for
      enterprise-specific Information Elements used in the exported
      Templates [RFC5610].

   The Exporting Process MUST choose a Template definition according to
   the options type and available options data.

   The optionsTimeout parameter specifies the reporting interval (in
   milliseconds) for periodic export of the option data.  A parameter
   value of zero means that the export of the option data is not
   triggered periodically, but whenever the available option data has
   changed.  This is the typical setting for options types flowKeys,
   selectionSequence, accuracy, and reducingRedundancy.  If
   optionsTimeout is not configured by the user, it is set by the
   Monitoring Device.












Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 37]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


4.5.  CollectingProcess Class

           +-------------------+
           | CollectingProcess |
           +-------------------+
           | name              |       0..* +------------------+
           |                   |<>----------| SctpCollector    |
           |                   |            +------------------+
           |                   |
           |                   |       0..* +------------------+
           |                   |<>----------| UdpCollector     |
           |                   |            +------------------+
           |                   |
           |                   |       0..* +------------------+
           |                   |<>----------| TcpCollector     |
           |                   |            +------------------+
           |                   |
           |                   |       0..* +------------------+
           |                   |<>----------| FileReader       |
           |                   |            +------------------+
           |                   |
           |                   | 0..*  0..* +------------------+
           |                   |----------->| ExportingProcess |
           +-------------------+            +------------------+

                    Figure 20: CollectingProcess class

   Figure 20 shows the CollectingProcess class that contains the
   configuration and state parameters of a Collecting Process.  Objects
   of the SctpCollector, UdpCollector, and TcpCollector classes specify
   how IPFIX Messages are received from remote Exporters.  The
   Collecting Process can also be configured as a File Reader using
   objects of the FileReader class.  These classes are described in
   Section 4.5.1, Section 4.5.2, Section 4.5.3, and Section 4.5.4.

   An CollectingProcess object MAY refer to one or multiple
   ExportingProcess objects configuring Exporting Processes that export
   the received data without modifications to a file or to another
   Collector.












Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 38]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


4.5.1.  SctpCollector Class

      +--------------------------+
      | SctpCollector            |
      +--------------------------+    0..1 +------------------------+
      | name                     |<>-------| TransportLayerSecurity |
      | localIPAddress[0..*]     |         +------------------------+
      | localPort = 4739|4740    |
      |                          |    0..* +------------------------+
      |                          |<>-------| TransportSession       |
      +--------------------------+         +------------------------+

                      Figure 21: SctpCollector class

   The SctpCollector class contains the configuration parameters of a
   listening SCTP socket of the Collecting Process.  The parameters are:

   localIPAddress:  List of local IP addresses on which the Collecting
      Process listens for IPFIX Messages.  The IP addresses are used as
      eligible local IP addresses of the multi-homed SCTP endpoint
      [RFC4960].  If omitted, the Collecting Process listens on all
      local IP addresses.

   localPort:  Local port number on which the Collecting Process listens
      for IPFIX Messages.  If omitted, standard port 4739 (IPFIX without
      TLS and DTLS) or 4740 (IPFIX over TLS or DTLS) is used.

   Using the TransportLayerSecurity class described in Section 4.6,
   datagram transport layer security (DTLS) is enabled and configured
   for this receiving socket.

   As state data, the SctpCollector class contains the list of currently
   established Transport Sessions that terminate at the given SCTP
   socket of the Collecting Process.  The TransportSession class is
   specified in Section 4.7.

4.5.2.  UdpCollector Class

      +--------------------------+
      | UdpCollector             |
      +--------------------------+    0..1 +------------------------+
      | name                     |<>-------| TransportLayerSecurity |
      | localIPAddress[0..*]     |         +------------------------+
      | localPort = 4739|4740    |
      | templateLifetime = 1800  |    0..* +------------------------+
      |                          |<>-------| TransportSession       |
      +--------------------------+         +------------------------+




Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 39]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


                       Figure 22: UdpCollector class

   The UdpCollector class contains the configuration parameters of a
   listening UDP socket of the Collecting Process.  The parameter
   localPort has the same meaning as in the SctpCollector class (see
   Section 4.5.1).  The remaining parameters are:

   localIPAddress:  List of local IP addresses on which the Collecting
      Process listens for IPFIX Messages.  If omitted, the Collecting
      Process listens on all local IP addresses.

   templateLifetime:  Template lifetime in seconds.  If not configured,
      the default value 1800 is used, which is three times the default
      Template refresh timeout (see Section 4.4) as specified in
      [RFC5101].

   Using the TransportLayerSecurity class described in Section 4.6,
   datagram transport layer security (DTLS) is enabled and configured
   for this receiving socket.

   As state data, the UdpCollector class contains the list of currently
   established Transport Sessions that terminate at the given UDP socket
   of the Collecting Process.  The TransportSession class is specified
   in Section 4.7.

4.5.3.  TcpCollector Class

      +--------------------------+
      | TcpCollector             |
      +--------------------------+    0..1 +------------------------+
      | name                     |<>-------| TransportLayerSecurity |
      | localIPAddress[0..*]     |         +------------------------+
      | localPort = 4739|4740    |
      |                          |    0..* +------------------------+
      |                          |<>-------| TransportSession       |
      +--------------------------+         +------------------------+

                       Figure 23: TcpCollector class

   The TcpCollector class contains the configuration parameters of a
   listening TCP socket of the Collecting Process.  The parameters have
   the same meaning as in the UdpCollector class (see Section 4.5.2).

   Using the TransportLayerSecurity class described in Section 4.6,
   transport layer security (TLS) is enabled and configured for this
   receiving socket.

   As state data, the TcpCollector class contains the list of currently



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 40]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   established Transport Sessions that terminate at the given TCP socket
   of the Collecting Process.  The TransportSession class is specified
   in Section 4.7.

4.5.4.  FileReader Class

      +-----------------------------------------+
      | FileReader                              |
      +-----------------------------------------+    0..* +----------+
      | name                                    |<>-------| Template |
      | file                                    |         +----------+
      | bytes {readOnly}                        |
      | messages {readOnly}                     |
      | records {readOnly}                      |
      | templates {readOnly}                    |
      | optionsTemplates {readOnly}             |
      | fileReaderDiscontinuityTime {readOnly}  |
      +-----------------------------------------+

                       Figure 24: FileReader classes

   The Collecting Process may import IPFIX Messages from a file as
   specified in [RFC5655].  The FileReader class defines the following
   configuration parameter:

   file:  File name and location specified as URI.

   The state parameters of the FileReader class are:

   bytes, messages, records, templates, optionsTemplates:  The number of
      bytes, IPFIX Messages, Data Records, Template Records, and Options
      Template Records read by the File Reader.  Discontinuities in the
      values of these counters can occur at re-initialization of the
      management system, and at other times as indicated by the value of
      fileReaderDiscontinuityTime.

   fileReaderDiscontinuityTime:  Timestamp of the most recent occasion
      at which one or more File Reader counters suffered a
      discontinuity.  In contrast to discontinuity times in the IPFIX
      MIB module, the time is absolute and not relative to sysUpTime.

   Each object of the FileReader class includes a list of objects of the
   Template class with information and statistics about the Templates
   read from the file.  The Template class is specified in Section 4.8.







Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 41]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


4.6.  Transport Layer Security Class

                  +--------------------------------------+
                  | TransportLayerSecurity               |
                  +--------------------------------------+
                  | localCertificationAuthorityDN[0..*]  |
                  | localSubjectDN[0..*]                 |
                  | localSubjectFQDN[0..*]               |
                  | remoteCertificationAuthorityDN[0..*] |
                  | remoteSubjectDN[0..*]                |
                  | remoteSubjectFQDN[0..*]              |
                  +--------------------------------------+

                  Figure 25: TransportLayerSecurity class

   The TransportLayerSecurity class is used in the Exporting Process's
   SctpExporter, UdpExporter, and TcpExporter classes and the Collecting
   Process's SctpCollector, UdpCollector, and TcpCollector classes to
   enable and configure transport layer security for IPFIX.  Transport
   layer security can be enabled without configuring any additional
   parameters.  In this case, an empty XML element
   <transportLayerSecurity /> appears in the configuration.  If
   transport layer security is enabled, the endpoint must use DTLS
   [RFC4347] if the transport protocol is SCTP or UDP, and TLS [RFC5246]
   if the transport protocol is TCP.

   [RFC5101] mandates strong mutual authentication of Exporting
   Processes and Collecting Process:

      "IPFIX Exporting Processes and IPFIX Collecting Processes are
      identified by the fully qualified domain name of the interface on
      which IPFIX Messages are sent or received, for purposes of X.509
      client and server certificates as in [RFC3280].

      To prevent man-in-the-middle attacks from impostor Exporting or
      Collecting Processes, the acceptance of data from an unauthorized
      Exporting Process, or the export of data to an unauthorized
      Collecting Process, strong mutual authentication via asymmetric
      keys MUST be used for both TLS and DTLS.  Each of the IPFIX
      Exporting and Collecting Processes MUST verify the identity of its
      peer against its authorized certificates, and MUST verify that the
      peer's certificate matches its fully qualified domain name, or, in
      the case of SCTP, the fully qualified domain name of one of its
      endpoints.

      The fully qualified domain name used to identify an IPFIX
      Collecting Process or Exporting Process may be stored either in a
      subjectAltName extension of type dNSName, or in the most specific



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 42]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


      Common Name field of the Subject field of the X.509 certificate.
      If both are present, the subjectAltName extension is given
      preference."

   In order to use transport layer security, appropriate certificates
   and keys have to be previously installed on the Monitoring Devices.
   For security reasons, the configuration data model does not offer the
   possibility to upload any certificates or keys on a Monitoring
   Device.  If transport layer security is enabled on a Monitoring
   Device which does not dispose of appropriate certificates and keys,
   the configuration MUST be rejected with an error.

   The configuration data model allows restricting the authorization of
   remote endpoints to certificates issued by specific certification
   authorities or identifying specific fully qualified domain names for
   authorization.  Furthermore, the configuration data model allows
   restricting the utilization of certificates identifying the local
   endpoint.  This is useful if the Monitoring Device disposes of more
   than one certificate for the given local endpoint.

   The configuration parameters are defined as follows:

   localCertificationAuthorityDN:  This parameter MAY appear one or
      multiple times to restrict the identification of the local
      endpoint during the TLS/DTLS handshake to certificates issued by
      the configured certification authorities.  Each occurrence of this
      parameter contains the distinguished name of one certification
      authority.
      To identify the local endpoint, the Exporting Process or
      Collecting Process MUST use a certificate issued by one of the
      configured certification authority.  Certificates issued by any
      other certification authority MUST NOT be sent to the remote peer
      during TLS/DTLS handshake.  If none of the certificates installed
      on the Monitoring Device fulfills the specified restrictions, the
      configuration MUST be rejected with an error.
      If localCertificationAuthorityDN is not configured, the choice of
      certificates identifying the local endpoint is not restricted with
      respect to the issuing certification authority.

   localSubjectDN, localSubjectFQDN:  Each of these parameters MAY
      appear one or multiple times to restrict the identification of the
      local endpoint during the TLS/DTLS handshake to certificates
      issued for specific subjects or for specific fully qualified
      domain names.  Each occurrence of localSubjectDN contains a
      distinguished name identifying the local endpoint.  Each
      occurrence of localSubjectFQDN contains a fully qualified domain
      name which is assigned to the local endpoint.
      To identify the local endpoint, the Exporting Process or



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 43]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


      Collecting Process MUST use a certificate that contains either one
      of the configured distinguished names in the subject field or at
      least one of the configured fully qualified domain names in a
      dNSName component of the subject alternative extension field or in
      the most specific commonName component of the subject field.  If
      none of the certificates installed on the Monitoring Device
      fulfills the specified restrictions, the configuration MUST be
      rejected with an error.
      If any of the parameters localSubjectDN and localSubjectFQDN is
      configured at the same time as the localCertificationAuthorityDN
      parameter, certificates MUST also fulfill the specified
      restrictions regarding the certification authority.
      If localSubjectDN and localSubjectFQDN are not configured, the
      choice of certificates identifying the local endpoint is not
      restricted with respect to the subject's distinguished name or
      fully qualified domain name.

   remoteCertificationAuthorityDN:  This parameter MAY appear one or
      multiple times to restrict the authentication of remote endpoints
      during the TLS/DTLS handshake to certificates issued by the
      configured certification authorities.  Each occurrence of this
      parameter contains the distinguished name of one certification
      authority.
      To authenticate the remote endpoint, the remote Exporting Process
      or Collecting Process MUST provide a certificate issued by one of
      the configured certification authority.  Certificates issued by
      any other certification authority MUST be rejected during TLS/DTLS
      handshake.
      If the Monitoring Device is not able to validate certificates
      issued by the configured certification authorities (e.g., because
      of missing public keys), the configuration must be rejected with
      an error.
      If remoteCertificationAuthorityDN is not configured, the
      authorization of remote endpoints is not restricted with respect
      to the issuing certification authority of the delivered
      certificate.

   remoteSubjectDN, remoteSubjectFQDN:  Each of these parameters MAY
      appear one or multiple times to restrict the authentication of
      remote endpoints during the TLS/DTLS handshake to certificates
      issued for specific subjects or for specific fully qualified
      domain names.  Each occurrence of remoteSubjectDN contains a
      distinguished name identifying a remote endpoint.  Each occurrence
      of remoteSubjectFQDN contains a fully qualified domain name which
      is assigned to a remote endpoint.
      To authenticate a remote endpoint, the remote Exporting Process or
      Collecting Process MUST provide a certificate that contains either
      one of the configured distinguished names in the subject field or



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 44]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


      at least one of the configured fully qualified domain names in a
      dNSName component of the subject alternative extension field or in
      the most specific commonName component of the subject field.
      Certificates not fulfilling this condition MUST be rejected during
      TLS/DTLS handshake.
      If any of the parameters remoteSubjectDN and remoteSubjectFQDN is
      configured at the same time as the remoteCertificationAuthorityDN
      parameter, certificates MUST also fulfill the specified
      restrictions regarding the certification authority in order to be
      accepted.
      If remoteSubjectDN and remoteSubjectFQDN are not configured, the
      authorization of remote endpoints is not restricted with respect
      to the subject's distinguished name or fully qualified domain name
      of the delivered certificate.

4.7.  Transport Session Class

    +-----------------------------------------------------+
    | TransportSession                                    |
    +-----------------------------------------------------+
    | ipfixVersion {readOnly}                             |<>----+ 0..*
    | protocol {readOnly}                                 |      |
    | sourceAddress {readOnly}                            | +----------+
    | destinationAddress {readOnly}                       | | Template |
    | sourcePort {readOnly}                               | +----------+
    | destinationPort {readOnly}                          |
    | sctpAssocId {readOnly} {SCTP only}                  |
    | templateRefreshTimeout {readOnly} {UDP only}        |
    | optionsTemplateRefreshTimeout {readOnly} {UDP only} |
    | templateRefreshPacket {readOnly} {UDP only}         |
    | optionsTemplateRefreshPacket {readOnly} {UDP only}  |
    | status {readOnly}                                   |
    | rate {readOnly}                                     |
    | packets {readOnly}                                  |
    | bytes {readOnly}                                    |
    | messages {readOnly}                                 |
    | discardedMessages {readOnly}                        |
    | records {readOnly}                                  |
    | templates {readOnly}                                |
    | optionsTemplates {readOnly}                         |
    | transportSessionStartTime {readOnly}                |
    | transportSessionDiscontinuityTime {readOnly}        |
    +-----------------------------------------------------+

                     Figure 26: TransportSession class

   The TransportSession class contains state data about Transport
   Sessions originating from an Exporting Process or terminating at a



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 45]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   Collecting Process.  The state parameters correspond to the managed
   objects in the ipfixTransportSessionTable and
   ipfixTransportSessionStatsTable of the IPFIX MIB module [RFC5815].
   Note that the MIB object ipfixTransportSessionDeviceMode is not
   included in the TransportSession class because its value can be
   derived from the scope in which a TransportSession object appears:
   exporting(1) if it belongs to an Exporting Process, collecting(2) if
   it belongs to a Collecting Process.

   ipfixVersion:  Used for Exporting Processes, this parameter contains
      the version number of the IPFIX protocol that the Exporter uses to
      export its data in this Transport Session.
      Used for Collecting Processes, this parameter contains the version
      number of the IPFIX protocol it receives for this Transport
      Session.
      If IPFIX Messages of different IPFIX protocol versions are
      transmitted or received in this Transport Session, this object
      contains the maximum version number.
      This state parameter is identical to
      ipfixTransportSessionIpfixVersion in the IPFIX MIB module
      [RFC5815].

   protocol:  The transport protocol used for receiving or transmitting
      IPFIX Messages.
      This state parameter is identical to ipfixTransportSessionProtocol
      in the IPFIX MIB module [RFC5815].

   sourceAddress, destinationAddress:  The IP addresses of the Exporter
      and the Collector the Transport Session.  These parameters are
      omitted for transport protocols without notion of addresses, such
      as SCTP.
      These state parameters are identical to
      ipfixTransportSessionSourceAddress and
      ipfixTransportSessionDestinationAddress in the IPFIX MIB module
      [RFC5815].

   sourcePort, destinationPort:  The transport protocol port numbers of
      the Exporter and the Collector of the Transport Session.  If a
      transport protocol without the notion of ports is used, these
      parameters are omitted.
      These state parameters are identical to
      ipfixTransportSessionSourcePort and
      ipfixTransportSessionDestinationPort in the IPFIX MIB module
      [RFC5815].







Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 46]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   sctpAssocId:  The association id used for the SCTP session between
      the Exporter and the Collector of the Transport Session.  It is
      equal to the sctpAssocId entry in the sctpAssocTable defined in
      the SCTP-MIB [RFC3871].
      This parameter is only available if the transport protocol is SCTP
      (132).
      This state parameter is identical to
      ipfixTransportSessionSctpAssocId in the IPFIX MIB module
      [RFC5815].

   templateRefreshTimeout, optionsTemplateRefreshTimeout:  Used for
      Exporting Processes, these parameters contain the time in seconds
      after which Templates and Options Templates MUST be resent by the
      Exporter.
      Used for Collecting Processes, these parameters contain the
      lifetime in seconds after which Templates or Options Templates
      becomes invalid when they are not received again within this
      lifetime.
      These parameters are only available if the transport protocol is
      UDP (17).
      These state parameters are identical to
      ipfixTransportSessionTemplateRefreshTimeout and
      ipfixTransportSessionOptionsTemplateRefreshTimeout in the IPFIX
      MIB module [RFC5815].

   templateRefreshPacket, optionsTemplateRefreshPacket:  Used for
      Exporting Processes, these parameters contain the number of
      exported IPFIX Messages after which Templates and Options
      Templates MUST be resent by the Exporter.
      Used for Collecting Processes, these parameters contain the
      lifetime in number of exported IPFIX Messages after which
      Templates or Options Templates becomes invalid when they are not
      received again within this lifetime.
      These parameters are only available if the transport protocol is
      UDP (17).
      These state parameters are identical to
      ipfixTransportSessionTemplateRefreshPacket and
      ipfixTransportSessionOptionsTemplateRefreshPacket in the IPFIX MIB
      module [RFC5815].

   status:  Status of the Transport Session, which can be one of the
      following:
      *  inactive: Transport Session is established, but no IPFIX
         Messages are currently transferred (e.g., because this is a
         backup (secondary) session)
      *  active: Transport Session is established and transfers IPFIX
         Messages




Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 47]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


      *  unknown: Transport Session status cannot be determined
      This state parameter is identical to ipfixTransportSessionStatus
      in the IPFIX MIB module [RFC5815].

   rate:  The number of bytes per second transmitted by the Exporting
      Process or received by the Collecting Process.  This parameter is
      updated every second.
      This state parameter is identical to ipfixTransportSessionRate in
      the IPFIX MIB module [RFC5815].

   packets, bytes, messages, records, templates, optionsTemplates:  The
      number of packets, bytes, IPFIX Messages, Data Records, Template
      Records, and Options Template Records transmitted by the Exporting
      Process or received by the Collecting Process.  Discontinuities in
      the values of these counters can occur at re-initialization of the
      management system, and at other times as indicated by the value of
      transportSessionDiscontinuityTime.

   discardedMessages:  Used for Exporting Processes, this parameter
      indicates the number of messages that could not be sent due to
      internal buffer overflows, network congestion, routing issues,
      etc.
      Used for Collecting Process, this parameter indicates the number
      of received IPFIX Message that are malformed, cannot be decoded,
      are received in the wrong order or are missing according to the
      sequence number.
      Discontinuities in the value of this counter can occur at re-
      initialization of the management system, and at other times as
      indicated by the value of transportSessionDiscontinuityTime.

   transportSessionStartTime:  Timestamp of the start of the given
      Transport Session.
      This state parameter does not correspond to any object in the
      IPFIX MIB module.

   transportSessionDiscontinuityTime:  Timestamp of the most recent
      occasion at which one or more of the Transport Session counters
      suffered a discontinuity.  In contrast to
      ipfixTransportSessionDiscontinuityTime, the time is absolute and
      not relative to sysUpTime.

   Each object of the TransportSession class includes a list of objects
   of the Template class with information and statistics about the
   Templates transmitted or received on the given Transport Session.
   The Template class is specified in Section 4.8.






Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 48]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


4.8.  Template Class

     +--------------------------------------+
     | Template                             |
     +--------------------------------------+
     | observationDomainId {readOnly}       |<>---+ 0..*
     | templateId {readOnly}                |     |
     | setId {readOnly}                     |     |
     | accessTime {readOnly}                |     |
     | templateDataRecords {readOnly}       |     |
     | templateDiscontinuityTime {readOnly} |     |
     +--------------------------------------+     |
                                                  |
                              +--------------------------------------+
                              | Field                                |
                              +--------------------------------------+
                              | ieId {readOnly}                      |
                              | ieLength {readOnly}                  |
                              | ieEnterpriseNumber {readOnly}        |
                              | isFlowKey {readOnly} {non-Options    |
                              |   Template only}                     |
                              | isScope {readOnly} {Options Template |
                              |   only}                              |
                              +--------------------------------------+

                         Figure 27: Template class

   The Template class contains state data about Templates used by an
   Exporting Process or received by a Collecting Process in a specific
   Transport Session.  The Field class defines one field of the
   Template.  The names and semantics of the state parameters correspond
   to the managed objects in the ipfixTemplateTable,
   ipfixTemplateDefinitionTable, and ipfixTemplateStatsTable of the
   IPFIX MIB module [RFC5815]:

   observationDomainId:  The ID of the Observation Domain for which this
      Template is defined.

   templateId:  This number indicates the Template Id in the IPFIX
      message.

   setId:  This number indicates the Set ID of the Template.
      Currently, there are two values defined [RFC5101].  The value 2 is
      used for Sets containing Template definitions.  The value 3 is
      used for Sets containing Options Template definitions.






Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 49]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   accessTime:  Used for Exporting Processes, this parameter contains
      the time when this (Options) Template was last sent to the
      Collector or written to the file.
      Used for Collecting Processes, this parameter contains the time
      when this (Options) Template was last received from the Exporter
      or read from the file.

   templateDataRecords:  The number of transmitted or received Data
      Records defined by this (Options) Template since the point in time
      indicated by templateDefinitionTime.

   templateDiscontinuityTime:  Timestamp of the most recent occasion at
      which the counter templateDataRecords suffered a discontinuity.
      In contrast to ipfixTemplateDiscontinuityTime, the time is
      absolute and not relative to sysUpTime.

   ieId, ieLength, ieEnterpriseNumber:  Information Element ID, length,
      and enterprise number of a field in the Template.  If this is not
      an enterprise-specific Information Element, ieEnterpriseNumber is
      omitted.
      These state parameters are identical to
      ipfixTemplateDefinitionIeId, ipfixTemplateDefinitionIeLength, and
      ipfixTemplateDefinitionIeEnterpriseNumber in the IPFIX MIB module
      [RFC5815].

   isFlowKey:  If this state parameter is present, this is a Flow Key
      field.
      This parameter is only available for non-Options Templates (i.e.,
      if setId is 2).

   isFlowKey:  If this state parameter is present, this is a scope
      field.
      This parameter is only available for Options Templates (i.e., if
      setId is 3).


5.  Adaptation to Device Capabilities

   The configuration data model standardizes a superset of common IPFIX
   and PSAMP configuration parameters.  A typical Monitoring Device
   implementation will not support the entire range of possible
   configurations.  Certain functions may not be supported, such as the
   Collecting Process that does not exist on a Monitoring Device which
   is conceived as Exporter only.  The configuration of other functions
   may be subject to resource limitations or functional restrictions.
   For example, the Cache size is typically limited according to the
   available memory on the device.  It is also possible that a
   Monitoring Device implementation requires the configuration of



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 50]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   additional parameters which are not part of the configuration data
   model in order to function properly.

   YANG [I-D.ietf-netmod-yang] offers several possibilities to restrict
   and adapt a configuration data model.  The current version of YANG
   defines the concepts of features, deviations, and extensions.

   The feature concept allows the author of a configuration data model
   to make proportions of the model conditional in a manner that is
   controlled by the device.  Devices do not have to support these
   conditional parts to conform to the model.  If the NETCONF protocol
   is used, features which are supported by the device are announced in
   the <hello> message [RFC4741].

   The configuration data model for IPFIX and PSAMP covers the
   configuration of Exporters, Collectors, and devices that may act as
   both.  As Exporters and Collectors implement different functions, the
   corresponding proportions of the model are conditional on the
   following features:

   exporter:  If this feature is supported, Exporting Processes can be
      configured.

   collector:  If this feature is supported, Collecting Processes can be
      configured.

   Exporters do not necessarily implement any Selection Processes,
   Caches, or even Observation Points in particular cases.  Therefore,
   the corresponding proportions of the model are conditional on the
   following feature:

   meter:  If this feature is supported, Observation Points, Selection
      Processes, and Caches can be configured.

   Additional features refer to different PSAMP Sampling and Filtering
   methods as well as to the Cache Modes:

   psampSampCountBased:  If this feature is supported, Sampling method
      sampCountBased can be configured.

   psampSampTimeBased:  If this feature is supported, Sampling method
      sampTimeBased can be configured.

   psampSampRandOutOfN:  If this feature is supported, Sampling method
      sampRandOutOfN can be configured.






Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 51]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   psampSampUniProb:  If this feature is supported, Sampling method
      sampUniProb can be configured.

   psampFilterMatch:  If this feature is supported, Filtering method
      filterMatch can be configured.

   psampFilterHash:  If this feature is supported, Filtering method
      filterHash can be configured.

   cacheModeImmediate:  If this feature is supported, Cache Mode
      "immediate" can be configured.

   cacheModeTimeout:  If this feature is supported, Cache Mode "timeout"
      can be configured.

   cacheModeNatural:  If this feature is supported, Cache Mode "natural"
      can be configured.

   cacheModePermanent:  If this feature is supported, Cache Mode
      "permanent" can be configured.

   The following features concern the support of UDP and TCP as
   transport protocols and the support of File Readers and File Writers:

   udpTransport:  If this feature is supported, UDP can be used as
      transport protocol by Exporting Processes and Collecting
      Processes.

   tcpTransport:  If this feature is supported, TCP can be used as
      transport protocol by Exporting Processes and Collecting
      Processes.

   fileReader:  If this feature is supported, File Readers can be
      configured as part of Collecting Processes.

   fileWriter:  If this feature is supported, File Writers can be
      configured as part of Exporting Processes.

   The deviation concept enables a device to announce deviations from
   the standard model using the "deviation" statement.  For example, it
   is possible to restrict the value range of a specific parameter or to
   define that the configuration of a certain parameter is not supported
   at all.  Hence, deviations are typically used to specify limitations
   due to resource constraints or functional restrictions.  Deviations
   concern existing parameters of the original configuration data model
   and must not be confused with model extensions.  Model extensions are
   specified with the "augment" statement and allow adding new
   parameters to the original configuration data model.



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 52]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   If certain device-specific constraints cannot be formally specified
   with YANG, they MUST be expressed with human-readable text using the
   "description" statement.  The provided information MUST enable the
   user to define a configuration which is entirely supported by the
   Monitoring Device.  On the other hand, if a Monitoring Device is
   configured, it MUST notify the user about any part of the
   configuration which is not supported.  The Monitoring Device MUST NOT
   silently accept configuration data which cannot be completely
   enforced.  If the NETCONF protocol is used to send configuration data
   to the Monitoring Device, the error handling is specified in the
   NETCONF protocol specification [RFC4741].

   Just like features, deviations and model extensions are announced in
   NETCONF's <hello> message.  A usage example of deviations is given in
   Section 7.5.


6.  YANG Module of the IPFIX/PSAMP Configuration Data Model

   The YANG module specification of the configuration data model is
   listed below.  It makes use of the common YANG types defined in the
   modules urn:ietf:params:xml:ns:yang:ietf-yang-types and
   urn:ietf:params:xml:ns:yang:ietf-inet-types
   [I-D.ietf-netmod-yang-types].

   <CODE BEGINS> file "ietf-ipfix-psamp@2010-07-08.yang"
   module ietf-ipfix-psamp {
     namespace "urn:ietf:params:xml:ns:yang:ietf-ipfix-psamp";
     prefix ipfix;

     import ietf-yang-types { prefix yang; }
     import ietf-inet-types { prefix inet; }

     organization
       "IETF IPFIX Working Group";

     contact
       "WG Web:   <http://tools.ietf.org/wg/ipfix/>
       WG List:  <mailto:ipfix@ietf.org>

       WG Chair: Nevil Brownlee
                 <n.brownlee@auckland.ac.nz>

       WG Chair: Juergen Quittek
                 <quittek@neclab.eu>

       Editor:   Gerhard Muenz
                 <mailto:muenz@net.in.tum.de>";



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 53]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


     description
       "IPFIX/PSAMP Configuration Data Model

       Copyright (c) 2010 IETF Trust and the persons identified as
       the document authors.  All rights reserved.
       Redistribution and use in source and binary forms, with or
       without modification, is permitted pursuant to, and subject
       to the license terms contained in, the Simplified BSD License
       set forth in Section 4.c of the IETF Trust's Legal Provisions
       Relating to IETF Documents
       (http://trustee.ietf.org/license-info).";

     revision 2010-07-08 {
       description "Version of draft-ietf-ipfix-configuration-model-06
         Changes in draft-ietf-ipfix-configuration-model-06:
         - new features cacheModeImmediate, cacheModeTimeout,
           cacheModeNatural, cacheModePermanent
         - parameter exportingProcess/destination/exportMemberType
           replaced by new parameter exportingProcess/exportMode
         - new destination subclasses sctpExporter, tcpExporter,
           udpExporter, and fileWriter
         - Template's bitvector state parameter flags replaced by
           isFlowKey and isScope parameters
         - interface and linecard containers removed from
           observationPoint
         - Cache parameter maxRecords renamed maxFlows
         - fileWriter and fileReader have separate statistics
           (do not use Transport Session statistics)
         - new Transport Session state parameter
           transportSessionStartTime
         - parameter inactiveFlows renamed unusedCacheEntries
           (as in IPFIX MIB)
         - a Selection Process may receive packets from multiple
           Observation Points but may only refer to a single Cache
         - selectorId state parameter removed
         - selectionSequenceId reported together with
           observationDomainId
         - nameType type definition for name parameters (keys)
         - renaming: *IpAddress => *IPAddress
         - renaming: *Receiver => *Collector
         - parameters numberOfStreams and maxAllowedStreams
           removed
         Changes in draft-ietf-ipfix-configuration-model-05:
         - new Cache Mode 'natural'
         - new parameter exportInterval for permanent Cache
         - new optionType 'extendedTypeInformation'
         - ieId value range restricted to 1..32767
         - parameter isFlowKey not available for Reverse Information



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 54]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


           Elements and Cache Mode 'immediate'
         - sourceIpAddress parameter used for all transport protocols,
           replaces localIpAddress parameter for SCTP
         - destinationIpAddress parameter may appear multiple times
           in the case of SCTP
         - new parameters ifIndex or ifName for export destinations
         - description of timedReliability parameter updated
         - new parameter maxPacketSize for UDP export
         - must statement of selectionProcess updated
         - must statement of Cache removed
         Changes in draft-ietf-ipfix-configuration-model-04:
         - descriptions and references added in various places,
           especially for state parameters
         - enum types cacheMode, exportMemberType, optionsType replaced
           by identities in order to facilitate the addition of new
           values using YANG deviations
         - Selector parameters revised:
           - parameter names now correspond to Information Element
             names
           - single matching value instead of range in filterMatch
             (which is consistent with Selector Report Interpretation)
           - filterHash parameters adapted to PSAMP RFCs
           - sampNonUniProb, sampFlowState, filterRState removed
             (a Selector Report Interpretation does not exist, yet)
         - some must statements replaced by choices, which is easier
           to read
         - orderedDelivery parameter removed, better add a parameter
           for activating per-sctp stream later
         - YANG data type timeticks replaced by uint32 and unit
           milliseconds
         - configuration of fields included in an Options Template
           removed because there is no real use-case
         - observationPointId, selectionSequenceId, and selectorId are
           now state parameters (i.e., not configurable any more)
           because there is no real use-case to configure them
         - meaning of configuration parameters activeTimeout and
           inactiveTimeout clarified
         - several additional must statements enforcing certain
           configuration restrictions
         Changes in draft-ietf-ipfix-configuration-model-03:
         - list of used or received templates now inside transport
           session container because templates are defined per transport
           session
         - transport session: removed 'index', added missing 'protocol'
         - exportingProcessId removed
         - Transport Session state data can be used for File Readers
           and File Writers
         - module name changed



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 55]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


         - Renaming: cacheType => cacheMode,
           Options' type => optionsType,
           Destination's/FileWriter's type => exportMemberType,
           uri => file, optionTemplate => optionsTemplate,
           optionField => optionsField
         - transport layer security parameters added to Destination
           class and Receiver class
         - must statements ensure that Selection Processes and Caches
           process packets of a single Observation Domain (as long as
           Selection Processes are not cascaded)
         - replaced default value of port by description because the
           value differs in the case of DTLS/TLS
         Changes in draft-ietf-ipfix-configuration-model-02:
         - conformance to draft-ietf-netmod-yang-03 and
           draft-ietf-netmod-yang-types-01
         - canonical form
         - observationDomainId is now mandatory parameter
         - usage of YANG features
         - renamed parameter 'idleTimeout' in 'inactiveTimeout'
         - state data: Selector statistics, Cache statistics, Templates,
           Transport Sessions
         - Exporting Process: new structure of destination, fileWriter
         - Collecting Process: new structure of receiver, fileReader
         - more groupings and typedefs
         - options configured per Exporting Process, not per
           destination
         - verified optional parameters, added default values or
           description clause if necessary
         Changes in draft-ietf-ipfix-configuration-model-01:
         - separation of Selectors and Selection Processes as in PSAMP
           documents
         - parameter modifications in filterMatch
         - new rateLimit parameter in destinations of Exporting Process
         - Cache Type 'normal' now called 'timeout'
         Changes in draft-ietf-ipfix-configuration-model-00:
         - Metering Process container replaced by direct reference to
           Selection Process
         - meteringProcessId parameter disappears together with the
           Metering Process container
         - concatenation of Selection Processes realize Selection
           Sequence
         - removal of premature support of
           IPFIX Mediators/Concentrators.
         - more SCTP parameters in SctpReceiver and SctpExport classes
         - sendBufferSize parameter for all *Export classes
         - templateId no longer configuration parameter
         Changes in draft-muenz-ipfix-configuration-04:
         - first version in yang



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 56]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


         - Collecting Process can be configured for file import
         - Collecting Process can be configured to export received
           records without modifications (e.g., to file or other
           collectors)
         - SCTP export parameter timedReliability
         - parameter for eligible local IP addresses for SCTP endpoint
         - all tags names uncapitalized, types names etc. capitalized
         - CacheParameters renamed as Cache
         - description attribute removed
         Changes in -03:
         - Linecard and Interface classes now have direction element
         - sec => s (SI unit)
         - optional description attribute for annotations
         - simplifications in ExportingProcess class
         - new parameters: observationPointId, meteringProcessId,
           selectorId, exportingProcessId (note that devices do not
           have to support the configuration of these parameters)
         - new FileExport class for exporting into a file
         - Reporting class renamed Options Class
         Changes in -02:
         - new structure without next pointers
         - packet reporting and flow metering replaced by record cache
         - added reporting with options";

       reference "RFC XXXX: IPFIX/PSAMP Configuration Data Model";
     }

     /*****************************************************************
     * Features
     *****************************************************************/

     feature exporter {
       description "If supported, the Monitoring Device can be used as
         an Exporter. Exporting Processes can be configured.";
     }

     feature collector {
       description "If supported, the Monitoring Device can be used as
         a Collector. Collecting Processes can be configured.";
     }

     feature meter {
       description "If supported, Observation Points, Selection
         Processes, and Caches can be configured.";
     }

     feature psampSampCountBased {
       description "If supported, the Monitoring Device supports



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 57]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


         count-based Sampling. The Selector method sampCountBased can
         be configured.";
     }

     feature psampSampTimeBased {
       description "If supported, the Monitoring Device supports
         time-based Sampling. The Selector method sampTimeBased can
         be configured.";
     }

     feature psampSampRandOutOfN {
       description "If supported, the Monitoring Device supports
         random n-out-of-N Sampling. The Selector method
         sampRandOutOfN can be configured.";
     }

     feature psampSampUniProb {
       description "If supported, the Monitoring Device supports
         uniform probabilistic Sampling. The Selector method
         sampUniProb can be configured.";
     }

     feature psampFilterMatch {
       description "If supported, the Monitoring Device supports
         property match Filtering. The Selector method filterMatch
         can be configured.";
     }

     feature psampFilterHash {
       description "If supported, the Monitoring Device supports
         hash-based Filtering. The Selector method filterHash can be
         configured.";
     }

     feature cacheModeImmediate {
       description "If supported, the Monitoring Device supports
         Cache Mode 'immediate'.";
     }

     feature cacheModeTimeout {
       description "If supported, the Monitoring Device supports
         Cache Mode 'timeout'.";
     }

     feature cacheModeNatural {
       description "If supported, the Monitoring Device supports
         Cache Mode 'natural'.";
     }



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 58]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


     feature cacheModePermanent {
       description "If supported, the Monitoring Device supports
         Cache Mode 'permanent'.";
     }

     feature udpTransport {
       description "If supported, the Monitoring Device supports UDP
         as transport protocol.";
     }

     feature tcpTransport {
       description "If supported, the Monitoring Device supports TCP
         as transport protocol.";
     }

     feature fileReader {
       description "If supported, the Monitoring Device supports the
         configuration of Collecting Processes as File Readers.";
     }

     feature fileWriter {
       description "If supported, the Monitoring Device supports the
         configuration of Exporting Processes as File Writers.";
     }

     /*****************************************************************
     * Identities
     *****************************************************************/

     /*** Hash function identities ***/
     identity hashFunction {
       description "Base identity for all hash functions used for
         hash-based packet filtering. Identities derived from
         this base are used by the leaf
         /ipfix/selectionProcess/selector/filterHash/hashFunction.";
     }
     identity BOB {
       base "hashFunction";
       description "BOB hash function";
       reference "RFC5475, Section 6.2.4.1.";
     }
     identity IPSX {
       base "hashFunction";
       description "IPSX hash function";
       reference "RFC5475, Section 6.2.4.1.";
     }
     identity CRC {
       base "hashFunction";



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 59]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


       description "CRC hash function";
       reference "RFC5475, Section 6.2.4.1.";
     }

     /*** Cache mode identities ***/
     identity cacheMode {
       description "Base identity for all Cache Modes specifying
         Flow expiration policies of a Cache. Identities derived from
         this base are used by the leaf /ipfix/cache/cacheMode.";
     }
     identity immediate {
       base "cacheMode";
       description "Flow expiration after the first packet;
         generation of Packet Records.
         This identity MUST NOT be referred to unless the feature
         cacheModeImmediate is supported by the Monitoring Device.";
     }
     identity timeout {
       base "cacheMode";
       description "Flow expiration after active and inactive timeout;
         generation of Flow Records.
         This identity MUST NOT be referred to unless the feature
         cacheModeTimeout is supported by the Monitoring Device.";
     }
     identity natural {
       base "cacheMode";
       description "Flow expiration after active and inactive timeout,
         or on natural termination (e.g. TCP FIN, or TCP RST) of the
         Flow; generation of Flow Records.
         This identity MUST NOT be referred to unless the feature
         cacheModeNatural is supported by the Monitoring Device.";
     }
     identity permanent {
       base "cacheMode";
       description "No flow expiration, periodical export with
         time interval exportInterval; generation of Flow Records.
         This identity MUST NOT be referred to unless the feature
         cacheModePermanent is supported by the Monitoring Device.";
     }

     /*** Export mode identities ***/
     identity exportMode {
       description "Base identity for different usages of export
         destinations configured for an Exporting Process.
         Identities derived from this base are used by the leaf
         /ipfix/exportingProcess/exportMode.";
     }
     identity parallel {



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 60]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


       base "exportMode";
       description "Parallel export of Data Records to all
         destinations configured for the Exporting Process.";
     }
     identity loadBalancing {
       base "exportMode";
       description "Load-balancing between the different destinations
         configured for the Exporting Process.";
     }
     identity fallback {
       base "exportMode";
       description "Export to the primary destination (i.e., the first
         SCTP, UDP, TCP, or file destination configured for the
         Exporting Process). If the export to the primary destination
         fails, the Exporting Process tries to export to the secondary
         destination. If the secondary destination fails as well, it
         continues with the tertiary, etc.";
     }

     /*** Options type identities ***/
     identity optionsType {
       description "Base identity for report types exported with
         options. Identities derived from this base are used by the leaf
         /ipfix/exportingProcess/options/optionsType.";
     }
     identity meteringStatistics {
       base "optionsType";
       description "Metering Process Statistics.";
       reference "RFC 5101, Section 4.1.";
     }
     identity meteringReliability {
       base "optionsType";
       description "Metering Process Reliability Statistics.";
       reference "RFC 5101, Section 4.2.";
     }
     identity exportingReliability {
       base "optionsType";
       description "Exporting Process Reliability
         Statistics.";
       reference "RFC 5101, Section 4.3.";
     }
     identity flowKeys {
       base "optionsType";
       description "Flow Keys.";
       reference "RFC 5101, Section 4.4.";
     }
     identity selectionSequence {
       base "optionsType";



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 61]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


       description "Selection Sequence and Selector Reports.";
       reference "RFC5476, Sections 6.5.1 and 6.5.2.";
     }
     identity selectionStatistics {
       base "optionsType";
       description "Selection Sequence Statistics Report.";
       reference "RFC5476, Sections 6.5.3.";
     }
     identity accuracy {
       base "optionsType";
       description "Accuracy Report.";
       reference "RFC5476, Section 6.5.4.";
     }
     identity reducingRedundancy {
       base "optionsType";
       description "Enables the utilization of Options Templates to
         reduce redundancy in the exported Data Records.";
       reference "RFC5473.";
     }
     identity extendedTypeInformation {
       base "optionsType";
       description "Export of extended type information for
         enterprise-specific Information Elements used in the
         exported Templates.";
       reference "RFC5610.";
     }

     /*****************************************************************
     * Type definitions
     *****************************************************************/

     typedef nameType {
       type string {
         length "1..max";
         pattern "\S(.*\S)?";
       }
       description "Type for 'name' leafs which are used to identify
         specific instances within lists etc.
         Leading and trailing whitespaces are not allowed.";
     }

     typedef direction {
       type enumeration {
         enum ingress {
           description "This value is used for monitoring incoming
             packets.";
         }
         enum egress {



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 62]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


           description "This value is used for monitoring outgoing
             packets.";
         }
         enum both {
           description "This value is used for monitoring incoming and
             outgoing packets.";
         }
       }
       description "Direction of packets going through an interface or
         linecard.";
     }

     typedef transportSessionStatus {
       type enumeration {
         enum inactive {
           description "This value MUST be used for Transport Sessions
             that are specified in the system but currently not active.
             The value can be used for Transport Sessions that are
             backup (secondary) sessions.";
         }
         enum active {
           description "This value MUST be used for Transport Sessions
             that are currently active and transmitting or receiving
             data.";
         }
         enum unknown {
           description "This value MUST be used if the status of the
             Transport Sessions cannot be detected by the device. This
             value should be avoided as far as possible.";
         }
       }
       description "Status of a Transport Session.";
       reference "RFC5815, Section 8 (ipfixTransportSessionStatus).";
     }

     /*****************************************************************
     * Groupings
     *****************************************************************/

     grouping observationPointParameters {
       description "Interface as input to Observation Point.";
       leaf observationPointId {
         type uint32;
         config false;
         description "Observation Point ID (i.e., the value of the
           Information Element observationPointId) assigned by the
           Monitoring Device.";
         reference "RFC5102, Section 5.1.10.";



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 63]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


       }
       leaf observationDomainId {
         type uint32;
         mandatory true;
         description "The Observation Domain ID associates the
           Observation Point to an Observation Domain. Observation
           Points with identical Observation Domain ID belong to the
           same Observation Domain.";
         reference "RFC5101.";
       }
       choice OPLocation {
         mandatory true;
         description "Location of the Observation Point.";
         leaf ifIndex {
           type uint32;
           description "Index of an interface as stored in the ifTable
             of IF-MIB.";
           reference "RFC 1229.";
         }
         leaf ifName {
           type string;
           description "Name of an interface as stored in the ifTable
             of IF-MIB.";
           reference "RFC 1229.";
         }
         leaf entPhysicalIndex {
           type uint32;
           description "Index of a linecard as stored in the
             entPhysicalTable of ENTITY-MIB.";
           reference "RFC 4133.";
         }
         leaf entPhysicalName {
           type string;
           description "Name of a linecard as stored in the
             entPhysicalTable of ENTITY-MIB.";
           reference "RFC 4133.";
         }
       }
       leaf direction {
         type direction;
         default both;
         description "Direction of packets. If not applicable (e.g., in
           the case of a sniffing interface in promiscuous mode), this
           parameter is ignored.";
       }
     }

     grouping selectorParameters {



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 64]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


       description "Configuration and state parameters of a Selector.";
       choice Method {
         mandatory true;
         description "Packet selection method applied by the Selector.";
         leaf selectAll {
           type empty;
           description "Method which selects all packets.";
         }
         container sampCountBased {
           if-feature psampSampCountBased;
           description "This container contains the configuration
             parameters of a Selector applying systematic count-based
             packet sampling to the packet stream.";
           reference "RFC5475, Section 5.1;
             RFC5476, Section 6.5.2.1.";
           leaf packetInterval {
             type uint32;
             units packets;
             mandatory true;
             description "The number of packets that are consecutively
               sampled between gaps of length packetSpace.
               This parameter corresponds to the Information Element
               samplingPacketInterval.";
             reference "RFC5477, Section 8.2.2.";
           }
           leaf packetSpace {
             type uint32;
             units packets;
             mandatory true;
             description "The number of unsampled packets between two
               sampling intervals.
               This parameter corresponds to the Information Element
               samplingPacketSpace.";
             reference "RFC5477, Section 8.2.3.";
           }
         }
         container sampTimeBased {
           if-feature psampSampTimeBased;
           description "This container contains the configuration
             parameters of a Selector applying systematic time-based
             packet sampling to the packet stream.";
           reference "RFC5475, Section 5.1;
             RFC5476, Section 6.5.2.2.";
           leaf timeInterval {
             type uint32;
             units microseconds;
             mandatory true;
             description "The time interval in microseconds during



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 65]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


               which all arriving packets are sampled between gaps
               of length timeSpace.
               This parameter corresponds to the Information Element
               samplingTimeInterval.";
             reference "RFC5477, Section 8.2.4.";
           }
           leaf timeSpace {
             type uint32;
             units microseconds;
             mandatory true;
             description "The time interval in microseconds during
               which no packets are sampled between two sampling
               intervals specified by timeInterval.
               This parameter corresponds to the Information Element
               samplingTimeInterval.";
             reference "RFC5477, Section 8.2.5.";
           }
         }
         container sampRandOutOfN {
           if-feature psampSampRandOutOfN;
           description "This container contains the configuration
             parameters of a Selector applying n-out-of-N packet
             sampling to the packet stream.";
           reference "RFC5475, Section 5.2.1;
             RFC5476, Section 6.5.2.3.";
           leaf size {
             type uint32;
             units packets;
             mandatory true;
             description "The number of elements taken from the parent
               population.
               This parameter corresponds to the Information Element
               samplingSize.";
             reference "RFC5477, Section 8.2.6.";
           }
           leaf population {
             type uint32;
             units packets;
             mandatory true;
             description "The number of elements in the parent
               population.
               This parameter corresponds to the Information Element
               samplingPopulation.";
             reference "RFC5477, Section 8.2.7.";
           }
         }
         container sampUniProb {
           if-feature psampSampUniProb;



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 66]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


           description "This container contains the configuration
             parameters of a Selector applying uniform probabilistic
             packet sampling (with equal probability per packet) to the
             packet stream.";
           reference "RFC5475, Section 5.2.2.1;
             RFC5476, Section 6.5.2.4.";
           leaf probability {
             type decimal64 {
               fraction-digits 18;
               range "0..1";
             }
             mandatory true;
             description "Probability that a packet is sampled,
               expressed as a value between 0 and 1. The probability
               is equal for every packet.
               This parameter corresponds to the Information Element
               samplingProbability.";
             reference "RFC5477, Section 8.2.8.";
           }
         }
         container filterMatch {
           if-feature psampFilterMatch;
           description "This container contains the configuration
             parameters of a Selector applying property match filtering
             to the packet stream.";
           reference "RFC5475, Section 6.1;
             RFC5476, Section 6.5.2.5.";
           choice nameOrId {
             mandatory true;
             description "The field to be matched is specified by
               either the name or the ID of the Information
               Element.";
             leaf ieName {
               type string;
               description "Name of the Information Element.";
             }
             leaf ieId {
               type uint16 {
                 range "1..32767" {
                   description "Valid range of Information Element
                       identifiers.";
                   reference "RFC5102, Section 4.";
                 }
               }
               description "ID of the Information Element.";
             }
           }
           leaf ieEnterpriseNumber {



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 67]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


             type uint32;
             description "If present, the Information Element is
               enterprise-specific. The field value configures the
               enterprise number. If omitted or zero, the Information
               Element is registered in the IANA registry of IPFIX
               Information Elements.";
           }
           leaf value {
             type string;
             mandatory true;
             description "Matching value of the Information Element.";
           }
         }
         container filterHash {
           if-feature psampFilterHash;
           description "This container contains the configuration
             parameters of a Selector applying hash-based filtering
             to the packet stream.";
           reference "RFC5475, Section 6.2;
             RFC5476, Section 6.5.2.6.";
           leaf hashFunction {
             type identityref {
               base "hashFunction";
             }
             default BOB;
             description "Hash function to be applied. According to
               RFC5475, Section 6.2.4.1, 'BOB' must be used in order to
               be compliant with PSAMP.";
           }
           leaf ipPayloadOffset {
             type uint64;
             units octets;
             default 0;
             description "IP payload offset indicating the position of
               the first payload byte considered as input to the hash
               function.
               Default value 0 corresponds to the minimum offset that
               must be configurable according to RFC5476, Section
               6.2.5.6.
               This parameter corresponds to the Information Element
               hashIPPayloadOffset.";
             reference "RFC5477, Section 8.3.2.";
           }
           leaf ipPayloadSize {
             type uint64;
             units octets;
             default 8;
             description "Number of IP payload bytes used as input to



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 68]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


               the hash function, counted from the payload offset.
               If the IP payload is shorter than the payload range,
               all available payload octets are used as input.
               Default value 8 corresponds to the minimum IP payload
               size that must be configurable according to RFC5476,
               Section 6.2.5.6.
               This parameter corresponds to the Information Element
               hashIPPayloadSize.";
             reference "RFC5477, Section 8.3.3.";
           }
           leaf digestOutput {
             type boolean;
             default false;
             description "If true, the output from this Selector is
               included in the Packet Report as a packet digest.
               Therefore, the configured Cache Layout needs to contain
               a digestHashValue field.
               This parameter corresponds to the Information Element
               hashDigestOutput.";
             reference "RFC5477, Section 8.3.8.";
           }
           leaf initializerValue {
             type uint64;
             description "Initializer value to the hash function.
               If not configured by the user, the Monitoring Device
               arbitrarily chooses an initializer value.";
             reference "RFC5477, Section 8.3.9.";
           }
           list selectedRange {
             key name;
             min-elements 1;
             leaf name { type nameType; }
             leaf min {
               type uint64;
               description "Beginning of the hash function's selected
                 range.
                 This parameter corresponds to the Information Element
                 hashSelectedRangeMin.";
               reference "RFC5477, Section 8.3.6.";
             }
             leaf max {
               type uint64;
               description "End of the hash function's selected range.
                 This parameter corresponds to the Information Element
                 hashSelectedRangeMax.";
               reference "RFC5477, Section 8.3.7.";
             }
           }



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 69]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


         }
       }
       leaf packetsObserved {
         type yang:counter64;
         config false;
         description "The number of packets observed at the input of
           the Selector.
           If this is the first Selector in the Selection Process,
           this counter corresponds to the total number of packets in
           all Observed Packet Streams at the input of the Selection
           Process. Otherwise, the counter corresponds to the total
           number of packets at the output of the preceding Selector.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           selectorDiscontinuityTime.";
         reference "RFC5815, Section 8
           (ipfixSelectorStatsPacketsObserved).";
       }
       leaf packetsDropped {
         type yang:counter64;
         config false;
         description "The total number of packets discarded by the
           Selector.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           selectorDiscontinuityTime.";
         reference "RFC5815, Section 8
           (ipfixSelectorStatsPacketsDropped).";
       }
       leaf selectorDiscontinuityTime {
         type yang:date-and-time;
         config false;
         description "Timestamp of the most recent occasion at which
           one or more of the Selector counters suffered a
           discontinuity.
           In contrast to ipfixSelectionProcessStatsDiscontinuityTime
           in the IPFIX MIB module, the time is absolute and not
           relative to sysUpTime.";
         reference "RFC5815, Section 8
           (ipfixSelectionProcessStatsDiscontinuityTime).";
       }
     }

     grouping cacheParameters {
       description "Configuration and state parameters of a Cache.";
       leaf cacheMode {



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 70]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


         type identityref {
           base "cacheMode";
         }
         mandatory true;
       }
       leaf maxFlows {
         when "../cacheMode != 'immediate'";
         type uint32;
         units flows;
         description "This parameter configures the maximum number of
           Flows in the Cache, which is the maximum number of Flows
           that can be measured simultaneously.
           The Monitoring Device MUST ensure that sufficient resources
           are available to store the configured maximum number of
           Flows.
           If the maximum number of Flows is measured, no additional
           Flows can be measured before any of the existing entries is
           removed. However, traffic which pertains to existing Flows
           can continue to be measured.";
       }
       leaf activeTimeout {
         when "(../cacheMode = 'timeout') or
           (../cacheMode = 'natural')";
         type uint32;
         units milliseconds;
         description "This parameter configures the time in
           milliseconds after which a Flow is expired even though
           packets matching this Flow are still received by the Cache.
           The parameter value zero indicates infinity, meaning that
           there is no active timeout.
           If not configured by the user, the Monitoring Device sets
           this parameter.";
       }
       leaf inactiveTimeout {
         when "(../cacheMode = 'timeout') or
           (../cacheMode = 'natural')";
         type uint32;
         units milliseconds;
         description "This parameter configures the time in
           milliseconds after which a Flow is expired if no packets
           matching this Flow are received by the Cache.
           The parameter value zero indicates infinity, meaning that
           there is no inactive timeout.
           If not configured by the user, the Monitoring Device sets
           this parameter.";
       }
       leaf exportInterval {
         when "../cacheMode = 'permanent'";



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 71]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


         type uint32;
         units milliseconds;
         description "This parameter configures the interval for
           periodical export of Flow Records in milliseconds.
           If not configured by the user, the Monitoring Device sets
           this parameter.";
       }
       container cacheLayout {
         description "Fields of a Cache Layout.";
         list cacheField {
           key name;
           min-elements 1;
           leaf name { type nameType; }
           choice nameOrId {
             mandatory true;
             description "Name or ID of the Information Element.";
             reference "RFC5102.";
             leaf ieName { type string; }
             leaf ieId {
               type uint16 {
                 range "1..32767" {
                   description "Valid range of Information Element
                       identifiers.";
                   reference "RFC5102, Section 4.";
                 }
               }
             }
           }
           leaf ieLength {
             type uint16;
             units octets;
             description "Length of the field in which the Information
               Element is encoded. A value of 65535 specifies a
               variable-length Information Element. For Information
               Elements of integer and float type, the field length MAY
               be set to a smaller value than the standard length of the
               abstract data type if the rules of reduced size encoding
               are fulfilled.
               If not configured by the user, this parameter is set by
               the Monitoring Device.";
             reference "RFC5101, Section 6.2; RFC5102.";
           }
           leaf ieEnterpriseNumber {
             type uint32;
             description "If present, the Information Element is
               enterprise-specific. The field value configures the
               enterprise number. If omitted or zero, the Information
               Element is registered in the IANA registry of IPFIX



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 72]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


               Information Elements.
               If the enterprise number is set to 29305, this field
               contains a Reverse Information Element. In this case,
               the Cache MUST generate Data Records in accordance to
               RFC5103.";
             reference "RFC5101; RFC5102.";
           }
           leaf isFlowKey {
             when "(../../../cacheMode != 'immediate')
               and
               ((count(../ieEnterpriseNumber) = 0)
               or
               (../ieEnterpriseNumber != 29305))";
             type empty;
             description "If present, this is a flow key.
               The must statement ensures that this parameter is not
               set for Reverse Information Elements or if the Cache
               Mode is 'immediate'.";
           }
         }
       }
       leaf activeFlows {
         when "../cacheMode != 'immediate'";
         type yang:gauge32;
         units flows;
         config false;
         description "The number of Flows currently active in this
           Cache.";
         reference "ietf-draft-ipfix-mib-10, Section 8
           (ipfixMeteringProcessCacheActiveFlows).";
       }
       leaf unusedCacheEntries {
         when "../cacheMode != 'immediate'";
         type yang:gauge32;
         units flows;
         config false;
         description "The number of unused Cache entries in this
           Cache.";
         reference "ietf-draft-ipfix-mib-10, Section 8
           (ipfixMeteringProcessCacheUnusedCacheEntries).";
       }
       leaf dataRecords {
         type yang:counter64;
         units "Data Records";
         config false;
         description "The number of Data Records generated by this
           Cache.
           Discontinuities in the value of this counter can occur at



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 73]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


           re-initialization of the management system, and at other
           times as indicated by the value of
           cacheDiscontinuityTime.";
         reference "ietf-draft-ipfix-mib-10, Section 8
           (ipfixMeteringProcessDataRecords).";
       }
       leaf cacheDiscontinuityTime {
         type yang:date-and-time;
         config false;
         description "Timestamp of the most recent occasion at which
           the counter dataRecords suffered a discontinuity.
           In contrast to ipfixMeteringProcessDiscontinuityTime
           in the IPFIX MIB module, the time is absolute and not
           relative to sysUpTime.";
         reference "ietf-draft-ipfix-mib-10, Section 8
           (ipfixMeteringProcessDiscontinuityTime).";
       }
     }

     grouping exportingProcessParameters {
       leaf exportMode {
         type identityref {
           base "exportMode";
         }
         default parallel;
         description "This parameter determines to which configured
           destination(s) the incoming Data Records are exported.";
       }
       list destination {
         key name;
         min-elements 1;
         leaf name { type nameType; }
         choice DestinationParameters {
           mandatory true;
           description "Configuration parameters depend on whether
             SCTP, UDP, or TCP are used as transport protocol, and
             whether the destination is a file.";
           container sctpExporter {
             uses sctpExporterParameters;
           }
           container udpExporter {
             if-feature udpTransport;
             uses udpExporterParameters;
           }
           container tcpExporter {
             if-feature tcpTransport;
             uses tcpExporterParameters;
           }



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 74]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


           container fileWriter {
             if-feature fileWriter;
             uses fileWriterParameters;
           }
         }
       }
       list options {
         key name;
         description "List of options reported by the Exporting
           Process.";
         leaf name { type nameType; }
         uses optionsParameters;
       }
     }

     grouping commonExporterParameters {
       description "Parameters of en export destination which are
         common to all transport protocols.";
       leaf ipfixVersion {
         type uint16;
         default 10;
         description "IPFIX version number.";
       }
       leaf destinationPort {
         type inet:port-number;
         description "If not configured by the user, the Monitoring
           Device uses the default port number for IPFIX, which is
           4739 without transport layer security and 4740 if transport
           layer security is activated.";
       }
       choice indexOrName {
         description "Index or name of the interface as stored in the
           ifTable of IF-MIB.
           If configured, the Exporting Process MUST use the given
           interface to export IPFIX Messages to the export
           destination.
           If omitted, the Exporting Process selects the outgoing
           interface based on local routing decision and accepts
           return traffic, such as transport layer acknowledgments,
           on all available interfaces.";
         reference "RFC 1229.";
         leaf ifIndex { type uint32; }
         leaf ifName { type string; }
       }
       leaf sendBufferSize {
         type uint32;
         units bytes;
         description "Size of the socket send buffer.



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 75]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


           If not configured by the user, this parameter is set by
           the Monitoring Device.";
       }
       leaf rateLimit {
         type uint32;
         units "bytes per second";
         description "Maximum number of bytes per second the Exporting
           Process may export to the given destination. The number of
           bytes is calculated from the lengths of the IPFIX Messages
           exported. If not configured, no rate limiting is performed.";
         reference "RFC5476, Section 6.3.";
       }
       container transportLayerSecurity {
         presence "If transportLayerSecurity is present, DTLS is
           enabled if the transport protocol is SCTP or UDP, and TLS
           is enabled if the transport protocol is TCP.";
         uses transportLayerSecurityParameters;
       }
       container transportSession {
         config false;
         description "State parameters of the Transport Session
           directed to the given destination.";
         uses transportSessionParameters;
       }
     }

     grouping sctpExporterParameters {
       description "SCTP specific export destination parameters.";
       uses commonExporterParameters;
       leaf-list sourceIPAddress {
         type inet:ip-address;
         description "List of source IP addresses used by the
           Exporting Process.
           If configured, the specified addresses are eligible local
           IP addresses of the multi-homed SCTP endpoint.
           If not configured, all locally assigned IP addresses are
           eligible local IP addresses.";
         reference "RFC 4960 (multi-homed SCTP endpoint).";
       }
       leaf-list destinationIPAddress {
         type inet:ip-address;
         min-elements 1;
         description "One or multiple IP addresses of the Collecting
           Process to which IPFIX Messages are sent.
           The user MUST ensure that all configured IP addresses
           belong to the same Collecting Process.
           The Exporting Process tries to establish an SCTP
           association to any of the configured destination IP



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 76]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


           addresses.";
         reference "RFC 4960 (multi-homed SCTP endpoint).";
       }
       leaf timedReliability {
         type uint32;
         units milliseconds;
         default 0;
         description "Lifetime in milliseconds until an IPFIX
           Message containing Data Sets only is 'abandoned' due to
           the timed reliability mechanism of PR-SCTP.
           If this parameter is set to zero, reliable SCTP
           transport is used for all Data Records.
           Regardless of the value of this parameter, the Exporting
           Process MAY use reliable SCTP transport for Data Sets
           associated with Options Templates.";
         reference "RFC 3758; RFC 4960.";
       }
     }

     grouping udpExporterParameters {
       description "Parameters of a UDP export destination.";
       uses commonExporterParameters;
       leaf sourceIPAddress {
         type inet:ip-address;
         description "Source IP address used by the Exporting Process.
         If not configured, the IP address assigned to the outgoing
         interface is used as source IP address.";
       }
       leaf destinationIPAddress {
         type inet:ip-address;
         mandatory true;
         description "IP address of the Collection Process to which
           IPFIX Messages are sent.";
       }
       leaf maxPacketSize {
         type uint16;
         units octets;
         description "This parameter specifies the maximum size of
           IP packets sent to the Collector. If set to zero, the
           Exporting Device MUST derive the maximum packet size
           from path MTU discovery mechanisms.
           If not configured by the user, this parameter is set by
           the Monitoring Device.";
       }
       leaf templateRefreshTimeout {
         type uint32;
         units seconds;
         default 600;



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 77]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


         description "Sets time after which Templates are resent if
           UDP is transport protocol.";
         reference "RFC5101.";
       }
       leaf optionsTemplateRefreshTimeout {
         type uint32;
         units seconds;
         default 600;
         description "Sets time after which Options Templates are
           resent if UDP is transport protocol.";
         reference "RFC5101.";
       }
       leaf templateRefreshPacket {
         type uint32;
         units "IPFIX Messages";
         description "Sets number of IPFIX Messages after which
           Templates are resent if UDP is transport protocol.
           If omitted, Templates are only resent after timeout.";
         reference "RFC5101.";
       }
       leaf optionsTemplateRefreshPacket {
         type uint32;
         units "IPFIX Messages";
         description "Sets number of IPFIX Messages after which
           Options Templates are resent if UDP is transport
           protocol.
           If omitted, Templates are only resent after timeout.";
         reference "RFC5101.";
       }
     }

     grouping tcpExporterParameters {
       description "Parameters of a TCP export destination.";
       uses commonExporterParameters;
       leaf sourceIPAddress {
         type inet:ip-address;
         description "Source IP address used by the Exporting Process.
           If not configured by the user, this parameter is set by
           the Monitoring Device to an IP address assigned to the
           outgoing interface.";
       }
       leaf destinationIPAddress {
         type inet:ip-address;
         mandatory true;
         description "IP address of the Collection Process to which
           IPFIX Messages are sent.";
       }
     }



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 78]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


     grouping fileWriterParameters {
       description "File Writer parameters.";
       leaf ipfixVersion {
         type uint16;
         default 10;
         description "IPFIX version number.";
       }
       leaf file {
         type inet:uri;
         mandatory true;
         description "URI specifying the location of the file.";
       }
       leaf bytes {
         type yang:counter64;
         units octets;
         config false;
         description "The number of bytes written by the File Writer.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           fileWriterDiscontinuityTime.";
       }
       leaf messages {
         type yang:counter64;
         units "IPFIX Messages";
         config false;
         description "The number of IPFIX Messages written by the File
           Writer.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           fileWriterDiscontinuityTime.";
       }
       leaf discardedMessages {
         type yang:counter64;
         units "IPFIX Messages";
         config false;
         description "The number of IPFIX Messages that could not be
           written by the File Writer due to internal buffer
           overflows, limited storage capacity etc.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           fileWriterDiscontinuityTime.";
       }
       leaf records {
         type yang:counter64;
         units "Data Records";



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 79]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


         config false;
         description "The number of Data Records written by the File
           Writer.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           fileWriterDiscontinuityTime.";
       }
       leaf templates {
         type yang:counter32;
         units "Templates";
         config false;
         description "The number of Template Records (excluding
           Options Template Records) written by the File Writer.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           fileWriterDiscontinuityTime.";
       }
       leaf optionsTemplates {
         type yang:counter32;
         units "Options Templates";
         config false;
         description "The number of Options Template Records written
           by the File Writer.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           fileWriterDiscontinuityTime.";
       }
       leaf fileWriterDiscontinuityTime {
         type yang:date-and-time;
         config false;
         description "Timestamp of the most recent occasion at which
           one or more File Writer counters suffered a discontinuity.
           In contrast to discontinuity times in the IPFIX MIB module,
           the time is absolute and not relative to sysUpTime.";
       }
       list template {
         config false;
         description "This list contains the Templates and Options
           Templates that have been written by the File Reader.
           Withdrawn or invalidated (Options) Template MUST be removed
           from this list.";
         uses templateParameters;
       }
     }




Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 80]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


     grouping optionsParameters {
       description "Parameters specifying the data export using an
         Options Template.";
       leaf optionsType {
         type identityref {
           base "optionsType";
         }
         mandatory true;
       }
       leaf optionsTimeout {
         type uint32;
         units milliseconds;
         description "Time interval for periodic export of the options
           data. If set to zero, the export is triggered when the
           options data has changed.
           If not configured by the user, this parameter is set by the
           Monitoring Device.";
       }
     }

     grouping collectingProcessParameters {
       list sctpCollector {
         key name;
         description "List of SCTP receivers (sockets) on which the
           Collecting Process receives IPFIX Messages.";
         leaf name { type nameType; }
         uses sctpCollectorParameters;
       }
       list udpCollector {
         if-feature udpTransport;
         key name;
         description "List of UDP receivers (sockets) on which the
           Collecting Process receives IPFIX Messages.";
         leaf name { type nameType; }
         uses udpCollectorParameters;
       }
       list tcpCollector {
         if-feature tcpTransport;
         key name;
         description "List of TCP receivers (sockets) on which the
           Collecting Process receives IPFIX Messages.";
         leaf name { type nameType; }
         uses tcpCollectorParameters;
       }
       list fileReader {
         if-feature fileReader;
         key name;
         description "List of File Readers from which the Collecting



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 81]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


           Process reads IPFIX Messages.";
         leaf name { type nameType; }
         uses fileReaderParameters;
       }
     }

     grouping commonCollectorParameters {
       description "Parameters of a Collecting Process which are
         common to all transport protocols.";
       leaf localPort {
         type inet:port-number;
         description "If not configured, the Monitoring Device uses the
           default port number for IPFIX, which is 4739 without
           transport layer security and 4740 if transport layer
           security is activated.";
       }
       container transportLayerSecurity {
         presence "If transportLayerSecurity is present, DTLS is enabled
           if the transport protocol is SCTP or UDP, and TLS is enabled
           if the transport protocol is TCP.";
         uses transportLayerSecurityParameters;
       }
       list transportSession {
         config false;
         description "This list contains the currently established
           Transport Sessions terminating at the given socket.";
         uses transportSessionParameters;
       }
     }

     grouping sctpCollectorParameters {
       description "Parameters of an SCTP receiver in a Collecting
         Process.";
       uses commonCollectorParameters;
       leaf-list localIPAddress {
         type inet:ip-address;
         description "List of local IP addresses on which the
           Collecting Process listens for IPFIX Messages. The IP
           addresses are used as eligible local IP addresses of the
           multi-homed SCTP endpoint.";
         reference "RFC 4960 (multi-homed SCTP endpoint).";
       }
     }

     grouping udpCollectorParameters {
       description "Parameters of an UDP receiver in a Collecting
         Process.";
       uses commonCollectorParameters;



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 82]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


       leaf-list localIPAddress {
         type inet:ip-address;
         description "List of local IP addresses on which the Collecting
           Process listens for IPFIX Messages.";
       }
       leaf templateLifetime {
         type uint32;
         units seconds;
         default 1800;
         description "Template lifetime if UDP is transport
           protocol.";
         reference "RFC5101, Section 10.3.7.";
       }
     }

     grouping tcpCollectorParameters {
       description "Parameters of an TCP receiver in a Collecting
         Process.";
       uses commonCollectorParameters;
       leaf-list localIPAddress {
         type inet:ip-address;
         description "List of local IP addresses on which the Collecting
           Process listens for IPFIX Messages.";
       }
     }

     grouping fileReaderParameters {
       description "File Reader parameters.";
       leaf file {
         type inet:uri;
         mandatory true;
         description "URI specifying the location of the file.";
       }
       leaf bytes {
         type yang:counter64;
         units octets;
         config false;
         description "The number of bytes read by the File Reader.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           fileReaderDiscontinuityTime.";
       }
       leaf messages {
         type yang:counter64;
         units "IPFIX Messages";
         config false;
         description "The number of IPFIX Messages read by the File



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 83]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


           Reader.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           fileReaderDiscontinuityTime.";
       }
       leaf records {
         type yang:counter64;
         units "Data Records";
         config false;
         description "The number of Data Records read by the File
           Reader.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           fileReaderDiscontinuityTime.";
       }
       leaf templates {
         type yang:counter32;
         units "Templates";
         config false;
         description "The number of Template Records (excluding
           Options Template Records) read by the File Reader.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           fileReaderDiscontinuityTime.";
       }
       leaf optionsTemplates {
         type yang:counter32;
         units "Options Templates";
         config false;
         description "The number of Options Template Records read by
           the File Reader.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           fileReaderDiscontinuityTime.";
       }
       leaf fileReaderDiscontinuityTime {
         type yang:date-and-time;
         config false;
         description "Timestamp of the most recent occasion at which
           one or more File Reader counters suffered a discontinuity.
           In contrast to discontinuity times in the IPFIX MIB module,
           the time is absolute and not relative to sysUpTime.";
       }
       list template {



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 84]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


         config false;
         description "This list contains the Templates and Options
           Templates that have been read by the File Reader.
           Withdrawn or invalidated (Options) Template MUST be removed
           from this list.";
         uses templateParameters;
       }
     }

     grouping transportLayerSecurityParameters {
       description "Transport layer security parameters.";
       leaf-list localCertificationAuthorityDN {
         type string;
         description "Distinguished names of certification authorities
           whose certificates may be used to identify the local
           endpoint.";
       }
       leaf-list localSubjectDN {
         type string;
         description "Distinguished names which may be used in the
           certificates to identify the local endpoint.";
       }
       leaf-list localSubjectFQDN {
         type inet:domain-name;
         description "Fully qualified domain names which may be used to
           in the certificates to identify the local endpoint.";
       }
       leaf-list remoteCertificationAuthorityDN {
         type string;
         description "Distinguished names of certification authorities
           whose certificates are accepted to authorize remote
           endpoints.";
       }
       leaf-list remoteSubjectDN {
         type string;
         description "Distinguished names which are accepted in
           certificates to authorize remote endpoints.";
       }
       leaf-list remoteSubjectFQDN {
         type inet:domain-name;
         description "Fully qualified domain name which are accepted in
           certificates to authorize remote endpoints.";
       }
     }

     grouping templateParameters {
       description "State parameters of a Template used by an Exporting
         Process or received by a Collecting Process in a specific



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 85]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


         Transport Session. Parameter names and semantics correspond to
         the managed objects in IPFIX-MIB";
       reference "RFC5101; RFC5815, Section 8 (ipfixTemplateEntry,
         ipfixTemplateDefinitionEntry, ipfixTemplateStatsEntry)";
       leaf observationDomainId {
         type uint32;
         description "The ID of the Observation Domain for which this
           Template is defined.";
         reference "RFC5815, Section 8
           (ipfixTemplateObservationDomainId).";
       }
       leaf templateId {
         type uint16 {
           range "256..65535" {
             description "Valid range of Template IDs.";
             reference "RFC5101";
           }
         }
         description "This number indicates the Template Id in the IPFIX
           message.";
         reference "RFC5815, Section 8 (ipfixTemplateId).";
       }
       leaf setId {
         type uint16;
         description "This number indicates the Set ID of the Template.
           Currently, there are two values defined. The value 2 is used
           for Sets containing Template definitions. The value 3 is
           used for Sets containing Options Template definitions.";
         reference "RFC5815, Section 8 (ipfixTemplateSetId).";
       }
       leaf accessTime {
         type yang:date-and-time;
         description "Used for Exporting Processes, this parameter
           contains the time when this (Options) Template was last
           sent to the Collector(s) or written to the file.
           Used for Collecting Processes, this parameter contains the
           time when this (Options) Template was last received from the
           Exporter or read from the file.";
         reference "RFC5815, Section 8 (ipfixTemplateAccessTime).";
       }
       leaf templateDataRecords {
         type yang:counter64;
         description "The number of transmitted or received Data
           Records defined by this (Options) Template.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           templateDiscontinuityTime.";



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 86]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


         reference "RFC5815, Section 8 (ipfixTemplateDataRecords).";
       }
       leaf templateDiscontinuityTime {
         type yang:date-and-time;
         description "Timestamp of the most recent occasion at which
           the counter templateDataRecords suffered a discontinuity.
           In contrast to ipfixTemplateDiscontinuityTime in the IPFIX
           MIB module, the time is absolute and not relative to
           sysUpTime.";
         reference "RFC5815, Section 8
           (ipfixTemplateDiscontinuityTime).";
       }
       list field {
         description "This list contains the (Options) Template
           fields of which the (Options) Template is defined.
           The order of the list corresponds to the order of the fields
           in the (Option) Template Record.";
         leaf ieId {
           type uint16 {
             range "1..32767" {
               description "Valid range of Information Element
                   identifiers.";
               reference "RFC5102, Section 4.";
             }
           }
           description "This parameter indicates the Information
             Element Id of the field.";
           reference "RFC5815, Section 8 (ipfixTemplateDefinitionIeId);
             RFC5102.";
         }
         leaf ieLength {
           type uint16;
           units octets;
           description "This parameter indicates the length of the
             Information Element of the field.";
           reference "RFC5815, Section 8
             (ipfixTemplateDefinitionIeLength); RFC5102.";
         }
         leaf ieEnterpriseNumber {
           type uint32;
           description "This parameter indicates the IANA enterprise
             number of the authority defining the Information Element
             Id.
             If the Information Element is not enterprise-specific,
             this state parameter is omitted.";
           reference "RFC5815, Section 8
             (ipfixTemplateDefinitionIeEnterpriseNumber).";
         }



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 87]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


         leaf isFlowKey {
           when "../../setId = 2";
           type empty;
           description "If present, this is a Flow Key field.";
           reference "RFC5815, Section 8
             (ipfixTemplateDefinitionFlags).";
         }
         leaf isScope {
           when "../../setId = 3";
           type empty;
           description "If present, this is a scope field.";
           reference "RFC5815, Section 8
             (ipfixTemplateDefinitionFlags).";
         }
       }
     }

     grouping transportSessionParameters {
       description "State parameters of a Transport Session originating
         from an Exporting or terminating at a Collecting Process.
         Parameter names and semantics correspond to the managed
         objects in IPFIX-MIB.";
       reference "RFC5101, RFC5815, Section 8
         (ipfixTransportSessionEntry,
          ipfixTransportSessionStatsEntry)";
       leaf ipfixVersion {
         type uint16;
         description "Used for Exporting Processes, this parameter
           contains the version number of the IPFIX protocol that the
           Exporter uses to export its data in this Transport Session.
           Used for Collecting Processes, this parameter contains the
           version number of the IPFIX protocol it receives for
           this Transport Session.
           If IPFIX Messages of different IPFIX protocol versions are
           transmitted or received in this Transport Session, this
           object contains the maximum version number.";
         reference "RFC5815, Section 8
           (ipfixTransportSessionIpfixVersion).";
       }
       leaf protocol {
         type uint32;
         description "The transport protocol used for receiving or
           transmitting IPFIX Messages. Protocol numbers are
           assigned by IANA. A current list of all assignments is
           available from <http://www.iana.org/>.";
         reference "RFC5815, Section 8
           (ipfixTransportSessionProtocol).";
       }



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 88]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


       leaf sourceAddress {
         type inet:ip-address;
         description "The source address of the Exporter of the
           IPFIX Transport Session.
           This parameter is used with transport protocols like TCP(6)
           and UDP(17) that have the notion of addresses. SCTP(132)
           should use sctpAssocId instead. If SCTP(132) or any other
           protocol without the notion of addresses is used, this
           parameter is omitted.";
         reference "RFC5815, Section 8
           (ipfixTransportSessionSourceAddressType,
           ipfixTransportSessionSourceAddress).";
       }
       leaf destinationAddress {
         type inet:ip-address;
         description "The destination address of the Collector of
           the IPFIX Transport Session.
           This parameter is used with transport protocols like TCP(6)
           and UDP(17) that have the notion of addresses. SCTP(132)
           should use sctpAssocId instead. If SCTP(132) or any other
           protocol without the notion of addresses is used, this
           parameter is omitted.";
         reference "RFC5815, Section 8
           (ipfixTransportSessionDestinationAddressType,
           ipfixTransportSessionDestinationAddress).";
       }
       leaf sourcePort {
         type inet:port-number;
         description "The transport protocol port number of the
           Exporter of the IPFIX Transport Session.
           If a transport protocol without the notion of ports is
           used, this parameter is omitted.";
         reference "RFC5815, Section 8
           (ipfixTransportSessionSourcePort).";
       }
       leaf destinationPort {
         type inet:port-number;
         description "The transport protocol port number of the
           Collector of the IPFIX Transport Session.
           If a transport protocol without the notion of ports is
           used, this parameter is omitted.";
         reference "RFC5815, Section 8
           (ipfixTransportSessionDestinationPort).";
       }
       leaf sctpAssocId {
         when "../protocol = 132";
         type uint32;
         description "The association id used for the SCTP session



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 89]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


           between the Exporter and the Collector of the IPFIX
           Transport Session. It is equal to the sctpAssocId entry
           in the sctpAssocTable defined in the SCTP-MIB.
           This parameter is only used if protocol has the value 132
           (SCTP). In all other cases, the parameter is omitted.";
         reference "RFC5815, Section 8
           (ipfixTransportSessionSctpAssocId),
           RFC3871";
       }
       choice protocolSpecificParameters {
         case udp {
           when "protocol = 17";
           description "UDP specific Transport Session state
             parameters.";
           leaf templateRefreshTimeout {
             type uint32;
             units seconds;
             description "Used for Exporting Processes, this parameter
               contains the time in seconds after which Templates MUST
               be resent by the Exporter.
               Used for Collecting Processes, this parameter contains
               the lifetime in seconds after which a Template becomes
               invalid when it is not received again within this
               lifetime.";
             reference "RFC5815, Section 8
               (ipfixTransportSessionTemplateRefreshTimeout).";
           }
           leaf optionsTemplateRefreshTimeout {
             type uint32;
             units seconds;
             description "Used for Exporting Processes, this parameter
               contains the time in seconds after which Options
               Templates MUST be resent by the Exporter.
               Used for Collecting Processes, this parameter contains
               the lifetime in seconds after which a Template becomes
               invalid when it is not received again within this
               lifetime.";
             reference "RFC5815, Section 8
               (ipfixTransportSessionOptionsTemplateRefreshTimeout).";
           }
           leaf templateRefreshPacket {
             type uint32;
             units "IPFIX Messages";
             description "Used for Exporting Processes, this parameter
               contains the number of exported IPFIX Messages after
               which Templates MUST be resent by the Exporter.
               Used on Collecting Processes, this parameter contains
               the lifetime in number of exported IPFIX Messages after



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 90]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


               which an Template becomes invalid when it is not
               received again within this lifetime.
               This parameter is only used if protocol has the value 17
               (UDP). In all other cases, the parameter is omitted.";
             reference "RFC5815, Section 8
               (ipfixTransportSessionTemplateRefreshPacket).";
           }
           leaf optionsTemplateRefreshPacket {
             type uint32;
             units "IPFIX Messages";
             description "Used for Exporting Processes, this parameter
               contains the number of exported IPFIX Messages after
               which Options Templates MUST be resent by the Exporter.
               Used on Collecting Processes, this parameter contains
               the lifetime in number of exported IPFIX Messages after
               which an Options Template becomes invalid when it is not
               received again within this lifetime.";
             reference "RFC5815, Section 8
               (ipfixTransportSessionOptionsTemplateRefreshPacket).";
           }
         }
       }
       leaf status {
         type transportSessionStatus;
         description "Status of the Transport Session.";
         reference "RFC5815, Section 8 (ipfixTransportSessionStatus).";
       }
       leaf rate {
         type yang:gauge32;
         units "bytes per second";
         description "The number of bytes per second transmitted by the
           Exporting Process or received by the Collecting Process.
           This parameter is updated every second.";
         reference "RFC5815, Section 8 (ipfixTransportSessionRate).";
       }
       leaf packets {
         type yang:counter64;
         units packets;
         description "The number of packets transmitted by the
           Exporting Process or received by the Collecting Process.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           transportSessionDiscontinuityTime.";
         reference "RFC5815, Section 8
           (ipfixTransportSessionPackets).";
       }
       leaf bytes {



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 91]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


         type yang:counter64;
         units bytes;
         description "The number of bytes transmitted by the
           Exporting Process or received by the Collecting Process.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           transportSessionDiscontinuityTime.";
         reference "RFC5815, Section 8 (ipfixTransportSessionBytes).";
       }
       leaf messages {
         type yang:counter64;
         units "IPFIX Messages";
         description "The number of messages transmitted by the
           Exporting Process or received by the Collecting Process.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           transportSessionDiscontinuityTime.";
         reference "RFC5815, Section 8
           (ipfixTransportSessionMessages).";
       }
       leaf discardedMessages {
         type yang:counter64;
         units "IPFIX Messages";
         description "Used for Exporting Processes, this parameter
           indicates the number of messages that could not be sent due
           to internal buffer overflows, network congestion, routing
           issues, etc. Used for Collecting Process, this parameter
           indicates the number of received IPFIX Message that are
           malformed, cannot be decoded, are received in the wrong
           order or are missing according to the sequence number.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           transportSessionDiscontinuityTime.";
         reference "RFC5815, Section 8
           (ipfixTransportSessionDiscardedMessages).";
       }
       leaf records {
         type yang:counter64;
         units "Data Records";
         description "The number of Data Records transmitted by the
           Exporting Process or received by the Collecting Process.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           transportSessionDiscontinuityTime.";



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 92]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


         reference "RFC5815, Section 8
           (ipfixTransportSessionRecords).";
       }
       leaf templates {
         type yang:counter32;
         units "Templates";
         description "The number of Templates transmitted by the
           Exporting Process or received by the Collecting Process.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           transportSessionDiscontinuityTime.";
         reference "RFC5815, Section 8
           (ipfixTransportSessionTemplates).";
       }
       leaf optionsTemplates {
         type yang:counter32;
         units "Options Templates";
         description "The number of Option Templates transmitted by the
           Exporting Process or received by the Collecting Process.
           Discontinuities in the value of this counter can occur at
           re-initialization of the management system, and at other
           times as indicated by the value of
           transportSessionDiscontinuityTime.";
         reference "RFC5815, Section 8
           (ipfixTransportSessionOptionsTemplates).";
       }
       leaf transportSessionStartTime {
         type yang:date-and-time;
         description "Timestamp of the start of the given Transport
           Session.
           This state parameter does not correspond to any object in
           the IPFIX MIB module.";
       }
       leaf transportSessionDiscontinuityTime {
         type yang:date-and-time;
         description "Timestamp of the most recent occasion at which
           one or more of the Transport Session counters suffered a
           discontinuity.
           In contrast to ipfixTransportSessionDiscontinuityTime
           in the IPFIX MIB module, the time is absolute and not
           relative to sysUpTime.";
         reference "RFC5815, Section 8
           (ipfixTransportSessionDiscontinuityTime).";
       }
       list template {
         description "This list contains the Templates and Options
           Templates that are transmitted by the Exporting Process



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 93]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


           or received by the Collecting Process.
           Withdrawn or invalidated (Options) Template MUST be removed
           from this list.";
         uses templateParameters;
       }
     }

     /*****************************************************************
     * Main container
     *****************************************************************/

     container ipfix {
       list collectingProcess {
         if-feature collector;
         key name;
         description "Collecting Process of the Monitoring Device.";
         leaf name { type nameType; }
         uses collectingProcessParameters;
         leaf-list exportingProcess {
           type leafref { path "/ipfix/exportingProcess/name"; }
           description "Export of received records without any
             modifications. Records are processed by all Exporting
             Processes in the list.";
         }
       }

       list observationPoint {
         if-feature meter;
         key name;
         description "Observation Point of the Monitoring Device.";
         leaf name { type nameType; }
         uses observationPointParameters;
         leaf-list selectionProcess {
           type leafref { path "/ipfix/selectionProcess/name"; }
           description "Selection Processes in this list process packets
             in parallel.";
         }
       }

       list selectionProcess {
         if-feature meter;
         key name;
         description "Selection Process of the Monitoring Device.";
         leaf name { type nameType; }
         list selector {
           key name;
           min-elements 1;
           ordered-by user;



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 94]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


           description "List of Selectors that define the action of the
             Selection Process on a single packet. The Selectors are
             serially invoked in the same order as they appear in this
             list.";
           leaf name { type nameType; }
           uses selectorParameters;
         }
         list selectionSequence {
           config false;
           description "This list contains the Selection Sequence IDs
             which are assigned by the Monitoring Device to distinguish
             different Selection Sequences passing through the
             Selection Process.
             As Selection Sequence IDs are unique per Observation
             Domain, the corresponding Observation Domain IDs are
             included as well.
             With this information, it is possible to associate
             Selection Sequence (Statistics) Report Interpretations
             exported according to the PSAMP protocol with a Selection
             Process in the configuration data.";
           reference "RFC5476.";
           leaf selectionSequenceId { type uint64; }
           leaf observationDomainId { type uint32; }
         }
         leaf cache {
           type leafref { path "/ipfix/cache/name"; }
           description "Cache which receives the output of the
             Selection Process.";
         }
       }

       list cache {
         if-feature meter;
         key name;
         description "Cache of the Monitoring Device.";
         leaf name { type nameType; }
         uses cacheParameters;
         leaf-list exportingProcess {
           type leafref { path "/ipfix/exportingProcess/name"; }
           description "Records are exported by all Exporting Processes
             in the list.";
         }
       }

       list exportingProcess {
         if-feature exporter;
         key name;
         description "Exporting Process of the Monitoring Device.";



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 95]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


         leaf name { type nameType; }
         uses exportingProcessParameters;
       }
     }
   }
   <CODE ENDS>


7.  Examples

   This section shows example configurations conforming to the YANG
   module specified in Section 6.

7.1.  PSAMP Device

   This configuration example configures two Observation Points
   capturing ingress traffic at eth0 and all traffic at eth1.  Both
   Observed Packet Streams enter two different Selection Processes.  The
   first Selection Process implements a Composite Selectors of a filter
   for UDP packets and a random sampler.  The second Selection Process
   implements a Primitive Selector of an ICMP filter.  The Selected
   Packet Streams of both Selection Processes enter the same Cache.  The
   Cache Mode is "immediate" resulting in the creation of a PSAMP Packet
   Report for every selected packet.

   The associated Exporting Process exports to a Collector using PR-SCTP
   and DTLS.  The transport layer security parameters specify that the
   collector must supply a certificate for the fully qualified domain
   name collector.example.net.  Valid certificates from any
   certification authority will be accepted.  As the destination
   transport port is omitted, the standard IPFIX-over-DTLS port 4740 is
   used.

   The parameters of the Selection Processes are reported as Selection
   Sequence Report Interpretations and Selector Report Interpretations
   [RFC5476].  There will be two Selection Sequence Report
   Interpretations per Selection Process, one for each Observation
   Point.  Selection Sequence Statistics Report Interpretations are
   exported every five minutes (300000 milliseconds).

   <ipfix xmlns="urn:ietf:params:xml:ns:yang:ietf-ipfix-psamp">

     <observationPoint>
       <name>OP at eth0 (ingress)</name>
       <observationDomainId>123</observationDomainId>
       <ifName>eth0</ifName>
       <direction>ingress</direction>
       <selectionProcess>Sampled UDP packets</selectionProcess>



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 96]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


       <selectionProcess>ICMP packets</selectionProcess>
     </observationPoint>

     <observationPoint>
       <name>OP at eth1</name>
       <observationDomainId>123</observationDomainId>
       <ifName>eth1</ifName>
       <selectionProcess>Sampled UDP packets</selectionProcess>
       <selectionProcess>ICMP packets</selectionProcess>
     </observationPoint>

     <selectionProcess>
       <name>Sampled UDP packets</name>
       <selector>
         <name>UDP filter</name>
         <filterMatch>
           <ieId>4</ieId>
           <value>17</value>
         </filterMatch>
       </selector>
       <selector>
         <name>10-out-of-100 sampler</name>
         <sampRandOutOfN>
           <size>10</size>
           <population>100</population>
         </sampRandOutOfN>
       </selector>
       <cache>PSAMP cache</cache>
     </selectionProcess>

     <selectionProcess>
       <name>ICMP packets</name>
       <selector>
         <name>ICMP filter</name>
         <filterMatch>
           <ieId>4</ieId>
           <value>1</value>
         </filterMatch>
       </selector>
       <cache>PSAMP cache</cache>
     </selectionProcess>

     <cache>
       <name>PSAMP cache</name>
       <cacheMode>immediate</cacheMode>
       <cacheLayout>
         <cacheField>
           <name>Field 1: ipHeaderPacketSection</name>



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 97]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


           <ieId>313</ieId>
           <ieLength>64</ieLength>
         </cacheField>
         <cacheField>
           <name>Field 2: observationTimeMilliseconds</name>
           <ieId>322</ieId>
         </cacheField>
       </cacheLayout>
       <exportingProcess>The only exporter</exportingProcess>
     </cache>

     <exportingProcess>
       <name>The only exporter</name>
       <destination>
         <name>PR-SCTP collector</name>
         <sctpExporter>
           <destinationIPAddress>192.0.2.1</destinationIPAddress>
           <rateLimit>1000000</rateLimit>
           <timedReliability>500</timedReliability>
           <transportLayerSecurity>
             <remoteSubjectFQDN>coll-1.example.net</remoteSubjectFQDN>
           </transportLayerSecurity>
         </sctpExporter>
       </destination>
       <options>
         <name>Options 1</name>
         <optionsType>selectionSequence</optionsType>
         <optionsTimeout>0</optionsTimeout>
       </options>
       <options>
         <name>Options 2</name>
         <optionsType>selectionStatistics</optionsType>
         <optionsTimeout>300000</optionsTimeout>
       </options>
     </exportingProcess>

   </ipfix>

7.2.  IPFIX Device

   This configuration example demonstrates the shared usage of a Cache
   for maintaining Flow Records from two Observation Points belonging to
   different Observation Domains.  Packets are selected using different
   Sampling techniques: count-based Sampling for the first Observation
   Point (eth0) and selection of all packets for the second Observation
   Point (eth1).  The Exporting Process sends the Flow Records to a
   primary destination using SCTP.  A UDP Collector is specified as
   secondary destination.



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 98]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   Exporting Process reliability statistics [RFC5101] are exported
   periodically every minute (60000 milliseconds).  Selection Sequence
   Report Interpretations and Selector Report Interpretations [RFC5476]
   are exported once after configuring the Selection Processes.  In
   total, two Selection Sequence Report Interpretations will be
   exported, one for each Selection Process.

   <ipfix xmlns="urn:ietf:params:xml:ns:yang:ietf-ipfix-psamp">

     <observationPoint>
       <name>OP at eth0 (ingress)</name>
       <observationDomainId>123</observationDomainId>
       <ifName>eth0</ifName>
       <direction>ingress</direction>
       <selectionProcess>Count-based packet selection</selectionProcess>
     </observationPoint>

     <observationPoint>
       <name>OP at eth1</name>
       <observationDomainId>456</observationDomainId>
       <ifName>eth1</ifName>
       <selectionProcess>All packet selection</selectionProcess>
     </observationPoint>

     <selectionProcess>
       <name>Count-based packet selection</name>
       <selector>
         <name>Count-based sampler</name>
         <sampCountBased>
           <packetInterval>1</packetInterval>
           <packetSpace>99</packetSpace>
         </sampCountBased>
       </selector>
       <cache>Flow cache</cache>
     </selectionProcess>

     <selectionProcess>
       <name>All packet selection</name>
       <selector>
         <name>Select all</name>
         <selectAll/>
       </selector>
       <cache>Flow cache</cache>
     </selectionProcess>

     <cache>
       <name>Flow cache</name>
       <cacheMode>timeout</cacheMode>



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt     [Page 99]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


       <maxFlows>4096</maxFlows>
       <activeTimeout>5000</activeTimeout>
       <inactiveTimeout>10000</inactiveTimeout>
       <cacheLayout>
         <cacheField>
           <name>Field 1</name>
           <ieName>sourceIPv4Address</ieName>
           <isFlowKey/>
         </cacheField>
         <cacheField>
           <name>Field 2</name>
           <ieName>destinationIPv4Address</ieName>
           <isFlowKey/>
         </cacheField>
         <cacheField>
           <name>Field 3</name>
           <ieName>transportProtocol</ieName>
           <isFlowKey/>
         </cacheField>
         <cacheField>
           <name>Field 4</name>
           <ieName>sourceTransportPort</ieName>
           <isFlowKey/>
         </cacheField>
         <cacheField>
           <name>Field 5</name>
           <ieName>destinationTransportPort</ieName>
           <isFlowKey/>
         </cacheField>
         <cacheField>
           <name>Field 6</name>
           <ieName>flowStartMilliSeconds</ieName>
         </cacheField>
         <cacheField>
           <name>Field 7</name>
           <ieName>flowEndSeconds</ieName>
         </cacheField>
         <cacheField>
           <name>Field 8</name>
           <ieName>octetDeltaCount</ieName>
         </cacheField>
         <cacheField>
           <name>Field 9</name>
           <ieName>packetDeltaCount</ieName>
         </cacheField>
       </cacheLayout>
       <exportingProcess>SCTP export with UDP backup</exportingProcess>
     </cache>



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt    [Page 100]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


     <exportingProcess>
       <name>SCTP export with UDP backup</name>
       <exportMode>fallback</exportMode>
       <destination>
         <name>SCTP destination (primary)</name>
         <sctpExporter>
           <destinationPort>4739</destinationPort>
           <destinationIPAddress>192.0.2.1</destinationIPAddress>
         </sctpExporter>
       </destination>
       <destination>
         <name>UDP destination (secondary)</name>
         <udpExporter>
           <destinationPort>4739</destinationPort>
           <destinationIPAddress>192.0.2.2</destinationIPAddress>
           <templateRefreshTimeout>300</templateRefreshTimeout>
      <optionsTemplateRefreshTimeout>300</optionsTemplateRefreshTimeout>
         </udpExporter>
       </destination>
       <options>
         <name>Options 1</name>
         <optionsType>selectionSequence</optionsType>
         <optionsTimeout>0</optionsTimeout>
       </options>
       <options>
         <name>Options 2</name>
         <optionsType>exportingReliability</optionsType>
         <optionsTimeout>60000</optionsTimeout>
       </options>
     </exportingProcess>

   </ipfix>

7.3.  Export of Flow Records and Packet Reports

   This configuration example demonstrates the combined export of Flow
   Records and Packet Reports for a single Observation Point.  One
   Selection Process applies random Sampling to the Observed Packet
   Stream.  Its output is passed to a Cache generating Flow Records.  In
   parallel, the Observed Packet Stream enters a second Selection
   Process which discards all non-ICMP packets and passes the selected
   packets to a second Cache for generating Packet Reports.  The output
   of both Caches is exported to a single Collector using SCTP.

   <ipfix xmlns="urn:ietf:params:xml:ns:yang:ietf-ipfix-psamp">

     <observationPoint>
       <name>OP at linecard 3</name>



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt    [Page 101]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


       <observationDomainId>9876</observationDomainId>
       <ifIndex>4</ifIndex>
       <direction>ingress</direction>
       <selectionProcess>Sampling</selectionProcess>
       <selectionProcess>ICMP</selectionProcess>
     </observationPoint>

     <selectionProcess>
       <name>Sampling</name>
       <selector>
         <name>Random sampler</name>
         <sampUniProb>
           <probability>0.01</probability>
         </sampUniProb>
       </selector>
       <cache>Flow cache</cache>
     </selectionProcess>

     <selectionProcess>
       <name>ICMP</name>
       <selector>
         <name>ICMP filter</name>
         <filterMatch>
           <ieId>4</ieId>
           <value>1</value>
         </filterMatch>
       </selector>
       <cache>Packet reporting</cache>
     </selectionProcess>

     <cache>
       <name>Flow cache</name>
       <cacheMode>timeout</cacheMode>
       <maxFlows>4096</maxFlows>
       <activeTimeout>5</activeTimeout>
       <inactiveTimeout>10</inactiveTimeout>
       <cacheLayout>
         <cacheField>
           <name>Field 1</name>
           <ieName>sourceIPv4Address</ieName>
           <isFlowKey/>
         </cacheField>
         <cacheField>
           <name>Field 2</name>
           <ieName>destinationIPv4Address</ieName>
           <isFlowKey/>
         </cacheField>
         <cacheField>



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt    [Page 102]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


           <name>Field 6</name>
           <ieName>flowStartMilliSeconds</ieName>
         </cacheField>
         <cacheField>
           <name>Field 7</name>
           <ieName>flowEndSeconds</ieName>
         </cacheField>
         <cacheField>
           <name>Field 8</name>
           <ieName>octetDeltaCount</ieName>
         </cacheField>
         <cacheField>
           <name>Field 9</name>
           <ieName>packetDeltaCount</ieName>
         </cacheField>
       </cacheLayout>
       <exportingProcess>Export</exportingProcess>
     </cache>

     <cache>
       <name>Packet reporting</name>
       <cacheMode>immediate</cacheMode>
       <cacheLayout>
         <cacheField>
           <name>Field 1</name>
           <ieId>313</ieId>
           <ieLength>64</ieLength>
         </cacheField>
         <cacheField>
           <name>Field 2</name>
           <ieId>154</ieId>
         </cacheField>
       </cacheLayout>
       <exportingProcess>Export</exportingProcess>
     </cache>

     <exportingProcess>
       <name>Export</name>
       <destination>
         <name>SCTP collector</name>
         <sctpExporter>
           <destinationIPAddress>192.0.2.1</destinationIPAddress>
           <timedReliability>0</timedReliability>
         </sctpExporter>
       </destination>
       <options>
         <name>Options 1</name>
         <optionsType>selectionSequence</optionsType>



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt    [Page 103]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


         <optionsTimeout>0</optionsTimeout>
       </options>
     </exportingProcess>

   </ipfix>

7.4.  Collector and File Writer

   This configuration example configures a Collector which writes the
   received data to a file.

   <ipfix xmlns="urn:ietf:params:xml:ns:yang:ietf-ipfix-psamp">

     <collectingProcess>
       <name>SCTP collector</name>
       <sctpCollector>
         <name>Listening port 4739</name>
         <localPort>4739</localPort>
         <localIPAddress>192.0.2.1</localIPAddress>
       </sctpCollector>
       <exportingProcess>File writer</exportingProcess>
     </collectingProcess>

     <exportingProcess>
       <name>File writer</name>
       <destination>
         <name>Write to /tmp folder</name>
         <fileWriter>
           <file>file://tmp/collected-records.ipfix</file>
         </fileWriter>
       </destination>
     </exportingProcess>

   </ipfix>

7.5.  Deviations

   Assume that a Monitoring Device has only two interfaces ifIndex=1 and
   ifIndex=2 which can be configured as Observation Points.  The
   Observation Point ID is always identical to the ifIndex.

   The following YANG module specifies these deviations.









Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt    [Page 104]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


module my-ipfix-psamp-deviation {
  namespace "urn:my-company:xml:ns:ietf-ipfix-psamp";
  prefix my;

  import ietf-ipfix-psamp { prefix ipfix; }

  deviation /ipfix:ipfix/ipfix:observationPoint/ipfix:entPhysicalIndex {
    deviate not-supported;
  }
  deviation /ipfix:ipfix/ipfix:observationPoint/ipfix:entPhysicalName {
    deviate not-supported;
  }
  deviation /ipfix:ipfix/ipfix:observationPoint {
    deviate add {
      must "ipfix:ifIndex=1 or ipfix:ifIndex=2";
    }
  }
  deviation
      /ipfix:ipfix/ipfix:observationPoint/ipfix:observationPointId {
    deviate add {
      must "current()=../ipfix:ifIndex";
    }
  }
}


8.  Security Considerations

   The YANG module defined in this memo is designed to be accessed via
   the NETCONF protocol [RFC4741].  The lowest NETCONF layer is the
   secure transport layer and the mandatory to implement secure
   transport is SSH [RFC4742].

   There are a number of data nodes defined in this YANG module which
   are writable/creatable/deletable (i.e. config true, which is the
   default).  These data nodes may be considered sensitive or vulnerable
   in some network environments.  Write operations (e.g. edit-config) to
   these data nodes without proper protection can have a negative effect
   on network operations.  These are the subtrees and data nodes and
   their sensitivity/vulnerability:

   /ipfix/observationPoint
      The configuration parameters in this subtree specify where packets
      are observed and by which Selection Processes they will be
      processed.  Write access to this subtree allows observing packets
      at arbitrary interfaces or linecards of the Monitoring Device and
      may thus lead to the export of sensitive traffic information.




Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt    [Page 105]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   /ipfix/selectionProcess
      The configuration parameters in this subtree specify for which
      packets information will be reported in Packet Reports or Flow
      Records.  Write access to this subtree allows changing the subset
      of packets for which information will be reported and may thus
      lead to the export of sensitive traffic information.
   /ipfix/cache
      The configuration parameters in this subtree specify the fields
      included in Packet Reports or Flow Records.  Write access to this
      subtree allows adding fields which may contain sensitive traffic
      information, such as IP addresses or parts of the packet payload.
   /ipfix/exportingProcess
      The configuration parameters in this subtree specify to which
      Collectors Packet Reports or Flow Records are exported.  Write
      access to this subtree allows exporting potentially sensitive
      traffic information to illegitimate Collectors.  Furthermore,
      transport layer security parameters can be changed, which may
      affect the mutual authentication between Exporters and Collectors
      as well as the encrypted transport of the data.
   /ipfix/collectingProcess
      The configuration parameters in this subtree may specify that
      collected Packet Reports and Flow Records are reexported to
      another Collector or written to a file.  Write access to this
      subtree potentially allows reexporting or storing the sensitive
      traffic information.

   Some of the readable data nodes in this YANG module may be considered
   sensitive or vulnerable in some network environments.  It is thus
   important to control read access (e.g. via get, get-config or
   notification) to these data nodes.  These are the subtrees and data
   nodes and their sensitivity/vulnerability:

   /ipfix/observationPoint
      Parameters in this subtree may be sensitive because they reveal
      information about the Monitoring Device itself and the network
      infrastructure.
   /ipfix/selectionProcess
      Parameters in this subtree may be sensitive because they reveal
      information about the Monitoring Device itself and the observed
      traffic.  For example, the counters packetsObserved and
      packetsDropped inferring the number of observed packets.
   /ipfix/cache
      Parameters in this subtree may be sensitive because they reveal
      information about the Monitoring Device itself and the observed
      traffic.  For example, the counters activeFlows and dataRecords
      allow inferring the number of measured Flows or packets.





Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt    [Page 106]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   /ipfix/exportingProcess
      Parameters in this subtree may be sensitive because they reveal
      information about the network infrastructure and the outgoing
      IPFIX Transport Sessions.  For example, it discloses the IP
      addresses of Collectors as well as the deployed transport layer
      security configuration, which may facilitate the interception of
      outgoing IPFIX Messages.
   /ipfix/collectingProcess
      Parameters in this subtree may be sensitive because they reveal
      information about the network infrastructure and the incoming
      IPFIX Transport Sessions.  For example, it discloses the IP
      addresses of Exporters as well as the deployed transport layer
      security configuration, which may facilitate the interception of
      incoming IPFIX Messages.


9.  IANA Considerations

   This document registers a URI in the IETF XML registry [RFC3688].
   Following the format in RFC 3688, the following registration is
   requested.

      URI: urn:ietf:params:xml:ns:yang:ietf-ipfix-psamp
      Registrant Contact: The IPFIX WG of the IETF.
      XML: N/A, the requested URI is an XML namespace.

   This document registers a YANG module in the YANG Module Names
   registry [I-D.ietf-netmod-yang].

      name: ietf-ipfix-psamp
      namespace: urn:ietf:params:xml:ns:yang:ietf-ipfix-psamp
      prefix: ipfix
      reference: RFCXXXX


Appendix A.  Acknowledgements

   The authors thank Martin Bjorklund, Andy Bierman, and Ladislav Lhotka
   for helping specifying the configuration data model in YANG, as well
   as Atsushi Kobayashi, Andrew Johnson, Lothar Braun, and Brian
   Trammell for their valuable reviews of this document.


10.  References







Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt    [Page 107]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


10.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC5101]  Claise, B., "Specification of the IP Flow Information
              Export (IPFIX) Protocol for the Exchange of IP Traffic
              Flow Information", RFC 5101, January 2008.

   [RFC5102]  Quittek, J., Bryant, S., Claise, B., Aitken, P., and J.
              Meyer, "Information Model for IP Flow Information Export",
              RFC 5102, January 2008.

   [RFC5103]  Trammell, B. and E. Boschi, "Bidirectional Flow Export
              Using IP Flow Information Export (IPFIX)", RFC 5103,
              January 2008.

   [RFC5475]  Zseby, T., Molina, M., Duffield, N., Niccolini, S., and F.
              Raspall, "Sampling and Filtering Techniques for IP Packet
              Selection", RFC 5475, March 2009.

   [RFC5476]  Claise, B., Johnson, A., and J. Quittek, "Packet Sampling
              (PSAMP) Protocol Specifications", RFC 5476, March 2009.

   [RFC5477]  Dietz, T., Claise, B., Aitken, P., Dressler, F., and G.
              Carle, "Information Model for Packet Sampling Exports",
              RFC 5477, March 2009.

   [I-D.ietf-netmod-yang]
              Bjorklund, M., "YANG - A data modeling language for the
              Network Configuration Protocol (NETCONF)",
              draft-ietf-netmod-yang-13 (work in progress), June 2010.

   [I-D.ietf-netmod-yang-types]
              Schoenwaelder, J., "Common YANG Data Types",
              draft-ietf-netmod-yang-types-09 (work in progress),
              April 2010.

   [UML]      "OMG Unified Modeling Language (OMG UML), Superstructure,
              V2.2", OMG formal/2009-02-02, February 2009.

10.2.  Informative References

   [RFC1141]  Mallory, T. and A. Kullberg, "Incremental updating of the
              Internet checksum", RFC 1141, January 1990.

   [RFC2863]  McCloghrie, K. and F. Kastenholz, "The Interfaces Group
              MIB", RFC 2863, June 2000.



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt    [Page 108]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   [RFC3280]  Housley, R., Polk, W., Ford, W., and D. Solo, "Internet
              X.509 Public Key Infrastructure Certificate and
              Certificate Revocation List (CRL) Profile", RFC 3280,
              April 2002.

   [RFC3688]  Mealling, M., "The IETF XML Registry", BCP 81, RFC 3688,
              January 2004.

   [RFC3758]  Stewart, R., Ramalho, M., Xie, Q., Tuexen, M., and P.
              Conrad, "Stream Control Transmission Protocol (SCTP)
              Partial Reliability Extension", RFC 3758, May 2004.

   [RFC3871]  Jones, G., "Operational Security Requirements for Large
              Internet Service Provider (ISP) IP Network
              Infrastructure", RFC 3871, September 2004.

   [RFC3917]  Quittek, J., Zseby, T., Claise, B., and S. Zander,
              "Requirements for IP Flow Information Export (IPFIX)",
              RFC 3917, October 2004.

   [RFC4133]  Bierman, A. and K. McCloghrie, "Entity MIB (Version 3)",
              RFC 4133, August 2005.

   [RFC4347]  Rescorla, E. and N. Modadugu, "Datagram Transport Layer
              Security", RFC 4347, April 2006.

   [RFC4741]  Enns, R., "NETCONF Configuration Protocol", RFC 4741,
              December 2006.

   [RFC4742]  Wasserman, M. and T. Goddard, "Using the NETCONF
              Configuration Protocol over Secure SHell (SSH)", RFC 4742,
              December 2006.

   [RFC4960]  Stewart, R., "Stream Control Transmission Protocol",
              RFC 4960, September 2007.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246, August 2008.

   [RFC5470]  Sadasivan, G., Brownlee, N., Claise, B., and J. Quittek,
              "Architecture for IP Flow Information Export", RFC 5470,
              March 2009.

   [RFC5472]  Zseby, T., Boschi, E., Brownlee, N., and B. Claise, "IP
              Flow Information Export (IPFIX) Applicability", RFC 5472,
              March 2009.

   [RFC5473]  Boschi, E., Mark, L., and B. Claise, "Reducing Redundancy



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt    [Page 109]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


              in IP Flow Information Export (IPFIX) and Packet Sampling
              (PSAMP) Reports", RFC 5473, March 2009.

   [RFC5474]  Duffield, N., Chiou, D., Claise, B., Greenberg, A.,
              Grossglauser, M., and J. Rexford, "A Framework for Packet
              Selection and Reporting", RFC 5474, March 2009.

   [RFC5610]  Boschi, E., Trammell, B., Mark, L., and T. Zseby,
              "Exporting Type Information for IP Flow Information Export
              (IPFIX) Information Elements", RFC 5610, July 2009.

   [RFC5655]  Trammell, B., Boschi, E., Mark, L., Zseby, T., and A.
              Wagner, "Specification of the IP Flow Information Export
              (IPFIX) File Format", RFC 5655, October 2009.

   [RFC5815]  Dietz, T., Kobayashi, A., Claise, B., and G. Muenz,
              "Definitions of Managed Objects for IP Flow Information
              Export", RFC 5815, April 2010.

   [I-D.ietf-ipfix-psamp-mib]
              Dietz, T., Claise, B., and J. Quittek, "Definitions of
              Managed Objects for Packet Sampling",
              draft-ietf-ipfix-psamp-mib-00 (work in progress),
              March 2010.

   [I-D.ietf-ipfix-export-per-sctp-stream]
              Claise, B., Aitken, P., Johnson, A., and G. Muenz, "IPFIX
              Export per SCTP Stream",
              draft-ietf-ipfix-export-per-sctp-stream-08 (work in
              progress), May 2010.

   [W3C.REC-xml-20040204]
              Bray, T., Maler, E., Sperberg-McQueen, C., Paoli, J., and
              F. Yergeau, "Extensible Markup Language (XML) 1.0 (Third
              Edition)", World Wide Web Consortium FirstEdition REC-xml-
              20040204, February 2004,
              <http://www.w3.org/TR/2004/REC-xml-20040204>.

   [W3C.REC-xmlschema-0-20041028]
              Walmsley, P. and D. Fallside, "XML Schema Part 0: Primer
              Second Edition", World Wide Web Consortium
              Recommendation REC-xmlschema-0-20041028, October 2004,
              <http://www.w3.org/TR/2004/REC-xmlschema-0-20041028>.

   [I-D.ietf-netmod-dsdl-map]
              Lhotka, L., Mahy, R., and S. Chisholm, "Mapping YANG to
              Document Schema Definition Languages and Validating
              NETCONF Content", draft-ietf-netmod-dsdl-map-06 (work in



Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt    [Page 110]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


              progress), June 2010.

   [W3C.REC-soap12-part1-20070427]
              Mendelsohn, N., Hadley, M., Gudgin, M., Moreau, J.,
              Karmarkar, A., Nielsen, H., and Y. Lafon, "SOAP Version
              1.2 Part 1: Messaging Framework (Second Edition)", World
              Wide Web Consortium Recommendation REC-soap12-part1-
              20070427, April 2007,
              <http://www.w3.org/TR/2007/REC-soap12-part1-20070427>.

   [YANG-WEB]
              Bjoerklund, M., "YANG WebHome",
              Homepage http://www.yang-central.org, March 2009.

   [IANA-IPFIX]
              "IANA Registry of IPFIX Information Elements",
              Homepage http://www.iana.org/assignments/ipfix/
              ipfix.xhtml.


Authors' Addresses

   Gerhard Muenz
   Technische Universitaet Muenchen
   Department of Informatics
   Chair for Network Architectures and Services (I8)
   Boltzmannstr. 3
   Garching  D-85748
   Germany

   Phone: +49 89 289-18008
   Email: muenz@net.in.tum.de
   URI:   http://www.net.in.tum.de/~muenz


   Benoit Claise
   Cisco Systems, Inc.
   De Kleetlaan 6a b1
   Diegem  1831
   Belgium

   Phone: +32 2 704 5622
   Email: bclaise@cisco.com








Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt    [Page 111]

Internet-Draft    IPFIX/PSAMP Configuration Data Model         July 2010


   Paul Aitken
   Cisco Systems, Inc.
   96 Commercial Quay
   Commercial Street
   Edinburgh  EH6 6LX
   United Kingdom

   Phone: +44 131 561 3616
   Email: paitken@cisco.com










































Muenz, et al.  draft-ietf-ipfix-configuration-model-06.txt    [Page 112]


