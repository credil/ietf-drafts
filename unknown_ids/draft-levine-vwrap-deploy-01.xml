<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-levine-vwrap-deploy-01" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="VWRAP Deployment">VWRAP Deployment and trust
    patterns</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="David W. levine" initials="D.W.L." role="editor"
            surname="Levine">
      <organization>IBM Thomas J. Watson Research Center</organization>

      <address>
        <postal>
          <street>19 Skyline Drive</street>

          <!-- Reorder these if your country does things differently -->

          <city>Hawthorn</city>

          <region>New York</region>

          <code>10532</code>

          <country>USA</country>
        </postal>

        <phone>+1 914-784-7427</phone>

        <email>dwl@us.ibm.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <date month="February" year="2010" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>Applications</area>

    <workgroup>VWRAP</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>template</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <!--  -->

      <t>Architectural layering, patterns and trust points for VWRAP</t>
    </abstract>
  </front>

  <middle>
    <section title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </section>

    <section title="Introduction">
      <t>This draft is an extension and follow on draft to OGPX layering and
      architectural patterns, draft-levine-ogp-layering-00</t>

      <t>This note focuses on design patterns and architectural choices which
      will permit the VWRAP specifications to adapt to a wide range of
      deployment patterns, within the basic VWRAP remit, and support the use
      of policy to permit the architecture to enable virtual spaces with very
      different policies toward security, intellectual property, identity, and
      economics to share common infrastructure and to inter operate in a
      principled fashion.</t>

      <t>This draft includes patterns for assembling VWRAP services into
      usable systems and patterns for alternative implementations of various
      VWRAP services to allow varying approaches to service and content
      delivery. This draft is intended to focus attention on the service
      design choices which will allow a single specification to support a
      range of deployed services.</t>
    </section>

    <!-- end of intro   -->

    <section title="Virtual Worlds Overview">
      <t>To clarify the nature of the VWRAP specifications, a brief summary of
      what is meant by a virtual world and how the VWRAP specification
      approaches creating a virtual world.</t>

      <t>A virtual world is a shared space in which users, represented as
      avatars can interact with each other and a simulated environment. VWRAP
      focuses on a set of virtual worlds with persistent simulations, rich
      visual components and common approach to simulation. This approach
      follows the general pattern established by Linden Lab(TM)'s Second Life
      offering.</t>

      <t>The core task of a virtual world is to create the shared experience
      of multiple users interacting in a simulated space. Actions by users,
      and changes in the state of the shared experience are merged to form a
      series of successive states which are presented to users. VWRAP virtual
      worlds approach this task by creating a region which manages the shared
      simulation, and defining how various services collaborate to allow
      clients to join the simulation, interact with it, and receive the
      information they need in order to present the shared environment to
      their users.</t>

      <t><figure>
          <artwork><![CDATA[
User1           User2
   |                  |
Client1         Client2
     \               /
      \            /
     VWRAP Services 
(Region + other) 

]]></artwork>
        </figure></t>

      <t>Effectively the two users connected via a pair of clients use the
      services defined by the VWRAP specifications to experience a virtual
      world.</t>
    
      <t>The VWRAP specifications focus on defining the services and
      interaction patterns required to permit a client to:</t>

      <t><list style="symbols">
          <t>Authenticate and establish an association with an initial service
          point</t>

          <t>Request that an avatar associated with the user be placed into a
          virtual region</t>

          <t>Be informed of the state of a virtual space when they enter
          it</t>

          <t>Be informed of changes to the state of the virtual space as they
          occur</t>

          <t>Inform the virtual space of actions the user is taking</t>

          <t>Interact with services which store items to be introduced into
          the virtual space</t>

          <t>Interact with other users in the virtual world</t>

          <t>Interact with administrative services within the virtual
          space</t>
        </list></t>

      <t>The VWRAP specifications also describe the services and interaction
      patterns between services which permit:</t>

      <t><list style="symbols">
          <t>Virtual Spaces to fetch and store virtual items</t>

          <t>Manage the location of users within virtual spaces (presence)</t>

          <t>Manage message delivery to remote users within virtual spaces</t>

          <t>Provide externalized interfaces to items and users within virtual
          spaces</t>
        </list></t>

      <t>Note: The above lists are not intended to be exhaustive. However, if
      any major services which are going to be defined by VWRAP are missing,
      they should be noted and added.</t>
    </section>

    <!-- end of overview -->

    <section title="Mechanisms, Services, Domains, Policy">
      <t>When completed, the VWRAP specifications will define:</t>

      <t><list style="symbols">
          <t>a set of underlying service delivery mechanisms</t>

          <t>a set of services delivered over these mechanisms</t>

          <t>clusters of related services, called domains</t>

          <t>mechanisms to apply policy to specific services</t>
        </list></t>

      <t>The model of "domain" is not fully defined in the current
      specifications. Several possible approaches to defining "domains" or
      "clusters" are described here, in hope of stimulating agreement on a
      concise definition.</t>

      <t>The most commonly mentioned partition of services into domains is the
      split between "agent" and "region" domains proposed by Linden Lab. This
      partition separates services associated with the user's identity and
      information, the "agent domain," from services associated with virtual
      space, the "region domain"</t>

      <t>In order to discuss patterns of clustering and service delivery, it
      is necessary to discuss what is mean by "domain" and also look more
      deeply into both the notions of a cluster of services, and also discuss
      possible deployment patterns</t>
    </section>

    <!-- End of mechanisms section -->

    <section title="Servers, Services, Mechanisms and Named entities">
      <t>In order to avoid confusion, in this note, we will define a number of
      terms very precisely:</t>

      <t><list style="symbols">
          <t>Service: a named set of REST style resources which accepts a
          series of messages to perform a task. We explicitly do not mean a
          deplSuoyed service such as the Second Life(tm) service. Services are
          model using REST semantics. The specifications explicitly decouple
          service semantics from HTTP delivery.</t>

          <t>Region: A named portion of virtual space. A Region is
          addressable, via a URI and manages a portion of simulated space.
          Regions are not bound onto specific computational models. From the
          perspective of the protocol, the address and services provided
          defines the region.</t>

          <t>Agent: The state and services representing a user within the
          virtual world</t>

          <t>Policy: A described behavior of a service within the VWRAP
          specifications.</t>

          <t>Avatar: A visual representation of an Agent within the virtual
          world.</t>

          <t>Asset: A set of digital content for use in VWRAP. An asset may have
            presentation data, simulation data and meta data. Simulatoin data is used in
           the procerss of simulating the content. It might include a script, physical properties of
          an item for smiulatoin purposes, a collision meshor similar simulation focused items.
          Presentation data is used  by the client to present the asset to end users.Textures,
	       sounds, animtations, and meshes are examples of presentatoin data. 
          meta data is used to describe and manage the asset. Licenses, author data,
          descriptive data for accessability are examples of meta-data </t>

          <t>Primitive Object: A data structure describing a visual component
          in a simulation. Historically these have been constructive geometric
          objects in Second Life like worlds, but the VWRAP specifications
          assume that the set of defined primitive objects will grow to
          included meshes and other low geometric formats. Primitive objects
          can be assembled into larger compound objects.</t>

          <t>Simulation: The process of modeling the elements of a virtual
          region. The computational processing which creates a series of
          successive scenes containing the Avatars, and Assets within a
          region.</t>

          <t>Delivery Mechanism: A web service, or structured LLIDL/LLSD message used
          to request a service or deliver a notification of a status change in
          a resource.</t>
        </list></t>
    </section>

    <!-- end of servers, Services and Named entities -->

    <section title="Mechanisms and Messages">
      <t>In order to support the full set of use cases, the VWRAP
      specifications model several types of interaction.</t>

      <t>Many interactions are modeled via simple REST based capabilities,
      where the client or a service invokes a direct service to get data or
      cause an action to take place. Examples include fetching a virtual asset
      or requesting information about a virtual resource.</t>

      <t>Some VWRAP interactions establish an ongoing delivery of messages. As
      an example, when an agent is placed in a virtual region, a series of
      updates, informing the client of status changes in the region is
      implicit in the virtual world model. There are a number of possible
      models for delivering the status updates, including having the client
      fetch repeated complete documents containing the state of the region. In
      practice, it is far more efficient to only send changed elements.
      Notionally, these updates can be pushed or pulled.</t>

      <t>Some VWRAP interactions are very low level, with low latency and
      small size. Actions such as an avatar taking a step, a user changing the
      current position of an object in a shared space, text chat and so on.
      These actions often are very "event like." Event like messages can be
      delivered several ways. The current implementations tend to deliver
      these messages via UDP, although some event notifications are fetched
      via polled queues.</t>

      <section title="idempotency and transport reliability">
        <t>For both ongoing notification and low level "event" like messages,
        Idem potency and Reliability become important considerations. A
        significant simplification can be achieved if event like messages
        don't require reliable delivery. Making such messages idempotent
        (Meaning repeated processing does not change the state of the resource
        more than once) simplifies re-sending messages. Designing the messages
        so that a series of messages, delivered out of order can be processed
        by discarding late messages also simplifies unreliable transport. In
        particular, the choice of "step forward at time X" vs. "Step forward
        from position X,Y,Z at time X" means that in the former, one has to
        reliably deliver all the step messages, where as in the later, one can
        skip a step message, or repeat it, and the resulting state will be the
        same.</t>
      </section>
    </section>

    <section title="Deployment patterns">
    <t>To motivate the discussion, we will describe several non normative
 deployment
      patterns for VWRAP based systems. Each of these deployment patterns
      should be viewed as a use case for the VWRAP specifications. The
      specifications should provide sufficient expressivity of service
      endpoints, and trust boundaries to support each of the described
      patterns.</t>


      <section title="Second Life Agent Domain / Region Domain Split">
        <t>This deployment pattern represents the pattern Linden Lab proposed
        in its initial discussions on second generation architecture in 2007.
        It offloads any services which are not germane to managing a virtual
        space to an "agent" domain, focused, on the services which are
        specific, not to the virtual space, but the user's agent.</t>

        <t>In this pattern, the viewer is typically connected to one or more
        regions, and one agent domain. The agent domain acts as a unitary
        focus for all services associated with the agent. When accessing other
        services hosted by a deployer other than the hoster of the agent
        domain, the agent domain acts as the trust source, managing the agent
        (and user's) access to other regions.</t>

        <t>In this deployment pattern, back end services, such as assets and
        inventory are accessed via the agent domain, do not, inherently have
        their own event queue or trust domain.</t>
      </section>

      <!-- ENd of Second Life AD/RD split -->

      <section title="Standalone OpenSim Region model">
        <t>In the Standalone OpenSim deployment model, all of the services
        comprising a Region, an Agent Domain, and the supporting services used
        by these services are hosted on a single server. A single event queue
        may manage connectivity to the services, or several event queues, with
        the services being hosted as separate processes within the server.</t>

        <t>Historically, a standalone OpenSim represents a single fully
        trusted domain, where there are no separate trust components or
        policies.</t>
      </section>

      <!-- End of Standalone Region model -->

      <section title="OpenSim VWRAP + Asset reflector + Agent Service">
        <t>In this deployment pattern, one or more OpenSim regions are hosted,
        each as a separate server. An separate agent domain acts as the trust
        authority, and login component for the deployment. Inventory and Asset
        requests are reflected from individual regions to asset and inventory
        services, hosted either in a standalone fashion, or as part of an
        OpenSim region.</t>
      </section>

      <!-- ENdof Vwrap + asset + agent Service -->

      <section title="OpenSim UGAIM grid model">
        <t>This is the current (Soon to be deprecated) OpenSim Grid model. In
        this model, a separate login service (not an agent domain) is hosted
        on one server ans a collection of backed services are shared by one or
        more Region Simulators. The entire grid forms a single trust
        model.</t>
      </section>

      <!-- end of UGAIM -->

      <section title="Hypergrid">
        <t>In this model, each Region is hosted in either Standalone, or UGAIM
        style Grid mode. Specific links between regions are created, which
        define a two way mapping, permitting users to move their avatars
        between the regions. Service requests related to the back end services
        for these avatars are directed back to the originating service. Trust,
        if any is established in the process of creating the explicit link
        between the regions.</t>
      </section>

      <!-- End of Hypergrid -->

      <section title="Hypergrid and Cable Beach">

       <t>
     Hypergrid can be combined with cable beach, so that assets are
    fetched directly from a shared asset server. Trust between the
    asset server, the regions, and the user is managed by the
    client directly. </t>
      </section>

      <!-- end of cable beach 2009 -->

      <section title="Multi-hosted asset deployment">
        <t>This is a case in which there are multiple back ends supporting
        multiple sets of assets. Trust is established either per the Agent
        Domain model, between services, and the agent's agent domain, or
        between regions, in hpyergrid fashion, or directly between the client
        and the asset services, per the cable beach model.</t>
      </section>

      <!-- End of Multi-hosted -->

      <section title="Factored Service Models">
        <t>There is nothing inherent in the requirements of a virtual world
        deployment that specific back end services be clustered into two
        domains, nor that a single server or logical endpoint host all of the
        services which comprise a deployment. Cloud deployed services may be
        used to host part or all of a VWRAP deployment. In such a deployment
        model, services deployed within a cloud may deploy one or more event
        queue endpoints or service and trust endpoints to connect to
        clients.</t>

        <t>Factoring of services is not exclusive to back end services, the
        agent domain, or regions. Deployment models in which regions share
        services, or in which the services comprising a region are deployed on
        a distributed computing fabric should be supported.</t>
      </section>

      <!-- ENd of factored service models -->
    </section>

    <!-- end of Deploytment Pattern (intro) -->

    <section title="Possible Domain definitions">
      <t>Given the above set of deployment patterns several possible ways of
      usefully defining "domain" seem possible.</t>

      <t>One could conclude that the specification should ignore domain as a
      structuring concept and instead focus on describing the services needed
      to deliver the desired results, and allow domain patterns to be entirely
      deployment artifacts.</t>

      <t>One could focus on shared infra structural elements. In such a model
      domains might be defined by sharing a common set of seed caps, or a
      common event queue.</t>

      <t>Security and administration form another possible way of delineating
      domains. It is unclear if this differs in a meaningful way from the
      first choice, as administrative domains tend to be purely artifacts of
      deployers.</t>
    </section>

    <section title="Trust and policy issues">
      <t>Policy, in VWRAP is a deployer chosen set of constraints filtering
      the behavior of a service. A policy may require a user to have presented
      a proof token before using a service. VWRAP does not provide an policy
      expression language, nor does VWRAP mandate specific policies. VWRAP's
      support of policies is limited to providing the mechanisms for services
      to include added content needed in support of policy decisions, and to
      reflect the results of policy decisions to the invokers of services.
      This level of support permits a graceful degradation of service when a
      policy limits the use of a service, and follows the web practice of
      separating mechanism from policy.</t>

      <section title="Policy Requirements">
        <t>Policy decisions may be made by services on the basis of:</t>

        <t><list style="symbols">
            <t>End user identity token</t>

            <t>Requesting Service identity token</t>

            <t>Service specific token (Proof of license, proof of TOS
            signature, etc.)</t>
          </list></t>

        <t>In order to permit policy decisions to be made by services, a
        number of token may presented to the service. These tokens will likely
        be supported as optional additions to the protocols, inserted in slots
        in the protocol messages defined by the services. This permits
        services to optionally require additional inputs in order to satisfy
        their policy requirements in a predictable and principled fashion.</t>
      </section>

      <!-- end of policy requirements -->

      <section title="Grid Access authentication">
        <t>One policy choice grid deployers may make, is to require a login or
        authentications to be made to the grid's authentication service or
        agent domain. Several emerging Internet approaches, such as openId or
        OAuth are possible mechanisms which may be used to satisfy this
        need.</t>
      </section>

      <!-- end of Grid Access Authentication -->

      <section title="Content Management">
        <t>One of the challenges facing a virtual worlds environment is
        determining how digital content should be shared. The VWRAP
        specifications split this problem into mechanisms and policies. The
        following sections focus on describing several approaches and the
        places they impinge on the mechanisms being defined in VWRAP.</t>

        <t>Content Management includes, but is not limited to: <list
            style="symbols">
            <t>Labeling content with meta data to facilitate its
            management</t>

            <t>Identifying policy enforcement points for content
            management</t>

    
          </list></t>

        <section title="content flows through VWs">
          <t><figure>
              <artwork><![CDATA[

           +-------------+            +----------+             +-------+
Insertion->| Asset Store |--"rez" --->|  Region  |--Present--->| client|
           +-------------+            +----------+             +-------+

]]></artwork>
            </figure></t>

          <t>This diagram describes some of the key moments as a digital item
          flows through a virtual world. The item is inserted into and stored
          within the virtual world's services. It is then added to a virtual
          world's region (rezzed), which makes it available for simulation
          and, finally presented to client(s) for viewing.</t>

          <t>Notice that this is notional. How the various services are
          deployed and where trust boundaries might be placed is not
          described. Temporally the insertion, "rez" and presentation are
          separable by arbitrary amounts of time (including none). Insertion
          may be from an external library, a tool chain, or other services. It
          is the moment when the content in question enters into the purview
          of the virtual world.</t>

          <t>The process of adding an item to a virtual region, copies some or
          all of its content. This may be as little as a reference to the
          actual item and an extremely simplified representation for physical
          simulation, or it may be a complete copy of the item in all of its
          particulars. The most common implementation has the entire item
          copied to the region for simulation, and delivery to the client.</t>

          <section title="Content delivery models">
            <t>A range of possible representations can be passed to a region
            for simulation. Full content can be passed to regions, or a subset
            of content, or only references to most content. The VWRAP
            specifications should permit as broad a range of content delivery
            models as possible.</t>

            <t>One end of the spectrum involved passing the full content,
            including the full geometric description, and all the information
            necessary for a client to render the content, the information
            necessary to simulate the object at a physical level, and any
            scripted attachments which automate the behavior of the item.</t>

            <t>The other end of the delivery spectrum involves passing only a
            URI or capability used to access the rendering information and a
            collision mesh,and related data for physical simulation. In such a
            model, the client is responsible for fetching the additional
            information needed to render the item's visual presence from a
            separate service. This fetch can be done under the credentials of
            the end user viewing the material, and divorces the simulation
            from the trust chain needed to manage content. Any automation is
            done on a separate host which the content creator or owner trusts,
            interacting with the object through remoted interfaces.</t>
           <t>
	         Notice that various choices may conceal or reveal information
            about both  content providers and end users. An indirected
            URI fetched by a client exposes itself, of course, but also
           exposes the client's IP address to the service hosting the content. 
           This is common web practice, but may be somewhat suprising to 
            users used to having thier content served only by hosting servers. 
           </t>
          </section>

          <!-- end content delivery models -->

          <section title="multiple representations">
            <t>A second mechanism for managing content delivery is to provide
            multiple versions of an item, and pass different versions,
            depending on the trust level which exists between two services.
            Such a model can be applied at all the steps in the VWRAP
            protocols. An asset server may host multiple versions of an object
            and pass appropriate versions to requesters. A region could be
            sent multiple representations of an item, and pass the appropriate
            one down to clients based on the relationship between the client
            and the region. Alternative content can be used to account for
            degrees of trust as well as richness of a given client. Multiple
            representations can be combined with redirection to permit a low
            fidelity version to be distributed widely, with a reference to a
            higher quality version which can be fetched directly should the
            end user be authorized.</t>
          </section>

          <!-- end multiple representations -->
        </section>
      </section>

      <!-- end Conntent Management -->

      <section title="Content Metadata">
        <t>
While metadata includes many types of data, in this section, we are speakign only about
metadata specifically intended for use in content mnagaement. 
</t>
<t>
Content meta data for content management allows the content creator or Asset
owner to mark the content with additional data describing its intended or legally required
content management rules. While such markup can't in and of itself enforce proper
behavior of services, it provides a well defined place for services which are following
a set of rules. In general, the VWRAP specifications define the affordances needed
to permit such policy enforcement, but leave policy enforcement and policy mechanisms
to deployers. 
</t>
      </section>
    </section>

    <!-- end of trust and policy issues -->

    <!-- Boilterplate resumes here -->

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>This draft primarily defines requirements and use cases, as well as a
      description of policy management approaches. Policy management includes
      control of choices which affect security. To the extent that
      requirements and use cases permit poor security choices to be made when
      deploying services security of a deployed system could be compromised by
      those considerations.</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <!--- Seems unhappy with no Normative ones so comment out ? -->

    <references title="Normative References">
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?>
    </references>

    <references title="Informative References">
      <!-- Here we use entities that we defined at the beginning. -->

      <!-- A reference written by by an organization not a person. -->

      <reference anchor="intro"
                 target="http://tools.ietf.org/html/draft-hamrick-vwrap-intro">
        <front>
          <title>VWRAP: Introduction and Goals</title>

          <author>
            <organization>Linden Lab</organization>
          </author>

          <date year="2010" />
        </front>
      </reference>

      <reference anchor="Type"
                 target="http://tools.ietf.org/id/draft-hamrick-vwrap-type-system-00.txt">
        <front>
          <title>VWRAP : Abstract Type System for the Transmission of Dynamic
          Structured Data</title>

          <author>
            <organization>Linden Lab</organization>
          </author>

          <date year="2010" />
        </front>
      </reference>

      <reference anchor="Foundation"
                 target="http://tools.ietf.org/id/draft-lentczner-vwrap-foundation-00.txt">
        <front>
          <title>Virtual World Region Agent Protocol: Foundation</title>

          <author>
            <organization>Linden Lab</organization>
          </author>

          <date year="2010" />
        </front>
      </reference>

      <reference anchor="cable"
                 target="http://code.google.com/p/cablebeach/wiki/CableBeachCore1_0">
        <front>
          <title>Cable Beach Design Wiki</title>

          <author>
            <organization>Intel</organization>
          </author>

          <date year="2009" />
        </front>
      </reference>
    </references>

    <section anchor="app-additional" title="Additional Stuff">
      <t>This becomes an Appendix.</t>
    </section>

    <!-- Change Log

v00 2006-03-15  EBD   Initial version

v01 2006-04-03  EBD   Moved PI location back to position 1 -
                      v3.1 of XMLmind is better with them at this location.
v02 2007-03-07  AH    removed extraneous nested_list attribute,
                      other minor corrections
v03 2007-03-09  EBD   Added comments on null IANA sections and fixed heading capitalization.
                      Modified comments around figure to reflect non-implementation of
                      figure indent control.  Put in reference using anchor="DOMINATION".
                      Fixed up the date specification comments to reflect current truth.
v04 2007-03-09 AH     Major changes: shortened discussion of PIs,
                      added discussion of rfc include.
v05 2007-03-10 EBD    Added preamble to C program example to tell about ABNF and alternative 
                      images. Removed meta-characters from comments (causes problems).  -->
  </back>
</rfc>
