<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc3261 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3261.xml">
<!ENTITY rfc3680 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3680.xml">
<!ENTITY rfc3840 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3840.xml">
<!ENTITY rfc3880 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3880.xml">
<!ENTITY rfc4235 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4235.xml">
<!ENTITY rfc4458 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4458.xml">
<!ENTITY rfc4825 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4825.xml">
<!ENTITY draft-dnd SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-elwell-bliss-dnd-01.xml">
<!ENTITY draft-config SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-sipping-config-framework-15.xml">
<!ENTITY draft-rest SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-griffin-bliss-rest-00.xml">
<!ENTITY draft-config-reqs SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-zourzouvillys-bliss-ach-config-requirements-00.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc sortrefs="no" ?>
<?rfc colonspace='yes' ?>
<?rfc tocindent='yes' ?>

<rfc category="info" docName="draft-ietf-bliss-ach-analysis-03.txt" ipr="full3978" obsoletes="" updates="">
<front>
  <title abbrev="Automatic Call Handling">An Analysis of Automatic Call Handling Implementation Issues in the Session Initiation Protocol (SIP)</title>
  <author fullname="John Elwell" initials="J." surname="Elwell">
    <organization>Siemens Enterprise Communications</organization>
    <address>
      <phone>+44 115 943 4989</phone>
      <email>john.elwell@siemens.com</email>
    </address>
  </author>
  <date year="2008"></date>
  <area>RAI</area>
  <workgroup>BLISS WG</workgroup>
  <keyword>I-D</keyword>
  <keyword>Internet-Draft</keyword>
  <keyword>SIP</keyword>
  <keyword>DND</keyword>
  <abstract>
    <t>This discusses problems associated with automatic call handling (ACH) when using the Session Initiation Protocol (SIP).</t>
<t>This work is being discussed on the bliss@ietf.org mailing list.</t>
  </abstract>
</front>
<middle>
  <section title="Introduction">
    <t>The Session Initiation Protocol (SIP) <xref target="RFC3261"></xref> establishes calls or sessions for real-time communication between users. When a call is targeted at a called user, often the call is subject to some automatic treatment to determine whether to present the call to the user or take some alternative action such as forwarding to voicemail. Similarly, if some condition arises after presenting a call to the called user but before answer, automatic treatment can lead to some alternative action. Automatic treatment is in accordance with policy determined in advance by the user or the user's organization. This automatic treatment of incoming calls is referred to as automatic call handling (ACH) in this document.</t>
    <t>In order to encourage innovation, ACH is deliberately not specified in RFC 3261 or in RFCs that specify extensions to SIP. However, the flexibility that this affords has sometimes led to problems, where different implementations have approached the issue in different ways, leading to unexpected and often unwanted behavior when those implementations are deployed together. This document analyses the sources of problems with ACH.</t>
    <t>A number of other Standards Development Organisations (SDO) (e.g., 3GPP, ETSI) have specified specific features or "services" that involve specific forms of ACH.</t>
    <t>A survey was conducted prior to IETF70 to get a feeling for what are common practices in this area. Although the number of responses was disappointingly small (see <eref target="http://www.bliss-ietf.org/ach_survey.html">results</eref>), in some cases it did give a clue as to the most common practices. In the remainder of this document, this is referred to as "the survey".</t>
  </section>
  <section title="Examples of ACH">
    <t>ACH can occur prior to or instead of presenting an incoming call to a called user or after presentation but before the called user answers the call. The particular treatment applied to a call is generally dependent on a number of factors, examples of which are as follows:
    <list style="symbols">
      <t>Whether there are other registered contacts that can handle the call (e.g., a registered audio UA for an audio call).</t>
      <t>Whether the user's UA (or UAs) is known to be busy on another call.</t>
      <t>Whether the user has failed to answer the call within a given number of seconds.</t>
      <t>Whether the user is known to be unwilling to receive calls at the present time (a condition often known as Do Not Disturb, DND).</t>
      <t>Whether the user is known not to be available (e.g., on vacation).</t>
      <t>Whether an alternative user (e.g., a colleague, an assistant, another family member) is known to be available.</t>
      <t>Whether the AoR at which the call is targeted represents a single user or a team or group of users.</t>
      <t>Time of day, day of the week, date, etc..</t>
      <t>The type of call (e.g., audio, audio plus video, messaging, etc.).</t>
      <t>The source of the call (e.g., whether the caller is anonymous, whether the caller is blacklisted or whitelisted, which organization the caller belongs to, etc.).</t>
    </list></t>
    <t>The conditions above are detected though local information at the entity performing ACH, by access to presence information or through information received via SIP signalling (e.g., a UA's response to an INVITE request).</t>
    <t>Examples of particular treatment to be applied to a call if appropriate conditions are met are as follows:</t>
    <t><list style="symbols">
      <t>Reject the call, with an appropriate indication to the caller. This indication may or may not reveal the actual condition that led to rejection.</t>
      <t>Forward the call to another UA serving that user (e.g., voicemail, a mobile UA, a UA at another location).</t>
      <t>Forward the call to another user, e.g., the next member of a team, an assistant.</t>
      <t>Modify the nature of the call (e.g., downgrade from audio to messaging).</t>
      <t>Any of the above, but impacting presentation of the call at a given UA, without impacting presentation at other UAs serving the user.</t>
    </list></t>
    <t>A user can specify quite complex sets of rules for ACH. For example, "if presence indicates I am in a meeting, or if my desk phone is busy, or if I do not reply within 15 seconds, forward calls to my assistant between the hours of 09.00 and 17.00, Monday to Friday, but at other times forward to my voicemail, unless the call is from my home or my partner's mobile phone, in which case forward to my mobile phone".</t>
  </section>
  <section title="Known problem areas with ACH">
    <section title="Conflict between proxy and UA">
      <t>A significant problem area with ACH is interactions between proxies (or B2BUAs) that perform ACH and UAs that perform ACH. The domain proxy for a user is configured to treat incoming calls in a certain way under certain conditions. One of the user's UAs is configured to treat incoming calls in a different way under the same or overlapping conditions. If the condition can be detected by the proxy without presenting the call to the UA, the proxy will win and the user may wonder why the action configured at the UA is not being taken. For example, if the proxy detects a DND condition from a presence server and forwards calls to voicemail, any script at the UA to forward private calls to a mobile phone would never execute. This may or may not be what the user (or his/her organization) desires to happen.</t>
    <t>Alternatively, if a condition is detected by a UA before it is detected at the proxy, the action determined by the UA will "win", unless the proxy is somehow able to figure out what has happened and apply its own action. For example, if a phone determines it is busy and returns a 302 response code to forward the call elsewhere or performs "call waiting" action, this might prevent the proxy taking whatever action it would have taken on receipt of a 486 response. This may or may not be what the user (or his/her organization) desires to happen.</t>
    <t>If a UA attempts ACH, it may be possible for proxy to override it, e.g., by taking account of the response code returned or, in the case of a 3xx response code, whether the UA has provided further information concerning the reason for redirection in accordance with RFC 4458 <xref target="RFC4458"></xref>.</t>
    <t>The survey showed that the majority of proxies perform ACH without first presenting the call to the UA, at least for certain types of ACH.</t>
    <t>The survey also showed that the majority of UAs implement some form of UA. This does seem to confirm the potential for conflict between proxy and UA. If, as a result of ACH, the call required redirection, 302 was the response code used in the majority of situations. Only a minority of such implementations used RFC 4458 to provide more information about the reason for redirection.</t>
    </section>
    <section title="Conflict between UAs">
      <t>Where an incoming call is forked to multiple UAs, there is potential for different UAs to be configured to perform different actions under the same or overlapping conditions. With parallel forking (where the INVITE request is sent to each UA at approximately the same time), results can be indeterminate and might depend on which UA responds first. With serial forking, this is likely to be more deterministic, but UAs would need to be configured taking into account the order in which the proxy presents calls to the UAs.</t>
      <t>When a proxy forks a call, it can invoke ACH based on the first UA to respond, can wait for all UAs to respond or behave in some other way (e.g., act immediately on certain response codes). The survey did not show a bias towards any one behavior.</t>
    </section>
    <section title="Obtaining information from UA for ACH at proxy" anchor="section-obtaining-info">
      <t>When ACH is performed at a proxy, it sometimes requires information from the UA, in response to the INVITE request. If this information does not arrive in the form expected by the proxy (e.g, a particular response code), ACH will be adversely impacted. For example, if the proxy is configured to perform forwarding on DND and relies on the DND condition to be indicated in the INVITE response, it depends on the UA indicating the condition in the form expected by the proxy. As there is no standardized means of indicating DND in a response (see <xref target="I-D.elwell-bliss-dnd"></xref>), this can be a problem. Furthermore, there might be more than one flavour of DND (e.g., with/without forwarding to voicemail), requiring different responses.</t>
      <t>The survey showed that 486 (Busy Here) is the response code most commonly expected by proxies for indicating DND, but that accounted for less than half of the responses. Other known response codes in use include 406 (Not Accepetable), 480 (Temporarily Unavailable), 600 (Busy Everywhere) and 603 (Decline).</t>
      <t>The survey also showed that even for the busy condition, proxies expected different response codes. Although a small majority expected 486 (Busy Here), other expectations included 480 (Temporarily Unavailable) and 600 (Busy Everywhere).</t>
    <t>The survey did not yield significant information concerning response codes issued by UAs.</t>
    </section>
    <section title="Informing the calling UA">
      <t>A related problem is informing the calling UA, and hence the caller, what has happened. In the case where ACH results in rejection of the call, this might be just a case of sending back an appropriate response code. Considerations are similar to those for a proxy in <xref target="section-obtaining-info"></xref>, except that privacy might require the proxy to send a different response code rather than the one reflecting the condition encountered. For example, the user might not wish the caller to know about his absence.</t>
      <t>The choice of response code might not be an interoperability issue if the calling UA is relatively dumb, but might be an issue if there is an application that takes the response code into account. Where there is forking proxy between the entity performing ACH and the calling UA, information may be lost because of the Heterogeneous Error Response Forking Problem (HERFP).</t>
      <t>Where ACH results in forwarding (to a different AoR or a different contact for the same AoR), this can be achieved by retargeting or redirection. In the case of retargeting, the calling UA receives no information, apart from a final response and perhaps identity from the retargeted-to user. On the other hand, if redirection is used, the calling UA will receive a 3xx response, the contact URI in which could indicate the source of the redirection and the reason, in accordance with <xref target="RFC4458"></xref>.</t>
    </section>
    <section title="Scope of conditions">
      <t>When an INVITE request is forked to multiple UAs, the user may or may not require a condition at one UA to be considered as applying to other branches. This includes branches already active (through parallel forking) or branches yet to be activated (through serial forking). This can impact when to invoke ACH at the proxy, i.e., whether to perform ACH when one UA reports an appropriate condition (cancelling other active branches if necessary) or to wait for the outcome on other branches.</t>
      <t>Although to a large extent this issue can be handled by appropriate scripting at the proxy, an important consideration is how to treat the 6xx class of responses. For example, if a UA issues a 600 Busy Everywhere response (as opposed to a 486 Busy response), what is the scope of "everywhere"? A simple interpretation is that it literally means "everywhere", and all other branches should be abandoned and the 6xx response passed back to the caller if no other ACH is prescribed for this condition. However, this interpretation is not always reasonable. If a user has several phones, it might be reasonable to interpret a 600 response from one phone as meaning that all other phones are busy, but if the user also has voicemail it is unlikely that that too should be treated as busy. Also, if ACH requires forwarding to a different user (different AoR) on busy, it might be expected that this would take place even on receipt of a 600 response from a UA.</t>
      <t>Another example is the 603 Decline response code. This is often is intended to be applied everywhere.</t>
      <t>There is also a question of whether a proxy should trust a UA to decide that all other branches need to be abandoned, particularly in applications like call centres, where the different branches might be different agents, rather than leading to different devices belonging to the same user. It might wise to consider this a policy matter.</t>
      <t>The survey gave only a very small number of answers on the issue of handling 6xx responses, with no conclusions to be drawn other than that forwarding to voice mail is sometimes allowed following a 6xx response.</t>
    </section>
    <section title="Configuring the proxy" anchor="proxy-config">
      <t>If ACH is performed at the proxy, the user needs a means to configure the proxy with the required rules. There is no SIP means of doing this, but a number of mechanisms can perform the basis for this task, e.g.:
      <list style="symbols">
        <t>Via a web page.</t>
        <t>By uploading a CPL <xref target="RFC3880"></xref> script.</t>
        <t>Via a web services interface based on SOAP.</t>
        <t>Via Computer Supported Telecommunication Applications (CSTA) <xref target="CSTA"></xref>.</t>
        <t>Via XCAP <xref target="RFC4825"/></t>
        <t>Using standard HTTP primitives, a technique commonly known as REpresentational State Transfer (REST).</t>
      </list></t>
      <t>The survey showed that web pages and SOAP-based web services were the most common mechanisms supported by proxies, but the sample was very small. The majority of UA implementations provided a web user interface.</t>
      <t>Without a single standardized way of configuring a proxy, there is a danger that the UA and proxy might not support a common method, requiring the user to employ other means (e.g., using a different device, contacting a support centre). Furthermore, it might lead the user to configuring ACH at the UA when in practice ACH at the proxy would serve the user's needs better.</t>
      <t>Related to this is the means by which a UA (and hence the user) can discover how the proxy is configured. Most of the mechanisms listed above are applicable, and also a SIP SUBSCRIBE/NOTIFY mechanism could be used. The survey indicated that only a minority of proxies provided support in this respect.</t>
    </section>
  </section>
  <section title="Discussion">
    <section title="Proxy versus UA">
      <t>The end-to-end principle of SIP would suggest that ACH at the UA is more appropriate than ACH at the proxy. However, certain considerations make ACH at the proxy more viable or even essential.</t>
      <t>ACH in the event that there is no registered contact obviously can only be performed by the proxy.</t>
      <t>A proxy is more easily able to take account of the state of other UAs, e.g., by waiting for all branches of a forked call to respond before invoking ACH. Although a UA can use techniques such as the registration event package <xref target="RFC3680"></xref> in combination with the dialog event package <xref target="RFC4235"></xref> to determine the state of other UAs, this is complex, may not yield the information required, and may suffer from timing-related inconsistencies.</t>
      <t>A proxy needs to be configured once and can perform ACH independently of the number of UAs involved. Obtaining consistent behaviour using ACH at the UA may involve configuring multiple UAs and keeping their configurations aligned. The UA configuration framework <xref target="I-D.ietf-sipping-config-framework"></xref> may be a suitable mechanism for this and would require a means for the user to configure the profile delivery server. However, there can be no guarantee that all UAs will download a revised configuration at the same time, so it can lead to a time window when inconsistent behaviour may occur.</t>
      <t>With these considerations in mind, a proxy will often turn out to be a more suitable place for performing ACH.</t>
      <t>On the other hand, there may be situations in which UA-specific ACH may be required, and it may not be feasible to configure the proxy to provide this level of granularity. For example, it may be required to take one action if the desk UA is busy but a different action if the mobile UA is busy. Convincing use cases for this are hard to find, but it cannot be ruled out. A possible approach here is to use proxy-based ACH as the default handling for all UAs and UA-based ACH for any UA-specific exceptions.</t>
    </section>
    <section title="Avoiding inconsistent configurations">
      <t>Given that there is frequently a need to perform ACH at the proxy, problems can be avoided by turning off ACH at all UAs. There may be exceptions to this, e.g., where there is need for a specific UA to perform actions different from default actions carried out by the proxy, or where there is a requirement for behavior not supported by the proxy. Where ACH does need to be configured at one or more UAs, care must be taken to avoid unintentional conflicts. Use of the SIP configuration framework can help to ensure consistent handling at all UAs. One consideration during the work on profiles for use with the SIP configuration framework might be the downloading of policy relating to ACH, such that ACH could be suppressed in order to ensure that proxy-based ACH operates correctly.</t>
    </section>
    <section title="Enterprise and carrier environments">
      <t>Considerations for ACH will often differ between enterprise and carrier environments. In enterprise environments, enterprise policy will often govern what a user can and cannot do. This does not necessarily mean that ACH will be done at a proxy, because the enterprise will probably manage UAs too and ensure that they behave in line with policy, although proxy-based ACH will often be easier to accomplish.</t>
      <t>In a carrier environment, everything can be expected to be under the control of the user. Proxy-based ACH is still relevant, however, particularly for mobile devices that are often out of reach or turned off.</t>
      <t>Handling such as team calls (where any team member can be selected according to availability) is perhaps more likely in enterprise, although in a residential environment it could be used for finding any family member.</t>
      <t>Despite these different considerations, requirements are similar to a large extent and the same solution should be sought for both environments.</t>
    </section>
  </section>
  <section title="Potential measures that could be taken">
    <t>In this section we explore potential measures that can be taken to some of the problems identified above</t>
    <section title="Conflict between proxy and UA" anchor="section-measures-proxy-ua">
      <t>This appears to be an important problem to solve, in order to have proxies and UAs from mixed vendors.</t>
      <t>One approach is to specify that particular features that must or must not be implemented in a proxy and particular features that must or must not be implemented in UA. This is likely to fail for a number of reasons:
        <list style="symbols">
          <t>There are far too many possible features, and enumerating and standardizing individual features is contrary to the philosophy of SIP and likely to inhibit innovation.</t>
          <t>For a given feature, there will be some deployments where it makes sense to do it at the proxy and other deployments where it makes sense to do it at the UA. It will often be impracticable to choose one.</t>
          <t>Proxy vendors and UA vendors will want to provide as many features as possible on their products and are likely to ignore any recommendation not to implement a particular feature.</t>
        </list></t>
      <t>Stipulating that ACH as a whole must always be done at the proxy or must always be done at the UA is clearly out of the question, because each has some advantages, depending on circumstances, and also because vendors of one or the other will not be prepared to give up producing features that play an important part in differentiating their products.</t>
      <t>Therefore it has to be accepted that ACH will be implemented on proxies and UAs, with feature overlap between the two. The challenge then is to ensure that, when deployed, the two can co-exist in a sensible way.</t>
      <t>It should be possible to control whether a proxy defers to a UA or vice versa. For a proxy to defer to a UA, it requires the proxy to deliver an INVITE request to a UA before taking any ACH action. Depending on the response of the UA, the proxy may then perform its own ACH action. For a UA to defer to a proxy, it should report any conditions back to the proxy (e.g., by means of a suitable response to the INVITE request) rather than taking unilateral action such as redirecting or placing the call in a waiting state. In other words, it should be possible to turn off ACH at a UA.</t>
      <t>There are several ways to achieve this control:
        <list style="symbols">
           <t>Configure the UA and proxy independently. The SIP configuration framework <xref target="I-D.ietf-sipping-config-framework"></xref> is one possible means of configuring the UA.</t>
           <t>Configure the UA (e.g., by means of the SIP configuration framework <xref target="I-D.ietf-sipping-config-framework"></xref>) and use SIP to instruct the proxy (e.g., by means of an indicator in REGISTER requests).</t>
           <t>Configure the proxy and use SIP to instruct the UA (e.g., by means of an indicator in inbound INVITE requests or in the 200 response to a REGISTER request).</t>
        </list>
      </t>
      <t>The configuration approach is the simplest and does not require any enhancements to the SIP protocol. In general, positive action has to be taken to configure any sort of ACH, i.e., ACH is turned off by default. Therefore by default there should not be a problem, because ACH will be turned off in both places. If the user is in control of ACH at the UA and ACH at the proxy, it is the user's responsibility not to configure conflicting behaviours.</t>
      <t>The situation is slightly different where there is more than one authority involved, e.g., if the user is able to configure the UA but some other authority is responsible for configuring the proxy. This might arise in an enterprise environment, where the enterprise administration might configure the proxy. In this case, the UA user could potentially configure the UA in a conflicting way. In such cases it would be useful if the administration could prevent the user configuring ACH at the UA, i.e., place ACH configuration under administration control. Many UAs aimed at the enterprise market have this form of control already. In future there might be a standardised way of doing this based on  the SIP configuration framework <xref target="I-D.ietf-sipping-config-framework"></xref> . There does not seem to be a need for BLISS to specify anything further to address this issue at present.</t>
    </section>
    <section title="Conflict between UAs">
      <t>This can really only be addressed by configuration. The SIP configuration framework can help here. In fact, that would normally configure all UAs having the same AoR with the same information. Configuration outside this framework (e.g., local actions at the device) might introduce differences (intentional or otherwise). There seems little action that BLISS can take to address this issue.</t>
    </section>
    <section title="Obtaining information from UA for ACH at proxy" anchor="section-info-from-ua">
      <t>There seems to be a case for more precisely defining or at least recommending information given to the proxy when rejecting an inbound call, in order to assist the proxy in providing the most relevant ACH, if any. Ideally this information needs to be given as a SIP response code, although potentially a response code could be supplemented by a header field. In choosing a particular response code, two factors need to be taken into account:
        <list style="symbols">
          <t>the reason for rejection;</t>
          <t>the desired scope of rejection.</t>
        </list>
      </t>
      <section title="Reason for rejection">
        <t>The most relevant reasons for rejection (from an ACH perspective) are as follows:
          <list style="symbols">
            <t>Busy. UA resources are busy as a result of another call and further calls cannot be accepted until resources become free. The condition may also be visible via a presence system.</t>
            <t>Explicit rejection. The user has indicated an unwillingness to accept the call at the present time. The user may have indicated this in advance, so that any incoming calls (or those fulfilling certain conditions) would be rejected in this way (a feature often known as "do not disturb"). The user may impose such a condition during a meeting or while working on a critical task. The user may indicate in advance a time at which she expects the condition to be lifted. The condition may also be visible via a presence system. Alternatively the user may indicate an unwillingness to accept a particular call in response to being alerted.</t>
            <t>Silent rejection. The user has responded to this call by rejecting it, but does not wish the reason to be revealed to the caller. A user would use this facility when not currently in a position to answer a particular call or when she feels that it would be better handled elsewhere (e.g., by voicemail, by an assistant).</t>
          </list>
        </t>
        <t>Note that silent rejection could also be achieved by returning a 180 response to the INVITE request, and then waiting (without alerting the user) until the call is cleared or times out. In the meantime, the proxy would be unaware of what is happening and would be unable to take other action, such as cancelling other branches. On the other hand, indicating silent rejection relies on the proxy to take alternative ACH action (e.g., waiting for a certain time before forwarding to voice mail or reporting to the caller that the call has timed out), rather than revealing silent rejection to the caller. Therefore silent rejection is suitable for use only when it is known that the proxy will take appropriate action.</t>
      </section>
      <section title="Desired scope of rejection">
        <t>When rejecting a call the user (or the UA on the user's behalf) may desire the rejection to have one of the following scopes:
          <list style="symbols">
            <t>Local. Rejection impacts only the branch concerned or any branches to the user's other devices. Forwarding to voicemail or to an assistant, for example, is not prevented and may be instigated by the proxy as a result of receiving a local rejection.</t>
            <t>Global. Rejection impacts all branches, including voicemail.</t>
          </list>
        </t>
        <t>It is a matter for the proxy to determine what ACH to perform for a local rejection or a global rejection (although this may be based on per-user settings, which the user may have some control over, e.g., via a web page, see <xref target="section-measures-proxy-config"/>). For local rejection the proxy might, for example, cancel other branches (to the user's other devices) and forward immediately to voicemail or to an assistant. On the other hand it may leave other branches unaffected. For global rejection the proxy might reject the call outright, cancelling all other branches, although policy might require a less severe action to be taken. For example, in a call centre there might be a requirement that all calls be answered.</t>
      </section>
      <section title="Response codes">
        <t>4xx response codes are appropriate for local rejection and 6xx response codes are appropriate for global rejection.</t>
        <t>The following response codes are recommended for local rejection:
          <list style="symbols">
            <t>Busy/local. 486 should be used. As indicated in RFC 3261, this can be accompanied by a Retry-After header field to indicate when the user expects to be available again.</t>
            <t>Explicit rejection/local. 480 could be used. As indicated in RFC 3261, this can be accompanied by a Retry-After header field to indicate when the user expects to be available again. OPEN ISSUE. There is some concern about the overloaded use of this response code. For example, if a domain proxy receives a 480, is it from the UAS (indicating DND) or is it from an edge proxy (indicating temporary lack of resources.</t>
            <t>Silent rejection/local. 487 could be used. This is the same response code that would be used if a proxy were to issue a CANCEL request.</t>
          </list>
        </t>
        <t>The following response codes are recommended for global rejection:
          <list style="symbols">
            <t>Busy/global. 600 should be used. As indicated in RFC 3261, this can be accompanied by a Retry-After header field to indicate when the user expects to be available again.</t>
            <t>Explicit rejection/global. 603 should be used. As indicated in RFC 3261, this can be accompanied by a Retry-After header field to indicate when the user expects to be available again.</t>
            <t>Silent rejection/global. No code recommended.</t>
          </list>
        </t>
        <t> No code is recommended at present for silent rejection/global. It is not clear what is the use case for this. One possible use case, however, is for dealing with SPIT, where the user can tell (e.g., from caller ID) that the call is unwanted and does not wish the call to go to voicemail even. In this case, other issues arise, such as indicating the SPIT status to an entity responsible for handling SPIT. This should be pursued as part of anti-SPIT measures and is outside the scope of BLISS.</t>
        <t>OPEN ISSUE. Do we need to write normative statements regarding response code usage?</t>
      </section>
    </section>
    <section title="Informing the calling UA">
      <t>Whilst this might be interesting, it is unlikely to impact interoperability and is not seen as a priority issue for BLISS.</t>
    </section>
    <section title="Scope of conditions">
      <t>There seems to be a case for specifying the intended scope of 6xx response codes. Ideally this should be a single specification for the entire class, although we may find that individual members of the class require special consideration. Probably a 6xx response code should apply only to other contacts registered for that same AoR, and should probably also exclude special contacts such as voice mail systems. At present a <xref target="RFC3840"/> defines a feature tag to indicate that a UA is an automaton, and another to indicate that it supports audio. Consideration should be given as to whether these are sufficient to determine that a UA is a voicemail server.</t>
      <t>In view of existing practice, where 6xx response codes are generally meant to apply to all branches and to override forwarding, it is seems safest to stick with this meaning. If this is not the desired behaviour when a particular condition arises at the UA (e.g., if forwarding to voicemail is desired), a 4xx response code should be used instead. The proposals in <xref target="section-info-from-ua"/> take this into account.</t>
    </section>
    <section title="Configuring the proxy" anchor="section-measures-proxy-config">
      <t>General methods for configuring proxies (including synchronization of multiple proxies serving a domain) are considered outside the scope of BLISS work.</t>
      <t>There may be justification for studying methods by which a user or UA can discover and possibly change the configuration of the proxy as far as ACH is concerned. Often a user can do this by means such as web pages. Such methods are not suitable for use when the UA needs to play a functional role. For example, many UAs have a button that can be pressed to set forwarding and an associated indicator to show whether forwarding is currently active. Such UAs cannot easily extract information from a web page to determine whether forwarding is active in order to adjust the indicator. Similarly, such UAs cannot know what to send to the web server to change settings.</t>
      <t>Although several methods are used in practice, some of these being mentioned in <xref target="proxy-config"/>, the one that is perhaps simplest and in line with industry trends is HTTP using a REST architecture. With this approach, different URIs represent different resources, and standard HTTP methods such as GET, PUT, POST and DELETE are used to manipulate those resources. More information is available in <xref target="I-D.griffin-bliss-rest"/></t>
      <t>An example of a request to set forwarding would be:
        <list>
          <t>PUT http://server.example.com/joe/profile/callforwarding?value=true</t>
        </list>
      </t>
      <t>The resource is the call forwarding setting within the profile for user joe at server.example.com. The corresponding request to retrieve the setting would be:
        <list>
          <t>GET http://server.example.com/joe/profile/callforwarding</t>
        </list>
      </t>
      <t>The ability for the UA to be able to create and delete this resource probably does not make sense, so POST and DELETE methods would not be used.</t>
      <t>OPEN ISSUE. What exactly do we need to standardize here? Clearly some elements of the resource identifier need to be configurable. The host name "server.example.com" probably needs to be configurable, and element "joe" or "joe/profile" could either be configurable (e.g., by making "server.example.com/joe/profile" configurable") or by standardizing a method of deriving it from the user part of the AoR. The final element "callforwarding" (and equivalent for other ACH features) probably needs to be standardised.</t>
      <t>OPEN ISSUE. The examples above show managing the true/false value of call forwarding. This does not provide a means of managing the URI to forward to (it assumes that this is already set). Also it does not provide a means of managing conditions under which forwarding is to take place (e.g., based on state of user, time of day, caller ID). These are all different resources, requiring different or additional elements at the end of the identifier. How far should we go in standardizing these resources? Presumably there should be an extensibility mechanism to allow vendors to define their own elements.</t>
      <t>Under some circumstances a setting can change other than by action of the UA, and therefore if the UA relies on knowing the value of a setting (e.g., to provide a continuous indication to the user), the UA needs to be informed if the setting changes. One example is where there are two or more UAs registered as contacts for an AoR. If one of the UAs changes a setting, the other UAs might wish to know. Another example is where a user or administrator changes a setting from a web page. For such situations it would be useful to have an event package whereby the UA can subscribe to receive notifications of changes to ACH settings. The notification would only need to indicate that a change has occurred, and the UA could then issue GET requests to pull down the new settings.</t>
      <t>OPEN ISSUE. Is an event package for this needed, or are there alternative solutions? Is there any existing event package that could be re-used, e.g., the configuration framework?</t>
      <t>OPEN ISSUE. Standardising a RESTful or other solution to configuring the proxy, along with some support for notifications, requires further work, starting with identification of requirements, an initial attempt at which is given in <xref target="I-D.zourzouvillys-bliss-ach-config-requirements"/></t>
    </section>
  </section>
  <section title="Conclusions">
    <t>TODO: populate this section</t>
  </section>
  <section title="IANA considerations">
    <t>None.</t>
  </section>
  <section title="Security considerations" anchor="section-security">
    <t>This document just discusses interoperability issues relating to ACH. It does not define any new protocol or practices and therefore does not introduce any security issues, other than the possible user desire not to disclose ACH actions to callers.</t>
  </section>
  <section title="Acknowledgements">
    <t>The author would like to acknowledge the assistance of Francois Audet, Martin Dolly, Jason Fischl, Jonathan Rosenberg, Shida Schubert, Srivatsa Srinivasan and Theo Zourzouvillys in writing this draft, and also input on specific implementations from various members of the BLISS WG.</t>
  </section>
</middle>

<back>
  <references title="Informative References">
    &rfc3261;
    &rfc3680;
    &rfc3840;
    &rfc3880;
    &rfc4235;
    &rfc4458;
    &rfc4825;
    &draft-dnd;
    &draft-config;
    &draft-rest;
    &draft-config-reqs;
    <reference anchor="CSTA">
      <front>
        <title>International Standard ISO/IEC 18051 "Information Technology - Telecommunications and information exchange between systems - Services for Computer Supported Telecommunications Applications (CSTA) Phase III"</title>
        <author>
          <organization></organization>
        </author>
      </front>
    </reference>
  </references>
</back>
</rfc>
