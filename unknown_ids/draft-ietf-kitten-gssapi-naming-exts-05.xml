<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc tocindent="no" ?>
<?rfc autobreaks="no" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>
<rfc category="std" docName="draft-ietf-kitten-gssapi-naming-exts-05.txt"
     ipr="trust200902">
  <front>
    <title abbrev="GSS-API Naming Extensions">GSS-API Naming
    Extensions</title>

    <author fullname="Nicolas      Williams" initials="N." surname="Williams">
      <organization abbrev="Sun">Sun Microsystems</organization>

      <address>
        <postal>
          <street>5300 Riata Trace Ct</street>

          <city>Austin</city>

          <region>TX</region>

          <code>78727</code>

          <country>US</country>
        </postal>

        <email>Nicolas.Williams@sun.com</email>
      </address>
    </author>

    <author fullname="Leif Johansson" initials="L." surname="Johansson">
      <organization abbrev="SUNET">Swedish University Network</organization>

      <address>
        <postal>
          <street>Thulegatan 11</street>

          <city>Stockholm</city>

          <country>Sweden</country>
        </postal>

        <email>leifj@sunet.se</email>

        <uri>http://www.sunet.se</uri>
      </address>
    </author>

    <date day="30" month="July" year="2009" />

    <area>Security</area>

    <workgroup>KITTEN WORKING GROUP</workgroup>

    <keyword>Internet-Draft</keyword>

    <abstract>
      <t>The Generic Security Services API (GSS-API) provides a simple naming
      architecture that supports name-based authorization. This document
      introduces new APIs that extend the GSS-API naming model to support name
      attribute transfer between GSS-API peers.</t>
    </abstract>
  </front>

  <middle>
    <section title="Conventions used in this document">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref> .</t>
    </section>

    <section title="Introduction">
      <t>As described in <xref target="I-D.GSS-NAMING"></xref> the GSS-API's
      naming architecture suffers from certain limitations. This document
      proposes concrete GSS-API extensions as outlined in <xref
      target="I-D.GSS-NAMING"></xref>.</t>

      <t>A number of extensions to the GSS-API <xref target="RFC2743"></xref>
      and its C Bindings <xref target="RFC2744"></xref> are described herein.
      The goal is to make information modeled as "name attributes" available
      to applications. Such information MAY for instance be used by
      applications to make authorization-decisions. For example, Kerberos V
      authorization data elements, both, in their raw forms as well as mapped
      to more useful value types, can be made available to GSS-API
      applications through these interfaces.</t>

      <t>The model is that GSS names have attributes. The attributes of a name
      may be authenticated (eg an X509 attribute certificate or signed SAML
      attribute assertion), or may have been set on a GSS name for the purpose
      of locally "asserting" the attribute during credential acquisition or
      security context exchange. Name attributes' values are network
      representations thereof (e.g., the actual value octets of the contents
      of an X.509 certificate extension, for example) and are intended to be
      useful for constructing portable access control facilities. Applications
      may often require language- or platform-specific data types, rather than
      network representations of name attributes, so a function is provided to
      obtain objects of such types associated with names and name
      attributes.</t>
    </section>

    <section title="Name Attribute Authenticity">
      <t>An attribute is 'authenticated' iff there is a secure association
      between the attribute (and its values) and the trusted source of the
      peer credential. Examples of authenticated attributes are (any part of)
      the signed portion of an X.509 certificate or AD-KDCIssued
      authorization-data elements in Kerberos V Tickets provided of course
      that the authenticity of the respective security associations (eg
      signatures) have been verified.</t>

      <t>Note that the fact that an attribute is authenticated does not imply
      anything about the semantics of the attribute nor that the trusted
      credential source authorized any one semantic of the attribute. Such
      interpretations MAY be the result of applying local policy to the
      attribute.</t>

      <t>An un-authentciated attribute is called <spanx style="emph">asserted</spanx>
      in what follows.This is not to be confused with other uses of the word
      asserted or assertion eg "SAML attribute assertion", the attributes of
      which may be authenticated in the sense of this document if the SAML
      attribute assertion was signed by a key trusted by the peer.</t>
    </section>

    <section title="Name Attributes/Values as ACL Subjects">
      <t>Some name attributes (e.g., numeric user or group identifiers) may be
      useful as subjects of access control list (ACL) entries, some may not
      (e.g., time of day login restrictions). The GSS_Inquire_name_attribute()
      function indicates this.</t>

      <t>To facilitate the development of portable applications that make use
      of name attributes to construct and evaluate portable ACLs the GSS-API
      makes name attribute values available in canonical network encodings
      thereof.</t>

      <t>To facilitate the development of platform- or language-specific
      applications that need access to native types of representations of name
      attributes an optional facility is provided, GSS_Map_name_to_any().</t>
    </section>

    <section title="Attribute Name Syntax">
      <t>Attribute names are represented as opaque STRING elements in the API
      described below. These attribute names have syntax and semantics that
      are understood by the application and by the lower-layer implementations
      (some of which are described below). In order to present a consistent
      namespace to the application and at the same time impose as few
      transformation requirements as possible to lower-layer implementations
      attribute names SHOULD be URIs.</t>

      <t>Technologies used in lower-layer protocols may of course use
      attribute naming that are not based on URIs. Notably X.509 certificates
      will use OIDs for most naming purposes. In this case OIDs MUST be mapped
      into URIs.</t>

      <t>When mapping entities named by OIDs into this API <xref
      target="RFC3001"></xref> MUST be used. For example if the OID 1.2.3
      denotes an Extended Key Usage, the corresponding GSS-API attribute MUST
      be represented as urn:oid:1.2.3.</t>
    </section>

    <section title="Mapping Mechanism Facilities to Name Attributes">
      <t>In this section we describe two important examples of lower-layer
      implementations of this API. These examples are not mandatory to
      implement and are only provided for reference. The use of <xref
      target="RFC2119"></xref>-terms in this section is limited to those
      implementations of the GSS-API naming extensions that choose to
      implement these lower-layer technologies.</t>

      <t>Kerberos V <xref target="RFC4120"></xref> and the Simple Public-Key
      GSS-API Mechanism, SPKM described in <xref target="RFC2025"></xref>,
      both support the concept and encoding of containers of
      "authorization-data" as described in <xref target="RFC4120"></xref>.</t>

      <t>PKIX <xref target="RFC5280"></xref> supports a number of
      attribute-like features, like Extended Key Usage values (EKUs) and
      certificate extensions.</t>

      <section title="Kerberos V and SPKM Authorization-Data">
        <t>Authorization-data non-container elements asserted in Kerberos V
        AP-REQ Authenticators MUST be mapped into <spanx style="strong">asserted</spanx>
        GSS-API name attributes.</t>

        <t>Authorization-data included in Kerberos V Tickets that is not
        contained in AD-KDCIssued (with valid signature) MUST be mapped into
        <spanx style="strong">asserted</spanx> GSS-API name attributes.
        Conversely, authorization-data elements in Kerberos V Tickets
        contained by AD-KDCIssued MUST be mapped into <spanx style="strong">authenticated</spanx>
        GSS-API name attributes.</t>

        <t>The URIs for authorization-data elements MUST be the
        authorization-data elements 'ad-type' prefixed by the IANA-allocated
        URN prefix (&lt;TBD&gt;)</t>
      </section>

      <!--
		    <section title="Kerberos V Cross-Realm Transit Paths">
			<t>[Add text on how to represent/encode/interpret krb5
			    realm transit paths as name attribute values.  And
			    text on PKINIT too...  Basically Ticket's
			    'transited' field should be exposed as an
			    authenticated name attribute, with some uncompressed
			    encoding, possibly encompassing certificate
			    validation paths of client certs used for PKINIT,
			    with criticality determined by the presence of the
			    transit-policy-checked flag.]</t>
		    </section>
		    -->

      <section title="PKIX">
        <section title="Standard PKIX Certificate Extensions">
          <t>PKI certificate extensions MAY/SHOULD/MUST (see comment above) be
          represented as <spanx style="strong">authenticated</spanx> GSS-API
          name attributes named using the <spanx style="emph">same</spanx>.</t>

          <t>SubjectAltNames and EKUs, specifically, MUST be represented as
          <spanx style="strong">authenticated</spanx> GSS-API name attributes;
          see below. Certificate extensions MUST be represented as GSS-API
          name attributes named using the OIDs used for the extensions
          (represented as URNs)</t>

          <t>Extended Key Usage extensions, specifically, MUST be mapped as
          described above, except that GSS-API name attributes for EKUs MUST
          have NULL values (i.e., zero-length OCTET STRINGs).</t>

          <t>PKI certificate key usages (KUs, but not EKUs), MUST NOT be
          represented as GSS-API name attributes.</t>

          <t>PKI certificate subjectAltNames MUST be mapped as <spanx
          style="strong">authenticated</spanx>.</t>
        </section>

        <section title="Other PKIX Certificate Extensions and Attributes">
          <t>Any X.509 certificate extension not covered above SHOULD be
          represented as GSS-AOI name attributes with the OID of the X.509
          extension and with OCTET STRING values containing the encoded value
          of the extension.</t>
        </section>
      </section>

      <section title="SAML attribute assertions">
        <t>Attributes contained in SAML attribute assertions are mapped to
        GSS-API name attributes with the same URIs as used in the SAML
        attribute names (subject to representing OIDs to URIs).</t>

        <t>SAML attributes found in SAML attribute assertions MUST NOT be
        mapped as authenticated unless the SAML attribute assertion was signed
        by a key trusted by the peer or otherwise protected from unauthorized
        modification.</t>
      </section>

      <!--
		    <section title="PKIX Certificate CA Paths and Trust Anchors">
			<t>[Add text on how to represent/encode/interpret PKI
			    certificate validation CA paths as name attribute
			    values, much as with Kerberos V transited paths.]</t>
		    </section> -->
    </section>

    <section title="API">
      <section title="GSS_Display_name_ext()">
        <t>Inputs: <vspace blankLines="1" /> <list style="symbols">
            <t>name NAME,</t>

            <t>display_as_name_type OBJECT IDENTIFIER</t>
          </list></t>

        <t>Outputs: <vspace blankLines="1" /> <list style="symbols">
            <t>major_status INTEGER,</t>

            <t>minor_status INTEGER,</t>

            <t>display_name STRING</t>
          </list></t>

        <t>Return major_status codes: <list style="symbols">
            <t>GSS_S_COMPLETE indicates no error.</t>

            <t>GSS_S_UNAVAILABLE indicates that the given name could not be
            displayed using the syntax of the given name type.</t>

            <t>GSS_S_FAILURE indicates a general error.</t>
          </list></t>

        <t>This function displays a given name using the given name syntax, if
        possible. This operation may require mapping MNs to generic name
        syntaxes or generic name syntaxes to mechanism-specific name syntaxes;
        such mappings may not always be feasible and MAY be inexact or lossy,
        therefore this function may fail.</t>

        <section title="C-Bindings">
          <figure>
            <artwork><![CDATA[
OM_uint32 GSS_Display_name_ext(
  OM_uint32                     *minor_status,
  gss_name_t                    name,
  gss_OID                       display_as_name_type,
  gss_buffer_t                  display_name
);
		    			]]></artwork>
          </figure>
        </section>
      </section>

      <section title="GSS_Inquire_name()">
        <t>Inputs: <vspace blankLines="1" /> <list style="symbols">
            <t>name NAME</t>
          </list></t>

        <t>Outputs: <vspace blankLines="1" /> <list style="symbols">
            <t>major_status INTEGER,</t>

            <t>minor_status INTEGER,</t>

            <t>name_is_MN BOOLEAN,</t>

            <t>mn_mech OBJECT IDENTIFIER,</t>

            <t>asserted_attrs SET OF STRING,</t>

            <t>authenticated_attrs SET OF STRING,</t>

            <t>all_attrs SET OF STRING,</t>

            <!-- <t>[NOTE: Perhaps this function should also output
					an indicator as to the provenance of the name,
					of which, in the GSS-API, there are three:
					imported, inquired from a credential, and a
					peer's name inquired from a security
					context.]</t> -->
          </list></t>

        <t>Return major_status codes: <list style="symbols">
            <t>GSS_S_COMPLETE indicates no error.</t>

            <t>GSS_S_FAILURE indicates a general error.</t>
          </list></t>

        <t>This function outputs the sets (represented as a NULL terminated
        array of gss_buffer_t) of attributes of a name, that are authenticated
        or asserted. It also indicates if a given NAME is an MN or not and, if
        it is, what mechanism it's an MN of.</t>

        <section title="C-Bindings">
          <figure>
            <artwork><![CDATA[
OM_uint32 gss_inquire_name(
  OM_uint32                     *minor_status,
  gss_name_t                    name,
  int                           name_is_MN,
  gss_OID                       *MN_mech,
  gss_buffer_t                  *authenticated,
  gss_buffer_t                  *asserted,
  gss_buffer_t                  *all_attrs
);
			    		]]></artwork>
          </figure>
        </section>
      </section>

      <section title="GSS_Get_name_attribute()">
        <t>Inputs: <vspace blankLines="1" /> <list style="symbols">
            <t>name NAME,</t>

            <t>attr STRING</t>
          </list></t>

        <t>Outputs: <vspace blankLines="1" /> <list style="symbols">
            <t>major_status INTEGER,</t>

            <t>minor_status INTEGER,</t>

            <t>authenticated BOOLEAN, -- TRUE iff authenticated by the trusted
            peer credential source.</t>

            <t>complete BOOLEAN -- TRUE iff this represents a complete set of
            values for the name.</t>

            <t>values SET OF OCTET STRING,</t>

            <t>display_values SET OF STRING</t>
          </list></t>

        <t>Return major_status codes: <list style="symbols">
            <t>GSS_S_COMPLETE indicates no error.</t>

            <t>GSS_S_UNAVAILABLE indicates that the given attribute OID is not
            known or set.</t>

            <t>GSS_S_FAILURE indicates a general error.</t>
          </list></t>

        <t>This function outputs the value(s) associated with a given GSS name
        object for a given name attribute.</t>

        <t>The complete flag denotes that (if TRUE) the set of values
        represents a complete set of values for this name. The peer being an
        authoritative source of information for this attribute is a sufficient
        condition for the complete flag to be set by the peer.</t>

        <t>In the federated case when several peers may hold some of the
        attributes about a name this flag may be highly dangerous and SHOULD
        NOT be used.</t>

        <t>NOTE: This function relies on the GSS-API notion of "SET OF"
        allowing for order preservation; this has been discussed on the KITTEN
        WG mailing list and the consensus seems to be that, indeed, that was
        always the intention. It should be noted however that the order
        presented does not always reflect an underlying order of the mechanism
        specific source of the attribute values.</t>

        <section title="C-Bindings">
          <t>The C-bindings of GSS_Get_name_attribute() requires one function
          call per-attribute value, for multi-valued name attributes. This is
          done by using a single gss_buffer_t for each value and an
          input/output integer parameter to distinguish initial and subsequent
          calls and to indicate when all values have been obtained.</t>

          <t>The 'more' input/output parameter should point to an integer
          variable whose value, on first call to gss_name_attribute_get() MUST
          be -1, and whose value upon function call return will be non-zero to
          indicate that additional values remain, or zero to indicate that no
          values remain. The caller should not modify this parameter after the
          initial call.</t>

          <figure>
            <artwork><![CDATA[
OM_uint32 gss_get_name_attribute(
  OM_uint32                     *minor_status,
  gss_name_t                    name,
  gss_buffer_t                  attr,
  int                           *authenticated,
  int                           *complete,
  gss_buffer_t                  value,
  gss_buffer_t                  display_value,
  int                           *more
);
				    ]]></artwork>
          </figure>
        </section>
      </section>

      <section title="GSS_Set_name_attribute()">
        <t>Inputs: <vspace blankLines="1" /> <list style="symbols">
            <t>name NAME,</t>

            <t>complete BOOLEAN, -- TRUE iff this represents a complete set of
            values for the name.</t>

            <t>attr STRING,</t>

            <t>values SET OF OCTET STRING</t>
          </list></t>

        <t>Outputs: <vspace blankLines="1" /> <list style="symbols">
            <t>major_status INTEGER,</t>

            <t>minor_status INTEGER</t>
          </list></t>

        <t>Return major_status codes: <list style="symbols">
            <t>GSS_S_COMPLETE indicates no error.</t>

            <t>GSS_S_UNAVAILABLE indicates that the given attribute OID is not
            known or could not be set.</t>

            <t>GSS_S_FAILURE indicates a general error.</t>
          </list></t>

        <t>The complete flag denotes that (if TRUE) the set of values
        represents a complete set of values for this name. The peer being an
        authoritative source of information for this attribute is a sufficient
        condition for the complete flag to be set by the peer.</t>

        <t>In the federated case when several peers may hold some of the
        attributes about a name this flag may be highly dangerous and SHOULD
        NOT be used.</t>

        <t>NOTE: This function relies on the GSS-API notion of "SET OF"
        allowing for order preservation; this has been discussed on the KITTEN
        WG mailing list and the consensus seems to be that, indeed, that was
        always the intention. It should be noted that underlying mechanisms
        may not respect the given order.</t>

        <section title="C-Bindings">
          <t>The C-bindings of GSS_Set_name_attribute() requires one function
          call per-attribute value, for multi-valued name attributes -- each
          call adds one value. To replace an attribute's every value delete
          the attribute's values first with GSS_Delete_name_attribute().</t>

          <figure>
            <artwork><![CDATA[
OM_uint32 gss_set_name_attribute(
  OM_uint32                     *minor_status,
  gss_name_t                    name,
  int                           complete,
  gss_buffer_t                  attr,
  gss_buffer_t                  value
);
				    ]]></artwork>
          </figure>
        </section>
      </section>

      <section title="GSS_Delete_name_attribute()">
        <t>Inputs: <vspace blankLines="1" /> <list style="symbols">
            <t>name NAME,</t>

            <t>attr STRING,</t>
          </list></t>

        <t>Outputs: <vspace blankLines="1" /> <list style="symbols">
            <t>major_status INTEGER,</t>

            <t>minor_status INTEGER</t>
          </list></t>

        <t>Return major_status codes: <list style="symbols">
            <t>GSS_S_COMPLETE indicates no error.</t>

            <t>GSS_S_UNAVAILABLE indicates that the given attribute OID is not
            known.</t>

            <t>GSS_S_UNAUTHORIZED indicates that a forbidden delete operation
            was attempted eg deleting a negative attribute.</t>

            <t>GSS_S_FAILURE indicates a general error.</t>
          </list></t>

        <t>Deletion of negative authenticated attributes from NAME objects
        MUST NOT be allowed and must result in a GSS_S_UNAUTHORIZED.</t>

        <section title="C-Bindings">
          <figure>
            <artwork><![CDATA[
OM_uint32 gss_delete_name_attribute(
  OM_uint32                     *minor_status,
  gss_name_t                    name,
  gss_buffer_t                  attr
);
				    ]]></artwork>
          </figure>
        </section>
      </section>

      <section title="GSS_Export_name_composite()">
        <t>Inputs: <vspace blankLines="1" /> <list style="symbols">
            <t>name NAME</t>
          </list></t>

        <t>Outputs: <vspace blankLines="1" /> <list style="symbols">
            <t>major_status INTEGER,</t>

            <t>minor_status INTEGER,</t>

            <t>exp_composite_name OCTET STRING</t>
          </list></t>

        <t>Return major_status codes: <list style="symbols">
            <t>GSS_S_COMPLETE indicates no error.</t>

            <t>GSS_S_FAILURE indicates a general error.</t>
          </list></t>

        <t>This function outputs a token which can be imported with
        GSS_Import_name(), using GSS_C_NT_COMPOSITE_EXPORT as the name type
        and which preserves any name attribute information associated with the
        input name (which GSS_Export_name() may well not). The token format is
        no specified here as this facility is intended for inter-process
        communication only; however, all such tokens MUST start with a
        two-octet token ID, hex 04 02, in network byte order.</t>

        <t>The OID for GSS_C_NT_COMPOSITE_EXPORT is &lt;TBD&gt;.</t>

        <section title="C-Bindings">
          <figure>
            <artwork><![CDATA[
OM_uint32 gss_export_name_composite(
  OM_uint32                     *minor_status,
  gss_name_t                    name,
  gss_buffer_t                  exp_composite_name
);
				    ]]></artwork>
          </figure>
        </section>
      </section>

      <section title="GSS_Map_name_to_any()">
        <t>Inputs: <vspace blankLines="1" /> <list style="symbols">
            <t>name NAME,</t>

            <t>authenticated BOOLEAN, -- if TRUE only authenticated attributes
            will be included</t>

            <t>type_id STRING</t>
          </list></t>

        <t>Outputs: <vspace blankLines="1" /> <list style="symbols">
            <t>major_status INTEGER,</t>

            <t>minor_status INTEGER,</t>

            <t>output ANY DEFINED BY type_id</t>
          </list></t>

        <t>Return major_status codes: <list style="symbols">
            <t>GSS_S_COMPLETE indicates no error.</t>

            <t>GSS_S_UNAVAILABLE indicates that the mapping or conversion
            could not be done. The minor status code may provide additional
            information.</t>

            <t>GSS_S_FAILURE indicates a general error. The minor status code
            may provide additional information.</t>
          </list></t>

        <t>Whereas name attribute's values are encoded in some network
        representation applications often require native, language- and/or
        platform-specific data types. This function provides access to such
        types.</t>

        <section title="C-Bindings">
          <figure>
            <artwork><![CDATA[
typedef struct gss_any *gss_any_t;
OM_uint32 gss_map_name_to_any(
  OM_uint32                     *minor_status,
  gss_name_t                    name,
  int                           authenticated,
  gss_buffer_t                  type_id, // why isn't this 'name'?
  gss_any_t                     output
);
				    ]]></artwork>
          </figure>

          <t>Note the new C bindings type, gss_any_t. We define it as a
          pointer to an incompletely declared struct.</t>
        </section>
      </section>

      <section title="GSS_Release_any_name_mapping()">
        <t>Inputs: <vspace blankLines="1" /> <list style="symbols">
            <t>name NAME,</t>

            <t>type_id STRING,</t>

            <t>input ANY DEFINED BY type_id</t>
          </list></t>

        <t>Outputs: <vspace blankLines="1" /> <list style="symbols">
            <t>major_status INTEGER,</t>

            <t>minor_status INTEGER,</t>
          </list></t>

        <t>Return major_status codes: <list style="symbols">
            <t>GSS_S_COMPLETE indicates no error.</t>

            <t>GSS_S_UNAVAILABLE indicates that the mapping or conversion
            could not be done. The minor status code may provide additional
            information.</t>

            <t>GSS_S_FAILURE indicates a general error. The minor status code
            may provide additional information.</t>
          </list></t>

        <t>This function releases, if possible, the objects of language-
        and/or platform-specific types output by GSS_Map_name_to_any(). If
        such types have native release functions applications MAY use either
        those or this function to release the given object.</t>

        <section title="C-Bindings">
          <figure>
            <artwork><![CDATA[
typedef struct gss_any *gss_any_t;
OM_uint32 gss_release_any_name_mapping(
  OM_uint32                     *minor_status,
  gss_name_t                    name,
  gss_buffer_t                  type_id,
  gss_any_t                     *input
);
				    ]]></artwork>
          </figure>
        </section>
      </section>
    </section>

    <section title="IANA Considerations">
      <t>This document creates a namespace of GSS-API name attributes.
      Attributes are named by URIs, so no single authority is technically
      needed for allocation. However future deployment experience may indicate
      the need for an IANA registry for URIs used to reference names specified
      by IETF standards. It is expected that this will be a registry of URNs
      but this document provides no further guidance on this registry.</t>
    </section>

    <section title="Security Considerations">
      <t>This document extends the GSS-API naming model to include support for
      name attributes. The intention is that name attributes are to be used as
      a basis for (among other things) authorization decisions or application
      personalization for applications relying on GSS-API security
      contexts.</t>

      <t>The security of the application may be critically dependent on the
      security of the attributes. This document classifies attributes as
      asserted or authenticated. Only authenticated attributes MUST be used if
      the attribute has security implications for the application (eg
      authorization decisions) since asserted attributes may easily be
      controlled by the peer directly.</t>

      <t>It is important to understand the meaning of 'authenticated' in this
      setting. It does not mean that any semantic of the attribute is claimed
      to be true. The only implication is that a trusted third party has
      asserted the attribute as opposed to the attribute being asserte by the
      peer itself. Any additional semantics is always the result of applying
      policy. For instance in a given deployment the mail attribute of the
      subject may be authenticated and sourced from an email system where
      'correct' values are kept. In another setting users may be allowed to
      modify their mail addresses freely. In both cases the 'mail' attribute
      may be authenticated by virtue of being included in signed SAML
      attribute assertions lor by other means authenticated by the underlying
      mechanism.</t>

      <t>When the underlying security mechanism does not provide a permanent
      unique identity (eg anonymous kerberos) the GSS-API naming extensions
      may be used to provide a replacement permanent unique identity attribute
      which in this case may be unique for each relying party. This is
      analogous to the Liberty Alliance targetedID attribute and has similar
      security implications.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.2025.xml'?>

      <?rfc include='reference.RFC.2119.xml'?>

      <?rfc include='reference.RFC.2743.xml'?>

      <?rfc include='reference.RFC.2744.xml'?>

      <?rfc include='reference.RFC.5280.xml'?>

      <?rfc include='reference.RFC.3001.xml'?>

      <?rfc include='reference.RFC.4120.xml'?>

      <reference anchor="I-D.GSS-NAMING">
        <front>
          <title>Desired Enhancements to GSSAPI Naming</title>

          <author fullname="Sam Hartman" initials="S" surname="Hartman">
            <organization></organization>
          </author>

          <date day="20" month="February" year="2005" />
        </front>

        <seriesInfo name="Internet-Draft"
                    value="draft-ietf-kitten-gss-naming-01.txt" />

        <format target="http://www.ietf.org/internet-drafts/draft-ietf-kitten-gss-naming-01.txt"
                type="TXT" />
      </reference>
    </references>
  </back>
</rfc>
