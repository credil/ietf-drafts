<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="exp"
     docName="draft-lodderstedt-oauth-securityconsiderations-01"
     ipr="trust200902">
  <front>
    <title abbrev="OAuth 2.0 Security Considerations">OAuth 2.0 Security
    Considerations</title>

    <author fullname="Dr.-Ing. Torsten Lodderstedt" initials="T."
            role="editor" surname="Lodderstedt">
      <organization>Deutsche Telekom AG</organization>

      <address>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>

    <author fullname="Mark McGloin" initials="M." surname="McGloin">
      <organization>IBM</organization>

      <address>
        <email>mark.mcgloin@ie.ibm.com</email>
      </address>
    </author>

    <author fullname="Phil Hunt" initials="P." surname="Hunt">
      <organization>Oracle Corporation</organization>

      <address>
        <email>phil.hunt@yahoo.com</email>
      </address>
    </author>

    <author fullname="Anthony Nadalin" initials="A." surname="Nadalin">
      <organization>Microsoft Corporation</organization>

      <address>
        <email>tonynad@microsoft.com</email>
      </address>
    </author>

    <date day="31" month="March" year="2011" />

    <area>Applications Area</area>

    <workgroup>Open Authentication Protocol</workgroup>

    <keyword>security considerations</keyword>

    <keyword>oauth 2.0</keyword>

    <abstract>
      <t>This document gives security considerations for the OAuth 2.0
      protocol. The proposed text is intended to be included into <xref
      target="I-D.ietf-oauth-v2"></xref>.</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>

  <middle>
    <section title="Definitions">
      <t>This document considers the following clients categories:</t>

      <t><list style="hanging">
          <t hangText="Web Application">Such an application is installed on a
          server. End-users access it via a HTML user interface rendered in
          the user agent on the end-user's device. All application data
          relevant to the OAuth protocol are stored on the server and is not
          accessible by the user.</t>

          <t hangText="Native Application">Such an app is installed and runs
          on an end-user's device. All application data relevant to the OAuth
          protocol is accessible by the user.</t>

          <t hangText="JavaScript Application">Such an application is
          downloaded from a web site and runs within the user agent on the
          end-user's device. All application data relevant to the OAuth
          protocol is accessible by the user.</t>
        </list></t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>Note: This section focuses on the security guidelines implementors of
      the protocol must consider. We encourage readers to consult the more
      detailed analysis with additional background information can be found in
      <xref target="I-D.lodderstedt-oauth-security"></xref>.</t>

      <section title="Client Secrets">
        <t>Authorization servers MAY issue client secrets to web applications.
        Application developers MUST ensure confidentiality of client
        secrets.</t>

        <t>Authorization server MUST NOT issue client secrets to native or
        JavaScript applications. It MAY issue a client secret for an
        installation of an application on a specific device. Alternatively,
        authorization servers MUST utilize other means than client
        authentication to achieve their security objectives. </t>

        <t>Authorization servers MUST NOT automatically process (without user
        interaction) repeated authorizations without authenticating the
        client. </t>
      </section>

      <section title="Malicious Client Obtains Authorization">
        <t>A malicious client could impersonate a valid client and obtain
        access to a protected resource.</t>

        <t>Assumption: It is not the task of the authorization server to
        protect the end-user's device from malicious software. This is the
        responsibility of the platform running on the particular device
        probably in cooperation with other components of the respective
        ecosystem (e.g. an application management infrastructure). The sole
        responsibility of the authorization server is to control access to the
        end-user's resources living in resource servers and to prevent
        unauthorized access to them. Based on this assumption, the following
        countermeasures are recommended.</t>

        <t>If the impersonated client is a web application, the authorization
        server MUST authentication the client. The authorization server SHOULD
        require clients to pre-register their redirect_uri's and validate the
        actual redirect_uri against the pre-registered value.</t>

        <t>If the impersonated client is an native or JavaScript application,
        the authorization server MUST utilize other means to achieve its
        security objectives. The authorization server MAY enforce explicit
        user authentication or ask the end-user for consent. In this context,
        the user SHALL be explained the purpose, scope, and duration of the
        authorization. The authorization server MUST make the meta-data it
        associates with the particular client (e.g. the Name) available to the
        end-user . It is up to the user to validate the binding of this data
        to the particular application and to approve the authorization
        request.</t>

        <t>It is higly RECOMMENDED that the authorization server limits the
        scope of tokens.</t>
      </section>

      <section title="Refresh Tokens">
        <t>Authorization servers MAY issue refresh tokens to web and native
        applications.</t>

        <t>Refresh tokens MUST only be accessible to the authorization server
        and the client to whom they have been issued. The authorization server
        MUST maintain the link between a refresh token and the client to whom
        it has been issued. Where the client be authenticated, this relation
        MUST be validated on every token refreshment request. It is
        RECOMMENDED for authorization servers to implement means to detect
        abuse of refresh tokens. </t>

        <t>Authorization server as well as application developers MUST ensure
        confidentiality of refresh tokens, on transit and storage. </t>

        <t>Authorization servers MUST ensure that refresh tokens cannot be
        manufactured, modified, or guessed.</t>
      </section>

      <section title="Access Tokens">
        <t>Access tokens MUST only be accessible to the authorization server,
        the target resource servers and the client the token has been issued
        to. The only exception is the implicit grant where the user agent gets
        access to the access token that is transmitted in the URI
        fragment.</t>

        <t>Application developers MUST NOT store access tokens in
        non-transient memory.</t>

        <t>Authorization servers MUST ensure that access tokens cannot be
        manufactured, modified, or guessed.</t>
      </section>

      <section title="Token Scope">
        <t>It is strongly RECOMMENDED that application developers only acquire
        access tokens with the minimal scope they need in order to implement
        the respective application function.</t>
      </section>

      <section title="Request Confidentiality">
        <t>The following security sensitive data elements MUST NOT be
        transmitted in clear: access tokens, refresh tokens, resource owner
        passwords, authorization codes, and client secrets.</t>
      </section>

      <section title="Endpoints Authenticity">
        <t>In order to prevent men-in-the-middle and phishing attacks, HTTPS
        with server-side authentication MUST be implemented and used by
        authorization servers in all exchanges.</t>

        <t>Application developers MUST provide mechanisms to validate the
        authorization server endpoint's authenticity and ensure proper
        handling of CA certificates as well as certificate chain
        validation.</t>
      </section>

      <section title="Online Guessing Attacks">
        <t>Authorization servers MUST prevent guessing attacks on the
        following credentials: authorization codes, refresh tokens, resource
        owner passwords, and client secrets.</t>

        <t>When creating token handles or other secrets not intended for usage
        by human users, the authorization server MUST include a reasonable
        level of entropy in order to mitigate the risk of guessing
        attacks.</t>
      </section>

      <section title="Phishing Attacks">
        <t>It is strongly RECOMMENDED that application developers use external
        browsers instead of browsers embedded in the application for
        performing the end-user authorization process. External browsers offer
        a familiar usage experience and a trusted environment, in which users
        can confirm the authentictity of the site.</t>

        <t>To reduce the risk of phishing attacks, authorization servers MUST
        support the authentication of their endpoint. For example, they can
        utilize HTTPS server authentication for that purpose. Moreover,
        service providers should attempt to educate users about the risks
        phishing attacks pose, and should provide mechanisms that make it easy
        for users to confirm the authenticity of their sites. e.g. extended
        validation certificates.</t>
      </section>

      <section title="Authorization Code Disclosure">
        <t>Confidentiality of authorization codes MUST be ensured on
        transport, even considering browser histories and HTTP referer
        headers.</t>

        <t>The authorization server and the client MUST ensure that the
        authorization code transmission is protected by using channel
        security, such as TLS, and that the lifetime of the authorization code
        is limited.</t>

        <t>For web applications, authorization servers MUST authenticate the
        client and validate that the authorization code had been issued to the
        same client.</t>

        <t>For native applications, authorization servers MUST enforce one
        time usage of the authorization code. Moreover, if an authorization
        server observes multiple attempts to redeem an authorization code, the
        authorization server MAY want to revoke all tokens granted based on
        this authorization code.</t>
      </section>

      <section title="Session Fixation">
        <t>The session fixation attack leverages the authorization code flow
        in an attempt to get another user to log-in and authorize access on
        behalf of the attacker. The victim, seeing only a normal request from
        an expected application, approves the request. The attacker then uses
        the victim's authorization to gain access to the information
        unknowingly authorized by the victim.</t>

        <t>In order to prevent such an attack, authorization servers MUST
        ensure that the redirect_uri used in the authorization flow is the
        same as the redirect_uri used to exchange the respective authorization
        code into tokens. The authorization server operators SHOULD require
        client application developers to pre-register their redirect_uri's and
        validate the actual redirect_uri against the pre-registered value.</t>
      </section>

      <section title="Resource Owner Password Credentials">
        <t>The &ldquo;Resource Owner Password Credentials&rdquo; grant type is
        often used for legacy/migration reasons. It reduces the overall risk
        of storing username and password in the client.</t>

        <t>It has higher risk then the other OAuth protocol flows because it
        maintains the password anti-pattern and the client could abuse the
        user id and password. Additionally, because the user does not have
        control over the authorization process, clients using this grant type
        are not limited by scope, but instead have potentially the same
        capabilities as the user themselves. The client could also acquire
        long-living tokens and pass them up to a attacker web service for
        further abuse.</t>

        <t>Authorization servers and application developers SHOULD minimize
        use of this grant types. Other flows which facilitate user control and
        transparency should be used instead.</t>

        <t>The authorization server SHOULD generally restrict the scope of
        access tokens issued by this flow.</t>

        <t>The authorization server MUST ensure the resource owners control
        and transparency with respect to all authorizations issued to
        clients.</t>
      </section>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t></t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include="reference.I-D.ietf-oauth-v2.xml"?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.I-D.lodderstedt-oauth-security.xml"?>
    </references>
  </back>
</rfc>
