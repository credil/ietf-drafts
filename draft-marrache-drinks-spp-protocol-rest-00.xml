<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
        <!ENTITY rfc2119 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
        <!ENTITY rfc3688 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3688.xml">
        <!ENTITY rfc5486 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5486.xml">
         <!ENTITY rfc5246 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
        <!ENTITY rfc2617 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml">
        <!ENTITY rfc2616 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml">
        <!ENTITY rfc2818 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2818.xml">
        <!ENTITY rfc5321 PUBLIC ""
          "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5321.xml">
]>


<rfc category="std" docName="draft-marrache-drinks-spp-protocol-rest-00"  ipr="trust200902">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>

<front>
    <title abbrev="draft-marrache-drinks-spp-protocol-rest">Session Peering Provisioning (SPP) Protocol over REST</title>
    <author initials='M.M.' surname="Marrache" fullname="Mickael Marrache">
      <organization>Jerusalem College of Technology</organization>
      <address>
        <postal>
          <street>Havaad Haleumi St. 21</street>
          <city>Jerusalem</city> 
		  <region></region> 
          <code>91160</code>
          <country>Israel</country>
        </postal>
      <email>mickaelmarrache@gmail.com</email>
    </address>
  </author>
  <author initials="D.S." surname="Schwartz" fullname="David Schwartz">
    <organization>XConnect</organization>
	<address>
	  <postal>
	    <street>316 Regents Park Road</street>
		<city>London</city>
		<region> </region>
		<code>N3 2XJ</code>
		<country>United Kingdom</country>
       </postal>
	   <email>dschwartz@xconnect.net</email>
	  </address>
	</author>
  <author initials="S.A." surname="Ali" fullname="Syed Wasim Ali">
   <organization>NeuStar</organization>
   <address>
    <postal>
     <street>46000 Center Oak Plaza</street>
     <city>Sterling</city>
     <region>VA</region>
     <code>20166</code>
     <country>USA</country>
    </postal>
    <email>syed.ali@neustar.biz</email>
   </address>
  </author>

    <date year="2012" month="October"/>

    <area>Real-time Applications and Infrastructure Area</area>

    <workgroup>DRINKS</workgroup>
    
    <abstract>
      <t>
	  The Session Peering Provisioning Framework (SPPF) is an XML framework 
	  that exists to enable the provisioning of session establishment data into  
	  Session Data Registries or SIP Service Provider data stores.  This SPP Protocol
	  implementation follows the REST style widely used today in ditributed systems. 
	  The benefits include scalibility of the interactions between the involved components, ...
	  This document describes the specification for performing SPPF operations over REST/HTTP.
	  </t>
    </abstract>
</front>

<middle>
	<section title="Introduction">
      <t>
	  TBD
	  </t>
	</section>
  
    <section anchor="Terminology" title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref target="RFC2119"/>.</t>
    </section>

    <section anchor="RESTPrinciples" title="REST Principles and Protocol Layering">	  
	  <figure anchor="TechnicalStructureofSPPP" 
	    title="Layering and Technical Structure of the SPP Protocol with REST/HTTP">
        <artwork align="left"><![CDATA[
                       +-------------+
                   (1) |  Transport  |Example:
                       |   Protocol  |  TCP, TLS, BEEP, etc.
                       +-------------+
                              |
                              V
                       +-------------+
                       |     HTTP    |
                       |   Message   |
                       +-------------+
               (2)            |
                  +-----------------------+								 
                  |                       |
                  V                       V
		  +----------------+       +----------------+
          | HTTP Requests  |       | HTTP Responses |
		  | (with params)  |       | (with params)  |
	 	  +----------------+       +----------------+
             Uses  |                  Uses  |
                   V                        V
           +-------------+          +-------------+
    (3)    |    SPPF     |          |    SPPF     |
           |  XML Types  |          |  XML Types  |
           +-------------+          +-------------+
        ]]></artwork>
     </figure>
	  
	 <t>The operations supported by the RESTful SPP Protocol are normatively defined 
	 later in this document.  Each operation is performed using an HTTP request and an 
	 HTTP response.  Each such request and response message may contain a single object
	 that wraps the SPPF XML data types that comprise the inputs and the outputs,
	 respectively, of the operation.</t>
     <t>SPPF is a request/reply framework that allows a client application to submit 
	 provisioning data and query requests to a server. The SPPF data structures are designed
     to be protocol agnostic. Concerns regarding encryption, non-repudiation, and authentication
	 are beyond the scope of this document. For more details, please refer to the
     "Transport Protocol Requirements" section in the framework document.</t>
	</section>

    <section anchor="HTTPFeatures" title="HTTP(s) Features">
      <t>HTTP(s) is the transport mechanism used by RESTful systems.
	  HTTP 1.1 includes the &quot;persistent connection&quot; feature, 
	  which allows multiple HTTP request/response pairs to be transported 
      across a single HTTP connection.  This is an important performance 
      optimization feature, particularly when the connections is an HTTPS 
      connection where the relatively time consuming SSL handshake has occurred.  
      Persistent connections SHOULD be used for the SPPF HTTP connections.</t> 
	  <t>HTTP 1.1 <xref target="RFC2616"/> or higher SHOULD be used.</t>
    </section>

    <section anchor="AuthenticationSessionManagement" title="Authentication and Session Management">
      <t>To achieve integrity and privacy, conforming SPP Protocol Clients and Servers MUST support HTTP over TLS <xref target="RFC5246"/> as the secure transport mechanism.  This combination of HTTP and TLS is referred to as HTTPS.  And to accomplish authentication, conforming SPPF Clients and Servers MUST use HTTP Digest Authentication as defined in <xref target="RFC2617"/>.  As a result, the communication session is established through the initial HTTP connection setup, the digest authentication, and the TLS handshake.  When the HTTP connection is broken down, the communication session ends.</t>
    </section>
    
	<section anchor="LanguageIdentification" title="Language Identification">
	  <t>
	  TBD
	  </t>
	</section>
	
	<section anchor="resources" title="URI Structure">
	  <t>In the context of this RESTful SPP Protocol implementation, the different domain elements
	  defined in <xref target="I-D.draft-ietf-drinks-spp-framework"/> are called resources.
	  Each resource is identified by a Uniform Resource Identifier that follows a well defined structure.</t>
	  <t>Each SPPF domain element is identified by some of its attributes. Only these attributes that 
	  compose the key must be present in the URI identifying the resource. These attributes are represented 
	  in the URI as path parameters.</t>
	  
	  <section anchor="dguri" title="Destination Group">
	    <t>As mentioned in the framework document, a destination group is uniquely identified by the following 
        attributes: the registrant and the destination group's name.
		
		Therefore, a destination group resource is identified by the URI:</t>
		
		<t>BASE_URL/DestGroup/rant/{rant}/name/{name}</t>
	  </section>
	  
	  <section anchor="tnuri" title="Telephone Number">
	    <t>As mentioned in the framework document, a telephone number is uniquely identified by the following 
        attributes: the registrant, the name of the associated destination group if there is, and the telephone
		number.
		
		Therefore, a telephone number resource is identified by the URI:</t>
		
		<t>BASE_URL/TN/rant/{rant}/dgName/{dgName}/tn/{tn}</t>
	  </section>
	  
	  <section anchor="tnpuri" title="Telephone Number Prefix">
	    <t>As mentioned in the framework document, a telephone number prefix is uniquely identified by the following 
        attributes: the registrant, the name of the associated destination group if there is, and the telephone
		number prefix.
		
		Therefore, a telephone number prefix resource is identified by the URI:</t>
		
		<t>BASE_URL/TNP/rant/{rant}/dgName/{dgName}/prefix/{prefix}</t>
	  </section>
	  
	  <section anchor="tnruri" title="Telephone Number Range">
	    <t>As mentioned in the framework document, a telephone number range is uniquely identified by the following 
        attributes: the registrant, the name of the associated destination group if there is, the telephone
		that starts the range and the one that ends the range.
		
		Therefore, a telephone number range resource is identified by the URI:</t>
		
		<t>BASE_URL/TNR/rant/{rant}/dgName/{dgName}/startTn/{startTn}/endTn/{endTn}</t>
	  </section>
	  
	  <section anchor="rnuri" title="Routing Number">
	    <t>As mentioned in the framework document, a routing number is uniquely identified by the following 
        attributes: the registrant, the name of the associated destination group if there is, and the routing
		number.
		
		Therefore, a routing number	resource is identified by the URI:</t>
		
		<t>BASE_URL/RN/rant/{rant}/dgName/{dgName}/rn/{rn}</t>
	  </section>
	  
	  <section anchor="uripubiduri" title="URI Public Identifier">
	    <t>As mentioned in the framework document, a public identifier URI is uniquely identified by the following 
        attributes: the registrant, the name of the associated destination group if there is, and the URI.
		
		Therefore, a public identifier URI resource is identified by the URI:</t>
		
		<t>BASE_URL/URIPubId/rant/{rant}/dgName/{dgName}/uri/{uri}</t>
	  </section>
	  
	  <section anchor="sedgrpuri" title="Sed Group">
	    <t>As mentioned in the framework document, a Sed Group URI is uniquely identified by the following 
        attributes: the registrant and the Sed Group's name.
		
		Therefore, a Sed Group resource is identified by the URI:</t>
		
		<t>BASE_URL/SedGroup/rant/{rant}/name/{name}</t>
	  </section>
	  
	  <section anchor="sedrecuri" title="Sed Record">
	    <t>As mentioned in the framework document, a Sed Record is uniquely identified by the following 
        attributes: the registrant and the Sed Record's name.
		
		Therefore, a Sed Record resource is identified by the URI:</t>
		
		<t>BASE_URL/SedRecord/rant/{rant}/name/{name}</t>
		
		<t>Note that there is no need to use one URI per type of Sed Record since their keys all use the same 
		attributes. This is necessary for Public Identifiers since the subtypes don't all use the same key structure.</t>
	  </section>
	  
	  <section anchor="sedgrpofferuri" title="Sed Group Offer">
	    <t>As mentioned in the framework document, a Sed Group Offer is uniquely identified by the following 
        attributes: the offering registrant, the offered Sed Group's name and the registrant to which the
        Sed Group is offered.
		
		Therefore, a Sed Group Offer resource is identified by the URI:</t>
		
		<t>BASE_URL/SedGrpOffr/rant/{rant}/sedGrpNam/{sedGrpNam}/offrTo/{offrTo}</t>
	  </section>
	  
	  <section anchor="serverstatusuri" title="Server Status">
	    <t>The Server Status may be considered as a unique resource identified by the following URI:</t>
		
		<t>BASE_URL/ServerStatus</t>
		
		<t>This resource contains information about the server as described later.</t>
	  </section>
	</section>    
       
    <section anchor="requestandresponse" title="Operation Request and Response Structures">
      <t> An SPPF client interacts with an SPPF server by using one of the supported transport 
	  mechanisms to send one or more requests to the server and receive corresponding replies from
      the server.  The basic set of operations that an SPPF client can submit to an SPPF server and 
	  the semantics of those operations are defined in the "Framework Operations" section of the 
	  framework document.  The following sub-sections describe how these operations should be performed
	  in the context of a RESTful SPP Protocol implementation.</t>
         
      <section anchor="addsandmods" title="Add Operation Structure">
        <t>In order to add (or modify) an object to (present in) the registry, an authorized
		entity sends an add/modify request to the registry. This request consists of an HTTP request
		on the URI that identifies the resource to add/modify, using the PUT HTTP method. The object
		to add/modify is carried in the HTTP request's body, encoded as XML. 
		After the operation is performed, the registry sends back an HTTP response to the client
		indicating if the request has been performed successfully, and if not, the reason of the failure.
        The following sub-sections describe the expected format of the HTTP requests and responses.
        Refer to the "RESTful SPP Protocol Examples" section of this document for an example of Add operation
		on each type of SPPF object.</t>
   
        <section anchor="addrqst" title="Add Request">
          <t>The format of an HTTP request used to add (or modify) a domain element to (present in) the registry
		  is as follows:</t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
PUT BASE_URL/${ResourceURI}[?clientTransId=${ClientTransId}] HTTP/1.1
.....
[minorVer: ${MinorVersion}]
Content-Type: application/xml
.....

<XML Representation of the domain element to add/modify>
                 ]]>
              </artwork>
            </figure>
          </t>
        
          <t>The data elements within the HTTP Add/Modify request are described as follows: 
			  <list style="symbols" hangIndent="5">
				<t>clientTransId: Zero or one client-generated transaction ID
				that, within the context of the SPPF client, identifies this 
				request. This value can be used at the discretion of the SPPF 
				client to track, log or correlate requests and their responses. 
				SPPF server MUST echo back this value to the client in the 
				corresponding response to the incoming request. SPPF server will
				not check this value for uniqueness.</t>
				<t>minorVer: Zero or one minor version identifier, indicating the minor  
				version of the SPPF API that the client is attempting to use. This is
				used in conjunction with the major version identifier in the XML namespace
				to identify the version of SPPF that the client is using. If the element is 
				not present, the server assumes that the client is using the latest minor 
				version supported by the SPPF server for the given major version. The versions
				supported by a given SPPF server can be retrieved by the client using the 
				SPPF server menu operation described later in the document.</t>
			  </list>
          </t>
        </section>
 
        <section anchor="addresponse" title="Add Response">
          <t>The format of an HTTP response to a add/modify request is as follows:</t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
HTTP/1.1 ${Status Code}
....
[clientTransId: ${Client Trans. Id}]
serverTransId: ${Server Trans. Id}]
Content-Length: 0
                ]]>
              </artwork>
            </figure>
          </t>

          <t> The data elements within the HTTP Add/Modify response are described as follows:
		    <list style="symbols" hangIndent="5">
              <t>clientTransId: Zero or one client transaction ID.  This 
              value is simply an echo of the client transaction ID that 
              SPPF client passed into the SPPF update request. When included 
              in the request, the SPPF server MUST return it in the corresponding
              response message.</t>
              <t>serverTransId: Exactly one server transaction ID that
              identifies this request for tracking purposes. This
              value MUST be unique for a given SPPF server.</t>
            </list>
          </t>  
        </section>
      </section>

      <section anchor="dels" title="Delete Operation Structure">
         <t>In order to remove an object from the registry, an authorized entity
         sends a delete request to the registry. This request consists of an HTTP request
		 on the URI that identifies the resource to delete, using the DELETE HTTP method. The body
         of the HTTP request is empty, the object (or resource) to delete is uniquely identified by
         the URI included in the request.
		 After the operation is performed, the registry sends back an HTTP response to the client
		 indicating if the request has been performed successfully, and if not, the reason of the failure.
         The following sub-sections describe the expected format of the HTTP requests and responses.
         Refer to the "RESTful SPP Protocol Examples" section of this document for an example of Delete
		 operation on each type of SPPF object.</t>

         <section anchor="delrqst" title="Delete Request">
           <t>The format of an HTTP request used to delete a SPPF object from the registry
		   is as follows:</t>
           <t>
             <figure title="">
               <artwork align="left">
                 <![CDATA[
DELETE BASE_URL/${ResourceURI}[?clientTransId=${ClientTransId}] HTTP/1.1
.....
[minorVer: ${Minor Version}]
Content-Length: 0
                 ]]>
               </artwork>
             </figure>
           </t>
        
           <t>The data elements within the HTTP Delete request are described as follows: 
             <list style="symbols" hangIndent="5">
               <t>clientTransId: Zero or one client-generated transaction ID
			   that, within the context of the SPPF client, identifies this 
			   request. This value can be used at the discretion of the SPPF 
			   client to track, log or correlate requests and their responses. 
			   SPPF server MUST echo back this value to the client in the 
			   corresponding response to the incoming request. SPPF server will
			   not check this value for uniqueness.</t>
			   <t>minorVer: Zero or one minor version identifier, indicating the minor  
			   version of the SPPF API that the client is attempting to use. This is
			   used in conjunction with the major version identifier in the XML namespace
			   to identify the version of SPPF that the client is using. If the element is 
			   not present, the server assumes that the client is using the latest minor 
			   version supported by the SPPF server for the given major version. The versions
			   supported by a given SPPF server can be retrieved by the client using the 
			   SPPF server menu operation described later in the document.</t>
             </list>
           </t>
         </section>
        
		 <section anchor="delresponse" title="Delete Response">
           <t>The format of an HTTP response to a delete request is as follows:</t>
           <t>
             <figure title="">
               <artwork align="left">
                 <![CDATA[
HTTP/1.1 ${Status Code}
....
[clientTransId: ${Client Trans. Id}]
serverTransId: ${Server Trans. Id}]
Content-Length: 0
                 ]]>
               </artwork>
             </figure>
           </t>

           <t>The data elements within the HTTP Delete response are described as follows: 
		     <list style="symbols" hangIndent="5">
               <t>clientTransId: Zero or one client transaction ID. This 
               value is simply an echo of the client transaction ID that 
               SPPF client passed into the SPPF update request. When included 
               in the request, the SPPF server MUST return it in the corresponding
               response message.</t>
               <t>serverTransId: Exactly one server transaction ID that
               identifies this request for tracking purposes. This
               value MUST be unique for a given SPPF server.</t>
             </list>
           </t>  
         </section>
       </section>
        
       <section anchor="accepts" title="Accept Operation Structure">
         <t>In SPPF, a SED Group Offer can be accepted or rejected by, or on behalf of, the registrant to 
         whom the SED Group has been offered (refer "Framework Data Model Objects" section of the framework
		 document for a description of the SED Group Offer object). The Accept operation is used to accept 
		 such SED Group Offers by, or on behalf of, the Registrant. This request consists of an HTTP request
		 on the URI that identifies the Sed Group Offer to accept, using the POST HTTP method. The body
         of the HTTP request is empty, the Sed Grp Offer (resource) to accept is uniquely identified by
         the URI included in the request.
		 After the operation is performed, the registry sends back an HTTP response to the client
		 indicating if the request has been performed successfully, and if not, the reason of the failure.
         The following sub-sections describe the expected format of the HTTP requests and responses.
         Refer to the "RESTful SPP Protocol Examples" section of this document for an example of Accept
		 operation on a SED Group Offer.</t>

         <section anchor="acceptrqst" title="Accept Request Structure">
           <t>The format of an HTTP request used to Accept a SED Group Offer is as follows:</t>
           <t>
             <figure title="">
               <artwork align="left">
                 <![CDATA[
POST BASE_URL/${SedGrpOffrURI}[?clientTransId=${ClientTransId}] HTTP/1.1
.....
[minorVer: ${Minor Version}]
Action: Accept
Content-Length: 0
                 ]]>
               </artwork>
             </figure>
           </t>
        
           <t>The data elements within the HTTP Accept request are described as follows: 
             <list style="symbols" hangIndent="5">
               <t>clientTransId: Zero or one client-generated transaction ID
               that, within the context of the SPPF client, identifies this 
               request. This value can be used at the discretion of the SPPF 
               client to track, log or correlate requests and their responses.
			   SPPF server MUST echo back this value to the client in the corresponding
			   response to the incoming request. SPPF server will not check this 
			   value for uniqueness.</t>
               <t>minorVer: Zero or one minor version identifier, indicating the minor  
               version of the SPPF API that the client is attempting to use. This is
               used in conjunction with the major version identifier in
               the XML namespace to identify the version of SPPF that the client 
               is using.  If the element is not present, the server assumes that 
               the client is using the latest minor version supported by the SPPF
               server for the given major version. The versions supported by a 
               given SPPF server can be retrieved by the client using the 
               SPPF server menu operation described later in the document.</t>
             </list>
           </t>
         </section>
           
		 <section anchor="acceptresponse" title="Accept Response">
          <t>The format of an HTTP response to an Accept request is as follows:</t>
          <t>
            <figure title="">
              <artwork align="left">
                <![CDATA[
HTTP/1.1 ${Status Code}
....
[clientTransId: ${Client Trans. Id}]
serverTransId: ${Server Trans. Id}]
Content-Length: 0
                ]]>
              </artwork>
            </figure>
          </t>

          <t>The data elements within the HTTP Accept response are described as follows:
		    <list style="symbols" hangIndent="5">
              <t>clientTransId: Zero or one client transaction ID. This 
              value is simply an echo of the client transaction ID that 
              SPPF client passed into the SPPF update request. When included 
              in the request, the SPPF server MUST return it in the corresponding
              response message.</t>
              <t>serverTransId: Exactly one server transaction ID that
              identifies this request for tracking purposes. This
              value MUST be unique for a given SPPF server.</t>
            </list>
          </t>
         </section>

       </section>
        
	   <section anchor="rejects" title="Reject Operation Structure">
         <t>In SPPF, SED Group Offer can be accepted or rejected by, or on behalf of, the registrant to 
         whom the SED Group has been offered (refer "Framework Data Model Objects" section of the
		 framework document for a description of the SED Group Offer object). The Reject operation is
		 used to reject such SED Group Offers by, or on behalf of, the Registrant. 
		 This request consists of an HTTP request on the URI that identifies the Sed Group Offer to reject,
		 using the POST HTTP method. The body of the HTTP request is empty, the Sed Grp Offer (resource) to delete
		 is uniquely identified by the URI included in the request.
		 After the operation is performed, the registry sends back an HTTP response to the client
		 indicating if the request has been performed successfully, and if not, the reason of the failure.
         The following sub-sections describe the expected format of the HTTP requests and responses.
         Refer to the "RESTful SPP Protocol Examples" section of this document for an example of Reject
		 operation on a SED Group Offer.</t>
         
		 <section anchor="rejectrqst" title="Reject Request">
           <t>The format of an HTTP request used to Reject a SED Group Offer is as follows:</t>
           <t>
             <figure title="">
               <artwork align="left">
                 <![CDATA[
POST BASE_URL/${SedGrpOffrURI}[?clientTransId=${ClientTransId}] HTTP/1.1
.....
[minorVer: ${Minor Version}]
Action: Reject
Content-Length: 0          
                 ]]>
               </artwork>
             </figure>
           </t>
        
           <t>The data elements within the HTTP Reject request are described as follows: 
             <list style="symbols" hangIndent="5">
               <t>clientTransId: Zero or one client-generated transaction ID
               that, within the context of the SPPF client, identifies this 
               request. This value can be used at the discretion of the SPPF 
               client to track, log or correlate requests and their responses. 
			   SPPF server MUST echo back this value to the client in the corresponding
			   response to the incoming request. SPPF server will not check this value for uniqueness.</t>
               <t>minorVer: Zero or one minor version identifier, indicating the minor  
               version of the SPPF API that the client is attempting to use. This is
               used in conjunction with the major version identifier in
               the XML namespace to identify the version of SPPF that the client 
               is using.  If the element is not present, the server assumes that 
               the client is using the latest minor version supported by the SPPF
               server for the given major version. The versions supported by a 
               given SPPF server can be retrieved by the client using the 
               SPPF server menu operation described later in the document.</t>
             </list>
           </t>
         </section>
                  
	     <section anchor="rejectresponse" title="Reject Response">
           <t>The format of an HTTP response to a Reject request is as follows:</t>
           <t>
             <figure title="">
               <artwork align="left">
                 <![CDATA[
HTTP/1.1 ${Status Code}
....
[clientTransId: ${Client Trans. Id}]
serverTransId: ${Server Trans. Id}]
Content-Length: 0
                 ]]>
               </artwork>
             </figure>
           </t>

           <t>The data elements within the HTTP Reject response are described as follows:
		     <list style="symbols" hangIndent="5">
               <t>clientTransId: Zero or one client transaction ID. This 
               value is simply an echo of the client transaction ID that 
               SPPF client passed into the SPPF update request. When included 
               in the request, the SPPF server MUST return it in the corresponding
               response message.</t>
               <t>serverTransId: Exactly one server transaction ID that
               identifies this request for tracking purposes. This
               value MUST be unique for a given SPPF server.</t>
             </list>
           </t>
         </section>
       </section>
        
       <section anchor="gets" title="Get Operation Structure">
         <t>In order to query the details of an object from the Registry, an authorized entity
         sends a get request to the registry. This request consists of an HTTP request
		 on the URI that identifies the queried resource, using the GET HTTP method.
		 After the operation is performed, the registry sends back an HTTP response to the client
		 indicating if the request has been performed successfully, and if not, the reason of the failure.
		 Moreover, if the queried object is found in the registry, the HTTP response's body contains
		 the XML representation of the result object.
         The following sub-sections describe the expected format of the HTTP requests and responses.
         Refer to the "RESTful SPP Protocol Examples" section of this document for an example of Get operation
		 on each type of SPPF object.</t>
         
		 <section anchor="getreq" title="Get Request">
		   <t>The format of an HTTP request to a Get request is as follows:</t>		 
           <t>
             <figure title="">
               <artwork align="left">
                 <![CDATA[
GET BASE_URL/${Resource URI} HTTP/1.1
.....
[minorVer: ${Minor Version}]
Content-Length: 0
                 ]]>
               </artwork>
             </figure>
           </t>
        
           <t>The data elements within the HTTP Get request are described as follows: 
             <list style="symbols" hangIndent="5">
               <t>minorVer: Zero or one minor version identifier, indicating the minor  
               version of the SPPF API that the client is attempting to use. This is
               used in conjunction with the major version identifier in
               the XML namespace to identify the version of SPPF that the client 
               is using. If the element is not present, the server assumes that 
               the client is using the latest minor version supported by the SPPF
               server for the given major version. The versions supported by a 
               given SPPF server can be retrieved by the client using the 
               SPPF server menu operation described later in the document.</t>
             </list>
           </t>
         </section>

		 <section anchor="getresponse" title="Get Response">
           <t>The format of an HTTP response to a Get request is as follows:</t>
		   <t>
             <figure title="">
               <artwork align="left">
                 <![CDATA[
HTTP/1.1 ${Status Code}
....
Content-Length:

<XML Representation of the queried resource if found>
                 ]]>
               </artwork>
             </figure>
           </t>
         </section>
		
       </section>
		
       <section anchor="getsedgrpoffers" title="Get SED Group Offers Operation Structure">
         <t>In addition to the ability to query the details of one or more SED Group offers using a SED Group Offer key in
		 a Get request, this operation also provides an additional, more flexible, structure to query for SED Group Offer objects.</t>
		 
         <section anchor="getsedgrpoffersrqst" title="Get SED Group Offers Request">
           <t>Using the details passed into this structure, the server will
           attempt to find SED Group Offer objects that satisfy all the criteria passed into the
           request. If no criteria is passed in then the server will
           return the list of SED Group Offer objects that belongs to the 
           registrant. If there are no matching SED Group Offers found then an empty result set
           will be returned.</t>
           <t>
             <figure title="">
               <artwork align="left">
                 <![CDATA[
TBD
                 ]]>
               </artwork>
             </figure>
           </t>
         </section>
		 
         <section anchor="getsedgrpoffersresponse" title="Get SED Group Offers Response">
           <t>TBD</t>
         </section>
       </section>
       
       <section anchor="servermenuopn" title="Get Server Details Operation Structure">
         <t>In order to query certain details of the SPPF server, like the SPPF server's status and the major/minor version supported by the server, the Server Details operation structure SHOULD be used.</t>
         
         <section anchor="servermenurqst" title="Get Server Details Request">
		   <t>The format of an HTTP request corresponding to a Get Server Status request is as follows:</t>
           <t>
             <figure title="">
               <artwork align="left">
                 <![CDATA[
GET BASE_URL/ServerStatus HTTP/1.1
.....
[minorVer: ${Minor Version}]
Content-Length: 0				 
                 ]]>
               </artwork>
             </figure>
           </t>
        
           <t>The data elements within the HTTP Get Server Status request are described as follows:
             <list style="symbols" hangIndent="5">
               <t>minorVer: Zero or one minor version identifier, indicating the minor  
               version of the SPP RESTful Protocol API that the client is attempting to use. This is
               used in conjunction with the major version identifier in
               the XML namespace to identify the version of SPP RESTful Protocol that the client 
               is using. If the element is not present, the server assumes that 
               the client is using the latest minor version of SPP RESTful Protocol supported by the SPPF
               server for the given major version. The versions of SPP RESTful Protocol supported by a 
               given SPPF server can be retrieved by the client using this same HTTP Get Server Status request 
			   without passing in the minorVer element.</t>
             </list>
           </t>
         </section>
        
         <section anchor="servermenuresp" title="Get Server Details Response">
           <t>The format of an HTTP response to a Get Server Status request is as follows:</t>
           <t>
             <figure title="">
               <artwork align="left">
                 <![CDATA[
HTTP/1.1 ${Status Code}
....
Content-Length:

<XML Representation of the server status object (sppfb:SvcMenuType)>
                 ]]>
               </artwork>
             </figure>
           </t>
        
           <t>The data elements within the HTTP Get Server Status response are described as follows: 
             <list style="symbols" hangIndent="5">
               <t>svcMenu: Exactly one element of type SvcMenuType which in turn contains the elements
               to return the server status and major/minor version of the RESTful SPP Protocol supported
			   by the SPPF server (refer framework document for definition of SvcMenuType).</t>
             </list>
           </t>
         </section>
       </section>
    </section>

    <section anchor="resultcodes" title="Response Codes and Messages">
      <t>TBD</t>
    </section>

	<section anchor="protocol_oper" title="Protocol Operations">
      <t>Refer the "Framework Operations" section of the framework document for a description of
	  all SPPF operations, and any necessary semantics that MUST be adhered to in order to conform
	  with the SPPF specification.</t>
    </section>

    <section anchor="SPPPWADL" title="RESTful SPP Protocol WADL Definition">
      <t>The RESTful SPP Protocol WADL is defined below.</t>

	  <t>
	  Note: The following WADL has been formatted (e.g., tabs, spaces) to meet I-D requirements.
	  </t>

      <t>
	    <figure anchor="WADL" title="WADL">
          <artwork align="left"><![CDATA[
<?xml version="1.0"?>
<application xmlns="http://wadl.dev.java.net/2009/02" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:xsd="http://www.w3.org/2001/XMLSchema"
xmlns:sppfb="urn:ietf:params:xml:ns:sppf:base:1" 
xmlns:sppfr="urn:ietf:params:xml:ns:sppf:rest:1"
xsi:schemaLocation="http://wadl.dev.java.net/2009/02 
http://www.w3.org/Submission/wadl/wadl.xsd">
 <grammars>
  <schema xmlns="http://www.w3.org/2001/XMLSchema" 
  xmlns:sppfb="urn:ietf:params:xml:ns:sppf:base:1"
  xmlns:sppfr="urn:ietf:params:xml:ns:sppf:rest:1" 
  targetNamespace="urn:ietf:params:xml:ns:sppf:rest:1">
   <import namespace="urn:ietf:params:xml:ns:sppf:base:1"
   schemaLocation="sppfbase.xsd" />
    <element name="DestGroup" type="sppfb:DestGrpType" />
	<element name="SedGroup" type="sppfb:SedGrpType" />
	<element name="SedRecord" type="sppfb:SedRecType" 
	abstract="true" />
	<element name="TN" type="sppfb:TNType" />
	<element name="TNP" type="sppfb:TNPType" />
	<element name="TNR" type="sppfb:TNRType" />
	<element name="RN" type="sppfb:RNType" />
	<element name="URIPubId" type="sppfb:URIPubIdType" />
	<element name="SedGrpOffer" type="sppfb:SedGrpOfferType" />
	<element name="SvcMenu" type="sppfb:SvcMenuType" />
  </schema>
 </grammars>

 <resources base="REPLACE_WITH_THE_BASE_URL">
  <resource id="SedRecordResource" 
  path="/SedRec/rant/{rant}/name/{name}">
   <method id="getSedRecord" name="GET">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="name" style="template" type="sppfb:ObjNameType"
	 required="true" />
	</request>
	<response status="200">
	 <representation mediaType="application/xml" 
	 element="sppfr:SedRecord" />
	</response>
   </method>
   <method id="delSedRecord" name="DELETE">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="name" style="template" type="sppfb:ObjNameType"
	 required="true" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" required="false" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" />
	</response>
   </method>
   <method id="saveSedRecord" name="PUT">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <representation mediaType="application/xml" 
	 element="sppfr:SedRecord" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType"
	 required="true" />
	</response>
   </method>
  </resource>
  <resource id="TNResource" 
  path="/TN/rant/{rant}/dgName/{dgName}/tn={tn}">
   <method id="getTelNumber" name="GET">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="dgName" style="template" type="sppfb:ObjNameType"
	 required="true" />
	 <param name="tn" style="template" type="sppfb:NumberValType"
	 required="true" />
	</request>
	<response status="200">
	 <representation mediaType="application/xml" 
	 element="sppfr:TN" />
	</response>
   </method>
   <method id="delTelNumber" name="DELETE">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="dgName" style="template" type="sppfb:ObjNameType"
	 required="true" />
	 <param name="tn" style="template" type="sppfb:NumberValType"
	 required="true" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" required="false" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" />
	</response>
   </method>
   <method id="saveTelNumber" name="PUT">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <representation mediaType="application/xml" 
	 element="sppfr:TN" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" required="true" />
	</response>
   </method>
  </resource>
  <resource id="TNPResource"
  path="/TNP/rant/{rant}/dgName/{dgName}/prefix/{tnPrefix}">
   <method id="getTelNumPrefix" name="GET">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="dgName" style="template" type="sppfb:ObjNameType"
	 required="true" />
	 <param name="tnPrefix" style="template" 
	 type="sppfb:NumberValType" required="true" />
	</request>
	<response status="200">
	 <representation mediaType="application/xml" 
	 element="sppfr:TNP" />
	</response>
   </method>
   <method id="delTelNumPrefix" name="DELETE">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="dgName" style="template" type="sppfb:ObjNameType"
	 required="true" />
	 <param name="tnPrefix" style="template" 
	 type="sppfb:NumberValType" required="true" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" required="false" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" />
	</response>
   </method>
   <method id="saveTelNumPrefix" name="PUT">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <representation mediaType="application/xml" 
	 element="sppfr:TNP" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" required="true" />
	</response>
   </method>
  </resource>
  <resource id="TNRResource"
  path="/TNR/rant/{rant}/dgName/{dgName}/start/{startTn}/end/{endTn}">
   <method id="getTelNumRange" name="GET">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="dgName" style="template" type="sppfb:ObjNameType"
	 required="true" />
	 <param name="startTn" style="template" 
	 type="sppfb:NumberValType" required="true" />
	 <param name="endTn" style="template" 
	 type="sppfb:NumberValType" required="true" />
	</request>
	<response status="200">
	 <representation mediaType="application/xml" 
	 element="sppfr:TNR" />
	</response>
   </method>
   <method id="delTelNumRange" name="DELETE">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="dgName" style="template" type="sppfb:ObjNameType"
	 required="true" />
	 <param name="startTn" style="template" 
	 type="sppfb:NumberValType" required="true" />
	 <param name="endTn" style="template" 
	 type="sppfb:NumberValType" required="true" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" required="false" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" />
	</response>
   </method>
   <method id="saveTelNumRange" name="PUT">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <representation mediaType="application/xml" 
	 element="sppfr:TNR" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" required="true" />
	</response>
   </method>
  </resource>
  <resource id="RNResource" 
  path="/RN/rant/{rant}/dgName/{dgName}/rn/{rn}">
   <method id="getRoutingNumber" name="GET">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="dgName" style="template" type="sppfb:ObjNameType"
	 required="true" />
	 <param name="rn" style="template" type="sppfb:NumberValType"
	 required="true" />
	</request>
	<response status="200">
	 <representation mediaType="application/xml" 
	 element="sppfr:RN" />
	</response>
   </method>
   <method id="delRoutingNumber" name="DELETE">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="dgName" style="template" type="sppfb:ObjNameType"
	 required="true" />
	 <param name="rn" style="template" type="sppfb:NumberValType"
	 required="true" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" required="false" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" />
	</response>
   </method>
   <method id="saveRoutingNumber" name="PUT">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <representation mediaType="application/xml" 
	 element="sppfr:RN" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" required="true" />
	</response>
   </method>
  </resource>
  <resource id="UriPubIdResource"
  path="/UriPubId/rant/{rant}/dgName/{dgName}/uri/{uri}">
   <method id="getUriPubId" name="GET">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="dgName" style="template" type="sppfb:ObjNameType"
	 required="true" />
	 <param name="uri" style="template" type="xsd:anyURI"
	 required="true" />
	</request>
	<response status="200">
	 <representation mediaType="application/xml" 
	 element="sppfr:URIPubId" />
	</response>
   </method>
   <method id="delUriPubId" name="DELETE">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="dgName" style="template" type="sppfb:ObjNameType"
	 required="true" />
	 <param name="uri" style="template" type="xsd:anyURI"
	 required="true" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" required="true" />
	</response>
   </method>
   <method id="saveUriPubId" name="PUT">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <representation mediaType="application/xml" 
	 element="sppfr:URIPubId" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" required="true" />
	</response>
   </method>
  </resource>
  <resource id="DestGroupResource" 
  path="/DestGroup/rant/{rant}/dgName/{dgName}">
   <method id="getDestGroup" name="GET">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="dgName" style="template" type="sppfb:ObjNameType"
	 required="true" />
	</request>
	<response status="200">
	 <representation mediaType="application/xml" 
	 element="sppfr:DestGroup" />
	</response>
   </method>
   <method id="delDestGroup" name="DELETE">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="dgName" style="template" type="sppfb:ObjNameType"
	 required="true" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" required="true" />
	</response>
   </method>
   <method id="saveDestGroup" name="PUT">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType"
	 required="false" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <representation mediaType="application/xml" 
	 element="sppfr:DestGroup" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" required="true" />
	</response>
   </method>
  </resource>
  <resource id="SedGroupResource" 
  path="/SedGroup/rant/{rant}/name/{sedGrpName}">
   <method id="getSedGroup" name="GET">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="sedGrpName" style="template" 
	 type="sppfb:ObjNameType" required="true" />
	</request>
	<response status="200">
	 <representation mediaType="application/xml" 
	 element="sppfr:SedGroup" />
	</response>
   </method>
   <method id="delSedGroup" name="DELETE">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="sedGrpName" style="template" 
	 type="sppfb:ObjNameType" required="true" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" required="true" />
	</response>
   </method>
   <method id="saveSedGroup" name="PUT">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <representation mediaType="application/xml" 
	 element="sppfr:SedGroup" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" required="true" />
	</response>
   </method>
  </resource>
  <resource id="SedGroupOfferResource"
  path="/SedGrpOffr/rant/{rant}/sedGrpNam/{sedGrpNam}/offrTo/{offrTo}">
   <method id="getSedGroupOffer" name="GET">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="sedGrpNam" style="template" 
	 type="sppfb:ObjNameType" required="true" />
	 <param name="offrTo" style="template" type="sppfb:OrgIdType"
	 required="true" />
	</request>
	<response status="200">
	 <representation mediaType="application/xml" 
	 element="sppfr:SedGrpOffer" />
	</response>
   </method>
   <method id="delSedGroupOffer" name="DELETE">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="sedGrpNam" style="template" 
	 type="sppfb:ObjNameType" required="true" />
	 <param name="offrTo" style="template" type="sppfb:OrgIdType"
	 required="true" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" required="true" />
	</response>
   </method>
   <method id="saveSedGroupOffer" name="PUT">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <representation mediaType="application/xml" 
	 element="sppfr:SedGrpOffer" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" required="true" />
	</response>
   </method>
   <method id="acceptSedGroupOffer" name="POST">
	<request>
	 <param name="action" style="header" type="xsd:string" />
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="sedGrpNam" style="template" 
	 type="sppfb:ObjNameType" required="true" />
	 <param name="offrTo" style="template" type="sppfb:OrgIdType"
	 required="true" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" required="true" />
	</response>
   </method>
   <method id="rejectSedGroupOffer" name="POST">
	<request>
	 <param name="action" style="header" type="xsd:string" />
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	 <param name="clientTransId" style="query" 
	 type="sppfb:TransIdType" />
	 <param name="rant" style="template" type="sppfb:OrgIdType"
	 required="true" />
	 <param name="sedGrpNam" style="template" 
	 type="sppfb:ObjNameType" required="true" />
	 <param name="offrTo" style="template" type="sppfb:OrgIdType"
	 required="true" />
	</request>
	<response status="200">
	 <param name="clientTransId" style="header" 
	 type="sppfb:TransIdType" />
	 <param name="serverTransId" style="header" 
	 type="sppfb:TransIdType" required="true" />
	</response>
   </method>
  </resource>
  <resource id="ServerStatusResource" path="ServerStatus">
   <method id="getServerStatus" name="GET">
	<request>
	 <param name="minorVer" style="header" 
	 type="sppfb:MinorVerType" />
	</request>
	<response status="200">
	 <representation mediaType="application/xml" 
	 element="sppfr:SvcMenu" />
	</response>
   </method>
  </resource>
 </resources>
</application>
       ]]></artwork>
        </figure>
	  </t>
    </section>

    <section anchor="examples" title="SPP RESTful Protocol Examples">
      <t>This section shows examples of HTTP message exchange between two SIP Service 
      Providers (SSP) and a registry. The messages in this section are HTTP requests/responses
	  that may include XML content representing the SPPF objects defined in the framework document.
	  This section relies on the XML data structures defined in the base SPPF specification <xref target="I-D.draft-ietf-drinks-spp-framework"/>.  
      So refer to that document to understand XML object types embedded in these example messages.</t>

      <t>In this sample use case scenario, SSP1 and SSP2 provision 
      resource data in the registry and use SPPF constructs to selectively 
      share the SED groups. In the figure below, SSP2 has two ingress 
      SBE instances that are associated with the public identities that 
      SSP2 has the retail relationship with. Also, the two SBE instances 
      for SSP1 are used to show how to use SPPF to associate 
      route preferences for the destination ingress routes and exercise 
      greater control on outbound traffic to the peer's ingress SBEs.</t>

      <t>
        <figure title="">
          <artwork align="left">
            <![CDATA[
   ---------------+                      +------------------
                  |                      |            
              +------+               +------+
              | sbe1 |               | sbe2 |
              +------+               +------+
    SSP1          |                      |           SSP2
              +------+               +------+
              | sbe3 |               | sbe4 |
              +------+               +------+
   iana-en:111    |                      |     iana-en:222
   ---------------+                      +------------------
           |                                     |
           |                                     |
           | SPPF   +------------------+   SPPF  |
           +------->|     Registry     |<--------+
                    +------------------+
                        ]]>
          </artwork>
        </figure>
      </t>

      <section anchor="add_destgrp" title="Add Destination Group">
        <t>SSP2 adds a destination group to the registry for use later. The 
        SSP2 SPPF client sets a unique transaction identifier 'txn_1479' for 
        tracking purposes. The name of the destination group is set to DEST_GRP_SSP2_1</t>
        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
PUT /DestGroup/rant/iana-en:222/dgName/DEST_GRP_SSP2_1 \
     ?clientTransId=txn_1479 HTTP/1.1
...........
Content-Type: application/xml
Content-Length: 117

<DestGroup>
    <rant>iana-en:222</rant>
    <rar>iana-en:223</rar>
    <dgName>DEST_GRP_SSP2_1</dgName>
</DestGroup>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The registry processes the request and return a favorable 
        response confirming successful creation of the named 
        destination group. Also, besides returning a unique server transaction 
        identifier, Registry also returns the matching client transaction 
        identifier from the request message back to the SPPF client.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
HTTP/1.1 200 OK
...........
clientTransId: txn_1479
serverTransId: tx_12345
Content-Length: 0
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_sedrecs" title="Add SED Records">

        <t>SSP2 adds SED records in the form of ingress routes to the registry.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
PUT /SedRec/rant/iana-en:222/name/SED_SSP2_SBE2 \
         ?clientTransId=txn_1479 HTTP/1.1
.............
Content-Type: application/xml
Content-Length: 298

<NAPTR>
    <rant>iana-en:222</rant>
    <rar>iana-en:223</rar>
    <sedName>SED_SSP2_SBE2</sedName>
    <isInSvc>true</isInSvc>
    <order>10</order>
    <flags>u</flags>
    <svcs>E2U+sip</svcs>
    <regx>
     <ere>^(.*)$</ere>
     <repl>sip:\1@sbe2.ssp2.example.com</repl>
    </regx>
</NAPTR>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The registry returns a success response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
HTTP/1.1 200 OK
.............
clientTransId: txn_1479
serverTransId: tx_12345
Content-Length: 0
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_sedrecs_uritype" title="Add SED Records -- URIType">

        <t>SSP2 adds another SED record to the registry and makes use of URIType</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
PUT /SedRec/rant/iana-en:222/name/SED_SSP2_SBE4 \
           ?clientTransId=txn_1479 HTTP/1.1
............
Content-Type: application/xml
Content-Length: 204

<URI>
    <rant>iana-en:222</rant>
    <rar>iana-en:223</rar>
    <sedName>SED_SSP2_SBE4</sedName>
    <isInSvc>true</isInSvc>
    <ere>^(.*)$</ere>
    <uri>sip:\1;npdi@sbe4.ssp2.example.com</uri>
</URI>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>The registry returns a success response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
HTTP/1.1 200 OK
............
clientTransId: txn_1479
serverTransId: tx_12345
Content-Length: 0
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_sedgrp" title="Add SED Group">
        <t>SSP2 creates the grouping of SED records (e.g. ingress routes) and chooses higher precedence for SED_SSP2_SBE2 by setting a lower number for the &quot;priority&quot; attribute, a protocol agnostic precedence indicator.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
PUT /SedGroup/rant/iana-en:222/name/SED_SSP2_SBE4 \
           ?clientTransId=txn_1479 HTTP/1.1
............
Content-Type: application/xml
Content-Length:

<XML document>
              ]]>
            </artwork>
          </figure>
        </t>

        <t>To confirm successful processing of this request, registry returns a well-known result code '1000' to the SSP2 client.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
HTTP/1.1 200 OK
............
clientTransId: txn_1479
serverTransId: tx_12345
Content-Length: 0
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_pi_corclaim" title="Add Public Identity -- Successful COR claim">
        
        <t>SSP2 activates a TN public identity by associating it with a valid destination group. Further, SSP2 puts forth a claim that it is the carrier-of-record for the TN.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Assuming that the registry has access to TN authority data and it performs the required checks to verify that SSP2 is in fact the service provider of record for the given TN, the request is processed successfully. In the response message, the registry sets the value of &lt;cor&gt; to &quot;true&quot; in order to confirm SSP2 claim as the carrier of record and the &lt;corDate&gt; reflects the time when the carrier of record claim is processed.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_lrn" title="Add LRN">

        <t>If another entity that SSP2 shares session establishment information (e.g. routes) with has access to Number Portability data, it may choose to perform route lookups by routing number. Therefore, SSP2 associates a routing number to a destination group in order to facilitate ingress route discovery.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response to the SPPF client.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_tn_range" title="Add TN Range">
      
        <t>Next, SSP2 activates a block of ten thousand TNs and associate it to a destination group.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_tn_prefix" title="Add TN Prefix">
      
        <t>Next, SSP2 activates a block of ten thousand TNs using the TNPType structure and identifying a TN prefix.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_sed_grp_offer" title="Enable Peering -- SED Group Offer">

        <t>In order for SSP1 to complete session establishment for a destination TN where the target subscriber has a retail relationship with SSP2, it first requires an asynchronous bi-directional handshake to show mutual consent. To start the process, SSP2 initiates the peering handshake by offering SSP1 access to its SED group.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and confirms that the SSP1 will now have the opportunity to weigh in on the offer and either accept or reject it. The registry may employ out-of-band notification mechanisms for quicker updates to SSP1 so they can act faster, though this topic is beyond the scope of this document.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_sed_grp_offer_accept" title="Enable Peering -- SED Group Offer Accept">
        
        <t>SSP1 responds to the offer from SSP2 and agrees to have visibility to SSP2 session establishment information (e.g. ingress routes).</t>
        
        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry confirms that the request has been processed successfully. From this point forward, if SSP1 looks up a public identity through the query resolution server, 
		where the public identity is part of the destination group by way of "SED_GRP_SSP2_1" session establishment data association, SSP2 ingress SBE information will be shared with SSP1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="add_egress_rte" title="Add Egress Route">
        
        <t>SSP1 wants to prioritize all outbound traffic to the ingress route associated with the "SED_GRP_SSP2_1" SED Group record, through "sbe1.ssp1.example.com".</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Since peering has already been established, the request to add the egress route has been successfully completed.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

      </section>
<section anchor="sed_grp_offer_reject" title="Remove Peering -- SED Group Offer Reject">
        
        <t>SSP1 had earlier accepted to have visibility to SSP2 session establishment data. SSP1 now decides to no longer maintain this visibility and hence rejects the SED Group Offer.</t>
        
        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry confirms that the request has been processed successfully. From this point forward, if SSP1 looks up a public identity through the query resolution server, 
		where the public identity is part of the destination group by way of "SED_GRP_SSP2_1" session establishment data association, SSP2 ingress SBE information will NOT be shared with SSP1 and hence
		SSP2 ingress SBE will NOT be returned in the query response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

      </section>
      <section anchor="get_dest_grp" title="Get Destination Group">
        
        <t>SSP2 uses the 'spppGetRequest' operation to tally the last provisioned record for destination group DEST_GRP_SSP2_1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="get_pub_id" title="Get Public Identity">
        
        <t>SSP2 obtains the last provisioned record associated with a given TN.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="get_sed_grp_request" title="Get SED Group Request">

        <t>SSP2 obtains the last provisioned record for the SED group SED_GRP_SSP2_1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>
        
        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="get_sed_grp_offers_rqst" title="Get SED Group Offers Request">

        <t>SSP2 fetches the last provisioned SED group offer to the &lt;peeringOrg&gt; SSP1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry processes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="get_egress_rte" title="Get Egress Route">

        <t>SSP1 wants to verify the last provisioned record for the egress route called EGR_RTE_01.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="del_dest_grp" title="Delete Destination Group">

        <t>SSP2 initiates a request to delete the destination group DEST_GRP_SSP2_1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="del_pub_id" title="Delete Public Identity">

        <t>SSP2 chooses to de-activate the TN and remove it from the registry.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="del_sed_grp_rqst" title="Delete SED Group Request">

        <t>SSP2 removes the SED group called SED_GRP_SSP2_1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

      </section>

      <section anchor="del_sed_grp_offers_rqst" title="Delete SED Group Offers Request">

        <t>SSP2 no longer wants to share SED group SED_GRP_SSP2_1 with SSP1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response. Restoring this resource sharing will require a new SED group offer from SSP2 to SSP1 followed by a successful SED group accept request from SSP1.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        </section>

        <section anchor="del_egress_rte" title="Delete Egress Route">
          
          <t>SSP1 decides to remove the egress route with the label EGR_RTE_01.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

        <t>Registry completes the request successfully and returns a favorable response.</t>

        <t>
          <figure title="">
            <artwork align="left">
              <![CDATA[
TBD
              ]]>
            </artwork>
          </figure>
        </t>

      </section>
    </section>

    <section anchor="SecurityConsiderations" title="Security Considerations">
      <t>RESTful SPP Protocol is used to query and update session peering data and addresses, so
   the ability to access this protocol should be limited to users and
   systems that are authorized to query and update this data.  Because this 
   data is sent in both directions, it may not be sufficient for just the client 
   or user to be authenticated with the server.  The identity of the server 
   should also be authenticated by the client, which is often accomplished using 
   the TLS certificate exchange and validation described in <xref target="RFC2818"/>.  
   SPP Protocol messages may include sensitive information, routing data, lists of
   resolvable addresses, etc. So when used in a production setting and across non-secure 
   networks, SPP Protocol should only be used over communications channels that provide strong 
   encryption for data privacy.</t>

      <section anchor="IntegrityPrivacyAuthentication" title="Integrity, Privacy, and Authentication">
        <t>TBD</t>
      </section>

      <section anchor="Vulnerabilities" title="Vulnerabilities">
	   <t>The above protocols may have various vulnerabilities, and these may
	   be inherited by the RESTful SPP Protocol.  REST SPP Protocol itself may have vulnerabilities 
	   because an authorization model is not explicitly specified in the current 
	   specification.</t>
	   <t>
	   Sections 5 and 10.1 describe requirements for HTTPS support using TLS.  Non-anonymous TLS servers can optionally request a certificate from a TLS client; 
	   that option is not a requirement for this protocol.  This presents a denial of service risk in which unauthenticated clients can consume server CPU resources by creating TLS sessions. 
	   The risk is increased if the server supports client-initiated renegotiation. This risk can be mitigated by disabling client-initiated renegotiation on the server and by ensuring that other 
	   means (such as firewall access control lists) are used to restrict unauthenticated client access to servers.</t>
	   <t>In conjunction with the above, it is important that REST SPP Protocol implementations implement an authorization 
	   model that considers the source of each query or update request and 
	   determines whether it is reasonable to authorize that source to perform that
	   specific query or update.</t>
      </section>

      <section anchor="DeploymentEnvironmentSpecifics" title="Deployment Environment Specifics">
	   <t>Some deployments of REST SPP Protocol could choose to use transports
	   without encryption.  This presents vulnerabilities but could be
	   selected for deployments involving closed networks or debugging
	   scenarios.  However, the vulnerabilities of such a deployment could be a 
	   lack of integrity and privacy of the data transported in 
	   this type of deployment.</t>
      </section>
    </section>
 
    <section anchor="IANAConsiderations" title="IANA Considerations">
      <t>This document uses URNs to describe XML namespaces and XML schemas
      conforming to a registry mechanism described in <xref target="RFC3688"/>.</t>
      <t>URN assignments requested are:  urn:ietf:params:xml:ns:sppf:rest:1</t>
    </section>
 
    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>TBD</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
                &rfc2119;
                &rfc3688;
                &rfc5246;
                &rfc2617;
                &rfc2616;
                <reference anchor="I-D.draft-ietf-drinks-spp-framework">
                        <front>
                          <title>Session Peering Provisioning Framework </title>
    					  <author initials="K.C." surname="Cartwright"/>
    					  <author initials="V.B." surname="Bhatia"/>
						  <author initials="S.A." surname="Ali"/>
						  <author initials="D.S." surname="Schwartz"/>
    					
                       <date month="July" year="2012" />
                        </front>
                        <seriesInfo name="Internet-Draft" value="draft-ietf-drinks-spp-framework-02"/>
                        <format target="http://tools.ietf.org/html/draft-ietf-drinks-spp-framework-02" type="HTML" />
                </reference>
    </references>
    
    <references title="Informative References"> 
                &rfc2818; &rfc5321; 
				<reference anchor='W3C.REC-xml-20081126' target='http://www.w3.org/TR/2008/REC-xml-20081126'>
					<front>
						<title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>

						<author initials='C.' surname='Sperberg-McQueen' fullname='C. M. Sperberg-McQueen'>
							<organization />
						</author>

						<author initials='F.' surname='Yergeau' fullname='François Yergeau'>
							<organization />
						</author>

						<author initials='T.' surname='Bray' fullname='Tim Bray'>
							<organization />
						</author>

						<author initials='E.' surname='Maler' fullname='Eve Maler'>
							<organization />
						</author>

						<author initials='J.' surname='Paoli' fullname='Jean Paoli'>
							<organization />
						</author>

						<date month='November' day='26' year='2008' />
					</front>

					<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-xml-20081126' />
					<format type='HTML' target='http://www.w3.org/TR/2008/REC-xml-20081126' />
				</reference>
    </references>
  </back>
</rfc>