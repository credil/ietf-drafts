


Internet Engineering Task Force                                   W. Tan
Internet-Draft                                            Cloud Registry
Intended status: Standards Track                                G. Brown
Expires: September 13, 2013                               CentralNic Ltd
                                                                J. Gould
                                                          VeriSign, Inc.
                                                          March 12, 2013


  Launch Phase Mapping for the Extensible Provisioning Protocol (EPP)
                      draft-tan-epp-launchphase-07

Abstract

   This document describes an Extensible Provisioning Protocol (EPP)
   extension mapping for the provisioning and management of domain name
   applications during the launch of a domain name registry.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on September 13, 2013.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as



Tan, et al.            Expires September 13, 2013               [Page 1]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   described in the Simplified BSD License.


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1.  Conventions Used in This Document  . . . . . . . . . . . .  3
   2.  Object Attributes  . . . . . . . . . . . . . . . . . . . . . .  4
     2.1.  Application Identifier . . . . . . . . . . . . . . . . . .  4
     2.2.  Launch Phases  . . . . . . . . . . . . . . . . . . . . . .  4
     2.3.  Status Values  . . . . . . . . . . . . . . . . . . . . . .  5
       2.3.1.  State Transition . . . . . . . . . . . . . . . . . . .  7
     2.4.  Poll Messaging . . . . . . . . . . . . . . . . . . . . . .  8
     2.5.  Mark Validation Models . . . . . . . . . . . . . . . . . .  9
       2.5.1.  <launch:codeMark> element  . . . . . . . . . . . . . . 10
     2.6.  Mark . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
     2.7.  Digital Signature  . . . . . . . . . . . . . . . . . . . . 11
       2.7.1.  <smd:signedMark> element . . . . . . . . . . . . . . . 11
       2.7.2.  <smd:encodedSignedMark> element  . . . . . . . . . . . 11
   3.  EPP Command Mapping  . . . . . . . . . . . . . . . . . . . . . 11
     3.1.  EPP <check> Command  . . . . . . . . . . . . . . . . . . . 12
     3.2.  EPP <info> Command . . . . . . . . . . . . . . . . . . . . 16
     3.3.  EPP <create> Command . . . . . . . . . . . . . . . . . . . 20
       3.3.1.  Sunrise Create Form  . . . . . . . . . . . . . . . . . 20
       3.3.2.  Claims Create Form . . . . . . . . . . . . . . . . . . 26
     3.4.  EPP <update> Command . . . . . . . . . . . . . . . . . . . 28
     3.5.  EPP <delete> Command . . . . . . . . . . . . . . . . . . . 30
     3.6.  EPP <renew> Command  . . . . . . . . . . . . . . . . . . . 31
     3.7.  EPP <transfer> Command . . . . . . . . . . . . . . . . . . 31
   4.  Formal Syntax  . . . . . . . . . . . . . . . . . . . . . . . . 32
     4.1.  Launch Schema  . . . . . . . . . . . . . . . . . . . . . . 32
   5.  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 38
   6.  Change History . . . . . . . . . . . . . . . . . . . . . . . . 38
     6.1.  Change from 00 to 01 . . . . . . . . . . . . . . . . . . . 38
     6.2.  Change from 01 to 02 . . . . . . . . . . . . . . . . . . . 38
     6.3.  Change from 02 to 03 . . . . . . . . . . . . . . . . . . . 39
     6.4.  Change from 03 to 04 . . . . . . . . . . . . . . . . . . . 39
     6.5.  Change from 04 to 05 . . . . . . . . . . . . . . . . . . . 39
     6.6.  Change from 05 to 06 . . . . . . . . . . . . . . . . . . . 39
     6.7.  Change from 06 to 07 . . . . . . . . . . . . . . . . . . . 40
   7.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 40
   8.  Security Considerations  . . . . . . . . . . . . . . . . . . . 40
   9.  Normative References . . . . . . . . . . . . . . . . . . . . . 41
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 41







Tan, et al.            Expires September 13, 2013               [Page 2]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


1.  Introduction

   This document describes an extension mapping for version 1.0 of the
   Extensible Provisioning Protocol (EPP) [RFC5730].  This EPP mapping
   specifies a flexible schema that can be used to implement several
   common use cases related to the provisioning and management of domain
   name applications during the launch of a domain name registry.

   It is typical for domain registries to operate in special modes
   during their initial launch to facilitate allocation of domain names,
   often according to special rules.  This document uses the term
   "launch phase" and the shorter form "launch" to refer to such a
   period.

   The EPP domain name mapping [RFC5731] is designed for the steady-
   state operation of a registry.  During a launch period, the model in
   place may be different from what is defined in EPP domain name
   mapping [RFC5731].  For example, registries often accept multiple
   applications for the same domain name during the "Sunrise" launch
   phase, referred to as a Launch Application.  A Launch Registration
   refers to a registration made during a launch phase when the server
   uses a "first-come, first-served" model.  Even in a "first-come,
   first-served" model, additional steps and information might be
   required to support an application, such as trademark information.
   In addition, the Proposed Trademark Claims Model [1] defines a
   registry interface for the Trademark Claims or "claims" launch phase
   that includes support for presenting a Trademark Claims Notice to the
   Registrant.  This document proposes an extension to the domain name
   extension in order to unambiguously manage the various launch phases
   known.

1.1.  Conventions Used in This Document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].

   XML is case sensitive.  Unless stated otherwise, XML specifications
   and examples provided in this document MUST be interpreted in the
   character case presented in order to develop a conforming
   implementation.

   "launch-1.0" is used as an abbreviation for
   "urn:ietf:params:xml:ns:launch-1.0".  The XML namespace prefix
   "launch" is used, but implementations MUST NOT depend on it and
   instead employ a proper namespace-aware XML parser and serializer to
   interpret and output the XML documents.




Tan, et al.            Expires September 13, 2013               [Page 3]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   "signedMark-1.0" is used as an abbreviation for
   "urn:ietf:params:xml:ns:signedMark-1.0" that is defined in
   [draft-lozano-smd].  The XML namespace prefix "smd" is used, but
   implementations MUST NOT depend on it and instead employ a proper
   namespace-aware XML parser and serializer to interpret and output the
   XML documents.

   "mark-1.0" is used as an abbreviation for
   "urn:ietf:params:xml:ns:mark-1.0" that is defined in
   [draft-lozano-smd].  The XML namespace prefix "mark" is used, but
   implementations MUST NOT depend on it and instead employ a proper
   namespace-aware XML parser and serializer to interpret and output the
   XML documents.


2.  Object Attributes

   This extension adds additional elements to the EPP domain name
   mapping [RFC5731].  Only those new elements are described here.

2.1.  Application Identifier

   Servers MAY allow multiple applications, referred to as a Launch
   Application, of the same domain name during its launch phase
   operations.  Upon receiving a valid request to create a Launch
   Application, the server MUST create an application object
   corresponding to the request, assign an application identifier for
   the Launch Application, set the [RFC5731] pendingCreate status, and
   return the application identifier to the client with the <launch:
   applicationID> element.  In order to facilitate correlation, all
   subsequent launch operations on the Launch Application MUST be
   qualified by the previously assigned application identifier using the
   <launch:applicationID> element.

2.2.  Launch Phases

   The server MAY support multiple launch phases sequentially or
   simultaneously.  The <launch:phase> element MUST be included by the
   client to define the target launch phase of the command.

   The following launch phase values are defined:
   sunrise  The phase during which trademark holders can submit
      registrations or applications with trademark information that can
      be validated by the server.







Tan, et al.            Expires September 13, 2013               [Page 4]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   landrush  A post-Sunrise phase when non-trademark holders are allowed
      to register domain names with steps taken to address a large
      volume of initial registrations.
   claims1  The Trademark Claims Phase 1, as defined by Trademark
      Clearinghouse model, in which a full, detailed Claims Notice must
      be displayed to prospective registrants of domain names that match
      trademarks.
   claims2  The Trademark Claims Phase 2, as defined by Trademark
      Clearinghouse model, in which a short, educational Claims Notice
      must be displayed to prospective registrants of domain names that
      match trademarks that have opted in.
   open  A post-launch phase that is also referred to as "steady state".
      Servers MAY require additional trademark protection during this
      phase.
   custom  A custom server launch phase that is defined using the "name"
      attribute.

   For extensibility, the <launch:phase> element includes an OPTIONAL
   "name" attribute that can define a sub-phase or the full name of the
   phase when the <launch:phase> element has the "custom" value.  For
   example, the "claims1" launch phase could have two sub-phases that
   include "landrush" and "open".

2.3.  Status Values

   A Launch Application object MAY have a status value.  The <launch:
   status> element is used to convey extended status pertaining to the
   application object, beyond what is specified in the object mapping
   for this application object.

   The following status values are defined using the required "s"
   attribute:
   pendingValidation:  The initial state of a newly-created application
      object.  The application requires validation, but the validation
      process has not yet completed.
   validated:  The application meets relevant registry rules.
   invalid:  The application does not validate according to registry
      rules.
   pendingAllocation:  The allocation of the application is pending
      based on the results of some out-of-band process (for example, an
      auction).
   allocated:  One of two possible end states of an application object;
      the object corresponding to the application has been provisioned.
   rejected:  The other possible end state; the object was not
      provisioned.






Tan, et al.            Expires September 13, 2013               [Page 5]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   custom:  A custom status that is defined using the "name" attribute.

   Each status value MAY be accompanied by a string of human-readable
   text that describes the rationale for the status applied to the
   object.  The OPTIONAL "lang" attribute MAY be present to identify the
   language if the negotiated value is something other than the default
   value of "en" (English).

   For extensibility the <launch:status> element includes an OPTIONAL
   "name" attribute that can define a sub-status or the full name of the
   status when the status value is "custom".  The server SHOULD NOT use
   the "custom" status value.

   Certain status values MAY be combined.  For example, an application
   may be both invalid and rejected.  Additionally, certain statuses MAY
   be skipped.  For example, an application MAY immediately start at the
   "allocated" status or an application MAY skip the "pendingAllocation"
   status if the server uses a "first-come, first served" model.  If the
   launch phase does not require validation of a request, an application
   MAY immediately skip to "pendingAllocation".  If the <domain:create>
   command processes a request synchronously without the use of an
   intermediate application, then an Application Identifier
   (Section 2.1) is not needed along with the application status.




























Tan, et al.            Expires September 13, 2013               [Page 6]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


2.3.1.  State Transition


                                          | request
                                          |
                                          v
                                +-------------------+
                                |                   |
                                | pendingValidation |
                                |                   |
                                +---------+---------+
                                          |
                                          |
                              +-----------+-----------+
                              |                       |
                              |                       |
                              v                       v
                        +-----------+            +---------+
                        |           |            |         |
                        | validated |            | invalid |
                        |           |            |         |
                        +-----+-----+            +----+----+
                              |                       |
                              |                       |
                              v                       |
                    +-------------------+             |
                    |                   |             |
                    | pendingAllocation |             |
                    |                   |             |
                    +-------------------+             |
                              |                       |
                              |                       |
                              +-----------------------+
                              |                       |
                              |                       |
                              v                       v
                         +---------+             +--------+
                        /           \           /          \
                        | allocated |           | rejected |
                        \           /           \          /
                         +---------+             +--------+


                                 Figure 1







Tan, et al.            Expires September 13, 2013               [Page 7]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


2.4.  Poll Messaging

   A Launch Application is handled as a domain name of [RFC5731] in
   "pendingCreate" status, with the Launch Application status values
   defined in Section 2.3.  As a Launch Application transitions between
   the status values defined in Section 2.3, the server SHOULD insert
   poll messages, per [RFC5730], for the applicable intermediate
   statuses, including the "pendingValidation", "validated",
   "pendingAllocation, and "invalid" statuses, using the <domain:
   infData> element with the <launch:infData> extension.  The server
   MUST insert a <domain:panData> poll message, per [RFC5731], with the
   <launch:infData> extension for the final statuses, including the
   "allocated" and "rejected" statuses.

   The following is an example poll message for a Launch Application
   that has transitioned to the "pendingAllocation" state.

   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <response>
       <result code="1301">
         <msg>Command completed successfully; ack to dequeue</msg>
       </result>
       <msgQ count="5" id="12345">
         <qDate>2013-04-04T22:01:00.0Z</qDate>
         <msg>Application pendingAllocation.</msg>
       </msgQ>
       <resData>
         <domain:infData
          xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
           <domain:name>example.tld</domain:name>
           ...
         </domain:infData>
       </resData>
       <extension>
         <launch:infData
          xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
           <launch:phase>sunrise</launch:phase>
             <launch:applicationID>abc123</launch:applicationID>
             <launch:status s="pendingAllocation"/>
         </launch:infData>
       </extension>
       <trID>
         <clTRID>ABC-12345</clTRID>
         <svTRID>54322-XYZ</svTRID>
       </trID>
     </response>
   </epp>



Tan, et al.            Expires September 13, 2013               [Page 8]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   The following is an example <domain:panData> poll message for an
   "allocated" Launch Application.

   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <response>
       <result code="1301">
         <msg>Command completed successfully; ack to dequeue</msg>
       </result>
       <msgQ count="5" id="12345">
         <qDate>2013-04-04T22:01:00.0Z</qDate>
         <msg>Application successfully allocated.</msg>
       </msgQ>
       <resData>
         <domain:panData
          xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
           <domain:name paResult="1">example.tld</domain:name>
           <domain:paTRID>
             <clTRID>ABC-12345</clTRID>
             <svTRID>54321-XYZ</svTRID>
           </domain:paTRID>
           <domain:paDate>2013-04-04T22:00:00.0Z</domain:paDate>
         </domain:panData>
       </resData>
       <extension>
         <launch:infData
          xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
           <launch:phase>sunrise</launch:phase>
             <launch:applicationID>abc123</launch:applicationID>
             <launch:status s="allocated"/>
         </launch:infData>
       </extension>
       <trID>
         <clTRID>BCD-23456</clTRID>
         <svTRID>65432-WXY</svTRID>
       </trID>
     </response>
   </epp>

2.5.  Mark Validation Models

   A server MUST support at least one of the following models for
   validating trademark information:








Tan, et al.            Expires September 13, 2013               [Page 9]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   code  Use of a mark code by itself to validate that the mark matches
      the domain name.  This model is supported using the <launch:
      codeMark> element with just the <launch:code> element.
   mark  The mark information is passed without any other validation
      element.  The server will use some custom form of validation to
      validate that the mark information is authentic.  This model is
      supported using the <launch:codeMark> element with just the <mark:
      mark> (Section 2.6) element.
   code with mark:  A code is used along with the mark information by
      the server to validate the mark utilizing an external party.  The
      code represents some form of secret that matches the mark
      information passed.  This model is supported using the <launch:
      codeMark> element that contains both the <launch:code> and the
      <mark:mark> (Section 2.6) elements.
   signed mark:  The mark information is digitally signed as described
      in the Digital Signature (Section 2.7) section.  The digital
      signature can be directly validated by the server using the public
      key of the external party that created the signed mark using its
      private key.  This model is supported using the <smd:signedMark>
      (Section 2.7.1) and <smd:encodedSignedMark> (Section 2.7.2)
      elements.

   More than one <launch:codeMark>, <smd:signedMark> (Section 2.7.1), or
   <smd:encodedSignedMark> (Section 2.7.2) element MAY be specified.
   The maximum number of marks per domain name is up to server policy.

2.5.1.  <launch:codeMark> element

   The <launch:codeMark> element that is used by the "code", "mark", and
   "code with mark" validation models, has the following child elements:

   <launch:code>:  OPTIONAL mark code used to validate the <mark:mark>
      (Section 2.6) information.  The mark code is be a mark-specific
      secret that the server can verify against a third party.
   <mark:mark>:  OPTIONAL mark information with child elements defined
      in the Mark (Section 2.6) section.

   The following is an example <launch:codeMark> element with both a
   <launch:code> and <mark:mark> (Section 2.6) element.

   <launch:codeMark>
     <launch:code>49FD46E6C4B45C55D4AC</launch:code>
     <mark:mark xmlns:mark="urn:ietf:params:xml:ns:mark-1.0">
       ...
     </mark:mark>
   </launch:codeMark>





Tan, et al.            Expires September 13, 2013              [Page 10]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


2.6.  Mark

   A <mark:mark> element describes an applicant's prior right to a given
   domain name that is used with the "mark", "mark with code", and the
   "signed mark" validation models.  The <mark:mark> element is defined
   in [draft-lozano-smd].  A new mark format can be supported by
   creating a new XML schema for the mark that has an element that
   substitutes for the <mark:abstractMark> element from
   [draft-lozano-smd].

2.7.  Digital Signature

   Digital signatures MAY be used by the server to validate either the
   mark information, when using the "signed mark" validation model with
   the <smd:signedMark> (Section 2.7.1) element or the <smd:
   encodedSignedMark> (Section 2.7.2) element.

2.7.1.  <smd:signedMark> element

   The <smd:signedMark> element contains the digitally signed mark
   information.  The <smd:signedMark> element is defined in
   [draft-lozano-smd].  A new signed mark format can be supported by
   creating a new XML schema for the signed mark that has an element
   that substitutes for the <smd:abstractSignedMark> element from
   [draft-lozano-smd].

2.7.2.  <smd:encodedSignedMark> element

   The <smd:encodedSignedMark> element contains an encoded form of the
   digitally signed <smd:signedMark> (Section 2.7.1) element.  The <smd:
   encodedSignedMark> element is defined in [draft-lozano-smd].  A new
   encoded signed mark format can be supported by creating a new XML
   schema for the encoded signed mark that has an element that
   substitutes for the <smd:encodedSignedMark> element from
   [draft-lozano-smd].


3.  EPP Command Mapping

   A detailed description of the EPP syntax and semantics can be found
   in the EPP core protocol specification [RFC5730].  The command
   mappings described here are specifically for use in the Launch Phase
   Extension.

   This mapping is designed to be flexible, requiring only a minimum set
   of required elements.

   While it is meant to serve several use cases, it does not prescribe



Tan, et al.            Expires September 13, 2013              [Page 11]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   any interpretation by the client or server.  Such processing is
   typically highly policy-dependent and therefore specific to
   implementations.

   Operations on application objects are done via one or more of the
   existing EPP verbs defined in the EPP domain name mapping [RFC5731].
   Registries may choose to support a subset of the operations.

3.1.  EPP <check> Command

   This extension defines additional elements to extend the EPP <check>
   command and response to be used in conjunction with the EPP domain
   name mapping [RFC5731].

   This extension defines a new command called the Claims Check Command
   that is used to determine whether or not there are any matching
   trademarks, in the specified launch phase, for each domain name
   passed in the command.  The availability check information defined in
   the EPP domain name mapping [RFC5731] MUST NOT be returned for the
   Claims Check Command.

   Instead of returning whether the domain name is available, the Claims
   Check Command will return whether or not at least one matching
   trademark exists for the domain name.  If there is at least one
   matching trademark that exists for the domain name, a <launch:
   claimKey> element is returned.  The client may then use the value of
   the <launch:claimKey> element to obtain information needed to
   generate the trademark Claims Notice from a third-party trademark
   validator such as the Trademark Clearinghouse (TMCH).  The third
   party trademark validator should also return a unique notice
   identifier that can be passed in the <launch:noticeID> element of the
   extension to the Create Command (Section 3.3).

   The <domain:name> elements in the EPP <check> command of EPP domain
   name mapping [RFC5731] define the domain names to check for matching
   trademarks.  The <launch:check> element contains the following child
   elements:

   <launch:phase>  The launch phase, with a value of either "claims1" or
       "claims2" to indicate that the command is a Claims Check Command.
       The "claims1" Claims Check Command will match the <domain:name>
       against the full list of trademark labels.  The "claims2" Claims
       Check Command will match the <domain:name> against the list of
       trademark labels that opted into the "claims2" launch phase.







Tan, et al.            Expires September 13, 2013              [Page 12]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   Example Claims Check command using the <check> domain command and the
   <launch:check> extension to determine if "example1.tld" and
   "example2.tld" have any matching trademarks during the "claims1"
   launch phase:

   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <command>
      <check>
       <domain:check
        xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
         <domain:name>example1.tld</domain:name>
         <domain:name>example2.tld</domain:name>
       </domain:check>
      </check>
      <extension>
       <launch:check
        xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
         <launch:phase>claims1</launch:phase>
       </launch:check>
      </extension>
      <clTRID>ABC-12345</clTRID>
     </command>
   </epp>

   Example Claims Check Command using the <check> domain command and the
   <launch:check> extension to determine if "example3.tld" and
   "example4.tld" have any matching trademarks that opted into the
   "claims2" launch phase:

   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <command>
      <check>
       <domain:check
        xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
         <domain:name>example3.tld</domain:name>
         <domain:name>example4.tld</domain:name>
       </domain:check>
      </check>
      <extension>
       <launch:check
        xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
         <launch:phase>claims2</launch:phase>
       </launch:check>
      </extension>
      <clTRID>ABC-12345</clTRID>
     </command>



Tan, et al.            Expires September 13, 2013              [Page 13]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   </epp>

   If the <check> command has been processed successfully, the EPP
   <resData> element MUST contain a child <launch:chkData> element that
   identifies the launch namespace.  The <launch:chkData> element
   contains the following child elements:

   <launch:phase>  The launch phase, with a value of either "claims1" or
       "claims2", which matches the associated Claims Check Command
       <launch:phase>.
   <launch:cd>  One or more <launch:cd> elements that contain the
       following child elements:

       <launch:name>  Contains the fully qualified name of the queried
           domain name.  This element MUST contain an "exists" attribute
           whose value indicates if a matching trademark exists for the
           domain name.  A value of "1" (or "true") means that a
           matching trademark does exist for the claims launch phase.  A
           value of "0" (or "false") means that a matching trademark
           does not exist.
       <launch:claimKey>  An OPTIONAL claim key that MAY be passed to a
           third-party trademark validator such as the Trademark
           Clearinghouse (TMCH) for querying the information needed to
           generate a Trademark Claims Notice.  The <launch:claimKey> is
           used as the key for the query in place of the domain name to
           securely query the service without using a well-known value
           like a domain name.
























Tan, et al.            Expires September 13, 2013              [Page 14]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   Example Claims Check response when no matching trademarks are found
   for the domain name example1.tld and matching trademarks are found
   for the domain name example2.tld for the "claims1" launch phase:

   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <response>
       <result code="1000">
        <msg>Command completed successfully</msg>
       </result>
       <resData>
        <launch:chkData
         xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
         <launch:phase>claims1</launch:phase>
         <launch:cd>
           <launch:name exists="0">example1.tld</launch:name>
         </launch:cd>
         <launch:cd>
           <launch:name exists="1">example2.tld</launch:name>
           <launch:claimKey>abc123</launch:claimKey>
         </launch:cd>
        </launch:chkData>
       </resData>
       <trID>
        <clTRID>ABC-12345</clTRID>
        <svTRID>54321-XYZ</svTRID>
       </trID>
     </response>
   </epp>






















Tan, et al.            Expires September 13, 2013              [Page 15]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   Example Claims Check response when no matching trademarks are found
   for the domain name example3.tld and matching trademarks are found
   for the domain name example4.tld for the "claims2" launch phase:

   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <response>
       <result code="1000">
        <msg>Command completed successfully</msg>
       </result>
       <resData>
        <launch:chkData
         xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
         <launch:phase>claims2</launch:phase>
         <launch:cd>
           <launch:name exists="0">example3.tld</launch:name>
         </launch:cd>
         <launch:cd>
           <launch:name exists="1">example4.tld</launch:name>
           <launch:claimKey>abc123</launch:claimKey>
         </launch:cd>
        </launch:chkData>
       </resData>
       <trID>
        <clTRID>ABC-12345</clTRID>
        <svTRID>54321-XYZ</svTRID>
       </trID>
     </response>
   </epp>

3.2.  EPP <info> Command

   This extension defines additional elements to extend the EPP <info>
   command and response to be used in conjunction with the EPP domain
   name mapping [RFC5731].

   The EPP <info> command is used to retrieve information for a launch
   phase registration or application.  The Application Identifier
   (Section 2.1) returned in the <launch:creData> element of the create
   response (Section 3.3) is used for retrieving information for a
   Launch Application.  A <launch:info> element is sent along with the
   regular <info> domain command.  The <launch:info> element includes an
   OPTIONAL "includeMark" boolean attribute, with a default value of
   "false", to indicate whether or not to include the mark in the
   response.  The <launch:info> element contains the following child
   elements:





Tan, et al.            Expires September 13, 2013              [Page 16]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   <launch:phase>  The phase during which the application or
       registration was submitted or is associated with.  Server policy
       defines the phases that are supported.
   <launch:applicationID>  OPTIONAL application identifier of the Launch
       Application.

   Example <info> domain command with the <launch:info> extension to
   retrieve information for the sunrise application for example.tld and
   application identifier "abc123":

   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <command>
      <info>
       <domain:info
        xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
         <domain:name>example.tld</domain:name>
       </domain:info>
      </info>
      <extension>
       <launch:info
        xmlns:launch="urn:ietf:params:xml:ns:launch-1.0"
          includeMark="true">
         <launch:phase>sunrise</launch:phase>
         <launch:applicationID>abc123</launch:applicationID>
       </launch:info>
      </extension>
      <clTRID>ABC-12345</clTRID>
     </command>
   </epp>





















Tan, et al.            Expires September 13, 2013              [Page 17]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   Example <info> domain command with the <launch:info> extension to
   retrieve information for the sunrise registration for example.tld:

   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <command>
      <info>
       <domain:info
        xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
         <domain:name>example.tld</domain:name>
       </domain:info>
      </info>
      <extension>
       <launch:info
        xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
         <launch:phase>sunrise</launch:phase>
       </launch:info>
      </extension>
      <clTRID>ABC-12345</clTRID>
     </command>
   </epp>

   If the query was successful, the server replies with a <launch:
   infData> element along with the regular EPP <resData>.  The <launch:
   infData> contains the following child elements:

   <launch:phase>  The phase during which the application was submitted,
       or is associated with, that matches the associated <info> command
       <launch:phase>.
   <launch:applicationID>  OPTIONAL Application Identifier of the Launch
       Application.
   <launch:status>  OPTIONAL status of the Launch Application using one
       of the supported status values (Section 2.3).
   <mark:mark>  Zero or more <mark:mark> (Section 2.6) elements.

















Tan, et al.            Expires September 13, 2013              [Page 18]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   Example <info> domain response using the <launch:infData> extension
   with the mark information:

   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <response>
       <result code="1000">
         <msg>Command completed successfully</msg>
       </result>
       <resData>
         <domain:infData
          xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
           <domain:name>example.tld</domain:name>
           <domain:roid>EXAMPLE1-REP</domain:roid>
           <domain:status s="pendingCreate"/>
           <domain:registrant>jd1234</domain:registrant>
           <domain:contact type="admin">sh8013</domain:contact>
           <domain:contact type="tech">sh8013</domain:contact>
           <domain:clID>ClientX</domain:clID>
           <domain:crID>ClientY</domain:crID>
           <domain:crDate>2012-04-03T22:00:00.0Z</domain:crDate>
           <domain:authInfo>
             <domain:pw>2fooBAR</domain:pw>
           </domain:authInfo>
         </domain:infData>
       </resData>
       <extension>
         <launch:infData
          xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
           <launch:phase>sunrise</launch:phase>
             <launch:applicationID>abc123</launch:applicationID>
             <launch:status s="pendingValidation"/>
             <mark:mark
               xmlns:mark="urn:ietf:params:xml:ns:mark-1.0">
                ...
            </mark:mark>
         </launch:infData>
       </extension>
       <trID>
         <clTRID>ABC-12345</clTRID>
         <svTRID>54321-XYZ</svTRID>
       </trID>
     </response>
   </epp>







Tan, et al.            Expires September 13, 2013              [Page 19]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


3.3.  EPP <create> Command

   There are two forms of the extension to the EPP <create> command that
   are dependent on the supported launch phases (Section 2.2) as defined
   below:

   sunrise  The EPP <create> command with the "sunrise" launch phase is
      used to submit a registration with trademark information that can
      be verified by the server with the <domain:name> value.  The
      Sunrise Create Form (Section 3.3.1) is used for the "sunrise"
      launch phase.  Optionally, the server can support multiple
      overlapping applications that are chosen asynchronously with a
      server generated Application Identifier (Section 2.1) for later
      reference.
   landrush  The EPP <create> command with the "landrush" launch phase
      is undefined but the form supported is up to server policy.
   claims1  The EPP <create> command with the "claims1" launch phase is
      used to pass the information associated with the presentation and
      acceptance of the "claims1" Claims Notice.  The Claims Create Form
      (Section 3.3.2) is used for the "claims1" launch phase.
   claims2  The EPP <create> command with the "claims2" launch phase is
      used to pass the information associated with the presentation of
      the "claims2" Claims Notice.  The Claims Create Form
      (Section 3.3.2) is used for the "claims2" launch phase.
   open  The EPP <create> command with the "open" launch phase is
      undefined but the form supported is up to server policy.
   custom  The EPP <create> command with the "custom" launch phase is
      undefined but the form supported is up to server policy.

3.3.1.  Sunrise Create Form

   The Sunrise Create Form of the extension to the EPP domain name
   mapping [RFC5731] includes the verifiable trademark information that
   the server uses to match against the domain name to authorize the
   domain create.  A server MUST support one of four models in Claim
   Validation Models (Section 2.5) to verify the trademark information
   passed by the client.

   A <launch:create> element is sent along with the regular <create>
   domain command.  The <launch:create> element contains the following
   child elements:

   <launch:phase>  The identifier for the launch phase.
   <launch:codeMark> or <smd:signedMark> or <smd:encodedSignedMark>







Tan, et al.            Expires September 13, 2013              [Page 20]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


       <launch:codeMark>  Zero or more <launch:codeMark> elements.  The
           <launch:codeMark> child elements are defined in the <launch:
           codeMark> element (Section 2.5.1) section.
       <smd:signedMark>  Zero or more <smd:signedMark> elements.  The
           <smd:signedMark> child elements are defined in the <smd:
           signedMark> element (Section 2.7.1) section.
       <smd:encodedSignedMark>  Zero or more <smd:encodedSignedMark>
           elements.  The <smd:encodedSignedMark> child elements are
           defined in the <smd:encodedSignedMark> element
           (Section 2.7.2) section.

   The following is an example <create> domain command using the
   <launch:create> extension, following the "code" validation model,
   with multiple sunrise codes:

   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <command>
       <create>
         <domain:create
          xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
           <domain:name>example.tld</domain:name>
           <domain:registrant>jd1234</domain:registrant>
           <domain:contact type="admin">sh8013</domain:contact>
           <domain:contact type="tech">sh8013</domain:contact>
           <domain:authInfo>
             <domain:pw>2fooBAR</domain:pw>
           </domain:authInfo>
         </domain:create>
       </create>
       <extension>
         <launch:create
          xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
           <launch:phase>sunrise</launch:phase>
           <launch:codeMark>
             <launch:code>49FD46E6C4B45C55D4AC</launch:code>
           </launch:codeMark>
           <launch:codeMark>
             <launch:code>49FD46E6C4B45C55D4AD</launch:code>
           </launch:codeMark>
           <launch:codeMark>
             <launch:code>49FD46E6C4B45C55D4AE</launch:code>
           </launch:codeMark>
        </launch:create>
       </extension>
       <clTRID>ABC-12345</clTRID>
     </command>
   </epp>



Tan, et al.            Expires September 13, 2013              [Page 21]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   The following is an example <create> domain command using the
   <launch:create> extension, following the "mark" validation model,
   with the mark information:

   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <command>
       <create>
         <domain:create
          xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
           <domain:name>exampleone.tld</domain:name>
           <domain:registrant>jd1234</domain:registrant>
           <domain:contact type="admin">sh8013</domain:contact>
           <domain:contact type="tech">sh8013</domain:contact>
           <domain:authInfo>
             <domain:pw>2fooBAR</domain:pw>
           </domain:authInfo>
         </domain:create>
       </create>
       <extension>
         <launch:create
          xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
           <launch:phase>sunrise</launch:phase>
           <launch:codeMark>
             <mark:mark
               xmlns:mark="urn:ietf:params:xml:ns:mark-1.0">
               ...
             </mark:mark>
           </launch:codeMark>
         </launch:create>
       </extension>
       <clTRID>ABC-12345</clTRID>
     </command>
   </epp>

















Tan, et al.            Expires September 13, 2013              [Page 22]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   The following is an example <create> domain command using the
   <launch:create> extension, following the "code with mark" validation
   model, with a code and mark information:

   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <command>
       <create>
         <domain:create
          xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
           <domain:name>example.tld</domain:name>
           <domain:registrant>jd1234</domain:registrant>
           <domain:contact type="admin">sh8013</domain:contact>
           <domain:contact type="tech">sh8013</domain:contact>
           <domain:authInfo>
             <domain:pw>2fooBAR</domain:pw>
           </domain:authInfo>
         </domain:create>
       </create>
       <extension>
         <launch:create
          xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
           <launch:phase>sunrise</launch:phase>
           <launch:codeMark>
             <launch:code>49FD46E6C4B45C55D4AC</launch:code>
             <mark:mark
              xmlns:mark="urn:ietf:params:xml:ns:mark-1.0">
              ...
             </mark:mark>
           </launch:codeMark>
         </launch:create>
       </extension>
       <clTRID>ABC-12345</clTRID>
     </command>
   </epp>
















Tan, et al.            Expires September 13, 2013              [Page 23]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   The following is an example <create> domain command using the
   <launch:create> extension, following the "signed mark" validation
   model, with the signed mark information:

   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <command>
       <create>
         <domain:create
          xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
           <domain:name>exampleone.tld</domain:name>
           <domain:registrant>jd1234</domain:registrant>
           <domain:contact type="admin">sh8013</domain:contact>
           <domain:contact type="tech">sh8013</domain:contact>
           <domain:authInfo>
             <domain:pw>2fooBAR</domain:pw>
           </domain:authInfo>
         </domain:create>
       </create>
       <extension>
         <launch:create
          xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
           <launch:phase>sunrise</launch:phase>
           <smd:signedMark id="signedMark"
            xmlns:smd="urn:ietf:params:xml:ns:signedMark-1.0">
            ...
           </smd:signedMark>
         </launch:create>
       </extension>
       <clTRID>ABC-12345</clTRID>
     </command>
   </epp>



















Tan, et al.            Expires September 13, 2013              [Page 24]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   The following is an example <create> domain command using the
   <launch:create> extension, following the "signed mark" validation
   model, with the base64 encoded signed mark information:

   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <command>
       <create>
         <domain:create
          xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
           <domain:name>exampleone.tld</domain:name>
           <domain:registrant>jd1234</domain:registrant>
           <domain:contact type="admin">sh8013</domain:contact>
           <domain:contact type="tech">sh8013</domain:contact>
           <domain:authInfo>
             <domain:pw>2fooBAR</domain:pw>
           </domain:authInfo>
         </domain:create>
       </create>
       <extension>
         <launch:create
          xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
           <launch:phase>sunrise</launch:phase>
           <smd:encodedSignedMark
            xmlns:smd="urn:ietf:params:xml:ns:signedMark-1.0">
            ...
           </smd:encodedSignedMark>
         </launch:create>
       </extension>
       <clTRID>ABC-12345</clTRID>
     </command>
   </epp>

   If the create was successful, the server MAY reply with the <launch:
   creData> element along with the regular EPP <resData> to indicate the
   server generated Application Identifier (Section 2.1), when multiple
   applications of a given domain name is supported; otherwise no
   extension is included with the regular EPP <resData>.  The <launch:
   creData> element contains the following child elements:

   <launch:phase>  The phase of the application that mirrors the
       <launch:phase> element included in the <launch:create>.
   <launch:applicationID>  The application identifier of the
       application.







Tan, et al.            Expires September 13, 2013              [Page 25]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   An example response when multiple overlapping applications are
   supported by the server:

   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <response>
       <result code="1001">
         <msg>Command completed successfully; action pending</msg>
       </result>
       <resData>
         <domain:creData
            xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
          <domain:name>example.tld</domain:name>
          <domain:crDate>2010-08-10T15:38:26.623854Z</domain:crDate>
          <domain:exDate>2012-08-10T15:38:26.623854Z</domain:exDate>
         </domain:creData>
       </resData>
       <extension>
         <launch:creData
           xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
           <launch:phase>sunrise</launch:phase>
           <launch:applicationID>2393-9323-E08C-03B1
           </launch:applicationID>
         </launch:creData>
       </extension>
       <trID>
         <clTRID>ABC-12345</clTRID>
         <svTRID>54321-XYZ</svTRID>
       </trID>
     </response>
   </epp>

3.3.2.  Claims Create Form

   The Claims Create Form of the extension to the EPP domain name
   mapping [RFC5731] includes the information related to the
   registrant's acceptance of the Claims Notice for the "claims1" launch
   phase and the display of the Claims Notice for the "claims2" launch
   phase.

   A <launch:create> element is sent along with the regular <create>
   domain command.  The <launch:create> element contains the following
   child elements:








Tan, et al.            Expires September 13, 2013              [Page 26]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   <launch:phase>  MUST contain the value of "claims1" or "claim2" to
       indicate the claims launch phase.
   <launch:notice>
       <launch:noticeID>  Unique notice identifier generated by the
           source of the Claims Notice information such as the Claims
           Notice Information Service (CNIS).
       <launch:generatedDate>  Contains the date and time that the
           Claims Notice was generated.
       <launch:acceptedDate>  Contains the date and time that the Claims
           Notice was displayed or accepted.
       <launch:source>  Contains the source information of the end-user
           client that was shown, or that accepted, the Claims Notice,
           such the end-user client's IP address.

   The following is an example <create> domain command using the
   <launch:create> extension with the <launch:notice> information for
   the "claims1" claims launch phase:


































Tan, et al.            Expires September 13, 2013              [Page 27]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <command>
       <create>
         <domain:create
          xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
           <domain:name>example.tld</domain:name>
           <domain:registrant>jd1234</domain:registrant>
           <domain:contact type="admin">sh8013</domain:contact>
           <domain:contact type="tech">sh8013</domain:contact>
           <domain:authInfo>
             <domain:pw>2fooBAR</domain:pw>
           </domain:authInfo>
         </domain:create>
       </create>
       <extension>
         <launch:create
          xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
           <launch:phase>claims1</launch:phase>
           <launch:notice>
             <launch:noticeID>49FD46E6C4B45C55D4AC</launch:noticeID>
             <launch:generatedDate>2012-06-19T09:00:10.0Z
             </launch:generatedDate>
             <launch:acceptedDate>2012-06-19T09:01:30.0Z
             </launch:acceptedDate>
             <launch:source>192.0.2.29</launch:source>
           </launch:notice>
         </launch:create>
       </extension>
       <clTRID>ABC-12345</clTRID>
     </command>
   </epp>

   This extension does not define any extension to the response of a
   <create> domain command for the Claims Create Form.  After processing
   the command, the server replies with a standard EPP response as
   defined in the EPP domain name mapping [RFC5731].

3.4.  EPP <update> Command

   This extension defines additional elements to extend the EPP <update>
   command to be used in conjunction with the domain name mapping.

   A server that does not support multiple applications of a given
   domain name with an Application Identifier (Section 2.1) during its
   launch phase operations MUST return an EPP error result code of 2102.

   Registry policies permitting, clients may update an application



Tan, et al.            Expires September 13, 2013              [Page 28]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   object by submitting an EPP <update> command along with a <launch:
   update> element to indicate the application object to be updated.
   The <launch:update> element contains the following child elements:

   <launch:phase>  The phase during which the application was submitted
       or is associated with.
   <launch:applicationID>  The application identifier for which the
       client wishes to update.

   This extension does not define any extension to the response of an
   <update> domain command.  After processing the command, the server
   replies with a standard EPP response as defined in the EPP domain
   name mapping [RFC5731].

   The following is an example <update> domain command with the <launch:
   update> extension to add and remove a name server of a sunrise
   application with the application identifier "abc123":

   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <command>
       <update>
         <domain:update
          xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
           <domain:name>example.tld</domain:name>
           <domain:add>
               <domain:ns>
                 <domain:hostObj>ns2.example.tld</domain:hostObj>
               </domain:ns>
             </domain:add>
             <domain:rem>
               <domain:ns>
                 <domain:hostObj>ns1.example.tld</domain:hostObj>
               </domain:ns>
             </domain:rem>
         </domain:update>
       </update>
       <extension>
       <launch:update
        xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
         <launch:phase>sunrise</launch:phase>
         <launch:applicationID>abc123</launch:applicationID>
       </launch:update>
       </extension>
       <clTRID>ABC-12345</clTRID>
     </command>
   </epp>




Tan, et al.            Expires September 13, 2013              [Page 29]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   An example response that corresponds to the above command:

   <?xml version="1.0" encoding="UTF-8"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <response>
       <result code="1000">
         <msg>Command completed successfully</msg>
       </result>
       <trID>
         <clTRID>ABC-12345</clTRID>
         <svTRID>54321-XYZ</svTRID>
       </trID>
     </response>
   </epp>

3.5.  EPP <delete> Command

   This extension defines additional elements to extend the EPP <delete>
   command to be used in conjunction with the domain name mapping.

   A server that does not support multiple applications of a given
   domain name with an Application Identifier (Section 2.1) during its
   launch phase operations MUST return an EPP error result code of 2102.

   Registry policies permitting, clients MAY withdraw an application by
   submitting an EPP <delete> command along with a <launch:delete>
   element to indicate the application object to be deleted.  The
   <launch:delete> element contains the following child elements:

   <launch:phase>  The phase during which the application was submitted
       or is associated with.
   <launch:applicationID>  The application identifier for which the
       client wishes to delete.

   This extension does not define any extension to the response of a
   <delete> domain command.  After processing the command, the server
   replies with a standard EPP response as defined in the EPP domain
   name mapping [RFC5731].













Tan, et al.            Expires September 13, 2013              [Page 30]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   The following is an example <delete> domain command with the <launch:
   delete> extension:

   <?xml version="1.0" encoding="UTF-8" standalone="no"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <command>
      <delete>
       <domain:delete
        xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
         <domain:name>example.tld</domain:name>
       </domain:delete>
      </delete>
      <extension>
       <launch:delete
        xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
         <launch:phase>sunrise</launch:phase>
         <launch:applicationID>abc123</launch:applicationID>
       </launch:delete>
      </extension>
      <clTRID>ABC-12345</clTRID>
     </command>
   </epp>

   An example response that corresponds to the above command:

   <?xml version="1.0" encoding="UTF-8"?>
   <epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
     <response>
       <result code="1000">
         <msg>Command completed successfully</msg>
       </result>
       <trID>
         <clTRID>ABC-12345</clTRID>
         <svTRID>54321-XYZ</svTRID>
       </trID>
     </response>
   </epp>

3.6.  EPP <renew> Command

   This extension does not define any extension to the EPP <renew>
   command or response described in the EPP domain name mapping
   [RFC5731].

3.7.  EPP <transfer> Command

   This extension does not define any extension to the EPP <transfer>
   command or response described in the EPP domain name mapping



Tan, et al.            Expires September 13, 2013              [Page 31]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   [RFC5731].


4.  Formal Syntax

   One schema is presented here that is the EPP Launch Phase Mapping
   schema.

   The formal syntax presented here is a complete schema representation
   of the object mapping suitable for automated validation of EPP XML
   instances.  The BEGIN and END tags are not part of the schema; they
   are used to note the beginning and ending of the schema for URI
   registration purposes.

4.1.  Launch Schema

   Copyright (c) 2012 IETF Trust and the persons identified as authors
   of the code.  All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

   o  Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   o  Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in
      the documentation and/or other materials provided with the
      distribution.
   o  Neither the name of Internet Society, IETF or IETF Trust, nor the
      names of specific contributors, may be used to endorse or promote
      products derived from this software without specific prior written
      permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

   BEGIN
   <?xml version="1.0" encoding="UTF-8"?>



Tan, et al.            Expires September 13, 2013              [Page 32]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   <schema
     targetNamespace="urn:ietf:params:xml:ns:launch-1.0"
     xmlns:launch="urn:ietf:params:xml:ns:launch-1.0"
     xmlns:eppcom="urn:ietf:params:xml:ns:eppcom-1.0"
     xmlns:mark="urn:ietf:params:xml:ns:mark-1.0"
     xmlns:smd="urn:ietf:params:xml:ns:signedMark-1.0"
     xmlns="http://www.w3.org/2001/XMLSchema"
     elementFormDefault="qualified">

   <!--
   Import common element types.
   -->
     <import namespace="urn:ietf:params:xml:ns:eppcom-1.0"
             schemaLocation="eppcom-1.0.xsd"/>

     <import namespace="urn:ietf:params:xml:ns:mark-1.0"
             schemaLocation="mark-1.0.xsd"/>

     <import namespace="urn:ietf:params:xml:ns:signedMark-1.0"
             schemaLocation="signedMark-1.0.xsd"/>

     <annotation>
       <documentation>
         Extensible Provisioning Protocol v1.0
         domain name extension schema
         for the launch phase processing.
       </documentation>
     </annotation>

     <!--
     Child elements found in EPP commands.
     -->
     <element name="check" type="launch:checkType"/>
     <element name="info" type="launch:infoType"/>
     <element name="create" type="launch:createType"/>
     <element name="update" type="launch:idContainerType"/>
     <element name="delete" type="launch:idContainerType"/>

     <!--
     Common container of id (identifier) element
     -->
     <complexType name="idContainerType">
       <sequence>
         <element name="phase" type="launch:phaseType"/>
         <element name="applicationID" type="launch:applicationIDType"/>
       </sequence>
     </complexType>




Tan, et al.            Expires September 13, 2013              [Page 33]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


     <!--
     Definition for application identifier
     -->
     <simpleType name="applicationIDType">
       <restriction base="token"/>
     </simpleType>

     <!--
     Definition for launch phase.  Name is an optional attribute
     used to extend the phase type.  For example, when
     using the phase type value of &qt;custom&gt;, the name
     can be used to specify the custom phase.
     -->
     <complexType name="phaseType">
       <simpleContent>
         <extension base="launch:phaseTypeValue">
           <attribute name="name" type="token"/>
         </extension>
       </simpleContent>
     </complexType>

     <!--
     Enumeration of for launch phase values.
     -->
     <simpleType name="phaseTypeValue">
         <restriction base="token">
           <enumeration value="sunrise"/>
           <enumeration value="landrush"/>
           <enumeration value="claims1"/>
           <enumeration value="claims2"/>
           <enumeration value="open"/>
           <enumeration value="custom"/>
       </restriction>
     </simpleType>


     <!--
     Definition for the sunrise code
     -->
     <simpleType name="codeType">
       <restriction base="base64Binary">
         <minLength value="1"/>
       </restriction>
     </simpleType>

     <!--
     Definition for the notice identifier
     -->



Tan, et al.            Expires September 13, 2013              [Page 34]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


     <simpleType name="noticeIDType">
       <restriction base="base64Binary">
         <minLength value="1"/>
       </restriction>
     </simpleType>

     <!--
     Possible status values for sunrise application
     -->
       <simpleType name="statusValueType">
       <restriction base="token">
           <enumeration value="pendingValidation"/>
           <enumeration value="validated"/>
           <enumeration value="invalid"/>
           <enumeration value="pendingAllocation"/>
           <enumeration value="allocated"/>
           <enumeration value="rejected"/>
           <enumeration value="custom"/>
         </restriction>
       </simpleType>

     <!--
     Status type definition
     -->
     <complexType name="statusType">
       <simpleContent>
         <extension base="normalizedString">
           <attribute name="s" type="launch:statusValueType"
             use="required"/>
           <attribute name="lang" type="language"
             default="en"/>
           <attribute name="name" type="token"/>
         </extension>
       </simpleContent>
     </complexType>

     <!--
     codeMark Type that contains an optional code
     with mark information.
     -->
     <complexType name="codeMarkType">
       <sequence>
       <element name="code" type="launch:codeType"
         minOccurs="0"/>
       <element ref="mark:abstractMark"
         minOccurs="0"/>
     </sequence>
     </complexType>



Tan, et al.            Expires September 13, 2013              [Page 35]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


     <!--
     Child elements for the create command
     -->
     <complexType name="createType">
       <sequence>
         <element name="phase" type="launch:phaseType"/>
         <choice>
           <element name="codeMark" type="launch:codeMarkType"
             maxOccurs="unbounded"/>
           <element ref="smd:abstractSignedMark"
            maxOccurs="unbounded"/>
           <element ref="smd:encodedSignedMark"
            maxOccurs="unbounded"/>
             <element name="notice"
             type="launch:createNoticeType"/>
         </choice>
       </sequence>
     </complexType>

     <!--
     Child elements of the create notice element.
     -->
     <complexType name="createNoticeType">
       <sequence>
         <element name="noticeID" type="launch:noticeIDType"/>
         <element name="generatedDate" type="dateTime"/>
         <element name="acceptedDate" type="dateTime"/>
         <element name="source" type="token"/>
       </sequence>
     </complexType>


     <!--
     Child elements of check (Claims Check Command).
     -->
     <complexType name="checkType">
       <sequence>
         <element name="phase" type="launch:phaseType"/>
       </sequence>
     </complexType>


     <!--
     Child elements of info command.
     -->
     <complexType name="infoType">
       <sequence>
         <element name="phase" type="launch:phaseType"/>



Tan, et al.            Expires September 13, 2013              [Page 36]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


         <element name="applicationID"
           type="launch:applicationIDType"
           minOccurs="0"/>
       </sequence>
       <attribute name="includeMark" type="boolean"
         default="false"/>
     </complexType>

     <!--
     Child response elements.
     -->
     <element name="chkData" type="launch:chkDataType"/>
     <element name="creData" type="launch:idContainerType"/>
     <element name="infData" type="launch:infDataType"/>

     <!--
      <check> response elements.
      -->
     <complexType name="chkDataType">
       <sequence>
         <element name="phase" type="launch:phaseType"/>
         <element name="cd" type="launch:cdType"
          maxOccurs="unbounded"/>
       </sequence>
     </complexType>

     <complexType name="cdType">
       <sequence>
         <element name="name" type="launch:cdNameType"/>
         <element name="claimKey" type="token"
          minOccurs="0"/>
       </sequence>
     </complexType>

     <complexType name="cdNameType">
       <simpleContent>
         <extension base="eppcom:labelType">
           <attribute name="exists" type="boolean"
            use="required"/>
         </extension>
       </simpleContent>
     </complexType>

     <!--
     <info> response elemenets
     -->
     <complexType name="infDataType">
       <sequence>



Tan, et al.            Expires September 13, 2013              [Page 37]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


         <element name="phase" type="launch:phaseType"/>
        <element name="applicationID"
         type="launch:applicationIDType"
         minOccurs="0"/>
        <element name="status" type="launch:statusType"
         minOccurs="0"/>
         <element ref="mark:abstractMark"
         minOccurs="0" maxOccurs="unbounded"/>
       </sequence>
     </complexType>

   </schema>
   END


5.  Acknowledgements

   The authors wish to acknowledge the efforts of the leading
   participants of the Community TMCH Model that led to many of the
   changes to this document, which include Chris Wright, Jeff Neuman,
   Jeff Eckhaus, and Will Shorter.

   Special suggestions that have been incorporated into this document
   were provided by Jothan Frakes, Keith Gaughan, Jan Jansen, Rubens
   Kuhl, Gustavo Lozano, Klaus Malorny, Patrick Mevzek, Bernhard
   Reutner-Fischer, Trung Tran, Ulrich Wisser and Sharon Wodjenski.


6.  Change History

6.1.  Change from 00 to 01

   1.  Changed to use camel case for the XML elements.
   2.  Replaced "cancelled" status to "rejected" status.
   3.  Added the child elements of the <claim> element.
   4.  Removed the XML schema and replaced with "[TBD]".

6.2.  Change from 01 to 02

   1.  Added support for both the ICANN and ARI/Neustar TMCH models.
   2.  Changed the namespace URI and prefix to use "launch" instead of
       "launchphase".
   3.  Added definition of multiple claim validation models.
   4.  Added the <launch:signedClaim> and <launch:signedNotice>
       elements.
   5.  Added support for Claims Info Command





Tan, et al.            Expires September 13, 2013              [Page 38]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


6.3.  Change from 02 to 03

   1.  Removed XSI namespace per Keith Gaughan's suggestion on the
       provreg list.
   2.  Added extensibility to the launch:status element and added the
       pendingAuction status per Trung Tran's feedback on the provreg
       list.
   3.  Added support for the Claims Check Command, updated the location
       and contents of the signedNotice, and replaced most references of
       Claim to Mark based on the work being done on the ARI/Neustar
       launch model.

6.4.  Change from 03 to 04

   1.  Removed references to the ICANN model.
   2.  Removed support for the Claims Info Command.
   3.  Removed use of the signedClaim.
   4.  Revised the method for referring to the signedClaim from the XML
       Signature using the IDREF URI.
   5.  Split the launch-1.0.xsd into three XML schemas including launch-
       1.0.xsd, signeMark-1.0.xsd, and mark-1.0.xsd.
   6.  Split the "claims" launch phase to the "claims1" and "claims2"
       launch phases.
   7.  Added support for the encodedSignedMark with base64 encoded
       signedMark.
   8.  Changed the elements in the createNoticeType to include the
       noticeID, timestamp, and the source elements.
   9.  Added the class and effectiveDate elements to mark.

6.5.  Change from 04 to 05

   1.  Removed reference to <smd:zone> in the <smd:signedMark> example.
   2.  Incorporated feedback from Bernhard Reutner-Fischer on the
       provreg mail list.
   3.  Added missing launch XML prefix to applicationIDType reference in
       the idContainerType of the Launch Schema.
   4.  Added missing description of the <mark:pc> element in the <mark:
       addr> element.
   5.  Updated note on replication of the EPP contact mapping elements
       in the Mark Contact section.

6.6.  Change from 05 to 06

   1.  Removed the definition of the mark-1.0 and signedMark-1.0 and
       replaced with reference to draft-lozano-smd, that contains the
       definition for the mark, signed marked, and encoded signed mark.





Tan, et al.            Expires September 13, 2013              [Page 39]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   2.  Split the <launch:timestamp> into <launch:generatedDate> and
       <launch:acceptedDate> based on feedback from Trung Tran.
   3.  Added the "includeMark" optional attribute to the <launch:info>
       element to enable the client to request whether or not to include
       the mark in the info response.
   4.  Fixed state diagram to remove redundant transition from "invalid"
       to "rejected"; thanks Klaus Malorny.

6.7.  Change from 06 to 07

   1.  Proof-read grammar and spelling.
   2.  Changed "pendingAuction" status to "pendingAllocation", changed
       "pending" to "pendingValidation" status, per proposal from Trung
       Tran and seconded by Rubens Kuhl.
   3.  Added text related to the use of RFC 5731 pendingCreate to the
       Application Identifier section.
   4.  Added the Poll Messaging section to define the use of poll
       messaging for intermediate state transitions and pending action
       poll messaging for final state transitions.


7.  IANA Considerations

   This document uses URNs to describe XML namespaces and XML schemas
   conforming to a registry mechanism described in [RFC3688].  Three URI
   assignments have been registered by the IANA.

   Registration request for the Launch namespace:

      URI: urn:ietf:params:xml:ns:launch-1.0
      Registrant Contact: See the "Author's Address" section of this
      document.
      XML: None.  Namespace URIs do not represent an XML specification.


8.  Security Considerations

   The mapping extensions described in this document do not provide any
   security services beyond those described by EPP [RFC5730], the EPP
   domain name mapping [RFC5731], and protocol layers used by EPP.  The
   security considerations described in these other specifications apply
   to this specification as well.

   Updates to, and deletion of an application object must be restricted
   to clients authorized to perform the said operation on the object.

   As information contained within an application, or even the mere fact
   that an application exists may be confidential.  Any attempt to



Tan, et al.            Expires September 13, 2013              [Page 40]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   operate on an application object by an unauthorized client MUST be
   rejected with an EPP 2303 (object does not exist) or an appropriate
   auhorization error.  Server policy may allow <info> operation with
   filtered output by clients other than the sponsoring client, in which
   case the <domain:infData> and <launch:infData> response SHOULD be
   filtered to include only fields that are publicly accessible.


9.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC3688]  Mealling, M., "The IETF XML Registry", BCP 81, RFC 3688,
              January 2004.

   [RFC5730]  Hollenbeck, S., "Extensible Provisioning Protocol (EPP)",
              STD 69, RFC 5730, August 2009.

   [RFC5731]  Hollenbeck, S., "Extensible Provisioning Protocol (EPP)
              Domain Name Mapping", STD 69, RFC 5731, August 2009.

   [draft-lozano-smd]
              Lozano, G., "Mark and Signed Mark Objects Mapping".

   [1]  <http://newgtlds.icann.org/en/about/trademark-clearinghouse/
        claims-model-26sep12-en.pdf>


Authors' Addresses

   Wil Tan
   Cloud Registry
   Suite 32 Seabridge House
   377 Kent St
   Sydney, NSW  2000
   AU

   Phone: +61 414 710899
   Email: wil@cloudregistry.net
   URI:   http://www.cloudregistry.net










Tan, et al.            Expires September 13, 2013              [Page 41]

Internet-Draft        Launch Phase Mapping for EPP            March 2013


   Gavin Brown
   CentralNic Ltd
   35-39 Mooregate
   London, England  EC2R 6AR
   GB

   Phone: +44 20 33 88 0600
   Email: gavin.brown@centralnic.com
   URI:   https://www.centralnic.com


   James Gould
   VeriSign, Inc.
   12061 Bluemont Way
   Reston, VA  20190
   US

   Email: jgould@verisign.com
   URI:   http://www.verisigninc.com
































Tan, et al.            Expires September 13, 2013              [Page 42]

