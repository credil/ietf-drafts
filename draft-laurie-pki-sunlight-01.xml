<?xml version="1.0"?>
<?rfc symrefs="yes"?>
<rfc ipr="trust200902" docName="draft-laurie-pki-sunlight-01">
  <front>
    <title>Certificate Transparency</title>
    <author initials="B" surname="Laurie" fullname="Ben Laurie">
      <address>
	<email>benl@google.com</email>
      </address>
    </author>
    <author initials="A" surname="Langley" fullname="Adam Langley">
      <address>
	<email>agl@google.com</email>
      </address>
    </author>
    <author initials="E" surname="Kasper" fullname="Emilia Kasper">
      <address>
	<email>ekasper@google.com</email>
      </address>
    </author>
    <date year='2012'></date>
    <abstract>
      <t>
	The aim of Certificate Transparency is to have every public end-entity and intermediate TLS certificate issued by a known Certificate Authority recorded in one or more certificate logs. In order to detect mis-issuance of certificates, all logs are publicly auditable. In particular, domain owners or their agents will be able to monitor logs for certificates issued on their own domain.
      </t>
      <t>
	To protect clients from unlogged mis-issued certificates, logs sign all recorded certificates, and clients can choose not to trust certificates that are not accompanied by an appropriate log signature. For privacy and performance reasons log signatures are embedded in the TLS handshake via the TLS authorization extension <xref target='RFC5878'/>, or in the certificate itself via an X.509v3 certificate extension <xref target='RFC5280'/>.
      </t>
      <t>
	To ensure a globally consistent view of the log, logs also provide a global signature over the entire log. Any inconsistency of logs can be detected through cross-checks on the global signature. Consistency between any pair of global signatures, corresponding to snapshots of the log at different times, can be efficiently shown.
      </t>
      <t>
	Logs are only expected to certify that they have seen a certificate, and thus we do not specify any revocation mechanism for log signatures in this document. Logs are append-only, and log signatures will be valid indefinitely. 
      </t>
    </abstract>
  </front>
  <middle>
    <section title="Cryptographic components">
      <section title="Merkle Hash Trees">
	<t>
	  Logs use a binary Merkle hash tree for efficient auditing. The hashing algorithm is SHA-256. The input to the Merkle tree hash is a list of data entries; these entries will be hashed to form the leaves of the Merkle hash tree. The output is a single 32-byte root hash. Given an ordered list of n inputs, D[n] = {d(0), d(1), ..., d(n-1)}, the Merkle Tree Hash (MTH) is thus defined as follows:
	</t>
	<t>
	  The hash of an empty list is the hash of an empty string:
	  <vspace blankLines='1' />
	  MTH({}) = SHA-256().
	  <vspace blankLines='1' />
	  The hash of a list with one entry is:
	  <vspace blankLines='1' />
	  MTH({d(0)}) = SHA-256(0 || d(0)).
	  <vspace blankLines='1' />
	  For n &gt; 1, let k be the largest power of two smaller than n. The Merkle Tree Hash of an n-element list D[n] is then defined recursively as
	  <vspace blankLines='1' />
	  MTH(D[n]) = SHA-256(1 || MTH(D[0:k]) || MTH(D[k:n])),
	  <vspace blankLines='1' />
	  where || is concatenation and D[k1:k2] denotes the length (k2 - k1) list {d(k1), d(k1+1),..., d(k2-1)}.
	</t>
	<t>
	  Note that we do not require the length of the input list to be a power of two. The resulting Merkle tree may thus not be balanced, however, its shape is uniquely determined by the number of leaves. [This Merkle tree is essentially the same as the <eref target='http://tamperevident.cs.rice.edu/Logging.html/'>history tree</eref> proposal, except our definition omits dummy leaves.]
	</t>
      <section title="Merkle audit paths" anchor='merkle_paths'>
	<t>
	  A Merkle audit path for a leaf in a Merkle hash tree is the shortest list of additional nodes in the Merkle tree required to compute the Merkle Tree Hash for that tree. Each node in the tree is either a leaf node, or is computed from the two nodes immediately below it (i.e. towards the leaves). At each step up the tree (towards the root), a node from the audit path is combined with the node computed so far. In other words, the audit path consists of the list of missing nodes required to compute the nodes leading from a leaf to the root of the tree. If the root computed from the audit path matches the true root, then the audit path is proof that the leaf exists in the tree.
	</t>
	<t> Given an ordered list of n inputs to the tree, D[n] = {d(0), ..., d(n-1)}, the Merkle audit path PATH(m, D[n]) for the (m+1)th input d(m), 0 &lt;= m &lt; n, is defined as follows:
	</t>
	<t>
	  The path for the single leaf in a tree with a one-element input list D[1] = {d(0)} is empty:
	  <vspace blankLines='1' />
	  PATH(0, {d(0)}) = {}
	  <vspace blankLines='1' />
	  For n &gt; 1, let k be the largest power of two smaller than n. The path for the (m+1)th element d(m) in a list of n &gt; m elements is then defined recursively as
	  <vspace blankLines='1' />
	  PATH(m, D[n]) = PATH(m, D[0:k]) : MTH(D[k:n]) for m &lt; k; and
	  <vspace blankLines='1' />
	  PATH(m, D[n]) = PATH(m - k, D[k:n]) : MTH(D[0:k]) for m &ge; k,
	  <vspace blankLines='1' />
	  where : is concatenation of lists and D[k1:k2] denotes the length (k2 - k1) list {d(k1), d(k1+1),..., d(k2-1)} as before.
	</t>
      </section>

      <section title="Merkle consistency proofs" anchor='consistency'>
	<t>
	  Merkle consistency proofs prove the append-only property of the tree. A Merkle consistency proof for a Merkle Tree Hash MTH(D[n]) and a previously advertised hash MTH(D[0:m]) of the first m leaves, m &lt;= n, is the list of nodes in the Merkle tree required to verify that the first m inputs D[0:m] are equal in both trees. Thus, a consistency proof must contain a set of intermediate nodes (i.e., commitments to inputs) sufficient to verify MTH(D[n]), such that (a subset of) the same nodes can be used to verify MTH(D[0:m]). We define an algorithm that outputs the (unique) minimal consistency proof. 
	</t>
	<t> Given an ordered list of n inputs to the tree, D[n] = {d(0), ..., d(n-1)}, the Merkle consistency proof PROOF(m, D[n]) for a previous root hash MTH(D[0:m]), 0 &lt; m &lt; n, is defined as PROOF(m, D[n]) = SUBPROOF(m, D[n], true):
	</t>
	<t>
	  The subproof for m = n is empty if m is the value for which PROOF was originally requested (meaning that the subtree root hash MTH(D[0:m]) is known):
	  <vspace blankLines='1' />
	  SUBPROOF(m, D[m], true) = {}
	  <vspace blankLines='1' />
 	  The subproof for m = n is the root hash committing inputs D[0:m] otherwise:
	  <vspace blankLines='1' />
	  SUBPROOF(m, D[m], false) = {MTH(D[m])}
	  <vspace blankLines='1' />    
	  For m &lt n, let k be the largest power of two smaller than n. The subproof is then defined recursively.
	  <vspace blankLines='1' />
If m &le; k, the right subtree entries D[k:n] only exist in the current tree. We prove that the left subtree entries D[0:k] are consistent and add a commitment to D[k:n]:
	  <vspace blankLines='1' />
	  SUBPROOF(m, D[n], b) = SUBPROOF(m, D[0:k], b) : MTH(D[k:n]).
	  <vspace blankLines='1' />
If m > k, the left subtree entries D[0:k] are identical in both trees. We prove that the right subtree entries D[k:n] are consistent and add a commitment to D[0:k].
	  <vspace blankLines='1' />
	  SUBPROOF(m, D[n], b) = SUBPROOF(m - k, D[k:n], false) : MTH(D[0:k]).
	  <vspace blankLines='1' />
	  Here : is concatenation of lists and D[k1:k2] denotes the length (k2 - k1) list {d(k1), d(k1+1),..., d(k2-1)} as before.
	</t>
	<t>
	  The number of nodes in the resulting proof is bounded above by ceil(log2(n)) + 1.
	</t>
      </section>

	<section title="Example">
	  <t>
	    The binary Merkle tree with 7 leaves:
<figure>
<artwork>    
            hash
           /    \
          /      \
         /        \
        /          \
       /            \
      k              l
     / \            / \
    /   \          /   \ 
   /     \        /     \    
  g       h      i      j
 / \     / \    / \     |
 a b     c d    e f     d6       
 | |     | |    | |                               
d0 d1   d2 d3  d4 d5    
</artwork>
</figure>
	  </t>
	  <t>
	    The audit path for d0 is [b, h, l].
	  </t>
	  <t>
	    The audit path for d3 is [c, g, l].
	  </t>
	  <t>
	    The audit path for d4 is [f, j, k].
	  </t>
	  <t>
	    The audit path for d6 is [i, k].
	  </t>
	  <t>
	    The same tree, built incrementally in four steps:
<figure>
<artwork>    
    hash0          hash1=k 
    / \              /  \  
   /   \            /    \ 
  /     \          /      \ 
  g      c         g       h 
 / \     |        / \     / \ 
 a b     d2       a b     c d 
 | |              | |     | |                   
d0 d1            d0 d1   d2 d3

          hash2                    hash
          /  \                    /    \
         /    \                  /      \
        /      \                /        \
       /        \              /          \
      /          \            /            \
     k            i          k              l
    / \          / \        / \            / \
   /   \         e f       /   \          /   \
  /     \        | |      /     \        /     \    
 g       h      d4 d5    g       h      i      j
/ \     / \             / \     / \    / \     |
a b     c d             a b     c d    e f     d6       
| |     | |             | |     | |    | |                               
d0 d1   d2 d3           d0 d1   d2 d3  d4 d5    
</artwork>
</figure>
	  </t>
	  <t>
	    The consistency proof between hash0 and hash is PROOF(3, D[7]) = [c, d, g, l]. c, g are used to verify hash0, and d, l are additionally used to show hash is consistent with hash0.
	  </t>
	  <t>
	    The consistency proof between hash1 and hash is PROOF(4, D[7]) = [l]. hash can be verified, using hash1=k and l.
	  </t>
	  <t>
	    The consistency proof between hash2 and hash is PROOF(6, D[7]) = [i, j, k]. k, i are used to verify hash1, and j is additionally used to show hash is consistent with hash2.
	  </t>
	</section>
      </section>
    </section>
    <section title="Log Format">
      <t>
	Anyone can submit certificates to certificate logs for public auditing, however, since certificates will not be accepted by clients unless logged, it is expected that certificate owners or their CAs will usually submit them. A log is a single, ever-growing, append-only Merkle Tree of such certificates.
      </t>
      <t>
	After accepting a certificate submission, the log MUST immediately return a Signed Certificate Timestamp (SCT). The SCT is the log's promise to incorporate the certificate in the Merkle Tree within a fixed amount of time known as the Maximum Merge Delay (MMD). Servers MUST present an SCT from one or more logs to the client together with the certificate. Clients MUST reject certificates that do not have a valid Signed Certificate Timestamp.
      </t>
      <t>
	Periodically, the log appends all new entries to the Merkle Tree, and signs the root of the tree. Clients and auditors can thus verify that each certificate for which an SCT has been issued indeed appears in the log. The log MUST incorporate a certificate in its Merkle Tree within the Maximum Merge Delay period after the issuance of the SCT.
      </t>
      <section title="Log Entries">
	<t>
	  Anyone can submit a certificate to the log. In order to attribute each logged certificate to its issuer, the log shall publish a list of acceptable root certificates (this list should be the union of root certificates trusted by major browser vendors). Each submitted certificate MUST be accompanied by all additional certificates required to verify the certificate chain up to an accepted root certificate. The self-signed root certificate itself MAY be omitted from this list. 
	</t>
        <t>
	  Alternatively, (root as well as intermediate) Certificate Authorities may submit a certificate to the log prior to issuance. To do so, a Certificate Authority constructs a Precertificate by signing the leaf TBSCertificate <xref target='RFC5280'/> with a special-purpose (Extended Key Usage: Certificate Transparency) Precertificate Signing Certificate. The Precertificate Signing Certificate MUST be certified by the CA certificate. As above, the Precertificate submission MUST be accompanied by the Precertificate Signing Certificate and all additional certificates required to verify the chain up to an accepted root certificate. The signature on the TBSCertificate indicates the Certificate Authority's intent to issue a certificate. This intent is considered binding (i.e., misissuance of the Precertificate is considered equal to misissuance of the final certificate). The log verifies the Precertificate signature chain, and issues a Signed Certificate Timestamp on the corresponding TBSCertificate. The SCT can then be directly embedded in the final certificate, by inserting it in the TBSCertificate as an X.509v3 certificate extension. Upon receiving the certificate, clients can reconstruct the original TBSCertificate to verify the SCT signature.
	</t>
	<t>
	  The log MUST verify that the submitted leaf certificate or Precertificate has a valid signature chain leading back to a trusted root CA certificate, using the chain of intermediate CA certificates provided by the submitter. In case of Precertificates, the log MUST also verify that the Precertificate Signing Certificate has the correct Extended Key Usage extension. The log MAY accept certificates that have expired, are not yet valid, have been revoked or are otherwise not fully valid according to X.509 verification rules. However, the log MUST refuse to publish certificates without a valid chain to a known root CA. If a certificate is accepted and an SCT issued, the log MUST store the chain used for verification including the certificate or Precertificate itself, and MUST present this chain for auditing upon request.
	</t>
	<t>
	  Each certificate entry in the log MUST include the following components:
	</t>
<figure>
  <artwork>
    enum { x509_entry(0), precert_entry(1), (65535) } LogEntryType;

    struct {
        LogEntryType entry_type;
        select (entry_type) {
            case x509_entry: X509ChainEntry;
            case precert_entry: PrecertChainEntry;
        } entry;
    } LogEntry;

    opaque ASN.1Cert&lt;1..2^24-1&gt;;

    struct {
        ASN.1Cert leaf_certificate;
        ASN.1Cert certificate_chain&lt;0..2^24-1&gt;;
    } X509ChainEntry;

    struct {
        ASN.1Cert tbs_certificate;
        ASN.1Cert precertificate_chain&lt;1..2^24-1&gt;;
    } PrecertChainEntry;
  </artwork>
</figure>
	<t>
	  Logs MAY limit the length of chain they will accept.
	</t>
	<t>
	  <spanx style="verb">leaf_certificate</spanx> is the end-entity certificate submitted for auditing.
	</t>
	<t>
	  <spanx style="verb">certificate_chain</spanx> is a chain of additional certificates required to verify the leaf certificate. The first certificate MUST certify the leaf certificate. Each following certificate MUST directly certify the one preceding it. The self-signed root certificate MAY be omitted from the chain.
	</t>
	<t>
	  <spanx style="verb">tbs_certificate</spanx> is the TBSCertificate component of the Precertificate (i.e., the original TBSCertificate, without the Precertificate signature and the SCT extension).
	</t>
	<t>
	  <spanx style="verb">precertificate_chain</spanx> is a chain of certificates required to verify the Precertificate submission. The first certificate MUST be the original Precertificate, with its unsigned part matching the <spanx style="verb">tbs_certificate</spanx>. The second certificate MUST be a valid Precertificate Signing Certificate, and MUST certify the first certificate. Each following certificate MUST directly certify the one preceding it. The self-signed root certificate MAY be omitted from the chain.
	</t>
	<t>
	  Structure of the Signed Certificate Timestamp:
	</t>
	<figure>
	  <artwork>
    enum { certificate_timestamp(0), tree_hash(1), 255 }
      SignatureType;

    enum { v1(0) }
      Version;

      struct {
          opaque key_id[32];
      } LogID;
	  </artwork>
	</figure>
	<t>
	  <spanx style="verb">key_id</spanx> is the SHA-256 hash of the log's public key [TODO: define how to calculate this].
	</t>
	<figure>
	  <artwork>
    struct {
        Version version;
        LogID id;
        uint64 timestamp;
        digitally-signed struct {
            SignatureType signature_type = certificate_timestamp;	    
            uint64 timestamp;
            LogEntryType entry_type;
            select(entry_type) {
                case x509_entry: ASN.1Cert;
                case precert_entry: ASN.1Cert;
            } signed_entry;
        };
    } SignedCertificateTimestamp;
	  </artwork>
	</figure>
	<t>
	  The encoding of the digitally-signed element is defined in <xref target='RFC5246'/>.
	</t>
	<t>
	  <spanx style="verb">version</spanx> is the version of the protocol the SCT conforms to. This version is v1.
	</t>
	<t>
	  <spanx style="verb">timestamp</spanx> is the current UTC time since epoch (January 1, 1970, 00:00), in milliseconds.
	</t>
	<t>
	  <spanx style="verb">signed_entry</spanx> is the <spanx style="verb">leaf_certificate</spanx> (in case of an X509ChainEntry), or <spanx style="verb">tbs_certificate</spanx> (in case of a PrecertChainEntry).
	</t>
      </section>

      <section title="Merkle Tree">
	<t> A certificate log MUST periodically append all new log entries to the log Merkle Tree. The log MUST sign these entries by constructing a binary Merkle Tree with log entries as consecutive inputs to the tree, signing the corresponding Merkle Tree Hash, and publishing each update to the tree in a Signed Merkle Tree Update. The hashing algorithm for the Merkle Tree Hash is SHA-256.
	</t>
	<t>
	  Structure of the Merkle Tree input:
	</t>
<figure>
  <artwork>
    struct {
        uint64 timestamp;
        LogEntryType entry_type;
        select(entry_type) {
            case x509_entry: ASN.1Cert;
            case precert_entry: ASN.1Cert;
        } signed_entry;
    } MerkleTreeLeaf;
  </artwork>
</figure>
<t>
  Here <spanx style="verb">timestamp</spanx> is the timestamp of the corresponding SCT issued for this certificate.
</t>
<t>
  <spanx style="verb">signed_entry</spanx> is the <spanx style="verb">signed_entry</spanx> of the corresponding SCT.
</t>
	<t>
	  Structure of the Signed Merkle Tree Update:
	</t>
<figure>
  <artwork>
    struct {
        Version version;
        LogID id;
        uint64 old_tree_size;
        uint64 timestamp;
        MerkleTreeLeaf new_leaves&lt;0..2^64-1&gt;;
        digitally-signed struct {
            SignatureType signature_type = tree_hash;
            uint64 timestamp;
            uint64 tree_size;
            opaque sha256_root_hash[32];
        } TreeHeadSignature;
    } SignedMerkleTreeUpdate;
  </artwork>
</figure>
	<t>
	  <spanx style="verb">version</spanx> is the version of the protocol the SignedMerkleTreeUpdate conforms to.
	</t>
	<t>
	  <spanx style="verb">old_tree_size</spanx> is the size of the tree prior to this update.
	</t>
	<t>
	  <spanx style="verb">timestamp</spanx> is the current time. The timestamp MUST be at least as recent as the most recent SCT timestamp in the tree. Each subsequent timestamp MUST be more recent than the timestamp of the previous update.
	</t>
	<t>
	  <spanx style="verb">tree_size</spanx> equals the number of entries in the new tree.
	</t>
	<t>
	  <spanx style="verb">new_leaves</spanx> is the list of leaves added to the tree in this update, ordered by leaf index. This order can be fixed arbitrarily amongst new entries.
	</t>
	<t>
	  <spanx style="verb">sha256_root_hash</spanx> is the root of the Merkle Hash Tree.
	</t>
	<t>The log MUST produce a Signed Merkle Tree Update at least as often as the Maximum Merge Delay. In the unlikely event that it receives no new submissions during an MMD period, the log SHALL sign the same Merkle Tree Hash with a fresh timestamp.
	</t>
      </section>
      <section title="Audit Proofs">
	<t> It is possible to audit the entire log by computing the current <spanx style="verb">sha256_root_hash</spanx> value from consecutive Signed Merkle Tree Updates, and verifying the Tree Head Signature. We rely on cross-checks of the Signed Tree Head between auditors to verify that their views of the log are consistent.
	</t>
	<t>
	  Additionally, logs provide Merkle audit proofs for efficient partial checks. (In fact, anyone can compute audit proofs from the full log.) Merkle audit proofs allow auditors to efficiently verify that a certificate for which an SCT has been issued indeed appears in the log, without inspecting the entire log.
	</t>
	<t>
	  Structure of the Merkle audit proof:
	</t>
<figure>
  <artwork>
    struct {
        opaque sha256_hash[32];
    } MerkleNode;
  </artwork>
</figure>
<figure>
  <artwork>
    struct {
        Version version;
        LogID id;
        uint64 tree_size;
        uint64 timestamp;
        uint64 leaf_index;
        MerkleNode audit_path&lt;0..2^16-1&gt;;
        TreeHeadSignature tree_head_signature;
    } MerkleAuditProof;
  </artwork>
</figure>
	<t>
	  <spanx style="verb">tree_size</spanx> is the generation of the tree that this proof is for.
	</t>
	<t>
	  <spanx style="verb">timestamp</spanx> is the corresponding timestamp.
	</t>
	<t>
	  <spanx style="verb">leaf_index</spanx> is the index of the audited node in the Merkle tree, from 0 to <spanx style="verb">tree_size - 1</spanx>.
	</t>
	<t>
	  <spanx style="verb">audit_path</spanx> is a list of additional nodes in the Merkle tree required for reconstructing the root hash corresponding to the <spanx style="verb">tree_size</spanx>. Nodes must be listed from leaf to root level, i.e., in the order they are used in the Merkle Tree Hash computation, as defined in <xref target='merkle_paths' />. <spanx style="emph">Notice that the left-right ordering is determined by the position of the leaf.</spanx> The leaf node under audit as well as the root node shall be omitted from the path.
	</t>
	<t>
	  <spanx style="verb">tree_head_signature</spanx> is the TreeHeadSignature for generation <spanx style="verb">tree_size</spanx>.
	</t>
	<t>
          A valid audit proof for a Merkle Tree Leaf MUST satisfy the following:
	</t>
	<t>
	  <list style='symbols'>
	    <t>
	      The <spanx style="verb">tree_size</spanx> MUST be at least 1;
	    </t>
	    <t>
	      The <spanx style="verb">leaf_index</spanx> MUST NOT exceed <spanx style="verb">tree_size - 1</spanx>;
	    </t>
	    <t>
	      The <spanx style="verb">tree_signature</spanx> MUST be a valid signature on the corresponding <spanx style="verb">timestamp</spanx>, <spanx style="verb">tree_size</spanx>, and the root hash reconstructed from the Merkle Tree Leaf, <spanx style="verb">leaf_index</spanx> and <spanx style="verb">audit_path</spanx>.
	    </t>
	  </list>
	</t>
      </section>
    </section>
    <section title="Client Messages">
      <t>
	TBD. Messages that clients send to logs, e.g. to request an SCT or retrieve entries in the log.
      </t>
    </section>
    <section title="Security and Privacy Considerations">
      <section title="Misissued Certificates">
	<t>
	  Misissued certificates that have not been publicly logged, and thus do not have a valid SCT, will be rejected by clients. Misissued certificates that do have an SCT from a log will appear in the public log within the Maximum Merge Delay, assuming the log is operating correctly. Thus, the maximum period of time during which a misissued certificate can be used without being available for audit is the MMD. 
	</t>
      </section>
      <section title="Detection of Misissue">
	<t>
	  The log does not itself detect misissued certificate, it relies instead on interested parties, such as domain owners, to monitor it and take corrective action when a misissue is detected.
	</t>
      </section>
      <section title="Misbehaving logs">
	<t>
	  A log can misbehave in two ways: (1), by failing to incorporate a certificate with an SCT in the Merkle Tree within the MMD; and (2), by violating its append-only property by presenting two different, conflicting views of the Merkle Tree at different times and/or to different parties. Both forms of violation will be promptly and publicly detectable.
	</t>
	<t>
	  Violation of the MMD contract is detected by clients requesting a Merkle audit proof for each observed SCT. These checks can be asynchronous, and need only be done once per each certificate. In order to protect the clients' privacy, these checks need not reveal the exact certificate to the log. Clients can instead request the proof from a trusted auditor (since anyone can compute the audit proofs from the log), or request Merkle proofs for a batch of certificates around the SCT timestamp. 
	</t>
	<t>
	  Violation of the append-only property is detected by global gossiping, i.e., everyone auditing the log comparing their versions of the latest signed tree head. As soon as two conflicting signed tree heads are detected, this is cryptographic proof of the log's misbehaviour.
	</t>
      </section>
    </section>
    <section title="Efficiency Considerations">
      <t>
	The Merkle tree design serves the purpose of keeping communication overhead low.
      </t>
      <t>
	Auditing the log for integrity does not require third parties to maintain a copy of the entire log. The Signed Tree Head root hash can be updated incrementally as new entries become available, without recomputing the entire tree. Third party auditors need only store a logarithmic number of intermediate nodes in the Merkle Tree.
      </t>
      <t>
	Additionally, the Merkle consistency proofs defined in <xref target='consistency' /> can be used to efficiently prove the append-only property of an incremental update to the Merkle Tree, without auditing the entire tree.
      </t>
    </section>
  </middle>
  <back>
    <references>
      <reference anchor='RFC5246'>

	<front>
	  <title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
	  <author initials='T.' surname='Dierks' fullname='T. Dierks'>
	    <organization /></author>
	  <author initials='E.' surname='Rescorla' fullname='E. Rescorla'>
	    <organization /></author>
	  <date year='2008' month='August' />
	</front>

	<seriesInfo name='RFC' value='5246' />
      </reference>

      <reference anchor='RFC5878'>

	<front>
	  <title>The Transport Layer Security (TLS) Authorization Extensions</title>
	  <author initials='M.' surname='Brown' fullname='M. Brown'>
	    <organization >RedPhone Security</organization></author>
	  <author initials='R.' surname='Housley' fullname='R. Housley'>
	    <organization>Vigil Security</organization></author>
	  <date year='2010' month='May' />
	</front>

	<seriesInfo name='RFC' value='5280' />
      </reference>

      <reference anchor='RFC5280'>

	<front>
	  <title>Internet X.509 Public Key Infrastructure Certificate
	    and Certificate Revocation List (CRL) Profile</title>
	  <author initials='D.' surname='Cooper' fullname='D. Cooper'>
	    <organization>NIST</organization></author>
	  <author initials='S.' surname='Santesson' fullname='S. Santesson'>
	    <organization>Microsoft</organization></author>
	  <author initials='S.' surname='Farrell' fullname='S. Farrell'>
	    <organization>Trinity College Dublin</organization></author>
	  <author initials='S.' surname='Boeyen' fullname='S. Boeyen'>
	    <organization>Entrust</organization></author>
	  <author initials='R.' surname='Housley' fullname='R. Housley'>
	    <organization>Vigil Security</organization></author>
	  <author initials='W.' surname='Polk' fullname='W. Polk'>
	    <organization>NIST</organization></author>
	  <date year='2008' month='May' />
	</front>

	<seriesInfo name='RFC' value='5280' />
      </reference>
    </references>
  </back>
</rfc>
