<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc strict="yes"?>
<?rfc symrefs="yes"?>
<?rfc linkmailto="no"?>
<rfc ipr="trust200902" category="std" 
     docName="draft-newman-email-deep-00.txt">
<front>
<title>Deployable Enhanced Email Privacy (DEEP)</title>
<?rfc include="author.cnewman"?>
<date month="November" year="2013" />
<area>Applications</area>
<keyword>I-D</keyword>
<keyword>Internet-Draft</keyword>
<abstract><t>
This specification defines a set of requirements and facilities designed to improve email privacy. The focus of this proposal is to increase use of already deployed technology that can protect email privacy and provide a mechansim to record use of that technology.
</t></abstract>
</front>
<middle>
<section title="Introduction">
<t>
Email software on the Internet that provides mail access and transfer via Internet Message Access Protocol (IMAP) <xref target="RFC3501"/> and Simple Mail Transfer Protocol (SMTP) <xref target="RFC5321"/> usually have Transport Layer Security (TLS) <xref target="RFC5246"/> support but often do not use it in a way that maximizes the end-user privacy it can provide. This specification proposes three changes to email software and deployments intended to improve this situation. First, a security latch mechanism is provided to automatically enable and use improved TLS (or other security) capabilities without user or administrator intervention. Second, a mechanism is provided to record additional information about the security and privacy provided during email transit through extensions to the Received header <xref target="RFC5321"/>. Third, a set of requirements and recommendations are provided to determine if email software is DEEP compliant.
</t>
<t>
It's helpful to understand the constraints on deployed Internet mail
service to evaluate if a mechanism is deployable. At the time this is
written, Internet email is a widely deployed commodity service and a
critical component of online commerce. As a result, the email
infrastructure is resistent to change. Email software for desktop
operating systems is rarely upgraded. Email software for smaller devices
is exploring available IMAP extensions that can improve battery life,
but otherwise appears to have limited investment. Email service
providers generally operate on tight budgets and will not deploy any
email-related technology that could increase support calls from
customers. Some service providers run email server software that is
years out of date.
</t>
<t>
This situation creates constraints on deployable email technology. First, it can't change anything fundamental about the nature of email software and service. Second, it has to be useful even if deployed in only a subset of the email system. Third, it can't significantly increase the cost of service administration. DEEP is designed to improve end-user privacy within these constraints.
</t>
<t>
DEEP is targeted at improving hop-to-hop privacy rather than end-to-end security. As a result, it provides no protection from insider attacks. Most email passes through two administrative domains <xref target="RFC5598"/>: one used for submission and a second one used by the recipient to access mail. DEEP does not protect email from analysis and interception by the service providers involved in mail transfer.
</t>
<t>
This is an early draft and is subject to change. Implementation of this proposal is not recommended at this time.
</t>
</section>

<section title="Conventions Used in This Document">
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
<t>This specification expresses syntax using the Augmented Backus-Naur
Form (ABNF) as described in <xref target="RFC5234"/>, including the core rules in Appendix B and rules from <xref target="RFC5322"/>.</t>
</section>

<section title="Security Latches">
<section title="Introduction to Security Latches">
<t>
Once an improved email security or privacy mechanism is made available,
it is desirable to continue using it for future email transfer. Although
TLS is widely deployed in email software, use of TLS is often not
required. Mail user agents (MUAs) <xref target="RFC5598"/> will at best
make a determination if TLS is available when an account is first
configured and may require use of TLS with that account if and only if
it was initially available. If the service provider makes TLS available
after initial client configuration, many MUAs will not notice the
change. Mail transfer agents sometimes use TLS on an opportunistic basis
but this use is optional in most deployments and will silently stop if
either peer stops offering the capability.
</t>
<t>
A security latch is identified by a short alphanumeric token and
indicates that a security facility was available and used for a mail
transfer between a client and a server. The client stores the security
latches associated with the server's host identifier (prior to DNS
lookup) in persistent or semi-persistent storage. The security
facilities indicated by the stored security latches will be required for
subsequent connections from that client to that server.
</t>
<t>
Protocol clients for IMAP <xref target="RFC3501"/>, Message Submission
<xref target="RFC6409"/> and SMTP transfer <xref target="RFC5321"/> are
expected to store tuples including the name used for the first DNS
lookup related to the connection, the mail service being performed
(message access, message submission or message rely) and the security
latch. SMTP rely clients MAY expire these stored tuples to control the
size of security latch storage, but MUST retain them for a period of at
least two months.
</t>
<t>
An identifier for a security latch has the following formal syntax:
<figure>
<artwork type="abnf">
  security-latch-id  =  ALPHA *31(ALPHA / DIGIT / "-")
</artwork>
</figure>
</t>
<t>
Security latches are intended to represent a one-way improvement to
privacy or security. As a result, it's generally inappropriate to
associate a security latch with a specific cryptographic algorithm.
However, if weaknesses have been discovered in a deployed cryptographic
algorithm it can be appropriate to define a security latch to indicate
it is not necessary to use that algorithm with that peer in the future.
Two examples of the latter are included in the initial set of security
latches.
</t>
</section>
<section anchor="sec-latch-initial" title="Initial Set of Security Latches">
<t>This section describes an initial set of security latches. The IANA Considerations section <xref target="iana"/> defines a registry so that more latches can be defined in the future.
<list style="hanging">
<t hangText="tls10">This security latch indicates that TLS version 1.0 <xref target="RFC2246"/> or later was negotiated successfully including negotiation of a strong encryption layer with a symmetric key of at least 128 bits. This latch does not indicate that the server certificate was valid.</t>
<t hangText="tls11">This security latch indicates that TLS version 1.1 <xref target="RFC4346"/> or later was negotiated successfully including negotiation of a strong encryption layer with a symmetric key of at least 128 bits. This latch does not indicate that the server certificate was valid.</t>
<t hangText="tls12">This security latch indicates that TLS version 1.2 <xref target="RFC5246"/> or later was negotiated successfully including negotiation of a strong encryption layer with a symmetric key of at least 128 bits. This latch does not indicate that the server certificate was valid.</t>
<t hangText="tls-cert">This security latch indicates that TLS was successfully negotiated and the server certificate was successfully verified by the client using the algorithm described in <xref target="I-D.melnikov-email-tls-certs"/>. For SMTP transfer <xref target="RFC5321"/> the name used for the MX lookup for mail routing is used with the algorithm in <xref target="RFC6125"/></t>
<t hangText="tls-dane-tlsa">This security latch indicates the TLS server certificate was verified using the procedures described in "The DNS-Based Authentication of Named Entities (DANE) Transport Layer Security (TLS) Protocol: TLSA" <xref target="RFC6698"/>.</t>
<t hangText="tls-nomd5">This security latch indicates that a TLS cipher suite was negotiated that did not use the MD5 cryptographic hash algorithm <xref target="RFC1321"/>.</t>
<t hangText="tls-norc4">This security latch indicates that a TLS cipher suite was negotiated that did not use the RC4 cipher.</t>
<t hangText="tls-pfs">This security latch indicates that a TLS cipher suite was negotiated that included the "perfect forward secrecy" property.</t>
</list>
</t>
</section>
<section anchor="latch-fail" title="Security Latch Failures">
<t>
When a security latch has been set for connections from a client to a
server and the property identified by that latch is no longer available,
this results in a connection failure. For an MUA, the end-user should be
encouraged to contact their service provider. An MUA might suggest
deleting the account and re-creating it as a cumbersome mechanism to
reset the security latches. MUAs are discouraged from offering a
lightweight option to reset or ignore security latches as this defeats
much of the benefit they provide to end users. A mail transfer agent
(MTA) is encouraged to treat security latches as a temporary failure so
the messages sit in a queue for the retry period and an administrator
can intervene. Providing a way for an administrator to reset security
latches in an MTA is likely necessary, particularly for the case of an
expired server certificate. MTAs are encouraged to provide a way to
reset a subset of security latches that does not eliminate all privacy;
for example by clearing all latches except one of the versioned tls
latches.
</t>
<t>
When MTA transport fails due to a security latch, the MTA MUST use the SMTP enhanced status code X.7.TBD. The SMTP notary response <xref target="RFC3464"/> for a security latch failure MUST include an additional "SMTP-Security-Latch" recipient-specific header field that includes a space-delimited list including one or more security latch that failed. The ABNF for this new field follows:
<figure>
<artwork type="abnf">
  CFWS                 =  &lt;defined in RFC 5322&gt;

  FWS                  =  &lt;defined in RFC 5322&gt;

  smtp-security-latch  =  "SMTP-Security-Latch:" CFWS 
                          security-latch-id *(FWS security-latch-id)

</artwork>
</figure>
</t>
</section>
</section>

<section anchor="tls-received" title="Recording TLS Cipher Suite in Received Header">
<t>
The ESMTPS transmission type <xref target="RFC3848"/> provides trace information that can indicate TLS was used when transferring mail over the Internet. If this is combined with a success delivery status notification (DSN) that requests header return <xref target="RFC3461"/> that provides a way to determine if TLS usage was recorded for all transfers for which trace information is available. However, TLS usage by itself is not a guarantee of privacy or security. The TLS cipher suite provides additional important information about the level of privacy or security made available for that hop. This defines a new SMTP "tls" Received header additional-registered-clause that is used to record the TLS cipher suite that was negotiated for the connection. The value included in this additional clause SHOULD be the registered cipher suite name (e.g., TLS_DHE_RSA_WITH_AES_128_CBC_SHA) included in the TLS cipher suite registry. In the event the implementation does not know the name of the cipher suite (a situation that should be remedied promptly), a four-digit hexadecimal cipher suite identifier MAY be used. The ABNF for the field follows:
<figure>
<artwork type="abnf">
  tls-cipher-clause  =  CFWS "tls" FWS tls-cipher

  tls-cipher         =  tls-cipher-suite-name / tls-cipher-suite-hex

  tls-cipher-name    =  ALPHA *(ALPHA / DIGIT / "_")
                        ; as registered in IANA cipher suite registry

  tls-cipher-hex     =  "0x" 4HEXDIG
</artwork>
</figure>
</t>
</section>

<section title="DEEP Compliance">
<t>This section describes what is required for various entities in a mail system to be DEEP compliant. An Internet service provider is considered DEEP compliant if all components in their mail system are DEEP compliant.</t>

<section title="DEEP Compliance For Both Servers and Clients">
<t>In order to be DEEP compliant, software has to meet the following requirements. These requirements apply to MUAs, MTAs, SMTP proxies and IMAP servers.
<list style="symbols">
<t>MUST implement TLS 1.2 or later <xref target="RFC5246"/> for any connections made or received via IMAP, SMTP or Message Submission.</t>
<t>MUST implement the TLS 1.2 mandatory-to-implement cipher suite TLS_RSA_WITH_AES_128_CBC_SHA for any connections made or received via IMAP, SMTP or Message Submission.</t>
<t>MUST implement the TLS_DHE_RSA_WITH_AES_128_CBC_SHA cipher suite for any connections made or received via IMAP, SMTP or Message Submission.</t>
<t>MUST implement the IMAP4rev1 mandatory-to-implement cipher suite
TLS_RSA_WITH_RC4_128_MD5 for any connections made or received via IMAP.</t>
</list>
</t>
</section>

<section title="DEEP Compliance for Servers">
<t>This section applies to server software that accepts TCP connections for IMAP, SMTP or Message Submission. In order to be DEEP compliant these servers have to meet the following requirements.
<list style="symbols">
<t>MUST prefer the TLS_DHE_RSA_WITH_AES_128_CBC_SHA cipher suite over the TLS_RSA_WITH_AES_128_CBC_SHA.</t>
<t>MUST prefer the TLS_RSA_WITH_AES_128_CBC_SHA cipher suite over the TLS_RSA_WITH_RC4_128_MD5 cipher suite.</t>
<t>SHOULD prefer cipher suites that offer the "perfect forward secrecy" property over cipher suites that do not.</t>
<t>MUST prefer cipher suites that do not use MD5 over cipher suites that use MD5.</t>
<t>SHOULD prefer cipher suites that do not use RC4 over cipher suites that do use RC4.</t>
<t>SMTP receivers and message submission servers MUST advertise STARTTLS <xref target="RFC3207"/> in response to the EHLO command if TLS has not yet been negotiated, and successful TLS negotiation is possible.</t>
<t>IMAP servers MUST advertise STARTTLS in response to the CAPABILITY command (and in the server greeting CAPABILITY if provided) if TLS has not yet been negotiated, and successful TLS negotiation is possible.</t>
<t>Servers MUST NOT advertise STARTTLS if it is unlikely to succeed based on server configuration (e.g., there is no server certificate installed).</t>
<t>SMTP receivers and message submission servers MUST add a received header to the message <xref target="RFC5321"/> including the tls clause described in <xref target="tls-received"/>.</t>
<t>SMTP and IMAP servers MUST be able to include the TLS cipher information in any connection logging or auditing facility they provide.</t>
</list>
</t>
</section>

<section title="DEEP Compliance for Mail Clients">
<t>This section applies to client software that connects to TCP sockets on servers for IMAP, SMTP relay or Message Submission. In order to be DEEP compliant these clients have to meet the following requirements.
<list style="symbols">
<t>MUST look for STARTTLS in the protocol's capability listing (including the EHLO response for SMTP) and attempt to negotiate TLS before sending a password if STARTTLS is advertised.</t>
<t>MUST be able to negotiate and use a strong TLS encryption layer
regardless of the server certificate's validity. In particular, the client
MUST be able to use TLS session encryption even if the server
certificate is expired, self-signed or both.</t>
<t>MUST be able to save the "tls10" security latch if the client is able to establish strong encryption with the server.</t>
<t>MUST be able to validate server certificates as described for the "tls-cert" security latch and save that latch.</t>
<t>If the TLS_DHE_RSA_WITH_AES_128_CBC_SHA cipher suite is successfully negotiated, the client MUST save the "tls-norc4", "tls-nomd5" and "tls-pfs" security latches.</t>
<t>If the TLS 1.2 mandatory-to-implement cipher suite TLS_RSA_WITH_AES_128_CBC_SHA is successfully negotiated, the client MUST save the "tls-norc4" and "tls-nomd5" security latches.</t>
<t>Clients MAY support TLSA <xref target="RFC6698"/>. If a client supports both TLSA and DEEP, it MUST save the "tls-dane-tlsa" security latch if TLSA is successfully negotiated.</t>
<t>If the "tls-nomd5" security latch is set, the client MUST NOT offer to use any cipher suite using the MD5 algorithm in the TLS negotiation.</t>
<t>If the "tls-norc4" security latch is set, the client MUST NOT offer to use any cipher suite using the RC4 algorithm in the TLS negotiation.</t>
<t>If the "tls-pfs" security latch is set, the client MUST NOT offer to use any cipher suite lacking the "perfect forward secrecy" property in the TLS negotiation.</t>
<t>Clients SHOULD implement the "tls11" and "tls12" security latches (the TLS library has to provide an API that communicates the TLS protocol version used to the application for this to be possible). If the MUA implements the "tls11" and "tls12" security latches, the MUA MUST disable the ability to negotiate TLS 1.0 and TLS 1.1 if a higher TLS version is latched.</t>
</list>
</t>
</section>

<section title="DEEP Compliance for Mail User Agents">
<t>A MUA is considered DEEP compliant if it implements all of the following requirements and includes a public list of any recommendations below that it does not implement.
<list style="symbols">
<t>MUAs MUST store the security latches mentioned in the previous section in persistent storage. It is sufficient to store security latches for the servers associated with a mail account with the account configuration.</t>
<t>MUAs SHOULD be able to request success delivery status notifications via mail submission with the "RET=HDRS" ESMTP parameter and the "NOTIFY=SUCCESS,DELAY,FAILURE" ESMTP parameter <xref target="RFC3461"/>.</t>
</list>
</t>
</section>

<section title="DEEP Compliance for SMTP Relay Clients">
<t>These requirements apply to SMTP relay clients as found on submission servers and MTAs.
<list style="symbols">
<t>MUST implement a persistent (e.g., database) or semi-persistent
(e.g., replicated RAM cache) storage mechanism for security latches
associated with a recipient MTA's domain name. Examples of a compliant
implementation include storage in an embedded database (e.g., SQLlite or
Oracle Berkeley DB) or support for storage and access to security
latches via an appropriate protocol for that purpose (e.g., MySQL
Client/Server Protocol, memcached protocol, etc).</t>
<t>MUST implement the tls10, tls-nomd5, tls-norc4, tls-pfs security latches and set them as appropriate for each envelope recipient right-hand-side.</t>
</list>
</t>
</section>

<section title="DEEP Compliance for Anti-Virus/Anti-Spam Software and Services">
<t>There are multiple ways to connect an Anti-Virus and/or Anti-Spam (AVAS) service to a mail server. Some mechanisms, such as the de-facto milter protocol do not impact DEEP. However, some services use an SMTP relay proxy that intercepts mail at the application layer to perform a scan and proxy to the real MTA. Deploying AVAS services in this way can cause many problems <xref target="RFC2979"/> including direct interference with DEEP. An AVAS product or service is considered DEEP compliant if all IMAP and SMTP-related software it includes is DEEP compliant.</t>
</section>

<section title="DEEP Compliance for an SMTP relay proxy">
<t>An SMTP relay proxy generally has no queue and will have a client connection open at the same time as a connection to a real MTA, passing data through if it meets the proxy's goals. An SMTP proxy MUST comply with the SMTP relay server requirements (for its server component) and the SMTP relay client requirements (for its client components). In particular, the SMTP proxy MUST add a received header with the tls clause described in <xref target="tls-received"/>. If an SMTP proxy connects to an explicitly configured list of servers, then the requirement to store security latches on a per-host basis is waived and the proxy is compliant if it persistently stores security latches that apply to all back-ends.</t>
</section>

</section>

<section anchor="iana" title="IANA Considerations">
<t>
TBD:
<list style="symbols">
<t>Create expert review, publication required registry for security latches. Initialize registry with latches from <xref target="sec-latch-initial"/>.</t>
<t>Add new "tls" Additional-registered-clauses for received to SMTP extensions registry to indicate TLS cipher suite selected.</t>
<t>Add new SMTP enhanced status code <xref target="RFC5248"/> to indicate failure of a security latch. Can be temporary (e.g., expired server certificate) or permanent, but generally prefer temporary.</t>
<t>Add new DSN <xref target="RFC3464"/> SMTP-Security-Latch per-recipient field to indicate the security latch(es) that caused a delivery failure.</t>
</list>
</t>
</section>

<section title="Security Considerations">
<t>
This entire document is about security considerations. TBD: add more text here. In general, this is targeted to improve mail privacy and to mitigate threats external to the email system such as network-level snooping or interception; this is not intended to mitigate active attackers who have compromised service provider systems.
</t>
</section>

</middle>
<back>
<references title="Normative References">
<?rfc include="reference.RFC.2119"?> <!-- Key words -->
<?rfc include="reference.RFC.3207"?> <!-- SMTP STARTTLS -->
<?rfc include="reference.RFC.3501"?> <!-- IMAP -->
<?rfc include="reference.RFC.3461"?> <!-- Notary SMTP -->
<?rfc include="reference.RFC.3464"?> <!-- DSN format -->
<?rfc include="reference.RFC.5234"?> <!-- ABNF -->
<?rfc include="reference.RFC.5246"?> <!-- TLS 1.2 -->
<?rfc include="reference.RFC.5248"?> <!-- SMTP Enhanced Status Codes -->
<?rfc include="reference.RFC.5321"?> <!-- SMTP -->
<?rfc include="reference.RFC.5322"?> <!-- Message Format -->
<?rfc include="reference.RFC.6125"?> <!-- TLS DNS cert verification -->
<?rfc include="reference.RFC.6409"?> <!-- Message Submission -->
<?rfc include="reference.I-D.draft-melnikov-email-tls-certs-01"?>
</references>
<references title="Informative References">
<?rfc include="reference.RFC.1321"?> <!-- MD5 -->
<?rfc include="reference.RFC.2246"?> <!-- TLS 1.0 -->
<?rfc include="reference.RFC.2979"?> <!-- Firewall Requirements -->
<?rfc include="reference.RFC.3848"?> <!-- ESMTP and LMTP transmission types -->
<?rfc include="reference.RFC.4346"?> <!-- TLS 1.1 -->
<?rfc include="reference.RFC.5598"?> <!-- Mail architecture -->
<?rfc include="reference.RFC.6698"?> <!-- DANE TLSA -->
</references>
<section anchor="design" title="Design Considerations">
<t>
This was written independently from draft-moore-email-tls-00.txt. This author believes it would be desirable to merge these two proposals. The arguments against STARTTLS in the other draft are largely resolved by the use of security latches. However, I agree with the end-goal of having all mail protocols except SMTP-relay always use a TLS-only port. This document presently doesn't mention TLS-only ports, although MUA software that switches (and latches) to a TLS-only port if STARTTLS is present in the capabilities would comply with this document. At a minimum it makes sense to encourage that behavior and require implementation of TLS-only ports.
</t>
<t>
There are many open issues with this document. Here is an attempt to enumerate some of them:
<list style="symbols">
<t>
A suggestion has been made to add a DNSSEC latch. I like the idea, but may need help writing the text and references correctly.
</t>
<t>
There is concern that the tls-nomd5 and tls-norc4 latches could result in worse security choices. If, for example, a vulnerability were found in AES resulting in that cipher being disabled but the existing weaknesses in RC4 remained relatively minor in the TLS context, then the tls-norc4 latch would cause problems rather than make security better. I feel the idea remains interesting enough to merit debate, but there is a good chance these two latches will be removed.
</t>
<t>
Having security latches result in a relatively serious failure as described in <xref target="latch-fail"/> risks violating an important goal of not introducing something that could generate support calls. However, a lesser failure reduces the resistance to man-in-the-middle attacks that security latches can provide. In general, I'd prefer to balance those two goals whenever possible. However, security that doesn't deploy is useless so man-in-the-middle defenses have to go if they are likely to prevent deployment. Getting defenses from passive eavesdropping deployed is definitely feasible and much more important. Feedback from potential implementers and service providers will be helpful to determine the right path here and is welcome.
</t>
<t>
I'm presently concerned about certificate expiration causing support calls that would deter deployment of this proposal due to the tls-cert security latch. Some of the requirements in draft-moore-email-tls-00.txt related to certificate management may help with this. A requirement for server software to generate an alarm, admin email and/or log message as certificate expiration approaches may also be helpful there.
</t>
<t>
This does not presently discuss pinning certificates. In general, I consider pinning certificates with an expiration date to be a serious deployment problem due to support calls generated when the certificates expire and difficulty of upgrading pinned certificates with a reasonable user interface at the MUA.
</t>
<t>
I'm concerned by the required support for DNS-ID and SRV-ID in draft-melnikov-email-tls-certs-01; and feel it may be premature to require that (particularly SRV-ID) if we want something deployable.
</t>
<t>
I believe the security latch in this is complementary with draft-ietf-dane-smtp-with-dane-02 but haven't thought about the issues in depth. I welcome feedback on this point.
</t>
<t>
TLS_DHE_RSA_WITH_AES_128_CBC_SHA was chosen because it's perhaps the most widely implemented cipher suite with perfect-forward-secrecy. However, that choice is subject to change based on feedback from the security community about the preferred PFS cipher suite to start using.
</t>
<t>
This does not presently cover POP. Adding POP would make this document slightly more complex so it was simpler to omit for the first version. The author would not object to adding POP.
</t>
<t>
This does not presently include a mechanism to determine what security latches were set during message transit. However, by defining a standard syntax and registry for security latches it is possible to add such a mechanism in a future proposal. Message Tracking Query Protocol could be used to provide such a mechanism.
</t>
</list>
</t>
</section>
<section title="Acknowledgements">
<t>Many thanks to Ned Freed for refinement of the initial concepts in this document. Thanks to Dan Newman and Alexey Melnikov for review feedback. Thanks to Paul Hoffman and Keith Moore for interesting feedback in initial conversations about this idea.</t>
</section>
</back>
</rfc>
