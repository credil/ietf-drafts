<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="no" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="std" docName="draft-ietf-tls-oob-pubkey-04.txt" ipr="trust200902">

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="TLS OOB Public Key Validation">Out-of-Band Public Key Validation for Transport Layer Security</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <author fullname="Paul Wouters" initials="P." surname="Wouters">
      <organization>Red Hat</organization>
      <address>
        <postal>
          <street/>
          <city/>
          <region/>
          <code/>
          <country/>
        </postal>
        <email>paul@nohats.ca</email>
      </address>
    </author>

    <author fullname="John Gilmore" initials="J." surname="Gilmore">
      <organization />
      <address>
        <postal>
          <street>PO Box 170608</street>
          <city>San Francisco</city>
          <region>California</region>
          <code>94117</code>
          <country>USA</country>
        </postal>
        <phone>+1 415 221 6524</phone>
        <email>gnu@toad.com</email>
        <uri>https://www.toad.com/</uri>
      </address>
    </author>

    <author fullname="Samuel Weiler" initials="S." surname="Weiler">
      <organization>SPARTA, Inc.</organization>
      <address>
        <postal>
          <street>7110 Samuel Morse Drive</street>
          <city>Columbia, Maryland</city>
          <code>21046</code>
          <country>US</country>
        </postal>
        <email>weiler@tislabs.com</email>
      </address>
    </author>

 <author initials="T." surname="Kivinen" fullname="Tero Kivinen">
            <organization>AuthenTec</organization>
            <address>
                <postal>
                    <street>Eerikinkatu 28</street>
                    <city>HELSINKI</city>
                    <code>FI-00180</code>
                    <country>FI</country>
                </postal>
                <email>kivinen@iki.fi</email>
            </address>
        </author>

        <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
            <organization>Nokia Siemens Networks</organization>
            <address>
                <postal>
                    <street>Linnoitustie 6</street>
                    <city>Espoo</city>
                    <code>02600</code>
                    <country>Finland</country>
                </postal>
                <phone>+358 (50) 4871445</phone>
                <email>Hannes.Tschofenig@gmx.net</email>
                <uri>http://www.tschofenig.priv.at</uri>
            </address>
        </author>

    <date year="2012" />


    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
         in the current day and month for you. If the year is not the current one, it is 
         to specify at least a month (xml2rfc assumes day="1" if not specified for the 
         purpose of calculating the expiry date).  With drafts it is normally sufficient to 
         specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>Security</area>

    <workgroup>TLS</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
         If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>TLS</keyword>
    <keyword>DNSSEC</keyword>
    <keyword>DANE</keyword>
    <keyword>Raw Public Key</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>
         This document specifies a new certificate type for exchanging
         raw public keys in Transport Layer Security (TLS)
         and Datagram Transport Layer Security (DTLS) for use with out-of-band
         public key validation. Currently, TLS authentication can only occur via X.509-based Public
Key Infrastructure (PKI) or OpenPGP certificates. By specifying a minimum resource for raw
         public key exchange, implementations can use alternative public key validation
         methods.
      </t>
      <t>
         One such alternative public key valiation method is offered by the DNS-Based Authentication of Named Entities (DANE) together with DNS Security. Another alternative is to utilize pre-configured keys, as is the case with sensors and other
         embedded devices. The usage of raw public keys, instead of X.509-based certificates, leads to a smaller 
         code footprint. 
      </t>

      <t>This document introduces the support for raw public keys in TLS.</t>
    </abstract>
  </front>

   <middle>
   
   	  <!-- ******************************************************************************************** -->


    <section anchor="into" title="Introduction">
       <t>Traditionally, TLS server public keys are obtained in PKIX containers
          in-band using the TLS handshake and validated using trust anchors
          based on a  <xref target='PKIX'/> certification authority (CA). This
          method can add a complicated trust relationship that is difficult
          to validate. Examples of such complexity can be seen in
          <xref target='Defeating-SSL'/>.</t>

       <t>Alternative methods are available that allow a TLS client to obtain
          the TLS server public key:</t>

       <t><list style="symbols">
          <t>The TLS server public key is obtained from a DNSSEC secured resource records              
             using DANE <xref target="I-D.ietf-dane-protocol"/>.</t>

          <t>The TLS server public key is obtained from a <xref target='PKIX'/>
             certificate chain from an Lightweight Directory Access Protocol (LDAP) <xref target="LDAP"/> server.</t>

          <t>The TLS client and server public key is provisioned into the operating system firmware image,
             and updated via software updates.</t>

          </list>
       </t>

       <t>Some smart objects use the UDP-based Constrained Application Protocol (CoAP) <xref target="I-D.ietf-core-coap"/> to
	      interact with a Web server to upload sensor data at a regular intervals, such as
          temperature readings. CoAP <xref target="I-D.ietf-core-coap"/> can utilize
          DTLS for securing the client-to-server communication. As part of the manufacturing process,
          the embeded device may be configured with the address and the public key of a
          dedicated CoAP server, as well as a public key for the client itself. 
		  The usage of X.509-based PKIX certificates <xref target='PKIX'/> does not suit all 
		  smart object deployments and would therefore be an unneccesarry burden.
       </t>
	   
	   <t>The Transport Layer Security (TLS) Protocol Version 1.2 <xref target="RFC5246"/> provides
         a framework for extensions to TLS as well as guidelines for
         designing such extensions. This document defines an extension to indicate the support for raw public keys. 
</t>
      </section>
	  
	  
	  <!-- ******************************************************************************************** -->
	  
      <section title="Terminology" anchor="terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref target="RFC2119">RFC&nbsp;2119</xref>.</t>
      </section>

	  <!-- ******************************************************************************************** -->

	<section title="New TLS Extensions"> 
	
   <t>In order to indicate the support for multiple certificate types
   two new extensions are defined by this specification with the following semantic:
   
   <list style="hanging"> 
   <t hangText="cert-send:">The certificate payload in this message contains a certificate of the type indicated by this extension.</t>
   <t hangText="cert-receive:">By including this extension an entity indicates that it is able to recieve and process the indicated certificate types. This list is sorted by preference.</t>
   </list> 
   </t> 
<t>
<figure anchor="structure" title="New TLS Extension Structures">
<artwork>
<![CDATA[ 
  enum { X.509(0), RawPublicKey(1), (255) } CertType;

  CertType cert-receive <1..2^8-1>;

  CertType cert-send;        	
]]>
</artwork>
</figure>
</t>

<t>No new cipher suites are required for use with raw public keys.  All
   existing cipher suites that support a key exchange method compatible
   with the key in the certificate can be used in combination with
   raw public key certificate types.</t>

</section> 

	  <!-- ******************************************************************************************** -->


    <section title="TLS Handshake Extension">
   <t>This section describes the semantic of the 'cert-send' and the 'cert-receive' extensions for the different handshake messages. </t> 
   
  <section title="Client Hello">
   <t>To allow a TLS client to indicate that it is able to receive a certificate of a specific type it MAY include the 
   'cert-receive' extension in the client hello message. To indicate the ability to process a raw public key by the 
   server the TLS client MUST include the 'cert-receive' with the value one (1) (indicating "RawPublicKey") in the list of supported certificate types. If a TLS client only supports X.509 certificates it MAY include this extension to indicate support for it.  
   </t>
   
   <!-- The hello extension mechanism
   is described in <xref target="RFC5246"/>.--> 

   <t>
   <!-- The 'cert-receive' TLS extension carries a list of supported certificate types it is willing to receive and process, sorted by client preference. The value zero (0) is defined for use with this specification. --> 
   Future documents may define additional certificate types that require addition values to be registered.
   </t>

<t>Note: No new cipher suites are required to use raw public keys.  All
   existing cipher suites that support a key exchange method compatible
   with the defined extension can be used.</t>

</section>

<section title="Server Hello">
<t>If the server receives a client hello that contains the 'cert-receive'
   extension then two outcomes are possible.
   The server MUST either select a certificate type from client-provided list or terminate the session with a
   fatal alert of type "unsupported_certificate". In the former case the procedure in <xref target="cert-payload"/> MUST be followed.</t>
</section>

<section title="Certificate Request">
<t>The Certificate Request payload sent by the TLS server to the TLS client MUST be accompanied by a 'cert-receive' extension, which indicates to the TLS client the certificate type the server supports.</t>
</section>

<section anchor="cert-payload" title="Certificate Payload">
<t>Certificate payloads MUST be accompanied by a 'cert-send' extension, which indicates the certificate format found in the Certificate payload itself.</t>

<t>The list of supported certificate types to choose from MUST have been obtained via the 'cert-receive' extension. This ensures that a Certificate payload only contains a certificate type that is also supported by the recipient.</t>

<t>When the 'RawPublicKey' certificate type is selected then the SubjectPublicKeyInfo structure MUST be placed into the Certificate payload. The type of the asymmetric key MUST match the selected key exchange algorithm.</t>  
</section>

<!-- 
<section title="Client Authentication">

<t>Client authentication by the TLS server is supported only through
   authentication of the received client SubjectPublicKeyInfo via an
   out-of-band method. </t>
</section>
--> 

<section title="Other TLS Messages"> 
<t>All the other handshake messages are identical to the TLS
   specification.</t>
</section> 

 </section>

	  <!-- ******************************************************************************************** -->


<section title="Examples">

<t><xref target="flow1"/>, <xref target="flow2"/>, and <xref target="flow3"/> illustrate example message exchanges. </t> 
   
<!--  <t> 
    The "RawPublicKey" value
   in the 'raw-public-key' extension allows the client to provide an 
   indication to the server that it supports the raw public key extension 
   in this document. The server responds with a certificate payload that 
   contains the raw public key as defined in this document. 
   Note that the certificate payloads only 
   contain the SubjectPublicKeyInfo structure instead of the entire
   certificate. 
  </t>
  
  --> 
  
  <t>The first example shows an exchange where the TLS client indicates its ability to 
  process two certificate types, namely raw public keys and X.509 certificates via the 
  'cert-receive' extension (see [1]). When the TLS server receives the client hello it 
  processes the cert-receive extension and since it also has a raw public key it indicates 
  in [2] that it had choosen to place the SubjectPublicKeyInfo structure into the Certificate 
  payload (see [3]). The client uses this raw public key in the TLS handshake and an out-of-band  technique, 
  such as DANE, to verify its validatity.</t>
  
  <t>
<figure anchor="flow1" title="Example with Raw Public Key provided by the TLS Server">
<artwork>
<![CDATA[ 
client_hello,
cert-receive=(RawPublicKey, X.509) -> // [1]

                         <-  server_hello,
                             cert-send=RawPublicKey, // [2]
                             certificate, // [3]
                             server_key_exchange,
                             server_hello_done

client_key_exchange,
change_cipher_spec,
finished                  ->

                         <- change_cipher_spec,
                            finished

Application Data        <------->     Application Data
]]>
</artwork>
</figure>
</t>

 <t>In our second example the TLS client and the TLS server use raw public keys. This is a use case envisioned for smart object networking. The TLS client in this case is an embedded device that only supports raw public keys and therefore it indicates this capability via the 'cert-receive' extension in [1]. As in the previously shown example the server fulfills the client's request and provides a raw public key into the Certificate payload back to the client (see [2] and [3]). The TLS server, however, demands client authentication and for this reason a Certificate_Request payload is added [4], which comes with an indication of the supported certificate types by the server, see [5]. The TLS client, who has a raw public key pre-provisioned, 
returns it in the Certificate payload [7] to the server with the indication about its content [6].</t> 
<t>
<figure anchor="flow2" title="Example with Raw Public Key provided by the TLS Server and the Client">
<artwork>
<![CDATA[ 
client_hello,
cert-receive=(RawPublicKey) -> // [1]

                         <-  server_hello,
                             cert-send=RawPublicKey,// [2]
                             certificate, // [3]
                             certificate_request, // [4]
                             cert-receive=(RawPublicKey, X.509) // [5]
                             server_key_exchange,
                             server_hello_done

cert-send=RawPublicKey, // [6]
certificate, // [7]
client_key_exchange,
change_cipher_spec,
finished                  ->

                         <- change_cipher_spec,
                            finished

Application Data        <------->     Application Data
]]>
</artwork>
</figure>
</t>

<t>In our last example we illustrate a combination of raw public key and X.509 usage. The client uses a raw public key 
for client authentication but the server provides an X.509 certificate. This exchange starts with the client indicating its ability to process X.509 certificates. The server provides the X.509 certificate using that format in [3] with the indication present in [2]. For client authentication, however, the server indicates in [5] that it is able to support raw public keys as well as X.509 certificates. The TLS client provides a raw public key in [7] and the indication in [6].</t>

 <t>
<figure anchor="flow3" title="Hybrid Certificate Example">
<artwork>
<![CDATA[ 
client_hello,
cert-receive=(X.509) -> // [1]

                         <-  server_hello,
                             cert-send=X.509,// [2]
                             certificate, // [3]
                             certificate_request, // [4]
                             cert-receive=(RawPublicKey, X.509) // [5]
                             server_key_exchange,
                             server_hello_done

cert-send=RawPublicKey, // [6]
certificate, // [7]
client_key_exchange,
change_cipher_spec,
finished                  ->

                         <- change_cipher_spec,
                            finished

Application Data        <------->     Application Data
]]>
</artwork>
</figure>
</t>


</section> 

	  <!-- ******************************************************************************************** -->



    <section title="Security Considerations" anchor="security">

	<t>The transmission of raw public keys, as described in this document, 
	provides benefits by lowering the over-the-air transmission overhead since 
	raw public keys are quite naturally smaller than an entire certificate. 
	There are also advantages from a codesize point of view for parsing and
    processing these keys. The crytographic procedures for assocating the 
	public key with the possession of a private key also follows standard 
	procedures.</t>

    <t>The main security challenge is, however, how to associate the public 
    key with a specific entity. This information will be needed to make 
    authorization decisions. Without a secure binding, man-in-the-middle 
    attacks may be the consequence. This document assumes that such 
	binding can be made out-of-band and we list a few examples in <xref target="into"/>. 
	DANE <xref target="I-D.ietf-dane-protocol"/> offers one such approach. 
	If public keys are obtained using DANE, these public keys are authenticated via DNSSEC.
	Pre-configured keys is another out of band method for authenticating raw public keys.
	 While pre-configured keys are not suitable for 
	a generic Web-based e-commerce environment such keys are a reasonable approach
	for many smart object deployments where there is a close relationship between 
	the software running on the device and the server-side communication endpoint. 
	Regardless of the chosen mechanism for out-of-band public key validation an 
	assessment of the most suitable approach has to be made prior to the start of a 
	deployment to ensure the security of the system.</t>
	
    </section>


	  <!-- ******************************************************************************************** -->


    <section anchor="IANA" title="IANA Considerations">
      <t>This document defines two new TLS extension, 'cert-send' and 'cert-receive', and their values need to be added to the TLS ExtensionType registry created by RFC 5246 <xref target="RFC5246"/>.
</t>

   <t>The values in these new extensions contains an 8-bit CertificateType field,
   for which a new registry, named "Certificate Types", is
   established in this document, to be maintained by IANA.  The registry
   is segmented in the following way:

   <list style="numbers">
   
      <t>The value (0) is defined in this document.</t>

      <t>Values from 2 through 223 decimal inclusive are assigned using  
   the 'Specification Required' policy defined in RFC
   5226 <xref target="RFC5226"/>.</t>
   
     <t>Values from 224 decimal through 255 decimal inclusive are
       reserved for 'Private Use', see <xref target="RFC5226"/>.</t>
    </list> 
    </t>
    </section>

	  <!-- ******************************************************************************************** -->

      <section title="Acknowledgements" anchor="acknowledgements">
      <t>The feedback from the TLS working group meeting at IETF#81 has 
	     substantially shaped the document and we would like to thank the 
	     meeting participants for their input.  The support for hashes of 
	     public keys has been moved to <xref target="I-D.ietf-tls-cached-info"/> after the discussions at the IETF#82 
	     meeting and the feedback from Eric Rescorla.</t>
      <t>We would like to thank the following persons for their review comments: Martin Rex, Bill Frantz, Zach Shelby, 
	     Carsten Bormann, Cullen Jennings, Rene Struik, Alper Yegin, Jim Schaad, Paul Hoffman, Robert Cragie, Nikos Mavrogiannopoulos, Phil Hunt, John Bradley, and James Manger.</t>
      </section>

  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

<references title="Normative References">
<?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?>
<?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml"?>

   <reference anchor='PKIX'>
      <front>
      <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
      <author initials='D.' surname='Cooper' fullname='D. Cooper'>
      <organization /></author>
      <author initials='S.' surname='Santesson' fullname='S. Santesson'>
      <organization /></author>
      <author initials='S.' surname='Farrell' fullname='S. Farrell'>
      <organization /></author>
      <author initials='S.' surname='Boeyen' fullname='S. Boeyen'>
      <organization /></author>
      <author initials='R.' surname='Housley' fullname='R. Housley'>
      <organization /></author>
      <author initials='W.' surname='Polk' fullname='W. Polk'>
      <organization /></author>
      <date year='2008' month='May' />
      <abstract>
         <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices. [STANDARDS TRACK]</t></abstract></front>
      <seriesInfo name='RFC' value='5280' />
      <format type='TXT' octets='352580' target='ftp://ftp.isi.edu/in-notes/rfc5280.txt' />
   </reference>

</references>

<references title="Informative References">
<?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.6091.xml"?>  
<?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-dane-protocol.xml"?>  
<?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-core-coap.xml"?>  
<?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-tls-cached-info.xml"?>  
<?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5226.xml"?>  


   <reference anchor='LDAP'>
      <front>
      <title>Lightweight Directory Access Protocol (LDAP): The Protocol</title>
      <author initials='J.' surname='Sermersheim' fullname='J. Sermersheim'>
      <organization /></author>
      <date year='2006' month='June' />
      <abstract>
         <t>This document describes the protocol elements, along with
         their semantics and encodings, of the Lightweight Directory
         Access Protocol (LDAP).  LDAP provides access to distributed
         directory services that act in accordance with X.500 data
         and service models.  These protocol elements are based
         on those described in the X.500 Directory Access Protocol
         (DAP). [STANDARDS TRACK]</t>
       </abstract>
      </front>
      <seriesInfo name='RFC' value='4511' />
      <format type='TXT' octets='150116' target='ftp://ftp.isi.edu/in-notes/rfc4511.txt' />
   </reference>
   
    <reference anchor='Defeating-SSL' target='http://www.blackhat.com/presentations/bh-dc-09/Marlinspike/BlackHat-DC-09-Marlinspike-Defeating-SSL.pdf'>
       <front>
       <title>New Tricks for Defeating SSL in Practice</title>
       <author initials='M.' surname='Marlinspike' fullname='Moxie Marlinspike'>
       <organization /></author>
       <date year='2009' month='February' />
       </front>
       <format type='PDF' target='http://www.blackhat.com/presentations/bh-dc-09/Marlinspike/BlackHat-DC-09-Marlinspike-Defeating-SSL.pdf' />
    </reference>
    
</references>

  </back>
</rfc>
