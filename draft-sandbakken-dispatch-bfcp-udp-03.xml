<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<rfc 
   category="info" 
   ipr="trust200902" 
   docName="draft-sandbakken-dispatch-bfcp-udp-03">

<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<!-- for I-D stage only -->
<?rfc strict="no" ?> <!-- as we have no 'Security Considerations' in isolation,
                          but one per -bis we're proposing -->
<?rfc comments="yes" ?>
<?rfc inline="no" ?>

<front>
  <title abbrev="BFCP-Unreliable">Revision of the Binary Floor Control Protocol (BFCP) for use over an unreliable transport</title>

  <author fullname="Charles Eckel" initials="C." surname="Eckel">
    <organization>Cisco</organization>
    <address>
      <postal>
        <street>170 West Tasman Drive</street>
        <city>San Jose, CA 95134</city>
        <country>United States</country>
      </postal>
      <email>eckelcu@cisco.com</email>
    </address>
  </author>

  <author fullname="Tom Kristensen" initials="T." surname="Kristensen">
    <organization>Cisco</organization>
    <address>
      <postal>
        <street>Philip Pedersens vei 22</street>
        <city>N-1366 Lysaker</city>
	<country>Norway</country>
      </postal>
      <email>tomkrist@cisco.com <!--tom.kristensen@tandberg.com-->, tomkri@ifi.uio.no</email>
    </address>
  </author>
  
  <author fullname="Mark K. Thompson" initials="M.K." surname="Thompson">
    <organization>Cisco</organization>
    <address>
      <postal>
        <street>Ruscombe Business Park</street>
        <city>Ruscombe, England</city>
	<country>UK</country>
      </postal>
      <email>markth2@cisco.com <!--mark.thompson@tandberg.com--></email>
    </address>
  </author>
  
  <author fullname="Geir A. Sandbakken" initials="G.A." surname="Sandbakken">
    <organization>Cisco</organization>
    <address>
      <postal>
        <street>Philip Pedersens vei 22</street>
        <city>N-1366 Lysaker</city>
	<country>Norway</country>
      </postal>
      <email>geirsand@cisco.com <!--geir.sandbakken@tandberg.com--></email>
    </address>
  </author>

  <author fullname="Eoin McLeod" initials="E." surname="McLeod">
    <organization>Cisco</organization>
    <address>
      <postal>
        <street>Ruscombe Business Park</street>
        <city>Ruscombe, England</city>
	<country>UK</country>
      </postal>
      <email>eoimcleo@cisco.com <!--eoin.mcleod@tandberg.com--></email>
    </address>
  </author>

  <date/>

  <area>Real-time Applications and Infrastructure</area>
  <workgroup>Dispatch Working Group</workgroup>
  
  <abstract>
    <t>This draft describes how to extend the Binary Floor Control Protocol (BFCP) for use over an unreliable transport. It details the differences from the BFCP protocol definition document and the Session Description Protocol (SDP) format specified for BFCP streams.</t>
  </abstract>
</front>

<middle>
  <section title="Introduction">
    <t>This draft describes how to extend the BFCP protocol to support unreliable transport. Minor changes to the transaction model are introduced in that all requests now have an appropriate response to complete the transaction. The requests are sent with a retransmit timer associated with the response to achieve reliability.</t>
    <t>This extension does not change the semantics of BFCP. It permits UDP as an alternate transport. Existing implementations, in the spirit of the approach detailed in earlier versions of this draft (see <xref target="chghist"/>), have demonstrated the approach to be feasible. Initial compatibility among implementations has been achieved at previous interoperability events. The purpose of this draft is to formalize and publish the extension from the standard specification to facilitate complete interoperability between implementations.</t>
    <t>The content of this draft relates to the BFCP protocol specification <xref target="RFC4582"/> and the SDP format for describing BFCP streams <xref target="RFC4583"/>. This draft is written with the goal of identifying the extensions associated with adding support for UDP as an alternate transport to an existing BFCP implementation.</t>
  </section>

  <section title="Terminology">
    <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119" />.</t>
  </section>

  <section anchor="motivation" title="Motivation">
    <t>In existing video conferencing deployments, BFCP is used to manage the floor for the content sharing associated with the conference. For peer to peer scenarios, including business to business conferences and point to point conferences in general, it is frequently the case that one or both endpoints exists behind a NAT/firewall. BFCP roles are negotiated in the offer/answer exchange as specified in <xref target="RFC4583"/>, resulting in one endpoint being responsible for opening the TCP connection used for the BFCP communication.</t>
    <t>
      <figure align="left" anchor="use_case" title="Use Case">
	  <artwork align="center"><![CDATA[
             +---------+
             | Network |
             +---------+
      +-----+ /       \ +-----+
      | NAT |/         \| NAT |
      +-----+           +-----+
+----+ /                     \ +----+
|BFCP|/                       \|BFCP|
| UA |                         | UA |
+----+                         +----+ ]]></artwork>
      </figure>
    </t>

    <t>The communication session between the video conferencing endpoints typically consists of a number of RTP over UDP media streams, for audio and video, and a BFCP connection for floor control. Existing deployments are most common in, but not limited to, enterprise networks. In existing deployments, NAT/firewall traversal for the RTP streams works using ICE and/or other methods, including those described in <xref target="I-D.ietf-mmusic-media-path-middleboxes"/>.</t>
    <t>When enhancing an existing SIP based video conferencing deployment with support for content sharing, the BFCP connection often poses a problem. The reasons for this fall into two general classes. First, there may be a strong preference for UDP based signaling in general. On high capacity endpoints (e.g. PSTN gateways or SIP/H.323 interworking gateways), TCP can suffer from head of line blocking, and it uses many kernel buffers. Network operators view UDP as a way to avoid both of these. Second, establishment and traversal of the TCP connection involving ephemeral ports, as is typically the case with BFCP over TCP, can be problematic, as described in Appendix A of <xref target="I-D.ietf-mmusic-ice-tcp"/>. A broad study of NAT behavior and peer-to-peer TCP establishment for a comprehensive set of TCP NAT traversal techniques over a wide range of commercial NAT products concluded it was not possible to establish a TCP connection in 11% of the cases <xref target="IMC05"/>. The results are worse when focusing on enterprise NATs. A study of hole punching as a NAT traversal technique across a wide variety of deployed NATs reported consistently higher success rates when using UDP than when using TCP <xref target="P2PNAT"/>.</t> 
    <t>To overcome the problems with establishing TCP flows between BFCP entities, this draft defines UDP as an alternate transport for BFCP, leveraging the same mechanisms in place for the RTP over UDP media streams for the BFCP communication. When using UDP as the transport, it is RECOMMENDED to follow the guidelines provided in <xref target="RFC5405"/>. NAT traversal for BFCP over UDP entities is discussed in more detail in <xref target="nat_traversal"/>.</t>
    <t>The authors view this extension as an admittedly non-ideal, but pragmatic, solution to an existing deployment challenge.</t>

    <section anchor="alternatives" title="Alternatives Considered">
      <t>In selecting the approach of defining UDP as an alternate transport for BFCP, several alternatives were considered and explored to some degree. Each of these is discussed briefly in the following subsections. In summary, while these alternatives work in a number of scenarios, they are not sufficient, in and of themselves, to address the use case targeted by this draft.</t>

      <section anchor="ice_tcp" title="ICE TCP">
        <t>ICE TCP <xref target="I-D.ietf-mmusic-ice-tcp"/> extends ICE to TCP based media, including the ability to offer a mix of TCP and UDP based candidates for a single stream. ICE TCP has, in general, a lower success probability for enabling TCP connectivity without a relay if both of the hosts are behind a NAT (see Appendix A of <xref target="I-D.ietf-mmusic-ice-tcp"/>) than enabling UDP connectivity in the same scenarios. The happens because many of the currently deployed NATs in video conferencing networks do not support the flow of TCP hand shake packets seen in case of TCP simultaneous-open, either because they do not allow incoming TCP SYN packets from an address to which a SYN packet has been sent to recently, or because they do not properly process the subsequent SYNACK. Implementing various techniques advocated for candidate collection in <xref target="I-D.ietf-mmusic-ice-tcp"/> should increase the success probability, but many of these techniques require support from some network elements (e.g., from the NATs). Such support is not common in enterprise firewalls and NATs.</t> 
      </section>

      <section anchor="teredo" title="Teredo">
        <t>Teredo <xref target="RFC4380"/> enables nodes located behind one or more IPv4 NATs to obtain IPv6 connectivity by tunneling packets over UDP.  Teredo extensions <xref target="RFC6081"/> provide additional capabilities to Teredo, including support for more types of NATs and support for more efficient communication.</t>
        <t>As defined, Teredo could be used to make BFCP work for the video conferencing use cases addressed in this draft. However, running the service requires the help of "Teredo servers" and "Teredo relays" <xref target="RFC4380"/>. These servers and relays generally do not exist in the existing video conferencing deployments. It also requires IPv6 awareness on the endpoints. It should also be noted that ICMP6, as used with Teredo to complete an initial protocol exchange and confirm that the appropriate NAT bindings have been set up, is not a conventional feature of IPv4 or even IPv6, and some currently deployed IPv6 firewalls discard ICMP messages. As these networks continue to evolve and tackle the transaction to IPv6, Teredo servers and relays may be deployed, making Teredo available as a suitable alternative to BFCP over UDP.</t>
      </section>

      <section anchor="gut" title="GUT">
        <t>GUT <xref target="I-D.manner-tsvwg-gut"/> attempts to facilitate tunneling over UDP by encapsulating the native transport protocol and its payload (in general the whole IP payload) within a UDP packet destined to the well-known port GUT_P. Unfortunately, it requires user-space TCP, for which there is not a readily available implementation, and creating one is a large project in itself. This draft has expired and its future is still not clear as it has not yet been adopted by a working group.</t>
      </section>

      <section anchor="upnp_igd" title="UPnP IGD">
        <t>Universal Plug and Play Internet Gateway Devices (UPnP IGD) sit on the edge of the network, providing connectivity to the Internet for computers internal to the LAN, but do not allow Internet devices to connect to computers on the internal LAN. IGDs enable a computer on an internal LAN to create port mappings on their NAT, through which hosts on the Internet can send data that will be forwarded to the computer on the internal LAN. IGDs may be self-contained hardware devices or may be software components provided within an operating system.</t>
        <t>In considering UPnP IGD, several issues exist. Not all NATs support UPnP, and many that do support it are configured with it turned off by default. NATs are often multilayered, and UPnP does not work well with such NATs. For example, a typical DSL modems acts as a NAT, and the user plugs in a wireless access point behind that, which adds another layer NAT. The client can discover the first layer of NAT using multicast but it is harder to figure out how to discover and control NATs in the next layer up.</t>
      </section>

      <section anchor="nat_pmp" title="NAT PMP">
        <t>The NAT Port Mapping Protocol (NAT PMP) allows a computer in a private network (behind a NAT router) to automatically configure the router to allow parties outside the private network to contact it. NAT PMP runs over UDP. It essentially automates the process of port forwarding. Included in the protocol is a method for retrieving the public IP address of a NAT gateway, thus allowing a client to make this public IP address and port number known to peers that may wish to communicate with it.</t>
        <t>Many NATs do not support PMP. In those that do support it, it has similar issues with negotiation of multilayer NATs as UPnP. Video conferencing is used extensively in enterprise networks, and NAT PMP is not generally available in enterprise-class routers.</t>
      </section>
    </section>
  </section>


  <!-- ===================== start rfc4582bis ===================== -->
  <section anchor="rfc4582bis" title="Difference from RFC4582">
    <t>This section details the difference from <xref target="RFC4582"/>, the base protocol specification of BFCP, required for use over an unreliable transport. The section numbers to which differences apply are indicated in parentheses in the titles of the sub-sections below.</t>
    
    <section title="Overview of Operation (4)">
      <t>Fourth paragraph change:</t>
      <t><list>
	  <t>There are two types of transaction in BFCP: client-initiated transactions and server-initiated transactions. Client-initiated transactions consist of a message from a client to the floor control server and a response from the floor control server to the client. Correspondingly, server-initiated transactions consist of a message from the floor control server to a client and the associated acknowledgement message from the client to the floor control server. Both messages can be related because they carry the same Transaction ID value in their common headers.</t>
      </list></t>
    
      <section title="Floor Participant to Floor Control Server Interface (4.1)">
        <t>Before seventh paragraph (page 9), insert:</t>
        <t><list>
  	  <t>Figures 2 and 3 below show call flows for two sample BFCP interactions when used over reliable transport. Appendix A (Editorial Note: here-in <xref target="unrelcallflow"/>) shows the same sample interactions but over an unreliable transport.</t>
        </list></t>
      </section>
    </section>
    
    <section title="COMMON-HEADER Format (5.1)">
      <t>The figure below should replace Figure 5: COMMON-HEADER format.</t>
      <t>
	<figure align="left" anchor="common_header" title="COMMON-HEADER format">
	  <artwork align="left"><![CDATA[
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | Ver |I|  Res  |  Primitive    |        Payload Length         |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                         Conference ID                         |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |         Transaction ID        |            User ID            |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ]]></artwork>
	</figure>
      </t>
      <t>The following text precedes "Reserved" on page 15:</t>
      <t><list>
	  <t>I: The Transaction Initiator (I) flag-bit has relevance only for use of BFCP over unreliable transport. When clear, it indicates that this message is a request initiating a new transaction, and the Transaction ID that follows has been generated for this transaction. When set, it indicates that this message is a response to a previous request, and the Transaction ID that follows is the one associated with that request. When BFCP is used over reliable transports, the flag has no significance and SHOULD be cleared.</t>
      </list></t>
      <t>The Reserved field changes name to Res due to limited space in the ASCII graphic in <xref target="common_header"/>. In the description of the Reserved field "the 5 bits" is changed to "the 4 bits".</t>
      <t>The description of Transaction ID should have the final clause deleted with the reference to Section 8 remaining. The value used for server-initiated transactions MUST be non-zero when BFCP is used over unreliable transports, and this qualification shall be described in the updated Section 8.</t>
      <t>The values below should be appended to the end of Table 1: BFCP primitives.</t>
      <texttable anchor="headerprimitives" title="BFCP primitives">
	<ttcol align='center'>Value</ttcol>
	<ttcol align='left'>Primitive</ttcol>
	<ttcol align='left'>Direction</ttcol>
	<c>14</c><c>FloorRequestStatusAck</c><c><![CDATA[P -> S ; Ch -> S]]></c>
	<c>15</c><c>ErrorAck</c><c><![CDATA[P -> S ; Ch -> S]]></c>
	<c>16</c><c>FloorStatusAck</c><c><![CDATA[P -> S ; Ch -> S]]></c>
	<c>17</c><c>Goodbye</c><c><![CDATA[P -> S ; Ch -> S ; ]]></c>
        <c>  </c><c>       </c><c><![CDATA[P <- S ; Ch <- S]]></c>
	<c>18</c><c>GoodbyeAck</c><c><![CDATA[P -> S ; Ch -> S ; ]]></c>
        <c>  </c><c>       </c><c><![CDATA[P <- S ; Ch <- S]]></c>
      </texttable>
    </section>

    <section title="ERROR-CODE (5.2.6)">
      <t>The value below should be appended to the end of Table 5: Error Code meaning.</t>
      <texttable anchor="errorcode" title="Error Code meaning">
	<ttcol align='center'>Value</ttcol>
	<ttcol align='left'>Meaning</ttcol>
	<c>10</c>
	<c>Unable to parse message</c>
	<c>11</c>
	<c>Use DTLS</c>
      </texttable>
    </section>

    <section title="FloorRequestStatusAck (5.3.14)">
      <t>This new subsection specifies the normative ABNF for the new primitive, FloorRequestStatusAck.</t>
      <t><list>
	  <t>Floor participants and chairs acknowledge the receipt of a FloorRequestStatus message from the floor control server when communicating over unreliable transport. The following is the format of the FloorRequestStatusAck message:</t>
	  <t>
	    <figure align="left" anchor="FloorRequestStatusAck" title="FloorRequestStatusAck format">
	      <artwork align="left"><![CDATA[
FloorRequestStatusAck          =    (COMMON-HEADER)
                                   *[EXTENSION-ATTRIBUTE] ]]></artwork>
	    </figure>
	  </t>
      </list></t>
    </section>
    
    <section title="ErrorAck (5.3.15)">
      <t>This new subsection specifies the normative ABNF for the new primitive, ErrorAck.</t>
      <t><list>
	  <t>Floor participants and chairs acknowledge the receipt of an Error message from the floor control server when communicating over unreliable transport. The following is the format of the ErrorAck message:</t>
	  <t>
	    <figure align="left" anchor="ErrorAck" title="ErrorAck format">
	      <artwork align="left"><![CDATA[
ErrorAck                       =    (COMMON-HEADER)
                                   *[EXTENSION-ATTRIBUTE] ]]></artwork>
	    </figure>
	  </t>
      </list></t>
    </section>
    
    <section title="FloorStatusAck (5.3.16)">
      <t>This new subsection specifies the normative ABNF for the new primitive, FloorStatusAck.</t>
      <t><list>
	  <t>Floor participants and chairs acknowledge the receipt of a FloorStatus message from the floor control server when communicating over unreliable transport. The following is the format of the FloorStatusAck message:</t>
	  <t>
	    <figure align="left" anchor="FloorStatusAck" title="FloorStatusAck format">
	      <artwork align="left"><![CDATA[
FloorStatusAck                 =    (COMMON-HEADER)
                                   *[EXTENSION-ATTRIBUTE] ]]></artwork>
	    </figure>
	  </t>
      </list></t>
    </section>
    
    <section title="Goodbye (5.3.17)">
      <t>This new subsection specifies the normative ABNF for the new primitive, Goodbye.</t>
      <t><list>
	  <t>BFCP entities that wish to dissociate themselves from their remote participant do so through the transmission of a Goodbye. The following is the format of the Goodbye message:</t>
	  <t>
	    <figure align="left" anchor="Goodbye" title="Goodbye format">
	      <artwork align="left"><![CDATA[
Goodbye                        =    (COMMON-HEADER)
                                   *[EXTENSION-ATTRIBUTE] ]]></artwork>
	    </figure>
	  </t>
      </list></t>
    </section>
    
    <section title="GoodbyeAck (5.3.18)">
      <t>This new subsection specifies the normative ABNF for the new primitive, GoodbyeAck.</t>
      <t><list>
	  <t>BFCP entities communicating over an unreliable transport should acknowledge the receipt of a Goodbye message from a peer. The following is the format of the GoodbyeAck message:</t>
	  <t>
	    <figure align="left" anchor="GoodbyeAck" title="GoodbyeAck format">
	      <artwork align="left"><![CDATA[
GoodbyeAck                     =    (COMMON-HEADER)
                                   *[EXTENSION-ATTRIBUTE] ]]></artwork>
	    </figure>
	  </t>
      </list></t>
    </section>

    <section title="Transport (6)">
      <t>An additional behavior is recommended for entities participating in communication over an unreliable transport that either wish to leave or are asked to leave an established BFCP connection, as detailed in the revised section introduction text below.</t>
      <t><list>
	  <t>The transport over which BFCP entities exchange messages depends on how clients obtain information to contact the floor control server (e.g. using an SDP offer/answer exchange <xref target="RFC4583"/>). Two transports are supported: TCP, appropriate where entities can be sure that their connectivity is not impeded by NAT devices, media relays or firewalls; and UDP for those deployments where TCP may not be applicable or appropriate.</t>
	  <t>If a client wishes to end its BFCP association with a floor control server, it is RECOMMENDED that the client send a Goodbye message to dissociate itself from any allocated resources. If a floor control server wishes to end its BFCP association with a client (e.g. the Focus of the conference informs the floor control server that the client has been kicked out from the conference), it is RECOMMENDED that the floor control server send a Goodbye message towards the client.</t>
      </list></t>

      <section anchor="tcp_transport" title="Reliable Transport (6.1)">
        <t>BFCP entities may elect to exchange BFCP messages using TCP connections. TCP provides an in-order reliable delivery of a stream of bytes. Consequently, message framing is implemented in the application layer. BFCP implements application-layer framing using TLV-encoded attributes.</t>
        <t>A client MUST NOT use more than one TCP connection to communicate with a given floor control server within a conference. Nevertheless, if the same physical box handles different clients (e.g. a floor chair and a floor participant), which are identified by different User IDs, a separate connection per client is allowed.</t>
        <t>If a BFCP entity (a client or a floor control server) receives data that cannot be parsed, the entity MUST close the TCP connection, and the connection SHOULD be reestablished. Similarly, if a TCP connection cannot deliver a BFCP message and times out, the TCP connection SHOULD be reestablished.</t>
        <t>The way connection reestablishment is handled depends on how the client obtains information to contact the floor control server. Once the TCP connection is reestablished, the client MAY resend those messages for which it did not get a response from the floor control server.</t>
        <t>If a floor control server detects that the TCP connection towards one of the floor participants is lost, it is up to the local policy of the floor control server what to do with the pending floor requests of the floor participant. In any case, it is RECOMMENDED that the floor control server keep the floor requests (i.e., that it does not cancel them) while the TCP connection is reestablished.</t>
        <t>To maintain backwards compatibility with older implementations of <xref target="RFC4583"/>, BFCP entities MUST interpret the graceful close of their TCP connection from their associated participant as an implicit Goodbye message.</t>
      </section>

      <section anchor="udp_transport" title="Unreliable Transport (6.2)">
        <t>BFCP entities may elect to exchange BFCP messages using UDP datagrams. UDP is an unreliable transport where neither delivery nor order is assured. Each BFCP UDP datagram MUST contain exactly one BFCP message. In the event the size of a BFCP message exceeds the MTU size, the BFCP message will be fragmented at the IP layer. Considerations related to fragmentation are covered in <xref target="large_messages"/>. The message format for exchange of BFCP in UDP datagrams is the same as for a TCP stream above.</t>
        <t>Clients MUST announce their presence to the floor control server by transmission of a Hello message. This Hello message MUST be responded to with a HelloAck message and only upon receipt can the client consider the floor control service as present and available.</t>
        <t>As described in Section 8, each request sent by a floor participant or chair shall form a client transaction that expects an acknowledgement message back from the floor control server within a retransmission window. Concordantly, messages sent by the floor control server that are not transaction-completing (e.g. FloorStatus announcements as part of a FloorQuery subscription) are server-initiated transactions that require acknowledgement messages from the floor participant and chair entities to which they were sent.</t>
        <t>If a BFCP entity receives data that cannot be parsed, the receiving participant MAY send an Error message with parameter value 10 indicating receipt of a malformed message. If the message can be parsed to the extent that it is able to discern that it was a response to an outstanding request transaction, the client MAY discard the message and await retransmission. BFCP entities receiving an Error message with value 10 SHOULD acknowledge the error and act accordingly.</t>
        <t>Transaction ID values are non-sequential and entities are at liberty to select values at random. Entities MUST only have at most one outstanding request transaction at any one time. Implicit subscriptions, such as FloorRequest messages that have multiple responses as the floor control server processes intermediate states until Granted or Denied terminal states attained, can be characterized by a client-initiated request transaction whose acknowledgement is implied by the first FloorRequestStatus response from the floor control server. The subsequent changes in state for the request are new transactions whose Transaction ID is determined by the floor control server and whose receipt by the client participant shall be acknowledged with a FloorRequestStatusAck message. [Editorial note: would it be more straightforward to have all FloorRequestStatus messages acknowledged with a FloorRequestStatusAck message?]</t>
        <t>By restricting entities to having at most one pending transaction open, both the out-of-order receipt of messages as well as the possibility for congestion are mitigated. Additional details regarding congestion control are provided in <xref target="congestion"/>. A server-initiated request (e.g. a FloorStatus with an update from the floor control server) received by a participant before the initial FloorRequestStatus message that closes the client-initiated transaction that was instigated by the FloorRequest MUST be treated as superseding the information conveyed in any delinquent response. As the floor control server cannot send a second update to the implicit floor status subscription until the first is acknowledged, ordinality is maintained.</t>
        <section anchor="congestion" title="Congestion Control">
          <t>BFCP may be characterized to generate "low data-volume" traffic, per the classification in <xref target="RFC5405"/>. Nevertheless is it necessary to ensure suitable and necessary congestion control mechanisms are used for BFCP over UDP. As described in previous paragraph every entity - client or server - is only allowed to send one request at a time, and await the acknowledging response. This way at most one datagram is sent per RTT given the message is not lost during transmission. In case the message is lost, the request retransmission timer T1 specified in <xref target="timers_retrans"/> will fire and the message is retransmitted up to three times. The default initial interval is set to 500ms and the interval is doubled after each retransmission attempt, <!-- tki: may very well skip this reference to SIP, but keep during initial discussion of Congestion Control for UDP/BFCP!--> this is identical to the specification of the T1 timer in SIP as described in Section 17.1.1.2 of <xref target="RFC3261"/>. <!-- tki: Need to provide a bullet proof congestion control handling and get Transport AD/Eggert "signature" --></t>
        </section>
        <section anchor="icmp" title="ICMP Error Handling">
          <t>If a BFCP entity receives an ICMP port unreachable message mid-conversation, the entity SHOULD treat the conversation as closed (e.g. an implicit Goodbye message from the peer) and behave accordingly. The entity MAY attempt to re-establish the conversation afresh. The new connection will appear as a wholly new floor participant, chair or floor control server with all state previously held about that participant lost.</t>
          <t>Note: This is because the peer entities cannot rely on IP and port tuple to uniquely identify the participant, nor would extending Hello to include an attribute that advertised what the entity previously was assigned as a User ID be acceptable due to session hijacking.</t>
          <t>In deployments where NAT appliances, firewalls or other such devices are present and affecting port reachability for each entity, one possibility is to utilize the peer connectivity checks, relay use and NAT pinhole maintenance mechanisms defined in ICE <xref target="RFC5245"/>.</t>
        </section>
      </section>
      <section anchor="large_messages" title="Large Message Considerations">
        <t>Large messages become a concern when using BFCP if the overall size of a single BFCP message exceeds that representable within the 16-bit Payload Length field of the COMMON-HEADER.  When using UDP, there is the added concern that a single BFCP message can be fragmented at the IP layer if its overall size exceeds the MTU threshold of the network.</t>
        <t>The target use cases for BFCP via UDP typically involve relatively small BFCP messages.  Combining that with the goal of minimizing differences to the standard BFCP specification, BFCP entities SHOULD ensure that their messages are smaller than the recommended MTU size of 1300 bytes when encoded to minimize the likelihood of fragmentation in route to their peer entity.</t>  
        <t><list style="empty"><t>Note: While outside the scope of this document, the definition of additional mechanisms to further address BFCP message fragmentation are welcome. Potential mechanisms mentioned previously include:</t>
          <t><list>
            <t>- a mechanism for splitting a single large message into additive messages. The mechanism defined for RELOAD in section 5.7 of <xref target="I-D.ietf-p2psip-base"/> has been identified as a good candidate.</t> <!-- http://www.ietf.org/mail-archive/web/xcon/current/msg01920.html  -->
            <t>- an applicability statement on those BFCP messages and/or attributes deemed as inappropriate for use over transports where fragmentation is a concern.</t>
            <t>- a SIP event package to deliver information to the endpoints.</t> <!-- http://www.ietf.org/mail-archive/web/xcon/current/msg01318.html -->
          </list></t>
        </list></t>
      </section>
    </section>

    <section anchor="lowerlayersec" title="Lower-Layer Security (7)">
      <t>Expand the section to mandate support for DTLS when transport over UDP is used such that it reads as follows:</t>
      <t><list>
          <t>BFCP relies on lower-layer security mechanisms to provide replay and integrity protection and confidentiality.  BFCP floor control servers and clients (which include both floor participants and floor chairs) MUST support TLS for transport over TCP and MUST support DTLS for transport over UDP <xref target="RFC5246"/>.  Any BFCP entity MAY support other security mechanisms.</t>
          <t>BFCP entities MUST support, at a minimum, the TLS_RSA_WITH_AES_128_CBC_SHA ciphersuite <xref target="RFC5246"/>.</t>
          <t>Which party, the client or the floor control server, acts as the TLS/DTLS server depends on how the underlying TCP/DTLS connection is established.  For example, when the TCP/DTLS connection is established using an SDP offer/answer exchange <xref target="RFC4583"/>, the answerer (which may be the client or the floor control server) always acts as the TLS/DTLS server.</t>
      </list></t>
    </section>

    <section title="Protocol Transactions (8)"> <!-- mkt one in flight; top bit; pecking order reference -->
      <t>The final clause of the introduction to section 8 should be read as:</t>
      <t><list>
	  <t>Since they do not trigger any response, their Transaction ID is set to 0 when used over reliable transports, but must be non-zero and unique in the context of outstanding transactions over unreliable transports.</t>
	  <t>When using BFCP over unreliable transports, all requests will use retransmit timer T1 (see <xref target="timers"/>) until the transaction is completed.</t>
      </list></t>
    </section>
      
    <section title="Server Behavior (8.2)">
      <t>The final clause of this section should be read as:</t>
      <t><list>
	  <t>Server-initiated transactions MUST contain a Transaction ID equal to 0 when BFCP is used over reliable transports. Over unreliable transport, the Transaction ID shall have the same properties as for client-initiated transactions: the server MUST set the Transaction ID value in the common header to a number that is different from 0 and that MUST NOT be reused in another message from the server until the appropriate response from the client is received for the transaction.  The server uses the Transaction ID value to match this message with the response from the floor participant or floor chair.</t>
      </list></t>
    </section>

    <section anchor="timers" title="Timers (8.3)">
      <t>New section:</t>
      <t><list>
	  <t>When BFCP entities are communicating over an unreliable transport, two retransmission timers are employed to help mitigate against loss of datagrams. Retransmission and response caching are not required when BFCP entities communicate over reliable transports.</t>
      </list></t>
    </section>
      
    <section anchor="timers_retrans" title="Request Retransmission Timer, T1 (8.3.1)">
      <t>T1 is a timer that schedules retransmission of a request until an appropriate response is received or until the maximum number of retransmissions have occurred. The timer doubles on each re-transmit, failing after three unacknowledged transmission attempts.</t>
      <t>If a valid response is not received for a client- or server-initiated transaction, the implementation MUST consider the BFCP association as failed. Implementations SHOULD follow the reestablishment procedure described in section 6 (e.g. initiate a new offer/answer <xref target="RFC3264"/> exchange). Alternatively, they MAY continue without BFCP and therefore not be participant in any floor control actions.</t>
    </section>

    <section anchor="timers_cache" title="Response Retransmission Timer, T2 (8.3.2)">
      <t>T2 is a timer that, when fires, signals that the BFCP entity can release knowledge of the transaction against which it is running. It is started upon the first transmission of the response to a request and is the only mechanism by which that response is released by the BFCP entity. Any subsequent retransmissions of the same request can be responded to by replaying the cached response, whilst that value is retained until the timer has fired.</t>
      <t>T2 shall be set such that it encompasses all legal retransmissions per T1 plus a factor to accommodate network latency between BFCP entities.</t>
    </section>

    <section anchor="timers_values" title="Timer Values (8.3.3)">
      <t>The table below defines the different timers required when BFCP entities communicate over an unreliable transport.</t>
      <texttable anchor="timertable" title="Timers">
	<ttcol align='center'>Timer</ttcol>
	<ttcol align='left'>Description</ttcol>
	<ttcol align='center'>Value/s</ttcol>
	<c>T1</c><c>Initial request retransmission timer</c><c>0.5s</c>
	<c>T2</c><c>Response retransmission timer</c><c>10s</c>
      </texttable>
      <t></t>
      <t>The default value for T1 is 500 ms, this is an estimate of the RTT for completing the transaction. T1 MAY be chosen larger,  and this is RECOMMENDED if it is known in advance that the RTT is larger. Regardless of the value of T1, the exponential backoffs on retransmissions described in <xref target="timers_retrans"/> MUST be used.</t>
      </section>

    <section title="Authentication and Authorization (9)">
      <t>The first sentence of the second paragraph should be read as:</t>
      <t><list>
	  <t>BFCP supports TLS/DTLS mutual authentication between client and floor control servers, as specified in section 9.1. </t>
      </list></t>

      <section title="TLS Based Mutual Authentication (9.1)">
        <t>Change each instance of "TLS" to "TLS/DTLS", and each instance of "TCP" to "TCP/UDP".</t>
      </section>

    </section>
    
    <section title="Receiving a Response [to a FloorRequest Message] (10.1.2)">
      <t>Prepend the sentence below at the start of this subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a FloorRequest from a participant, the floor control server MUST respond with a FloorRequestStatus message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>

    <section title="Receiving a Response [to a FloorRelease Message] (10.2.2)">
      <t>Prepend the sentence below at the start of this subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a FloorRelease from a participant, the floor control server MUST respond with a FloorRequestStatus message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section title="Receiving a Response [to a ChairAction Message] (11.2)">
      <t>Prepend the sentence below at the start of this subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a ChairAction from a participant, the floor control server MUST respond with a ChairActionAck message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section title="Receiving a Response [to a FloorQuery Message] (12.1.2)">
      <t>Prepend the sentence below at the start of this subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a FloorQuery from a participant, the floor control server MUST respond with a FloorStatus message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section title="Receiving a Response [to a FloorRequestQuery Message] (12.2.2)">
      <t>Prepend the sentence below at the start of this subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a FloorRequestQuery from a participant, the floor control server MUST respond with a FloorRequestStatus message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section title="Receiving a Response [to a UserQuery Message] (12.3.2)">
      <t>Prepend the sentence below at the start of this subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a UserQuery from a participant, the floor control server MUST respond with a UserStatus message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section title="Receiving a Response [to a Hello Message] (12.4.2)">
      <t>Prepend the sentence below at the start of this subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a Hello from a participant, the floor control server MUST respond with a HelloAck message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section title="Reception of a FloorRequestStatus Message (13.1.3)">
      <t>The sentence below shall appear as a new subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a FloorRequestStatus message from a floor control server, the participant MUST respond with a FloorRequestStatusAck message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section title="Reception of a FloorStatus Message (13.5.3)">
      <t>The sentence below shall appear as a new subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving a FloorStatus message from a floor control server, the participant MUST respond with a FloorStatusAck message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section title="Reception of an Error Message (13.8.1)">
      <t>The sentence below shall appear as a new subsection:</t>
      <t><list>
	  <t>When communicating over unreliable transport and upon receiving an Error message from a floor control server, the participant MUST respond with a ErrorAck message within the transaction failure window to complete the transaction.</t>
      </list></t>
    </section>
    
    <section anchor="seccon4582" title="Security Considerations (14)">
      <t>Change each instance of "TLS" to "TLS/DTLS", and each instance of "TCP" to "TCP/UDP".</t>
    </section>
    
    <section title="IANA Considerations - Primitive Subregistry (15.2)">
      <t>This section instructs the IANA to register the following new values for the BFCP primitive subregistry.</t>
      <texttable anchor="iana_4582_primitive" title="BFCP primitive subregistry">
	<ttcol align='center'>Value</ttcol>
	<ttcol align='left'>Primitive</ttcol>
	<ttcol align='center'>Reference</ttcol>
	<c>14</c><c>FloorRequestStatusAck</c><c>RFC 4582bis</c>
	<c>15</c><c>ErrorAck</c><c>RFC 4582bis</c>
	<c>16</c><c>FloorStatusAck</c><c>RFC 4582bis</c>
	<c>17</c><c>Goodbye</c><c>RFC 4582bis</c>
	<c>18</c><c>GoodbyeAck</c><c>RFC 4582bis</c>
      </texttable>
    </section>
    
    <section title="IANA Considerations - Error Code Subregistry (15.4)">
      <t>This section instructs the IANA to register the following new values for the BFCP Error Code subregistry.</t>
      <texttable anchor="iana_4582_errcode" title="BFCP Error Code subregistry">
	<ttcol align='center'>Value</ttcol>
	<ttcol align='left'>Meaning</ttcol>
	<ttcol align='center'>Reference</ttcol>
	<c>10</c><c>Unable to parse message</c><c>RFC 4582bis</c>
	<c>11</c><c>Use DTLS</c><c>RFC 4582bis</c>
      </texttable>
    </section>
    
    <section anchor="unrelcallflow" title="Example Call Flows for BFCP over Unreliable Transport (Appendix A)">
      <t>With reference to Section 4.1, the following figures show representative call-flows for requesting and releasing a floor, and obtaining status information about a floor when BFCP is deployed over an unreliable transport. The figures here show a loss-less interaction.</t>
      <t>Editorial Note: A future version of this draft will show an example with lost packets due to unreliable transport, as well as examples on usage of DTLS and STUN in call the setup phase.</t>
      <t>
	<figure align="left" anchor="ReqRelUnrelExample" title="Requesting and releasing a floor">
	  <artwork align="left"><![CDATA[
      Floor Participant                                 Floor Control
                                                           Server
              |(1) FloorRequest                               |
              |Transaction ID: 123                            |
              |User ID: 234                                   |
              |FLOOR-ID: 543                                  |
              |---------------------------------------------->|
              |                                               |
              |(2) FloorRequestStatus                         |
              |Transaction ID: 123                            |
              |User ID: 234                                   |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 789                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Pending          |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |<----------------------------------------------|
              |                                               |
              |(3) FloorRequestStatus                         |
              |Transaction ID: 4098                           |
              |User ID: 234                                   |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 789                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Accepted         |
              |              Queue Position: 1st              |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |<----------------------------------------------|
              |                                               |
              |(4) FloorRequestStatusAck                      |
              |Transaction ID: 4098                           |
              |User ID: 234                                   |
              |---------------------------------------------->|
              |                                               |
              |(5) FloorRequestStatus                         |
              |Transaction ID: 4130                           |
              |User ID: 234                                   |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 789                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Granted          |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |<----------------------------------------------|
              |                                               |
              |(6) FloorRequestStatusAck                      |
              |Transaction ID: 4130                           |
              |User ID: 234                                   |
              |---------------------------------------------->|
              |                                               |
              |(7) FloorRelease                               |
              |Transaction ID: 154                            |
              |User ID: 234                                   |
              |FLOOR-REQUEST-ID: 789                          |
              |---------------------------------------------->|
              |                                               |
              |(8) FloorRequestStatus                         |
              |Transaction ID: 154                            |
              |User ID: 234                                   |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 789                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Released         |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |<----------------------------------------------| ]]></artwork>
	</figure>
      </t>
      <t>Note that in <xref target="ReqRelUnrelExample"/>, the FloorRequestStatus message from the floor control server to the floor participant is a transaction-closing message as a response to the client-initiated transaction with Transaction ID 154. It does not and SHOULD NOT be followed by a FloorRequestStatusAck message from the floor participant to the floor control server.</t>
      <t>
	<figure align="left" anchor="StatusUnrelExample" title="Obtaining status information about a floor">
	  <artwork align="left"><![CDATA[
      Floor Participant                                 Floor Control
                                                           Server
              |(1) FloorQuery                                 |
              |Transaction ID: 257                            |
              |User ID: 234                                   |
              |FLOOR-ID: 543                                  |
              |---------------------------------------------->|
              |                                               |
              |(2) FloorStatus                                |
              |Transaction ID: 257                            |
              |User ID: 234                                   |
              |FLOOR-ID:543                                   |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 764                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Accepted         |
              |              Queue Position: 1st              |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |      BENEFICIARY-INFORMATION                  |
              |                  Beneficiary ID: 124          |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 635                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Accepted         |
              |              Queue Position: 2nd              |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |      BENEFICIARY-INFORMATION                  |
              |                  Beneficiary ID: 154          |
              |<----------------------------------------------|
              |                                               |
              |(3) FloorStatus                                |
              |Transaction ID: 4319                           |
              |User ID: 234                                   |
              |FLOOR-ID:543                                   |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 764                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Granted          |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |      BENEFICIARY-INFORMATION                  |
              |                  Beneficiary ID: 124          |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 635                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Accepted         |
              |              Queue Position: 1st              |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |      BENEFICIARY-INFORMATION                  |
              |                  Beneficiary ID: 154          |
              |<----------------------------------------------|
              |                                               |
              |(4) FloorStatusAck                             |
              |Transaction ID: 4319                           |
              |User ID: 234                                   |
              |---------------------------------------------->|
              |                                               |
              |(5) FloorStatus                                |
              |Transaction ID: 4392                           |
              |User ID: 234                                   |
              |FLOOR-ID:543                                   |
              |FLOOR-REQUEST-INFORMATION                      |
              |      Floor Request ID: 635                    |
              |      OVERALL-REQUEST-STATUS                   |
              |              Request Status: Granted          |
              |      FLOOR-REQUEST-STATUS                     |
              |            Floor ID: 543                      |
              |      BENEFICIARY-INFORMATION                  |
              |                  Beneficiary ID: 154          |
              |<----------------------------------------------|
              |                                               |
              |(6) FloorStatusAck                             |
              |Transaction ID: 4392                           |
              |User ID: 234                                   |
              |---------------------------------------------->| ]]></artwork>
	</figure>
      </t>
    </section>
  </section>
  <!-- ===================== end rfc4582bis ===================== -->
  
  <!-- ===================== start rfc4583bis ===================== -->
  <section anchor="rfc4583bis" title="Revision of RFC4583">
    <t>This section details revisions to <xref target="RFC4583"/>, the SDP format for specifying BFCP streams. The section number to which updates apply are indicated in parentheses in the titles of the sub-sections below.</t>

    <section title="Fields in the 'm' Line (3)">
      <t>The section shall be re-written to remove reference to the exclusivity of TCP as a transport for BFCP streams.</t>
      <t><list style='numbers'>
	  <t>In paragraph four, "... will initiate its TCP connection ..." becomes "... will direct BFCP messages ..."</t>
	  <t>In paragraph four, delete "Since BFCP only runs on top of TCP, the port is always a TCP port."</t>
	  <t>Change paragraph five, "We define two new values ... ", to, "We define four new values for the transport field: TCP/BFCP, TCP/TLS/BFCP, UDP/BFCP, and UDP/TLS/BFCP.  TCP/BFCP is used when BFCP runs directly on top of TCP, and TCP/TLS/BFCP is used when BFCP runs on top of TLS, which in turn runs on top of TCP.  Similarly, UDP/BFCP is used when BFCP runs directly on top of UDP, and UDP/TLS/BFCP is used when BFCP runs on top of DTLS <xref target="RFC4347"/>, which in turn runs on top of UDP.</t>
      </list></t>
    </section>

    <section title="Authentication (8)">
      <t>In last paragraph, change "When TLS is used, once the underlaying TCP connection is established" to "When TLS is used with TCP, once the underlying connection is established".</t>
    </section>

    <section anchor="seccon4583" title="Security Considerations (10)">
      <t>Append to the first paragraph, "Furthermore, when using DTLS over UDP, considerations for its use with RTP and RTCP are presented in <xref target="RFC5763"/>. The requirements for the offer/answer exchange, as listed in Section 5 of that document, MUST be followed."</t> 
    </section>

    <section title="Registration of SDP 'proto' Values (11.1)">
      <t>This section should be renamed now that there are more values to register in the SDP parameters registry, with the following added to the table:</t>
      <texttable anchor="registration" title="Value for the SDP 'proto' field">
	<ttcol align='left'>Value</ttcol> <ttcol align='left'>Reference</ttcol>
	<c>UDP/BFCP</c>                   <c>RFC 4583bis</c>
	<c>UDP/TLS/BFCP</c>               <c>RFC 4583bis</c>
      </texttable>
    </section>
  </section>
  <!-- ===================== end rfc4583bis ===================== -->
  
  <section anchor="nat_traversal" title="NAT Traversal"> <!-- Open issues -->
    <t>One of the key benefits when using UDP for BFCP communication is the ability to leverage the existing NAT traversal infrastructure and strategies deployed to facilitate transport of the media associated with the video conferencing sessions. Depending on the given deployment, this infrastructure typically includes some subset of ICE <xref target="RFC5245"/>.</t>
    <t>In order to facilitate the initial establishment of NAT bindings, and to maintain those bindings once established, BFCP over UDP entities are RECOMMENDED to use STUN <xref target="RFC5389"/> for keep-alives, as described for SIP <xref target="RFC5626"/>.  This results in each BFCP entity sending a packet, both to open the pinhole and to learn what IP/port the NAT assigned for the binding.</t> 
    <t>In order to facilitate traversal of BFCP packets through NATs, BFCP over UDP entities are RECOMMENDED to use symmetric ports for sending and receiving BFCP packets, as recommended for RTP/RTCP <xref target="RFC4961"/>.</t>
  </section>

  <section anchor="futurework" title="Future Work"> <!-- Open issues -->
    <t>This draft reflects a work in progress, with at least the following items to be documented and/or revised:</t>
    <t><list style='hanging' hangIndent='6'>
	<t hangText="Example signaling flows:"> A later version of this draft will include further examples of signaling exchanges over unreliable transport as a visual aid and reference for implementers, including updated transactions, message retransmission, usage of DTLS during call setup, and combined usage of DTLS and STUN.</t>
        <t hangText="IANA Considerations:"> The current considerations are based on this extension being standards track. Now that it is informational, it can no longer add attributes to the registries defined for BFCP per the requirements stated in <xref target="RFC4582"/>. As such, the sections related to IANA considerations will need to be reworked.</t>
      </list>
    </t>
  </section>
  
  <section title="Acknowledgements">
    <t>We acknowledge substantial contributions to one or more previous versions of this draft from Trond G. Andersen, Alfred E. Heggestad, Gonzalo Camarillo, Roni Even, Lorenzo Miniero, Joerg Ott, Hadriel Kaplan, Dan Wing, Cullen Jennings, David Benham, and Alan Ford.</t> 
  </section>
</middle>

<back>
  <references title="Normative References">
    <?rfc include="reference.RFC.2119" ?>
    <?rfc include="reference.RFC.3264" ?>
    <?rfc include="reference.RFC.4347" ?>
    <?rfc include="reference.RFC.4582" ?>
    <?rfc include="reference.RFC.4583" ?>
    <?rfc include="reference.RFC.4961" ?>
    <?rfc include="reference.RFC.5246" ?>
    <?rfc include="reference.RFC.5389" ?>
    <?rfc include="reference.RFC.5626" ?>
  </references>

  <references title="Informative References">
    <?rfc include="reference.RFC.3261" ?>
    <?rfc include="reference.RFC.4380" ?>
    <?rfc include="reference.RFC.5245" ?>
    <?rfc include="reference.RFC.5405" ?>
    <?rfc include="reference.RFC.5763" ?>
    <?rfc include="reference.RFC.6081" ?>
    <?rfc include="reference.I-D.draft-ietf-mmusic-ice-tcp-15" ?>
    <?rfc include="reference.I-D.draft-manner-tsvwg-gut-02" ?>
    <?rfc include="reference.I-D.draft-ietf-mmusic-media-path-middleboxes-03" ?>
    <?rfc include="reference.I-D.draft-ietf-p2psip-base-19" ?>
    <reference anchor="IMC05" target="http://saikat.guha.cc/pub/imc05-tcpnat.pdf/">
      <front>
        <title>Characterization and Measurement of TCP Traversal through NATs and Firewalls</title>
        <author initials="S" surname="Guha"/>
        <author initials="P" surname="Francis"/>
        <date month="" year="2005"/>
      </front>
    </reference>
    <reference anchor="P2PNAT" target="http://www.brynosaurus.com/pub/net/p2pnat.pdf/">
      <front>
        <title>Peer-to-Peer Communication Across Network Address Translators</title>
        <author initials="B" surname="Ford"/>
        <author initials="P" surname="Srisuresh"/>
        <author initials="D" surname="Kegel"/>
        <date month="April" year="2005"/>
      </front>
    </reference>
  </references>

  <!-- Appendix -->
  <section anchor="chghist" title="Change History">
    <section title="draft-sandbakken-dispatch-bfcp-udp-02 to -03">
      <t><list style='numbers'>
          <t>Added fragmentation and reassembly mechanism defined for RELOAD as a candidate mechanism for consideration for BFCP when transported over UDP.</t>
          <t>Added ERROR-CODE to indicate DTLS is required.</t>
          <t>Added UDP/TLS/BFCP as 4th transport value for BFCP.</t>
          <t>Added requirement to follow offer/answer procedure in <xref target="RFC5763"/> when using DTLS over UDP for BFCP.</t>
      </list></t>
    </section>
    <section title="draft-sandbakken-dispatch-bfcp-udp-01 to -02">
      <t><list style='numbers'>
          <t>Switched from standards track to informational.</t>
          <t>Added section on motivation, including alternatives considered, to address issues raised at IETF 79 and on various workgroup aliases.</t>
          <t>Changed semantics of the Transaction Initiator (I) flag-bit.</t>
          <t>Expanded transport section to more explicitly call out considerations regarding congestion control and ICMP errors, and add considerations for large messages.</t>
          <t>Updated security related sections and added authentication section to address DTLS when using UDP.</t>
          <t>Added section on NAT Traversal.</t>
          <t>Some editorial changes.</t>
      </list></t>
    </section>
    <section title="draft-sandbakken-dispatch-bfcp-udp-00 to -01">
      <t><list style='numbers'>
          <t>Decision made to not increase the protocol version number as a result of this extension. Certain aspects of this draft require different behaviors depending on whether a reliable or unreliable transport is being used, e.g. server-initiated transactions having Transaction ID 0 over reliable transports without acknowledgements versus non-zero and active-unique with an acknowledgement message when entities communicate over unreliable transports. As the graceful-close behavior of <xref target="RFC4582"/> is still allowed for TCP-based implementations without mandating the use of the new Goodbye message, there is no need to change the version number.</t>
          <t>Removed the - a bit too verbose - rationale/motivation text describing background and why other approaches where not chosen. Was OK for a -00 draft, not strictly needed.</t>
          <t>Not mandate ICE as a SHALL, but leave it as a non-mandatory way of solving the potential need for NAT/FW traversal.</t>
          <t>Emphasized that the reference to DTLS-SRTP are merely informational.</t>
          <t>A dash of polish and nitpicking added, some typos fixed.</t>
      </list></t>
    </section>
    <section title="draft-sandbakken-xcon-bfcp-udp-02 to draft-sandbakken-dispatch-bfcp-udp-00">
      <t><list style='numbers'>
          <t>Draft name change. As XCON WG is closing this draft is submitted to Dispatch WG as the arena of discussion.</t>
          <t>Moved Transaction Identifier bit (I) from the Transaction ID to one of the current 5 reserved bits. Keep current Transaction ID syntax and semantics. Avoid potential problems with existing TCP based implementations.</t>
          <t>The way congestion control is taken care of is explained, with reference to <xref target="RFC5405"/>. One message per RTT. Backoff and normative behavior for timer T1 clarified.</t>
          <t>Mandated support for DTLS in case unreliable transport (i.e. UDP) is implemented. Details and examples to be included. Model after <xref target="RFC5763"/>, details on how to adapt the SRTP associated details to BFCP and whether a reference or copying the text across and changing is needed.</t>
          <t>Added the Rationale and Scope section to position and explain the motivation for this draft more in detail.</t>
          <t>A number of typos and editorial changes.</t>
      </list></t>
    </section>
    <section title="draft-sandbakken-xcon-bfcp-udp-01 to -02">
      <t><list style='numbers'>
	  <t>Stepped away from changing semantics and directionality of Hello and HelloAck messages for pinhole establishment and keep-alive in favor of ICE toolset, particularly as this would have not resolved connectivity establishment as a precursor to deployment of DTLS <xref target="RFC4347"/> as a transport security mechanism.</t>
	  <t>Change to COMMON-HEADER to reserve bit-16 of Transaction ID to show originator of transaction such that request/response and response/acknowledgement mapping can be maintained without colliding randomly chosen Transaction IDs. This also avoids a three-way handshake scenario around FloorRequest where the implicit acknowledgement (in FloorRequestStatus) might also be interpreted as a transaction opening request on the part of the floor control server.</t>
	  <t>Defined additional timer (T2) to soak up lost responses without additional processing.</t>
	  <t>Restricted outstanding transactions to only one in-flight per direction at any one time to mitigate re-ordering issues.</t>
	  <t>Defined entity behavior when transactions timeout.</t>
	  <t>Specified initial suggestion for how to minimize fragmentation of messages.</t>
	  <t>Removed consideration of TCP-over-UDP after internal review.</t>
	  <t>Re-stated DTLS as likely preferred mechanism of securing transport, although this investigation is on-going.</t>
      </list></t>
    </section>
    <section title="draft-sandbakken-xcon-bfcp-udp-00 to -01">
      <t><list style='numbers'>
	  <t>Refactored to a format that represents explicit changes to base RFCs.</t>
	  <t>Introduction of issues currently under investigation that preclude adoption.</t>
	  <t>Specified retransmission timer for requests.</t>
      </list></t>
    </section>
  </section>
</back>

</rfc>
