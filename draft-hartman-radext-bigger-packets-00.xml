<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
]>

<rfc updates="6613, 6614" category="exp" ipr="trust200902" docName="draft-hartman-radext-bigger-packets-00.txt">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>
  <front>
    <title abbrev="RADIUS Large Packets">Larger Packets for Remote RADIUS  over TCP</title>
    <author initials="S." surname="Hartman" fullname="Sam Hartman">
      <organization>Painless Security</organization>

      <address>
	<email>hartmans-ietf@mit.edu</email>
      </address>
    </author>
    <date />
    <abstract>
      <t>The RADIUS over TLS experiment described in RFC 6614 has opened RADIUS to new use cases where the 4096-octet maximum RADIUS packet proves problematic.  This specification extends the RADIUS over TCP experiment to permit larger RADIUS packets.  This specification compliments other ongoing work to permit fragmentation of RADIUS authorization information.</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction">
      <t>The Remote Access Dial-In User Server (RADIUS)  over TLS
      <xref target="RFC6614"></xref> experiment provides strong
      confidentiality and integrity for RADIUS <xref
      target="RFC2865"></xref>.  This enhanced security has opened new
      opportunities for using RADIUS to convey additional
      authorization information.  As an example, <xref
      target="I-D.ietf-abfab-aaa-saml"></xref> describes a mechanism
      for using RADIUS to carry Security Assertion Markup Language
      (SAML) messages in RADIUS.  Many attributes carried in these
      SAML messages will require confidentiality or integrity such as
      that provided by TLS.  </t>
      <t>These new use cases involve carrying additional information
      in RADIUS packets.  The maximum packet length of 4096 octets is
      proving insufficient for some SAML messages and for other
      structures that may be carried in RADIUS.</t>
      <t>One approach is to fragment a RADIUS message across multiple
      packets at the RADIUS layer.RADIUS Fragmentation <xref
      target="I-D.ietf-radext-radius-fragmentation"></xref> provides a
      mechanism to split authorization information across multiple
      RADIUS messages.  That mechanism is necessary in order to split
      authorization information across existing unmodified
      proxies.</t>
      <t>However, there are some significant disadvantages to RADIUS
      fragmentation.  First, RADIUS is a lock-step protocol, and only
      one fragment can be in transit at a time as part of a given
      request.  Also, there is no current mechanism to discover the
      path Maximum Transmission Unit (MTU) across the entire path that
      the fragment will travel.  As a result, fragmentation is likely
      both at the RADIUS layer and at the transport layer.  When TCP
      is used, much better transport characteristics can be achieved
      by fragmentation only at the TCP layer.</t>

        <section title="Requirements notation">
            <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
            "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
            and "OPTIONAL" in this document are to be interpreted as
            described in <xref target="RFC2119"/>.</t>
        </section>    </section>
    <section title="Changes to Packet Processing">
      <t>The maximum length of a RADIUS message is increased from 4096
      to 65535.  A RADIUS Server implementing this specification MUST
      be able to receive a packet of maximum length.  Servers
      MAY have a maximum size over which they choose to return an
      error as discussed in <xref target="toobig"></xref> rather than
      processing a received packet; this size MUST be at least 4096
      octets.</t>
      <t>Clients implementing this specification MUST be able to
      receive a packet of maximum length; that is clients MUST NOT
      close a TCP connection simply because a large packet is sent
      over it.  Clients MAY include the
      Response-Length attribute defined in <xref
      target="responselength"></xref> to indicate the maximum size of
      a packet that they can successfully process.  Clients MAY
      silently discard a packet greater than some configured size;
      this size MUST be at least 4096 octets.  Clients MUST NOT
      retransmit an unmodified request whose response is larger than
      the client can process as subsequent responses will likely
      continue to be too large.  </t>
      <t>Proxies SHOULD be able to process and forward packets of
      maximum length.  Proxies MUST include the Response-Length
      attribute when forwarding a request received over a transport
      with a 4096-octet maximum length over a transport with a higher
      maximum length.</t>
    </section>
    <section title="Forward and backward Compatibility">
      <t>An implementation of <xref target="RFC6613"></xref> will silently discard any
      packet larger than 4096 octets and will close the TCP
      connection.  This section provides guidelines for
      interoperability with these implementations.  These guidelines
      are stated at the SHOULD level.  In some environments support
      for large packets will be important enough that roaming or other
      agreements will mandate their support.  In these environments,
      all implementations might be required to support this
      specification removing the need for interoperability with RFC
      6613.  It is likely that these guidelines will be relaxed to the
      MAY level and support for this specification made a requirement
      if RADIUS over TLS and TCP are moved to the standards track in
      the future.</t>
      <t>Clients SHOULD provide configuration for the maximum size of
      a request sent to each server.  Servers SHOULD provide
      configuration for the maximum size of a response sent to each
      client.  If dynamic discovery mechanisms are supported,
      configuration SHOULD be provided for the maximum size of clients and
      servers in each dynamic discovery category.</t>
      <t>If a client sends a request larger than 4096 octets and the
      TCP connection is closed without a response, the client SHOULD
      treat the request as if a request too big error (<xref
      target="toobig"></xref>) specifying a maximum size of 4096 is
      received.</t>
      <t>By default, a server SHOULD not generate a response larger
      than 4096 octets.  The Response-Length attribute MAY be included
      in a request to indicate that larger responses are desirable.
      Other attributes or configuration MAY be used as an indicator
      that large responses are likely to be acceptable.</t>

      <t>A proxy that implements both this specification and RADIUS
      Fragmentation <xref
      target="I-D.ietf-radext-radius-fragmentation"></xref> SHOULD use RADIUS
      fragmentation when the following conditions are met:
<list style="numbers">
	  <t>A packet is being forwarded towards an endpoint whose
	  configuration does not support a packet that
	  large.<vspace /></t>
	  <t>RADIUS Fragmentation can be used for the packet in question.</t>
	</list>
</t>
      <section title="Rationale">
	<t>The interoperability challenge appears at first
	significant.  This specification proposes to introduce
	behavior where new implementations will fail to function with
	existing implementations.</t>
	<t>However, these capabilities are introduced to support new
	use cases.  If an implementation has 10000 octets of attributes
	to send, it cannot in general trim down the response to
	something that can be sent.  Under this specification a large
	packet would be generated that will be silently discarded by
	an existing implementation.  Without this specification, no
	packet is generated because the required attributes cannot be
	sent.</t>
	<t>The biggest risk to interoperability would be if requests
	and responses are expanded to include additional information
	that is not strictly necessary.  So, avoiding creating
	situations where large packets are sent to existing
	implementations is mostly an operational matter.
	Interoperability is most impacted when the size of packets in
	existing use cases is significantly increased and least
	impacted when large packets are used for new use cases where
	the deployment is likely to require updated RADIUS
	implementations.</t>
	<t>Also, RFC 6613 is an experiment.  Part of running that
	experiment is to evaluate whether additional changes are
	required to RADIUS.  A lower bar for interoperability should
	apply to changes to experimental protocols than standard
	protocols.</t>
	<t>This specification provides good facilities to enable
	implementations to understand packet size when proxying
	to/from standards-track UDP RADIUS.</t>

      </section>
      <section title="Capability Negotiation">
	<t>A capability negotiation mechanism would allow a client to
	determine whether a server supported large packets before
	sending a request.  If such a mechanism is standardized for
	RADIUS, then a capability should be defined for carrying the
	maximum size packet the server accepts.</t>
	<t>However, in practice, a capability negotiation mechanism
	does not provide sufficient value to large-packet support to
	block large-packet support on its development.  Generally, if
	a client has a large packet to send, it can either send the
	large packet or signal an error.  RFC 6613 already has
	well-defined error behavior if a large packet is received: the
	TCP connection is closed.</t>
      </section>
    </section>
    <section title="Diameter Considerations">
      <t>The mechanism described in this specification is a transport
      matter between a RADIUS server and client.  Diameter already
      supports sending more than 4096 octets of information.  A
      Diameter to RADIUS proxy implementing this specification MAY
      forward packets that would otherwise be too big.</t>
      <t>XXX discuss handling of the new code and Response-Length
      attribute.</t>

    </section>
    <section anchor="toobig" title="Too Big Response">
      <t>Define a new RADIUS code indicating that a server has
      received a request that is larger than can be processed.
      Include mandatory attribute indicating the maximum size that is
      permitted.</t>
      <t>Clients will not typically be able to adjust and resend
      requests when this error is received.  In some cases the client
      can fall back to RADIUS Fragmentation.  In other cases this code
      will provide for better client error reporting and will avoid
      retransmitting requests guaranteed to fail.</t>
    </section>
    <section anchor="responselength" title="Response Length
      Attribute">
      <t>Define an attribute to carry the maximum length of a response
      that a client will accept.  Values between 4096 and 65535.</t>

    </section>
    <section title="IANA Considerations">
      <t>Once this document is more complete it will define a new
      RADIUS code and attribute.  Figure out if we have IANA policy
      lossage defining a code in an experimental document.</t>
    </section>
    <section title="Security Considerations">
      <t>This specification updates RFC 6613 and will be used with
      <xref target="RFC6614"></xref>.  When used over plain TCP, this
      specification creates new opportunities for an on-path attacker to
      impact availability.  these attacks can be entirely mitigated by
      using TLS.</t>
    </section>

  </middle>
  <back>
    <references title="Normative References">

&rfc2119;
      <?rfc
      include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6613'?>
      <?rfc
      include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6614'?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2865'?>
   </references>
    <references>
      <?rfc
      include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-abfab-aaa-saml'?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-radext-radius-fragmentation'?>
    </references>
  </back>
</rfc>
