



Internet Engineering Task Force                          P. Hallam-Baker
Internet-Draft                                         Comodo Group Inc.
Intended status: Standards Track                           June 13, 2013
Expires: December 15, 2013


                  JSON Service Connect (JCX) Protocol
                     draft-hallambaker-wsconnect-02

Abstract

   JSON Service Connect (JCX) is a JSON/REST Web Service that may be
   used to establish and maintain a 'connection binding' of a device to
   an account held with a Web Service Provider.  Multiple connection
   bindings may be established under the same account to support
   multiple devices and/or multiple users of a single device.  A
   connection binding permits a device to securely connect to one or
   more services offered by the Web Service Provider with support for
   protocol and protocol version agilty and fault tollerance.

   The protocol is presented as a HTTP/JSON Web Service and uses the
   HTTP session continuation mechanism for authentication of transaction
   messages and supports negotiation of a HTTP session continuation
   mechanism context for the established endpoint connections.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on December 15, 2013.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.





Hallam-Baker            Expires December 15, 2013               [Page 1]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Definitions . . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Requirements Language . . . . . . . . . . . . . . . . . .   3
   2.  Introduction and Purpose  . . . . . . . . . . . . . . . . . .   3
     2.1.  Establishing a Web Service Provider Account . . . . . . .   4
     2.2.  Establishing a Connection Binding . . . . . . . . . . . .   4
       2.2.1.  PIN Code Establishement.  . . . . . . . . . . . . . .   5
       2.2.2.  Out of Band Completion. . . . . . . . . . . . . . . .   5
       2.2.3.  QR Code Preauthorization. . . . . . . . . . . . . . .   6
   3.  Example Uses  . . . . . . . . . . . . . . . . . . . . . . . .   6
     3.1.  PIN code establishment  . . . . . . . . . . . . . . . . .   6
     3.2.  Unbinding . . . . . . . . . . . . . . . . . . . . . . . .  10
     3.3.  Out of Band Completion  . . . . . . . . . . . . . . . . .  11
   4.  OBPConnection . . . . . . . . . . . . . . . . . . . . . . . .  12
     4.1.  Message: Message  . . . . . . . . . . . . . . . . . . . .  12
     4.2.  Message: Response . . . . . . . . . . . . . . . . . . . .  12
     4.3.  Message: ErrorResponse  . . . . . . . . . . . . . . . . .  12
     4.4.  Message: Request  . . . . . . . . . . . . . . . . . . . .  12
     4.5.  Structure: Cryptographic  . . . . . . . . . . . . . . . .  13
     4.6.  Structure: ImageLink  . . . . . . . . . . . . . . . . . .  13
     4.7.  Structure: Connection . . . . . . . . . . . . . . . . . .  13
     4.8.  Bind  . . . . . . . . . . . . . . . . . . . . . . . . . .  14
     4.9.  Message: BindRequest  . . . . . . . . . . . . . . . . . .  14
     4.10. Message: BindResponse . . . . . . . . . . . . . . . . . .  14
     4.11. Message: OpenRequest  . . . . . . . . . . . . . . . . . .  14
     4.12. Message: OpenResponse . . . . . . . . . . . . . . . . . .  15
     4.13. Message: TicketRequest  . . . . . . . . . . . . . . . . .  15
     4.14. Message: TicketResponse . . . . . . . . . . . . . . . . .  16
     4.15. Unbind  . . . . . . . . . . . . . . . . . . . . . . . . .  16
     4.16. Message: UnbindRequest  . . . . . . . . . . . . . . . . .  16
     4.17. Message: UnbindResponse . . . . . . . . . . . . . . . . .  16
   5.  Mutual Authentication . . . . . . . . . . . . . . . . . . . .  16
     5.1.  PIN Authentication  . . . . . . . . . . . . . . . . . . .  16
     5.2.  Example: Latin PIN Code . . . . . . . . . . . . . . . . .  19
     5.3.  Example: Cyrillic PIN Code  . . . . . . . . . . . . . . .  20
     5.4.  Out of Band Confirmation  . . . . . . . . . . . . . . . .  20
   6.  Protocol Binding  . . . . . . . . . . . . . . . . . . . . . .  21



Hallam-Baker            Expires December 15, 2013               [Page 2]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


     6.1.  JSON encoding . . . . . . . . . . . . . . . . . . . . . .  21
     6.2.  HTTP Session Layer  . . . . . . . . . . . . . . . . . . .  21
     6.3.  TLS transport . . . . . . . . . . . . . . . . . . . . . .  22
   7.  Service Identification and Discovery  . . . . . . . . . . . .  22
   8.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  23
   9.  Security Considerations . . . . . . . . . . . . . . . . . . .  23
     9.1.  Denial of Service . . . . . . . . . . . . . . . . . . . .  23
     9.2.  Breach of Trust . . . . . . . . . . . . . . . . . . . . .  23
     9.3.  Coercion  . . . . . . . . . . . . . . . . . . . . . . . .  23
   10. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  23
   11. References  . . . . . . . . . . . . . . . . . . . . . . . . .  23
     11.1.  Normative References . . . . . . . . . . . . . . . . . .  23
     11.2.  Non Normative References . . . . . . . . . . . . . . . .  24
   Appendix A.  Stateless server . . . . . . . . . . . . . . . . . .  24
     A.1.  Temporary  ID . . . . . . . . . . . . . . . . . . . . . .  24
     A.2.  Connection Binding ID . . . . . . . . . . . . . . . . . .  24
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  24

1.  Definitions

1.1.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

2.  Introduction and Purpose

   JSON Service Connect (JCX) is a Web Service that may be used to
   establish and maintain a 'connection binding' of a device to an
   account held with a Web Service Provider (WSP).

   JCX is presented in JSON encoding [RFC4627] over a HTTP Session
   [RFC2616] using HTTP Session Continuation
   [I-D.hallambaker-httpsession] for message layer authentication and
   TLS transport for confidentiality and server authentication.[RFC4627]

   A Connection Binding comprises a set of long term credentials used to
   authenticate interactions with the JCX service itself and a set of
   'Service Connections' to specific services offered by the Web Service
   Provider.

   Each service connection in turn comprises a collection of 'Instance
   Connections' which describe a specific instances of the Web Service.

   For example Alice is a consumer and example.com a provider of a range
   of Web Services including anti-malware protection and management of
   home automation devices.  Alice has 42 devices of different types



Hallam-Baker            Expires December 15, 2013               [Page 3]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


   that each make use of one or more of the Web Services proviced by
   example.com.  All the devices are enrolled in the same JCX account
   'alice@example.com' but each device has a unique connection binding
   and different devices make use of different Web Services.

   The centralized account provides Alice with a single point of control
   from which she can authorize the addition of new devices to the
   account or the removal of devices that are deactivated.  This allows
   Alice to avoid the need to manage a device such as a network-enabled
   lightswitch through the lightswitch itself.

   To ensure continuity of service in case of network failure or
   administration work, example.com provides multiple instances of its
   Web Services hosted on different machines.  Different users MAY be
   granted access to a different collection of service instances
   according to their needs and the service tier they are subscribed to.

2.1.  Establishing a Web Service Provider Account

   The means by which the Web Service Provider Account is established is
   outside the scope of this document.

   In a typical case the user would establish an account with their
   chosen Web Service Provider through the normal process of using a Web
   Browser to access the Web Service Provider's site and entering such
   data as the Web Service Provider requires into a HTML form.

   Depending on the circumstances, the data provided by the applicant
   may require verification before the account is created.

   [Default accounts for appliances that are going to be implicitly
   authenticated by reference to the network they are on.]

2.2.  Establishing a Connection Binding

   A connection binding represents a long term association between a
   device and an account at the Web Service Provider.  The association
   includes the establishment of an authentication context between the
   device and the JCX service.

   An authentication context consists of:

      A Context Identifier.

      An authentication algorithm.

      A secret key.




Hallam-Baker            Expires December 15, 2013               [Page 4]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


   The context identifier is an opaque string assigned by the JCX
   service.  Following the approach introduced in Kerberos, a JCX
   service MAY eliminate the need to store authentication context
   information by encoding the authentication algorithm and encrypted
   secret key in the context identifier.

   The authentication context can ensure that future communications are
   secured against impersonation if and only if the original process of
   establishing a connection binding was secured against communication.
   Mutual authentication is therefore an essential requirement.

   The means by which the connection binding is established depend on
   the affordances of the device in question.  Establishing a connection
   binding to a device with a keyboard is easily accomplished through
   use of a one-time PIN code.  But many embedded devices do not provide
   a keyboard or similar affordance.

   The following modes of session establishement are supported:

      PIN Code Establishement.

      Out of Band Completion.

      QR Code Establishement.

2.2.1.  PIN Code Establishement.

   To establish a connection binding for a new mobile phone, Alice logs
   into her JCX account manager and requests a new PIN code.  She then
   starts the application that makes use of a JCX account and selects
   'create new binding'.  She is prompted for and enters her account
   name (alice@example.com) and PIN.

   The client connects to the JCX service and verifies that the TLS
   certificate presented is correct for example.com and has been issued
   in accordance with issue practices that ensure an appropriately high
   degree of trust (e.g. the CABForum Extended Validation requirements).

2.2.2.  Out of Band Completion.

   To establish a connection binding for her new toaster oven, Alice
   plugs the appliance into her local network and enters her account
   name into the device.  Since she has not obtained a PIN code in
   advance, she leaves the entry blank.







Hallam-Baker            Expires December 15, 2013               [Page 5]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


   To complete the process, Alice logs into her JCX account where she
   sees that a new device is available to add to the account.  To help
   identify the correct device, there is a picture of the toaster oven,
   the model name and serial number.

2.2.3.  QR Code Preauthorization.

   Alice decides to remodel the kitchen completely and plans to install
   a dozen new network enabled LED light fixtures.  Using an application
   on the mobile phone she enabled earlier, Alice scans a QR code
   attached to each fixture before the devices are installed.  When the
   fixtures are installed and powered, the connection binding is
   preauthorized.

3.  Example Uses

3.1.  PIN code establishment

   Alice buys a new laptop computer which she wishes to use with the
   malware protection service provided by example.com.  Alice has an
   existing account 'alice' with this Web Service Provider and obtains a
   pin code Q80370-1RA606-F04B from the Web Service Provider Web site.

   Alice enters the values alice@example.com and Q80370-1RA606-F04B into
   the Web Service client she wishes to use with the Web Service
   Provider on the new laptop.

   The client obtains the JCX service for example.com using DNS SRV
   discovery.  The client establishes a TLS connection to the service
   and verifies that the certificate provided has a valid certificate
   path, has not been revoked and meets the validation criteria of the
   client.  Since the purpose of this particular Web Service client is
   to provide security, the client requires that an Extended Validation
   certificate be presented.

   Having established a TLS connection to the JCX Service, the client
   sends the following HTTP request:

   Post / HTTP/1.1
   Host: example.com
   Cache-Control: no-store
   Content-Type: Application/json;charset=UTF-8
   Content-Length: 470

   {
     "OpenRequest": {
       "Encryption": ["HS256",
         "HS384",



Hallam-Baker            Expires December 15, 2013               [Page 6]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


         "HS512",
         "HS256T128"],
       "Authentication": ["A128CBC",
         "A256CBC",
         "A128GCM",
         "A256GCM"],
       "Account": "alice",
       "Domain": "example.com",
       "HavePasscode": true,
       "HaveDisplay": true,
       "Challenge": "d2gdVeQesS3UTOgtK4JSEg==",
       "DeviceID": "Serial:0002212",
       "DeviceURI": "http://comodo.com/dragon/v3.4",
       "DeviceName": "Comodo Dragon"}}


   To prevent man in the middle attack, the client does not send the PIN
   code in the initial request.  The PIN code is only sent after the
   service responds with a challenge nonce to be used to prevent replay
   attack.

   The service receives the request, determines that is meets its access
   control policy and selects a set of cryptographic parameters from the
   set proposed by the client.  In this case the service prefers the use
   of AES128CBC for encryption and the HS256 Message Authentication Code
   for authentication.

   The service determines that a PIN code has been issued for the
   account and uses the value of that PIN to generate a response to the
   challenge presented by the client.  A new challenge is generated to
   test the client knowledge of the PIN.

   [TBS: Is there a need for the service to be able to support multiple
   outstanding PIN codes for the same account?  This could be supported
   by providing the last 2 significant characters of the PIN code to the
   service which could use it as an index.  This would enable several
   hundred simultaneous outstanding requests which should be enough for
   most applications.  Large volume applications would need to use a
   different scheme.]

   The service sends the following response to the client:

   HTTP/1.1 203 Passcode
   Content-Type: application/json;charset=UTF-8
   Content-Length: 500

   { "Status" : "Authenticate",
     "OpenResponse": {



Hallam-Baker            Expires December 15, 2013               [Page 7]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


       "Status": 203,
       "StatusDescription": "Passcode",
       "Cryptographic": [{
           "Secret": "11bmdFi9Et7KIUg8aeN2AQ==",
           "Encryption": "A128CBC",
           "Authentication": "HS256",
           "Ticket":
           "TUMnorO0SjHHS7D2uFcGlRYJ0Hd3eibwe0ogptoNMQuCYmCHfHAJcJlyvi
           j8WoXDglTSOkctnmoBzl8W0NLSlcgSyZcmsAyoWs8y1Rn2ZlO2WBgoWrFIO
           qPa4oB29dgs/ei6ieINZtmvXNCm2NUkWA=="}],
       "Challenge": "alX8aAWH6acSqO3FTT94HA==",
       "ChallengeResponse": "enT5myMw8w2hV4H32Ntx/g=="}}


   To complete the transaction, the client sends a TicketRequest message
   to the service containing a response to the PIN challenge sent by the
   service (ChallengeResponse).

   The TicketRequest message is authenticated using HTTP Session
   authentication under the shared secret specified in the OpenResponse
   message:

   Post / HTTP/1.1
   Host: example.com
   Cache-Control: no-store
   Content-Type: Application/json;charset=UTF-8
   Content-Length: 78
   Session:
     Value=cjkMkfnnYP8JYWZAbRLvtpqImmOK3rsrOT1XcvAgHDk=;
     Id=TUMnorO0SjHHS7D2uFcGlRYJ0Hd3eibwe0ogptoNMQuCYmCHfHAJcJlyvi
       j8WoXDglTSOkctnmoBzl8W0NLSlcgSyZcmsAyoWs8y1Rn2ZlO2WBgoWrFIOqPa4
       oB29dgs/ei6ieINZtmvXNCm2NUkWA==

   {
     "TicketRequest": {
       "ChallengeResponse": "TctLOG74cwpm26YNpEibcQ=="}}


   The service checks the value of ChallengeResponse against the known
   PIN and if the result is correct establishes parameters for the
   Connection Binding for the device.

   In this case the server uses the Session Id parameter to encode
   permissions associated with the request as described in
   [Appendix TBS].  Accordingly the server must replace the Session Id
   whenever the associated permissions change.  Accordingly, the server
   replaces the cryptographic parameters specified in the OpenResponse
   request for use in future JCX service requests.  In this case the



Hallam-Baker            Expires December 15, 2013               [Page 8]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


   server returns three connections, each offering a different transport
   protocol option.  Each connection specifies its own set of
   cryptographic parameters (or will when the code is written for that).

   The service also returns a service connection the malware protection
   service the client requested access to.  This service connection
   specifies three different service instances.  Each service instance
   has its own set of cryptographic parameters for use with HTTP session
   authentication.  In this case the three different service instances
   offer different means of accessing the same service: as a JSON Web
   Service over HTTP, using a binary encoding over a UDP transport and
   tunnelling via DNS.

   HTTP/1.1 200 Complete
   Content-Type: application/json;charset=UTF-8
   Content-Length: 1907
   Session:
     Value=nKhjR1r2eYPga0rmDfHT4HOvgQ+EuUoQPwzIl0btljs=;
     Id=TUMnorO0SjHHS7D2uFcGlRYJ0Hd3eibwe0ogptoNMQuCYmCHfHAJcJlyvi
       j8WoXDglTSOkctnmoBzl8W0NLSlcgSyZcmsAyoWs8y1Rn2ZlO2WBgoWrFIOqPa4
       oB29dgs/ei6ieINZtmvXNCm2NUkWA==

   { "Status" : "Success",
     "TicketResponse": {
       "Status": 200,
       "StatusDescription": "Complete",
       "Cryptographic": [{
           "Protocol": "OBPConnection",
           "Secret": "HQuQg4GkzTwTVoGxar0EXg==",
           "Encryption": "A128CBC",
           "Authentication": "HS256",
           "Ticket":
           "0ulMVMMfY/pLHZ0FlIy2zDnNycYz9Znvs3JJYQGlZ+dWaxMNxm/jLEsJd/
           0qsAc5qp8fjBoMN49V9DkDgM4UYJxVriqfr64RyTTgug2taHY="}],
       "Service": [{
           "Name": "obp1.example.com",
           "Port": 443,
           "Address": "10.1.2.3",
           "Priority": 1,
           "Weight": 100,
           "Transport": "WebService",
           "Cryptographic": {
             "Protocol": "OBPQuery",
             "Secret": "kezeXxhkzXgxY7vpkHUb1g==",
             "Encryption": "A128CBC",
             "Authentication": "HS256",
             "Ticket":
             "jpBXvI7/0WTmwI2NN4n7Vvw96nbS9LpSsSNMIkdapiUoLikSkjpgMrtb



Hallam-Baker            Expires December 15, 2013               [Page 9]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


             VKz5lHOPloCgAyZXxfZpQRsp4oPY4BcRaMw6F5na62IHnBVDeXg="}},
         {
           "Name": "dns1.example.com",
           "Port": 53,
           "Address": "10.1.2.2",
           "Priority": 1,
           "Weight": 100,
           "Transport": "DNS",
           "Cryptographic": {
             "Protocol": "OBPQuery",
             "Secret": "Wk3m7DlL/GStBBm3xUjyzg==",
             "Encryption": "A128CBC",
             "Authentication": "HS256",
             "Ticket":
             "Q9r4hXefHhLvgpKHVg3w2p7VptVH9qidGiIa4Nw3Zp5hZR816h9+PRj5
             sye1jmIhy4sYA/jfK/g4OrSngK9xWO7Qg3/iQ+YTAchKQjdJtN4="}},
         {
           "Name": "udp.example.com",
           "Port": 5000,
           "Address": "10.1.2.2",
           "Priority": 1,
           "Weight": 100,
           "Transport": "UDP",
           "Cryptographic": {
             "Protocol": "OBPQuery",
             "Secret": "wBiguG9FGj08nS/c/njp4Q==",
             "Encryption": "A128CBC",
             "Authentication": "HS256",
             "Ticket":
             "F8LPKTL+XaAX0eJsM22fdJ37BRS816dKXD66UbD8NAVKOgOu556uS8WW
             AMj+dJbJaErUzo/vw7tY0icCu1bw8qHmOO4gzhbSbD4Nga2EAU4="}}]}
             }


3.2.  Unbinding

   After a year of use, Alice decides to replace the laptop with a new
   one.  Before selling the old laptop on EBay, she tells the Web
   Service client to cancel the connection to the Web Service Provider.

   The client sends the following mesasage to the provider:

   Post / HTTP/1.1
   Host: example.com
   Cache-Control: no-store
   Content-Type: Application/json;charset=UTF-8
   Content-Length: 25
   Session:



Hallam-Baker            Expires December 15, 2013              [Page 10]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


     Value=bZU61eCOW4nVnfdJNS719HL4IsNVxtoTgoRt+mqLbWY=;
     ID=0ulMVMMfY/pLHZ0FlIy2zDnNycYz9Znvs3JJYQGlZ+dWaxMNxm/jLEsJd/
       0qsAc5qp8fjBoMN49V9DkDgM4UYJxVriqfr64RyTTgug2taHY=

   {
     "UnbindRequest": {}}


   The Session ID specifies the connection binding.  Since the Unbind
   Request is only valid for that connection binding, there is no need
   to specify the connection binding further in the request.

   The server verifies that the request was authenticated and returns a
   successful response:

   HTTP/1.1 200 Complete
   Content-Type: application/json;charset=UTF-8
   Content-Length: 26
   Session:
     Value=9P1FmroeFU7y9qHgXdSFXH2qSImh0cQpaSgZrx5IswM=;
     Id=0ulMVMMfY/pLHZ0FlIy2zDnNycYz9Znvs3JJYQGlZ+dWaxMNxm/jLEsJd/
       0qsAc5qp8fjBoMN49V9DkDgM4UYJxVriqfr64RyTTgug2taHY=

   { "Status" : "Success",
     "UnbindResponse": {}}


   [TBS: Add in the status response back into the JSON message. ]

3.3.  Out of Band Completion

   Alice purchases an Internet enabled coffee pot.  The installer
   configures the coffee pot in her kitchen but does not have access to
   Alice's JCX account or a PIN code to configure it.

   The installer configures the coffee pot to use the JCX account
   specified by Alice.  The coffee pot does not have a pssscode to enter
   but does have a link to an image of the coffee pot.

   The client sends the following request:

   [TBS: non pin code example]

   Since the client does not have a PIN code, there is no need to return
   a challenge.  Instead the service returns the status "OOB" to
   indicate that the transaction will be completed out of band.

   [TBS: non pin code example]



Hallam-Baker            Expires December 15, 2013              [Page 11]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


   By default the coffee pot attempts to complete the JCX connection at
   ten second intervals for the first ten minutes, every thirty seconds
   for the next hour, every five minutes for the following 24 hours and
   once an hour thereafter.

   The client sends the following request to check the status of the
   request:

   [TBS: should add in a parameter 'don't call again for x seconds']

   The first service response tells the coffee pot not to ask again
   until five minutes have elapsed:

   [TBS: non pin code example]

   The installer calls Alice to tell her that the coffee pot is ready to
   connect.  Alice authorizes the connection remotely via the Web
   Service Provider's Web site.  Alice identifies the request to connect
   the coffee pot by means of the image provided.  She can also use the
   same image to help determine which connection to cancel when the
   coffee pot is replaced.

   The next time the coffee pot requests a status update, the service
   responds with the connection binding parameters:

   [TBS: non pin code example]

4.  OBPConnection

4.1.  Message: Message

4.2.  Message: Response

         Application layer server status code

         Describes the status code (ignored by processors)

4.3.  Message: ErrorResponse

   An error response MAY be returned in response to any request.

   Note that requests MAY be rejected by the code implementing the
   transport binding before application processing begins and so a
   server is not guaranteed to provide an error response message.

4.4.  Message: Request





Hallam-Baker            Expires December 15, 2013              [Page 12]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


         Opaque ticket issued by the server that identifies the
         cryptographic parameters for encryption and authentication of
         the message payload.

4.5.  Structure: Cryptographic

   Parameters describing a cryptographic context.

         OBP tickets MAY be restricted to use with either the management
         protocol (Management) or the query protocol (Query).  If so a
         service would typically specify a ticket with a long expiry
         time or no expiry for use with the management protocol and a
         separate ticket for use with the query protocol.

         Shared secret

         Encryption Algorithm selected

         Authentication Algorithm selected

         Opaque ticket issued by the server that identifies the
         cryptographic parameters for encryption and authentication of
         the message payload.

         Date and time at which the context will expire

4.6.  Structure: ImageLink

         Image encoding algorithm (e.g. JPG, PNG)

         Image data as specified by algorithm

4.7.  Structure: Connection

   Contains information describing a network connection.

         DNS Name.  Since one of the functions of an OBP service is name
         resolution, a DNS name is only used to establish a connection
         if connection by means of the IP address fails.

         TCP or UDP port number.

         IPv4 (32 bit) or IPv6 (128 bit) service address

         Service priority.  Services with lower priority numbers SHOULD
         be attempted before those with higher numbers.

         Weight to be used to select between services of equal priority.



Hallam-Baker            Expires December 15, 2013              [Page 13]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


         OBP Transport binding to be used valid values are HTTP, DNS and
         UDP.

         Date and time at which the specified connection context will
         expire.

4.8.  Bind

   Binding a device is a two step protocol that begins with the Start
   Query followed by a sequence of Ticket queries.

4.9.  Message: BindRequest

   The following parameters MAY occur in either a StartRequest or
   TicketRequest:

         Encryption Algorithm that the client accepts.  A Client MAY
         offer multiple algorithms.  If no algorithms are specified then
         support for the mandatory to implement algorithm is assumed.
         Otherwise mandatory to implement algorithms MUST be specified
         explicitly.

         Authentication Algorithm that the client accepts.  If no
         algorithms are specified then support for the mandatory to
         implement algorithm is assumed.  Otherwise mandatory to
         implement algorithms MUST be specified explicitly.

4.10.  Message: BindResponse

   The following parameters MAY occur in either a StartResponse or
   TicketResponse:

         Cryptographic Parameters.

         A Connection describing an OBP service point

4.11.  Message: OpenRequest

   The OpenRequest Message is used to begin a device binding
   transaction.  Depending on the authentication requirements of the
   service the transaction may be completed in a single query or require
   a further Ticket Query to complete.

   If authentication is required, the mechanism to be used depends on
   the capabilities of the device, the requirements of the broker and
   the existing relationship between the user and the broker.





Hallam-Baker            Expires December 15, 2013              [Page 14]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


   If the device supports some means of data entry, authentication MAY
   be achieved by entering a passcode previously delivered out of band
   into the device.

   The OpenRequest specifies the properties of the service (Account,
   Domain) and Device (ID, URI, Name) that will remain constant
   throughout the period that the device binding is active and
   parameters to be used for the mutual authentication protocol.

         Account name of the user at the OBP service

         Domain name of the OBP broker service

         If 'true', the user has entered a passcode value for use with
         passcode authentication.

         Specifies if the device is capable of displaying information to
         the user or not.

         Client challenge value to be used in authentication challenge

         Device identifier unique for a particular instance of a device
         such as a MAC or EUI-64 address expressed as a URI

         Device identifier specifying the type of device, e.g. an
         xPhone.

         Descriptive name for the device that would distinguish it from
         other similar devices, e.g. 'Alice's xPhone".

4.12.  Message: OpenResponse

   An Open request MAY be accepted immediately or be held pending
   completion of an inband or out-of-band authentication process.

   The OpenResponse returns a ticket and a set of cryptographic
   connection parameters in either case.  If the

         Challenge value to be used by the client to respond to the
         server authentication challenge.

         Server response to authentication challenge by the client

         Link to an image to be used in an image verification mechanism.

4.13.  Message: TicketRequest





Hallam-Baker            Expires December 15, 2013              [Page 15]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


   The TicketRequest message is used to (1) complete a binding request
   begun with an OpenRequest and (2) to refresh ticket or connection
   parameters as necessary.

         The response to a server authentication challenge.

4.14.  Message: TicketResponse

   The TicketResponse message returns cryptographic and/or connection
   context information to a client.

4.15.  Unbind

   Requests that a previous device association be deleted.

4.16.  Message: UnbindRequest

   Since the ticket identifies the binding to be deleted, the only thing
   that the unbind message need specify is that the device wishes to
   cancel the binding.

4.17.  Message: UnbindResponse

   Reports on the success of the unbinding operation.

   If the server reports success, the client SHOULD delete the ticket
   and all information relating to the binding.

   A service MAY continue to accept a ticket after an unbind request has
   been granted but MUST NOT accept such a ticket for a bind request.

5.  Mutual Authentication

   A Connection Service MAY require that a connection request be
   authenticated.  Two authentication mechanisms are defined.

      PIN Code: The client and server demonstrate mutual knowledge of a
      PIN code previously exchanged out of band.

      Out of Band Confirmation: The request for access is confirmed out
      of band.

   In addition, services MAY accept the use of any message or transport
   layer authentication scheme.  For example HTTP Session Continuation
   or Transport Layer Security with client authentication.

5.1.  PIN Authentication




Hallam-Baker            Expires December 15, 2013              [Page 16]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


   PIN code authentication provides users with a simple and often
   familiar mechanism for authenticating the connection request.  The
   means by which the user obtains the PIN code is outside the scope of
   this document.  Possible methods for distributing the PIN code
   include obtaining the code from an account management Web site
   provided by the Web Service Provider, letter post, email and in
   person.

   Although the PIN value is never exposed on the wire in any form, the
   protcol considers the PIN value to be text encoded in UTF8 encoding.

   To encourage readability, the use of space (0x20) and hyphen (0x2D)
   characters to arrange PIN characters into groups of four to seven
   characters is encouraged.  To avoid the risk of this practice
   introducing user error, space and hyphen characters are ignored when
   processing the PIN value.

   Support for the full UNICODE character set in PIN codes is intended
   to facilitate provision of PIN codes in the user's native language.
   Web Service Providers MAY make use of any UNICODE characters they
   choose but capricious choices are likely to cause users difficulty.
   For example a PIN code MAY contain the ZAPF Dingbats thick tick mark
   (U+2704) but users would almost certainly find it difficult to enter
   and may confuse it with the similar thin tick mark (U+2703).

   Servers that support PIN Authorization SHOULD offer the choice of a
   PIN that only uses numeric digits ('0', '1', '2', '3', '4', '5', '6',
   '7', '8', '9').  Clients that support PIN Authorization MUST allow
   entry of PINS that only contain numeric digits.

   The PIN Mechanism is a three step process:

      The client sends an OpenRequest message to the Service containing
      a challenge value CC.

      The service returns an OpenResponse message containing to the
      client a server challenge value SV and a server response value SR.

      The client sends a TicketRequest message to the service containing
      a client response value CR.

   Since no prior authentication key has been established the
   OpenRequest and OpenResponse messages are sent without message
   authentication.

   The Challenge values CC, and SC are cryptographic nonces.  The nonces
   SHOULD be generated using an appropriate cryptographic random source.
   The nonces MUST be at least as long as 128 bits, MUST be at least the



Hallam-Baker            Expires December 15, 2013              [Page 17]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


   minimum key size of the authentication algorithm used and MUST NOT
   more than 640 bits in length (640 bits should be enough for anybody).

   The server response and client response values are generated using an
   authentication algorithm selected by the server from the choices
   proposed by the client in the OpenRequest message.

   The algorithn chosen may be a MAC algorithm or an encrypt-with-
   authentication (EWA) algorithm.  If an EWA is specified, the
   encrypted data is discarded and only the authentication value is used
   in its place.

   Let A(d,k) be the authentication value obtained by applying the
   authentication algorithm with key k to data d.

   To create the Server Response value, the UTF8 encoding of the PIN
   value 'P' is first pre-processed to remove space and hyphen
   characters, then converted into a symmetric key KPC by using the
   Client challenge value as the key truncating if necessary and then
   applied to the of the OpenRequest message:


           KPC = A (PIN, CC)
           SR = A (Secret + SC + OpenRequest, KPC)



   In the Web Service Binding, the Payload of the message is the HTTP
   Body as presented on the wire.  The Secret and Server Challenge are
   presented in their binary format and the '+' operator stands for
   simple concatenation of the binary sequences.

   This protocol construction ensures that the party constructing SR:

      Knows the PIN code value (through the construction of KPC).

      Is responding to the Open Request Message (SR depends on
      OpenRequest).

      Has knowlege of the secret key which MUST be used to authenticate
      the following TicketRequest/TicketResponse interaction that will
      establish the actual connection.

      Does not provide an oracle the PIN value.  That is, the protocol
      does not provide a service that reveals the (since the value SR
      includes the value SC which is a random nonce generated by the
      server and cannot be predicted by the client).




Hallam-Baker            Expires December 15, 2013              [Page 18]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


   To create the Client Response value, secret key is applied to the PIN
   value and server Challenge:


             CR = A (PIN + SC + OpenRequest, Secret)



   Note that the server can calculate the value of the Client Response
   token at the time that it generates the Server Challenge.  This
   minimizes the amount of state that needs to be carried from one
   request to the next in the Ticket value when using the stateless
   server implementation described in section Appendix A

   This protocol construction ensures that the generator of CR

      Knows the PIN value.

      Is respoding to the OpenResponse generated by the server.

   Note that while disclosure of an oracle for the PIN value is a
   concern in the construction of CR, this is not the case in the
   construction of SR since the client has already demonstrated
   knowledge of the PIN value.

5.2.  Example: Latin PIN Code

   The Connection Request example of section Section 3 demonstrates the
   use of an alphanumeric PIN code using the Latin alphabet.

   The PIN code is [Q80370-1RA606-F04B] and the authentication algorithm
   is [HS256].  The value KP is thus:

   [TBS]

   The data over which the hash value is calulated is Secret + SC +
   OpenRequest:

   [TBS]

   Applying the derrived key to the data produces the server response:

   The data for the client response is PIN + SC:

   [TBS]

   Applying the secret key to the data produces the client response:




Hallam-Baker            Expires December 15, 2013              [Page 19]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


   [TBS]

5.3.  Example: Cyrillic PIN Code

   If the PIN code in the earlier example was [] the value KP would be:

   [TBS]

   The Server Response would be:

   [TBS]

   The rest of the protocol would then continue as before.

5.4.  Out of Band Confirmation

   The Out Of Band Confirmation mechanism is a three step process in
   which:

      The client makes an OpenRequest message to the service and obtains
      an OpenResponse message.

      The connection binding is authorized through an out of band
      process.

      The client makes a TicketRequest to the service and obtains a
      TicketResponse message to complete the exchange.

   Since no prior authentication key has been established the
   OpenRequest and OpenResponse messages are sent without
   authentication.

   The principal concern in the Out Of Band Confirmation mechanism is
   ensuring that the party authorizing the request is able to identify
   which party originated the request they are attempting to identify.

   If a device has the ability to display an image it MAY set the
   HasDisplay=true in the OpenRequest message.  If the broker recieves
   an OpenRequest with the HasDisplay value set to true, the
   OpenResponse MAY contain one or more VerificationImage entries
   specifying image data that is to be displayed to the user by both the
   client and the confirmation interface.

   Before confirming the request, the user SHOULD verify that the two
   images are the same and reject the request in the case that they are
   not.





Hallam-Baker            Expires December 15, 2013              [Page 20]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


   Many devices do not have a display capability, in particular an
   embedded device such as a network switch or a thermostat.  In this
   case the device MAY be identified by means of the information
   provided in DeviceID, DeviceURI, DeviceImage and DeviceName.

6.  Protocol Binding

   A single protocol binding is defined:

      JSON encoding is used to express JCX messages.

      A HTTP session layer with HTTP session continuation is used for
      message authentication.

      TLS transport is required for confidentiality and service
      authentication.

   Implementations MAY support use of alternative encodings, session
   layers or transports provided that the necessary confidentiality and
   authentication criteria described below are met.  The means by which
   negotiation of the use of such encodings is achieved is outside the
   scop of this document.

6.1.  JSON encoding

   Messages are expressed in JSON encoding [RFC4627].

6.2.  HTTP Session Layer

   Messages are presented over a HTTP session layer [RFC2616].  The use
   of HTTP as a session layer permits multiple Web Services on the same
   host to share the same DNS name, IP address and port number and
   enables use of HTTP Session Continuation
   [I-D.hallambaker-httpsession] for message authentication.

   Use of HTTP Session Continuation mechanism allows message
   authentication data to be presented in the HTTP message header rather
   than the message content provides a clean separation of the message
   authentication data from the data being authenticated.  The scope of
   the authentication data is simply the message content after transport
   encoding (e.g. chunked) has been removed.

   The use of HTTP session continuation is necessary to achieve mutual
   authentication even though TLS transport is required.

   Only the HTTP Session header is used.  The negotiation of the Session
   parameters is performed within JCX.




Hallam-Baker            Expires December 15, 2013              [Page 21]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


   [TO-DO: Specify TLS binding options?]

   [TO-DO: Switch back from using JOSE algorithm names to HTTP Session
   algorithm names]

6.3.  TLS transport

   TLS transport [RFC4627] is used

   Support for the PKIX logotype extension [RFC3709] is highly
   recommended

   Use of an enhanced assurance certificate (e.g. CABForum EV) is likely
   to be required in most applications and is strongly recommended if
   Lotypes are used.

7.  Service Identification and Discovery

   The prefix '[PREFIX-TBD]' has been registered for use as a protocol
   identifier for JCX in the URI, SRV and Well Known Location
   registries.

   The URI form identifying a JCX account identifier is:

   PREFIX-TBD:<service>:<account>:< or PREFIX-
   TBD:<service>:<account>:<:subaccount>

   Where <service> is the DNS name of the Web Service Provider,
   <account> is the name of the account at the service provider and
   <subaccount> is an optional sub-account specifier.

   Use of the URI form is only needed in cases where the purpose of the
   identifier is not clear from the context, in a HTML anchor for
   example.  A JCX client requesting entry of the service account
   identifier MUST support entry of the short form identifier:

   <account>@<service> or <:subaccount>/<account>@<service>

   DNS Service (SRV) record discovery is the preferred method of host
   discovery as this provides for fault tollerance and load balancing.

   JCX clients SHOULD support use of DNS SRV records for host discovery
   and MUST support use of DNS A/AAAA records for host discovery.

   A compliant JCX service MUST be offered at the .well-known location /
   .well-known/PREFIX-TBD.  Use of JCX protocol at other service
   locations is permissible for testing and protocol development
   purposes but such configurations are not compliant and clients are



Hallam-Baker            Expires December 15, 2013              [Page 22]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


   not required to support them.  The URL for the JCX service is
   therefore:

   https://<service>/.well-known/PREFIX-TBD

8.  Acknowledgements

   [List of contributors]

9.  Security Considerations

9.1.  Denial of Service

9.2.  Breach of Trust

9.3.  Coercion

10.  IANA Considerations

   [TBS list out all the code points that require an IANA registration]

11.  References

11.1.  Normative References

   [I-D.hallambaker-httpsession]
              Hallam-Baker, P., "HTTP Session Management", draft-
              hallambaker-httpsession-01 (work in progress), May 2013.

   [RFC1035]  Mockapetris, P., "Domain names - implementation and
              specification", STD 13, RFC 1035, November 1987.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616, June 1999.

   [RFC4366]  Blake-Wilson, S., Nystrom, M., Hopwood, D., Mikkelsen, J.,
              and T. Wright, "Transport Layer Security (TLS)
              Extensions", RFC 4366, April 2006.

   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627, July 2006.

   [X.509]    International Telecommunication Union , "ITU-T
              Recommendation X.509 (11/2008): Information technology -



Hallam-Baker            Expires December 15, 2013              [Page 23]

Internet-Draft     JSON Service Connect (JCX) Protocol         June 2013


              Open systems interconnection - The Directory: Public-key
              and attribute certificate frameworks ", ITU-T
              Recommendation X.509, November 2008.

   [X.680]    International Telecommunication Union , "ITU-T
              Recommendation X.680 (11/2008): Information technology -
              Abstract Syntax Notation One (ASN.1): Specification of
              basic notation ", ITU-T Recommendation X.680, November
              2008.

11.2.  Non Normative References

   [RFC3709]  Santesson, S., Housley, R., and T. Freeman, "Internet
              X.509 Public Key Infrastructure: Logotypes in X.509
              Certificates", RFC 3709, February 2004.

Appendix A.  Stateless server

   The protocol is designed to permit but not require the server to
   store connection binding state in the Session ID of the HTTP Session
   Continuation authentication mechanism.

   The Session IDs are opaque as far as the client is concerned.  The
   client receives the Session ID from the service and returns it with
   each request.  The internal structure of the Session ID is therefore
   outside the scope of this specification but is provided here to
   assist implementers.

   In the PIN Authentication example, two SessionIDs are issued by the
   server, a temporary ID issued in response to the initial client
   OpenRequest and a connection binding ID issued when the client PIN
   confirmation is accepted and the connection binding is created.

A.1.  Temporary ID

   [TBS]

A.2.  Connection Binding ID

Author's Address

   Phillip Hallam-Baker
   Comodo Group Inc.

   Email: philliph@comodo.com






Hallam-Baker            Expires December 15, 2013              [Page 24]
