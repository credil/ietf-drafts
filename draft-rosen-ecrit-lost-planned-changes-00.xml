<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC5222 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5222.xml">
]>

<?rfc rfcedstyle="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="no"?>
<?rfc iprnotified="yes"?>
<?rfc strict="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>

<rfc category="std" ipr="trust200902" docName="draft-rosen-ecrit-lost-planned-changes-00">
  <front>
    <title abbrev="LoST Planned Changes">
      Validation of Locations Around a Planned Change
    </title>

    <author initials="B." surname="Rosen" fullname="Brian Rosen">
      <organization>Neustar</organization>
      <address>
        <postal>
          <street>470 Conrad Dr</street>
          <city>Mars</city>
          <region>PA</region>
          <code>16046</code>
          <country>US</country>
        </postal>
        <email>br@brianrosen.net</email>
      </address>
    </author>
 

    <date year="2013"/>
    <area>RAI</area>
    <workgroup>écrit</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>
      <t>This document defines an extension to LoST (RFC5222) that allows a planned change to the data in the LoST server to occur.  Records that previously were valid will become invalid at a date in the future, and new locations will become valid after the date.  The extension adds two elements to the &lt;findservice&gt; request: a URI to be used to inform the LIS that previously valid locations will be invalid after the planned change date, and add a date which requests the server to perform validation as of the date specified.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>This document describes an update to the LoST protocol <xref target="RFC5222"/> which allows a &lt;findservice&gt; request to add a URI and a date to be used with planned changes to the underlying location information in the server which is used by the validation function.  The URI is retained by the LoST server, associated with the data record that was validated, and used to notify the LIS (the LoST client) when a location which was previously valid will become invalid.  The date is used by the client to ask the server to perform validation as of a future date.
      </t>
      <t>Validation of civic locations involves dealing with data that changes over time.  A typical example is a portion of a county or province that was not part of a municipality is “annexed” to a municipality.  Prior to the change, the content of the PIDF A3 element would be blank, or represent some other value and after the change would be the municipality that annexed that part of the county/province.  This kind of annexation has an effectivity date (typically 00:00 on some date).</t>

<t>Records in a LIS must change around these kinds of events.  The old record must be discarded, and a new, validated record must be loaded into the LIS.  It is often difficult for the LIS operator to know that records must be changed.  There are other circumstances where locations that were previously valid become invalid.  As RFC5222 defines validation, the only way for a LIS to discover such changes was to periodically revalidate its entire database.  Of course, this would not facilitate timely changes, and also adds significant load to the LoST server.</t>

<t>This extension allows the client to provide a stable URI that is retained by the server associated with the location provided that the location information in the request was valid.  In the event of a planned change, or any other circumstance where the LI becomes invalid, the server sends a notification to the URI informing it of a change.  The notification contains the date and time when the LI becomes invalid.</t>

<t>Ideally, the LIS will prepare a new record, to be inserted in its active database, that becomes valid at the precise planned event date and time, at which point it would also delete the old record.  However, the new record has to be valid, and the LIS would like to validate it prior to the planned change event.  If it requests validation before the planned event, the server (without this extension) would inform the client that the location was invalid.  This extension includes an optional “asOf” date and time in the request that allows the LoST server to provide validation as of the date and time specified, as opposed to the “as of now” implied in the current LoST protocol.</t>

    </section>

    <section anchor="conventions" title="Conventions used in this document">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.
      </t>
      <t>”Server” in this document refers to the LoST server and “Client” is the LoST client, even when the server is performing an operation on the client.</t>
    </section>
    <section title="&lt;plannedChange&gt; element">
      <t>This document defines a new element to &lt;findService&gt; called ‘plannedChange’.  This element contains two attributes: ‘uri’ and ‘asOf’.  The ‘uri’ attribute MUST be a URI with a scheme of https. The URI will be stored by the server against the location in the request for subsequent use with the notification function defined below.  To minimize storage requirements of at the server, the length of the URI MUST be less than 256 bytes.  Each client of the server may only store one URI against a location, where “location” is defined by policy at the server, since a given unique location may have many combinations of LI elements that resolve to the same location.  If the server receives a ‘uri’ for the same location from the same client, the URI in the request replaces the URI it previously retained.  Policy at the server may limit how many uris it retains for a given location. A new warning is defined below to be used to indicate that the URI has not been stored.  
      </t>
    </section>
   <section title="&lt;locationInvalidated&gt; object">
<t>When the server needs to invalidate a location where the client provided a URI in &lt;plannedChange&gt;, 
the server sends &lt;locationInvalidated&gt; to the URI previously provided.  
This is the notice from the server to the client that the location may be invalid and should be revalidated.  
&lt;locationInvalidated&gt; contains an asOf attribute that specifies when the location may become invalid.  
If the date/time in asOf is earlier than the time the &lt;locationInvalidated&gt; was 
sent, the location may already be invalid and the LIS should take immediate action.</t>
   </section>

    <section anchor="schema" title="Relax NG Schema">
<t>The Relax NG schema in <xref target="RFC5222"/> is modified to be:</t>
<figure><artwork>
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
default namespace ns1 = "urn:ietf:params:xml:ns:lost-plannedChange1“

##
##       Extension to Location-to-Service Translation (LoST) Protocol
##       to support a planned change to location data
##
##       plannedChange is used in the extensionPoint of 
##       commonRequestPattern in a findService request
##
##       locationInvalidated is used by the LoST server to notify a 
##       LIS that a previously valid location may be (or will become) 
##       invalid
##
##       uriNotStored is a new warning to be used in a 
##       exceptionContainer in the warnings element of a 
##       findServiceResponse
##
start =
  plannedChange
  | locationInvalidated
  | uriNotStored
##
##       plannedChange
##
div {
  plannedChange =
    element plannedChange {
      attribute uri {
        xsd:anyURI }?,
      attribute asOf {
        xsd:dateTime }?,
      extensionPoint+
    }
}

##
##       locationInvalidated
##
div {
  locationInvalidated =
    element locationInvalidated {
      attribute asOf {
        xsd:dateTime }?,
      extensionPoint+
    }
}

##
##       uriNotStored
##
div {
  uriNotStored =
    element uriNotStored { basicException }
}

##
##       Patterns for inclusion of elements from schemas in
##       other namespaces.
##
div {

  ##
  ##         Any element not in the LoST namespace.
  ##
  notLostChange = element * - (ns1:* | ns1:*) { anyElement }

  ##
  ##         A wildcard pattern for including any element
  ##         from any other namespace.
  ##
  anyElement =
    (element * { anyElement }
     | attribute * { text }
     | text)*

  ##
  ##         A point where future extensions
  ##         (elements from other namespaces)
  ##         can be added.
  ##
  extensionPoint = notLostChanged*
}

</artwork></figure></section>
    <section anchor="security" title="Security Considerations">
      <t>As an extension to LoST, this document inherits the security issues raised in <xref target="RFC5222"/>.  The server could be tricked into storing a malicious URI which, when sent the locationInvalidated object could trigger something untoward.  The server MUST NOT accept any data from the client in response to POSTing the locationInvalidated.</t>

      <t>The server is subject to abuse by clients because it is being asked to store something and may need to send data to an uncontrolled URI.  Clients could request many URIs for the same location for example.  The server MUST have policy that limits use of this mechanism by a given client.  If the policy is exceeded, the server returns the uriNotStored warning.  The server MUST validate that the content of the uri sent is syntactically valid and meets the 256 byte limit.  When sending the locationInvalidated object to the uri stored, the server MUST protect itself against common http vulnerabilities.
      </t>
    <t>The mutual authentication between client and server when is RECOMMENDED for both the initial findService operation that requests storing the uri and the sending of the locationInvalidated object.  The server should be well known to the client, and its credential can be learned in a reliable way.  For example, a public safety system operating the LoST server may have a credential traceable to a well known Certificate Authority known to provide credentials for public safety agencies.  Many of the clients will be operated by local ISPs or other service providers where the server operator can reasonably obtain a good credential to use for the URI.  Where the server does not recognize the client, it’s policy MAY limit the use of this feature beyond what it would limit a client it recognized.</t>
    </section>
    <section anchor="iana" title="IANA Considerations">
    <section title="Relax NG Schema Registration">
    <figure><artwork><![CDATA[
   URI:  urn:ietf:params:xml:schema:lost-planedChange1

   Registrant Contact:  IETF ECRIT Working Group, Brian Rosen
      (br@brianrosen.net).

   Relax NG Schema: The Relax NG schema to be registered is contained
      in Section 5.  Its first line is

   default namespace = "urn:ietf:params:xml:ns:lost-PlannedChange1

   and its last line is

   }
]]></artwork></figure></section>

<section title="LoST Namespace Registration">
   <figure><artwork><![CDATA[


   URI:  urn:ietf:params:xml:ns:lost-plannedChange1

   Registrant Contact:  IETF ECRIT Working Group, Brian Rosen
      (br@brianrosen.net).

   XML:

BEGIN
<?xml version="2.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.0//EN"
  "http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="content-type"
        content="text/html;charset=iso-8859-1"/>
  <title>LoST Planned Change Namespace</title>
</head>
<body>
  <h1>Namespace for LoST Planned Change extension</h1>
  <h2>urn:ietf:params:xml:ns:lost-plannedChange1</h2>
<p>See <a href="http://www.rfc-editor.org/rfc/rfc????.txt">
   RFC????</a>.</p>
</body>
</html>
END
]]></artwork></figure>
   </section>
</section>
   </middle>

  <back>

    <references title="Normative References">
      &RFC2119;
      &RFC5222;
    </references>
  </back>
</rfc>
