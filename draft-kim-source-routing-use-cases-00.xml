<?xml version="1.0"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?rfc toc="yes" ?>
<?rfc tocompact="no" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc ipr="trust200902" docName="draft-kim-source-routing-use-cases-00.txt">

<!---->
<!--  Front Section                             -->
<!---->

<front>
<title abbrev="SPRING Use Cases">
SPRING Use Cases for Software-defined Networking
</title>

<!-- AUTHORS -->

<author initials="S. Kim" surname="Kim" fullname="Sungsu Kim">
  <organization abbrev="KT">
    KT
  </organization>
<address>
      <postal>
      <street>Infra R&amp;D Lab. KT</street>
          <street>17 Woomyeon-dong, Seocho-gu</street>
          <city>Seoul</city>
          <code>137-792</code>
          <country>Korea</country>
      </postal>
      <phone>+82-2-526-6688</phone>
      <facsimile>+82-2-526-5200</facsimile>
      <email>sngsu.kim@kt.com</email>
</address>
</author>

<author initials="J. Park" surname="Park" fullname="Jaewoo Park">
  <organization abbrev="KT">
    KT
  </organization>
<address>
      <postal>
      <street>Infra R&amp;D Lab. KT</street>
          <street>17 Woomyeon-dong, Seocho-gu</street>
          <city>Seoul</city>
          <code>137-792</code>
          <country>Korea</country>
      </postal>
      <phone>+82-2-526-6688</phone>
      <facsimile>+82-2-526-5200</facsimile>
      <email>jawoo.park@kt.com</email>
</address>
</author>



<author initials="E. Paik" surname="Paik" fullname="EunKyoung Paik">
  <organization abbrev="KT">
    KT
  </organization>
<address>
      <postal>
      <street>Infra R&amp;D Lab. KT</street>
          <street>17 Woomyeon-dong, Seocho-gu</street>
          <city>Seoul</city>
          <code>137-792</code>
          <country>Korea</country>
      </postal>
      <phone>+82-2-526-5233</phone>
      <facsimile>+82-2-526-5200</facsimile>
      <email>eun.paik@kt.com</email>
      <uri>http://mmlab.snu.ac.kr/~eun/</uri>
</address>
</author>

<date month="November" day="3" year="2013" />
<area>Internet</area>
<workgroup>SPRTNG</workgroup>

<!-- Abstract -->
<abstract>
<t>
In the SDN (Software-Defined Networking) architecture, an SDN controller decides and establishes flow paths. 
As an SDN controller provides control plane functions by communicating with switches, the latency of control functions is an important issue. 
Source routing is applicable to improve the performance of SDN. In this document, we illustrate SDN source routing use cases of flow setup and failure recovery.     
</t>
</abstract>

</front>
<middle>

<!---->
<!--SECTION 1: Introduction                  -->
<!---->

<section title="Introduction">

<t>
SDN (Software-Defined Networking) architecture provides network control mechanism with one or more SDN controllers.
The SDN controller communicates with one or more SDN switches to calculate and/or establishes flow paths. 
To provide dynamic network control, the communication between the SDN controller and those switches should be optimized. 
</t>
<t>

Source routing can be used to improve the performance of SDN. This document describes the use cases of source routing for SDN. Flow setup and failure recovery are optimized.
</t>



</section>

<!---->
<!--SECTION 2: Terminology                     -->
<!---->

<section title="Terminology">
<t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119" />.
</t>

<t>
The following terms are defined:
</t>
<t>
<list style='hanging'>
<t hangText="Software-defined Networking:">
SDN (Software-defined Networking) provides network programmability
by separating control plane and data plane of network infrastructure.
</t>
<t hangText="Source Routing:">
Source routing allows a sender of a packet to partially or completely specify the route the packet takes through the network.

</t>
<t hangText="Path Protection:">
Path protection in telecommunications is an end-to-end protection scheme used in connection oriented circuits in different network architectures to protect against inevitable failures on service providers' network that might affect the services offered to end customers. Any failure occurred at any point along the path of a circuit will cause the end nodes to move/pick the traffic to/from a new route.
</t>


</list>
</t>
</section>

<!---->
<!--SECTION 3: Migration Techniques for ICN Deployment -->
<!---->

<section title="Fast Flow Setup">

<t>
Source routing offers benefits to flow setup in SDN as it minimizes communications between an SDN controller and switches.
 In the SDN architecture, an SDN Controller decides paths for packet delivery and sets flow entries to switches along the paths to establish the flow paths. The flow setup mechanism of the SDN architecture provides controllability to network administrators, but it takes relatively long time to establish flow paths. By applying source routing to SDN flow setup, faster flow setup can be achieved. 
 In this section, we illustrate an example case of flow setup with source routing.
 Figure 1 is an example SDN topology to explain source routing use cases. 
</t>


<figure anchor="figure_example" title="Topology Example">
<preamble></preamble>
<artwork>
                                            __________________________  
                                           {                          }
									       {      SDN Controller      }   
                                           {__________________________}

                       +---------1:C:2----------+
                       |           |            |
                       2           |            2
          A:1--------1:B:3-------1:E:2--------1:D:3-----------1:F
		               4           |            4
				       |           |            |
			           +---------1:G:2----------+
</artwork>
<postamble></postamble>
</figure>
<t>
Assumptions in the above network diagram:
	An SDN controller is connected to the network and is able to retrieve the topology and traffic information. Based on the information and their policies, an SDN controller calculates path from a source to a destination.
	In an SDN architecture, Datapath ID (DPID) and port number are used to distinguish a path. 
	In Figure.1, Nodes A, B, C, D, E, F, and G are switches. 
	A number betwen a node and a link represents a port number.
</t>
<t>
Assume that A wants to send a packet to F, A first sends a packet to B, which is directly connected to A. When B receives the packet, it requests the SDN controller to handle the packet. The SDN controller extract a flow from the packet by inspecting packet header, such as MAC, IP addresses, protocol, etc. Then the SDN controller calculates a path based on its own policy. For example, path (B, E, D, F) is chosen by the policy. 
The SDN Controller encodes output port numbers (2, 3) of nodes in path (E, D) and insert them into the flow entry of B. 
SDN Controller adds a flow entry to B. 
The flow entry specifies the output port 3 for the flow from A to F and includes the encoded path information to establish the path to F.  
After the SDN controller adds the flow entry to B, B inserts the encoded path to the packet header and forwards the packet to the port 3 as instructed in its flow entry.
E receives the packet and gets its output port number 2 in the packet header. 
Then, E removes the port number in the encoded path it consumes.  E adds the flow entry which specifies output port as  3 to its flow table and forwards the packet to the port 2. D receives the packet, adds its flow entry, and forwards the packet to the port 3. The packet is sent from A to F and the path (A, B, E, D, F) is successfully set.     

</t>

</section>

<section title="Failure Recovery">


<t>
Source routing offers benefits to failure recovery in SDN in terms of recovery speed. 
If failures occur, such as link or port failures, some flows have been delivered through them will be failed.
These flows should be redirected to healthy paths as fast as possible.
</t>
<t>
A path protection mechanism prepares backup paths in case of failure and provides fast failure recovery as it provides a backup path in advance.
However, if backup paths are not set, an SDN controller redirects all the affected flows sequentially, which is called restoration.
In this section, we illustrate how source routing can be applied to protection and restoration for fast failure recovery in SDN. 


</t>


<!---->
<!--SECTION 4.1: Path protection	-->
<!---->

<section title="Path Protection">
<t>
In order to recover from failures fast, path protection can be implemented in SDN using the source routing mechanism.  
An SDN controller inserts backup path information, as well as a working path. 
If a failure occurs in the working path, then the affected flows is redirected to the backup path. 
</t>
<t>
For example, in Figure 1, when a flow path from A to F is set, the SDN controller extracts a flow of the packet. Then, it calculates the working path (B, E, D, F) and the backup path (B, G, D, F).
The working path (B, E, D, F) is established using the existing flow setup mechanism or our method shown in section 3. 
The SDN controller extracts output port numbers of nodes along the path.
The backup path (B, G, D, F) is encoded to (2, 3) which includes output port numbers of node G and D and inserted to the flow entry of B.
During the network is healthy, packets from A to F are delivered through (B, E, D, F). 
Assume that the link B-E fails, B detects that the port 3 is unavailable and redirects the packet to the port 4 after inserts the encoded path to the packet header.
G receives the packet and obtains the output port 2 for the packet by inspecting the packet header. 
G adds a flow entry which instructs G to forward matched flows to the port 2.
After G obtains the output port, it removes its output port number in the encoded path (2, 3), so G puts (2) to the packet header and forwards the packet to port 2.
D receives the packet, obtains the output port 3, and sends the packet to the port 3. 
</t>

</section>


<!---->
<!--SECTION 4.2: Restoration	-->
<!---->

<section title="Restoration">
<t>
Unlike the path protection, a restoration mechanism does not prepare for failure cases in advance. 
No additional actions are required during flow setup. 
If failures occur, SDN nodes detect failures and notify them to a SDN controller.
The SDN controller first identifies flows affected by the failures with the failure notification.
Then, the controller redirects the affected flows to alternative paths.
</t>
<t>
For example, in Figure 1, let us assume that link B-E fails, then B and D detect the port 3 and 1 are unavailable, respectively. 
B and D send notification messages to the SDN Controller, then it extracts flows from flow tables of B and D, which are directly affected by the failure.
The SDN controller then calculates alternative paths for the affected flows and sets alternative paths for the flows.
When the SDN controller redirects each affected flow, source routing is used to recover failures fast.
Redirection process of each affected flow is same as the flow setup shown in section 3. 
If 10 flows are affected by the failure, then the SDN controller should redirect these flows sequentially.
</t>
</section>


</section>
<section title="Security Considerations">
<t>
One of the most important security issues of source routing in SDN is that malicious users may change paths.
To prevent this, switches in a network domain should ignore encoded path information.
By deleting encoded path information in packets from ports connected to external networks, we can prevent malicious users from altering paths. 

</t>

</section>

<!---->
<!--SECTION: ACKNOWLEDGMENTS                          -->
<!---->

</middle>
<!---->
<!--Back Section                                     -->
<!---->

<back>


<!---->
<!--REFERENCES                                        -->
<!---->

<references title="Normative References">
&RFC2119;
</references>

</back>
</rfc>
