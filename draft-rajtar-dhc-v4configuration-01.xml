<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="info" docName="draft-rajtar-dhc-v4configuration-01"
     ipr="trust200902">
  <front>
    <title abbrev="Provisioning IPv4 Config Over IPv6">Provisioning IPv4
    Configuration Over IPv6 Only Networks</title>

    <author fullname="Branimir Rajtar" initials="B." surname="Rajtar">
      <organization>Hrvatski Telekom</organization>

      <address>
        <postal>
          <street/>

          <city>Zagreb</city>

          <country>Croatia</country>
        </postal>

        <email>branimir.rajtar@t.ht.hr</email>
      </address>
    </author>

    <author fullname="Ian Farrer" initials="I." surname="Farrer">
      <organization>Deutsche Telekom AG</organization>

      <address>
        <postal>
          <street/>

          <city>Bonn</city>

          <country>Germany</country>
        </postal>

        <email>ian.farrer@telekom.de</email>
      </address>
    </author>

    <date day="15" month="February" year="2013"/>

    <area>Internet</area>

    <workgroup>DHC WG</workgroup>

    <abstract>
      <t>As IPv6 becomes more widely deployed, some service providers are
      taking the approach of deploying IPv6 only networks, without dual-stack
      functionality for IPv4. However, access to IPv4 based services is still
      an ongoing requirement and approaches such as IPv4-in-IPv6 softwire
      tunnels are being developed to meet this need.</t>

      <t>In order to provision end-user's hosts with the necessary IPv4
      configuration, a number of different mechanisms have been proposed. This
      memo discusses the benefits and drawbacks of each and recommend a single
      approach to use for the basis for future work.</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t>A service provider with an IPv6-only core network must also be able
      to provide customers with access to the Internet and other services over
      IPv4. Softwire based IPv4-in-IPv6 tunneling mechanisms are an obvious
      example of this, such as the ones described in: <xref
      target="I-D.cui-softwire-b4-translated-ds-lite"/>, <xref
      target="I-D.ietf-softwire-map"/> and <xref
      target="I-D.bfmk-softwire-unified-cpe"/>.</t>

      <t>A general trend here is to distribute NAT functionality and IPv4
      address sharing from the centralized tunnel concentrator to the CPE in
      order to achieve better scalability. This results in a number of
      configuration parameters needing to be provisioned to the CPE such as
      the external public IPv4 address and a restricted port-range to use for
      NAT.</t>

      <t>In order to configure customer's devices for softwire function, a
      dynamic provisioning mechanism is necessary. In IPv4 only networks,
      DHCPv4 has often been used to provide configuration, but in an IPv6 only
      network, DHCPv4 messages cannot be transported.</t>

      <t>This document compares three different approaches which have been
      proposed for resolving this problem.</t>
    </section>

    <section title="Approaches for Configuring IPv4 Parameters">
      <t>In order to resolve the problem described above, the following
      approaches for transporting IPv4 configuration parameters have been
      suggested:<list style="numbers">
          <t>Adapt DHCPv4 format messages to be transported over IPv6 as
          described in <xref target="I-D.ietf-dhc-dhcpv4-over-ipv6"/>. For
          brevity, this is referred to as DHCPv4o6.</t>

          <t>Extend DHCPv6 with new options for IPv4 configuration, such as
          <xref target="I-D.mdt-softwire-map-dhcp-option"/> describes.</t>

          <t>Use DHCPv6 as above for external IPv4 address and source port
          configuration. Use DHCPv4 over IPv4 messages within an IPv6 softwire
          for configuring additional parameters. For brevity, this is referred
          to as DHCPv4oSW.</t>
        </list></t>

      <t>At the time of writing, working examples of the first two approaches
      have been developed and successfully tested in several different
      operators networks. The third approach is still only theoretical.</t>

      <t>Each of these approaches are described in more detail underneath.</t>

      <section title="DHCPv4o6 Based Provisioning - Functional Overview">
        <t>In order to receive IPv4 configuration parameters, IPv4-only
        clients initiate and exchange DHCPv4 messages with the DHCPv4 server.
        In order adapt this to an IPv6-only network, an existing DHCPv4 client
        implements a 'Client Relay' (CRA) function, which takes DHCPv4
        messages and puts them into UDPv6 and IPv6.</t>

        <t>As the mechanism involves unicast based communications, the IPv6
        address of the server must be provisioned to the client. A new DHCPv6
        option has been defined for this purpose.</t>

        <t>The DHCPv4o6 server must either provide an IPv6 interface to the
        client, or an intermediary 'Transport Relay Agent' device can act as
        the gateway between the IPv4 and IPv6 domains.</t>

        <t>The DHCPv4o6 server needs to be extended to support the new
        functionality, such as storing the IPv6 address of DHCPv4o6
        clients.</t>

        <t>This approach currently uses functional elements for ingress and
        egress of the IPv6-only transport domain--the CRA on the host and the
        TRA or TSV on the server. As a result, this approach has sometimes
        been referred to as a tunneling approach. However, relay agent
        encapsulation is not a tunnel, since it carries only DHCP traffic; it
        would be more accurate to describe it as an encapsulation.</t>

        <t>It is worth noting that there is no technical reason for using
        relay encapsulation for DHCPv4o6; this approach was taken because the
        authors of the draft originally imagined that it might be used to
        provide configuration information for an unmodified DHCPv4 client.
        However, this turns out not to be a viable approach: in order for this
        to work, there would have to be IPv4 routing on the local link to
        which the client is connected. In that case, there's no need for
        DHCPv4o6.</t>

        <t>Given that this is the case, there is no technical reason why
        DHCPv4o6 can't simply use the IPv6 transport directly, without any
        relay encapsulation. This would greatly simplify the specification and
        the implementation, and would still address the requirements stated in
        this document.</t>

        <t>This solution is described in detail in <xref
        target="I-D.ietf-dhc-dhcpv4-over-ipv6"/>.</t>
      </section>

      <section title="DHCPv6 Based Provisioning - Functional Overview">
        <t>In this approach, DHCPv6 would be extended with new DHCPv6 options
        for configuring IPv4 based functions.</t>

        <t>An example of this approach is described in <xref
        target="I-D.mdt-softwire-map-dhcp-option"/>, where a DHCPv6 message is
        used to convey parameters necessary for IPv4 in IPv6 softwire
        configuration.</t>
      </section>

      <section title="DHCPv4oSW Based Provisioning - Functional Overview">
        <t>In this approach, the configuration of IPv4 address and source
        ports (if required) is carried out as described in section 2.2 above.
        Additional IPv4 configuration parameters are then provisioned using a
        DHCPv4 messages transported within IPv6 in the softwire in the same
        manner as any other IPv4 based traffic.</t>

        <t>On receipt at the tunnel concentrator (e.g. MAP Border Router or a
        Lightweight 4over6 lwAFTR), the DHCPv4 message removed from the
        softwire and forwarded to the DHCPv4 server in the same way as any
        other IPv4 packet is handled.</t>

        <t>As the client is already configured with its external IPv4 address
        and source ports, the messages exchanged between the DHCPv4 client and
        server would be strictly DHCPINFORM/DHCPACK messages, for the
        configuration of additional IPv4 parameters.</t>

        <t>For this approach to function, a mechanism for the DHCPv4 client to
        learn the IPv4 address of the DHCPv4 server is needed. This could be
        done by defining a well-known IPv4 address for the DHCPv4 server,
        implementing a DHCPv4 relay function within the tunnel concentrator or
        other configuration methods.</t>

        <t>From a transport perspective, the key difference between this
        method and DHCPv4o6 (described above) is that here, the DHCPv4 message
        is put into UDPv4 and IPv4 and then put into the IPv6 softwire,
        instead of directly placing the DHCPv4 message into UDPv6 and
        IPv6.</t>
      </section>
    </section>

    <section title="Comparison of the Three Approaches">
      <t>The following section of the document provides the pros and cons of
      the approaches.</t>

      <section title="DHCPv4o6 Based Provisioning">
        <t/>

        <section title="Pros">
          <t><list style="numbers">
              <t>Once implemented, all existing DHCPv4 options will be be
              available with no further ongoing development work
              necessary.</t>

              <t>IPv4 and IPv6 based provisioning can be separated from each
              other if required, allowing flexibility in network design.</t>

              <t>Easy to implement through minor adaptation of existing DHCPv4
              client/server code.</t>

              <t>Simple, in that no additional functional elements are
              necessary except the DHCPv4o6 client and server. The Transport
              Relay Agent is completely optional.</t>
            </list></t>
        </section>

        <section title="Cons">
          <t><list style="numbers">
              <t>More complex, in that there are more new functional elements
              within the architecture than are necessary in DHCPv6 based
              provisioning.</t>

              <t>A new DHCPv6 option is necessary in order to provision the
              IPv6 address of the DHCPv4 server to the end device.</t>

              <t>DHCPv4 clients needs to be updated to implement the IPv6
              encapsulation and decapsulation function.</t>

              <t>The DHCPv4 server needs to be updated to implement new
              DHCPv4o6 functionality.</t>
            </list></t>
        </section>
      </section>

      <section title="DHCPv6 Based Provisioning">
        <t/>

        <section title="Pros">
          <t><list style="numbers">
              <t>Simpler, in that no additional functional elements are
              required except the DHCPv6 client and server.</t>

              <t>A single protocol is used to deliver configuration
              information for IPv4 and IPv6.</t>

              <t>A single provisioning point for all configuration
              parameters.</t>
            </list></t>
        </section>

        <section title="Cons">
          <t><list style="numbers">
              <t>Any required DHCPv4 options must be ported to DHCPv6, which
              will require a large amount of re-development work. All
              functional elements in the DHCPv6 implementation (clients,
              servers, relays) would need to be updated for each change.</t>

              <t>Means that DHCPv4 'legacy' options, which will be of
              decreasing relevance in the future will remain in DHCPv6 for the
              lifetime of the protocol.</t>

              <t>Each time that a DHCPv4 option is ported to DHCPv6, all
              clients and servers would need to be updated to implement the
              new option.</t>

              <t>Does not provide an architecture for keeping IPv4 and IPv6
              domains separated.</t>
            </list></t>
        </section>
      </section>

      <section title="DHCPv4oSW Based Provisioning">
        <t/>

        <section title="Pros">
          <t><list style="numbers">
              <t>Once implemented, all existing DHCPv4 options will be be
              available with no further ongoing development work
              necessary.</t>

              <t>Uses the existing DHCPv4 and DHCPv6 architectures in order to
              provide IPv4 configuration in an IPv6 only environment.</t>

              <t>DHCPv4 and DHCPv6 based provisioning can be separated from
              each other if required, allowing flexibility in network
              design.</t>
            </list></t>
        </section>

        <section title="Cons">
          <t><list style="numbers">
              <t>More complex, in that there are more new functional elements
              within the architecture than are necessary in DHCPv6 based
              provisioning.</t>

              <t>IPv4 over IPv6 softwire approaches which distribute NAT to
              the CPE and allow for IP address sharing (MAP-E &amp; LW4o6)
              forbid the use of reserved TCP/UDP ports (e.g. 0-1024). Every
              DHCPv4 client sharing the same address needs to have a UDP
              listener running on UDP port 68. To resolve this would require
              significant rework to either the softwire mechanisms and/or the
              DHCPv4 client implementation.</t>

              <t>From the current specification, DHCPINFORM is not suitable
              for use over a softwire. Additional work, such as the
              development of 'shims' would be necessary</t>

              <t>The current DHCPINFORM specification has a number of unclear
              points, such as those described in <xref
              target="I-D.ietf-dhc-dhcpinform-clarify"/>. Substantial work
              would be required to resolve this.</t>

              <t>Links the deployment of IPv4 configuration over IPv6 to a
              softwire implementation (e.g. requiring a softwire concentrator
              to act as a DHCPv4 relay). Whilst softwires are the only
              application for this functionality at the moment, this may not
              always be the case.</t>

              <t>A new mechanism must be defined in order to provide the
              DHCPv4 client with the IPv4 address of the DHCPv4 server so that
              unicast DHCPINFORM messages can be sent.</t>
            </list></t>
        </section>
      </section>
    </section>

    <section title="Conclusion">
      <t><list>
          <t>Discussion: This chapter will be updated to reflect the consensus
          of the DHC Working Group.</t>
        </list></t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes no request of IANA.</t>

      <t>Note to RFC Editor: this section may be removed on publication as an
      RFC.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t/>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t/>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.I-D.cui-softwire-b4-translated-ds-lite'?>

      <?rfc include='reference.I-D.ietf-softwire-map'?>

      <?rfc include='reference.I-D.bfmk-softwire-unified-cpe'?>

      <?rfc include='reference.I-D.ietf-dhc-dhcpv4-over-ipv6'?>

      <?rfc include='reference.I-D.mdt-softwire-map-dhcp-option'?>

      <?rfc include='reference.I-D.ietf-dhc-dhcpinform-clarify'?>
    </references>
  </back>
</rfc>
