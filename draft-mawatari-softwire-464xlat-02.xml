<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC4291 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4291.xml">
<!ENTITY RFC6052 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6052.xml">
<!ENTITY RFC6144 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6144.xml">
<!ENTITY RFC6145 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6145.xml">
<!ENTITY RFC6146 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6146.xml">
<!ENTITY RFC6147 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6147.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
<!ENTITY I-D.xli-behave-divi SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.xli-behave-divi.xml">
<!ENTITY I-D.murakami-softwire-4v6-translation SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.murakami-softwire-4v6-translation.xml">
<!ENTITY I-D.ietf-behave-nat64-discovery-heuristic SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-behave-nat64-discovery-heuristic.xml">
<!ENTITY I-D.ietf-v6ops-3gpp-eps SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-v6ops-3gpp-eps.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-mawatari-softwire-464xlat-02" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="464XLAT">464XLAT: Combination of Stateful and Stateless Translation</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Masataka Mawatari" initials="M.M." 
            surname="Mawatari">
      <organization>Japan Internet Exchange Co.,Ltd.</organization>

      <address>
        <postal>
          <street>KDDI Otemachi Building 19F, 1-8-1 Otemachi,</street>

          <!-- Reorder these if your country does things differently -->

          <city>Chiyoda-ku</city>

          <region>Tokyo</region>

          <code>100-0004</code>

          <country>JAPAN</country>
        </postal>

        <phone>+81 3 3243 9579</phone>

        <email>mawatari@jpix.ad.jp</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <author fullname="Masanobu Kawashima" initials="M.K." 
            surname="Kawashima">
      <organization>NEC AccessTechnica, Ltd.</organization>

      <address>
        <postal>
          <street>800, Shimomata</street>

          <!-- Reorder these if your country does things differently -->

          <city>Kakegawa-shi</city>

          <region>Shizuoka</region>

          <code>436-8501</code>

          <country>JAPAN</country>
        </postal>

        <phone>+81 537 23 9655</phone>

        <email>kawashimam@vx.jp.nec.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <author fullname="Cameron Byrne" initials="C.B." 
            surname="Byrne">
      <organization>T-Mobile USA</organization>

      <address>
        <postal>
          <street> </street>

          <!-- Reorder these if your country does things differently -->

          <city>Bellevue, Washington</city>

          <code>98105</code>

          <country>USA</country>
        </postal>

        <email>cameron.byrne@t-mobile.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date month="October" year="2011" />

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>XLAT</keyword>
    <keyword>Stateful Translation</keyword>
    <keyword>Stateless Translation</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>This document describes a method (464XLAT) for IPv4 connectivity across IPv6 network by combination of stateful translation and stateless translation. 464XLAT is a simple technique to provide IPv4 access service while avoiding encapsulation by using twice IPv4/IPv6 translation standardized in [RFC6145] and [RFC6146].</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The IANA unallocated IPv4 address pool was exhasuted on February 3, 2011. It is likely that each RIR's unallocated IPv4 address pool will exhaust in the near future. In this situation, it will be difficult for many networks to assign IPv4 address to end users despite substantial IPv4 connectivity required for mobile devices, smart-grid, and cloud nodes.</t>

      <t>This document describes an IPv4 over IPv6 solution as one of the measures of IPv4 address extension and encouragement of IPv6 deployment.</t>

      <t>The 464XLAT method described in this document uses twice IPv4/IPv6 translation standardized in <xref target="RFC6145"></xref> and <xref target="RFC6146"></xref>. It does not require DNS64 <xref target="RFC6147"></xref>,  but it may use DNS64. It is also possible to provide single IPv4/IPv6 translation service, which will be needed in the near future. This feature is one of the advantages, because it can be an encouragement to gradually transition to IPv6.</t>

</section>

<section title="Requirements Language">
  <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
     "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
     document are to be interpreted as described in <xref
     target="RFC2119"></xref>.</t>
</section>

    <section title="Terminology">
      <t><list hangIndent="8" style="hanging">
	<t hangText="PLAT:">PLAT is Provider side translator(XLAT). A stateful translator complies with <xref target="RFC6146"></xref> that performs 1:N translation. It translates global IPv6 address to global IPv4 address, and vice versa.</t>

	<t hangText="CLAT:">CLAT is Customer side translator(XLAT). A stateless translator complies with <xref target="RFC6145"></xref> that performs 1:1 translation. It algorithmically translates private IPv4 address to global IPv6 address, and vice versa. It has also IPv6 router function that can forward IPv6 packet for IPv6 hosts in end-user network. Furthermore, it has DNS Proxy function with IPv6 transport that provides name resolution for IPv4 hosts and IPv6 hosts in end-user network. The presence of DNS64 <xref target="RFC6147"></xref> and any port mapping algorithm are not required.
</t>

      </list></t>
    </section>

    <section title="Network Architecture">
     
      <t>464XLAT method is shown in the following figure.</t> 
    
      <section title="Wireline Network Architecture">

      <figure align="center" anchor="Wireline_topology" title="Wireline Network Topology">
       <preamble></preamble>
       <artwork align="center"><![CDATA[
                               ----
                              | v6 |
                               ----
                                 |
 ----      |                 .---+---.                    .------.
| v6 |-----+                /         \                  /        \
 ----      |    ------     /   IPv6    \     ------     /   IPv4   \
           +---| CLAT |---+  Internet   +---| PLAT |---+  Internet  |
 -------   |    ------     \           /     ------     \           /
|v4p/v6 |--+                `---------'                  `----+----'
 -------   |                                                  |
 -----     |                                                -----
| v4p |----+                                               | v4g |
 -----     |                                                -----

       <- v4p -> XLAT <--------- v6 --------> XLAT <- v4g ->


  v6  : Global IPv6
  v4p : Private IPv4
  v4g : Global IPv4
        ]]></artwork>
      </figure>
    </section>

      <section title="Wireless 3GPP Network Architecture">

      <figure align="center" anchor="Wireless_topology" title="Wireless 3GPP Network Topology">
       <preamble></preamble>
       <artwork align="center"><![CDATA[
                                ----
                               | v6 |
                                ----
                                  |
                              .---+---.
                             /         \
                            /   IPv6    \
                           |   Internet  |
                            \           /
 UE / Mobile Phone           `---------'
+----------------------+          |
|  ----     |          |      .---+---.                   .------.
| | v6 |----+          |     /         \                 /        \
|  ----     |    ------|    / IPv6 PDP  \     ------    /   IPv4   \
|           +---| CLAT |---+ Mobile Core +---| PLAT |--+  Internet  |
|           |    ------|    \    GGSN   /     ------    \          /
|           |          |     \         '                 `----+---'
|  ------   |          |      `-------'                       |
| | v4p |---+          |                                    -----
|  ------   |          |                                   | v4g |
+----------------------+                                    -----

        <- v4p -> XLAT <--------- v6 --------> XLAT <- v4g ->


  v6  : Global IPv6
  v4p : Private IPv4
  v4g : Global IPv4
        ]]></artwork>
      </figure>
    </section>

   </section>


    <section title="Applicability">

      <section title="Wireline Network Applicability">

      <t>When ISP has IPv6 access network infrastructure and 464XLAT, ISP can provide IPv4 service to end users.</t>

      <t>If the IXP or another provider operates the PLAT, all ISPs have to do is to deploy IPv6 access network. All ISPs do not need IPv4 facilities. They can migrate quickly their operation to an IPv6-only environment. Incidentally, Japan Internet Exchange(JPIX) is providing 464XLAT trial service since July 2010.</t>
      </section>

      <section title="Wireless 3GPP Network Applicability">

      <t>In pre-release 9 3GPP networks, GSM and UMTS networks must signal and support both IPv4 and IPv6 PDP attachments to access IPv4 and IPv6 network destinations.  This is generally not operationally viable since much of the network cost is derived from the number of PDP attachments, both in terms of licenses from the network hardware vendors and in terms of actual hardware resources required to support and maintain the PDP signaling and mobility events.  This has been one of the operational challenges of bringing IPv6 to mobile networks, it simply costs more from the network provider perspective and does not result in any new revenues, since customers are not willing to pay for IPv6 access.</t>

      <t>Now that both global and private IPv4 addresses are scarce to the extent that it is a substantial business risk and limiting growth in many areas, the mobile network providers must support IPv6 address which solve the IP address scarcity issue, but it is not feasible to simply turn on additional IPv6 PDP network attachments since that does not solve the near-term IPv4 scarcity issues and at it also increases cost. The most logical path forward is to replace IPv6 with IPv4 and replace the common NAT44 with NAT64 and DNS64.  Extensive live network testing with hundreds of friendly-users has shown that IPv6-only network attachments for mobile devices covers over 90% of the common use-cases in Symbian and Android mobile operating systems.  The remaining 10% of use-cases do not work because the application requires an IPv4 socket or the application references an IPv4-literal.</t>

      <t>464XLAT in combination with NAT64 and DNS64 allows 90% of the applications to continue to work with single translation while at the sametime facilitating legacy IPv4-only applications by providing a private IPv4 address and IPv4 route on the host for the applications to reference and bind to.  Traffic sourced from the IPv4 interface is immediately routed the NAT46 CLAT function and passed to the IPv6-only mobile network and destine to the PLAT NAT64.</t>

      </section>

</section>


    <section title="Implementation Considerations">

        <section title="IPv6 Address Format">
          <t>IPv6 address format in 464XLAT is presented in the following format.</t>

          <figure align="center" title="IPv6 Address Format for 464XLAT">
            <preamble></preamble>

            <artwork align="center"><![CDATA[
    +-----------------------------------------------+---------------+
    |              XLAT prefix(96)                  |    IPv4(32)   |
    +-----------------------------------------------+---------------+
            ]]></artwork>

          </figure>

          <t>Source address and destination address have IPv4 address embedded in the low-order 32 bits of the IPv6 address. The format is defined in Section 2.2 of <xref target="RFC6052"></xref>. However, 464XLAT does not use the Well-Known Prefix "64:ff9b::/96".</t>
        </section>

        <section title="DNS Proxy Implementation">
          <t>CLAT perform DNS Proxy for IPv4 hosts and IPv6 hosts in end-user network. It MUST provide name resolution with IPv6 transport. It does not need DNS64 <xref target="RFC6147"></xref> function.</t>
        </section>

        <section title="IPv6 Fragment Header Consideration">
          <t>In the 464XLAT environment, the PLAT and CLAT SHOULD include an IPv6 Fragment Header, since IPv4 host does not set the DF bit. However, the IPv6 Fragment Header has been shown to cause operational difficulties in practice due to limited firewall fragmentation support, etc. Therefore, the PLAT and CLAT may provide a configuration function that allows the PLAT and CLAT not to include the Fragment Header for the non-fragmented IPv6 packets. At any rate, both behaviors SHOULD match.</t>        </section>

        <section title="Auto Prefix Assignment">
          <t>Source IPv6 prefix assignment in CLAT is via DHCPv6 prefix delegation or another method. Destination IPv6 prefix assignment in CLAT is via some method. (e.g., DHCPv6 option, TR-069, DNS, HTTP, <xref target="I-D.ietf-behave-nat64-discovery-heuristic"></xref>, etc.)</t>
        </section>

    </section>

    <section title="Deployment Considerations">
          <t>Even if the Internet access provider for consumers is different from the PLAT provider (another Internet access provider or Internet exchange provider, etc.), it can implement traffic engineering independently from the PLAT provider. Detailed reasons are below.</t>

      <t><list hangIndent="4" style="hanging">
	<t hangText="1.">The Internet access provider for consumers can figure out IPv4 source address and IPv4 destination address from translated IPv6 packet header, so it can implement traffic engineering based on IPv4 source address and IPv4 destination address (e.g. traffic monitoring for each IPv4 destination address, packet filtering for each IPv4 destination address, etc.). The Tunneling methods do not have such a advantage, without any deep packet inspection for visualizing the inner IPv4 packet of the tunnel packet.</t>

	<t hangText="2.">If the Internet access provider for consumers can assign IPv6 prefix greater than /64 for each subscriber, this 464XLAT method can separate IPv6 prefix for native IPv6 packets and XLAT prefix for IPv4/IPv6 translation packets. Accordingly, it can identify the type of packets ("native IPv6 packets" and "IPv4/IPv6 translation packets"), and implement traffic engineering based on IPv6 prefix.</t>
      </list></t>

          <t>This 464XLAT method have two capabilities. One is a IPv6 -> IPv4 -> IPv6 translation for sharing global IPv4 addresses, another is a IPv4 -> IPv6 translation for reaching IPv6 only servers from IPv4 only clients that can not support IPv6. IPv4 only clients will remain for a while.</t>

    </section>

    <section anchor="Security" title="Security Considerations">
      <t>To implement a PLAT, see security considerations presented in Section 5 of <xref target="RFC6146"></xref>.</t>

      <t>To implement a CLAT, see security considerations presented in Section 7 of <xref target="RFC6145"></xref>. And furthermore, the CLAT SHOULD perform Bogon filter, and SHOULD have IPv6 firewall function as a IPv6 router. It is useful function for native IPv6 packet and translated IPv6 packet. The CLAT SHOULD check IPv6 packet received from WAN interface. If the packet is invalid prefix (i.e., it is not XLAT prefix), then SHOULD silently drop the packet. In addition, the CLAT SHOULD check IPv4 packet after the translation. If the packet is not match private IPv4 address of LAN, then SHOULD silently drop the packet.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document has no actions for IANA.</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The authors would like to thank JPIX NOC members and Seiichi Kawamura for their helpful comments.</t>
    </section>

    <!-- Possibly a 'Contributors' section ... -->

  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>

    <references title="Normative References">
      &RFC2119;
      &RFC6052;
      &RFC6144;
      &RFC6145;
      &RFC6146;

    </references>

    <references title="Informative References">
      &RFC6147;
      &I-D.xli-behave-divi;
      &I-D.murakami-softwire-4v6-translation;
      &I-D.ietf-behave-nat64-discovery-heuristic;
      &I-D.ietf-v6ops-3gpp-eps;
    </references>

  </back>
</rfc>


