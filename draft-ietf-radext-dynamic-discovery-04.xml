<?xml version = '1.0'?>
<?rfc rfcedstyle='yes'?>
<?rfc rfcprocack='yes'?>
<?rfc toc='yes'?>
<?rfc symrefs='yes'?>
<!DOCTYPE rfc SYSTEM "../xml2rfc-1.36/rfc2629.dtd" [
      <!ENTITY rfc2119     PUBLIC '' '../rfc-bib/reference.RFC.2119.xml'>
      <!ENTITY rfc3958     PUBLIC '' '../rfc-bib/reference.RFC.3958.xml'>
      <!ENTITY rfc5580     PUBLIC '' '../rfc-bib/reference.RFC.5580.xml'>
      <!ENTITY rfc5891     PUBLIC '' '../rfc-bib/reference.RFC.5891.xml'>
      <!--ENTITY rfc4282     PUBLIC '' '../rfc-bib/reference.RFC.4282.xml'> -->
      <!ENTITY dtls        PUBLIC '' '../i-d-bib/reference.I-D.draft-dekok-radext-dtls-03.xml'>
      <!ENTITY rfc6613     PUBLIC '' '../rfc-bib/reference.RFC.6613.xml'>
      <!ENTITY rfc6614     PUBLIC '' '../rfc-bib/reference.RFC.6614.xml'>
    ]>
<rfc ipr='trust200902' docName='draft-ietf-radext-dynamic-discovery-04'
category='exp'>
  <front>
	  <title abbrev="RADIUS Peer Discovery" >NAI-based Dynamic Peer
Discovery for RADIUS/TLS and RADIUS/DTLS</title>
    <author fullname="Stefan Winter" initials="S." surname="Winter" >
	<organization abbrev="RESTENA" >
		  Fondation RESTENA
	</organization>
	<address>
		<postal>
			<street>6, rue Richard Coudenhove-Kalergi</street>
			<city>Luxembourg</city>
			<code>1359</code>
			<country>LUXEMBOURG</country>
		</postal>
		<phone>+352 424409 1</phone>
		<facsimile>+352 422473</facsimile>
		<email>stefan.winter@restena.lu</email>
		<uri>http://www.restena.lu.</uri>
	</address>
    </author>
    <author fullname="Mike McCauley" initials="M." surname="McCauley" >
	    <organization abbrev="OSC" >
		    Open Systems Consultants
	    </organization>
	    <address>
		    <postal>
			    <street>9 Bulbul Place</street>
			    <city>Currumbin Waters</city>
			    <code>QLD 4223</code>
			    <country>AUSTRALIA</country>
		    </postal>
		    <phone>+61 7 5598 7474</phone>
		    <facsimile>+61 7 5598 7070</facsimile>
		    <email>mikem@open.com.au</email>
		    <uri>http://www.open.com.au.</uri>
	    </address>
    </author>
    <date day="28" month="June" year="2012" />
    <area>Operations and Management Area</area>
    <workgroup>RADIUS Extensions Working Group</workgroup>
    <keyword>RADIUS</keyword>
    <keyword>AAA</keyword>
    <keyword>Security</keyword>
    <keyword>Reliability</keyword>
    <keyword>DNS</keyword>
    <abstract>
	    <t>This document specifies a means to find authoritative RADIUS servers
for a given realm. It can be used in conjunction with RADIUS/TLS and
RADIUS/DTLS.</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction" anchor="intro">
	<section title="Requirements Language" anchor="reqlang">
		<t>In this document, several words are used to signify the
requirements of the specification.  The key words "MUST", "MUST NOT",
"REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY",
and "OPTIONAL" in this document are to be interpreted as described in RFC 2119.
<xref target="RFC2119" /></t>
	</section>
	<section title="Terminology" anchor="terms">
		<t>RADIUS/TLS Client: a RADIUS/TLS <xref target="RFC6614" />
instance which initiates a new connection.</t>
		<t>RADIUS/TLS Server: a RADIUS/TLS <xref target="RFC6614" />
instance which listens on a RADIUS/TLS port and accepts new connections</t>
		<t>RADIUS/TLS node: a RADIUS/TLS client or server</t>
	</section>
    </section>
    <section title="DNS-based NAPTR/SRV Peer Discovery" anchor="dns">
    <section title="Applicability" anchor="applicability">
	    <t>
		    Dynamic server discovery as defined in this document is only
applicable for AAA transactions where a RADIUS server receives a request with a
realm for which no home RADIUS server is known. I.e. where static server
configuration does not contain a known home authentication server, or where the
server configuration explicitly states that the realm destination is to be
looked up dynamically. Furthermore, it is only applicable for new user sessions,
i.e. for the initial Access-Request. Subsequent messages concerning this
session, for example Access-Challenges and Access-Accepts use the previously-established communication
channel between client and server.
	    </t>
	    </section>
	    <section title="DNS RR definition" anchor="rr-def">
	    <t>
		    DNS definitions of RADIUS/TLS servers can be either S-NAPTR
records (see <xref target="RFC3958" />) or SRV records. When both are defined, the resolution algorithm prefers
S-NAPTR results (see section <xref target="algo" /> below). </t>
<t>This specification defines three S-NAPTR service
tags: "aaa+auth", "aaa+acct" and "aaa+dynauth". This specification defines two S-NAPTR protocol tags: "radius.tls" for RADIUS/TLS <xref target="RFC6614" /> and "radius.dtls" for RADIUS/DTLS 
<xref target="I-D.dekok-radext-dtls" />.</t>
<t>Note well:
	<list style="empty">
	  <t>The S-NAPTR service and protocols are unrelated to the IANA Service Name and Transport Protocol Number registry</t>
	  <t>The delimiter '.' in the protocol tags is only a separator for human reading convenience - not for structure or namespacing; it MUST NOT be parsed in any way by the querying application or resolver.</t>
	  <t>The use of the separator '.' is common also in other protocols' protocol tags. This is coincidence and does not imply a shared semantics with such protocols.</t>
	</list>
</t>
<t>This specification defines the SRV prefix "_radiustls._tcp" for RADIUS over TLS <xref target="RFC6614" />
and "_radiustls._udp" for RADIUS over DTLS <xref target="I-D.dekok-radext-dtls" />. It is
expected that in most cases, the label used for the records is the DNS
representation (punycode) of the literal realm name for which the server is the
AAA server.</t>
	    <t>
		    However, arbitrary other labels may be used if, for example,
a roaming consortium uses realm names which are not associated to DNS names or
special-purpose consortia where a globally valid discovery is not a use case.
Such other labels require a consortium-wide agreement about the transformation
from realm name to lookup label.
	    </t>
	    <t>Examples:
		    <list style="letters">
			    <t>A general-purpose AAA server for realm
example.com might have DNS entries as follows:
			    <list style="empty">
				    <t>example.com. IN NAPTR 50 50 "s"
"aaa+auth:radius.tls" "" _radiustls._tcp.foobar.example.com.</t>
				    <t>_radiustls._tcp.foobar.example.com. IN SRV 0 10
2083 radsec.example.com.</t>
			    </list>
			    </t>
			    <t>The consortium "foo" provides roaming services for
its members only. The realms used are of the form enterprise-name.example. The
consortium operates a special purpose DNS server for the (private) TLD
"example" which all AAA servers use to resolve realm names. "Bad, Inc." is
part of the consortium. On the consortium's DNS server, realm
bad.example might have the following DNS entries:
				    <list style="empty">
					    <t>bad.example IN NAPTR 50
50 "a" "aaa+auth:radius.dtls" "" "very.bad.example"</t>
				    </list>
			    </t>
			    <t>The eduroam consortium uses realms based on DNS,
but provides its services to a closed community only. However, a AAA domain
participating in eduroam may also want to expose AAA services to other,
general-purpose, applications (on the same or other AAA servers). Due to that,
the eduroam consortium uses the service tag "x-eduroam" for authentication purposes and eduroam AAA
servers use this tag to look up other eduroam servers. An eduroam participant example.org which also
provides general-purpose AAA on a different server uses the general "aaa+auth" tag:
				    <list style="empty">
					    <t>example.org. IN NAPTR 50 50 "s" "x-eduroam:radius.tls" "" _radiustls._tcp.eduroam.example.org.</t>
					    <t>example.org. IN NAPTR 50 50 "s" "aaa+auth:radius.tls" "" _radiustls._tcp.aaa.example.org</t>
					    <t>_radiustls._tcp.eduroam.example.org. IN SRV 0 10 2083 aaa-eduroam.example.org.</t>
					    <t>_radiustls._tcp.aaa.example.org. IN SRV 0 10 2083 aaa-default.example.org.</t>
				    </list>
			    </t>
		    </list>
	    </t>
    </section>

    <section title="Realm to AAA server resolution algorithm" anchor="algo">
	    <t>This algorithm can be used to discover RADIUS servers (for RADIUS Authentication and RADIUS Accounting) or to discover RADIUS DynAuth servers.</t>
	<section title="Input" anchor="input">
	    <t>For RADIUS Authentication and RADIUS Accounting server discovery, input I to the algorithm is the RADIUS User-Name attribute with content of the form "user@realm"; the literal @ sign being the separator between a local user identifier within a realm and its realm. The use of multiple literal @ signs in a User-Name is strongly discouraged; but if present, the last @ sign is to be considered the separator. All previous instances of the @ sign are to be considered part of the local user identifier.</t>
<t>For RADIUS DynAuth Server discovery, input I to the algorithm is the domain name of the operator of a RADIUS realm as was communicated during user authentication using the Operator-Name attribute (<xref target="RFC5580"/>, section 4.1). Only Operator-Name values with the namespace "1" are supported by this algorithm - the input to the algorithm is the actual domain name, preceeded with an "@" (but without the "1" namespace identifier byte of that attribute).</t>
<t>
                    Note well: The attribute User-Name is defined to contain UTF-8 text. In practice, the content may or may not be UTF-8. Even if UTF-8, it may or may not map to a domain name in the realm part. Implementors MUST take possible conversion error paths into consideration when parsing incoming User-Name attributes.
This document describes server discovery only for well-formed realms mapping to DNS domain names in UTF-8
encoding. The result of all other possible contents of User-Name is unspecified;
this includes, but is not limited to:
                    <list>
                      <t>Usage of separators other than @</t>
                      <t>Usage of multiple @ separators</t>
                      <t>Encoding of User-Name in local encodings</t>
                      <t>UTF-8 realms which fail the conversion rules as per <xref target="RFC5891"/></t>
                      <t>UTF-8 realms which end with a . ("dot") character.</t>
                    </list>
For the last bullet point, "trailing dot", special precautions should be taken to avoid problems when resolving servers with the algorithm below: they may resolve to a AAA server even if the peer RADIUS server only is configured to handle the realm without the trailing dot. If that RADIUS server again uses NAI discovery to determine the authoritative server, the server will forward the request to localhost, resulting in a tight endless loop.
            </t>
	</section>
	<section title="Output" anchor="Output">
<t>Output O of the algorithm is a set of the tuple {hostname; port; order/preference; TTL} - the set can be empty.</t>
	</section>
	<section title="Algorithm" anchor="core-algo">
	    <t>The algorithm to determine the RADIUS server to contact is as follows:
		    <list style="numbers">
			    <t>Determine P = (position of last "@" character) in I.</t>
			    <t>generate R = (substring from P+1 to end of I)</t>
			    <t>Optional: modify R according to agreed consortium procedures</t>
			    <t>Using the host's name resolution library, perform a NAPTR query for R (see "Delay considerations" below). The name resolution library may need to convert R to a different respresentation, depending on the resolution backend used. If no result, continue at step 9. If name resolution returns with error, O = { } and terminate.</t>
			    <t>Extract NAPTR records with service tag "aaa+auth", "aaa+acct", "aaa+dynauth" as appropriate. Keep note of the remaining TTL of each of the discovered NAPTR records.</t>
			    <t>If no result, continue at step 9.</t>
			    <t>Evaluate NAPTR result(s) for desired protocol tag, perform subsequent lookup
steps until lookup yields one or more hostnames. O = (set of {hostname; port; order/preference; min{all TTLs that led to this result} } for all lookup results). Keep note of the remaining TTL of each of the discovered records (e.g. SRV and AAAA).</t>
			    <t>Terminate.</t>
			    <t>Generate R' = (prefix R with "_radiustls._tcp." or "_radiustls._udp")</t>
			    <t>Using the host's name resolution library, perform
SRV lookup with R' as label (see "Delay considerations" below). Keep note of the TTL of each of the discovered SRV records.</t>
			    <t>If name resolution returns with error, O = { } and terminate.</t>
			    <t>If no result, O = {} and terminate.</t>
			    <t>Perform subsequent lookup steps until lookup
yields one or more hostnames (see "Delay considerations" below). Keep note of the TTL of each of the discovered records.</t>
<t>O = (set of {hostname; port; order/preference; min{all TTLs that led to this result} } for all
hostnames). Terminate.</t>
		    </list>
	    </t>
	</section>
<section title="Validity of results" anchor="validity">
	<t>After executing the above algorithm, the RADIUS server establishes a connection to a home server from the result set. This connection can potentially remain open for an indefinite amount of time. This conflicts with the possibility of changing device and network configurations on the receiving end. Typically, TTL values for records in the name resolution system are used to indicate how long it is safe to rely on the results of the name resolution. To allow for a change of configuration, a RADIUS server SHOULD re-execute the algorithm above after the lowest of the TTL values that are associated with this connection have expired. The server MAY keep the session open during this re-assessment to avoid closure and immediate re-opening of the connection should the result not have changed.
</t>
<t>
Should the algorithm above terminate with an empty set (but no error), the RADIUS server SHOULD NOT attempt another execution of this algorithm for the same target realm before the negative TTL has expired.
</t>
<t>
Should the algorithm above terminate due to an error with no TTL value known (e.g. DNS SERVFAIL), the RADIUS server SHOULD NOT attempt another execution of this algorithm for the same target realm before a configurable timeout interval has passed.
</t>
</section>
<section title="Delay considerations" anchor="delay">
<t>The host's name resolution library may need to contact outside entities to perform the name resolution (e.g. authoritative name servers for a domain), and since the NAI discovery algorithm is based on uncontrollable user input, the destination of the lookups is out of control of the server that performs NAI discovery. If such outside entities are misconfigured or unreachable, the algorithm above may need an unacceptably long time to terminate. Many RADIUS implementations time out after five seconds of delay between Request and Response. It is not useful to wait until the host name resolution library signals a time-out of its name resolution algorithms; instead, implementations of NAI discovery SHOULD terminate the algorithm after the fixed upper bound of time of three seconds. If no final output of the algorithm is available after this timeout, the RADIUS server MUST assume the empty set as a result and treat the pending request according to its static configuration (e.g., fallback to a default route to a home server). Execution of the NAI discovery algorithm SHOULD be non-blocking (i.e. allow other requests to be processed in parallel to the execution of the algorithm).
</t>
</section>
        <section title="Example" anchor="example">
            <t>
            Example: Assume a user from the Technical University of Munich,
Germany, has a RADIUS User-Name of "foobar@tu-m[U+00FC]nchen.example". The name resolution library on the RADIUS client uses DNS for name resolution. If DNS
contains the following records:
            <list style="empty">
                    <t>xn--tu-mnchen-t9a.example. IN NAPTR 50 50 "s"
"aaa+auth:radius.tls" "" _radiustls._tcp.xn--tu-mnchen-t9a.example.</t>
                    <t>xn--tu-mnchen-t9a.example. IN NAPTR 50 50 "s"
"fooservice:bar.dccp" "" _abc._def.xn--tu-mnchen-t9a.example.</t>
                    <t>_radiustls._tcp.xn--tu-mnchen-t9a.example. IN SRV 0 10 2083
radsec.xn--tu-mnchen-t9a.example.</t>
                    <t>_radiustls._tcp.xn--tu-mnchen-t9a.example. IN SRV 0 20 2083
backup.xn--tu-mnchen-t9a.example.</t>
                    <t>radsec.xn--tu-mnchen-t9a.example. IN AAAA
2001:0DB8::202:44ff:fe0a:f704</t>
                    <t>radsec.xn--tu-mnchen-t9a.example. IN A    192.0.2.3</t>
                    <t>backup.xn--tu-mnchen-t9a.example. IN A    192.0.2.7</t>
            </list>
                    Then the algorithm executes as follows, with I =
"foobar@tu-m[U+00FC]nchen.example", and no consortium name mangling in use:
                    <list style="numbers">
                            <t>P = 7</t>
                            <t>R = "tu-m[U+00FC]nchen.example"</t>
                            <t>NOOP</t>
                            <t>[name resolution library converts R to xn--tu-mnchen-t9a.example] Query result: ( 50 50 "s" "aaa+auth:radius.tls" "" _radiustls._tcp.xn--tu-mnchen-t9a.example. ; 50 50 "s"
"fooservice:bar.dccp" "" _abc._def.xn--tu-mnchen-t9a.example. )</t>
                            <t>Result: 50 50 "s" "aaa+auth:radius.tls" "" _radiustls._tcp.xn--tu-mnchen-t9a.example.</t>
                            <t>NOOP</t>
                            <t>O =
{(radsec.xn--tu-mnchen-t9a.example.; 2083; 10; TTL A),(backup.xn--tu-mnchen-t9a.
example.;2083; 20; TTL B)}</t>
                            <t>Terminate.</t>
                            <t>(not executed)</t>
                            <t>(not executed)</t>
                            <t>(not executed)</t>
                            <t>(not executed)</t>
                            <t>(not executed)</t>
                            <t>(not executed)</t>
                    </list>

                    The implementation will then attempt to connect to two
servers, with preference to radsec.xn--tu-mnchen-t9a.example.:2083, using either
the AAAA or A addresses depending on the host configuration and its IP stack's
capabilities.</t>
</section>
    </section>
</section>
    <section title="Security Considerations" anchor="sec">
    <t>
	    When using DNS without DNSSEC security extensions, the replies to NAPTR, SRV and
A/AAAA requests as described in section <xref target="dns" /> can not be
trusted. RADIUS transports have an out-of-DNS-band means to verify that the
discovery attempt led to the intended target: certificate verification
or TLS-PSK keys.
    </t>
    </section>
    <section title="IANA Considerations" anchor="iana">
	    <t>
		    This document requests IANA registration of the following S-NAPTR parameter:
		    <list style="symbols">
		      <t>Application Service Tags
			<list style="symbols">
			   <t>aaa+auth</t>
			   <t>aaa+acct</t>
			   <t>aaa+dynauth</t>
			</list>
		      </t>
		      <t>Application Protocol Tags
			<list style="symbols">
			   <t>radius.tls</t>
			   <t>radius.dtls</t>
			</list>
		      </t>
		    </list>
	    </t>    
    </section>
</middle>
<back>
	<references title="Normative References">
		&rfc2119;
		&rfc3958;
<!--		&rfc4282; -->
		&rfc5580;
		&rfc5891; 
		&dtls;
		&rfc6614;
	</references>
<!--	<references title="Informative References">
	<reference anchor="radiator-manual"
target="http://www.open.com.au/radiator/ref.html">
		<front>
			<title>Radiator Radius Server - Installation and
Reference Manual</title>
			<author>
				<organization abbrev="OSC">Open System
Consultants</organization>
			</author>
			<date year="2006"/>
		</front>
		<format type="TXT"
target="http://www.open.com.au/radiator/ref.html"/>
	</reference>
</references> -->
</back>
</rfc>
