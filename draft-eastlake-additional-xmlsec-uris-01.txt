
INTERNET-DRAFT                                           Donald Eastlake
Obsoletes: 4051                                                   Huawei
Intended Status: Informational
Expires: March 8, 2012                                 September 9, 2011


      Additional XML Security Uniform Resource Identifiers (URIs)
             <draft-eastlake-additional-xmlsec-uris-01.txt>



Abstract

   This document expands and updates the list of URIs intended for use
   with XML Digital Signatures, Encryption, Canonnicalization, and Key
   Management specified in RFC 4051 and it obsoletes that RFC.  These
   URIs identify algorithms and types of information.


Status of This Memo

   This Internet-Draft is submitted to IETF in full conformance with the
   provisions of BCP 78 and BCP 79.

   Distribution of this document is unlimited. Comments should be sent
   to the author.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/1id-abstracts.html

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html













D. Eastlake 3rd                                                 [Page 1]

INTERNET-DRAFT                              Additional XML Security URIs


Acknowledgements

   The contributions of the following to this document, listed in
   alphabetic order, are gratefully acknowledged: Frederick Hirsch,
   Konrad Lanz, HwanJin Lee, Thomas Roessler, and Hanseong Ryu.

   The following contributors to [RFC4051], on which this document is
   based, are gratefully acknowledged: Glenn Adams, Merlin Hughs, Gregor
   Karlinger, Brian LaMachia, Shiho Moriai, Joseph Reagle, Russ Housley,
   and Joel Halpern.










































D. Eastlake 3rd                                                 [Page 2]

INTERNET-DRAFT                              Additional XML Security URIs


Table of Contents

      1. Introduction............................................4
      1.1 Terminology............................................4

      2. Algorithms..............................................5
      2.1 DigestMethod (Hash) Algorithms.........................5
      2.1.1 MD5..................................................5
      2.1.2 SHA-224..............................................6
      2.1.3 SHA-384..............................................6
      2.1.4  Whirlpool...........................................6
      2.2 SignatureMethod Message Authentication Code Algorithms.7
      2.2.1 HMAC-MD5.............................................7
      2.2.2 HMAC SHA Variations..................................8
      2.2.3 HMAC-RIPEMD160.......................................8
      2.3 SignatureMethod Public Key Signature Algorithms........8
      2.3.1 RSA-MD5..............................................8
      2.3.2 RSA-SHA256...........................................9
      2.3.3 RSA-SHA384...........................................9
      2.3.4 RSA-SHA512..........................................10
      2.3.5 RSA-RIPEMD160.......................................10
      2.3.6 ECDSA-SHA*, ECDSA-RIPEMD160, ECDSA-Whirlpool........10
      2.3.7 ESIGN-SHA1..........................................11
      2.3.8 RSA-Whirlpool.......................................11
      2.4 Minimal Canonicalization..............................12
      2.5 Transform Algorithms..................................12
      2.5.1 XPointer............................................12
      2.6 EncryptionMethod Algorithms...........................13
      2.6.1 ARCFOUR Encryption Algorithm........................13
      2.6.2 Camellia Block Encryption...........................13
      2.6.3 Camellia Key Wrap...................................14
      2.6.4 PSEC-KEM............................................14
      2.6.5 SEED Block Encryption...............................15
      2.6.6 SEED Key Wrap.......................................15

      3. KeyInfo................................................17
      3.1 PKCS #7 Bag of Certificates and CRLs..................17
      3.2 Additional RetrievalMethod Type Values................17

      4. URI Index..............................................18

      5. IANA Considerations....................................20
      6. Security Considerations................................20
      Appendix A: Changes from RFC 4051.........................21
      Appendix B: Additional information on SEED................21
      Normative References......................................22
      Informative References....................................24





D. Eastlake 3rd                                                 [Page 3]

INTERNET-DRAFT                              Additional XML Security URIs


1. Introduction

   XML Digital Signatures, Canonicalization, and Encryption have been
   standardized by the W3C and by the joint IETF/W3C XMLDSIG working
   group [W3C]. All of these are now W3C Recommendations and IETF
   Informational or Standards Track documents.  They are available as
   follows:

    IETF level           W3C REC      Topic
    -----------          -------      -----

   [RFC3275] Draft Std  [XMLDSIG]    XML Digital Signatures
   [RFC3076] Info       [CANON]      Canonical XML 1.0
    - - - - - -         [XMLENC]     XML Encryption
   [RFC3741] Info       [XCANON]     Exclusive XML Canonicalization 1.0

   All of these standards and recommendations use URIs [RFC3986] to
   identify algorithms and keying information types.  This document is a
   convenient reference list of URIs and descriptions for algorithms in
   which there is substantial interest but which can not or have not
   been included in the main documents for some reason.  Note in
   particular that raising XML digital signature to Draft Standard in
   the IETF required remove of any algorithms for which there was not
   demonstrated interoperability from the main standards document.  This
   required removal of the Minimal Canonicalization algorithm, in which
   there appears to be continued interest, to be dropped from the
   standards track specification. It was included in [RFC4051] and is
   included here.



1.1 Terminology

   Notwithstanding that this is an Informational document, standards
   track type terms [RFC2119] are used in specifying the use of some of
   the URIs as follows:

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in RFC
   2119.











D. Eastlake 3rd                                                 [Page 4]

INTERNET-DRAFT                              Additional XML Security URIs


2. Algorithms

   The URI [RFC3986] being dropped from the standard due to the
   transition from Proposed Standard to Draft Standard is included in
   section 2.4 below with its original

        http://www.w3.org/2000/09/xmldsig#

   prefix so as to avoid changing the XMLDSIG standard's namespace.

   Additional algorithms in [RFC4051] were given URIs that start with

        http://www.w3.org/2001/04/xmldsig-more#

   while further algorithms added in this document are given URIs that
   start with

        http://www.w3.org/2007/05/xmldsig-more#

   An "xmldsig-more" URI does not imply any official W3C status for
   these algorithms or identifiers nor does it imply that they are only
   useful in digital signatures.  Currently, dereferencing such URIs may
   or may not produce a temporary placeholder document. Permission to
   use these URI prefixes has been given by the W3C.



2.1 DigestMethod (Hash) Algorithms

   These algorithms are usable wherever a DigestMethod element occurs.



2.1.1 MD5

   Identifier:
        http://www.w3.org/2001/04/xmldsig-more#md5

   The MD5 algorithm [RFC1321] takes no explicit parameters. An example
   of an MD5 DigestAlgorithm element is:

   <DigestAlgorithm
      Algorithm="http://www.w3.org/2001/04/xmldsig-more#md5"/>

   An MD5 digest is a 128-bit string. The content of the DigestValue
   element shall be the base64 [RFC2045] encoding of this bit string
   viewed as a 16-octet octet stream.





D. Eastlake 3rd                                                 [Page 5]

INTERNET-DRAFT                              Additional XML Security URIs


2.1.2 SHA-224

   Identifier:
        http://www.w3.org/2001/04/xmldsig-more#sha224

   The SHA-224 algorithm [FIPS180-3] [RFC6234] takes no explicit
   parameters.  An example of a SHA-224 DigestAlgorithm element is:

   <DigestAlgorithm
      Algorithm="http://www.w3.org/2001/04/xmldsig-more#sha224" />

   A SHA-224 digest is a 224 bit string. The content of the DigestValue
   element shall be the base64 [RFC2045] encoding of this string viewed
   as a 28-octet stream. Because it takes roughly the same amount of
   effort to compute a SHA-224 message digest as a SHA-256 digest and
   terseness is usually not a criteria in XML application, consideration
   should be given to the use of SHA-256 as an alternative.



2.1.3 SHA-384

   Identifier:
        http://www.w3.org/2001/04/xmldsig-more#sha384

   The SHA-384 algorithm [FIPS180-3] takes no explicit parameters.  An
   example of a SHA-384 DigestAlgorithm element is:

   <DigestAlgorithm
      Algorithm="http://www.w3.org/2001/04/xmldsig-more#sha384" />

   A SHA-384 digest is a 384 bit string. The content of the DigestValue
   element shall be the base64 [RFC2045] encoding of this string viewed
   as a 48-octet stream. Because it takes roughly the same amount of
   effort to compute a SHA-384 message digest as a SHA-512 digest and
   terseness is usually not a criteria in XML application, consideration
   should be given to the use of SHA-512 as an alternative.



2.1.4  Whirlpool

   Identifier:
        http://www.w3.org/2007/05/xmldsig-more#whirlpool

   The Whirlpool algorithm [10118-3] takes no explicit parameters.  A
   Whirlpool digest is a 512 bit string.  The content of the DigestValue
   element shall be the base64 [RFC2045] encoding of this string viewed
   as a 64 octet stream.



D. Eastlake 3rd                                                 [Page 6]

INTERNET-DRAFT                              Additional XML Security URIs


2.2 SignatureMethod Message Authentication Code Algorithms

   Note: Some text in this section is duplicated from [RFC3275] for the
   convenience of the reader. RFC 3275 is normative in case of conflict.



2.2.1 HMAC-MD5

   Identifier:
        http://www.w3.org/2001/04/xmldsig-more#hmac-md5

   The HMAC algorithm [RFC2104] takes the truncation length in bits as a
   parameter; if the parameter is not specified then all the bits of the
   hash are output. An example of an HMAC-MD5 SignatureMethod element is
   as follows:

   <SignatureMethod
      Algorithm="http://www.w3.org/2001/04/xmldsig-more#hmac-md5">
      <HMACOutputLength>112</HMACOutputLength>
   </SignatureMethod>

   The output of the HMAC algorithm is ultimately the output (possibly
   truncated) of the chosen digest algorithm. This value shall be base64
   [RFC2045] encoded in the same straightforward fashion as the output
   of the digest algorithms. Example: the SignatureValue element for the
   HMAC-MD5 digest

        9294727A 3638BB1C 13F48EF8 158BFC9D

   from the test vectors in [RFC2104] would be

        kpRyejY4uxwT9I74FYv8nQ==

   Schema Definition:

        <simpleType name="HMACOutputLength">
           <restriction base="integer">
        </simpleType>

   DTD:

        <!ELEMENT HMACOutputLength (#PCDATA) >

   The Schema Definition and DTD immediately above are copied from
   [RFC3275].

   Although cryptographic suspicions have recently been cast on MD5 for
   use in signatures such as RSA-MD5 below, this does not effect use of
   MD5 in HMAC.


D. Eastlake 3rd                                                 [Page 7]

INTERNET-DRAFT                              Additional XML Security URIs


2.2.2 HMAC SHA Variations

   Identifiers:
        http://www.w3.org/2001/04/xmldsig-more#hmac-sha224
        http://www.w3.org/2001/04/xmldsig-more#hmac-sha256
        http://www.w3.org/2001/04/xmldsig-more#hmac-sha384
        http://www.w3.org/2001/04/xmldsig-more#hmac-sha512

   SHA-224, SHA-256, SHA-384, and SHA-512 [FIPS180-3] [RFC6234] can also
   be used in HMAC as described in section 2.2.1 above for HMAC-MD5.



2.2.3 HMAC-RIPEMD160

   Identifier:
        http://www.w3.org/2001/04/xmldsig-more#hmac-ripemd160

   RIPEMD-160 [RIPEMD-160] can also be used in HMAC as described in
   section 2.2.1 above for HMAC-MD5.



2.3 SignatureMethod Public Key Signature Algorithms

   These algorithms are distinguished from those in section 2.2 above in
   that they use public key methods. That is to say, the verification
   key is different from and not feasibly derivable from the signing
   key.



2.3.1 RSA-MD5

   Identifier:
        http://www.w3.org/2001/04/xmldsig-more#rsa-md5

   This implies the PKCS#1 v1.5 padding algorithm described in
   [RFC3447]. An example of use is

   <SignatureMethod
      Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-md5" />

   The SignatureValue content for an RSA-MD5 signature is the base64
   [RFC2045] encoding of the octet string computed as per [RFC3447]
   section 8.1.1?, signature generation for the RSASSA-PKCS1-v1_5
   signature scheme. As specified in the EMSA-PKCS1-V1_5-ENCODE function
   in [RFC3447] section 9.2.1?, the value input to the signature
   function MUST contain a pre-pended algorithm object identifier for
   the hash function, but the availability of an ASN.1 parser and


D. Eastlake 3rd                                                 [Page 8]

INTERNET-DRAFT                              Additional XML Security URIs


   recognition of OIDs is not required of a signature verifier. The
   PKCS#1 v1.5 representation appears as:

        CRYPT (PAD (ASN.1 (OID, DIGEST (data))))

   Note that the padded ASN.1 will be of the following form:

        01 | FF* | 00 | prefix | hash

   Vertical bar ("|") represents concatenation. "01", "FF", and "00" are
   fixed octets of the corresponding hexadecimal value and the asterisk
   ("*") after "FF" indicates repetition. "hash" is the MD5 digest of
   the data. "prefix" is the ASN.1 BER MD5 algorithm designator prefix
   required in PKCS #1 [RFC3447], that is,

        hex 30 20 30 0c 06 08 2a 86 48 86 f7 0d 02 05 05 00 04 10

   This prefix is included to make it easier to use standard
   cryptographic libraries. The FF octet MUST be repeated enough times
   that the value of the quantity being CRYPTed is exactly one octet
   shorter than the RSA modulus.

   Due to increases in computer processor power and advances in
   cryptography, use of RSA-MD5 is NOT RECOMMENDED.



2.3.2 RSA-SHA256

   Identifier:
        http://www.w3.org/2001/04/xmldsig-more#rsa-sha256

   This implies the PKCS#1 v1.5 padding algorithm [RFC3447] as described
   in section 2.3.1 but with the ASN.1 BER SHA-256 algorithm designator
   prefix.  An example of use is

   <SignatureMethod
      Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" />



2.3.3 RSA-SHA384

   Identifier:
        http://www.w3.org/2001/04/xmldsig-more#rsa-sha384

   This implies the PKCS#1 v1.5 padding algorithm [RFC3447] as described
   in section 2.3.1 but with the ASN.1 BER SHA-384 algorithm designator
   prefix.  An example of use is



D. Eastlake 3rd                                                 [Page 9]

INTERNET-DRAFT                              Additional XML Security URIs


   <SignatureMethod
      Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha384" />

   Because it takes about the same effort to calculate a SHA-384 message
   digest as it does a SHA-512 message digest, it is suggested that RSA-
   SHA512 be used in preference to RSA-SHA384 where possible.



2.3.4 RSA-SHA512

   Identifier:
        http://www.w3.org/2001/04/xmldsig-more#rsa-sha512

   This implies the PKCS#1 v1.5 padding algorithm [RFC3447] as described
   in section 2.3.1 but with the ASN.1 BER SHA-512 algorithm designator
   prefix.  An example of use is

   <SignatureMethod
      Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha512" />



2.3.5 RSA-RIPEMD160

   Identifier:
        http://www.w3.org/2001/04/xmldsig-more#rsa-ripemd160

   This implies the PKCS#1 v1.5 padding algorithm [RFC3447] as described
   in section 2.3.1 but with the ASN.1 BER RIPEMD160 algorithm
   designator prefix.  An example of use is

   <SignatureMethod
      Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-ripemd160"
   />



2.3.6 ECDSA-SHA*, ECDSA-RIPEMD160, ECDSA-Whirlpool

   Identifiers
        http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1
        http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha224
        http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256
        http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384
        http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512
        http://www.w3.org/2007/05/xmldsig-more#ecdsa-ripemd160
        http://www.w3.org/2007/05/xmldsig-more#ecdsa-whirlpool

   The Elliptic Curve Digital Signature Algorithm (ECDSA) [FIPS180-3] is


D. Eastlake 3rd                                                [Page 10]

INTERNET-DRAFT                              Additional XML Security URIs


   the elliptic curve analogue of the DSA (DSS) signature method. IT
   tkaes no explicity parameters. For a detailed specifications of how
   to use it with SHA hash functions and XML Digital Signature, please
   see [X9.62] and [RFC4050].  The #ecdsa-ripemd160 and #ecdsa-whirlpool
   fragments in the new namespace identifies a signature method
   processed in the same way as specified by the #ecdsa-sha1 fragment of
   this namespace with the exception that RIPEMD160 or Whirlpool is used
   instead of SHA-1.

   The output of the ECDSA algorithm consists of a pair of integers
   usually referred by the pair (r, s).  The signature value consists of
   the base64 encoding of the concatenation of two octet-streams that
   respectively result from the octet-encoding of the values r and s in
   that order.  Integer to octet-stream conversion must be done
   according to the I2OSP operation defined in the PKCS 2.1 [PKCS2.1]
   specification with the l parameter equal to the size of the output of
   the digest function in bytes (e.g. 32 for SHA-256).



2.3.7 ESIGN-SHA1

   Identifiers:
        http://www.w3.org/2001/04/xmldsig-more#esign-sha1
        http://www.w3.org/2001/04/xmldsig-more#esign-sha224
        http://www.w3.org/2001/04/xmldsig-more#esign-sha256
        http://www.w3.org/2001/04/xmldsig-more#esign-sha384
        http://www.w3.org/2001/04/xmldsig-more#esign-sha512

   The ESIGN algorithm specified in [IEEE P1363a] is a signature scheme
   based on the integer factorization problem. It is much faster than
   previous digital signature schemes so ESIGN can be implemented on
   smart cards without special co-processors.

   An example of use is

   <SignatureMethod
      Algorithm="http://www.w3.org/2001/04/xmldsig-more#esign-sha1"
   />



2.3.8 RSA-Whirlpool

   Identifier:
        http://www.w3.org/2007/05/xmldsig-more#rsa-whirlpool

   As in the definition of the RSA-SHA1 algorithm in [XMLDSIG], the
   designator "RSA" means the RSASSA-PKCS1-v1_5 algorithm as defined in
   PKCS2.1 [PKCS2.1].  When identified through the #rsa-whirlpool


D. Eastlake 3rd                                                [Page 11]

INTERNET-DRAFT                              Additional XML Security URIs


   fragment identifier, Whirlpool is used as the hash algorithm instead.
   Use of the ASN.1 BER Whirlpool algorithm designator is implied.

   xxxx give that designator as an explicit octet sequence?



2.4 Minimal Canonicalization

   Thus far two independent interoperable implementations of Minimal
   Canonicalization have not been announced.  Therefore, when XML
   Digital Signature was advanced from Proposed Standard [RFC3075] to
   Draft Standard [RFC3275], Minimal Canonicalization was dropped from
   the standard track documents.  However, there is still interest.  For
   its definition, see [RFC3075] Section 6.5.1.

   For reference, it's identifier remains:
        http://www.w3.org/2000/09/xmldsig#minimal



2.5 Transform Algorithms

   Note that all CanonicalizationMethod algorithms can also be used as
   Transform algorithms.



2.5.1 XPointer

   Identifier:
        http://www.w3.org/2001/04/xmldsig-more#xptr

   This transform algorithm takes an [XPointer] as an explicit
   parameter.  An example of use is:

   <Transform
      Algorithm="http://www.w3.org/2001/04/xmldsig-more/xptr">
      <XPointer
         xmlns="http://www.w3.org/2001/04/xmldsig-more/xptr">
            xpointer(id("foo")) xmlns(bar=http://foobar.example)
            xpointer(//bar:Zab[@Id="foo"])
      </XPointer>
   </Transform>

   Schema Definition:

        <element name="XPointer" type="string">




D. Eastlake 3rd                                                [Page 12]

INTERNET-DRAFT                              Additional XML Security URIs


   DTD:

        <!ELEMENT XPointer (#PCDATA) >

   Input to this transform is an octet stream (which is then parsed into
   XML).

   Output from this transform is a node set; the results of the XPointer
   are processed as defined in the XMLDSIG specification [RFC3275] for a
   same-document XPointer.



2.6 EncryptionMethod Algorithms

   This subsection gives identifiers and information for several
   EncryptionMethod Algorithms.



2.6.1 ARCFOUR Encryption Algorithm

   Identifier:
        http://www.w3.org/2001/04/xmldsig-more#arcfour

   ARCFOUR is a fast, simple stream encryption algorithm that is
   compatible with RSA Security's RC4 algorithm. An example
   EncryptionMethod element using ARCFOUR is

   <EncryptionMethod
      Algorithm="http://www.w3.org/2001/04/xmldsig-more#arcfour">
      <KeySize>40<KeySize>
   </EncryptionMethod>

   Note that Arcfour makes use of the generic KeySize parameter
   specified and defined in [XMLENC].



2.6.2 Camellia Block Encryption

   Identifiers:
        http://www.w3.org/2001/04/xmldsig-more#camellia128-cbc
        http://www.w3.org/2001/04/xmldsig-more#camellia192-cbc
        http://www.w3.org/2001/04/xmldsig-more#camellia256-cbc

   Camellia is an efficient and secure block cipher with the same
   interface as the AES [Camellia] [RFC3713], that is 128-bit block size
   and 128, 192, and 256 bit key sizes. In XML Encryption Camellia is
   used in the same way as the AES: It is used in the Cipher Block


D. Eastlake 3rd                                                [Page 13]

INTERNET-DRAFT                              Additional XML Security URIs


   Chaining (CBC) mode with a 128-bit initialization vector (IV). The
   resulting cipher text is prefixed by the IV. If included in XML
   output, it is then base64 encoded. An example Camellia
   EncryptionMethod is as follows:

   <EncryptionMethod
      Algorithm=
      "http://www.w3.org/2001/04/xmldsig-more#camellia128-cbc"
   />



2.6.3 Camellia Key Wrap

   Identifiers:
        http://www.w3.org/2001/04/xmldsig-more#kw-camellia128
        http://www.w3.org/2001/04/xmldsig-more#kw-camellia192
        http://www.w3.org/2001/04/xmldsig-more#kw-camellia256

   Camellia [Camellia] [RFC3713] key wrap is identical to the AES key
   wrap algorithm [RFC3394] specified in the XML Encryption standard
   with "AES" replaced by "Camellia". As with AES key wrap, the check
   value is 0xA6A6A6A6A6A6A6A6.

   The algorithm is the same whatever the size of the Camellia key used
   in wrapping, called the key encrypting key or KEK. The implementation
   of Camellia is OPTIONAL. However, if it is supported, the same
   implementation guidelines as to which combinations of KEK size and
   wrapped key size should be required to be supported and which are
   optional to be supported should be followed. That is to say, if
   Camellia key wrap is supported, they wrapping 128-bit keys with a
   128-bit KEK and wrapping 256-bit keys with a 256-bit KEK are REQUIRED
   and all other combinations are OPTIONAL.

   An example of use is:

   <EncryptionMethod
      Algorithm=
      "http://www.w3.org/2001/04/xmldsig-more#kw-camellia128"
   />



2.6.4 PSEC-KEM

   Identifier:
        http://www.w3.org/2001/04/xmldsig-more#psec-kem

   The PSEC-KEM algorithm, specified in [18033-3], is a key
   encapsulation mechanism using elliptic curve encryption.


D. Eastlake 3rd                                                [Page 14]

INTERNET-DRAFT                              Additional XML Security URIs


   An example of use is:

   <EncryptionMethod
      Algorithm="http://www.w3.org/2001/04/xmlenc#psec-kem">
      <ECParameters>
         <Version>version</Version>
         <FieldID>id</FieldID>
         <Curve>curve</Curve>
         <Base>base</Base>
         <Order>order</Order>
         <Cofactor>cofactor</Cofactor>
      </ECParameters>
   </EncryptionMethod>

   See [18033-3] for information on the parameters above.



2.6.5 SEED Block Encryption

   Identifiers:
        http://www.w3.org/2007/05/xmldsig-more#seed128-cbc

   SEED [RFC4269] is an efficient and secure block cipher that is
   128-bit block size and 128-bit key sizes. In XML Encryption, SEED can
   be used in the Cipher Block Chaining (CBC) mode with a 128-bit
   initialization vector (IV). The resulting cipher text is prefixed by
   the IV. If included in XML output, it is then base64 encoded. See
   Appendix B.

   An example SEED EncryptionMethod is as follows:

   <EncryptionMethod
      Algorithm="http://www.w3.org/2007/05/xmldsig-more#seed128-cbc" />



2.6.6 SEED Key Wrap

   Identifiers:
        http://www.w3.org/2007/05/xmldsig-more#kw-seed128

   Key wrapping with SEED is identical to Section 2.2.1 of [RFC3394]
   with "AES" replaced by "SEED". The algorithm is specified in
   [RFC4010].  The implementation of SEED is optional. The defalult
   initial value is 0xA6A6A6A6A6A6A6A6.

   An example of use is:




D. Eastlake 3rd                                                [Page 15]

INTERNET-DRAFT                              Additional XML Security URIs


   <EncryptionMethod
      Algorithm=
      "http://www.w3.org/2007/05/xmldsig-more#kw-seed128"
   />
















































D. Eastlake 3rd                                                [Page 16]

INTERNET-DRAFT                              Additional XML Security URIs


3. KeyInfo

   In section 3.1 below a new KeyInfo element child is specified while
   in section 3.2 additional KeyInfo Type values for use in
   RetrievalMethod are specified.



3.1 PKCS #7 Bag of Certificates and CRLs

   A PKCS #7 [RFC2315] "signedData" can also be used as a bag of
   certificates and/or certificate revocation lists (CRLs).  The
   PKCS7signedData element is defined to accommodate such structures
   within KeyInfo.  The binary PKCS #7 structure is base64 [RFC2045]
   encoded.  Any signer information present is ignored.  The following
   is a example [RFC3092], eliding the base64 data:

   <foo:PKCS7signedData
      xmlns:foo="http://www.w3.org/2001/04/xmldsig-more">
      ...
   </foo:PKCS7signedData>



3.2 Additional RetrievalMethod Type Values

   The Type attribute of RetrievalMethod is an optional identifier for
   the type of data to be retrieved. The result of de-referencing a
   RetrievalMethod reference for all KeyInfo types with an XML structure
   is an XML element or document with that element as the root. The
   various "raw" key information types return a binary value. Thus they
   require a Type attribute because they are not unambiguously
   parseable.

   Identifiers:
        http://www.w3.org/2001/04/xmldsig-more#KeyName
        http://www.w3.org/2001/04/xmldsig-more#KeyValue
        http://www.w3.org/2001/04/xmldsig-more#PKCS7signedData
        http://www.w3.org/2001/04/xmldsig-more#rawPGPKeyPacket
        http://www.w3.org/2001/04/xmldsig-more#rawPKCS7signedData
        http://www.w3.org/2001/04/xmldsig-more#rawSPKISexp
        http://www.w3.org/2001/04/xmldsig-more#rawX509CRL
        http://www.w3.org/2001/04/xmldsig-more#RetrievalMethod









D. Eastlake 3rd                                                [Page 17]

INTERNET-DRAFT                              Additional XML Security URIs


4. URI Index

   The following is an index by URI of the algorithm and KeyInfo URIs
   defined in this document and in the standards (plus the one KeyInfo
   child element name defined in this document). The "Sec/Doc" column
   has the section of this document or, if not specified in this
   document, the standards document where the item is specified.

   The initial "http://www.w3.org/" part of the URI is not included
   below.

      URI                                Sec/Doc  Type
      ---                                -------  ----

     2000/09/xmldsig#base64            [RFC3275]  Transform
     2000/09/xmldsig#dsa-sha1          [RFC3275]  SignatureMethod
     2000/09/xmldsig#enveloped-signature
                                       [RFC3275]  Transform
     2000/09/xmldsig@hmac-sha1         [RFC3275]  SignatureMethod
     2000/09/xmldsig#minimal               2.4    Canonicalization
     2000/09/xmldsig@rsa-sha1          [RFC3275]  SignatureMethod
     2000/09/xmldsig#sha1              [RFC3275]  DigestAlgorithm

     2001/04/xmldsig-more#arcfour          2.6.1  EncryptionMethod
     2001/04/xmldsig-more#camellia128-cbc  2.6.2  EncryptionMethod
     2001/04/xmldsig-more#camellia192-cbc  2.6.2  EncryptionMethod
     2001/04/xmldsig-more#camellia256-cbc  2.6.2  EncryptionMethod
     2001/04/xmldsig-more#ecdsa-sha1       2.3.6  SignatureMethod
     2001/04/xmldsig-more#ecdsa-sha224     2.3.6  SignatureMethod
     2001/04/xmldsig-more#ecdsa-sha256     2.3.6  SignatureMethod
     2001/04/xmldsig-more#ecdsa-sha384     2.3.6  SignatureMethod
     2001/04/xmldsig-more#ecdsa-sha512     2.3.6  SignatureMethod
     2001/04/xmldsig-more#esign-sha1       2.3.7  SignatureMethod
     2001/04/xmldsig-more#esign-sha224     2.3.7  SignatureMethod
     2001/04/xmldsig-more#esign-sha256     2.3.7  SignatureMethod
     2001/04/xmldsig-more#esign-sha384     2.3.7  SignatureMethod
     2001/04/xmldsig-more#esign-sha512     2.3.7  SignatureMethod
     2001/04/xmldsig-more#hmac-md5         2.2.1  SignatureMethod
     2001/04/xmldsig-more#hmac-ripemd160   2.2.3  SignatureMethod
     2001/04/xmldsig-more#hmac-sha224      2.2.2  SignatureMethod
     2001/04/xmldsig-more#hmac-sha256      2.2.2  SignatureMethod
     2001/04/xmldsig-more#hmac-sha384      2.2.2  SignatureMethod
     2001/04/xmldsig-more#hmac-sha512      2.2.2  SignatureMethod
     2001/04/xmldsig-more#KeyName          3.2    Retrieval type
     2001/04/xmldsig-more#KeyValue         3.2    Retrieval type
     2001/04/xmldsig-more#kw-camellia128   2.6.3  EncryptionMethod
     2001/04/xmldsig-more#kw-camellia192   2.6.3  EncryptionMethod
     2001/04/xmldsig-more#kw-camellia256   2.6.3  EncryptionMethod
     2001/04/xmldsig-more#md5              2.1.1  DigestAlgorithm
     2001/04/xmldsig-more#PKCS7signedData  3.2    Retrieval type


D. Eastlake 3rd                                                [Page 18]

INTERNET-DRAFT                              Additional XML Security URIs


     2001/04/xmldsig-more#psec-kem         2.6.4  EncryptionMethod
     2001/04/xmldsig-more#rawPGPKeyPacket  3.2    Retrieval type
     2001/04/xmldsig-more#rawPKCS7signedData 3.2  Retrieval type
     2001/04/xmldsig-more#rawSPKISexp      3.2    Retrieval type
     2001/04/xmldsig-more#rawX509CRL       3.2    Retrieval type
     2001/04/xmldsig-more#RetrievalMethod  3.2    Retrieval type
     2001/04/xmldsig-more#rsa-md5          2.3.1  SignatureMethod
     2001/04/xmldsig-more#rsa-sha256       2.3.2  SignatureMethod
     2001/04/xmldsig-more#rsa-sha384       2.3.3  SignatureMethod
     2001/04/xmldsig-more#rsa-sha512       2.3.4  SignatureMethod
     2001/04/xmldsig-more#rsa-ripemd160    2.3.5  SignatureMethod
     2001/04/xmldsig-more#sha224           2.1.2  DigestAlgorithm
     2001/04/xmldsig-more#sha384           2.1.3  DigestAlgorithm
     2001/04/xmldsig-more#xptr             2.5.1  Transform
     2001/04/xmldsig-more:PKCS7signedData  3.1    KeyInfo child

     2001/04/xmlenc#aes128-cbc          [XMLENC]  EncryptionMethod
     2001/04/xmlenc#aes192-cbc          [XMLENC]  EncryptionMethod
     2001/04/xmlenc#aes256-cbc          [XMLENC]  EncryptionMethod
     2001/04/xmlenc#dh                  [XMLENC]  AgreementMethod
     2001/04/xmlenc#kw-aes128           [XMLENC]  EncryptionMethod
     2001/04/xmlenc#kw-aes192           [XMLENC]  EncryptionMethod
     2001/04/xmlenc#kw-aes256           [XMLENC]  EncryptionMethod
     2001/04/xmlenc#ripemd160           [XMLENC]  DigestAlgorithm
     2001/04/xmlenc#rsa-1_5             [XMLENC]  EncryptionMethod
     2001/04/xmlenc#rsa-oaep-mbg1p      [XMLENC]  EncryptionMethod
     2001/04/xmlenc#sha256              [XMLENC]  DigestAlgorithm
     2001/04/xmlend#sha512              [XMLENC]  DigestAlgorithm
     2001/04/xmlenc#tripledes-cbc       [XMLENC]  EncryptionMethod

     2007/05/xmldsig-more#ecdsa-ripemd160  2.3.6  SignatureMethod
     2007/05/xmldsig-more#ecdsa-whirlpool  2.3.5  SignatureMethod
     2007/05/xmldsig-more#kw-seed128       2.6.6  EncryptionMethod
     2007/05/xmldsig-more#rsa-whirlpool    2.3.5  SignatureMethod
     2007/05/xmldsig-more#seed128-cbc      2.6.5  EncryptionMethod
     2007/05/xmldsig-more#whirlpool        2.1.4  DigestAlgorithm

     TR/1999/REC-xpath-19991116          [XPATH]  Transform
     TR/1999/REC-xslt-19991116            [XSLT]  Transform
     TR/2001/06/xml-excl-c14n#          [XCANON]  Canonicalization
     TR/2001/06/xml-excl-c14n#WithComments
                                        [XCANON]  Canonicalization
     TR/2001/REC-xml-c14n-20010315       [CANON]  Canonicalization
     TR/2001/REC-xml-c14n-20010315#WithComments
                                         [CANON]  Canonicalization
     TR/2001/REC-xmlschema-1-20010502   [Schema]  Transform

   The initial "http://www.w3.org/" part of the URI is not included
   above.



D. Eastlake 3rd                                                [Page 19]

INTERNET-DRAFT                              Additional XML Security URIs


5. IANA Considerations

   None.

   As it is easy for people to construct their own unique URIs [RFC3986]
   and, if appropriate, to obtain a URI from the W3C, it is not intended
   that any additional "http://www.w3.org/2007/05/xmldsig-more#" URIs be
   created beyond those enumerated in this RFC. (W3C Namespace stability
   rules prohibit the creation of new URIs under
   "http://www.w3.org/2000/09/xmldsig#" and URIs under
   "http://www.w3.org/2001/04/xmldsig-more#" were frozen with the
   publication of [RFC4051].)



6. Security Considerations

   Due to computer speed and cryptographic advances, the use of MD5 as a
   DigestMethod or in the RSA-MD5 SignatureMethod is NOT RECOMMENDED.
   The cryptographic advances concerned do not effect the security of
   HMAC-MD5; however, there is little reason not to go for one of the
   SHA series of algorithms.

   See [RFC6194] for SHA-1 Security Considerations.

   Additional security considerations are given in connection with the
   description of some algorithms in the body of this document.

























D. Eastlake 3rd                                                [Page 20]

INTERNET-DRAFT                              Additional XML Security URIs


Appendix A: Changes from RFC 4051

   1. Update and add numerous RFC, W3C, and Internet-Draft references.

   2. Add #ecdsa-ripemd160, #whirlpool, #ecdsa-whirlpool, #rsa-
      whirlpool, #seed128-cbc, and #kw-seed128.

   3. Incorporate RFC 4051 errata.

   4. Add URI index section.



Appendix B: Additional information on SEED

   SEED is a national standard encryption algorithm in the Republic of
   Korea and is designed to use the S-boxes and permutations that
   balance with the current computing technology. It has the Feistel
   structure with 16-round and is strong against DC (Differential
   Cryptanalysis), LC (Linear Cryptanalysis), and related key attacks,
   balanced with security/efficiency trade-off. SEED has been widely
   used in the Republic of Korea for confidential services such as
   electronic commerce.(e.g., financial services provided in wired and
   wireless communication.)


   The use of SEED [RFC4269] is specified for SSL/TLS, IPsec and
   S/MIME(RFC 4010, 4162, and 4196 respectively) and in ISO/IEC
   [18033-3].

   Korean Standard

   o  TTAS.KO-12.0004 : 128-bit Symmetric Block Cipher(SEED)

   International Standard and IETF Documents

   o  ISO/IEC [18033-3]: Information technology - Security techniques -
      Encryption algorithms - Part 3 : Block ciphers

   o  IETF [RFC4269]: The SEED Encryption Algorithm

   o  IETF [RFC4010]: Use of the SEED Encryption Algorithm in
      Cryptographic Message Syntax (CMS)

   o  IETF RFC 4162: Addition of SEED Cipher Suites to Transport Layer
      Security (TLS)

   o  IETF RFC 4196: The SEED Cipher Algorithm and Its Use with IPsec




D. Eastlake 3rd                                                [Page 21]

INTERNET-DRAFT                              Additional XML Security URIs


Normative References

   [10118-3] - "Information technology -- Security techniques -- Hash-
         functions -- Part 3: Dedicated hash-functions", ISO/IEC
         10118-3, 2004.

   [18033-3] - "Information technology -- Security techniques --
         Encryption algorithms -- Part 3: Asymmetric ciphers", ISO/IEC
         18033-3, 2010.

   [Camellia] - "Camellia: A 128-bit Block Cipher Suitable for Multiple
         Platforms - Design and Analysis -", K. Aoki, T. Ichikawa, M.
         Matsui, S. Moriai, J. Nakajima, T. Tokita, In Selected Areas in
         Cryptography, 7th Annual International Workshop, SAC 2000,
         August 2000, Proceedings, Lecture Notes in Computer Science
         2012, pp. 39-56, Springer-Verlag, 2001.

   [FIPS180-3] - "Secure Hash Standard", United States of American,
         National Institute of Science and Technology, Federal
         Information Processing Standard (FIPS) 180-3,
         http://csrc.nist.gov/publications/fips/fips180-3/
         fips180-3_final.pdf.

   [FIPS186-2] - "Digital Signature Standard", National Institute of
         Standards and Technology, 2000.

   [IEEE P1363a] - "Standard Specifications for Public Key Cryptography:
         Additional Techniques", October 2002.

   [RFC1321] - Rivest, R., "The MD5 Message-Digest Algorithm", RFC 1321,
         April 1992.

   [RFC2045] - Freed, N. and N. Borenstein, "Multipurpose Internet Mail
         Extensions (MIME) Part One: Format of Internet Message Bodies",
         RFC 2045, November 1996.

   [RFC2104] - Krawczyk, H., Bellare, M., and R. Canetti, "HMAC: Keyed-
         Hashing for Message Authentication", RFC 2104, February 1997.

   [RFC2119] - Bradner, S., "Key words for use in RFCs to Indicate
         Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2315] - Kaliski, B., "PKCS #7: Cryptographic Message Syntax
         Version 1.5", RFC 2315, March 1998.

   [RFC3275] - Eastlake 3rd, D., Reagle, J., and D. Solo, "(Extensible
         Markup Language) XML-Signature Syntax and Processing", RFC
         3275, March 2002.

   [RFC3394] - Schaad, J. and R. Housley, "Advanced Encryption Standard


D. Eastlake 3rd                                                [Page 22]

INTERNET-DRAFT                              Additional XML Security URIs


         (AES) Key Wrap Algorithm", RFC 3394, September 2002.

   [RFC3447] - Jonsson, J. and B. Kaliski, "Public-Key Cryptography
         Standards (PKCS) #1: RSA Cryptography Specifications Version
         2.1", RFC 3447, February 2003.

   [RFC3713] - Matsui, M., Nakajima, J., and S. Moriai, "A Description
         of the Camellia Encryption Algorithm", RFC 3713, April 2004.

   [RFC3986] - Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
         Resource Identifier (URI): Generic Syntax", STD 66, RFC 3986,
         January 2005.

   [RFC4050] - Blake-Wilson, S., Karlinger, G., Kobayashi, T., and Y.
         Wang, "Using the Elliptic Curve Signature Algorithm (ECDSA) for
         XML Digital Signatures", RFC 4050, April 2005.

   [RFC4010] - Park, J., Lee, S., Kim, J., and J. Lee, "Use of the SEED
         Encryption Algorithm in Cryptographic Message Syntax (CMS)",
         RFC 4010, February 2005.

   [RFC4269] - Lee, H., Lee, S., Yoon, J., Cheon, D., and J. Lee, "The
         SEED Encryption Algorithm", RFC 4269, December 2005.

   [RFC6234] - Eastlake 3rd, D. and T. Hansen, "US Secure Hash
         Algorithms (SHA and SHA-based HMAC and HKDF)", RFC 6234, May
         2011.

   [RIPEMD-160] - ISO/IEC 10118-3:1998, "Information Technology -
         Security techniques - Hash-functions - Part3: Dedicated hash-
         functions", ISO, 1998.

   [X9.62] - X9.62-200X, "Public Key Cryptography for the Financial
         Services Industry: The Elliptic Curve Digital Signature
         Algorithm (ECDSA)", Accredited Standards Committee X9, American
         National Standards Institute.

   [XMLENC] - "XML Encryption Syntax and Processing", J. Reagle, D.
         Eastlake, W3C Recommendation 10 December 2002,
         http://www.w3.org/TR/2001/RED-xmlenc-core-20021210/
         - "XML Encryption Syntax and Processing Version 1.1", D.
         Eastlake, J. Reagle, F. Hirsch, T. Roessler, W3C Candidate
         Recommendation 3 March 2011, http://www.w3.org/TR/2011/CR-
         xmlenc-core1-20110303/

   [XPointer] - "XML Pointer Language (XPointer) Version 1.0", W3C
         working draft, Steve DeRose, Eve Maler, Ron Daniel Jr., January
         2001. <http://www.w3.org/TR/2001/WD-xptr-20010108>




D. Eastlake 3rd                                                [Page 23]

INTERNET-DRAFT                              Additional XML Security URIs


Informative References

   [CANON] - John Boyer.  "Canonical XML Version 1.0",
         http://www.w3.org/TR/2001/REC-xml-c14n-20010315

   [RFC3075] - Eastlake 3rd, D., Reagle, J., and D. Solo, "XML-Signature
         Syntax and Processing", RFC 3075, March 2001.

   [RFC3076] - Boyer, J., "Canonical XML Version 1.0", RFC 3076, March
         2001.

   [RFC3092] - Eastlake 3rd, D., Manros, C., and E. Raymond, "Etymology
         of "Foo"", RFC 3092, April 1 2001.

   [RFC3741] - Boyer, J., Eastlake 3rd, D., and J. Reagle, "Exclusive
         XML Canonicalization, Version 1.0", RFC 3741, March 2004.

   [RFC4051] - Eastlake 3rd, D., "Additional XML Security Uniform
         Resource Identifiers (URIs)", RFC 4051, April 2005.

   [RFC5669] - Yoon, S., Kim, J., Park, H., Jeong, H., and Y. Won, "The
         SEED Cipher Algorithm and Its Use with the Secure Real-Time
         Transport Protocol (SRTP)", RFC 5669, August 2010.

   [RFC5748] - Yoon, S., Jeong, J., Kim, H., Jeong, H., and Y. Won,
         "IANA Registry Update for Support of the SEED Cipher Algorithm
         in Multimedia Internet KEYing (MIKEY)", RFC 5748, August 2010.

   [RFC6090] - D. McGrew, K. Igoe, M. Salter, "Fundamental Elliptic
         Curve Cryptography Algorithms", RFC 6090, February 2011.

   [RFC6194] - Polk, T., Chen, L., Turner, S., and P. Hoffman, "Security
         Considerations for the SHA-0 and SHA-1 Message-Digest
         Algorithms", RFC 6194, March 2011.

   [Schema] - "XML Schema Part 1: Structures Second Edition", H.
         Thompson, D. Beech, M. Maloney, N. Mendelsohn, W3C
         Recommendation 28 October 2004, http://www.w3.org/TR/2004/REC-
         xmlschema-1-20041028/
         - "XML Schema Part 2: Datatypes Second Edition", P. Biron, A.
         Malhotra, W3C Recommendation 28 October 2004,
         http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/

   [W3C] - World Wide Web Consortium, <http://www.w3.org>.

   [XMLALGXREF] - "XML Security Algorithm Cross-Reference", F. Hirsch,
         T. Roessler, K. Yiu, W3C Working Draft 21 April 2011,
         http://www.w3.org/TR/2011/WD-xmlsec-algorithms-20110421/

   [XCANON] - "Exclusive XML Canonicalization Version 1.0", D.


D. Eastlake 3rd                                                [Page 24]

INTERNET-DRAFT                              Additional XML Security URIs


         Eastlake, J. Reagle, 18 July 2002.  http://www.w3.org/TR/REC-
         xml-enc-c14n-20020718/

   [XMLDSIG] - "XML Signature Syntax and Processing (Second Edition)",
         D. Eastlake, J. Reagle, D. Solo, F. Hirsch, T. Roessler, W3C
         Recommdnatiaon 10 June 2008, http://www.w3.org/TR/2008/REC-
         xmldsig-core-20080610/
         - "XML Signature Syntax and Processing Version 1.1", D.
         Eastlake, J. Reagle, D. Solo, F. Hirsch, M. Nystrom, T.
         Roessler, K. Yiu, Candidate Recommendations 3 March 2011,
         http://www.w3.org/TR/xmldsig-core1/

   [XPATH] - "XML Path Language (XPath) 2.0 (Second Edition)", A.
         Berglund, S. Boag, D. Chamberlin, M. Fernandez, M. Kay, J.
         Robie, J. Simeon, W3C Recommendation 14 December 2010,
         http://www.w3.org/TR/2010/REC-xpath20-20101214/

   [XSLT] - "XSL Transformations (XSLT) Version 2.0", M. Saxonica, W3C
         Recommendation 23 January 2007, http://www.w3.org/TR/2007/REC-
         xslt20-20070123/
































D. Eastlake 3rd                                                [Page 25]

INTERNET-DRAFT                              Additional XML Security URIs


Author's Address

   Donald E. Eastlake 3rd
   Huawei Technologies
   155 Beaver Street
   Milford, MA 01757 USA

   Telephone:   +1-508-333-2270
   EMail:       d3e3e3@gmail.com











































D. Eastlake 3rd                                                [Page 26]

INTERNET-DRAFT                              Additional XML Security URIs


Copyright, Disclaimer, and Additional IPR Provisions

   Copyright (c) 2011 IETF Trust and the persons identified as the
   document authors. All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document. Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document. Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

   This document may contain material from IETF Documents or IETF
   Contributions published or made publicly available before November
   10, 2008.  The person(s) controlling the copyright in some of this
   material may not have granted the IETF Trust the right to allow
   modifications of such material outside the IETF Standards Process.
   Without obtaining an adequate license from the person(s) controlling
   the copyright in such materials, this document may not be modified
   outside the IETF Standards Process, and derivative works of it may
   not be created outside the IETF Standards Process, except to format
   it for publication as an RFC or to translate it into languages other
   than English.


   The definitive version of an IETF Document is that published by, or
   under the auspices of, the IETF. Versions of IETF Documents that are
   published by third parties, including those that are translated into
   other languages, should not be considered to be definitive versions
   of IETF Documents. The definitive version of these Legal Provisions
   is that published by, or under the auspices of, the IETF. Versions of
   these Legal Provisions that are published by third parties, including
   those that are translated into other languages, should not be
   considered to be definitive versions of these Legal Provisions.  For
   the avoidance of doubt, each Contributor to the IETF Standards
   Process licenses each Contribution that he or she makes as part of
   the IETF Standards Process to the IETF Trust pursuant to the
   provisions of RFC 5378. No language to the contrary, or terms,
   conditions or rights that differ from or are inconsistent with the
   rights and licenses granted under RFC 5378, shall have any effect and
   shall be null and void, whether published or posted by such
   Contributor, or included with or in such Contribution.







D. Eastlake 3rd                                                [Page 27]

