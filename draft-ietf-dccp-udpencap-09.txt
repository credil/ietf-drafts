


DCCP Working Group                                             T. Phelan
Internet-Draft                                                     Sonus
Intended status: Standards Track                            G. Fairhurst
Expires: January 14, 2012                         University of Aberdeen
                                                              C. Perkins
                                                   University of Glasgow
                                                           July 13, 2011


   Datagram Congestion Control Protocol (DCCP) Encapsulation for NAT
                          Traversal (DCCP-UDP)
                      draft-ietf-dccp-udpencap-09

Abstract

   This document specifies an alternative encapsulation of the Datagram
   Congestion Control Protocol (DCCP), referred to as DCCP-UDP.  This
   encapsulation allows DCCP to be carried through the current
   generation of Network Address Translation (NAT) middleboxes without
   modification of those middleboxes.  This document also updates the
   SDP information for DCCP defined in RFC 5762.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 14, 2012.

Copyright Notice

   Copyright (c) 2011 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents



Phelan, et al.          Expires January 14, 2012                [Page 1]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  3
   2.  Terminology  . . . . . . . . . . . . . . . . . . . . . . . . .  3
   3.  DCCP-UDP . . . . . . . . . . . . . . . . . . . . . . . . . . .  3
     3.1.  The UDP Header . . . . . . . . . . . . . . . . . . . . . .  4
     3.2.  The DCCP Generic Header  . . . . . . . . . . . . . . . . .  5
     3.3.  DCCP-UDP Checksum Procedures . . . . . . . . . . . . . . .  6
       3.3.1.  Partial Checksums and the Minimum Checksum
               Coverage Feature . . . . . . . . . . . . . . . . . . .  7
     3.4.  Network Layer Options  . . . . . . . . . . . . . . . . . .  7
     3.5.  Explicit Congestion Notification . . . . . . . . . . . . .  7
     3.6.  ICMP handling for messages relating to DCCP-UDP  . . . . .  8
     3.7.  Path Maximum Transmission Unit Discovery . . . . . . . . .  8
     3.8.  Usage of the UDP port by DCCP-UDP  . . . . . . . . . . . .  8
     3.9.  Service Codes and the DCCP Port Registry . . . . . . . . . 10
   4.  DCCP-UDP and Higher-Layer Protocols  . . . . . . . . . . . . . 10
     5.1.  Protocol Identification  . . . . . . . . . . . . . . . . . 11
     5.2.  Signalling Encapsulated DCCP Ports . . . . . . . . . . . . 12
     5.3.  Connection Management  . . . . . . . . . . . . . . . . . . 13
     5.4.  Negotiating the DCCP-UDP encapsulation versus native
           DCCP . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
     5.5.  Example of SDP use . . . . . . . . . . . . . . . . . . . . 14
   6.  Security Considerations  . . . . . . . . . . . . . . . . . . . 15
   7.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 16
     7.1.  UDP Port Allocation  . . . . . . . . . . . . . . . . . . . 16
     7.2.  DCCP Reset . . . . . . . . . . . . . . . . . . . . . . . . 16
     7.3.  SDP Attribute Allocation . . . . . . . . . . . . . . . . . 17
   8.  Acknowledgments  . . . . . . . . . . . . . . . . . . . . . . . 17
   9.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 17
     9.1.  Normative References . . . . . . . . . . . . . . . . . . . 17
     9.2.  Informative References . . . . . . . . . . . . . . . . . . 18
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 19











Phelan, et al.          Expires January 14, 2012                [Page 2]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


1.  Introduction

   The Datagram Congestion Control Protocol (DCCP), specified in
   [RFC4340], is a transport-layer protocol that provides upper layers
   with the ability to use non-reliable congestion-controlled flows.
   The current specification for DCCP [RFC4340] specifies a direct
   encapsulation in IPv4 or IPv6 packets.

   [RFC5597] specifies how DCCP should be handled by devices that use
   Network Address Translation (NAT) or Network Address and Port
   Translation (NAPT).  However, there is a significant installed base
   of NAT/NAPT devices that do not support [RFC5597].  In the short
   term, it would be useful to have an encapsulation for DCCP that is
   compatible with this installed base of NAT/NAPT devices that support
   [RFC4787], but do not support [RFC5597].  This document specifies
   that encapsulation, which is referred to as DCCP-UDP.  For
   convenience, the standard encapsulation for DCCP [RFC4340] (including
   [RFC5596] as required) is referred to as DCCP-STD.

   The encapsulation described in this document may also be used as a
   transition mechanism to enable support for DCCP in devices that
   support UDP, but do not yet natively support DCCP.  This therefore
   also allows the DCCP transport to be implemented within an
   application using DCCP-UDP.

   The document also updates the SDP specification for DCCP to convey
   the encapsulation type.  In this respect only, it updates the method
   in [RFC5762].

   The DCCP-UDP encapsulation specified in this document supports all of
   the features contained in DCCP-STD, but with limited functionality
   for partial checksums.


2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].


3.  DCCP-UDP

   The basic approach is to insert a UDP [RFC0768] header between the IP
   header and the DCCP packet.  Note that this is not a tunneling
   approach.  The IP addresses of the communicating end systems are
   carried in the IP header.  The method does not embed additional IP
   addresses.



Phelan, et al.          Expires January 14, 2012                [Page 3]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


   The method is designed to support use when these addresses are
   modified by a device that implements NAT/NAPT.  A NAT translates the
   IP addresses, which impacts the transport-layer checksum.  A NAPT
   device may also translate the port values (usually the source port).
   In both cases, the outer transport header that includes these values
   would need to be updated by the NAT/NAPT.

   A device offering or using DCCP services via DCCP-UDP encapsulation
   listens on a UDP port (default port, XXX IANA PORT XXX), or may bind
   to a specified port utilising out-of-band signalling, such as the
   Session Description Protocol (SDP).  The DCCP-UDP server accepts
   incoming packets over the UDP transport and passes the received
   packets to the DCCP protocol module, after removing the UDP
   encapsulation.

   A DCCP implementation MAY allow services to be simultaneously offered
   over any or all combinations of DCCP-STD and DCCP-UDP encapsulations
   with IPv4 and IPv6.

   The basic format of a DCCP-UDP packet is:

    +-----------------------------------+
    |     IP Header (IPv4 or IPv6)      |  Variable length
    +-----------------------------------+
    |            UDP Header             |  8 bytes
    +-----------------------------------+
    |       DCCP Generic Header         |  12 or 16 bytes
    +-----------------------------------+
    | Additional (type-specific) Fields |  Variable length (could be 0)
    +-----------------------------------+
    |           DCCP Options            |  Variable length (could be 0)
    +-----------------------------------+
    |      Application Data Area        |  Variable length (could be 0)
    +-----------------------------------+


   Section 3.8 describes usage of UDP ports.  This includes
   implementation of a DCCP-UDP encapsulation service as a daemon that
   listens on a well-known port, allowing multiplexing of different DCCP
   applications over the port.

3.1.  The UDP Header

   The format of the UDP header is specified in [RFC0768]:







Phelan, et al.          Expires January 14, 2012                [Page 4]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |          Source Port          |           Dest Port           |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |             Length            |           Checksum            |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   For DCCP-UDP, the fields are interpreted as follows:

   Source and Dest(ination) Ports: 16 bits each

      These fields identify the UDP ports on which the source and
      destination (respectively) of the packet are listening for
      incoming DCCP-UDP packets.  The UDP port values do not identify
      the DCCP source and destination ports.

   Length: 16 bits

      This field is the length of the UDP datagram, including the UDP
      header and the payload (for DCCP-UDP, the payload is a DCCP-UDP
      datagram).

   Checksum: 16 bits

      This field is the Internet checksum of a network-layer
      pseudoheader and Length bytes of the UDP packet [RFC0768].  The
      UDP checksum MUST NOT be zero for a UDP packet that carries DCCP-
      UDP.

3.2.  The DCCP Generic Header

   The DCCP Generic Header [RFC4340] takes two forms, one with long
   sequence numbers (48 bits) and the other with short sequence numbers
   (24 bits).

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |          Source Port          |           Dest Port           |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |  Data Offset  | CCVal | CsCov |           Checksum            |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     |       |X|               |                               .
      | Res | Type  |=|   Reserved    |  Sequence Number (high bits)  .
      |     |       |1|               |                               .
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                  Sequence Number (low bits)                   |



Phelan, et al.          Expires January 14, 2012                [Page 5]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The Generic DCCP Header with long sequence numbers [RFC4340]

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |          Source Port          |           Dest Port           |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |  Data Offset  | CCVal | CsCov |           Checksum            |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |     |       |X|                                               |
      | Res | Type  |=|   Sequence Number (low bits)                  |
      |     |       |0|                                               |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   The Generic DCCP Header with short sequence numbers [RFC4340]

   All generic header fields, except for the Checksum field, have the
   meaning specified in [RFC4340] updated by [RFC5596].

   Section 3.8 describes how a DCCP-UDP implementation treats UDP and
   DCCP ports.

3.3.  DCCP-UDP Checksum Procedures

   DCCP-UDP employs a checksum at the UDP level and eliminates the use
   of the DCCP checksum.  This approach was chosen to enable use of
   current NAT/NATP traversal methods developed for UDP.  Such methods
   will generally be unaware whether DCCP is being encapsulated and
   hence do not update the inner checksum in the DCCP header.  Standard
   DCCP requires protection of the DCCP header fields, this justifies
   any processing overhead incurred from calculating the UDP checksum.

   In addition, UDP NAT traversal does not support partial checksums.
   Although this is still permitted end-to-end in the encapsulated DCCP
   datagram, links along the path will treat these as UDP packets and
   can not enable special partial checksum processing.

   For DCCP-UDP, the function of the DCCP Checksum field is performed by
   the UDP checksum field.  On transmit, the DCCP Checksum field SHOULD
   be set to zero.  On receive, the DCCP Checksum field MUST be ignored.

   The UDP checksum MUST NOT be zero for a UDP packet that is sent using
   DCCP-UDP.  If the received UDP Checksum field is zero, the packet
   MUST be dropped.

   If the UDP Length field is less than 20 (the UDP Header length and



Phelan, et al.          Expires January 14, 2012                [Page 6]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


   minimum DCCP-UDP header length), the packet MUST be dropped.

   If the UDP Checksum field, computed using standard UDP methods, is
   invalid, the packet MUST be dropped.

   If the UDP Length field in a received packet is less than the length
   of the UDP header plus the entire DCCP-UDP header (including the
   generic header and type-specific fields and options, if present), or
   the UDP Length field is greater than the length of the packet from
   the beginning of the UDP header to the end of the packet, the packet
   MUST be dropped.

3.3.1.  Partial Checksums and the Minimum Checksum Coverage Feature

   This document describes an encapsulation for DCCP that uses the UDP
   transport.  It requires the UDP checksum to be enabled.  This
   checksum provides coverage of the entire encapsulated DCCP datagram.

   DCCP-UDP supports the syntax of partial checksums.  It also supports
   negotiation of the Minimum Checksum Coverage feature and settings of
   the CsCov field.  However, the UDP checksum field in DCCP-UDP always
   covers the entire DCCP datagram and the DCCP checksum is ignored on
   receipt.  An application that enables the partial checksums feature
   in the DCCP Module will therefore experience a service that is
   functionally identical to using full DCCP checksum coverage.  This is
   also the service that the application would have received if it had
   used a network path that did not provide optimised processing for
   DCCP partial checksums.

3.4.  Network Layer Options

   A DCCP-UDP implementations MAY transfer network-layer options
   intended for DCCP to the network-layer header of the encapsulating
   UDP packet.

   A DCCP-UDP endpoint that receives IP-options for the encapsulating
   UDP packet MAY forward these to the DCCP protocol module.  If the
   endpoint forwards a specific network layer option to the DCCP module,
   it MUST also forward all subsequent packets with this option.
   Consistent forwarding is essential for correct operation of many end-
   to-end options.

3.5.  Explicit Congestion Notification

   A DCCP-UDP endpoint SHOULD follow the procedures of DCCP-STD section
   12 by setting the ECN fields in the IP Headers of outgoing packets
   and examining the values received in the ECN fields of incoming IP
   packets, relaying any packet markings to the DCCP module.



Phelan, et al.          Expires January 14, 2012                [Page 7]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


   Implementations that do not support ECN MUST follow the procedures in
   DCCP-STD section 12.1 with regard to implementations that are not ECN
   capable.

3.6.  ICMP handling for messages relating to DCCP-UDP

   To allow ICMP messages to be demultiplexed by the receiving endpoint,
   part of the original packet that resulted in the message is included
   in the payload of the ICMP error message.  The receiving endpoint can
   therefore use this information to associate the ICMP error with the
   transport protocol instance that resulted in the ICMP message.  When
   DCCP-UDP is used, the error message and the payload of the ICMP error
   message relate to the UDP transport.

   DCCP-UDP endpoints SHOULD forward ICMP messages relating to a UDP
   packet that carries a DCCP-UDP to the DCCP module.  This may imply
   translation of the payload of the ICMP message into a form that is
   recognised by the DCCP stack.  [ICMP] describes precautions that are
   desirable before TCP acts on the receipt of an ICMP message.  Similar
   precautions are desirable prior to forwarding by DCCP-UDP to the DCCP
   module.

   The minimal length ICMP error message generated in response to
   processing a UDP Datagram only identifies the Source UDP Port and
   Destination UDP Port.  This ICMP message does not carry sufficient
   information to discover the encapsulated DCCP Port values.  A DCCP-
   UDP endpoint that supports multiple DCCP connections over the same
   pair of UDP ports (see section Section 3.8) may not therefore be able
   to associate an ICMP message with a unique DCCP-UDP connection.

3.7.  Path Maximum Transmission Unit Discovery

   DCCP-UDP implementations SHOULD follow DCCP-STD section 14 with
   regard to determining the maximum packet size and the use of Path
   Maximum Transmission Unit Discovery (PMTUD).

   An effect of encapsulation is to incur additional datagram overhead.
   This will reduce the Maximum Packet Size (MPS) at the DCCP level.

3.8.  Usage of the UDP port by DCCP-UDP

   A DCCP-UDP server (that is, an initially passive endpoint that wishes
   to receive DCCP-Request packets [RFC4340] over DCCP-UDP) listens for
   connections on one or more UDP ports.  UDP port number XXX IANA PORT
   XXX has been reserved as the default listening UDP port for a DCCP-
   UDP server.  Some NAT/NAPT topologies may require using a non-default
   listening port.




Phelan, et al.          Expires January 14, 2012                [Page 8]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


   The purpose of this IANA-assigned port is for the operating system or
   a framework to receive and process DCCP-UDP datagrams for delivery to
   the DCCP module (e.g. to support a DCCP-UDP daemon serving multiple
   DCCP applications or a DCCP-UDP server placed behind a firewall).
   Because of this, the IANA-assigned port SHOULD NOT be used as the
   Destination UDP Port by a DCCP-UDP server listening for incoming
   DCCP-UDP packets.  An application-specific implementation SHOULD use
   an ephemeral port and advertise this port using outside means, e.g.
   SDP.

   A DCCP-UDP client provides UDP source and destination ports as well
   as DCCP source and destination ports at connection initiation time.
   A client SHOULD ensure that each DCCP connection maps to a single UDP
   connection by setting the UDP source port.  Choosing a distinct
   source UDP port for each distinct DCCP connection ensures that UDP-
   based flow identifiers differ whenever DCCP-based flow identifiers
   differ.  Specifically, two connections with different <source IP
   address, source DCCP port, destination IP address, destination DCCP
   port> DCCP 4-tuples will have different <source IP address, source
   UDP port, destination IP address, destination UDP port> UDP 4-tuples.

   A DCCP-UDP server SHOULD accept datagrams from any UDP source port.
   There is a risk that the same DCCP source port number could be used
   by two endpoints each behind a NAPT.  A DCCP-UDP server must
   therefore demultiplex a DCCP-UDP flow using both the UDP source and
   destination port numbers and the encapsulated DCCP ports.  This
   ensures than an active DCCP connection is uniquely identified by the
   6-tuple <source IP address, source UDP port, source DCCP port,
   destination IP address, destination UDP port, destination DCCP port>.

   This demultiplexing at a DCCP-UDP endpoint occurs in two stages:

   1) In the first stage, DCCP-UDP packets are demultiplexed using the
   UDP 4-tuple: <source IP address, source UDP port, destination IP
   address, destination UDP port>.

   2) In the second stage, a receiving endpoint MUST ensure that two
   independent DCCP connections that were multiplexed to the same UDP
   4-tuple are not associated with the same connection in the DCCP
   module.  The endpoint therefore needs to keep state for the set of
   active DCCP-UDP endpoints using each combination of a UDP 4-tuple:
   <source IP address, source UDP port, destination IP address,
   destination UDP port>.  A DCCP endpoint MUST implement one of the two
   methods:

   o  A DCCP server MAY accept only one active 6-tuple at any one time
      for a given UDP 4-tuple.  In this method, DCCP-UDP packets that do
      not match an active 6-tuple MUST NOT be passed to the DCCP module



Phelan, et al.          Expires January 14, 2012                [Page 9]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


      and the DCCP Server SHOULD send a DCCP-Reset with with Reset Code
      XXX IANA Port Reuse XXX, "Encapsulated Port Reuse".  An endpoint
      that receives a DCCP-Reset with this reset code will clear its
      connection state, but MAY immediately try again using a different
      4-tuple.  This provides protection should the same UDP 4-tuple be
      re-used by multiple DCCP connections, ensuring that only one DCCP
      connection is established at one time.

   o  A DCCP server MAY support multiple DCCP connections over the same
      UDP 4-tuple.  In this method, the endpoint MUST then associate
      each 6-tuple with a single DCCP connection.  If an endpoint is
      unable to demultiplex the 6-tuple (e.g. due to internal resource
      limits), it MUST discard DCCP-UDP packets that do not match an
      active 6-tuple instead of forwarding them to the DCCP module.  The
      DCCP endpoint MAY send a DCCP-Reset with Reset Code XXX IANA Port
      Reuse XXX, "Encapsulated Port Reuse", indicating the connection
      has been closed, but may be retried using a different UDP 4-tuple.

3.9.  Service Codes and the DCCP Port Registry

   This section clarifies the usage of DCCP Service Codes and the
   registration of server ports by DCCP-UDP.  The section is not
   intended to update the procedures for allocating Service Codes or
   server ports.

   There is one Service Code registry and one DCCP port registration
   that apply to all combinations of encapsulation and IP version.  A
   DCCP Service Code specifies an application using DCCP regardless of
   the combination of DCCP encapsulation and IP version.  An application
   may choose not to support some combinations of encapsulation and IP
   version, but its Service Code will remain registered for those
   combinations and the Service Code must not be used by other
   applications.  An application should not register different Service
   Codes for different combinations of encapsulation and IP version.
   [RFC5595] provides additional information about DCCP Service Codes.

   Similarly, a port registration is applicable to all combinations of
   encapsulation and IP version.  Again, an application may choose not
   to support some combinations of encapsulation and IP version on its
   registered port, although the port will remain registered for those
   combinations.  Applications should not register different ports just
   for the purpose of using different combinations of encapsulation.


4.  DCCP-UDP and Higher-Layer Protocols

   The encapsulation of a higher-layer protocol within DCCP MUST be the
   same for both DCCP-STD and DCCP-UDP.  Encapsulations of DTLS over



Phelan, et al.          Expires January 14, 2012               [Page 10]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


   DCCP is defined in [RFC5238] and RTP over DCCP is defined in
   [RFC5762].  This document therefore does not update these
   encapsulations when using DCCP-UDP.


5.  Signaling the Use of DCCP-UDP

   Applications often signal transport connection parameters through
   outside means, such as SDP.  Applications that define such methods
   for DCCP MUST define how the DCCP encapsulation is chosen, and MUST
   allow either encapsulation to be signaled.  Where DCCP-STD and DCCP-
   UDP are both supported, DCCP-STD SHOULD be preferred.

   The Session Description Protocol (SDP) [RFC4566] and the offer/answer
   model [RFC3264] can be used to negotiate DCCP sessions, and [RFC5762]
   defines SDP extensions for signalling the use of an RTP session
   running over DCCP connections.  However, since [RFC5762] predates
   this document, it does not define a mechanism for signalling that the
   DCCP-UDP encapsulation is to be used.  This section updates [RFC5762]
   to describe how SDP can be used to signal RTP sessions running over
   the DCCP-UDP encapsulation.

   The new SDP suport specified in this section is expected to be useful
   when the offering party is on the public Internet, or in the same
   private addressing realm as the answering party.  In this case, the
   DCCP-UDP server has a public address.  The client may either have a
   public address or be behind a NAT/NAPT.  This is considered a
   scenario that has the potential to be an important use-case.  Some
   other NAT/NAPT topologies may result in the advertised port being
   unreachable via the NAT/NAPT

5.1.  Protocol Identification

   SDP uses a media ("m=") line to convey details of the media format
   and transport protocol used.  The ABNF syntax of a media line for
   DCCP is as follows (from [RFC4566]:
          media-field = %x6d "=" media SP port ["/" integer] SP proto

          1*(SP fmt) CRLF


   The proto field denotes the transport protocol used for the media,
   while the port indicates the transport port to which the media is
   sent.  Following [RFC5762].  This document defines the following five
   values of the proto field to indicate media transported using DCCP-
   UDP encapsulation:





Phelan, et al.          Expires January 14, 2012               [Page 11]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


      UDP/DCCP

      UDP/DCCP/RTP/AVP

      UDP/DCCP/RTP/SAVP

      UDP/DCCP/RTP/AVPF

      UDP/DCCP/RTP/SAVPF

   The "UDP/DCCP" protocol identifier is similar to the "DCCP" protocol
   identifier defined in [RFC5762] and denotes the DCCP transport
   protocol encapsulated in UDP, but not its upper-layer protocol.

   The "UDP/DCCP/RTP/AVP" protocol identifier refers to RTP using the
   RTP Profile for Audio and Video Conferences with Minimal Control
   [RFC3511] running over the DCCP-UDP encapsulation.

   The "UDP/DCCP/RTP/SAVP" protocol identifier refers to RTP using the
   Secure Real-time Transport Protocol [RFC3711] running over the DCCP-
   UDP encapsulation.

   The "UDP/DCCP/RTP/AVPF" protocol identifier refers to RTP using the
   Extended RTP Profile for RTCP-based Feedback [RFC4585]running over
   the DCCP-UDP encapsulation.

   The "UDP/DCCP/RTP/SAVPF" protocol identifier refers to RTP using the
   Extended Secure RTP Profile for RTCP-based Feedback [RFC5124] running
   over the DCCP-UDP encapsulation.

   The fmt value in the "m=" line is used as described in [RFC5762].

   The port number specified in the "m=" line indicates the UDP port
   that is used for the DCCP-UDP encapsulation service.  The DCCP port
   number MUST be sent using an associated "a=dccp-port:" attribute, as
   described in Section 5.2.

   The use of ports with DCCP-UDP encapsulation is described further in
   Section 3.8.

5.2.  Signalling Encapsulated DCCP Ports

   When using DCCP-UDP, the UDP port used for the encapsulation is
   signalled using the SDP "m=" line.  The DCCP ports MUST NOT be
   included in the "m=" line, but are instead signalled using a new SDP
   attribute ("dccp-port") defined according to the following ABNF:





Phelan, et al.          Expires January 14, 2012               [Page 12]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


          dccp-port-attr = %x61 "=dccp-port:" dccp-port

          dccp-port = 1*DIGIT


   where DIGIT is as defined in [RFC4234].  This is a media level
   attribute, that is not subject to the charset attribute.  The
   "a=dccp-port:" attribute MUST be included when the protocol
   identifiers described in Section 5.1 are used.

   The use of ports with DCCP-UDP encapsulation is described further in
   Section 3.8.

   If the "a=rtcp:" attribute [RFC3605] is used, then the signalled port
   is the DCCP port used for RTCP.  If the "a=rtcp-mux" attribute
   [RFC5761] is negotiated, then RTP and RTCP are multiplexed onto a
   single DCCP port, otherwise separate DCCP ports are used for RTP and
   RTCP.  In each case, only a single UDP port is used for the DCCP-UDP
   encapsulation.

5.3.  Connection Management

   The "a=setup:" attribute is used in a manner compatible with
   [RFC5762] Section 5.3 to indicate which of the DCCP-UDP endpoints
   should initiate the DCCP-UDP connection establishment.

5.4.  Negotiating the DCCP-UDP encapsulation versus native DCCP

   An endpoint that supports both native DCCP and the DCCP-UDP
   encapsulation may wish to signal support for both options in an SDP
   offer, allowing the answering party the option of using native DCCP
   where possible, while falling back to the DCCP-UDP encapsulation
   otherwise.  One approach to doing this is to include candidates for
   the DCCP-UDP encapsulation and for native DCCP into an ICE [RFC5245]
   exchange.

   DCCP candidates (native or encapsulated) are encoded into
   "a=candidate:" lines in a manner similar to TCP candidates [ICE-TCP].
   However, the transport protocol (i.e., the value of the transport-
   extension token defined in [RFC5245] Section 15.1) is set to either
   "DCCP" for native DCCP flows or "UDP/DCCP" for DCCP-UDP encapsulated
   flows.  The connection type (active, passive, or simultaneous open)
   is encoded using extension attributes in the same way as is done for
   TCP candidates.

   The offer SHOULD contain active and passive candidates for both
   native DCCP and DCCP-UDP encapsulation.  If [RFC5596] is supported,
   then simultaneous open candidates SHOULD be obtained for native DCCP



Phelan, et al.          Expires January 14, 2012               [Page 13]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


   and the DCCP-UDP encapsulation.  Server reflexive and relayed
   candidates MAY be obtained if mechanisms exist to establish these
   candidates.  The direction is encoded into SDP using a new dccptype
   extension to the a=candidate attribute, analogous to the tcptype
   extension defined in [ICE-TCP].  Native DCCP candidates are host
   candidates, and SHOULD have preference value of 126, following
   [RFC5245] section 4.1.2.  DCCP-UDP candidates SHOULD have preference
   set to 75, matching the UDP-tunneled candidate priority defined in
   [ICE-TCP] Section 4.2.  The direction-pref part of the local-
   preference SHOULD be set following Section 4.2 of [ICE-TCP].  It
   makes sense to choose local preference values to prefer DCCP-UDP over
   native DCCP in cases where low connection setup time is important,
   and to prioritise native DCCP in cases where low overhead is
   preferred (on the assumption that DCCP-UDP is more likely to work
   through legacy NAT, but has higher overhead).

5.5.  Example of SDP use

   The example below shows an SDP offer, where an application signals
   support for both native DCCP and for DCCP-UDP:
          v=0
          o=alice 1129377363 1 IN IP4 192.0.2.47
          s=-
          c=IN IP4 192.0.2.47
          t=0 0
          m=video 50234 UDP/DCCP/RTP/AVP 99
          a=rtpmap:99 h261/90000
          a=dccp-service-code:SC=x52545056
          a=dccp-port:5004
          a=rtcp:5005
          a=setup:passive
          a=connection:new


   The answering party at 192.0.2.128 receives this offer and responds
   with the following answer:
          v=0
          o=bob 1129377364 1 IN IP4 192.0.2.128
          s=-
          c=IN IP4 192.0.2.128
          t=0 0
          m=video 40123 UDP/DCCP/RTP/AVP 99
          a=rtpmap:99 h261/90000
          a=dccp-service-code:SC:RTPV
          a=dccp-port:9
          a=setup:active
          a=connection:new




Phelan, et al.          Expires January 14, 2012               [Page 14]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


   Note that the "m=" line in the answer includes the UDP port number of
   the encapsulation service.  The DCCP service code is set to "RTPV",
   signalled using the "a=dccp-service-code" attribute [RFC5762].  The
   "a=dccp-port:" attribute in the answer is set to 9 (the discard port)
   in the usual manner for an active connection-oriented endpoint.

   The answering party will then attempt to establish a DCCP-UDP
   connection to the offering party.  The connection request will use an
   ephemeral DCCP source port and DCCP destination port 5004.  The UDP
   packet encapsulating that request will have UDP source port 40123 and
   UDP destination port 50234.

   The example below shows how ICE can be used in an SDP offer:
        v=0
        o=jdoe 2890844526 IN IP4 10.0.1.1
        s=-
        c=IN IP4 192.0.2.3
        t=0 0
        a=ice-pwd:asd88fgpdd777uzjYhagZg
        a=ice-ufrag:8hhY
        m=audio 45664 UDP/DCCP/RTP/AVP 0
        a=dccp-service-code:SC:RTPA
        a=dccp-port:5004
        a=setup:active
        a=connection:new
        b=RS:0
        b=RR:0
        a=candidate:1 1 DCCP <pref> 10.0.1.1 9 typ host dccptype act
        a=candidate:2 1 UDP/DCCP <pref> 10.0.1.1 9 typ host dccptype act


  XXX NOTE: Reviewer needed to confirm preference encoding XXX



6.  Security Considerations

   DCCP-UDP provides all of the security risk-mitigation measures
   present in DCCP-STD, and also all of the security risks.

   The purpose of DCCP-UDP is to allow DCCP to pass through NAT/NAPT
   devices, and therefore it exposes DCCP to the risks associated with
   passing through NAT devices.  It does not create any new risks with
   regard to NAT/NAPT devices.

   The tunnel encapsulation recommends processing of ICMP messages
   received for packets sent using DCCP-UDP and translation to allow use
   by DCCP.  [RFC5927] describes precautions that are desirable before



Phelan, et al.          Expires January 14, 2012               [Page 15]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


   TCP acts on receipt of ICMP messages.  Similar precautions are
   desirable for endpoints processing ICMP for DCCP-UDP.

   DCCP-UDP may also allow DCCP applications to pass through existing
   firewall devices, if the administrators of the devices so choose.  A
   simple use may either allow all DCCP applications or allow none.

   A firewall than interprets this specification could inspect the
   encapsualted DCCP header to filter based on DCCP information.  Full
   control of DCCP connections by applications will require enhancements
   to firewalls, as discussed in [RFC4340] and related RFCs (e.g.
   [RFC5595]).


7.  IANA Considerations

   This document requests IANA to make the allocations described in the
   following sections.

7.1.   UDP Port Allocation

   IANA is requested to allocate a UDP port for the dccp-udp service.
   Use of this port is defined in section Section 3.8

   XXX Note: IANA is requested to replace all occurrences of "XXX IANA
   PORT XXX" by the allocated port value prior to publication.  XXX

7.2.  DCCP Reset

   IANA is requested to assign a new DCCP Reset Code in the DCCP Reset
   Codes Registry, with the short description "Encapsulated Port Reuse".
   This code applies to all DCCP congestion control IDs and should be
   allocated a value less than 120 decimal.  Use of this reset code is
   defined in section Section 3.8.  Section 5.6 of RFC4340 defines three
   "Data" bytes that are carried by a DCCP Reset.  For this Reset Code
   these are defined as below:

   o  Data byte 1: The DCCP Packet Type of the DCCP datagram that
      resulted in the error message.

   o  Data byte 2 & 3: The encapsulated Source UDP Port from the DCCP-
      UDP datagram that triggered the ICMP message, in network order.

   XXX Note: IANA is requested to replace all occurrences of "XXX IANA
   Port Reuse XXX" by the allocated DCCP reset code value prior to
   publication.  XXX





Phelan, et al.          Expires January 14, 2012               [Page 16]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


7.3.  SDP Attribute Allocation

   IANA is requested to allocate the following new SDP attribute ("att-
   field"):

      Contact name: DCCP Working Group

      Attribute name: dccp-port

      Long-form attribute name in English: Encapsulated DCCP Port

      Type of attribute: Media level

      Subject to charset attribute?  No

      Purpose of the attribute: See this document, section Section 5.1

      Allowed attribute values: See this document, section Section 5.1


8.  Acknowledgments

   This document was produced by the DCCP WG.  The following contributed
   during the working group last call:

   Andrew Lentvorski, Lloyd Wood, Pasi Sarolahti, Gerrit Renker, Eddie
   Kohler, and Dan Wing.


9.  References

9.1.  Normative References

   [RFC0768]  Postel, J., "User Datagram Protocol", STD 6, RFC 768,
              August 1980.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC3605]  Huitema, C., "Real Time Control Protocol (RTCP) attribute
              in Session Description Protocol (SDP)", RFC 3605,
              October 2003.

   [RFC4234]  Crocker, D., Ed. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", RFC 4234, October 2005.

   [RFC4340]  Kohler, E., Handley, M., and S. Floyd, "Datagram
              Congestion Control Protocol (DCCP)", RFC 4340, March 2006.



Phelan, et al.          Expires January 14, 2012               [Page 17]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


   [RFC5234]  Crocker, D. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234, January 2008.

   [RFC5762]  Perkins, C., "RTP and the Datagram Congestion Control
              Protocol (DCCP)", RFC 5762, April 2010.

9.2.  Informative References

   [ICE-TCP]  Rosenberg, "TCP Candidates with Interactive Connectivity
              Establishment (ICE), IETF Work-in-Progress.".

   [ICMP]     Gont, "ICMP attacks against TCP, IETF Work-in-Progress.".

   [RFC3264]  Rosenberg, J. and H. Schulzrinne, "An Offer/Answer Model
              with Session Description Protocol (SDP)", RFC 3264,
              June 2002.

   [RFC3511]  Hickman, B., Newman, D., Tadjudin, S., and T. Martin,
              "Benchmarking Methodology for Firewall Performance",
              RFC 3511, April 2003.

   [RFC3711]  Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.
              Norrman, "The Secure Real-time Transport Protocol (SRTP)",
              RFC 3711, March 2004.

   [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, "SDP: Session
              Description Protocol", RFC 4566, July 2006.

   [RFC4585]  Ott, J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,
              "Extended RTP Profile for Real-time Transport Control
              Protocol (RTCP)-Based Feedback (RTP/AVPF)", RFC 4585,
              July 2006.

   [RFC4762]  Lasserre, M. and V. Kompella, "Virtual Private LAN Service
              (VPLS) Using Label Distribution Protocol (LDP) Signaling",
              RFC 4762, January 2007.

   [RFC4787]  Audet, F. and C. Jennings, "Network Address Translation
              (NAT) Behavioral Requirements for Unicast UDP", BCP 127,
              RFC 4787, January 2007.

   [RFC5124]  Ott, J. and E. Carrara, "Extended Secure RTP Profile for
              Real-time Transport Control Protocol (RTCP)-Based Feedback
              (RTP/SAVPF)", RFC 5124, February 2008.

   [RFC5238]  Phelan, T., "Datagram Transport Layer Security (DTLS) over
              the Datagram Congestion Control Protocol (DCCP)",
              RFC 5238, May 2008.



Phelan, et al.          Expires January 14, 2012               [Page 18]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


   [RFC5245]  Rosenberg, J., "Interactive Connectivity Establishment
              (ICE): A Protocol for Network Address Translator (NAT)
              Traversal for Offer/Answer Protocols", RFC 5245,
              April 2010.

   [RFC5595]  Fairhurst, G., "The Datagram Congestion Control Protocol
              (DCCP) Service Codes", RFC 5595, September 2009.

   [RFC5596]  Fairhurst, G., "Datagram Congestion Control Protocol
              (DCCP) Simultaneous-Open Technique to Facilitate NAT/
              Middlebox Traversal", RFC 5596, September 2009.

   [RFC5597]  Denis-Courmont, R., "Network Address Translation (NAT)
              Behavioral Requirements for the Datagram Congestion
              Control Protocol", BCP 150, RFC 5597, September 2009.

   [RFC5761]  Perkins, C. and M. Westerlund, "Multiplexing RTP Data and
              Control Packets on a Single Port", RFC 5761, April 2010.

   [RFC5927]  Gont, F., "ICMP Attacks against TCP", RFC 5927, July 2010.


Authors' Addresses

   Tom Phelan
   Sonus Networks
   7 Technology Dr.
   Westford, MA  01886
   US

   Phone: +1 978 614 8456
   Email: tphelan@sonusnet.com


   Godred Fairhurst
   University of Aberdeen
   School of Engineering
   Fraser Noble Building
   Aberdeen, Scotland  AB24 3UE
   UK

   Email: gorry@erg.abdn.ac.uk
   URI:   http://www.erg.abdn.ac.uk








Phelan, et al.          Expires January 14, 2012               [Page 19]

Internet-Draft           DCCP-UDP Encapsulation                July 2011


   Colin Perkins
   University of Glasgow
   School of Computing Science
   Glasgow, Scotland  G12 8QQ
   UK

   Email: csp@csperkins.org
   URI:   http:http://csperkins.org/











































Phelan, et al.          Expires January 14, 2012               [Page 20]

