<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2663 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2663.xml">
<!ENTITY RFC2131 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2131.xml">
<!ENTITY RFC3315 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3315.xml">
<!ENTITY RFC3736 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3736.xml">
<!ENTITY RFC3633 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3633.xml">
<!ENTITY RFC6603 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6603.xml">
<!ENTITY RFC4861 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4861.xml">
<!ENTITY RFC5942 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5942.xml">
<!ENTITY RFC4213 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4213.xml">
<!ENTITY RFC6106 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6106.xml">
<!ENTITY RFC6147 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6147.xml">
<!ENTITY RFC6052 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6052.xml">
<!ENTITY RFC6144 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6144.xml">
<!ENTITY RFC6145 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6145.xml">
<!ENTITY RFC6146 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6146.xml">
<!ENTITY RFC6384 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6384.xml">
<!ENTITY RFC4074 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4074.xml">
<!ENTITY RFC4787 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4787.xml">
<!ENTITY RFC5389 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5389.xml">
<!ENTITY RFC5780 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5780.xml">
<!ENTITY RFC5766 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5766.xml">
<!ENTITY RFC0894 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.0894.xml">
<!ENTITY RFC2516 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2516.xml">
<!ENTITY RFC3927 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3927.xml">
<!ENTITY RFC4943 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4943.xml">
<!ENTITY RFC4193 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4193.xml">
<!ENTITY RFC6586 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6586.xml">
<!ENTITY RFC6555 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6555.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-hazeyama-sunset4-dns-a-filter-00" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
        or pre5378Trust200902
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="DNS A Record Filter">
	DNS A Record Filtering for the migration from dual stack networks to IPv6 only networks.
    </title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Hiroaki Hazeyama" initials="H." 
            surname="Hazeyama">
      <organization>NAIST / WIDE Project</organization>
      <address>
        <postal>
          <street>Takayama 8916-5</street>
          <!-- Reorder these if your country does things differently -->
          <city>Nara</city>
          <region></region>
          <code></code>
          <country>Japan</country>
        </postal>
        <phone>+81 743 72 5216</phone>
        <email>hiroa-ha@is.naist.jp</email>
        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <author fullname="Tomohiro Ishihara" initials="T." 
            surname="Ishihara">
      <organization>Univ. of Tokyo / WIDE Project</organization>
      <address>
        <postal>
          <street>3-8-1 Komaba, Meguro</street>
          <!-- Reorder these if your country does things differently -->
          <city>Tokyo</city>
          <region></region>
          <code></code>
          <country>Japan</country>
        </postal>
        <email>sho@c.u-tokyo.ac.jp</email>
        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <author fullname="Osamu Nakamura" initials="O." 
            surname="Nakamura">
      <organization>Keio Univ. / WIDE Project</organization>
      <address>
        <postal>
          <street>5322 Endo</street>
          <!-- Reorder these if your country does things differently -->
          <city>Kanagawa</city>
          <region></region>
          <code></code>
          <country>Japan</country>
        </postal>
        <email>osamu@wide.ad.jp</email>
        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <date year="2013" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>Operation and Management</area>

    <workgroup>Network Working Group</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>IPv6 Only network, NAT64, DNS64, DHCP6, DNS A record filter </keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>
Filtering out of A records of a DNS response on a DNS proxy, we call it ``DNS A record filtering'', is an effective and efficient solution as a smooth migration to IPv6 only networks. DNS A record filtering can mitigate fallback problems of dual stack nodes on IPv6 only environment. 
This memo mentions the components of the DNS A record filter solution, procedure of DNS queries and refers current issues. 
</t>
    </abstract>
  </front>

  <middle>
    <section anchor="intro" title="Introduction">
      <t>
In an IPv6 only network <xref target="RFC6586"/>, that is composed of DHCP6 and DNS64/NAT64, IPv4/IPv6 dual stack hosts have fallback problems due to the partial IPv6 capability, happy eyeball functions <xref target="RFC6555"/>, default route on IPv4 link local address due to the link local assumption<xref target="RFC3927"/>, arrival timings of DNS responses, and so on. 
      </t>
      <t>
As well as so-called DNS AAAA record filtering in IPv4 only networks, filtering out of A records of a DNS response on a DNS proxy, we call it ``DNS A record filter proxy'', is an effective and efficient solution to mitigate fallback problems of dual stack nodes on IPv6 only environment. 
</t>
<t>
DNS A record filtering solution allows dual stack nodes to resolve names both by IPv4 and IPv6 by notifying the IPv4 address of an DNS A record filter proxy through DHCP4 and the IPv6 address of the DNS A record filter proxy through DHCP6. 
On the other hand, a DNS A record filter proxy forces dual stack nodes to conduct actual communications after the name query procedure through IPv6, by telling only AAAA or NAT64 mapped AAAA records to dual stack nodes. 
In this solution, no special action is required on dual stack nodes. A network operator can choose DNS64 and NAT64 location along with their design policy. 
      </t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>
      </section><!--- requirement language --->

    </section>

    <section title="Technology and Terminology">

<!---
<t> "NAT44" refers to any IPv4-to-IPv4 network address translation algorithm, both "Basic NAT" and "Network Address/Port Translator (NAPT)", as defined by <xref target="RFC2663"></xref>.
</t>
--->
<t> In this document, the following terms are used. "Dual Stack" refers to a technique for providing complete support for both Internet protocols -- IPv4 and IPv6 -- in hosts and routers <xref target="RFC4213"></xref>.</t>

<t> "NAT64" refers to a Network Address Translator - Protocol Translator defined in <xref target="RFC6052"></xref>, 
<xref target="RFC6144"></xref>,
<xref target="RFC6145"></xref>,
<xref target="RFC6146"></xref>,
<xref target="RFC6384"></xref>.
</t>

<t> "DNS64" refers DNS extensions to use NAT64 translation from IPv6 clients to IPv4 servers with name resolution mechanisms that is defined in <xref target="RFC6147"></xref>. 
</t>


<t> "DHCP4" refers Dynamic Host Configuration Protocol for IPv4 that is defined in <xref target="RFC2131"></xref>.
</t>

<t> "DHCP6" refers Dynamic Host Configuration Protocol for IPv6. So called "Stateful DHCP6" is defined in <xref target="RFC3315"></xref> and "Stateless DHCP6" is defined in <xref target="RFC3736"></xref>. "DHCP-PD" or "DHCPv6 Prefix Delegation" refers IPv6 Prefix Options for DHCP6 that is initially defined in <xref target="RFC3633"></xref> and updated in <xref target="RFC6603"></xref>. 
</t>

<t> "ND" refers Neighbor Discovery for IP version 6 (IPv6) that is defined in <xref target="RFC4861"></xref> and updated in <xref target="RFC5942"></xref>. 
</t>

    </section><!--- Terminology --->


<!------- ########## Back Ground ########### ------>

    <section anchor="a-filter" title="The mechanism of DNS A Record Filtering">

    <section anchor="assumptions" title="Assumptions">
<t>
The DNS A record filtering simply filters out ``A record'' entry of a DNS reply on a DNS proxy. 
As our assumption, the DNS A record filtering solution is mainly used in an IPv6 only network by combining DNS64/NAT64, DHCP4 and DHCP6. 
</t>
<t> We also assume that hosts are dual stack capable, that is, hosts have ND function and the IPv6 address assignment function by RA at least. Stateful DHCP6, Stateless DHCP6 and IPv6 DNS query functions are preferable to be equipped by hosts. 
</t>
    </section><!--- assumptions --->
    <section anchor="components" title="Components">

<t>
The components of the network, where this DNS A record filtering is employed, are as follows;
<list style="symbols">
 <t> DHCP4 server: this DHCP4 server offers a private IPv4 address to mitigate the long fall back problem due to the IPv4 link local assumption.
The DHCP4 server also offers the IPv4 address of the DNS A record filter proxy. 
To avoid the selection of the IPv4 by Happy Eyeball <xref target="RFC6555"/> in a dual stack host, this DHCP4 server MUST NOT provide the IPv4 default route. </t>
<t> DHCP6 server: this DHCP6 server MUST provide the IPv6 address of the DNS A record filter proxy. Both stateful DHCP6 and stateless DHCP6 can be employed. If the subnet is composed of a security switch and/or security wi-fi controllers, stateful DHCP6 is prefer to avoid the blocking due to the multiple temporary IPv6 address on a host. </t>
<t> DNS A record filter proxy : this DNS proxy is the key component of this solution. The DNS proxy SHOULD be located on the leaf subnet. 
The DNS proxy has a private IPv4 address that SHOULD be the same subnet address provided by the DHCP4. 
The DNS proxy has an IPv6 address that is announced to hosts through DHCP6. 
</t>
<t> DNS64 server : at least, one DNS64 server is required. The DNS A record filter proxy forwards all queries to this DNS64 server directly, or several DNS forwarder can be placed for load balancing of DNS64 servers</t>
<t> Authoritative DNS servers : these authoritative DNS servers would be queried by DNS64 servers. These authoritative DNS servers MUST NOT return inappropriate replies mentioned in <xref target="RFC4074"/> to kick the fallback function of DNS64 servers</t>
<t> NAT64 translators : at least, one NAT64 translator is placed that can be reached by hosts through IPv6. 
A NAT64 translator can be settled as the gateway of the leaf subnet, or an aggregated translator of the intra network, or a global reachable open translator. 
Several NAT64 translators can be registered in DNS64 servers for the load balancing or for handling different IPv4 prefixes by each NAT64 translrator.</t>
</list>
<xref target="sample-topology"/> shows a sample network topology of this solution.
</t>

      <figure align="center" anchor="sample-topology">
        <artwork align="left"><![CDATA[

       +-----------------+
       |Authoritative DNS|
       +-----------------+
              |
   +------ IPv6 Internet ------+       +---- IPv4 Internet ---+
              |                                        |
       +--------------+   +-------+                +------+
       |  IPv6 router |   | DNS64 |                | NAT64|
       +--------------+   +-------+                +------+
              |               |                        |
       +--------------- IPv6 backbone ----------------------+
                           |
      +----------+   +-----------+      +--------+  +--------+
      | A Record |   |   IPv6    |      | DHCP6  |  | DHCP4  |
      | Filter   |   |   Router  |      | server |  | server |
      | Proxy    |   +-----------+      +--------+  +--------+
      +----------+         |                |            |
          |                |                |            |
   +--- /64 prefix segment, closed private IPv4 segment ------+
                 |                          |
                 |                          |
        +----------------+         +------------------+
        |ipv6-only hosts |         | dual stack hosts |
        +----------------+         +------------------+

            ]]></artwork>

       <postamble> A sample network topology of DNS A record filtering </postamble>
      </figure>

 </section><!--- components --->

   <section anchor="procedure" title="Procedure">

   <section anchor="ipv6-only" title="IPv6-only hosts">
   <t> The procedure on IPv6-only hosts is as follows;
     <list style="symbols">
     <t> The host connects to the leaf subnet in layer 2 level. </t>
     <t> The host gets global IPv6 address through RA or stateful DHCP6, and also learns the IPv6 address of the DNS A record filter proxy. </t>
     <t> When the host connects to an URL, the hosts queries by type ANY or by type AAAA to the DNS A record filter proxy through IPv6.</t>
     <t> The DNS A record filter proxy forwards the received the type ANY query to the upper DNS forwarder or DNS64 server. </t>
     <t> When the DNS64 server receives the query, the DNS64 server forwards the issued FQDN to the upper authoritative DNS. 
       <list style="symbols">
       <t> If the FQDN has AAAA record, the DNS64 returns AAAA record to the DNS A record filter proxy. </t>
       <t> If the FQDN has only A record, the DNS64 returns NAT64 prefix mapped AAAA record to the DNS A record filter proxy. </t>
       <t> The DNS64 server or the upper DNS forwarder may return A record to the DNS A record filter proxy with AAAA record. </t>
       </list>
      </t>
     <t> When the DNS A record filter proxy receives the reply, the DNS A record filter proxy filters out A record if the reply contains A record. </t>
     <t> The DNS A record filter proxy returns only AAAA records to the host. </t>
     <t> The host access to the issued URL through the IPv6 address of 
         the destination or the NAT64 prefix mapped address. 
     </t>
     </list>
   </t>
   </section><!--- ipv6-prefer --->


   <section anchor="ipv6-full-capable" title="IPv6-full-capable dual stack host">
   <t> An IPv6-full-capable dual stack node equips DHCP6 function and IPv6 DNS query function, therefore, IPv6-full-capable dual stack node can send DNS queries through both IPv4 and IPv6. </t>
   <t> The procedure on IPv6-full-capable dual stack hosts (like Windows 7, etc.) is as follows;
     <list style="symbols">
     <t> The host connects to the leaf subnet in layer 2 level. </t>
     <t> The host gets a global IPv6 address through RA or stateful DHCP6, and also learns the IPv6 address of the DNS A record filter proxy. </t>
     <t> The host also gets a private IPv4 address through DHCP4, and also learns the IPv4 address of the DNS A record filter proxy. </t>

     <t> The network connectivity check sequence of the Operating 
         System may run, then, IPv6 will be selected on the host 
         because the IPv4 is not global reachable.  </t>

     <t> When the host connects to an URL, the host queries  
         by type ANY to the DNS A record filter proxy through IPv6.</t>
     <t> The DNS A record filter proxy forwards the received 
         type ANY query to the upper DNS forwarder or DNS64 server. 
     </t>
     <t> When the DNS64 server receives the query, the DNS64 server 
         forwards the issued FQDN to the upper authoritative DNS. 
       <list style="symbols">
       <t> If the FQDN has AAAA record, the DNS64 returns AAAA record 
           to the DNS A record filter proxy. </t>
       <t> If the FQDN has only A record, the DNS64 returns NAT64 prefix
           mapped AAAA record to the DNS A record filter proxy. </t>
       <t> The DNS64 server or the upper DNS forwarder may return 
           A record to the DNS A record filter proxy with AAAA record. 
       </t>
       </list>
      </t>
     <t> When the DNS A record filter proxy receives the reply, the DNS 
         A record filter proxy filters out A record if the reply 
         contains A record. </t>
     <t> The DNS A record filter proxy returns only AAAA records to 
         the host. </t>
     <t> The host access to the issued URL by using the IPv6 address of 
         the destination or the NAT64 prefix mapped address. 
     </t>
     </list>
   </t>
   </section><!--- ipv6-full-capable --->


   <section anchor="ipv6-partial-capable" title="IPv6-partial-capable dual stack host">
   <t> An IPv6-partial-capable dual stack node does not equip either 
       DHCP6 function or IPv6 DNS query function, therefore, 
       IPv6-partial-capable dual stack node will send DNS queries 
       through only IPv4. However, IPv6-partial-capable dual stack can 
       recognize AAAA record or IPv6 address. </t>
   <t> The procedure on IPv6-partial-capable dual stack host is as 
       follows;
     <list style="symbols">
     <t> The host connects to the leaf subnet in layer 2 level. </t>
     <t> The host gets a global IPv6 address through RA. </t>
     <t> The host also gets a private IPv4 address through DHCP4, 
         and also learns the IPv4 address of the DNS A record filter 
         proxy. </t>

     <t> The network connectivity check sequence of the Operating System
         may run, then, IPv6 may be selected on the IPv6-preferred host 
         because the IPv4 is not global reachable. In some case, the 
         network connectivity check may pass by name resolution to 
         the anchor server, or the network connectivity may run 
         again with certain interval.</t>

     <t> When the host connects to an URL, the host queries 
         by type ANY to the DNS A record filter proxy through IPv4.
     </t>
     <t> The DNS A record filter proxy forwards the received type ANY
        query to the upper DNS forwarder or DNS64 server through IPv6. 
     </t>
     <t> When the DNS64 server receives the query, the DNS64 server 
         forwards the issued FQDN to the upper authoritative DNS. 
       <list style="symbols">
       <t> If the FQDN has AAAA record, the DNS64 returns AAAA record to
           the DNS A record filter proxy. </t>
       <t> If the FQDN has only A record, the DNS64 returns NAT64 prefix
           mapped AAAA record to the DNS A record filter proxy. </t>
       <t> The DNS64 server or the upper DNS forwarder may return 
           A record to the DNS A record filter proxy with AAAA record. 
       </t>
       </list>
      </t>
     <t> When the DNS A record filter proxy receives the reply, 
         the DNS A record filter proxy filter out A record 
         if the reply contains A record. </t>
     <t> The DNS A record filter proxy returns only AAAA records 
         to the host. </t>
     <t> The host access to the issued URL by using the IPv6 address of 
         the destination or the NAT64 prefix mapped address. 
     </t>
     </list>
   </t>
   </section><!--- ipv6-partial-capable --->
  </section><!--- procedure --->
</section><!--- mechanism --->

    <section anchor="discussions" title="Discussions">
      <section anchor="limitation" title="Limitation for IPv4 only applications">
       <t> As mentioned in <xref target="RFC6586"/>, IPv4-only 
           (or IPv6-incapable) applications exist. Such IPv4-only 
           applications will not work on this DNS A record filtering 
           environment.
           It is preferable that such IPv4-only applications become 
           dual stack applications if possible.
      </t>
      </section><!-- ipv4-only apps -->
      <section anchor="recursive cname" title="CNAME of the reply to an type A query">
       <t> We conducted a field trial of this DNS A record filter 
           solution in Interop Tokyo 2013. We provided an IPv6-only 
           Wi-Fi access with this DNS A record filter solution. 
           We used the current Debian release and bind 9.9.2-p1 patch 
           provided from WIDE project as the DNS A Record filter proxy. 
      </t>
      <t>
           In the hot stage of Interop Tokyo 2013, we met a trouble 
           case of the current DNS A record filter. 
           In the trouble case, a host used Firefox browser 
           and crawled several web pages for test. 
           In some web page, several contents were lost. 
           We inspected by packet captures, 
           the reply of the A query to the host arrived 
           faster than the arrival of the reply of AAAA record. 
           The reply of A query contained as type CNAME, 
           that was not filtered in the current bind A filter patch. 
           (The A filter patch removed type A record of the CNAME.)
           On the other hand, in a successful case, the reply of AAAA 
           record, that contained type CNAME and type AAAA of the CNAME,
           arrived faster than the type A reply. 
      </t>
      <t> Of course, we have to conduct further investigation and tests,
          the CNAME on a type A reply would be 
          removed by DNS A filter proxy 
          as well as type A record on the type A reply. 
      </t>
      </section><!--- recursive cname --->

    </section><!--- discussion --->
    <section anchor="Security" title="Security Considerations">
<t>
As well as mentioned in <xref target="RFC6586"/>,
the use of IPv6 instead of IPv4 by itself does not make a big
security difference. 
</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
<t>
This document has no IANA implications.
</t>
    </section>

  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;

      <!-- &RFC2663; --> <!-- NAT -->
      &RFC3736; <!-- DHCP6 --> <!-- no ref in middle -->
      &RFC4213; <!-- ??? -->
    </references>

    <references title="Informative References">
      <!-- Here we use entities that we defined at the beginning. -->
<!--
      &RFC2629;
      &RFC3552;
      &RFC5226;
-->

      &RFC4074; <!-- inappropriate AAAA replies -->
      &RFC6052;
<!--      &RFC6106;--> <!-- RDNSS -->
      &RFC6144;
      &RFC6145;
      &RFC6146;
      &RFC6147;
      &RFC6384;
      &RFC6555;

<!---
      &RFC4787;
      &RFC5389;
      &RFC5766;
      &RFC5780;
--->
      
<!---
      &RFC0894;
      &RFC2516;
--->
      &RFC3927;
<!---
      &RFC4943;
      &RFC4193;
--->
      &RFC2131;
      &RFC3315;
      &RFC3633;
      &RFC6603;
      &RFC4861;
      &RFC5942;
      &RFC6586;

      <!-- A reference written by by an organization not a person. -->


<!-- references to software -->
<!--
      <reference anchor="bind"
                 target="http://www.isc.org/software/bind">
        <front>
          <title>BIND</title>
          <author>
            <organization> Internet Systems Consortium. </organization>
          </author>
        </front>
      </reference>
-->
    </references>

    <section anchor="app-additional" title="Acknowledgments">
<t>
T. Jinmei of Internet Systems Consortium for providing DNS A filter patch of Bind 9.
</t>
<t>
O. Onoe of Sony Corporation for his deep inspection and testing of end node devices in WIDE project meeting in September 2012.
</t>
<t>
Interop Tokyo 2013 NOC members and Nano Opt Media for providing a field trial of this DNS A Record Filter solution as a service network. 
Especially, K. Mano of A10 Networks and STM members for their deep inspection and testing.
</t>
    </section>

  </back>
</rfc>
