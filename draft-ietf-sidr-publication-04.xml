<?xml version="1.0"?>
<!-- TODO

     Define error codes
     Access control discussion
     Write security considerations
     Access Control impacts of nesting

-->
<!-- See http://xml.resource.org/ for tools to convert this text -->
<?rfc compact="yes" ?><?rfc editing="no" ?><?rfc sortrefs="yes" ?><?rfc symrefs="yes" ?><?rfc toc="yes" ?><rfc category="std" ipr="trust200902" docName="draft-ietf-sidr-publication-04">

  <front>
    <title abbrev="RPKI Publication Protocol">
      A Publication Protocol for the Resource Public Key Infrastructure (RPKI)
    </title>

    <author initials="S." surname="Weiler" fullname="Samuel Weiler">
      <organization>SPARTA, Inc.</organization>
      <address>
        <postal>
          <street>7110 Samuel Morse Drive</street>
          <city>Columbia, Maryland</city>
          <code>21046</code>
          <country>US</country>
        </postal>
        <email>weiler@tislabs.com</email>
      </address>
    </author>

    <author initials="A." surname="Sonalker" fullname="Anuja Sonalker">
      <organization>Battelle Memorial Institute</organization>
      <address>
        <postal><street/></postal>
        <email>sonalkera@battelle.org</email>
      </address>
    </author>

    <author initials="R." surname="Austein" fullname="Rob Austein">
      <organization>Dragon Research Labs</organization>
      <address>
        <email>sra@hactrn.net</email>
      </address>
    </author>

    <date/>
    <keyword>SIDR</keyword>

    <abstract>
      <t>
	This document defines a protocol for publishing Resource
	Public Key Infrastructure (RPKI) objects.  Even though the
	RPKI will have many participants issuing certificates and
	creating other objects, it is operationally useful to
	consolidate the publication of those objects.  This document
	provides the protocol for doing so.
      </t>
    </abstract>

  </front>

  <middle>

    <section title="Introduction">

      <t>
	This document assumes a working knowledge of the Resource
	Public Key Infrastructure (RPKI), which is intended to support
	improved routing security on the Internet.
	<xref target="RFC6480"/>
      </t>

      <t>
	In order to make participation in the RPKI easier, it is
	helpful to have a few consolidated repositories for RPKI
	objects, thus saving every participant from the cost of
	maintaining a new service.  Similarly, relying parties using the
	RPKI objects will find it faster and more reliable
	to retrieve the necessary set from a smaller number of
	repositories.
      </t>

      <t>
	These consolidated RPKI object repositories will in many
	cases be outside the administrative scope of the organization
	issuing a given RPKI object.  Hence the need for a protocol to
	publish RPKI objects.  
      </t>

      <t>
	This document defines the RPKI publication protocol, including
	a sub-protocol for configuring the publication engine. 
      </t>

      <section title="Terminology">

        <t>
	  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
          "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described
          in <xref target="RFC2119"/>.
	</t>

	<t>
	  "Publication engine" and "publication server" are used
	  interchangeably to refer to the server providing the service
	  described in this document.
	</t>

	<t>
          "Business Public Key Infrastructure" ("Business PKI" or
          "BPKI") refers to a PKI, separate from the RPKI, used to
          authenticate clients to the publication engine.
	</t>

      </section>
    </section>

    <section title="Context">

      <t>
        This protocol was designed specifically for the case where an
        internet registry, already issuing RPKI certificates to its
        children, also wishes to run a publication service for its
        children.
      </t>
      <t>
        We use the term "Business PKI" here because an internet
        registry might already have a PKI, separate from the RPKI, for
        authenticating its clients and might wish to reuse that PKI
        for this protocol.  Such reuse is not a requirement.
      </t>

    </section>

<!--
    I stole most of this text either from the provisioning doc or
    Rob's doc, but it's incorrect re: certificates, since we define that
    in this protocol.  Need to fix that.
  -->

    <section title="Protocol Specification">

      <t>
	In summary, the publication protocol uses XML messages
	wrapped in CMS, carried over HTTP transport.
      </t>
  
      <t>
	The publication procotol consists of two separate
	subprotocols.  The first is a control protocol used to
	configure a publication engine.  The second subprotocol, which
	we refer to by the overloaded term "publication protocol", is
	used to request publication of specific objects.  The
	publication engine operates a single HTTP server on a single
	port.  It distinguishes between the two protocols by using
	different URLs for them.
      </t>
      
      <section title="Common Details">	

	<t>
	  This section discusses details that the two subprotocols
	  have in common, including the transport and CMS wrappers.
	</t>
	<t>
	  Both protocols use a simple request/response interaction.  The
	  client passes a request to the server, and the server
	  generates a corresponding response.
	</t>
	<t>
          A message exchange commences with the client initiating an
          HTTP POST with content type of
          "application/rpki-publication", with the message object as
          the body.  The server's response will similarly be the body
          of the response with a content type of
          "application/rpki-publication".
	</t>
	<t>
	  The content of the POST and the server's response will be
          a well-formed Cryptographic Message Syntax (CMS)
          <xref target="RFC5652"/> object with OID =
          1.2.840.113549.1.7.2 as described in Section 3.1 of
          <xref target="RFC6492"/>.  
	</t>

<!-- redundant	
	<section title="CMS Profile">
	  <t>
	    The CMS objects used in this protocol use the exact same
	    profile as the provisioning protocol, as defined in Section
	    3.1 of <xref target="I-D.ietf-sidr-rescerts-provisioning"/>.
	  </t>
	</section>
-->

	<section title="Common XML Message Format">

	  <t>
	    The XML schema for this protocol (including both
	    subprotocols) is below in <xref target="schema"/>.  Both
	    subprotocols use the same basic XML message format, which
	    looks like:
	  </t>

	  <!-- Begin inclusion: common-format.xml --><figure><artwork>
      &lt;?xml version='1.0' encoding='us-ascii'?&gt;
      &lt;msg xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"
         version="2"
	 type="message type"&gt;
	 [one or more PDUs]
      &lt;/msg&gt;
</artwork></figure><!-- End inclusion: common-format.xml -->

	  <t>
	    <list style="hanging">
	      <t hangText="version:">
		The value of this attribute is the version of this protocol.  
		This document describes version 2.
	      </t>
	      <t hangText="type:">
		The possible values of this attribute are "reply" and "query".  
	      </t>
	    </list>
	  </t>

	  <t>
	    A query PDU may be one of four types: config_query,
	    client_query, publish_query, or withdraw_query.  The first
	    two are used by the control sub-protocol, the latter two by
	    the publication sub-protocol.
	  </t>

	  <t>
	    A reply PDU may be one of five types: config_reply,
	    client_reply, publish_reply, withdraw_reply, or
	    report_error_reply.
	  </t>

	  <t>
	    Each of these PDUs may include an optional tag to
	    facilitate bulk operation.  If a tag is set in a query PDU,
	    the corresponding reply(s) MUST have the tag attribute set
	    to the same value.
	  </t>

	</section>
      </section>

      <section title="Control Sub-Protocol">
	<t>
	  The control sub-protocol is used to configure a publication
	  server.  It can set global variables (at the moment, limited
	  to a BPKI CRL) and manage clients who are allowed to publish
	  data on the server.
	</t>

	<section title="Config Object"> 
	  <t>
	    The &lt;config/&gt; object allows configuration of data
	    that apply to the entire publication server rather than a
	    particular client. There is exactly one &lt;config/&gt;
	    object in the publication server, and it only supports the
	    "set" and "get" actions -- it cannot be created or
	    destroyed.  Its use is typically restricted to the repository
	    operator.
	  </t>
	  <t>
	    The &lt;config/&gt; object only has one data element that
	    can be set: the bpki_crl.  This is used by the publication
	    server when authenticating clients.  
	  </t>
	</section>

	<section title="Client Object"> 

	<t>
	  Unlike the &lt;config/&gt; object, the &lt;client/&gt; object
	  represents one client authorized to use the publication
	  server.  There may be more than one &lt;client/&gt; object on
	  each publication server.  Again, its use is typically restricted
	  to the respository operator.
	</t>

	<t>
	  The &lt;client/&gt; object supports five actions: "create",
	  "set", "get", "list", and "destroy". Each client has a
	  "client_handle" attribute, which is used in responses and
	  must be specified in "create", "set", "get", or "destroy"
	  actions.  The "create" and "set" actions have an optional
	  flag to clear CMS-timestamp-based replay protection, to
	  allow recovery from misconfigured clocks.
	</t>

	<t>
	  Payload data which can be configured in a &lt;client/&gt;
	  object include:

	  <vspace blankLines="1"/>

	  <list style="symbols">

	    <t>
	      base_uri (attribute): This attribute represents the base
	      URI below which the client will be allowed to publish
	      data. Additional constraints may be imposed by the
	      publication server in certain cases, for e.g., a child
	      publishing directly under its parent. 
	      <vspace blankLines="1"/>
	    </t>

	    <t>
	      bpki_cert (element): This represents the X.509 BPKI CA
	      certificate for this client. This should be used as part
	      of the certificate chain when validating incoming CMS
	      messages. Two valid approaches exist. If the optional
	      bpki_glue certificate is being used, then the bpki_cert
	      certificate should be issued by the bpki_glue
	      certificate; otherwise, the bpki_cert certificate should
	      be issued by the publication engine's bpki_ta
	      certificate. 
	      <vspace blankLines="1"/>
	    </t>

	    <t>
	      bpki_glue (element): This is an additional (optional)
	      type of X.509 certificate for this client. It may be used
	      in certain pathological cross-certification cases which
	      require a two-certificate chain due to issuer name
	      conflicts.  When being used, issuing order is that the
	      bpki_glue certificate should be the issuer of the
	      bpki_cert certificate. Otherwise, it should be issued by
	      the publication engine's bpki_ta certificate. Since this
	      is an optional use certificate, it may be left unset if
	      not needed.
	    </t>
	  </list>
	</t>
	</section>
      </section>

      <section title="Publication Sub-Protocol">

	<t>
	  The publication sub-protocol requests publication or
	  withdrawal from publication of RPKI objects.
	</t>
        <t>
	  The publication protocol uses a common message format to
	  request publication of any RPKI object.  This format was
	  chosen specifically to allow this protocol to accommodate
	  new types of RPKI objects without needing changes to this
	  protocol.
	</t>

	<t>
	  Both the &lt;publish/&gt; and &lt;withdraw/&gt; objects
	  have a payload of an optional tag and a URI.  The
	  &lt;publish/&gt; query also contains the DER object to be
	  published, encoded in Base64.
	</t>

<!-- 	<t>
	  Access control for all objects is a simple check that the
	  client's "base_uri" is a leading substring of the
	  publication URI. Details of why access control might need to
	  become more complicated are discussed in a later
	  section.
	</t>
-->

	<t>
	  Note that every publish and withdraw action requires a new
	  manifest, thus every publish or withdraw action will involve
	  at least two objects.
	</t>

      </section>
    
      <section title="Error handling" anchor="errors">
	<t>
	  Errors are handled similarly in both subprotocols, and
	  they're handled at two levels.
	</t>
	<t> 
	  Since all messages in this protocol are conveyed over
	  HTTP connections, basic errors are indicated via the HTTP
	  response code. 4xx and 5xx responses indicate that something
	  bad happened. Errors that make it impossible to decode a
	  query or encode a response are handled in this way.
	</t>
	<t> 
	  Where possible, errors will result in an XML
	  &lt;report_error/&gt; message which takes the place of
	  the expected protocol response message.
	  &lt;report_error/&gt; messages are CMS-signed XML messages
	  like the rest of this protocol, and thus can be archived to
	  provide an audit trail.
	</t>
	<t>
	  &lt;report_error/&gt; messages only appear in replies,
	  never in queries. The &lt;report_error/&gt; message can
	  appear in both the control and publication subprotocols.
	</t>
	<t> 
	  Like all other messages in this protocol, the
	  &lt;report_error/&gt; message includes a "tag" attribute to
	  assist in matching the error with a particular query when
	  using batching.  It is optional to set the tag on queries
	  but, if set on the query, it MUST be set on the reply or
	  error.
	</t>
	<t>
	  The error itself is conveyed in the error_code
	  (attribute). The value of this attribute is a token indicating
	  the specific error that occurred.
	</t>
	<t>
	  The body of the &lt;report_error/&gt; element itself is an
	  optional text string; if present, this is debugging
	  information.
	</t>

      </section>

      <section title="XML Schema" anchor="schema">

	<t>
	  The following is a RelaxNG compact form schema describing
	  the Publication Protocol.
	</t>

	<!-- Begin inclusion: rpki-publication.xml --><figure><artwork># $Id: rpki-publication.rnc 2601 2013-10-18 19:21:28Z sra $
# RelaxNG schema for RPKI publication protocol.

default namespace =
    "http://www.hactrn.net/uris/rpki/publication-spec/"

# This is version 2 of the protocol.

version = "2"

# Top level PDU is either a query or a reply.

start = element msg { 
  attribute version { version } , 
  ( ( attribute type { "query" }, query_elt* ) |
    ( attribute type { "reply" }, reply_elt* ) )
}

# PDUs allowed in a query.

query_elt |= config_query
query_elt |= client_query
query_elt |= publish_query
query_elt |= withdraw_query

# PDUs allowed in a reply.

reply_elt |= config_reply
reply_elt |= client_reply
reply_elt |= publish_reply
reply_elt |= withdraw_reply 
reply_elt |= report_error_reply

# Tag attributes for bulk operations.

tag = attribute tag { xsd:token { maxLength="1024" } }

# Base64 encoded DER stuff.

base64 = xsd:base64Binary

# Publication URLs.

uri_t = xsd:anyURI { maxLength="4096" }
uri = attribute uri { uri_t }

# Handles on remote objects (replaces passing raw SQL IDs).

object_handle = xsd:string {
   maxLength = "255"
   pattern="[\-_A-Za-z0-9/]*"
}

# Error codes.

error = xsd:token { maxLength="1024" }

# &lt;config/&gt; element (use restricted to repository operator)

config_payload = (element bpki_crl { base64 }?)

config_query |= element config {
  attribute action { "set" },
  tag?,
  config_payload
}

config_reply |= element config {
  attribute action { "set" },
  tag?
}

config_query |= element config {
  attribute action { "get" },
  tag?
}

config_reply |= element config {
  attribute action { "get" },
  tag?,
  config_payload
}

# &lt;client/&gt; element (use restricted to repository operator)

client_handle = attribute client_handle { object_handle }

client_payload = (
  attribute base_uri { uri_t }?,
  element bpki_cert { base64 }?,
  element bpki_glue { base64 }?
)

client_clear_replay = (
  attribute clear_replay_protection { "yes" }?
)

client_query |= element client {
  attribute action { "create" },
  tag?,
  client_handle,
  client_clear_replay,
  client_payload
}

client_reply |= element client {
  attribute action { "create" },
  tag?,
  client_handle
}

client_query |= element client {
  attribute action { "set" },
  tag?,
  client_handle,
  client_clear_replay,
  client_payload
}

client_reply |= element client {
  attribute action { "set" },
  tag?,
  client_handle
}

client_query |= element client {
  attribute action { "get" },
  tag?,
  client_handle
}

client_reply |= element client {
  attribute action { "get" },
  tag?,
  client_handle,
  client_payload
}

client_query |= element client {
  attribute action { "list" },
  tag?
}

client_reply |= element client {
  attribute action { "list" },
  tag?,
  client_handle,
  client_payload
}

client_query |= element client {
  attribute action { "destroy" },
  tag?,
  client_handle
}

client_reply |= element client {
  attribute action { "destroy" },
  tag?,
  client_handle
}

# &lt;publish/&gt; element

publish_query |= element publish {
  tag?,
  uri,
  base64
}

publish_reply |= element publish {
  tag?,
  uri
}

# &lt;withdraw/&gt; element

withdraw_query |= element withdraw {
  tag?,
  uri
}

withdraw_reply |= element withdraw {
  tag?,
  uri
}

# &lt;report_error/&gt; element

report_error_reply = element report_error {
  tag?,
  attribute error_code { error },
  xsd:string { maxLength="512000" }?
}
</artwork></figure><!-- End inclusion: rpki-publication.xml -->

      </section>
    </section>

<!-- Reworked examples.   Needs checking with another OS/browser setup to confirm.
-->

    <section title="Examples">
      <t>
	Following are examples of various queries and the
	corresponding replies for the RPKI publication protocol
      </t>

      <section title="&lt;config/&gt; Set Query">
	<!-- Begin inclusion: example.config-set-query.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="query"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;config
      action="set"&gt;
    &lt;bpki_crl&gt;
      MIIBezBlAgEBMA0GCSqGSIb3DQEBCwUAMCMxITAfBgNVBAMTGFRlc3QgQ2Vy
      dGlmaWNhdGUgcHViZCBUQRcNMDgwNjAyMjE0OTQ1WhcNMDgwNzAyMjE0OTQ1
      WqAOMAwwCgYDVR0UBAMCAQEwDQYJKoZIhvcNAQELBQADggEBAFWCWgBl4ljV
      qX/CHo+RpqYtvmKMnjPVflMXUB7i28RGP4DAq4l7deDU7Q82xEJyE4TXMWDW
      AV6UG6uUGum0VHWOcj9ohqyiZUGfOsKg2hbwkETm8sAENOsi1yNdyKGk6jZ1
      6aF5fubxQqZa1pdGCSac1/ZYC5sLLhEz3kmz+B9z9mXFVc5TgAh4dN3Gy5ft
      F8zZAFpDGnS4biCnRVqhGv6R0Lh/5xmii+ZU6kNDhbeMsjJg+ZOmtN+wMeHS
      Ibjiy0WuuaZ3k2xSh0C94anrHBZAvvCRhbazjR0Ef5OMZ5lcllw3uO8IHuoi
      sHKkehy4Y0GySdj98fV+OuiRTH9vt/M=
    &lt;/bpki_crl&gt;
  &lt;/config&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.config-set-query.xml -->
      </section>

      <section title="&lt;config/&gt; Set Reply">
	<!-- Begin inclusion: example.config-set-reply.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="reply"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;config
      action="set"/&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.config-set-reply.xml -->	      
      </section>

      <section title="&lt;config/&gt; Get Query">
	<!-- Begin inclusion: example.config-get-query.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="query"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;config
      action="get"/&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.config-get-query.xml -->
      </section>

      <section title="&lt;config/&gt; Get Reply">
	<!-- Begin inclusion: example.config-get-reply.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="reply"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;config
      action="get"&gt;
    &lt;bpki_crl&gt;
      MIIBezBlAgEBMA0GCSqGSIb3DQEBCwUAMCMxITAfBgNVBAMTGFRlc3QgQ2Vy
      dGlmaWNhdGUgcHViZCBUQRcNMDgwNjAyMjE0OTQ1WhcNMDgwNzAyMjE0OTQ1
      WqAOMAwwCgYDVR0UBAMCAQEwDQYJKoZIhvcNAQELBQADggEBAFWCWgBl4ljV
      qX/CHo+RpqYtvmKMnjPVflMXUB7i28RGP4DAq4l7deDU7Q82xEJyE4TXMWDW
      AV6UG6uUGum0VHWOcj9ohqyiZUGfOsKg2hbwkETm8sAENOsi1yNdyKGk6jZ1
      6aF5fubxQqZa1pdGCSac1/ZYC5sLLhEz3kmz+B9z9mXFVc5TgAh4dN3Gy5ft
      F8zZAFpDGnS4biCnRVqhGv6R0Lh/5xmii+ZU6kNDhbeMsjJg+ZOmtN+wMeHS
      Ibjiy0WuuaZ3k2xSh0C94anrHBZAvvCRhbazjR0Ef5OMZ5lcllw3uO8IHuoi
      sHKkehy4Y0GySdj98fV+OuiRTH9vt/M=
    &lt;/bpki_crl&gt;
  &lt;/config&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.config-get-reply.xml -->
      </section>

      <section title="&lt;client/&gt; Create Query">
	<!-- Begin inclusion: example.client-create-query.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="query"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;client
      action="create"
      base_uri="rsync://wombat.invalid/"
      client_handle="3"&gt;
    &lt;bpki_cert&gt;
      MIIDGzCCAgOgAwIBAgIJAKi+/+wUhQlxMA0GCSqGSIb3DQEBBQUAMCQxIjAg
      BgNVBAMTGVRlc3QgQ2VydGlmaWNhdGUgQm9iIFJvb3QwHhcNMDcwODAxMTk1
      MzEwWhcNMDcwODMxMTk1MzEwWjAkMSIwIAYDVQQDExlUZXN0IENlcnRpZmlj
      YXRlIEJvYiBSb290MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
      rKYUtJaM5PH5917SG2ACc7iBYdQO2HYyu8Gb6i9Q2Gxc3cWEX7RTBvgOL79p
      Wf3GIdnoupzMnoZVtY3GUx2G/0WkmLui2TCeDhcfXdQ4rcp8J3V/6ESj+yuE
      PPOG8UN17mUKKgujrch6ZvgCDO9AyOK/uXu+ABQXTPsn2pVe2EVh3V004ShL
      i8GKgVdqb/rW/6GTg0Xb/zLT6WWMuT++6sXTlztJdQYkRamJvKfQDU1naC8m
      AkGf79Tba0xyBGAUII0GfREY6t4/+NAP2Yyb3xNlBqcJoTov0JfNKHZcCZeP
      r79j7LK/hkZxxip+Na9xDpE+oQRV+DRukCRJdiqg+wIDAQABo1AwTjAMBgNV
      HRMEBTADAQH/MB0GA1UdDgQWBBTDEsXJe6pjAQD4ULlB7+GMDBlimTAfBgNV
      HSMEGDAWgBTDEsXJe6pjAQD4ULlB7+GMDBlimTANBgkqhkiG9w0BAQUFAAOC
      AQEAWWkNcW6S1tKKqtzJsdfhjJiAAPQmOXJskv0ta/8f6Acgcum1YieNdtT0
      n96P7CUHOWP8QBb91JzeewR7b6WJLwb1Offs3wNq3kk75pJe89r4XY39EZHh
      MW+Dv0PhIKu2CgD4LeyH1FVTQkF/QObGEmkn+s+HTsuzd1l2VLwcP1Smsqep
      6LAlFj62qqaIJzNeQ9NVkBqtkygnYlBOkaBTHfQTux3jYNpEo8JJB5e/WFdH
      YyMNrG2xMOtIC7T4+IOHgT8PgrNhaeDg9ctewj0X8Qi9nI9nXeinicLX8vj6
      hdEq3ORv7RZMJNYqv1HQ3wUE2B7fCPFv7EUwzaCds1kgRQ==
    &lt;/bpki_cert&gt;
  &lt;/client&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.client-create-query.xml -->
      </section>

      <section title="&lt;client/&gt; Create Reply">
	<!-- Begin inclusion: example.client-create-reply.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="reply"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;client
      action="create"
      client_handle="3"/&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.client-create-reply.xml -->
      </section>

      <section title="&lt;client/&gt; Set Query">
	<!-- Begin inclusion: example.client-set-query.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="query"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;client
      action="set"
      client_handle="3"&gt;
    &lt;bpki_cert&gt;
      MIIDGzCCAgOgAwIBAgIJAKi+/+wUhQlxMA0GCSqGSIb3DQEBBQUAMCQxIjAg
      BgNVBAMTGVRlc3QgQ2VydGlmaWNhdGUgQm9iIFJvb3QwHhcNMDcwODAxMTk1
      MzEwWhcNMDcwODMxMTk1MzEwWjAkMSIwIAYDVQQDExlUZXN0IENlcnRpZmlj
      YXRlIEJvYiBSb290MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
      rKYUtJaM5PH5917SG2ACc7iBYdQO2HYyu8Gb6i9Q2Gxc3cWEX7RTBvgOL79p
      Wf3GIdnoupzMnoZVtY3GUx2G/0WkmLui2TCeDhcfXdQ4rcp8J3V/6ESj+yuE
      PPOG8UN17mUKKgujrch6ZvgCDO9AyOK/uXu+ABQXTPsn2pVe2EVh3V004ShL
      i8GKgVdqb/rW/6GTg0Xb/zLT6WWMuT++6sXTlztJdQYkRamJvKfQDU1naC8m
      AkGf79Tba0xyBGAUII0GfREY6t4/+NAP2Yyb3xNlBqcJoTov0JfNKHZcCZeP
      r79j7LK/hkZxxip+Na9xDpE+oQRV+DRukCRJdiqg+wIDAQABo1AwTjAMBgNV
      HRMEBTADAQH/MB0GA1UdDgQWBBTDEsXJe6pjAQD4ULlB7+GMDBlimTAfBgNV
      HSMEGDAWgBTDEsXJe6pjAQD4ULlB7+GMDBlimTANBgkqhkiG9w0BAQUFAAOC
      AQEAWWkNcW6S1tKKqtzJsdfhjJiAAPQmOXJskv0ta/8f6Acgcum1YieNdtT0
      n96P7CUHOWP8QBb91JzeewR7b6WJLwb1Offs3wNq3kk75pJe89r4XY39EZHh
      MW+Dv0PhIKu2CgD4LeyH1FVTQkF/QObGEmkn+s+HTsuzd1l2VLwcP1Smsqep
      6LAlFj62qqaIJzNeQ9NVkBqtkygnYlBOkaBTHfQTux3jYNpEo8JJB5e/WFdH
      YyMNrG2xMOtIC7T4+IOHgT8PgrNhaeDg9ctewj0X8Qi9nI9nXeinicLX8vj6
      hdEq3ORv7RZMJNYqv1HQ3wUE2B7fCPFv7EUwzaCds1kgRQ==
    &lt;/bpki_cert&gt;
  &lt;/client&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.client-set-query.xml -->
      </section>

      <section title="&lt;client/&gt; Set Reply">
	<!-- Begin inclusion: example.client-set-reply.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="reply"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;client
      action="set"
      client_handle="3"/&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.client-set-reply.xml -->
      </section>

      <section title="&lt;client/&gt; Get Query">
	<!-- Begin inclusion: example.client-get-query.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="query"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;client
      action="get"
      client_handle="3"/&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.client-get-query.xml -->
      </section>

      <section title="&lt;client/&gt; Get Reply">
	<!-- Begin inclusion: example.client-get-reply.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="reply"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;client
      action="get"
      base_uri="rsync://wombat.invalid/"
      client_handle="3"&gt;
    &lt;bpki_cert&gt;
      MIIDGzCCAgOgAwIBAgIJAKi+/+wUhQlxMA0GCSqGSIb3DQEBBQUAMCQxIjAg
      BgNVBAMTGVRlc3QgQ2VydGlmaWNhdGUgQm9iIFJvb3QwHhcNMDcwODAxMTk1
      MzEwWhcNMDcwODMxMTk1MzEwWjAkMSIwIAYDVQQDExlUZXN0IENlcnRpZmlj
      YXRlIEJvYiBSb290MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
      rKYUtJaM5PH5917SG2ACc7iBYdQO2HYyu8Gb6i9Q2Gxc3cWEX7RTBvgOL79p
      Wf3GIdnoupzMnoZVtY3GUx2G/0WkmLui2TCeDhcfXdQ4rcp8J3V/6ESj+yuE
      PPOG8UN17mUKKgujrch6ZvgCDO9AyOK/uXu+ABQXTPsn2pVe2EVh3V004ShL
      i8GKgVdqb/rW/6GTg0Xb/zLT6WWMuT++6sXTlztJdQYkRamJvKfQDU1naC8m
      AkGf79Tba0xyBGAUII0GfREY6t4/+NAP2Yyb3xNlBqcJoTov0JfNKHZcCZeP
      r79j7LK/hkZxxip+Na9xDpE+oQRV+DRukCRJdiqg+wIDAQABo1AwTjAMBgNV
      HRMEBTADAQH/MB0GA1UdDgQWBBTDEsXJe6pjAQD4ULlB7+GMDBlimTAfBgNV
      HSMEGDAWgBTDEsXJe6pjAQD4ULlB7+GMDBlimTANBgkqhkiG9w0BAQUFAAOC
      AQEAWWkNcW6S1tKKqtzJsdfhjJiAAPQmOXJskv0ta/8f6Acgcum1YieNdtT0
      n96P7CUHOWP8QBb91JzeewR7b6WJLwb1Offs3wNq3kk75pJe89r4XY39EZHh
      MW+Dv0PhIKu2CgD4LeyH1FVTQkF/QObGEmkn+s+HTsuzd1l2VLwcP1Smsqep
      6LAlFj62qqaIJzNeQ9NVkBqtkygnYlBOkaBTHfQTux3jYNpEo8JJB5e/WFdH
      YyMNrG2xMOtIC7T4+IOHgT8PgrNhaeDg9ctewj0X8Qi9nI9nXeinicLX8vj6
      hdEq3ORv7RZMJNYqv1HQ3wUE2B7fCPFv7EUwzaCds1kgRQ==
    &lt;/bpki_cert&gt;
  &lt;/client&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.client-get-reply.xml -->
      </section>

      <section title="&lt;client/&gt; List Query">
	<!-- Begin inclusion: example.client-list-query.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="query"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;client
      action="list"/&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.client-list-query.xml -->
      </section>

      <section title="&lt;client/&gt; List Reply">
	<!-- Begin inclusion: example.client-list-reply.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="reply"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;client
      action="list"
      client_handle="3"&gt;
    &lt;bpki_cert&gt;
      MIIDGzCCAgOgAwIBAgIJAKi+/+wUhQlxMA0GCSqGSIb3DQEBBQUAMCQxIjAg
      BgNVBAMTGVRlc3QgQ2VydGlmaWNhdGUgQm9iIFJvb3QwHhcNMDcwODAxMTk1
      MzEwWhcNMDcwODMxMTk1MzEwWjAkMSIwIAYDVQQDExlUZXN0IENlcnRpZmlj
      YXRlIEJvYiBSb290MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
      rKYUtJaM5PH5917SG2ACc7iBYdQO2HYyu8Gb6i9Q2Gxc3cWEX7RTBvgOL79p
      Wf3GIdnoupzMnoZVtY3GUx2G/0WkmLui2TCeDhcfXdQ4rcp8J3V/6ESj+yuE
      PPOG8UN17mUKKgujrch6ZvgCDO9AyOK/uXu+ABQXTPsn2pVe2EVh3V004ShL
      i8GKgVdqb/rW/6GTg0Xb/zLT6WWMuT++6sXTlztJdQYkRamJvKfQDU1naC8m
      AkGf79Tba0xyBGAUII0GfREY6t4/+NAP2Yyb3xNlBqcJoTov0JfNKHZcCZeP
      r79j7LK/hkZxxip+Na9xDpE+oQRV+DRukCRJdiqg+wIDAQABo1AwTjAMBgNV
      HRMEBTADAQH/MB0GA1UdDgQWBBTDEsXJe6pjAQD4ULlB7+GMDBlimTAfBgNV
      HSMEGDAWgBTDEsXJe6pjAQD4ULlB7+GMDBlimTANBgkqhkiG9w0BAQUFAAOC
      AQEAWWkNcW6S1tKKqtzJsdfhjJiAAPQmOXJskv0ta/8f6Acgcum1YieNdtT0
      n96P7CUHOWP8QBb91JzeewR7b6WJLwb1Offs3wNq3kk75pJe89r4XY39EZHh
      MW+Dv0PhIKu2CgD4LeyH1FVTQkF/QObGEmkn+s+HTsuzd1l2VLwcP1Smsqep
      6LAlFj62qqaIJzNeQ9NVkBqtkygnYlBOkaBTHfQTux3jYNpEo8JJB5e/WFdH
      YyMNrG2xMOtIC7T4+IOHgT8PgrNhaeDg9ctewj0X8Qi9nI9nXeinicLX8vj6
      hdEq3ORv7RZMJNYqv1HQ3wUE2B7fCPFv7EUwzaCds1kgRQ==
    &lt;/bpki_cert&gt;
  &lt;/client&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.client-list-reply.xml -->
      </section>

      <section title="&lt;client/&gt; Destroy Query">
	<!-- Begin inclusion: example.client-destroy-query.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="query"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;client
      action="destroy"
      client_handle="3"/&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.client-destroy-query.xml -->
      </section>

      <section title="&lt;client/&gt; Destroy Reply">
	<!-- Begin inclusion: example.client-destroy-reply.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="reply"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;client
      action="destroy"
      client_handle="3"/&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.client-destroy-reply.xml -->
      </section>

      <section title="&lt;publish/&gt; Query">
	<!-- Begin inclusion: example.publish-query.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="query"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;publish
      uri="rsync://wombat.invalid/Alice/blCrcCp9ltyPDNzYKPfxc.cer"&gt;
      MIIE+jCCA+KgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAzMTEwLwYDVQQDEyhE
      RjRBODAxN0U2NkE5RTkxNzJFNDYxMkQ4Q0Y0QzgzRjIzOERFMkEzMB4XDTA4
      MDUyMjE4MDUxMloXDTA4MDUyNDE3NTQ1M1owMzExMC8GA1UEAxMoOEZCODIx
      OEYwNkU1MEFCNzAyQTdEOTZEQzhGMENEQ0Q4MjhGN0YxNzCCASIwDQYJKoZI
      hvcNAQEBBQADggEPADCCAQoCggEBAMeziKp0k5nP7v6SZoNsXIMQYRgNtC6F
      r/9Xm/1yQHomiPqHUk47rHhGojYiK5AhkrwoYhkH4UjJl2iwklDYczXuaBU3
      F5qrKlZ4aZnjIxdlP7+hktVpeApL6yuJTUAYeC3UIxnLDVdD6phydZ/FOQlu
      ffiNDjzteCCvoyOUatqt8WB+oND6LToHp028g1YUYLHG6mur0dPdcHOVXLSm
      UDuZ1HDz1nDuYvIVKjB/MpH9aW9XeaQ6ZFIlZVPwuuvI2brR+ThH7Gv27GL/
      o8qFdC300VQfoTZ+rKPGDE8K1cI906BL4kiwx9z0oiDcE96QCz+B0vsjc9mG
      aA1jgAxlXWsCAwEAAaOCAhcwggITMB0GA1UdDgQWBBSPuCGPBuUKtwKn2W3I
      8M3Ngo9/FzAfBgNVHSMEGDAWgBTfSoAX5mqekXLkYS2M9Mg/I43iozBVBgNV
      HR8ETjBMMEqgSKBGhkRyc3luYzovL2xvY2FsaG9zdDo0NDAwL3Rlc3RiZWQv
      UklSLzEvMzBxQUYtWnFucEZ5NUdFdGpQVElQeU9ONHFNLmNybDBFBggrBgEF
      BQcBAQQ5MDcwNQYIKwYBBQUHMAKGKXJzeW5jOi8vbG9jYWxob3N0OjQ0MDAv
      dGVzdGJlZC9XT01CQVQuY2VyMBgGA1UdIAEB/wQOMAwwCgYIKwYBBQUHDgIw
      DwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwgZsGCCsGAQUFBwEL
      BIGOMIGLMDQGCCsGAQUFBzAFhihyc3luYzovL2xvY2FsaG9zdDo0NDAwL3Rl
      c3RiZWQvUklSL1IwLzEvMFMGCCsGAQUFBzAKhkdyc3luYzovL2xvY2FsaG9z
      dDo0NDAwL3Rlc3RiZWQvUklSL1IwLzEvajdnaGp3YmxDcmNDcDlsdHlQRE56
      WUtQZnhjLm1uZjAaBggrBgEFBQcBCAEB/wQLMAmgBzAFAgMA/BUwPgYIKwYB
      BQUHAQcBAf8ELzAtMCsEAgABMCUDAwAKAzAOAwUAwAACAQMFAcAAAiAwDgMF
      AsAAAiwDBQDAAAJkMA0GCSqGSIb3DQEBCwUAA4IBAQCEhuH7jtI2PJY6+zwv
      306vmCuXhtu9Lr2mmRw2ZErB8EMcb5xypMrNqMoKeu14K2x4a4RPJkK4yATh
      M81FPNRsU5mM0acIRnAPtxjHvPME7PHN2w2nGLASRsZmaa+b8A7SSOxVcFUR
      azENztppsolHeTpm0cpLItK7mNpudUg1JGuFo94VLf1MnE2EqARG1vTsNhel
      /SM/UvOArCCOBvf0Gz7kSuupDSZ7qx+LiDmtEsLdbGNQBiYPbLrDk41PHrxd
      x28qIj7ejZkRzNFw/3pi8/XK281h8zeHoFVu6ghRPy5dbOA4akX/KG6b8XIx
      0iwPYdLiDbdWFbtTdPcXBauY
    &lt;/publish&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.publish-query.xml -->
      </section>

      <section title="&lt;publish/&gt; Reply">
	<!-- Begin inclusion: example.publish-reply.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="reply"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;publish
      uri="rsync://wombat.invalid/Alice/blCrcCp9ltyPDNzYKPfxc.cer"/&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.publish-reply.xml -->
      </section>

      <section title="&lt;withdraw/&gt; Query">
	<!-- Begin inclusion: example.withdraw-query.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="query"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;withdraw
      uri="rsync://wombat.invalid/Alice/blCrcCp9ltyPDNzYKPfxc.cer"/&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.withdraw-query.xml -->
      </section>

      <section title="&lt;withdraw/&gt; Reply">
	<!-- Begin inclusion: example.withdraw-reply.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="reply"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;withdraw
      uri="rsync://wombat.invalid/Alice/blCrcCp9ltyPDNzYKPfxc.cer"/&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.withdraw-reply.xml -->
      </section>

      <section title="&lt;report_error/&gt; With Text">
	<!-- Begin inclusion: example.report-error-1-reply.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="reply"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;report_error
      error_code="your_hair_is_on_fire"&gt;
    Shampooing with sterno again, are we?
  &lt;/report_error&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.report-error-1-reply.xml -->
      </section>

      <section title="&lt;report_error/&gt; Without Text">
	<!-- Begin inclusion: example.report-error-2-reply.xml --><!-- Automatically generated, do not edit. --><figure><artwork>
&lt;msg
    type="reply"
    version="2"
    xmlns="http://www.hactrn.net/uris/rpki/publication-spec/"&gt;
  &lt;report_error
      error_code="your_hair_is_on_fire"/&gt;
&lt;/msg&gt;
</artwork></figure><!-- End inclusion: example.report-error-2-reply.xml -->
      </section>

    </section>

    <section title="Operational Considerations">

      <t>
	There are two basic options open to the repository operator as to how
	the publication tree is laid out.  The first option is simple: each
	publication client is given its own directory one level below the top
	of the rcynic module, and there is no overlap between the publication
	spaces used by different clients.  For example:
      </t>

      <t>
	rsync://example.org/rpki/Alice/		<vspace/>
	rsync://example.org/rpki/Bob/		<vspace/>
	rsync://example.org/rpki/Carol/
      </t>

      <t>
	This has the advantage of being very easy for the publication operator
	to manage, but has the drawback of making it difficult for relying
	parties to fetch published objects both safely and as efficiently as
	possible.
      </t>

      <t>
	Given that the mandatory-to-implement retrieval protocol for relying
	parties is rsync, a more efficient repository structure would be one
	which minimized the number of rsync fetches required.  One such
	structure would be one in which the publication directories for
	subjects were placed underneath the publication directories of their
	issuers: since the normal synchronization tree walk is top-down, this
	can significantly reduce the total number of rsync connections
	required to synchronize.  For example:
      </t>

      <t>
	rsync://example.org/rpki/Alice/			<vspace/>
	rsync://example.org/rpki/Alice/Bob/		<vspace/>
	rsync://example.org/rpki/Alice/Bob/Carol/
      </t>

      <t>
	Preliminary measurement suggests that, in the case of large numbers of
	small publication directories, the time needed to set up and tear down
	individual rsync connections becomes significant, and that a properly
	optimized tree structure can reduce synchronization time by an order
	of magnitude.
      </t>

      <t>
	The more complex tree structure does require careful attention to the
	base_uri attribute values when setting up clients.  In the example
	above, assuming that Alice issues to Bob who in turn issues to Carol,
	Alice has ceded control of a portion of her publication space to Bob,
	who has in turn ceded a portion of that to Carol, and the base_uri
	attributes in the &lt;client/&gt; setup messages should reflect this.
      </t>

      <t>
	The details of how the repository operator determines that Alice has
	given Bob permission to nest Bob's publication directory under Alice's
	is outside the scope of this protocol.
      </t>

    </section>

    <section title="IANA Considerations">
      <t>
	IANA is asked to register the application/rpki-publication
	MIME media type as follows:
      </t>
      <!-- Begin inclusion: mime-type.xml --><figure><artwork>
   MIME media type name:  application
   MIME subtype name:  rpki-publication
   Required parameters:  None
   Optional parameters:  None
   Encoding considerations:  binary
   Security considerations:  Carries an RPKI Publication Protocol
      Message, as defined in this document.
   Interoperability considerations:  None
   Published specification:  This document
   Applications which use this media type: HTTP
   Additional information:
      Magic number(s):  None
      File extension(s):
      Macintosh File Type Code(s):
   Person &amp; email address to contact for further information:
      Rob Austein &lt;sra@hactrn.net&gt;
   Intended usage:  COMMON
   Author/Change controller: Rob Austein &lt;sra@hactrn.net&gt;
</artwork></figure><!-- End inclusion: mime-type.xml -->
    </section>

    <section title="Security Considerations" anchor="security">

      <t>
	The RPKI publication protocol and the data it publishes use
	entirely separate PKIs for authentication.  The published data
	is authenticated within the RPKI, and this protocol has
	nothing to do with that authentication, nor does it require
	that the published objects be valid in the RPKI.  The
	publication protocol uses a separate Business PKI (BPKI) to
	authenticate its messages.
      </t>
      <t>
	Each of the RPKI publication protocol messages is CMS-signed.
	Because of that protection at the application layer, this
	protocol does not require the use of HTTPS or other transport
	security mechanisms. 
      </t>
      <t>
	Compromise of a publication server, perhaps through
	mismanagement of BPKI keys, could lead to a denial-of-service
	attack on the RPKI.  An attacker gaining access to BPKI keys
	could use this protocol delete (withdraw) RPKI objects,
	leading to routing changes or failures.  Accordingly, as in
	most PKIs, good key management practices are important.
      </t>

    </section>
  </middle>

  <back>
    <references title="Normative References">
      <!-- Begin inclusion: reference.RFC.6492.xml --><reference anchor="RFC6492">
  <front>
    <title>A Protocol for Provisioning Resource Certificates</title>
    <author fullname="G. Huston" initials="G." surname="Huston">
      <organization/>
    </author>
    <author fullname="R. Loomans" initials="R." surname="Loomans">
      <organization/>
    </author>
    <author fullname="B. Ellacott" initials="B." surname="Ellacott">
      <organization/>
    </author>
    <author fullname="R. Austein" initials="R." surname="Austein">
      <organization/>
    </author>
    <date month="February" year="2012"/>
    <keyword>RPKI</keyword>
    <abstract>
      <t>This document defines a framework for certificate management interactions between an Internet Number Resource issuer ("issuer") and an Internet Number Resource recipient ("subject") through the specification of a protocol for interaction between the two parties.  The protocol supports the transmission of requests from the subject, and corresponding responses from the issuer encompassing the actions of certificate issuance, certificate revocation, and certificate status information reports.  This protocol is intended to be limited to the application of Internet Number Resource Certificate management and is not intended to be used as part of a more general certificate management framework. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6492"/>
  <format type="TXT" octets="65896" target="http://www.rfc-editor.org/rfc/rfc6492.txt"/>
  <!-- current-status PROPOSED STANDARD -->
  <!-- publication-status PROPOSED STANDARD -->
</reference><!-- End inclusion: reference.RFC.6492.xml -->
      <!-- Begin inclusion: reference.RFC.2119.xml --><reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner">
      <organization/>
    </author>
    <date month="March" year="1997"/>
    <keyword>Standards</keyword>
    <keyword>Track</keyword>
    <keyword>Documents</keyword>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized.  This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="BCP" value="14"/>
  <format type="TXT" octets="4723" target="http://www.rfc-editor.org/rfc/rfc2119.txt"/>
  <!-- current-status BEST CURRENT PRACTICE -->
  <!-- publication-status BEST CURRENT PRACTICE -->
</reference><!-- End inclusion: reference.RFC.2119.xml --> 
      <!-- Begin inclusion: reference.RFC.5652.xml --><reference anchor="RFC5652">
  <front>
    <title>Cryptographic Message Syntax (CMS)</title>
    <author fullname="R. Housley" initials="R." surname="Housley">
      <organization/>
    </author>
    <date month="September" year="2009"/>
    <keyword>digital signature</keyword>
    <keyword>message content</keyword>
    <abstract>
      <t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5652"/>
  <seriesInfo name="STD" value="70"/>
  <format type="TXT" octets="126813" target="http://www.rfc-editor.org/rfc/rfc5652.txt"/>
  <!-- obsoletes RFC3852 -->
  <!-- current-status INTERNET STANDARD -->
  <!-- publication-status DRAFT STANDARD -->
</reference><!-- End inclusion: reference.RFC.5652.xml --> 
    </references>
    <references title="Informative References">
      <!-- Begin inclusion: reference.RFC.6480.xml --><reference anchor="RFC6480">
  <front>
    <title>An Infrastructure to Support Secure Internet Routing</title>
    <author fullname="M. Lepinski" initials="M." surname="Lepinski">
      <organization/>
    </author>
    <author fullname="S. Kent" initials="S." surname="Kent">
      <organization/>
    </author>
    <date month="February" year="2012"/>
    <keyword>RPKI</keyword>
    <keyword>BGP</keyword>
    <keyword>ROA</keyword>
    <abstract>
      <t>This document describes an architecture for an infrastructure to support improved security of Internet routing.  The foundation of this architecture is a Resource Public Key Infrastructure (RPKI) that represents the allocation hierarchy of IP address space and Autonomous System (AS) numbers; and a distributed repository system for storing and disseminating the data objects that comprise the RPKI, as well as other signed objects necessary for improved routing security.  As an initial application of this architecture, the document describes how a legitimate holder of IP address space can explicitly and verifiably authorize one or more ASes to originate routes to that address space.  Such verifiable authorizations could be used, for example, to more securely construct BGP route filters.  This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6480"/>
  <format type="TXT" octets="62127" target="http://www.rfc-editor.org/rfc/rfc6480.txt"/>
  <!-- current-status INFORMATIONAL -->
  <!-- publication-status INFORMATIONAL -->
</reference><!-- End inclusion: reference.RFC.6480.xml -->
    </references>
  </back>

</rfc><!--
 - Local Variables:
 - mode:sgml
 - End:
-->
