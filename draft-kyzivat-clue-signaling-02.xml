<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc3667.dtd">
<?rfc toc='yes'?>
<?rfc tocdepth='4'?>
<?rfc compact="yes"?>
<rfc updates="5234" category="std" ipr="trust200902" docName='draft-kyzivat-clue-signaling-02'>

<!-- Notes:

Paul's messages from 12/18/12 4:11PM and 12/19/12 11:21AM
formed a starting point for this draft.

-->

<front>
   <title abbrev="CLUE Signaling">
      CLUE Signaling
   </title>
   <author initials="P." surname="Kyzivat" fullname="Paul Kyzivat">
      <organization>Huawei</organization>
      <address>
         <email>pkyzivat@alum.mit.edu</email>
      </address>
   </author>
   <author initials="L." surname="Xiao" fullname="Lennard Xiao">
      <organization>Huawei</organization>
      <address>
         <email>lennard.xiao@huawei.com</email>
      </address>
   </author>
   <author initials="C." surname="Groves" fullname="Christian Groves">
      <organization>Huawei</organization>
      <address>
         <email>Christian.Groves@nteczone.com</email>
      </address>
   </author>
   <date year="2013" />
   <abstract>
      <t>

This document specifies how signaling is conducted in the course of CLUE sessions.
This includes how SIP/SDP signaling is applied to CLUE sessions as well as defining 
a CLUE-specific signaling protocol that complements SIP/SDP and supports negotiation
of CLUE application level data.

      </t>
   </abstract>
</front>
<middle>
   <section title="Introduction">
      <t>

This document specifies how signaling is conducted in the course of CLUE sessions.
This includes how SIP/SDP signaling is applied to CLUE sessions as well as defining 
a CLUE-specific signaling protocol that complements SIP/SDP and supports negotiation
of CLUE application level data. 

      </t>
      <t>

[Yes, this is a dup of the abstract for now. Eventually it should say more.]

      </t>

   </section>

   <section title="Terminology">
      <t>

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.

      </t>
      <t>

This document draws liberally from the terminology defined in the
<xref target="I-D.ietf-clue-framework">CLUE Framework</xref>.

      </t>

      <t>

Other terms introduced here:
<vspace blankLines='1'/>

      </t>
      <list style='hanging'>
         <t hangText="CLUE Channel:">

A reliable, bidirectional, transport mechanism used to convey CLUE messages.
A CLUE channel consists of one SCTP stream in each direction over a DTLS/SCTP session.
<vspace blankLines='1'/>

         </t>

      </list>

   </section>

   <section title="CLUE-Specific Signaling Protocol " anchor="sec.protocol">
      <t>
The <xref target="I-D.ietf-clue-framework">CLUE Framework</xref> mentions a CLUE-specific 
protocol for the exchange of ADVERTISEMENT and CONFIGURE messages, but gives little detail.
The <xref target="I-D.presta-clue-data-model-schema">Data Model</xref> specifies a model
and XML representation for CLUE-related data, but doesn't currently specify exactly what
data belongs in each message, or how messages are sequenced. 
This document provides the detail missing from those documents.
      </t>

         <section title="Protocol Versioning, Options & Extensions" anchor="sec.versioning">

            <section title="Versioning">
               <t>
There must be some provision for identifying incompatible protocol versions. 
               </t>
               <t>
NOTE: We probably don't want to have incompatible versions.
Typically changes will be introduced in a backward compatible way.
But a time may come when this isn't possible, and we should be prepared for that.
This is more likely to occur before an RFC is published. 
While it is probably unwise to deploy a product based on a draft,
there will certainly be prototypes developed for testing, and those tests
may lead to a need for incompatible change. So whatever the mechanism is,
it should be applicable to changes that occur from draft to draft, as well
as after an RFC has been published.
               </t>
            </section>

            <section title="Options and/or Extensions">
               <t>
There must be some provision for dealing with optional-to-implement features in the 
specification, and/or for backward compatible extensions to the protocol. 
These are superficially different, but in practice they are more-or-less equivalent.
To an implementation of the base protocol and some extensions, those extensions must
be viewed as optional-to-implement features in peers.
               </t>
               <t>
One decision is whether extensions may be implemented mix-and-match, or whether there is
a sequence of extensions, and one extension may only be supported if all the prior extensions
have been supported.
               </t>
            </section>

            <section title="Negotiation">
               <t>
Both version and options can be negotiated. Some mechanisms may work for both,
while others are only appropriate for one of the other.
Some possibilities:
               </t>
               <list style='symbols'>
                  <t>
No negotiation at all. 
Instead, unrecognized syntax in certain "extension points" is to be ignored.
If it is recognized, then a corresponding extension specification defines
what to do.
                  </t>
                  <t>
Negotiate via the SIP signaling.
                  </t>
                  <t>
Negotiate as part of the O/A exchange that establishes the channel. 
(E.g. it is likely that individual channels of the SCTP association will be 
specified in SDP with a specific sub-protocol type. There could be a separate
sub-protocol for each new version.)
                  </t>
                  <t>
Negotiate within the CLUE channel, via a special message exchange, 
before exchanging "normal" CLUE messages.
                  </t>
                  <t>
Declare versioning in every CLUE message. Define errors for unsupported
versions and fallback to earlier versions.
                  </t>
               </list>
            </section>

            <section title="Principles">
               <list style='symbols'>
                  <t>
CLUE SHOULD allow forwards and backwards compatibility through a version and extension mechanism. 
Forward compatibility allows a version of a protocol to communicate effectively with and interwork 
with future versions of the protocol. 
A version should not restrict the future protocol from providing extra capabilities. 
                 </t>
                  <t>
Whenever possible backwards compatibility SHALL be maintained. 
Backward compatibility rules will be defined to ensure that endpoints implementing 
future versions of CLUE will be able to send protocol messages of the previous versions 
which will be understood and fully processed by the remote endpoint.
                  </t>
                  <t>
Existing protocol elements should not be changed unless a protocol error needs to be corrected.
                  </t>
                  <t>
The semantics of existing elements and values should not be changed.                  </t>
                  <t>
Established rules for formatting and encoding messages and elements should not be changed.
                  </t>
                  <t>
When information elements are found to be obsolete they can be marked as not used. 
However, the identifier for that information element will be marked as reserved. 
In that way it cannot be used in future versions.
                  </t>
               </list>
            </section>
         </section>

         <section title="CLUE Messages" anchor="sec.messages">
            <t>
CLUE messages are encoded in XML.
The <xref target="I-D.presta-clue-data-model-schema">Data Model</xref>
defines many/most of the elements from which CLUE messages are composed.
The content of each individual CLUE message could be defined by reference to an
XML element type defined in the Data Model. 
Or this document could itself define an XML element type for each message,
with much of the content of those elements being drawn from the Data Model.
Which approach to follow is TBD.
            </t>

            <section title="ADVERTISEMENT Message">
               <t>
Most of the content needed for the ADVERTISEMENT message is already defined in the Data Model.
But the Data Model has't been constructed with that in mind. 
So either the Data Model needs revision with a focus on the needs of signaling,
or else additional schema is needed here.
               </t>
           </section>

            <section title="CONFIGURE Message">
               <t>
The CONFIGURE message should probably also be based primarily on data elements
defined in the Data Model.
               </t>
                <t>
The CONFIGURE message must make reference (explicitly or implicitly) 
to the ADVERTISEMENT message on which it is based. 
The mechanism for doing this must be specified.
               </t>
            </section>

            <section title="NAK/ERROR Message">
               <t>
There needs to be a message to report errors with other messages.
The details of form, content, and usage still need to be specified,
and need to be tuned to the details of the protocol.
Errors this message must be able to report include:
<vspace blankLines='1'/>
               </t>

               <list style='hanging'>
                  <t hangText="Syntax error in message:">
The message has been disregarded due to a syntax error detected at the message level.
The message does not conform to the productions of messages in [Protocol Document]. 
Used when the message cannot be parsed.
                  </t>
                  <t hangText="Sequencing Error:">
Sequence number has already been used, or is greater than the expected number.
(Details of possible errors depend upon the specific sequence numbering mechanism.)
                  </t>
                  <t hangText="Version not supported:">
This indicates a lack of support for the protocol version indicated in the message header of the message. 
In the case of the version number being indicated in the message header, 
the message contents are disregarded.
                  </t>
                  <t hangText="Option not supported:">
This indicates a lack of support for the protocol option the used in the message. 
The message contents are disregarded.
                  </t>
                  <t hangText="Unknown capture identity:">
The received Configure message contains an unknown capture identity 
not previously declared by an Advertisement. 
The message contents are disregarded.
                  </t>
                  <t hangText="Invalid identity:">
The received message contains an invalid capture identity. 
For example a duplicated Capture scene identity or some other semantically incorrect usage. 
The message contents are disregarded.
                  </t>
                  <t hangText="Invalid value:">
The received message contains an invalid parameter value. 
The value is not according to the protocol definition in [protocol document] 
or according the extension documentation.
                  </t>
                  <t hangText="Missing element:">
The received message is missing an element. 
Certain parameters require multiple values, 
e.g. Point of capture requires X,Y,Z co-ordinates 
if one or more elements are missing this error code is used.
                  </t>
                  <t hangText="Conflicting parameters or values:">
The received message contains multiple values that may not be used together.
                  </t>
                  <t hangText="Invalid capture area:">
The received message defines a capture area that cannot be rendered in a sensible manner. 
For example the capture area does not define a quadrilateral region.
                  </t>
                  <t hangText="Invalid point of line of capture:">
The indicated co-ordinate for the point on line of capture is invalid. 
For example: does not lie between the point of capture and the area of capture 
or it is the same as the point of capture.
                  </t>
                  <t hangText="Invalid capture scene entry:">
The message contains an invalid capture scene entry. 
For example the capture scene entry contains more than one media type.
                  </t>
                  <t hangText="Capture area out of scene area:">
The received message includes a capture area whose region 
is outside the defined area of scene for the particular scene. 
Note: this is not used if no area of scene is used.
                  </t>
                  <t hangText="Invalid Simultaneous Set:">
The simultaneous set contained in the message is invalid. 
For example the simultaneous set refers to an undefined capture set 
or does not match the specified capture scene entries.
                  </t>
                  <t hangText="Invalid Configuration:">
The Configure message requests a configuration that the provider cannot support.
                  </t>
                  <t hangText="Invalid Advertisement reference:">
The Configure message refers to an invalid Advertisement. 
The message refers-to/depends-upon out-of-date ADVERTISEMENT message 
or provides an invalid reference.
                  </t>
               </list>
           </section>

            <section title="Stand-alone messages or deltas?">
               <t>

Each message exchanged within a CLUE session could contain a complete description
of the state it wishes to achieve. 
Or each message could describe just the changes that it wishes to make to the current state.
Or the protocol could support both message forms.
Which direction to pursue is TBD.
               </t>
               <t>
[Paul: while this does need to be decided, it is fundamentally just an optimization.
IMO it does not have major impact on the other parts of this document,
so I would prefer to continue deferring it until we are so far along with the
remainder of the document that we can no longer defer it.]
               </t>

            </section>

            <section title="other">
               <t>
               </t>
            </section>

         </section>

         <section title="Message Acknowledgement" anchor="sec.ack">

            <t>
The CLUE channel is reliable, so there is no need for acknowledgement to
guarantee delivery. But there is still a need for application-to-application acknowledgement
to report that the message has been received, parsed, and found to be of an acceptable format.
One possibility is to introduce separate ACK and/or NAK messages.
Another possibility is to add a confirmation element to each CLUE message, 
so that confirmation can be piggybacked on the basic messages.
Some alternatives follow.
[OTHER PROPOSALS WELCOME.]
            </t>

            <section title="Explicit Acknowledgment of Each Message">
               <t>
The characteristics of this approach are:
               </t>
               <list style='symbols'>
                  <t>
There are separate request and response messages. (This is similar to SIP.)
                  </t>
                  <t>
Every request message expects exactly one response message.
                  </t>
                  <t>
Every request message carries a sequence number that identifies it.
                  </t>
                  <t>
Each end of the connection assigns sequential sequence numbers to the requests it sends.
                  </t>
                  <t>
Every response message carries the sequence number of the message to which it responds.
                  </t>
                  <t>
Responses are to be sent promptly upon the receipt of a request. (Needs more detail.)
                  </t>
                  <t>
Responses are either ACK or NAK. NAK responses also carry info describing the error.
                  </t>
                  <t>
Each CONFIGURE message is to be understood in the context of the most recent ACKed
ADVERTISEMENT message. A CONFIGURE message may be rejected if there is an outstanding
ADVERTISEMENT for which no response has been received. 
(Or it may be accepted if the advertiser is able to do so meaningfully.)
                  </t>
               </list>
            </section>

            <section title="Piggybacking ACK on Requests">
               <t>
The characteristics of this approach are:
               </t>
               <list style='symbols'>
                  <t>
Every message carries a sequence number that identifies it.
                  </t>
                  <t>
Each end of the connection assigns sequential sequence numbers to the messages it sends.
                  </t>
                  <t>
Every message carries the sequence number of the last message received and found valid. 
                  </t>
                  <t>
If a message is received and found invalid, then a NAK message is sent that refers to it
and indicates what is wrong with it.
                  </t>
                  <t>
If a valid message is received and a new message needs to be sent in response, 
then the responding message implicitly acknowledges the prior message.
                  </t>
                  <t>
If a valid message is received and there is no need to immediately send another message,
then a NO-OP message is sent to acknowledge the received message. But a NO-OP message
is never sent in response to a NO-OP message.
                  </t>
                  <t>
Each CONFIGURE message is to be understood in the context of the most recent *acknowledged*
ADVERTISEMENT message. A CONFIGURE message may be rejected if it doesn't acknowledge 
the most recently sent ADVERTISEMENT. (Or it may be accepted if the advertiser
is able to do so meaningfully.)
                  </t>
               </list>
               <t>
The general format of every message is:
                  <list style='symbols'>
                     <t>sequence # of this message</t>
                     <t>sequence # of most recently *received* and *valid* message</t>
                     <t>message type (ADVERTISEMENT, CONFIG, NO-OP, NAK)</t>
                     <t>body of the message, according to type</t>
                  </list>
(The exact representation is TBD - by XML experts.) 
               </t>
               <t>
There are loose ends to resolve here. In particular, how to acknowledge
messages after NAKing one.
               </t>
            </section>
         </section>

         <section title="Message Sequencing" anchor="sec.sequencing">

            <t>
There is a very basic introduction to this topic in section 9.4 (Message Flow) of the
<xref target="I-D.ietf-clue-framework">CLUE Framework</xref>. 
That still mentions the Consumer Capability message, which we have decided to drop.
Without that it would look like:
            </t>

            <figure align="center">
               <artwork align="center"><![CDATA[
 Media Consumer                         Media Provider
 --------------                         ------------
       |                                     |
       |<----- ADVERTISEMENT message --------|
       |                                     |
       |                                     |
       |-------- CONFIGURE message --------->|
       |                                     |
               ]]></artwork>
            </figure>
            <t>

But we need much more than this, to show multiple CONFIGUREs per ADVERTISEMENT, 
interleaving of ADVERTISEMENTs and CONFIGUREs in both directions, etc.

            </t>

            <t>
Message sequencing needs to be described at two levels:
            </t>

            <list style='symbols'>
               <t>

Basic sequencing of the CLUE messages themselves, 
without regard for the SIP/SDP signaling that may be going on at the same time.
This is useful to cover the basic concepts. That should be covered in this section.
It provides context for understanding the more detailed treatment later.
<vspace blankLines='1'/>
This could include some simple state machines.
<vspace blankLines='1'/>

               </t>
               <t>

In reality there is a complex dependency between CLUE signaling and 
SDP Offer/Answer exchanges carried in SIP signaling.
So there is a need to describe the valid ways in which these
two forms of signaling interact. That is covered in
<xref target="sec.coordination"/>.

               </t>
            </list>

         <section title="Signaling Changes in Provider State">
            <t>
Once a CLUE session has been established, ADVERTISEMENTs and CONFIGUREs exchanged,
and media is flowing, a provider may experience a change in state that has an
effect on what it wishes or is able to provide. In this case it may need to
alter what it is sending and/or send a new ADVERTISEMENT. In some cases it 
will be necessary to alter what is being sent without first sending a new
ADVERTISEMENT and waiting for a CONFIGURE conforming to it.
            </t>
            <t>
The following is a non-exhaustive list of situations and recommended actions:
            </t>
            <list style='symbols'>
               <t>
An advertised capture, that is not currently configured, is no longer available.
   <vspace blankLines='1'/>
To recover from this: Send a new ADVERTISEMENT that omits this capture. 
               </t>
               <t>
An advertised capture, that has been configured, is no longer available.
   <vspace blankLines='1'/>
To recover from this: (1) stop transmitting the configured encoding of this capture. 
(2) Send a new ADVERTISEMENT that omits this capture.
               </t>
               <t>
The provider loses some resource and must reduce the frame rate, frame size,
or resolution of a capture encoding.
   <vspace blankLines='1'/>
If the reduced values still fall within the advertised values for the capture
then the change may be made without any further signaling.
   <vspace blankLines='1'/>
If the change must be outside the range of what was advertised,
then the provider must cease transmitting the capture encoding. 
It then must send a new ADVERTISEMENT reflecting what it is now capable of delivering.
               </t>
               <t>
New or changed scenes or scene geometry. 
For instance, the addition of a new scene containing presentation captures.
Also, an MCU may make significant changes in what it advertises as new
endpoints join a conference.
               </t>
               <t>
[Add more]
               </t>
            </list>
         </section>

         <section title="Signaling Changes in Consumer State">
            <t>
If the Consumer for some reason looses the CLUE state information 
how does it ask for an Advertisement from the provider? 
There could be multiple possibilities. A error code approach? 
However error codes would typically be associated with a NACK so it may not be good for a Config message. 
Maybe send a message which means “send me a complete update”.An alternative may be to release the connection or just do new signaling to establish a new CLUE session.
            </t>
         </section>

</section>

         <section title="Message Transport" anchor="sec.transport">
            <t>

CLUE messages are transported over a bidirectional CLUE channel.  
In a two-party CLUE session, a CLUE channel connects the two endpoints.
In a CLUE conference, each endpoint has a CLUE channel connecting it to an MCU. 
(In conferences with cascaded mixers <xref target="RFC4353"/>, 
two MCUs will be connected by a CLUE channel.)

            </t>

            <section title="CLUE Channel Lifetime">
               <t>
The transport mechanism used for CLUE messages is DTLS/SCTP as specified in 
<xref target="I-D.tuexen-tsvwg-sctp-dtls-encaps"/> and 
<xref target="I-D.ietf-mmusic-sctp-sdp"/>. 
A CLUE channel consists of one SCTP stream in each direction over a DTLS/SCTP session.
The mechanism for establishing the DTLS/SCTP session is described in
<xref target="sec.sdp_oa"/>.
               </t>
               <t>
The CLUE channel will usually be offered during the initial SIP INVITE,
and remain connected for the duration of the CLUE/SIP session.
However this need not be the case. The CLUE channel may be established
mid-session after desire and capability for CLUE have been determined,
and the CLUE channel may be dropped mid-call if the desire and/or capability
to support it is lost.
               </t>
               <t>
There may be cases when it becomes necessary to "reset" the CLUE channel.
This by be as a result of an error on the underlying SCTP association,
a need to change the endpoint address of the SCTP association, 
loss of CLUE protocol state, or something else TBD.
               </t>
               <t>
The precise mechanisms used to determine when a reset is required,
and how to accomplish it and return to a well defined state are TBS.
               </t>
            </section>

            <section title="Message Error Handling" anchor="sec.transport-errors">
               <t>
We will need to specify behavior in the face of transport errors that are so
severe that they can't be managed via CLUE messaging within the CLUE channel.
Some errors of this sort are:
               <list style='symbols'>
                  <t>
Unable to establish the SCTP association after signaling it in SDP.
                  </t>
                  <t>
CLUE channel setup rejected by peer.
                  </t>
                  <t>
Error reported by transport while writing message to CLUE channel. 
                  </t>
                  <t>
Error reported by transport while reading message from CLUE channel.
                  </t>
                  <t>
Timeout - overdue acknowledgement of a CLUE message. 
(Requirements for now soon a message must be responded to are TBD.)
                  </t>
                  <t>
Application fault. CLUE protocol state lost.
                  </t>
               </list>
The worst case is to drop the entire CLUE call.
Another possibility is to fall back to legacy compatibility mode.
Or perhaps a "reset" can be done on the protocol. E.g. this might be
accomplished by sending a new O/A and establishing a replacement SCTP association.
Or a new CLUE channel might be established within the existing SCTP association.
               </t>
            </section>

         </section>

         <section title="Message Framing">
            <t>
Message framing is provided by the SCTP transport protocol.
Each CLUE message is carried in one SCTP message.
            </t>
         </section>

         <section title="other">
            <t>
            </t>
         </section>

   </section>

   <section title="CLUE use of SDP O/A" anchor="sec.sdp_oa">

      <t>
The CLUE channel is usually offered in the first SIP O/A exchange between
two parties in an intended CLUE session. The offer of the CLUE channel
is the indicator that this SIP session is proposing to establish a CLUE session.
      </t>
      <t>
(However it is also acceptable to start with a non-CLUE SIP session and upgrade it
to a CLUE session later.)
      </t>
      <t>
The mechanism for negotiating a DTLS/SCTP connection is specified in 
<xref target="I-D.ietf-mmusic-sctp-sdp"/>.
We need to specify how to select the specific pair of SCTP streams that comprise the CLUE channel.
      </t>

      <t>
Any specific usage/conventions required for coordination of SDP
offers and answers with the CLUE messages should also be described here.
      </t>
      <t>
(We have a draft 
<xref target="I-D.even-clue-sdp-clue-relation"/>
that can contribute to this.)
      </t>

   </section>

   <section title="Coordination of CLUE protocol and SDP O/A" anchor="sec.coordination">
      <t>
This should include state machines and/or call flows. These will illustrate, and then
provide normative rules for valid sequences of messages of both types.
For instance this needs to show when SDP offers and answers must occur relative to
an ADVERTISEMENT or CONFIGURE message that requires SDP changes.
      </t>
      <t>
[THIS IS A VERY IMPORTANT PART OF THIS DOCUMENT!]
      </t>

      <section title="Combined Protocol Use Cases">

<section title="Two CLUE-capable endpoints" anchor="sec-cluecapable">
<t>This is the case where two CLUE-capable endpoints are willing to 
set up a CLUE telepresence session. In the following, a possible approach 
addressing the problem is illustrated.
</t>

<figure>
 <artwork>
  <![CDATA[
	

      +----------+                      +-----------+
      |   EP1    |                      |    EP2    |
      |          |                      |           |
      +----+-----+                      +-----+-----+
           |                                  |
           |                                  |
           | INVITE (BASIC SDP+COMEDIA)       |
           |--------------------------------->|
           |                                  |
           |                                  |
           |        200 0K (BASIC SDP+COMEDIA)|
           |<---------------------------------|
           |                                  |
           |                                  |
           | ACK                              |
           |--------------------------------->|
           |                                  |
           |                                  |
           |                                  |
           |<################################>|
           |  ?? BASIC SDP MEDIA SESSION  ??  |
           |<################################>|
           |                                  |
           |                                  |
           |        CLUE CTRL CHANNEL SETUP   |
           |<================================>|
           |            ...                   |
           |<================================>|
           |   CLUE CTRL CHANNEL ESTABLISHED  |
           |<================================>|
           |                                  |
           |                                  |
           | ADVERTISEMENT 1                  |
           |*********************************>|
           |                                  |
           |                                  |
           |                  ADVERTISEMENT 2 |
           |<*********************************|
           |                                  |
           |                                  |
           |                                  |
           |                      CONFIGURE 1 |
           |<*********************************|
           |                                  |
           |                                  |
           | CONFIGURE 2                      |
           |*********************************>|
           |                                  |
           |                                  |
           |                                  |
           | REINVITE (UPDATED SDP)           |
           |--------------------------------->|
           |                                  |
           |                                  |
           |              200 0K (UPDATED SDP)|
           |<---------------------------------|
           |                                  |
           |                                  |
           | ACK                              |
           |--------------------------------->|
           |                                  |
           |<################################>|
           |   UPDATED SDP MEDIA SESSION      |
           |<################################>|
           |                                  |
           |                                  |
           |                                  |
           |                                  |
           |                                  |
           v                                  v	
	]]>
   </artwork>
  </figure>
  
  <t>
First, endpoint EP1 sends to endpoint EP2 a SIP INVITE including 
in the SDP body the basilar audio and video capabilities 
("BASIC SDP") and the information needed 
for opening a control channel to be used 
for CLUE protocol messages exchange, according to what is
 envisioned in the COMEDIA approach ("COMEDIA") 
 for DTLS/SCTP channel <xref target="I-D.ietf-mmusic-sctp-sdp"/>.  
</t>
  <t>
  After the successful SIP O/A phase, EP1 and EP2 are able to 
  exchange audio and video streams ("BASIC AUDIO AND VIDEO").
  [RP: Is this channel needed at this point of the call flow?]
  [RP: which streams are sent on this channel in this moment?]
  </t>
  
  <t>
  Moreover, another effect of the above successful SIP O/A phase,
  is the opening of the control
  channel. After the setup phase, the channel is
  established and CLUE protocol messages can flow above it.     
  </t>
  
  <t>
  CLUE protocol messages have not been formally defined yet.
  However, up to now there is a common agreement 
  on their names and their main purposes, that should be 
  following.
  </t>
  
  <t>
  CLUE protocol ADVERTISEMENT messages are used 
  to better describe the media provider's available streams 
  in order to make the media consumer able to reproduce them 
  in a more realistic fashion, as it is the
  main purpose of a telepresence session.
  These messages are needed since it is not possible in an 
  agile fashion to describe 
  spatial information and several further metadata 
  about media captures via SDP.
  </t>
  
  <t>
  In this document it is assumed that 
  ADVERTISEMENT messages contain the full description
  of the sender's telepresence room in terms of
  available media capture and encoding capabilities.
  [RP: open issue - the mapping between what is described
  in the advertisement messages and media streams 
  exchanged in the eventual basic SDP session already established]
  </t>
  
  <t>
  CLUE protocol CONFIGURE messages are used 
  to let the media consumer indicate to the 
  media provider which are the available streams
  it is interested in, so that the media provider
  can send to the media consumer what it desires.
  </t>
  
  <t>In the following, it is considered one of the 
  possible call flow that can lead to the desired 
  session configuration.
  </t>
  <t>
  EP1 sends the ADVERTISEMENT message to EP2 (ADVERTISEMENT 1), 
  which replies with a CONFIGURE message (CONFIGURE 1).
  After receiving the CONFIGURE message, EP1 assumes
  the CLUE offer/answer negotiation it started is completed.
  EP1 then can issue a REINVITE to EP2 with an SDP
  body updated accordingly to the CLUE messages exchange.  
  </t>
  <t>
   Similarly, EP2 sends its ADVERTISEMENT 
  to EP1 (ADVERTISEMENT 2), which replies with a 
  CONFIGURE (CONFIGURE 2). 
  </t>
  
<!--   <t>
  After both the CLUE Offer/Answer phase 
    both EP1 and EP2
  know the media streams desired in the teleprensence session.
  </t> -->
  <t>
   EP1  
  re-negotiates the media involved
  in the existent session via a SIP REINVITE message to EP2.
  The SDP body within the REINVITE message reflects 
  the negotiation carried on by the CLUE message exchange.
  In the case represented in figure, EP2 builds
  the 200 OK response also according to the second CLUE O/A
  negotiation.   
  </t>	  
  
  
</section>

<section title="A case with a non-CLUE-capable endpoint" 
anchor="sec-noncluecapable">

<t>
In this example, one of the two involved endpoint (EP2) 
is not CLUE-capable, i.e., it is not able to use the
CLUE protocol.
</t>

<figure>
 <artwork>
  <![CDATA[
	

      +----------+                      +-----------+
      |   EP1    |                      |    EP2    |
      |          |                      |           |
      +----+-----+                      +-----+-----+
           |                                  |
           |                                  |
           | INVITE (BASIC SDP+COMEDIA)       |
           |--------------------------------->|
           |                                  |
           |                                  |
           | 200 0K (BASIC SDP + *NO* COMEDIA)|
           |<---------------------------------|
           |                                  |
           |                                  |
           | ACK                              |
           |--------------------------------->|
           |                                  |
           |                                  |
           |                                  |
           |<################################>|
           |  ?? BASIC SDP MEDIA SESSION  ??  |
           |<################################>|
           |                                  |
           |                                  |
           |                                  |
           | REINVITE (UPDATED SDP)           |
           |--------------------------------->|
           |                                  |
           |                                  |
           |              200 0K (UPDATED SDP)|
           |<---------------------------------|
           |                                  |
           |                                  |
           | ACK                              |
           |--------------------------------->|
           |                                  |
           |<################################>|
           |   UPDATED SDP MEDIA SESSION      |
           |<################################>|
           |                                  |
           |                                  |
           |                                  |
           |                                  |
           |                                  |
           v                                  v	
	]]>
   </artwork>
  </figure>
  
  <t>
Endpoint EP1 sends to endpoint EP2 a SIP INVITE including 
in the SDP body the basilar audio and video capabilities 
("BASIC SDP") and the information needed 
for opening a control channel to be used 
for CLUE protocol messages exchange, as envisioned by the COMEDIA
approach ("COMEDIA") for DTLS/SCTP channel <xref target="I-D.ietf-mmusic-sctp-sdp"/>.  
</t>
<t>Since EP2 is not CLUE-capable, it answers with a 200 OK in which 
basic audio and video capabilities are accepted while the opening
of the CLUE channel is rejected.
</t>
<t>
From such a response, EP1 understands the peer is not
CLUE-capable. 
In this example, EP1 re-negotiates the session according
to a pre-determined bulk of media streams to be sent to non-CLUE-capable
endpoints.
</t>
</section>

      </section>
   </section>

   <section title="CLUE requirements on SDP O/A" anchor="sec.sdp_rqmts">
      <t>
Any SDP extensions required to support CLUE signaling should be specified here. 
Then we will need to take action within MMUSIC to make those happen.
This section should be empty and removed before this document becomes an RFC.
      </t>
      <t>
NOTE: The RTP mapping document 
<xref target="I-D.even-clue-rtp-mapping"/>
is also likely to call for SDP extensions.
We will have to reconcile how to coordinate these two documents.
      </t>
   </section>

   <section title="SIP Signaling" anchor="sec.sip_signaling">
      <t>
(Placeholder) This may be unremarkable. If so we can drop it.
      </t>
   </section>

   <section title="Interoperation with Legacy SIP Devices" anchor="sec.interop">
      <t>
This may just describe how the degenerate form of the general mechanisms
work for legacy devices. Or it may describe special case handling that we
mandate as part of CLUE. Or it may just discuss non-normative things for implementors
should consider.
      </t>
   </section>

   <section title="CLUE over RTCWEB">
      <t>
We may want to rule this out of scope for now. 
But we should be thinking about this.
      </t>
   </section>

   <section title="Open Issues">
      <t>

Here are issues pertinent to signaling that need resolution.
Resolution will probably result in changes somewhere in this document,
but may also impact other documents.
<vspace blankLines='1'/>

      </t>

      <list style='symbols'>
         <t>

While the preference is to multiplex multiple capture encodings over a single RTP session,
this will not always be desirable or possible. The factors that prevent multiplexing
may come from either the provider or the consumer. So the extent of multiplexing
must be negotiated. The decision about how to multiplex affects the number and
grouping of m-lines in the SDP. The endpoint of a CLUE session that sends an offer
needs to know the mapping of capture encodings to m-lines for both sides. 
<vspace blankLines='1'/>
AFAIK this issue hasn't yet been considered at all.

         </t>
      </list>
   </section>

   <section title="What else?">
      <t>
      </t>
   </section>

   <section title="Acknowledgements">
      <t>
The team focusing on this draft consists of:
Roni Even,
Rob Hansen,
Christer Holmberg,
Paul Kyzivat,
Simon Pietro-Romano,
Roberta Presta.
      </t>
      <t>
The author list should be updated as people contribute substantial text to this document.
      </t>
      <t>
(I added Lennard Xiao as an author because the material added in -02 was codeveloped with him.)
      </t>
   </section>

   <section title="IANA Considerations">
      <t>

TBD

      </t>
   </section>
   <section title="Security Considerations">
      <t>

TBD

      </t>
   </section>

   <section title="Change History">
      <list style='hanging'>
         <t hangText="-02:">

A bunch of revisions by pkyzivat: 
         <list style='symbols'>
            <t>
Moved roberta's call flows to a more appropriate place in the document.
            </t>
            <t>
New section on versioning.
            </t>
            <t>
New section on NAK.
            </t>
            <t>
A couple of possible alternatives for message acknowledgment.
            </t>
            <t>
Some discussion of when/how to signal changes in provider state.
            </t>
            <t>
Some discussion about the handling of transport errors.
            </t>
            <t>
Added a change history section.
            </t>
         </list>
These were developed by Lennard Xiao, Christian Groves and Paul, 
so added Lennard and Christian as authors.

         </t>
         <t hangText="-01:">

Updated by roberta to include some sample call flows.

         </t>
         <t hangText="-00:">

Initial version by pkyzivat. Established general outline for the document,
and specified a few things thought to represent wg consensus.

         </t>
      </list>
   </section>

</middle>

<back>
   <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.I-D.ietf-clue-framework"?>
      <?rfc include="reference.I-D.presta-clue-data-model-schema"?>
      <?rfc include="reference.I-D.ietf-mmusic-sctp-sdp"?>
      <?rfc include="reference.I-D.tuexen-tsvwg-sctp-dtls-encaps"?>
   </references>
   <references title="Informative References">
      <?rfc include="reference.RFC.4353"?>
      <?rfc include="reference.I-D.even-clue-sdp-clue-relation"?>
      <?rfc include="reference.I-D.even-clue-rtp-mapping"?>
   </references>
</back>
</rfc>
