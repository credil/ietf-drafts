<?xml version="1.0" encoding="us-ascii"?>


<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY RFC2616 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml">
  <!ENTITY RFC3040 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3040.xml">
  <!ENTITY RFC3986 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml">
  <!ENTITY RFC4732 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4732.xml">
  <!ENTITY I-D.ietf-core-coap SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-core-coap.xml">
  <!ENTITY I-D.ietf-core-observe SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-core-observe.xml">
  <!ENTITY I-D.ietf-core-block SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-core-block.xml">
  <!ENTITY I-D.ietf-core-groupcomm SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-core-groupcomm.xml">
  <!ENTITY I-D.bormann-core-simple-server-discovery SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.bormann-core-simple-server-discovery.xml">
  <!ENTITY I-D.ietf-httpbis-p1-messaging SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-httpbis-p1-messaging.xml">
  <!ENTITY I-D.ietf-httpbis-p2-semantics SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-httpbis-p2-semantics.xml">
  <!ENTITY I-D.ietf-httpbis-p7-auth SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-httpbis-p7-auth.xml">
  <!ENTITY I-D.shelby-core-resource-directory SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.shelby-core-resource-directory.xml">
  ]>

<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>

<?rfc strict="no"?>
<?rfc toc="yes"?>
<?rfc tocdepth="3"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc ipr="trust200902"
     docName="draft-ietf-core-http-mapping-00" category='info'>
<front>

  <title abbrev="HTTP-CoAP Mapping">
     Best Practices for HTTP-CoAP Mapping Implementation
  </title>

  <author initials="A.P." surname="Castellani" fullname="Angelo P. Castellani">
    <organization>University of Padova</organization>
    <address>
        <postal>
        <street>Via Gradenigo 6/B</street>
        <code>35131</code> 
        <city>Padova</city> 
        <country>Italy</country>
      </postal>
        <email>angelo@castellani.net</email>
    </address>
  </author>
  
  <author initials="S." surname="Loreto" fullname="Salvatore Loreto">
    <organization>Ericsson</organization>
    <address>
        <postal>
        <street>Hirsalantie 11</street>
        <code>02420</code> 
          <city>Jorvas</city> 
          <country>Finland</country>
        </postal>
        <email>salvatore.loreto@ericsson.com</email>
    </address>
  </author>


  <author initials="A." surname="Rahman" fullname="Akbar Rahman">
    <organization>InterDigital Communications, LLC</organization>
    <address>
        <postal>
          <street>1000 Sherbrooke Street West</street>
          <city>Montreal</city>
          <code>H3A 3G4</code>
          <country>Canada</country>
        </postal>
        <phone>+1 514 585 0761</phone>
        <email>Akbar.Rahman@InterDigital.com</email>
    </address>
  </author>

  <author initials="T." surname="Fossati" fullname="Thomas Fossati">
    <organization>KoanLogic</organization>
    <address>
        <postal>
          <street>Via di Sabbiuno 11/5</street>
          <city>Bologna</city>
          <code>40136</code>
          <country>Italy</country>
        </postal>
        <phone>+39 051 644 82 68</phone>
        <email>tho@koanlogic.com</email>
    </address>
  </author>

  <author initials="E." surname="Dijk" fullname="Esko Dijk">
    <organization>Philips Research</organization>
    <address>
        <postal>
          <street>High Tech Campus 34</street>
          <city>Eindhoven</city>
          <code>5656 AE</code>
          <country>The Netherlands</country>
        </postal>
        <email>esko.dijk@philips.com</email>
    </address>
  </author>


  <date year="2013" />
  <area>APP</area>
  <workgroup>CoRE Working Group</workgroup>
  <keyword>CoAP</keyword>
  <keyword>HTTP-CoAP mapping</keyword>
  <abstract>
     <t>This draft provides reference information for HTTP-CoAP protocol translation proxy implementors, 
    focusing primarily on the reverse proxy case.
    It details deployment options, discusses possible approaches for URI mapping,
    and provides a set of guidelines and considerations related to protocol translation.</t>
  </abstract>
</front>



<middle>

<section title="Introduction">

  <t>CoAP <xref target="I-D.ietf-core-coap"/> has been designed with the twofold aim to be an application 
     protocol specialized for constrained environments and to be easily used in REST architectures such as the Web. 
     The latter goal has led to define CoAP to easily interoperate with HTTP <xref target="RFC2616"/> through an 
     intermediary proxy which performs cross-protocol conversion.</t>

  <t>Section 10 of <xref target="I-D.ietf-core-coap"/> describes the fundamentals of the CoAP-HTTP (and vice-versa) 
     cross-protocol mapping process. However, implementing such a cross-protocol proxy can be complex,
     and many details regarding its internal procedures and design choices require further elaboration. 
     Therefore a first goal of this document is to provide more detailed information to proxy designers and
     implementers, to help implement proxies that correctly inter-work with other CoAP and HTTP client/server
     implementations that adhere to the HTTP and CoAP specifications.
  </t>
  <t>The second goal of this informational document is to define a consistent set of guidelines that a HTTP-to-CoAP proxy 
     implementation MAY adhere to. The main reason of adhering to such guidelines is to reduce variation
		 between proxy implementations, thereby increasing interoperability. (As an example
     use case, a proxy conforming to these guidelines made by vendor A can be easily replaced by a proxy from
     vendor B that also conforms to the guidelines.)
  </t>

  <t>This draft is organized as follows:
  <list style="symbols">
    <t><xref target="terminology"/> describes terminology to identify proxy types, mapping approaches
    and proxy deployments;</t>
    <t><xref target="URI"/> discusses how URIs refer to resources independent of access protocols;</t>
    <t><xref target="hc"/> analyzes the mapping that allows HTTP clients to contact CoAP servers;</t>
    <t><xref target="sec"/> discusses possible security impact related to HTTP/CoAP cross-protocol mapping.</t>
  </list></t>

</section>


<section title="Terminology" anchor="terminology">
   <t>This document assumes readers are familiar with the terms Reverse Proxy as defined in 
   <xref target="I-D.ietf-httpbis-p1-messaging"/> and Interception Proxy as defined in 
   <xref target="RFC3040" />.  In addition, the following terms are defined:</t>

  <t>Cross-Protocol Proxy (or Cross Proxy): is a proxy performing a cross-protocol mapping, in the context of this document
                                            a HTTP-CoAP (HC) mapping. A Cross-Protocol Proxy can behave as a Forward Proxy,
                                            Reverse Proxy or Interception Proxy.  Note: In this document we focus on the
					    Reverse Proxy mode of the Cross-Protocol Proxy.</t>

   <t>Forward Proxy: a message forwarding agent that is selected by the
   client, usually via local configuration rules, to receive requests
   for some type(s) of absolute URI and to attempt to satisfy those
   requests via translation to the protocol indicated by the absolute URI.
	 The user decides (is willing to) use the proxy as the forwarding/dereferencing 
	 agent for a predefined subset of the	URI space.</t>

   <t>Reverse Proxy:  a receiving agent that acts
   as a layer above some other server(s) and translates the received
   requests to the underlying server's protocol.  It behaves as an origin (HTTP)
   server on its connection towards the (HTTP) client and
   as a (CoAP) client on its connection towards the (CoAP) origin server.
   The (HTTP) client uses the "origin-form"
   <xref target="I-D.ietf-httpbis-p1-messaging"/> as a request-target URI.</t>

	 <t>Reverse and Forward proxies are technically very similar,
	with main differences being that the former appears to a client
	as an origin server while the latter does not,
	and that clients may be unaware they are communicating with a proxy.</t>

  <t>Placement terms: a server-side (SS) proxy is placed in the same network domain as the server;
  conversely a client-side (CS) proxy is in the same network domain as the client.
  In any other case than SS or CS, the proxy is said to be External (E).</t>

  <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
  document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>

<section anchor="URI" title="Cross-Protocol Usage of URIs">

    <t>A Uniform Resource Identifier (URI) provides a simple and extensible method for identifying a resource.
	    It enables uniform identification of resources via a separately defined extensible set of naming
	    schemes <xref target="RFC3986"/>.</t>

    <t>URIs are formed of at least three components: scheme, authority and path. The scheme 
      often corresponds to the protocol used to access the resource. However,
	    as noted in Section 1.2.2 of <xref target="RFC3986"/> the scheme does not imply that a particular
	    protocol is used to access the resource. So, we can define the same resource to be accessible by
	    different protocols i.e. the resource can have cross-protocol URIs referring to it.</t>

    <t>HTTP clients typically only support 'http' and 'https' schemes.  Therefore, they cannot directly access
	    CoAP servers (which support 'coap' and/or 'coaps').  In this situation, communication is enabled
	    by a Cross-Protocol Proxy, as shown in <xref target="fig-http-coap-deployment"/>, supporting URI mapping
	    features. Such features are discussed in the following section.</t>

</section>

<section anchor="URI-mapping" title="HTTP to CoAP URI Mapping">

	<t>Assume that a HTTP client wants to access a CoAP resource and indicates a target resource of
		"http://node.something.net/foobar" to a Forward cross proxy. A possible URI mapping done by the proxy 
		could result in "coap://node.coap.something.net/foo".</t>

	<t>As shown in the above example, in a cross-protocol URI the scheme, authority and path parts of the
		URI may all change. The process of providing cross-protocol URIs may be complex, since a
	       	mechanism to statically or dynamically (e.g., discovery) map the URI is needed.</t>

	<t>Two simple static URI mapping solutions are proposed in the following subsections. Note that other
	       	mapping approaches are possible as well.</t>

    <section title="Embedded Mapping" anchor="URI-embedded-mapping">

	    <t>In an embedded mapping approach, the HTTP URI has embedded inside it the authority and path
		    part of the CoAP URI.</t>

	    <t>Example: The CoAP resource "//node.coap.something.net/foo"
		    can be accessed by an HTTP client by inserting in the request
		    "http://hc-proxy.something.net/coap/node.coap.something.net/foo". The Cross-Protocol Proxy
		    then maps the URI to "coap://node.coap.something.net/foo"</t>

    </section>

    <section title="Homogeneous Mapping" anchor="URI-homogeneous-mapping">

	    <t>In a homogeneous mapping approach, only the scheme portion of the URI needs to be mapped.  The
		    rest of the URI (i.e. authority, path, etc.) remains unchanged.</t>

	    <t>Example: The CoAP resource "coap://node.coap.something.net/foo" can be accessed by an HTTP client by
		    requesting "http://node.coap.something.net/foo". The Cross-Protocol Proxy receiving 
				the request is responsible to map the URI to "coap://node.coap.something.net/foo" </t>

			<t>Background info: The assumption in this case is that
			the HTTP client would be able to successfully resolve "node.coap.something.net"
			using DNS infrastructure to return the IP address of the HC proxy. 
			Most likely this would be through a two step DNS lookup
			where the first DNS lookup would resolve "something.net" using public DNS infrastructure.
			Then the second DNS lookup on the subdomain "coap" and the host "node" would typically be resolved
			by a DNS server operated by the owner of domain "something.net".
			So this domain owner can manage its own internal node names
			and subdomain allocation which would correspond to the CoAP namespace</t>

    </section>
      
    <section title="Scheme Security Mapping" anchor="HTTPS-to-CoAPS">
	    <t>In general, regardless of the URI mapping scheme used in the Cross-Protocol Proxy, an "https" request
		    SHOULD be translated to a "coaps" request.  The exception case being
		    cases where security on the CoAP side is not needed because the network is
		    well enough protected already by other means (e.g. strong link-layer security,
		    or the CoAP network runs inside a firewalled network, etc.).</t>
    </section>


</section>


<section title="HTTP-CoAP Reverse Proxy" anchor="hc">

    <t>A HTTP-CoAP Reverse Cross-Protocol Proxy is accessed by web clients only supporting HTTP,
    and handles their requests by mapping these to CoAP requests, which are forwarded to CoAP servers; 
    and mapping back the received CoAP responses to HTTP.
    This mechanism is transparent to the client, which may 
    assume that it is communicating with the intended target HTTP server. In other words, the client
    accesses the proxy as an origin server using the "origin-form" <xref target="I-D.ietf-httpbis-p1-messaging"/> 
    as a Request Target.</t>

    <t>Normative requirements on the translation of HTTP requests to CoAP and of the CoAP responses back 
    to HTTP responses are defined in Section 10.2 of <xref target="I-D.ietf-core-coap"/>.
    However, that section only
    considers the case of a HTTP-CoAP Forward Cross-Protocol Proxy in which a client explicitly indicates it targets a request
    to a CoAP server, and does not cover all aspects of proxy implementation in detail. The present section provides 
    guidelines and more details for the implementation
    of a Reverse Cross-Protocol Proxy, which MAY be followed in addition to the normative requirements.
    
    </t><t>
    Translation of unicast HTTP requests into multicast CoAP requests is currently out of scope 
    since in a reverse proxy scenario a HTTP client typically expects to receive a single
    response, not multiple. However a  Cross-Protocol Proxy MAY include custom application-specific functions to generate a 
    multicast CoAP request based on a unicast HTTP request and aggregate multiple CoAP responses
    into a single HTTP response.</t>

		<t>Note that the guidelines in this section also apply to an HTTP-CoAP Intercepting Cross-Protocol Proxy.
		</t>

    <section anchor="hc-placement" title="Proxy Placement">
        <t>Typically, a  Cross-Protocol Proxy is located at the edge of the constrained network. See
        <xref target="fig-http-coap-deployment"/>. 

        The arguments supporting server-side (SS) placement are the following:
        <list style="hanging">
            <t hangText="Caching:">Efficient caching requires that all request traffic to a CoAP server 
            is handled by the same proxy which receives HTTP requests from multiple source locations.
            This maximally reduces the load on (constrained) CoAP servers.</t>

            <t hangText="Multicast:">To support CoAPs use of local-multicast functionalities 
            available in a constrained network, the Cross-Protocol Proxy requires a network 
            interface directly attached to the constrained network.</t>

            <t hangText="TCP/UDP:">Translation between HTTP and CoAP requires also TCP/UDP translation;
            TCP may be the preferred way for communicating with the constrained network due to its reliability
            or due to intermediate gateways configured to block UDP traffic.
						</t>
      
        </list></t>

				<t>
			  Arguments against SS placement, in favor of client-side (CS), are:

        <list style="hanging">
            <t hangText="Scalability:">A solution where a single SS proxy has to manage numerous open
			  TCP/IP connections to a large number of HTTP clients is not scalable. (Unless multiple SS proxies 
			  are employed with a load-balancing mechanism, which adds complexity.)
						</t>
      
        </list>
        </t>
				
        <figure title="Reverse Cross-Protocol Proxy Deployment Scenario" anchor="fig-http-coap-deployment"><artwork>
    <![CDATA[
                            +------+                                  
                            |      |                                  
                            | DNS  |                                 
                            |      |                                 
                            +------+            Constrained Network                 
                                                --------------------
                                               /                    \
                                              /  /-----\     /-----\ \
                                             /     CoAP       CoAP    \
                                            /    server      server    \
                                           ||    \-----/     \-----/   ||
    +------+       HTTP Request      +----------+                      ||
    |HTTP  |------------------------>| HTTP/CoAP|  Req   /-----\       ||
    |Client|                         |  Cross-  |------->| CoAP        ||
    |      |<------------------------|  Proxy   |<-------|server       ||
    +------+       HTTP Response     +----------+  Resp  \-----/       ||
                                           ||                          ||
                                           ||   /-----\                ||
                                           ||    CoAP                  ||
                                            \    server                /
                                             \  \-----/               /
                                              \         /-----\      /
                                               \         CoAP       /
                                                \        server    /
                                                 \      \-----/   /
                                                  ----------------
    ]]>
        </artwork></figure>

		</section>

		<section title="Response Code Translations" anchor="hc-resp">
			<t><xref target="tab-http-coap"/> defines all possible CoAP responses along with the HTTP response to which
			each CoAP response SHOULD be translated. This table complies with the Section 10.2 requirements
			of <xref target="I-D.ietf-core-coap"/> and is intended to cover all possible cases. Multiple appearances of a
			HTTP status code in the second column indicates multiple equivalent HTTP responses are possible, 
			depending on the conditions cited in the Notes (third column).				
			</t>

        <texttable anchor="tab-http-coap" title="HTTP-CoAP Response Mapping">
          <ttcol align="left">CoAP Response Code</ttcol>
          <ttcol align="left">HTTP Status Code</ttcol>
          <ttcol align="left">Notes</ttcol>

          <c>2.01 Created                 </c><c>201 Created                 </c><c>1</c>
          <c>2.02 Deleted                 </c><c>200 OK                      </c><c>2</c>
          <c>                             </c><c>204 No Content              </c><c>2</c>
          <c>2.03 Valid                   </c><c>304 Not Modified            </c><c>3</c>
          <c>                             </c><c>200 OK                      </c><c>4</c>
          <c>2.04 Changed                 </c><c>200 OK                      </c><c>2</c>
          <c>                             </c><c>204 No Content              </c><c>2</c>
          <c>2.05 Content                 </c><c>200 OK                      </c><c> </c>
          <c>4.00 Bad Request             </c><c>400 Bad Request             </c><c> </c>
          <c>4.01 Unauthorized            </c><c>400 Bad Request             </c><c>5</c>
          <c>4.02 Bad Option              </c><c>400 Bad Request             </c><c>6</c>
          <c>4.03 Forbidden               </c><c>403 Forbidden               </c><c> </c>
          <c>4.04 Not Found               </c><c>404 Not Found               </c><c> </c>
          <c>4.05 Method Not Allowed      </c><c>400 Bad Request             </c><c>7</c>
          <c>4.06 Not Acceptable          </c><c>406 Not Acceptable          </c><c> </c>
          <c>4.12 Precondition Failed     </c><c>412 Precondition Failed     </c><c> </c>
          <c>4.13 Request Entity Too Large</c><c>413 Request Repr. Too Large </c><c> </c>
          <c>4.15 Unsupported Media Type  </c><c>415 Unsupported Media Type  </c><c> </c>
          <c>5.00 Internal Server Error   </c><c>500 Internal Server Error   </c><c> </c>
          <c>5.01 Not Implemented         </c><c>501 Not Implemented         </c><c> </c>
          <c>5.02 Bad Gateway             </c><c>502 Bad Gateway             </c><c> </c>
          <c>5.03 Service Unavailable     </c><c>503 Service Unavailable     </c><c>8</c>
          <c>5.04 Gateway Timeout         </c><c>504 Gateway Timeout         </c><c> </c>
          <c>5.05 Proxying Not Supported  </c><c>502 Bad Gateway             </c><c>9</c>
        </texttable>

        <t>Notes:
        <list style="numbers">
          <t>A CoAP server may return an arbitrary format payload along with this response. This 
          payload SHOULD be returned as entity in the HTTP 201 response. Section 7.3.2 of
          <xref target="I-D.ietf-httpbis-p2-semantics"/> does not put any requirement on the
          format of the payload. (In the past, <xref target="RFC2616"/> did.)</t>
          
          <t>The HTTP code is 200 or 204 respectively for the case that a CoAP server returns a 
          payload or not. <xref target="I-D.ietf-httpbis-p2-semantics"/> Section 5.3 
          requires code 200 in case a representation of the action result is returned
          for DELETE, POST and PUT and code 204 if not. Hence, a proxy SHOULD 
          transfer any CoAP payload contained in a 2.02 response to the HTTP client in a
          200 OK response.</t>
          
          <t>A CoAP 2.03 (Valid) response only (1) confirms that the request ETag
          is valid and (2) provides a new Max-Age value. HTTP 304 (Not Modified)
          also updates some header fields of a stored response.
          A non-caching proxy may not have enough
          information to fill in the required values in the HTTP 304 (Not
          Modified) response, so it may not be advisable for a non-caching proxy
          to provoke the 2.03 (Valid) response by forwarding an ETag.
          A caching proxy will fill the information out of the cache.</t>

					<t>A 200 response to a CoAP 2.03 occurs only when the proxy is caching
					and translated a HTTP request (without validation request) to a CoAP request
					that includes validation, for efficiency. The proxy receiving 2.03 updates
					the freshness of the cached representation and returns the entire representation
					to the HTTP client.</t>
					
          <t>The HTTP code 401 Unauthorized MUST NOT be used, as long as in CoAP there is 
          no equivalent defined of the required WWW-Authenticate header (Section 3.1 of
          <xref target="I-D.ietf-httpbis-p7-auth"/>).</t>

					<t>In some cases a proxy receiving 4.02 may retry the request with less CoAP Options
					in the hope that the server will understand the newly formulated request.
					For example, if the proxy tried using a Block Option which was not recognized by
					the CoAP server it may retry without that Block Option.
					</t>
					
          <t>The HTTP code "405 Method Not Allowed" MUST NOT be used 
          since CoAP does not provide enough information to determine a
          value for the required "Allow" response-header field.</t>

          <t>The value of the HTTP "Retry-After" response-header field is taken from the 
          value of the CoAP Max-Age Option, if present.</t>

          <t>This CoAP response can only happen if the proxy itself is configured to use a 
          CoAP Forward Proxy to execute some, or all, of its CoAP requests.
          </t>
        </list>
			</t>
		</section>	  
		
		<section title="Media Type Translations" anchor="hc-media">
				<t>
				A Cross-Protocol Proxy translates a media type string, carried in a HTTP Content-Type header in a request, to a CoAP Content-Format Option
				with the equivalent numeric value. The media types supported by CoAP are defined in the CoAP Content-Format Registry.
				Any HTTP request with a Content-Type for which the proxy does not know an equivalent CoAP Content-Format number, MUST
				lead to HTTP response 415 (Unsupported Media Type).
				</t><t>
				Also, a CoAP Content-Format value in a response is translated back to the equivalent HTTP Content-Type. If a proxy 
				receives a CoAP Content-Format value that it does not recognize (e.g. because the value
				is IANA-registered after the proxy software was deployed), and is unable to look up the equivalent HTTP Content-Type 
				on the fly, the proxy SHOULD return an HTTP entity (payload) without Content-Type header 
				(complying to Section 3.1.1.5 of <xref target="I-D.ietf-httpbis-p2-semantics"/>).
				</t>
	  </section>

      <section title="Caching and Congestion Control" anchor="hc-caching"> <!-- discuss cache-control -->
          <t>A  Cross-Protocol Proxy SHOULD limit the number of requests to CoAP servers
          by responding, where applicable, with a cached representation of the resource.</t>

          <t>Duplicate idempotent pending requests by a  Cross-Protocol Proxy to the same CoAP resource SHOULD in general be avoided,
          by duplexing the response to the requesting HTTP clients without duplicating the CoAP request.
          <!--
          The same consideration apply if multiple active HTTP subscriptions involve the same observe relationship.
          -->
          </t>
          
          <t>If the HTTP client times out and drops the HTTP session to the  Cross-Protocol Proxy (closing the TCP connection)
          after the HTTP request was made,
          a  Cross-Protocol Proxy SHOULD wait for the associated CoAP response and cache it if possible.
          Further requests to the  Cross-Protocol Proxy for the same resource can use the result present in cache,
          or, if a response has still to come, the HTTP requests will wait on the open CoAP session.</t>

          <t>According to <xref target="I-D.ietf-core-coap"/>, a proxy MUST limit the number 
          of outstanding interactions to a given CoAP server to NSTART. To limit the amount of 
          aggregate traffic to a constrained network,
					the  Cross-Protocol Proxy SHOULD also pose a limit to the number of concurrent CoAP requests pending
          on the same constrained network; further incoming requests MAY either be queued or dropped
          (returning 503 Service Unavailable). This limit and the proxy queueing/dropping behavior SHOULD be
          configurable.
          In order to efficiently apply this congestion control, the  Cross-Protocol Proxy SHOULD be SS placed.</t>
          
  				<t>Resources experiencing a high access rate coupled with high volatility MAY be observed 
  				<xref target="I-D.ietf-core-observe"/> by the Cross-Protocol Proxy
          to keep their cached representation fresh while minimizing the number CoAP messages.
          See <xref target="refresh_via_observe"/>.
          </t>
          
      </section>

      <section title="Cache Refresh via Observe" anchor="refresh_via_observe">
      
      <t>There are cases where using the CoAP observe protocol <xref target="I-D.ietf-core-observe"/>
      to handle proxy cache refresh
      is preferable to the validation mechanism based on ETag as defined in <xref target="I-D.ietf-core-coap"/>.
      Such scenarios include, but are not limited to, sleepy nodes
      -- with possibly high variance in requests' distribution --
      which would greatly benefit from a server driven cache update mechanism.
      Ideal candidates would also be crowded or very low throughput networks,
      where reduction of the total number of exchanged messages is an important requirement.</t>

      <t>This subsection aims at providing a practical evaluation method to decide
      whether the refresh of a cached resource R is more efficiently handled
      via ETag validation or by establishing an observation on R.</t>

      <t>Let T_R be the mean time between two client requests to resource R,
      let F_R be the freshness lifetime of R representation,
      and let M_R be the total number of messages exchanged towards resource R.
      If we assume that the initial cost for establishing the observation is negligible,        
      an observation on R reduces M_R iff T_R &lt; 2*F_R with respect to using ETag validation,
      that is iff the mean arrival time of requests for resource R is greater than half the refresh rate of R.</t>

      <t>When using observations M_R is always upper bounded by 2*F_R:
      in the constrained network no more than 2*F_R messages will be generated towards resource R.</t>

    </section>

    <section title="Use of CoAP Blockwise Transfer" anchor="hc-block">
        <t>
        A  Cross-Protocol Proxy SHOULD support CoAP blockwise transfers <xref target="I-D.ietf-core-block"/> to
        allow transport of large CoAP payloads while avoiding excessive link-layer fragmentation in LLNs,
        and to cope with small datagram buffers in CoAP end-points as described in
        <xref target="I-D.ietf-core-coap"/> Section 4.6.
        </t>
        
        <t>
        A  Cross-Protocol Proxy SHOULD attempt to retry a payload-carrying CoAP PUT or POST request with 
        blockwise transfer if the destination CoAP server responded with 4.13
        (Request Entity Too Large) to the original request. 
        A  Cross-Protocol Proxy SHOULD attempt to use blockwise transfer when sending a CoAP PUT or
        POST request message that is larger than a value BLOCKWISE_THRESHOLD. The value of
        BLOCKWISE_THRESHOLD MAY be implementation-specific, for example calculated based on a known or 
        typical UDP datagram buffer size for CoAP end-points, or set to N times the size of a 
        link-layer frame where e.g. N=5, or preset to
        a known IP MTU value, or set to a known Path MTU value. The value BLOCKWISE_THRESHOLD or 
        parameters from which it is calculated SHOULD be configurable in a proxy implementation.
        </t>

				<t>
        The  Cross-Protocol Proxy SHOULD detect CoAP end-points not supporting blockwise transfers by checking for a 
        4.02 (Bad Option) response returned by an end-point in response to a CoAP request with a Block* Option.
        This allows the  Cross-Protocol Proxy to be more efficient, not attempting repeated blockwise transfers to CoAP servers
        that do not support it. However if a request payload is too large to be sent as a single CoAP request
        and blockwise transfer would be unavoidable, the proxy still SHOULD attempt blockwise transfer on 
        such an end-point before returning 413 (Request Entity Too Large) to the HTTP client. 
        </t>
        <!-- rationale: coap server might have had a software update in the meantime with block support -->        

        <t>
        For improved latency a cross proxy MAY initiate a blockwise CoAP request triggered by
        an incoming HTTP request even when the HTTP request message has not yet been fully 
        received, but enough data has been received to send one or more data blocks to a CoAP 
        server already. This is particularly useful on slow client-to-proxy connections.
        </t>

    </section>

		<section title="Security Translation" anchor="hc-sec">
				<t>
				A HC proxy SHOULD implement explicit rules for security context translations. A translation
				may involve e.g. applying a rule that any "https" request is translated to a "coaps" request, or e.g.
				applying a rule that a "https" request is translated to an unsecured "coap" request. Another rule
				could specify the security policy and parameters used for DTLS connections. Such
				rules will largely depend on the application and network context in which a proxy is applied.
				To enable widest possible use of a proxy implementation, these rules SHOULD be configurable in a HC proxy.
				</t>
		</section>
		
		<section title="Other guidelines" anchor="hc-misc">
				    <t>For long delays of a CoAP server, the HTTP client or any other proxy in between MAY timeout.
				    Further discussion of timeouts in HTTP is available in Section 6.2.4 of <xref target="I-D.ietf-httpbis-p1-messaging"/>.</t>
				
				    <t>A cross proxy MUST define an internal timeout for each pending CoAP request,
				    because the CoAP server may silently die before completing the request. The timeout value
				    SHOULD be approximately less than or equal to MAX_RTT defined in <xref target="I-D.ietf-core-coap"/>.</t>
				
				    <t>When the DNS protocol is not used between CoAP nodes in a constrained network,
				    defining valid FQDN (i.e., DNS entries) for constrained CoAP servers, where possible, MAY help HTTP clients
				    to access the resources offered by these servers via a HC proxy.</t>
				
				    <t>HTTP connection pipelining (section 6.2.2.1 of <xref target="I-D.ietf-httpbis-p1-messaging"/>) 
				    MAY be supported by the proxy and is transparent to the CoAP network:
				    the HC cross proxy will sequentially serve the pipelined requests by issuing different CoAP requests.</t>
		</section>	
</section>

<section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>

</section>

<section title="Security Considerations" anchor="sec">

    <t>The security concerns raised in Section 15.7 of <xref target="RFC2616" /> also apply to the cross proxy scenario. 
    In fact, the cross proxy is a trusted (not rarely a transparently trusted) component in the network path.</t>

    <t>The trustworthiness assumption on the cross proxy cannot be dropped.
    Even if we had a blind, bi-directional, end-to-end, tunneling facility like the one provided by the CONNECT method in HTTP, and also assuming the existence of a DTLS-TLS transparent mapping, the two tunneled ends should be speaking the same application protocol, which is not the case.  Basically, the protocol translation function is a core duty of the cross proxy that can't be removed, and makes it a necessarily trusted, impossible to bypass, component in the communication path.</t>

    <t>A reverse proxy deployed at the boundary of a constrained network is an easy single point of failure for reducing availability.  As such, a special care should be taken in designing, developing and operating it, keeping in mind that, in most cases, it could have fewer limitations than the constrained devices it is serving.</t>

    <t>The following sub paragraphs categorize and argue about a set of specific security issues related to the translation,
    caching and forwarding functionality exposed by a cross proxy module.</t>


    <section title="Traffic overflow">
    
        <t>Due to the typically constrained nature of CoAP nodes,
        particular attention SHOULD be posed in the implementation of traffic reduction
        mechanisms (see <xref target="hc-caching"/>),
        because inefficient implementations can be targeted by unconstrained Internet attackers.
        Bandwidth or complexity involved in such attacks is very low.</t>  

        <t>An amplification attack to the constrained network may be triggered by a multicast request
        generated by a single HTTP request mapped to a CoAP multicast resource,
        as considered in Section TBD of <xref target="I-D.ietf-core-coap"/>.</t> 

        <t>The impact of this amplification technique is higher than an amplification attack
        carried out by a malicious constrained device
        (e.g. ICMPv6 flooding, like Packet Too Big, or Parameter Problem on a multicast
        destination <xref target="RFC4732" />),
        since it does not require direct access to the constrained network.</t>
        
        <t>The feasibility of this attack, disruptive in terms of CoAP server availability, can be limited by
        access controlling the exposed HTTP multicast resource, so that only known/authorized users access such URIs.</t>

    </section>

    <section title="Handling Secured Exchanges">

        <t>It is possible that the request from the client to the cross proxy is sent over a secured connection.
        However, there may or may not exist a secure connection mapping to the other protocol.
        For example, a secure distribution method for multicast traffic is complex and MAY not be
        implemented (see <xref target="I-D.ietf-core-groupcomm"/>).</t>

        <t>By default, a cross proxy SHOULD reject any secured client request if there is no configured security policy mapping.  This recommendation MAY be relaxed in case the destination network is believed to be secured by other, complementary, means.  E.g.: assumed that CoAP nodes are isolated behind a firewall (e.g. as the SS cross proxy deployment shown in <xref target="fig-http-coap-deployment"/>), the cross proxy may be configured to translate the incoming HTTPS request using plain CoAP (i.e. NoSec mode.)</t>

        <t>The HC URI mapping MUST NOT map to HTTP (see <xref target="URI-mapping"/>)
        a CoAP resource intended to be accessed only using HTTPS.</t>

        <t>A secured connection that is terminated at the cross proxy, i.e. the proxy decrypts secured data locally,
        raises an ambiguity about the cacheability of the requested resource.
        The cross proxy SHOULD NOT cache any secured content to avoid any leak of secured information.
        However in some specific scenario, a security/efficiency trade-off could motivate caching secured information;
        in that case the caching behavior MAY be tuned to some extent on a per-resource basis.</t>

    </section>
</section>

<section title="Acknowledgements">

  <t>An initial version of the table found in <xref target="hc-resp"/>
  has been provided in revision -05 of <xref target="I-D.ietf-core-coap"/>.
  Special thanks to Peter van der Stok for countless comments and discussions
  on this document, that contributed to its current structure and text.</t>

  <t>Thanks to
  Carsten Bormann,
  Zach Shelby,
  Michele Rossi,
  Nicola Bui,
  Michele Zorzi,
  Klaus Hartke,
  Cullen Jennings,
  Kepeng Li,
  Brian Frank,
  Peter Saint-Andre,
  Kerry Lynn,
  Linyi Tian,
  Dorothy Gellert,
  Francesco Corazza
  for helpful comments and discussions that have shaped the document.</t>

  <t>The research leading to these results has received funding from the European Community's
  Seventh Framework Programme [FP7/2007-2013] under grant agreement n. [251557].</t>

</section>

</middle>

<back>

    <references title="Normative References">
        &RFC2119;
        &RFC2616;
        &RFC3986;
        &I-D.ietf-core-coap;
        &I-D.ietf-core-observe;
        &I-D.ietf-core-block;
        &I-D.ietf-core-groupcomm;
        &I-D.ietf-httpbis-p1-messaging;
        &I-D.ietf-httpbis-p2-semantics;
        &I-D.ietf-httpbis-p7-auth;
    </references>

    <references title="Informative References">
        &RFC3040;
        &RFC4732;
        &I-D.bormann-core-simple-server-discovery;
        &I-D.shelby-core-resource-directory;        
    </references>

</back>

</rfc>

<!-- Change log 


-->
<!-- LocalWords: xref CDATA exploders BUA -->


