<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc category="std" ipr="trust200902" docName="draft-ietf-jose-json-web-algorithms-00">

  <front>
    <title>JSON Web Algorithms (JWA)</title>

    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>

    <date day="16" month="January" year="2012" />

    <area>Security</area>
    <workgroup>JOSE Working Group</workgroup>

    <keyword>RFC</keyword>
    <keyword>Request for Comments</keyword>
    <keyword>I-D</keyword>
    <keyword>Internet-Draft</keyword>
    <keyword>Assertion</keyword>
    <keyword>Simple Web Token</keyword>
    <keyword>Security Token</keyword>
    <keyword>SWT</keyword>
    <keyword>JavaScript Object Notation</keyword>
    <keyword>JSON</keyword>
    <keyword>JSON Web Token</keyword>
    <keyword>JWT</keyword>
    <keyword>JSON Web Signature</keyword>
    <keyword>JWS</keyword>
    <keyword>JSON Web Encryption</keyword>
    <keyword>JWE</keyword>
    <keyword>JSON Web Algorithms</keyword>
    <keyword>JWA</keyword>

    <abstract>
      <t>
	The JSON Web Algorithms (JWA) specification enumerates
	cryptographic algorithms and identifiers to be used with the
	JSON Web Signature (JWS) and 
	JSON Web Encryption (JWE) specifications.
      </t>
    </abstract>

    <note title="Requirements Language">
      <t>
	The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
	NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
	"OPTIONAL" in this document are to be interpreted as described
	in <xref target="RFC2119">RFC 2119</xref>.
      </t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t>
	The JSON Web Algorithms (JWA) specification enumerates
	cryptographic algorithms and identifiers to be used with the
	JSON Web Signature (JWS) <xref target="JWS" /> and
	JSON Web Encryption (JWE) <xref target="JWE" /> specifications.
	Enumerating the algorithms and identifiers for them in this
	specification, rather than in the JWS and JWE
	specifications, is intended to allow them to remain unchanged
	in the face of changes in the set of required, recommended,
	optional, and deprecated algorithms over time.
	This specification also describes the semantics and operations
	that are specific to these algorithms and algorithm families.
      </t>
    </section>

    <section title="Terminology">
      <t>
	This specification uses the terminology defined by the
	JSON Web Signature (JWS) <xref target="JWS" /> and
	JSON Web Encryption (JWE) <xref target="JWE" /> specifications.
      </t>
    </section>

    <section title="Cryptographic Algorithms for JWS" anchor="SigningAlgs">

      <t>
	JWS uses cryptographic algorithms to sign the contents
	of the JWS Header and the JWS Payload.  The
	use of the following algorithms for producing JWSs is defined in
	this section.
      </t>
      <t>
	The table below <xref target="SigAlgTable" /> is the set of
	<spanx style="verb">alg</spanx> (algorithm) header
	parameter values defined by this specification for use with JWS, each of which
	is explained in more detail in the following sections:
      </t>

      <texttable title='JWS Defined "alg" Parameter Values' anchor="SigAlgTable">

	<ttcol align="left">Alg Parameter Value</ttcol>
	<ttcol align="left">Algorithm</ttcol>

	<c>HS256</c>
	<c>HMAC using SHA-256 hash algorithm</c>

	<c>HS384</c>
	<c>HMAC using SHA-384 hash algorithm</c>

	<c>HS512</c>
	<c>HMAC using SHA-512 hash algorithm</c>

	<c>RS256</c>
	<c>RSA using SHA-256 hash algorithm</c>

	<c>RS384</c>
	<c>RSA using SHA-384 hash algorithm</c>

	<c>RS512</c>
	<c>RSA using SHA-512 hash algorithm</c>

	<c>ES256</c>
	<c>ECDSA using P-256 curve and SHA-256 hash algorithm</c>

	<c>ES384</c>
	<c>ECDSA using P-384 curve and SHA-384 hash algorithm</c>

	<c>ES512</c>
	<c>ECDSA using P-521 curve and SHA-512 hash algorithm</c>

      </texttable>

      <t>
	See <xref target="SigAlgXref" /> for a table cross-referencing the
	digital signature and HMAC <spanx style="verb">alg</spanx> (algorithm)
	values used in this specification
	with the equivalent identifiers used by other
	standards and software packages.
      </t>

      <t>
	Of these algorithms, only HMAC SHA-256 MUST be implemented by
	conforming JWS implementations.  It is RECOMMENDED that
	implementations also support the RSA SHA-256 and ECDSA P-256
	SHA-256 algorithms.  Support for other algorithms and key
	sizes is OPTIONAL.
      </t>

      <section title="Creating a JWS with HMAC SHA-256, HMAC SHA-384, or HMAC SHA-512" anchor="DefiningHMAC">

	<t>
	  Hash based Message Authentication Codes (HMACs) enable one to
	  use a secret plus a cryptographic hash function to generate a
	  Message Authentication Code (MAC). This can be used to
	  demonstrate that the MAC matches the hashed content, in this
	  case the JWS Secured Input, which therefore demonstrates that
	  whoever generated the MAC was in possession of the secret.
	  The means of exchanging the shared key is outside the scope
	  of this specification.
	</t>
	<t>
	  The algorithm for implementing and validating HMACs is
	  provided in <xref target="RFC2104">RFC 2104</xref>.  This
	  section defines the use of the HMAC SHA-256, HMAC SHA-384,
	  and HMAC SHA-512 cryptographic hash functions as defined in
	  <xref target="FIPS.180-3">FIPS 180-3</xref>. The
	  <spanx style="verb">alg</spanx> (algorithm) header parameter values
	  <spanx style="verb">HS256</spanx>, <spanx
	  style="verb">HS384</spanx>, and <spanx
	  style="verb">HS512</spanx> are used in the JWS Header
	  to indicate that the Encoded JWS Signature contains a base64url
	  encoded HMAC value using the respective hash function.
	</t>
	<t>
	  The HMAC SHA-256 MAC is generated as follows:

	  <list style="numbers">
	    <t>
	      Apply the HMAC SHA-256 algorithm to the UTF-8
	      representation of the JWS Secured Input using the shared
	      key to produce an HMAC value.
	    </t>
	    <t>
	      Base64url encode the resulting HMAC value.
	    </t>
	  </list>

	  The output is the Encoded JWS Signature for that JWS.
	</t>

	<t>
	  The HMAC SHA-256 MAC for a JWS is validated as follows:

	  <list style="numbers">

	    <t>
	      Apply the HMAC SHA-256 algorithm to the UTF-8
	      representation of the JWS Secured Input of the JWS using
	      the shared key.
	    </t>
	    <t>
	      Base64url encode the resulting HMAC value.
	    </t>
	    <t>
	      If the JWS Signature and the base64url encoded HMAC
	      value exactly match, then one has confirmation that the
	      shared key was used to generate the HMAC on the JWS and that the
	      contents of the JWS have not be tampered with.
	    </t>
	    <t>
	      If the validation fails, the JWS MUST be rejected.
	    </t>

	  </list>
	</t>

	<t>
	  Securing content with the HMAC SHA-384 and HMAC SHA-512 algorithms is
	  performed identically to the procedure for HMAC SHA-256 - just
	  with correspondingly longer key and result values.
	</t>

      </section>

      <section title="Creating a JWS with RSA SHA-256, RSA SHA-384, or RSA SHA-512" anchor="DefiningRSA">

	<t>
	  This section defines the use of the RSASSA-PKCS1-v1_5
	  digital signature algorithm as defined in <xref target="RFC3447">RFC
	  3447</xref>, Section 8.2 (commonly known as PKCS#1), using
	  SHA-256, SHA-384, or SHA-512 as the hash function.  The
	  RSASSA-PKCS1-v1_5 algorithm is described in <xref
	  target="FIPS.186-3">FIPS 186-3</xref>, Section 5.5, and the
	  SHA-256, SHA-384, and SHA-512 cryptographic hash functions
	  are defined in <xref target="FIPS.180-3">FIPS 180-3</xref>.
	  The <spanx style="verb">alg</spanx> (algorithm) header
	  parameter values <spanx style="verb">RS256</spanx>, <spanx
	  style="verb">RS384</spanx>, and <spanx
	  style="verb">RS512</spanx> are used in the JWS Header
	  to indicate that the Encoded JWS Signature contains a base64url
	  encoded RSA digital signature using the respective hash function.
	</t>
	<t>
	  A 2048-bit or longer key length MUST be used with this
	  algorithm.
	</t>
	<t>
	  The RSA SHA-256 digital signature is generated as follows:

	  <list style="numbers">

	    <t>
	      Generate a digital signature of the UTF-8 representation
	      of the JWS Secured Input using RSASSA-PKCS1-V1_5-SIGN
	      and the SHA-256 hash function with the desired private
	      key. The output will be a byte array.
	    </t>
	    <t>
	      Base64url encode the resulting byte array.
	    </t>

	  </list>

	  The output is the Encoded JWS Signature for that JWS.
	</t>

	<t>
	  The RSA SHA-256 digital signature for a JWS is validated as follows:

	  <list style="numbers">

	    <t>
	      Take the Encoded JWS Signature and base64url decode it into
	      a byte array. If decoding fails, the JWS MUST
	      be rejected.
	    </t>
	    <t>
	      Submit the UTF-8 representation of the JWS Secured Input
	      and the public key corresponding to the private key used
	      by the signer to the RSASSA-PKCS1-V1_5-VERIFY algorithm
	      using SHA-256 as the hash function.
	    </t>
	    <t>
	      If the validation fails, the JWS MUST be rejected.
	    </t>

	  </list>
	</t>

	<t>
	  Signing with the RSA SHA-384 and RSA SHA-512 algorithms is
	  performed identically to the procedure for RSA SHA-256 - just
	  with correspondingly longer key and result values.
	</t>

      </section>

      <section title="Creating a JWS with ECDSA P-256 SHA-256, ECDSA P-384 SHA-384, or ECDSA P-521 SHA-512" anchor="DefiningECDSA">
	<t>
	  The Elliptic Curve Digital Signature Algorithm (ECDSA) is
	  defined by <xref target="FIPS.186-3">FIPS 186-3</xref>. ECDSA
	  provides for the use of Elliptic Curve cryptography, which is
	  able to provide equivalent security to RSA cryptography but
	  using shorter key lengths and with greater processing
	  speed. This means that ECDSA digital signatures will be substantially
	  smaller in terms of length than equivalently strong RSA
	  digital signatures.
	</t>
	<t>
	  This specification defines the use of ECDSA with the P-256
	  curve and the SHA-256 cryptographic hash function, ECDSA
	  with the P-384 curve and the SHA-384 hash function, and
	  ECDSA with the P-521 curve and the SHA-512 hash
	  function. The P-256, P-384, and P-521 curves are also
	  defined in FIPS 186-3. The <spanx
	  style="verb">alg</spanx> (algorithm) header parameter values <spanx
	  style="verb">ES256</spanx>, <spanx
	  style="verb">ES384</spanx>, and <spanx
	  style="verb">ES512</spanx> are used in the JWS Header
	  to indicate that the Encoded JWS Signature contains a base64url
	  encoded ECDSA P-256 SHA-256, ECDSA P-384 SHA-384, or ECDSA
	  P-521 SHA-512 digital signature, respectively.
	</t>
	<t>
	  The ECDSA P-256 SHA-256 digital signature is generated as follows:

	  <list style="numbers">
	    <t>
	      Generate a digital signature of the UTF-8 representation
	      of the JWS Secured Input using ECDSA P-256 SHA-256 with
	      the desired private key. The output will be the EC point
	      (R, S), where R and S are unsigned integers.
	    </t>
	    <t>
	      Turn R and S into byte arrays in big endian order. Each
	      array will be 32 bytes long.
	    </t>
	    <t>
	      Concatenate the two byte arrays in the order R and then S.
	    </t>
	    <t>
	      Base64url encode the resulting 64 byte array.
	    </t>
	  </list>

	  The output is the Encoded JWS Signature for the JWS.
	</t>

	<t>
	  The ECDSA P-256 SHA-256 digital signature for a JWS is validated as follows:

	  <list style="numbers">
	    <t>
	      Take the Encoded JWS Signature and base64url decode it into
	      a byte array. If decoding fails, the JWS MUST
	      be rejected.
	    </t>
	    <t>
	      The output of the base64url decoding MUST be a 64 byte
	      array.
	    </t>
	    <t>
	      Split the 64 byte array into two 32 byte arrays. The first
	      array will be R and the second S. Remember that the byte
	      arrays are in big endian byte order; please check the
	      ECDSA validator in use to see what byte order it requires.
	    </t>
	    <t>
	      Submit the UTF-8 representation of the JWS Secured Input,
	      R, S and the public key (x, y) to the ECDSA P-256
	      SHA-256 validator.
	    </t>
	    <t>
	      If the validation fails, the JWS MUST be rejected.
	    </t>
	  </list>

	  The ECDSA validator will then determine if the digital
	  signature is valid, given the inputs.  Note that ECDSA digital
	  signature contains a value referred to as K, which is a random
	  number generated for each digital signature instance. This
	  means that two ECDSA digital signatures using exactly the same
	  input parameters will output different signature values because
	  their K values will be different. The consequence of this is
	  that one must validate an ECDSA digital signature by submitting the
	  previously specified inputs to an ECDSA validator.
	</t>
	<t>
	  Signing with the ECDSA P-384 SHA-384 and ECDSA P-521 SHA-512
	  algorithms is performed identically to the procedure for ECDSA
	  P-256 SHA-256 - just with correspondingly longer key and
	  result values.
	</t>

      </section>

      <section title="Additional Digital Signature/HMAC Algorithms" anchor="MoreSigAlgs">

	<t>
	  Additional algorithms MAY be used to protect JWSs with
	  corresponding <spanx style="verb">alg</spanx> (algorithm) header parameter values being defined to
	  refer to them. New <spanx style="verb">alg</spanx> header parameter values SHOULD
	  either be defined in the IANA JSON Web Signature Algorithms
	  registry or be a URI that contains a collision resistant
	  namespace.  In particular, it is permissible to use the algorithm identifiers
	  defined in <xref target="RFC3275">XML DSIG</xref> and
	  related specifications as <spanx style="verb">alg</spanx> values.
	</t>

      </section>
    </section>

    <section title="Cryptographic Algorithms for JWE" anchor="EncryptingAlgs">

      <t>
	JWE uses cryptographic algorithms to encrypt the Content
	Encryption Key (CEK) and the Plaintext.  This section
	specifies a set of specific algorithms for these purposes.
      </t>
      <t>
	The table below <xref target="EncAlgTable" /> is the set of
	<spanx style="verb">alg</spanx> (algorithm) header parameter values that
	are defined by this specification for use with JWE.  These algorithms are used
	to encrypt the CEK, which produces the JWE Encrypted Key.
      </t>

      <texttable title='JWE Defined "alg" Parameter Values' anchor="EncAlgTable">

	<ttcol align="left">alg Parameter Value</ttcol>
	<ttcol align="left">Encryption Algorithm</ttcol>

	<c>RSA1_5</c>
	<c>RSA using RSA-PKCS1-1.5 padding, as defined in <xref
	target="RFC3447">RFC 3447</xref></c>

	<c>RSA-OAEP</c>
	<c>RSA using Optimal Asymmetric Encryption Padding (OAEP), as
	defined in <xref target="RFC3447">RFC 3447</xref></c>

	<c>ECDH-ES</c>
	<c>Elliptic Curve Diffie-Hellman Ephemeral Static, as defined
	in <xref target="RFC6090">RFC 6090</xref>, and using the
	Concat KDF, as defined in <xref target="NIST-800-56A" />,
	where the Digest Method is SHA-256</c>

	<c>A128KW</c>
	<c>Advanced Encryption Standard (AES) Key Wrap Algorithm using
	128 bit keys, as defined in <xref target="RFC3394">RFC
	3394</xref></c>

	<c>A256KW</c>
	<c>Advanced Encryption Standard (AES) Key Wrap Algorithm using
	256 bit keys, as defined in <xref target="RFC3394">RFC
	3394</xref></c>

	<c>A128GCM</c>
	<c>Advanced Encryption Standard (AES) using 128 bit keys in
	Galois/Counter Mode, as defined in <xref target="FIPS-197" />
	and <xref target="NIST-800-38D" /></c>

	<c>A256GCM</c>
	<c>Advanced Encryption Standard (AES) using 256 bit keys in
	Galois/Counter Mode, as defined in <xref target="FIPS-197" />
	and <xref target="NIST-800-38D" /></c>

      </texttable>

      <t>
	The table below <xref target="EncTable" /> is the set of
	<spanx style="verb">enc</spanx> (encryption method) header parameter values that
	are defined by this specification for use with JWE.  These algorithms are used
	to encrypt the Plaintext, which produces the Ciphertext.
      </t>

      <texttable title='JWE Defined "enc" Parameter Values' anchor="EncTable">

	<ttcol align="left">enc Parameter Value</ttcol>
	<ttcol align="left">Symmetric Encryption Algorithm</ttcol>

	<c>A128CBC</c>
	<c>Advanced Encryption Standard (AES) using 128 bit keys in
	Cipher Block Chaining mode, as defined in <xref target="FIPS-197" />
	and <xref target="NIST-800-38A" /></c>

	<c>A256CBC</c>
	<c>Advanced Encryption Standard (AES) using 256 bit keys in
	Cipher Block Chaining mode, as defined in <xref target="FIPS-197" />
	and <xref target="NIST-800-38A" /></c>

	<c>A128GCM</c>
	<c>Advanced Encryption Standard (AES) using 128 bit keys in
	Galois/Counter Mode, as defined in <xref target="FIPS-197" />
	and <xref target="NIST-800-38D" /></c>

	<c>A256GCM</c>
	<c>Advanced Encryption Standard (AES) using 256 bit keys in
	Galois/Counter Mode, as defined in <xref target="FIPS-197" />
	and <xref target="NIST-800-38D" /></c>

      </texttable>

      <t>
	See <xref target="EncAlgXref" /> for a table cross-referencing the
	encryption <spanx style="verb">alg</spanx> (algorithm) and
	<spanx style="verb">alg</spanx> (encryption method)
	values used in this specification
	with the equivalent identifiers used by other
	standards and software packages.
      </t>

      <t>
	Of these algorithms, only RSA-PKCS1-1.5 with 2048 bit keys,
	AES-128-CBC, and AES-256-CBC MUST be implemented by conforming JWE
	implementations.  It is RECOMMENDED that implementations also
	support ECDH-ES with 256 bit keys, AES-128-GCM, and
	AES-256-GCM.  Support for other algorithms and key sizes is
	OPTIONAL.
      </t>

      <section title="Encrypting a JWE with TBD" anchor="EncryptingWithTBD">

	<t>
	  TBD: Descriptions of the particulars of using each specified
	  encryption algorithm go here.
	</t>

      </section>

      <section title="Additional Encryption Algorithms" anchor="MoreEncAlgs">

	<t>
	  Additional algorithms MAY be used to protect JWEs with
	  corresponding <spanx style="verb">alg</spanx> (algorithm) and <spanx
	  style="verb">enc</spanx> (encryption method) header parameter values being
	  defined to refer to them. New <spanx
	  style="verb">alg</spanx> and <spanx style="verb">enc</spanx>
	  header parameter values SHOULD either be defined in the IANA
	  JSON Web Encryption Algorithms registry or be a URI that
	  contains a collision resistant namespace.  In particular,
	  it is permissible to use the algorithm identifiers defined in
	  <xref target="W3C.REC-xmlenc-core-20021210">XML Encryption</xref>,
	  <xref target="W3C.CR-xmlenc-core1-20110303">XML Encryption 1.1</xref>,
	  and related specifications as <spanx style="verb">alg</spanx>
	  and <spanx style="verb">enc</spanx> values.
	</t>

      </section>
    </section>

    <section title="IANA Considerations" anchor="IANA">
      <t>
	This specification calls for:

        <list style="symbols">

          <t>
	    A new IANA registry entitled "JSON Web Signature Algorithms"
	    for values of the JWS <spanx style="verb">alg</spanx> (algorithm) header parameter
	    is defined in <xref target="MoreSigAlgs"></xref>. Inclusion
	    in the registry is RFC Required in the <xref
	    target="RFC5226">RFC 5226</xref> sense. The registry will
	    just record the <spanx style="verb">alg</spanx> value and a pointer to the RFC that
	    defines it.  This specification defines inclusion of the
	    algorithm values defined in <xref
	    target="SigAlgTable"></xref>.
	  </t>
          <t>
	    A new IANA registry entitled "JSON Web Encryption
	    Algorithms" for values used with the JWE <spanx
	    style="verb">alg</spanx> (algorithm) and <spanx
	    style="verb">enc</spanx> (encryption method) header parameters is
	    defined in <xref target="MoreEncAlgs"></xref>. Inclusion in
	    the registry is RFC Required in the <xref
	    target="RFC5226">RFC 5226</xref> sense. The registry will
	    record the <spanx style="verb">alg</spanx> or <spanx
	    style="verb">enc</spanx> value and a pointer to the RFC
	    that defines it.  This specification defines inclusion of
	    the algorithm values defined in <xref
	    target="EncAlgTable"></xref> and <xref
	    target="EncTable"></xref>.
	  </t>
        </list>
      </t>
    </section>

    <section title="Security Considerations" anchor="Security">
      <t>
	TBD
      </t>
    </section>

    <section title="Open Issues and Things To Be Done (TBD)" anchor="TBD">

      <t>
	The following items remain to be done in this draft:

	<list style="symbols">

	  <t>
	    Since RFC 3447 Section 8 explicitly calls for people NOT to
	    adopt RSASSA-PKCS1 for new applications and instead requests
	    that people transition to RSASSA-PSS, we probably need some
	    Security Considerations text explaining why RSASSA-PKCS1 is
	    being used (it's what's commonly implemented) and what the
	    potential consequences are.
	  </t>
	  <t>
	    Consider having an algorithm that is a MAC using SHA-256
	    that provides content integrity but for which there is no
	    associated secret.  This would be like the JWT
	    "alg":"none", in that no validation of the authenticity
	    content is performed but a checksum is provided.
	  </t>
	  <t>
	    Consider whether to define "alg":"none" here,
	    rather than in the JWT spec.
	  </t>
	  <t>
	    Should we define the use of RFC 5649 key wrapping
	    functions, which allow arbitrary key sizes, in addition to
	    the current use of RFC 3394 key wrapping functions, which
	    require that keys be multiples of 64 bits?  Is this needed
	    in practice?
	  </t>
	  <t>
	    Decide whether to move the JWK algorithm family
	    definitions "EC" and "RSA" here.  This would likely result
	    in all the family-specific parameter definitions also
	    moving here ("crv", "x", "y", "mod", "exp"), leaving very
	    little normative text in the JWK spec itself.  This seems
	    like it would reduce spec readability and so was not done.
	  </t>
	  <t>
	    It would be good to say somewhere, in normative language,
	    that eventually the algorithms and/or key sizes currently
	    specified will no longer be considered sufficiently secure
	    and will be removed.  Therefore, implementers MUST be
	    prepared for this eventuality.
	  </t>
	  <t>
	    Write the Security Considerations section.
	  </t>

	</list>
      </t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2104.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3394.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5226.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6090.xml' ?>

      <reference anchor="FIPS.180-3">
        <front>
          <title>Secure Hash Standard (SHS)</title>

          <author>
            <organization>National Institute of Standards and
            Technology</organization>
          </author>

          <date month="October" year="2008" />
        </front>
        <seriesInfo name="FIPS" value="PUB 180-3" />
        <format target="http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf" type="PDF" />
      </reference>

      <reference anchor="FIPS.186-3">
        <front>
          <title>Digital Signature Standard (DSS)</title>

          <author>
            <organization>National Institute of Standards and
            Technology</organization>
          </author>

          <date month="June" year="2009" />
        </front>
        <seriesInfo name="FIPS" value="PUB 186-3" />
        <format target="http://csrc.nist.gov/publications/fips/fips186-3/fips_186-3.pdf" type="PDF" />
      </reference>

      <reference anchor="FIPS-197">
        <front>
          <title>Advanced Encryption Standard (AES)</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)
            </organization>
          </author>
          <date month="November" year="2001" />
        </front>
        <seriesInfo name="FIPS" value="PUB 197" />
      </reference>

      <reference anchor="NIST-800-38A">
        <front>
          <title>Recommendation for Block Cipher Modes of Operation</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)
            </organization>
          </author>
          <date month="December" year="2001" />
        </front>
        <seriesInfo name="NIST" value="PUB 800-38A" />
      </reference>

      <reference anchor="NIST-800-38D">
        <front>
          <title>Recommendation for Block Cipher Modes of Operation:
	  Galois/Counter Mode (GCM) and GMAC</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)
            </organization>
          </author>
          <date month="December" year="2001" />
        </front>
        <seriesInfo name="NIST" value="PUB 800-38D" />
      </reference>

      <reference anchor="NIST-800-56A">
        <front>
          <title>Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography (Revised)</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)
            </organization>
          </author>
          <date month="March" year="2007" />
        </front>
        <seriesInfo name="NIST" value="PUB 800-56A" />
      </reference>

      <reference anchor="JWS">
        <front>
          <title>JSON Web Signature (JWS)</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization>independent</organization>
	    <address>
	      <email>ve7jtb@ve7jtb.com</email>
	    </address>
	  </author>

	  <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
	    <organization>Nomura Research Institute</organization>
	    <address>
	      <email>n-sakimura@nri.co.jp</email>
	    </address>
	  </author>

	  <date day="16" month="January" year="2012" />
        </front>
        <format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-signature" type="HTML" />
      </reference>

      <reference anchor="JWE">
        <front>
          <title>JSON Web Encryption (JWE)</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>

	  <author fullname="Eric Rescorla" initials="E." surname="Rescorla">
	    <organization>RTFM, Inc.</organization>
	    <address>
	      <email>ekr@rtfm.com</email>
	    </address>
	  </author>

	  <author fullname="Joe Hildebrand" initials="J." surname="Hildebrand">
	    <organization>Cisco Systems, Inc.</organization>
	    <address>
	      <email>jhildebr@cisco.com</email>
	    </address>
	  </author>

	  <date day="16" month="January" year="2012" />
        </front>
        <format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-encryption" type="HTML" />
      </reference>

    </references>

    <references title="Informative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3275.xml' ?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-xmlenc-core-20021210.xml" ?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml4/reference.W3C.CR-xmlenc-core1-20110303.xml" ?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-rescorla-jsms-00.xml" ?>

      <reference anchor="MagicSignatures">
        <front>
          <title>Magic Signatures</title>

          <author fullname="John Panzer (editor)" initials="J." surname="Panzer (editor)"></author>

          <author fullname="Ben Laurie" initials="B." surname="Laurie"></author>

          <author fullname="Dirk Balfanz" initials="D." surname="Balfanz"></author>

          <date month="August" year="2010" />
        </front>
        <format target="http://salmon-protocol.googlecode.com/svn/trunk/draft-panzer-magicsig-experimental-00.html" type="HTML" />
      </reference>

      <reference anchor="JSS">
        <front>
          <title>JSON Simple Sign</title>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization>independent</organization>
	  </author>

	  <author fullname="Nat Sakimura (editor)" initials="N. " surname="Sakimura (editor)">
	    <organization>Nomura Research Institute</organization>
	  </author>

          <date month="September" year="2010" />
        </front>
        <format target="http://jsonenc.info/jss/1.0/" type="HTML" />
      </reference>

      <reference anchor="JSE">
        <front>
          <title>JSON Simple Encryption</title>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization>independent</organization>
	  </author>

	  <author fullname="Nat Sakimura (editor)" initials="N. " surname="Sakimura (editor)">
	    <organization>Nomura Research Institute</organization>
	  </author>

          <date month="September" year="2010" />
        </front>
        <format target="http://jsonenc.info/enc/1.0/" type="HTML" />
      </reference>

      <reference anchor="CanvasApp">
        <front>
          <title>Canvas Applications</title>

          <author fullname="Facebook" surname="Facebook"></author>

          <date year="2010" />
        </front>
        <format target="http://developers.facebook.com/docs/authentication/canvas" type="HTML" />
      </reference>

      <reference anchor="JCA">
        <front>
          <title>Java Cryptography Architecture</title>

	  <author fullname="Oracle" surname="Oracle">
	  </author>

          <date year="2011" />
        </front>
        <format target="http://download.java.net/jdk7/docs/technotes/guides/security/SunProviders.html" type="HTML" />
      </reference>


    </references>

    <section title="Digital Signature/HMAC Algorithm Identifier Cross-Reference" anchor="SigAlgXref">
      <t>
	This appendix contains a table cross-referencing the
	digital signature and HMAC <spanx style="verb">alg</spanx> (algorithm)
	values used in this specification
	with the equivalent identifiers used by other standards and
	software packages.  See <xref target="RFC3275">XML DSIG</xref>
	and <xref target="JCA">Java Cryptography Architecture</xref>
	for more information about the names defined by those
	documents.

      </t>
      <texttable title="Digital Signature/HMAC Algorithm Identifier Cross-Reference" anchor="SigAlgXrefTable">

	<ttcol align="left">Algorithm</ttcol>
	<ttcol align="left">JWS</ttcol>
	<ttcol align="left">XML DSIG</ttcol>
	<ttcol align="left">JCA</ttcol>
	<ttcol align="left">OID</ttcol>

	<c>HMAC using SHA-256 hash algorithm</c>
	<c>HS256</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#hmac-sha256</c>
	<c>HmacSHA256</c>
	<c>1.2.840.113549.2.9</c>

	<c>HMAC using SHA-384 hash algorithm</c>
	<c>HS384</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#hmac-sha384</c>
	<c>HmacSHA384</c>
	<c>1.2.840.113549.2.10</c>

	<c>HMAC using SHA-512 hash algorithm</c>
	<c>HS512</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#hmac-sha512</c>
	<c>HmacSHA512</c>
	<c>1.2.840.113549.2.11</c>

	<c>RSA using SHA-256 hash algorithm</c>
	<c>RS256</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#rsa-sha256</c>
	<c>SHA256withRSA</c>
	<c>1.2.840.113549.1.1.11</c>

	<c>RSA using SHA-384 hash algorithm</c>
	<c>RS384</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#rsa-sha384</c>
	<c>SHA384withRSA</c>
	<c>1.2.840.113549.1.1.12</c>

	<c>RSA using SHA-512 hash algorithm</c>
	<c>RS512</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#rsa-sha512</c>
	<c>SHA512withRSA</c>
	<c>1.2.840.113549.1.1.13</c>

	<c>ECDSA using P-256 curve and SHA-256 hash algorithm</c>
	<c>ES256</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256</c>
	<c>SHA256withECDSA</c>
	<c>1.2.840.10045.4.3.2</c>

	<c>ECDSA using P-384 curve and SHA-384 hash algorithm</c>
	<c>ES384</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384</c>
	<c>SHA384withECDSA</c>
	<c>1.2.840.10045.4.3.3</c>

	<c>ECDSA using P-521 curve and SHA-512 hash algorithm</c>
	<c>ES512</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512</c>
	<c>SHA512withECDSA</c>
	<c>1.2.840.10045.4.3.4</c>

      </texttable>
    </section>

    <section title="Encryption Algorithm Identifier Cross-Reference" anchor="EncAlgXref">
      <t>
	This appendix contains a table cross-referencing the <spanx
	style="verb">alg</spanx> (algorithm) and <spanx style="verb">enc</spanx> (encryption method)
	values used in this specification with the equivalent
	identifiers used by other standards and software packages.
	See
	<xref target="W3C.REC-xmlenc-core-20021210">XML Encryption</xref>,
	<xref target="W3C.CR-xmlenc-core1-20110303">XML Encryption 1.1</xref>,
	and <xref
	target="JCA">Java Cryptography Architecture</xref> for more
	information about the names defined by those documents.

      </t>
      <texttable title="Encryption Algorithm Identifier Cross-Reference" anchor="EncAlgXrefTable">

	<ttcol align="left">Algorithm</ttcol>
	<ttcol align="left">JWE</ttcol>
	<ttcol align="left">XML ENC</ttcol>
	<ttcol align="left">JCA</ttcol>

	<c>RSA using RSA-PKCS1-1.5 padding</c>
	<c>RSA1_5</c>
	<c>http://www.w3.org/2001/04/xmlenc#rsa-1_5</c>
	<c>RSA/ECB/PKCS1Padding</c>
	<!-- TBD: RSA/None/PKCS1Padding or RSA/ECB/PKCS1Padding ? -->

	<c>RSA using Optimal Asymmetric Encryption Padding (OAEP)</c>
	<c>RSA-OAEP</c>
	<c>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</c>
	<c>RSA/ECB/OAEPWithSHA-1AndMGF1Padding</c>
	<!-- RSA/ECB/OAEPWithSHA-1AndMGF1Padding or RSA/ECB/OAEPWithSHA-256AndMGF1Padding or RSA/NONE/OAEPWithSHA-1AndMGF1Padding or RSA/NONE/OAEPWithSHA-256AndMGF1Padding ? -->

	<c>Elliptic Curve Diffie-Hellman Ephemeral Static</c>
	<c>ECDH-ES</c>
	<c>http://www.w3.org/2009/xmlenc11#ECDH-ES</c>
	<c>TBD</c>

	<c>Advanced Encryption Standard (AES) Key Wrap Algorithm <xref
	target="RFC3394">RFC 3394</xref> using 128 bit keys</c>
	<c>A128KW</c>
	<c>http://www.w3.org/2001/04/xmlenc#kw-aes128</c>
	<c>TBD</c>

	<c>Advanced Encryption Standard (AES) Key Wrap Algorithm <xref
	target="RFC3394">RFC 3394</xref> using 256 bit keys</c>
	<c>A256KW</c>
	<c>http://www.w3.org/2001/04/xmlenc#kw-aes256</c>
	<c>TBD</c>

	<c>Advanced Encryption Standard (AES) using 128 bit keys in
	Cipher Block Chaining mode</c>
	<c>A128CBC</c>
	<c>http://www.w3.org/2001/04/xmlenc#aes128-cbc</c>
	<c>AES/CBC/PKCS5Padding</c>

	<c>Advanced Encryption Standard (AES) using 256 bit keys in
	Cipher Block Chaining mode</c>
	<c>A256CBC</c>
	<c>http://www.w3.org/2001/04/xmlenc#aes256-cbc</c>
	<c>AES/CBC/PKCS5Padding</c>

	<c>Advanced Encryption Standard (AES) using 128 bit keys in
	Galois/Counter Mode</c>
	<c>A128GCM</c>
	<c>http://www.w3.org/2009/xmlenc11#aes128-gcm</c>
	<c>AES/GCM/NoPadding</c>

	<c>Advanced Encryption Standard (AES) using 256 bit keys in
	Galois/Counter Mode</c>
	<c>A256GCM</c>
	<c>http://www.w3.org/2009/xmlenc11#aes256-gcm</c>
	<c>AES/GCM/NoPadding</c>

      </texttable>
    </section>

    <section title="Acknowledgements" anchor="Acknowledgements">

      <t>
	Solutions for signing and encrypting JSON content were
	previously explored by <xref target="MagicSignatures">Magic
	Signatures</xref>, <xref target="JSS">JSON Simple Sign</xref>,
	<xref target="CanvasApp">Canvas Applications</xref>, <xref
	target="JSE">JSON Simple Encryption</xref>, and <xref
	target="I-D.rescorla-jsms">JavaScript Message Security
	Format</xref>, all of which influenced this draft.  Dirk
	Balfanz, John Bradley, Yaron Y. Goland, John Panzer, Nat
	Sakimura, and Paul Tarjan all made significant contributions
	to the design of this specification and its related
	specifications.
      </t>

    </section>

    <section title='Document History'>
      <t>
        -00
        <list style='symbols'>
          <t>
            Created the initial IETF draft based upon
            draft-jones-json-web-signature-04 and
            draft-jones-json-web-encryption-02 with no normative changes.
          </t>
	  <t>
	    Changed terminology to no longer call both digital
	    signatures and HMACs "signatures".
	  </t>
        </list>
      </t>
    </section>     

  </back>
</rfc>
