<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<rfc category="std" docName="draft-ietf-oauth-dyn-reg-05" ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>

  <?rfc tocdepth='3' ?>

  <?rfc symrefs='yes' ?>

  <?rfc sortrefs='yes' ?>

  <?rfc compact='yes' ?>

  <?rfc subcompact='no' ?>

  <?rfc strict='yes' ?>

  <?rfc notedraftinprogress='yes' ?>

  <front>
    <title abbrev="oauth-dyn-reg">OAuth Dynamic Client Registration
    Protocol</title>

    <author fullname="Justin Richer" initials="J" role="editor"
            surname="Richer">
      <organization>The MITRE Corporation</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <region/>

          <code/>

          <country/>
        </postal>

        <phone/>

        <facsimile/>

        <email>jricher@mitre.org</email>

        <uri/>
      </address>
    </author>

    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization abbrev="Ping Identity">Ping Identity</organization>

      <address>
        <email>ve7jtb@ve7jtb.com</email>
      </address>
    </author>

    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
      <organization abbrev="Microsoft">Microsoft</organization>

      <address>
        <email>mbj@microsoft.com</email>
      </address>
    </author>

    <author fullname="Maciej Machulak" initials="M" surname="Machulak">
      <organization>Newcastle University</organization>

      <address>
        <email>m.p.machulak@ncl.ac.uk</email>

        <uri>http://ncl.ac.uk/</uri>
      </address>
    </author>

    <date day="6" month="February" year="2013"/>

    <abstract>
      <t>This specification defines an endpoint and protocol for dynamic
      registration of OAuth Clients at an Authorization Server.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>In some use-case scenarios, it is desirable or necessary to allow
      OAuth clients to obtain authorization from an OAuth authorization server
      without requiring the two parties to interact before hand. Nevertheless,
      in order for the authorization server to accurately and securely
      represent to end-users which client is seeking authorization to access
      the end-user's resources, a method for automatic and unique registration
      of clients is needed. The OAuth2 authorization framework does not define
      how the relationship between the Client and the Authorization Server is
      initialized, or how a given client is assigned a unique Client
      Identifier. Historically, this has happened out-of-band from the OAuth
      protocol. This draft provides a mechanism for a client to register
      itself with the Authorization Server, which can be used to dynamically
      provision a Client Identifier, and optionally a Client Secret.</t>

      <t>As part of the registration process, this specification also defines
      a mechanism for the client to present the Authorization Server with a
      set of metadata, such as a display name and icon to be presented to the
      user during the authorization step. This draft provides a method for the
      client to register and update this information over time.</t>

      <section title="Notational Conventions">
        <t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
        'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
        document are to be interpreted as described in <xref
        target="RFC2119"/>.</t>

        <t>Unless otherwise noted, all the protocol parameter names and values
        are case sensitive.</t>
      </section>

      <section anchor="terminology" title="Terminology">
        <t>This specification uses the terms "Access Token", "Refresh Token",
        "Authorization Code", "Authorization Grant", "Authorization Server",
        "Authorization Endpoint", "Client", "Client Identifier", "Client
        Secret", "Protected Resource", "Resource Owner", "Resource Server",
        and "Token Endpoint" defined by <xref target="RFC6749">OAuth
        2.0</xref>.</t>

        <t>This specification defines the following additional terms:</t>

        <t><list style="symbols">
            <t>Client Registration Endpoint: The OAuth 2.0 Endpoint through
            which a Client can request new registration.</t>

            <t>Client Update Endpoint: The OAuth 2.0 Endpoint through which a
            specific Client can manage its registration information, provided
            by the Authorization Server to the Client.</t>

            <t>Client Secret Rotation Endpoint: The OAuth 2.0 Endpoint through
            which a specific Client can request refreshes of its Client Secret
            and Registration Access Token. </t>

            <t>Registration Access Token: An OAuth 2.0 Bearer Token issued by
            the Authorization Server through the Client Registration Endpoint
            which is used by the Client to authenticate itself during update
            and secret rotation operations. This token is associated with a
            particular Client.</t>
          </list></t>
      </section>
    </section>

    <section anchor="client-metadata" title="Client Metadata">
      <t>Clients generally have an array of metadata associated with their
      unique Client Identifier at the Authorization Server. These can range
      from human-facing display strings, such as a client name, to items that
      impact the security of the protocol, such as the list of valid redirect
      URIs.</t>

      <t>Extensions and profiles of this specification MAY expand this list,
      but MUST at least accept all parameters on this list. The Authorization
      Server MUST ignore any additional parameters sent by the Client that it
      does not understand.</t>

      <t>[[ Editor's note: normative language in the table below is meant to
      apply to the *client* when sending the request. The paragraph above is
      meant to say that the server must at least accept all parameters and not
      fail with an error at an unknown parameter, especially if it's in the
      list below. Also, extensions need to explicitly call out if they're not
      going to do something with one of these basic parameters instead of just
      ignoring their existence. This is meant to be the *minimum set* of
      parameters for interoperability. ]]</t>

      <t><list style="hanging">
          <t hangText="redirect_uris"><vspace blankLines="0"/>RECOMMENDED. A
          list of redirect URIs for use in the Authorization Code and Implicit
          grant types. An Authorization Server SHOULD require registration of
          valid redirect URIs for all clients that use these grant types in
          order to protect against token and credential theft attacks.</t>

          <t hangText="client_name"><vspace blankLines="0"/>RECOMMENDED.
          Human-readable name of the Client to be presented to the user. If
          omitted, the Authorization Server MAY display to the user the raw
          <spanx style="verb">client_id</spanx> value instead.</t>

          <t hangText="client_url"><vspace/>RECOMMENDED. URL of the homepage
          of the Client. If present, the server SHOULD display this URL to the
          end user in a clickable fashion.</t>

          <t hangText="logo_url"><vspace blankLines="0"/>OPTIONAL. URL that
          references a logo for the Client. If present, the server SHOULD
          display this image to the end user during approval.</t>

          <t hangText="contacts"><vspace blankLines="0"/>OPTIONAL. List of
          email addresses for people responsible for this Client. The
          Authorization Server MAY make these addresses available to end users
          for support requests for the Client. An Authorization Server MAY use
          these email addresses as identifiers for an administrative page for
          this client.</t>

          <t hangText="tos_url"><vspace blankLines="0"/>OPTIONAL. URL that
          points to a human-readable Terms of Service for the Client. The
          Authorization Server SHOULD display this URL to the End-User if it
          is given.</t>

          <t hangText="token_endpoint_auth_method"><vspace
          blankLines="0"/>OPTIONAL. The requested authentication type for the
          Token Endpoint. Valid values are:<list style="symbols">
              <t><spanx style="verb">none</spanx>: this is a public client as
              defined in OAuth 2.0 and does not have a client secret</t>

              <t><spanx style="verb">client_secret_post</spanx>: the client
              uses the HTTP POST parameters defined in OAuth2.0 section
              2.3.1</t>

              <t><spanx style="verb">client_secret_basic</spanx>: the client
              uses HTTP Basic defined in OAuth 2.0 section 2.3.1</t>

              <t><spanx style="verb">client_secret_jwt</spanx>: the client
              uses the JWT Assertion profile with a symmetric secret issued by
              the server</t>

              <t><spanx style="verb">private_key_jwt</spanx>: the client uses
              the JWT Assertion profile with its own private key</t>
            </list>Other authentication methods may be defined by extension.
          If unspecified or omitted, the default is <spanx style="verb">client_secret_basic</spanx>,
          denoting HTTP Basic Authentication Scheme as specified in Section
          2.3.1 of OAuth 2.0.</t>

          <t hangText="scope"><vspace blankLines="0"/>OPTIONAL. Space
          separated list of scopes (as described in <xref
          target="RFC6749">OAuth 2.0 Section 3.3</xref>) that the client will
          be allowed to request tokens for. If omitted, an Authorization
          Server MAY register a Client with a default set of allowed
          scopes.</t>

          <t hangText="grant_type"><vspace blankLines="0"/>OPTIONAL. List of
          grant types that a client may use. These grant types are defined as
          follows:<list style="symbols">
              <t><spanx style="verb">authorization_code</spanx>: The
              Authorization Code Grant described in OAuth2 Section 4.1.</t>

              <t><spanx style="verb">implicit</spanx>: The Implicit Grant
              described in OAuth2 Section 4.2.</t>

              <t><spanx style="verb">password</spanx>: The Resource Owner
              Password Credentials Grant described in OAuth2 Section 4.3</t>

              <t><spanx style="verb">client_credentials</spanx>: The Client
              Credentials Grant described in OAuth2 Section 4.4</t>

              <t><spanx style="verb">refresh_token</spanx>: The Refresh Token
              Grant described in OAuth2 Section 6.</t>
            </list>Authorization Servers MAY allow for other values as defined
          in grant type extensions to OAuth2. The extension process is
          described in OAuth2 Section 2.5, and the value of this parameter
          MUST be the same as the value of the <spanx style="verb">grant_type</spanx>
          parameter defined in the extension.</t>

          <t hangText="policy_url"><vspace blankLines="0"/>OPTIONAL. A URL
          location that the Client provides to the End-User to read about the
          how the profile data will be used. The Authorization Server SHOULD
          display this URL to the End-User if it is given.</t>

          <t hangText="jwk_url"><vspace blankLines="0"/>OPTIONAL. URL for the
          Client's <xref target="JWK">JSON Web Key</xref> document that is
          used for signing requests, such as requests to the Token Endpoint
          using the <spanx style="verb">private_key_jwt</spanx> assertion
          client credential. If the Client registers both <spanx style="verb">x509_url</spanx>
          and <spanx style="verb">jwk_url</spanx>, the keys contained in both
          formats MUST be the same.</t>

          <t hangText="jwk_encryption_url"><vspace blankLines="0"/>OPTIONAL.
          URL for the Client's <xref target="JWK">JSON Web Key</xref> that the
          server can use to encrypt responses to the Client. If the Client
          registers both <spanx style="verb">jwk_encryption_url</spanx> and
          <spanx style="verb">x509_encryption_url</spanx>, the keys contained
          in both formats MUST be the same.</t>

          <t hangText="x509_url"><vspace blankLines="0"/>OPTIONAL. URL for the
          Client's PEM encoded X.509 Certificate or Certificate chain that is
          used for signing requests, such as requests to the Token Endpoint
          using the <spanx style="verb">private_key_jwt</spanx> assertion
          client credential. If the Client registers both <spanx style="verb">x509_url</spanx>
          and <spanx style="verb">jwk_url</spanx>, the keys contained in both
          formats MUST be the same.</t>

          <t hangText="x509_encryption_url"><vspace blankLines="0"/>OPTIONAL.
          URL for the Client's PEM encoded X.509 Certificate or Certificate
          chain that the server can use to encrypt responses to the Client. If
          the Client registers both <spanx style="verb">jwk_encryption_url</spanx>
          and <spanx style="verb">x509_encryption_url</spanx>, the keys
          contained in both formats MUST be the same.</t>
        </list></t>
    </section>

    <section title="Client Registration Endpoint">
      <t>The Client Registration Endpoint is an OAuth 2.0 Endpoint defined in
      this document that is designed to allow a Client to register itself with
      the Authorization Server. The Client Registration Endpoint MUST accept
      HTTP POST messages with request parameters encoded in the entity body
      using the <spanx style="verb">application/json</spanx> format. The
      Client Registration Endpoint MUST be protected by a transport-layer
      security mechanism, and the server MUST support TLS 1.2 <xref
      target="RFC5246">RFC 5246</xref> and/or TLS 1.0 <xref target="RFC2246"/>
      and MAY support additional transport-layer mechanisms meeting its
      security requirements. When using TLS, the Client MUST perform a TLS/SSL
      server certificate check, per <xref target="RFC6125">RFC
      6125</xref>.</t>

      <t>The Client Registration Endpoint MAY accept an initial authorization
      credential in the form of an <xref target="RFC6749">OAuth 2.0 </xref>
      access token in order to limit registration to only previously
      authorized parties. The method by which this access token is obtained by
      the registrant is generally out-of-band and is out of scope of this
      specification.</t>

      <t>In order to support open registration and facilitate wider
      interoperability, the Client Registration Endpoint SHOULD allow initial
      registration requests with no authentication. These requests MAY be
      rate-limited or otherwise limited to prevent a denial-of-service attack
      on the Client Registration Endpoint.</t>

      <t>In order to facilitate registered clients updating their information,
      the Client Registration Endpoint issues a Request Access Token for
      clients to securely identify themselves in future connections to the
      Client Update Endpoint. As such, the Client Update Endpoint MUST accept
      requests with <xref target="RFC6750">OAuth 2.0 Bearer Tokens</xref> for
      these operations, whether or not the initial registration call requires
      authentication of some form.</t>

      <t>The Client Registration Endpoint MUST ignore all parameters it does
      not understand.</t>

      <section title="Client Registration Request">
        <t>This operation registers a new Client to the Authorization Server.
        The Authorization Server assigns this client a unique Client
        Identifier, optionally assigns a Client Secret, and associates the
        metadata given in the request with the issued Client Identifier. The
        request includes any parameters described in <xref
        target="client-metadata">Client Metadata</xref> that the client wishes
        to specify for itself during the registration. The Authorization
        Server MAY provision default values for any items omitted in the
        Client Metadata.</t>

        <t>The Client sends an HTTP POST to the Client Registration Endpoint
        with a content type of <spanx style="verb">application/json</spanx>
        and all parameters as top-level members of a JSON object.</t>

        <t>For example, a client could send the following registration request
        to the Client Registration Endpoint:</t>

        <figure>
          <preamble>Following is a non-normative example request (with line
          wraps for display purposes only):</preamble>

          <artwork><![CDATA[POST /register HTTP/1.1
Accept: application/json
Host: server.example.com

{
 "redirect_uris":["https://client.example.org/callback",
    "https://client.example.org/callback2"]
 "client_name":"My Example Client",
 "token_endpoint_auth_method":"client_secret_basic",
 "scope":"read write dolphin",
 "logo_url":"https://client.example.org/logo.png",
 "jwk_url":"https://client.example.org/my_rsa_public_key.jwk"
}
]]></artwork>
        </figure>
      </section>

      <section title="Client Registration Response">
        <t>Upon successful registration, the Client Registration Endpoint
        returns the newly-created Client Identifier and, if applicable, a
        Client Secret.</t>

        <t>Additionally, the Authorization Server SHOULD return all registered
        <xref target="client-metadata">metadata</xref> about this client,
        including any fields provisioned by the Authorization Server itself.
        The Authorization Server MAY reject or replace any of the client's
        requested metadata values submitted during the registration request
        and substitute them with suitable values. If the Authorization Server
        performs any such substitutions to the requested values, it MUST
        return these values in the response.</t>

        <t>The response contains a <spanx style="verb">_links</spanx>
        structure which contains fully qualified URLs to the Client Update
        Endpoint and the Client Secret Rotation Endpoint for this specific
        client. The response also contains a Registration Access Token that is
        to be used by the client to perform subsequent operations at the
        Client Update Endpoint and the Client Secret Rotation Endpoint.</t>

        <t>The response is an <spanx style="verb">application/json</spanx>
        document with the following parameters in addition to any applicable
        client metadata fields as top-level members of a <xref
        target="RFC4627">JSON object</xref> .</t>

        <t><list style="hanging">
            <t hangText="client_id"><vspace/>REQUIRED. The unique Client
            identifier, MUST NOT be currently valid for any other registered
            Client.</t>

            <t hangText="client_secret"><vspace/>OPTIONAL. The Client secret.
            If issued, this MUST be unique for each <spanx style="verb">client_id</spanx>.
            This value is used by confidential clients to authenticate to the
            Token Endpoint as described in OAuth 2.0 Section 2.3.1.</t>

            <t hangText="registration_access_token"><vspace/>REQUIRED. The
            Access token to be used by the client to perform actions on the
            Client Update Endpoint and the Client Secret Rotation
            Endpoint.</t>

            <t hangText="issued_at"><vspace/>OPTIONAL. Specifies the timestamp
            when the Client Identifier was issued. The timestamp value MUST be
            a positive integer. The value is expressed in the number of
            seconds since January 1, 1970 00:00:00 GMT.</t>

            <t hangText="expires_at"><vspace/>REQUIRED if <spanx style="verb">client_secret</spanx>
            is issued. The number of seconds from 1970-01-01T0:0:0Z as
            measured in UTC that the <spanx style="verb">client_secret</spanx>
            will expire or <spanx style="verb">0</spanx> if it does not
            expire. See <xref target="RFC3339">RFC 3339</xref> for details
            regarding date/times in general and UTC in particular.</t>

            <t hangText="_links"><vspace blankLines="0"/>REQUIRED. A JSON
            object that contains references to the Client Update Endpoint and
            Client Secret Rotation Endpoint, via the following members:<list
                style="hanging">
                <t hangText="self">REQUIRED. A JSON object that contains the
                member href which contains the fully qualified URL of the
                Client Update Endpoint for this client. This MAY be
                constructed using a URL Template of the Client Registration
                Endpoint with the issued client_id.</t>

                <t hangText="rotate_secret">REQUIRED. A JSON object that
                contains the member href which contains the fully qualified
                URL of the Client Secret Rotation Endpoint for this client.
                This MAY be constructed using a URL Template of the Client
                Registration Endpoint with the issued client_id.</t>
              </list></t>
          </list></t>

        <figure>
          <preamble>Following is a non-normative example response:</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
 _links: {
   "self": {
     "href": 
       "https://server.example.com/register/s6BhdRkqt3"
   },
   "rotate_secret": {
     "href": 
       "https://server.example.com/register/rotate_secret/s6BhdRkqt3"
   }
 "redirect_uris":["https://client.example.org/callback",
    "https://client.example.org/callback2"]
 "client_id":"s6BhdRkqt3",
 "client_secret": "cf136dc3c1fc93f31185e5885805d",
 "scope": "read write dolphin",
 "grant_type": ["authorization_code", "refresh_token"]
 "token_endpoint_auth_method": "client_secret_basic",
 "logo_url": "https://client.example.org/logo.png",
 "jwk_url": "https://client.example.org/my_rsa_public_key.jwk",
 "registration_access_token": "reg-23410913-abewfq.123483",
 "expires_at":2893276800
}]]></artwork>
        </figure>
      </section>

      <section title="Client Registration Error Response">
        <t>When an OAuth error condition occurs, the Client Registration
        Endpoint returns an Error Response as defined in Section 5.2 of the
        OAuth 2.0 specification.</t>

        <t>When a registration error condition occurs, the Client Registration
        Endpoint returns a HTTP 400 status code including a <xref
        target="RFC4627">JSON object</xref> describing the error in the
        response body.</t>

        <t>The JSON object contains two members:</t>

        <t><list style="hanging">
            <t hangText="error"><vspace/>The error code, a single ASCII
            string.</t>

            <t hangText="error_description"><vspace/>The additional text
            description of the error for debugging.</t>
          </list></t>

        <t>This specification defines the following error codes:</t>

        <t><list style="hanging">
            <t hangText="invalid_redirect_uri"><vspace/>The value of one or
            more <spanx style="verb">redirect_uris</spanx> is invalid.</t>

            <t hangText="invalid_client_metadata"><vspace/>The value of one of
            the <xref target="client-metadata">client metadata</xref> fields
            is invalid and the server has rejected this request. Note that an
            Authorization server MAY choose to substitute a valid value for
            any requested parameter of a client's metadata.</t>
          </list></t>

        <figure>
          <preamble>Following is a non-normative example of an error response
          (with line wraps for display purposes only):</preamble>

          <artwork><![CDATA[HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store
   
{
 "error":"invalid_redirect_uri",
 "error_description":"The redirect URI of http://sketchy.example.com
   is not allowed for this server."
}]]></artwork>
        </figure>
      </section>
    </section>

    <section title="Client Update Endpoint">
      <t>The Client Update Endpoint is an OAuth 2.0 protected endpoint that is
      provisioned by the server for a specific client to be able to view and
      update its registered information. It is RECOMMENDED that this endpoint
      URL be formed through the use of a URL template which combines the
      Client Registration Endpoint and the issued client_id for this client,
      either as a path parameter
      (https://server.example.com/register/client_id) or as a query parameter
      (https://server.example.com/register/?update=client_id). The
      Authorization Server MUST provide the client with the fully qualified
      URL in the _links structure described in section 3 and MUST NOT require
      the client to construct this URL on its own.</t>

      <t>The Authorization Server MUST be able to determine the appropriate
      client_id from the context of the request without requiring the Client
      to explicitly send its own <spanx style="verb">client_id</spanx> in the
      request.</t>

      <t>Operations on this endpoint are switched through the use of specific
      HTTP verbs.</t>

      <section title="Client Update Request">
        <t>This operation updates a previously-registered client with new
        metadata at the Authorization Server. This request is authenticated by
        the Registration Access Token issued to the client.</t>

        <t>The Client makes an HTTP PUT request to the Client Update Endpoint
        with a content type of <spanx style="verb">application/json</spanx>.
        This request MAY include any fields described in <xref
        target="client-metadata">Client Metadata</xref>. If included in the
        request, valid values of Client Metadata fields in this request MUST
        replace, not augment, the values previously associated with this
        Client. Any fields with the value of a JSON "null" in Client Metadata
        MUST be taken as a request to clear any existing value of that field.
        Omitted values in the Client Metadata MUST remain unchanged by the
        Authorization Server. The Authorization Server MAY replace any invalid
        values with suitable values, and it MUST return any such fields to the
        Client in the response.</t>

        <t>For example, a client could send the following request to the
        Client Registration Endpoint to update the client registration in the
        above example:</t>

        <figure>
          <preamble>Following is a non-normative example request (with line
          wraps for display purposes only):</preamble>

          <artwork><![CDATA[PUT /register/s6BhdRkqt3 HTTP/1.1
Accept: application/json
Host: server.example.com
Authorization: Bearer reg-23410913-abewfq.123483

{
 "redirect_uri":["https://client.example.org/callback",
    "https://client.example.org/alt"],
 "client_name":"My New Example",
 "logo_url":"https://client.example.org/newlogo.png"
}
]]></artwork>
        </figure>
      </section>

      <section title="Client Read Request">
        <t>In order to read the current configuration of the Client on the
        Authorization Server, the Client makes an HTTP GET request to the
        Client Update Endpoint with the Registration Access Token.</t>

        <figure>
          <preamble>Following is a non-normative example request (with line
          wraps for display purposes only):</preamble>

          <artwork><![CDATA[GET /register/s6BhdRkqt3 HTTP/1.1
Accept: application/json
Host: server.example.com
Authorization: Bearer reg-23410913-abewfq.123483

]]></artwork>
        </figure>
      </section>

      <section title="Client Update or Read Response">
        <t>Upon successful update or read operation, the Client Update
        Endpoint returns the Client ID. Additionally, the Authorization Server
        SHOULD return all registered <xref
        target="client-metadata">metadata</xref> about this client, including
        any fields provisioned by the Authorization Server itself. </t>

        <t>The Authorization Server MAY reject or replace any of the client's
        requested metadata values submitted during an update request and
        substitute them with suitable values. If the Authorization Server
        performs any such substitutions to the requested values, it MUST
        return these values in the response.</t>

        <t>The Authorization Server MUST NOT include the Client Secret or
        Request Access Token in this response.</t>

        <t>The response is a <xref target="RFC4627">JSON Document</xref> with
        the following fields as well as any applicable client metadata as
        top-level members of a JSON object.<list style="hanging">
            <t hangText="client_id"><vspace/>REQUIRED. The unique Client
            identifier, MUST equal the value of the client_id returned in the
            original client_register request.</t>

            <t hangText="_links"><vspace blankLines="0"/>REQUIRED. A JSON
            object that contains references to the Client Update Endpoint and
            Client Secret Rotation Endpoint, via the following members:<list
                style="hanging">
                <t hangText="self">REQUIRED. A JSON object that contains the
                member href which contains the fully qualified URL of the
                Client Update Endpoint for this client. This MAY be
                constructed using a URL Template of the Client Registration
                Endpoint with the issued client_id.</t>

                <t hangText="rotate_secret">REQUIRED. A JSON object that
                contains the member href which contains the fully qualified
                URL of the Client Secret Rotation Endpoint for this client.
                This MAY be constructed using a URL Template of the Client
                Registration Endpoint with the issued client_id.</t>
              </list></t>
          </list></t>

        <figure>
          <preamble>Following is a non-normative example response:</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
 _links: {
   "self": {
     "href": "https://server.example.com/register/s6BhdRkqt3"
   },
   "rotate_secret": {
     "href": "https://server.example.com/register/s6BhdRkqt3/secret"
   }
 "client_id": "s6BhdRkqt3",
 "client_name": "My New Example",
 "redirect_uri": ["https://client.example.org/callback",
   "https://client.example.org/alt"]
 "scope": "read write dolphin",
 "grant_type": ["authorization_code", "refresh_token"],
 "token_endpoint_auth_method": "client_secret_basic",
 "logo_url": "https://client.example.org/newlogo.png",
 "jwk_url": "https://client.example.org/my_rsa_public_key.jwk",
}]]></artwork>
        </figure>
      </section>

      <section title="Client Delete Request">
        <t>In order to deprovision itself on the Authorization Server, the
        Client makes an HTTP DELETE request to the Client Update Endpoint with
        the Registration Access Token. This request is authenticated by the
        Registration Access Token issued to the client.</t>

        <figure>
          <preamble>Following is a non-normative example request (with line
          wraps for display purposes only):</preamble>

          <artwork><![CDATA[DELETE /register/s6BhdRkqt3 HTTP/1.1
Accept: application/json
Host: server.example.com
Authorization: Bearer reg-23410913-abewfq.123483

]]></artwork>
        </figure>

        <t/>

        <t>If a client has been successfully deprovisioned, the Authorization
        Server responds with an HTTP 204 No Content message.</t>

        <figure>
          <preamble>Following is a non-normative example response:</preamble>

          <artwork><![CDATA[HTTP/1.1 204 No Content
Cache-Control: no-store

]]></artwork>
        </figure>
      </section>
    </section>

    <section title="Client Secret Rotation">
      <t>The Client Secret Rotation Endpoint is an OAuth 2.0 protected
      endpoint that is provisioned by the server for a specific client to be
      able to request rotation of its Registration Access Token and, if it has
      one, Client Secret. It is RECOMMENDED that this endpoint URL be formed
      through the use of a URL template which combines the Client Registration
      Endpoint and the issued client_id for this client, either as a path
      parameter (https://server.example.com/register/rotate_secret/client_id)
      or as a query parameter
      (https://server.example.com/register/?rotate_secret=client_id). The
      Authorization Server MUST provide the client with the fully qualified
      URL in the _links structure described in section 3, and MUST NOT require
      the Client to construct this URL on its own.</t>

      <t>The Authorization Server MUST be able to determine the appropriate
      client_id from the context of the request without requiring the Client
      to explicitly send its own <spanx style="verb">client_id</spanx> in the
      request.</t>

      <section title="Rotate Secret Request">
        <t>This operation allows the client to rotate its current Registration
        Access Token as well as its Client Secret, if it has one. The client
        sends an HTTP POST with its current Registration Access Token. This
        request is authenticated by the Registration Access Token issued to
        the client.</t>

        <figure>
          <preamble>Following is a non-normative example request (with line
          wraps for display purposes only):</preamble>

          <artwork><![CDATA[POST /register/rotate_secret/s6BhdRkqt3 HTTP/1.1
Accept: application/json
Host: server.example.com
Authorization: Bearer reg-23410913-abewfq.123483

]]></artwork>
        </figure>
      </section>

      <section title="Rotate Secret Response">
        <t>Upon successful rotation of the Registration Access Token, and
        optionally the Client Secret, the Client Registration Endpoint returns
        a <xref target="RFC4627">JSON document</xref> with the following
        fields as top-level members of the root JSON object. This response
        MUST NOT include any other client metadata.<list style="hanging">
            <t hangText="client_id"><vspace/>REQUIRED. The unique Client
            identifier, MUST match the client_id issued in the original
            registration request.</t>

            <t hangText="client_secret"><vspace/>REQUIRED if the server
            initially issued this Client a Client Secret, otherwise the server
            MUST NOT return a value. The value MUST be unique for each <spanx
            style="verb">client_id</spanx>.</t>

            <t hangText="registration_access_token"><vspace/>REQUIRED. The
            Access token to be used by the client to perform subsequent <spanx
            style="verb">client_update</spanx> and <spanx style="verb">rotate_secret</spanx>
            requests.</t>

            <t hangText="issued_at"><vspace/>OPTIONAL. Specifies the timestamp
            when the identifier was issued. The timestamp value MUST be a
            positive integer. The value is expressed in the number of seconds
            since January 1, 1970 00:00:00 GMT.</t>

            <t hangText="expires_at"><vspace/>REQUIRED if the server issues a
            Client Secret. The number of seconds from 1970-01-01T0:0:0Z as
            measured in UTC that the <spanx style="verb">client_secret</spanx>
            will expire or <spanx style="verb">0</spanx> if they do not
            expire. See <xref target="RFC3339">RFC 3339</xref> for details
            regarding date/times in general and UTC in particular.</t>
          </list></t>

        <figure>
          <preamble>Following is a non-normative example response:</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store

{
 "client_id":"s6BhdRkqt3",
 "client_secret": "7fce6c93f31185e5885805d",
  "registration_access_token": "reg-02348913-oieqer.983421",
 "expires_at":2893276800
}]]></artwork>
        </figure>

        <t/>

        <t>The Authorization Server SHOULD discard and invalidate the Request
        Access Token and the Client Secret associated with this Client after
        successful completion of this request.</t>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes no requests of IANA.</t>
    </section>

    <section title="Security Considerations">
      <t>[[ Editor's note: Following are some security considerations taken
      from the UMA and OpenID Connect source drafts. These need to be massaged
      into a properly generic set of considerations. ]]</t>

      <t>Since requests to the Client Registration Endpoint result in the
      transmission of clear-text credentials (in the HTTP request and
      response), the server MUST require the use of a transport-layer security
      mechanism when sending requests to the Registration Endpoint. The server
      MUST support TLS 1.2 <xref target="RFC5246">RFC 5246</xref> and/or TLS
      1.0 <xref target="RFC2246"/> and MAY support additional transport-layer
      mechanisms meeting its security requirements. When using TLS, the Client
      MUST perform a TLS/SSL server certificate check, per <xref
      target="RFC6125">RFC 6125</xref>.</t>

      <t>As this endpoint is an OAuth2 Protected Resource, requests to the
      Registration Endpoint SHOULD have some rate limiting on failures to
      prevent the Registration Access Token from being disclosed though
      repeated access attempts.</t>

      <t>The authorization server MUST treat all client metadata as
      self-asserted. A rogue Client might use the name and logo for the
      legitimate Client, which it is trying to impersonate. An Authorization
      Server needs to take steps to mitigate this phishing risk, since the
      logo could confuse users into thinking they're logging in to the
      legitimate Client. For instance, an Authorization Server could warn if
      the domain/site of the logo doesn't match the domain/site of redirect
      URIs. An Authorization Server can also present warning messages to end
      users about untrusted Clients in all cases, especially if such clients
      have been dynamically registered and have not been trusted by any users
      at the Authorization Server before.</t>

      <t>In a situation where the Authorization Server is supporting open
      Client registration, it must be extremely careful with any URL provided
      by the Client that will be displayed to the user (e.g. <spanx
      style="verb">logo_url</spanx> and <spanx style="verb">policy_url</spanx>).
      A rogue Client could specify a registration request with a reference to
      a drive-by download in the <spanx style="verb">policy_url</spanx>. The
      Authorization Server should check to see if the <spanx style="verb">logo_url</spanx>
      and <spanx style="verb">policy_url</spanx> have the same host as the
      hosts defined in the array of <spanx style="verb">redirect_uris</spanx>.</t>

      <t>While the Client Secret can expire, the Registration Access Token
      should not expire while a client is still actively registered. If this
      token were to expire, a Client could be left in a situation where it has
      no means of updating itself and must register itself anew. As the
      Registration Access Tokens are long-term credentials, they MUST be
      protected by the Client as a secret. [[ Editor's note: with the right
      error codes returned from client_update, the AS could force the Client
      to call rotate_secret before going forward, lessening the window for
      abuse of a leaked registration token. ]]</t>

      <t>Since the Registration Access Token is a Bearer token and acts as the
      sole authentication for use at the Client Update Endpoint, it MUST be
      protected by the Client as described in <xref target="RFC6750">OAuth 2.0
      Bearer</xref>.</t>
    </section>

    <section title="Acknowledgments">
      <t>The authors thank the OAuth Working Group, the User-Managed Access
      Working Group, and the OpenID Connect Working Group participants for
      their input to this document. In particular, the following individuals
      have been instrumental in their review and contribution to various
      versions of this document: Torsten Lodderstedt, Eve Maler, Thomas
      Hardjono, Christian Scholz, Nat Sakimura, George Fletcher, Amanda
      Anganes, and Domenico Catalano.</t>
    </section>

    <section title="Document History">
      <t>[[ to be removed by RFC editor before publication as an RFC ]]</t>

      <t>- 05</t>

      <t><list style="symbols">
          <t>changed redirect_uri and contact to lists instead of space
          delimited strings</t>

          <t>removed operation parameter</t>

          <t>added _links structure</t>

          <t>made client update management more RESTful</t>

          <t>split endpoint into three parts</t>

          <t>changed input to JSON from form-encoded</t>

          <t>added READ and DELETE operations</t>

          <t>removed Requirements section</t>

          <t>changed token_endpoint_auth_type back to
          token_endpoint_auth_method to match OIDC who changed to match us</t>
        </list></t>

      <t>- 04</t>

      <t><list style="symbols">
          <t>removed default_acr, too undefined in the general OAuth2 case</t>

          <t>removed default_max_auth_age, since there's no mechanism for
          supplying a non-default max_auth_age in OAuth2</t>

          <t>clarified signing and encryption URLs</t>

          <t>changed token_endpoint_auth_method to token_endpoint_auth_type to
          match OIDC</t>
        </list></t>

      <t>- 03</t>

      <t><list style="symbols">
          <t>added scope and grant_type claims</t>

          <t>fixed various typos and changed wording for better clarity</t>

          <t>endpoint now returns the full set of client information</t>

          <t>operations on client_update allow for three actions on metadata:
          leave existing value, clear existing value, replace existing value
          with new value</t>
        </list></t>

      <t>- 02</t>

      <t><list style="symbols">
          <t>Reorganized contributors and references</t>

          <t>Moved OAuth references to RFC</t>

          <t>Reorganized model/protocol sections for clarity</t>

          <t>Changed terminology to "client register" instead of "client
          associate"</t>

          <t>Specified that client_id must match across all subsequent
          requests</t>

          <t>Fixed RFC2XML formatting, especially on lists</t>
        </list></t>

      <t>- 01</t>

      <t><list style="symbols">
          <t>Merged UMA and OpenID Connect registrations into a single
          document</t>

          <t>Changed to form-paramter inputs to endpoint</t>

          <t>Removed pull-based registration</t>
        </list></t>

      <t>- 00</t>

      <t><list style="symbols">
          <t>Imported original UMA draft specification</t>
        </list></t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2246.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.3339.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.6125.xml"?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6749.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6750.xml'?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml'?>

      <reference anchor="JWK">
        <front>
          <title>JSON Web Key (JWK)</title>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization>Microsoft</organization>
          </author>

          <date day="12" month="May" year="2012"/>
        </front>

        <format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-key"
                type="HTML"/>
      </reference>
    </references>
  </back>
</rfc>
