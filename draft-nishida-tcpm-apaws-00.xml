<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSPY v5 rel. 3 U (http://www.xmlspy.com)
     by Daniel M Kohn (private) -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
    <!ENTITY rfc2119 PUBLIC '' 
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
]>

<rfc category="exp" ipr="trust200902" docName="draft-nishida-tcpm-apaws-00">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc strict="yes" ?>

   <front>
   <title abbrev="Alternative PAWS">
               A-PAWS: Alternative Approach for PAWS 
   </title>

    <author initials='Y.N' surname="Nishida" fullname='Yoshifumi Nishida'> 
      <organization> GE Global Research </organization>
      <address><postal> <street>2623 Camino Ramon</street>
        <city>San Ramon</city> <region>CA </region><code>94583</code>
        <country>USA</country>
        </postal>
        <email>nishida@wide.ad.jp</email>
      </address>
    </author>

   <date/>
   <abstract>
   <t>
   This documents describe a technique called A-PAWS which can provide protection against 
   old duplicates segments like PAWS. While PAWS requires TCP to set timestamp options in all 
   segments in a TCP connection, A-PAWS supports the same feature without using timestamps. 
   A-PAWS is designed to be used complementary with PAWS. TCP needs to use PAWS when it is 
   necessary and activates A-PAWS only when it is safe to use. 
   Without impairing the reliability and the robustness of TCP, A-PAWS can provide more 
   option space to other TCP extensions.
   </t>
   </abstract>
</front>

<middle>
<section title="Introduction">
<t>
   PAWS (Protect Against Wrapped Sequences) defined in <xref target="RFC1323" /> is
   a technique that can identify old duplicate segments in a TCP connection. 
   An old duplicate segment can be generated when it has been delayed by queueing, etc.
   If such a segment has the sequence number which falls within the receiver's current window, 
   the receiver will accept it without any warning or error. 
   However, this segment can be a segment created by an old connection that has the same port 
   and address pair, or a segments sent 2**32 bytes earlier on the same connection. 
   Although this situation rarely happens, it impairs the reliability of TCP. 
</t>
<t>
   PAWS utilizes timestamp option in <xref target="RFC1323" /> to provide protection
   against this. It is assumed that every received TCP segment contains a timestamp. 
   PAWS can identify old duplicate segments by comparing the timestamp in the received segments and 
   the timestamps from other segments received recently. If both TCP endpoints agree to use PAWS,
   all segments belong to this connection should have timestamp. 
   Since PAWS is the only standardized protection against old duplicate segments, 
   it has been implemented and used in most TCP implementations. 
   However, as some TCP extensions such as <xref target="RFC2018" />, 
   <xref target="RFC5925" /> and <xref target="RFC6824"/> also requires 
   a certain amount of option space in non-SYN segments, using 10-12 bytes length in option
   space for timestamp in all segments tends to be considered expensive in recent discussions. 
</t>    
<t>
   In addition, although PAWS is necessary for connections which transmit more than 2**32 bytes,
   it is not very important for other connections since <xref target="RFC0793" /> already has protection against
   segments from old connections by using timers. Moreover, some research results indicates that
   most of TCP flows tend to transmit small amount of data, which means only small fraction of 
   TCP connections really need PAWS <xref target="QIAN11" />. 
   Timestamp option is also used for RTTM (Round Trip Time Measurement) in <xref target="RFC1323" />.
   Gathering many RTT samples from the timestamp in every TCP segment looks useful approach to 
   improve RTO estimation. However, some research results shows the number of samples per RTT 
   does not affect the effectiveness of the RTO <xref target="MALLMAN99" />. 
   Hence, we can think if PAWS is not used, sending a few timestamps per RTT will be sufficient.
</t>
<t>
   Based on these observations, we propose a new technique called A-PAWS which can archive similar protection 
   against old duplicates segments. The basic idea of A-PAWS is not using option in non-SYN segments,
   while it can attain the same protection against old all duplicate segments as PAWS.
   A-PAWS is designed to be used complementary with PAWS. This means an implementation that 
   supports A-PAWS is still required to supports PAWS. A-PAWS is activated only when it is safe to use. 
   This sounds the applicability of A-PAWS is limited, however, we believe TCP will have a lot of
   chances to save the option space if it uses A-PAWS. 
</t>
<t>
   There are some discussions that PAWS can also be used to enhance security, 
   however, we still believe that A-PAWS can maintain the same level of security as PAWS.
   Detailed discussions on this point are provided in <xref target="sec_discussion" />.
   A-PAWS is an experimental idea yet, but we hope it will contribute to facilitating the use of TCP 
   option space.
</t>
</section>

<section title="Conventions and Terminology">
   <t>
  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
  "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
  document are to be interpreted as described in <xref target="RFC2119"/>.
   </t>
</section>

<section title="The A-PAWS Design">
<t>   
A-PAWS assumes PAWS as it is designed to be used complementary with PAWS. 
Hence, a node which supports A-PAWS MUST support PAWS. 
The following mechanisms are required in TCP in order to perform A-PAWS.
</t>
<section title="Signaling Method">
<t>
A-PAWS requires a signaling mechanism to enable this fature.
This is because A-PAWS presumes the use of timestamp, while it allows TCP to transmit 
segments without timestamp. 
In <xref target="RFC1323"/>, once timestamp option has been negotiated to be used 
in the connection, TCP stacks are required to set timestamp options in all TCP segments.
If TCP receives segments without TS option after timestamp negotiation,
the segments will be discarded. Hence, if one endpoint uses A-PAWS and the other endpoint
uses PAWS, the segments from the A-PAWS endpoint will be discarded. The signaling mechanism
for A-PAWS should address this point. The followings are possible approach.

<list style="hanging" hangIndent="4">
<t hangText="1) Synchronous Option Exchange"><vspace />
This method requires using new codepoints for TCP option and exchange them during SYN negotiation.
The use of <xref target="I-D.ietf-tcpm-experimental-options" /> 
is recommended. Since A-PAWS negotiation is 1 bit information (on or off),
new option does not need to have any content. Hence, if 16-bit EXID is used, the option size for A-PAWS 
can be kept in 4 bytes length. We currently recommend the use of different codepoints for SYN and SYN-ACK.
This is because it is known that some TCP implementations blindly echo-back their unknown options 
in SYN segments. Also, it is recommended to set the option in the third ACK: ACK for SYN-ACK 
for robust signaling in case of the lost of the option in SYN-ACK. 
</t>
<t hangText="2) Asynchronous Option Exchange"><vspace />
This method also uses new codepoints for TCP option and exchange them during SYN negotiation.
However, the signaling of this method is treated as unidirectional. 
This means when TCP set A-PAWS option, it indicates that this endpoint is willing to accept 
segments without timestamps by A-PAWS logic. 
However, it does not indicate this endpoint will transmit segments without timestamp. 
TCP is allowed to transmit segments with A-PAWS logic only when it receives the segments with A-PAWS option.
</t>
<t hangText="3) Option Exchange in non-SYN Segments"><vspace />
This method is similar to the synchronous or asynchronous option exchange in SYN segments, however, 
it uses A-PAWS option in non-SYN segments for signaling. This approach does not need to utilize option
space in SYN segments which is highly competitive resource.
</t>
<t hangText="4) Timestamp Field Negotiation"><vspace />
This method is based on timestamp field negotiation proposed in 
<xref target="I-D.scheffenegger-tcpm-timestamp-negotiation" />.
The draft proposes to utilize timestamp values in SYN segments in order to negotiate 
additional capabilities for timestamps. Although the detailed mechanisms 
are still under discussion, it does not require option space.
</t>
</list>
</t>
</section>
<section title="Sending Behavior">
<t> A-PAWS enabled TCP transmits segments, it needs to follow the rules below.
<list style="numbers">
<t> TCP needs to check how many bytes has been transmitted in a connection.
If the transmitted bytes exceeds 2**32 - 'Sender.Offset', 
TCP migrates PAWS mode and MUST set timestamp option in all segments to be transmitted. 
The value for 'Sender.Offset' is discussed in <xref target="sec_discussion" />.
</t>
<t> If the number of bytes transmitted in a TCP connection does not exceeds 2**32 - 'Sender.Offset', 
TCP MAY omit timestamp option in segments as long as it does not affect RTTM. 
This draft does not define how much TCP can omit timestamps because it should be determined by RTTM.
</t>
</list>
</t>
</section>
<section title="Receiving Behavior">
<t> A-PAWS enabled TCP receives segments, it needs to follow the rules below.
<list style="numbers">
<t> TCP needs to check how many bytes has been received in a TCP connection.
If it exceeds 2**32 bytes, A-PAWS nodes SHOULD discard the received segments which does not have timestamp option.
TCP MUST perform PAWS check when received bytes exceeds 2**32 bytes.
</t> 
<t>
If the number of bytes received in a TCP connection does not exceeds 2**32 bytes, 
A-PAWS nodes SHOULD accept the segments even if it does not have timestamp option. 
A-PAWS nodes MAY skip PAWS check until the received bytes exceeds 2**32 bytes.
</t>
</list>
</t>
</section>
</section>

<section title="When To Use A-PAWS" anchor="sec_usage">
<t>
In basic principal, A-PAWS capable nodes can always use A-PAWS as long as the peers agree with them.
However, the following cases require special considerations to enable A-PAWS.
<list style="numbers">
<t>
As "When To Keep Quiet" section in <xref target="RFC0793" /> suggests, it is recommended that TCP keeps quiet 
for a MSL upon starting up or recovering from a crash where memory of sequence numbers has been lost.
However,  if timestamps are being used and if the timestamp clock can be guaranteed to be 
increased monotonically, this quiet time may be unnecessary. Because TCP can identify the segments 
from old connections by checking the timestamp. 
We think some TCP implementations may disable the quiet time because of using timestamps from this 
reason. 
However, since A-PAWS nodes does not set timestamp options in all segments, TCP cannot rely on this approach. 
To avoid decreasing the robustness of TCP connection, TCP MUST NOT use A-PAWS for a MSL upon 
starting up or recovering from a crash.
</t>
<t> Various TCP implementations provide APIs such as setsockopt() that can set SO_REUSEADDR flag on TCP connections. 
If this flag is set, the TCP connection allows to reuse the same local port without waiting for 2 MSL period.
While this option is useful when users want to relaunch applications immediately, it makes the TCP connection 
a little vulnerable as TCP stack might receive duplicate segments from earlier incarnations. 
It has been said that PAWS can contribute to mitigate this risk by checking the timestamps in segments.
In order to keep the same level of protection, TCP SHOULD NOT enable A-PAWS when SO_REUSEADDR flag is set.
</t>
</list>
</t>
</section>

<section title="Discussion" anchor="sec_discussion">
 <t>
As A-PAWS is an experimental logic, the following points need to be considered and discussed.
 </t>
<section title="Protection Against Early Incarnations">
 <t> 
There are some discussions that timestamp can enhance the robustness against early incarnations.
Since A-PAWS does not set timestamps in all segments, some may say that it degrades the robustness 
of TCP. We believe that the degradation caused by A-PAWS on this point is negligible. As long as
TCP limits the usage of A-PAWS as described in <xref target="sec_usage" />, 
duplicate segments from early incarnations should not be received by TCP. 
</t>
</section>
<section title="Protection Against Security Threats">
<t>
A TCP connection can be identified by a 5-tuple: source address, destination address, source port number, 
destination port number and protocol. Crackers need to guess all these parameters when they try malicious
attacks on the connection. PAWS can enhance the protection for this as it additionally requires timestamp checking.
However, we think the effect of PAWS against malicious attacks is limited due to the simplicity of PAWS check. 
In PAWS, a segment can be considered as an old duplicate if the timestamp in the segment less than
some timestamps recently received on the connection. The "less than" in this context is determined 
by processing timestamp values as 32 bit unsigned integers in a modular 32-bit space. 
For example, if t1 and t2 are timestamp values, t1 < t2 is verified when 0 < (t2 - t1) < 2**31 computed in 
unsigned 32-bit arithmetic. Hence, if crackers set a random value in the timestamp option, there will be
50% chance for them to trick PAWS check. Moreover, there will be more chances if they send multiple 
segments with different timestamps, which will not be difficult to perform. 
</t>
<t>
In addition, we think there might be a case where using PAWS increases security risks.  
PAWS recommends to increase timestamp over a system when TCP waives the "quiet time" described in 
<xref target="RFC0793" />.
However, if timestamps are generated from a global counter, it may leak some information such as 
system uptime as discussed in <xref target="SILBERSACK05" />. 
A-PAWS might be able to allows TCP to use random timestamp values per connections.
</t>
</section>
<section title="Middlebox Considerations">
<t>
There might be a case where the signaling for A-PAWS is confused by middleboxes. 
For example, in case of synchronous option exchange, if the option for A-PAWS is removed from SYN-ACK, 
we will have a situation where one node enables A-PAWS and the other node disables A-PAWS. 
When an A-PAWS endpoint sends segments without timestamp and a PAWS endpoint receives them, 
the segments will be discarded. Hence, if synchronous option exchange is used, we 
recommend to set A-PAWS option in the third ACK for robust signaling. 
If the third ACK does not contain A-PAWS option, the receiver should disable A-PAWS. 
</t>
<t>
In case of asynchronous option exchange signaling, endpoints will not be messed up 
even if middleboxes discard A-PAWS option. This is because A-PAWS sender logic is 
activated only when TCP receives a segment with A-PAWS options. A-PAWS receiver logic 
does not need to know whether the sender is using PAWS or A-PAWS.
On the other hand, as an A-PAWS endpoint always needs to activate A-PAWS receiver logic 
even if the peer uses PAWS, it will require extra overhead compared to the synchronous signaling.
However, we believe the overhead will be acceptable in most cases because of the simplicity 
of A-PAWS logic.
</t>
<t>
Another concern on middleboxes is that they can insert or delete some bytes in TCP connections.
If a middlebox inserts extra bytes into a TCP connections, there might be a situation where 
an A-PAWS sender can transmit segments without timestamp, while an A-PAWS receiver
perform PAWS check on them as it already has received 2**32 bytes. 
In order to avoid discarding segments unnecessarily, we recommend that A-PAWS sender should have 
a certain amount of offset bytes in order to migrate PAWS mode before the receiver receives 2**32 bytes.
We call this protocol parameter 'Sender.Offset'. The proper value for 'Sender.Offset' needs to be 
discussed. 
</t>
</section>
<section title="Aggressive Mode in A-PAWS">
<t>
The current A-PAWS requires TCP to migrate PAWS mode after sending/receiving 2**32 bytes.
However, if both nodes check if 2 MSL has already passed during sending/receiving 2**32 bytes, 
they might be able to continue using A-PAWS. We call this "Aggressive mode". 
We currently do not recommend this mode as it requires additional complexities in A-PAWS.
</t>
</section>
</section>
<section title="Security Considerations">
<t>
We believe A-PAWS can maintain the same level of security as PAWS does, but further discussions
will be needed. Some security aspects of A-PAWS are discussed in <xref target="sec_discussion" />.
</t>
</section>
<section title="IANA Considerations">
<t>
This document may request new TCP option codepoints or other resources.
</t>
 </section>
</middle>

<back>
<references title='Normative References'> 
	  <?rfc include="reference.RFC.2119" ?> 
	  <?rfc include="reference.RFC.0793" ?> 
	  <?rfc include="reference.RFC.1323" ?> 
</references>
<references title='Informative References'>
    <?rfc include="reference.RFC.2018" ?> 
    <?rfc include="reference.RFC.5925" ?> 
    <?rfc include="reference.RFC.6824" ?> 
    <?rfc include="reference.I-D.draft-ietf-tcpm-experimental-options-06" ?>
    <?rfc include="reference.I-D.draft-scheffenegger-tcpm-timestamp-negotiation-05" ?>
  <reference anchor="MALLMAN99" target="">
   <front>
    <title> On Estimating End-to-End Network Path Properties </title>
    <author initials="M." surname="Allman" fullname="">   <organization />  </author>
    <author initials="V." surname="Paxson" fullname="">   </author>
      <date month="September" year="1999" />
   </front>
   <seriesInfo name="Proceedings of the ACM SIGCOMM" value="" />
  </reference>
  <reference anchor="SILBERSACK05" target="">
   <front>
   <title> Improving TCP/IP security through randomization without sacrificing interoperability.</title>
    <author initials="M." surname="Silbersack" fullname="">
    </author>
      <date month="November" year="2005" />
   </front>
   <seriesInfo name="EuroBSDCon 2005" value="" />
  </reference>

  <reference anchor="QIAN11" target="">
   <front>
   <title> A Flow-Based Performance Analysis of TCP and TCP Applications </title>
    <author initials="L." surname="Qian" fullname="">  <organization />  </author>
    <author initials="B." surname="Carpenter" fullname="">  <organization />  </author>
   </front>
   <seriesInfo name="3rd International Conference on Computer and Network Technology (ICCNT 2011)" value="" />
  </reference>
</references>
</back>

</rfc>
