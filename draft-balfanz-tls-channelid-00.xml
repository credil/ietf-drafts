<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd"[
 <!ENTITY RFC2119 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
 <!ENTITY RFC2616 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml'>
 <!ENTITY RFC5077 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5077.xml'>
 <!ENTITY RFC5246 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml'>
]>

<?rfc toc="yes" symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-balfanz-tls-channelid-00">
  <front>
    <title abbrev="TLS Channel ID">Transport Layer Security (TLS) Channel IDs</title>
    <author initials="D." surname="Balfanz" fullname="Dirk Balfanz">
      <organization>Google Inc</organization>
      <address>
        <email>balfanz@google.com</email>
      </address>
    </author>
    <author initials="R." surname="Hamilton" fullname="Ryan Hamilton">
      <organization>Google Inc</organization>
      <address>
        <email>rch@google.com</email>
      </address>
    </author>

    <date month="November" year="2012" />
    <area>Security</area>
    <abstract>
      <t>
        This document describes a Transport Layer Security (TLS) extension for identifying client machines at the TLS layer without using bearer tokens.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction" anchor="intro">
      <t>
        Many applications on the Internet use <spanx style="emph">bearer tokens</spanx> to authenticate clients to servers. The most prominent example is the HTTP-based World Wide Web, which overwhelmingly uses HTTP cookies to authenticate client requests. Other examples include OpenID or SAML assertions, and OAuth tokens. All these have in common that the <spanx style="emph">bearer</spanx> of the HTTP cookie or authentication token is granted access to a protected resource, regardless of the channel over which the token is presented, or who presented it.     
      </t>
      <t>
        As a result, an adversary that manages to steal a bearer token from a client can impersonate that client to services that require the token.
      </t>  
      <t>
        This document describes a light-weight mechanism for establishing a <spanx style="emph">cryptographic channel</spanx> between client and server. A server can choose to bind authentication tokens to this channel, thus rendering the theft of authentication tokens fruitless - tokens must be sent over the channel to which they are bound (i.e., by the client to which they were issued) or else they will be ignored.
      </t>
      <t>
        This document does not prescribe <spanx style="emph">how</spanx> authentication tokens are bound to the underlying channel. Rather, it prescribes how a client can establish a long-lived channel with a server. Such a channel persists across HTTP requests, TLS connections, and even multiple TLS sessions, as long as the same client communicates with the same server. 
      </t>
      <t>
        The basic idea is that the client proves, during the TLS handshake, possession of a private key. The corresponding public key becomes the "Channel ID" that identifies this TLS connection. Clients should re-use the same private/public key pair across subsequent TLS connections to the same server, thus creating TLS connections that share the same Channel ID. 
      </t>
      <t>
        Using private/public key pairs to define a channel (as opposed to, say, an HTTP session cookie) has several advantages: One, the credential establishing the channel (the private key) is never sent from client to server, thus removing it from the reach of eavesdroppers in the network. Two, clients can choose to implement cryptographic operations in a secure hardware module, which further removes the private key from the reach of eavesdroppers residing on the client itself.
      </t>
    </section>

    <section title="Why not client certificates">
      <t>
        TLS already supports a means of identifying clients without using bearer tokens: client certificates. However, a number of problems with using client certificates motivated the development of an alternative.
      </t>

      <t>
        Most importantly, it's not acceptable for a client identifier to be transmitted in the clear and client certificates in TLS are sent unencrypted. Although we could also define a change to the TLS state machine to move the client certificates under encryption, such changes eliminate most of the benefits of reusing something that's already defined.
      </t>

      <t>
        TLS client certificates are also defined to be part of the session state. This turns session resumption secrets into equivalent barer tokens; completely defeating our objectives.
      </t>

      <t>
        Client-certificates typically identify a user, while we seek to identify machines. Since they are not, conceptually, mutually exclusive and as only a single client certificate can be provided in TLS, we don't want to consume that single slot and eliminate the possibility of also using existing client certificates.
      </t>

      <t>
        Client certificates are implemented in TLS as X.509 certificates and we don't wish to require servers to parse arbitrary ASN.1. ASN.1 is a complex encoding that has been the source of several security vulnerabilities in the past and typical TLS servers can currently avoid doing ASN.1 parsing.
      </t>

      <t>
        X.509 certificates always include a signature, which would be a self-signature in this case. Calculating and transmitting the self-signature is a waste of computation and network traffic in our use. Although we could define a null signature algorithm with an empty signature, such deviations from X.509 eliminate many of the benefits of reusing something that is already implemented.
      </t>

      <t>
        Finally, client certificates trigger significant server-side processing by default and often need to be stored in their entirety for the duration of the connection. Since this design is intended to be widely used, it allows servers to retain only a cryptographic hash of the client's public key after the handshake completes.
      </t>
    </section>

    <section title="Requirements Notation">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
          target="RFC2119">RFC 2119</xref>.
      </t>
    </section>

    <section title="Channel ID Extension">
      <t>
        A new extension type (<spanx style="verb">channel_id(TBD)</spanx>) is defined and MAY be included by the client in its <spanx style="verb">ClientHello</spanx> message. If, and only if, the server sees this extension in the <spanx style="verb">ClientHello</spanx>, it MAY choose to echo the extension in its <spanx style="verb">ServerHello</spanx>. In both cases, the <spanx style="verb">extension_data</spanx> field MUST be empty.
      </t>

      <figure>
        <artwork>
enum {
  channel_id(TBD), (65535)
} ExtensionType;
        </artwork>
      </figure>

      <t>
        A new handshake message type (<spanx style="verb">encrypted_extensions(TBD)</spanx>) is defined. If the server included a <spanx style="verb">channel_id</spanx> extension in its <spanx style="verb">ServerHello</spanx> message, the client MUST verify that the selected cipher suite is sufficiently strong. If the cipher suite provides &lt; 80-bits of security, the client MUST abort the handshake with a fatal <spanx style="verb">illegal_parameter</spanx> alert. Otherwise, the client MUST send an <spanx style="verb">EncryptedExtensions</spanx> message after its <spanx style="verb">ChangeCipherSpec</spanx> and before its <spanx style="verb">Finished</spanx> message.
      </t>

      <figure>
        <artwork>
enum {
  encrypted_extensions(TBD), (65535)
} HandshakeType;
        </artwork>
      </figure>

      <t>Therefore a full handshake with <spanx style="verb">EncryptedExtensions</spanx> has the following flow (contrast with section 7.3 of <xref target="RFC5246">RFC 5246</xref>):</t>

      <figure>
        <artwork>
Client                                               Server

ClientHello (ChannelID extension)   --------&gt;
                                                ServerHello
                                      (ChannelID extension)
                                               Certificate*
                                         ServerKeyExchange*
                                        CertificateRequest*
                             &lt;--------      ServerHelloDone
Certificate*
ClientKeyExchange
CertificateVerify*
[ChangeCipherSpec]
EncryptedExtensions
Finished                     --------&gt;
                                         [ChangeCipherSpec]
                             &lt;--------             Finished
Application Data             &lt;-------&gt;     Application Data
        </artwork>
      </figure>

      <t>An abbreviated handshake with <spanx style="verb">EncryptedExtensions</spanx> has the following flow:</t>

      <figure>
        <artwork>
Client                                                Server

ClientHello (ChannelID extension)    --------&gt;
                                                ServerHello
                                      (ChannelID extension)
                                         [ChangeCipherSpec]
                              &lt;--------            Finished
[ChangeCipherSpec]
EncryptedExtensions
Finished                      --------&gt;
Application Data              &lt;-------&gt;    Application Data
        </artwork>
      </figure>

      <t>The <spanx style="verb">EncryptedExtensions</spanx> message contains a series of <spanx style="verb">Extension</spanx> structures (see section 7.4.1.4 of <xref target="RFC5246">RFC 5246</xref></t>

      <t>If the server included a <spanx style="verb">channel_id</spanx> extension in its <spanx style="verb">ServerHello</spanx> message, the client MUST include an <spanx style="verb">Extension</spanx> with <spanx style="verb">extension_type</spanx> equal to <spanx style="verb">channel_id(TBD)</spanx>. The <spanx style="verb">extension_data</spanx> of which has the following format:</t>

      <figure>
        <artwork>
struct {
  opaque x[32];
  opaque y[32];
  opaque r[32];
  opaque s[32];
} ChannelIDExtension;
        </artwork>
      </figure>

      <t>
        The contents of each of <spanx style="verb">x</spanx>, <spanx style="verb">y</spanx>, <spanx style="verb">r</spanx> and <spanx style="verb">s</spanx> is a 32-byte, big-endian number. The <spanx style="verb">x</spanx> and <spanx style="verb">y</spanx> fields contain the affine coordinates of a <xref target="DSS">P-256</xref> curve point. The  <spanx style="verb">r</spanx> and <spanx style="verb">s</spanx> fields contain an <xref target="DSS">ECDSA</xref> signature by the corresponding private key of "TLS Channel ID signature\x00" followed by the handshake hash(es) prior to the <spanx style="verb">EncryptedExtensions</spanx> message.
      </t>

      <t>
        Unlike many other TLS extensions, this extension does not establish properties of the session, only of the connection. When session resumption or <xref target="RFC5077">session tickets</xref> are used, the previous contents of this extension are irrelevant and only the values in the new handshake messages are considered.
      </t>
    </section>

    <section title="Security Considerations">
      <t>
        There are four classes of attackers against which we consider our security guarantees: passive network attackers, active network attackers, active network attackers with misissued certificates and attackers in possession of the legitimate server's private key.
      </t>

      <t>
        First, we wish to guarantee that we don't disclose the Channel ID to passive or active network attackers. We do this by sending a constant-length Channel ID under encryption. However, since the Channel ID may be transmitted before the server's Finished message is received, it's possible that the server isn't in possession of the certificate that it presented. In this situation, an active attacker could cause a Channel ID to be transmitted under a random key in a cipher suite of their choosing. Therefore we limit the permissible cipher suites to those where decrypting the message is infeasible.
      </t>

      <t>
        Even with this limit, an active attacker can cause the Channel ID to be transmitted in a non-forward-secure manner. Subsequent disclosure of the server's private key would allow previously recorded Channel IDs to be decrypted.
      </t>

      <t>
        Second, we wish to guarantee that none of the first three attackers can terminate/hijack a TLS connection and impersonate a Channel ID from that connection when connecting to the legitimate server. We assume that TLS provides sufficient security to prevent a connection from being hijacked once established by these attackers. An active attacker with a misissued certificate can successfully terminate the TLS connection and decrypt the Channel ID. However, as the signature covers the handshake hashes, and therefore the server's certificate, it wouldn't be accepted by the true server.
      </t>

      <t>
        Against an attacker with the legitimate server's private key we can provide the second guarantee only if the legitimate server uses a forward-secret cipher suite, otherwise the attacker can hijack the connection.
      </t>
    </section>

    <section title="Privacy Considerations">
      <t>
        The TLS layer does its part in protecting user privacy by transmitting the Channel ID public key under encryption. Higher levels of the stack must ensure that the same Channel ID is not used with different servers in such a way as to provide a linkable identifier. For example, a user-agent must use different Channel IDs for communicating with different servers. User-agents must also ensure that Channel ID state can be reset by the user in the same way as other identifiers, i.e. cookies. 
      </t>

      <t>
        However, there are some security concerns that could result in the disclosure of a client's Channel ID to a network attacker. This is covered in the Security Considerations section.
      </t>
    </section>

    <section title="IANA Considerations">
      <t>
        This document requires IANA to update its registry of TLS extensions to assign an entry referred to here as <spanx style="verb">channel_id</spanx>.
      </t>

      <t>
        This document also requires IANA to update its registry of TLS handshake types to assign an entry referred to here as <spanx style="verb">encrypted_extensions</spanx>.
      </t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &RFC2119;
      &RFC5246;
      <reference anchor="DSS">
        <front>
          <title>FIPS 186-3: Digital Signature Standard</title>
          <author>
            <organization>National Institute of Standards and Technology</organization>
          </author>
        </front>
      </reference>
    </references>

    <references title="Informative References">
      &RFC5077;
    </references>

    <section title="Acknowledgements" anchor="acks">
      <t>
        The following individuals contributed to this specification:
      </t>
      <t>
        Dirk Balfanz, Wan-Teh Chang, Ryan Hamilton, Adam Langley, and Mayank Upadhyay.
      </t>
    </section>
  </back>
</rfc>
