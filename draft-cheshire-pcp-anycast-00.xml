<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="no"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-cheshire-pcp-anycast-00" ipr="trust200902">
  <front>
    <title abbrev="PCP Anycast Address">PCP Anycast Address</title>

    <author fullname="Stuart Cheshire" initials="S." surname="Cheshire">
      <organization abbrev="Apple">Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino</city>
          <region>California</region>
          <code>95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 408 974 3207</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>

    <date day='7' month='Feb' year='2013'/>

    <workgroup>PCP working group</workgroup>

    <abstract>
      <t>The Port Control Protocol Anycast Address enables PCP
      clients to transmit messages to their closest on-path NAT,
      Firewall, or other middlebox, without having to learn the IP
      address of that middlebox via some external channel.</t>
    </abstract>
  </front>

  <middle>

    <section anchor="intro" title="Introduction">
      <t><xref target="PCP">The Port Control Protocol document</xref>
      specifies the message formats used, but the address to which a
      client sends its request is either assumed to be the default
      router (which is appropriate in a typical single-link residential
      network) or has to be configured otherwise via some external
      mechanism, such as DHCP.</t>

      <t>One drawback of relying on external configuration is that it
      creates an external dependency on another piece of network
      infrastructure which must be configured with the right address
      for PCP to work. In some environments the staff managing the DHCP
      servers may not be the same staff managing the NAT gateways, and
      in any case, constantly keeping the DHCP server address
      information up to date as NAT gateways are added, removed, or
      reconfigured, is burdensome. In addition DHCP clients would
      have to be updated to request the new "PCP Address" DHCP option,
      which for practical purposes limits this capability to operating
      system vendors, precluding creation of a pure user-level PCP
      library that can be linked with (and shipped) with an application
      that requires PCP.</t>

      <t>Another drawback of relying on DHCP for configuration is that one
      of the target deployment environments for PCP -- 3GPP for mobile
      telephones -- does not use DHCP.</t>

      <t>One design option that was considered for Apple's NAT gateways was
      to have the NAT gateway simply handle and respond to all packets
      addressed to UDP port 5351, regardless of the destination address
      in the packet. Since the device is a NAT gateway, it already
      examines every packet in order to rewrite port numbers, so also
      detecting packets addressed to UDP port 5351 is not a significant
      additional burden. Also, since this device is a NAT gateway which
      rewrites port numbers, any attempt by a client to talk *though*
      this first NAT gateway to create mappings in some second upstream
      NAT gateway is futile and pointless. Any mappings created in the
      second NAT gateway are useful to the client only if there are also
      corresponding mappings created in the first NAT gateway.
      Consequently, there is no case where it is useful for PCP requests
      to pass transparently through the first PCP-aware NAT gateway on
      their way to the second PCP-aware NAT gateway. In all cases, for
      useful connectivity to be established, the PCP request must be
      handled by the first NAT gateway, and then the first NAT gateway
      generates a corresponding new upstream request to establish a
      mapping in the second NAT gateway. (This process can be repeated
      recursively for as many times as necessary for the depth of
      nesting of NAT gateways; this is transparent to the client device.)</t>

      <?rfc needLines="3" ?>
      <t>These two issues result in the following related observations:
      the PCP client may not *know* what destination address to use in its
      PCP request packets; the PCP server doesn't *care* what destination
      address is in the PCP request packets.</t>

      <t>Given that the devices neither need to know nor care what
      destination address goes in the packet, all we need to do is pick
      one and use it. It's little more than a placeholder in the IP
      header. Any globally routable unicast address will do. Since this
      address is one that automatically routes its packet to the closest
      on-path device that implements the desired functionality, it is
      an anycast address.</t>

      <t>In the simple case where the first-hop router is also the NAT gateway
      (as is common in a typical single-link residential network),
      sending to the PCP anycast address is equivalent to sending to the
      client's default router, as specified in
      <xref target="PCP">the PCP base document</xref>.</t>

      <t>In the case of a larger corporate network, where there may be
      several internal routed subnets and one or more border NAT
      gateway(s) connecting to the rest of the Internet, sending to the
      PCP anycast address has the interesting property that it magically
      finds the right border NAT gateway for that client. Since we posit
      that other network infrastructure does not need (and should not
      have) any special knowledge of PCP (or its anycast address) this
      means that to other non-NAT routers, the PCP anycast address will
      look like any other unicast destination address on the public
      Internet, and consequently the packet will be forwarded as for any
      other packet destined to the public Internet, until it reaches a
      NAT or firewall device that is aware of the PCP anycast address.
      This will result in the packet naturally arriving the NAT gateway
      that handles this client's outbound traffic destined to the public
      Internet, which is exactly the NAT gateway that the client wishes
      to communicate with when managing its port mappings.</t>

    </section>

    <?rfc needLines="17" ?>
    <section anchor="benefit" title="Benefit of using a PCP Anycast Address">

      <t>The benefit of using an anycast address is simplicity and reliability.
      In an example deployment scenario:
        <list style="numbers">
          <t>A network administrator installs a PCP-capable NAT.</t>
          <t>An end user (who may be the same person) runs a PCP-enabled
          application. This application can implement PCP with purely
          user-level code -- no operating system support is
          required.</t>
          <t>This PCP-enabled application sends its PCP request to the
          PCP anycast address. This packet travels through the network
          like any other, without any special support from DNS, DHCP, other
          routers, or anything else, until it reaches the PCP-capable NAT,
          which receives it, handles it, and sends back a reply.</t>
        </list>
      Using the PCP anycast address, the only two things that need to be
      deployed in the network are the two things that actually use PCP:
      The PCP-capable NAT, and the PCP-enabled application. Nothing else
      in the network needs to be changed or upgraded, and nothing needs to
      be configured, including the PCP client.</t>

    </section>

    <section anchor="history" title="Historical Objections to Anycast">

      <t>In March 2001 a draft document entitled
      <xref target="DNSDisc">"Analysis of DNS Server Discovery Mechanisms for IPv6"</xref>
      proposed using anycast to discover DNS servers, a proposal that
      was subsequently abandoned in later revisions of that draft document.</t>

      <t>There are legitimate reasons why using anycast to discover DNS
      servers is not compelling, mainly because it requires explicit
      configuration of routing tables to direct those anycast packets to
      the desired DNS server. However, DNS server discovery is very
      different to NAT gateway discovery. A DNS server is something a
      client explicitly talks to, via IP address. The DNS server may be
      literally anywhere on the Internet. Various reasons make anycast
      an uncompelling technique for DNS server discovery:
        <list style='symbols'>
          <t>DNS is a pure application-layer protocol, running over UDP.</t>
          <t>On an operating system without appropriate support for
          configuring anycast addresses, a DNS server would have to use
          something like Berkeley Packet Filter (BPF) to snoop on received
          packets to intercept DNS requests, which is inelegant and inefficient.</t>
          <t>Without appropriate routing changes elsewhere in the
          network, there's no reason to assume that packets sent to that
          anycast address would even make it to the desired DNS server machine.
          This places an addition configuration burden on the network administrators,
          to install approprate routing table entries to direct packets to the
          desired DNS server machine.</t>
        </list>
      </t>

      <t>In contrast, a NAT gateway is something a client's packets
      stumble across as they try to leave the local network and head out
      onto the public Internet. The NAT gateway has to be on the path
      those packets naturally take or it can't perform its NAT
      functions. As a result, the objections to using anycast for DNS
      server discovery do not apply to PCP:
        <list style='symbols'>
          <t>No routing changes are needed (or desired) elsewhere in the
          local network, because the whole *point* of using anycast is
          that we want the client's PCP request packet to take the same
          forwarding path through the network as a TCP SYN to any other
          remote destination address, because we want the *same* NAT
          gateway that would have made a mapping in response to
          receiving an outbound TCP SYN packet from the client to be the
          the one that makes a mapping in response to receiving a PCP
          request packet from the client.</t>
          <t>A NAT engine is already snooping on (and rewriting) every
          packet it forwards. As part of that snooping it could
          trivially look for packets addressed to the PCP UDP port
          and process them locally (just like the local processing
          it already does when it sees an outbound TCP SYN packet).</t>
        </list>
      </t>
    </section>

    <section anchor="iana" title="IANA Considerations">
      <t>IANA should allocate an IPv4 and an IPv6 well-known PCP anycast address.</t>

      <t>192.0.0.0/24 and 2001:0000::/23 are reserved for IETF Protocol Assignments, as listed at
      &lt;http://www.iana.org/assignments/iana-ipv4-special-registry/&gt;
      and
      &lt;http://www.iana.org/assignments/iana-ipv6-special-registry/&gt;
      </t>

      <t>Suitable addresses in these ranges, such as 192.0.0.8,
      and a corresponding suitable IPv6 address,
      should be allocated.</t>
    </section>

    <?rfc needLines="8" ?>
    <section anchor="security" title="Security Considerations">
      <t>In a network without any border gateway, NAT or firewall that is aware
      of the PCP anycast address, outgoing PCP requests could leak out onto
      the external Internet, possibly revealing information about internal devices.</t>

      <t>Using an IANA-assigned well-known PCP anycast address enables border gateways
      to block such outgoing packets. In the default-free zone, routers should be
      configured to drop such packets. Such configuration can occur naturally
      via BGP messages advertising that no route exists to said address.</t>

      <t>Sensitive clients that do not wish to leak information about their
      presesence can set an IP TTL on their PCP requests that limits how far
      they can travel into the public Internet.</t>

    </section>

  </middle>

  <back>
    <?rfc needLines="6" ?>
    <references title="Normative References">
      <reference anchor="PCP">
        <front>
          <title>Port Control Protocol (PCP)</title>
          <author initials='D' surname='Wing' fullname='Dan Wing'><organization /></author>
          <author initials='S' surname='Cheshire' fullname='Stuart Cheshire'><organization /></author>
          <author initials='M' surname='Boucadair' fullname='Mohamed Boucadair'><organization /></author>
          <author initials='R' surname='Penno' fullname='Reinaldo Penno'><organization /></author>
          <author initials='P' surname='Selkirk' fullname='Paul Selkirk'><organization /></author>
          <date month='November' day='7' year='2012' />
          <abstract><t>The Port Control Protocol allows an IPv6 or IPv4
          host to control how incoming IPv6 or IPv4 packets are
          translated and forwarded by a network address translator (NAT)
          or simple firewall, and also allows a host to optimize its
          outgoing NAT keepalive messages.</t></abstract>
        </front>
        <seriesInfo name='Internet-Draft' value='draft-ietf-pcp-base-29' />
        <format target="http://tools.ietf.org/id/draft-ietf-pcp-base-29.txt" type="TXT" />
      </reference>

    </references>

    <references title="Informative References">
      <reference anchor="DNSDisc">
        <front>
          <title>Analysis of DNS Server Discovery Mechanisms for IPv6</title>
          <author initials="J" surname="Hagino" fullname="Jun-ichiro Hagino"><organization /></author>
          <author initials="D" surname="Thaler" fullname="Dave Thaler"><organization /></author>
          <date month="November" day="27" year="2001" />
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-ipngwg-dns-discovery-01" />
        <format target="http://tools.ietf.org/id/draft-ietf-ipngwg-dns-discovery-01.txt" type="TXT" />
      </reference>
    </references>

  </back>
</rfc>


































