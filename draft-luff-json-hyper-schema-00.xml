<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc3986 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc4287 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4287.xml">
<!ENTITY rfc2616 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY rfc2045 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2045.xml">
<!ENTITY rfc5226 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY rfc2046 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2046.xml">
<!ENTITY rfc2616 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY rfc6570 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6570.xml">
<!ENTITY rfc5988 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5988.xml">
<!ENTITY html401 SYSTEM "http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml">
]>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc strict="no"?>
<?rfc rfcedstyle="yes"?>
<rfc category="info" docName="draft-luff-json-hyper-schema-00" ipr="trust200902">
    <front>
        <title abbrev="JSON Hyper-Schema">JSON Hyper-Schema: Hypertext definitions for JSON Schema</title>

        <author fullname="Geraint Luff" initials="G" surname="Luff" role="editor">
            <address>
                <postal>
                    <street></street>
                    <city>Cambridge</city>
                    <country>UK</country>
                </postal>
                <email>luffgd@gmail.com</email>
            </address>
        </author>

        <author fullname="Kris Zyp" initials="K" surname="Zyp">
            <organization>SitePen (USA)</organization>
            <address>
                <postal>
                    <street>530 Lytton Avenue</street>
                    <city>Palo Alto, CA 94301</city>
                    <country>USA</country>
                </postal>
                <phone>+1 650 968 8787</phone>
                <email>kris@sitepen.com</email>
            </address>
        </author>

        <author fullname="Gary Court" initials="G" surname="Court">
            <address>
                <postal>
                    <street></street>
                    <city>Calgary, AB</city>
                    <country>Canada</country>
                </postal>
                <email>gary.court@gmail.com</email>
            </address>
        </author>

        <date year="2013" />
        <workgroup>Internet Engineering Task Force</workgroup>
        <keyword>JSON</keyword>
        <keyword>Schema</keyword>
        <keyword>JavaScript</keyword>
        <keyword>Object</keyword>
        <keyword>Notation</keyword>
        <keyword>Hyper Schema</keyword>
        <keyword>Hypermedia</keyword>

        <abstract>
            <t>
                JSON Schema is a JSON based format for defining the structure of JSON data.
                This document specifies hyperlink- and hypermedia-related keywords of JSON Schema.
            </t>
        </abstract>
    </front>

    <middle>
        <section title="Introduction">
            <t>
                JSON Schema is a JSON based format for defining the structure of JSON data.
                This document specifies hyperlink- and hypermedia-related keywords of JSON Schema.
            </t>
            <t>
                The term JSON Hyper-Schema is used to refer to a JSON Schema that uses these keywords.
            </t>

            <t>
                This specification will use the terminology defined by the <xref target="json-schema-core">JSON Schema core
                specification</xref>. It is advised that readers have a copy of this specification.
            </t>
        </section>

        <section title="Conventions and Terminology">
            <t>
                <!-- The text in this section has been copied from the official boilerplate,
                and should not be modified.-->

                The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
                "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
                interpreted as described in <xref target="RFC2119">RFC 2119</xref>.
            </t>

            <t>
                The terms "schema", "instance", "property" and "item" are to be interpreted as defined in the <xref target="json-schema-core">JSON Schema core
                specification</xref>.
            </t>
        </section>

        <section title="Overview">
            <t>
                This document describes how JSON Schema can be used to define hyperlinks on instance data.  It also defines how to provide additional information required to interpret JSON data as rich multimedia documents.
            </t>
            <t>
                Just as with the core JSON schema keywords, all the keywords described in the "Schema Keywords" section are optional.
            </t>
            <figure>
                <preamble>Here is an example JSON Schema defining hyperlinks, and providing a multimedia interpretation for the "imgData" property:</preamble>
                <artwork>
<![CDATA[
{
    "title": "Written Article",
    "type": "object",
    "properties": {
        "id": {
            "title": "Article Identifier",
            "type": "number"
        },
        "title": {
            "title": "Article Title",
            "type": "string"
        },
        "authorId": {
            "type": "integer"
        },
        "imgData": {
            "title": "Article Illustration (small)",
            "type": "string",
            "media": {
                "binaryEncoding": "base64",
                "type": "image/png"
            }
        }
    },
    "required" : ["id", "title", "authorId"],
    "links": [
        {
            "rel": "full",
            "href": "{id}"
        },
        {
            "rel": "author",
            "href": "/user?id={authorId}"
        }
    ]
}
]]>
                </artwork>
                <postamble>
                    This example schema defines the properties of the instance.
                    For the "imgData" property, it specifies that that it should be base64-decoded and the resulting binary data treated as a PNG image.
                    It also defines link relations for the instance, with URIs incorporating values from the instance.
                </postamble>
            </figure>
            
            <figure>
                <preamble>An example of a JSON instance described by the above schema might be:</preamble>
                <artwork>
<![CDATA[
{
    "id": 15,
    "title": "Example data",
    "authorId": 105,
    "imgData": "iVBORw...kJggg=="
}
]]>
                </artwork>
                <postamble>The base-64 data has been abbreviated for readability.</postamble>
            </figure>

            <section title="Design Considerations">
                <t>
                    The purpose of this document is to define keywords for the JSON Schema that allow JSON data to be understood as hyper-text.
                </t>
                <t>
                    JSON data on its own requires special knowledge from the client about the format in order to be interpretable as hyper-text.
                    This document proposes a way to describe the hyper-text and hyper-media interpretation of such JSON formats, without defining reserved keywords or otherwise restricting the structure of the JSON data.
                </t>
            </section>
        </section>

        <section title="Schema keywords">
            <section title="links">
                <t>
                    The "links" property of schemas is used to associate Link Description Objects with instances.  The value of this property MUST be an array, and the items in the array must be Link Description Objects, as defined below.
                </t>

                <figure>
                    <preamble>An example schema using the "links" keyword could be:</preamble>
                    <artwork>
<![CDATA[{
    "title": "Schema defining links",
    "links": [
        {
            "rel": "full",
            "href": "{id}"
        },
        {
            "rel": "parent",
            "href": "{parent}"
        }
    ]
}]]>
                    </artwork>
                </figure>
                
                <section title="Multiple links per URI">
                    <t>
                        A single URI might have more than one role with relation to an instance.  This is not a problem - the same URI can be used in more than one Link Description Object.
                    </t>
                    <figure>
                        <preamble>
                            For example, this schema describes a format for blog posts, accessed via HTTP.
                            The links describe how to access the comments for the post, how to search the comments, and how to submit new comments, all with the same URI:</preamble>
                        <artwork>
<![CDATA[{
    "title": "News post",
    ...
    "links": [
        {
            "rel": "comments",
            "href": "/{id}/comments"
        },
        {
            "rel": "search",
            "href": "/{id}/comments",
            "schema": {
                "type": "object",
                "properties": {
                    "searchTerm": {
                        "type": "string"
                    },
                    "itemsPerPage": {
                        "type": "integer",
                        "minimum": 10,
                        "multipleOf": 10,
                        "default": 20
                    }
                },
                "required": ["searchTerm"]
            }
        },
        {
            "title": "Post a comment",
            "rel": "create",
            "href": "/{id}/comments",
            "method": "POST",
            "schema": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    }
                },
                "required": ["message"]
            }
        }
    ]
}]]>
                        </artwork>
                    </figure>
                    <t>
                        If the client follows the first link, the URI might be expanded to "/15/comments".
                        For the second link, the method is "GET" (the default for HTTP) so a client following this link would add the parameters to the URL to produce something like: "/15/comments?searchTerm=JSON&amp;itemsPerPage=50".
                        The third link defines a possible interaction where a client would POST to a URI (such as "/15/comments"), where the post-data was a JSON representation of the new comment, for example:
                    </t>
                    <figure>
                        <artwork>
<![CDATA[{
    "message": "This is an example comment"
}]]>
                        </artwork>
                    </figure>
                </section>
            </section>

            <section title="fragmentResolution">
                <t>
                    When addressing a JSON document, the fragment part of the URI may be used to refer to a particular instance within the document.
                </t>

                <t>
                    This keyword indicates the method to use for finding the appropriate instance within a document, given the fragment part.
                    The default fragment resolution protocol is "json-pointer", which is defined below.
                    Other fragment resolution protocols MAY be used, but are not defined in this document.
                </t>

                <t>
                    If the instance is described by a schema providing the a link with "root" relation, or such a link is provided in using the <xref target="RFC5988">HTTP Link header</xref>, then the target of the "root" link should be considered the document root for the purposes of all fragment resolution methods that use the document structure (such as "json-pointer").
                    The only exception to this is the resolution of "root" links themselves.
                </t>

                <section title="json-pointer fragment resolution">
                    <t>
                        The "json-pointer" fragment resolution protocol uses a <xref target="json-pointer">JSON Pointer</xref> to resolve fragment identifiers in URIs within instance representations.
                    </t>
                </section>
            </section>

            <section title="media">
                <t>
                    The "media" property indicates that this instance contains non-JSON data encoded in a JSON string.  It describes the type of content and how it is encoded.
                </t>
                <t>
                    The value of this property MUST be an object, and SHOULD be ignored for any instance that is not a string.
                </t>
                
                <section title="Properties of &quot;media&quot;">
                    <t>
                        The value of the "media" keyword MAY contain any of the following properties:
                    </t>
                    
                    <section title="binaryEncoding">
                        <t>
                            If the instance value is a string, this property defines that the string SHOULD be interpreted as binary data and decoded using the encoding named by this property.
                            <xref target="RFC2045">RFC 2045, Sec 6.1</xref> lists the possible values for this property.
                        </t>
                    </section>

                    <section title="type">
                        <t>
                            The value of this property must be a media type, as defined by <xref target="RFC2046">RFC 2046</xref>.
                            This property defines the media type of instances which this schema defines.
                        </t>
                        
                        <t>
                            If the "binaryEncoding" property is not set, but the instance value is a string, then the value of this property SHOULD specify a text document type, and the character set SHOULD be the character set into which the JSON string value was decoded (for which the default is Unicode).
                        </t>
                    </section>
                </section>
                
                <section title="Example">
                    <figure>
                        <preamble>Here is an example schema, illustrating the use of "media":</preamble>
                        <artwork>
<![CDATA[
{
    "type": "string",
    "media": {
        "binaryEncoding": "base64",
        "type": "image/png"
    }
}
]]>
                        </artwork>
                        <postamble>Instances described by this schema should be strings, and their values should be interpretable as base64-encoded PNG images.</postamble>
                    </figure>
                    
                    <figure>
                        <preamble>Another example:</preamble>
                        <artwork>
<![CDATA[
{
    "type": "string",
    "media": {
        "mediaType": "text/html"
    }
}
]]>
                        </artwork>
                        <postamble>Instances described by this schema should be strings containing HTML, using whatever character set the JSON string was decoded into (default is Unicode).</postamble>
                    </figure>
                </section>
            </section>

            <section title="readOnly">
                <t>
                    If it has a value of boolean true, this keyword indicates that the instance property SHOULD NOT be changed, and attempts by a user agent to modify the value of this property are expected to be rejected by a server.
                </t>
                <t>
                    The value of this keyword MUST be a boolean.
                    The default value is false.
                </t>
            </section>

            <section title="pathStart">
                <t>
                    This property is a URI that defines what the instance's URI MUST start with in order to validate.
                    The value of the "pathStart" property MUST be resolved relative to the closest URI Resolution Scope (as defined in the <xref target="json-schema-core">JSON Schema core specification</xref>), using the rules from <xref target="RFC3986">RFC 3986, Sec 5</xref>.
                </t>

                <t>
                    When multiple schemas have been referenced for an instance, the user agent can determine if this schema is applicable for a particular instance by determining if the URI of the instance begins with the the value of the "pathStart" property.
                    If the URI of the instance does not start with this URI, or if another schema specifies a starting URI that is longer and also matches the instance, this schema SHOULD NOT be considered to describe the instance.
                    Any schema that does not have a pathStart property SHOULD be considered applicable to all the instances for which it is referenced.
                </t>
            </section>
        </section>

        <section title="Link Description Object">
            <t>
                A Link Description Object (LDO) is used to describe a single link relation.
                In the context of a schema, it defines the link relations of the instances of the schema, and can be parameterized by the instance values.
                A Link Description Object (LDO) must be an object.
            </t>
            
            <t>
                The link description format can be used without JSON Schema, and use of this format can be declared by referencing the normative link description schema as the schema for the data structure that uses the links.
                The URI of the normative link description schema is: <eref target="http://json-schema.org/links">http://json-schema.org/links</eref> (latest version) or <eref target="http://json-schema.org/draft-04/links">http://json-schema.org/draft-04/links</eref> (draft-04 version).
            </t>
            
            <t>
                "Form"-like functionality can be defined by use of the "schema" keyword, which supplies a schema describing the data to supply to the server.
            </t>
            
            <section title="href" anchor="href">
                <t>
                    The value of the "href" link description property is a template used to determine the target URI of the related resource.
                    The value of the instance property SHOULD be resolved as a URI-Reference per <xref target="RFC3986">RFC 3986</xref> and MAY be a relative reference to a URI.
                    The base URI to be used for relative URI resolution SHOULD be the URI used to retrieve the instance object (not the schema).
                </t>

                <t>
                    The base URI to be used for relative URI resolution SHOULD is defined as follows:
                    <list>
                        <t>if the data has a link defined, with a relation of "self", then the "href" value of that link is used, unless the relation of the link being resolved is also "self"</t>
                        <t>otherwise, the URI should be resolved against the link with relation "self" belonging to the closest parent node in the JSON document, if it exists</t>
                        <t>otherwise, the URI used to fetch the document should be used.</t>
                    </list>
                </t>
                
                <t>This property is not optional.</t>
                
                <section title="URI Templating">
                    <t>
                        The value of "href" is to be used as a URI Template, as defined in <xref target="RFC6570">RFC 6570</xref>.  However, some special considerations apply:
                    </t>
                    
                    <section title="Pre-processing">
                        <t>
                            The <xref target="RFC6570">URI Template specification</xref> restricts the set of characters available for variable names.
                            Property names in JSON, however, can be any UTF-8 string.
                        </t>
                        
                        <t>
                            To allow the use of any JSON property name in the template, before using the value of "href" as a URI Template, the following pre-processing rules MUST be applied, in order:
                        </t>
                        
                        <section title="Bracket escaping">
                            <t>
                                The purpose of this step is to allow the use of brackets to percent-encode variable names inside curly brackets.
                                Variable names to be escaped are enclosed within rounded brackets, with the close-rounded-bracket character ")" being escaped as a pair of close-rounded-brackets "))".
                                Since the empty string is not a valid variable name in RFC 6570, an empty pair of brackets is replaced with "%65mpty".
                            </t>
                            
                            <t>
                                The rules are as follows:
                            </t>
                            
                            <t>
                                Find the largest possible sections of the text such that:
                                <list>
                                    <t>do not contain an odd number of close-rounded-bracket characters ")" in sequence in that section of the text</t>
                                    <t>are surrounded by a pair of rounded brackets: ( ), where</t>
                                    <t>the surrounding rounded brackets are themselves contained within a pair of curly brackets: { }</t>
                                </list>
                            </t>
                            <t>
                                Each of these sections of the text (including the surrounding rounded brackets) MUST be replaced, according to the following rules:
                                <list>
                                    <t>If the brackets contained no text (the empty string), then they are replaced with "%65mpty" (which is "empty" with a percent-encoded "e")</t>
                                    <t>Otherwise, the enclosing brackets are removed, and the inner text used after the following modifications
                                        <list>
                                            <t>all pairs of close-brackets "))" are replaced with a single close bracket</t>
                                            <t>after that, the text is replaced with its percent-encoded equivalent, such that the result is a valid RFC 6570 variable name (note that this requires encoding characters such as "*" and "!")</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                        </section>
                        
                        <section title="Replacing $">
                            <t>
                                After the above substitutions, if the character "$" (dollar sign) appears within a pair of curly brackets, then it MUST be replaced with the text "%73elf" (which is "self" with a percent-encoded "s").
                            </t>
                            <t>
                                The purpose of this stage is to allow the use of the instance value itself (instead of its object properties or array items) in the URI Template, by the special value "%73elf".
                            </t>
                        </section>
                        
                        <section title="Choice of special-case values">
                            <t>
                                The special-case values of "%73elf" and "%65mpty" were chosen because they are unlikely to be accidentally generated by either a human or automated escaping.
                            </t>
                        </section>
                        
                        <section title="Examples">
                            <t>
                                <figure>
                                    <preamble>For example, here are some possible values for "href", followed by the results after pre-processing:</preamble>
                                    <artwork>
<![CDATA[
Input                    Output
-----------------------------------------
"no change"              "no change"
"(no change)"            "(no change)"
"{(escape space)}"       "{escape%20space}"
"{(escape+plus)}"        "{escape%2Bplus}"
"{(escape*asterisk)}"    "{escape%2Aasterisk}"
"{(escape(bracket)}"     "{escape%28bracket}"
"{(escape))bracket)}"    "{escape%29bracket}"
"{(a))b)}"             "{a%29b}
"{(a (b)))}"             "{a%20%28b%29}
"{()}"                   "{%65mpty}
"{+$*}"                   "{+%73elf*}
"{+($)*}"                 "{+%24*}
]]>
                                    </artwork>
                                    <postamble>
                                        Note that in the final example, because the "+" was outside the brackets, it remained unescaped, whereas in the fourth example the "+" was escaped.
                                    </postamble>
                                </figure>
                            </t>
                        </section>
                    </section>
                    
                    <section title="Values for substitution">
                        <t>
                            After pre-processing, the URI Template is filled out using data from the instance.
                            To allow the use of any object property (including the empty string), array index, or the instance value itself, the following rules are defined:
                        </t>
                            
                        <t>
                            For a given variable name in the URI Template, the value to use is determined as follows:
                            <list>
                                <t>If the variable name is "%73elf", then the instance value itself MUST be used.</t>
                                <t>If the variable name is "%65mpty", then the instances's empty-string ("") property MUST be used (if it exists).</t>
                                <t>If the instance is an array, and the variable name is a representation of a non-negative integer, then the value at the corresponding array index MUST be used (if it exists).</t>
                                <t>Otherwise, the variable name should be percent-decoded, and the corresponding object property MUST be used (if it exists).</t> 
                            </list>
                        </t>
                        
                        <section title="Converting to strings">
                            <t>
                                When any value referenced by the URI template is null, a boolean or a number, then it should first be converted into a string as follows:
                                <list>
                                    <t>null values SHOULD be replaced by the text "null"</t>
                                    <t>boolean values SHOULD be replaced by their lower-case equivalents: "true" or "false"</t>
                                    <t>numbers SHOULD be replaced with their original JSON representation.</t>
                                </list>
                            </t>
                            <t>
                                In some software environments the original JSON representation of a number will not be available (there is no way to tell the difference between 1.0 and 1), so any reasonable representation should be used.
                                Schema and API authors should bear this in mind, and use other types (such as string or boolean) if the exact representation is important.
                            </t>
                        </section>
                    </section>
                    
                    <section title="Missing values">
                        <t>
                            Sometimes, the appropriate values will not be available.
                            For example, the template might specify the use of object properties, but the instance is an array or a string.
                        </t>
                        
                        <t>
                            If any of the values required for the template are not present in the JSON instance, then substitute values MAY be provided from another source (such as default values).
                            Otherwise, the link definition SHOULD be considered not to apply to the instance.
                        </t>
                    </section>
                </section>

            </section>

            <section title="rel">
                <t>
                    The value of the "rel" property indicates the name of the relation to the target resource.
                    This property is not optional.
                </t>
                
                <t>
                    The relation to the target SHOULD be interpreted as specifically from the instance object that the schema (or sub-schema) applies to, not just the top level resource that contains the object within its hierarchy.
                    A link relation from the top level resource to a target MUST be indicated with the schema describing the top level JSON representation.
                </t>

                <t>
                    Relationship definitions SHOULD NOT be media type dependent, and users are encouraged to utilize existing accepted relation definitions, including those in existing relation registries (see <xref target="RFC4287">RFC 4287</xref>).
                    However, we define these relations here for clarity of normative interpretation within the context of JSON Schema defined relations:

                    <list style="hanging">
                        <t hangText="self">
                            If the relation value is "self", when this property is encountered in the instance object, the object represents a resource and the instance object is treated as a full representation of the target resource identified by the specified URI.
                        </t>

                        <t hangText="full">
                            This indicates that the target of the link is the full representation for the instance object.
                            The instance that contains this link may not be the full representation.
                        </t>

                        <t hangText="describedBy">
                            This indicates the target of the link is a schema describing the instance object.
                            This MAY be used to specifically denote the schemas of objects within a JSON object hierarchy, facilitating polymorphic type data structures.
                        </t>

                        <t hangText="root">
                            This relation indicates that the target of the link SHOULD be treated as the root or the body of the representation for the purposes of user agent interaction or fragment resolution.
                            All other data in the document can be regarded as meta-data for the document.
                            The URI of this link MUST refer to a location within the instance document, otherwise the link MUST be ignored.
                        </t>
                    </list>
                </t>

                <t>
                    The following relations are applicable for schemas (the schema as the "from" resource in the relation) if they require no parameterization with data from the instance:

                    <list style="hanging">
                        <t hangText="instances">
                            This indicates the target resource that represents a collection of instances of a schema.
                        </t>
                        <t hangText="create">
                            This indicates a target to use for creating new instances of a schema.
                            This link definition SHOULD be a submission link with a non-safe method (like POST).
                        </t>
                    </list>
                </t>

                <figure>
                    <preamble>For example, if a schema is defined:</preamble>
                    <artwork>
<![CDATA[{
    "links": [{
        "rel": "self",
        "href": "{id}"
    }, {
        "rel": "up",
        "href": "{upId}"
    }, {
        "rel": "children",
        "href": "?upId={id}"
    }]
}]]>
                    </artwork>
                </figure>

                <figure>
                    <preamble>And if a collection of instance resources were retrieved with JSON representation:</preamble>
                    <artwork>
<![CDATA[GET /Resource/

[{
    "id": "thing",
    "upId": "parent"
}, {
    "id": "thing2",
    "upId": "parent"
}]]]>
                    </artwork>
                    <postamble>
                        This would indicate that for the first item in the collection, its own (self) URI would resolve to "/Resource/thing" and the first item's "up" relation SHOULD be resolved to the resource at "/Resource/parent".
                        The "children" collection would be located at "/Resource/?upId=thing".
                    </postamble>
                </figure>

                <t>
                    Note that these relationship values are case-insensitive, consistent with their use in HTML and the <xref target="RFC5988">HTTP Link header</xref>.
                </t>

                <section title="Fragment resolution with &quot;root&quot; links">
                    <t>
                        The presence of a link with relation "root" alters what the root of the document is considered to be.
                        For fragment resolution methods (such as JSON Pointer fragments) that navigate through the document, the target of the "root" link should be the starting point for such methods.
                    </t>
                    <t>
                        The only exception is "root" links themselves.
                        When calculating the target of links with relation "root", existing "root" links MUST NOT be taken into consideration.
                    </t>
                    <t>
                        <figure>
                            <preamble>For example, say we have the following schema:</preamble>
                            <artwork>
<![CDATA[{
    "links": [{
        "rel": "root",
        "href": "#/myRootData"
    }]
}]]>
                            </artwork>
                        </figure>
                    </t>
                    <t>
                        <figure>
                            <preamble>And the following data, returned from the URI: "http://example.com/data/12345":</preamble>
                            <artwork>
<![CDATA[{
    "myRootData": {
        "title": "Document title"
    },
    "metaData": {
        ...
    }
}]]>
                            </artwork>
                        </figure>
                    </t>
                    <t>
                        To correctly resolve the URL "http://example.com/data/12345", we must take the "root" link into account.  Here are some example URIs, along with the data they would resolve to:
                        <figure>
                            <artwork>
<![CDATA[
URI                                         Data
-----------------------------------------------------------------------
http://example.com/data/12345               {"title": "Document title"}
http://example.com/data/12345#/title        "Document title"
]]>
                            </artwork>
                        </figure>
                    </t>
                </section>
                
                <section title="Security Considerations for &quot;self&quot; links">
                    <t>
                        When link relation of "self" is used to denote a full representation of an object, the user agent SHOULD NOT consider the representation to be the authoritative representation of the resource denoted by the target URI if the target URI is not equivalent to or a sub-path of the the URI used to request the resource representation which contains the target URI with the "self" link.
        
                        <figure>
                            <preamble>For example, if a hyper schema was defined:</preamble>
                            <artwork>
<![CDATA[{
    "links": [{
        "rel": "self",
        "href": "{id}"
    }]
}]]>
                            </artwork>
                        </figure>
        
                        <figure>
                            <preamble>And a resource was requested from somesite.com:</preamble>
                            <artwork>
<![CDATA[
GET /foo/
]]>
                            </artwork>
                        </figure>
        
                        <figure>
                            <preamble>With a response of:</preamble>
                            <artwork>
<![CDATA[Content-Type: application/json; profile=/schema-for-this-data

[{
    "id": "bar",
    "name": "This representation can be safely treated \
        as authoritative "
}, {
    "id": "/baz",
    "name": "This representation should not be treated as \
        authoritative the user agent should make request the resource\
        from '/baz' to ensure it has the authoritative representation"
}, {
    "id": "http://othersite.com/something",
    "name": "This representation\
        should also not be treated as authoritative and the target\
        resource representation should be retrieved for the\
        authoritative representation"
}]]]>
                            </artwork>
                        </figure>
                    </t>
                </section>
            </section>

            <section title="title">
                <t>
                    This property defines a title for the link.
                    The value must be a string.
                </t>
                
                <t>
                    User agents MAY use this title when presenting the link to the user.
                </t>
            </section>

            <section title="targetSchema">
                <t>
                    This property value is advisory only, and is a schema that defines the expected structure of the JSON representation of the target of the link, if the target of the link is returned using JSON representation.
                </t>

                <section title="Security Considerations for &quot;targetSchema&quot;">
                    <t>
                        This property has similar security concerns to that of "mediaType".
                        Clients MUST NOT use the value of this property to aid in the interpretation of the data received in response to following the link, as this leaves "safe" data open to re-interpretation.
                    </t>
                    <t>
                        <figure>
                            <preamble>
                                For example, suppose two programmers are having a discussion about web security using a text-only message board.
                                Here is some data from that conversation, with a URI of: http://forum.example.com/topics/152/comments/13
                            </preamble>
                            <artwork>
<![CDATA[{
    "topicId": 152,
    "commentId": 13,
    "from": {
        "name": "Jane",
        "id": 5
    },
    "to": {
        "name": "Jason",
        "id": 8
    },
    "message": "It's easy, you just add some HTML like
                  this: <script>doSomethingEvil()</script>"
}]]>
                            </artwork>
                            <postamble>
                                The message string was split over two lines for readability.
                            </postamble>
                        </figure>
                    </t>
                    <t>
                        A third party might then write provide the following Link Description Object at another location:
                        <figure>
                            <artwork>
<![CDATA[{
    "rel": "evil-attack",
    "href": "http://forum.example.com/topics/152/comments/13",
    "targetSchema": {
        "properties": {
            "message": {
                "description": "Re-interpret the message text as HTML",
                "media": {
                    "type": "text/html"
                }
            }
        }
    }
}]]>
                            </artwork>
                            <postamble>
                                If the client used this "targetSchema" value when interpreting the above data, then it might display the contents of "message" as HTML.
                                At this point, the JavaScript embedded in the message might be executed (in the context of the "forum.example.com" domain).
                            </postamble>
                        </figure>
                    </t>
                </section>
            </section>
            
            <section title="mediaType">
                <t>
                    The value of this property is advisory only, and represents the media type <xref target="RFC2046">RFC 2046</xref>, that is expected to be returned when fetching this resource.
                    This property value MAY be a media range instead, using the same pattern defined in <xref target="RFC2616">RFC 2161, section 14.1 - HTTP "Accept" header</xref>.
                </t>
                
                <t>
                    This property is analogous to the "type" property of &lt;a&gt; elements in HTML (advisory content type), or the "type" parameter in the <xref target="RFC5988">HTTP Link header</xref>.
                    User agents MAY use this information to inform the interface they present to the user before the link is followed, but this information MUST NOT use this information in the interpretation of the resulting data.
                    When deciding how to interpret data obtained through following this link, the behaviour of user agents MUST be identical regardless of the value of the this property.
                </t>
                
                <t>
                    If this property's value is specified, and the link's target is to be obtained using any protocol that supports the HTTP/1.1 "Accept" header <xref target="RFC2616">RFC 2616, section 14.1</xref>, then user agents MAY use the value of this property to aid in the assembly of that header when making the request to the server.
                </t>
                
                <t>
                    If this property's value is not specified, then the value should be taken to be "application/json".
                </t>

                <figure>
                    <preamble>For example, if a schema is defined:</preamble>
                    <artwork>
<![CDATA[
{
    "links": [{
        "rel": "self",
        "href": "/{id}/json"
    }, {
        "rel": "alternate",
        "href": "/{id}/html",
        "mediaType": "text/html"
    }, {
        "rel": "alternate",
        "href": "/{id}/rss",
        "mediaType": "application/rss+xml"
    }, {
        "rel": "icon",
        "href": "{id}/icon",
        "mediaType": "image/*"
    }]
}
]]>
                    </artwork>
                    <postamble>
                        A suitable instance described by this schema would have four links defined.
                        The link with a "rel" value of "self" would have an expected MIME type of "application/json" (the default).
                        The two links with a "rel" value of "alternate" specify the locations of HTML and RSS versions of the current item.
                        The link with a "rel" value of "icon" links to an image, but does not specify the exact format.
                    </postamble>
                </figure>
                
                <t>
                    A visual user agent displaying the item from the above example might present a button representing an RSS feed, which when pressed passes the target URI (calculated "href" value) to an view more suited to displaying it, such as a news feed aggregator tab.
                </t>
                
                <t>
                    Note that presenting the link in the above manner, or passing the URI to a news feed aggregator view does not constitute interpretation of the data, but an interpretation of the link.
                    The interpretation of the data itself is performed by the news feed aggregator, which SHOULD reject any data that would not have also been interpreted as a news feed, had it been displayed in the main view.
                </t>

                <section title="Security concerns for &quot;mediaType&quot;">                
                    <t>
                        The "mediaType" property in link definitions defines the expected format of the link's target.
                        However, this is advisory only, and MUST NOT be considered authoritative.
                    </t>
                
                    <t>
                        When choosing how to interpret data, the type information provided by the server (or inferred from the filename, or any other usual method) MUST be the only consideration, and the "mediaType" property of the link MUST NOT be used.
                        User agents MAY use this information to determine how they represent the link or where to display it (for example hover-text, opening in a new tab).
                        If user agents decide to pass the link to an external program, they SHOULD first verify that the data is of a type that would normally be passed to that external program.
                    </t>
                    
                    <t>
                        This is to guard against re-interpretation of "safe" data, similar to the precautions for "targetSchema".
                    </t>
                </section>
            </section>

            <section title="Submission Link Properties">
                <t>
                    The following properties also apply to Link Description Objects, and provide functionality analogous to HTML forms, in providing a means for submitting extra (often user supplied) information to send to a server.
                </t>

                <section title="method">
                    <t>
                        This property defines which method can be used to access the target resource.
                        In an HTTP environment, this might be "GET" or "POST" (or other HTTP methods).
                    </t>
                    <t>
                        Some link relation values imply a set of appropriate HTTP methods to be used for the link.
                        For example, a client might assume that a link with a relation of "edit" can be used in conjuction with the "PUT" HTTP method.
                        If the client does not know which methods might be appropriate, then this SHOULD default to "GET".
                    </t>
                </section>

                <section title="encType">
                    <t>
                        If present, this property indicates a query media type format that the server supports for querying or posting to the collection of instances at the target resource.
                        The query can be suffixed to the target URI to query the collection with property-based constraints on the resources that SHOULD be returned from the server or used to post data to the resource (depending on the method).

                        <figure>
                            <preamble>For example, with the following schema:</preamble>
                            <artwork>
<![CDATA[{
    "links": [{
        "encType": "application/x-www-form-urlencoded",
        "method": "GET",
        "href": "/Product/",
        "properties": {
            "name": {
                "description": "name of the product"
            }
        }
    }]
}]]>
                            </artwork>
                            <postamble>This indicates that the client can query the server for instances that have a specific name.</postamble>
                        </figure>

                        <figure>
                            <preamble>For example:</preamble>
                            <artwork>
<![CDATA[
/Product/?name=Slinky
]]>
                            </artwork>
                        </figure>

                        If no encType or method is specified, only the single URI specified by the href property is defined.
                        If the method is POST, "application/json" is the default media type.
                    </t>
                </section>

                <section title="schema">
                    <t>
                        This property contains a schema which defines the acceptable structure of the submitted request.
                        For a GET request, this schema would define the properties for the query string and for a POST request, this would define the body.
                    </t>
                    
                    <t>
                        Note that this is separate from the URI templating of "href" (which uses data from the instance, not submitted by the user).
                        It is also separate from the "targetSchema" property, which provides a schema for the data that the client should expect to be returned when they follow the link.
                    </t>
                </section>
            </section>
        </section>

        <section title="IANA Considerations">
            <section title="Registry of Link Relations">
                <t>
                    This registry is maintained by IANA per <xref target="RFC4287">RFC 4287</xref> and this specification adds four values: "full", "create", "instances", "root".
                    New assignments are subject to IESG Approval, as outlined in <xref target="RFC5226">RFC 5226</xref>.
                    Requests should be made by email to IANA, which will then forward the request to the IESG, requesting approval.
                </t>
            </section>
        </section>
    </middle>

    <back>
        <!-- References Section -->
        <references title="Normative References">
            &rfc2045;
            &rfc2119;
            &rfc3986;
            &rfc4287;
            &rfc6570;
            <reference anchor="json-pointer" target="http://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-03">
                <front>
                    <title>JSON Pointer</title>
                    <author initials="P." surname="Bryan">
                        <organization>ForgeRock US, Inc.</organization>
                    </author>
                    <author initials="K." surname="Zyp">
                        <organization>SitePen (USA)</organization>
                    </author>
                    <author initials="M." surname="Nottingham">
                        <organization>Rackspace</organization>
                    </author>
                    <date year="2012" month="August" />
                </front>
            </reference>
            <reference anchor="json-schema-core" target="http://tools.ietf.org/html/draft-zyp-json-schema-04">
                <front>
                    <title>JSON Schema: core definitions and terminology</title>
                    <author initials="F." surname="Galiegue">
                    </author>

                    <author initials="K."surname="Zyp">
                        <organization>SitePen (USA)</organization>
                    </author>

                    <author initials="G." surname="Court">
                    </author>
                    <date year="2013"/>
                </front>
            </reference>
        </references>
        <references title="Informative References">
            &rfc2616;
            &rfc5226;
            &rfc2046;
            &rfc5988;
            &html401;
        </references>

        <section title="Change Log">
            <t>
                <list style="hanging">
                    <t hangText="draft-04">
                        <list style="symbols">
                            <t>Resolution of link URIs ("href") is now affected by rel="self" links on the instance</t>
                            <t>Define "title" for LDOs</t>
                            <t>Use URI Templates for the "href" property</t>
                            <t>Split hyper-schema definition out from main schema.</t>
                            <t>Capitalised the T in "encType", and the O in "readOnly"</t>
                            <t>Moved "mediaType" and "contentEncoding" to the new "media" property (renamed "type" and "binaryEncoding")</t>
                            <t>Added "mediaType" property to LDOs</t>
                            <t>Replaced "slash-delimited" fragment resolution with "json-pointer".</t>
                            <t>Added "template" LDO attribute.</t>
                            <t>Improved wording of sections.</t>
                        </list>
                    </t>

                    <t hangText="draft-03">
                        <list style="symbols">
                            <t>Added example and verbiage to "extends" attribute.</t>
                            <t>Defined slash-delimited to use a leading slash.</t>
                            <t>Made "root" a relation instead of an attribute.</t>
                            <t>Removed address values, and MIME media type from format to reduce
                            confusion (mediaType already exists, so it can be used for MIME
                            types).</t>
                            <t>Added more explanation of nullability.</t>
                            <t>Removed "alternate" attribute.</t>
                            <t>Upper cased many normative usages of must, may, and should.</t>
                            <t>Replaced the link submission "properties" attribute to "schema"
                            attribute.</t>
                            <t>Replaced "optional" attribute with "required" attribute.</t>
                            <t>Replaced "maximumCanEqual" attribute with "exclusiveMaximum"
                            attribute.</t>
                            <t>Replaced "minimumCanEqual" attribute with "exclusiveMinimum"
                            attribute.</t>
                            <t>Replaced "requires" attribute with "dependencies" attribute.</t>
                            <t>Moved "contentEncoding" attribute to hyper schema.</t>
                            <t>Added "additionalItems" attribute.</t>
                            <t>Added "id" attribute.</t>
                            <t>Switched self-referencing variable substitution from "-this" to "@"
                            to align with reserved characters in URI template.</t>
                            <t>Added "patternProperties" attribute.</t>
                            <t>Schema URIs are now namespace versioned.</t>
                            <t>Added "$ref" and "$schema" attributes.</t>
                        </list>
                    </t>

                    <t hangText="draft-02">
                        <list style="symbols">
                            <t>Replaced "maxDecimal" attribute with "divisibleBy" attribute.</t>
                            <t>Added slash-delimited fragment resolution protocol and made it the
                            default.</t>
                            <t>Added language about using links outside of schemas by referencing
                            its normative URI.</t>
                            <t>Added "uniqueItems" attribute.</t>
                            <t>Added "targetSchema" attribute to link description object.</t>
                        </list>
                    </t>

                    <t hangText="draft-01">
                        <list style="symbols">
                            <t>Fixed category and updates from template.</t>
                        </list>
                    </t>

                    <t hangText="draft-00">
                        <list style="symbols">
                            <t>Initial draft.</t>
                        </list>
                    </t>
                </list>
            </t>
        </section>
    </back>
</rfc>
