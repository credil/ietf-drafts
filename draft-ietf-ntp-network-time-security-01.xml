<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-ietf-ntp-network-time-security-01.txt"
     ipr="trust200902" submissionType="IETF">
  <front>
    <title abbrev="NTS">Network Time Security</title>

    <author fullname="Dieter Sibold" initials="D." surname="Sibold">
      <organization abbrev="PTB">Physikalisch-Technische
      Bundesanstalt</organization>

      <address>
        <postal>
          <street>Bundesallee 100</street>

          <city>Braunschweig</city>

          <code>D-38116</code>

          <region/>

          <country>Germany</country>
        </postal>

        <phone>+49-(0)531-592-8420</phone>

        <facsimile>+49-531-592-698420</facsimile>

        <email>dieter.sibold@ptb.de</email>
      </address>
    </author>

    <author fullname="Stephen R&ouml;ttger" initials="S."
            surname="R&ouml;ttger">
      <organization abbrev="TU-BS">Technische Universit&auml;t
      Braunschweig</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <region/>

          <code/>

          <country/>
        </postal>

        <phone/>

        <facsimile/>

        <email>stephen.roettger@googlemail.com</email>

        <uri/>
      </address>
    </author>

    <author fullname="Kristof Teichel" initials="K." surname="Teichel">
      <organization abbrev="PTB">Physikalisch-Technische
      Bundesanstalt</organization>

      <address>
        <postal>
          <street>Bundesallee 100</street>

          <city>Braunschweig</city>

          <region/>

          <code>D-38116</code>

          <country>Germany</country>
        </postal>

        <phone/>

        <facsimile/>

        <email>kristof.teichel@ptb.de</email>

        <uri/>
      </address>
    </author>

    <date day="18" month="October" year="2013"/>

    <area>Internet Area</area>

    <workgroup>NTP Working Group</workgroup>

    <keyword>Integrity</keyword>

    <keyword>Authentication</keyword>

    <keyword>NTP</keyword>

    <keyword>PTP</keyword>

    <keyword>Security</keyword>

    <abstract>
      <t>This document describes the Network Time Security (NTS) protocol that
      enables secure authentication of time servers using Network Time
      Protocol (NTP) or Precision Time Protocol (PTP). Its design considers
      the special requirements of precise timekeeping, which are described in
      Security Requirements of Time Protocols in Packet Switched Network <xref
      target="I-D.ietf-tictoc-security-requirements"/>.</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t>Time synchronization protocols are more and more utilized to
      synchronize clocks in networked infrastructures. The reliable
      performance of such infrastructures can be degraded seriously by
      successful attacks against the time synchronization protocol. Therefore,
      time synchronization protocols applied in critical infrastructures have
      to provide security measures to defeat possible adversaries.
      Consequently, the widespread Network Time Protocol (NTP) <xref
      target="RFC5905"/> was supplemented by the autokey protocol <xref
      target="RFC5906"/> which shall ensure authenticity of the NTP server and
      integrity of the protocol packets. Unfortunately,the autokey protocol
      exhibits various severe security vulnerabilities as revealed in a
      thorough analysis of the protocol <xref target="R&ouml;ttger"/>. For the
      Precision Time Protocol (PTP) Annex K of the standard document <xref
      target="IEEE1588">IEEE 1588</xref> defines an informative security
      protocol that is still in experimental state.</t>

      <t>Because of autokey's security vulnerabilities and the absence of a
      standardized security protocol for PTP these protocols cannot be applied
      in environments in which compliance requirements demand authenticity and
      integrity protection. This document specifies a security protocol which
      ensures authenticity of the time server via a Public Key Infrastructure
      and integrity of the time synchronization protocol packets and which
      therefore enables the usage of NTP and PTP in such environments.</t>

      <t>The protocol is specified with the prerequisite in mind that precise
      timekeeping can only be accomplished with stateless time synchronization
      communication, which excludes standard security protocols like IPsec or
      TLS. This prerequisite corresponds with the requirement that a security
      mechanism for timekeeping must be designed in such a way that it does
      not degrade the quality of the time transfer <xref
      target="I-D.ietf-tictoc-security-requirements"/>.</t>

      <t>Note:<list style="hanging">
          <t>It is intended to formulate the protocol to be applicable to NTP
          as well as PTP. In the current state the draft focuses on the
          application to NTP.</t>
        </list></t>
    </section>

    <section title="Security Threats">
      <t>A profound analysis of security threats and requirements for NTP and
      PTP can be found in the I-D <xref
      target="I-D.ietf-tictoc-security-requirements"/>.</t>
    </section>

    <section title="Objectives">
      <t>The objectives of the NTS specifications are as follows:<list
          style="symbols">
          <t>Authenticity: NTS enables the client to authenticate its time
          server.</t>

          <t>Integrity: NTS protects the integrity of time synchronization
          protocol packets via a message authentication code (MAC).</t>

          <t>Confidentiality: NTS does not provide confidentiality protection
          of the time synchronization packets.</t>

          <t>Modes of operation: All operational modes of NTP are
          supported.</t>

          <t>Operational modes of PTP should be supported as far as
          possible.</t>

          <t>Hybrid mode: Both secure and insecure communication modes are
          possible for NTP servers and clients, respectively.</t>

          <t>Compatibility:<list style="symbols">
              <t>Unsecured NTP associations shall not be affected.</t>

              <t>An NTP server that does not support NTS shall not be affected
              by NTS authentication requests.</t>
            </list></t>
        </list></t>
    </section>

    <section title="Terms and Abbreviations">
      <t><list style="symbols">
          <t>TESLA: Time efficient stream loss-tolerant authentication</t>
        </list></t>
    </section>

    <section title="NTS Overview">
      <section anchor="overview" title="Symmetric and Client/Server Mode">
        <t>Authenticity of the time server is verified once by a Public Key
        Infrastructure. Authenticity and integrity of the NTP packets are then
        ensured by a Message Authentication Code (MAC), which is attached to
        the NTP packet. The calculation of the MAC includes the whole NTP
        packet and the cookie which is shared between client and server. It is
        calculated according to:<list style="hanging">
            <t>cookie = MSB_128 (H(server seed || H(public key of
            client))),</t>
          </list>where || indicates concatenation and in which H is a hash
        algorithm. The function MSB_128 cuts off the 128 most significant bits
        of the result of the hash function. The server seed is a 128 bit
        random value of the server, which has to be kept secret. The cookie
        thus never changes as long as the server seed stays the same. The
        server seed has to be refreshed periodically in order to provide key
        freshness as required in <xref
        target="I-D.ietf-tictoc-security-requirements"/>. The server does not
        keep a state of the client. Therefore it has to recalculate the cookie
        each time it receives a request from the client. To this end, the
        client has to attach the hash value of its public key to each request
        (see <xref target="timerequest"/>).</t>
      </section>

      <section title="Broadcast Mode">
        <t>Just as in the case of the client server mode and symmetric mode,
        authenticity and integrity of the NTP packets are ensured by a MAC,
        which is attached to the NTP packet by the sender. The verification of
        the authenticity is based on the TESLA protocol <xref
        target="RFC4082"/>. TESLA is based on a one-way chain of keys, where
        each key is the output of a one-way function applied on the previous
        key in the chain. The last element of the chain is shared securely
        with all clients. The server splits time into intervals of uniform
        duration and assigns each key to an interval in reverse order,
        starting with the penultimate. At each time interval, the server sends
        an NTP broadcast packet appended by a MAC, calculated using the
        corresponding key, and the key of the previous interval. The client
        verifies the MAC by buffering the packet until the disclosure of the
        key in the next interval. In order to be able to verify the validity
        of the key, the client has to be loosely time synchronized to the
        server. This has to be accomplished during the initial client server
        exchange between broadcast client and server. For a more detailed
        description of the TESLA protocol see <xref
        target="appBroadcast"/>.</t>
      </section>
    </section>

    <section anchor="protsec" title="Protocol Sequence">
      <section anchor="assoc" title="Association Message">
        <t>The protocol sequence starts with the association message, in which
        the client sends an NTP packet with an extension field of type
        association. It contains the hostname of the client and a status word
        which contains the algorithms used for the signatures and the status
        of the connection. The response contains the hostname of the server
        and the algorithms for the signatures. The server notifies the
        cryptographic hash algorithms which it supports.</t>
      </section>

      <section anchor="cert" title="Certificate Message">
        <t>In this step, the client receives the certification chain up to a
        trusted authority (TA). To this end, the client requests the
        certificate for the subject name (hostname) of the NTP server. The
        response contains the certificate with the issuer name. If the issuer
        name is different from the subject name, the client requests the
        certificate for the issuer. This continues until it receives a
        certificate in which the subject name and the issuer name are
        identical, which indicates that it is issued by a TA. The client then
        checks that the issuer is indeed on its list of issuers which are
        accepted as TAs. The client has to check that each issuer in the
        certificate chain is authorized to issue new certificates. To this
        end, the certificates have to include the X.509v3 extension field
        "CA:TRUE". With the established certification chain the client is able
        to verify the server signatures and, hence, the authenticity of the
        server messages with extension fields is ensured.</t>

        <t>Discussion:<list style="hanging">
            <t>Note that in this step the client validates the authenticity of
            its NTP server only. It does not recursively validate the
            authenticity of each NTP server on the time synchronization chain.
            But each NTP server on the time synchronization chain validates
            the NTP server to which it is synchronized. This conforms to the
            recursive authentication requirement in the TICTOC security
            requirements <xref
            target="I-D.ietf-tictoc-security-requirements"/>.</t>
          </list></t>

        <!--Note that this certification chain is a priori independent of the
      time synchronization chain, because the TA and the NTP root are
      not inevitably identical.  This has consequences if proventication
      is required (Requirement 4.1.2 in [I-D.ietf-tictoc-security-
      requirements]). In this case, proventication can be ensured only
      if the NTP root server is also a recognized TA, hence a CA.-->
      </section>

      <section anchor="cookiemessage" title="Cookie Message">
        <t>The client requests a cookie from the server. It selects a hash
        algorithm from the list of algorithms supported by the server. The
        request includes its public key and the selected hash algorithm. The
        hash of the public key is used by the server to calculate the cookie
        (see <xref target="overview"/>). The response of the server contains
        the cookie and a signature of the cookie signed with the server's
        private key, both encrypted with the client's public key.</t>
      </section>

      <section title="Broadcast Parameter Message">
        <t>In the broadcast mode the client requests the following information
        from the server: <list style="symbols">
            <t>the last key of the one-way key chain,</t>

            <t>the disclosure schedule of the following keys. This
            contains:<list style="symbols">
                <t>time interval duration, time at which the next time
                interval will start and its associated index,</t>

                <t>key disclosure delay (number of time intervals for which a
                key is valid).</t>
              </list></t>
          </list></t>

        <t>The server will sign all transmitted properties so that the client
        is able to verify their authenticity. For this packet exchange a new
        extension field "broadcast parameters" is used. The client
        synchronizes its time with the server in the client server mode and
        saves an upper bound of its time offset with respect to the time of
        the server. See Appendix <xref format="counter"
        target="appBroadcast"/> for more details.</t>
      </section>

      <section anchor="timerequest" title="Time Request Message">
        <t>The client request includes a new extension field "time request"
        which contains the hash of its public key, a 128-bit nonce, and the
        chosen hash algorithm . The server needs the hash of the public key
        and the notified hash algorithm to recalculate the cookie for the
        client. The response is a NTP packet with a new extension field "time
        response" which contains the nonce and a MAC generated over the time
        synchronization data, the cookie and the nonce.</t>
      </section>

      <section title="Broadcast Message">
        <t>In broadcast mode the NTP packet includes a new extension field
        "broadcast message" which contains the disclosed key of the previous
        disclosure interval (current time interval minus disclosure delay).
        The NTP packet is appended by a MAC, calculated with the key for the
        current time interval. When a client receives a broadcast message it
        has to perform the following tests: <list style="symbols">
            <t>Proof that the MAC is based on a key that is not yet disclosed.
            This is achieved via a disclosure schedule, so this is where loose
            time synchronization is required. If verified the packet will be
            buffered for later authentication otherwise it has to be
            discarded. Note that the time information included in the packet
            will not be used for synchronization until their authenticity
            could be verified.</t>

            <t>The client checks whether it already knows the disclosed key.
            If so, the packet is discarded to avoid a buffer overrun. If not,
            the client verifies that the disclosed key belongs to the one-way
            key chain by applying the one-way function until equality with a
            previous disclosed key is verified. If falsified the packet has to
            be discarded.</t>

            <t>If the disclosed key is legitimate the client verifies the
            authenticity of any packet that it received during the
            corresponding time interval. If authenticity of a packet is
            verified it is released from the buffer and the packet's time
            information can be utilized. If the verification fails
            authenticity is no longer given. In this case the client MUST
            request authentic time from the server by means of a unicast time
            request message.</t>
          </list>See RFC 4082<xref target="RFC4082"/> for a detailed
        description of the packet verification process.</t>
      </section>

      <section anchor="restartPS" title="Server Seed Refresh">
        <t>According to the requirements in <xref
        target="I-D.ietf-tictoc-security-requirements"/> the server has to
        refresh its server seed periodically. As a consequence the cookie used
        in the time request messages becomes invalid. In this case the client
        cannot verify the attached MAC and has to respond accordingly by
        re-initiating the protocol with a cookie request (<xref
        target="cookiemessage"/>). This is true for the unicast and broadcast
        mode, respectively.</t>

        <t>Additionally, in broadcast mode the client has to restart the
        broadcast sequence with a time request message if the one-way key
        chain expires.</t>

        <t>During certificate message exchange the client reads the expiration
        date of the period of validity of the server certificate. The client
        MAY restart the protocol sequence with the association message before
        the server certificate expires.</t>
      </section>
    </section>

    <section title="Hash Algorithms and MAC Generation">
      <section anchor="hash" title="Hash Algorithms">
        <t>Hash algorithms are used at different points: calculation of the
        cookie and the MAC, and hashing of the public key. The client selects
        the hash algorithm from the list of hash algorithms which are
        supported by the server. This list is notified during the association
        message exchange (<xref target="assoc"/>). The selected algorithm is
        used for all hashing processes in the protocol.</t>

        <t>In the broadcast mode hash algorithm are used as pseudo random
        functions to construct the one-way key chain.</t>

        <t>The list of the hash algorithms supported by the server has to
        fulfill the following requirements:</t>

        <t><list style="symbols">
            <t>it MUST NOT include MD5 or weaker algorithms,</t>

            <t>it MUST include SHA-256 or stronger algorithms.</t>
          </list></t>
      </section>

      <section title="MAC Calculation">
        <t>For the calculation of the MAC client and server are using a
        Keyed-Hash Message Authentication Code (HMAC) approach <xref
        target="RFC2104"/>. The HMAC is generated with the hash algorithm
        specified by the client (see <xref target="hash"/>).</t>
      </section>
    </section>

    <section title="Server Seed Considerations">
      <t>The server has to calculate a random seed which has to be kept secret
      and which has to be changed periodically. The server has to generate a
      seed for each supported hash algorithm.</t>

      <section title="Server Seed Algorithm">
        <t/>
      </section>

      <section title="Server Seed Live Time">
        <t/>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes no request of IANA.</t>

      <t>Note to RFC Editor: this section may be removed on publication as an
      RFC.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <section title="Initial Verification of the Server Certificates">
        <t>The client has to verify the validity of the certificates during
        the certification message exchange (<xref target="cert"/>). Since it
        generally has no reliable time during this initial communication
        phase, it is impossible to verify the period of validity of the
        certificates. Therefore, the client MUST use one of the following
        approaches:</t>

        <t><list style="symbols">
            <t>The validity of the certificates is preconditioned. Usually
            this will be the case in corporate networks.</t>

            <t>The client ensures that the certificates are not revoked. To
            this end, the client uses the Online Certificate Status Protocol
            (OCSP) defined in <xref target="RFC6277"/>.</t>

            <t>The client requests a different service to get an initial time
            stamp in order to be able to verify the certificates' periods of
            validity. To this end, it can, e.g., use a secure shell connection
            to a reliable host. Another alternative is to request a time stamp
            from a Time Stamping Authority (TSA) by means of the Time-Stamp
            Protocol (TSP) defined in <xref target="RFC3161"/>.</t>
          </list></t>
      </section>

      <section title="Revocation of Server Certificates">
        <t>According to Section <xref target="restartPS"/> it is the client's
        responsibility to initiate a new association with the server after the
        server's certificate expires. To this end the client reads the
        expiration date of the certificate during the certificate message
        exchange (<xref target="cert"/>). Besides, certificates may also be
        revoked prior to the normal expiration date. To increase security the
        client MAY verify the state of the server's certificate via OCSP
        periodically.</t>
      </section>

      <section title="Usage of NTP Pools">
        <t>The certification based authentication scheme described in <xref
        target="protsec"/> is not applicable to the concept of NTP pools.
        Therefore, NTS is not able to provide secure usage of NTP pools.</t>
      </section>

      <section anchor="secBroadcast"
               title="Denial-of-Service in Broadcast Mode">
        <t>TESLA authentication buffers packets for delayed authentication.
        This makes the protocol vulnerable to flooding attacks, causing the
        client to buffer excessive numbers of packets. To add stronger DoS
        protection to the protocol client and server SHALL use the "Not
        Re-using Keys" scheme of TESLA as pointed out in section 3.7.2 of
        <xref target="RFC4082">RFC 4082</xref>. In this scheme the server
        never uses a key for the MAC generation more than once. Therefore the
        client can discard any packet that contains a disclosed key it knows
        already, thus preventing memory flooding attacks.</t>

        <t>Note, an alternative approach to enhance TESLA's resistance against
        DoS attacks involves the addition of a group MAC to each packet. This
        requires the exchange of an additional shared key common to the whole
        group. This adds additional complexity to the protocol and hence is
        currently not considered in this document.</t>
      </section>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t/>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include='reference.RFC.6277'?>

      <reference anchor="IEEE1588">
        <front>
          <title>IEEE standard for a precision clock synchronization protocol
          for networked measurement and control systems</title>

          <author fullname="IEEE Instrumentation and Measurement Society TC-9 Sensor Technology">
            <organization>IEEE Instrumentation and Measurement Society. TC-9
            Sensor Technology</organization>
          </author>

          <date year="2008"/>
        </front>
      </reference>

      <?rfc include='reference.RFC.3161'?>

      <?rfc include='reference.RFC.5905'?>

      <?rfc include='reference.RFC.4082'?>

      <?rfc include='reference.RFC.2104'?>

      <?rfc include='reference.RFC.5906'?>
    </references>

    <references title="Informative References">
      <reference anchor="R&ouml;ttger">
        <front>
          <title>Analysis of the NTP Autokey Procedures</title>

          <author fullname="Stephen R&ouml;ttger" initials="S"
                  surname="R&ouml;ttger">
            <organization/>
          </author>

          <date day="8" month="February" year="2012"/>
        </front>
      </reference>

      <?rfc include='reference.I-D.draft-ietf-tictoc-security-requirements-05'?>
    </references>

    <section title="TICTOC Security Requirements">
      <t>The following table compares the NTS specifications against the
      TICTOC security requirements <xref
      target="I-D.ietf-tictoc-security-requirements"/>.</t>

      <texttable align="left" style="all" suppress-title="false"
                 title="Comparsion of NTS sepecification against TICTOC security requirements.">
        <ttcol align="left">Section</ttcol>

        <ttcol>Requirement from I-D tictoc security-requirements-05</ttcol>

        <ttcol>Requirement level</ttcol>

        <ttcol width="">NTS</ttcol>

        <c>5.1.1</c>

        <c>Authentication of Servers</c>

        <c>MUST</c>

        <c>OK</c>

        <c>5.1.1</c>

        <c>Authorization of Servers</c>

        <c>MUST</c>

        <c>-</c>

        <c>5.1.2</c>

        <c>Recursive Authentication of Servers (Stratum 1)</c>

        <c>MUST</c>

        <c>NO</c>

        <c>5.1.2</c>

        <c>Recursive Authorization of Servers (Stratum 1)</c>

        <c>MUST</c>

        <c>-</c>

        <c>5.1.3</c>

        <c>Authentication and Authorization of Slaves</c>

        <c>MAY</c>

        <c>-</c>

        <c>5.2</c>

        <c>Integrity protection.</c>

        <c>MUST</c>

        <c>OK</c>

        <c>5.3</c>

        <c>Protection against DoS attacks</c>

        <c>SHOULD</c>

        <c>OK</c>

        <c>5.4</c>

        <c>Replay protection</c>

        <c>MUST</c>

        <c>OK</c>

        <c>5.5.1</c>

        <c>Key freshness.</c>

        <c>MUST</c>

        <c>OK</c>

        <c>5.5.2</c>

        <c>Security association.</c>

        <c>SHOULD</c>

        <c>OK</c>

        <c>5.5.3</c>

        <c>Unicast and multicast associations.</c>

        <c>SHOULD</c>

        <c>OK</c>

        <c>5.6</c>

        <c>Performance: no degradation in quality of time transfer.</c>

        <c>MUST</c>

        <c>OK</c>

        <c/>

        <c>Performance: lightweight computation</c>

        <c>SHOULD</c>

        <c>OK</c>

        <c/>

        <c>Performance: storage, bandwidth</c>

        <c>SHOULD</c>

        <c>OK</c>

        <c>5.7</c>

        <c>Confidentiality protection</c>

        <c>MAY</c>

        <c>NO</c>

        <c>5.8</c>

        <c>Protection against Packet Delay and Interception Attacks</c>

        <c>SHOULD</c>

        <c>NA*)</c>

        <c>5.9.1</c>

        <c>Secure mode</c>

        <c>MUST</c>

        <c>-</c>

        <c>5.9.2</c>

        <c>Hybrid mode</c>

        <c>MAY</c>

        <c>-</c>

        <postamble>*) Ensured by NTP via multi-source
        configuration.</postamble>
      </texttable>
    </section>

    <section anchor="appBroadcast" title="Broadcast Mode">
      <t/>
    </section>
  </back>
</rfc>
<?xxe-serial-numbers hmuld04a sibold01
hmxa3oxc sibold01
(1z141z5 (1z141z6 (1z141z7) (1z141z8 (1z141z9) (1z141za (1z141zb (1z141zc)
(1z141zd) (1z141ze) (1z141zf) (1z141zg)) (1z141zh) (1z141zi) (1z141zj)))
(1z141zk (1z141zl) (1z141zm (1z141zn (1z141zo) (1z141zp) (1z141zq)
(1z141zr) (1z141zs)) (1z141zt) (1z141zu) (1z141zv) (1z141zw))) (1z141zx
(1z141zy) (1z141zz (1z14200 (1z14201) (1z14202) (1z14203) (1z14204)
(1z14205)) (1z14206) (1z14207) (1z14208) (1z14209))) (1z1420a) (1z1420b)
(1z1420c) (1z1420d) (1z1420e) (1z1420f) (1z1420g) (1z1420h) (1z1420i
(1z1420j (1z1420k))) (1z1420l (1z1420m (1z1420n)))) (1z1420o (1z1420p
(1z1420q (1z1420r) (1z1420s) (1z1420t) (1z1420u)) (1z1420v) (1z1420w
(1z1420x)) (1z1426q (1z1426r (1z1426s)))) (1z1420y (1z1420z (1z14210)))
(1z14211 (1z14212 (1z14213 (1z14214) (1z14215) (1z14216) (1z14217)
(1z1426t) (1z14218) (1z14219 (1z1421a (1z1421b) (1z1421c)))))) (1z1421d
(1z1421e (1z1421f (1z1421g)))) (1z1421h (1z1421i (1z1421j (1z1421k
(1z1421l)) (1z1421m) (1z1421n))) (1z1421o (1z1421p (1z1421q) (1z1421r))))
(1z1421s (1z1421t (1z1421u)) (1z1421v (1z1421w) (1z1421x (1z1421y
(1z1421z (1z14220))))) (1z14221 (1z14222 (1z14223))) (1z14224 (1z14225
(1z14226 (1z14227) (1z14228 (1z14229 (1z1422a) (1z1422b))))) (1z1422c
(1z1422d))) (1z1422e (1z1422f)) (1z1422g (1z1422h (1z1422i (1z1422j)
(1z1422k) (1z1422l)) (1z1422m))) (1z1422n (1z1422o (1z1422p) (1z1426p))
(1z1422q) (1z1422r))) (1z1422s (1z1422t (1z1422u (1z1422v)) (1z1422w)
(1z1422x) (1z1422y (1z1422z (1z14230) (1z14231)))) (1z14232 (1z14233
(1z14234) (1z14235)))) (1z14236 (1z14237) (1z14238 (1z14239)) (1z1423a
(1z1423b))) (1z1423c (1z1423d) (1z1423e)) (1z1423f (1z1423g (1z1423h
(1z1423i)) (1z1423j (1z1423k (1z1423l) (1z1423m (1z1423n)) (1z1423o
(1z1423p))))) (1z1423q (1z1423r (1z1423s) (1z1423t))) (1z1423u (1z1423v
(1z1423w))) (1z1423x (1z1423y (1z1423z)) (1z14240))) (1z14241 (1z14242)))
(1z14243 (1z14244 (1z14245 (1z14246 (1z14247) (1z14248 (1z14249))
(1z1424a)))) (1z1424b (1z1424c (1z1424d (1z1424e) (1z1424f (1z1424g))
(1z1424h)))) (1z1424i (1z1424j (1z1424k)) (1z1424l (1z1424m) (1z1424n)
(1z1424o) (1z1424p) (1z1424q) (1z1424r) (1z1424s) (1z1424t) (1z1424u)
(1z1424v) (1z1424w) (1z1424x) (1z1424y) (1z1424z) (1z14250) (1z14251)
(3y283y9) (3y283ya) (3y283yb) (3y283yc) (1z14252) (1z14253) (1z14254)
(1z14255) (1z14256) (1z14257) (1z14258) (1z14259) (1z1425a) (1z1425b)
(1z1425c) (1z1425d) (1z1425e) (1z1425f) (1z1425g) (1z1425h) (1z1425i)
(1z1425j) (1z1425k) (1z1425l) (1z1425m) (1z1425n) (1z1425o) (1z1425p)
(1z1425q) (1z1425r) (1z1425s) (1z1425t) (1z1425u) (1z1425v) (1z1425w)
(1z1425x) (1z1425y) (1z1425z) (1z14260) (1z14261) (1z14262) (1z14263)
(1z14264) (1z14265) (1z14266) (1z14267) (1z14268) (1z14269) (1z1426a)
(1z1426b) (1z1426c) (1z1426d) (1z1426e) (1z1426f) (1z1426g) (1z1426h)
(1z1426i) (1z1426j) (1z1426k) (1z1426l) (1z1426m))) (1z1426n (1z1426o))))?>
