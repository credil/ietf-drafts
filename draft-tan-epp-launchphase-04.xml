<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2045 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2045.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC5730 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5730.xml">
<!ENTITY RFC5733 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5733.xml">
<!ENTITY RFC5731 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5731.xml">
<!ENTITY RFC3688 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3688.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="yes"?>
<!-- keep one blank line between list items -->
<?rfc comments="yes" ?>
<!-- show cref output -->
<?rfc inline="yes" ?>
<!-- inline cref output -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-tan-epp-launchphase-04" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <title abbrev="Launch Phase Mapping for EPP">Launch Phase Mapping for the
    Extensible Provisioning Protocol (EPP)</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Wil Tan" initials="W.T." surname="Tan">
      <organization>Cloud Registry</organization>

      <address>
        <postal>
          <street>Suite 32 Seabridge House</street>

          <street>377 Kent St</street>

          <city>Sydney</city>

          <region>NSW</region>

          <code>2000</code>

          <country>AU</country>
        </postal>

        <phone>+61 414 710899</phone>

        <email>wil@cloudregistry.net</email>

        <uri>http://www.cloudregistry.net</uri>
      </address>
    </author>

    <author fullname="Gavin Brown" initials="G.B." surname="Brown">
      <organization>CentralNic Ltd</organization>

      <address>
        <postal>
          <street>35-39 Mooregate</street>

          <city>London</city>

          <region>England</region>

          <code>EC2R 6AR</code>

          <country>GB</country>
        </postal>

        <phone>+44 8700 170 900</phone>

        <email>gavin.brown@centralnic.com</email>

        <uri>http://www.centralnic.com</uri>
      </address>
    </author>

    <author fullname="James Gould" initials="J.G" surname="Gould">
      <organization>VeriSign, Inc.</organization>

      <address>
        <postal>
          <street>12061 Bluemont Way</street>

          <city>Reston</city>

          <region>VA</region>

          <code>20190</code>

          <country>US</country>
        </postal>

        <email>jgould@verisign.com</email>

        <uri>http://www.verisigninc.com</uri>
      </address>
    </author>

    <date day="4" month="December" year="2012"/>

    <!-- Meta-data Declarations -->

    <area>Applications</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <keyword>EPP, Sunrise, Landrush, Trademark Clearinghouse, Trademark
    Claims, domain name registry, launch phase</keyword>

    <abstract>
      <t>This document describes an Extensible Provisioning Protocol (EPP)
      extension mapping for the provisioning and management of domain names
      during the launch phase of a domain name registry.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>This document describes an extension mapping for version 1.0 of the
      <xref target="RFC5730">Extensible Provisioning Protocol (EPP)</xref>.
      This EPP mapping specifies a flexible schema that can be used to
      implement several common use cases related to the provisioning and
      management of launch phase extension in a domain name registry.</t>

      <t>It is typical for domain registries to operate in special modes
      within certain periods of time to facilitate allocation of domain names. 
      This document
      uses the term "launch phase" and the shorter form "launch" to refer to
      such a period.</t>

      <t>The <xref target="RFC5731">EPP domain name mapping</xref> is designed
      for the steady state operation of a registry. During the launch, the
      interface used at each phase of the launch could be different from what
      is defined in <xref target="RFC5731">EPP domain name mapping</xref>. for
      example, registries typically accept multiple applications for a given
      domain name during the "sunrise" launch phase, referred to as a launch application.  A launch registration 
      is used to refer to a registration made during a launch phase when the server uses 
      a first-come-first-serve model.  Even in a first-come-first-serve model additional steps 
      and information might be required to support a launch phase, like the passing of 
      trademark information on a create.  In addition, the <eref
      target="http://newgtlds.icann.org/en/about/trademark-clearinghouse/claims-model-26sep12-en.pdf">Proposed Trademark Claims Model</eref> 
      defines a registry
      interface for the Trademark Claims or "claims" launch phase that
      includes support for presenting a Trademark Claims Notice to the
      Registrant. This document proposes an extension to the domain name
      extension in order to unambiguously manage the various launch phases
      known.</t>

      <section title="Conventions Used in This Document">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>

        <t>XML is case sensitive. Unless stated otherwise, XML specifications
        and examples provided in this document MUST be interpreted in the
        character case presented in order to develop a conforming
        implementation.</t>

        <t>"launch-1.0" is used as an abbreviation for
        "urn:ietf:params:xml:ns:launch-1.0". The XML namespace prefix "launch"
        is used, but implementations MUST NOT depend on it and instead employ
        a proper namespace-aware XML parser and serializer to interpret and
        output the XML documents.</t>
        <t>"signedMark-1.0" is used as an abbreviation for
        "urn:ietf:params:xml:ns:signedMark-1.0". The XML namespace prefix "smd"
        is used, but implementations MUST NOT depend on it and instead employ
        a proper namespace-aware XML parser and serializer to interpret and
        output the XML documents.</t>
        <t>"mark-1.0" is used as an abbreviation for
        "urn:ietf:params:xml:ns:mark-1.0". The XML namespace prefix "mark"
        is used, but implementations MUST NOT depend on it and instead employ
        a proper namespace-aware XML parser and serializer to interpret and
        output the XML documents.</t>
      </section>
    </section>

    <section anchor="attrs" title="Object Attributes">
      <t>This extension adds additional elements to the <xref
      target="RFC5731">EPP domain name mapping</xref>. Only those new elements
      are described here.</t>

      <section anchor="applicationID" title="Application Identifiers">
        <t>Servers MAY allow multiple applications, referred to as a launch application, 
        of a given domain name
        during its launch phase operations. Upon receiving a request to create
        a domain name, the server creates an application object corresponding
        to the request and assigns an application identifier for the application
        and returns it to the client with the &lt;launch:applicationID&gt;
        element. In order to facilitate correlation, all subsequent launch
        operations on the application object MUST be qualified by the
        previously assigned application identifier using the
        &lt;launch:applicationID&gt; element.</t>
      </section>

      <section anchor="phases" title="Launch Phases">
        <t>The server MAY support multiple launch phases sequentially or
        simultaneously. The &lt;launch:phase&gt; element MUST be included by
        the client to define the target launch phase of the command.</t>

        <t>The following launch phase values are defined: <list
            style="hanging">
            <t hangText="sunrise">Phase when trademark holders can submit
            registration applications with trademark information that can be
            validated by the server.</t>

            <t hangText="landrush">Post sunrise phase when non-trademark
            holders are allowed to register domain names with steps taken 
            to address a large volume of initial registrations.</t>

            <t hangText="claims1">Trademark claims phase 1 as defined by 
            Trademark Clearinghouse model of displaying a full, detailed 
            claims notice to clients for domain names that match 
            trademarks.</t>
            
            <t hangText="claims2">Trademark claims phase 2 as defined by 
            Trademark Clearinghouse model of displaying a short, educational 
            claims notice to clients for domain names that match 
            trademarks that opt into the service.</t>

            <t hangText="open">Post launch phase that is also referred to as
            "steady state". Servers MAY require additional trademark
            protection with this phase.</t>

            <t hangText="custom">A custom server launch phase that is defined
            using the "name" attribute.</t>
          </list></t>

        <t>For extensibility the &lt;launch:phase&gt; element includes an
        OPTIONAL "name" attribute that can define a sub-phase or the full name
        of the phase when the &lt;launch:phase&gt; element has the "custom"
        value.  For example, the "claims1" launch phase could have two 
        sub-phases that include "landrush" and "open".</t>
      </section>

      <section anchor="statuses" title="Status Values">
        <t>A launch application object MAY have a status value. The
        &lt;launch:status&gt; element is used to convey extended status pertaining to
        the application object, beyond what is specified in the object mapping
        for this application object.</t>

        <t>The following status values are defined using the 
        required "s" attribute: <list style="hanging">
            <t hangText="pending:">the initial state of a newly-created
            application object.</t>

            <t hangText="validated:">the application meets relevant registry
            rules.</t>

            <t hangText="invalid:">the application does not validate according
            to registry rules.</t>

            <t hangText="pendingAuction:">the application is pending based on 
            results of an auction.</t>

            <t hangText="allocated:">one of two possible end states of an
            application object; the object corresponding to the application
            has been provisioned.</t>

            <t hangText="rejected:">the other possible end state; the object
            was not provisioned.</t>

            <t hangText="custom:">A custom status that is defined using the 
            "name" attribute.</t>
          </list></t>

       <t>Each status value MAY be accompanied by a string of human-readable 
        text that describes the rationale for the status applied to the object.
        The OPTIONAL "lang" attribute MAY be present to identify the language 
        if the negotiated value is something other than the default value of 
        "en" (English).</t>
        
        <t>For extensibility the &lt;launch:status&gt; element includes an
        OPTIONAL "name" attribute that can define a sub-status or the full name
        of the status when the status value is "custom".  The server SHOULD 
        NOT use of the "custom" status value.</t>

        <t>Certain status values MAY be combined. For example, an application
        can be invalid and rejected. Additionally certain statuses MAY be
        skipped. For example, an application MAY immediately start at the
        allocated status or an application MAY skip the pendingAuction status
        if server does not support an auction. If a &lt;domain:create&gt; processes a request
        synchronously without the use of an intermediate application, than an
        <xref target="applicationID">Application Identifier</xref> is not
        needed along with the application status.</t>

        <section title="State Transition">
          <figure align="center" anchor="fsm">
            <artwork align="left"><![CDATA[

                            | request
                            v
                       +---------+
                       | pending |
                       +----+----+
                            |
                            |
       +--------------+-----+-----------+--------------+
       |              |                 |              |
       v              v                 v              v
 +-----------+   +---------+        +-------+      +-------+
 |           |   |         |       /         \    /         \
 | validated |   | invalid +----->| rejected  |  | allocated |
 |           |   |         |       \         /    \         /
 +----+------+   +----+----+        +-------+      +-------+
      |               |                 ^              ^
      |               |                 |              |
      |               +-----------------+              |
      |                                 |              |
      +---------------------------------+              |
      |                                 ^              |
      |                                 |              |      
      |                        +--------+-------+      | 
      |                        |                |      |
      +----------------------->| pendingAuction +------+
                               |                |       
                               +----------------+        

            ]]></artwork>
          </figure>
        </section>
      </section>

      <section anchor="validationModels" title="Mark Validation Models">
        <t>A server MUST support one of four models for validating the trademark 
        information:</t>

        <t><list style="hanging">

          	<t hangText="code">Use of a mark code by itself to validate 
          	that the mark matches the domain name.  This model is supported 
          	using the &lt;launch:codeMark&gt; element with just the 
          	&lt;launch:code&gt; element.</t>

            <t hangText="mark">The mark information is passed without any
            other validation element. The server will use some custom form of
            validation to validate that the mark information is authentic. This
            model is supported using the &lt;launch:codeMark&gt; element with 
            just the &lt;mark:mark&gt; element.</t>

            <t hangText="code with mark:">A code is used along with the mark
            information by the server to validate the mark utilizing an external party. 
            The code represents some form of
            secret that matches the mark information passed. This model is
            supported using the &lt;launch:codeMark&gt; element that contains both the
            &lt;launch:code&gt; and the &lt;mark:mark&gt; elements.</t>

            <t hangText="signed mark:">The mark information is digitally
            signed as described in the <xref target="digitalsignature">Digital Signature</xref>
            section.  The digital signature can be directly validated by the 
            server using the public key
            of the external party that created the signed mark using it's private key. This model is 
            supported using the
            <xref target="signedMark">&lt;smd:signedMark&gt;</xref> and 
            <xref target="encodedSignedMark">&lt;smd:encodedSignedMark&gt;</xref> 
            elements.</t>
          </list></t>

        <t>More than one &lt;launch:codeMark&gt;, &lt;smd:signedMark&gt;, 
        or &lt;smd:encodedSignedMark&gt; element MAY be specified. The maximum
        number of marks per domain name is up to server policy.</t>
        
        <section anchor="codeMark" title="&lt;launch:codeMark&gt; element">
           <t>The &lt;launch:codeMark&gt; element that is used by the "code", "mark", 
           and "code with mark" validation models, has the following child 
           elements:</t>
           <t><list style="hanging">
              <t hangText="&lt;launch:code&gt;:">OPTIONAL mark code used to 
              validate the &lt;launch:mark&gt; information.  The mark code 
              can be a mark specific secret value that the server can verify 
              against a third party.</t>
              <t hangText="&lt;mark:mark&gt;:">OPTIONAL mark information 
              with child elements defined in the <xref target="mark">Mark</xref> 
              section.</t>
           </list></t>
                   <figure>
            <preamble>The following is an example &lt;launch:codeMark&gt;
            element with both a &lt;launch:code&gt; and &lt;launch:mark&gt; element.</preamble>

            <artwork><![CDATA[
<launch:codeMark>
  <launch:code>49FD46E6C4B45C55D4AC</launch:code>
  <mark:mark xmlns:mark="urn:ietf:params:xml:ns:mark-1.0">
    <mark:name>Example One</mark:name>
    <mark:label>example-one</mark:label>
    <mark:label>exampleone</mark:label>
    <mark:issuer>IP Clearinghouse</mark:issuer>
    <mark:number>GE 3933232</mark:number>
    <mark:type>REG-TM-WORD</mark:type>
    <mark:class>1</mark:class>
    <mark:entitlement>owner</mark:entitlement>
    <mark:regDate>2011-09-09</mark:regDate>
    <mark:effectiveDate>2011-10-09</mark:effectiveDate>
    <mark:exDate>2013-09-09</mark:exDate>
    <mark:country>AU</mark:country>
    <mark:region>VIC</mark:region>
    <mark:owner>
      <mark:org>Example Inc.</mark:org>
    </mark:owner>
    <mark:contact>
      <mark:name>John Doe</mark:name>
      <mark:org>Example Inc.</mark:org>
      <mark:addr>
        <mark:street>123 Example Dr.</mark:street>
        <mark:street>Suite 100</mark:street>
        <mark:city>Reston</mark:city>
        <mark:sp>VA</mark:sp>
        <mark:pc>20190</mark:pc>
        <mark:cc>US</mark:cc>
      </mark:addr>
      <mark:voice x="1234">+1.7035555555</mark:voice>
      <mark:fax>+1.7035555556</mark:fax>
      <mark:email>jdoe@example.tld</mark:email>
    </mark:contact>
  </mark:mark>
</launch:codeMark>]]></artwork>
          </figure>
           
        </section>
      </section>

      <section anchor="mark" title="Mark">
        <t>A &lt;mark:mark&gt; element describes an applicant's prior right
        to a given domain name that is used with the "mark", "mark with code", and 
        the "signed mark" validation models.</t>

        <t>The child elements of the &lt;mark:mark&gt; element include:</t>
        <t><list style="hanging">
            <t hangText="&lt;mark:id&gt;:">an identifier for the mark. This
            identifier MUST be unique among all marks associated with an
            application object.</t>

            <t hangText="&lt;mark:name&gt;:">The registered trademark text string.  This 
            value is free-form text that MAY be mapped to one or more &lt;mark:label&gt; values.</t>
            
            <t hangText="&lt;mark:label&gt;:">Zero or more domain name labels that corresponds 
            to the &lt;mark:name&gt;.  Each &lt;mark:label&gt; can match 
            directly to the domain name after adding the parent zone.</t>            

            <t hangText="&lt;mark:issuer&gt;:">name of the authority which issued
            the right (trademark clearinghouse, trademark office, company registration bureau, etc.)</t>

            <t hangText="&lt;mark:number&gt;:">the registration number of the right
            (trademark number, company registration number, etc.)</t>
            
            <t hangText="&lt;mark:type&gt;:">indicates the applicant's entitlement to the mark 
            (owner, licensee, etc.)</t>

            <t hangText="&lt;mark:class&gt;:">zero or more Nice Classification class numbers as defined in the 
            <eref target="http://www.wipo.int/classifications/nivilo/nice/index.htm">Nice List of Classes</eref></t>

            <t hangText="&lt;mark:entitlement&gt;:">indicates the applicant's
            entitlement to the mark (owner, licensee, etc.)</t>

            <t hangText="&lt;mark:regDate&gt;:">the date of registration / application of the
            mark</t>

            <t hangText="&lt;mark:effectiveDate&gt;:">the date the
            mark becomes effective</t>

            <t hangText="&lt;mark:exDate&gt;:">the date of expiration of the
            mark</t>

            <t hangText="&lt;mark:country&gt;:">indicates the country in which the
              mark is valid. This may be a two-character code from <xref target="WIPO.ST3" /></t>

            <t hangText="&lt;mark:region&gt;:">indicates the name of a city, state,
            province or other geographic region in which the mark is valid.</t>

            <t hangText="&lt;mark:owner&gt;:">Owner information using the <xref target="contact">Contact</xref> 
            elements.</t>

            <t hangText="&lt;mark:contact&gt;:">Contact for the owner using the 
            <xref target="contact">Contact</xref> element.</t>
          </list></t>
          <t>All of the child elements are OPTIONAL. Server policy may 
          place additional constraints on the format and requirements of such elements.</t>
      </section>
      
      <section anchor="contact" title="Contact">
        <t>The contact information contained within the <xref target="mark">Mark</xref> cannot 
        be defined via a contact identifier as defined in the <xref target="RFC5733">EPP contact mapping</xref> since 
        it is contact information defined outside of the server.  Some of the contact elements defined in 
        <xref target="RFC5733">EPP contact mapping</xref> are replicated in this extension.</t>  

        <t>The child elements of a contact using either the &lt;mark:owner&gt; or 
        &lt;mark:contact&gt; elements include:
        <list hangIndent="4" style="hanging">
            <t hangText="&lt;mark:name&gt;:">name of the individual or role represented by the contact.</t>

            <t hangText="&lt;mark:org&gt;:">name of the organization with which the contact is affiliated.</t>

            <t hangText="&lt;mark:addr&gt;:">address information associated with the contact.  the &lt;mark:addr&gt; element contains 
            the following child elements:</t>

              <t><list hangIndent="4" style="hanging">
                  <t hangText="&lt;mark:street&gt;">zero to three &lt;mark:street&gt; elements that contain 
                  the contact's street address.</t>

                  <t hangText="&lt;mark:city&gt;">contact's city</t>

                  <t hangText="&lt;mark:sp&gt;">contact's state or province</t>

                  <t hangText="&lt;mark:cc&gt;">contact's country code</t>
                </list></t>


            <t hangText="&lt;mark:voice&gt;:">contact's voice telephone number</t>

            <t hangText="&lt;mark:fax&gt;:">contact's facsimile telephone number</t>

            <t hangText="&lt;mark:email&gt;:">contact's email address</t>

          </list></t>
          <t>All of the child elements are OPTIONAL.  Server policy may place additional constraints
        on the format and requirements of such elements.</t>
      </section>
      
      <section anchor="digitalsignature" title="Digital Signature">
        <t>Digital signatures MAY be used by the server to validate either 
        the mark information, when using the "signed mark" validation model with the 
        &lt;smd:signedMark&gt; element or the &lt;smd:encodedSignedMark&gt; element.  
        The digital signatures are   
        handled using an <eref target="http://www.w3.org/TR/xmldsig-core/">XML
            Signature</eref> around the entire &lt;smd:signedMark&gt; 
            element.  The &lt;smd:encodedSignedMark&gt; element includes an 
            encoded form of the &lt;smd:signedMark&gt; element like the use of "base64" encoding.
            Once the digital signature 
         is validated using the appropriate public key, the server can trust 
         all of the information included in the &lt;smd:signedMark&gt; 
         element.  It's up to server policy how 
         the public key is transferred.</t>  
         <t>To have the digital signature cover all of the elements of the 
         &lt;smd:signedMark&gt; element, 
         the <eref target="http://www.w3.org/TR/xmldsig-core/">XML
            Signature</eref> IDREF URI is set to the "id" attribute value of the 
            &lt;smd:signedMark&gt; element and the 
            Transform "http://www.w3.org/2000/09/xmldsig#enveloped-signature" is 
            used.  The digital signature covers the &lt;smd:signedMark&gt; element 
            and the Signature 
            element is embedded in the &lt;smd:signedMark&gt; element.
        </t>
     <section anchor="signedMark" title="&lt;smd:signedMark&gt; element">
        <t>The &lt;smd:signedMark&gt; is the fragment of XML that is digitally 
        signed using <eref target="http://www.w3.org/TR/xmldsig-core/">XML
            Signature</eref>.  The &lt;smd:signedMark&gt; includes a required "id" 
            attribute of type XSD ID for 
            use with an IDREF URI from the Signature element.  
            The child elements of the &lt;smd:signedMark&gt; element include:</t>
        <t><list style="hanging">
            <t hangText="&lt;smd:serial&gt;:">Signature serial number that 
            that can be compared with a revocation list by the server.</t>

           <t hangText="&lt;smd:exDate&gt;:">OPTIONAL date and time that the 
            &lt;smd:signedMark&gt; expires.  The server MUST NOT accept 
            a &lt;smd:signedMark&gt; that has expired.  No &lt;smd:exDate&gt; 
            element indicates that there is no expiry.</t>            

            <t hangText="&lt;mark:mark&gt;:">Trademark information as defined in the  
            <xref target="mark">Mark</xref> section.</t>

            <t hangText="&lt;Signature&gt;:">
            <eref target="http://www.w3.org/TR/xmldsig-core/">XML
            Signature</eref> for the &lt;smd:signedMark&gt;.  Use of 
            a namespace prefix, like "dsig", is recommended for the "http://www.w3.org/TR/xmldsig-core/" 
            elements.</t>  

          </list></t>
          
          <figure>
            <preamble>The following is an example &lt;smd:signedMark&gt;
            using the <eref target="http://www.w3.org/TR/xmldsig-core/">XML
            Signature</eref> to sign all of the elements of 
            &lt;smd:signedMark&gt; element.</preamble>

            <artwork><![CDATA[
 <smd:signedMark id="signedMark"
  xmlns:smd="urn:ietf:params:xml:ns:signedMark-1.0">
  <smd:serial>123456</smd:serial>
  <smd:zone>newtld</smd:zone>
  <smd:exDate>2012-08-16T09:00:00.0Z</smd:exDate>
  <mark:mark
   xmlns:mark="urn:ietf:params:xml:ns:mark-1.0">
    <mark:name>Example One</mark:name>
    <mark:label>example-one</mark:label>
    <mark:label>exampleone</mark:label>
    <mark:issuer>IP Clearinghouse</mark:issuer>
    <mark:number>GE 3933232</mark:number>
    <mark:type>REG-TM-WORD</mark:type>
    <mark:class>1</mark:class>
    <mark:entitlement>owner</mark:entitlement>
    <mark:regDate>2011-09-09</mark:regDate>
    <mark:effectiveDate>2011-10-09</mark:effectiveDate>
    <mark:exDate>2013-09-09</mark:exDate>
    <mark:country>AU</mark:country>
    <mark:region>VIC</mark:region>
    <mark:owner>
     <mark:org>Example Inc.</mark:org>
    </mark:owner>
    <mark:contact>
     <mark:name>John Doe</mark:name>
     <mark:org>Example Inc.</mark:org>
     <mark:addr>
      <mark:street>123 Example Dr.</mark:street>
      <mark:street>Suite 100</mark:street>
      <mark:city>Reston</mark:city>
      <mark:sp>VA</mark:sp>
      <mark:pc>20190</mark:pc>
      <mark:cc>US</mark:cc>
     </mark:addr>
     <mark:voice x="1234">+1.7035555555</mark:voice>
     <mark:fax>+1.7035555556</mark:fax>
     <mark:email>jdoe@example.tld</mark:email>
    </mark:contact>
  </mark:mark>
  <dsig:Signature 
  	xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
    <dsig:SignedInfo>
    <dsig:CanonicalizationMethod 
Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
    <dsig:SignatureMethod 
Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
    <dsig:Reference URI="#signedMark">
      <dsig:Transforms>
        <dsig:Transform 
Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
      </dsig:Transforms>
      <dsig:DigestMethod 
        Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
      <dsig:DigestValue>6651T5s9GZgQOxifdCFmDfSIoUc=</dsig:DigestValue>
    </dsig:Reference>
  </dsig:SignedInfo>
    <dsig:SignatureValue>
Gm7RnEb6jcijKcgmwEmxJ6j1L0vt2wFyXv3oKc9
a4b8nMOKdec8S3tG2hSx/NZa0RFHvx5zMsH/M
jmxzrTBbl5d7W8Qql5VsW4XanSjJ+UgILs9k6XgVtZE2EvffMLBiL4xbCJM48ew
RYRY7lVEzoNms91pmm3U5IlNRNjU/YFqZ1pXhhrhyhPjSi9Uon8FnAJaiBEfHcj
G6815IJV/9RT+MTXri7i0s82CqIS4wDGbGpyZAs7/kDY3A3upqSOwTtrFSCFX1F
+Craec72lBB/dKJHxmoVkbIO5KQhqIOd+E+h2kguE++RHKa4xoBIeyTgWqpWcLu
MoFpM+GxwFcpSA==
     </dsig:SignatureValue>
   </dsig:Signature>
 </smd:signedMark>]]></artwork>
          </figure>

        </section>

     <section anchor="encodedSignedMark" title="&lt;smd:encodedSignedMark&gt; element">
        <t>The &lt;smd:encodedSignedMark&gt; element contains an encoded form of 
        the digitally signed &lt;smd:signedMark&gt; element, described in <xref target="signedMark"/>, 
        with the encoding defined by the "encoding" attribute with the default "encoding" 
        value of "base64".  The "base64" encoded text of the &lt;smd:encodedSignedMark&gt; element 
        MUST conform to <xref target="RFC2045"/>.</t>
         
                   <figure>
            <preamble>The following is an example an &lt;smd:encodedSignedMark&gt;
            element that uses the default "base64" for encoding a &lt;smd:signedMark&gt; element.</preamble>

            <artwork><![CDATA[
       <smd:encodedSignedMark 
        xmlns:smd="urn:ietf:params:xml:ns:signedMark-1.0">
D94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c21kOnN
pZ25lZE1hcmsgeG1sbnM6c21kPSJ1cm46aWV0ZjpwYXJhbXM6eG1sOm5zO
nNpZ25lZE1hcmstMS4wIiBpZD0ic2lnbmVkTWFyayI-PHNtZDpzZXJpYWw
-MTIzNDU2PC9zbWQ6c2VyaWFsPjxzbWQ6ZXhEYXRlPjIwMTItMTEtMjlUM
Tg6MTY6NTQuMDg4MFo8L3NtZDpleERhdGU-PG1hcms6bWFyayB4bWxuczp
tYXJrPSJ1cm46aWV0ZjpwYXJhbXM6eG1sOm5zOm1hcmstMS4wIj48bWFya
zpuYW1lPkV4YW1wbGUgT25lPC9tYXJrOm5hbWU-PG1hcms6bGFiZWw-ZXh
hbXBsZS1vbmU8L21hcms6bGFiZWw-PG1hcms6bGFiZWw-ZXhhbXBsZW9uZ
TwvbWFyazpsYWJlbD48bWFyazppc3N1ZXI-SVAgQ2xlYXJpbmdob3VzZTw
vbWFyazppc3N1ZXI-PG1hcms6bnVtYmVyPkdFIDM5MzMyMzI8L21hcms6b
nVtYmVyPjxtYXJrOm51bWJlcj5vd25lcjwvbWFyazpudW1iZXI-PG1hcms
6cmVnRGF0ZT4yMDEyLTExLTI5VDE4OjE2OjU0LjA3NDZaPC9tYXJrOnJlZ
0RhdGU-PG1hcms6ZXhEYXRlPjIwMTItMTEtMjlUMTg6MTY6NTQuMDc0Nlo
8L21hcms6ZXhEYXRlPjxtYXJrOmNvdW50cnk-QVU8L21hcms6Y291bnRye
T48bWFyazpyZWdpb24-VklDPC9tYXJrOnJlZ2lvbj48L21hcms6bWFyaz4
8ZHNpZzpTaWduYXR1cmUgeG1sbnM6ZHNpZz0iaHR0cDovL3d3dy53My5vc
mcvMjAwMC8wOS94bWxkc2lnIyI-PGRzaWc6U2lnbmVkSW5mbz48ZHNpZzp
DYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3d
y53My5vcmcvVFIvMjAwMS9SRUMteG1sLWMxNG4tMjAwMTAzMTUjV2l0aEN
vbW1lbnRzIi8-PGRzaWc6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0ia
HR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8
-PGRzaWc6UmVmZXJlbmNlIFVSST0iI3NpZ25lZE1hcmsiPjxkc2lnOlRyY
W5zZm9ybXM-PGRzaWc6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d
3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1c
mUiLz48L2RzaWc6VHJhbnNmb3Jtcz48ZHNpZzpEaWdlc3RNZXRob2QgQWx
nb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc
2hhMSIvPjxkc2lnOkRpZ2VzdFZhbHVlPktIdVFrdFdUMnRYbXg4Y2ZWd2N
vZ0JSUm5oRT08L2RzaWc6RGlnZXN0VmFsdWU-PC9kc2lnOlJlZmVyZW5jZ
T48L2RzaWc6U2lnbmVkSW5mbz48ZHNpZzpTaWduYXR1cmVWYWx1ZT5RdWk
2d2xLVUlRcHMxS2N6ajhUaTVuNTBjaTVDc2pML2k2YjBwS0Z2NG16ZENhc
WpWcXVvVDFiSzJCZnhKNG0rbXJiOWxLeFlrVnNFCnB4QnloSG5KSHpSMXV
1MG1NMmt4VURyWkVCc0dpV3FuaHMzQVBxOTJBcVdGZHZnUmV6ZHcycmNVb
Vg3dGJyeWNGM3ZDMEJmRUg4RHoKb2FIUFRQb24xTUxObzF5bGtYTDA5bWJ
qTHVhRlJSS3Z2UCs4djQ1VFJXRmkrbVJ0akJvMGg4blFiNTNtR2lKaU1Oe
kFDaDBtK3pFeAp2bmxEUmRpdWJFZVVWbG9LV2dMY1BiSkd4QmFWL1gvQjQ
vRnVRbXEzclcxaXNZOUlEYzA3U3ZheEZ0a1l4emVra25GQkNCSWNibXFTC
nlOckMvOEp4Y2RRSHN0TUZWc1Z2SjdWUFJqS2VZM0RLcUwrTGhRPT08L2R
zaWc6U2lnbmF0dXJlVmFsdWU-PC9kc2lnOlNpZ25hdHVyZT48L3NtZDpza
WduZWRNYXJrPg
       </smd:encodedSignedMark>
]]></artwork>
          </figure>

        </section>


      </section>
      
    </section>

    <section anchor="commands" title="EPP Command Mapping">
      <t>A detailed description of the EPP syntax and semantics can be found
      in the EPP core protocol specification <xref target="RFC5730"/>. The
      command mappings described here are specifically for use in the Launch
      Phase Extension.</t>

      <t>This mapping is designed to be flexible, requiring only a minimum set
      of required elements.</t>

      <t>While it is meant to serve several use cases, it does not prescribe
      any interpretation by the client or server. Such processing is typically
      highly policy-dependent and therefore specific to implementations.</t>

      <t>Operations on application objects are done via one or more of the
      existing EPP verbs defined in the <xref target="RFC5731">EPP domain name
      mapping</xref>. Registries may choose to support a subset of the
      operations.</t>

      <section anchor="checkCommand" title="EPP &lt;check&gt; Command">
        <t>This extension defines additional elements to extend the EPP
        &lt;check&gt; command and response to be used in conjunction with the
        <xref target="RFC5731">EPP domain name mapping</xref>.</t>
        
        <t>This extension defines a new command called the Claims Check Command 
        that is used to determine whether or not there are any matching 
        trademarks, in the specified launch phase, for each domain name passed in the command.  
        The availability check information defined in the <xref target="RFC5731">EPP domain name
      mapping</xref> MUST NOT be returned for the Claims Check Command.  
        Instead of 
        returning whether the domain name is available the Claims Check Command will return whether 
        or not at least one matching trademark exists for the domain name.  
        If there is at least one matching trademark that exists for the 
        domain name a &lt;launch:claimKey&gt; element is returned.  
        The value of that the &lt;launch:claimKey&gt; element can 
        be used with an info service of a third party trademark provider like 
        the Trademark Clearinghouse (TMCH) for getting the information needed 
        to generate the trademark claims notice.  The third party trademark 
        provider should also return a unique notice identifier  
        that can be passed in the &lt;launch:noticeID&gt; element of the extension to the 
        <xref target="createCommand">Create Command</xref>.
        
        The &lt;domain:name&gt; elements in the EPP &lt;check&gt; 
        command of <xref target="RFC5731">EPP domain name mapping</xref> define 
        the domain names to check for matching trademarks.  
        The &lt;launch:check&gt; element contains the following child elements:</t>

          <t><list hangIndent="4" style="hanging">
              <t hangText="&lt;launch:phase&gt;">The phase with the value of
              "claims1" or "claims2" to indicate it as a Claims Check Command.
              The "claims1" Claims Check Command will match the &lt;domain:name&gt;
              against the full list of trademark labels and the "claims2" 
              Claims Check Command will match the &lt;domain:name&gt; against 
              the list of trademark labels that opted into the "claims2" 
              launch phase.</t>
            </list></t>
          <figure>
            <preamble>Example Claims Check Command using the &lt;check&gt;
            domain command and the &lt;launch:check&gt; extension to 
            determine if "example1.tld" and "example2.tld" have any 
            matching trademarks during the "claims1" launch phase.</preamble>

            <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <command>
   <check>
    <domain:check
     xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
      <domain:name>example1.tld</domain:name>
      <domain:name>example2.tld</domain:name>
    </domain:check>
   </check>
   <extension>
    <launch:check
     xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
      <launch:phase>claims1</launch:phase>
    </launch:check>
   </extension>
   <clTRID>ABC-12345</clTRID>
  </command>
</epp>]]></artwork>
          </figure>
          <figure>
            <preamble>Example Claims Check Command using the &lt;check&gt;
            domain command and the &lt;launch:check&gt; extension to 
            determine if "example3.tld" and "example4.tld" have any 
            matching trademarks that opted into the "claims2" launch phase.</preamble>

            <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <command>
   <check>
    <domain:check
     xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
      <domain:name>example3.tld</domain:name>
      <domain:name>example4.tld</domain:name>
    </domain:check>
   </check>
   <extension>
    <launch:check
     xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
      <launch:phase>claims2</launch:phase>
    </launch:check>
   </extension>
   <clTRID>ABC-12345</clTRID>
  </command>
</epp>]]></artwork>
          </figure>

          <t>If the &lt;check&gt; command has been processed successfully, the EPP 
          &lt;resData&gt; element MUST contains a child &lt;launch:chkData&gt; element 
          that identifies the launch namespace.  The &lt;launch:chkData&gt; element 
          contains the following child elements:</t>

          <t><list hangIndent="4" style="hanging">
              <t hangText="&lt;launch:phase&gt;">the phase with a value of
              "claims1" or "claims2" that matches the associated 
              Claims Check Command &lt;launch:phase&gt;.</t>

              <t hangText="&lt;launch:cd&gt;">One or more &lt;launch:cd&gt; 
              elements that contain the following child elements:</t>
              
              <t><list hangIndent="4" style="hanging">
            <t hangText="&lt;launch:name&gt;">Contains the fully 
            qualified name of the queried domain name.  This element 
            MUST contain an "exists" attribute whose value 
            indicates if a matching trademark exists for the domain 
            name.  A value of "1" or "true" means that a matching 
            trademark does exist for the claims launch phase.  
            A value of "0" or "false" means that 
            a matching trademark does not exist.</t>
            <t hangText="&lt;launch:claimKey&gt;">An OPTIONAL claim key 
            that MAY be passed to an info service of a third party 
            trademark provider like the Trademark Clearinghouse (TMCH) 
            for getting the information needed to generate the 
            trademark claims notice.  The &lt;launch:claimKey&gt; is used 
            as the key for the query in place of the domain name 
            to securely query the service without using a well-known 
            value like a domain name.</t>  
              </list></t>

            </list></t>

          <figure>
            <preamble>Example Claims Check Response when no matching trademarks
             are found for the domain name example1.tld and matching 
             trademarks are found for the domain name example2.tld for the 
             "claims1" launch phase.</preamble>

            <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <response>
    <result code="1000">
     <msg>Command completed successfully</msg>
    </result>
    <resData>
     <launch:chkData
      xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
      <launch:phase>claims1</launch:phase>
      <launch:cd>
        <launch:name exists="0">example1.tld</launch:name>
      </launch:cd>
      <launch:cd>
        <launch:name exists="1">example2.tld</launch:name>
        <launch:claimKey>abc123</launch:claimKey>
      </launch:cd>
     </launch:chkData>
    </resData>
    <trID>
     <clTRID>ABC-12345</clTRID>
     <svTRID>54322-XYZ</svTRID>
    </trID>
  </response>
</epp>]]></artwork>
          </figure>
          <figure>
            <preamble>Example Claims Check Response when no matching trademarks
             are found for the domain name example3.tld and matching 
             trademarks are found for the domain name example4.tld for the 
             "claims2" launch phase.</preamble>

            <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <response>
    <result code="1000">
     <msg>Command completed successfully</msg>
    </result>
    <resData>
     <launch:chkData
      xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
      <launch:phase>claims2</launch:phase>
      <launch:cd>
        <launch:name exists="0">example3.tld</launch:name>
      </launch:cd>
      <launch:cd>
        <launch:name exists="1">example4.tld</launch:name>
        <launch:claimKey>abc123</launch:claimKey>
      </launch:cd>
     </launch:chkData>
    </resData>
    <trID>
     <clTRID>ABC-12345</clTRID>
     <svTRID>54322-XYZ</svTRID>
    </trID>
  </response>
</epp> ]]></artwork>
          </figure>
      </section>

      <!-- end CHECK command -->

      <section anchor="infoCommand" title="EPP &lt;info&gt; Command">
        <t>This extension defines additional elements to extend the EPP
        &lt;info&gt; command and response to be used in conjunction with the
        <xref target="RFC5731">EPP domain name mapping</xref>.</t>
        
        <t>The EPP &lt;info&gt; command is used to retrieve information 
        for a launch phase registration or application.  The <xref target="applicationID">Application Identifier</xref> 
        returned in the &lt;launch:creData&gt; element of the <xref target="createCommand">Create Response</xref> 
        is used for retrieving information for a launch application.  A &lt;launch:info&gt; element
        is sent along with the regular &lt;info&gt; domain command. The
        &lt;launch:info&gt; element contains the following child
        elements:</t>
        
          <t><list hangIndent="4" style="hanging">
              <t hangText="&lt;launch:phase&gt;">The phase during which the
              application or registration was submitted or is associated with. 
              Server policy defines the phases that are supported.</t>

              <t hangText="&lt;launch:applicationID&gt;">OPTIONAL application
              identifier of the launch application.</t>
            </list></t>

          <figure>
            <preamble>Example &lt;info&gt; domain command with the
            &lt;launch:info&gt; extension to retrieve information 
            for the sunrise application for example.tld and application 
            identifier "abc123".</preamble>

            <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <command>
   <info>
    <domain:info
     xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
      <domain:name>example.tld</domain:name>
    </domain:info>
   </info>
   <extension>
    <launch:info
     xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
      <launch:phase>sunrise</launch:phase>
      <launch:applicationID>abc123</launch:applicationID>
    </launch:info>
   </extension>
   <clTRID>ABC-12345</clTRID>
  </command>
</epp>]]></artwork>
          </figure>

          <figure>
            <preamble>Example &lt;info&gt; domain command with the
            &lt;launch:info&gt; extension to retrieve information 
            for the sunrise registration for example.tld.</preamble>

            <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <command>
   <info>
    <domain:info
     xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
      <domain:name>example.tld</domain:name>
    </domain:info>
   </info>
   <extension>
    <launch:info
     xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
      <launch:phase>sunrise</launch:phase>
    </launch:info>
   </extension>
   <clTRID>ABC-12345</clTRID>
  </command>
</epp>]]></artwork>
          </figure>


          <t>If the query was successful, the server replies with an
          &lt;launch:infData&gt; element along with the regular EPP
          &lt;resData&gt;. The &lt;launch:infData&gt; contains the following
          child elements:</t>
          <t><list hangIndent="4" style="hanging">
              <t hangText="&lt;launch:phase&gt;">the phase during which the
              application was submitted or is associated with that matches the associated 
              &lt;info&gt; command &lt;launch:phase&gt;.</t>

              <t hangText="&lt;launch:applicationID&gt;">OPTIONAL application
              identifier of the launch application.</t>

              <t hangText="&lt;launch:status&gt;">OPTIONAL status of the launch application
              using one of the supported <xref target="statuses">status
              values</xref>.</t>

              <t hangText="&lt;mark:mark&gt;">zero or more
              &lt;mark:mark&gt; elements.  The &lt;mark:mark&gt;
              child elements are defined in the 
              <xref target="mark">&lt;mark:mark&gt; element</xref> 
              section.</t>
              
            </list></t>

          <figure>
            <preamble>Example &lt;info&gt; domain response using the 
            &lt;launch:infData&gt; extension with the mark
            information.</preamble>

            <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <response>
    <result code="1000">
      <msg>Command completed successfully</msg>
    </result>
    <resData>
      <domain:infData
       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
        <domain:name>example.tld</domain:name>
        <domain:roid>EXAMPLE1-REP</domain:roid>
        <domain:status s="pendingCreate"/>
        <domain:registrant>jd1234</domain:registrant>
        <domain:contact type="admin">sh8013</domain:contact>
        <domain:contact type="tech">sh8013</domain:contact>
        <domain:clID>ClientX</domain:clID>
        <domain:crID>ClientY</domain:crID>
        <domain:crDate>2012-04-03T22:00:00.0Z</domain:crDate>
        <domain:authInfo>
          <domain:pw>2fooBAR</domain:pw>
        </domain:authInfo>
      </domain:infData>
    </resData>
    <extension>
      <launch:infData
       xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
        <launch:phase>sunrise</launch:phase>
          <launch:applicationID>abc123</launch:applicationID>
          <launch:status s="pending"/>
          <mark:mark
            xmlns:mark="urn:ietf:params:xml:ns:mark-1.0">
            <mark:name>Hello</mark:name>
            <mark:issuer>IP Clearinghouse</mark:issuer>
            <mark:number>GE 3933232</mark:number>
            <mark:type>REG-TM-WORD</mark:type>
            <mark:class>1</mark:class>
            <mark:entitlement>owner</mark:entitlement>
            <mark:regDate>2011-09-09</mark:regDate>
            <mark:effectiveDate>2011-10-09</mark:effectiveDate>
            <mark:exDate>2013-09-09</mark:exDate>
            <mark:country>AU</mark:country>
            <mark:region>VIC</mark:region>
            <mark:owner>
              <mark:org>Example Inc.</mark:org>
            </mark:owner>
            <mark:contact>
              <mark:name>John Doe</mark:name>
              <mark:org>Example Inc.</mark:org>
              <mark:addr>
                <mark:street>123 Example Dr.</mark:street>
                <mark:street>Suite 100</mark:street>
                <mark:city>Reston</mark:city>
                <mark:sp>VA</mark:sp>
                <mark:pc>20190</mark:pc>
                <mark:cc>US</mark:cc>
              </mark:addr>
              <mark:voice x="1234">+1.7035555555</mark:voice>
              <mark:fax>+1.7035555556</mark:fax>
              <mark:email>jdoe@example.tld</mark:email>
            </mark:contact>
         </mark:mark>
      </launch:infData>
    </extension>
    <trID>
      <clTRID>ABC-12345</clTRID>
      <svTRID>54322-XYZ</svTRID>
    </trID>
  </response>
</epp>]]></artwork>
          </figure>


      </section>
      <!-- end INFO command -->

      <section anchor="createCommand" title="EPP &lt;create&gt; Command">
        <t>There are two forms of the extension to the EPP &lt;create&gt;
        command that are dependent on the supported <xref
        target="phases">launch phases</xref> as defined below:</t>

        <t><list style="hanging">
            <t hangText="sunrise">The EPP &lt;create&gt; command with the
            "sunrise" launch phase is used to submit an registration with trademark
            information that can be verified by the server with the
            &lt;domain:name&gt; value. The <xref target="sunriseCreateForm">
            Sunrise Create Form</xref> is used for the "sunrise" launch phase.
            Optionally, the server can support multiple overlapping
            applications that are chosen asynchronously with a server
            generated <xref target="applicationID">Application
            Identifier</xref> for later reference.</t>

            <t hangText="landrush">The EPP &lt;create&gt; command with the
            "landrush" launch phase is undefined but the form supported is up to
            server policy.</t>

            <t hangText="claims1">The EPP &lt;create&gt; command with the
            "claims1" launch phase is used to pass the information associated 
            with the presentation and acceptance of the "claims1" claims notice.  The 
            <xref target="claimsCreateForm">Claims Create Form</xref> is used 
            for the "claims1" launch phase.</t>

            <t hangText="claims2">The EPP &lt;create&gt; command with the
            "claims2" launch phase is used to pass the information associated 
            with the presentation of the "claims1" claims notice.  The 
            <xref target="claimsCreateForm">Claims Create Form</xref> is used 
            for the "claims2" launch phase.</t>

            <t hangText="open">The EPP &lt;create&gt; command with the "open"
            launch phase is undefined but the form supported is up to server
            policy.</t>

            <t hangText="custom">The EPP &lt;create&gt; command with the
            "custom" launch phase is undefined but the form supported is up to server
            policy.</t>
          </list></t>

        <section anchor="sunriseCreateForm" title="Sunrise Create Form">
          <t>The Sunrise Create Form of the extension to the <xref
          target="RFC5731">EPP domain name mapping</xref> includes the
          verifiable trademark information that the server uses to match
          against the domain name to authorize the domain create. A server
          MUST support one of four models in <xref
          target="validationModels">Claim Validation Models</xref> to 
          verify the trademark information passed by the client.</t>

          <t>A &lt;launch:create&gt; element is sent along with the regular
          &lt;create&gt; domain command. The &lt;launch:create&gt; element
          contains the following child elements:</t>

          <t><list hangIndent="4" style="hanging">
              <t hangText="&lt;launch:phase&gt;">The launch phase for the 
              create like the "sunrise" launch phase.</t>

              <t
              hangText="&lt;launch:codeMark&gt; or &lt;smd:signedMark&gt; or &lt;smd:encodedSignedMark&gt;">
                  <list hangIndent="4" style="hanging">

              <t hangText="&lt;launch:codeMark&gt;">zero or more
              &lt;launch:codeMark&gt; elements.  The &lt;launch:codeMark&gt;
              child elements are defined in the 
              <xref target="codeMark">&lt;launch:codeMark&gt; element</xref> 
              section.</t>

              <t hangText="&lt;smd:signedMark&gt;">zero or more
              &lt;smd:signedMark&gt; elements.  The &lt;smd:signedMark&gt; 
              child elements are defined in 
              the <xref target="signedMark">&lt;smd:signedMark&gt; element</xref> 
              section.</t>

             <t hangText="&lt;smd:encodedSignedMark&gt;">zero or more
              &lt;smd:encodedSignedMark&gt; elements.  The &lt;smd:encodedSignedMark&gt; 
              child elements are defined in 
              the <xref target="encodedSignedMark">&lt;smd:encodedSignedMark&gt; element</xref> 
              section.</t>
              
              </list></t>
            </list></t>


          <figure>
            <preamble>Following is an example &lt;create&gt; domain command
            using the &lt;launch:create&gt; extension, following the "code" 
            validation model, with multiple sunrise codes.</preamble>

            <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <command>
    <create>
      <domain:create
       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
        <domain:name>example.tld</domain:name>
        <domain:registrant>jd1234</domain:registrant>
        <domain:contact type="admin">sh8013</domain:contact>
        <domain:contact type="tech">sh8013</domain:contact>
        <domain:authInfo>
          <domain:pw>2fooBAR</domain:pw>
        </domain:authInfo>
      </domain:create>
    </create>
    <extension>
      <launch:create
       xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
        <launch:phase>sunrise</launch:phase>
        <launch:codeMark>
          <launch:code>49FD46E6C4B45C55D4AC</launch:code>
        </launch:codeMark>
        <launch:codeMark>
          <launch:code>49FD46E6C4B45C55D4AD</launch:code>
        </launch:codeMark>
        <launch:codeMark>
          <launch:code>49FD46E6C4B45C55D4AE</launch:code>
        </launch:codeMark>
     </launch:create>
    </extension>
    <clTRID>ABC-12345</clTRID>
  </command>
</epp>]]></artwork>
          </figure>


          <figure>
            <preamble>Following is an example &lt;create&gt; domain command
            using the &lt;launch:create&gt; extension, following the "mark" 
            validation model, with the mark information.</preamble>

            <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <command>
    <create>
      <domain:create
       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
        <domain:name>exampleone.tld</domain:name>
        <domain:registrant>jd1234</domain:registrant>
        <domain:contact type="admin">sh8013</domain:contact>
        <domain:contact type="tech">sh8013</domain:contact>
        <domain:authInfo>
          <domain:pw>2fooBAR</domain:pw>
        </domain:authInfo>
      </domain:create>
    </create>
    <extension>
      <launch:create
       xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
        <launch:phase>sunrise</launch:phase>
        <launch:codeMark>
          <mark:mark
            xmlns:mark="urn:ietf:params:xml:ns:mark-1.0">
            <mark:name>Example One</mark:name>
            <mark:label>example-one</mark:label>
            <mark:label>exampleone</mark:label>
            <mark:issuer>IP Clearinghouse</mark:issuer>
            <mark:number>GE 3933232</mark:number>
            <mark:type>REG-TM-WORD</mark:type>
            <mark:class>1</mark:class>
            <mark:entitlement>owner</mark:entitlement>
            <mark:regDate>2011-09-09</mark:regDate>
            <mark:effectiveDate>2011-10-09</mark:effectiveDate>
            <mark:exDate>2013-09-09</mark:exDate>
            <mark:country>AU</mark:country>
            <mark:region>VIC</mark:region>
            <mark:owner>
              <mark:org>Example Inc.</mark:org>
            </mark:owner>
            <mark:contact>
              <mark:name>John Doe</mark:name>
              <mark:org>Example Inc.</mark:org>
              <mark:addr>
                <mark:street>123 Example Dr.</mark:street>
                <mark:street>Suite 100</mark:street>
                <mark:city>Reston</mark:city>
                <mark:sp>VA</mark:sp>
                <mark:pc>20190</mark:pc>
                <mark:cc>US</mark:cc>
              </mark:addr>
              <mark:voice x="1234">+1.7035555555</mark:voice>
              <mark:fax>+1.7035555556</mark:fax>
              <mark:email>jdoe@example.tld</mark:email>
            </mark:contact>
          </mark:mark>
        </launch:codeMark>
      </launch:create>
    </extension>
    <clTRID>ABC-12345</clTRID>
  </command>
</epp>]]></artwork>
          </figure>



          <figure>
            <preamble>Following is an example &lt;create&gt; domain command
            using the &lt;launch:create&gt; extension, following the "code with mark" 
            validation model, with a code and mark information.</preamble>

            <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <command>
    <create>
      <domain:create
       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
        <domain:name>example.tld</domain:name>
        <domain:registrant>jd1234</domain:registrant>
        <domain:contact type="admin">sh8013</domain:contact>
        <domain:contact type="tech">sh8013</domain:contact>
        <domain:authInfo>
          <domain:pw>2fooBAR</domain:pw>
        </domain:authInfo>
      </domain:create>
    </create>
    <extension>
      <launch:create
       xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
        <launch:phase>sunrise</launch:phase>
        <launch:codeMark>
          <launch:code>49FD46E6C4B45C55D4AC</launch:code>
          <mark:mark
           xmlns:mark="urn:ietf:params:xml:ns:mark-1.0">
            <mark:name>Hello</mark:name>
            <mark:issuer>IP Clearinghouse</mark:issuer>
            <mark:number>GE 3933232</mark:number>
            <mark:type>REG-TM-WORD</mark:type>
            <mark:class>1</mark:class>
            <mark:entitlement>owner</mark:entitlement>
            <mark:regDate>2011-09-09</mark:regDate>
            <mark:effectiveDate>2011-10-09</mark:effectiveDate>
            <mark:exDate>2013-09-09</mark:exDate>
            <mark:country>AU</mark:country>
            <mark:region>VIC</mark:region>
            <mark:owner>
              <mark:org>Example Inc.</mark:org>
            </mark:owner>
            <mark:contact>
              <mark:name>John Doe</mark:name>
              <mark:org>Example Inc.</mark:org>
              <mark:addr>
                <mark:street>123 Example Dr.</mark:street>
                <mark:street>Suite 100</mark:street>
                <mark:city>Reston</mark:city>
                <mark:sp>VA</mark:sp>
                <mark:pc>20190</mark:pc>
                <mark:cc>US</mark:cc>
              </mark:addr>
              <mark:voice x="1234">+1.7035555555</mark:voice>
              <mark:fax>+1.7035555556</mark:fax>
              <mark:email>jdoe@example.tld</mark:email>
            </mark:contact>
          </mark:mark>
        </launch:codeMark>
      </launch:create>
    </extension>
    <clTRID>ABC-12345</clTRID>
  </command>
</epp>]]></artwork>
          </figure>

          <figure>
            <preamble>Following is an example &lt;create&gt; domain command
            using the &lt;launch:create&gt; extension, following the "signed mark" 
            validation model, with the signed mark information.</preamble>

            <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <command>
    <create>
      <domain:create
       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
        <domain:name>exampleone.tld</domain:name>
        <domain:registrant>jd1234</domain:registrant>
        <domain:contact type="admin">sh8013</domain:contact>
        <domain:contact type="tech">sh8013</domain:contact>
        <domain:authInfo>
          <domain:pw>2fooBAR</domain:pw>
        </domain:authInfo>
      </domain:create>
    </create>
    <extension>
      <launch:create
       xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
        <launch:phase>sunrise</launch:phase>
        <smd:signedMark id="signedMark"
         xmlns:smd="urn:ietf:params:xml:ns:signedMark-1.0">
          <smd:serial>123456</smd:serial>
          <smd:exDate>2012-08-16T09:00:00.0Z</smd:exDate>
          <mark:mark
            xmlns:mark="urn:ietf:params:xml:ns:mark-1.0">
            <mark:name>Example One</mark:name>
            <mark:label>example-one</mark:label>
            <mark:label>exampleone</mark:label>
            <mark:issuer>IP Clearinghouse</mark:issuer>
            <mark:number>GE 3933232</mark:number>
            <mark:type>REG-TM-WORD</mark:type>
            <mark:class>1</mark:class>
            <mark:entitlement>owner</mark:entitlement>
            <mark:regDate>2011-09-09</mark:regDate>
            <mark:effectiveDate>2011-10-09</mark:effectiveDate>
            <mark:exDate>2013-09-09</mark:exDate>
            <mark:country>AU</mark:country>
            <mark:region>VIC</mark:region>
            <mark:owner>
              <mark:org>Example Inc.</mark:org>
            </mark:owner>
            <mark:contact>
              <mark:name>John Doe</mark:name>
              <mark:org>Example Inc.</mark:org>
              <mark:addr>
                <mark:street>123 Example Dr.</mark:street>
                <mark:street>Suite 100</mark:street>
                <mark:city>Reston</mark:city>
                <mark:sp>VA</mark:sp>
                <mark:pc>20190</mark:pc>
                <mark:cc>US</mark:cc>
              </mark:addr>
              <mark:voice x="1234">+1.7035555555</mark:voice>
              <mark:fax>+1.7035555556</mark:fax>
              <mark:email>jdoe@example.tld</mark:email>
            </mark:contact>
          </mark:mark>
          <dsig:Signature 
          xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
            <dsig:SignedInfo>
            <dsig:CanonicalizationMethod 
 Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
            <dsig:SignatureMethod 
 Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
            <dsig:Reference URI="#signedMark">
                <dsig:Transforms>
                  <dsig:Transform 
 Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
                </dsig:Transforms>
                <dsig:DigestMethod 
 Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
                <dsig:DigestValue>6651T5s9GZgQOxifdCFmDfSIoUc=
                </dsig:DigestValue>
            </dsig:Reference>
          </dsig:SignedInfo>
            <dsig:SignatureValue>
Gm7RnEb6jcijKcgmwEmxJ6j1L0vt2wFyXv3oKc9a4b8nMOKdec8S3tG2hSx
/NZa0RFHvx5zMsH/MjmxzrTBbl5d7W8Qql5VsW4XanSjJ+UgILs9k6XgVtZ
E2EvffMLBiL4xbCJM48ewRYRY7lVEzoNms91pmm3U5IlNRNjU/YFqZ1pXhh
rhyhPjSi9Uon8FnAJaiBEfHcjG6815IJV/9RT+MTXri7i0s82CqIS4wDGbG
pyZAs7/kDY3A3upqSOwTtrFSCFX1F+Craec72lBB/dKJHxmoVkbIO5KQhqI
Od+E+h2kguE++RHKa4xoBIeyTgWqpWcLuMoFpM+GxwFcpSA==
</dsig:SignatureValue>
            </dsig:Signature>
        </smd:signedMark>
      </launch:create>
    </extension>
    <clTRID>ABC-12345</clTRID>
  </command>
</epp>]]></artwork>
          </figure>


          <figure>
            <preamble>Following is an example &lt;create&gt; domain command
            using the &lt;launch:create&gt; extension, following the "signed mark" 
            validation model, with the base64 encoded signed mark information.</preamble>

            <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <command>
    <create>
      <domain:create
       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
        <domain:name>exampleone.tld</domain:name>
        <domain:registrant>jd1234</domain:registrant>
        <domain:contact type="admin">sh8013</domain:contact>
        <domain:contact type="tech">sh8013</domain:contact>
        <domain:authInfo>
          <domain:pw>2fooBAR</domain:pw>
        </domain:authInfo>
      </domain:create>
    </create>
    <extension>
      <launch:create
       xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
        <launch:phase>sunrise</launch:phase>
        <smd:encodedSignedMark 
         xmlns:smd="urn:ietf:params:xml:ns:signedMark-1.0">
D94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c21kOnNpZ25
lZE1hcmsgeG1sbnM6c21kPSJ1cm46aWV0ZjpwYXJhbXM6eG1sOm5zOnNpZ25lZ
E1hcmstMS4wIiBpZD0ic2lnbmVkTWFyayI-PHNtZDpzZXJpYWw-MTIzNDU2PC9
zbWQ6c2VyaWFsPjxzbWQ6ZXhEYXRlPjIwMTItMTEtMjlUMTg6MTY6NTQuMDg4M
Fo8L3NtZDpleERhdGU-PG1hcms6bWFyayB4bWxuczptYXJrPSJ1cm46aWV0Zjp
wYXJhbXM6eG1sOm5zOm1hcmstMS4wIj48bWFyazpuYW1lPkV4YW1wbGUgT25lP
C9tYXJrOm5hbWU-PG1hcms6bGFiZWw-ZXhhbXBsZS1vbmU8L21hcms6bGFiZWw
-PG1hcms6bGFiZWw-ZXhhbXBsZW9uZTwvbWFyazpsYWJlbD48bWFyazppc3N1Z
XI-SVAgQ2xlYXJpbmdob3VzZTwvbWFyazppc3N1ZXI-PG1hcms6bnVtYmVyPkd
FIDM5MzMyMzI8L21hcms6bnVtYmVyPjxtYXJrOm51bWJlcj5vd25lcjwvbWFya
zpudW1iZXI-PG1hcms6cmVnRGF0ZT4yMDEyLTExLTI5VDE4OjE2OjU0LjA3NDZ
aPC9tYXJrOnJlZ0RhdGU-PG1hcms6ZXhEYXRlPjIwMTItMTEtMjlUMTg6MTY6N
TQuMDc0Nlo8L21hcms6ZXhEYXRlPjxtYXJrOmNvdW50cnk-QVU8L21hcms6Y29
1bnRyeT48bWFyazpyZWdpb24-VklDPC9tYXJrOnJlZ2lvbj48L21hcms6bWFya
z48ZHNpZzpTaWduYXR1cmUgeG1sbnM6ZHNpZz0iaHR0cDovL3d3dy53My5vcmc
vMjAwMC8wOS94bWxkc2lnIyI-PGRzaWc6U2lnbmVkSW5mbz48ZHNpZzpDYW5vb
mljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmc
vVFIvMjAwMS9SRUMteG1sLWMxNG4tMjAwMTAzMTUjV2l0aENvbW1lbnRzIi8-P
GRzaWc6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5
vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8-PGRzaWc6UmVmZXJlbmNlI
FVSST0iI3NpZ25lZE1hcmsiPjxkc2lnOlRyYW5zZm9ybXM-PGRzaWc6VHJhbnN
mb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc
2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz48L2RzaWc6VHJhbnNmb3Jtcz48ZHN
pZzpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yM
DAwLzA5L3htbGRzaWcjc2hhMSIvPjxkc2lnOkRpZ2VzdFZhbHVlPktIdVFrdFd
UMnRYbXg4Y2ZWd2NvZ0JSUm5oRT08L2RzaWc6RGlnZXN0VmFsdWU-PC9kc2lnO
lJlZmVyZW5jZT48L2RzaWc6U2lnbmVkSW5mbz48ZHNpZzpTaWduYXR1cmVWYWx
1ZT5RdWk2d2xLVUlRcHMxS2N6ajhUaTVuNTBjaTVDc2pML2k2YjBwS0Z2NG16Z
ENhcWpWcXVvVDFiSzJCZnhKNG0rbXJiOWxLeFlrVnNFCnB4QnloSG5KSHpSMXV
1MG1NMmt4VURyWkVCc0dpV3FuaHMzQVBxOTJBcVdGZHZnUmV6ZHcycmNVbVg3d
GJyeWNGM3ZDMEJmRUg4RHoKb2FIUFRQb24xTUxObzF5bGtYTDA5bWJqTHVhRlJ
SS3Z2UCs4djQ1VFJXRmkrbVJ0akJvMGg4blFiNTNtR2lKaU1OekFDaDBtK3pFe
Ap2bmxEUmRpdWJFZVVWbG9LV2dMY1BiSkd4QmFWL1gvQjQvRnVRbXEzclcxaXN
ZOUlEYzA3U3ZheEZ0a1l4emVra25GQkNCSWNibXFTCnlOckMvOEp4Y2RRSHN0T
UZWc1Z2SjdWUFJqS2VZM0RLcUwrTGhRPT08L2RzaWc6U2lnbmF0dXJlVmFsdWU
-PC9kc2lnOlNpZ25hdHVyZT48L3NtZDpzaWduZWRNYXJrPg
        </smd:encodedSignedMark>
      </launch:create>
    </extension>
    <clTRID>ABC-12345</clTRID>
  </command>
</epp>]]></artwork>
          </figure>


          <t>If the create was successful, the server MAY reply with the
          &lt;launch:creData&gt; element along with the regular EPP
          &lt;resData&gt; to indicate the server generated <xref
          target="applicationID">Application Identifier</xref> when multiple
          applications of a given domain name is supported; otherwise no
          extension is included with the regular EPP &lt;resData&gt;. The
          &lt;launch:creData&gt; element contains the following child
          elements:</t>
          <t><list hangIndent="4" style="hanging">
              <t hangText="&lt;launch:phase&gt;">The phase of the application
              that mirrors the &lt;launch:phase&gt; element included in the
              &lt;launch:create&gt;.</t>

              <t hangText="&lt;launch:applicationID&gt;">the application
              identifier of the application.</t>
            </list></t>

          <figure>
            <preamble>An example response when multiple overlapping
            applications are supported by the server.</preamble>

            <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <response>
    <result code="1000">
      <msg>Command completed successfully</msg>
    </result>
    <resData>
      <domain:creData
         xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
       <domain:name>example.tld</domain:name>
       <domain:crDate>2010-08-10T15:38:26.623854Z</domain:crDate>
       <domain:exDate>2012-08-10T15:38:26.623854Z</domain:exDate>
      </domain:creData>
    </resData>
    <extension>
      <launch:creData xmlns:lp="urn:ietf:params:xml:ns:launchphase-1.0">
        <launch:phase>sunrise</launch:phase>
        <launch:applicationID>2393-9323-E08C-03B1</launch:applicationID>
      </launch:creData>
    </extension>
    <trID>
      <clTRID>example:epp:239332</clTRID>
      <svTRID>server-8551292e23b</svTRID>
    </trID>
  </response>
</epp>
    ]]></artwork>
          </figure>

          <!-- end example sunrise create cmd -->
        </section>

        <section anchor="claimsCreateForm" title="Claims Create Form">
          <t>The Claims Create Form of the extension to the <xref
          target="RFC5731">EPP domain name mapping</xref> includes the
          information related to the acceptance of the claims notice 
          for the "claims1" launch phase and the display of the claims 
          notice for the "claims2" launch phase.</t>

          <t>A &lt;launch:create&gt; element is sent along with the regular
          &lt;create&gt; domain command. The &lt;launch:create&gt; element
          contains the following child elements:</t>

          <t><list hangIndent="4" style="hanging">
              <t hangText="&lt;launch:phase&gt;">MUST contain the value of
              "claims1" or "claim2" to indicate the claims launch phase.</t>
              <t hangText="&lt;launch:notice&gt;">
              <list hangIndent="4" style="hanging">
            <t hangText="&lt;launch:noticeID&gt;">Unique notice identifier 
          generated by the source of the claims notice information 
          like the Claims Notice Information Service (CNIS).</t>
                <t hangText="&lt;launch:timestamp&gt;">Contains the
              date and time that the claims notice was displayed or accepted.</t>

                <t hangText="&lt;launch:source&gt;">Contains the source 
              information of the client that was displayed or that accepted the 
              claims notice like the client IP address.</t>
              </list></t>
            </list></t>

          <figure>
            <preamble>Following is an example &lt;create&gt; domain command
            using the &lt;launch:create&gt; extension with the 
            &lt;launch:notice&gt; information for the "claims1" claims 
            launch phase.</preamble>

            <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <command>
    <create>
      <domain:create
       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
        <domain:name>example.tld</domain:name>
        <domain:registrant>jd1234</domain:registrant>
        <domain:contact type="admin">sh8013</domain:contact>
        <domain:contact type="tech">sh8013</domain:contact>
        <domain:authInfo>
          <domain:pw>2fooBAR</domain:pw>
        </domain:authInfo>
      </domain:create>
    </create>
    <extension>
      <launch:create
       xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
        <launch:phase>claims1</launch:phase>
        <launch:notice>
          <launch:noticeID>49FD46E6C4B45C55D4AC</launch:noticeID>
          <launch:timestamp>2012-06-19T09:00:00.0Z</launch:timestamp>
          <launch:source>192.0.2.29</launch:source>
        </launch:notice>
      </launch:create>
    </extension>
    <clTRID>ABC-12345</clTRID>
  </command>
</epp>]]></artwork>
          </figure>
          
        <t>This extension does not define any extension to the response of an
        &lt;create&gt; domain command for the Claims Create Form. After processing the command, the
        server replies with a standard EPP response as defined in the EPP
        domain mapping.</t>
          
        </section>
      </section>

      <!-- end CREATE command -->

      <section anchor="updateCommand" title="EPP &lt;update&gt; Command">
        <t>This extension defines additional elements to extend the EPP
        &lt;update&gt; command to be used in conjunction with the domain name
        mapping.</t>

        <t>A server that does not support allow multiple applications of a
        given domain name with a <xref target="applicationID">Application
        Identifier</xref> during its launch phase operations MUST return an
        EPP error result code of 2102.</t>

        <t>Registry policies permitting, clients may update an application
        object by submitting an EPP &lt;update&gt; command along with an
        &lt;launch:update&gt; element to indicate the application object to be
        updated. The &lt;launch:update&gt; element contains the following
        child elements:</t>
        <t><list hangIndent="4" style="hanging">
            <t hangText="&lt;launch:phase&gt;">the phase during which the
            application was submitted or is associated with.</t>

            <t hangText="&lt;launch:applicationID&gt;">the application
            identifier for which the client wishes to update.</t>
          </list></t>

        <t>This extension does not define any extension to the response of an
        &lt;update&gt; domain command. After processing the command, the
        server replies with a standard EPP response as defined in the EPP
        domain mapping.</t>

        <figure>
          <preamble>Following is an example &lt;update&gt; domain command with
          the &lt;launch:update&gt; extension to add and remove a name server
          of a sunrise application with the application identifier
          "abc123".</preamble>

          <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <command>
    <update>
      <domain:update
       xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
        <domain:name>example.tld</domain:name>
        <domain:add>
            <domain:ns>
              <domain:hostObj>ns2.example.tld</domain:hostObj>
            </domain:ns>
          </domain:add>
          <domain:rem>
            <domain:ns>
              <domain:hostObj>ns1.example.tld</domain:hostObj>
            </domain:ns>
          </domain:rem>
      </domain:update>
    </update>
    <extension>
    <launch:update
     xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
      <launch:phase>sunrise</launch:phase>
      <launch:applicationID>abc123</launch:applicationID>
    </launch:update>
    </extension>
    <clTRID>ABC-12345</clTRID>
  </command>
</epp>
]]></artwork>
        </figure>

        <figure>
          <preamble>An example response that corresponds to the above
          command.</preamble>

          <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <response>
    <result code="1000">
      <msg>Command completed successfully</msg>
    </result>
    <trID>
      <clTRID>example:epp:239333</clTRID>
      <svTRID>server-8551292e23c</svTRID>
    </trID>
  </response>
</epp>
    ]]></artwork>
        </figure>

        <!-- example update cmd -->
      </section>
      <!-- end UPDATE command -->

      <section anchor="deleteCommand" title="EPP &lt;delete&gt; Command">
        <t>This extension defines additional elements to extend the EPP
        &lt;delete&gt; command to be used in conjunction with the domain name
        mapping.</t>

        <t>A server that does not support multiple applications of a
        given domain name with a <xref target="applicationID">Application
        Identifier</xref> during its launch phase operations MUST return an
        EPP error result code of 2102.</t>

        <t>Registry policies permitting, clients MAY withdraw an application
        by submitting an EPP &lt;delete&gt; command along with an
        &lt;launch:delete&gt; element to indicate the application object to be
        deleted. The &lt;launch:delete&gt; element contains the following
        child elements:</t>
        <t><list hangIndent="4" style="hanging">
            <t hangText="&lt;launch:phase&gt;">the phase during which the
            application was submitted or is associated with.</t>

            <t hangText="&lt;launch:applicationID&gt;">the application
            identifier for which the client wishes to delete.</t>
          </list></t>

        <t>This extension does not define any extension to the response of an
        &lt;delete&gt; domain command. After processing the command, the
        server replies with a standard EPP response as defined in the EPP
        domain mapping.</t>

        <figure>
          <preamble>Following is an example &lt;delete&gt; domain command with
          the &lt;launch:delete&gt; extension.</preamble>

          <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <command>
   <delete>
    <domain:delete
     xmlns:domain="urn:ietf:params:xml:ns:domain-1.0">
      <domain:name>example.tld</domain:name>
    </domain:delete>
   </delete>
   <extension>
    <launch:delete
     xmlns:launch="urn:ietf:params:xml:ns:launch-1.0">
      <launch:phase>sunrise</launch:phase>
      <launch:applicationID>abc123</launch:applicationID>
    </launch:delete>
   </extension>
   <clTRID>ABC-12345</clTRID>
  </command>
</epp>    
]]></artwork>
        </figure>

        <figure>
          <preamble>An example response that corresponds to the above
          command.</preamble>

          <artwork><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<epp xmlns="urn:ietf:params:xml:ns:epp-1.0">
  <response>
    <result code="1000">
      <msg>Command completed successfully</msg>
    </result>
    <trID>
      <clTRID>example:epp:239334</clTRID>
      <svTRID>server-8551292e23d</svTRID>
    </trID>
  </response>
</epp>
    ]]></artwork>
        </figure>

        <!-- example delete cmd -->
      </section>
      <!-- end DELETE command -->

      <section anchor="renewCommand" title="EPP &lt;renew&gt; Command">
        <t>This extension does not define any extension to the EPP
        &lt;renew&gt; command or response described in the <xref
        target="RFC5731">EPP domain name mapping</xref>.</t>
      </section>
      <!-- end RENEW command -->

      <section anchor="transferCommand" title="EPP &lt;transfer&gt; Command">
        <t>This extension does not define any extension to the EPP
        &lt;transfer&gt; command or response described in the <xref
        target="RFC5731">EPP domain name mapping</xref>.</t>
      </section>
      <!-- end TRANSFER command -->
      
    </section>

    <!-- EPP command mapping -->

    <section anchor="syntax" title="Formal Syntax">
    
      <t>Three schemas are presented here.  The first schema is the EPP Launch 
      Phase Mapping schema.  The second schema is a dependent schema for 
      the Signed Mark.  The third schema is a dependent schema for the Mark.</t>
      
      <t>The formal
      syntax presented here is a complete schema representation of the object
      mapping suitable for automated validation of EPP XML instances. The
      BEGIN and END tags are not part of the schema; they are used to note the
      beginning and ending of the schema for URI registration purposes.</t>

    <section title="Launch Schema">
      <t>Copyright (c) 2012 IETF Trust and the persons identified as authors
      of the code. All rights reserved.</t>

      <t>Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are
      met:</t>

      <t><list style="symbols">
          <t>Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.</t>

          <t>Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the
          distribution.</t>

          <t>Neither the name of Internet Society, IETF or IETF Trust, nor the
          names of specific contributors, may be used to endorse or promote
          products derived from this software without specific prior written
          permission.</t>
        </list></t>

      <t>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
      "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
      PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
      OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
      EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
      PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
      PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
      LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
      SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</t>

      <figure>
        <artwork><![CDATA[
BEGIN
<?xml version="1.0" encoding="UTF-8"?>
<schema 
  targetNamespace="urn:ietf:params:xml:ns:launch-1.0" 
  xmlns:launch="urn:ietf:params:xml:ns:launch-1.0" 
  xmlns:eppcom="urn:ietf:params:xml:ns:eppcom-1.0"
  xmlns:mark="urn:ietf:params:xml:ns:mark-1.0"
  xmlns:smd="urn:ietf:params:xml:ns:signedMark-1.0"
  xmlns="http://www.w3.org/2001/XMLSchema" 
  elementFormDefault="qualified">
  
<!--
Import common element types.
-->
  <import namespace="urn:ietf:params:xml:ns:eppcom-1.0"
          schemaLocation="eppcom-1.0.xsd"/> 
  
  <import namespace="urn:ietf:params:xml:ns:mark-1.0"
          schemaLocation="mark-1.0.xsd"/> 

  <import namespace="urn:ietf:params:xml:ns:signedMark-1.0"
          schemaLocation="signedMark-1.0.xsd"/> 
  
  <annotation>
    <documentation> 
      Extensible Provisioning Protocol v1.0 
      domain name extension schema 
      for the launch phase processing.  
    </documentation>
  </annotation>
  
  <!-- 
  Child elements found in EPP commands.  
  -->
  <element name="check" type="launch:checkType"/>
  <element name="info" type="launch:infoType"/>
  <element name="create" type="launch:createType"/>
  <element name="update" type="launch:idContainerType"/>
  <element name="delete" type="launch:idContainerType"/>
  
  <!-- 
  Common container of id (identifier) element
  -->
  <complexType name="idContainerType">
    <sequence>
      <element name="phase" type="launch:phaseType"/>
      <element name="applicationID" type="token"/>
    </sequence>
  </complexType>
  
  <!-- 
  Definition for application identifier
  -->
  <simpleType name="applicationIDType">
    <restriction base="token"/>
  </simpleType>
  
  <!-- 
  Definition for launch phase.  Name is an optional attribute
  used to extend the phase type.  For example, when 
  using the phase type value of &qt;custom&gt;, the name 
  can be used to specify the custom phase.  
  -->
  <complexType name="phaseType">
    <simpleContent>
      <extension base="launch:phaseTypeValue">
        <attribute name="name" type="token"/>
      </extension>
    </simpleContent>
  </complexType>
  
  <!-- 
  Enumeration of for launch phase values.  
  -->
  <simpleType name="phaseTypeValue">
      <restriction base="token">
        <enumeration value="sunrise"/>
        <enumeration value="landrush"/>
        <enumeration value="claims1"/>
        <enumeration value="claims2"/>
        <enumeration value="open"/>
        <enumeration value="custom"/>
    </restriction>
  </simpleType>
  
  
  <!-- 
  Definition for the sunrise code   
  -->
  <simpleType name="codeType">
    <restriction base="base64Binary">
      <minLength value="1"/>
    </restriction>
  </simpleType>
  
  <!-- 
  Definition for the notice identifier   
  -->
  <simpleType name="noticeIDType">
    <restriction base="base64Binary">
      <minLength value="1"/>
    </restriction>
  </simpleType>
      
  <!-- 
  Possible status values for sunrise application 
  -->
    <simpleType name="statusValueType">
    <restriction base="token">
        <enumeration value="pending"/>
        <enumeration value="validated"/>
        <enumeration value="invalid"/>
        <enumeration value="pendingAuction"/>
        <enumeration value="allocated"/>
        <enumeration value="rejected"/>
        <enumeration value="custom"/>
      </restriction>
    </simpleType>
  
  <!-- 
  Status type definition
  -->
  <complexType name="statusType">
    <simpleContent>
      <extension base="normalizedString">
        <attribute name="s" type="launch:statusValueType" 
          use="required"/>
        <attribute name="lang" type="language" 
          default="en"/>
        <attribute name="name" type="token"/>
      </extension>
    </simpleContent>
  </complexType>
  
  <!--
  codeMark Type that contains an optional code 
  with mark information.
  -->
  <complexType name="codeMarkType">
    <sequence>
    <element name="code" type="launch:codeType"
    	minOccurs="0"/>
    <element ref="mark:mark"
    	minOccurs="0"/>
  </sequence>
  </complexType>
  
  <!-- 
  Child elements for the create command
  -->
  <complexType name="createType">
    <sequence>
      <element name="phase" type="launch:phaseType"/>
      <choice>
        <element name="codeMark" type="launch:codeMarkType"
          maxOccurs="unbounded"/>
        <element ref="smd:signedMark" 
         maxOccurs="unbounded"/>
        <element ref="smd:encodedSignedMark" 
         maxOccurs="unbounded"/>
          <element name="notice" 
          type="launch:createNoticeType"/> 
      </choice>
    </sequence>
  </complexType>
  
  <!-- 
  Child elements of the create notice element. 
  -->
  <complexType name="createNoticeType">
    <sequence>
      <element name="noticeID" type="launch:noticeIDType"/>
      <element name="timestamp" type="dateTime"/>
      <element name="source" type="token"/>
    </sequence>
  </complexType>


  <!-- 
  Child elements of check (Claims Check Command).  
  -->
  <complexType name="checkType">
    <sequence>
      <element name="phase" type="launch:phaseType"/>
    </sequence>
  </complexType>


  <!-- 
  Child elements of info command.  
  -->
  <complexType name="infoType">
    <sequence>
      <element name="phase" type="launch:phaseType"/>
      <element name="applicationID" 
        type="launch:applicationIDType" 
        minOccurs="0"/>
    </sequence>
  </complexType>

  <!-- 
  Child response elements.  
  -->
  <element name="chkData" type="launch:chkDataType"/>    
  <element name="creData" type="launch:idContainerType"/>
  <element name="infData" type="launch:infDataType"/>
  
  <!--
   <check> response elements.
   -->
  <complexType name="chkDataType">
    <sequence>
      <element name="phase" type="launch:phaseType"/>
      <element name="cd" type="launch:cdType"
       maxOccurs="unbounded"/>
    </sequence>
  </complexType>

  <complexType name="cdType">
    <sequence>
      <element name="name" type="launch:cdNameType"/>
      <element name="claimKey" type="token"
       minOccurs="0"/>
    </sequence>
  </complexType>

  <complexType name="cdNameType">
    <simpleContent>
      <extension base="eppcom:labelType">
        <attribute name="exists" type="boolean"
         use="required"/>
      </extension>
    </simpleContent>
  </complexType>
  
  <!--
  <info> response elemenets
  -->
  <complexType name="infDataType">
    <sequence>
      <element name="phase" type="launch:phaseType"/>
     <element name="applicationID" 
      type="launch:applicationIDType" 
      minOccurs="0"/>
     <element name="status" type="launch:statusType" 
      minOccurs="0"/>
      <element ref="mark:mark"
      minOccurs="0" maxOccurs="unbounded"/>
    </sequence>
  </complexType>
    
</schema>
END]]></artwork>
      </figure>
      </section>
      
      <section title="Signed Mark Schema">
      <t>Copyright (c) 2012 IETF Trust and the persons identified as authors
      of the code. All rights reserved.</t>

      <t>Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are
      met:</t>

      <t><list style="symbols">
          <t>Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.</t>

          <t>Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the
          distribution.</t>

          <t>Neither the name of Internet Society, IETF or IETF Trust, nor the
          names of specific contributors, may be used to endorse or promote
          products derived from this software without specific prior written
          permission.</t>
        </list></t>

      <t>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
      "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
      PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
      OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
      EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
      PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
      PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
      LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
      SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</t>

      <figure>
        <artwork><![CDATA[
BEGIN
<?xml version="1.0" encoding="UTF-8"?>
<schema 
  targetNamespace="urn:ietf:params:xml:ns:signedMark-1.0" 
  xmlns:smd="urn:ietf:params:xml:ns:signedMark-1.0" 
  xmlns:mark="urn:ietf:params:xml:ns:mark-1.0" 
  xmlns:dsig="http://www.w3.org/2000/09/xmldsig#"
  xmlns="http://www.w3.org/2001/XMLSchema" 
  elementFormDefault="qualified">
  
<!--
Import common element types.
--> 
  <import namespace="http://www.w3.org/2000/09/xmldsig#"
          schemaLocation="xmldig-core-schema.xsd"/> 
          
  <import namespace="urn:ietf:params:xml:ns:mark-1.0"
          schemaLocation="mark-1.0.xsd"/> 
  
  
  <annotation>
    <documentation> 
      Schema for representing a Signed Mark, also referred to 
      as Signed Mark Data (SMD), that includes digitally 
      signed trademark information.  
    </documentation>
  </annotation>
  
  <!-- 
  <smd:signedMark> element definition
  -->
  <element name="signedMark" type="smd:signedMarkType"/>  
  
  <!-- 
  <smd:encodedSignedMark> element definition
  -->
  <element name="encodedSignedMark" 
    type="smd:encodedSignedMarkType"/>
  
  <!-- 
  <smd:signedMark> child elements
  -->
  <complexType name="signedMarkType">
    <sequence>
      <element name="serial" type="token"/>
      <element name="exDate" type="dateTime" 
      minOccurs="0"/>
      <element ref="mark:mark"/>
      <element ref="dsig:Signature"/>
    </sequence>
    <attribute name="id" type="ID" use="required"/>
  </complexType>

  <!-- 
  <smd:encodedSignedMark> element type
  -->
  <complexType name="encodedSignedMarkType">
    <simpleContent>
      <extension base="token">
        <attribute name="encoding" type="token" 
          default="base64"/>
      </extension>
    </simpleContent>
  </complexType>


</schema>
END]]></artwork>
      </figure>
      </section>
      
      <section title="Mark Schema">
      <t>Copyright (c) 2012 IETF Trust and the persons identified as authors
      of the code. All rights reserved.</t>

      <t>Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are
      met:</t>

      <t><list style="symbols">
          <t>Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.</t>

          <t>Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the
          distribution.</t>

          <t>Neither the name of Internet Society, IETF or IETF Trust, nor the
          names of specific contributors, may be used to endorse or promote
          products derived from this software without specific prior written
          permission.</t>
        </list></t>

      <t>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
      "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
      PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
      OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
      EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
      PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
      PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
      LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
      SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</t>

      <figure>
        <artwork><![CDATA[
BEGIN
<?xml version="1.0" encoding="UTF-8"?>
<schema 
  targetNamespace="urn:ietf:params:xml:ns:mark-1.0" 
  xmlns:mark="urn:ietf:params:xml:ns:mark-1.0" 
  xmlns="http://www.w3.org/2001/XMLSchema" 
  elementFormDefault="qualified">
    
  <annotation>
    <documentation> 
      Schema for representing a Trademark, also referred to 
      as Mark.  
    </documentation>
  </annotation>
  
  <!-- 
  <mark:mark> element definition
  -->
  <element name="mark" type="mark:markType"/>    
  
  <!--
  <mark:mark> child elements
  -->
  <complexType name="markType">
      <sequence>
        <element name="id" type="token" 
          minOccurs="0"/>
        <element name="name" type="token"
           minOccurs="0"/>
        <element name="label" type="mark:labelType"
           minOccurs="0" maxOccurs="unbounded"/>
        <element name="issuer" type="token" 
          minOccurs="0"/>
        <element name="number" type="token" 
          minOccurs="0"/>
        <element name="type" type="token"
          minOccurs="0"/>
        <element name="class" type="integer" 
          minOccurs="0" maxOccurs="unbounded"/>
        <element name="entitlement" type="token" 
          minOccurs="0"/>
        <element name="regDate" type="date" 
          minOccurs="0"/>
        <element name="effectiveDate" type="date" 
          minOccurs="0"/>
        <element name="exDate" type="date" 
          minOccurs="0"/>
        <element name="country" type="mark:ccType" 
          minOccurs="0"/>
        <element name="region" type="token"
           minOccurs="0"/>
        <element name="owner" type="mark:contactType" 
          minOccurs="0"/>
        <element name="contact" type="mark:contactType" 
          minOccurs="0"/>
    </sequence>
  </complexType>
  
  
  <!--
  DNS label type definition
  -->
  <simpleType name="labelType">
    <restriction base="token">
      <minLength value="1"/>
      <maxLength value="255"/>
    </restriction>
  </simpleType>
  
  <!--
  Postal code definition
  -->
  <simpleType name="pcType">
    <restriction base="token">
      <maxLength value="16"/>
    </restriction>
  </simpleType>
  
  
  <!--
  Country code definition
  -->
  <simpleType name="ccType">
    <restriction base="token">
      <length value="2"/>
    </restriction>
  </simpleType>
  
  <!--
  Phone number with extension definition
  -->
  <complexType name="e164Type">
    <simpleContent>
      <extension base="mark:e164StringType">
        <attribute name="x" type="token"/>
      </extension>
    </simpleContent>
  </complexType>

  <!--
  Phone number with extension definition
  -->
  <simpleType name="e164StringType">
    <restriction base="token">
      <pattern value="(\+[0-9]{1,3}\.[0-9]{1,14})?"/>
      <maxLength value="17"/>
    </restriction>
  </simpleType>  

  <!-- 
  Address (<mark:addr>) child elements
  -->
  <complexType name="addrType">
    <sequence>
      <element name="street" type="token"
       minOccurs="0" maxOccurs="3"/>
      <element name="city" type="token"
       minOccurs="0"/>
      <element name="sp" type="token"
       minOccurs="0"/>
      <element name="pc" type="mark:pcType"
       minOccurs="0"/>
      <element name="cc" type="mark:ccType"
       minOccurs="0"/>
    </sequence>
  </complexType>
  
  <!--
  Type used for email addresses
  -->
  <simpleType name="minTokenType">
    <restriction base="token">
      <minLength value="1"/>
    </restriction>
  </simpleType>
  
  <!--
  Contact (<mark:owner> or <mark:contact>) child elements
  -->
  <complexType name="contactType">
    <sequence>
      <element name="name" type="token" 
        minOccurs="0"/>
      <element name="org" type="token" 
        minOccurs="0"/>
      <element name="addr" type="mark:addrType" 
        minOccurs="0"/>
      <element name="voice" type="mark:e164Type" 
        minOccurs="0"/>
      <element name="fax" type="mark:e164Type" 
        minOccurs="0"/>
      <element name="email" type="mark:minTokenType" 
        minOccurs="0"/>
    </sequence>
  </complexType>
 
</schema>
END]]></artwork>
      </figure>
      </section>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>[to be filled in]</t>
    </section>
    
   <section title="Change History">
    <section title="Change from 00 to 01" anchor="change-00-to-01">
      <t><list style="numbers">
        <t>Changed to use camel case for the XML elements.</t>
        <t>Replaced "cancelled" status to "rejected" status.</t>
        <t>Added the child elements of the &lt;claim&gt; element.</t>
        <t>Removed the XML schema and replaced with "[TBD]".</t>
      </list></t>
    </section>
    <section title="Change from 01 to 02" anchor="change-01-to-02">
      <t><list style="numbers">
        <t>Added support for both the ICANN and ARI/Neustar TMCH models.</t>
        <t>Changed the namespace URI and prefix to use "launch" instead of "launchphase".</t>
        <t>Added definition of multiple claim validation models.</t>
        <t>Added the &lt;launch:signedClaim&gt; and &lt;launch:signedNotice&gt; elements.</t>
        <t>Added support for Claims Info Command</t>
      </list></t>
    </section>
    <section title="Change from 02 to 03" anchor="change-02-to-03">
      <t><list style="numbers">
        <t>Removed XSI namespace per Keith Gaughan's suggestion on the provreg list.</t>
        <t>Added extensibility to the launch:status element and added the 
        pendingAuction status per Trung Tran's feedback on the provreg list.</t>
        <t>Added support for the Claims Check Command, updated the location and 
        contents of the signedNotice, and replaced most references of Claim to Mark 
        based on the work being done on the ARI/Neustar launch model.</t>
      </list></t>
    </section>
    <section title="Change from 03 to 04" anchor="change-03-to-04">
      <t><list style="numbers">
        <t>Removed references to the ICANN model.</t>
        <t>Removed support for the Claims Info Command.</t>
        <t>Removed use of the signedClaim.</t>
        <t>Revised the method for referring to the signedClaim from the XML Signature using the IDREF URI.</t>
        <t>Split the launch-1.0.xsd into three XML schemas including launch-1.0.xsd, signeMark-1.0.xsd, and mark-1.0.xsd.</t>
        <t>Split the "claims" launch phase to the "claims1" and "claims2" launch phases.</t>
        <t>Added support for the encodedSignedMark with base64 encoded signedMark.</t>
        <t>Changed the elements in the createNoticeType to include the noticeID, timestamp, and the source elements.</t>
        <t>Added the class and effectiveDate elements to mark.</t>
      </list></t>
    </section>
   </section>
    

    <section anchor="IANA" title="IANA Considerations">
         <t>
             This document uses URNs to describe XML namespaces and XML schemas
             conforming to a registry mechanism described in <xref target="RFC3688"/>.
             Three URI assignments have been registered by the IANA.
         </t>

         <t>Registration request for the Launch namespace:</t>
         <t>
             <list>
                 <t>URI: urn:ietf:params:xml:ns:launch-1.0</t>
                 <t>Registrant Contact: See the &quot;Author&apos;s Address&quot; section of this document.</t>
                 <t>XML: None.  Namespace URIs do not represent an XML specification.</t>
             </list>
         </t>
         
         <t>Registration request for the Signed mark namespace:</t>
         <t>
             <list>
                 <t>URI: urn:ietf:params:xml:ns:signedMark-1.0</t>
                 <t>Registrant Contact: See the &quot;Author&apos;s Address&quot; section of this document.</t>
                 <t>XML: None.  Namespace URIs do not represent an XML specification.</t>
             </list>
         </t>

         <t>Registration request for the Mark namespace:</t>
         <t>
             <list>
                 <t>URI: urn:ietf:params:xml:ns:mark-1.0</t>
                 <t>Registrant Contact: See the &quot;Author&apos;s Address&quot; section of this document.</t>
                 <t>XML: None.  Namespace URIs do not represent an XML specification.</t>
             </list>
         </t>
 
 
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>The mapping extensions described in this document do not provide any
      security services beyond those described by <xref
      target="RFC5730">EPP</xref>, the <xref target="RFC5731">EPP domain name
      mapping</xref>, and protocol layers used by EPP. The security
      considerations described in these other specifications apply to this
      specification as well.</t>

      <t>Updates to, and deletion of an application object must be restricted
      to clients authorized to perform the said operation on the object.</t>

      <t>As information contained within an application, or even the mere fact
      that an application exists may be confidential. Any attempt to operate
      on an application object by an unauthorized client MUST be rejected with
      an EPP 2303 (object does not exist) or an appropriate auhorization
      error. Server policy may allow &lt;info&gt; operation with filtered
      output by clients other than the sponsoring client, in which case the
      &lt;domain:infData&gt; and &lt;launch:infData&gt; response SHOULD be
      filtered to include only fields that are publicly accessible.</t>
    </section>

  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">

      &RFC2045; 

      &RFC2119;

      &RFC5730;

      &RFC5731;

      &RFC5733;

      &RFC3688;


      <reference anchor="WIPO.ST3">
        <front>
          <title abbrev='Two-Letter Codes for the Representation of States, Other Entities and Organizations'>Recommended standard on two-letter codes for the representation of states, other entities and intergovernmental organizations</title>
          <author>
            <organization>WIPO</organization>
          </author>
          <date year='2007' month='March' />
          <keyword>WIPO</keyword>
        </front>
        <format type='PDF' target='http://www.wipo.int/standards/en/pdf/03-03-01.pdf' />
      </reference>
    </references>
  </back>

  <!-- vim: set ts=2 sw=2 expandtab: -->
</rfc>
