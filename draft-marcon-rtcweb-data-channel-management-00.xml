<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
	 which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
	 There has to be one entity for each item to be referenced.
	 An alternate method (rfc include) is described in the references. -->

<!ENTITY DATAREQ SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-rtcweb-data-channel.xml">
<!ENTITY DATAPROTO SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-jesup-rtcweb-data-protocol-03.xml">
<!ENTITY JSEP SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-rtcweb-jsep-02.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3264 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3264.xml">
<!ENTITY RFC3758 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3758.xml">
<!ENTITY RFC4960 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4960.xml">
<!ENTITY RFC6347 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6347.xml">
<!ENTITY RFC6525 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6525.xml">


]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
	 please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
	 (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
	 (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-marcon-rtcweb-data-channel-management-00" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
	 ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
		or pre5378Trust200902
	 you can add the attributes updates="NNNN" and obsoletes="NNNN"
	 they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

	<front>
		<!-- The abbreviated title is used in the page header - it is only necessary if the
			 full title is longer than 39 characters -->

		<title abbrev="RTCWeb data management">RTCWeb data channel management</title>

		<!-- add 'role="editor"' below for the editors if appropriate -->

		<!-- Another author who claims to be an editor -->

		<author fullname="Jerome Marcon" initials="J.M."
				surname="Marcon">
			<organization>Alcatel-Lucent</organization>

		  	<address>
			<postal>
				<street>Route de Villejust</street>

				<!-- Reorder these if your country does things differently -->

				<code>91620</code>

				<city>Nozay</city>

				<country>France</country>
			</postal>

			<email>jerome.marcon@alcatel-lucent.com</email>

			<!-- uri and facsimile elements may also be added -->
			</address>
		</author>

		<date year="2013" />

		<!-- If the month and year are both specified and are the current ones, xml2rfc will fill
			 in the current day for you. If only the current year is specified, xml2rfc will fill
		 in the current day and month for you. If the year is not the current one, it is
		 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
		 purpose of calculating the expiry date).  With drafts it is normally sufficient to
		 specify just the year. -->

		<!-- Meta-data Declarations -->

		<area>RAI</area>

		<workgroup>RTCWeb</workgroup>

		<!-- WG name at the upperleft corner of the doc,
			 IETF is fine for individual submissions.
		 If this element is not present, the default is "Network Working Group",
			 which is used by the RFC Editor as a nod to the history of the IETF. -->


		<!-- Keywords will be incorporated into HTML output
			 files in a meta tag but they have no effect on text or nroff
			 output. If you submit your draft to the RFC Editor, the
			 keywords will be used for the search engine. -->

		<abstract>
	<t>The Real-Time Communication in WEB-browsers (RTCWeb) working group is charged to provide protocols to support direct interactive rich communication using audio, video, and data between two peers' web-browsers.  For the support of data communication, the RTCWeb working group has in particular defined the concept of bi-directional data channels over SCTP. How to transport application messages on these data channels seems straightforward (i.e. they can be carried as SCTP user messages), however it is yet to be decided how to establish and manage these data channels. This document specifies a method for this, which relies first on a lightweight and scalable out-of-band negotiation of data channel configurations (within the SDP offer/answer exchange) and second on the signaling of the configuration in use in the SCTP user message itself. Once these configurations are negotiated, further creations of data channels can occur purely in-band by simply sending user messages, which avoids to define a new in-band data channel protocol.</t>
		</abstract>
	</front>

	<middle>
	<section title="Introduction">
		<t><xref target="I-D.ietf-rtcweb-data-channel"></xref> provides use cases and requirements for the definition of RTCWeb data channels, and outlines how the Stream Control Transmission Protocol (SCTP) <xref target="RFC4960"></xref> encapsulated within Datagram Transport Layer Security (DTLS) <xref target="RFC6347"></xref> can be used for this purpose. While some of these requirements easily map to existing capabilities of the SCTP protocol and extensions (e.g. application messages can be carried as SCTP user messages), SCTP and existing SCTP extensions do not natively support the following requirements:
			<list style='symbols'>
				<t>data channel bidirectionality (this can be achieved by pairing one SCTP outbound stream and one SCTP inbound stream)</t>
				<t>data channel priority</t>
				<t>partial reliability of delivery, based on a maximum number of retransmissions</t>
				<t>general data channel setup</t>
			</list>
		</t>
		<t>
			For setting up the SCTP association, the in-band SCTP association initialization is assisted out-of-band by <xref target="I-D.ietf-rtcweb-jsep">JSEP</xref> and the SDP Offer/Answer model <xref target="RFC3264"></xref>. For setting up each data channel, several approaches can be considered:
			<list style='numbers'>
				<t>a purely in-band data channel setup - such a protocol does not exist today.</t>
			<t>a hybrid in-band / out-of-band data channel setup, where the in-band signaling relies on a new protocol defined on top of SCTP user messages. The proposal <xref target='I-D.jesup-rtcweb-data-protocol'></xref> follows this approach.</t>
				<t>an out-of-band negotiation of data channel configurations, minimally assisted by some lightweight in-band signaling allowing further in-band creations of data channels.</t>
			</list>
		</t>
		<t>
			This document describes the latter approach, preferred by the author for the following reasons:
			<list style='symbols'>
				<t>Minimal need for SDP renegotiation: the initial offer/answer for establishing the SCTP association is often enough.</t>
				<t>Scalability of the SDP signaling: typically it is as light as a couple of attribute lines regardless of the number of data channels created in the session.</t>
				<t>Potential interoperability with other systems, due to the use of out-of-band signaling.</t>
				<t>Ability to create data channels purely in-band, once the data channel configurations are negotiated</t>
				<t>No need for a new in-band data channel control protocol.</t>
				<t>Speed: No control message overhead for the in-band creation of data channels: sending user messages automatically creates new data channels.</t>
				<t>Simplicity of implementation.</t>
			</list>
		</t>

		<t>
		As a result, the proposal can easily cope with strenuous data transmission scenarios, like:
			<list style='symbols'>
				<t>The transfer of a high number of files, eventually in parallel.</t>
				<t>The fast opening and closing of one data channel.</t>
			</list>
		</t>
		
	</section>

	<section title="Conventions">
		<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"></xref>.</t>
	</section>

	<section title="Terminology">
		<t>This document uses the following terms:
			<list style='hanging'>
				<t>Agent: As defined in <xref target="RFC3264"></xref>, an agent is the protocol implementation involved in the offer/answer exchange. There are two agents involved in an offer/answer exchange.</t>
				<t>Configuration: a fixed set of data channel parameters, constraining the configuration of some or all the data channels created on top of a given SCTP association.</t>
				<t>Data channel: A bidirectional channel consisting of paired SCTP outbound and inbound streams.</t>
				<t>In-band: transmission through the peer-to-peer SCTP association.</t>
				<t>Out-of-band: transmission through the RTCWeb signaling path, using <xref target="I-D.ietf-rtcweb-jsep">JSEP</xref> and the SDP Offer/Answer model <xref target="RFC3264"></xref>.</t>
				<t>Peer: From the perspective of one of the agents in a session, its peer is the other agent. Specifically, from the perspective of the SDP offerer, the peer is the SDP answerer. From the perspective of the SDP answerer, the peer is the SDP offerer.</t>
				<t>Stream: A unidirectional stream of an SCTP association. It is uniquely identified by a stream identifier.</t>
			</list>
		</t>
	</section>

	<section title="Overview">
		<t>This section provides an overview of the approach detailed in this document.</t>

	<t>A data channel configuration is an identified fixed set of data channel parameters potentially applicable to some or all of the data channels created during the session. These parameters include: order of delivery, reliability of delivery, subprotocol.</t>
		
		 <t>Configurations are uniquely identified throughout the session, and negotatied out-of-band between the endpoints. The configuration concept is transparent to the application, which sets up and handles each data channel individually. Whenever the application creates a new data channel, the browser internally checks if the passed set of parameters strictly matches an existing configuration, and if not generates a new configuration identifier for this set. In the latter case only does the browser trigger the application for an SDP renegotiation.</t>
		 
		<t>In the SDP offer, the offerer associates to the m=application SDP line that defines the SCTP association one attribute line per data channel configuration.</t>
		
		<t>For each data channel configuration in the offer that is accepted by the answerer, the answerer echoes in the answer the configurations supported and accepted. Once the offerer receives the answer and (in case of an initial offer) the SCTP initialization is complete, each data channel locally created using one of the accepted configurations is signaled to the application as open for transmission.</t>
				 							
		<t>Each created data channel is bound to to one negotiated configuration.</t>

		<t>By convention, the inbound and outbound streams of a data channel have the same SCTP stream number. This stream number is selected by the first endpoint sending a user message on this channel. Till this happens, an open data channel has no assigned stream number.</t>

		<t>Data channel messages are sent as SCTP user messages, preceded in the DATA chunk User Data field by two bytes specifying data channel configuration identifier as well as the message data framing type (textual or binary).</t>

		<t>A user message received on a stream number not assigned to any data channel automatically opens a data channel, set up according to the configuration signaled in the user message.</t>

		<t>Closing a data channel is done in-band by resetting the Stream Sequence Number (SSN) of the related SCTP inbound and outbound streams, as defined in <xref target="RFC6525"></xref>.</t>
		
		<t>This proposal requires the registration of one SCTP Payload Protocol Identifier.</t>

	</section>

	<section title="Data channel configuration and message properties">
		<t>
			For the proposal in this document, a data channel configuration is characterized by the following properties:
			<list style='symbols'>
				<t>configuration identifier, a 12-bit integer unique across all the data channel configurations managed during the lifetime of an SCTP association.</t>
				<t>ownership: the configuration is owned by the endpoint which originated the very first offer that included this configuration, for a given SCTP association.</t>
				<t>reliability of delivery: full reliability (as per <xref target="RFC4960"></xref>) or partial reliability with max transmission lifetime (as per <xref target="RFC3758"></xref>) or partial reliability with max number of retransmissions.</t>
				<t>order of delivery: ordered or unordered</t>
				<t>subprotocol identifier</t>
				<t>subprotocol setup data, if applicable</t>
			</list>				
		</t>
		<t>
			For the proposal in this document, a data channel is characterized from an endpoint viewpoint by the following properties:
			<list style='symbols'>
				<t>Configuration identifier. It can bind multiple data channels at a time.</t>
				<t>Label: local human-readable description of the data channel.</t>
				<t>Data channel priority</t>
				<t>SCTP stream number: common to the SCTP outbound stream and inbound stream composing the data channnel.</t>
				<t>
					state, which can have the following values:
					<list style='symbols'>
						<t>Connecting: data channel opened locally, and awaiting opening acknowledgment by the peer.</t>
						<t>Open: data channel available for bidirectional data transmission.</t>
						<t>Closing: data channel closed locally, and awaiting closing acknowledgment by the peer.</t>
						<t>Closed: data channel closed by the agent, and acknowledged as closed by the peer.</t>
					</list>
				</t>
			</list>				
		</t>
		<t>A message sent over a data channel inherits from the transmission properties configured to this data channel: reliability and order of delivery. In addition, the message is characterized by the following message-specific property:
			<list style='symbols'>
				<t>transport format encoding: text or binary.</t>
			</list>
		</t>
		<t>Note that for API simplification purpose, reliability, order of delivery and payload protocol identifier are not configurable per user message, but per data channel only.</t>
		
		<t>The payload protocol identifier (PPID) field present in SCTP DATA chunks is used to signal the data framing described in this document. This value is to be obtained from the SCTP Payload Protocol Identifiers registry managed by IANA.
		</t>
		
	</section>

	<section title="Procedures">
		<section title="Initialization">
		<t>The PeerConnection and underlying SCTP association are initialized with N data channels, all in Closed state, and with respective outbound and inbound stream numbers ranging from 0 to N-1. The number N can be specified by the application or else defaults to 16. </t>
		</section>

		<section title="Opening a data channel out-of-band">
			<t>An application creating a data channel providing some data channel parameters to the agent's browser. If the subset of these parameters composing a data channel configuration does not strictly match an existing  configuration, the browser assigns a new configuration identifier to this subset, and binds it to the data channel. The configuration identifier is generated incrementally, starting from zero for each SCTP association. Identifiers of configurations rejected by the answerer must never be used again.</t>
			<t>In addition, if the application requests the creation:
				<list style='symbols'>
					<t>at a time where the endpoint is in a stable state with an SCTP association already set up, and if the match of configuration is successful, the browser then sets the data channel state to Open.</t>
					<t>Otherwise the browser sets the data channel state to Connecting. Moreover, unless the endpoint is in an init state and createOffer has not yet been called, the browser notifies to the application the need for an SDP renegotiation.</t>
				</list>
			</t>
			<t>The created data channel has no assigned SCTP stream number yet. At this stage though the user agent can anticipate a shortage of available SCTP streams and send in-band the request to increase the number of SCTP streams.</t>
			
			<t>The new offer (if any) contains one 'm-line' for the SCTP assocation, and one attribute line per data channel configuration. This list of configurations must include the new configurations as well as all the configurations successfully negotiated in previous offer/answer exchanges for this SCTP association.</t>
			
			<t>The peer's browser receiving the offer does the following:
				<list style='numbers'>
					<t>for the data channels that are in Open state but which are bound to a configuration no longer present in the offer, change their state to Closed</t>
					<t>for each newly offered configuration, the peer's browser then informs the application of a new offered data channel along with the configuration specifics. The application can accept this data channel (intended: configuration) by creating a new data channel using the configuration parameters. Not doing so will mean to reject the configuration in the answer.</t>
				</list>
				<list style='hanging'>
					<t>Note: for each new configuration, the offerer  expectedly creates one data channel or more, whereas the answerer creates one data channel only. How the final data channel pairing (and SCTP stream number assignment) is resolved is further explained in this document.</t>
					<t>Note: the answerer can only reject new configurations, configurations previously negotiated cannot be removed from the configuration list associated with the SCTP association.</t>
				</list>
			</t>

			<t>The agent's browser receiving the answer does the following:
				<list style='numbers'>
					<t>for the data channels not in Closed state and bound to a configuration no longer listed in the answer, change their state to Closed.</t>
					<t>for each newly offered data channel configuration accepted by the answerer, change the state of any data channel bound to this configuration from Connecting to Open.</t>
				</list>
			</t>
		</section>
		
		<section title="Opening a data channel in-band">
			<t>Each user message sent in a data channel includes the identifier of the configuration which this data channel is bound to. This signaling allows to enable or speed up the opening of new data channels in-band:
				<list style='symbols'>
					<t>Case A: In a stable state, the local creation of a data channel with parameters mapping to a negotiated configuration creates the data channel in Open state immediately, and does not signal this to the peer. Some time later, when the application sends its first message on this data channel:
						<list style='numbers'>
							<t>the agent's browser selects for the lifetime of the data channel an SCTP outbound stream number not used by any channel.</t>
							<t>it then sends the user message over this SCTP stream.</t>
							<t>the peer's browser SACKnowledges the user message, using an SCTP stream of same stream number (expectedly unused). It then notifies the peer's application of the data channel opening.</t>																	
						</list>
					</t>				
					<t>Case B: Once the answerer has accepted a new offerer's configuration, and has subsequently opened a data channel bound to this configuration, the answerer's application may choose to send user messages on this channel immediately. The offerer receiving this message should:
						<list style='numbers'>
					 		<t>route this message to one of the Connecting-state data channels bound to the same configuration.</t>
					 		<t>change its state to Open, and sets its SCTP outbound stream number (expectedly unused) to the SCTP inbound stream number of the message.</t>
					 		<t>delivers the message to the application.</t>
					 	</list>
					 </t>																	
				</list>				
			</t>
			
		</section>

		<section title="Closing a data channel">
			<t>
				When the application requests to close a data channel, the agent's browser initiates an in-band Stream Sequence Number (SSN) reset of the related SCTP inbound and outbound streams. These streams are then available for further reuse. 				
			</t>
		</section>

		<section title="Sending and Receiving Data">
			<t>To expose to upper layers an API similar to the Web Socket API [WSAPI], the agent's browser needs to specify to the peer's browser the framing type of each data channel message, amongst binary or text (UTF-8).</t>
			<t>In addition, each user message needs to carry the identifier of the configuration which the data channel is bound to.</t>
			<t>
				For the sending of a user message over an opened data channel, the agent's browser:
				<list style='numbers'>
					<t>converts the message data from UTF-16 to UTF-8 if provided by the application as a DOMString.</t>
					<t>sets in the DATA chunk the Unordered bit, Payload Protocol Identifier and Stream Number as per data channel configuration.</t>
					<t>constructs the User Data field as the framing type byte(s) followed by the (converted) message data</t>
				</list>
			</t>

			<t>
				<figure align="left" title="RTCWeb data framing">
					<artwork align="left"><![CDATA[
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+------------------------+------+-------------------------------+
|       Config ID        | Type |          Payload Data         |
+------------------------+------+ - - - - - - - - - - - - - - - +
:                     Payload Data continued ...                :
+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
|                     Payload Data continued ...                |
+---------------------------------------------------------------+
					]]></artwork>			
				</figure>
			</t>
			<t>
				Config ID : 12 bits
				<list style='hanging'>
					<t>Identifies a data channel configuration negotiated out of band between the two endpoints.
					<list style='hanging'>
						<t>Note: to be considered if the Config ID should be included in all user messages.</t>
					</list>
					</t>
				</list>
			</t>
			<t>
				Type : 4 bits
				<list style='hanging'>
					<t>Defines the data framing type of "Payload data". If an unknown type is received, the receiving endpoint must reject the user message.  The following values are defined:
					<list style='symbols'>
						<t>x0 denotes a binary frame</t>
						<t>x1 denotes a UTF-8 encoded text frame</t>
						<t>x2-xFFF are reserved for further use</t>
					</list>
					</t>
				</list>
			</t>
		
			<t>
			An agent's browser receiving a user message on a data channel behaves as follows: 
			<list style='symbols'>
				<t>If the configuration identifier in the message does not map to any negotiated configuration, or if the data channel (identified by the message stream number) is in Closing or Connecting state, reject (or discard?) the message.</t>
				<t>Otherwise (i.e. supported configuration identifier and Open state):
					<list style='hanging'>
						<t>If the endpoint has just sent the very first user message on this data channel and has not yet received the SACK, it means that both endpoints attempt to dynamically create a data channel by the sending of a user message. In this case, if the endpoint has ownership of the signaled configuration, the browser must discard (reject?) the message. 
							<list style='hanging'>
								<t>Note: another way of avoiding this conflict is to state by convention that the endpoint which initiated the offer for the SCTP association establishment owns all the even stream numbers, while the other endpoint owns all the odd stream numbers.</t>
							</list>
						</t>
						<t>Otherwise deliver the message.</t>
					</list>
				</t>					 
				<t>Otherwise (i.e. supported configuration identifier and Closed state):
					<list style='hanging'>
						<t>If a Connecting-state data channel exists with no assigned stream number, open it with a stream number set to the message stream number.</t>
						<t>If not, open a new data channel with a stream number set to the message stream number</t>		 
						<t>Finally, deliver the message.</t>
					</list>
				</t>					 

			</list>
			</t>
		
		</section>

		<section title="Out-of-band signaling">
			<t>To signal the data channel configurations intended for use during the lifetime of an SCTP association, the agent completes the SDP &lt;fmt&gt; section of the m=application SDP line defined for the SCTP association. For each data channel configuration previously negotiated or newly added at the time of offer generation, the agent's browser:
				<list style='symbols'>
					<t>must specify: configuration identifier.</t>
				<t>may specify: order of delivery, reliability of delivery, subprotocol, subprotocol configuration data.</t>
				</list>
			</t>
			<t>As an example in the offer (line split for readability):</t>
			<figure align="left" title="data channel configuration setup in SDP offer">
			<artwork align="left"><![CDATA[
m=application 54111 DTLS/SCTP 5000
a=sctpmap:5000 webrtc-DataChannel 16
a=sctp-protocol:5000 config=1;label="channel 1";subprotocol="chat";
a=sctp-protocol:5000 config=2;label="channel 2";
subprotocol="file transfer";max_retr=3
			]]></artwork>
			</figure>

			<t>An in the returned answer (line split for readability):</t>
			<figure align="left" title="data channel configuration setup in SDP answer">
			<artwork align="left"><![CDATA[
m=application 54111 DTLS/SCTP 5000
a=sctpmap:5000 webrtc-DataChannel 16
a=sctp-protocol:5000 config=2;label="channel 2";
subprotocol="file transfer";max_retr=3
			]]></artwork>
			</figure>

		<t>In reply to this offer, the peer constructs in the answer the data channel configuration list of the SCTP association as follows:
			<list style='symbols'>
				<t>drop any unwanted or unsupported data channel configuration</t>
				<t>echo the other configurations, and preserve the following properties at least: configuration identifier, subprotocol (if any). Specifies also the peer-specific properties (subprotocol setup data).</t>
			</list>
		</t>
		<t>This may need to be specified via MMUSIC.</t>
		</section>
	</section>

	<section anchor="Security" title="Security Considerations">
		<t>To be completed.</t>
	</section>

	<section anchor="IANA" title="IANA Considerations">
		<t>To be completed.</t>
	</section>

	<section title="Acknowledgments">
		<t>The authors wish to thank Richard Ejzak, ... for their invaluable comments.</t>
	</section>

</middle>

  <!--  *****BACK MATTER ***** -->

  <back>
	<!-- References split into informative and normative -->

	<!-- There are 2 ways to insert reference entries from the citation libraries:
	 1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
	 2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
		(for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

	 Both are cited textually in the same manner: by using xref elements.
	 If you use the PI option, xml2rfc will, by default, try to find included files in the same
	 directory as the including file. You can also define the XML_LIBRARY environment variable
	 with a value containing a set of directories to search.  These can be either in the local
	 filing system or remote ones accessed by http (http://domain/dir/... ).-->


	<references title="Normative References">
	  <!-- Here we use entities that we defined at the beginning. -->

	  &JSEP;

	  &RFC2119;

	  &RFC3758;

	  &RFC4960;

	  &RFC6347;

	  &RFC6525;

	</references>

	<references title="Informative References">
	  <!-- Here we use entities that we defined at the beginning. -->

		&RFC3264;

		&DATAPROTO;

		&DATAREQ;
     
		<reference anchor='WebRtcAPI' target='http://www.w3.org/TR/2012/WD-webrtc-20120821'>
			<front>
				<title>WebRTC 1.0: Real-time Communication Between Browsers</title>
				
				<author initials='A.' surname='Bergkvist' fullname='Adam Bergkvist'>
				<organization />
				</author>
				
				<author initials='D.' surname='Burnett' fullname='Daniel C. Burnett'>
				<organization />
				</author>
				
				<author initials='A.' surname='Narayanan' fullname='Anant Narayanan'>
				<organization />
				</author>
				
				<author initials='C.' surname='Jennings' fullname='Cullen Jennings'>
				<organization />
				</author>
				
				<date month='August' day='21' year='2012' />
			</front>	
			<seriesInfo name='World Wide Web Consortium WD' value='WD-webrtc-20120821' />
			<format type='HTML' target='http://www.w3.org/TR/2012/WD-webrtc-20120821' />
		</reference>
		
		<reference anchor='WebSocketAPI' target='http://www.w3.org/TR/2012/WD-websockets-20120809'>
			<front>
				<title>The WebSocket API</title>
				
				<author initials='I.' surname='Hickson' fullname='Ian Hickson'>
				<organization />
				</author>
				
				<date month='August' day='9' year='2012' />
			</front>
			
			<seriesInfo name='World Wide Web Consortium LastCall' value='WD-websockets-20120809' />
			<format type='HTML' target='http://www.w3.org/TR/2012/WD-websockets-20120809' />
		</reference>
	
		<reference anchor="ITU.T140.1998">
			<front>
				<title>Protocol for Multimedia Application Text Conversation</title>
				<author>
				<organization></organization>
				</author>
				<date month="February" year="1998"/>
			</front>
			
			<seriesInfo name="ITU-T" value="Recommendation T.140" />
		
		</reference>
	
	</references>
	
	

  </back>
</rfc>
