<?xml version="1.0" encoding="UTF-8"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc tocindent="no"?>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc tocindent="no"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc2743 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2743.xml">
<!ENTITY rfc2744 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2744.xml">
<!ENTITY rfc5056 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5056.xml">
<!ENTITY rfc5587 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5587.xml">
<!ENTITY rfc4121 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4121.xml">
]>
<rfc docName="draft-williams-kitten-channel-bound-flag-00" ipr="trust200902" category="std" updates="RFC2743 RFC2744">
  <front>
    <title abbrev="GSS Channel Bound Flag">Channel Binding Signalling for the Generic Security Services Application Programming Interface</title>
    <author initials="N." surname="Williams" fullname="Nicolas Williams">
      <organization abbrev="Cryptonector">Cryptonector, LLC</organization>
      <address>
        <email>nico@cryptonector.com</email>
      </address>
    </author>
    <date month="February" year="2013"/>
    <area>
Security Area
</area>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>
This Internet-Draft proposes the addition of a “channel bound” return flag for the GSS_Init_sec_context() and GSS_Accept_sec_context() functions. Two behaviors are specified: a default, safe behavior, and a behavior that is only safe when the application specifically tells the Generic Security Services Application Programming Interface (GSS-API) that it (the applicaiton) supports the new behavior.</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction" anchor="d1e208">
      <t>
The GSS-API <xref target="RFC2743"/> supports “channel binding” <xref target="RFC5056"/>, a technique for detection of man-in-the-middle (MITM) attacks in secure channels at lower network layers. This facility is meant to be all-or-nothing: either both the initiator and acceptor use it and it succeeds, or both must not use it. This has created a negotiation problem when retrofitting the use of channel binding into existing application protocols.</t>
      <t>
Many implementations of the Kerberos V5 GSS-API mechanism <xref target="RFC4121"/> cause the acceptor to succeed when the initiator used channel binding but the acceptor application did not. This has helped deployment of channel binding in existing applications: first fix all the initiators, then fix all the acceptors. But even this is insufficient when there are many clients to fix, such that fixing them all will take a long time.</t>
      <t>
This document proposes a new method for deployment of channel binding that allows the feature to be enabled on the acceptor side before fixing all initiators. If the GSS-API had always had a return flag by which to indicate channel binding state then we could have had a simpler method of deploying channel binding: applications check that return flag and act accordingly (e.g., fail when channel binding is required). We cannot safely introduce this behavior now without an indication of support by the application.</t>
      <section title="Error in RFC2743" anchor="d1e242">
        <t>
The GSS-APIv2u1 <xref target="RFC2743"/> seems to indicate that mechanisms must ignore channel bindings when one party provided none. In practice some mechanisms ignore channel bindings when the acceptor provides none, but not when the initiator provides none. Note that it would be useless to allow security context establishment to succeed when the initiator does not provide channel bindings but the acceptor does, at least as long as there's no outward indication of whether channel binding was used! And indeed, the GSS-APIv2u1 does not provide any such indication. We correct this flaw in this document.</t>
      </section>
      <section title="Conventions used in this document" anchor="d1e257">
        <t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
      </section>
    </section>
    <section title="Channel Binding State Extension" anchor="d1e272">
      <t>
We propose a new return flag for GSS_Init_sec_context() and GSS_Accept_sec_context(), as well as a pair of functions for setting options on credential handles, along with an option for signalling understanding of the new flag in the acceptor applications.</t>
      <t>
C bindings of these extensions are provided along the lines of <xref target="RFC2744"/> and <xref target="RFC5587"/>.</t>
      <section title="GSS_Set_cred_option()" anchor="d1e296">
        <t>
Inputs:</t>
        <t>
          <list style="hanging">
            <t hangText="cred_handle CREDENTIAL HANDLE">
 If no credential handle is given then the option MAY be applied globally to the default credential handle, but the implementation MAY return an error instead.</t>
            <t hangText="desired_object OBJECT IDENTIFIER">
 Desired option; MUST NOT be GSS_C_NO_OID.</t>
            <t hangText="value OCTET STRING">
 Value for the option.</t>
          </list>
        </t>
        <t>
Outputs:</t>
        <t>
          <list style="symbols">
            <t>
major_status INTEGER</t>
            <t>
minor_status INTEGER</t>
          </list>
        </t>
        <t>
Return major status codes:</t>
        <t>
          <list style="symbols">
            <t>
GSS_S_COMPLETE indicates success.</t>
            <t>
GSS_S_UNAVAILABLE indicates that the the given option is not supported by any mechanism.</t>
            <t>
GSS_S_FAILURE indicates a general failure.</t>
          </list>
        </t>
        <t>
This function sets the given value to a credential option named by desired_object on the given cred_handle.</t>
        <section title="C-Bindings" anchor="d1e348">
          <t>
</t>
          <t>
            <figure anchor="magicparlabel-137" title="">
              <artwork>   OM_uint32
   gss_set_cred_option(OM_uint32 *minor_status,
                       gss_cred_id_t *cred_handle,
                       const gss_OID desired_object,
                       const gss_buffer_t value);</artwork>
            </figure>
          </t>
          <t>
NOTE: the cred_handle input argument to gss_set_cred_option() is a pointer to gss_cred_id_t for historical reasons. This is in conflict with the regular GSS-API pattern, but it cannot be changed at this stage. [We could rename this function and not document gss_set_cred_option(), but what would be the point?]</t>
        </section>
      </section>
      <section title="GSS_Set_cred_option_critical()" anchor="d1e379">
        <t>
Inputs:</t>
        <t>
          <list style="hanging">
            <t hangText="input_cred_handle CREDENTIAL HANDLE">
 If no credential handle is given then the option MAY be applied globally to the default credential handle, but the implementation MAY return an error instead.</t>
            <t hangText="desired_object OBJECT IDENTIFIER">
 Desired option; MUST NOT be GSS_C_NO_OID.</t>
            <t hangText="value OCTET STRING">
 Value for the option.</t>
          </list>
        </t>
        <t>
Outputs:</t>
        <t>
          <list style="symbols">
            <t>
output_cred_handle CREDENTIAL_HANDLE</t>
            <t>
major_status INTEGER</t>
            <t>
minor_status INTEGER</t>
          </list>
        </t>
        <t>
Return major status codes:</t>
        <t>
          <list style="symbols">
            <t>
GSS_S_COMPLETE indicates success.</t>
            <t>
GSS_S_UNAVAILABLE indicates that the the given option is not supported by any mechanism.</t>
            <t>
GSS_S_FAILURE indicates a general failure.</t>
          </list>
        </t>
        <t>
This function sets the given value to a credential option named by desired_object on the given input_cred_handle or on a duplicate handle output in the output_cred_handle parameter if desired. If any mechanisms -for which the credential has elements- fails to set the option then that element will be removed from the credential.</t>
        <section title="C-Bindings" anchor="d1e434">
          <t>
</t>
          <t>
            <figure anchor="magicparlabel-172" title="">
              <artwork>   OM_uint32
   gss_set_cred_option_critical(OM_uint32 *minor_status,
                                gss_const_cred_id_t input_cred_handle,
                                gss_cred_id_t *output_cred_handle,
                                const gss_OID desired_object,
                                const gss_buffer_t value);</artwork>
            </figure>
          </t>
        </section>
      </section>
      <section title="channel_bound_flag" anchor="d1e462">
        <t>
Whenever both the initiator and the acceptor provide matching channel bindings to GSS_Init_sec_context() and GSS_Accept_sec_context(), respectively, then the mechanism SHALL indicate that the context is channel bound via an output flag for the established context.</t>
        <t>
Whenever the caller shall have set the GSS_C_CHANNEL_BOUND_CRED_OPT_OID (see below) then the mechanism SHOULD allow security context establishment to succeed even if one of the initiator or acceptor failed to provide channel bindings. Whenever the acceptor shall not have set GSS_C_CHANNEL_BOUND_CRED_OPT_OID (see below) and the acceptor has provided channel bindings, then the mechanism MUST NOT allow context establishment to succeed when the initiator has not itself provided channel bindings.</t>
        <section title="C-Bindings" anchor="d1e475">
          <t>
</t>
          <t>
            <figure anchor="magicparlabel-192" title="">
              <artwork>   #define GSS_C_CHANNEL_BOUND 4096 /* 0x1000
   gss_const_OID GSS_C_CHANNEL_BOUND_CRED_OPT_OID; /* OID TBD */</artwork>
            </figure>
          </t>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references title="Normative References">&rfc2119;
&rfc2743;
&rfc2744;
&rfc5056;
&rfc5587;
</references>
    <references title="Informative References">&rfc4121;</references>
  </back>
</rfc>
