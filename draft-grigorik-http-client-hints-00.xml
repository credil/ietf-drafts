<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="tools/rfc2629xslt/rfc2629.xslt" ?>
<!DOCTYPE rfc SYSTEM "tools/rfc2629xslt/rfc2629.dtd">
<rfc ipr="trust200902" category="info">
  <?rfc toc="yes"?>
  <?rfc tocindent="yes"?>
  <?rfc sortrefs="yes"?>
  <?rfc symrefs="yes"?>
  <?rfc strict="yes"?>
  <?rfc compact="yes"?>
  <?rfc comments="yes"?>
  <?rfc inline="yes"?>
  <front>
    <title>HTTP Client Hints</title>
    <author initials="I." surname="Grigorik" fullname="Ilya Grigorik">
      <organization/>
      <address>
        <email>ilya@igvita.com</email>
        <uri>http://www.igvita.com/</uri>
      </address>
    </author>
    <date year="2013"/>
    <area>General</area>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>An increasing diversity of connected device form factors and software capabilities has created a need to deliver varying, or optimized content for each device.</t>
      <t>Client Hints can be used as input to proactive content negotiation; just as the Accept header allowed clients to indicate what formats they prefer, Client Hints allow clients to indicate a list of device and agent specific preferences.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" title="Introduction">
      <t>There are thousands of different devices accessing the web, each with different device capabilities and preference information. These device capabilities include hardware and software characteristics, as well as dynamic user and client preferences.</t>
      <t>One way to infer some of these capabilities is through User-Agent (UA) detection against an established database of client signatures. However, this technique requires acquiring such a database, integrating it into the serving path, and keeping it up to date. However, even once this infrastructure is deployed, UA sniffing has the following limitations:</t>
      <t>
        <list style="symbols">
          <t>UA detection requires an external device database</t>
          <t>UA detection cannot reliably identify all static variables</t>
          <t>UA detection cannot infer any dynamic client preferences</t>
          <t>UA detection is not cache friendly</t>
        </list>
      </t>
      <t>A popular alternative strategy is to use HTTP cookies to communicate some information about the client. However, this approach is also not cache friendly, bound by same origin policy, and imposes additional client-side latency by requiring JavaScript execution to create and manage HTTP cookies.</t>
      <t>This document defines a new request Client Hint header field, “CH”, that allows the client to perform proactive content negotiation <xref target="I-D.ietf-httpbis-p2-semantics"/> by indicating a list of device and agent specific preferences, through a mechanism similar to the Accept header which is used to indicate prefered response formats.</t>
      <section anchor="notational-conventions" title="Notational Conventions">
        <t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>
        <t>This document uses the Augmented Backus-Naur Form (ABNF) notation of
<xref target="RFC5234"/> with the list rule extension defined in
<xref target="I-D.ietf-httpbis-p1-messaging"/>, Appendix B. It includes by reference the
OWS, field-name and quoted-string rules from that document, and the
parameter rule from <xref target="I-D.ietf-httpbis-p2-semantics"/>.</t>
      </section>
    </section>
    <section anchor="the-ch-request-header-field" title="The “CH” Request Header Field">
      <t>The “CH” request header field describes an example list of client preferences that the server can use to adapt and optimize the resource to satisfy a given request. The CH field-value is a comma-delimited list of header fields, and the field-name values are case insensitive.</t>
      <figure>
        <artwork><![CDATA[
  CH = #client-hint
  client-hint = parameter
]]></artwork>
      </figure>
      <section anchor="hint-syntax" title="Hint Syntax">
        <t>Hints are allowed to have a numeric value. However, where possible, they can can be defined as flags (i.e., as a hint name only), so that the hints don’t consume too much space in client requests.</t>
        <t>Hints can be defined as one of two types:</t>
        <t>
          <list style="symbols">
            <t>Boolean - indicated by the presence of the hint name. If the hint name is absent in the last message containing the client hint header field, it is considered false.</t>
            <t>Numeric - value indicated by the digits after “=”, up to the first non-digit character. If the hint does not have an argument, its value is assumed to be 0.</t>
          </list>
        </t>
        <t>Note that HTTP/1.1 allows headers with comma-separated values to be conveyed using multiple instances of the same header; as a result, the hints are collected from all instances of the CH header on the message in question before being considered complete.</t>
      </section>
      <section anchor="pre-defined-hints" title="Pre-defined Hints">
        <t>The client controls which header fields are communicated within the CH header, based on its default settings, or based on user configuration and preferences. The user may be given the choice to enable, disable, or override specific hints. For example, to allow the request for low-resolution images or other content type’s while roaming on a foreign network, even while on a high-bandwidth link.</t>
        <t>The client and server, or an intermediate proxy, may use an additional mechanism to negotiate which fields should be reported to allow for efficient content adaption.</t>
        <t>This document defines the following hint names:</t>
        <section anchor="dh" title="dh">
          <t>
            <list style="symbols">
              <t>Description: device-width in secondary orientation, in density independent pixels.</t>
              <t>Value Type: number</t>
            </list>
          </t>
        </section>
        <section anchor="dw" title="dw">
          <t>
            <list style="symbols">
              <t>Description: device-width in primary orientation, in density independent pixels.</t>
              <t>Value Type: number</t>
            </list>
          </t>
        </section>
        <section anchor="dpr" title="dpr">
          <t>
            <list style="symbols">
              <t>Description: Device Pixel Ratio (dpr), is the ratio between physical pixels and density independent pixels on the device.</t>
              <t>Value Type: number</t>
            </list>
          </t>
          <t>Other client hints may be communicated by the client. The decision as to which specific hints will be sent is made by the client.</t>
        </section>
      </section>
      <section anchor="examples" title="Examples">
        <t>For example, given the following request header:</t>
        <figure>
          <artwork><![CDATA[
  CH: dh=598, dw=384, dpr=2.0
]]></artwork>
        </figure>
        <t>The server knows that the client’s screen height is 598px, width is 384px, as measured by density independent pixels on the device, and that the device pixel ratio is 2.0.</t>
      </section>
      <section anchor="server-opt-in-with-hop-and-origin-hints" title="Server opt-in with Hop and Origin Hints">
        <t>CH is an optional header which may be sent by the client when making a request to the server. The client may decide to always send the header, or use an optional opt-in mechanism, such as a predefined list of origins, user specified list of origins, or any other forms of opt-in.</t>
        <t>For example, the server may advertise its support for Client Hints via Hop and/or Origin Hint (<xref target="I-D.nottingham-http-browser-hints"/>):</t>
        <figure>
          <artwork><![CDATA[
  OH: ch
]]></artwork>
        </figure>
        <t>When a client receives the Hop or Origin Hint header indicating support for Client Hint adaptation, it should append the CH header to subsequent requests to the same origin server. Further, the client may remember this hint and automatically append the CH header for all future requests to the same origin.</t>
      </section>
      <section anchor="interaction-with-caches" title="Interaction with Caches">
        <t>Client Hints may be combined with Key (<xref target="I-D.fielding-http-key"/>) to enable fine-grained control of the cache key for improved cache efficiency. For example, the server may return the following set of instructions:</t>
        <figure>
          <artwork><![CDATA[
  Key: CH;pr=dw[320:640]
]]></artwork>
        </figure>
        <t>Above example indicates that the cache key should be based on the CH header, and the asset should be cached and made available for any client whose device width (dw) falls between 320 and 640 px.</t>
        <figure>
          <artwork><![CDATA[
  Key: CH;pr=dpr[1.5:]
]]></artwork>
        </figure>
        <t>Above examples indicates that the cache key should be based on the CH header, and the asset should be cached and made available for any client whose device pixel ratio (dpr) is 1.5, or higher.</t>
        <t>In absence of support for fine-grained control of the cache key via the Key header field, Vary response header can be used to indicate that served resource has been adapted based on specified Client Hint preferences.</t>
        <figure>
          <artwork><![CDATA[
  Vary: CH
]]></artwork>
        </figure>
      </section>
      <section anchor="relationship-to-the-user-agent-request-header" title="Relationship to the User-Agent Request Header">
        <t>Client Hints does not supersede or replace User-Agent. Existing device detection mechanisms can continue to use both mechanisms if necessary. By advertising its capabilities within a request header, Client Hints allows for cache friendly and proactive content negotiation.</t>
      </section>
    </section>
    <section anchor="iana-considerations" title="IANA Considerations">
      <section anchor="the-ch-request-header-field-1" title="The CH Request Header Field">
        <t>This document defines the “CH” HTTP request field, and registers it in the Permanent Message Headers registry.</t>
        <t>
          <list style="symbols">
            <t>Header field name: CH</t>
            <t>Applicable protocol: HTTP</t>
            <t>Status: Informational</t>
            <t>Author/Change controller: Ilya Grigorik, ilya@igvita.com</t>
            <t>Specification document(s): [this document]</t>
            <t>Related information: for Client Hints</t>
          </list>
        </t>
      </section>
      <section anchor="the-http-hints" title="The HTTP Hints">
        <t>This document registers the “ch” HTTP Hint (<xref target="I-D.nottingham-http-browser-hints"/>), as defined in section 2.1:</t>
        <t>
          <list style="symbols">
            <t>Hint Name: ch</t>
            <t>Hint Type: origin, hop</t>
            <t>Description: When present, this hint indicates support for Client-Hints adaptation.</t>
            <t>Value Type: numeric</t>
            <t>Contact: ilya@igvita.com</t>
            <t>Specification: this document</t>
          </list>
        </t>
      </section>
      <section anchor="the-http-client-hints-registry" title="The HTTP Client Hints Registry">
        <t>This document establishes the HTTP Client Hints Registry.</t>
        <t>New hints are registered using Expert Review (see <xref target="RFC5226"/>), by sending e-mail to iana@iana.org (or using other mechanisms, as established by IANA).</t>
        <t>New hints are expected to be implemented in at least one client in common use. The Expert MAY use their judgement in determining what “common” is, and when something is considered to be implemented.</t>
        <t>New hints MUST be optional; they cannot place requirements upon
implementations. Specifically, new hints MUST NOT make communication non-conformant with HTTP itself; i.e., this is not a mechanism for changing the HTTP protocol in incompatible ways.</t>
        <t>See section 2.1 for constraints on the syntax of hint names and hint values.</t>
        <t>Registration requests MUST use the following template:</t>
        <t>
          <list style="symbols">
            <t>Hint Name: [name of hint]</t>
            <t>Hint Value: [“boolean” or “numeric”]</t>
            <t>Description: [description of hint]</t>
            <t>Contact: [e-mail address(es)]</t>
            <t>Specification: [optional; reference or URI to more info]</t>
            <t>Notes: [optional]</t>
          </list>
        </t>
        <t>The initial contents of the registry are defined in section 2.2.</t>
      </section>
    </section>
    <section anchor="security-considerations" title="Security Considerations">
      <t>The client controls which header fields are communicated and when. In cases such as incognito or anonymous profile browsing, the header can be omitted if necessary.</t>
    </section>
  </middle>
  <back>
    <references title="Normative References">
      <reference anchor="RFC2119">
        <front>
          <title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement Levels</title>
          <author initials="S." surname="Bradner" fullname="Scott Bradner">
            <organization>Harvard University</organization>
            <address>
              <postal>
                <street>1350 Mass. Ave.</street>
                <street>Cambridge</street>
                <street>MA 02138</street>
              </postal>
              <phone>- +1 617 495 3864</phone>
              <email>sob@harvard.edu</email>
            </address>
          </author>
          <date year="1997" month="March"/>
          <area>General</area>
          <keyword>keyword</keyword>
          <abstract>
            <t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list><t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
            <t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="2119"/>
        <format type="TXT" octets="4723" target="http://www.rfc-editor.org/rfc/rfc2119.txt"/>
        <format type="HTML" octets="17970" target="http://xml.resource.org/public/rfc/html/rfc2119.html"/>
        <format type="XML" octets="5777" target="http://xml.resource.org/public/rfc/xml/rfc2119.xml"/>
      </reference>
      <reference anchor="RFC5234">
        <front>
          <title>Augmented BNF for Syntax Specifications: ABNF</title>
          <author initials="D." surname="Crocker" fullname="D. Crocker">
            <organization/>
          </author>
          <author initials="P." surname="Overell" fullname="P. Overell">
            <organization/>
          </author>
          <date year="2008" month="January"/>
          <abstract>
            <t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF.  It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="STD" value="68"/>
        <seriesInfo name="RFC" value="5234"/>
        <format type="TXT" octets="26359" target="http://www.rfc-editor.org/rfc/rfc5234.txt"/>
      </reference>
      <reference anchor="RFC5226">
        <front>
          <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
          <author initials="T." surname="Narten" fullname="T. Narten">
            <organization/>
          </author>
          <author initials="H." surname="Alvestrand" fullname="H. Alvestrand">
            <organization/>
          </author>
          <date year="2008" month="May"/>
          <abstract>
            <t>Many protocols make use of identifiers consisting of constants and other well-known values. Even after a protocol has been defined and deployment has begun, new values may need to be assigned (e.g., for a new option type in DHCP, or a new encryption or authentication transform for IPsec). To ensure that such quantities have consistent values and interpretations across all implementations, their assignment must be administered by a central authority. For IETF protocols, that role is provided by the Internet Assigned Numbers Authority (IANA).&lt;/t&gt;&lt;t&gt; In order for IANA to manage a given namespace prudently, it needs guidelines describing the conditions under which new values can be assigned or when modifications to existing values can be made. If IANA is expected to play a role in the management of a namespace, IANA must be given clear and concise instructions describing that role. This document discusses issues that should be considered in formulating a policy for assigning values to a namespace and provides guidelines for authors on the specific text that must be included in documents that place demands on IANA.&lt;/t&gt;&lt;t&gt; This document obsoletes RFC 2434. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="26"/>
        <seriesInfo name="RFC" value="5226"/>
        <format type="TXT" octets="66160" target="http://www.rfc-editor.org/rfc/rfc5226.txt"/>
      </reference>
      <reference anchor="I-D.ietf-httpbis-p1-messaging">
        <front>
          <title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
          <author initials="R" surname="Fielding" fullname="Roy Fielding">
            <organization/>
          </author>
          <author initials="J" surname="Reschke" fullname="Julian Reschke">
            <organization/>
          </author>
          <date month="February" day="23" year="2013"/>
          <abstract>
            <t>The Hypertext Transfer Protocol (HTTP) is an application-level protocol for distributed, collaborative, hypertext information systems.  HTTP has been in use by the World Wide Web global information initiative since 1990.  This document provides an overview of HTTP architecture and its associated terminology, defines the "http" and "https" Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes general security concerns for implementations.</t>
          </abstract>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p1-messaging-22"/>
        <format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-httpbis-p1-messaging-22.txt"/>
      </reference>
      <reference anchor="I-D.ietf-httpbis-p2-semantics">
        <front>
          <title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
          <author initials="R" surname="Fielding" fullname="Roy Fielding">
            <organization/>
          </author>
          <author initials="J" surname="Reschke" fullname="Julian Reschke">
            <organization/>
          </author>
          <date month="February" day="23" year="2013"/>
          <abstract>
            <t>The Hypertext Transfer Protocol (HTTP) is an application-level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t>
          </abstract>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p2-semantics-22"/>
        <format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-httpbis-p2-semantics-22.txt"/>
      </reference>
      <reference anchor="I-D.nottingham-http-browser-hints">
        <front>
          <title>HTTP Origin and Hop Hints</title>
          <author initials="M" surname="Nottingham" fullname="Mark Nottingham">
            <organization/>
          </author>
          <date month="February" day="11" year="2013"/>
          <abstract>
            <t>Over time, HTTP clients -- especially Web browsers -- have adapted how they use the protocol based upon common server configurations and behaviours.  While this is necessary in the common case, it can be detrimental for performance and interoperability.  This document establishes a mechanism whereby both origin servers and intermediaries can make hints available to clients about their preferences and capabilities, without imposing undue overhead on their interactions or requiring support for them.  This is intended to allow clients to safely optimise connections to servers.</t>
          </abstract>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-nottingham-http-browser-hints-05"/>
        <format type="TXT" target="http://www.ietf.org/internet-drafts/draft-nottingham-http-browser-hints-05.txt"/>
      </reference>
      <reference anchor="I-D.fielding-http-key">
        <front>
          <title>The Key HTTP Response Header Field</title>
          <author initials="R" surname="Fielding" fullname="Roy Fielding">
            <organization/>
          </author>
          <author initials="M" surname="Nottingham" fullname="Mark Nottingham">
            <organization/>
          </author>
          <date month="February" day="18" year="2013"/>
          <abstract>
            <t>The 'Key' header field for HTTP responses allows an origin server to describe the cache key for a negotiated response: a short algorithm that can be used upon later requests to determine if the same response is reusable.  Key has the advantage of avoiding an additional round trip for validation whenever a new request differs slightly, but not significantly, from prior requests.  Key also informs user agents of the request characteristics that might result in different content, which can be useful if the user agent is not sending Accept* fields in order to reduce the risk of fingerprinting.</t>
          </abstract>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-fielding-http-key-02"/>
        <format type="TXT" target="http://www.ietf.org/internet-drafts/draft-fielding-http-key-02.txt"/>
      </reference>
    </references>
  </back>
</rfc>
