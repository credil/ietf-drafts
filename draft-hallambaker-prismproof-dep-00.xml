<?xml version='1.0'?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<rfc docName="draft-hallambaker-prismproof-dep-00">
<front>
<title abbrev="PRISM-Proof Email Deployment ">PRISM-Proof Email Deployment Requirements</title>
<author fullname="Phillip Hallam-Baker " initials="P. M. " surname="Hallam-Baker ">
<organization>Comodo Group Inc. </organization>
<address>
<email>philliph@comodo.com </email>
</address>
</author>
<date day="20" month="September" year="2013"/>
<area>General</area>
<workgroup/>
<keyword>Email</keyword>
<keyword>S/MIME</keyword>
<keyword>OpenPGP</keyword>
<keyword>PKI</keyword>
<keyword>PKIX</keyword>
<keyword>Request For Comments </keyword>
<abstract>
<t>This document describes previous efforts and their deployment legacy and the requirements for a successful email security infrastructure. A gap analysis is performed and the tasks divided into problems that are generally considered solved albeit possibly requiring improved execution and problems that may be regarded as research. </t>
<t>This division of the problem space into 'execution' and 'research' portions allows different groups of developers to address each independently and avoid unnecessary duplication of effort. A testbed for development and early adopter deployment that achieves this separation is described. </t>
</abstract>
</front>
<middle>
<section title="Introduction" anchor="Section_1">
<t>Establishing a ubiquitous infrastructure for end-to-end confidentiality, integrity and authenticity of email has been an unrealized goal of IETF security efforts for over two decades. This document examines the deployment legacy of these previous email security efforts with a view to identifying which parts may be adopted in a new email security scheme with only minor modification to improve execution and which limitations or deficiencies are better considered research. </t>
<t>This analysis results in a proposal for an email security research testbed which separates the parts of the infrastructure that researchers can adopt in their current form without modification from areas in which innovation is needed. It is hoped that dividing the problem in this fashion will enable the most effective use of developer resources permitting a developer with expertise in developing extensions for one email user agent to support all the research proposals based on the testbed and to a allow researchers using the testbed to support all the clients that have been enabled. </t>
<t>Recent events have renewed interest in email privacy and may present a fresh opportunity to deploy a comprehensive email security infrastructure. But even if the threat of a PRISM-class attack provides the necessary momentum to restart development efforts, any infrastructure developed must address the full range of email security concerns if it is to become ubiquitous.</t>
<section title="Earlier and Existing work" anchor="Section_1_1">
<t>The IETF has attempted to produce an email security scheme on six previous occasions:</t>
<t><list style="hanging">
<t hangText="Privacy Enhanced Mail (PEM) [~RFC1421] ">PEM provided an email encryption and signature capability but was not compatible with MIME message extensions that users found to be more important and deployment of PEM depended on establishing a PKI based on a trust model that is now understood to be unfeasible. </t>
<t hangText="S/MIME [!RFC5751] ">S/MIME has achieved ubiquitous deployment in dedicated email user agents but is not currently supported in Web Mail products. Use of S/MIME requires a PKIX [!RFC5280] certificate issued by a CA, a step that has proved too difficult for the typical user and introduces a frequently criticized potential point of failure. </t>
<t hangText="OpenPGP [~RFC2440] ">OpenPGPhas achieved ubiquitous mindshare but almost no widely used email user agent offers native support. OpenPGP supports the same capabilities as S/MIME but uses a Web of Trust approach to key validation which eliminates the need for CAs but introduces scaling and usability limitations. </t>
<t hangText="DKIM [!RFC6376] ">DKIM provides only a means to authenticate a message to a sending domain and does not offer the ability to authenticate the user who sent the message or provide confidentiality capabilities. </t>
<t hangText="STARTTLS [!RFC3207] ">STARTTLS is an SMTP extension that enables the use of Transport Layer Security [!RFC5246]. While STARTTLS is supported by many if not most modern mail servers, these deployments only provide protection against a passive attack as the client does not typically validate the credentials of the server receiving the mail and the lack of a policy mechanism permits a man in the middle to achieve a downgrade attack. </t>
<t hangText="DANE [!RFC6698] ">DANE provides a mechanism which is in principle capable of being used to advise mail senders that a mail server offers the STARTTLS extension and validating the certificate to be used based on DNSSEC [!RFC4033]. </t>
</list></t>
<t>Of these efforts, only S/MIME, DKIM and STARTTLS have achieved ubiquitous deployment to date while only OpenPGP has achieved ubiquity in mindshare. The resulting stalemate has lasted over a decade.</t>
<t>Attempting to revisit work previously attempted that has failed requires us to ask whether it is necessary to re-invent the wheel and whether a new attempt has better prospects for success. In order to answer such objections we must understand the reasons for the earlier failures.</t>
<t>The Internet has two 'killer applications'; email, and the Web. The Web has succeeded in establishing a comprehensive security infrastructure while email has failed.</t>
<t>The chief security infrastructure of the World Wide Web is SSL/TLS and the WebPKI. This security infrastructure presented a clear and immediate benefit to parties deploying SSL security, in particular the ability to use the Web for an important purpose not possible otherwise (the ability to accept credit cards). Secure email has a similar potential to enable the use of email for purposes not currently possible. For example the ability to remit electronic invoices and other transactional data in machine readable formats.</t>
<t>Another key element in the success of SSL/TLS is the ease of deployment (and to a lesser extent, development). To enable 'security' on a Web site, the system manager needs to do nothing more than obtain and install an X.509/PKIX certificate. </t>
<t>Finally, and perhaps most importantly, SSL/TLS places no burden on the end user. The end user need take no action whatsoever (although to be secure the end user should take notice of the security indicators provided). In contrast, use of S/MIME requires that each user obtain a certificate and renew it at regular intervals, typically a year. This is a significant burden on the end user. Sending an encrypted message requires the user first obtain the certificate of the intended recipient, a process that is hardly simple. Use of PGP requires the user to understand and navigate the Web of Trust.</t>
<t>One factor that made developing a security infrastructure for the Web considerably easier than developing an infrastructure for email is that efforts to add cryptography began within a few months of the first public release of the Web. Email was an established infrastructure before the (public) invention of public key cryptography and efforts to retrofit cryptography had to work within the constraints of what had already become a complex legacy infrastructure.</t>
<t>Another factor that makes email security a more difficult problem than Web security is that the basic unit of interaction in email is the individual user while Web security is provided at the level of the site. </t>
</section>
</section>
<section title="Requirements for Email Security" anchor="Section_2">
<t>A comprehensive email security infrastructure must meet a wide range of requirements, not all of which may be compatible. In the enterprise, the confidentiality provided by strong encryption may conflict with a security policy that requires all inbound email be scanned for potential malware.</t>
<t>At the time PGP and S/MIME were developed it was common to refer to 'Internet users'. Today the Internet has over 2.4 billion users and virtually every literate person in the developed world is an Internet user. It makes no more sense to refer to 'Internet users' as a distinct class of people as it would to refer to 'telephone users' or 'electricity users'.</t>
<t>A security infrastructure that can support a population that size must work as easily and reliably as the telephone and electricity infrastructures do. A security infrastructure that requires users think is not going to succeed.</t>
<t>A common mistake made in considering requirements is that prospects for deployment are improved by reducing requirements to the bare minimum. While this approach may reduce development costs it also reduces functionality and the potential value to adopters. Worse still is the approach in which the design team performs triage on the set of requirements before beginning the design work. While it is acceptable, possibly even inevitable that a design will not meet every requirement raised in the design process, parties considering adoption should know which requirements a design does not meet.</t>
<t>The discovery of PRISM-class attacks requires all aspects of a protocol to become transparent including the design process. If a legitimate requirement is raised during the development process it must be listed in the requirements document even if the final design does not address it.</t>
<section title="Commercial Use" anchor="Section_2_1">
<t>One of the main reasons that SSL has succeeded despite the cost of using the WebPKI and OpenPGP has failed to become ubiquitous despite being free for use is that SSL presented a valuable commercial opportunity while OpenPGP did not. </t>
<t>The Internet has over 2.4 billion users and any infrastructure supporting such a userbase will inevitably incur maintenance costs. Even if those costs are a fraction of a cent per user, the aggregate cost is millions of dollars. In practice the inevitable need for some level of instruction and customer service means that the costs are likely to be rather higher.</t>
</section>
<section title="Usability" anchor="Section_2_2">
<t>The least effective security control is the one that is never used. An email security infrastructure can only become ubiquitous if using email securely requires no more effort than using it insecurely does. </t>
<t>Usability studies are difficult to perform well, security usability studies are even harder. A typical usability study is focused on the question most important to the manufacturer of a product: How to make a sale. Such studies are usually focused on the type of short term interactions a potential customer makes while deciding whether to buy rather than long term use. In particular there is a tendency to 'solve' a usability problem by hiding information from the user if it might cause concern.</t>
<t><list style="symbols">
<t>Installing an configuring security should take no more effort than configuring a mail application does today.</t>
<t>Sending a mail message should require no more knowledge of the recipient than their email address.</t>
<t>Mail should be secure by default, there should be no need to click a button to sign or encrypt the message.</t>
<t>A user MUST be able to force use of encryption when necessary at the message, recipient and domain level. </t>
<t>The MUA must provide the user with sufficient information to perform their tasks securely and provide additional explanation when necessary.</t>
</list></t>
</section>
<section title="Availability" anchor="Section_2_3">
<t>Email has become an essential facility for most people in the modern world. Secure email is of no use to them if they cannot rely on being able to access their email or email archives.</t>
<t><list style="hanging">
<t hangText="[[Multiple-Devices]">Users must be able to access their secure mail from any of the devices they currently read mail including mobile devices and multiple desktop computers.</t>
<t hangText="[[Archive]">Users must be certain that they will not lose access to their email messages or archives.</t>
<t hangText="[[Policy]">Users must be able to tell email senders which encrypted formats they are capable of accepting and whether they prefer email to be encrypted by default or not.</t>
</list></t>
</section>
<section title="Confidentiality and Access" anchor="Section_2_4">
<t>Earlier attempts to provide email security were developed at a time when the Internet was a community of people. The modern Internet is both a community of users and also the communication medium that supports the vast majority of commercial and government activities.</t>
<t>Commercial and government use of the Internet have confidentiality needs that are distinct from the needs of private individuals. In particular an employee of a government or commercial entity my be acting in a personal or an official capacity. </t>
<t><list style="symbols">
<t>An enterprise needs access to all email messages sent to their employees and contractors in their official capacity.</t>
<t>An enterprise may be subject to regulations that require all communications made in certain environments be recorded, archived and made available for later inspection.</t>
<t>An enterprise may need to balance their need for confidentiality against their other security objectives. In particular efforts to block spam and malware.</t>
<t>An email sender should know whether the message they are sending is confidential to the identified individual or to the domain name holder.</t>
</list></t>
<t>These concerns give rise to the following requirements:</t>
<t>[[Enterprise-Access]</t>
<t><list style="hanging">
<t hangText="">A domain name holder must be able to control the use of encryption enhancements in mail sent to their domain.</t>
</list></t>
<t><list style="hanging">
<t hangText="[[Sender-Notification]">An email sender must know whether the message they are sending is confidential to the identified individual or to the domain name holder.</t>
</list></t>
<t>Confidentiality is not a binary quality. An email sent by alice@example.com to bob@example.net may be encrypted as follows:</t>
<t><list style="symbols">
<t>TLS security between Alice's MUA and the example.com outbound mail server.</t>
<t>TLS security between the example.com outbound mail server and the example.net inbound server.</t>
<t>TLS security between the example.net inbound server and Bob's MUA.</t>
<t>Message layer security under a public encryption key of bob@example.net </t>
<t>Message layer security under a public encryption key of example.net</t>
</list></t>
<t>TLS security only protects the confidentiality of messages during transport and is thus only a sufficient confidentiality control if we can be confident that transport security will be used on each of the three occasions the messages travel across the Internet and that the message will be acceptably secure when queued at the outbound server waiting for dispatch, on the inbound server at example.net and on any MUAs that Bob might be using that download and store a copy of the message.</t>
<t>Message layer security provides a more comprehensive confidentiality guarantee for the message contents but cannot provide protection for the routing information (aka meta-data) necessary to route the information over the public network. In the case of S/MIME and PGP, the confidentiality is further compromised by the odd decision to transmit message subject lines as plaintext.</t>
<t>Rather than considering TLS and Message Layer security to be competing alternatives, we should acknowledge the fact that both approaches are valuable and that we should encourage the use of both. </t>
</section>
<section title="Integrity and Authenticity" anchor="Section_2_5">
<t>While the desire for confidentiality has been the traditional driver for Internet email security efforts (e.g. Pretty Good Privacy), it is far more likely that a user will suffer harm or economic loss as a result of an authenticity attack.</t>
<t>This morning I have three messages that have evaded my spam filter that are telling me that I need to reset my username and password. All three are fraudulent but appear identical in virtually every respect to the genuine messages that the purported senders have sent in the past.</t>
<t>Establishing a usable infrastructure for establishing the authenticity of email messages is as important and necessary as establishing a usable confidentiality infrastructure.</t>
</section>
<section title="Key Publication, Discovery, and Identity" anchor="Section_2_6">
<t>The Internet email system is based on the principle that all a user needs to send a message to another is to have an email sending account and to know the email address of the intended recipient. Any secure email infrastructure must recognize that same constraint.</t>
<t>Accordingly mechanisms are required that can:</t>
<t><list style="hanging">
<t hangText="[[Publication]">Enable Alice, the authorized holder of example.com to generate a public keypair and publish the public portion thereof for use by email senders.</t>
<t hangText="[[Discovery]">Map an email address (e.g. alice@example.com) to a certificate purportedly belonging to the holder of account alice@example.com. </t>
<t hangText="[[Identity]">Establish whether the certificate purportedly belonging to alice@example.com does in fact belong to the party the sender intends.</t>
</list></t>
<t>Identity is and is likely to remain an ongoing research topic because it is this aspect of PKI that represents the interface between the online and offline worlds. All the rest of the cryptography and infrastructure is merely protocol and math. Identity cannot be reduced to mere math because it involves people and names.</t>
<t>Identity is not an objective truth and it is highly unlikely that research will arrive at a single definitive approach that is suited to all purposes and all times. Rather than deciding between the PKIX CA approach and the OpenPGP Web of Trust we sypport the use of both or a system that is capable of supporting both.</t>
<t>Identity has multiple dimensions. Even the simple system described gives rise to multiple identity requirements reflecting the different dimensions of trust:</t>
<t><list style="hanging">
<t hangText="[[Account-Identity]">The encryption key to use to encrypt email sent to alice@example.com</t>
<t hangText="[[Personal-Identity]">The encryption key to use to encrypt email sent to Alice</t>
<t hangText="[[Organizational-Identity]">The encryption key to use to encrypt email sent to Alice working at Example Inc, the owner of example.com.</t>
</list></t>
</section>
<section title="Administrative Privileges" anchor="Section_2_7">
<t>One of the major lessons learned in the successful deployment of the World Wide Web in comparison to its rivals was the importance of allowing Web users to post pictures of their cats. </t>
<t>Unlike rival systems such as Hyper-G, setting up a Web client or server needed no system administration privilege or purchase order. Any user granted ordinary UNIX or VMS user privileges could set up a client or server. One unexpected consequence of this difference was that systems like Hyper-G were bought for a specific purpose and use for frivolous purposes such as pictures of cats was strongly discouraged. The Web in contrast, was a free for all. The only barrier to putting information on the Web was the willingness of someone to publish. As a result the fact that prior to the launch of Netscape Navigator in late 1994, Hyper-G had a far nicer, slicker client was irrelevant. The Web won the standards war in part because it won the content war: The Web had pictures of cute cats and Hyper-G did not.</t>
<t>For email security to succeed in deployment, users must be able to publish a key without first obtaining permission from their system administration. But this is a matter of convenience, not right.</t>
<t>The holder of a DNS domain name also has the right to control how their domain is used. If example.com is a bank, the bank has a security interest in telling potential relying parties to only trust credentials duly authorized by the bank itself. If bank employees find this to be inconvenient, they can use a different domain or register their own.</t>
<t><list style="hanging">
<t hangText="[[User-Autonomy]">It must be possible for Alice, the authorized holder of alice@example.com to publish a public key for her account without action by the domain administrator.</t>
<t hangText="[[DNS-Control]">A DNS domain name owner must have the ability to control the credentials issued for their domain should they choose to do so.</t>
</list></t>
</section>
</section>
<section title="Common Testbed " anchor="Section_3">
<t>Previous efforts to develop an Internet email security infrastructure have left unsolved problems but what is more important is the much larger number of problems that may be fairly regarded as solved whether in actual running code or through obvious extensions. To deploy an secure email infrastructure that resists PRISM-class attack we should build on what works whetever that is adequate for our purpose and only revisit design decisions where unmet requirements demonstrate that further work is required.</t>
<t>One factor that complicates this pragmatic approach is the schism between S/MIME and OpenPGP which in addition to specifying two different trust management approaches, also specify two message formats, two key signing formats and two of everything else that might be required. In these cases the existence of deployed code is considered the deciding factor. </t>
<t>In particular adopting the S/MIME message and key formats as the base to work from makes it possible to build a system that allows many users to receive encrypted email using existing clients without modification. Working from the OpenPGP message formats does not. Therefore the S/MIME message formats are preferred over the OpenPGP formats but this particular design decision does not preclude the use of OpenPGP style 'Web of Trust' key validation.</t>
<section title="Dividing the problem space between execution and research" anchor="Section_3_1">
<t>The Testbed is designed to partition the solution space for secure email into two parts; 'execution' and 'research' so that development work can proceed independently on each part.</t>
<t>The interface between the two parts of the solution space is to be addressed by a Web Service protocol. Current best practice and the need to support a wide range of platforms including scripting environments strongly favors the adoption of a JSON/REST style syntax.</t>
<t>The Omnibroker Web Service is designed to meet this need in the context of TLS and the protocol has been designed to support discovery of peer-to-peer connections but has not yet been tested.</t>
<t>Omnibroker is built from two components, the JSON Service Connect (JCX) Protocol [I-D.hallambaker-wsconnect] which establishes and manages a secure authenticated connection between the client and service and the Omnibroker Query Protocol [I-D.hallambaker-omnibroker] which answers queries. </t>
<t>JCX is designed to provide a general facility that can be used in any Web Service and should be applicable without specific modification to address email. The query protocol is in theory designed to support establishing peer-to-peer connections but this has not been tested and the asynchronous nature of email may result in additional requirements being discovered.</t>
</section>
<section title="Problem Simplification" anchor="Section_3_2">
<t>Since email is currently insecure by default, a testbed that offers less than perfect end-to-end security is still a significant improvement. The email infrastructure has taken four decades to evolve to its current state. It will take some time to carry the legacy infrastructure to the desired state of security. In the near term it is much more important that an email user be able to exchange email with users of experimental trust infrastructures than achieve the end to end benefits they may be designed to offer.</t>
<t>One of the reasons that the Web succeeded while Ted Nelson's Xanadu failed is that the Web cut the right corners. HTTP does not offer the referential transparency or the integrated search that Nelson insisted was essential. But excluding those from HTTP made the problem of deploying network hypertext tractable and third parties offered tools and services to fill the gaps as soon as it became clear that the Web was approaching critical mass.</t>
<t>To make the problem tractable, the following simplifications are allowed:</t>
<t><list style="symbols">
<t>A user MUST be able to configure any email client so that they can read encrypted email but the encryption provided MAY not be end to end.</t>
<t>A user MUST be able to send encrypted email from at least one platform but MAY not be able to send encrypted email from every platform.</t>
<t>A user MUST be able to sent encrypted email to any party that publishes a public key but MAY not be able to fully or even partially validate the encryption key used.</t>
<t>No extensions to the email client user interface are required.</t>
<t>The problem of email authentication is not addressed in the testbed as improved authentication requires considerable modification of the client user interface. For a comprehensive description of the changes I believe to be necessary, see my book The dotCrime Manifesto [!PHB2008].</t>
<t>Discovery and validation of trust chains MAY be performed partially or wholly in the cloud rather than end-to-end.</t>
</list></t>
<t>Accepting these simplifications for short term expediency does not require them to be accepted as permanent concessions. I expect it to be possible to eliminate each of the simplifications except for the last as the testbed approaches a critical mass of users.</t>
<t>Performing trust chain discovery and validation end-to-end instead of end-to-end is a very different proposition. Performing trust chain discovery in particular is a task that is already delegated to a cloud based service in many moderately complex trust topologies as the success of SCVP demonstrates [RFC5055].</t>
<t>It might well prove to be the case that it is also desirable for at least some trust chain validation steps to be performed in the cloud by a service rather than at the relying application. Insisting that every trust chain validation step be performed end-to-end limits the scope of validation steps that can be applied using the techniques supported by and the data available to the client.</t>
</section>
<section title="Transport " anchor="Section_3_3">
<t>Transport security and message security serve distinct purposes and a comprehensive email security infrastructure should provide both forms of security on each and every message sent.</t>
<t><list style="symbols">
<t>SMTP, SUBMIT and IMAP traffic should always use TLS transport.</t>
<t>Clients should support the use of a strong authentication mechanism that does not disclose the authentication secret to any party, including the purported service to which the client is authenticating.</t>
<t>Clients should be capable of validating the TLS Certificates presented by the service.</t>
</list></t>
<t>The last criteria is not currently supported by existing infrastructure. DANE [RFC6698] proposes one mechanism for validating the certificates using the DNSSEC trust hierarchy [RFC4033]. But this is only one mechanism and one that in its current form limits the verifier to a single root of trust.</t>
<t>MUAs should be capable of pinning TLS certificates presented by SUBMIT and IMAP services [I-D.evans-palmer-key-pinning] and instructing the outbound mail server to only forward a message over a TLS secured channel. These precautions enable a MUA that has received security policy information for the intended target mail server to relay it to the outbound server which may not have access to that source.</t>
</section>
<section title="Data Formats " anchor="Section_3_4">
<t>Secured mail is exchanged in S/MIME formats [RFC5751] so as to take advantage of the deployed base of S/MIME clients. </t>
<t>The choice of S/MIME as the message format naturally leads to the use of X.509v3/PKIX as the certificate format but not necessarily according to the PKIX trust model.</t>
<t>When OpenPGP and PEM were being developed, few software libraries were available to support parsing and validation of X.509v3 certificates. Today these resources are commonplace and supported in virtually every major code development platform. Certificate generation tools, while somewhat less common are also freely available. </t>
<section title="Email Security Policy Extensions" anchor="Section_3_4_1">
<t>The following X.509v3 extension may be included in an end-entity certificate to describe the encrypted email security policy of the corresponding address.</t>
<t>[[Details TBD, the extension must allow the party identified to specify policies such as the following]</t>
<t><list style="symbols">
<t>Transport Security Policy: Required / Always offered / Sometimes offered / Unknown</t>
<t>Account Message Encryption Policy: Always / Sometimes / Never</t>
<t>Domain Message Encryption Policy: Always / Sometimes / Never</t>
<t>Message Signature Policy: Always / Sometimes / Never</t>
<t>Domain Message Signature Policy: Always / Sometimes / Never</t>
</list></t>
<t>While the policy language could in principle include key pinning it is contrary to the PKIX architecture to incorporate information that constrains the use of one end-entity certificate in a different end-entity certificate.</t>
</section>
</section>
<section title="Key Generation and Disclosure " anchor="Section_3_5">
<t>One of the key weaknesses in the currently deployed S/MIME infrastructure is that most S/MIME clients rely on a Web browser to generate keys. This is unsatisfactory in many ways:</t>
<t><list style="symbols">
<t>The process is not transparent. It is not clear to the user that their public/private keypair is being generated by the Web browser that they are using rather than by the CA that issues the certificate.</t>
<t>The key generation mechanism is potentially vulnerable to weaknesses in the random number generation routine used and may even be compromised by a covert channel attack (kleptography).</t>
<t>Only the PKIX trust model is supported.</t>
<t>The certificate will only be published to a directory if the CA performs the operation.</t>
<t>The user is left to configure their MUA(s) themselves, a process that frequently requires them to interact with a user interface that is frequently illogical and obscure.</t>
</list></t>
<t>To address these shortcomings I propose that key generation and MUA configuration be the task of a new type of application, a key generation / MUA configuration tool supporting the following functions:</t>
<t><list style="symbols">
<t>Allows the user/domain to specify their email encryption policy (always, sometimes, never)</t>
<t>Generates public/private key pairs [[Stretch] Generate private keys in a format that precludes/minimizes covert channel. Supports use of an archival service with appropriate safeguards to protect confidentiality of the private key (e.g. key shares).</t>
<t>Recovers a private key from archival format</t>
<t>Registers the public key with disclosure service: Generate a Certificate Signing Request (CSR) [!RFC2986]. Generate a Self-Signed certificate</t>
<t>Configures a MUAs installed on the machine to make use of the private keypair in accordance with the specified policy.</t>
</list></t>
<t>The functions of the key generation / MUA configuration tool could be integrated into an MUA but this is neither necessary nor necessarily desirable. Configuration of the user's security context should be an occasional event rather than one requiring frequent attention or even one that demands attention at regular intervals.</t>
<t>An MUA can assist the developers of such tools by publishing specifications that describe how to configure the application or by adopting standardized interfaces for exchange of the information (for example through the Windows registry or configuration files in well known locations on UNIX based machines).</t>
<t>While implementing the proposed features requires a new specification and new code, the work required is well understood and the design choices are limited to issues of syntax rather than substance. Accordingly, this portion of the testbed is considered to fall under the heading of execution rather than research. A detailed specification and sample code is in development.</t>
<section title="Key and Endorsement Publication" anchor="Section_3_5_1">
<t>In order to support Key Validation, some form of key endorsement infrastructure is required. The structure of endorsement infrastructure itself is research problem and MAY involve endorsement by specialist trust providers (i.e. Certificate Authorities), peer-to-peer endorsement by end entities (i.e. Web of Trust) and notarization (i.e. Certificate Transparency).</t>
<t>A standardized interface is required to separate the email client from the endorsement infrastructure. Such an interface MUST be capable of supporting existing key endorsement infrastructures (hence the need to generate a Certificate Signing Request) and MUST be capable of supporting the new infrastructures resulting from new research.</t>
<t>This interface is currently undefined. An additional JSON/REST based Web Service is required.</t>
</section>
</section>
<section title="Key Discovery and Validation" anchor="Section_3_6">
<t>Key Discovery and Validation represent the research component of the email security problem. Previous experience suggests that rather than searching for 'the' solution to this problem we should seek out multiple solutions and ask which solutions are best suited for which purpose. The trust infrastructure that is suitable for protecting the confidentiality of communications between designers of network security protocols is not necessarily best suited for protecting the confidentiality and authenticity of email exchanges with a bank. It is even possible that different approaches to trust infrastructure may be best suited to different customers of the same bank.</t>
<t>To separate the research part of the problem from the execution part, the email client queries a Web Service each time an email message is sent to determine whether cryptographic enhancements should be applied and if so which ones.</t>
<section title="Omnibroker" anchor="Section_3_6_1">
<t>The Omnibroker protocol is a JSON/REST style query protocol that is designed to answer questions of the form 'How should client X best connect to service Y'.</t>
<t>[TBD describe the exact means of applying Omnibroker to ask how to send an email to a recipient and answers that indicate use cases such as, send in plaintext, send encrypted under encryption Key X.]</t>
</section>
<section title="Exchange Contact Synchronization" anchor="Section_3_6_2">
<t>Microsoft Outlook provides a mechanism for discovery of email contact data using a proprietary but documented protocol [MS-ASCNTC].</t>
<t>This might prove useful as a mechanism for supporting legacy clients that support S/MIME but do not provide an interface to a standards based certificate discovery mechanism. Though being based on the user's contact list, the mechanism only covers email sent to an address that is already in the contact list when the message is sent and synchronization of the contacts list may only take place on an infrequent basis with the result being cached rather than causing a fresh query to be made for each email message sent.</t>
<t>One option for using this feature would be to write a proxy to intercept interactions between the client and the Exchange server, adding entries for certificates that are found to be missing. A possibly better approach would be to scan the user's exchange contacts list on a regular basis and attempt to discover and add a certificate for each entry lacking one.</t>
</section>
</section>
</section>
<section title="Deployment Vehicles" anchor="Section_4">
<t>Making use of the testbed, whether for experimental or production purposes requires that it be integrated into some form of deployment vehicle. Three types of deployment vehicle are considered:</t>
<t><list style="symbols">
<t>Native functionality in a mail client</t>
<t>A mail client plug-in</t>
<t>A proxy service.</t>
</list></t>
<t>Native functionality is clearly preferred over the use of a plug-in or proxy but requires the most development effort. Native functionality offers the opportunity to extend the user interface to offer features such as the option to require encryption for specific messages, users or groups of users.</t>
<t>Many mail clients offer a plug-in capability that provides almost the same degree of flexibility as native code. But plug-ins are justifiably considered an unwelcome hazard in most Enterprise computing environments and increasingly so in consumer environments as well. However robust the design of the plug-in framework, the plug-in and host application must inevitably follow divergent development paths. Each update to the host application may affect the plug-in as may any other plug-in that is installed. </t>
<t>Writing a plug-in typically requires a detailed knowledge of the mail client and plug-in architecture that is only sometimes revealed in accessible documentation. </t>
<t>Use of a proxy service is probably the simplest deployment vehicle but is limited by the user interface functionality supported by the existing clients and the protocols by which the client interacts with the proxy.</t>
<t>Many email clients already support decryption of encrypted mail once the necessary decryption key is installed on the machine. It may be sufficient therefore to proxy the outbound email sent via SMTP/SUBMIT and perform opportunistic encryption if a corresponding encryption certificate can be found and the recipient prefers all email to be encrypted.</t>
</section>
<section title="Security Considerations" anchor="Section_5">
<t>I am sure there are some.</t>
</section>
<section title="Acknowledgments" anchor="Section_6">
<t>Thanks to the many people who have encouraged me in this work and in particular the members of the IETF PERPASS list and the Cryptography mailing list. Future versions of the draft will have a more complete list.</t>
</section>
</middle>
<back>
<references title="Normative References">
<reference anchor="PHB2008">
<front>
<title>The dotCrime Manifesto: How to Stop Internet Crime</title>
<author fullname="Phillip Hallam-Baker" initials="P" surname="Hallam-Baker">
<address>
</address>
</author>
<date month="Semptember" year="2013"/>
</front>
</reference>
<reference anchor="I-D.hallambaker-omnibroker">
<front>
<title>OmniBroker Protocol</title>
<author fullname="Phillip Hallam-Baker" initials="P" surname="Hallam-Baker">
<organization/>
<address>
</address>
</author>
<date day="8" month="July" year="2013"/>
</front>
<seriesInfo name="Internet-Draft" value="draft-hallambaker-omnibroker-06"/>
<format type="TXT" target="http://www.ietf.org/internet-drafts/draft-hallambaker-omnibroker-06.txt"/>
<format type="PDF" target="http://www.ietf.org/internet-drafts/draft-hallambaker-omnibroker-06.pdf"/>
</reference>
<reference anchor="I-D.hallambaker-wsconnect">
<front>
<title>JSON Service Connect (JCX) Protocol</title>
<author fullname="Phillip Hallam-Baker" initials="P" surname="Hallam-Baker">
<organization/>
<address>
</address>
</author>
<date day="8" month="July" year="2013"/>
</front>
<seriesInfo name="Internet-Draft" value="draft-hallambaker-wsconnect-04"/>
<format type="TXT" target="http://www.ietf.org/internet-drafts/draft-hallambaker-wsconnect-04.txt"/>
<format type="PDF" target="http://www.ietf.org/internet-drafts/draft-hallambaker-wsconnect-04.pdf"/>
</reference>
<reference anchor="MS-ASCNTC">
<front>
<title>Exchange ActiveSync: Contact Class Protocol</title>
<author>
<organization>Microsoft </organization>
<address>
</address>
</author>
<date month="Semptember" year="2013"/>
</front>
<format type="html" target="http://msdn.microsoft.com/en-us/library/dd299451(v=exchg.80).aspx"/>
</reference>
<reference anchor="RFC2986">
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname="M. Nystrom" initials="M." surname="Nystrom">
<organization/>
<address>
</address>
</author>
<author fullname="B. Kaliski" initials="B." surname="Kaliski">
<organization/>
<address>
</address>
</author>
<date month="November" year="2000"/>
</front>
<seriesInfo name="RFC" value="2986"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc2986.txt" octets="27794"/>
</reference>
<reference anchor="I-D.evans-palmer-key-pinning">
<front>
<title>Public Key Pinning Extension for HTTP</title>
<author fullname="Chris Evans" initials="C" surname="Evans">
<organization/>
<address>
</address>
</author>
<author fullname="Chris Palmer" initials="C" surname="Palmer">
<organization/>
<address>
</address>
</author>
<date day="14" month="November" year="2011"/>
</front>
<seriesInfo name="Internet-Draft" value="draft-evans-palmer-key-pinning-00"/>
<format type="TXT" target="http://www.ietf.org/internet-drafts/draft-evans-palmer-key-pinning-00.txt"/>
</reference>
<reference anchor="RFC4033">
<front>
<title>DNS Security Introduction and Requirements</title>
<author fullname="R. Arends" initials="R." surname="Arends">
<organization/>
<address>
</address>
</author>
<author fullname="R. Austein" initials="R." surname="Austein">
<organization/>
<address>
</address>
</author>
<author fullname="M. Larson" initials="M." surname="Larson">
<organization/>
<address>
</address>
</author>
<author fullname="D. Massey" initials="D." surname="Massey">
<organization/>
<address>
</address>
</author>
<author fullname="S. Rose" initials="S." surname="Rose">
<organization/>
<address>
</address>
</author>
<date month="March" year="2005"/>
</front>
<seriesInfo name="RFC" value="4033"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc4033.txt" octets="52445"/>
</reference>
<reference anchor="RFC6376">
<front>
<title>DomainKeys Identified Mail (DKIM) Signatures</title>
<author fullname="D. Crocker" initials="D." surname="Crocker">
<organization/>
<address>
</address>
</author>
<author fullname="T. Hansen" initials="T." surname="Hansen">
<organization/>
<address>
</address>
</author>
<author fullname="M. Kucherawy" initials="M." surname="Kucherawy">
<organization/>
<address>
</address>
</author>
<date month="September" year="2011"/>
</front>
<seriesInfo name="STD" value="76"/>
<seriesInfo name="RFC" value="6376"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc6376.txt" octets="176999"/>
</reference>
<reference anchor="RFC5280">
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname="D. Cooper" initials="D." surname="Cooper">
<organization/>
<address>
</address>
</author>
<author fullname="S. Santesson" initials="S." surname="Santesson">
<organization/>
<address>
</address>
</author>
<author fullname="S. Farrell" initials="S." surname="Farrell">
<organization/>
<address>
</address>
</author>
<author fullname="S. Boeyen" initials="S." surname="Boeyen">
<organization/>
<address>
</address>
</author>
<author fullname="R. Housley" initials="R." surname="Housley">
<organization/>
<address>
</address>
</author>
<author fullname="W. Polk" initials="W." surname="Polk">
<organization/>
<address>
</address>
</author>
<date month="May" year="2008"/>
</front>
<seriesInfo name="RFC" value="5280"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc5280.txt" octets="352580"/>
</reference>
<reference anchor="RFC5751">
<front>
<title>Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.2 Message Specification</title>
<author fullname="B. Ramsdell" initials="B." surname="Ramsdell">
<organization/>
<address>
</address>
</author>
<author fullname="S. Turner" initials="S." surname="Turner">
<organization/>
<address>
</address>
</author>
<date month="January" year="2010"/>
</front>
<seriesInfo name="RFC" value="5751"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc5751.txt" octets="98638"/>
</reference>
<reference anchor="RFC6698">
<front>
<title>The DNS-Based Authentication of Named Entities (DANE) Transport Layer Security (TLS) Protocol: TLSA</title>
<author fullname="P. Hoffman" initials="P." surname="Hoffman">
<organization/>
<address>
</address>
</author>
<author fullname="J. Schlyter" initials="J." surname="Schlyter">
<organization/>
<address>
</address>
</author>
<date month="August" year="2012"/>
</front>
<seriesInfo name="RFC" value="6698"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc6698.txt" octets="84034"/>
</reference>
<reference anchor="RFC5246">
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author fullname="T. Dierks" initials="T." surname="Dierks">
<organization/>
<address>
</address>
</author>
<author fullname="E. Rescorla" initials="E." surname="Rescorla">
<organization/>
<address>
</address>
</author>
<date month="August" year="2008"/>
</front>
<seriesInfo name="RFC" value="5246"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc5246.txt" octets="222395"/>
</reference>
<reference anchor="RFC3207">
<front>
<title>SMTP Service Extension for Secure SMTP over Transport Layer Security</title>
<author fullname="P. Hoffman" initials="P." surname="Hoffman">
<organization/>
<address>
</address>
</author>
<date month="February" year="2002"/>
</front>
<seriesInfo name="RFC" value="3207"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc3207.txt" octets="18679"/>
</reference>
</references>
<references title="Informative References">
<reference anchor="RFC5055">
<front>
<title>Server-Based Certificate Validation Protocol (SCVP)</title>
<author fullname="T. Freeman" initials="T." surname="Freeman">
<organization/>
<address>
</address>
</author>
<author fullname="R. Housley" initials="R." surname="Housley">
<organization/>
<address>
</address>
</author>
<author fullname="A. Malpani" initials="A." surname="Malpani">
<organization/>
<address>
</address>
</author>
<author fullname="D. Cooper" initials="D." surname="Cooper">
<organization/>
<address>
</address>
</author>
<author fullname="W. Polk" initials="W." surname="Polk">
<organization/>
<address>
</address>
</author>
<date month="December" year="2007"/>
</front>
<seriesInfo name="RFC" value="5055"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc5055.txt" octets="198764"/>
</reference>
<reference anchor="RFC2440">
<front>
<title>OpenPGP Message Format</title>
<author fullname="Jon Callas" initials="J." surname="Callas">
<organization>Network Associates, Inc.</organization>
<address>
</address>
</author>
<author fullname="Lutz Donnerhacke" initials="L." surname="Donnerhacke">
<organization>IKS GmbH</organization>
<address>
</address>
</author>
<author fullname="Hal Finney" initials="H." surname="Finney">
<organization>Network Associates, Inc.</organization>
<address>
</address>
</author>
<author fullname="Rodney Thayer" initials="R." surname="Thayer">
<organization>EIS Corporation</organization>
<address>
</address>
</author>
<date month="November" year="1998"/>
<keyword>pretty good privacy</keyword>
<keyword>PGP</keyword>
<keyword>security</keyword>
</front>
<seriesInfo name="RFC" value="2440"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc2440.txt" octets="141371"/>
<format type="XML" target="http://xml.resource.org/public/rfc/xml/rfc2440.xml" octets="137322"/>
</reference>
<reference anchor="RFC1421">
<front>
<title>Privacy Enhancement for Internet Electronic Mail: Part I: Message Encryption and Authentication Procedures</title>
<author fullname="John Linn" initials="J." surname="Linn">
<organization>Internet Architecture Board (IAB) Internet Research Task Force (IRTF), MIT's Programming Systems Research Group (PSRG), Internet Engineering Task Force (IETF), Privacy Enhanced Mail Work Group (PEM WG)</organization>
<address>
</address>
</author>
<date month="February" year="1993"/>
</front>
<seriesInfo name="RFC" value="1421"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc1421.txt" octets="103894"/>
</reference>
</references>
</back>
</rfc>
