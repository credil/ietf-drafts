<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY pandocAbstract PUBLIC "" "abstract.xml">
<!ENTITY pandocMiddle PUBLIC "" "middle.xml">
<!ENTITY pandocBack PUBLIC "" "back.xml">
<!ENTITY ref.Markdown PUBLIC "" "bib/reference.Markdown.xml">
<!ENTITY ref.Pandoc PUBLIC "" "bib/reference.Pandoc.xml">
<!ENTITY ref.xslt PUBLIC "" "bib/reference.XSLT.xml">
<!ENTITY ref.Pandoc2rfc PUBLIC "" "bib/reference.Pandoc2rfc.xml">
<!ENTITY rfc.2629 PUBLIC "" "bib/reference.RFC.2629.xml">
<!ENTITY w3c.xslt PUBLIC "" "bib/reference.W3C.REC-xslt-19991116.xml">
]>
<rfc ipr="trust200902" category="info" docName="draft-gieben-pandoc2rfc-01" obsoletes="" updates="" submissionType="IETF" xml:lang="en">
  <?rfc toc="yes"?>
  <!--generate a table of contents -->
  <?rfc symrefs="yes"?>
  <!--use anchors instead of numbers for references -->
  <?rfc sortrefs="yes" ?>
  <!--alphabetize the references -->
  <?rfc compact="yes" ?>
  <!--conserve vertical whitespace -->
  <?rfc subcompact="no" ?>
  <!--but keep a blank line between list items -->
  <front>
    <title abbrev="Pandoc2rfc">Writing I-Ds and RFCs using Pandoc</title>
    <author initials="R." surname="Gieben" fullname="R. (Miek) Gieben">
      <organization>Google</organization>
      <address>
        <phone/>
        <email>miek@google.com</email>
        <uri/>
      </address>
    </author>
    <date month="April" year="2013"/>
    <area>General</area>
    <workgroup>RFC Beautification Working Group</workgroup>
    <keyword>RFC</keyword>
    <keyword>Request for Comments</keyword>
    <keyword>I-D</keyword>
    <keyword>Internet-Draft</keyword>
    <keyword>XML</keyword>
    <keyword>Pandoc</keyword>
    <keyword>Extensible Markup Language</keyword>
    <abstract><!--This document was prepared using Pandoc2rfc --><!--https://github.com/miekg/pandoc2rfc --><t>This document presents a technique for using a Markdown syntax variant, called Pandoc, as a source format for documents in the Internet-Drafts (I-Ds) and Request for Comments (RFC) series.  </t> </abstract>
  </front>
  <middle><!--This document was prepared using Pandoc2rfc --><!--https://github.com/miekg/pandoc2rfc --><section title="Introduction" anchor="introduction" toc="default"><t>This document presents a technique for using Pandoc syntax as a source format for documents in the Internet-Drafts (I-Ds) and Request for Comments (RFC) series.  </t><t>Pandoc <xref target="Pandoc" pageno="false" format="default"/> is an "almost plain text" format and therefor particularly well suited for editing RFC-like documents. The syntax itself is a superset of the syntax championed by Markdown <xref target="Markdown" pageno="false" format="default"/>.  </t><t>Pandoc2rfc generates XML compatible with <xref target="RFC2629" pageno="false" format="default"/>.  </t></section><section title="Pandoc to RFC" anchor="pandoc-to-rfc" toc="default"><t>During the last few years people have been developing markup languages that are very easy to remember and type. These languages have become known as <spanx style="verb" xml:space="preserve">almost plain text</spanx>-markup languages. One of the first was the Markdown (<xref target="Markdown" pageno="false" format="default"/>) syntax. One that was developed later and incorporates Markdown syntax and a number of extensions is Pandoc (<xref target="Pandoc" pageno="false" format="default"/>). The power of Pandoc comes from the fact that it can be translated to numerous output formats, including, but not limited to: HTML, EPUB, (plain) Markdown and DocBook XML.  </t><t>Pandoc2rfc allows authors to write in (the simple) Pandoc syntax which is then transformed to XML and given to xml2rfc. The conversions are, in some way amusing, as we start off with (almost) plain text, use elaborate XML and end up with plain text again.  </t><figure anchor="fig:attempt-to" align="center" title="" suppress-title="false" alt="" width="" height=""><artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
+-------------------+   pandoc   +---------+
| ALMOST PLAIN TEXT |   ------&gt;  | DOCBOOK |
+-------------------+            +---------+
              |                       |
non-existent  |                       | xsltproc
  faster way  |                       |
              v                       v
      +------------+    xml2rfc  +---------+
      | PLAIN TEXT |  &lt;--------  |   XML   |
      +------------+             +---------+
</artwork><postamble>Attempt to justify Pandoc2rfc.  </postamble></figure><t>The XML generated (the output after the <spanx style="verb" xml:space="preserve">xsltproc</spanx> step in <xref target="fig:attempt-to" pageno="false" format="default"/>) is suitable for inclusion in either the <spanx style="verb" xml:space="preserve">middle</spanx> or <spanx style="verb" xml:space="preserve">back</spanx> section of an RFC.  </t><t>Even though Pandoc2rfc abstracts away a lot of XML details, there are still a few places left where some XML needs to be edited. Most notably in the <spanx style="verb" xml:space="preserve">front</spanx> section of an RFC.  </t><t>The simplest way to start is to create a template XML file and include the appropriate XML for this <spanx style="verb" xml:space="preserve">front</spanx> section: </t><figure anchor="fig:a-very-min" align="center" title="" suppress-title="false" alt="" width="" height=""><artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
&lt;?xml version='1.0' ?&gt;
&lt;!DOCTYPE rfc SYSTEM 'rfc2629.dtd' [
&lt;!ENTITY pandocMiddle PUBLIC '' 'middle.xml'&gt;
&lt;!ENTITY pandocBack   PUBLIC '' 'back.xml'&gt;
&lt;!ENTITY rfc.2629     PUBLIC '' 'reference.RFC.2629.xml'&gt;
]&gt;

&lt;rfc ipr='trust200902' docName='draft-gieben-pandoc2rfc-01'&gt;
 &lt;front&gt;
    &lt;title&gt;Writing I-Ds and RFCs using Pandoc&lt;/title&gt;
&lt;/front&gt;
&lt;middle&gt;
    &amp;pandocMiddle;
&lt;/middle&gt;
&lt;back&gt;
    &lt;references title="Normative References"&gt;
         &amp;rfc.2629;
    &lt;/references&gt;
    &amp;pandocBack;
&lt;/back&gt;
&lt;/rfc&gt;
</artwork><postamble>A very minimal template.xml.  </postamble></figure><t>In this case you need to edit three documents: </t><t><list style="numbers"><t><spanx style="verb" xml:space="preserve">middle.txt</spanx> - contains the main body of text; </t><t><spanx style="verb" xml:space="preserve">back.txt</spanx> - holds appendices; </t><t>this <spanx style="verb" xml:space="preserve">template.xml</spanx> - probably a fairly static file, among other things, it holds the authors and the references.  </t></list></t><t>The up to date source code for Pandoc2rfc can be found at <xref target="Pandoc2rfc" pageno="false" format="default"/>, this includes the stylesheet <spanx style="verb" xml:space="preserve">transform.xsl</spanx> used for the transformation.  </t><section title="Dependencies" anchor="dependencies" toc="default"><t>Pandoc2rfc needs <spanx style="verb" xml:space="preserve">xsltproc</spanx> <xref target="XSLT" pageno="false" format="default"/> and <spanx style="verb" xml:space="preserve">pandoc</spanx> <xref target="Pandoc" pageno="false" format="default"/> to be installed. The conversion to xml2rfc XML is done with a stylesheet based on XSLT version 1.0 <xref target="W3C.REC-xslt-19991116" pageno="false" format="default"/>. See <xref target="fig:xslt-used-" pageno="false" format="default"/> in <xref target="xslt" pageno="false" format="default"/> for the contents of that stylesheet.  </t><t>When using the template from <xref target="fig:a-very-min" pageno="false" format="default"/> xml2rfc version 2 must be used.  </t></section></section><section title="Building an Internet-Draft" anchor="building-an-internet-draft" toc="default"><t>Assuming the setup from <xref target="pandoc-to-rfc" pageno="false" format="default"/>, we can build an I-D as follows (in a Unix-like environment): </t><figure anchor="fig:building-a" align="center" title="" suppress-title="false" alt="" width="" height=""><artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
pandoc -st docbook middle.txt | xsltproc --nonet transform.xsl - \
    &gt; middle.xml
pandoc -st docbook back.txt | xsltproc --nonet transform.xsl - \
    &gt; back.xml

# Create text output
xml2rfc template.xml -f draft.txt --text

# ... or create HTML output
xml2rfc template.xml -f draft.html --html

# ... or create (self-contained) XML output
xml2rfc template.xml -f draft.xml --exp
</artwork><postamble>Building an I-D with Pandoc2rfc.  </postamble></figure><t>Note that the output file names (<spanx style="verb" xml:space="preserve">middle.xml</spanx> and <spanx style="verb" xml:space="preserve">back.xml</spanx>) must match the names used as the XML entities in <spanx style="verb" xml:space="preserve">template.xml</spanx>. The Pandoc2rfc source repository includes a shell script that incorporates the above transformations. Creating a <spanx style="verb" xml:space="preserve">draft.txt</spanx> or a <spanx style="verb" xml:space="preserve">draft.xml</spanx> can be done with <spanx style="verb" xml:space="preserve">pandoc2rfc *.txt</spanx> and <spanx style="verb" xml:space="preserve">pandoc2rfc -X *.txt</spanx> respectively.  </t></section><section title="Supported Features" anchor="supported-features" toc="default"><t>Almost everything xml2rfc can do is supported, see <xref target="tab:the-most-i" pageno="false" format="default"/> in <xref target="cheat-sheet" pageno="false" format="default"/> for a "cheat sheet".  </t><t><list style="symbols"><t>Sections with an anchor and title attributes </t><t>Lists <list style="symbols"><t>style="symbols", use "* " for each item; </t><t>style="numbers", use digits: "1. " for each item; </t><t>style="empty", use "#. " for each item; </t><t>style="format %i", use roman lowercase numerals: "ii. "; </t><t>style="format (%d)", use roman uppercase numerals "II. "; </t><t>style="letters", use lower- or uppercase letters: "a.  " and "A.  " (note: two spaces); </t><t>style="hanging", use the Pandoc definition list syntax; </t></list> </t><t>Spanx style="verb", style="emph" and style="strong", respectively use: <spanx style="verb" xml:space="preserve">`text`</spanx>, <spanx style="verb" xml:space="preserve">_text_</spanx> or <spanx style="verb" xml:space="preserve">**text**</spanx>; </t><t>Block quote - not supported by xml2rfc, so this is converted to <spanx style="verb" xml:space="preserve">&lt;list style="hanging"&gt;</spanx> paragraph; </t><t>Figure/artwork with an anchor and postamble (<xref target="figureartwork" pageno="false" format="default"/>); </t><t>Tables with an anchor and postamble (<xref target="tables" pageno="false" format="default"/>); </t><t>References (<xref target="references" pageno="false" format="default"/>) <list style="symbols"><t>external (eref); </t><t>internal (xref): <list style="symbols"><t>section (handled by Pandoc); </t><t>figures (handled by XSLT); </t><t>tables (handled by XSLT).  </t></list> </t></list> </t><t>Citations, by using internal references; </t><t>Indexes, by (ab)using footnotes (<xref target="indexes" pageno="false" format="default"/>).  </t></list></t></section><section title="Unsupported Features" anchor="unsupported-features" toc="default"><t><list style="symbols"><t>Pandoc markup in the caption for figures/artwork. Pandoc markup for table captions <spanx style="emph" xml:space="preserve">is</spanx> supported; </t><t>Crefs: for comments, but you can use HTML comments: <spanx style="verb" xml:space="preserve">&lt;!-- ... --&gt;</spanx> in the Pandoc source files; </t><t>Preamble in figures and tables.  </t></list></t></section><section title="Pandoc Style" anchor="pandoc-style" toc="default"><t>In some cases the Pandoc syntax is slightly misused to get the desired output, in the following paragraphs we will detail these.  Also the meta data feature (Pandoc's "Title Block" extension) of Pandoc is not used in Pandoc2rfc. This information must be put in the <spanx style="verb" xml:space="preserve">template.xml</spanx>.  </t><section title="Figure/Artwork" anchor="figureartwork" toc="default"><t>Indent the paragraph with 4 spaces as mandated by Pandoc. Note that xml2rfc supports a caption with <spanx style="verb" xml:space="preserve">&lt;artwork&gt;</spanx>. If you add a <spanx style="verb" xml:space="preserve">@Figure: some text</spanx> as the last line, the artwork gets a <spanx style="verb" xml:space="preserve">&lt;postamble&gt;</spanx> with the text after "@Figure: ". It will also be possible to reference the artwork. If such a caption is supplied the artwork will be centered on the page. If a caption is needed but the figure should not be centered use "@figure: ".  </t></section><section title="Tables" anchor="tables" toc="default"><t>A table can be entered by using Pandoc's table syntax. You can choose multiple styles as input, but they all are converted to the same style (plain <spanx style="verb" xml:space="preserve">&lt;texttable&gt;</spanx>) table in xml2rfc.  </t><t>The table caption is <spanx style="emph" xml:space="preserve">always</spanx> translated to a <spanx style="verb" xml:space="preserve">&lt;postamble&gt;</spanx>. The <spanx style="verb" xml:space="preserve">&lt;preamble&gt;</spanx> tag isn't supported. If a table has a caption, it will also be possible to reference the table.  </t></section><section title="References" anchor="references" toc="default"><t>Pandoc provides a syntax that can be used for references. Its syntax is repeated in this paragraph. Any reference like: <spanx style="verb" xml:space="preserve">[Click here](URI)</spanx>, is an external reference. An internal (i.e. see Section X) reference is typeset with: <spanx style="verb" xml:space="preserve">[Click here](#localid)</spanx> or <spanx style="verb" xml:space="preserve">[](#localid)</spanx>.  </t><t>For referencing RFCs (and other citations), you will need add the reference source in the template, as an external XML entity, <xref target="fig:a-very-min" pageno="false" format="default"/> provides an example. After that you can use: <spanx style="verb" xml:space="preserve">[](#RFC2629)</spanx> </t><t>Note that referencing figures/artworks and tables is done slightly different. The reason for this is that Pandoc does not have native support/syntax for this. We work around it, by "faking" the reference in the XSLT. Thus for referencing figures/artworks and tables, you need: </t><t><list style="symbols"><t>To take the first 10 characters of the caption (i.e. this is the text <spanx style="emph" xml:space="preserve">after</spanx> the string "Table: " or "@Figure: "); </t><t>Translate spaces and single quotes ' to a minus <spanx style="verb" xml:space="preserve">-</spanx>; </t><t>Translate uppercase letters to lowercase; </t><t>For tables prefix the anchor with <spanx style="verb" xml:space="preserve">tab:</spanx> and for figures use <spanx style="verb" xml:space="preserve">fig:</spanx>.  </t></list></t><t>The figure from <xref target="pandoc-to-rfc" pageno="false" format="default"/> will get <spanx style="verb" xml:space="preserve">fig:a-very-min</spanx> as an anchor.  </t><t>Note that duplicate anchors are an XML validation error which will make xml2rfc fail. These are not detected during the XSL transformation.  </t></section><section title="Indexes" anchor="indexes" toc="default"><t>The footnote syntax of Pandoc is slightly abused to support an index. Sub items are also supported. Use an exclamation mark (<spanx style="verb" xml:space="preserve">!</spanx>) to separate them: </t><figure title="" suppress-title="false" align="left" alt="" width="" height=""><artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
[^1]: item!sub item
</artwork></figure></section></section><section title="Acknowledgements" anchor="acknowledgements" toc="default"><t>The following people have helped shape Pandoc2rfc: Benno Overeinder, Erlend Hamnaberg, Matthijs Mekking and Trygve Laugstøl.  </t><t>This document was prepared using Pandoc2rfc.  </t></section><section title="Security Considerations" anchor="security-considerations" toc="default"><t>This document raises no security issues.  </t></section><section title="IANA Considerations" anchor="iana-considerations" toc="default"><t>This document has no actions for IANA.  </t></section> </middle>
  <back><references title="Normative References"><reference anchor="Markdown" target="http://daringfireball.net/projects/markdown/"><front><title>Markdown</title><author initials="J." surname="Gruber" fullname="John Gruber"><organization>The Daring Fireball Company LLC.</organization><address><email>comments@daringfireball.net</email><uri>http://daringfireball.net/</uri></address></author><date year="2004"/></front></reference> <reference anchor="XSLT" target="http://xmlsoft.org/XSLT/xsltproc2.html"><front><title>The XSLT C library for GNOME</title><author initials="D." surname="Veillard" fullname="Daniel Veillard"><organization>XML Soft</organization><address><email/><uri>http://xmlsoft.org/</uri></address></author><date year="2006"/></front></reference> <reference anchor="Pandoc" target="http://johnmacfarlane.net/pandoc/"><front><title>Pandoc, a universal document converter</title><author initials="J." surname="MacFarlane" fullname="John MacFarlane"><organization>University of California, Berkeley</organization><address><email>jgm@berkeley.edu</email><uri>http://johnmacfarlane.net/</uri></address></author><date year="2006"/></front></reference> <reference anchor="Pandoc2rfc" target="http://github.com/miekg/pandoc2rfc"><front><title abbrev="Pandoc2rfc">Pandoc2rfc git repository</title><author initials="R." surname="Gieben" fullname="R. (Miek) Gieben"><address><email>miek@miek.nl</email></address></author><date year="2012" month="October"/></front></reference> <reference anchor="RFC2629"><front><title>Writing I-Ds and RFCs using XML</title><author initials="M.T." surname="Rose" fullname="Marshall T. Rose"><organization>Invisible Worlds, Inc.</organization><address><postal><street>660 York Street</street><city>San Francisco</city><region>CA</region><code>94110</code><country>US</country></postal><phone>+1 415 695 3975</phone><email>mrose@not.invisible.net</email><uri>http://invisible.net/</uri></address></author><date year="1999" month="June"/><area>General</area><keyword>RFC</keyword><keyword>Request for Comments</keyword><keyword>I-D</keyword><keyword>Internet-Draft</keyword><keyword>XML</keyword><keyword>Extensible Markup Language</keyword><abstract><t>This memo presents a technique for using XML (Extensible Markup Language) as a source format for documents in the Internet-Drafts (I-Ds) and Request for Comments (RFC) series.</t></abstract></front><seriesInfo name="RFC" value="2629"/><format type="TXT" octets="48677" target="http://www.rfc-editor.org/rfc/rfc2629.txt"/><format type="HTML" octets="72426" target="http://xml.resource.org/public/rfc/html/rfc2629.html"/><format type="XML" octets="53481" target="http://xml.resource.org/public/rfc/xml/rfc2629.xml"/></reference> <reference anchor="W3C.REC-xslt-19991116" target="http://www.w3.org/TR/1999/REC-xslt-19991116"><front><title>XSL Transformations (XSLT) Version 1.0</title><author initials="J." surname="Clark" fullname="James Clark"><organization/></author><date month="November" day="16" year="1999"/></front><seriesInfo name="World Wide Web Consortium Recommendation" value="REC-xslt-19991116"/><format type="HTML" target="http://www.w3.org/TR/1999/REC-xslt-19991116"/></reference> </references><!--This document was prepared using Pandoc2rfc --><!--https://github.com/miekg/pandoc2rfc --><section title="Changelog" anchor="changelog" toc="default"><t>[This section should be removed by the RFC editor before publishing] </t><section title="-00" anchor="section" toc="default"><t><list style="numbers"><t>Initial document.  </t></list></t></section><section title="-01" anchor="section-1" toc="default"><t><list style="numbers"><t>Lots of updates; </t><t>Added the stylesheet use in an appendix.  </t></list></t></section></section><section title="Cheat Sheet" anchor="cheat-sheet" toc="default"><texttable anchor="tab:the-most-i" title="" suppress-title="false" align="center" style="full"><ttcol align="left">Textual construct </ttcol><ttcol align="left">Pandoc syntax </ttcol><ttcol align="left">xml2rfc Syntax </ttcol><c>Section Header </c><c><spanx style="verb" xml:space="preserve"># Section</spanx> </c><c><spanx style="verb" xml:space="preserve">&lt;section title= ...&gt;</spanx> </c><c>Unordered List </c><c><spanx style="verb" xml:space="preserve">* item</spanx> </c><c><spanx style="verb" xml:space="preserve">&lt;list style="symbols"&gt;</spanx> </c><c>Unordered List </c><c><spanx style="verb" xml:space="preserve">#. item</spanx> </c><c><spanx style="verb" xml:space="preserve">&lt;list style="empty"&gt;</spanx> </c><c>Ordered List </c><c><spanx style="verb" xml:space="preserve">1. item</spanx> </c><c><spanx style="verb" xml:space="preserve">&lt;list style="numbers"&gt;</spanx> </c><c>Ordered List </c><c><spanx style="verb" xml:space="preserve">a.  item</spanx> </c><c><spanx style="verb" xml:space="preserve">&lt;list style="letters"&gt;</spanx> </c><c>Ordered List </c><c><spanx style="verb" xml:space="preserve">ii. item</spanx> </c><c><spanx style="verb" xml:space="preserve">&lt;list style="format %i"&gt;</spanx> </c><c>Ordered List </c><c><spanx style="verb" xml:space="preserve">II. item</spanx> </c><c><spanx style="verb" xml:space="preserve">&lt;list style="format (%d)"&gt;</spanx> </c><c>Ordered List </c><c><spanx style="verb" xml:space="preserve">A.  item</spanx> </c><c><spanx style="verb" xml:space="preserve">&lt;list style="format (%C)"&gt;</spanx> </c><c>Definition List </c><c>Definition </c><c><spanx style="verb" xml:space="preserve">&lt;list style="hanging"&gt;</spanx> </c><c>Emphasis </c><c><spanx style="verb" xml:space="preserve">_text_</spanx> </c><c><spanx style="verb" xml:space="preserve">&lt;spanx style="emph"&gt;</spanx> </c><c>Strong Emphasis </c><c><spanx style="verb" xml:space="preserve">**text**</spanx> </c><c><spanx style="verb" xml:space="preserve">&lt;spanx style="strong"&gt;</spanx> </c><c>Verbatim </c><c><spanx style="verb" xml:space="preserve">`text`</spanx> </c><c><spanx style="verb" xml:space="preserve">&lt;spanx style="verb"&gt;</spanx> </c><c>Block Quote </c><c><spanx style="verb" xml:space="preserve">&gt; quote</spanx> </c><c><spanx style="verb" xml:space="preserve">&lt;list style="hanging"&gt;</spanx> </c><c>Index </c><c>Footnotes </c><c><spanx style="verb" xml:space="preserve">&lt;iref item="index"/&gt;</spanx> </c><c>Table </c><c>Tables </c><c><spanx style="verb" xml:space="preserve">&lt;texttable&gt;</spanx> </c><c>Figure/Artwork </c><c>Code Blocks </c><c><spanx style="verb" xml:space="preserve">&lt;figure&gt;&lt;artwork&gt;</spanx> </c><c>External Reference </c><c><spanx style="verb" xml:space="preserve">[Click](URI)</spanx> </c><c><spanx style="verb" xml:space="preserve">&lt;eref target="..."/&gt;</spanx> </c><c>Internal Reference </c><c><spanx style="verb" xml:space="preserve">[](#id)</spanx> </c><c><spanx style="verb" xml:space="preserve">&lt;xref target="id"&gt;</spanx> </c><c>Figure Reference </c><c><spanx style="verb" xml:space="preserve">[](#fig:...)</spanx> </c><c><spanx style="verb" xml:space="preserve">&lt;xref target="..."/&gt;</spanx> </c><c>Table Reference </c><c><spanx style="verb" xml:space="preserve">[](#tab:...)</spanx> </c><c><spanx style="verb" xml:space="preserve">&lt;xref target="..."/&gt;</spanx> </c><c>Citations </c><c><spanx style="verb" xml:space="preserve">[](#RFC2119)</spanx> </c><c><spanx style="verb" xml:space="preserve">&lt;xref target="RFC2119"&gt;</spanx> </c><postamble>The most important textual constructs that can be used in Pandoc2rfc.  </postamble></texttable></section><section title="XSLT" anchor="xslt" toc="default"><t>This is the XSLT with Git version <spanx style="verb" xml:space="preserve">f0cc985e291ae25a24c91934b8192930df1ad6f6</spanx>, that is used for the transformation.  </t><figure anchor="fig:xslt-used-" title="" suppress-title="false" align="left" alt="" width="" height=""><artwork xml:space="preserve" name="" type="" align="left" alt="" width="" height="">
&lt;?xml version="1.0"?&gt;
&lt;!-- vim: set shiftwidth=1 tabstop=1: --&gt;
&lt;xsl:stylesheet 
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
 xmlns:exsl="http://exslt.org/common" version="1.0" 
 extension-element-prefixes="exsl"&gt;
&lt;!-- 
    (c) Miek Gieben 2013, Licensed under the GPL version 2.
--&gt;
  &lt;xsl:output method="xml" omit-xml-declaration="yes"/&gt;
  &lt;xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'"/&gt;
  &lt;xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"/&gt;
  &lt;xsl:variable name="ure" select="'igure: '"/&gt;
  &lt;xsl:variable name="Fig" select="concat('@F', $ure)"/&gt;
  &lt;xsl:variable name="fig" select="concat('@f', $ure)"/&gt;
  &lt;xsl:template match="/"&gt;
   &lt;xsl:comment&gt;
    This document was prepared using Pandoc2rfc
    https://github.com/miekg/pandoc2rfc
   &lt;/xsl:comment&gt;
   &lt;xsl:apply-templates/&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template match="article"&gt;
   &lt;xsl:apply-templates/&gt;
  &lt;/xsl:template&gt;
&lt;!-- 
Remove the article info section, this should be handled
in the &lt;front&gt; matter of the draft 
--&gt;
  &lt;xsl:template match="articleinfo"&gt;
  &lt;/xsl:template&gt;
&lt;!-- Use footnotes for indexes (iref) --&gt;
  &lt;xsl:template match="footnote"&gt;
   &lt;xsl:element name="iref"&gt;
    &lt;xsl:choose&gt;
     &lt;xsl:when test="contains(./para, '!')"&gt;
      &lt;xsl:attribute name="item"&gt;
       &lt;xsl:value-of select="substring-before (normalize-space(
        translate(./para, '&amp;#10;', ' ')), '!')"/&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="subitem"&gt;
       &lt;xsl:value-of select="substring-after (normalize-space(
        translate(./para, '&amp;#10;', ' ')), '!')"/&gt;
      &lt;/xsl:attribute&gt;
     &lt;/xsl:when&gt;
     &lt;xsl:otherwise&gt;
      &lt;xsl:attribute name="item"&gt;
       &lt;xsl:value-of select="normalize-space(
        translate(./para, '&amp;#10;', ' '))"/&gt;
      &lt;/xsl:attribute&gt;
     &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
   &lt;/xsl:element&gt;
  &lt;/xsl:template&gt;
&lt;!-- Merge section with the title tags into one section --&gt;
  &lt;xsl:template match="section | simplesect |
   sect1 | sect2 | sect3 | sect4 | sect5"&gt;
   &lt;section&gt;
    &lt;xsl:attribute name="title"&gt;
     &lt;xsl:value-of select="normalize-space(
      translate(./title, '&amp;#10;', ' '))"/&gt;
    &lt;/xsl:attribute&gt;
    &lt;xsl:attribute name="anchor"&gt;
     &lt;xsl:value-of select="@id"/&gt;
    &lt;/xsl:attribute&gt;
    &lt;xsl:apply-templates/&gt;
   &lt;/section&gt;
  &lt;/xsl:template&gt;
&lt;!--
Transform a &lt;para&gt; to &lt;t&gt;, not in lists, then it is discarded 
--&gt;
  &lt;xsl:template match="para | simpara"&gt;
   &lt;xsl:choose&gt;
    &lt;xsl:when test="ancestor::orderedlist"&gt;
     &lt;xsl:if test="position() &amp;gt; 2"&gt;
      &lt;vspace blankLines="1"/&gt;
     &lt;/xsl:if&gt;
     &lt;xsl:apply-templates/&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="ancestor::itemizedlist"&gt;
     &lt;xsl:if test="position() &amp;gt; 2"&gt;
      &lt;vspace blankLines="1"/&gt;
     &lt;/xsl:if&gt;
     &lt;xsl:apply-templates/&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="ancestor::variablelist"&gt;
     &lt;xsl:if test="position() &amp;gt; 2"&gt;
      &lt;vspace blankLines="1"/&gt;
     &lt;/xsl:if&gt;
     &lt;xsl:apply-templates/&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="ancestor::tbody"&gt;
     &lt;xsl:apply-templates/&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
     &lt;t&gt;
      &lt;xsl:apply-templates/&gt;
     &lt;/t&gt;
    &lt;/xsl:otherwise&gt;
   &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
&lt;!--
Transform a &lt;listitem&gt; to a &lt;t&gt; for lists, except in description lists
--&gt;
  &lt;xsl:template match="listitem"&gt;
   &lt;xsl:choose&gt;
    &lt;xsl:when test="parent::varlistentry"&gt;
     &lt;xsl:apply-templates/&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
     &lt;t&gt;
      &lt;xsl:apply-templates/&gt;
     &lt;/t&gt;
    &lt;/xsl:otherwise&gt;
   &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
&lt;!--
Transform lists, for lists in list we do not put it in a new &lt;t&gt;&lt;/t&gt;
--&gt;
  &lt;xsl:template match="orderedlist"&gt;
   &lt;xsl:choose&gt;
    &lt;xsl:when test="contains(@numeration,'arabic')"&gt;
     &lt;xsl:choose&gt;
      &lt;xsl:when test="ancestor::orderedlist"&gt;
       &lt;list style="numbers"&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="ancestor::itemizedlist"&gt;
       &lt;list style="numbers"&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="ancestor::variablelist"&gt;
       &lt;list style="numbers"&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
       &lt;t&gt;
        &lt;list style="numbers"&gt;
         &lt;xsl:apply-templates/&gt;
        &lt;/list&gt;
       &lt;/t&gt;
      &lt;/xsl:otherwise&gt;
     &lt;/xsl:choose&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="contains(@numeration,'lowerroman')"&gt;
     &lt;xsl:choose&gt;
      &lt;xsl:when test="ancestor::orderedlist"&gt;
       &lt;list style="format %i."&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="ancestor::itemizedlist"&gt;
       &lt;list style="format %i."&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="ancestor::variablelist"&gt;
       &lt;list style="format %i."&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
       &lt;t&gt;
        &lt;list style="format %i."&gt;
         &lt;xsl:apply-templates/&gt;
        &lt;/list&gt;
       &lt;/t&gt;
      &lt;/xsl:otherwise&gt;
     &lt;/xsl:choose&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="contains(@numeration,'upperroman')"&gt;
     &lt;xsl:choose&gt;
      &lt;xsl:when test="ancestor::orderedlist"&gt;
       &lt;list style="format (%d)"&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="ancestor::itemizedlist"&gt;
       &lt;list style="format (%d)"&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="ancestor::variablelist"&gt;
       &lt;list style="format (%d)"&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
       &lt;t&gt;
        &lt;list style="format (%d)"&gt;
         &lt;xsl:apply-templates/&gt;
        &lt;/list&gt;
       &lt;/t&gt;
      &lt;/xsl:otherwise&gt;
     &lt;/xsl:choose&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="contains(@numeration,'upperalpha')"&gt;
     &lt;xsl:choose&gt;
      &lt;xsl:when test="ancestor::orderedlist"&gt;
       &lt;list style="format %C."&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="ancestor::itemizedlist"&gt;
       &lt;list style="format %C."&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="ancestor::variablelist"&gt;
       &lt;list style="format %C."&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
       &lt;t&gt;
        &lt;list style="format %C."&gt;
         &lt;xsl:apply-templates/&gt;
        &lt;/list&gt;
       &lt;/t&gt;
      &lt;/xsl:otherwise&gt;
     &lt;/xsl:choose&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="contains(@numeration,'loweralpha')"&gt;
     &lt;xsl:choose&gt;
      &lt;xsl:when test="ancestor::orderedlist"&gt;
       &lt;list style="letters"&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="ancestor::itemizedlist"&gt;
       &lt;list style="letters"&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="ancestor::variablelist"&gt;
       &lt;list style="letters"&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
       &lt;t&gt;
        &lt;list style="letters"&gt;
         &lt;xsl:apply-templates/&gt;
        &lt;/list&gt;
       &lt;/t&gt;
      &lt;/xsl:otherwise&gt;
     &lt;/xsl:choose&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
     &lt;xsl:choose&gt;
      &lt;xsl:when test="ancestor::orderedlist"&gt;
       &lt;list style="empty"&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="ancestor::itemizedlist"&gt;
       &lt;list style="empty"&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="ancestor::variablelist"&gt;
       &lt;list style="empty"&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/list&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
       &lt;t&gt;
        &lt;list style="empty"&gt;
         &lt;xsl:apply-templates/&gt;
        &lt;/list&gt;
       &lt;/t&gt;
      &lt;/xsl:otherwise&gt;
     &lt;/xsl:choose&gt;
    &lt;/xsl:otherwise&gt;
   &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template match="itemizedlist"&gt;
   &lt;xsl:choose&gt;
    &lt;xsl:when test="ancestor::orderedlist"&gt;
     &lt;list style="symbols"&gt;
      &lt;xsl:apply-templates/&gt;
     &lt;/list&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="ancestor::itemizedlist"&gt;
     &lt;list style="symbols"&gt;
      &lt;xsl:apply-templates/&gt;
     &lt;/list&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="ancestor::variablelist"&gt;
     &lt;list style="symbols"&gt;
      &lt;xsl:apply-templates/&gt;
     &lt;/list&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
     &lt;t&gt;
      &lt;list style="symbols"&gt;
       &lt;xsl:apply-templates/&gt;
      &lt;/list&gt;
     &lt;/t&gt;
    &lt;/xsl:otherwise&gt;
   &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
&lt;!--
Hanging lists are specified as &lt;variablelist&gt; 
--&gt;
  &lt;xsl:template match="variablelist"&gt;
   &lt;xsl:choose&gt;
    &lt;xsl:when test="ancestor::orderedlist"&gt;
     &lt;list style="hanging"&gt;
      &lt;xsl:apply-templates/&gt;
     &lt;/list&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="ancestor::itemizedlist"&gt;
     &lt;list style="hanging"&gt;
      &lt;xsl:apply-templates/&gt;
     &lt;/list&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:when test="ancestor::variablelist"&gt;
     &lt;list style="hanging"&gt;
      &lt;xsl:apply-templates/&gt;
     &lt;/list&gt;
    &lt;/xsl:when&gt;
    &lt;xsl:otherwise&gt;
     &lt;t&gt;
      &lt;list style="hanging"&gt;
       &lt;xsl:apply-templates/&gt;
      &lt;/list&gt;
     &lt;/t&gt;
    &lt;/xsl:otherwise&gt;
   &lt;/xsl:choose&gt;
  &lt;/xsl:template&gt;
  &lt;xsl:template match="varlistentry"&gt;
   &lt;t&gt;
    &lt;xsl:attribute name="hangText"&gt;
     &lt;xsl:value-of select="normalize-space(translate(./term, 
      ' &amp;#9;&amp;#13;&amp;#10;', ' '))"/&gt;
    &lt;/xsl:attribute&gt;
&lt;!-- 
OPTION: enable this to get a newline after the hangText
--&gt;
&lt;!-- &lt;xsl:element name="vspace"/&gt; --&gt;
    &lt;xsl:apply-templates select="./listitem"/&gt;
   &lt;/t&gt;
  &lt;/xsl:template&gt;
&lt;!--
Transform &lt;link&gt; to &lt;xref&gt; crosslinks 
--&gt;
  &lt;xsl:template match="link"&gt;
   &lt;xref&gt;
    &lt;xsl:attribute name="target"&gt;
     &lt;xsl:value-of select="@linkend"/&gt;
    &lt;/xsl:attribute&gt;
    &lt;xsl:apply-templates/&gt;
   &lt;/xref&gt;
  &lt;/xsl:template&gt;
&lt;!--
Transform &lt;ulink&gt; to &lt;eref&gt; links 
--&gt;
  &lt;xsl:template match="ulink"&gt;
   &lt;eref&gt;
    &lt;xsl:attribute name="target"&gt;
     &lt;xsl:value-of select="@url"/&gt;
    &lt;/xsl:attribute&gt;
    &lt;xsl:apply-templates/&gt;
   &lt;/eref&gt;
  &lt;/xsl:template&gt;
&lt;!--
Transform &lt;blockquote&gt; to &lt;list style="hanging"&gt;
--&gt;
  &lt;xsl:template match="blockquote"&gt;
   &lt;t&gt;
    &lt;list style="hanging" hangIndent="3"&gt;
     &lt;xsl:apply-templates/&gt;
    &lt;/list&gt;
   &lt;/t&gt;
  &lt;/xsl:template&gt;
&lt;!--
Transform &lt;screen&gt; and &lt;programlisting&gt; to &lt;figure&gt;&lt;artwork&gt;
--&gt;
  &lt;xsl:template match="screen | programlisting"&gt;
   &lt;figure&gt;
    &lt;xsl:choose&gt;
     &lt;xsl:when test="contains(., $Fig)"&gt;
      &lt;xsl:attribute name="anchor"&gt;
       &lt;xsl:text&gt;fig:&lt;/xsl:text&gt;
       &lt;xsl:value-of select="translate(
        translate(substring(normalize-space(
        translate( substring-after(., $Fig) ,
        &amp;quot;&amp;#10;'&amp;quot;, &amp;quot;  &amp;quot;)), 1, 10),
        &amp;quot; &amp;quot;, &amp;quot;-&amp;quot;), $uppercase, $smallcase)"/&gt;
      &lt;/xsl:attribute&gt;
&lt;!-- If there is an caption, center the figure --&gt;
          &lt;xsl:attribute name="align"&gt;
           &lt;xsl:text&gt;center&lt;/xsl:text&gt;
          &lt;/xsl:attribute&gt;
          &lt;artwork&gt;
           &lt;xsl:value-of select="substring-before(., $Fig)"/&gt;
          &lt;/artwork&gt;
          &lt;postamble&gt;
           &lt;xsl:value-of select="substring-after(., $Fig)"/&gt;
          &lt;/postamble&gt;
         &lt;/xsl:when&gt;
         &lt;xsl:when test="contains(., $fig)"&gt;
          &lt;xsl:attribute name="anchor"&gt;
           &lt;xsl:text&gt;fig:&lt;/xsl:text&gt;
           &lt;xsl:value-of select="translate(
            translate(substring(normalize-space(
            translate( substring-after(., $fig) ,
            &amp;quot;&amp;#10;'&amp;quot;, &amp;quot;  &amp;quot;)), 1, 10),
            &amp;quot; &amp;quot;, &amp;quot;-&amp;quot;), $uppercase, $smallcase)"/&gt;
          &lt;/xsl:attribute&gt;
          &lt;artwork&gt;
           &lt;xsl:value-of select="substring-before(., $fig)"/&gt;
          &lt;/artwork&gt;
          &lt;postamble&gt;
           &lt;xsl:value-of select="substring-after(., $fig)"/&gt;
          &lt;/postamble&gt;
         &lt;/xsl:when&gt;
         &lt;xsl:otherwise&gt;
          &lt;artwork&gt;
           &lt;xsl:value-of select="."/&gt;
          &lt;/artwork&gt;
         &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
       &lt;/figure&gt;
      &lt;/xsl:template&gt;
      &lt;xsl:template match="title"/&gt;
      &lt;xsl:template match="literal"&gt;
       &lt;spanx style="verb"&gt;
        &lt;xsl:apply-templates/&gt;
       &lt;/spanx&gt;
      &lt;/xsl:template&gt;
      &lt;xsl:template match="emphasis"&gt;
       &lt;xsl:choose&gt;
        &lt;xsl:when test="contains(@role,'strong')"&gt;
         &lt;spanx style="strong"&gt;
          &lt;xsl:apply-templates/&gt;
         &lt;/spanx&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:otherwise&gt;
         &lt;spanx style="emph"&gt;
          &lt;xsl:apply-templates/&gt;
         &lt;/spanx&gt;
        &lt;/xsl:otherwise&gt;
       &lt;/xsl:choose&gt;
      &lt;/xsl:template&gt;
      &lt;xsl:template match="literal" mode="post"&gt;
       &lt;spanx style="verb"&gt;
        &lt;xsl:apply-templates mode="post"/&gt;
       &lt;/spanx&gt;
      &lt;/xsl:template&gt;
      &lt;xsl:template match="emphasis" mode="post"&gt;
       &lt;xsl:choose&gt;
        &lt;xsl:when test="contains(@role,'strong')"&gt;
         &lt;spanx style="strong"&gt;
          &lt;xsl:apply-templates mode="post"/&gt;
         &lt;/spanx&gt;
        &lt;/xsl:when&gt;
        &lt;xsl:otherwise&gt;
         &lt;spanx style="emph"&gt;
          &lt;xsl:apply-templates mode="post"/&gt;
         &lt;/spanx&gt;
        &lt;/xsl:otherwise&gt;
       &lt;/xsl:choose&gt;
      &lt;/xsl:template&gt;
&lt;!-- Tables --&gt;
  &lt;xsl:template match="table | informaltable"&gt;
   &lt;texttable&gt;
&lt;!-- If there is a caption, fake an anchor attribute --&gt;
      &lt;xsl:if test="./caption"&gt;
       &lt;xsl:attribute name="anchor"&gt;
        &lt;xsl:text&gt;tab:&lt;/xsl:text&gt;
        &lt;xsl:value-of select="translate(
         translate(substring(normalize-space(translate(
         ./caption, &amp;quot;&amp;#10;'&amp;quot;, &amp;quot;  &amp;quot;)), 1, 10),
         &amp;quot; &amp;quot;, &amp;quot;-&amp;quot;), $uppercase, $smallcase)"/&gt;
       &lt;/xsl:attribute&gt;
      &lt;/xsl:if&gt;
      &lt;xsl:if test="./title"&gt;
       &lt;xsl:attribute name="anchor"&gt;
        &lt;xsl:text&gt;tab:&lt;/xsl:text&gt;
        &lt;xsl:value-of select="translate( translate(
         substring(normalize-space(translate(./title,
         &amp;quot;&amp;#10;'&amp;quot;, &amp;quot;  &amp;quot;)), 1, 10),
         &amp;quot; &amp;quot;, &amp;quot;-&amp;quot;), $uppercase, $smallcase)"/&gt;
       &lt;/xsl:attribute&gt;
      &lt;/xsl:if&gt;
      &lt;xsl:apply-templates/&gt;
      &lt;xsl:if test="./title"&gt;
&lt;!-- create postamble of the title --&gt;
        &lt;postamble&gt;
         &lt;xsl:apply-templates select="./title" mode="post"/&gt;
        &lt;/postamble&gt;
       &lt;/xsl:if&gt;
       &lt;xsl:if test="./caption"&gt;
&lt;!-- create postamble of the caption --&gt;
        &lt;postamble&gt;
         &lt;xsl:apply-templates select="./caption" mode="post"/&gt;
        &lt;/postamble&gt;
       &lt;/xsl:if&gt;
      &lt;/texttable&gt;
     &lt;/xsl:template&gt;
&lt;!-- Table headers --&gt;
  &lt;xsl:template match="table/thead/tr/th |
   informaltable/thead/tr/th"&gt;
   &lt;ttcol&gt;
    &lt;xsl:attribute name="align"&gt;
     &lt;xsl:value-of select="@align"/&gt;
    &lt;/xsl:attribute&gt;
&lt;!--
Every even position() need to be dealt with: 
2 look back to 1, 4 look back to 2, etc.
--&gt;
      &lt;xsl:if test="position() = 2"&gt;
       &lt;xsl:call-template name="get_col"&gt;
        &lt;xsl:with-param name="column" select="1"/&gt;
       &lt;/xsl:call-template&gt;
      &lt;/xsl:if&gt;
      &lt;xsl:if test="position() = 4"&gt;
       &lt;xsl:call-template name="get_col"&gt;
        &lt;xsl:with-param name="column" select="2"/&gt;
       &lt;/xsl:call-template&gt;
      &lt;/xsl:if&gt;
      &lt;xsl:if test="position() = 6"&gt;
       &lt;xsl:call-template name="get_col"&gt;
        &lt;xsl:with-param name="column" select="3"/&gt;
       &lt;/xsl:call-template&gt;
      &lt;/xsl:if&gt;
      &lt;xsl:if test="position() = 8"&gt;
       &lt;xsl:call-template name="get_col"&gt;
        &lt;xsl:with-param name="column" select="4"/&gt;
       &lt;/xsl:call-template&gt;
      &lt;/xsl:if&gt;
      &lt;xsl:if test="position() = 10"&gt;
       &lt;xsl:call-template name="get_col"&gt;
        &lt;xsl:with-param name="column" select="5"/&gt;
       &lt;/xsl:call-template&gt;
      &lt;/xsl:if&gt;
      &lt;xsl:if test="position() = 12"&gt;
       &lt;xsl:call-template name="get_col"&gt;
        &lt;xsl:with-param name="column" select="6"/&gt;
       &lt;/xsl:call-template&gt;
      &lt;/xsl:if&gt;
      &lt;xsl:if test="position() = 14"&gt;
       &lt;xsl:call-template name="get_col"&gt;
        &lt;xsl:with-param name="column" select="7"/&gt;
       &lt;/xsl:call-template&gt;
      &lt;/xsl:if&gt;
      &lt;xsl:if test="position() = 16"&gt;
       &lt;xsl:call-template name="get_col"&gt;
        &lt;xsl:with-param name="column" select="8"/&gt;
       &lt;/xsl:call-template&gt;
      &lt;/xsl:if&gt;
      &lt;xsl:apply-templates/&gt;
     &lt;/ttcol&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template name="get_col"&gt;
     &lt;xsl:param name="column"/&gt;
     &lt;xsl:if test="../../../col[$column]"&gt;
      &lt;xsl:attribute name="width"&gt;
       &lt;xsl:value-of select="../../../col[$column]/@width"/&gt;
      &lt;/xsl:attribute&gt;
     &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;
&lt;!-- Table headers for CALS tables --&gt;
  &lt;xsl:template match="table/tgroup/thead/row/entry"&gt;
   &lt;ttcol&gt;
    &lt;xsl:if test="position() = 2"&gt;
     &lt;xsl:call-template name="get_colspec"&gt;
      &lt;xsl:with-param name="column" select="1"/&gt;
     &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:if test="position() = 4"&gt;
     &lt;xsl:call-template name="get_colspec"&gt;
      &lt;xsl:with-param name="column" select="2"/&gt;
     &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:if test="position() = 6"&gt;
     &lt;xsl:call-template name="get_colspec"&gt;
      &lt;xsl:with-param name="column" select="3"/&gt;
     &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:if test="position() = 8"&gt;
     &lt;xsl:call-template name="get_colspec"&gt;
      &lt;xsl:with-param name="column" select="4"/&gt;
     &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:if test="position() = 10"&gt;
     &lt;xsl:call-template name="get_colspec"&gt;
      &lt;xsl:with-param name="column" select="5"/&gt;
     &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:if test="position() = 12"&gt;
     &lt;xsl:call-template name="get_colspec"&gt;
      &lt;xsl:with-param name="column" select="6"/&gt;
     &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:if test="position() = 14"&gt;
     &lt;xsl:call-template name="get_colspec"&gt;
      &lt;xsl:with-param name="column" select="7"/&gt;
     &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:if test="position() = 16"&gt;
     &lt;xsl:call-template name="get_colspec"&gt;
      &lt;xsl:with-param name="column" select="8"/&gt;
     &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
&lt;!-- If the entry itself has align, we use that --&gt;
      &lt;xsl:if test="@align"&gt;
       &lt;xsl:attribute name="align"&gt;
        &lt;xsl:value-of select="@align"/&gt;
       &lt;/xsl:attribute&gt;
      &lt;/xsl:if&gt;
      &lt;xsl:apply-templates/&gt;
     &lt;/ttcol&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template name="get_colspec"&gt;
     &lt;xsl:param name="column"/&gt;
     &lt;xsl:if test="../../../../tgroup/colspec[$column]"&gt;
      &lt;xsl:attribute name="align"&gt;
       &lt;xsl:value-of 
        select="../../../../tgroup/colspec[$column]/@align"/&gt;
      &lt;/xsl:attribute&gt;
&lt;!-- Optionally colwidth, translate * to % --&gt;
      &lt;xsl:if test="../../../../tgroup/colspec[$column]/@colwidth"&gt;
       &lt;xsl:attribute name="width"&gt;
        &lt;xsl:value-of select="translate(
         ../../../../tgroup/colspec[$column]/@colwidth, '*', '%')"/&gt;
       &lt;/xsl:attribute&gt;
      &lt;/xsl:if&gt;
     &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;
&lt;!-- Table headers for CALS tables, Pandoc 1.9.x+ --&gt;
  &lt;xsl:template match="informaltable/tgroup/thead/row/entry"&gt;
   &lt;ttcol&gt;
    &lt;xsl:if test="position() = 2"&gt;
     &lt;xsl:call-template name="get_colspec_informal"&gt;
      &lt;xsl:with-param name="column" select="1"/&gt;
     &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:if test="position() = 4"&gt;
     &lt;xsl:call-template name="get_colspec_informal"&gt;
      &lt;xsl:with-param name="column" select="2"/&gt;
     &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:if test="position() = 6"&gt;
     &lt;xsl:call-template name="get_colspec_informal"&gt;
      &lt;xsl:with-param name="column" select="3"/&gt;
     &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:if test="position() = 8"&gt;
     &lt;xsl:call-template name="get_colspec_informal"&gt;
      &lt;xsl:with-param name="column" select="4"/&gt;
     &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:if test="position() = 10"&gt;
     &lt;xsl:call-template name="get_colspec_informal"&gt;
      &lt;xsl:with-param name="column" select="5"/&gt;
     &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:if test="position() = 12"&gt;
     &lt;xsl:call-template name="get_colspec_informal"&gt;
      &lt;xsl:with-param name="column" select="6"/&gt;
     &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:if test="position() = 14"&gt;
     &lt;xsl:call-template name="get_colspec_informal"&gt;
      &lt;xsl:with-param name="column" select="7"/&gt;
     &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:if test="position() = 16"&gt;
     &lt;xsl:call-template name="get_colspec_informal"&gt;
      &lt;xsl:with-param name="column" select="8"/&gt;
     &lt;/xsl:call-template&gt;
    &lt;/xsl:if&gt;
&lt;!-- If the entry itself has align, we use that --&gt;
      &lt;xsl:if test="@align"&gt;
       &lt;xsl:attribute name="align"&gt;
        &lt;xsl:value-of select="@align"/&gt;
       &lt;/xsl:attribute&gt;
      &lt;/xsl:if&gt;
      &lt;xsl:apply-templates/&gt;
     &lt;/ttcol&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template name="get_colspec_informal"&gt;
     &lt;xsl:param name="column"/&gt;
     &lt;xsl:if test="../../../../tgroup/colspec[$column]"&gt;
      &lt;xsl:attribute name="align"&gt;
       &lt;xsl:value-of
        select="../../../../tgroup/colspec[$column]/@align"/&gt;
      &lt;/xsl:attribute&gt;
&lt;!-- Optionally colwidth, translate * to % --&gt;
      &lt;xsl:if test="../../../../tgroup/colspec[$column]/@colwidth"&gt;
       &lt;xsl:attribute name="width"&gt;
        &lt;xsl:value-of
         select="translate(
         ../../../../tgroup/colspec[$column]/@colwidth,
         '*', '%')"/&gt;
       &lt;/xsl:attribute&gt;
      &lt;/xsl:if&gt;
     &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;
    &lt;xsl:template match="table/tbody/tr/td | 
     informaltable/tbody/tr/td |
     table/tgroup/tbody/row/entry |
     informaltable/tgroup/tbody/row/entry"&gt;
     &lt;c&gt;
      &lt;xsl:apply-templates/&gt;
     &lt;/c&gt;
    &lt;/xsl:template&gt;
&lt;!-- CALS table --&gt;
  &lt;xsl:template match="table/tbody/row/entry"&gt;
   &lt;c&gt;
    &lt;xsl:apply-templates/&gt;
   &lt;/c&gt;
  &lt;/xsl:template&gt;
 &lt;/xsl:stylesheet&gt;
 </artwork><postamble>XSLT used for the transformation.  </postamble></figure></section> </back>
</rfc>
