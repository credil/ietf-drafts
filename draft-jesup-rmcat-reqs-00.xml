<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="info" docName="draft-jesup-rmcat-reqs-00"
     ipr="trust200902">
  <front>
    <title abbrev="RMCAT congestion requirements">Congestion Control
    Requirements For RMCAT</title>

    <author fullname="Randell Jesup" initials="R." surname="Jesup">
      <organization>Mozilla</organization>

      <address>
        <postal>
          <street></street>

          <country>USA</country>
        </postal>

        <email>randell-ietf@jesup.org</email>
      </address>
    </author>

    <date day="15" month="Oct" year="2012" />

    <abstract>
      <t>Congestion control is needed for all data transported across the
      Internet, in order to promote fair usage and prevent congestion
      collapse. The requirements for interactive, point-to-point real time
      multimedia, which needs by low-delay, semi-reliable data delivery, are
      different from the requirements for bulk transfer like FTP or bursty
      transfers like Web pages, and the TCP algorithms are not suitable for
      this traffic.</t>

      <t>This document attempts to describe a set of requirements that can be
      used to evaluate other congestion control mechanisms in order to figure
      out their fitness for this purpose, and in particular to provide a set of 
      possible requirements for proposals coming out of the RMCAT Working Group.</t>

      <t>This document is derived from draft-jesup-rtp-congestion-reqs
      <xref target="I-D.jesup-rtp-congestion-reqs"></xref>.</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t>The traditional TCP congestion control requirements were developed in
      order to promote efficient use of the Internet for reliable bulk
      transfer of non-time-critical data, such as transfer of large files.
      They have also been used successfully to govern the reliable transfer of
      smaller chunks of data in "as fast as possible" mode, such as when
      fetching Web pages.</t>

      <t>These algorithms have also been used for transfer of media streams
      that are viewed in a non-interactive manner, such as "streaming" video,
      where having the data ready when the viewer wants it is important, but
      the exact timing of the delivery is not.</t>

      <t>When doing real time interactive media, the requirements are
      different; one needs to provide the data continuously, within a very
      limited time window (no more than 100s of milliseconds end-to-end
      delay), the sources of data may be able to adapt the amount of data that
      needs sending within fairly wide margins, and may tolerate some amount
      of packet loss, but since the data is generated in real time, sending
      "future" data is impossible, and since it's consumed in real time, data
      delivered late is useless.</t>

      <t>One particular protocol portofolio being developed for this use case
      is WebRTC <xref target="I-D.ietf-rtcweb-overview"></xref>, where one
      envisions sending multiple RTP-based flows between two peers, in
      conjunction with data flows, all at the same time, without having
      special arrangements with the intervening service providers.</t>

      <t>Given that this use case is the focus of this document, use cases
      involving noninteractive media such as YouTube-like video streaming, and
      use cases using multicast/broadcast-type technologies, are out of
      scope.</t>

      <t>The terminology defined in <xref
      target="I-D.ietf-rtcweb-overview"></xref> is used in this memo.</t>
    </section>

    <section title="Requirements">
      <t><list style="numbers">
          <t>The congestion control algorithm must attempt to provide
          low-delay transit for real-time traffic, even when faced with
          intermediate bottlenecks and competing flows. <list style="letters">
              <t>It should also deal well with routing changes and interface
              changes (WiFi to 3G data, etc) which may radically change the
              bandwidth available.</t>
            </list></t>

          <t>The algorithm must be fair to other flows, both realtime flows
          (such as other instances of itself), and TCP flows, both long-lived
          and bursts such as the traffic generated by a typical web browsing
          session. Note that 'fair' is a rather hard-to-define term. <list
              style="letters">
              <t>The algorithm must not overreact to short-term bursts (such
              as web-browsing) which can quickly saturate a local-bottleneck
              router or link, but also clear quickly, and should recover
              quickly when the burst ends.</t>
            </list></t>

          <t>The algorithm should where possible merge information across multiple RTP
          streams between the same endpoints, whether or not they're
          multiplexed on the same ports, in order to allow congestion control
          of the set of streams together instead of as multiple independent
          streams. This allows better overall bandwidth management, faster
          response to changing conditions, and fairer sharing of bandwidth
          with other network users. <list style="letters">
              <t>If possible, it should also share information and adaptation
              with other non-RTP flows between the same endpoints, such as a
              WebRTC data channel</t>
            </list></t>

          <t>The algorithm should not require any special support from
          network elements (ECN, etc). As much as possible, it should
          leverage existing information about the incoming flows to provide
          feedback to the sender. Examples of this information are the
          packet arrival times, acknowledgments and feedback, packet
          timestamps, packet sizes, packet losses. Extra information could
          be added to the packets to provide more detailed information on
          actual send times (as opposed to sampling times), but should not
          be required.<list style="letters">
              <t>When additional input signals such as ECN are available, they
              should be utilized if possible.</t>
            </list></t>

          <t>Since the assumption here is a set of RTP streams, the
          backchannel typically should be done via RTCP; the alternative
          would be to include it in a reverse RTP channel using header
          extensions. 
          <list style="letters">
              <t>In order to react sufficiently quickly, the AVPF/SAVPF RTP
              profile<xref target="RFC4585"> </xref> must be used</t>

              <t>Note that in some cases, backchannel messages may be delayed
              until the RTCP channel can be allocated enough bandwidth, even
              under AVPF rules. This may also imply negotiating a higher maximum
              percentage for RTCP data or allowing RMCAT solutions to violate or
              modify the rules specified for AVPF.</t>

              <t>Note that RTCP is of course unreliable</t>

              <t>Bandwidth for the feedback messages should be minimized (such
              as via RFC 5506 <xref target="RFC5506"></xref>to allow RTCP
              without SR/RR)</t>

              <t>Header extensions would avoid the RTCP timing rules issues,
              and allow the application to allocate bandwidth as needed for
              the congestion algorithm.</t>

              <t>Backchannel data should be minimized to avoid taking too
	      much reverse-channel bandwidth (since this will often be used
	      in a bidirectional set of flows). In areas of stability,
	      backchannel data may be sent more infrequently so long as
	      algorithm stability and fairness are maintained. When the
	      channel is unstable or has not yet reached equilibrium after
	      a change, backchannel feedback may be more frequent and use
	      more reverse-channel bandwidth.  This is an area with
	      considerable flexibility of design, and different approaches
	      to backchannel messages and fequency are expected to be
	      evaluated.</t>
            </list></t>

          <t>It should attempt to avoid bandwidth 'collapse' when facing a
          long-lived saturating TCP flow or flows. (I.e. a classic
          delay-sensitive algorithm will reduce bandwidth to keep delay down
          until the TCP flow has all the bandwidth). See the Cx-TCP algorithm
          discussed in a recent Transactions On Networking <xref
          target="cx-tcp"></xref> for an example of a delay-sensitive
          congestion-control algorithm that transitions to a loss-based mode
          when competing with TCP flows - at the cost of increased delay.</t>

          <t>The algorithm should be stable and low-delay when faced with
          active queue management (AQM) such as RED <xref target="RFC2309"></xref> 
	  or CoDel <xref target="I-D.nichols-tsvwg-codel"></xref> in the channel.</t>

          <t>The algorithm should quickly adapt to initial network conditions
          at the start of a flow; the adaptation may be faster than adaptation
          later in a flow. This should occur both if the initial bandwidth is
          above or below the bottleneck bandwidth. <list style="letters">
              <t>It should allow for both slow-start operation (adapt up) and
              history-based startup (start at a point expected to be at or
              below channel bandwidth from historical information, which may
              need to adapt down quickly if the initial guess is wrong).
              Starting too low and/or adapting up too slowly can cause a
              critical point in a personal communication to be poor
              ("Hello!").</t>
            </list></t>

          <t>Where possible, the algorithm should leverage and piggyback on
          other RTP/RTCP communications, such as SR/RR, rctp-fb PLI, RPSI, SLI or
          application-specific NACK messages (such as for loss
          information), and also reverse-direction RTP.</t>

          <t>It should be evaluated in how it works both with
          backbone-router bottlenecks, (asymmetric) local-loop bottlenecks,
          and local-lan (WiFi/etc) bottlenecks, and in competition with
          varying numbers and types of streams (TCP, TCP variants in use,
          LEDBAT <xref target="I-D.ietf-ledbat-congestion"></xref>, inflexible VoIP UDP flows).</t>

          <t>The algorithm should sense the unexpected lack of backchannel
          information as a possible indication of a channel overuse problem
          and react accordingly to avoid burst events causing a congestion
          collapse.</t>

          <t>It should be stable if the RTP streams are halted or
          discontinuous (VAD/DTX); after a resumption of RTP data it may adapt
          more quickly (similar to the start of a flow).</t>
        </list></t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes no request of IANA.</t>

      <t>Note to RFC Editor: this section may be removed on publication as an
      RFC.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>An attacker with the ability to delete, delay or insert messages in
      the flow can fake congestion signals, unless they are passed on a
      tamper-proof path. Since some possible algorithms depend on the timing
      of packet arrival, even a traditional protected channel does not fully
      mitigate such attacks.</t>

      <t>An attack that reduces bandwidth is not necessarily significant,
      since an on-path attacker could break the connection by discarding all
      packets. Attacks that increase the percieved available bandwidth are
      concievable, and need to be evaluated.</t>

      <t>Algorithm designers SHOULD consider the possibility of malicious
      on-path attackers.</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>This document is the result of discussions in various fora of the
      WebRTC effort, in particular on the rtp-congestion@alvestrand.no mailing
      list. Many people contributed their thoughts to this.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include='reference.RFC.4585'?>

      <?rfc include='reference.I-D.ietf-rtcweb-overview'?>
    </references>

    <references title="Informative References">
      <?rfc include='reference.RFC.2309'?>
      <?rfc include='reference.RFC.5506'?>

      <?rfc include='reference.I-D.jesup-rtp-congestion-reqs'?>
      <?rfc include='reference.I-D.nichols-tsvwg-codel'?>
      <?rfc include='reference.I-D.ietf-ledbat-congestion'?>

      <reference anchor="cx-tcp">
        <front>
          <title>On the Fair Coexistence of Loss- and Delay-Based TCP</title>

          <author fullname="Lukasz Budzisz" initials="L." surname="Budzisz">
            <organization>B</organization>
          </author>

          <author fullname="Rade Stanojevic" initials="R."
                  surname="Stanojevic">
            <organization></organization>

            <address>
              <postal>
                <street></street>

                <city></city>

                <region></region>

                <code></code>

                <country></country>
              </postal>

              <phone></phone>

              <facsimile></facsimile>

              <email></email>

              <uri></uri>
            </address>
          </author>

          <author fullname="Arieh Schlote" initials="A." surname="Schlote">
            <organization>S</organization>

            <address>
              <postal>
                <street></street>

                <city></city>

                <region></region>

                <code></code>

                <country></country>
              </postal>

              <phone></phone>

              <facsimile></facsimile>

              <email></email>

              <uri></uri>
            </address>
          </author>

          <author fullname="Fred Baker" initials="F." surname="Baker">
            <organization>F</organization>

            <address>
              <postal>
                <street></street>

                <city></city>

                <region></region>

                <code></code>

                <country></country>
              </postal>

              <phone></phone>

              <facsimile></facsimile>

              <email></email>

              <uri></uri>
            </address>
          </author>

          <author fullname="Robert Shorten" initials="R." surname="Shorten">
            <organization></organization>

            <address>
              <postal>
                <street></street>

                <city></city>

                <region></region>

                <code></code>

                <country></country>
              </postal>

              <phone></phone>

              <facsimile></facsimile>

              <email></email>

              <uri></uri>
            </address>
          </author>

          <date month="December" year="2011" />

          <note title="Publisher">
            <t>IEEE/ACM Transactions on Networking, vol. 19 no. 6, December
            2011</t>
          </note>

          <note title="URL:">
            <t>http://www.networks.imdea.org/Portals/7/Descargas/Publicaciones/On_the_Fair_Coexistence__-_2011_EN.pdf</t>
          </note>
        </front>
      </reference>
    </references>
  </back>
</rfc>
