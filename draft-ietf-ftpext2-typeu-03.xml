<?xml version="1.0" encoding="US-ASCII"?>

<!--
	 -->
	 
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [

<!ENTITY rfc2119 PUBLIC ''
       "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc0114 PUBLIC ''
       "http://xml.resource.org/public/rfc/bibxml/reference.RFC.0114.xml">
<!ENTITY rfc0373 PUBLIC ''
       "http://xml.resource.org/public/rfc/bibxml/reference.RFC.0373.xml">
<!ENTITY rfc0959 PUBLIC ''
       "http://xml.resource.org/public/rfc/bibxml/reference.RFC.0959.xml">
<!ENTITY rfc1123 PUBLIC ''
       "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1123.xml">
<!ENTITY rfc2640 PUBLIC ''
       "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2640.xml">
<!ENTITY rfc2389 PUBLIC ''
       "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2389.xml">
<!ENTITY rfc3629 PUBLIC ''
       "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY rfc3659 PUBLIC ''
       "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3659.xml">
<!ENTITY rfc5198 PUBLIC ''
       "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5198.xml">
<!ENTITY rfc5234 PUBLIC ''
       "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY rfc5797 PUBLIC ''
       "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5797.xml">
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<!-- Try to enforce the ID-nits conventions and DTD validity -->
<?rfc strict="no" ?>

<!-- Create Table of Contents (ToC) and set some options for it.  
     Note the ToC may be omitted for very short documents, but idnits insists on
     a ToC if the document has more than 15 pages. -->
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<!-- If "yes" eliminates blank lines before main section entries. -->
<?rfc tocdepth="3"?>
<!-- Sets the number of levels of sections/subsections... in ToC -->

<!-- These two save paper: Just setting compact to "yes" makes
savings by not starting each main section on a new page but does not
omit the blank lines between list items. If subcompact is also "yes"
the blank lines between list items are also omitted. -->   
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<!-- Expand crefs and put them inline -->
<?rfc comments='yes' ?>
<?rfc inline='yes' ?>  

<!-- RFC references as names, not numbers -->
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>

<!-- When yes, insert editing marks: editing marks consist of a 
     string such as <29> printed in the blank line at the 
     beginning of each paragraph of text. -->
<?rfc editing="no" ?>

<!-- Information about the document.
     category values: std, bcp, info, exp, and historic
     For Internet-Drafts, specify attribute "ipr".
     (ipr values are: full3978, noModification3978, noDerivatives3978),
     Also for Internet-Drafts, you must specify a value for attributes "docName"
     which is typically the file name under which it is filed - but need not be -
     and,if relevant,"iprExtract". Note that the value for iprExtract is the
     anchor attribute value of a section (such as a MIB specification) that can
     be extracted for separate publication, and is only useful when the value of
     "ipr" is not "full3978". -->

<rfc ipr="pre5378Trust200902" docName="draft-ietf-ftpext2-typeu-03a"
	 category="std" updates="959">

  <!-- ***** FRONT MATTER ***** -->

  <front>
	<title abbrev="FTP Unicode TYPE">
	   FTP TYPE Extension for Internationalized Text
	</title>

    <author fullname="John C Klensin" initials="J.C."
			 surname="Klensin" >
      <organization/>
      <address>
        <postal>
          <street>1770 Massachusetts Ave, Ste 322</street>
          <city>Cambridge</city> <region>MA</region>
          <code>02140</code>
          <country>USA</country>
        </postal>
        <phone>+1 617 245 1457</phone>
        <!-- facsimile phone number and URI if appropriate -->
        <email>john+ietf@jck.com</email>
      </address>
    </author>

    <date month="March" day="12" year="2012" />

	<area> Applications </area>
	<workgroup> FTPEXT2 </workgroup>
	<keyword> FTP </keyword>
	<keyword> Unicode </keyword>
	<keyword> UTF-8 </keyword>
	<keyword> TYPE </keyword>

    <abstract>
      <t>The traditional FTP protocol includes a TYPE command to specify
		 the data representation.  That command has values for ASCII and
		 EBCDIC text, plus binary ("IMAGE") transmission.  As the
		 Internet becomes more international, there is a growing
		 requirement to be able to transmit textual data, encoded in
		 Unicode, in a way that is independent of the coding and line
		 representation forms of particular operating systems.  This
		 memo specifies a new FTP representation TYPE value for
		 Unicode data.</t> 
    </abstract>
	
  </front>

  <middle>
    <section title="Introduction" anchor="intro">
    	<section title="Context and Overview">
		   <t>The traditional FTP protocol, as documented in
			  <xref target="RFC0959">RFC 959</xref>, includes a TYPE
			  command to specify the data representation.  That
			  command was originally specified as having values for
			  ASCII and  
			 EBCDIC text, plus binary ("IMAGE") transmission.  The
			 Host Requirements specification <xref target="RFC1123"/>
			 made other changes to FTP, but did not alter the TYPE
			 command or the environment for which it provided.</t>
		   <t>As the Internet becomes more international, there is a growing
			 requirement to be able to transmit textual data, encoded in
			 <xref target="Unicode">Unicode</xref>, in a way that is
			 independent of the coding and line 
			 representation forms of particular operating systems.  This
			 memo specifies a new FTP TYPE value for Unicode data.</t>
		</section>
		<section title="Summary of History of Internationalization of FTP">
		   <t> <xref target="RFC2640">RFC 2640</xref> is described as
			  providing internationalization of FTP, but only
			  addresses the use of FTP in internationalized
			  (non-ASCII or extended ASCII <xref target="ASCII"/>)
			  file systems.  Its facilities were slightly enhanced in
			  a more general extensions specification
			  <xref target="RFC3659"/>, which builds on a more general
			  FTP extension mechanism <xref target="RFC2389"/>.  The
			  specification in this
			  document addresses the transfer of non-ASCII text files
			  only, building on the TYPE command of the original FTP
			  specification <xref target="RFC0959"/>.</t>
		</section>
		<section title="History of the TYPE Command"
				anchor="FTPHistory">
		   <t>[[Note in Draft: AppsAWG: please decide whether this
			  subsection should be included in the final version as
			  informative or dropped as surplus text that doesn't
			  contribute to an implementer understanding of what
			  should be done.]]</t>
		   <t>When the FTP protocol was first defined in 1971
			  <xref target="RFC0114"/>, hosts on the ARPANET were
			  extremely diverse.  ASCII and EBCDIC were both in active
			  use, as were several completely different character
			  encodings, and ASCII was encoded in a variety of
			  different forms inside different systems (TENEX/TOPS-20,
			  Multics, Unix on 16 and then 32 bit architectures, and the
			  original IBM ASCII all used different encodings. In
			  mid-1972, the late John McCarthy described some aspects of the
			  issues <xref target="RFC0373"/>.  Within a relatively
			  short period of time, it was understood that expecting
			  every system to adapt to the formats of every other
			  system -- a fairly large n-squared problem -- was crazy.
			  At least for text, the solution was to expect all
			  FTP-supporting hosts to convert between their local
			  formats and a network-standard ASCII encoding and,
			  optionally, to also identify, and permit, EBCBIC files to be
			  transferred in canonical form.  The TYPE command was
			  incorporated into FTP to support client specification of
			  those forms for on-the-wire transfer and also to support
			  a pair of TYPEs to
			  support transferring data in forms that were likely to
			  be operating system and hardware specific
			  (see <xref target="ExistingTypes"/> for more
			  details).</t>
		   <t>Because of the need to handle these different text
			  character sets and encoding forms without that n-squared
			  problem, TYPE was very commonly used unless it was known
			  that the sending and receiving systems were
			  homogeneous.  Several arrangements for single-line FTP
			  commands did not make explicit provision for TYPE
			  specifications, but they tended to make exactly that
			  homogeneity assumption.</t>
		   <t>By the late 1980s, the ARPANET was converging toward a
			  single basic host system architecture.  Almost all significant computer
			  systems used 32 bit architectures or felt an obligation
			  to be able to simulate them.  EBCDIC had fallen into
			  disuse on the network.  ASCII, encoded
			  right-justified in eight bits with a leading zero, had
			  become pervasive.   An Image transfer among diverse
			  systems might well encounter differences with line
			  termination or, occasionally, record structures rather
			  than stream ones (both of which TYPE A would have
			  smoothed out), but 
			  the character encodings were almost certain to be the
			  same.   So, with allowances for those line termination
			  problems -- which have been a large issue in many
			  cases -- Image ("binary") and ASCII transfers were
			  almost equivalent and the TYPE command became
			  less-used.  Some client FTP implementations also adopted
			  an "automatic" mode in which they tried to determine
			  heuristically, based on either file names or content
			  inspection, whether the relevant file consisted of
			  ASCII characters or binary information and to send the
			  appropriate TYPE command without user intervention.
			  Because there were usually only two choices in
			  practice, they often (but not always) got it 
			  right.</t>
		   <t>However, migration to Unicode has reintroduced many of
			  the old issues.  When Unicode is used inside a system,
			  it can be used with several different encodings (e.g.,
			  UTF-8 and several variations on UTF-16 (possibly with
			  surrogate pairs), 
			  different assumptions about normalization (see
			  "Terminology for Use in Internationalization"
			  <xref target="i18n-terms"/> for more discussion) and
			  even new variations on line termination conventions.  When
			  those files are transferred to another system with Image
			  type, the result may be completely uninterpretable on
			  the target system.  This specification extends to
			  non-ASCII character transfers the early
			  concept of having a very small number of common/
			  canonical network transfer formats for characters,
			  having systems able to convert to or from them.  By
			  doing so, it avoids a Unicode version of the n-squared
			  problems and the general confusion that led to the
			  definition of TYPE. </t>
		</section>
		   
	    <section title="Terminology">
		 <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
		   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
		   document are to be interpreted as described in
		   <xref target="RFC2119"/>.</t>
		 <t>This document assumes that the reader is familiar with the
			terminology of RFC 959.  Those terms, especially reply,
			server-FTP process, user-FTP process, server-PI, user-PI,
			logical byte size,
			and user, if used here, are used in the same way.
			<!-- It also
			uses the ABNF of <xref target="RFC2389"/> and
			<xref target="RFC5234"/> in preference to
			the BNF of RFC 959. -->    For the convenience of contemporary
			readers, the terms "client" and "server" are used
			interchangeably with the historic terms "user-FTP process"
			and "server-FTP process".  The document also assumes the
			termology and changes in the
			updates to FTP specified in RFC 1123 and
			<xref target="RFC2389">RFC 2389</xref>.</t>
		</section>
		<section title="Discussion List">
		   <t><cref> RFC Editor: please remove this section before
			  publication.</cref></t>
		   <t> This proposal is being discussed in the IETF FTPEXT2
			  Working Group.  Its mailing list is at ftpext@ietf.org.
			  </t>
		</section>

	</section>  <!-- end of intro -->

    <section title="Specification">
	   <section title="Existing TYPEs" anchor="ExistingTypes">
	   <t> The FTP TYPE command, described
		  in <xref target="RFC0959"/> accepts four possible first
		  argument values,
		  as described below.  Note that the descriptions in this
		  subsection are provided for the reader's convenience; the
		  definitions in RFC 959 remain normative.
		  <list style="hanging">
			 <t hangText="A"> The data are expected to be in, and
				are transformed by the server if needed to, an ASCII
				<xref target="ASCII"/>
				data stream conforming to the "NVT" specification (See
				<xref target="RFC0959">RFC 959</xref> and
				<xref target="RFC5198">Appendix B of RFC 5198</xref>
				for more information). </t>
			 <t hangText="E"> The data are expected to be in, and
				are transformed by the server if needed to, an EBCDIC
				data stream as specified in RFC 959.</t>
			 <t hangText="I"> The data are transferred in "image"
				form, i.e., exactly as they appear in the server.
				Because it is the only TYPE form in which true binary data
				can be transferred, TYPE I is often referred to as
				"binary" or "binary transfer".</t>
			 <t hangText="L"> The data are transmitted in logical
				bytes of a size specified in an additional argument.
				See RFC 959.</t>
			 </list></t>
		  <t>Any of these four argument variations to TYPE except "TYPE
			 A" (with non-print format) MAY be
			 rejected by the server-FTP process with a 504 response
			 code if it does not support that type and the necessary
			 conversions.</t>
	   </section>
	   <section title="Unicode TYPE">
		  <t>The client-PI MAY transmit TYPE U to the server-PI as an
			 alternative to other TYPE commands and arguments.   If it
			 does, the server MAY return reply-code 504, indicating
			 that the TYPE U feature is not supported (unchanged from
			 RFC 959) or MUST respond to any data retrieval request
			 (e.g., RETR) by sending the data in a stream conformant to
			 the Net-Unicode format specified in
			 <xref target="FTPNetUnicode"/>.   Similarly, if the
			 client-PI sends TYPE U and the server accepts it, the
			 client MUST send any data streams in that format while
			 the option is in effect.   No second parameter is used
			 or permitted for TYPE U.</t>
	   </section>
	   <section title="Data Structure">
		  <t>The default and only permitted data structure for TYPE U
			 is "file structure".   Use of the STRU command SHOULD be
			 avoided.   If is used, its argument MUST be "F".</t>
	   </section>
	   
	   <section title="Feature Negotiation">
		  <t> <xref target="RFC2389">RFC 2389</xref> specifies a
			 feature negotiation mechanism for new extensions to FTP.
			 Since the TYPE command is a required part of the
			 base FTP specification, the client-PI is not required to
			 issue the FEAT command prior to issuing TYPE U.
			 However, it MAY do so and Server-FTP implementations that
			 include TYPE U SHOULD support FEAT as described below.
			 If the FEAT command is 
			 transmitted from the client-PI to the server-PI, and this
			 extension and FEAT are supported, the response MUST
			 include a TYPE 
			 line that lists all TYPE values supported by the server
			 (including the required ones).   For example, if an
			 FTP-server supports all of TYPEs A, E, I, and U, the FEAT
			 response line would contain each of the possible
			 arguments separated by semicolons, e.g.,</t>
		  <t><list style="empty"><t>  TYPE A;E;I;U</t></list></t>
		  <t> This specification does not change either RFC 959 or
			 RFC 2389.  In particular, no FEAT response line is required
			 for TYPE unless this, or some other, extension to TYPE is
			 supported by the FTP-server.</t>
	</section>
	</section>

	<section title="Net-Unicode Format for FTP" anchor="FTPNetUnicode">
		  <t>This section specifies a profile of Net-Unicode
			 <xref target="RFC5198"/> for use with FTP TYPE U.</t>
		  <t> Unicode characters must be transmitted in
			 <xref target="RFC3629">UTF-8</xref> as
			 specified for Net-Unicode.   Because FTP is used
			 in data transmission, the characters and sequences that
			 are discouraged in Section 2 of RFC 5198 are permitted to be
			 transported by FTP.  However, line-ending sequences MUST
			 conform to the CRLF convention specified there.
			 Consistent with Paragraph 4 of that Section, strings
			 SHOULD be normalized before transmission if at all
			 possible.  </t>
		  <t> The implicit logical byte size for this transmission
			 type is eight bits. </t>

    </section>
	
    <section anchor="Acknowledgments" title="Acknowledgments">
	   <t>This document draws heavily on RFC 959;
		  appreciation is expressed to its authors and to the authors
		  of RFC 2398.  The work of Mark
		  P. Peterson and Douglas J. Papenthien on other FTP
		  extensions finally motivated production of this document in
		  2008 after a long delay; that contribution is appreciated as
		  well.
		  Specific useful comments on this draft or its immediate
		  predecessors were provided by the late and much-lamented
		  Mike Padlipsky and by Mykyta Yevstifeyev. </t> 
    </section>
 
    <section anchor="IANA" title="IANA Considerations">
	   <t>When this specification is approved, IANA is requested to
		  add an additional table to the FTP Extensions Registry
		  established by <xref target="RFC5797">RFC 5797</xref>.  That
		  table should be titled "TYPE command arguments" and should
		  include "A (m) RFC 959", "E (o) RFC 959", "I (o) RFC 959",
		  "L (o) RFC 959", and "U (o) RFCNNNN". </t> 
    </section>

    <section anchor="Security" title="Security Considerations">
	   <t> This specification makes no substantive change to the FTP
		  command stream (the argument to the standard TYPE
		  command is changed).  It only alters the presentation of data in
		  the data stream.  Consequently, it should have no negative
		  security implications that are not already present in
		  the earlier FTP specifications described in
	      <xref target="intro"/> and in the Net-Unicode specification
		  <xref target="RFC5198"/>.   By specifying an exact canonical
		  form for the identification and transfer of Unicode strings,
		  it may eliminate some problems that might be encountered
		  when such strings are transmitted without identification or
		  without restrictions (e.g., using TYPE I to obtain a
		  "binary" transfer).</t>
    </section>
	
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
	 
    <references title="Normative References">

	   &rfc2119;   <!-- IETF terminology: MUST, SHOULD, etc. -->
	   &rfc0959;   <!-- FTP base spec -->
	   &rfc2389;	<!-- FTP feature negotiation -->
	   &rfc3629;   <!-- UTF-8 -->
	   &rfc5198;   <!-- Net-Unicode -->
	   <!-- &rfc5234;	 ABNF -->
	   
<reference anchor='ASCII'>
        <front>
          <title>USA Code for Information Interchange</title>
          <author>
            <organization abbrev="ANSI">
              American National Standards Institute
                (formerly United States of America Standards Institute)
	    </organization>
          </author>
          <date year="1968"/>
        </front>
      <seriesInfo name="ANSI" value="X3.4-1968" />
      <annotation>ANSI X3.4-1968 has been replaced by newer
	  versions with slight modifications, but the 1968 version
	  remains definitive for the Internet. </annotation>
      </reference>
	  
<!-- Unicode -->
	   <reference anchor="Unicode" target="http://www.unicode.org/versions/Unicode6.0.0/">
            <front>
      <title abbrev="Unicode 6.0">
         The Unicode Standard, Version 6.0.0
             </title>
        <author>
        <organization>The Unicode Consortium.  The Unicode Standard,
		   Version 6.0.0, defined by:</organization> 
        <address />
        </author>
        </front>
         <seriesInfo name="(Mountain View, CA: The Unicode Consortium, 2011."
					value="ISBN 978-1-936213-01-6)." />
          </reference>

    </references>

    <references title="Informative References">

	   &rfc0114;    <!-- 1971 initial FTP spec -->
	   &rfc0373;    <!-- McCarthy on multiple character sets -->
	   &rfc1123;	<!-- host requirements -->
	   &rfc2640;	<!-- FTP file system i18n -->
	   &rfc3659;	<!-- FTP extensions: listing formats, restart,
					   some file system i18n -->
	   &rfc5797;	<!-- FTP extensions registry -->

<reference anchor="i18n-terms"
     target="https://datatracker.ietf.org/doc/draft-ietf-appsawg-rfc3536bis/">
	<front>
	<title abbrev="Internationalization Terminology">
	Terminology Used in Internationalization in the IETF</title>
	<author initials='P.' surname="Hoffman" fullname='Paul Hoffman'>
	   <organization/>
	</author>
	<author fullname="John C Klensin" initials="J."
				 surname="Klensin" >
	   <organization/>
	</author>
	<date month="June" day="9" year="2011"/>
	</front>
</reference>
	   
	   	   
    </references>    <!-- end of all references -->




    <section title="Change Log">
	   <t><cref>RFC Editor: Please remove this section</cref></t>
	   <section title="New Version and File Name: draft-ietf-ftpext2-typeu-00">
		  <t>This version of the document is a slight update to
			 draft-klensin-ftp-typeu-00, posted in July 2008).  It
			 includes some updated references to work completed in the
			 interim, information about the FTPEXT2 WG, a new Security
			 Considerations section (omitted from the prior draft),
			 and a few other minor corrections.</t>
	   </section>
	   <section title="Version -01">
		  <t><list style="symbols">
			 <t>Corrected a typographical error in the -00 change log
				entry and made a cosmetic change to that section.</t>
			 <t>Added additional metadata. </t>
			 <t>Added a new introductory subsection
				(<xref target="FTPHistory"/>) to clarify the
				relationship of this spec to FTP's development and
				some other ongoing discussions in the IETF.</t>
		  </list></t>
	   </section>
	   <section title="Version -02">
		  <t><list style="symbols">
			 <t>Changed title per suggestion from Mykyta
				Yevstifeyev</t>
			 <t>Removed reference to ABNF since it turned out to be
				possible to write the document without it.</t>
			 <t>Rewrote the IANA Considerations to specify a table for
				TYPE argument values.</t>
			 <t>Made a number of other relatively minor corrections
				and clarifications.</t>
			 <t>Updated Unicode reference to 6.0.</t>
			 <t>Moved this section to an appendix for easier handling
				later.</t>
		  </list></t>
	   </section>
	   <section title="Version -03">
		  <t><list style="symbols">
			 <t>Draft reissued to reactivate it.</t>
			 <t>Many small editorial changes and clarifications with
				no substantive change to the specification itself.</t>
		  </list></t>
	   </section>

	 </section>	
  </back>
</rfc>
