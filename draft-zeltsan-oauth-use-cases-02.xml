<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<!-- used by XSLT processors -->

<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>

<?rfc symrefs="yes"?>

<?rfc sortrefs="no" ?>
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>


<rfc docName="draft-zeltsan-oauth-use-cases-02" 
	category="info" 
	ipr="trust200902"
> 

<front>

<title>
OAuth Use Cases</title>

<author fullname="George Fletcher" initials="G."
			surname="Fletcher">
			<organization>AOL</organization>
			<address>
				<email>gffletch@aol.com</email>

				<!-- uri and facsimile elements may also be added -->
			</address>
</author>
		
<author fullname="Torsten Lodderstedt" initials="T."
			surname="Lodderstedt">
			<organization>Deutsche Telekom AG</organization>
			<address>
				<email>torsten@lodderstedt.net</email>

				<!-- uri and facsimile elements may also be added -->
			</address>
</author>

<author fullname="Zachary Zeltsan" initials="Z." 
            surname="Zeltsan">
      <organization>Alcatel-Lucent</organization>

      <address>
        <postal>
          <street>600 Mountain Avenue</street>

          <!-- Reorder these if your country does things differently -->

          <city>Murray Hill</city>

          <region>New Jersey</region>

          <code></code>

          <country>USA </country>
        </postal>

        <phone>+1 908 582 2359</phone>

        <email>Zachary.Zeltsan@alcatel-lucent.com</email>

      </address>
    </author>


<date month="July" year="2011"/>

<area>Applications</area>
<workgroup>OAUTH WG</workgroup>
<keyword>I-D</keyword>
<keyword>Internet-Draft</keyword>

<abstract>
<t>This document lists the OAuth use cases. The document's objective is to identify the 
use cases that will be a base for deriving the OAuth requirements. The provided list is 
based on the Internet-Drafts of the OAUTH working group and discussions on the group's mailing list.
</t>
</abstract> 

</front>

<middle>


<section title="Introduction">

<t>The need for documenting the OAuth use cases was discussed at the oauth WG virtual meetings, on
the group's mailing list, and at the IETF 77 and IETF 78. This Internet-Draft describes such use cases. 
The objective of the draft is to initiate discussion that will lead to defining a set of the use cases 
that the OAuth specifications should support.

The following section provides the abbreviated descriptions of the use cases. 
<vspace blankLines="1"/>
Note: The use of the string ".example.com" in the URLs of the example entities does not mean that the entities 
belong to the same organization. 
</t>

</section> <!-- Introduction -->

<section title="Notational Conventions">

<t>   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in <xref target="RFC2119" />.
</t>
</section> <!-- Notational Conventions -->

<section title="OAuth use cases">
<t>This section lists the use cases that have been discussed by the oauth WG. 
  </t>


<section title="Web server">
<t>
<vspace blankLines="0"/>
Description: <vspace blankLines="1"/>
Alice accesses an application running on a web server at www.printphotos.example.com and instructs it to print 
her photographs that are stored on a server www.storephotos.example.com. The application at www.printphotos.example.com 
receives Alice's authorization for accessing her photographs without learning her authentication credentials 
with www.storephotos.example.com.
</t>

<t>Pre-conditions:
<list style='symbols'>
<t> Alice has registered with www.storephotos.example.com to enable authentication
</t>
<t>The application at www.printphotos.example.com has established authentication credentials with the application 
at www.storephotos.example.com	
</t>

</list>
</t>

<t>Post-conditions:
<vspace blankLines="1"/>
A successful procedure results in the application www.printphotos.example.com receiving an authorization code from 
www.storephotos.example.com. The code is bound to the application at www.printphotos.example.com and to the callback 
URL supplied by the application. The application at www.printphotos.example.com uses the authorization code for 
obtaining an access token from www.storephotos.example.com. The application at www.storephotos.example.com issues 
an access token after authenticating the application at www.printphotos.example.com and validating the authorization 
code that it has submitted. The application at www.printphotos.example.com uses the access token for getting access 
to Alice's photographs at www.storephotos.example.com.
<vspace blankLines="1"/>
Note: When an access token expires, the service at www.printphotos.example.com needs to repeat the OAuth procedure 
for getting Alice's authorization to access her photographs at www.storephotos.example.com. Alternatively, if 
Alice wants to grant the application a long lasting access to her resources at www.storephotos.example.com, 
the authorization server associated with www.storephotos.example.com may issue the long-living tokens. 
Those tokens can be exchanged for short-living access tokens required to access www.storephotos.example.com.
</t>

<t>Requirements:
<list style='symbols'>
<t>The server www.printphotos.example.com, which hosts an OAuth client, must be capable of issuing the HTTP redirect 
requests to Alice's user agent - a browser
</t>
<t>Application at www.storephotos.example.com must be able to authenticate Alice. The authentication method is not in the 
OAuth scope 
</t>
<t>Application at www.storephotos.example.com must obtain Alice's authorization of the access to her photos by 
www.printphotos.example.com
</t>
<t>Application at www.storephotos.example.com may identify to Alice the scope of access that www.printphotos.example.com 
has requested while asking for Alice's authorization
</t>
<t>Application at www.storephotos.example.com must be able to authenticate the application at www.printphotos.example.com 
and validate the authorization code before issuing an access token. The OAuth 2.0 protocol <xref target="I-D.draft-ietf-oauth-v2" /> specifies 
one authentication method that MAY be used for such authentication - Client Password Authentication. 

</t> 
<t>Application at www.printphotos.example.com must provide a callback URL to the application at www.storephotos.example.com 
(note: the URL can be pre-registered with www.storephotos.example.com)
</t>
<t>Application at www.storephotos.example.com is required to maintain a record that associates the authorization code 
with the application at www.printphotos.example.com and the callback URL provided by the application 
</t>
<t>Access tokens are bearer's tokens (they are not associated with a specific application, such as 
www.printphotos.example.com) and should have a short lifespan
</t>
<t>Application at www.storephotos.example.com must invalidate the authorization code after its first use
</t>
<t>Alice's manual involvement in the OAuth authorization procedure (e.g., entering an URL or a password) should not be 
required. (Alice's authentication to www.storephotos.example.com is not in the OAuth scope. Her registration with
www.storephotos.example.com is required as a pre-condition)
</t>
</list>
</t>

</section>

<section title="User-agent">
<t>

<vspace blankLines="0"/>
Description: <vspace blankLines="1"/>
Alice has installed on her computer a gaming application. She keeps her scores in a database 
of a social site at www.fun.example.com. In order to upload Alice's scores, the application 
gets access to the database with her authorization.
</t>

<t>Pre-conditions:
<list style='symbols'>
<t> Alice has installed a gaming application implemented in a scripting language (e.g., 
JavaScript) that runs in her browser and uses OAuth for accessing a social site at 
www.fun.example.com
</t>
<t> There is no a web site supporting this application and capable of handling the OAuth flow, 
so the gaming application needs to update the database itself
</t>
<t>
The installed application is registered with the social site at www.fun.example.com and 
has an identifier
</t>

<t>Alice has registered with www.fun.example.com for identification and authentication
</t>

<t> An auxiliary web server at www.help.example.com is reachable by Alice's browser and 
capable of providing a script that extracts an access token from an URL's fragment 
</t>

</list>
</t>
<t>Post-conditions:

<vspace blankLines="1"/>
A successful procedure results in Alice's browser receiving an access token. The access token 
is received from www.fun.example.com as a fragment of a redirection URL of an auxiliary 
web server www.help.example.com. Alice's browser follows the redirection, but retains the 
fragment. From the auxiliary web server at www.help.example.com Alice's browser downloads 
a script that extracts access token from the fragment and makes it available to the gaming 
application. The application uses the access token to gain access to Alice's data 
at www.fun.example.com.
</t>
<t>Requirements:
<list style='symbols'>

<t>
Registration of the application running in the Alice's browser with the application running 
on www.fun.example.com is required for identification
</t>

<t> Alice's authentication with www.fun.example.com is required
</t>
<t> Application running at www.fun.example.com must be able to describe to Alice the request made by 
the gaming application running on her computer and obtain Alice's authorization for or denial of the 
requested access
</t>
<t> After obtaining Alice's authorization the application running at www.fun.example.com must respond with 
an access token and redirect Alice's browser to a web server (e.g., www.help.example.com) that is  capable 
of retrieving an access token from an URL
</t>

</list>
</t>
</section>

<section title="In-App-Payment (based on Native Application)">
<t>

<vspace blankLines="0"/>
Description: <vspace blankLines="1"/>
Alice has installed on her computer a gaming application (e.g., running as native code or as a widget). At some point she wants to play the next level of the 
game and needs to purchase an access to the advanced version of the game from her service provider at 
www.sp.example.com. With Alice's authorization the application accesses her account at www.sp.example.com and 
enables her to make the payment. 
</t>

<t>Pre-conditions:
<list style='symbols'>
<t>Alice has registered and has an account with her service provider at www.sp.example.com
</t>

<t>The application is registered with the service provider at www.sp.example.com. This enables the server provider 
to provide Alice with all necessary information about the gaming application (including the information about the 
purchasing price)
</t>
<t>
Alice has a Web user-agent (e.g., a browser or a widget runtime) installed on her computer
</t>

</list>
</t>
<t>Post-conditions:

<vspace blankLines="1"/>
A successful procedure results in the gaming application invoking the user browser and directing it to the 
authorization server of the service provider. The HTTP message includes information about the gaming application's 
request to access Alice's account. The authorization server presents to Alice the authentication and authorization 
interfaces. The authorization interface shows Alice the information about the application's request including the 
requested charge to her account. After Alice successfully authenticates and authorizes the request, 
the authorization server enables Alice to save the transaction details including the authorization code issued 
for the gaming application. Then the authorization server redirects Alice's browser to a custom scheme URI 
(registered with the operating system). 
This redirection request contains a one-time authorization code and invokes a special application that is able to extract 
the authorization code and present it to the gaming application. The gaming application presents the authorization 
code to the authorization server and exchanges it for a one-time access token. The gaming application then uses the access 
token to get access to Alice's account and post the charges at www.sp.example.com.
</t>
<t>Requirements:
<list style='symbols'>

<t>
An authorization server associated with the server at www.sp.example.com must be able to authenticate Alice
over a secure transport
</t>
<t>
An authorization server associated with the server at www.sp.example.com must be able to provide Alice with 
information about the access request that the gaming application has made (including the amount that is to be 
charged to her account with the service provider, and the purpose for the charge) over a secure transport
</t>
<t> 
An authorization server associated with the server at
      www.sp.example.com must be able to obtain Alice's authorization
      decision on the request over a secure transport
</t>
<t>
An authorization server associated with the server at
      www.sp.example.com must be able to generate on demand a one-time authorization code and a one-time 
access token according to the scope authorized by Alice
</t>
<t>
An authorization server associated with the server at
      www.sp.example.com must be able to call back to the gaming application with the 
authorization result over a secure transport
</t>
<t>
An authorization server associated with the server at
      www.sp.example.com must enable the gaming application to exchange an authorization code for an access token 
over a secure transport
</t>

<t> 
* An authorization server associated with the server at  www.sp.example.com must verify the authorization code 
and invalidate it after its first use
</t>

<t>
* An authorization server associated with the server at
      www.sp.example.com must enable Alice to save the details of the
      requested transaction, including the authorization code
</t>

<t>
* An authorization server associated with the server at www.sp.example.com must keep a record linking the requested
 transaction with the authorization code and the respective access token 
</t>
<t>
* An authorization server associated with the server at www.sp.example.com must enable the resource server 
www.sp.example.com to obtain the transaction information that is linked to the issued access token
</t>

<t> 
* Resource server at www.sp.example.com must verify access token and invalidate it after its first use
</t>

<t>
* A resource server at www.sp.example.com must enable the gaming application to post charges to Alice's account 
according to the access token presented over a secure transport
</t>

<t>
The gaming application must provide a custom scheme URI to the authorization server associated with 
www.sp.example.com (note: it can be preregistered with the authorization server)
</t>
<t>
Alice's manual involvement in the OAuth authorization procedure (e.g., entering an URL or a password) should not be 
required. (Alice's authentication to www.sp.example.com is not in the OAuth scope)
</t>
</list>

* The requirements denoted by '*' are not common for the Native Application use cases, but are specific to the 
In-App-Payment use case
</t>
</section>


<section title="Native Application">
<t>
<vspace blankLines="0"/>
Description: <vspace blankLines="1"/>
Alice wants to upload (or download) her photographs to (or from) storephotos.example.com using her smartphone. 
She downloads and installs a photo app on her smartphone. In order to enable the app to access her photographs, 
Alice needs to authorize the app to access the web site on her behalf. The authorization shall be valid for a prolonged 
duration (e.g. several months), so that Alice does not need to authenticate and authorize access on every 
execution of the app. It shall be possible to withdraw the app's authorization both on the smartphone as 
well as on the site storephotos.example.com.  
</t>

<t>Pre-conditions:
<list style='symbols'>
<t> Alice has installed a (native) photo app application on her smartphone
</t>
<t> The installed application is registered with the social site at storephotos.example.com and has an identifier 
</t>
<t> Alice holds an account with storephotos.example.com
</t>
<t> 
Authentication and authorization shall be performed in an interactive, browser-based process. 
The smartphone's browser is used for authenticating Alice and for enabling her to authorize the request 
by the Mobile App
</t>

</list>
</t>

<t>Post-conditions:
<vspace blankLines="1"/>
A successful procedure results in Alice's app receiving an access and a refresh token. The app may obtain the tokens 
by utilizing either the web server or the user agent flow. The application uses the access token to gain access to 
Alice's data at storephotos.example.com. The refresh token is persistently stored on the device for use in 
sub-sequent app executions. If a refresh token exists on app startup, the app directly uses the refresh token to 
obtain a new access token.    
</t>

<t>Requirements:
<list style='symbols'>
<t> Alice's authentication with storephotos.example.com is required
</t>
<t> Registration of the application running on Alice's smartphone is required for identification and registration and 
may be carried out on a per installation base
</t>
<t> The application at storephotos.example.com provides a capability to view and delete the apps' authorizations. This
implies that the different installations of the same app on the different devices can be distinguished 
(e.g., by a device name or a telephone number)
</t>  
<t> The app must provide Alice an option to logout. The logout must result in the revocation of the refresh token 
on the authorization server
</t>

</list>
</t>
</section>

<section title="Device">
<t>
<vspace blankLines="0"/>
Description: <vspace blankLines="1"/>
Alice has a device, such as a game console, that does not support an easy data-entry method. She also has 
an access to a computer with a browser. The application running on the Alice's 
device gets authorized access to a protected resource (e.g., photographs) stored on a server at www.storephotos.example.com
</t>

<t>Pre-conditions:
<list style='symbols'>

<t> Alice uses an Oauth-enabled game console, which does not have an easy data-entry method, for accessing 
her photographs at www.storephotos.example.com. The device starts the OAuth procedure by requesting a token
</t>
<t>Alice is able to connect to www.storephotos.example.com using a computer that provides an easy data-entry method, 
which is equipped with a browser. This computer is used to authorize access by the application running 
on the game console to Alice's photographs
</t>
<t>Application running on Alice's game console has registered with www.storephotos.example.com (has been 
issued an identifier) 
</t>
<t>Alice has registered with the application running at www.storephotos.example.com for identification and 
authentication 
</t> 

</list>
</t>
<t>Post-conditions:
Description: <vspace blankLines="1"/>
A successful procedure results in the application running on Alice's game console receiving an access token 
that enables access to the photographs on www.storephotos.example.com.
</t>

<t>Requirements: 
<list style='symbols'>
<t> Registration of the application running on the game console with the application running on 
www.storephotos.example.com is required for identification
</t>
<t>Application running on the game console must be able to poll periodically the application running 
at www.storephotos.example.com while waiting for Alice's authorization of the requested access to her 
photographs. The repeating requests include the application's identifier and the verification code that 
has been issued by www.storephotos.example.com
</t>
<t>Alice is required to use her browser for interacting with the web application running on 
www.storephotos.example.com. To that end she has to manually direct her browser to the verification URL 
that is displayed on her game console
</t>
<t>Alice's authentication with www.storephotos.example.com is required
</t>
<t>After authentication with www.storephotos.example.com Alice, if she wishes to approve the request, 
which is described in her browser's window, must enter the user code. (The user code is also displayed on 
her game console along with the verification URL)
</t>
</list>
</t>
</section>

<section title="Client password (shared secret) credentials">
<t>
<vspace blankLines="0"/>
Description: <vspace blankLines="1"/>
The company GoodPay prepares the employee payrolls for the company GoodWork. In order to do that the 
application at www.GoodPay.example.com gets authenticated access to the employees' 
attendance data stored at www.GoodWork.example.com. 
</t>

<t>Pre-conditions:
<list style='symbols'>
<t>The application at www.GoodPay.example.com has established through a registration an identifier and a shared secret with 
the application running at www.GoodWork.example.com
</t>   
<t>The scope of the access by the application at www.GoodPay.example.com to the data stored at www.GoodWork.example.com 
has been defined  
</t>
</list>
</t>
<t>Post-conditions:
<vspace blankLines="1"/>
A successful procedure results in the application at www.GoodPay.example.com receiving an access token after authenticating 
to the application running at www.GoodWork.example.com. 
</t>

<t>Requirements:
<list style='symbols'>

<t>Authentication of the application at www.GoodPay.example.com to the application at www.GoodWork.example.com is required
</t>
<t>The authentication method must be based on the identifier and shared secret, which the application running 
at www.GoodPay.example.com submits to the application at www.GoodWork.example.com in the initial HTTP request
</t>
<t>Because in this use case GoodPay gets access to GoodWork's 
sensitive data, GoodWork shall have a pre-established trust with GoodPay on the 
security policy and the authorization method's implementation 
</t>
</list>
</t>
</section>

<section title="Assertion">
<t>
<vspace blankLines="0"/>
Description: <vspace blankLines="1"/>
Company GoodPay prepares the employee payrolls for the company GoodWork. In order to do that the 
application at www.GoodPay.example.com gets authenticated access to the employees' attendance data stored 
at www.GoodWork.example.com.
<vspace blankLines="0"/> 
This use case describes an alternative solution to the one described by the use case Client password credentials.
</t>

<t>Pre-conditions:
<list style='symbols'>
<t>The application at www.GoodPay.example.com has obtained an authentication assertion from a party that is trusted 
by the application at www.GoodWork.example.com
</t>   
<t>The scope of the access by the application at www.GoodPay.example.com to the data stored at www.GoodWork.example.com has 
been defined  
</t>
<t>The application at www.GoodPay.example.com has established trust relationship with the asserting party and is 
capable of validating its assertions
</t>

</list>
</t>

<t>Post-conditions:
<vspace blankLines="1"/>
A successful procedure results in the application at www.GoodPay.example.com receiving an access token after 
authenticating to the application running at www.GoodWork.example.com by presenting an assertion 
(e.g., SAML assertion). 
</t>
<t>Requirements:
<list style='symbols'>
<t>Authentication of the application at www.GoodPay.example.com to the application at www.GoodWork.example.com is required
</t>

<t>The application running at www.GoodWork.example.com must be capable of validating assertion presented by the 
application running at www.GoodPay.example.com 
</t>

<t>Because in this use case GoodPay gets access to GoodWork's sensitive data, GoodWork shall establish trust with GoodPay
on the security policy and the authorization method's implementation 
</t>
</list>
</t>
</section>

<section title="Content manager">
<t>
<vspace blankLines="0"/>
Description: <vspace blankLines="1"/>
Alice and Bob are having a chat conversation using a content manager application running on a web server 
at www.contentmanager.example.com. Alice notifies Bob that she wants to share some photographs 
at www.storephotos.example.com and instructs the application at www.contentmanager.example.com to enable Bob's access to 
the photographs. The application at www.contentmanager.example.com, after Alice's authorization, obtains an access 
token for Bob, who uses it to access Alice's photographs at www.storephotos.example.com.
</t>

<t>Pre-conditions:
<vspace blankLines="1"/>
Alice, Bob the content manager application at www.contentmanager.example.com, and the application at 
www.storephotos.example.com have registered with the same authorization server for authentication
</t>

<t>Post-conditions:
<vspace blankLines="1"/>
A successful procedure results in the application at www.contentmanager.example.com receiving an access token 
that allows access to Alice's photographs at www.storephotos.example.com. The access token is issued by the 
authorization server after Alice has authorized the content manager at www.contentmanager.example.com to get 
an access token on Bob's behalf. The access token is passed to Bob by the content manager. Bob uses the 
access token to view Alice's photographs at www.storephotos.example.com.
</t>
<t>Requirements:
<list style='symbols'>
<t>The server at www.contentmanager.example.com, must be capable of issuing the HTTP redirect requests to 
Alice's and Bob's user agents - the browsers
</t>
<t>The authorization server must be able to authenticate Alice, Bob, and the application at 
www.contentmanager.example.com 
</t>
<t>The authorization server is required to obtain Alice's authorization for issuing an access token to 
www.contentmanager.example.com on Bob's behalf
</t>
<t>Authorization server must be able to identify to Alice the scope of access that www.contentmanager.example.com 
has requested on Bob's behalf while asking for Alice's authorization
</t>

</list>
</t>
</section> 


<section title="Access token exchange">
<t>
<vspace blankLines="0"/>
Description: <vspace blankLines="1"/>
Alice uses an application running on www.printphotos.example.com for printing her photographs that are stored 
on a server at www.storephotos.example.com. The application running on www.storephotos.example.com, 
while serving the request of the application at www.printphotos.example.com, discovers that some of the 
requested photographs have been moved to www.storephotos1.example.com. The application 
at www.storephotos.example.com retrieves the missing photographs from www.storephotos1.example.com and provides 
access to all requested photographs to the application at www.printphotos.example.com. The application 
at www.printphotos.example.com carries out Alice's request.  
</t>

<t>Pre-conditions:
<list style='symbols'>
<t>  The application running on www.printphotos.example.com is capable of interacting with Alice's browser
</t>
<t>Alice has registered with and can be authenticated by authorization server 
</t>
<t>The applications at www.storephotos.example.com has registered with authorization server 
</t>
<t>The applications at www.storephotos1.example.com has registered with authorization server
</t>
<t>The application at www.printphotos.example.com has registered with authorization server
</t>

</list>
</t>


<t>Post-conditions:
<vspace blankLines="1"/>
A successful procedure results in the application at www.printphotos.example.com receiving an access token that 
allows access to Alice's photographs. This access token is used for the following purposes:
<vspace blankLines="0"/>
<list style='symbols'>
<t> By the application running at www.printphotos.example.com to get access to the photographs 
at www.storephotos.example.com
</t>
<t> By the application running at www.storephotos.example.com to obtain from authorization server another 
access token that allows it to retrieve the additional photographs stored at www.storephotos1.example.com
</t>
</list> 
As the result, there are two access token issued for two different applications. The tokens may have different 
properties (e.g., scope, permissions, and expiration dates). 

</t>

<t>Requirements:
<list style='symbols'>
<t>The applications at www.printphotos.example.com and www.storephotos.example.com require different access 
tokens
</t>
<t>The application at www.printphotos.example.com is required to provide its callback URL to the application 
at www.storephotos.example.com 
</t>
<t>Authentication of the application at www.printphotos.example.com to the authorization server is required
</t>
<t>Alice's authentication by the authorization server is required
</t>
<t>The authorization server must be able to describe to Alice the request of the application 
at www.printphotos.example.com and obtain her authorization (or rejection) 
</t>
<t>If Alice has authorized the request, the authorization server must be able to issue an access token that 
enables the application at www.printphotos.example.com to get access to  Alice's photographs at 
www.storephotos.example.com  
</t>
<t>The authorization server must be able, based on the access token presented by the application at 
www.printphotos.example.com, to generate another access token that allows the application at 
www.storephotos.example.com to get access to the photographs at www.storephotos1.example.com. In this context 
the authorization server must validate the authorization of the application at www.storephotos.example.com to obtain 
the token. 
</t>
<t>The application at www.storephotos.example.com must be able to validate an access token presented by the 
application running at www.printphotos.example.com 
</t>
<t>The application at www.storephotos1.example.com must be able to validate the access token presented by the 
application running at www.storephotos.example.com
</t>

</list>
</t>
</section>


<section title="Multiple access tokens">
<t>
<vspace blankLines="0"/>
Description: <vspace blankLines="1"/>
Alice uses a communicator application running on a web server at www.communicator.example.com to access her 
email service at www.email.example.com and her voice over IP service at www.voip.example.com. Email addresses and 
telephone numbers are obtained from Alice's address book at www.contacts.example.com. Those web sites all rely on the 
same authorization server, so the application at www.communicator.example.com can receive a single authorization from Alice 
for getting access to these three services on her behalf at once. 

<vspace blankLines="1"/>
Note: This use case is especially useful for native applications since a web browser needs to be launched only once.
</t>

<t>Pre-conditions:
<list style='symbols'>
<t> The same authorization server serves Alice and all involved servers
</t>
<t>Alice has registered with the authorization server for authentication and for authorization of the requests of 
the communicator application running at www.communicator.example.com 
</t>
<t>The email application at www.email.example.com has registered with the authorization server for authentication
</t>
<t>The VoIP application at www.voip.example.com has registered with the authorization server for authentication
</t>
<t> The address book at www.contacts.example.com has registered with the authorization server for authentication
</t>
</list>
</t>

<t>Post-conditions:
<vspace blankLines="1"/>
A successful procedure results in the application at www.communicator.example.com receiving three different 
access tokens: one for accessing the email service at www.email.example.com, one for accessing the contacts at 
www.contacts.example.com, and one for accessing the VoIP service at www.voip.example.com. 
</t>
<t>Requirements:
<list style='symbols'>
<t>The application running at www.communicator.example.com must be authenticated by the authorization server
</t>
<t>Alice must be authenticated by the authorization server
</t>
<t>The application running at www.communicator.example.com must be able to get a single Alice's authorization 
for access to the multiple services (e.g., email and VoIP)
</t>
<t> The application running at www.communicator.example.com must be able to recognize that all three applications 
rely on the same authorization server
</t>
<t>A callback URL of the application running at www.communicator.example.com must be known to the authorization 
server
</t>
<t>The authorization server must be able to issue the separate service-specific tokens (with different, scope, 
permissions, and expiration dates) for access to the requested services (such as email and VoIP)
</t>

</list>
</t>
</section>


<section title="Gateway for browser-based VoIP applets">
<t>
<vspace blankLines="0"/>
Description: <vspace blankLines="1"/>
Alice accesses a social site on a web server at www.social.example.com. Her browser loads a VoIP applet that 
enables her to make a VoIP call using her SIP server at www.sipservice.example.com. The application at 
www.social.example.com gets Alice's authorization to use her account with www.sipservice.example.com without 
learning her authentication credentials with www.sipservice.example.com.  
</t>

<t>Pre-conditions:
<list style='symbols'>
<t>Alice has registered with www.sipservice.example.com for authentication
</t>
<t>The application at www.social.example.com has established authentication credentials with the application at 
www.sipservice.example.com	
</t>
</list>
</t>

<t>Post-conditions:
<vspace blankLines="1"/>
A successful procedure results in the application at www.social.example.com receiving access token from 
www.sipservice.example.com with Alice's authorization.  
</t>
<t>Requirements:
<list style='symbols'>
<t>The server at www.social.example.com must be able to redirect Alice's browser to www.sipservice.example.com
</t> 
<t>The application running at www.sipservice.example.com must be capable of authenticating Alice and obtaining 
her authorization of a request from www.social.example.com
</t>
<t>The server at www.sipservice.example.com must be able to redirect Alice's browser back to 
www.social.example.com
</t>
<t>The application at www.social.example.com must be able to translate the messages of the Alice's VoIP applet 
into SIP and RTP messages
</t>
<t>The application at www.social.example.com must be able to add the access token to the SIP requests that it 
sends to www.sipservice.example.com 
</t>
<t>Application at www.sipservice.example.com must be able to authenticate the application at 
www.social.example.com and validate the access token 
</t>
<t>Alice's manual involvement in the OAuth authorization procedure (e.g., entering an URL or a password) should 
not be required. (Alice's authentication to www.sipservice.example.com is not in the OAuth scope)
</t>

</list>
</t>
</section>

<section title="Signed Messages">
<t>
<vspace blankLines="0"/>
Description: <vspace blankLines="1"/>

Alice manages all her personal health records in her personal health data store at a server at www.myhealth.example.com, 
which manages authorization of access to Alice's participating health systems. 
Alice's Primary Care Physician (PCP), which has a Web site at www.pcp.example.com, recommends her to see a sleep 
specialist (www.sleepwell.example.com). Alice arrives at the sleep specialist's office and authorizes it to access 
her basic health data at her PCP's web site. The application at www.pcp.example.com verifies that Alice has 
authorized www.sleepwell.example.com to access her health data as well as enforces that www.sleepwell.example.com is 
the only application that can retrieve that data with that specific authorization.

</t>

<t>Pre-conditions:
<list style='symbols'>

<t> Alice has a personal health data store that allows for discovery of her participating health systems 
(e.g. psychiatrist, sleep specialist, PCP, orthodontist, ophthalmologist, etc)
</t>
<t>The application at www.myhealth.example.com manages authorization of access to Alice's participating health systems
</t>
<t>The application at www.myhealth.example.com can issue authorization tokens understood by Alice's participating 
health systems
</t>
<t>The application at www.pcp.example.com stores Alice's basic health and prescription records
</t>
<t>The application at www.sleepwell.com stores results of Alice's sleep tests
</t>
</list>
</t>

<t>Post-conditions:
<list style='symbols'>
<t>A successful procedure results in just the information that Alice authorized being transferred from the Primary 
Care Physician (www.pcp.example.com) to the sleep specialist (www.sleepwell.example.com)
</t>
<t> The transfer of health data only occurs if the application at www.pcp.example.com can verify that 
www.sleepwell.example.com is the party requesting access and that the authorization token presented by 
www.sleepwell.example.com is issued by the application at www.myhealth.example.com with a restricted audience of 
www.sleepwell.example.com
</t>
</list>
</t>
<t>Requirements:
<list style='symbols'>
<t> The application at www.sleepwell.example.com interacting with www.myhealth.example.com must be able to discover 
the location of the PCP system (e.g., XRD discovery)
</t>
<t> The application at www.sleepwell.example.com must be capable of requesting Alice's authorization of access to the 
application at www.pcp.example.com for the purpose of retrieving basic health data (e.g. date-of-birth, weight, 
height, etc). The mechanism Alice uses to authorize this access is out of scope for this use case
</t>
<t> The application at www.myhealth.example.com must be capable of issuing a token bound to www.sleepwell.example.com 
for access to the application at www.pcp.example.com. Note that a signed token (JWT) can be used to prove who issued 
the token
</t>
<t> The application at www.sleepwell.example.com must be capable of issuing a request (which includes the token 
issued by www.myhealth.example.com) to the application at www.pcp.example.com
</t>
<t>The application at www.sleepwell.example.com must sign the request before sending it to www.pcp.example.com
</t>
<t> The application at www.pcp.example.com must be capable of receiving the request and verifying the signature
</t>
<t> The application at www.pcp.example.com must be capable of parsing the message and finding the authorization token
</t>
<t>The application at www.pcp.example.com must be capable of verifying the signature of the authorization token
</t>
<t>The application at www.pcp.example.com must be capable of parsing the authorization token and verifying that this 
token was issued to the application at www.sleepwell.com
</t>
<t> The application at www.pcp.example.com must be capable of retrieving the requested data and returning it to the 
application at www.sleepwell.example.com
</t>
</list>
</t>
</section>

<section title="Signature with asymmetric secret">
<t>
<vspace blankLines="0"/>
Description: <vspace blankLines="1"/>
Alice accesses an application running on a web server at www.printphotos.example.com and instructs it to print 
her photographs that are stored on a server www.storephotos.example.com. The application at 
www.printphotos.example.com, which does not have a shared secret with www.storephotos.example.com, receives 
Alice's authorization for accessing her photographs without learning her authentication credentials 
with www.storephotos.example.com.  
</t>

<t>Pre-conditions:
<list style='symbols'>
<t>Alice has registered with www.storephotos.example.com to enable authentication
</t>
<t>The application at www.printphotos.example.com has a private and a matching public keys
</t>
</list>
</t>

<t>Post-conditions:
<vspace blankLines="1"/>
A successful procedure results in the application at www.printphotos.example.com receiving an access token 
from www.storephotos.example.com for accessing the Alice's photographs.   
</t>

<t>Requirements:
<list style='symbols'>
<t>The application at www.printphotos.example.com must be capable of issuing the HTTP redirect requests to 
Alice's user agent - a browser
</t>
<t>The application at www.storephotos.example.com must be able to authenticate Alice
</t>
<t>The application running at www.storephotos.example.com must be able to obtain the public key of the 
application at www.printphotos.example.com
</t>
<t>The application running at www.printphotos.example.com is required to sign using its private key the requests
 to the application at www.storephotos.example.com 
</t> 
<t>The application at www.storephotos.example.com must obtain Alice's authorization of the access to her photos 
by www.printphotos.example.com
</t>
<t>The application at www.storephotos.example.com is required to identify to Alice the scope of access that 
www.printphotos.example.com has requested while asking for Alice's authorization
</t>
<t>The application at www.storephotos.example.com must be able to authenticate the application at 
www.printphotos.example.com by validating a signature of its request using the public key of 
www.printphotos.example.com 
</t>
<t>The application at www.printphotos.example.com must provide a callback URL to the application at 
www.storephotos.example.com (note: the URL can be pre-registered with www.storephotos.example.com)
</t>
<t>The application at www.storephotos.example.com must be capable of issuing the HTTP redirect requests to 
Alice's browser
</t>
<t>Alice's manual involvement in the OAuth authorization procedure (e.g., entering an URL or a password) should 
not be required. (Alice's authentication to www.storephotos.example.com is not in the OAuth scope)
</t>

</list>
</t>
</section>




</section> <!-- sectiion OAuth use cases -->



<section title="Authors of the use cases">
<t>
The major contributors of the use cases are as follows:
<vspace blankLines="1"/>

W. Beck, Deutsche Telekom AG 	<vspace blankLines="0"/>
G. Brail, Sonoa Systems 	<vspace blankLines="0"/>
B. de hOra			<vspace blankLines="0"/>
B. Eaton, Google		<vspace blankLines="0"/>
S. Farrell, NewBay Software	<vspace blankLines="0"/>
G. Fletcher, AOL		<vspace blankLines="0"/>
Y. Goland, Microsoft		<vspace blankLines="0"/>
B. Goldman, Facebook		<vspace blankLines="0"/>
E. Hammer-Lahav, Yahoo!		<vspace blankLines="0"/>
D. Hardt	 		<vspace blankLines="0"/>
R. Krikorian, Twitter 		<vspace blankLines="0"/>
T. Lodderstedt, Deutsche Telekom <vspace blankLines="0"/>
E. Maler, PayPal		<vspace blankLines="0"/>
D. Recordon, Facebook		<vspace blankLines="0"/>
L. Shepard, Facebook		<vspace blankLines="0"/>
A. Tom, Yahoo!			<vspace blankLines="0"/>
B. Vrancken, Alcatel-Lucent	<vspace blankLines="0"/>
Z. Zeltsan, Alcatel-Lucent	<vspace blankLines="0"/>
</t>
</section>

<section title="Security considerations">

<t>
TBD
</t>

</section> <!-- Security Considerations -->

<section title="IANA considerations">

<t>This Internet Draft includes no request to IANA.</t>

</section> <!-- iana-cons -->
<section title="Acknowledgements">
<t>
The authors thank Igor Faynberg and Hui-Lan Lu for their invaluable help with preparing this document. 
Special thanks are to the draft reviewers Thomas Hardjono and Melinda Shore, whose suggestions have helped to 
improve the draft.
</t>
</section>
</middle>  

<back>


<references title= "Normative References" >

<reference anchor="RFC2119">
 <front>
  <title>Key words for use in RFCs to Indicate Requirement Levels</title>
  <author initials="S." surname="Bradner">
    <organization/></author>
  <date month="March" year="1997"/>
 </front>
 <seriesInfo name="RFC" value="2119"/>
 <format type="TXT" target="http://www.ietf.org/rfc/rfc2119.txt"/>
</reference>

<reference anchor="I-D.draft-ietf-oauth-v2">
 <front>
  <title>The OAuth 2.0 Authorization Protocol</title>
  <author initials="E." surname="Hammer-Lahav">
    <organization/></author>
<author initials="D." surname="Recordon">
    <organization/></author>
<author initials="D." surname="Hardt">
    <organization/></author>

  <date/>
 </front>

 <format type="TXT" target="https://datatracker.ietf.org/doc/draft-ietf-oauth-v2/"/>
</reference>


</references>

</back>
</rfc>


