<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC2817 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2817.xml">
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="exp" docName="draft-wiley-lisp-ddtxfer-01" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
        or pre5378Trust200902
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="LISP DDT Database Transfer">LISP-DDT Database Transfer</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Glen Wiley" initials="G.W." role="editor"
            surname="Wiley">
      <organization>Verisign, Inc.</organization>

      <address>
        <postal>
          <street>12061 Bluemont Way</street>

          <!-- Reorder these if your country does things differently -->

          <city>Reston</city>

          <region>Va</region>

          <code>20190</code>

          <country>USA</country>
        </postal>

        <phone></phone>

        <email>gwiley@verisign.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date year="2012" />

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>Network Working Group</workgroup>

    <keyword>LISP</keyword>
    <keyword>Locator/ID Separation Protocol</keyword>
    <keyword>DDT</keyword>
    <keyword>Delegated Database Tree</keyword>
    <keyword>database transfer</keyword>

    <abstract>
      <t>
			This draft describes a protocol for transferring a LISP
			Delegated Database Tree (LISP-DDT) between DDT nodes and for
			notifying DDT nodes that the database has changed.  In the
			absence of a formally defined protocol the LISP-DDT database is
			transferred using files containing device configuration
			commands.  This protocol provides for transferring a complete
			database or the deltas between two versions of the database.
			This document does not describe the use of DDT as part of the
			LISP mapping service.
      </t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>
			References to the LISP-DDT database in this document are
			intended to refer specifically to the portion of the LISP-DDT
			database that has been delegated to the DDT node, not the
			entire database.

			<vspace blankLines='1' />

			An operator that offers a LISP-DDT service faces a few
			problems (similar to those faces by the operator of a DNS
			resolution service):
			
			<list style="symbols">
				<t>How to replicate the LISP-DDT database from one host/device
				to another to support redundant platforms or to support
				operational maintenance. </t>

				<t>Transfering the LISP-DDT between dissimilar platforms,
				for example between network devices offered by competing
				network device vendors that rely on different configuration
				commands.</t>

				<t>How to transfer portions of the LISP-DDT database rather
				than the entire database (to deal with the eventual large
				database).</t>

				<t>How to notify an interested DDT node that the LISP-DDT
				database has changed </t>

			</list>

			The focus for this document is to define a protocol for the
			transfer of the LISP-DDT database between DDT XFR nodes that
			addresses these problems.  The local representation of the data
			in the LISP-DDT database on the DDT node is outside the scope
			of this document.
				
			<vspace blankLines='1' />

			In the absence of a well described line protocol an
			operator might send a list of OS commands to run on the DDT
			node that would populate the LISP DDT database, however even
			this approach requires an operational protocol to ensure a
			reliable/repeatable transfer of the LISP DDT database.

			<vspace blankLines='1' />

			There are two types of transfers, both are limited to only the
			portion of the database that has been delegated to the DDT
			node.  A full transfer sends the entire set of entries in the
			database for which the DDT node is authoritative.  An
			incremental transfer sends only the portion of that set of
			entries in the database that has changed (based on the version
			of the database on the receiving node).

			<vspace blankLines='1' />

         LISP-DDT bears some resemblance to the Domain Name Service (DNS) in
         the sense that it provides an indirect vector to the target data.
         Think of a LISP-DDT query as the analog to a DNS name server (NS)
         query, and a LISP map request as the analog to a DNS address (A)
         query (LISP-DDT does not store the EID to RLOC mappings returned
			in a map request).

			<vspace blankLines='1' />

			DDT XFR clients that need to be notified of changes to the DDT
			database may subscribe to the appropriate DDT XFR server and are
			asynchronously notified of changes.  A DDT XFR client always
			initiates a transfer by sending a request to the authoritative
			DDT XFR server.

			<vspace blankLines='1' />

			LISP-DDT database transfer introduces the use of a
			monotonically increasing 64-bit serial number that
			identifies a version of a portion of a LISP-DDT database.
			Each delegated portion of the database
			(identified by a unique Extended EID-prefix) has a distinct 
			serial number which is maintained by the
			authoritative DDT XFR server.  One or more changes to the contents of
			the LISP-DDT database increments the serial number.
			Once a serial number is used it may never be reused. This
			feature ensures that a DDT XFR client can reliably determine 
			whether its
			copy of the LISP-DDT database is consistent with the one
			offered by the DDT XFR server.  This serial number is analogous to
			the DNS SOA serial number.
		</t>

		<section title="LISP-DDT">
			<t>
				LISP-DDT defines a database key for identifying EID mappings to
				RLOCs in the EID numbering space. This key (the Extended EID
				prefix) is comprised of the following fields:
			</t>

			<texttable>
				<ttcol>Field</ttcol>
				<ttcol>Size</ttcol>
				<c>Key-ID </c> <c>16 bits</c>
				<c>Instance Identifier (IID)</c> <c>32 bits</c>
				<c>Address Family Identifier (AFI)</c> <c>16 bits</c>
				<c>EID-prefix</c> <c>variable length per AFI</c>
			</texttable>

			<t>
				See [LISP-DDT] for a more complete discussion of the key fields.

				<vspace blankLines='1' />
            The root DDT XFR server is the apex of the hierarchy and 
				is identified by the key: Key-ID=0, IID=0, AFI=0, EID-prefix=0/0

				<vspace blankLines='1' />
				It is useful to note that a DDT node does not necessarily imply a
				single host, in fact it is more likely implemented as a collection
				of hosts operating behind a VIP or via some
				other mechanism that allows for active redundant components.
			</t>
		</section>
		<!-- end LISP-DDT -->

		<section title="Network Transport">
			<t>
				TCP is used exclusively as the transport for LISP-DDT
				transfer sessions as opposed to other LISP messages 
				which are sent via UDP.
			</t>
		</section>
      <!-- end Database Transfer -->

      <section title="Terminology">
			<t>

			Note that for the sake of consistency many of these
			definitions were lifted directly from [LISP-DDT].

			<list style='hanging'>
				<t hangText="Extended EID (XEID):">
					a LISP EID, optionally extended with a non- zero
					Instance ID (IID) if the EID is intended for use in a
					context where it may not be a unique value, such as on
					a Virtual Private Network where "private" address space
					is used.  See "Using Virtualization and Segmentation
					with LISP" in [LISP] for more discussion of Instance
					IDs.	
				</t>

				<t hangText="XEID-prefix:">
					a LISP EID-prefix with 16-bit LISP-DDT Key-ID (provided
					to allow the definition of multiple databases;
					currently always zero in this version of DDT, with
					other values reserved for future use), 32-bit IID and
					16-bit AFI prepended.  An XEID-prefix is used as a key
					index into the database.
				</t>

				<t hangText="DDT node:">
					a network infrastructure component responsible for
					specific XEID-prefix and for delegation of
					more-specific sub- prefixes to other DDT nodes.
				</t>

				<t hangText="Authoritative DDT node:">
					The DDT map server that is authoritative for a portion of the
					LISP-DDT database is identified as an "authoritative DDT
					node/server" and is the exclusive source for an authoritative
					copy of the portion of the LISP-DDT database that has been
					delegated to that DDT map server.
				</t>

				<t hangText="DDT XFR client:">
					The DDT node that is requesting a LISP-DDT database
					transfer from a DDT XFER server.  A DDT XFR client would
					likely be a device/host that may serve as a DDT server
					following the transfer.
				</t>

				<t hangText="DDT XFR server:">
					The DDT node that receives a request for a LISP-DDT database
					transfer and functions as the source of the LISP-DDT
					database is the DDT XFR server.  DDT XFR servers never 
					initiate a
					transfer, however they may send notification messages to
					DDT XFR clients that have subscribed to the portion of the
					database for which the DDT server is authoritative.
				</t>

				<t hangText="Full Transfer:">
					A full LISP-DDT database transfer (FDDTXFR) describes the
					transfer
					of the entire portion of the LISP-DDT database for which
					a DDT-node is authoritative.  The transfer does not include
					portions of the database that are delegated to
					other DDT nodes.
				</t>

				<t hangText="Incremental Transfer:">
					An incremental LISP-DDT database transfer (IDDTXFR)
					is a transfer of the differences between two serial 
					numbers of the LISP-DDT database for
					which a DDT XFR server is authoritative.  The current
					serial number and the serial number provided by the
					DDT XFR client determine the context of the
					differences.
				</t>

				<t hangText="serial number:">
					A monotonically increasing number that indicates a
					specific version of the portion of the LISP-DDT database
					identified by a unique Extended EID-prefix.  There may be
					more than one material difference between versions of the
					database even though the serial number is incremented
					once.
				</t>

				<t hangText="session:">
					A LISP-DDT database transfer session ("session") includes
					all communication between the DDT XFR client and DDT XFR server
					involved in requesting and responding to a request for
					the transfer of a portion of the LISP-DDT database.
				</t>
			</list>

				For definitions of other acronyms (EID, RLOC, etc.) see 
				[LISP] and [LISP-DDT].
			</t>
		</section>
      <!-- end Definition of Terms -->

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>
      </section>
      <!-- end requirements language -->

    </section>
    <!-- end introduction -->

    <section title="LISP-DDT Database Transfer Request">
	 	<t>
			Immediately after the network connection is established
			from a DDT XFR client to
			a DDT XFR server the DDT XFR client sends a transfer
			request message.  The LISP-DDT transfer message
			is very similar to the LISP Map-Request.

			<figure title="LISP-DDT Transfer Request Message Format">
				<artwork>
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |Type=9 |F|I|N|          Reserved               | EID mask-len  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       MAC Key ID              |      MAC Digest Length        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                      MAC Digest Data                          ~
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      Serial number . . .                      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                         . . . Serial number                   |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         Key-ID                |   Instance Identifier ...     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |     ... Instance Identifier   |    Address Family Id.         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      EID-prefix . . .                         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                . . . EID-prefix                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
				</artwork>
			</figure>

			<vspace blankLines='1' />

			Packet field descriptions:

			<vspace blankLines='1' />

			<list style='hanging'>
				<t hangText="Type=9:">
					DDT Transfer request, this four bit value 
					identifies the packet type (other
					LISP packet types are defined in the respective
					Internet Drafts).
				</t>
				<t hangText="F (bit flag):">
					If this bit is set then this is a full transfer
					request.
				</t>
				<t hangText="I (bit flag):">
					If this bit is set then this is an incremental transfer
					request.
				</t>
				<t hangText="N (bit flag):">
					If this bit is set then this is a notification that the
					serial number for the portion of the database identified
					by the Extended EID has changed.
				</t>
				<t hangText="EID mask-len:">
				   The EID mask length (in bits) of the EID-prefix, not
					including the three fields that prefix the EID-prefix.
				</t>
				<t hangText="MAC Key ID:">
					Identifies the Message Authentication Code (MAC) 
					digest algorithm per [LISP].
				</t>
				<t hangText="MAC Digest length:">
					Length in bytes of the following MAC digest data.  
				</t>
				<t hangText="MAC Digest Data:">
					The MAC digest data depends on the MAC Key ID specified
					and is calculated on all of the fields that follow in this
					message.
				</t>
				<t hangText="Serial number:">
					In the case of an incremental transfer the DDT XFR client
					populates this 64-bit value with the current serial
					number so that the DDT XFR server can attempt to determine
					which database changes must be sent.  This field is
					ignored for full transfers.
				</t>
				<t hangText="Key-ID:">
					16 bit Key-ID for the X-EID prefix being requested.
				</t>
				<t hangText="Instance Identifier:">
					32 bit Instance Identifier for the X-EID prefix being requested.
				</t>
				<t hangText="AFI:">
					16 bit Address Family Identifier for the X-EID 
					prefix being requested.
				</t>
				<t hangText="EID-prefix:">
					The variable length EID-prefix (per AFI) for the XEID
					prefix being requested.  This length is also available
					in the header of the packet.
				</t>
			</list>
		</t>
    </section>
    <!-- end LISP-DDT Database Transfer Request -->

    <section title="Full LISP-DDT Database Transfer">
	 	<t>
			A full LISP-DDT database transfer is initiated by a DDT XFR client as
			a FDDTXFR request sent to a DDT XFR server.  A DDT XFR server may 
			choose to ignore full transfer requests received from the same
 			DDT XFR client more than once in a 12 hour period.

			<vspace blankLines='1' />

			This request is answered by successive DDTDAT
			messages until the entire portion of the database 
			is sent from the DDT XFR server.
		</t>
	 </section>
	 <!-- end full transfer -->

    <section title="Incremental LISP-DDT Database Transfer">
	 	<t>
			An incremental LISP-DDT database transfer is initiated by a
			DDT XFR client as a IDDTXFER request sent to a DDT XFR server.  The
			DDT XFR client specifies a serial number which is used by the DDT 
			XFR server
			to determine which changes must be sent in the reply.

			<vspace blankLines='1' />

			The DDT XFR server should respond to the IDDTXFER request with an
			IDDTXFER reply that includes only the changes between the
			specified serial number and the current serial number.  The
			DDT XFR server may choose to respond with an FDDTXFER reply if
			the changes between the serial numbers are no longer
			available to the DDT XFR server.

			<vspace blankLines='1' />

			The DDT XFR client must be prepared to receive an FDDTXFER reply in
			response to a IDDTXFER request.
		</t>
	 </section>
	 <!-- end incremental transfer -->

    <section title="LISP-DDT Transfer Data Message">
		<t>
		<figure title="LISP-DDT Transfer Data Message Format">
			<artwork>
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |Type=11|F|I|H|N|               Reserved                        |
+->+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  |       MAC Key ID              |      MAC Digest Length        |
H  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   ~                      MAC Digest Data                          ~
b  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
i  |                      Initial Serial number . . .              |
t  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  |                 . . . Initial Serial number                   |
|  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  |                      Current Serial number . . .              |
|  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  |                 . . . Current Serial number                   |
+->+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  |A|R|L|Reserved |         Record  TTL  . . .                    |
|  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
R  |...Record TTL  | Locator Count | EID mask-len  |  DB Key-ID... |
e  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
c  | ...DB Key-ID  |           Instance Identifier . . .           |
o  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
r  |...Instance ID |         EID-AFI               |  Reserved     |
d  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  |                      EID-prefix . . .                         |
|  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| /|    Priority   |    Weight     |  M Priority   | M Weight      |
| L+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| o|        Unused Flags         |R|      Loc-AFI                  |
| c+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| \|                     Locator ...                               |
+->+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
				</artwork>
			</figure>

			<vspace blankLines='1' />

			Packet field descriptions are identical to those for the
			LISP Map Reply, new fields are described below:

			<vspace blankLines='1' />

			<list style='hanging'>
				<t hangText="Type=11:">
					DDT Transfer Data Message, this four bit value 
					identifies the packet type (other
					LISP packet types are defined in the respective
					Internet Drafts).
				</t>
				<t hangText="F (bit flag):">
					If this bit is set then this is a response to a full transfer
					request. 
				</t>
				<t hangText="I (bit flag):">
					If this bit is set then this is a response to an
					incremental transfer
					request.
				</t>
				<t hangText="H (bit flag):">
					If this bit is set then the data header is included in
					the message.  This header includes the message digest
					and serial numbers of the versions of the database.
					The header typically is included only in the
					first data message sent in response to a request.
				</t>
				<t hangText="N (bit flag):">
					NXDB, this bit is set in a response if the portion of
					the database requested is not delegated to the DDT
					XFR server responding to the request.  If this bit is set
					then the Extended EID-prefix is populated with the
					values specified in the original request. 
				</t>
				<t hangText="MAC Key ID:">
					Identifies the Message Authentication Code (MAC) 
					digest algorithm per [LISP].
				</t>
				<t hangText="MAC Digest length:">
					Length in bytes of the following MAC digest data.  
				</t>
				<t hangText="MAC Digest Data:">
					The MAC digest data depends on the MAC Key ID specified
					and is calculated on all of the fields that follow in this
					message.
				</t>
				<t hangText="Initial Serial number:">
					In an IDDTXFER reply, the initial serial number is the
					serial number specified in the IDDTXFER request
					provided that serial number was used to generate the
					changes specified in the data messages.  In a FDDTXFER
					request or in the case that the DDT XFR server could not
					determine the changes between the specified and current
					serial numbers then this field is filled with 0's.
					If the H bit is not
					set then this serial number is not present and the
					Extended EID prefix begins at this location in the
					packet.
				</t>
				<t hangText="Current Serial number:">
					In both the IDDTXFER and FDDTXFER reply, the current
					serial number is provided in this field.
					If the H bit is not
					set then this serial number is not present.
				</t>
				<t hangText="A (bit flag):">
					For incremental transfers this bit is set to indicate
					that the Extended EID prefix is to be added to the
					database.  If this bit is not set then the Extended EID
					prefix is to be removed from the database.  In cases
					where the Extended EID prefix is duplicated by the add,
					the record is replaced in the database.
				</t>
				<t hangText="R (bit flag):">
					For incremental transfers this bit is set to indicate
					that the Extended EID prefix is to be removed from the
					database.  The A and R bits are mutually exclusive.
				</t>
				<t hangText="L (bit flag):">
					This bit is set only in the last record of the DDTXFER 
					reply to indicate that no more records follow.  
				</t>
			</list>
		</t>
    </section>
    <!-- end LISP-DDT Database Transfer Request -->

    <section title="LISP-DDT Database Transfer Notify">
	 	<t>
			A DDT XFR server maintains a list of DDT XFR clients that have
			subscribed to the portion of the LISP-DDT database tree
			delegated to that DDT XFR server.  A DDT XFR client subscribes to a
			DDT XFR server by communicating with the DDT XFR server operator who
			then configures the DDT XFR server to send notifications.
			When the DDT XFR server increments the serial
			number for the delegated portion of the database, all DDT
			XFR clients are notified of the change via a DDTNTFY message
			which is identical to a DDTXFER request message with the N bit set.

			<vspace blankLines='1' />

			Notifications are sent to DDT XFR clients within five minutes of the
			change to the serial number.  A DDT XFR server may choose to only
			send the most recent/current serial number rather than all of
			the serial numbers that were used between notifications to a
			DDT XFR client.

			<vspace blankLines='1' />

			Notifications are delivered via a reliable transport (TCP)
			and the DDT XFR server must attempt to connect with the DDT XFR client
			and send the notification at least three times within a three
			minute window no more frequently than once per minute.  The
			DDT XFR server may choose a higher number of attempts at sending
			the notification, but not more frequently than once per
			minute.
			</t>
	 </section>
	 <!-- end notify -->

    <section title="Acknowledgments">
      <t>
			Special thanks to folks that offered their considerable
			experience in building and operating large scale DNS platforms
			and helping translate this experience to LISP-DDT database
			transfers including Dave Blacka, Piet Barber and Sean
			Mountcastle. I also appreciate the time that Neel Goyal and
			Ramin Ali Dousti have put into this effort.
      </t>
    </section>
	 <!-- end acknowledgments -->

    <section title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>
    </section>
	 <!-- end IANA -->

    <section title="Security Considerations">
	 	<t>
			There are a few Security considerations specific to LISP-DDT
			Database Transfers that are incremental to the LISP-DDT
			specification.  Most of the security related requirements
			are satisfied by the use of TLS.  Although TLS as described
			in <xref target="RFC5246">RFC 5246</xref> is intended to be
			transparent to the application protocol, certain details should be 
			addressed to ensure consistent implementation of LISP-DDT Transfer.
			These details are addressed in a separate document.

			<vspace blankLines='1' />

			Two of the approaches to implementing security related features 
			in the protocol are to offer the secure service on an alternate
			port or to allow session endpoints to upgrade an existing session
			via TLS.
			
			<vspace blankLines='1' />

			The preferred approach to securing LISP-DDT Transfer is to offer
			the secure service on an alternate port from the "un-secure"
			service.  The primary motivation for this approach is to
			improve operational efficiency, for example this makes it
			easier to deploy a footprint that efficiently allocates
			hardware used to accelerate TLS termination.
			
			<vspace blankLines='1' />

			An alternative to offering the secure service on an different
			network port is to support session upgrades.  In this case
			either endpoint of a LISP-DDT transfer session may upgrade
			that session via TLS similar to the
			approach taken to upgrade an HTTP session via TLS as described
			in <xref target="RFC2817">RFC 2817</xref>.

			<vspace blankLines='1' />

			The use of TLS provides for the three primary security
			considerations:

			<list style="symbols">
				<t>Host authentication, both DDT XFR server and DDT XFR client can
				be reasonably confident of the identity of the other
				endpoint.</t>


				<t>Transfer integrity, the contents of the transfer can be
				reasonably assured to be unadulterated.  The use of a
				message digest as is currently specified for the protocol 
				affords message integrity as well.</t>

				<t>Transfer confidentiality, the contents of the transfer
				will be essentially opaque to hosts outside the
				session.</t>
			</list>
		</t>

    </section>
	 <!-- end security -->
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <references title="Normative References">
      &RFC2119;

      &RFC5246;

      &RFC2817;

      &RFC6234;

      <reference anchor="LISP">
        <front>
          <title>Locator/ID Separation Protocol (LISP), draft-ietf-lisp-22.txt</title>
          <author initials="D.F." surname="Farinacci" />
          <author initials="V.F." surname="Fuller" />
          <author initials="D.M." surname="Meyer" />
          <author initials="D.L." surname="Lewis" />
          <date month="February" year="2012" />
        </front>
      </reference>

      <reference anchor="LISP-MS">
        <front>
          <title>LISP Map Server Interface, draft-ietf-lisp-ms-12.txt (work in progress)</title>
          <author initials="V.F." surname="Fuller" />
          <author initials="D.F." surname="Farinacci" />
          <date month="October" year="2011" />
        </front>
      </reference>

    </references>

    <references title="Informative References">

      <reference anchor="LISP-DDT">
        <front>
          <title>LISP Delegated Database Tree, draft-ietf-lisp-ddt-01.txt (work in progress)</title>
          <author initials="V.F." surname="Fuller" />
          <date month="October" year="2011" />
        </front>
      </reference>

    </references>

    <section title="Open Issues">
	 	<t>
			<list style="symbols">
				<t>
					A subscription message to manage DDT XFR client
					subscriptions to DDT XFR servers for portions of the
					database would be very useful.  This requires a 
					robust mechanism for authenticating
					subscribe/unsubscribe requests as part of the
					application protocol rather than relying entirely on
					TLS.
				</t>
				<t>
					Compression should be included in the specification as
					an optional feature.  This will become more important
					as LISP is more widely adopted and the size of the
					LISP-DDT increases.
				</t>
				<t>
					Do we need to support some sort of discovery protocol,
					for example should a DDT XFR client be able to not specify
					some portion of the extended EID prefix so that a DDT
					XFR server can reply with a "default" database or offer some
					means to walk the portion of the tree delegated to the
					DDT XFR server?
				</t>
			</list>
		</t>
    </section>

  </back>
</rfc>
