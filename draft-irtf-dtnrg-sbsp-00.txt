



Delay-Tolerant Networking Research Group                      E. Birrane
Internet-Draft                                                   JHU/APL
Intended status: Experimental                              July 15, 2013
Expires: January 16, 2014


           Streamlined Bundle Security Protocol Specification
                        draft-irtf-dtnrg-sbsp-00

Abstract

   This document defines a streamlined bundle security protocol, which
   provides data authentication, integrity, and confidentiality services
   for the Bundle Protocol.  Capabilities are provided to protect the
   bundle payload, and additional data that may be included within the
   bundle, along a single path through a network.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 16, 2014.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Birrane                 Expires January 16, 2014                [Page 1]

Internet-Draft                    SBSP                         July 2013


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Related Documents . . . . . . . . . . . . . . . . . . . .   3
     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   4
   2.  Security Block Definitions  . . . . . . . . . . . . . . . . .   6
     2.1.  Abstract Security Block . . . . . . . . . . . . . . . . .   8
     2.2.  Block Ordering  . . . . . . . . . . . . . . . . . . . . .  10
     2.3.  Bundle Authentication Block . . . . . . . . . . . . . . .  11
     2.4.  Block Integrity Block . . . . . . . . . . . . . . . . . .  12
     2.5.  Block Confidentiality Block . . . . . . . . . . . . . . .  13
     2.6.  Block Interactions  . . . . . . . . . . . . . . . . . . .  15
     2.7.  Parameters and Result Fields  . . . . . . . . . . . . . .  16
     2.8.  BSP Block Example . . . . . . . . . . . . . . . . . . . .  17
   3.  Security Processing . . . . . . . . . . . . . . . . . . . . .  19
     3.1.  Canonical Forms . . . . . . . . . . . . . . . . . . . . .  19
       3.1.1.  Bundle Canonicalization . . . . . . . . . . . . . . .  19
       3.1.2.  Block Canonicalization  . . . . . . . . . . . . . . .  20
       3.1.3.  Considerations  . . . . . . . . . . . . . . . . . . .  22
     3.2.  Endpoint ID Confidentiality . . . . . . . . . . . . . . .  23
     3.3.  Bundles Received from Other Nodes . . . . . . . . . . . .  24
     3.4.  Bundle Fragmentation and Reassembly . . . . . . . . . . .  25
     3.5.  Reactive Fragmentation  . . . . . . . . . . . . . . . . .  26
   4.  Key Management  . . . . . . . . . . . . . . . . . . . . . . .  27
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .  27
   6.  Conformance . . . . . . . . . . . . . . . . . . . . . . . . .  27
   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  27
     7.1.  Bundle Block Types  . . . . . . . . . . . . . . . . . . .  27
     7.2.  Ciphersuite Flags . . . . . . . . . . . . . . . . . . . .  28
     7.3.  Parameters and Results  . . . . . . . . . . . . . . . . .  28
   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  29
     8.1.  Normative References  . . . . . . . . . . . . . . . . . .  29
     8.2.  Informative References  . . . . . . . . . . . . . . . . .  29
   Appendix A.  Acknowlegements  . . . . . . . . . . . . . . . . . .  30
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  30

1.  Introduction

   This document defines security features for the Bundle Protocol
   [RFC5050] intended for use in delay-tolerant networks, in order to
   provide Delay-Tolerant Networking (DTN) security services.

   The Bundle Protocol is used in DTNs that overlay multiple networks,
   some of which may be challenged by limitations such as intermittent
   and possibly unpredictable loss of connectivity, long or variable
   delay, asymmetric data rates, and high error rates.  The purpose of
   the Bundle Protocol is to support interoperability across such
   stressed networks.  The Bundle Protocol is layered on top of



Birrane                 Expires January 16, 2014                [Page 2]

Internet-Draft                    SBSP                         July 2013


   underlay-network-specific convergence layers, on top of network-
   specific lower layers, to enable an application in one network to
   communicate with an application in another network, both of which are
   spanned by the DTN.

   Security is important for the Bundle Protocol.  The stressed
   environment of the underlying networks over which the Bundle Protocol
   operates makes it important for the DTN to be protected from
   unauthorized use, and this stressed environment poses unique
   challenges for the mechanisms needed to secure the Bundle Protocol.
   Furthermore, DTNs may be deployed in environments where a portion of
   the network might become compromised, posing the usual security
   challenges related to confidentiality, integrity, and availability.

   This document describes the Streamlined Bundle Security Protocol
   (SBSP), which provides security services for blocks within a bundle
   from the bundle source to the bundle destination.  Specifically, the
   SBSP provides authentication, integrity, and confidentiality for
   bundles along a path through a network.

   SBSP applies, by definition, only to those nodes that implement it,
   known as "security-aware" nodes.  There MAY be other nodes in the DTN
   that do not implement SBSP.  All nodes can interoperate with the
   exception that SBSP security operations can only happen at SBSP
   security-aware nodes.

1.1.  Related Documents

   This document is best read and understood within the context of the
   following other DTN documents:

   "Delay-Tolerant Networking Architecture" [RFC4838] defines the
   architecture for delay-tolerant networks, but does not discuss
   security at any length.

   The DTN Bundle Protocol [RFC5050] defines the format and processing
   of the blocks used to implement the Bundle Protocol, excluding the
   security-specific blocks defined here.

   The Bundle Security Protocol [RFC6257] introduces the concepts of
   security blocks for authentication, confidentiality, and integrity.
   The SBSP is based off of this document.









Birrane                 Expires January 16, 2014                [Page 3]

Internet-Draft                    SBSP                         July 2013


1.2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [RFC2119].

   We introduce the following terminology for purposes of clarity:

   o  Source - the bundle node from which a bundle originates.

   o  Destination - the bundle node to which a bundle is ultimately
      destined.

   o  Forwarder - the bundle node that forwarded the bundle on its most
      recent hop.

   o  Intermediate Receiver or "Next Hop" - the neighboring bundle node
      to which a forwarder forwards a bundle.

   o  Path - the ordered sequence of nodes through which a bundle passes
      on its way from source to destination.  This may or may not be
      known by the bundle, or any of the bundle nodes.

   Figure 1 below is adapted from [RFC5050] and shows four bundle nodes
   (denoted BN1, BN2, BN3, and BN4) that reside above some transport
   layer(s).  Three distinct transport and network protocols (denoted T1
   /N1, T2/N2, and T3/N3) are also shown.

   +---------v-|   +->>>>>>>>>>v-+     +->>>>>>>>>>v-+   +-^---------+
   | BN1     v |   | ^   BN2   v |     | ^   BN3   v |   | ^  BN4    |
   +---------v-+   +-^---------v-+     +-^---------v-+   +-^---------+
   | T1      v |   + ^  T1/T2  v |     + ^  T2/T3  v |   | ^  T3     |
   +---------v-+   +-^---------v-+     +-^---------v +   +-^---------+
   | N1      v |   | ^  N1/N2  v |     | ^  N2/N3  v |   | ^  N3     |
   +---------v-+   +-^---------v +     +-^---------v-+   +-^---------+
   |         >>>>>>>>^         >>>>>>>>>>^         >>>>>>>>^         |
   +-----------+   +------------+      +-------------+   +-----------+
   |                     |                    |                      |
   |<--  An Internet --->|                    |<--- An Internet  --->|
   |                     |                    |                      |


    Figure 1: Bundle Nodes Sit at the Application Layer of the Internet
                                   Model

   BN1 originates a bundle that it forwards to BN2.  BN2 forwards the
   bundle to BN3, and BN3 forwards the bundle to BN4.  BN1 is the source



Birrane                 Expires January 16, 2014                [Page 4]

Internet-Draft                    SBSP                         July 2013


   of the bundle and BN4 is the destination of the bundle.  BN1 is the
   first forwarder, and BN2 is the first intermediate receiver; BN2 then
   becomes the forwarder, and BN3 the intermediate receiver; BN3 then
   becomes the last forwarder, and BN4 the last intermediate receiver,
   as well as the destination.

   If node BN2 originates a bundle (for example, a bundle status report
   or a custodial signal), which is then forwarded on to BN3, and then
   to BN4, then BN2 is the source of the bundle (as well as being the
   first forwarder of the bundle) and BN4 is the destination of the
   bundle (as well as being the final intermediate receiver).

   We introduce the following security-specific DTN terminology:

   o  Security-Service - the security features supported by this
      specification: authentication, integrity, and confidentiality.

   o  Security-Source - a bundle node that adds a security block to a
      bundle.

   o  Security-Destination - a bundle node that evaluates a security
      block from a bundle.  When a security-service is applied hop-by-
      hop, the security-destination is the next intermediate receiver.
      Otherwise, the security-destination is the same as the bundle
      destination.

   o  Security-Target - the portion of a bundle (e.g., the primary
      block, payload block, extension block, or entire bundle) that
      receives a security-service as part of a security-operation.

   o  Security Block - a single instance of a SBSP extension block in a
      bundle.

   o  Security-Operation - the application of a security-service to a
      specific security-target, notated as OP(security-service,
      security-target).  For example, OP(authentication, bundle) or
      OP(confidentiality, payload).  Every security-operation in a
      bundle must be unique, meaning that a security-service can only be
      applied to a security-target once in a bundle.  A security-
      operation may be implemented by one or more security blocks.

   Referring to Figure 1 again:

   If the bundle that originates at BN1 is given security blocks by BN1,
   then BN1 is the security-source for those blocks as well as being the
   source of the bundle.  If the bundle that originates at BN1 is then
   given a security block by BN2, then BN2 is the security-source for
   that block even though BN1 remains the bundle source.



Birrane                 Expires January 16, 2014                [Page 5]

Internet-Draft                    SBSP                         July 2013


   A bundle MAY have multiple security blocks and these blocks MAY have
   different security-sources.  Each security block in a bundle will be
   associated with a specific security-operation.  All security blocks
   comprising a security-operation MUST have the same security-source
   and security-destination.

   The destination of all security blocks in a bundle MUST be the bundle
   destination, with the exception of authentication security blocks,
   whose destination is the next hop along the bundle path.  In a DTN,
   there is typically no guarantee that a bundle will visit a particular
   intermediate receiver during its journey, or that a particular series
   of intermediate receivers will be visited in a particular order.
   Security-destinations different from bundle destinations would place
   a tight (and possibly intractable) coupling between security and
   routing services in an overlay network.  In cases where paths are
   both known and unchanging, security tunnels may be constructed
   separately from this security protocol specification.

   As required in [RFC5050], forwarding nodes MUST transmit blocks in a
   bundle in the same order in which they were received.  This
   requirement applies to all DTN nodes, not just ones that implement
   security processing.  Blocks in a bundle MAY be added or deleted
   according to the applicable specification, but those blocks that are
   both received and transmitted MUST be transmitted in the same order
   that they were received.

   If a node is not security-aware, then it forwards the security blocks
   in the bundle unchanged unless the bundle's block processing flags
   specify otherwise.  If a network has some nodes that are not
   security-aware, then the block processing flags SHOULD be set such
   that security blocks are not discarded at those nodes solely because
   they cannot be processed there.  Except for this, the non-security-
   aware nodes are transparent relay points and are invisible as far as
   security processing is concerned.

2.  Security Block Definitions

   There are three types of security blocks that MAY be included in a
   bundle.  These are the Bundle Authentication Block (BAB), the Block
   Integrity Block (BIB), and the Block Confidentiality Block (BCB).

      The BAB is used to ensure the authenticity and integrity of the
      bundle along a single hop from forwarder to intermediate receiver.
      As such, BABs operate between topologically adjacent nodes.
      Security-aware nodes MAY require BABs from a given neighbor in the
      network in order to receive and process a received bundle.





Birrane                 Expires January 16, 2014                [Page 6]

Internet-Draft                    SBSP                         July 2013


      The BIB is used to ensure the authenticity and integrity of its
      security-target from the BIB security-source, which creates the
      BIB, to the bundle destination, which verifies the BIB
      authenticator.  The authentication information in the BIB MAY
      (when possible) be verified by any node in between the BIB
      security-source and the bundle destination.

      The BCB indicates that the security-target has been encrypted, in
      whole or in part, at the BCB security-source in order to protect
      its content while in transit to the bundle destination.

   Certain ciphersuites may allow or require multiple instances of a
   block to appear in the bundle.  For example, an authentication
   ciphersuite may require two security blocks, one before the payload
   block and one after.  Despite the presence of two security blocks,
   they both comprise the same security-operation -
   OP(authentication,bundle) in this example.

   A security-operation MAY NOT be applied more than once in a bundle.
   For example, the two security-operations: OP(integrity, payload) and
   OP(integrity, payload) are redudant and may not appear together in a
   bundle.  However, the two security operations OP(integrity, payload)
   and OP(integrity, extension_block_1) MAY both be present in the
   bundle.  Also, the two security operations OP(integrity,
   extension_block_1) and OP(integrity, extension_block_2) are unique
   and may both appear in the same bundle.

   Each security block uses the Canonical Bundle Block Format as defined
   in [RFC5050].  That is, each security block is comprised of the
   following elements:

   o  Block-type code

   o  Block processing control flags

   o  Block EID-reference list (OPTIONAL)

   o  Block data length

   o  Block-type-specific data fields

   Since the three security blocks have most fields in common, we can
   shorten the description of the Block-type-specific data fields of
   each security block if we first define an abstract security block
   (ASB) and then specify each of the real blocks in terms of the fields
   that are present/absent in an ASB.  Note that no bundle ever contains
   an actual ASB, which is simply a specification artifact.




Birrane                 Expires January 16, 2014                [Page 7]

Internet-Draft                    SBSP                         July 2013


2.1.  Abstract Security Block

   The structure of an Abstract Security Block is given in Figure 2.
   Although the diagram hints at a fixed-format layout, this is purely
   for the purpose of exposition.  Except for the "type" field, all
   fields are variable in length.  Many of the fields below use the
   Self-Delimiting Numeric Value (SDNV) type whose format and encoding
   is as defined in [RFC5050].

   +-----------------------------+----------------------------------+
   |    Block Type Code (BYTE)   | Processing Control Flags (SDNV)  |
   +-----------------------------+----------------------------------+
   |        EID Reference Count and List (Compound List)            |
   +-----------------------------+----------------------------------+
   |    Block Length (SDNV)      |    Security Target (Compound)    |
   +-----------------------------+----------------------------------+
   |    Ciphersuite ID (SDNV)    |     Ciphersuite Flags (SDNV)     |
   +-----------------------------+----------------------------------+
   |    Params Length (SDNV)     |      Params Data (Compound)      |
   +-----------------------------+----------------------------------+
   |    Result Length (SDNV)     |      Result Data (Compound)      |
   +-----------------------------+----------------------------------+

                Figure 2: Abstract Security Block Structure

   An ASB consists of the following fields, some of which are optional.

   o  Block-Type Code (Byte) - as described in [RFC5050].  The block-
      type codes for security blocks are:

         BundleAuthenticationBlock - BAB: 0x02

         BlockIntegrityBlock - BIB: 0x03

         BlockConfidentialityBlock - BCB: 0x04

   o  Block Processing Control Flags (SDNV) - as described in [RFC5050].
      There are no general constraints on the use of the block
      processing control flags, and some specific requirements are
      discussed later.

   o  (OPTIONAL) EID Reference Count and List - as described in
      [RFC5050].  Presence of the EID-reference field is indicated by
      the setting of the "Block contains an EID-reference field"
      (EID_REF) bit of the block processing control flags.  If no EID
      fields are present, then the composite field itself MUST be
      omitted entirely and the EID_REF bit MUST be unset.  A count field
      of zero is not permitted.  The possible EIDs are:



Birrane                 Expires January 16, 2014                [Page 8]

Internet-Draft                    SBSP                         July 2013


         (OPTIONAL) Security-source - specifies the security-source for
         the block.  If this is omitted, then the source of the bundle
         is assumed to be the security-source unless otherwise indicated
         by policy or associated ciphersuite definition.  When present,
         the Security-Source MUST be the first EID in the list.

         (OPTIONAL) Unique Identifier - specifies the bundle-unique
         identifier for the block.  This is discussed in more detail in
         the Security-Target section below.

   o  Block Length (SDNV) - as described in [RFC5050].

   o  Block-type-specific data fields as follows:

      *  Security-Target (Compound) - Uniquely identifies the target of
         the associated security-operation.  The security-target for any
         security block MUST be unambiguous in the context of the bundle
         in which it resides.

         Currently, [RFC5050] provides no mechanism for uniquely
         identifying a block within a bundle.  Absent a formal mechanism
         for block identification, we RECOMMEND the following algorithm
         for uniquely identifying a block within a bundle.  Each block
         may be given a unique EID in its EID references using the block
         type as its scheme and a subscript as its scheme-specific part.
         For guaranteed unique block types (such as the payload block)
         the associated SSP is set at 0.  For block types that are not
         guaranteed to be unique, the SSP will be used to uniquely
         identify the block.

         A security-target may specify this <block type><subscript> and
         nodes may first select on block type and then subselect by
         subscript when matching the security-target to an actual
         extension block.

      *  Ciphersuite ID (SDNV)

      *  Ciphersuite flags (SDNV)

      *  (OPTIONAL) Ciphersuite-Parameters - compound field of the next
         two items.

         +  Ciphersuite-parameters length (SDNV) - specifies the length
            of the next field, which is the ciphersuite-parameters data
            field.

         +  Ciphersuite-parameters data - parameters to be used with the
            ciphersuite in use, e.g., a key identifier or initialization



Birrane                 Expires January 16, 2014                [Page 9]

Internet-Draft                    SBSP                         July 2013


            vector (IV).  See Section 2.7 for a list of potential
            parameters and their encoding rules.  The particular set of
            parameters that is included in this field is defined as part
            of a ciphersuite specification.

      *  (OPTIONAL) Security-Result - compound field of the next two
         items.

         +  Security-result length (SDNV) - contains the length of the
            next field, which is the security-result data field.

         +  Security-result data - contains the results of the
            appropriate ciphersuite-specific calculation (e.g., a
            signature, Message Authentication Code (MAC), or ciphertext
            block key).

   The structure of the ciphersuite flags field is shown in Figure 3.
   In each case, the presence of an optional field is indicated by
   setting the value of the corresponding flag to one.  A value of zero
   indicates the corresponding optional field is missing.  Presently,
   there are three flags defined for the field; for convenience, these
   are shown as they would be extracted from a single-byte SDNV.  Future
   additions may cause the field to grow to the left so, as with the
   flags fields defined in [RFC5050], the description below numbers the
   bit positions from the right rather than the standard RFC definition,
   which numbers bits from the left.

      bits 6-3 are reserved for future use.

      src - bit 2 indicates whether the EID-reference field of the ASB
      contains the optional reference to the security-source.

      parm - bit 1 indicates whether or not the ciphersuite-parameters
      length and ciphersuite-parameters data fields are present.

      res - bit 0 indicates whether or not the ASB contains the
      security-result length and security-result data fields.

     Bit   Bit   Bit   Bit   Bit   Bit   Bit
      6     5     4     3     2     1     0
   +-----+-----+-----+-----+-----+-----+-----+
   |    reserved           | src |parm | res |
   +-----+-----+-----+-----+-----+-----+-----+

                        Figure 3: Ciphersuite Flags

2.2.  Block Ordering




Birrane                 Expires January 16, 2014               [Page 10]

Internet-Draft                    SBSP                         July 2013


   A security-operation may be implemented in a bundle using either one
   or two security blocks.  For example, the operation
   OP(authentication, bundle) MAY be accomplished by a single BAB block
   in the bundle, or it MAY be accomplished by two BAB blocks in the
   bundle.  To avoid confusion, we use the following terminology to
   identify the block or blocks comprising a security-operation.

   The terms "First" and "Last" are used ONLY when describing multiple
   security blocks comprising a single security-operation.  A "First"
   block refers to the security block that is closest to the primary
   block in the canonical form of the bundle.  A "Last" block refers to
   the security block that is furthest from the primary block in the
   canonical form of the bundle.

   If a single security block implements the security-operation, then it
   is referred to as a "Lone" block.  For example, when a bundle
   authentication ciphersuite requires a single BAB block we refer to it
   as a Lone BAB.  When a bundle authentication ciphersuite requires two
   BAB blocks we refer to them as the First BAB and the Last BAB.

   This specification and individual ciphersuites impose restrictions on
   what optional fields must and must not appear in First blocks, Last
   blocks, and Lone blocks.

2.3.  Bundle Authentication Block

   This section describes typical field values for the BAB, which is
   solely used to implement OP(authentication, bundle).

      The block-type code field value MUST be 0x02.

      The block processing control flags value can be set to whatever
      values are required by local policy.  Ciphersuite designers should
      carefully consider the effect of setting flags that either discard
      the block or delete the bundle in the event that this block cannot
      be processed.

      The security-target MUST be the entire bundle, which MUST be
      represented by a type of 0x00.

      The ciphersuite ID MUST be documented as a hop-by-hop
      authentication-ciphersuite.  When a Lone BAB is used, the
      ciphersuite MUST be documented as requiring one instance of the
      BAB.  When a First BAB and Last BAB are used, the ciphersuite MUST
      be documented as requiring two instances of the BAB.

      The ciphersuite-parameters field MAY be present, if so specified
      in the ciphersuite specification.



Birrane                 Expires January 16, 2014               [Page 11]

Internet-Draft                    SBSP                         July 2013


      An EID-reference to the security-source MAY be present in either a
      First BAB or a Lone BAB.  An EID-reference to the security-source
      MAY NOT be present in a Last BAB.

      The security-result captures the result of applying the
      ciphersuite calculation (e.g., the MAC or signature) to the
      relevant parts of the bundle, as specified in the ciphersuite
      definition.  This field MUST be present in either a Lone BAB or a
      Last BAB.  This field MUST NOT be present in a First BAB.

   Notes:

   o  When multiple BAB blocks are used, the mandatory fields of the
      Last BAB must match those of the First BAB.

   o  The First BAB or Lone BAB, when present, SHOULD immediately follow
      the primary block.

   o  A Last BAB, when present, SHOULD be the last block in the bundle.

   o  Since OP(authentication, bundle) is allowed only once in a bundle,
      it is RECOMMENDED that users wishing to support multiple
      authentication signatures define a multi-target ciphersuite,
      capturing multiple security results in ciphersuite parameters.

2.4.  Block Integrity Block

   A BIB is an ASB with the following additional restrictions:

      The block-type code value MUST be 0x03.

      The block processing control flags value can be set to whatever
      values are required by local policy.  Ciphersuite designers should
      carefully consider the effect of setting flags that either discard
      the block or delete the bundle in the event that this block cannot
      be processed.

      The security-target MUST uniquely identify a block within the
      bundle.  The reserved block type 0x01 specifies the payload block.
      The reserved type 0x00 specifies the primary block.  The security-
      target for a BIB MAY NOT reference a security block defined in
      this specification (BAB, BIB, or BCB).

      The ciphersuite ID MUST be documented as an end-to-end
      authentication-ciphersuite or as an end-to-end error-detection-
      ciphersuite.





Birrane                 Expires January 16, 2014               [Page 12]

Internet-Draft                    SBSP                         July 2013


      The ciphersuite-parameters field MAY be present in either a Lone
      BIB or a First BIB.  This field MAY NOT be present in a Last BIB.

      An EID-reference to the security-source MAY be present in either a
      Lone BIB or a First BIB.  This field MAY NOT be present in a Last
      BIB.

      The security-result captures the result of applying the
      ciphersuite calculation (e.g., the MAC or signature) to the
      relevant parts of the security-target, as specified in the
      ciphersuite definition.  This field MUST be present in either a
      Lone BIB or a Last BIB.  This field MUST NOT be present in a First
      BIB.

      The ciphersuite MAY process less than the entire security-target.
      If the ciphersuite processes less than the complete, original
      security-target, the ciphersuite-parameters MUST specify which
      bytes of the security-target are protected.

   Notes:

   o  Since OP(integrity, target) is allowed only once in a bundle per
      target, it is RECOMMENDED that users wishing to support multiple
      integrity signatures for the same target define a multi-signature
      ciphersuite, capturing multiple security results in ciphersuite
      parameters.

   o  For some ciphersuites, (e.g., those using asymmetric keying to
      produce signatures or those using symmetric keying with a group
      key), the security information MAY be checked at any hop on the
      way to the destination that has access to the required keying
      information, in accordance with Section 2.6.

   o  The use of a generally available key is RECOMMENDED if custodial
      transfer is employed and all nodes SHOULD verify the bundle before
      accepting custody.

2.5.  Block Confidentiality Block

   A BCB is an ASB with the following additional restrictions:

      The block-type code value MUST be 0x04.

      The block processing control flags value can be set to whatever
      values are required by local policy, except that a Lone BCB or
      First BCB MUST have the "replicate in every fragment" flag set.
      This flag SHOULD NOT be set otherwise.  Ciphersuite designers
      should carefully consider the effect of setting flags that either



Birrane                 Expires January 16, 2014               [Page 13]

Internet-Draft                    SBSP                         July 2013


      discard the block or delete the bundle in the event that this
      block cannot be processed.

      The security-target MUST uniquely identify a block within the
      bundle.  The security-target for a BCB MAY reference the payload
      block, a non-security extension block, or a BIB block.  The
      reserved type 0x01 specifies the payload block.

      The ciphersuite ID MUST be documented as a confidentiality
      ciphersuite.

      Key-information, if available, MUST appear only in a Lone BCB or a
      First BCB.

      Any additional bytes generated as a result of encryption and/or
      authentication processing of the security-target SHOULD be placed
      in an "integrity check value" field (see Section 2.7) in the
      security-result of the Lone BCB or First BCB.

      The ciphersuite-parameters field MAY be present in either a Lone
      BCB or a First BCB.  This field MAY NOT be present in a Last BCB.

      An EID-reference to the security-source MAY be present in either a
      Lone BCB or a First BCB.  This field MAY NOT be present in a Last
      BCB.  The security-source can also be specified as part of key-
      information described in Section 2.7.

      The security-result MAY be present in either a Lone BCB or a Last
      BCB.  This field MAY NOT be present in a First BCB.  This compound
      field normally contains fields such as an encrypted EK and/or
      authentication tag.

   The BCB is the only security block that modifies the contents of its
   security-target.  When a BCB is applied, the security-target body
   data are encrypted "in-place".  Following encryption, the security-
   target body data contains ciphertext, not plaintext.  Other security-
   target block fields (such as type, processing control flags, and
   length) remain unmodified.

   Fragmentation, reassembly, and custody transfer are adversely
   affected by a change in size of the payload due to ambiguity about
   what byte range of the block is actually in any particular fragment.
   Therefore, when the security-target of a BCB is the bundle payload,
   the BCB MUST NOT alter the size of the payload block body data.
   Ciphersuites SHOULD place any block expansion, such as authentication
   tags (integrity check values) and any padding generated by a block-
   mode cipher, into an integrity check value item in the security-
   result field (see Section 2.7) of the BCB.  This "in-place"



Birrane                 Expires January 16, 2014               [Page 14]

Internet-Draft                    SBSP                         July 2013


   encryption allows fragmentation, reassembly, and custody transfer to
   operate without knowledge of whether or not encryption has occurred.

   Notes:

   o  The ciphersuite MAY process less than the entire original
      security-target body data.  If the ciphersuite processes less than
      the complete, original security-target body data, the BCB for that
      security-target MUST specify, as part of the ciphersuite-
      parameters, which bytes of the body data are protected.

   o  The BCB's "discard" flag may be set independently from its
      security-target's "discard" flag.  Whether or not the BCB's
      "discard" flag is set is an implementation/policy decision for the
      encrypting node.  (The "discard" flag is more properly called the
      "Discard if block cannot be processed" flag.)

   o  A BCB MAY include information as part of additional authenticated
      data to address parts of the target block, such as EID references,
      that are not converted to ciphertext.

   At the bundle destination, the processes described above are
   reversed.

2.6.  Block Interactions

   The three security-block types defined in this specification are
   designed to be as independent as possible.  While correlating
   multiple block instances may result in minor space savings due to
   shared information, such correlation also has the potential to
   increase computational complexity and processing ambiguity.  However,
   there are some cases where security blocks may share a security-
   target creating processing dependencies.

   If confidentiality is being applied to a target that already has
   integrity applied to it, then an undesireable condition occurs where
   a security-aware intermediate node would be unable to check the
   integrity result of a block because the block contents have been
   encrupted after the integrity signature was generated.  To address
   this concern, the following processing rules MUST be followed.

   o  If confidentiality is to be applied to a target, it MUST also be
      applied to every integrity operation already defined for that
      target.  This means that is a BCB is added to encrypt a block,
      another BCB MUST also be added to encrypt a BIB also targeting
      that block.





Birrane                 Expires January 16, 2014               [Page 15]

Internet-Draft                    SBSP                         July 2013


   o  An integrity value MAY NOT be evaluated if the BIB providing the
      integrity value is the security target of an existing BCB block in
      the bundle.  In such a case, the BIB data contains ciphertext as
      it has been encrypted.

   o  An integrity value MAY NOT be evaluated if the security-target of
      the BIB is also the security-target of a BCB in the bundle.  In
      such a case, the security-target data contains ciphertext as it
      has been encrypted.

   o  As mentioned in Section 2.5, a BIB MAY NOT has a BCB as its
      security target.  BCBs may embed integrity results as part of
      ciphersuite parameters.

2.7.  Parameters and Result Fields

   Various ciphersuites include several items in the security-parameters
   and/or security-result fields.  Which items MAY appear is defined by
   the particular ciphersuite description.  A ciphersuite MAY support
   several instances of the same type within a single block.

   Each item is represented as a type-length-value.  Type is a single
   byte indicating which item this is.  Length is the count of data
   bytes to follow, and is an SDNV-encoded integer.  Value is the data
   content of the item.

   Item types are

      0: Reserved

      1: Initialization Vector (IV)

      2: Reserved

      3: Key-Information

      4: Content-Range (offset and length as a pair of SDNVs)

      5: Integrity Signature

      6: Unassigned

      7: Salt

      8: BCB Integrity Check Value (ICV), which is also referred to as
      the Authentication Tag in this specification.

      9 - 255: reserved



Birrane                 Expires January 16, 2014               [Page 16]

Internet-Draft                    SBSP                         July 2013


   The following descriptions apply to the usage of these items for all
   ciphersuites.  Additional characteristics are noted in the discussion
   for specific suites.

   o  Initialization Vector (IV): random value, typically eight to
      sixteen bytes.

   o  Key-Information: key material encoded or protected by the key
      management system and used to transport an ephemeral key protected
      by a long-term key.

   o  Content-Range: pair of SDNV values (offset then length) specifying
      the range of payload bytes to which a particular operation
      applies.  The offset value MUST be the offset within the original
      bundle, which might not be the offset within the current bundle if
      the current bundle is already a fragment.

   o  Integrity Signature: result of BAB or BIB digest or signing
      operation.

   o  Salt: an IV-like value used by certain confidentiality suites.

   o  BCB integrity check value (ICV): output from certain
      confidentiality ciphersuite operations to be used at the
      destination to verify that the protected data has not been
      modified.  This value MAY contain padding if required by the
      ciphersuite.

2.8.  BSP Block Example

   An example of SBSP blocks applied to a bundle is illustrated in
   Figure 4.  In this figure the first column represents blocks within a
   bundle and the second column represents a unique identifier for each
   block, suitable for use as the security-target of a SBSP security-
   block.  Since the mechnism and format of a security-target is not
   specified in this document, the terminology B1...Bn is used to
   identify blocks in the bundle for the purposes of illustration.


            Block in Bundle            ID
   +=================================+====+
   |         Primary Block           | B1 |
   +---------------------------------+----+
   |          First BAB              | B2 |
   |   OP(authentication, Bundle)    |    |
   +---------------------------------+----+
   |          Lone BIB               | B3 |
   |  OP(integrity, target=B1)       |    |



Birrane                 Expires January 16, 2014               [Page 17]

Internet-Draft                    SBSP                         July 2013


   +---------------------------------+----+
   |          Lone BCB               | B4 |
   |  OP(confidentiality, target=B5) |    |
   +---------------------------------+----+
   |      Extension Block            | B5 |
   +---------------------------------+----+
   |          Lone BIB               | B6 |
   |  OP(integrity, target=B7)       |    |
   +---------------------------------+----+
   |      Extension Block            | B7 |
   +---------------------------------+----+
   |          Lone BCB               | B8 |
   |  OP(confidentiality, target=B9) |    |
   +---------------------------------+----+
   |   Lone BIB  (encrypted by B8)   | B9 |
   |  OP(integrity, target=B11)      |    |
   +---------------------------------+----+
   |          Lone BCB               |B10 |
   | OP(confidentiality, target=B11) |    |
   +---------------------------------+----+
   |         Payload Block           |B11 |
   +---------------------------------+----+
   |          Last BAB               |B12 |
   |   OP(authentication, Bundle)    |    |
   +---------------------------------+----+

                    Figure 4: Sample Use of BSP Blocks

   In this example a bundle has four non-security-related blocks: the
   primary block, two extension blocks, and a payload block.  The
   following security applications are applied to this bundle.

   o  Authentication over the bundle.  This is accomplished by two BAB
      blocks: B2 and B12.

   o  An integrity signature applied to the primary block.  This is
      accomplished by a single BIB, B3.

   o  Confidentiality for the first extension block.  This is
      accomplished by a single BCB block, B4.

   o  Integrity for the second extension block.  This is accomplished by
      a single BIB block, B6.

   o  An integrity signature on the payload.  This is accomplished by a
      single BIB block, B9.





Birrane                 Expires January 16, 2014               [Page 18]

Internet-Draft                    SBSP                         July 2013


   o  Confidentiality for the payload block and it's integrity
      signature.  This is accomplished by two Lone BCB blocks: B8
      encrypting B9, and B10 encrypting B11.

3.  Security Processing

   This section describes the security aspects of bundle processing.

3.1.  Canonical Forms

   In order to verify a signature or MAC on a bundle, the exact same
   bits, in the exact same order, MUST be input to the calculation upon
   verification as were input upon initial computation of the original
   signature or MAC value.  Consequently, a node MUST NOT change the
   encoding of any URI [RFC3986] in the dictionary field, e.g., changing
   the DNS part of some HTTP URL from lower case to upper case.  Because
   bundles MAY be modified while in transit (either correctly or due to
   implementation errors), canonical forms of security-targets MUST be
   defined.

3.1.1.  Bundle Canonicalization

   Bundle canonicalization permits no changes at all to the bundle
   between the security-source and the destination, with the exception
   of one of the Block Processing Control Flags, as described below.  It
   is intended for use in BAB ciphersuites.  This algorithm conceptually
   catenates all blocks in the order presented, but omits all security-
   result data fields in security blocks having the bundle as their
   security-target.  For example, when a BAB ciphersuite specifies this
   algorithm, we omit the BAB security-result from the catenation.
   Security-result length fields MAY or MAY NOT be included, even though
   their corresponding security-result data fields are omitted, as
   specified by the ciphersuite.

   Notes:

   o  In the Block Processing Control Flags field, in every block other
      than the Primary Block, the flag at bit 5, "Block was forwarded
      without being processed" is zeroed out.  The Block Processing
      Control Flags field, which is an SDNV, is unpacked into a fixed-
      width field, and some bits are masked out.  The unpacked field is
      ANDed with mask 0xFFFF FFFF FFFF FFDF to set to zero the "Block
      was forwarded without being processed" bit.  If this flag is not
      zeroed out, then a bundle passes through a non-security aware
      node, this flag will be set.  This will then change the message
      digest, and a BAB block will fail to verify.





Birrane                 Expires January 16, 2014               [Page 19]

Internet-Draft                    SBSP                         July 2013


   o  In the above, we specify that security-result data is omitted.
      This means that no bytes of the security-result data are input.
      If the security-result length is included in the catenation, we
      assume that the security-result length will be known to the module
      that implements the ciphersuite before the security-result is
      calculated, and require that this value be in the security-result
      length field even though the security-result data itself will be
      omitted.

   o  The 'res' bit of the ciphersuite ID, which indicates whether or
      not the security-result length and security-result data field are
      present, is part of the canonical form.

   o  The value of the block data length field, which indicates the
      length of the block, is also part of the canonical form.  Its
      value indicates the length of the entire block when the block
      includes the security-result data field.

3.1.2.  Block Canonicalization

   This algorithm protects those parts of a block that SHOULD NOT be
   changed in transit.

   Many fields in various blocks are stored as variable-length SDNVs.
   These are canonicalized in unpacked form, as eight-byte fixed-width
   fields in network byte order.  The size of eight bytes is chosen
   because implementations MAY handle larger values as invalid, as noted
   in [RFC5050].

   There are three types of blocks that may undergo block
   canonicalization: the primary block, the payload block, or an
   extension block.

3.1.2.1.  Primary Block Canonicalization

   The canonical form of the primary block is shown in Figure 5.
   Essentially, it de-references the dictionary block, adjusts lengths
   where necessary, and ignores flags that MAY change in transit.

   +----------------+----------------+----------------+----------------+
   |    Version     |      Processing flags (incl. COS and  SRR)       |
   +----------------+----------------+---------------------------------+
   |                Canonical primary block length                     |
   +----------------+----------------+---------------------------------+
   |                Destination endpoint ID length                     |
   +----------------+----------------+---------------------------------+
   |                      Destination endpoint ID                      |
   +----------------+----------------+---------------------------------+



Birrane                 Expires January 16, 2014               [Page 20]

Internet-Draft                    SBSP                         July 2013


   |                    Source endpoint ID length                      |
   +----------------+----------------+----------------+----------------+
   |                        Source endpoint ID                         |
   +----------------+----------------+---------------------------------+
   |                  Report-to endpoint ID length                     |
   +----------------+----------------+----------------+----------------+
   |                      Report-to endpoint ID                        |
   +----------------+----------------+----------------+----------------+
   +                    Creation Timestamp (2 x SDNV)                  +
   +---------------------------------+---------------------------------+
   |                             Lifetime                              |
   +----------------+----------------+----------------+----------------+

         Figure 5: The Canonical Form of the Primary Bundle Block

   The fields shown in Figure 5 are as follows:

   o  The version value is the single-byte value in the primary block.

   o  The processing flags value in the primary block is an SDNV, and
      includes the class-of-service (COS) and status report request
      (SRR) fields.  For purposes of canonicalization, the SDNV is
      unpacked into a fixed-width field, and some bits are masked out.
      The unpacked field is ANDed with mask 0x0000 0000 0007 C1BE to set
      to zero all reserved bits and the "bundle is a fragment" bit.

   o  The canonical primary block length value is a four-byte value
      containing the length (in bytes) of this structure, in network
      byte order.

   o  The destination endpoint ID length and value are the length (as a
      four-byte value in network byte order) and value of the
      destination endpoint ID from the primary bundle block.  The URI is
      simply copied from the relevant part(s) of the dictionary block
      and is not itself canonicalized.  Although the dictionary entries
      contain "null-terminators", the null-terminators are not included
      in the length or the canonicalization.

   o  The source endpoint ID length and value are handled similarly to
      the destination.

   o  The report-to endpoint ID length and value are handled similarly
      to the destination.

   o  The creation timestamp (2 x SDNV) and lifetime (SDNV) are simply
      copied from the primary block, with the SDNV values being
      represented as eight-byte unpacked values, in network byte order.




Birrane                 Expires January 16, 2014               [Page 21]

Internet-Draft                    SBSP                         July 2013


   o  Fragment offset and total application data unit length are
      ignored, as is the case for the "bundle is a fragment" bit
      mentioned above.  If the payload data to be canonicalized is less
      than the complete, original bundle payload, the offset and length
      are specified in the security-parameters.

3.1.2.2.  Payload Block Canonicalization

   Payload blocks are canonicalized as-is, with the exception that, in
   some instances, only a portion of the payload data is to be
   protected.  In such a case, only those bytes are included in the
   canonical form, and additional ciphersuite-parameters are required to
   specify which part of the payload is protected, as discussed further
   below.

3.1.2.3.  Extension Block Canonicalization

   When canonicalizing an extension block, the block processing control
   flags value used for canonicalization is the unpacked SDNV value with
   reserved and mutable bits masked to zero.  The unpacked value is
   ANDed with mask 0x0000 0000 0000 0057 to zero reserved bits, the
   "last block" flag and the "Block was forwarded without being
   processed" bit.  The "last block" flag is ignored because BABs and
   other security blocks MAY be added for some parts of the journey but
   not others, so the setting of this bit might change from hop to hop.

   The "Block was forwarded without being processed" flag is ignored
   because the bundle may pass through nodes that do not understand that
   extension block and this flag would be set.

   Endpoint ID references in blocks are canonicalized using the de-
   referenced text form in place of the reference pair.  The reference
   count is not included, nor is the length of the endpoint ID text.
   The EID reference is, therefore, canonicalized as <scheme>:<SSP>,
   which includes the ":" character.

   The block-length is canonicalized as an eight-byte unpacked value in
   network byte order.  If the data to be canonicalized is less than the
   complete, original block data, this field contains the size of the
   data being canonicalized (the "effective block") rather than the
   actual size of the block.

3.1.3.  Considerations

   o  The canonical forms for the bundle and various extension blocks is
      not transmitted.  It is simply an artifact used as input to
      digesting.




Birrane                 Expires January 16, 2014               [Page 22]

Internet-Draft                    SBSP                         July 2013


   o  We omit the reserved flags because we cannot determine if they
      will change in transit.  The masks specified above will have to be
      revised if additional flags are defined and they need to be
      protected.

   o  Our URI encoding does not preserve the null-termination convention
      from the dictionary field, nor do we canonicalize the scheme and
      scheme-specific part (SSP) separately.  Instead, the byte array <
      scheme name > : < scheme-specific part (SSP)> is used in the
      canonicalization.

   o  Since neither the length of the canonicalized EID text nor a null-
      terminator is used in EID canonicalization, a separator token MUST
      be used to determine when one EID ends and another begins.  When
      multiple EIDs are canonicalized together, the character "," SHALL
      be placed between adjacent instances of EID text.

   o  The URI encoding will cause errors if any node rewrites the
      dictionary content (e.g., changing the DNS part of an HTTP URL
      from lower case to upper case).  This could happen transparently
      when a bundle is synched to disk using one set of software and
      then read from disk and forwarded by a second set of software.
      Because there are no general rules for canonicalizing URIs (or
      IRIs), this problem may be an unavoidable source of integrity
      failures.

   o  All SDNV fields here are canonicalized as eight-byte unpacked
      values in network byte order.  Length fields are canonicalized as
      four-byte values in network byte order.  Encoding does not need
      optimization since the values are never sent over the network.

   o  These canonicalization algorithms assume that endpoint IDs
      themselves are immutable and they are unsuitable for use in
      environments where that assumption might be violated.

   o  Ciphersuites MAY define their own canonicalization algorithms and
      require the use of those algorithms over the ones provided in this
      specification.

3.2.  Endpoint ID Confidentiality

   Every bundle MUST contain a primary block that contains the source
   and destination endpoint IDs, and possibly other EIDs (in the
   dictionary field), and that cannot be encrypted.  If endpoint ID
   confidentiality is required, then bundle-in-bundle encapsulation can
   solve this problem in some instances.





Birrane                 Expires January 16, 2014               [Page 23]

Internet-Draft                    SBSP                         July 2013


   Similarly, confidentiality requirements MAY also apply to other parts
   of the primary block (e.g., the current-custodian), and that is
   supported in the same manner.

3.3.  Bundles Received from Other Nodes

   Security blocks MUST be processed in a specific order when received
   by a security-aware node.  The processing order is as follows.

   o  All BAB blocks in the bundle MUST be evaluated prior to evaluating
      any other block in the bundle.

   o  All BCB blocks in the bundle SHOULD be evaluated prior to
      evaluating any BIBs in the bundle.  When BIBs and BCBs share a
      security-target, BCBs MUST be evaluated first and BIBs second.

   Nodes implementing this specification SHALL consult their security
   policy to determine whether or not a received bundle is required by
   policy to include a BAB.  If the bundle has no BAB, and one is not
   required, then BAB processing on the received bundle is complete, and
   the bundle is ready to be further processed for BIB/BCB handling or
   delivery or forwarding.

   If the bundle is required to have a BAB but does not, then the bundle
   MUST be discarded and processed no further.  If the BAB security-
   source cannot be determined or the security-result value check fails,
   the bundle has failed to authenticate, and the bundle MUST be
   discarded and processed no further.  If the BAB verifies, or if a BAB
   is not required, the bundle is ready for further processing as
   determined by extension blocks and/or policy.

   A BAB received in a bundle MUST be stripped before the bundle is
   forwarded.  A new BAB MAY be added as required by policy.  This MAY
   require correcting the "last block" field of the to-be-forwarded
   bundle.

   If the bundle has a BIB and the receiving node is the destination for
   the bundle, the node MUST verify the security-target in accordance
   with the ciphersuite specification.  If the security-target fails to
   verify, it MUST be processed in accordance with the security policy
   of the node.

   If the security policy of a security-aware node specifies that a
   bundle SHOULD apply integrity to a specific security-target and no
   such BIB is present in the bundle, then the node MUST process this
   security-target in accordance with the security policy.  This MAY
   involve removing the security-target from the bundle.  If the removed
   security-target is the payload or primary block, the bundle MAY be



Birrane                 Expires January 16, 2014               [Page 24]

Internet-Draft                    SBSP                         July 2013


   discarded.  This action MAY occur at any node that has the ability to
   verify an integrity signature, not just the bundle destination.

   If the bundle has a BCB and the receiving node is the destination for
   the bundle, the node MUST decrypt the relevant parts of the security-
   target in accordance with the ciphersuite specification.

   If the relevant parts of an encrypted payload cannot be decrypted
   (i.e., the decryption key cannot be deduced or decryption fails),
   then the bundle MUST be discarded and processed no further; in this
   case, a bundle deletion status report (see [RFC5050]) indicating the
   decryption failure MAY be generated.  If any other encrypted
   security-target cannot be decrypted then the associated security-
   target and all security blocks associated with that target MUST be
   discarded and processed no further.

   When a BCB is decrypted, the recovered plaintext MUST replace the
   ciphertext in the security-target body data

   If the bundle has one or more BIBs and the receiving node is the
   bundle's destination, the node MUST verify the value in each BIB
   security-result field(s) in accordance with the ciphersuite
   specification.  If a BIB check fails, the security-target has failed
   to authenticate and the security-target SHALL be processed according
   to the security policy.  A bundle status report indicating the
   failure MAY be generated.  Otherwise, if the BIB verifies, the
   security-target is ready to be processed for delivery.

   If the bundle has a BIB and the receiving node is not the bundle
   destination, the receiving node MAY attempt to verify the value in
   the security-result field.  If it is able to check and the check
   fails, the node SHALL process the security-target in accordance to
   local security policy.  It is RECOMMENDED that if a payload integrity
   check fails that the bundle be discarded and that if an extension
   block integrity check fails, the block and all security blocks using
   it as their security-target be removed from the bundle.

3.4.  Bundle Fragmentation and Reassembly

   If it is necessary for a node to fragment a bundle and security
   services have been applied to that bundle, the fragmentation rules
   described in [RFC5050] MUST be followed.  As defined there and
   repeated here for completeness, only the payload MAY be fragmented;
   security blocks, like all extension blocks, can never be fragmented.
   In addition, the following security-specific processing is REQUIRED:






Birrane                 Expires January 16, 2014               [Page 25]

Internet-Draft                    SBSP                         July 2013


   o  The security policy requirements for a bundle MUST be applied
      individually to all the bundles resulting from a fragmentation
      event.

   o  If the original bundle contained the security-operation
      OP(integrity, payload), then each of the associated BIB blocks
      MUST be included in some fragment.

   o  If the original bundle contained the security-operation
      OP(confidentiality, payload), then the "first" BCB block, which
      contains key-information, MUST have the "replicate in every
      fragment" flag set, and thereby be replicated in every fragment.
      This is to ensure that the canonical block-sequence can be
      recovered during reassembly.  The Last BCB for this security-
      operation, if any, MUST be included in some fragment but SHOULD
      NOT be sent more than once.  They MUST be placed in a fragment in
      accordance with the fragmentation rules described in [RFC5050].

   o  Due to the complexity of bundle fragmentation, including the
      possibility of fragmenting bundle fragments, integrity and
      confidentiality operations are not to be applied to a bundle
      fragment.  Specifically, a BCB or BIB may not be added to a bundle
      fragment, even if the security-target of the security block is not
      the payload.  When integrity and confidentiality must be applied
      to a fragment, we RECOMMEND that encapsulation be used instead.

   o  Ciphersuites that support applying security-services to less than
      the complete, original security-target MUST specify, as part of
      the ciphersuite-parameters, which bytes of the security-target are
      affected.  When verification occurs, only the specified range of
      the security-target bytes are used for verification.

   o  A BAB ciphersuite MAY specified that it only applied to non-
      fragmented bundles and not to bundle fragments.

   o  A ciphersuite MAY be specified to apply to only a portion of a
      security-target, regardless of whether the security-target is a
      fragment.

   o  The decision to fragment a bundle MUST be made prior to adding
      authentication to the bundle.  A bundle with BAB blocks MAY NOT be
      fragmented.  Instead, the bundle MUST first be fragmented and
      authentication applied to each individual fragment.

3.5.  Reactive Fragmentation

   When a partial bundle has been received, the receiving node SHALL
   consult its security policy to determine if it MAY fragment the



Birrane                 Expires January 16, 2014               [Page 26]

Internet-Draft                    SBSP                         July 2013


   bundle, converting the received portion into a bundle fragment for
   further forwarding.  Whether or not reactive fragmentation is
   permitted SHALL depend on the security policy and the ciphersuite
   used to calculate the BAB authentication information, if required.

4.  Key Management

   Key management in delay-tolerant networks is recognized as a
   difficult topic and is one that this specification does not attempt
   to solve.

5.  Security Considerations

   Certain applications of DTN need to both sign and encrypt a message,
   and there are security issues to consider with this.

   If the intent is to provide an assurance that a message did, in fact,
   come from a specific source and has not been changed, then it should
   be signed first and then encrypted.  A signature on an encrypted
   message does not establish any relationship between the signer and
   the original plaintext message.

   On the other hand, if the intent is to reduce the threat of denial-
   of-service attacks, then signing the encrypted message is
   appropriate.  A message that fails the signature check will not be
   processed through the computationally intensive decryption pass.  A
   more extensive discussion of these points is in S/MIME 3.2 Message
   Specification [RFC5751], especially in Section 3.6.

   If a security-destination were to generate reports in the event that
   some security validation step fails, then that might leak information
   about the internal structure or policies of the DTN containing the
   security-destination.  This is sometimes considered bad security
   practice, so it SHOULD only be done with care.

6.  Conformance

   All implementations are strongly RECOMMENDED to provide at least a
   BAB ciphersuite.  A relay node, for example, might not deal with end-
   to-end confidentiality and data integrity, but it SHOULD exclude
   unauthorized traffic and perform hop-by-hop bundle verification.

7.  IANA Considerations

   This protocol has fields that have been registered by IANA.

7.1.  Bundle Block Types




Birrane                 Expires January 16, 2014               [Page 27]

Internet-Draft                    SBSP                         July 2013


   This specification allocates three codepoints from the existing
   "Bundle Block Types" registry defined in [RFC6255].

       Additional Entries for the Bundle Block-Type Codes Registry:

         +--------+-----------------------------+---------------+
         | Value  |         Description         |   Reference   |
         +--------+-----------------------------+---------------+
         |   2    | Bundle Authentication Block | This document |
         |   3    |    Block Integrity Block    | This document |
         |   4    | Block Confidentiality Block | This document |
         +--------+-----------------------------+---------------+

                                  Table 1

7.2.  Ciphersuite Flags

   This protocol has a ciphersuite flags field and certain flags are
   defined.  An IANA registry has been set up as follows.

   The registration policy for this registry is: Specification Required

   The Value range is: Variable Length

                        Ciphersuite Flag Registry:

   +------------------------+------------------------+-----------------+
   | Bit Position (right to |      Description       |    Reference    |
   |         left)          |                        |                 |
   +------------------------+------------------------+-----------------+
   |           0            | Block contains result  |  This document  |
   |           1            |     Block Contains     |  This document  |
   |                        |       parameters       |                 |
   |           2            | Source EID ref present |  This document  |
   |           >3           |        Reserved        |  This document  |
   +------------------------+------------------------+-----------------+

                                  Table 2

7.3.  Parameters and Results

   This protocol has fields for ciphersuite-parameters and results.  The
   field is a type-length-value triple and a registry is required for
   the "type" sub-field.  The values for "type" apply to both the
   ciphersuite-parameters and the ciphersuite results fields.  Certain
   values are defined.  An IANA registry has been set up as follows.

   The registration policy for this registry is: Specification Required



Birrane                 Expires January 16, 2014               [Page 28]

Internet-Draft                    SBSP                         July 2013


   The Value range is: 8-bit unsigned integer.

             Ciphersuite-Parameters and Results Type Registry:

       +---------+---------------------------------+---------------+
       |  Value  |           Description           |   Reference   |
       +---------+---------------------------------+---------------+
       |    0    |             reserved            | This document |
       |    1    |    initialization vector (IV)   | This document |
       |    2    |             reserved            | This document |
       |    3    |         key-information         | This document |
       |    4    |  content-range (pair of SDNVs)  | This document |
       |    5    |       integrity signature       | This document |
       |    6    |            unassigned           | This document |
       |    7    |               salt              | This document |
       |    8    | BCB integrity check value (ICV) | This document |
       |  9-191  |             reserved            | This document |
       | 192-250 |           private use           | This document |
       | 251-255 |             reserved            | This document |
       +---------+---------------------------------+---------------+

                                  Table 3

8.  References

8.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC5050]  Scott, K. and S. Burleigh, "Bundle Protocol
              Specification", RFC 5050, November 2007.

   [RFC6255]  Blanchet, M., "Delay-Tolerant Networking Bundle Protocol
              IANA Registries", RFC 6255, May 2011.

8.2.  Informative References

   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66, RFC
              3986, January 2005.

   [RFC4838]  Cerf, V., Burleigh, S., Hooke, A., Torgerson, L., Durst,
              R., Scott, K., Fall, K., and H. Weiss, "Delay-Tolerant
              Networking Architecture", RFC 4838, April 2007.






Birrane                 Expires January 16, 2014               [Page 29]

Internet-Draft                    SBSP                         July 2013


   [RFC5751]  Ramsdell, B. and S. Turner, "Secure/Multipurpose Internet
              Mail Extensions (S/MIME) Version 3.2 Message
              Specification", RFC 5751, January 2010.

   [RFC6257]  Symington, S., Farrell, S., Weiss, H., and P. Lovell,
              "Bundle Security Protocol Specification", RFC 6257, May
              2011.

Appendix A.  Acknowlegements

   The following participants contributed technical material, use cases,
   and useful thoughts on the overall approach to this security
   specification: Scott Burleigh of the Jet Propulsion Laboratory, Amy
   Alford and Angela Hennessy of the Laboratory for Telecommunications
   Sciences, and Angela Dalton and Cherita Corbett of the Johns Hopkins
   University Applied Physics Laboratory.

Author's Address

   Edward J. Birrane, III
   The Johns Hopkins University Applied Physics Laboratory
   11100 Johns Hopkins Rd.
   Laurel, MD  20723
   US

   Phone: +1 443 778 7423
   Email: Edward.Birrane@jhuapl.edu
























Birrane                 Expires January 16, 2014               [Page 30]
