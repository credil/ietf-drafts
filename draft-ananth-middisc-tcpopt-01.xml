<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<rfc category="exp" docName="draft-ananth-middisc-tcpopt-01.txt"
     ipr="trust200902">
  <front>
    <title abbrev="TCP middlebox negotiation">TCP option for transparent Middlebox negotiation</title>

    <author fullname="Andrew Knutsen" initials="A." surname="Knutsen">
      <organization> Blue Coat Systems </organization>

      <address>
        <postal>
          <street>420 North Mary Ave</street>

          <city>Sunnyvale</city>

          <region>CA</region>

          <code>94085-4121 </code>

          <country>USA</country>
        </postal>

        <phone>+1 (408) 220-2250</phone>

        <email>andrew.knutsen@bluecoat.com</email>
      </address>
    </author>

    
    <author fullname="Anantha Ramaiah" initials="A." surname="Ramaiah">
      <organization>NTT MCL Inc</organization>

      <address>
        <postal>
          <street>101 S. Ellsworth Avenue, Suite 350</street>

          <city>San Mateo</city>

          <region>CA</region>

          <code>94401</code>

          <country>USA</country>
        </postal>

        <email>ananth@nttmcl.com</email>
      </address>
    </author>

    <author fullname="Arivu Ramasamy" initials="A." surname="Ramasamy">
      <organization>Cisco</organization>

      <address>
        <postal>
          <street>170 Tasman Drive</street>

          <city>San Jose</city>

          <region>CA</region>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <phone>+1 (408) 525-5962</phone>

        <email>mani@cisco.com</email>
      </address>
    </author>

    
    <date day="21" month="January" year="2013" />

    <area>Transport</area>

    <workgroup>Transport WG</workgroup>

    <keyword>Internet-Draft</keyword>

    <abstract>
      <t> This document describes a TCP option for use by middleboxes to facilitate transparent detection of other middleboxes along the path of the TCP connection during the connection initiation phase. The option has no effect if an appropriate middlebox is not present on the path. 

 </t>
    </abstract>
  </front>

  <middle>
<section title="Terminology">
<t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"></xref>
</t>
<t>
Middlebox
</t>
<t>
<list style="empty">
<t>
 "Middleboxes: Taxonomy and Issues" <xref target="RFC3234"></xref> defines a middlebox as follows: 
</t>
<t>
"A middlebox is defined as any intermediary device performing functions other than the normal, standard functions of an IP router on the datagram path between a source host and destination host." 
</t>
</list>
</t>
<t>
Proxy 
</t>
<t>
<list style="empty">
<t>
HTTP1.1 <xref target="RFC2616"></xref>
 defines a proxy as follows: "An intermediary program which acts as both a server and a client for the purpose of making requests on behalf of other clients." Proxies exist for many protocols, such as HTTP, CIFS, MAPI and streaming. Since they act as both server and client, they have separate TCP connections to the original client and the actual server (also referred to as the "Original Content Server"). Proxies are often implemented on middleboxes. Proxies fall into two general categories: "Explicit" and "Transparent". The client must be configured to connect to an explicit proxy; it then passes the server address to it using an application protocol, such as HTTP. Transparent proxies require no client configuration; they intercept the client connection to the server, speaking to the client on its behalf, and make a separate connection to the server without the knowledge of the client. This memo deals exclusively with cooperating transparent proxies.
</t>
</list>
</t>
<t>
Peer 
</t>
<t>
<list style="empty">
<t>
Two or more middleboxes with an effective association or relationship are peers. For example, one middlebox might compress data while another middlebox decompresses; neither middlebox can correctly manipulate traffic unless they both establish the existence of the other and coordinate their actions.  The most common peering relationships are two-way (like the compression example) in which one middlebox performs a transformation that the other middlebox inverts. However, two-way peering that does not involve an invertible transformation is also found, as are n-way peering relationships where the &quot;intermediate&quot; peers are simply operating in a pass-through or failover mode.
</t>
</list>
</t>
</section>

    <section title="Introduction">
	
	
     <t>  
         For middleboxes that operate on TCP-based application protocols, it is highly desirable for negotiation information to be carried within packets containing valid TCP protocol data. One significant kind of service offered by such middleboxes is application acceleration, in which there is an intrinsic requirement to be efficient and avoid network round trips. A middlebox-negotiation mechanism that imposes additional round trips could defeat the purpose of such middleboxes. Middlebox negotiation on a per-connection basis allows for significant advantages in scale and flexibility. Middlebox-based services can be invoked dynamically, using the appropriate peers, without any need for statically identifying middleboxes to end hosts or identifying middleboxes to each other. Dynamic negotiation means that there is no overlay routing required for middlebox-based services, where such overlay routing could potentially clash with the underlying IP routing. For all of these reasons, multiple vendors have implemented TCP-option-based negotiation mechanisms; and for similar reasons, this memo requests a TCP option for middle box negotiation.
     </t>    
<t>
 The TCP middlebox negotiation option (TCP-MNO) allows a source node (initiating middlebox) on the initiating path of a TCP connection to request a response from other middleboxes with a matching capability closer to the destination host. In addition, it allows the initiating middlebox to provide information to the other middleboxes which they may need to decide whether to respond to this request. A middlebox MAY examine TCP packets with the SYN bit set to determine if the associated TCP connection qualifies for the middlebox-provided service. If so, the middlebox MAY insert the TCP-MNO into the packet header before sending it on. A middlebox MAY examine packets containing the TCP-MNO to determine if the associated TCP connection qualifies for the middlebox-provided service. If so, the middlebox MAY take additional actions to coordinate with the initiating middlebox. Such actions MAY include acknowledging the SYN packet to intercept the connection; originating a separate connection to the client; or perhaps notifying a management station.
</t>

<t>
TCP end hosts are unaware of TCP-MNO, and its usage is strictly for use by TCP middleboxes. Note however that the middlebox may be running on the TCP end host itself in some form, and may use TCP-MNO. Multiple vendors of WAN optimization products have used similar (but incompatible and proprietary) mechanisms since at least 2004. Those existing vendor systems use multiple TCP option code points, all of which are officially unassigned by IANA. The goal of this memo is to standardize a single TCP option code point for this functionality. Note that TCP is inherently end-to-end, and the network infrastructure (including middleboxes) are not supposed to alter the TCP headers, but the current deployment practice has resulted in the middleboxes violating this architectural principle to address a market need. Goal of this memo is not to say this is good or bad but merely acknowledges the reality and encourages the use of a shared documented option number for such uses.
</t>

<t>
This memo is the product of discussion among some of the vendors currently using incompatible proprietary TCP options for middlebox negotiation. It is a non-goal of this memo to achieve interoperability of middlebox negotiation between multiple vendors. It needs to be noted that an earlier document <xref target="I-D.knutsen-tcpm-middlebox-discovery"></xref>, is re-written as the current document after agreement from multiple vendors.
</t>

</section>

    <section title="Requirements of the TCP-MNO">
     <t>
         The following are the requirements of TCP-MNO :
         <list style="hanging">

         <t hangText="1)"> The TCP-MNO MUST be variable length to accommodate multiple vendor option formats.
         </t>
         <t hangText="2)"> The TCP-MNO MUST have a vendor ID which can identify the specific vendor as implied by 1) 
         </t>
         <t hangText="3)"> The TCP option space limitation puts a burden on how flexible the option can be. Please refer section 6 below.
         </t>
         <t hangText="4)"> TCP option numbers already in use by proprietary systems SHOULD NOT be reused for TCP-MNO since it would create confusion. (These option numbers would get eventually retired when all vendors migrate to the newly allocated TCP-MNO option)
         </t>
         <t hangText="5)"> The TCP-MNO SHOULD be used for middleboxes only. The hosts are expected to silently ignore this option. 
     </t>
     </list>
     </t>

    </section>
    <section title="Description">
    <t>
        The TCP-MNO MAY be included in the TCP handshake (SYN and SYN+ACKpackets). The TCP-MNO contained in the SYN packet is used to discover peer middleboxes along the path to the server. The TCP-MNO option MAY be present in the TCP SYN+ACK and other TCP data packets as well.
    </t>
     <t>
        It should be noted that a common use of middleboxes is to set up cooperating peer proxies. One example is to implement a feature which optimizes the WAN traffic, like a compression protocol. In these cases, the option is used by the device nearer to the client to discover a possible device nearer to the server. Thus the client and server application are not aware of the option. Figure 1 illustrates the text above.
     </t>
     <figure>
     <artwork>

     CLIENT ----- Middlebox1 ================ Middlebox2 ------ SERVER
                                 WAN link

        ------SYN-------&gt;|---- SYN, TCP-MNO -----&gt;|----SYN---&gt;
           &lt;---SYN+ACK---|&lt;---SYN+ACK, TCP-MNO----|&lt;---SYN+ACK----

       Figure 1: TCP-MNO option insertion during TCP handshake
     </artwork>
     </figure>
     
    </section>

    <section title="TCP-MNO option format">
     <t> 
      The following is the agreed-upon option format for TCP-MNO. 
      </t>
    
     <t>
      <figure align="center">
        <artwork align="left"><![CDATA[
     0               1                 2               3
     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     | Kind = xx   | Length         |   Vendor = YY  |   Vendor    |      
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+             |                  
     |      Payload data dependent on Vendor typecode              |                 
     |                                                             |
     |             (Variable Length)                               |                                      
     |                                                             |
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

     (One tick mark represents one bit)
           Figure 2 : Format of TCP-MNO

 ]]></artwork>
  </figure>
</t>
<t>
 Even after 8 years of commercial development, there are only a handful of vendors with different option-based negotiation schemes. Accordingly, 8 bits is likely to be more than sufficient for vendor identification. Ideally, future work would define a single interoperable middlebox negotiation scheme to replace the multiple vendor-specific schemes. 
</t>
<t>
  The PEN (32 bit Private Enterprise numbers) is an existing mechanism which could be used to identify various vendors (http://www.iana.org/assignments/enterprise-numbers). Because of the very limited amount of TCP option space, using 32 bits for an enterprise number is impractical. The next section talks more about the TCP option space issue.
</t>
<t>
   Other formats for TCP-MNO have been previously considered, including an approach in which the option contains a Type code followed by Vendor ID. That design had the advantage of supporting an extension into 32-bit enterprise numbers. But no meaningful commonality could be identified among the different vendor schemes; at any level beyond the use of a TCP option, each functions quite differently and there was no clear basis for choosing a standardized type scheme.
</t>

    </section>

    <section title="TCP option interoperability">
      <t>
      This section touches upon the interoperability issues of TCP-MNO with other TCP options.
      </t>
     
       <t>
       It needs to be noted that the TCP-MNO can be inserted only if the TCP option space permits. Given that there is a maximum of 40 bytes for TCP options, A SYN (with MSS, window scale, SACK permitted, and timestamp options) leaves 16 bytes spare (if the options are word-aligned) or 21 bytes spare (if the options are not word-aligned) which may just make it. In particular, it is not typically possible to insert TCP-MNO if a vendor-proprietary option has already been inserted, nor vice-versa. Strictly speaking, this conflict is not a new problem but the attempt at standardization may mean it occurs more often. It is already true in most cases that it is not possible to insert vendor A&apos;s option if vendor B&apos;s option has previously been inserted. This memo does not attempt to define rules on precedence or priority of such options, nor does it define circumstances in which a proprietary option may safely be replaced by TCP-MNO. 
       </t>

       <t>
         Multipath TCP (<xref target="I-D.ietf-mptcp-multiaddressed"></xref>)  would have more options sent in the SYN, therby restricting the TCP option space that can be used for TCP-MNO. 
        </t>
        <t>
         The TCP-MNO option is incompatible with TCP options which aim to protect the integrity of the TCP SYN. An example of such an option is the TCP MD5 signature option<xref target="RFC2385"></xref>. Such TCP options are not commonly seen by current WAN optimization systems, so the restriction should not pose any worries.
        </t>
     
    
    </section>
 

    <section title="IANA Considerations">
      <t>
      This section is interpreted according to <xref target="RFC5226"></xref>)
      </t>
      <t>
    This document needs a new TCP option to be allocated by IANA for the TCP-MNO option from the "TCP Option Kind Numbers" registry maintained at http://www.iana.org.
     </t>
	 
	<t>
	This document also defines an 8 bit middle-box vendor id field, for which IANA is requested to create and maintain a new sub-registry entitled "Middle box vendor id" under the new middle box TCP option. The middle box vendor id will be used to differentiate multiple vendors. Initial values for the middle box vendor id sub-registry are given below; future assignments are to be made on a "First Come First Served" basis.
	</t>	
      <figure>
      <artwork>
	
            ID       Middle-box Vendor        
            ----     -----------------
            0        Reserved
            1        Bluecoat   
            2        Riverbed
            3        Cisco                      
            4-127    Unassigned
            128-255  Reserved
      </artwork>
      </figure>
	<t>
	It is envisioned that the reserved codes can be used in the following manner in future. Exact definitions of them is not spelled out here and it is left to such a time when there is more clarity around requirements and usage model.
	
	        <list style="hanging">

         <t hangText="1)"> Standard code: Standard code can be used in a such way that multiple vendors recognize the same and are interoperable for negotiation purposes
         </t>
         <t hangText="2)"> Extended vendor id: Should the unassigned space run out in the future, either the reserved space can be opened up for assignment, or a speical id can be added to extend the vendor id space to more than one byte (say by including OUI after the 1 byte vendor id)
         </t>
         
     </list>

	</t>
	
	<t>
	
        It needs to be noted that at the time of writing this document, the following vendors have used the following TCP option numbers for TCP middlebox auto-discovery. 
      </t>
      <figure>
      <artwork>
       Vendor               TCP option number 
       --------------------------------------
       Bluecoat             253
       Cisco                33
       Riverbed             76 and 78  
      
       
      Figure 3: Current TCP auto-discovery option numbers used by various vendors.
      </artwork>
      </figure>
    </section>

    <section title="Security Considerations">
      <t>
      The TCP-MNO option is incompatible with any TCP option which aims to protect the integrity of the TCP SYN, such as the TCP MD5 signature option<xref target="RFC2385"></xref> and TCP-AO option<xref target="RFC5925"></xref>. In addition, this memo's approach to middlebox negotiation introduces two security issues.  First, the option-based paradigm intrinsically involves modifying traffic.  Some traffic may be modified even though it cannot or should not receive the middlebox-based service. Secondly, there is no authentication mechanism defined in this memo to ensure that middleboxes communicate only with well-behaved and trusted potential peers. A rogue middlebox can potentially insert itself into a functioning community of middleboxes, disrupting the service provided. 
      </t>
    </section>

    <section title="Contributors">
      <t>
       The following individuals contributed immensely to this document :
      </t>
       <t>
       <list style="empty">
       <t>
       Ron Fredrick, Blue Coat.
       </t>
       </list>
       </t>
    </section>
    <section title="Acknowledgements">
       <t>
       Thanks to Lars Eggert for forming the middisc alias which was responsible for discussions leading to the current document. Thanks to Wes Eddy and David Harrington for the constant encouragement in getting this document written.
       </t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.0793'?>
      <?rfc include='reference.RFC.2119'?>
      <?rfc include='reference.RFC.5226'?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.2616"?>
      <?rfc include='reference.RFC.3234'?>
      <?rfc include='reference.RFC.3552'?>
      <?rfc include="reference.I-D.knutsen-tcpm-middlebox-discovery"?> 
      <?rfc include="reference.I-D.ietf-mptcp-multiaddressed"?>
      <?rfc include='reference.RFC.2385'?>
	  <?rfc include='reference.RFC.5925'?>

    </references>
  </back>
</rfc>
