<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?> <!-- used by XSLT processors -->
<!-- OPTIONS, known as processing instructions (PIs) go here. -->
<!-- For a complete list and description of PIs,
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable PIs that most I-Ds might want to use. -->
<?rfc strict="yes" ?> <!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC): -->
<?rfc toc="yes"?> <!-- generate a ToC -->
<?rfc tocdepth="2"?> <!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references: -->
<?rfc symrefs="yes"?> <!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?> <!-- sort the reference entries alphabetically -->
<!-- control vertical white space: 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?> <!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?> <!-- keep one blank line between list items -->
<!-- end of popular PIs -->
<rfc  category="bcp" docName="draft-mcsherry-hafi-00" ipr="trust200902">
  <front>
    <title abbrev="HAFI">HTTP User Agent Feature Identifiers</title>
    <author fullname="Liam James McSherry" initials="LJM" surname="McSherry">
<!-- <organization/> -->
      <address>
        <!-- postal><street/><city/><region/><code/><country/></postal -->
<!-- <phone/> -->
<!-- <facsimile/> -->
      <email>liamj.mcsherry@googlemail.com</email>
<!-- <uri/> -->
      </address>
    </author>
    <date year="2012" />
<!-- <area/> -->
<!-- <workgroup/> -->
<!-- <keyword/> -->
<!-- <keyword/> -->
<!-- <keyword/> -->
<!-- <keyword/> -->
    <abstract>
        <t>
            HTTP User Agent Feature Identifiers (HAFI, Hah-Fee) is a simple
            method for user agents, such as web browsers, to reveal the 
            technologies that are supported by them. These technologies include
            items such as Cascading Style Sheets, and various versions of HTML.
        </t>
    </abstract>
    </front>
    <middle>
    <section title="Introduction">
        <t>
            HTTP User Agent Feature Identifiers (HAFI, Hah-Fee) is a simple
            method for user agents, such as web browsers, to reveal the 
            technologies that are supported by them. These technologies include
            items such as Cascading Style Sheets, and various versions of HTML.
        </t>
        <t>
            HAFI allows web developers to easily determine the technologies
            supported by user agents, and present content appropriate to those
            technologies. HAFI is intended to prevent having to maintain a
            database of User Agent strings in order to determine functionality.
        </t>
        <section title="Terminology">
            <t>
                The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
                "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in
                this document are to be interpreted as described in
                <xref target="RFC2119"/>.
            </t>
        </section>
    </section>
    <section anchor="Implementation" title="Implementation">
        <t>
            Identifiers are composed of a 32-bit unsigned integer, each bit in this
            representing a technology. Identifiers are in a little-endian format, and
            setting a bit to high (one) shows that the technology is supported, while
            setting a bit to low (zero) shows that the technology is unsupported.
        </t>
        <section title="For User Agents">
            <t>
                Identifiers are transmitted to the server via HTTP request headers,
                using a header entitled "HAFI". This header will provide both the
                version of HAFI being adhered to, and the identifier itself.
            </t>
            <t>
                The format of the HAFI header is as shown below. The order of the
                attributes, "version" and "features", is unimportant, but user agents
                are required to include both attributes.
            </t>
            <t>
                HAFI: version=1.0; features=82
            </t>
            <t>
                User agents should not misrepresent the technologies supported by them,
                and they should not add vendor-specific values to feature identifiers,
                as this would render HAFI pointless.
            </t>
            <t>
                User agents are also advised to set the value of reserved bits to low.
            </t>
        </section>
        <section title="For Servers and Responders">
            <t>
                When implementing HAFI into a server or responder, developers must include
                every version of HAFI to ensure backwards compatibility with older 
                software that may not support the latest versions of HAFI.
            </t>
            <t>
                Servers and responders must not attempt to parse any bits that are listed
                as reserved in the version of HAFI presented by the user agent. While user
                agents are recommended not to set any reserved bits to high, there is no
                guarantee that all implementing user agents will do this.
            </t>
            <t>
                If the presented version of HAFI is a version that is newer than the most
                recent version implemented in a server or responder, servers and responders
                should attempt to parse identifiers with the most recent version available.
            </t>
            <t>
                If the presented version is invalid (e.g. "version=1-t!"), servers and
                responders should not attempt to parse the features, and are recommended to
                respond with the HTTP 400 status code (Bad Request).
            </t>
        </section>
    </section>
    <section anchor="Features" title="Features">
        <t>
            Below is a table listing the features that can be represented in the current
            version of HAFI. Developers are reminded that features should be presented in
            a little-endian format, and that reserved bits should be set to low (zero).
        </t>
        <texttable>
            <ttcol>
                Bit(s)  
            </ttcol>
            <ttcol>
                Technology / Description
            </ttcol>
            <c>0</c><c>Hypertext Markup Language 4.01</c>
            <c>1</c><c>Hypertext Matkup Language 5</c>
            <c>2</c><c>Cascading Style Sheets</c>
            <c>3</c><c>Cascading Style Sheets 2</c>
            <c>4</c><c>Cascading Style Sheets 3</c>
            <c>5</c><c>Cascading Style Sheets 4</c>
            <c>6</c><c>ECMAScript / JavaScript</c>
            <c>7</c><c>HTML5 Geolocation</c>
            <c>8</c><c>HTML5 Video - Ogg Vorbis</c>
            <c>9</c><c>HTML5 Video - H.264</c>
            <c>10</c><c>HTML5 Video - WebM</c>
            <c>11</c><c>HTML5 Canvas</c>
            <c>12</c><c>Secure Sockets Layer v2</c>
            <c>13</c><c>Secure Sockets Layer v3</c>
            <c>14</c><c>Transport Layer Security 1.0</c>
            <c>15</c><c>Transport Layer Security 1.1</c>
            <c>16</c><c>Transport Layer Security 1.2</c>
            <c>17</c><c>HTTP Strict Transport Security</c>
            <c>18</c><c>Do Not Track (DNT)</c>
            <c>19:31</c><c>Reserved for Future Usage</c>
        </texttable>
        <t>
            It should be noted that, for identifiers such as Do Not Track, the value of
            that bit being set to high (one) does not indicate that the feature is
            enabled, only that the user agent supports it.
        </t>
        <section title="HTTP HAFI Header Example">
            <t>
                This section will provide an example of a HAFI header that can be used
                for reference.
            </t>
            <t>
                The example user agent supports the following technologies: HTML4.01,
                HTML5, CSS1+2+3, JavaScript, Geolocation, H.264 and WebM, SSLv3, and
                TLS 1.0 + 1.1. The features identifier in binary would be the following:
            </t>
            <t>
                00000000 00000000 11100110 11011111
            </t>
            <t>
                The example user agent is abiding by HAFI 1.0, and the identifier in
                binary will be converted to decimal for transmission, so the HAFI
                header sent by the user agent would be the following:
            </t>
            <t>
                HAFI: version=1.0; features=59103
            </t>
        </section>
    </section>
    <section anchor="Security" title="Security Considerations">
        <t>
            HAFI should not have any security implications, as it is simply a number and
            a version string being sent to a server. Rather, HAFI may improve security,
            in certain contexts.
        </t>
        <t>
            For example, if a client shows that it supports SSLv3 and TLS 1.0 whilst
            connecting over HTTPS, the server would be able to select a stream cipher over
            a block cipher, which would lower the likelihood of a BEAST attack on the
            client.
        </t>
    </section>
  </middle>
  <back>
    <references title="Normative References">
      &RFC2119;
    </references>
  </back>
</rfc>
