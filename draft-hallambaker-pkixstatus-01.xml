<?xml version='1.0'?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<rfc docName="draft-hallambaker-pkixstatus-01">
<front>
<title abbrev="Web PKI Operations: Revocation and Status ">Web PKI Operations: Revocation and Status</title>
<author fullname="Phillip Hallam-Baker " initials="P. M." surname="Hallam_Baker">
<organization>Comodo Group Inc.</organization>
<address>
<email>philliph@comodo.com</email>
</address>
</author>
<date day="20" month="October" year="2013"/>
<area>General</area>
<workgroup/>
<abstract>
<t>This document describes the certificate status mechanisms supported in the Web PKI </t>
</abstract>
</front>
<middle>
<section title="Certificate Status" anchor="Section_1">
<t>A certificate is issued with a predetermined validity interval. It is common practice to specify a validity interval that starts a few hours or days before the instant of issue so as to avoid rejection by machines with clocks running behind the current time or otherwise mis-set. In normal operation the certificate will remain valid until it expires. </t>
<t>The CA that issued a certificate has primary responsibility for maintaining the certificate life cycle and reporting changes to certificate status. But other parties can and in some cases do report status for third party certificates. In particular client and platform providers have revoked certificates known to have been mis-issued or in a case of a CA breach. </t>
<section title="Operational Certificate Lifecycle Model" anchor="Section_1_1">
<t>PKIX does not describe a certificate lifecyle model. Instead the certificate lifecycle model is a consequence of the issue of PKIX Certificates and CRLs. While this is sufficient for describing PKIX it is not satisfactory as a reference model for describing operations. Not least because modern PKIX operations are frequently based on the use of OCSP rather than CRLs and differences in the semantics of CRLs and OCSP are one of the features we would want to measure. The distinction between an operational model and PKIX semantics is illustrated by considering the difference between the operational concept of direct/indirect status assertions and the PKIX semantics of direct/indirect CRLs. </t>
<section title="Direct and Indirect Status Assertions" anchor="Section_1_1_1">
<t>PKIX CRLs may be marked as direct or indirect to indicate that they are issued by the same CA that issued the original certificate (a direct CRL) or by a third party (an indirect CRL). </t>
<t>In the corresponding operational model we define a direct status assertion as being by the same CA that issued the original certificate and an indirect status assertion as being any status assertion that is not direct. </t>
<t>The difference between the operational and PKIX models has imporant practical consequences. The CA that originally issued an assertion naturally holds a privileged position when it comes to revoking it. A direct CRL thus has a privileged position when considering the question of certificate validity. A direct status assertion thus has a privileged position when considering revocation status. A direct CRL carries an implicit claim that it is a direct status assertion but this is merely a claim unless the client validating the CRL takes steps to verify it. For example by verifying that the CRL signature has valid trust chain to the same trust anchor as the certificate. </t>
<t>CRLs introduce a further complication as a CRL contains a list of explicit statements declaring that a certificate is invalid. In the case of a direct CRL there is an implicit assertion that any issued, unexpired certificate not listed was valid at the time the CRL was issued. The processing rules specified in [RFC5280] appear to limit this implicit assertion to direct CRLs but this is does not appear to be called out in the text. </t>
<t>One of the main use cases that might motivate the issue of an indirect status assertion is the case where a third party notices that a certificate is being used for malicious purposes and intends to advise relying parties that they should not rely on that certificate. There is thus a case for granting third parties the ability to revoke certificates but does granting this ability also confer the ability to (implicitly) declare certificates valid? </t>
<t>[Operational question: Do clients interpret indirect CRLs as substitutes for the direct CRL or as adjuncts providing additional information.] </t>
</section>
<section title="Trust Path Processing" anchor="Section_1_1_2">
<t>One of the operational questions we would like to understand is the extent to which it is possible to revoke EE certificates by revoking one or more of the CSCs in the certification path. </t>
<t>Self Signed certificates used to transport Trust Anchors are not actually PKIX certificates and are not governed by the PKIX model. One important consequence of this is that relying parties do not use PKIX mechanisms to check the validity of Trust Anchors. </t>
<t>CSCs signed by the trust anchor are potentially subject to revocation. Do the status checking mechanisms employed in browsers support this in practice? </t>
<t>[OCSP and CRLs raise separate issues here. In the case of an OCSP responder should we require signed OCSP tokens for each cert in the path? Is it possible to use a mix of CSCs and OCSP in stapled tokens?] </t>
</section>
<section title="Revocation Reasons" anchor="Section_1_1_3">
<t>A status declarer may declare a certificate invalid (i.e. revoke the certificate) before its scheduled expiry for a variety of reason that include: </t>
<t><list style="hanging">
<t hangText="Subject requested revocation">The certificate subject requested revocation. </t>
<t hangText="Subject requested correction ">The certificate subject requested information in a certificate be corrected. Such corrections are typically made by revoking the original certificate and issuing a replacement. </t>
<t hangText="Payment declined ">A CA may issue a certificate before payment has cleared. If the payment is subsequently declined, the certificate is revoked. </t>
<t hangText="Declined extension ">The certificate was originally issued on condition that use beyond an initial period would require an additional fee which the subject did not pay. </t>
<t hangText="Terms of Use ">The subject was determined to have breached the terms of use </t>
<t hangText="Fraudulent Request ">The application was determined to be fraudulent after issue </t>
<t hangText="CA compromise ">The certificate can no longer be trusted because the operations of the CA were compromised. </t>
</list></t>
<t>The ability to provide a reason for revocation is defined without explaining the reason a CA should provide this information or how relying parties should behave differently according to the revocation reason given. Revoked certificates are to be considered invalid regardless of the reason for revocation. </t>
<t>PKIX does not define an order of severity. In cases where multiple reasons apply, the CA may pick any. There is no obligation to report a reason at all let alone report severity. </t>
<t>Once a certificate is revoked the certificate lifecycle is complete as far as the CA is concerned and there is no obligation on the CA to update the revocation reason after the fact to reflect the discovery of a more serious cause. </t>
<t>In the case of a subject request the CA only has reliable knowledge of the fact of the request and not the reason(s) the request was made. A certificate subject might have requested the certificate be revoked because they no further use for it or because they know the associated private key has been compromised. Even if the CA asks for the revocation reason there is no reason to expect the subject to answer. The subject may not wish to report that a private key has been compromised. </t>
<t>The net effect of these limitations is that revocation reasons only provide a lower bound on the severity of the cause for which a certificate was revoked. </t>
</section>
<section title="Operational Certificate States" anchor="Section_1_1_4">
<t>From an operational point of view, the lifecycle of a PKIX certificate has five potential states: </t>
<t><list style="hanging">
<t hangText="Valid">The certificate was issued and is valid. </t>
<t hangText="Invalid">No certificate was issued or the certificate issued is no longer valid. Nonexistent"&gt; The certificate does not exist. This may be because the certificate has not yet been issued or it will never be issued. Hold The certificate exists but has been suspended with the possibility of reinstatement. Revoked The certificate exists but has been declared to be invalid with permanent effect. Expired The certificate existed in the past but the expiry date specified at issue has passed. </t>
</list></t>
<t>The Hold state has been found to be of little or no practical value since issuing a new certificate is simpler and more effective than attempting to cancel a previous instruction to put the certificate on hold. </t>
<t>CRLs and certain OCSP configurations do not permit a client to distinguish between the states Valid and Invalid/Nonexistent. The CRL mechanism was designed to allow a relying party to check the validity of a known certificate. It was thus unnecessary to distinguish the states Valid and Nonexistent as that would be verified by checking the signature. Accordingly a CRL contains only a list of invalid certificates. </t>
<t>In the case of a CA Breach, key compromise or cryptanalytic attack, a certificate may be created that has a valid signature but was not issued by the CA. Such a certificate is 'Nonexistent' as far as the CA is concerned. Requiring a CA to distinguish these states in reporting certificate status provides a limited degree of transparency in CA operations. A CA that reports 'Nonexistent' in response to a status request for an unexpired certificate that has a valid signature has a defective or breached issue process. A CA that reports valid in response to a status request for a non-existent certificate has a defective or breached revocation mechanism. </t>
</section>
</section>
<section title="Client Behavior" anchor="Section_1_2">
<t>WebPKI clients are advised but not required to check certificate status before relying on the assertions they contain. Waiting to obtain status information from an external source before relying on a certificate may cause delay or even rejection of a valid certificate. </t>
<t>Excluding the possibility that a client requests revocation status then ignores the result, the options available to a Web PKI client are therefore: </t>
<t><list style="hanging">
<t hangText="Ignore ">The client does not process revocation status from any source </t>
<t hangText="Local ">The client only process revocation status that is available from local sources. For example hardcoded 'do not trust' lists. </t>
<t hangText="Soft-Fail ">The client attempts to obtain revocation status from external sources and will reject certificates reported as revoked but will accept a certificate as valid if the external source does not reply. </t>
<t hangText="Hard-Fail ">The client attempts to obtain revocation status from external sources and will reject certificates unless an affirmative assertion of validity is obtained. </t>
</list></t>
</section>
</section>
<section title="Status Assertion Mechanisms" anchor="Section_2">
<section title="CRLs" anchor="Section_2_1">
<t>The PKIX CRL mechanism for asserting certificate status is described in [RFC5280] </t>
<section title="Status Model&quot;" anchor="Section_2_1_1">
<t>A CRL only provides a list of certificates that have been revoked. An issued, unexpired certificate is presumed to be valid if it does not appear in the CRL. The certificate states supported by the CRL mechanism are thus: </t>
<t><list style="hanging">
<t hangText="UNREVOKED ">Corresponds to operational states Valid, Nonexistent and Expired. </t>
<t hangText="UNDETERMINED ">Occurs when no CRL with a corresponding scope is available. </t>
<t hangText="REVOKED&quot; ">Corresponds to operational state Revoked. </t>
<t hangText="HOLD ">Corresponds to operational state Hold. </t>
</list></t>
<t>The CRL result 'UNREVOKED' thus corresponds to three states in the Operational model of which one is Valid and the other two are Invalid states. A client that does not have a source of trusted time available may use the issue time of the CRL as the basis for checking expiry. The CRL mechanism does not provide a means of determining that a certificate was legitimately issued </t>
</section>
<section title="Revocation Reasons" anchor="Section_2_1_2">
<t>[RFC5280] requires that a CRL entry specify a reason code but not the circumstances in which a code should be raised. [[This is however specified in X.509v3] The following reason codes are defined: </t>
<t><list style="symbols">
<t>unspecified</t>
<t>keyCompromise</t>
<t>cACompromise</t>
<t>affiliationChanged</t>
<t>superseded</t>
<t>cessationOfOperation</t>
<t>privilegeWithdrawn</t>
<t>aACompromise</t>
</list></t>
</section>
</section>
<section title="OCSP" anchor="Section_2_2">
<t>OCSP is defined in [RFC6960]. [RFC5019] (lightweight) and TLS Stapling [RFC6066] Section 8. </t>
<t>An OCSP service MAY return the following results. </t>
<t><list style="hanging">
<t hangText="Success [[+ CRL Status Code] ">The OCSP status request succeeded and the service returned one of the CRL status codes described above. </t>
<t hangText="Refused ">The OCSP responder refused to answer the request. </t>
<t hangText="Unknown ">The certificate for which status was requested was not found or the status is not determined. </t>
<t hangText="Invalid">The OCSP server returned an answer that was not understood. </t>
<t hangText="Fail ">The service failed to answer the request or the client was unable to contact the OCSP service. </t>
</list></t>
<t>Note that [RFC6960] does not differentiate the results Success/Valid and Unknown. CAs are however required to differentiate these responses under the CABForum Basic Requirements [TBS]. </t>
<t>The OCSP protocol permits responses to be signed in advance [static] or provide a proof of freshness by returning a nonce presented by the client. </t>
<t>The protocol only permits static responses to report the status of individual certificates. There is no feature analagous to the NSEC3 feature of DNSSEC which permits the non-existence of an entry in a particular range to be asserted. </t>
<section title="CRL Responder" anchor="Section_2_2_1">
<t>An OCSP responder may generate responses from CRLs. Such a responder can generate most but not all the responses required in advance by generating revoked responses for all the certificates listed in the CRL and valid responses for all the certificate serial numbers presented in previous requests. </t>
<t>Such a responder cannot distinguish between Valid and nonexistent states unless provided with additional information not in the CRL. </t>
</section>
<section title="Lightweight Distribution" anchor="Section_2_2_2">
<t>In the lightweight distribution mode of operation specified in [RFC5019], the CA generates OCSP responses for all unexpired certificates that it has issued. The signed tokens are then passed to a separate network for distribution. For example, a Content Delivery Network with a large number of delivery points. </t>
<t>One of the main strengths of this model is that all the signing of OCSP tokens is done offline and no signing key is ever exposed to an external network. One consequence of this model is that responses for nonexistent certificates cannot be signed. </t>
</section>
<section title="OCSP Stapling" anchor="Section_2_2_3">
<t>One of the principle limitations of the traditional OCSP model is that each TLS transaction becomes a three party communication. To complete the TLS connection the client must communicate with the server being contacted and the OCSP service. This approach introduces unnecessary delay and an additional potential point of failure and is therefore unsatisfactory. </t>
<t>OCSP stapling permits a TLS server to provide a client that supports the stapling extension to provide the OCSP token together with the certificate it corresponds to. This permits a client to establish a TLS communication without the need for a three party communication in the case that the client and server both support stapling. </t>
<t>The chief drawback to stapling is that support for stapling is optional. thus a client that does not receive a stapled token must attempt to obtain it from the OCSP service and is therefore subject to the same Softfail/hardfail dilemma described above. </t>
</section>
</section>
<section title="Other" anchor="Section_2_3">
<section title="Hardcoded/Indirect Revocation List" anchor="Section_2_3_1">
<t>Most browsers employ a 'blacklist' to block certificates known to be mis-issued. The number of entries supported in such lists is typically small. In some cases the list is hardcoded in the browser or platform code and is only updated with the browser or platform. In other cases the blacklist is updatable separately. </t>
<t>Q: Which Web browsers support update of the list without updating the browser. </t>
</section>
<section title="DANE" anchor="Section_2_3_2">
<t>DANE assertions [RFC6698] may be used to cancel a certificate. [describe] </t>
</section>
<section title="Certificate Transparency" anchor="Section_2_3_3">
<t>CT [RFC6962] provides a means of auditing the operation of a CA using only information that is available to the public. Moreover a client can determine that a certificate has been issued transparently or not. [describe] </t>
<t>[Allows another way to distinguish Valid and nonexistent and thus CA breach.] </t>
</section>
</section>
</section>
<section title="Status Acquisition Mechanisms" anchor="Section_3">
<section title="Google's Status Mechanism" anchor="Section_3_1">
<t>(Only supported in the Chrome Browser)</t>
</section>
<section title="SCVP" anchor="Section_3_2">
<t>Not supported in any Web PKI application or service.</t>
</section>
<section title="XKMS" anchor="Section_3_3">
<t>Not supported in any Web PKI application or service.</t>
</section>
</section>
<section title="Cryptography Platforms" anchor="Section_4">
<t>[Should expand this noting that while support for a feature in the platfor is often a necessary for support in applications, it is not necessarily sufficient.] </t>
<section title="Checklist" anchor="Section_4_1">
</section>
<section title="cryptlib " anchor="Section_4_2">
</section>
<section title="Microsoft Windows" anchor="Section_4_3">
</section>
<section title="Network Security Services" anchor="Section_4_4">
<t>Used in Firefox and Chrome</t>
</section>
<section title="OpenSSL" anchor="Section_4_5">
</section>
</section>
<section title="Web Server Status" anchor="Section_5">
<t>Web Server support for revocation is fairly straightforward since the Web Server is only involved in revocation in the case of stapled OCSP tokens and this is supported in the latest versions of all the servers surveyed. </t>
<section title="Checklist" anchor="Section_5_1">
<t><list style="hanging">
<t hangText="Support for OCSP Stapling?"> </t>
</list></t>
</section>
<section title="Apache" anchor="Section_5_2">
<t><list style="hanging">
<t hangText="Support for OCSP Stapling?">Since version 2.3.</t>
</list></t>
</section>
<section title="IIS" anchor="Section_5_3">
<t><list style="hanging">
<t hangText="Support for OCSP Stapling?">Yes</t>
</list></t>
</section>
<section title="LiteSpeed " anchor="Section_5_4">
<t><list style="hanging">
<t hangText="Support for OCSP Stapling?">Since version 4.2.4.</t>
</list></t>
</section>
<section title="nginx" anchor="Section_5_5">
<t><list style="hanging">
<t hangText="Support for OCSP Stapling?">Since version 1.3.7.</t>
</list></t>
</section>
</section>
<section title="Web Client Status" anchor="Section_6">
<t>[Need to consider further dimensions here. In particular Chrome behaves differently depending on the platform it is on and several browsers have different revocation checking for EV vs other certificate policies.]</t>
<section title="Checklist" anchor="Section_6_1">
<t><list style="hanging">
<t hangText="Supported Revocation Checking Mechanisms">To Do: Some browsers do not support CRL DP. Others give preference to OCSP, but fall back to CRL DP if the necessary AIA is missing. Some browsers give priority to OCSP, but switch to CRL DP when a particular issuer's revocation information is retrieved frequently.</t>
<t hangText="User Experience for Certificate Status Invalid"> </t>
<t hangText="User Experience for Certificate Status Unknown"> </t>
<t hangText="What sources are permitted to sign CRLs or OCSP responses for a certificate, can any trusted CA sign or only the CA that issued the certificate?"> </t>
</list></t>
</section>
<section title="Chrome" anchor="Section_6_2">
<t>The Chrome browser automatically updates itself to the latest version unless this feature is explicitly disabled by the user. </t>
<t><list style="hanging">
<t hangText="Supported Revocation Checking Mechanisms">OCSP (at present).</t>
<t hangText="User Experience for Certificate Status Invalid"> </t>
<t hangText="User Experience for OCSP Fail">Soft fail</t>
</list></t>
</section>
<section title="Firefox" anchor="Section_6_3">
<t><list style="hanging">
<t hangText="Supported Revocation Checking Mechanisms">OCSP checked by default since Firefox 3. OCSP Stapling has been added to nightly builds but is not yet in production releases.</t>
<t hangText="User Experience for Certificate Status Invalid"> </t>
<t hangText="User Experience for Certificate Status Unknown">Soft fail</t>
</list></t>
</section>
<section title="Internet Explorer" anchor="Section_6_4">
<t><list style="hanging">
<t hangText="Supported Revocation Checking Mechanisms">CRLs and OCSP.</t>
<t hangText="User Experience for Certificate Status Invalid">IE5: If the certificate has a valid trust path, the user is presented with a dialog box that says "The Security certificate for this site has been revoked. This site should not be trusted" </t>
<t hangText="">If however, a valid trust path cannot be found, the user receives the error message for the invalid trust path instead: "The user is presented with a dialogue box that tells them that 'Information you exchange with this site cannot be viewed or changed by others. However there is a problem with the site's security certificate."</t>
<t hangText="">IE??: Warning Page "There is a problem with this website's security certificate" </t>
</list></t>
<t>CVE-2011-0199 : Chris Hawk and Wan-Teh Chang of Google MS ? ?the revocation date is determined by comparing the current date with the RevocationDate field in the CRL or the OCSP response? For Windows Vista with Service Pack 1 and Windows Server 2008, the OCSP signing certificate may chain up to any trusted root CA as long as the certificate chain includes the OCSP Signing EKU extension. CryptoAPI first determines whether a time valid version of the revocation object exists in the CryptoAPI disk cache. </t>
</section>
<section title="Opera" anchor="Section_6_5">
<t><list style="hanging">
<t hangText="Supported Revocation Checking Mechanisms">OCSP checked by default since Opera version 8</t>
<t hangText="User Experience for Certificate Status Invalid"> </t>
<t hangText="User Experience for Certificate Status Unknown">Hard fail</t>
</list></t>
</section>
<section title="Safari" anchor="Section_6_6">
<t><list style="hanging">
<t hangText="Supported Revocation Checking Mechanisms">CRL: all, OCSP checking is enabled by default as of Mac OSX 10.7 (Lion). Prior to that it had to be enabled in the Keychain preferences.</t>
<t hangText="User Experience for Certificate Status Invalid">Dialog Box: Offers Continue/Cancel/Show Certificate</t>
<t hangText="User Experience for Certificate Status Unknown"> </t>
<t hangText="User Experience for OCSP-FAIL"> </t>
</list></t>
<t>For Apple?s OS X, OCSP and CRL checking can be configured via Keychain Access -&gt; Preferences ?&gt; Certificates. A dialog box opens with three rows: OCSP, CRL, and Priority. Under OCSP and CRL, the three allowed options (a grayed-out one said something like ?always?) were: ?Off?, ?Best Attempt?, and ?Required if certificate indicates?. ?Best Attempt? was the default. Under Priority, the options were ?OCSP? ?CRL? and ?Require both?. ?OCSP? was the default.</t>
<t>IE5: Popup dialog box: "Revocation information for the security certificate for this site is not available. Do you want to proceed?" </t>
</section>
</section>
<section title="CA Status" anchor="Section_7">
<t>Historical behavior is only of interest to the extent that it affects current operations. </t>
<t>Every PKIX certificate has a built in expiry date. Thus we are only interested in CA operations from the date at which their oldest unexpired certificate is still valid. </t>
<section title="Checklist" anchor="Section_7_1">
<t><list style="hanging">
<t hangText="Are CRLs or OCSP supported"> </t>
<t hangText="Is the CDP extension filled?"> </t>
<t hangText="Is the AIA extension filled?"> </t>
</list></t>
</section>
<section title="CA-Browser Forum Requirements" anchor="Section_7_2">
<t/>
</section>
</section>
<section title="Security Considerations" anchor="Section_8">
<t>Put something here? </t>
</section>
<section title="IANA Considerations" anchor="Section_9">
<t>None </t>
</section>
</middle>
<back>
<references title="Normative References">
<reference anchor="RFC6066">
<front>
<title>Transport Layer Security (TLS) Extensions: Extension Definitions</title>
<author fullname="D. Eastlake" initials="D." surname="Eastlake">
<organization/>
<address>
</address>
</author>
<date month="January" year="2011"/>
</front>
<seriesInfo name="RFC" value="6066"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc6066.txt" octets="55079"/>
</reference>
<reference anchor="RFC6698">
<front>
<title>The DNS_Based Authentication of Named Entities (DANE) Transport Layer Security (TLS) Protocol: TLSA</title>
<author fullname="P. Hoffman" initials="P." surname="Hoffman">
<organization/>
<address>
</address>
</author>
<author fullname="J. Schlyter" initials="J." surname="Schlyter">
<organization/>
<address>
</address>
</author>
<date month="August" year="2012"/>
</front>
<seriesInfo name="RFC" value="6698"/>
<format type="TXT" target="http://www.rfc_editor.org/rfc/rfc6698.txt" octets="84034"/>
</reference>
<reference anchor="RFC6962">
<front>
<title>Certificate Transparency</title>
<author fullname="B. Laurie" initials="B." surname="Laurie">
<organization/>
<address>
</address>
</author>
<author fullname="A. Langley" initials="A." surname="Langley">
<organization/>
<address>
</address>
</author>
<author fullname="E. Kasper" initials="E." surname="Kasper">
<organization/>
<address>
</address>
</author>
<date month="June" year="2013"/>
</front>
<seriesInfo name="RFC" value="6962"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc6962.txt" octets="55048"/>
</reference>
<reference anchor="RFC5280">
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname="D. Cooper" initials="D." surname="Cooper">
<organization/>
<address>
</address>
</author>
<author fullname="S. Santesson" initials="S." surname="Santesson">
<organization/>
<address>
</address>
</author>
<author fullname="S. Farrell" initials="S." surname="Farrell">
<organization/>
<address>
</address>
</author>
<author fullname="S. Boeyen" initials="S." surname="Boeyen">
<organization/>
<address>
</address>
</author>
<author fullname="R. Housley" initials="R." surname="Housley">
<organization/>
<address>
</address>
</author>
<author fullname="W. Polk" initials="W." surname="Polk">
<organization/>
<address>
</address>
</author>
<date month="May" year="2008"/>
</front>
<seriesInfo name="RFC" value="5280"/>
<format type="TXT" target="http://www.rfc_editor.org/rfc/rfc5280.txt" octets="352580"/>
</reference>
<reference anchor="RFC6960">
<front>
<title>X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP</title>
<author fullname="S. Santesson" initials="S." surname="Santesson">
<organization/>
<address>
</address>
</author>
<author fullname="M. Myers" initials="M." surname="Myers">
<organization/>
<address>
</address>
</author>
<author fullname="R. Ankney" initials="R." surname="Ankney">
<organization/>
<address>
</address>
</author>
<author fullname="A. Malpani" initials="A." surname="Malpani">
<organization/>
<address>
</address>
</author>
<author fullname="S. Galperin" initials="S." surname="Galperin">
<organization/>
<address>
</address>
</author>
<author fullname="C. Adams" initials="C." surname="Adams">
<organization/>
<address>
</address>
</author>
<date month="June" year="2013"/>
</front>
<seriesInfo name="RFC" value="6960"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc6960.txt" octets="82037"/>
</reference>
<reference anchor="RFC5019">
<front>
<title>The Lightweight Online Certificate Status Protocol (OCSP) Profile for High-Volume Environments</title>
<author fullname="A. Deacon" initials="A." surname="Deacon">
<organization/>
<address>
</address>
</author>
<author fullname="R. Hurst" initials="R." surname="Hurst">
<organization/>
<address>
</address>
</author>
<date month="September" year="2007"/>
</front>
<seriesInfo name="RFC" value="5019"/>
<format type="TXT" target="http://www.rfc-editor.org/rfc/rfc5019.txt" octets="46371"/>
</reference>
</references>
</back>
</rfc>
