<?xml version="1.0" ?>
<?rfc compact="yes" ?>
<?rfc strict="no" ?>
<?rfc symrefs="yes" ?>
<?rfc toc="yes" ?>
<rfc category="std" docName="draft-petithuguenin-p2psip-access-control-05" ipr="noModificationTrust200902">
  <front>
    <title abbrev="Access Control Configuration">Configuration of Access Control Policy in REsource LOcation And Discovery (RELOAD) Base Protocol</title>
    <author fullname="Marc Petit-Huguenin" initials="M.P.H" surname="Petit-Huguenin">
      <organization>Impedance Mismatch</organization>
      <address>
        <email>petithug@acm.org</email>
      </address>
    </author>
    <date day="22" month="October" year="2012"/>
    <area>RAI</area>
    <workgroup>P2PSIP</workgroup>
    <abstract>
      <t>This document describes an extension to the REsource LOcation And Discovery (RELOAD) base protocol to distribute the code of new Access Control Policies without having to upgrade the RELOAD implementations in an overlay.</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction">
      <t>The RELOAD base protocol specifies an Access Control Policy as "defin[ing] whether a request from a given node to operate on a given value should succeed or fail."
				The paragraph continues saying that "[i]t is anticipated that only a small number of generic access control policies are required", but there is indications that this assumption will not hold.
				On all the RELOAD Usages defined in other documents than the RELOAD base protocol, roughly 50% defines a new Access Control Policy.</t>
      <t>The problem with a new Access Control Policy is that, because it is executed when a Store request is processed, it needs to be implemented by all the peers and so requires an upgrade of the software.
				This is something that is probably not possible in large overlays or on overlays using different implementations.
				For this reason, this document proposes an extension to the RELOAD configuration document that permits to transport the code of a new Access Control Policy to each peer.</t>
      <t>
        This extension defines a new element &lt;access-control-code&gt; that can be optionally added to a &lt;configuration&gt; element in the configuration document.
				The &lt;access-control-code&gt; element contains
        <xref target="ECMA-262">ECMAScript</xref>
        code that will be called for each StoredData object that use this access control policy.
				The code receives four parameters, corresponding to the Resource-ID, Signature, Kind and StoredDataValue of the value to store.
				The code returns true or false to signal to the implementation if the request should succeed or fail.
      </t>
      <t>For example the USER-MATCH Access Control Policy defined in the base protocol could be redefined by inserting the following code in an &lt;access-control-code&gt; element:</t>
      <t>
        <figure>
          <artwork><![CDATA[return resource.equalsHash(signer.user_name.bytes());]]></artwork>
        </figure>
      </t>
      <t>The &lt;kind&gt; parameters are also passed to the code, so the NODE-MULTIPLE Access Control Policy could be implemented like this:</t>
      <t>
        <figure>
          <artwork><![CDATA[for (var i = 0; i < kind.max_node_multiple; i++) {
    if (resource.equalsHash(signer.node_id, i.width(4))) {
        return true;
    }
}
return false;]]></artwork>
        </figure>
      </t>
    </section>
    <section title="Terminology">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and "OPTIONAL" in this document are to be interpreted as described in
        <xref target="RFC2119"/>
        .
      </t>
      <t>"SHOULD", "SHOULD NOT", "RECOMMENDED", and "NOT RECOMMENDED" are appropriate when valid exceptions to a general requirement are known to exist or appear to exist, and it is infeasible or impractical to enumerate all of them.
				However, they should not be interpreted as permitting implementors to fail to implement the general requirement when such failure would result in interoperability failure.</t>
    </section>
    <section title="Processing">
      <t>A peer receiving a configuration document containing one or more &lt;access-control-code&gt; elements, either by retrieving it from the configuration server or in a ConfigUpdateReq message, MUST reject this configuration if is not is not signed or if the signature verification fails.</t>
      <t>The Compact Relax NG Grammar for this element is:</t>
      <figure>
        <artwork><![CDATA[namespace acp = "http://implementers.org/access-control"

parameter &= element acp:access-control-code {
  attribute name { xsd:string },
  xsd:base64Binary
}?]]></artwork>
      </figure>
      <t>The "name" attribute defines the access control policy and can then be used in a &lt;kind&gt; element as if it was defined by IANA.</t>
      <t>
        If the &lt;access-control-code&gt; element is present in the namespace allocated to this specification, and the Access Control Policy is not natively implemented, then the code inside the element MUST be called for each DataValue found in a received StoreReq for a Kind that is defined with this access control policy.
				The content of the &lt;access-control-code&gt; element MUST be decoded using the
        <xref target="RFC4648">base64</xref>
        encoding, uncompressed using
        <xref target="RFC1952">gzip</xref>
        then converted to characters using UTF-8.
				&lt;access-control-code&gt; elements that are not encoded using UTF-8, compressed with gzip or finally converted to the base64 format MUST be ignored.
				For each call to the code, the following ECMAScript objects, properties and functions MUST be available:
      </t>
      <t>
        <list style="hanging">
          <t hangText="configuration.instance_name:">The name of the overlay, as a String object.</t>
          <t hangText="configuration.topology_plugin:">The overlay algorithm, as a String object.</t>
          <t hangText="configuration.node_id_length:">The length of a NodeId in bytes, as a Number object.</t>
          <t hangText="configuration.kinds:">An array of kinds (with the same definition than the kind object), indexed by id and eventually by name.</t>
          <t hangText="configuration.evaluate(String, String, String):">A function that evaluates the first parameter as an XPath expression against the configuration element, and returns the result as a String object.
						The second parameter must contain a namespace prefix and the third parameter must contain a namespace.</t>
          <t hangText="kind.id:">The id of the Kind associated with the entry, as a Number object.</t>
          <t hangText="kind.name:">If the Kind associated with the entry is registered by IANA, contains the name as a String object.
						If not, this property is undefined.</t>
          <t hangText="kind.data_model:">The name of the Data Model associated with the entry, as a String object.</t>
          <t hangText="kind.access_control:">The name of the Access Control Policy associated with the entry, as a String object.</t>
          <t hangText="kind.max_count:">The value of the max-count element in the configuration file, as a Number object.</t>
          <t hangText="kind.max_size:">The value of the max-size element in the configuration file as a Number object.</t>
          <t hangText="kind.max_node_multiple:">If the Access Control is MULTIPLE-NODE, contains the value of the max-node-multiple element in the configuration file, as a Number object.
						If not, this property is undefined.</t>
          <t hangText="kind.evaluate(String, String, String):">A function that evaluates the first parameter as an XPath expression against the kind element, and returns the result as a String object.
						The second parameter must contain a namespace prefix and the third parameter must contain a namespace.</t>
          <t hangText="resource:">An opaque object representing the Resource-ID, as an array of bytes.</t>
          <t hangText="resource.entries:">An array of arrays of entry objects, with the first array level indexed by Kind-Id and kind names, and the second level indexed by index, key or nothing, depending on the data model of the kind.
						This permits to retrieve all the values of all Kinds stored at the same Resource-ID than the entry currently processed.</t>
          <t hangText="resource.equalsHash(Object...):">A function that returns true if hashing the concatenation of the arguments according to the mapping function of the overlay algorithm is equal to the Resource-ID.
						Each argument is an array of bytes.</t>
          <t hangText="entry.index:">If the Data Model is ARRAY, contains the index of the entry, as a Number object.
						If not, this property is undefined.</t>
          <t hangText="entry.key:">If the Data Model is DICTIONARY, contains the key of the entry, as an array of bytes.
						If not, this property is undefined.</t>
          <t hangText="entry.storage_time:">The date and time used to store the entry, as a Date object.</t>
          <t hangText="entry.lifetime:">The validity for the entry in seconds, as a Number object.</t>
          <t hangText="entry.exists:">Indicates if the entry value exists, as Boolean object.</t>
          <t hangText="entry.value:">This property contains an opaque object that represents the whole data, as an array of bytes.</t>
          <t hangText="entry.signer.user_name:">The rfc822Name stored in the certificate that was used to sign the request, as a String object.</t>
          <t hangText="entry.signer.node_id:">The Node-ID stored in the certificate that was used to sign the request, as an array of bytes.</t>
        </list>
      </t>
      <t>The properties SHOULD NOT be modifiable or deletable and if they are, modifying or deleting them MUST NOT modify or delete the equivalent internal values (in other words, the code cannot be used to modify the elements that will be stored).</t>
      <t>The value returned by the code is evaluated to true or false, according to the ECMAScript rules.
				If the return value of one of the call to the code is evaluated to false, then the StoreReq fails, the state MUST be rolled back and an Error_Forbidden MUST be returned.</t>
    </section>
    <section title="Security Considerations">
      <t>Because the configuration document containing the ECMAScript code is under the responsability of the same entity that will sign it, using a scripting language does not introduce any additional risk if the RELOAD implementers follow the rules in this document (no side effect when modifying the parameters, only base classes of ECMAScript implemented, etc...).
				It is even possible to deal with less than perfect implementations as long as they do not accept a configuration file that is not signed correctly.
			   	One way for the signer to enforce this would be to deliberately send in a ConfigUpdate an incorrectly signed version of the configuration file and blacklist all the nodes that accepted it in a newly issued configuration file.</t>
      <t>By permitting multiple overlay implementations to interoperate inside one overlay, RELOAD helps build overlays that are not only resistant to hardware or communication failures, but also to programmer errors.
				Distributing the access control policy code inside the configuration document reintroduces this single point of failure.
				To mitigate this problem, new access control policies should be implemented natively as soon as possible, but if all implementations uses the script as a blueprint for the native code, an hidden bug can be duplicated.
				This is why developers should implement new access control policies from the normative text instead of using the code.
				That is anyway probably not legal under most copyright laws so to help developers do the right thing the code in the configuration is obfuscated by compressing and encoding it as a base64 character string.</t>
    </section>
    <section title="IANA Considerations">
      <t>If this document is accepted as a standard track document this section will request an URN in the "XML Namespaces" class of the "IETF XML Registry" from IANA.
				Until this is done, implementions should use the following URN:</t>
      <t>http://implementers.org/access-control</t>
    </section>
    <!--section title="Acknowledgements">
		</section-->
  </middle>
  <back>
    <references title="Normative References">
      <reference anchor="RFC1952">
        <front>
          <title>GZIP file format specification version 4.3</title>
          <author fullname="P. Deutsch" initials="P." surname="Deutsch">
            <organization/>
          </author>
          <date month="May" year="1996"/>
        </front>
        <seriesInfo name="RFC" value="1952"/>
        <format octets="25036" target="ftp://ftp.isi.edu/in-notes/rfc1952.txt" type="TXT"/>
        <format octets="43337" target="ftp://ftp.isi.edu/in-notes/rfc1952.ps" type="PS"/>
        <format octets="43211" target="ftp://ftp.isi.edu/in-notes/rfc1952.pdf" type="PDF"/>
      </reference>
      <reference anchor="RFC2119">
        <front>
          <title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement Levels</title>
          <author fullname="Scott Bradner" initials="S." surname="Bradner">
            <organization>Harvard University</organization>
            <address>
              <postal>
                <street>1350 Mass. Ave.</street>
                <street>Cambridge</street>
                <street>MA 02138</street>
              </postal>
              <phone>- +1 617 495 3864</phone>
              <email>sob@harvard.edu</email>
            </address>
          </author>
          <date month="March" year="1997"/>
          <area>General</area>
          <keyword>keyword</keyword>
          <abstract>
            <t>
              In many standards track documents several words are used to signify
	   the requirements in the specification.  These words are often
	   capitalized.  This document defines these words as they should be
	   interpreted in IETF documents.  Authors who follow these guidelines
	   should incorporate this phrase near the beginning of their document:
              <list>
                <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
	      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
	      "OPTIONAL" in this document are to be interpreted as described in
	      RFC 2119.</t>
              </list>
            </t>
            <t>Note that the force of these words is modified by the requirement
	   level of the document in which they are used.</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="2119"/>
        <format octets="4723" target="ftp://ftp.isi.edu/in-notes/rfc2119.txt" type="TXT"/>
        <format octets="17491" target="http://xml.resource.org/public/rfc/html/rfc2119.html" type="HTML"/>
        <format octets="5777" target="http://xml.resource.org/public/rfc/xml/rfc2119.xml" type="XML"/>
      </reference>
      <reference anchor="RFC4648">
        <front>
          <title>The Base16, Base32, and Base64 Data Encodings</title>
          <author fullname="S. Josefsson" initials="S." surname="Josefsson">
            <organization/>
          </author>
          <date month="October" year="2006"/>
        </front>
        <seriesInfo name="RFC" value="4648"/>
        <format octets="35491" target="ftp://ftp.isi.edu/in-notes/rfc4648.txt" type="TXT"/>
      </reference>
      <reference anchor="I-D.ietf-p2psip-base">
        <front>
          <title>REsource LOcation And Discovery (RELOAD) Base Protocol</title>
          <author fullname="Cullen Jennings" initials="C" surname="Jennings">
            <organization/>
          </author>
          <author fullname="Bruce Lowekamp" initials="B" surname="Lowekamp">
            <organization/>
          </author>
          <author fullname="Eric Rescorla" initials="E" surname="Rescorla">
            <organization/>
          </author>
          <author fullname="Salman Baset" initials="S" surname="Baset">
            <organization/>
          </author>
          <author fullname="Henning Schulzrinne" initials="H" surname="Schulzrinne">
            <organization/>
          </author>
          <date day="16" month="July" year="2012"/>
          <abstract>
            <t>This specification defines REsource LOcation And Discovery (RELOAD), a peer-to-peer (P2P) signaling protocol for use on the Internet.
					A P2P signaling protocol provides its clients with an abstract storage and messaging service between a set of cooperating peers that form the overlay network.
					RELOAD is designed to support a P2P Session Initiation Protocol (P2PSIP) network, but can be utilized by other applications with similar requirements by defining new usages that specify the kinds of data that must be stored for a particular application.
					RELOAD defines a security model based on a certificate enrollment service that provides unique identities.
					NAT traversal is a fundamental service of the protocol.
					RELOAD also allows access from "client" nodes that do not need to route traffic or store data for others.</t>
          </abstract>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-p2psip-base-22"/>
        <format target="http://www.ietf.org/internet-drafts/draft-ietf-p2psip-base-22.txt" type="TXT"/>
      </reference>
      <reference anchor="ECMA-262">
        <front>
          <title>ECMAScript Language Specification 3rd Edition</title>
          <author fullname="" initials="" surname="Ecma">
            <organization/>
          </author>
          <date month="December" year="2009"/>
        </front>
      </reference>
    </references>
    <references title="Informative References">
      <reference anchor="I-D.ietf-p2psip-service-discovery">
        <front>
          <title>Service Discovery Usage for REsource LOcation And Discovery (RELOAD)</title>
          <author fullname="Jouni Maenpaa" initials="J" surname="Maenpaa">
            <organization/>
          </author>
          <author fullname="Gonzalo Camarillo" initials="G" surname="Camarillo">
            <organization/>
          </author>
          <date day="1" month="October" year="2012"/>
          <abstract>
            <t>REsource LOcation and Discovery (RELOAD) does not define a generic service discovery mechanism as part of the base protocol.  This document defines how the Recursive Distributed Rendezvous (ReDiR) service discovery mechanism used in OpenDHT can be applied to RELOAD overlays to provide a generic service discovery mechanism.</t>
          </abstract>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-p2psip-service-discovery-06"/>
        <format target="http://www.ietf.org/internet-drafts/draft-ietf-p2psip-service-discovery-06.txt" type="TXT"/>
      </reference>
      <reference anchor="I-D.petithuguenin-vipr-reload-usage">
        <front>
          <title>A Usage of Resource Location and Discovery (RELOAD) for Public Switched Telephone Network (PSTN) Verification</title>
          <author fullname="Marc Petit-Huguenin" initials="M" surname="Petit-Huguenin">
            <organization/>
          </author>
          <author fullname="Jonathan Rosenberg" initials="J" surname="Rosenberg">
            <organization/>
          </author>
          <author fullname="Cullen Jennings" initials="C" surname="Jennings">
            <organization/>
          </author>
          <date day="12" month="March" year="2012"/>
          <abstract>
            <t>Verification Involving PSTN Reachability (VIPR) is a technique for inter-domain SIP federation.  VIPR makes use of the RELOAD protocol to store unverified mappings from phone numbers to RELOAD nodes, with whom a validation process can be run.  This document defines the usage of RELOAD for this purpose.</t>
          </abstract>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-petithuguenin-vipr-reload-usage-04"/>
        <format target="http://www.ietf.org/internet-drafts/draft-petithuguenin-vipr-reload-usage-04.txt" type="TXT"/>
      </reference>
      <reference anchor="I-D.ietf-p2psip-share">
        <front>
          <title>A Usage for Shared Resources in RELOAD (ShaRe)</title>
          <author fullname="Alexander Knauf" initials="A" surname="Knauf">
            <organization/>
          </author>
          <author fullname="Thomas Schmidt" initials="T" surname="Schmidt">
            <organization/>
          </author>
          <author fullname="Gabriel Hege" initials="G" surname="Hege">
            <organization/>
          </author>
          <author fullname="Matthias Waehlisch" initials="M" surname="Waehlisch">
            <organization/>
          </author>
          <date day="9" month="October" year="2012"/>
          <abstract>
            <t>This document defines a RELOAD Usage for managing shared write access to RELOAD Resources.  Shared Resources in RELOAD (ShaRe) form a basic primitive for enabling various coordination and notification schemes among distributed peers.  Access in ShaRe is controlled by a hierarchical trust delegation scheme maintained within an access list.  A new USER-CHAIN-ACL access policy allows authorized peers to write a Shared Resource without owning its corresponding certificate. This specification also adds mechanisms to store Resources with a variable name which is useful whenever peer-independent rendezvous processes are required.</t>
          </abstract>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-p2psip-share-00"/>
        <format target="http://www.ietf.org/internet-drafts/draft-ietf-p2psip-share-00.txt" type="TXT"/>
      </reference>
    </references>
    <section title="Examples">
      <section title="Standard Access Control Policies">
        <t>
          This section shows the ECMAScript code that could be used to implement the standard Access Control Policies defined in
          <xref target="I-D.ietf-p2psip-base"/>
          .
        </t>
        <section title="USER-MATCH">
          <t>
            <figure>
              <artwork><![CDATA[String.prototype['bytes'] = function () {
    var bytes = [];
    for (var i = 0; i < this.length; i++) {
        bytes[i] = this.charCodeAt(i);
    }
    return bytes;
};

return resource.equalsHash(entry.signer.user_name.bytes());]]></artwork>
            </figure>
          </t>
        </section>
        <section title="NODE-MATCH">
          <t>
            <figure>
              <artwork><![CDATA[return resource.equalsHash(entry.signer.node_id);]]></artwork>
            </figure>
          </t>
        </section>
        <section title="USER-NODE-MATCH">
          <t>
            <figure>
              <artwork><![CDATA[String.prototype['bytes'] = function () {
    var bytes = [];
    for (var i = 0; i < this.length; i++) {
        bytes[i] = this.charCodeAt(i);
    }
    return bytes;
};

var equals = function (a, b) {
    if (a.length !== b.length) return false;
    for (var i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) return false;
    }
    return true;
};

return resource.equalsHash(entry.signer.user_name.bytes())
  && equals(entry.key, entry.signer.node_id);]]></artwork>
            </figure>
          </t>
        </section>
        <section title="NODE-MULTIPLE">
          <t>
            <figure>
              <artwork><![CDATA[Number.prototype['width'] = function (w) {
    var bytes = [];
    for (var i = 0; i < w; i++) {
        bytes[i] = (this >>> ((w - i - 1) * 8)) & 255;
    }
    return bytes;
};

for (var i = 0; i < kind.max_node_multiple; i++) {
    if (resource.equalsHash(entry.signer.node_id, i.width(4))) {
        return true;
    }
}
return false;]]></artwork>
            </figure>
          </t>
        </section>
      </section>
      <section title="Service Discovery Access Control Policy NODE-ID-MATCH">
        <t>
          <xref target="I-D.ietf-p2psip-service-discovery"/>
          defines a specific Access Control Policy (NODE-ID-MATCH) that need to access the content of the entry to be written.
					If implemented as specified by this document, the ECMAScript code would look something like this:
        </t>
        <t>
          <figure>
            <artwork><![CDATA[/* Insert here the code from
   http://jsfromhell.com/classes/bignumber
 */

var toBigNumber = function (node_id) {
   var bignum = new BigNumber(0);
   for (var i = 0; i < node_id.length; i++) {
       bignum = bignum.multiply(256).add(node_id[i]);
   }
   return bignum;
};

var checkIntervals = function (node_id, level, node, factor) {
   var size = new BigNumber(2).pow(128);
   var node = toBigNumber(node_id);
   for (var f = 0; f < factor; f++) {
       var temp = size.multiply(new BigNumber(f)
         .pow(new BigNumber(level).negate()));
       var min = temp.multiply(node.add(new BigNumber(f)
         .divide(factor)));
       var max = temp.multiply(node.add(new BigNumber(f + 1)
         .divide(factor)));
       if (node.compare(min) === -1 || node.compare(max) == 1
         || node.compare(max) == 0) return false;
   }
   return true;
};

var equals = function (a, b) {
   if (a.length !== b.length) return false;
   for (var i = 0; i < a.length; i++) {
       if (a[i] !== b[i]) return false;
   }
   return true;
};

var level = function (value) {
   var length = value[16] * 256 + value[17];
   return value[18 + length] * 256 + value[18 + length + 1];
};

var node = function (value) {
   var length = value[16] * 256 + value[17];
   return value[18 + length + 2] * 256
     + value[18 + length + 3];
};

var namespace = function (value) {
   var length = value[16] * 256 + value[17];
   return String.fromCharCode.apply(null,
     value.slice(18, length + 18));
};

var branching_factor =
  kind.evaluate('/branching-factor',
  'redir', 'urn:ietf:params:xml:ns:p2p:redir');
return equals(entry.key, entry.signer.node_id)
 && (!entry.exists || checkIntervals(entry.key,
   level(entry.value), node(entry.value),
   branching_factor))
 && (!entry.exists
   || resource.equalsHash(namespace(entry.value),
     level(entry.value), node(entry.value)));]]></artwork>
          </figure>
        </t>
        <t>
          Note that the code for the BigNumber object was removed from this example, as the licensing terms are unclear.
					The code is available at
          <eref target="http://jsfromhell.com/classes/bignumber"/>
          .
        </t>
      </section>
      <section title="VIPR Access Control Policy">
        <t>
          <xref target="I-D.petithuguenin-vipr-reload-usage"/>
          defines a specific Access Control Policy.
					If implemented as specified by this document, the ECMAScript code would look something like this:
        </t>
        <t>
          <figure>
            <artwork><![CDATA[var equals = function (a, b) {
  if (a.length !== b.length) return false;
  for (var i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) return false;
  }
  return true;
};
var length = configuration.node_id_length;
return equals(entry.key.slice(0, length),
  entry.value.slice(4, length + 4))
  && equals(entry.key.slice(0, length), entry.signer.node_id);]]></artwork>
          </figure>
        </t>
      </section>
      <section title="ShaRe Access Control Policy USER-CHAIN-ACL">
        <t>
          <xref target="I-D.ietf-p2psip-share"/>
          defines a new Access Control Policies, USER-CHAIN-ACL.
					If implemented as specified by this document, the ECMAScript code would look something like this:
        </t>
        <t>
          <figure>
            <artwork><![CDATA[var pattern = kind.evaluate('/share:pattern',
  'share', 'urn:ietf:params:xml:ns:p2p:config-share');
var username = entry.signer.user_name.match(/^([^@]+)@(.+)$/);
var new_pattern = new RegExp(
  pattern.replace('$USER', username[1])
    .replace('$DOMAIN', username[2]));
var length =  entry.value[0] * 256 + entry.value[1];
var resource_name = String.fromCharCode.apply(null,
  entry.value.slice(2, length + 2));
return new_pattern.test(resource_name);\n"));]]></artwork>
          </figure>
        </t>
        <t>[[Note: the code is incomplete]]</t>
      </section>
    </section>
    <section title="Release notes">
      <t>This section must be removed before publication as an RFC.</t>
      <section title="Modifications between -05 and -04">
        <t>
          <list style="symbols">
            <t>Resurrected the draft.</t>
          </list>
        </t>
      </section>
      <!--section title="Design Notes">
				<t>
					<list style="symbols">
						<t></t>
					</list>
				</t>
			</section-->
      <section title="Running Code Considerations">
        <t>
          <list style="symbols">
            <t>Reference Implementation and Access Control Policy script tester (&lt;http://debian.implementers.org/testing/source/reload.tar.gz&gt;).
							Marc Petit-Huguenin.
							Implements version -03.</t>
          </list>
        </t>
      </section>
      <section title="TODO List">
        <t>
          <list style="symbols">
            <t>Finish the code for ShaRe.</t>
          </list>
        </t>
      </section>
    </section>
  </back>
</rfc>