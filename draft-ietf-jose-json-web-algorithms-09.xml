<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>

<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>

<rfc category="std" ipr="trust200902" docName="draft-ietf-jose-json-web-algorithms-09">

  <front>
    <title>JSON Web Algorithms (JWA)</title>

    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>

    <date day="23" month="April" year="2013" />

    <area>Security</area>
    <workgroup>JOSE Working Group</workgroup>

    <keyword>RFC</keyword>
    <keyword>Request for Comments</keyword>
    <keyword>I-D</keyword>
    <keyword>Internet-Draft</keyword>
    <keyword>JavaScript Object Notation</keyword>
    <keyword>JSON</keyword>
    <keyword>JSON Web Token</keyword>
    <keyword>JWT</keyword>
    <keyword>JSON Web Signature</keyword>
    <keyword>JWS</keyword>
    <keyword>JSON Web Encryption</keyword>
    <keyword>JWE</keyword>
    <keyword>JSON Web Key</keyword>
    <keyword>JWK</keyword>
    <keyword>JSON Web Algorithms</keyword>
    <keyword>JWA</keyword>

    <abstract>
      <t>
	The JSON Web Algorithms (JWA) specification enumerates
	cryptographic algorithms and identifiers to be used with the
	JSON Web Signature (JWS),
	JSON Web Encryption (JWE), and
	JSON Web Key (JWK) specifications.
      </t>
    </abstract>

  </front>

  <middle>
    <section title="Introduction" anchor="Introduction">
      <t>
	The JSON Web Algorithms (JWA) specification enumerates
	cryptographic algorithms and identifiers to be used with the
	JSON Web Signature (JWS) <xref target="JWS"/>,
	JSON Web Encryption (JWE) <xref target="JWE"/>, and
	JSON Web Key (JWK) <xref target="JWK"/> specifications.
	All these specifications utilize
	JavaScript Object Notation (JSON) <xref target="RFC4627"/>
	based data structures.
	This specification also describes the semantics and operations
	that are specific to these algorithms and key types.
      </t>
      <t>
	Enumerating the algorithms and identifiers for them in this
	specification, rather than in the JWS, JWE, and JWK
	specifications, is intended to allow them to remain unchanged
	in the face of changes in the set of required, recommended,
	optional, and deprecated algorithms over time.
      </t>

      <section title="Notational Conventions" anchor="NotationalConventions">
        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
          "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
          and "OPTIONAL" in this document are to be interpreted as
          described in
	  Key words for use in RFCs to Indicate Requirement Levels <xref target='RFC2119' />.
        </t>
      </section>

    </section>

    <section title="Terminology" anchor="Terminology">

      <section title="Terms Incorporated from the JWS Specification" anchor="TermsFromJWS">
	<t>
	  These terms defined by the
	  JSON Web Signature (JWS) <xref target="JWS"/>
	  specification are incorporated into this specification:
	</t>

	<t>
	  <list style="hanging">

	    <t hangText="JSON Web Signature (JWS)">
	      A data structure representing a digitally signed or MACed message.
	      The structure represents three values:
	      the JWS Header,
	      the JWS Payload, and
	      the JWS Signature.
	    </t>

	    <t hangText="JSON Text Object">
	      A UTF-8 <xref target="RFC3629"/>
	      encoded text string representing a JSON object;
	      the syntax of JSON objects is defined in
	      Section 2.2 of <xref target="RFC4627"/>.
	    </t>

	    <t hangText="JWS Header">
	      A JSON Text Object that describes the
	      digital signature or MAC operation applied to
	      create the JWS Signature value.
	    </t>
	    <t hangText="JWS Payload">
	      The sequence of octets to be secured -- a.k.a., the message.
	      The payload can contain an arbitrary sequence of octets.
	    </t>
	    <t hangText="JWS Signature">
	      A sequence of octets containing the cryptographic
	      material that ensures the integrity of the JWS Header
	      and the JWS Payload.
	      The JWS Signature value is a digital signature or MAC value
	      calculated over the JWS Signing Input using the parameters
	      specified in the JWS Header.
	    </t>

	    <t hangText="Base64url Encoding">
	      The URL- and filename-safe Base64 encoding
	      described in <xref target="RFC4648">RFC 4648</xref>,
	      Section 5, with the (non URL-safe) '=' padding characters
	      omitted, as permitted by Section 3.2.  (See Appendix C of
	      <xref target="JWS" /> for notes on implementing base64url
	      encoding without padding.)
	    </t>

	    <t hangText="Encoded JWS Header">
	      Base64url encoding of the JWS Header.
	    </t>
	    <t hangText="Encoded JWS Payload">
	      Base64url encoding of the JWS Payload.
	    </t>
	    <t hangText="Encoded JWS Signature">
	      Base64url encoding of the JWS Signature.
	    </t>

	    <t hangText="JWS Signing Input">
	      The concatenation of the Encoded JWS Header, a period ('.')
	      character, and the Encoded JWS Payload.
	    </t>

	    <t hangText="Collision Resistant Namespace">
	      A namespace that allows names to be allocated in a manner
	      such that they are highly unlikely to collide with other names.
	      For instance, collision resistance can be achieved through
	      administrative delegation of portions of the namespace or
	      through use of collision-resistant name allocation functions.
	      Examples of Collision Resistant Namespaces include:
	      Domain Names,
	      Object Identifiers (OIDs) as defined in the ITU-T X.660
	      and X.670 Recommendation series, and
	      Universally Unique IDentifiers (UUIDs)
	      <xref target="RFC4122"/>.
	      When using an administratively delegated namespace,
	      the definer of a name needs to take
	      reasonable precautions to ensure they are in control of
	      the portion of the namespace they use to define the name.
	    </t>
	  </list>
	</t>
      </section>

      <section title="Terms Incorporated from the JWE Specification" anchor="TermsFromJWE">
	<t>
	  These terms defined by the
	  JSON Web Encryption (JWE) <xref target="JWE"/>
	  specification are incorporated into this specification:
	</t>
	<t>
	  <list style="hanging">

	    <t hangText="JSON Web Encryption (JWE)">
	      A data structure representing an encrypted message.
	      The structure represents five values:
	      the JWE Header, the JWE Encrypted Key,
	      the JWE Initialization Vector, the JWE Ciphertext, and
	      the JWE Authentication Tag.
	    </t>

	    <t hangText="Authenticated Encryption">
	      An Authenticated Encryption algorithm is one that
	      provides an integrated content integrity check.
	      Authenticated Encryption algorithms accept two inputs, the Plaintext and the
	      Additional Authenticated Data value, and produce two outputs,
	      the Ciphertext and the Authentication Tag value.
	      AES Galois/Counter Mode (GCM) is one such algorithm.
	    </t>

	    <t hangText="Plaintext">
	      The sequence of octets to be encrypted -- a.k.a., the message.
	      The plaintext can contain an arbitrary sequence of octets.
	    </t>
	    <t hangText="Ciphertext">
	      An encrypted representation of the Plaintext.
	    </t>
	    <t hangText="Additional Associated Data (AAD)">
	      An input to an Authenticated Encryption operation that
	      is integrity protected but not encrypted.
	    </t>
	    <t hangText="Authentication Tag">
	      An output of an Authenticated Encryption operation that
	      ensures the integrity of the Ciphertext and the
	      Additional Associated Data.
	    </t>

	    <t hangText="Content Encryption Key (CEK)">
	      A symmetric key for the Authenticated Encryption algorithm
	      used to encrypt the Plaintext for the
	      recipient to produce the Ciphertext and the Authentication Tag.
	    </t>

	    <t hangText="JWE Header">
	      A JSON Text Object that describes the
	      encryption operations applied to create the JWE Encrypted
	      Key, the JWE Ciphertext, and the JWE Authentication Tag.
	    </t>
	    <t hangText="JWE Encrypted Key">
	      The result of encrypting the Content Encryption Key (CEK) with the
	      intended recipient's key using the specified algorithm.
	      Note that for some algorithms, the JWE Encrypted Key
	      value is specified as being the empty octet sequence.
	    </t>
	    <t hangText="JWE Initialization Vector">
	      A sequence of octets containing the Initialization Vector used
	      when encrypting the Plaintext.
	    </t>
	    <t hangText="JWE Ciphertext">
	      A sequence of octets containing the Ciphertext for a JWE.
	    </t>
	    <t hangText="JWE Authentication Tag">
	      A sequence of octets containing the Authentication Tag for a JWE.
	    </t>

	    <t hangText="Encoded JWE Header">
	      Base64url encoding of the JWE Header.
	    </t>
	    <t hangText="Encoded JWE Encrypted Key">
	      Base64url encoding of the JWE Encrypted Key.
	    </t>
	    <t hangText="Encoded JWE Initialization Vector">
	      Base64url encoding of the JWE Initialization Vector.
	    </t>
	    <t hangText="Encoded JWE Ciphertext">
	      Base64url encoding of the JWE Ciphertext.
	    </t>
	    <t hangText="Encoded JWE Authentication Tag">
	      Base64url encoding of the JWE Authentication Tag.
	    </t>

	    <t hangText="Key Management Mode">
	      A method of determining the Content Encryption Key (CEK) value to use.
	      Each algorithm used for determining the CEK value uses a specific Key Management Mode.
	      Key Management Modes employed by this specification are
	      Key Encryption,
	      Key Wrapping,
	      Direct Key Agreement,
	      Key Agreement with Key Wrapping, and
	      Direct Encryption.
	    </t>

	    <t hangText="Key Encryption">
	      A Key Management Mode in which the Content Encryption Key (CEK) value
	      is encrypted to the intended recipient using an asymmetric encryption algorithm.
	    </t>

	    <t hangText="Key Wrapping">
	      A Key Management Mode in which the Content Encryption Key (CEK) value
	      is encrypted to the intended recipient using a symmetric key wrapping algorithm.
	    </t>

	    <t hangText="Direct Key Agreement">
	      A Key Management Mode in which a key agreement algorithm is used to agree upon
	      the Content Encryption Key (CEK) value.
	    </t>

	    <t hangText="Key Agreement with Key Wrapping">
	      A Key Management Mode in which a key agreement algorithm is used to agree upon
	      a symmetric key used to encrypt the Content Encryption Key (CEK) value
	      to the intended recipient using a symmetric key wrapping algorithm.
	    </t>

	    <t hangText="Direct Encryption">
	      A Key Management Mode in which the Content Encryption Key (CEK) value
	      used is the secret symmetric key value shared between the parties.
	    </t>

	  </list>
	</t>
      </section>
      
      <section title="Terms Incorporated from the JWK Specification" anchor="TermsFromJWK">
	<t>
	  These terms defined by the
	  JSON Web Key (JWK) <xref target="JWK"/>
	  specification are incorporated into this specification:
	</t>
	<t>
	  <list style="hanging">
	    <t hangText="JSON Web Key (JWK)">
	      A JSON object that represents a cryptographic key.
	    </t>
	    <t hangText="JSON Web Key Set (JWK Set)">
	      A JSON object that contains an array of JWKs as
	      the value of its <spanx style="verb">keys</spanx> member.
	    </t>
	  </list>
	</t>
      </section>

      <section title="Defined Terms" anchor="DefinedTerms">
	<t>
	  These terms are defined for use by this specification:
	</t>

	<t>
	  <list style="hanging">
	    <t hangText="Header Parameter Name">
	      The name of a member of the JSON object representing a
	      JWS Header or JWE Header.
	    </t>
	    <t hangText="Header Parameter Value">
	      The value of a member of the JSON object representing a
	      JWS Header or JWE Header.
	    </t>
	  </list>
	</t>
      </section>

    </section>

    <section title="Cryptographic Algorithms for JWS" anchor="SigningAlgs">
      <t>
	JWS uses cryptographic algorithms to digitally sign or
	create a Message Authentication Codes (MAC) of the contents
	of the JWS Header and the JWS Payload.  The
	use of the following algorithms for producing JWSs is defined in
	this section.
      </t>

      <section title='"alg" (Algorithm) Header Parameter Values for JWS' anchor="JWSAlgValues">
	<t>
	  The table below is the set of
	  <spanx style="verb">alg</spanx> (algorithm) header
	  parameter values defined by this specification for use with JWS, each of which
	  is explained in more detail in the following sections:
	</t>

	<texttable>

	  <ttcol align="left">alg Parameter Value</ttcol>
	  <ttcol align="left">Digital Signature or MAC Algorithm</ttcol>
	  <ttcol align="left">Implementation Requirements</ttcol>

	  <c>HS256</c>
	  <c>HMAC using SHA-256 hash algorithm</c>
	  <c>REQUIRED</c>

	  <c>HS384</c>
	  <c>HMAC using SHA-384 hash algorithm</c>
	  <c>OPTIONAL</c>

	  <c>HS512</c>
	  <c>HMAC using SHA-512 hash algorithm</c>
	  <c>OPTIONAL</c>

	  <c>RS256</c>
	  <c>RSASSA using SHA-256 hash algorithm</c>
	  <c>RECOMMENDED</c>

	  <c>RS384</c>
	  <c>RSASSA using SHA-384 hash algorithm</c>
	  <c>OPTIONAL</c>

	  <c>RS512</c>
	  <c>RSASSA using SHA-512 hash algorithm</c>
	  <c>OPTIONAL</c>

	  <c>ES256</c>
	  <c>ECDSA using P-256 curve and SHA-256 hash algorithm</c>
	  <c>RECOMMENDED+</c>

	  <c>ES384</c>
	  <c>ECDSA using P-384 curve and SHA-384 hash algorithm</c>
	  <c>OPTIONAL</c>

	  <c>ES512</c>
	  <c>ECDSA using P-521 curve and SHA-512 hash algorithm</c>
	  <c>OPTIONAL</c>

	  <c>none</c>
	  <c>No digital signature or MAC value included</c>
	  <c>REQUIRED</c>

	</texttable>

	<t>
	  All the names are short because a core goal of JWS is
	  for the representations to be compact.  However, there is no
	  a priori length restriction on <spanx style="verb">alg</spanx> values.
	</t>
	<t>
	  The use of "+" in the Implementation Requirements
	  indicates that the requirement strength is likely
	  to be increased in a future version of the specification. 
	</t>
	<t>
	  See <xref target="SigAlgXref" /> for a table cross-referencing the
	  digital signature and MAC <spanx style="verb">alg</spanx> (algorithm)
	  values used in this specification
	  with the equivalent identifiers used by other
	  standards and software packages.
	</t>
      </section>

      <section title="MAC with HMAC SHA-256, HMAC SHA-384, or HMAC SHA-512" anchor="DefiningHMAC">
	<t>
	  Hash-based Message Authentication Codes (HMACs) enable one to
	  use a secret plus a cryptographic hash function to generate a
	  Message Authentication Code (MAC). This can be used to
	  demonstrate that the MAC matches the hashed content, in this
	  case the JWS Signing Input, which therefore demonstrates that
	  whoever generated the MAC was in possession of the secret.
	  The means of exchanging the shared key is outside the scope
	  of this specification.
	</t>
	<t>
	  The algorithm for implementing and validating HMACs is
	  provided in <xref target="RFC2104">RFC 2104</xref>.  This
	  section defines the use of the HMAC SHA-256, HMAC SHA-384,
	  and HMAC SHA-512 functions <xref target="SHS"/>. The
	  <spanx style="verb">alg</spanx> (algorithm) header parameter values
	  <spanx style="verb">HS256</spanx>, <spanx
	  style="verb">HS384</spanx>, and <spanx
	  style="verb">HS512</spanx> are used in the JWS Header
	  to indicate that the Encoded JWS Signature contains a base64url
	  encoded HMAC value using the respective hash function.
	</t>
	<t>
	  A key of the same size as the hash output (for instance, 256
	  bits for <spanx style="verb">HS256</spanx>) or larger MUST
	  be used with this algorithm.
	</t>
	<t>
	  The HMAC SHA-256 MAC is generated per RFC 2104,
	  using SHA-256 as the hash algorithm "H",
	  using the octets of the ASCII <xref target="USASCII"/> representation
	  of the JWS Signing Input as the "text" value,
	  and using the shared key.
	  The HMAC output value is the JWS Signature.
	  The JWS signature is base64url encoded to produce the Encoded JWS Signature.
	</t>
	<t>
	  The HMAC SHA-256 MAC for a JWS is validated by computing an HMAC value per RFC 2104,
	  using SHA-256 as the hash algorithm "H",
	  using the octets of the ASCII representation
	  of the received JWS Signing Input as the "text" value,
	  and using the shared key.
	  This computed HMAC value is then compared to the result of
	  base64url decoding the received Encoded JWS signature.
	  Alternatively, the computed HMAC value can be base64url encoded
	  and compared to the received Encoded JWS Signature,
	  as this comparison produces the same result as comparing
	  the unencoded values.
	  In either case, if the values match, the HMAC has been validated.
	  If the validation fails, the JWS MUST be rejected.
	</t>
	<t>
	  Securing content with the HMAC SHA-384 and HMAC SHA-512
	  algorithms is performed identically to the procedure for
	  HMAC SHA-256 -
	  just using the corresponding hash algorithm
	  with correspondingly larger minimum key sizes and result values:
	  384 bits each for HMAC SHA-384 and 512 bits each for HMAC SHA-512.
	</t>
	<t>
	  An example using this algorithm is shown in
	  Appendix A.1 of <xref target="JWS"/>.
	</t>
      </section>

      <section title="Digital Signature with RSA SHA-256, RSA SHA-384, or RSA SHA-512" anchor="DefiningRSA">
	<t>
	  This section defines the use of the RSASSA-PKCS1-V1_5
	  digital signature algorithm as defined in
	  Section 8.2 of <xref target="RFC3447">RFC 3447</xref>,
	  (commonly known as PKCS #1),
	  using SHA-256, SHA-384, or SHA-512 <xref target="SHS"/>
	  as the hash functions.
	  The <spanx style="verb">alg</spanx> (algorithm) header
	  parameter values <spanx style="verb">RS256</spanx>, <spanx
	  style="verb">RS384</spanx>, and <spanx
	  style="verb">RS512</spanx> are used in the JWS Header
	  to indicate that the Encoded JWS Signature contains a base64url
	  encoded RSA digital signature using the respective hash function.
	</t>
	<t>
	  A key of size 2048 bits or larger MUST be used with these algorithms.
	</t>
	<t>
	  The RSA SHA-256 digital signature is generated as follows:

	  <list style="numbers">

	    <t>
	      Generate a digital signature of the octets of the ASCII representation
	      of the JWS Signing Input
	      using RSASSA-PKCS1-V1_5-SIGN
	      and the SHA-256 hash function with the desired private
	      key. The output will be an octet sequence.
	    </t>
	    <t>
	      Base64url encode the resulting octet sequence.
	    </t>

	  </list>

	  The output is the Encoded JWS Signature for that JWS.
	</t>

	<t>
	  The RSA SHA-256 digital signature for a JWS is validated as follows:

	  <list style="numbers">

	    <t>
	      Take the Encoded JWS Signature and base64url decode it into
	      an octet sequence. If decoding fails, the JWS MUST
	      be rejected.
	    </t>
	    <t>
	      Submit the octets of the ASCII representation of the JWS Signing Input
	      and the public key corresponding to the private key used
	      by the signer to the RSASSA-PKCS1-V1_5-VERIFY algorithm
	      using SHA-256 as the hash function.
	    </t>
	    <t>
	      If the validation fails, the JWS MUST be rejected.
	    </t>

	  </list>
	</t>

	<t>
	  Signing with the RSA SHA-384 and RSA SHA-512
	  algorithms is performed identically to the procedure for
	  RSA SHA-256 -
	  just using the corresponding hash algorithm
	  with correspondingly larger result values:
	  384 bits for RSA SHA-384 and 512 bits for RSA SHA-512.
	</t>
	<t>
	  An example using this algorithm is shown in
	  Appendix A.2 of <xref target="JWS"/>.
	</t>
      </section>

      <section title="Digital Signature with ECDSA P-256 SHA-256, ECDSA P-384 SHA-384, or ECDSA P-521 SHA-512" anchor="DefiningECDSA">
	<t>
	  The Elliptic Curve Digital Signature Algorithm (ECDSA) <xref target="DSS"/>
	  provides for the use of Elliptic Curve cryptography, which is
	  able to provide equivalent security to RSA cryptography but
	  using shorter key sizes and with greater processing
	  speed. This means that ECDSA digital signatures will be substantially
	  smaller in terms of length than equivalently strong RSA
	  digital signatures.
	</t>
	<t>
	  This specification defines the use of ECDSA with the P-256
	  curve and the SHA-256 cryptographic hash function, ECDSA
	  with the P-384 curve and the SHA-384 hash function, and
	  ECDSA with the P-521 curve and the SHA-512 hash
	  function. The P-256, P-384, and P-521 curves are
	  defined in  <xref target="DSS"/>. The <spanx
	  style="verb">alg</spanx> (algorithm) header parameter values <spanx
	  style="verb">ES256</spanx>, <spanx
	  style="verb">ES384</spanx>, and <spanx
	  style="verb">ES512</spanx> are used in the JWS Header
	  to indicate that the Encoded JWS Signature contains a base64url
	  encoded ECDSA P-256 SHA-256, ECDSA P-384 SHA-384, or ECDSA
	  P-521 SHA-512 digital signature, respectively.
	</t>
	<t>
	  The ECDSA P-256 SHA-256 digital signature is generated as follows:

	  <list style="numbers">
	    <t>
	      Generate a digital signature of the octets of the ASCII representation
	      of the JWS Signing Input
	      using ECDSA P-256 SHA-256 with
	      the desired private key. The output will be the pair
	      (R, S), where R and S are 256 bit unsigned integers.
	    </t>
	    <t>
	      Turn R and S into octet sequences in big endian order,
	      with each array being be 32 octets long.
	      The array representations MUST NOT be shortened
	      to omit any leading zero octets contained in the values.
	    </t>
	    <t>
	      Concatenate the two octet sequences in the order R and then S.
	      (Note that many ECDSA implementations will directly produce
	      this concatenation as their output.)
	    </t>
	    <t>
	      Base64url encode the resulting 64 octet sequence.
	    </t>
	  </list>

	  The output is the Encoded JWS Signature for the JWS.
	</t>

	<t>
	  The ECDSA P-256 SHA-256 digital signature for a JWS is validated as follows:

	  <list style="numbers">
	    <t>
	      Take the Encoded JWS Signature and base64url decode it into
	      an octet sequence. If decoding fails, the JWS MUST
	      be rejected.
	    </t>
	    <t>
	      The output of the base64url decoding MUST be a 64 octet sequence.
	      If decoding does not result in a 64 octet sequence, the JWS MUST be rejected.
	    </t>
	    <t>
	      Split the 64 octet sequence into two 32 octet sequences. The first
	      array will be R and the second S
	      (with both being in big endian octet order).
	    </t>
	    <t>
	      Submit the octets of the ASCII representation of the JWS Signing Input
	      R, S and the public key (x, y) to the ECDSA P-256
	      SHA-256 validator.
	    </t>
	    <t>
	      If the validation fails, the JWS MUST be rejected.
	    </t>
	  </list>

	  Note that ECDSA digital
	  signature contains a value referred to as K, which is a random
	  number generated for each digital signature instance. This
	  means that two ECDSA digital signatures using exactly the same
	  input parameters will output different signature values because
	  their K values will be different. A consequence of this is
	  that one cannot validate an ECDSA signature by recomputing
	  the signature and comparing the results.
	</t>
	<t>
	  Signing with the ECDSA P-384 SHA-384 and ECDSA P-521 SHA-512
	  algorithms is performed identically to the procedure for
	  ECDSA P-256 SHA-256 -
	  just using the corresponding hash algorithm
	  with correspondingly larger result values.
	  For ECDSA P-384 SHA-384, R and S will be 384 bits each,
	  resulting in a 96 octet sequence.
	  For ECDSA P-521 SHA-512, R and S will be 521 bits each,
	  resulting in a 132 octet sequence.
	</t>
	<t>
	  Examples using these algorithms are shown in
	  Appendices A.3 and A.4 of <xref target="JWS"/>.
	</t>
      </section>

      <section title='Using the Algorithm "none"' anchor="UsingNone">
	<t>
	  JWSs MAY also be created that do not provide integrity protection.
	  Such a JWS is called a "Plaintext JWS".
	  Plaintext JWSs MUST use the <spanx style="verb">alg</spanx>
	  value <spanx style="verb">none</spanx>, and are formatted
	  identically to other JWSs, but
	  with the empty string for its JWS Signature value.
	</t>
      </section>

      <section title="Additional Digital Signature/MAC Algorithms and Parameters" anchor="MoreSigAlgs">
	<t>
	  Additional algorithms MAY be used to protect JWSs with
	  corresponding <spanx style="verb">alg</spanx> (algorithm)
	  header parameter values being defined to refer to them.
	  New <spanx style="verb">alg</spanx> header parameter values SHOULD
	  either be registered in the IANA JSON Web Signature and Encryption Algorithms
	  registry <xref target="JWSJWEAlgsReg" /> or be
	  a value that contains a Collision Resistant Namespace.
	  In particular, it is permissible to use the algorithm identifiers defined in
	  <xref target="RFC3275">XML DSIG</xref>,
	  <xref target="W3C.CR-xmldsig-core2-20120124">XML DSIG 2.0</xref>,
	  and related specifications as
	  <spanx style="verb">alg</spanx> values.
	</t>
	<t>
	  As indicated by the common registry, JWSs and JWEs share a
	  common <spanx style="verb">alg</spanx> value space.
	  The values used by the two specifications MUST be distinct,
	  as the <spanx style="verb">alg</spanx> value can be used
	  to determine whether the object is a JWS or JWE.
	</t>
	<t>
	  Likewise, additional reserved Header Parameter Names MAY be defined
	  via the IANA
	  JSON Web Signature and Encryption Header Parameters registry
	  <xref target="JWS" />.
	  As indicated by the common registry, JWSs and JWEs share a
	  common header parameter space; when a parameter is used by
	  both specifications, its usage must be compatible
	  between the specifications.
	</t>
      </section>
    </section>

    <section title="Cryptographic Algorithms for JWE" anchor="EncryptingAlgs">
      <t>
	JWE uses cryptographic algorithms to encrypt the
	Content Encryption Key (CEK) and the Plaintext.
	This section specifies a set of specific algorithms for these purposes.
      </t>

      <section title='"alg" (Algorithm) Header Parameter Values for JWE' anchor="JWEAlgValues">

	<t>
	  The table below is the set of <spanx
	  style="verb">alg</spanx> (algorithm) header parameter values
	  that are defined by this specification for use with JWE.
	  These algorithms are used to encrypt the CEK, producing the
	  JWE Encrypted Key, or to use key agreement to agree upon the CEK.
	</t>

	<texttable>

	  <ttcol align="left">alg Parameter Value</ttcol>
	  <ttcol align="left">Key Management Algorithm</ttcol>
	  <ttcol align="left">Implementation Requirements</ttcol>

	  <c>RSA1_5</c>
	  <c>RSAES-PKCS1-V1_5 <xref target="RFC3447"/></c>
	  <c>REQUIRED</c>

	  <c>RSA-OAEP</c>
	  <c>RSAES using Optimal Asymmetric Encryption Padding (OAEP)
	  <xref target="RFC3447"/>, with the
	  default parameters specified by RFC 3447 in Section A.2.1</c>
	  <c>OPTIONAL</c>

	  <c>A128KW</c>
	  <c>Advanced Encryption Standard (AES) Key Wrap Algorithm
	  <xref target="RFC3394"/>
	  using the default initial value specified in Section 2.2.3.1 and
	  using 128 bit keys </c>
	  <c>RECOMMENDED</c>

	  <c>A256KW</c>
	  <c>AES Key Wrap Algorithm
	  using the default initial value specified in Section 2.2.3.1 and
	  using 256 bit keys</c>
	  <c>RECOMMENDED</c>

	  <c>dir</c>
	  <c>Direct use of a shared symmetric key as the Content Encryption Key (CEK)
	  for the block encryption step
	  (rather than using the symmetric key to wrap the CEK)</c>
	  <c>RECOMMENDED</c>

	  <c>ECDH-ES</c>
	  <c>Elliptic Curve Diffie-Hellman Ephemeral Static
	  <xref target="RFC6090"/> key agreement using the
	  Concat KDF, as defined in Section 5.8.1 of <xref target="NIST.800-56A" />,
	  with the agreed-upon key being used directly as the Content Encryption Key (CEK)
	  (rather than being used to wrap the CEK),
	  as specified in <xref target="ECDHES"/>
	  </c>
	  <c>RECOMMENDED+</c>

	  <c>ECDH-ES+A128KW</c>
	  <c>Elliptic Curve Diffie-Hellman Ephemeral Static key agreement
	  per <spanx style="verb">ECDH-ES</spanx> and <xref target="ECDHES"/>,
	  but where the agreed-upon key is used to wrap the Content Encryption Key (CEK)
	  with the <spanx style="verb">A128KW</spanx> function
	  (rather than being used directly as the CEK)</c>
	  <c>RECOMMENDED</c>

	  <c>ECDH-ES+A256KW</c>
	  <c>Elliptic Curve Diffie-Hellman Ephemeral Static key agreement
	  per <spanx style="verb">ECDH-ES</spanx> and <xref target="ECDHES"/>,
	  but where the agreed-upon key is used to wrap the Content Encryption Key (CEK)
	  with the <spanx style="verb">A256KW</spanx> function
	  (rather than being used directly as the CEK)</c>
	  <c>RECOMMENDED</c>

	</texttable>

	<t>
	  The use of "+" in the Implementation Requirements
	  indicates that the requirement strength is likely
	  to be increased in a future version of the specification. 
	</t>
      </section>

      <section title='"enc" (Encryption Method) Header Parameter Values for JWE' anchor="JWEEncValues">
	<t>
	  The table below is the set of
	  <spanx style="verb">enc</spanx> (encryption method) header parameter values that
	  are defined by this specification for use with JWE.  These algorithms are used
	  to encrypt the Plaintext, which produces the Ciphertext.
	</t>

	<texttable>

	  <ttcol align="left">enc Parameter Value</ttcol>
	  <ttcol align="left">Block Encryption Algorithm</ttcol>
	  <ttcol align="left">Implementation Requirements</ttcol>

	  <c>A128CBC-HS256</c>
	  <c>
	    The AES_128_CBC_HMAC_SHA_256 authenticated encryption algorithm,
	    as defined in <xref target="CBC_HMAC_256"/>.
	    This algorithm uses a 256 bit key.
	  </c>
	  <c>REQUIRED</c>

	  <c>A256CBC-HS512</c>
	  <c>
	    The AES_256_CBC_HMAC_SHA_512 authenticated encryption algorithm,
	    as defined in <xref target="CBC_HMAC_512"/>.
	    This algorithm uses a 512 bit key.
	  </c>
	  <c>REQUIRED</c>

	  <c>A128GCM</c>
	  <c>AES in Galois/Counter Mode (GCM)
	  <xref target="AES"/> <xref target="NIST.800-38D"/>
	  using 128 bit keys</c>
	  <c>RECOMMENDED</c>

	  <c>A256GCM</c>
	  <c>AES GCM
	  using 256 bit keys</c>
	  <c>RECOMMENDED</c>

	</texttable>

	<t>
	  All the names are short because a core goal of JWE is
	  for the representations to be compact.  However, there is no
	  a priori length restriction on <spanx style="verb">alg</spanx> values.
	</t>
	<t>
	  See <xref target="EncAlgXref" /> for a table cross-referencing the
	  encryption <spanx style="verb">alg</spanx> (algorithm) and
	  <spanx style="verb">enc</spanx> (encryption method)
	  values used in this specification
	  with the equivalent identifiers used by other
	  standards and software packages.
	</t>
      </section>

      <section title="Key Encryption with RSAES-PKCS1-V1_5" anchor="KeyEncryptionRSA15">
	<t>
	  This section defines the specifics of encrypting a JWE CEK with
	  RSAES-PKCS1-V1_5 <xref target="RFC3447"/>.
	  The <spanx style="verb">alg</spanx> header parameter value
	  <spanx style="verb">RSA1_5</spanx> is used in this case.
	</t>
	<t>
	  A key of size 2048 bits or larger MUST be used with this algorithm.
	</t>
	<t>
	  An example using this algorithm is shown in
	  Appendix A.2 of <xref target="JWE"/>.
	</t>
      </section>

      <section title="Key Encryption with RSAES OAEP" anchor="KeyEncryptionRSAOAEP">
	<t>
	  This section defines the specifics of encrypting a JWE CEK with
	  RSAES using Optimal Asymmetric Encryption Padding (OAEP)
	  <xref target="RFC3447"/>, with the
	  default parameters specified by RFC 3447 in Section A.2.1.
	  The <spanx style="verb">alg</spanx> header parameter value
	  <spanx style="verb">RSA-OAEP</spanx> is used in this case.
	</t>
	<t>
	  A key of size 2048 bits or larger MUST be used with this algorithm.
	</t>
	<t>
	  An example using this algorithm is shown in
	  Appendix A.1 of <xref target="JWE"/>.
	</t>
      </section>

      <section title="Key Wrapping with AES Key Wrap" anchor="KeyEncryptionAESKW">
	<t>
	  This section defines the specifics of encrypting a JWE CEK with
	  the Advanced Encryption Standard (AES) Key Wrap Algorithm
	  <xref target="RFC3394"/>
	  using the default initial value specified in Section 2.2.3.1
	  using 128 or 256 bit keys.
	  The <spanx style="verb">alg</spanx> header parameter values
	  <spanx style="verb">A128KW</spanx> or <spanx style="verb">A256KW</spanx>
	  are used in this case.
	</t>
	<t>
	  An example using this algorithm is shown in
	  Appendix A.3 of <xref target="JWE"/>.
	</t>
      </section>

      <section title="Direct Encryption with a Shared Symmetric Key" anchor="DirectEncryption">
	<t>
	  This section defines the specifics of directly performing symmetric key
	  encryption without performing a key wrapping step.  In this case,
	  the shared symmetric key is used directly as the Content Encryption Key (CEK)
	  value for the <spanx style="verb">enc</spanx> algorithm.
	  An empty octet sequence is used as the JWE Encrypted Key value.
	  The <spanx style="verb">alg</spanx> header parameter value
	  <spanx style="verb">dir</spanx>
	  is used in this case.
	</t>
      </section>

      <section title="Key Agreement with Elliptic Curve Diffie-Hellman Ephemeral Static (ECDH-ES)" anchor="ECDHES">
	<t>
	  This section defines the specifics of key agreement with
	  Elliptic Curve Diffie-Hellman Ephemeral Static <xref target="RFC6090"/>,
	  and using the
	  Concat KDF, as defined in Section 5.8.1 of <xref target="NIST.800-56A" />.
	  The key agreement result can be used in one of two ways:
	  <list style='numbers'>
	    <t>
	      directly as the Content Encryption Key (CEK) for the
	      <spanx style="verb">enc</spanx> algorithm, in the Direct Key Agreement mode, or
	    </t>
	    <t>
	      as a symmetric key used to wrap the CEK with either the
	      <spanx style="verb">A128KW</spanx> or <spanx style="verb">A256KW</spanx>
	      algorithms, in the Key Agreement with Key Wrapping mode.
	    </t>
	  </list>
	  The <spanx style="verb">alg</spanx> header parameter value
	  <spanx style="verb">ECDH-ES</spanx>
	  is used in the Direct Key Agreement mode
	  and the values 
	  <spanx style="verb">ECDH-ES+A128KW</spanx> and
	  <spanx style="verb">ECDH-ES+A256KW</spanx>
	  are used in the Key Agreement with Key Wrapping mode.
	</t>
	<t>
	  In the Direct Key Agreement case,
	  the output of the Concat KDF MUST be a key of the
	  same length as that used by the
	  <spanx style="verb">enc</spanx> algorithm;
	  in this case, the empty octet sequence is used as the JWE Encrypted Key value.
	  In the Key Agreement with Key Wrapping case,
	  the output of the Concat KDF MUST be a key of the
	  length needed for the specified key wrapping algorithm,
	  either 128 or 256 bits respectively.
	</t>
	<t>
	  A new <spanx style="verb">epk</spanx> (ephemeral public key)
	  value MUST be generated for each key agreement transaction.
	</t>

	<section title='Key Derivation for "ECDH-ES"' anchor="KeyDerivECDHES">
	  <t>
	    The key derivation process derives the agreed upon key from the
	    shared secret Z established through the ECDH algorithm,
	    per Section 6.2.2.2 of <xref target="NIST.800-56A" />.
	  </t>
	  <t>
	    Key derivation is performed using the Concat KDF, as
	    defined in Section 5.8.1 of <xref target="NIST.800-56A" />, where the Digest
	    Method is SHA-256.
	    The Concat KDF parameters are set as follows:
	    <list style='hanging'>
	      <t hangText="Z">
		This is set to the representation of the shared secret Z as an octet sequence.
	      </t>
	      <t hangText="keydatalen">
		This is set to the number of bits in the desired output key.
		For <spanx style="verb">ECDH-ES</spanx>, this is length of the key
		used by the <spanx style="verb">enc</spanx> algorithm.
		For <spanx style="verb">ECDH-ES+A128KW</spanx>, and
		<spanx style="verb">ECDH-ES+A256KW</spanx>, this is
		128 and 256, respectively.
	      </t>
	      <t hangText="AlgorithmID">
		This is set to the concatenation of keydatalen represented as a
		32 bit big endian integer and
		the octets of the UTF-8 representation of the
		<spanx style="verb">alg</spanx> header parameter value.
	      </t>
	      <t hangText="PartyUInfo">
		The PartyUInfo value is of the form Datalen || Data, where
		Data is a variable-length string of zero or more octets,
		and Datalen is a fixed-length, big endian 32 bit counter that
		indicates the length (in octets) of Data, with || being concatenation.
		If an <spanx style="verb">apu</spanx> (agreement PartyUInfo)
		header parameter is present, Data is set to the result of
		base64url decoding the <spanx style="verb">apu</spanx> value
		and Datalen is set to the number of octets in Data.
		Otherwise, Datalen is set to 0 and Data is set to the empty octet sequence.
	      </t>
	      <t hangText="PartyVInfo">
		The PartyVInfo value is of the form Datalen || Data, where
		Data is a variable-length string of zero or more octets,
		and Datalen is a fixed-length, big endian 32 bit counter that
		indicates the length (in octets) of Data, with || being concatenation.
		If an <spanx style="verb">apv</spanx> (agreement PartyVInfo)
		header parameter is present, Data is set to the result of
		base64url decoding the <spanx style="verb">apv</spanx> value
		and Datalen is set to the number of octets in Data.
		Otherwise, Datalen is set to 0 and Data is set to the empty octet sequence.
	      </t>
	      <t hangText="SuppPubInfo">
		This is set to the empty octet sequence.
	      </t>
	      <t hangText="SuppPrivInfo">
		This is set to the empty octet sequence.
	      </t>
	    </list>
	  </t>
	</section>
      </section>

      <section title="AES_CBC_HMAC_SHA2 Algorithms" anchor="AES_CBC_HMAC_SHA2">
	<t>
	  This section defines a family of authenticated encryption algorithms
	  built using a composition of
	  Advanced Encryption Standard (AES) in Cipher Block Chaining (CBC) mode with PKCS #5 padding
	  <xref target="AES"/> <xref target="NIST.800-38A"/> operations and
	  HMAC <xref target="RFC2104"/> <xref target="SHS"/> operations.
	  This algorithm family is called AES_CBC_HMAC_SHA2.
	  It also defines two instances of this family,
	  one using 128 bit CBC keys and HMAC SHA-256
	  and the other using 256 bit CBC keys and HMAC SHA-512.
	  Test cases for these algorithms can be found in
	  <xref target="CBC_HMAC_TestCases"/>.
	</t>
	<t>
	  These algorithms are based upon
	  <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2">Authenticated Encryption with AES-CBC and HMAC-SHA</xref>,
	  performing the same cryptographic computations,
	  but with the Initialization Vector and Authentication Tag values remaining
	  separate, rather than being concatenated with
	  the Ciphertext value in the output representation.
	  This algorithm family is a generalization of the algorithm family in
	  <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2"/>, and can be used to
	  implement those algorithms.
	</t>
	
	<section title="Conventions Used in Defining AES_CBC_HMAC_SHA2">
	  <t>
	    We use the following notational conventions.  
	    <list>
	      <t>
		CBC-PKCS5-ENC(X,P) denotes the AES CBC encryption of&nbsp;P
		using PKCS #5 padding using the cipher with the key&nbsp;X.
	      </t>
	      <t> 
		MAC(Y, M) denotes the application of the Message
		Authentication Code (MAC) to the message&nbsp;M, using the key&nbsp;Y.
	      </t>
	      <t>
		The concatenation of two octet strings A and B
		is denoted as A&nbsp;||&nbsp;B.
	      </t>
	    </list>
	  </t>
	</section>

	<section anchor="generic" title="Generic AES_CBC_HMAC_SHA2 Algorithm">
	  <t>
	    This section defines AES_CBC_HMAC_SHA2 in a manner that is
	    independent of the AES CBC key size or hash function to be used.
	    <xref target="CBC_HMAC_Enc"/> and <xref target="CBC_HMAC_Dec"/> define the
	    generic encryption and decryption algorithms.
	    <xref target="CBC_HMAC_256"/>  and <xref target="CBC_HMAC_512"/>
	    define instances of AES_CBC_HMAC_SHA2 that
	    specify those details.
	  </t>

	  <section anchor="CBC_HMAC_Enc" title="AES_CBC_HMAC_SHA2 Encryption">
	    <t> 
	      The authenticated
	      encryption algorithm takes as input four octet strings: a
	      secret key K, a plaintext P, associated data A, and
	      an initialization vector IV.
	      The authenticated ciphertext value E
	      and the authentication tag value T
	      are provided as outputs.
	      The data in the plaintext are encrypted and
	      authenticated, and the associated data are authenticated,
	      but not encrypted.
	    </t>
	    <t>
	      The encryption process is as follows, or
	      uses an equivalent set of steps:
	      <list style="numbers">
		<t>
		  The secondary keys MAC_KEY and ENC_KEY are generated
		  from the input key K as follows.  Each of these two
		  keys is an octet string.
		  <list style="empty">
		    <t>MAC_KEY consists of the initial MAC_KEY_LEN octets of
		    K, in order.</t>

		    <t>ENC_KEY consists of the final ENC_KEY_LEN octets of
		    K, in order.</t>
		  </list> 
		  Here we denote the number of octets in the MAC_KEY as
		  MAC_KEY_LEN, and the number of octets in ENC_KEY as
		  ENC_KEY_LEN; the values of these parameters are specified
		  by the AEAD algorithms (in <xref target="CBC_HMAC_256"/> and
		  <xref target="CBC_HMAC_512"/>).  The number of octets in the
		  input key K is the sum of MAC_KEY_LEN and ENC_KEY_LEN.
		  When generating the secondary keys from K, MAC_KEY and ENC_KEY
		  MUST NOT overlap.
		  Note that the MAC key comes before the encryption key in the input key K;
		  this is in the opposite order of the algorithm names in
		  the identifier "AES_CBC_HMAC_SHA2".
		</t>

		<t>
		  The Initialization Vector (IV) used is a 128 bit value
		  generated randomly or pseudorandomly
		  for use in the cipher.
		</t>

		<t>
		  The plaintext is CBC encrypted using PKCS #5 padding
		  using ENC_KEY as the key, and the IV.
		  We denote the ciphertext output from this step as E.
		</t>

		<t>
		  The octet string AL is equal to the number
		  of bits in A expressed as a 64-bit unsigned integer in network byte
		  order.
		</t>

		<t>A message authentication tag T is computed by applying
		HMAC <xref target="RFC2104"/> to the following data, in
		order:
		<list style="empty">
		  <t> the associated data A, </t>
		  <t> the initialization vector IV, </t>
		  <t> the ciphertext E computed in the previous step, and </t>
		  <t> the octet string AL defined above. </t>
		</list>
		The string MAC_KEY is used as the MAC key.  We denote
		the output of the MAC computed in this step as M.
		The first T_LEN bits of M are used as T.
		</t>

		<t>
		  The Ciphertext E and the Authentication Tag T
		  are returned as the outputs of the authenticated encryption.
		</t>
	      </list>
	    </t>

	    <t>
	      The encryption process can be illustrated as follows.  Here
	      K, P, A, IV, and E denote the key, plaintext, associated data,
	      initialization vector, and
	      ciphertext, respectively.
	      <list>
		<t>
		  MAC_KEY = initial MAC_KEY_LEN bytes of K,
		</t>
		<t>
		  ENC_KEY = final ENC_KEY_LEN bytes of K,
		</t>
		<t>
		  E = CBC-PKCS5-ENC(ENC_KEY, P), 
		</t>
		<t>
		  M = MAC(MAC_KEY, A || IV || E || AL), 
		</t>
		<t>
		  T = initial T_LEN bytes of M.
		</t>
	      </list>
	    </t>
	    
	  </section>

	  <section anchor="CBC_HMAC_Dec" title="AES_CBC_HMAC_SHA2 Decryption">
	    <t>
	      The authenticated decryption operation has four inputs: K,
	      A, E, and T as defined above.  It has only
	      a single output, either a plaintext value P or a special
	      symbol FAIL that indicates that the inputs are not
	      authentic.  The authenticated decryption algorithm is
	      as follows, or uses an equivalent set of steps:
	      
	      <list style="numbers">

		<t>
		  The secondary keys MAC_KEY and ENC_KEY are generated
		  from the input key K as in Step 1 of <xref target="CBC_HMAC_Enc"/>.
		</t>

		<t>
		  The integrity and authenticity of A and E are checked
		  by computing an HMAC with the inputs as in Step 5 of 
		  <xref target="CBC_HMAC_Enc"/>.  
		  The value T, from the previous step, is compared to the
		  first MAC_KEY length bits of the
		  HMAC output.  If those values are identical, then A and
		  E are considered valid, and processing is
		  continued. Otherwise, all of the data used in the MAC
		  validation are discarded, and the AEAD decryption
		  operation returns an indication that it failed, and the
		  operation halts.
		  (But see Section 10 of <xref target="JWE"/> for
		  security considerations on thwarting timing attacks.)
		</t>

		<t>
		  The value E is decrypted and the PKCS #5 padding is removed.
		  The value IV is used as the initialization vector.
		  The value ENC_KEY is used as the decryption key.
		</t>

		<t> The plaintext value is returned.</t>
	      </list>
	    </t>
	  
	  </section>
	</section>

	<section anchor="CBC_HMAC_256" title="AES_128_CBC_HMAC_SHA_256">
	  <t>This algorithm is a concrete instantiation of the
	  generic AES_CBC_HMAC_SHA2 algorithm above.
	  It uses the HMAC message
	  authentication code <xref target="RFC2104"></xref> with the
	  SHA-256 hash function <xref target="SHS"></xref> to provide
	  message authentication, with the HMAC output
	  truncated to 128 bits, corresponding to the
	  HMAC-SHA-256-128 algorithm defined in <xref target="RFC4868"/>.
	  For encryption, it uses AES
	  in the cipher block chaining (CBC) mode of operation as
	  defined in Section 6.2 of <xref target="NIST.800-38A"></xref>, with
	  PKCS #5 padding.</t>

	  <t>
	    The input key K is 32 octets long. 
	  </t>

	  <t>
	    The AES CBC IV is 16 octets long.  ENC_KEY_LEN is 16
	    octets.
	  </t>

	  <t>
	    The SHA-256 hash algorithm is used in HMAC.  MAC_KEY_LEN is 16
	    octets.  The HMAC-SHA-256 output is truncated to T_LEN=16 octets,
	    by stripping off the final 16 octets.
	  </t>

	</section>

	<section anchor="CBC_HMAC_512" title="AES_256_CBC_HMAC_SHA_512">
	  <t>
	    AES_256_CBC_HMAC_SHA_512 is based on AES_128_CBC_HMAC_SHA_256,
	    but with the following differences:
	    <list>
	      <t>
		A 256 bit AES CBC key is used instead of 128.
	      </t>
	      <t>
		SHA-512 is used in HMAC instead of SHA-256.  
	      </t>
	      <t>
		ENC_KEY_LEN is 32 octets. 
	      </t>
	      <t>
		MAC_KEY_LEN is 32 octets.
	      </t>
	      <t>
		The length of the input key K is 64 octets.
	      </t>
	      <t>
		The HMAC SHA-512 value is truncated to T_LEN=32 octets instead of 16 octets.
	      </t>
	    </list>
	  </t>
	</section>

	<section title="Plaintext Encryption with AES_CBC_HMAC_SHA2"
		 anchor="JWE_CBC_HMAC">
	  <t>
	    The algorithm value <spanx style="verb">A128CBC-HS256</spanx>
	    is used as the <spanx style="verb">alg</spanx> value when using
	    AES_128_CBC_HMAC_SHA_256 with JWE.
	    The algorithm value <spanx style="verb">A256CBC-HS512</spanx> 
	    is used as the <spanx style="verb">alg</spanx> value when using
	    AES_256_CBC_HMAC_SHA_512 with JWE.
	    In both cases, the Additional Authenticated Data value used is
	    the concatenation of
	    the Encoded JWE Header value, a period ('.') character,
	    and the Encoded JWE Encrypted Key.
	    The JWE Initialization Vector value used is the IV value.
	  </t>
	</section>
      </section>

      <section title="Plaintext Encryption with AES GCM" anchor="PlaintextEncryptionGCM">
	<t>
	  This section defines the specifics of encrypting the JWE Plaintext with
	  Advanced Encryption Standard (AES) in Galois/Counter Mode (GCM)
	  <xref target="AES"/> <xref target="NIST.800-38D"/>
	  using 128 or 256 bit keys.
	  The <spanx style="verb">enc</spanx> header parameter values
	  <spanx style="verb">A128GCM</spanx> or <spanx style="verb">A256GCM</spanx>
	  are used in this case.
	</t>
	  <t>
	    The CEK is used as the encryption key.
	  </t>
	<t>
	  Use of an initialization vector of size 96 bits is
	  REQUIRED with this algorithm.
	</t>
	<t>
	  The Additional Authenticated Data parameter is used to
	  secure the header and key values.
	  (The Additional Authenticated Data value used is the octets of the ASCII
	  representation of the concatenation of
	  the Encoded JWE Header, a period ('.') character,
	  and the Encoded JWE Encrypted Key
	  per Section 5 of the JWE specification.)
	  This same Additional Authenticated Data value is used when decrypting as well.
	</t>
	<t>
	  The requested size of the Authentication Tag output MUST be
	  128 bits, regardless of the key size.
	</t>
	<t>
	  The JWE Authentication Tag is set
	  to be the Authentication Tag value produced by the encryption.
	  During decryption, the received JWE Authentication Tag is used as the
	  Authentication Tag value.
	</t>
	<t>
	  An example using this algorithm is shown in
	  Appendix A.1 of <xref target="JWE"/>.
	</t>
	<t>
	  Note:  AES GCM MUST NOT be used when using the JWE JSON Serialization
	  for multiple recipients, since this would result in
	  the same Initialization Vector and Plaintext values being used
	  for multiple GCM encryptions.
	  This is prohibited by the GCM specification because of severe
	  security vulnerabilities that would result, were GCM used in this way.
	</t>
      </section>


      <section title="Additional Encryption Algorithms and Parameters" anchor="MoreEncAlgs">
	<t>
	  Additional algorithms MAY be used to protect JWEs with
	  corresponding <spanx style="verb">alg</spanx> (algorithm) and
	  <spanx style="verb">enc</spanx> (encryption method)
	  header parameter values being
	  defined to refer to them.  New
	  <spanx style="verb">alg</spanx> and
	  <spanx style="verb">enc</spanx>
	  header parameter values SHOULD
	  either be registered in the IANA JSON Web Signature and Encryption Algorithms
	  registry <xref target="JWSJWEAlgsReg" /> or be
	  a value that contains a Collision Resistant Namespace.
	  In particular, it is permissible to use the algorithm identifiers defined in
	  <xref target="W3C.REC-xmlenc-core-20021210">XML Encryption</xref>,
	  <xref target="W3C.CR-xmlenc-core1-20120313">XML Encryption 1.1</xref>,
	  and related specifications as
	  <spanx style="verb">alg</spanx> and
	  <spanx style="verb">enc</spanx> values.
	</t>
	<t>
	  As indicated by the common registry, JWSs and JWEs share a
	  common <spanx style="verb">alg</spanx> value space.
	  The values used by the two specifications MUST be distinct,
	  as the <spanx style="verb">alg</spanx> value can be used
	  to determine whether the object is a JWS or JWE.
	</t>
	<t>
	  Likewise, additional reserved Header Parameter Names MAY be defined
	  via the IANA JSON Web Signature and Encryption Header Parameters registry
	  <xref target="JWS" />.
	  As indicated by the common registry, JWSs and JWEs share a
	  common header parameter space; when a parameter is used by
	  both specifications, its usage must be compatible
	  between the specifications.
	</t>
      </section>
    </section>

    <section title="Cryptographic Algorithms for JWK" anchor="JWKKeyTypes">
      <t>
	A JSON Web Key (JWK) <xref target="JWK" /> is a
	JavaScript Object Notation (JSON) <xref target="RFC4627"/>
	data structure that represents a cryptographic key.  A JSON Web Key Set
	(JWK Set) is a JSON data structure for representing a set of JWKs.
	This section specifies a set of key types to be used
	for those keys and the key type specific
	parameters for representing those keys.
	Parameters are defined for public, private, and symmetric keys.
      </t>

      <section title='"kty" (Key Type) Parameter Values for JWK' anchor="JWKKtyValues">
	<t>
	  The table below is the set of
	  <spanx style="verb">kty</spanx> (key type) parameter
	  values that are defined by this specification for use in JWKs.
	</t>

	<texttable>

	  <ttcol align="left">kty Parameter Value</ttcol>
	  <ttcol align="left">Key Type</ttcol>
	  <ttcol align="left">Implementation Requirements</ttcol>

	  <c>EC</c>
	  <c>Elliptic Curve <xref target="DSS"/> key type</c>
	  <c>RECOMMENDED+</c>

	  <c>RSA</c>
	  <c>RSA <xref target="RFC3447" /> key type</c>
	  <c>REQUIRED</c>

	  <c>oct</c>
	  <c>Octet sequence key type (used to represent symmetric keys)</c>
	  <c>RECOMMENDED+</c>

	</texttable>

	<t>
	  All the names are short because a core goal of JWK is
	  for the representations to be compact.  However, there is no
	  a priori length restriction on <spanx style="verb">kty</spanx> values.
	</t>
	<t>
	  The use of "+" in the Implementation Requirements
	  indicates that the requirement strength is likely
	  to be increased in a future version of the specification. 
	</t>
      </section>

      <section title="JWK Parameters for Elliptic Curve Keys" anchor="JWKEC">
	<t>
	  JWKs can represent Elliptic Curve <xref target="DSS"/> keys.  In
	  this case, the <spanx style="verb">kty</spanx>
	  member value MUST be <spanx style="verb">EC</spanx>.
	</t>

	<section title="JWK Parameters for Elliptic Curve Public Keys" anchor="ECPublic">

	  <t>
	    These members MUST be present for Elliptic Curve public keys:
	  </t>

	  <section title='"crv" (Curve) Parameter' anchor="crvECDef">
	    <t>
	      The <spanx style="verb">crv</spanx> (curve) member identifies
	      the cryptographic curve used with the key.  Curve values
	      from <xref target="DSS"/> used by this specification are:
	      <list style='symbols'>
		<t><spanx style="verb">P-256</spanx></t>
		<t><spanx style="verb">P-384</spanx></t>
		<t><spanx style="verb">P-521</spanx></t>
	      </list>
	      Additional <spanx style="verb">crv</spanx> values MAY be used, provided
	      they are understood by implementations using that Elliptic Curve key.
	      The <spanx style="verb">crv</spanx> value is a case sensitive string.
	    </t>
	  </section>

	  <section title='"x" (X Coordinate) Parameter' anchor="xECDef">
	    <t>
	      The <spanx style="verb">x</spanx> (x coordinate) member contains the
	      x coordinate for the elliptic curve point.  It is
	      represented as the base64url encoding of the
	      coordinate's big endian representation as an octet sequence.
	      The array representation MUST NOT be shortened
	      to omit any leading zero octets contained in the value.
	      For instance, when representing 521 bit integers,
	      the octet sequence to be base64url encoded MUST contain 66 octets,
	      including any leading zero octets.
	    </t>
	  </section>

	  <section title='"y" (Y Coordinate) Parameter' anchor="yECDef">
	    <t>
	      The <spanx style="verb">y</spanx> (y coordinate) member contains the
	      y coordinate for the elliptic curve point.  It is
	      represented as the base64url encoding of the
	      coordinate's big endian representation as an octet sequence.
	      The array representation MUST NOT be shortened
	      to omit any leading zero octets contained in the value.
	      For instance, when representing 521 bit integers,
	      the octet sequence to be base64url encoded MUST contain 66 octets,
	      including any leading zero octets.
	    </t>
	  </section>

	</section>

	<section title="JWK Parameters for Elliptic Curve Private Keys" anchor="ECPrivate">
	  <t>
	    In addition to the members used to represent Elliptic Curve public keys,
	    the following member MUST be present to represent Elliptic Curve private keys:
	  </t>

	  <section title='"d" (ECC Private Key) Parameter' anchor="dECDef">
	    <t>
	      The <spanx style="verb">d</spanx> (ECC private key) member contains
	      the Elliptic Curve private key value.
	      It is represented as the base64url encoding of the
	      value's unsigned big endian representation as an octet sequence.
	      The array representation MUST NOT be shortened
	      to omit any leading zero octets.
	      For instance, when representing 521 bit integers,
	      the octet sequence to be base64url encoded MUST contain 66 octets,
	      including any leading zero octets.
	    </t>
	  </section>

	</section>
      </section>

      <section title="JWK Parameters for RSA Keys" anchor="JWKRSA">
	<t>
	  JWKs can represent RSA <xref target="RFC3447" /> keys.  In
	  this case, the <spanx style="verb">kty</spanx>
	  member value MUST be <spanx style="verb">RSA</spanx>.
	</t>

	<section title="JWK Parameters for RSA Public Keys" anchor="RSAPublic">

	  <t>
	    These members MUST be present for RSA public keys:
	  </t>

	  <section title='"n" (Modulus) Parameter' anchor="nRSADef">
	    <t>
	      The <spanx style="verb">n</spanx> (modulus) member contains
	      the modulus value for the RSA public key.  It is
	      represented as the base64url encoding of the value's
	      unsigned big endian representation as an octet sequence.
	      The array representation MUST NOT be shortened
	      to omit any leading zero octets.
	      For instance, when representing 2048 bit integers,
	      the octet sequence to be base64url encoded MUST contain 256 octets,
	      including any leading zero octets.
	    </t>
	  </section>

	  <section title='"e" (Exponent) Parameter' anchor="eRSADef">
	    <t>
	      The <spanx style="verb">e</spanx> (exponent) member contains
	      the exponent value for the RSA public key.  It is
	      represented as the base64url encoding of the value's
	      unsigned big endian representation as an octet sequence.
	      The array representation MUST utilize the minimum
	      number of octets to represent the value.
	      For instance, when representing the value 65537,
	      the octet sequence to be base64url encoded MUST consist of the
	      three octets [1, 0, 1].
	    </t>
	  </section>

	</section>

	<section title="JWK Parameters for RSA Private Keys" anchor="RSAPrivate">
	  <t>
	    In addition to the members used to represent RSA public keys,
	    the following members are used to represent RSA private keys.
	    All are REQUIRED for RSA private keys except for
	    <spanx style="verb">oth</spanx>, which is sometimes REQUIRED
	    and sometimes MUST NOT be present, as described below.
	  </t>

	  <section title='"d" (Private Exponent) Parameter' anchor="dRSADef">
	    <t>
	      The <spanx style="verb">d</spanx> (private exponent) member contains
	      the private exponent value for the RSA private key.
	      It is represented as the base64url encoding of the
	      value's unsigned big endian representation as an octet sequence.
	      The array representation MUST NOT be shortened
	      to omit any leading zero octets.
	      For instance, when representing 2048 bit integers,
	      the octet sequence to be base64url encoded MUST contain 256 octets,
	      including any leading zero octets.
	    </t>
	  </section>

	  <section title='"p" (First Prime Factor) Parameter' anchor="pRSADef">
	    <t>
	      The <spanx style="verb">p</spanx> (first prime factor) member contains
	      the first prime factor, a positive integer.
	      It is represented as the base64url encoding of the
	      value's unsigned big endian representation as an octet sequence.
	    </t>
	  </section>

	  <section title='"q" (Second Prime Factor) Parameter' anchor="qRSADef">
	    <t>
	      The <spanx style="verb">q</spanx> (second prime factor) member contains
	      the second prime factor, a positive integer.
	      It is represented as the base64url encoding of the
	      value's unsigned big endian representation as an octet sequence.
	    </t>
	  </section>

	  <section title='"dp" (First Factor CRT Exponent) Parameter' anchor="dpRSADef">
	    <t>
	      The <spanx style="verb">dp</spanx> (first factor CRT exponent)
	      member contains the Chinese Remainder Theorem (CRT) exponent
	      of the first factor, a positive integer.
	      It is represented as the base64url encoding of the
	      value's unsigned big endian representation as an octet sequence.
	    </t>
	  </section>

	  <section title='"dq" (Second Factor CRT Exponent) Parameter' anchor="dqRSADef">
	    <t>
	      The <spanx style="verb">dq</spanx> (second factor CRT exponent)
	      member contains the Chinese Remainder Theorem (CRT) exponent
	      of the second factor, a positive integer.
	      It is represented as the base64url encoding of the
	      value's unsigned big endian representation as an octet sequence.
	    </t>
	  </section>

	  <section title='"qi" (First CRT Coefficient) Parameter' anchor="qiRSADef">
	    <t>
	      The <spanx style="verb">dp</spanx> (first CRT coefficient)
	      member contains the Chinese Remainder Theorem (CRT)
	      coefficient of the second factor, a positive integer.
	      It is represented as the base64url encoding of the
	      value's unsigned big endian representation as an octet sequence.
	    </t>
	  </section>

	  <section title='"oth" (Other Primes Info) Parameter' anchor="othRSADef">
	    <t>
	      The <spanx style="verb">oth</spanx> (other primes info)
	      member contains an array of information about any third and subsequent
	      primes, should they exist.
	      When only two primes have been used (the normal case),
	      this parameter MUST be omitted.
	      When three or more primes have been used, the number of array
	      elements MUST be the number of primes used minus two.
	      Each array element MUST be an object with the following members:
	    </t>

	    <section title='"r" (Prime Factor)' anchor="othRSArDef">
	      <t>
		The <spanx style="verb">r</spanx> (prime factor) parameter
		within an <spanx style="verb">oth</spanx> array member
		represents the value of a subsequent prime factor,
		a positive integer.
		It is represented as the base64url encoding of the
		value's unsigned big endian representation as an octet sequence.
	      </t>
	    </section>

	    <section title='"d" (Factor CRT Exponent)' anchor="othRSAdDef">
	      <t>
		The <spanx style="verb">d</spanx> (Factor CRT Exponent) parameter
		within an <spanx style="verb">oth</spanx> array member
		represents the CRT exponent of the corresponding prime factor,
		a positive integer.
		It is represented as the base64url encoding of the
		value's unsigned big endian representation as an octet sequence.
	      </t>
	    </section>

	    <section title='"t" (Factor CRT Coefficient)' anchor="othRSAtDef">
	      <t>
		The <spanx style="verb">t</spanx> (factor CRT coefficient) parameter
		within an <spanx style="verb">oth</spanx> array member
		represents the CRT coefficient of the corresponding prime factor,
		a positive integer.
		It is represented as the base64url encoding of the
		value's unsigned big endian representation as an octet sequence.
	      </t>
	    </section>

	  </section>

	</section>

	<section title="JWK Parameters for Symmetric Keys" anchor="JWKoct">
	  <t>
	    When the JWK <spanx style="verb">kty</spanx>
	    member value is <spanx style="verb">oct</spanx> (octet sequence),
	    the following member is used to represent
	    a symmetric key (or another key whose value is a single octet sequence):
	  </t>

	  <section title='"k" (Key Value) Parameter' anchor="kOctDef">
	    <t>
	      The <spanx style="verb">k</spanx> (key value) member contains
	      the value of the symmetric (or other single-valued) key.
	      It is represented as the base64url encoding of the
	      octet sequence containing the key value.
	    </t>
	  </section>

	</section>
      </section>

      <section title="Additional Key Types and Parameters" anchor="MoreKeyTypes">

	<t>
	  Keys using additional key types can be represented
	  using JWK data structures with corresponding
	  <spanx style="verb">kty</spanx> (key type) parameter
	  values being defined to refer to them.
	  New <spanx style="verb">kty</spanx> parameter values SHOULD
	  either be registered in the
	  IANA JSON Web Key Types registry <xref target="KeyTypesRegistry" /> or be
	  a value that contains a Collision Resistant Namespace.
	</t>
	<t>
	  Likewise, parameters for representing keys for additional
	  key types or additional key properties
	  SHOULD either be registered in the
	  IANA JSON Web Key Parameters registry <xref target="JWK" /> or be
	  a value that contains a Collision Resistant Namespace.
	</t>

      </section>
    </section>

    <section title="IANA Considerations" anchor="IANA">
      <t>
	The following registration procedure is used for all the
	registries established by this specification.
      </t>
      <t>
	Values are registered with a Specification Required
	<xref target="RFC5226"/> after a two-week review period on the [TBD]@ietf.org mailing
	list, on the advice of one or more Designated Experts. However, to allow for the
	allocation of values prior to publication, the Designated Expert(s) may approve
	registration once they are satisfied that such a specification will be published.
      </t>
      <t>
	Registration requests must be sent to the [TBD]@ietf.org mailing list for review and
	comment, with an appropriate subject (e.g., "Request for access token type: example").
	[[ Note to RFC-EDITOR: The name of the mailing list should be determined in consultation
	with the IESG and IANA. Suggested name: jose-reg-review. ]]
      </t>
      <t>
	Within the review period, the Designated Expert(s) will either approve or
	deny the registration request, communicating this decision to the review list and IANA.
	Denials should include an explanation and, if applicable, suggestions as to how to make
	the request successful.
      </t>
      <t>
	IANA must only accept registry updates from the Designated Expert(s) and should direct
	all requests for registration to the review mailing list.
      </t>

      <section title="JSON Web Signature and Encryption Algorithms Registry" anchor="JWSJWEAlgsReg">
	<t>
	  This specification establishes the
	  IANA JSON Web Signature and Encryption Algorithms registry
	  for values of the JWS and JWE
	  <spanx style="verb">alg</spanx> (algorithm) and
	  <spanx style="verb">enc</spanx> (encryption method)
	  header parameters.
	  The registry records the algorithm name,
	  the algorithm usage locations from the set
	  <spanx style="verb">alg</spanx> and
	  <spanx style="verb">enc</spanx>,
	  implementation requirements,
	  and a reference to the specification that defines it.
	  The same algorithm name MAY be registered multiple times,
	  provided that the sets of usage locations are disjoint.
	  The implementation requirements of an algorithm MAY be changed
	  over time by the Designated Experts(s) as the
	  cryptographic landscape evolves, for instance,
	  to change the status of an algorithm to DEPRECATED, or
	  to change the status of an algorithm from OPTIONAL
	  to RECOMMENDED or REQUIRED.
	</t>

        <section title="Template" anchor="AlgsTemplate">
          <t>
            <list style='hanging'>
              <t hangText='Algorithm Name:'>
                <vspace />
                The name requested (e.g., "example").
		This name is case sensitive.  Names that match other registered names
		in a case insensitive manner SHOULD NOT be accepted.
              </t>
              <t hangText='Algorithm Usage Location(s):'>
                <vspace />
                The algorithm usage, which must be one or more of the values
		<spanx style="verb">alg</spanx> or
		<spanx style="verb">enc</spanx>.
              </t>
              <t hangText='Implementation Requirements:'>
                <vspace />
                The algorithm implementation requirements, which must be one the words
		REQUIRED, RECOMMENDED, OPTIONAL, or DEPRECATED.
		Optionally, the word can be followed by a "+" or "-".
		The use of "+" indicates that the requirement strength is likely
		to be increased in a future version of the specification. 
		The use of "-" indicates that the requirement strength is likely
		to be decreased in a future version of the specification.
              </t>	      
              <t hangText='Change Controller:'>
                <vspace />
                For Standards Track RFCs, state "IETF". For others, give the name of the
                responsible party. Other details (e.g., postal address, email address, home page
                URI) may also be included.
              </t>
              <t hangText='Specification Document(s):'>
                <vspace />
                Reference to the document(s) that specify the parameter, preferably including URI(s) that
                can be used to retrieve copies of the document(s). An indication of the relevant
                sections may also be included but is not required.
              </t>
            </list>
          </t>
        </section>

        <section title="Initial Registry Contents" anchor="AlgsContents">
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">HS256</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: REQUIRED
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" />
		of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">HS384</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: OPTIONAL
              </t>
	      <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" />
		of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">HS512</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: OPTIONAL
              </t>
	      <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" />
		of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">RS256</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: RECOMMENDED
              </t>
	      <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">RS384</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: OPTIONAL
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">RS512</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: OPTIONAL
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ES256</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: RECOMMENDED+
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ES384</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: OPTIONAL
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ES512</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: OPTIONAL
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">none</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: REQUIRED
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWSAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">RSA1_5</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: REQUIRED
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">RSA-OAEP</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: OPTIONAL
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A128KW</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: RECOMMENDED
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A256KW</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: RECOMMENDED
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">dir</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: RECOMMENDED
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ECDH-ES</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: RECOMMENDED+
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ECDH-ES+A128KW</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: RECOMMENDED
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">ECDH-ES+A256KW</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">alg</spanx>
              </t>
              <t>
                Implementation Requirements: RECOMMENDED
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWEAlgValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A128CBC-HS256</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">enc</spanx>
              </t>
              <t>
                Implementation Requirements: REQUIRED
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWEEncValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A256CBC-HS512</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">enc</spanx>
              </t>
              <t>
                Implementation Requirements: REQUIRED
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWEEncValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A128GCM</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">enc</spanx>
              </t>
              <t>
                Implementation Requirements: RECOMMENDED
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWEEncValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Algorithm Name: <spanx style="verb">A256GCM</spanx>
              </t>
              <t>
                Algorithm Usage Location(s): <spanx style="verb">enc</spanx>
              </t>
              <t>
                Implementation Requirements: RECOMMENDED
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWEEncValues" /> of [[ this document ]]
              </t>
            </list>
          </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

      <section title="JSON Web Key Types Registry" anchor="KeyTypesRegistry">
	<t>
	  This specification establishes the
	  IANA JSON Web Key Types registry
	  for values of the JWK
	  <spanx style="verb">kty</spanx> (key type) parameter.
	  The registry records the <spanx style="verb">kty</spanx> value
	  and a reference to the specification that defines it.
	  This specification registers the values defined in
	  <xref target="JWKKtyValues" />.
	</t>

        <section title="Registration Template" anchor="KtyTemplate">
          <t>
            <list style='hanging'>
              <t hangText='"kty" Parameter Value:'>
                <vspace />
                The name requested (e.g., "example").
		This name is case sensitive.  Names that match other registered names
		in a case insensitive manner SHOULD NOT be accepted.
              </t>
              <t hangText='Change Controller:'>
                <vspace />
                For Standards Track RFCs, state "IETF". For others, give the name of the
                responsible party. Other details (e.g., postal address, email address, home page
                URI) may also be included.
              </t>
              <t hangText='Implementation Requirements:'>
                <vspace />
                The algorithm implementation requirements, which must be one the words
		REQUIRED, RECOMMENDED, OPTIONAL, or DEPRECATED.
		Optionally, the word can be followed by a "+" or "-".
		The use of "+" indicates that the requirement strength is likely
		to be increased in a future version of the specification. 
		The use of "-" indicates that the requirement strength is likely
		to be decreased in a future version of the specification.
              </t>	      
              <t hangText='Specification Document(s):'>
                <vspace />
                Reference to the document(s) that specify the parameter, preferably including URI(s) that
                can be used to retrieve copies of the document(s). An indication of the relevant
                sections may also be included but is not required.
              </t>
            </list>
          </t>
        </section>

        <section title="Initial Registry Contents" anchor="KtyContents">
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                "kty" Parameter Value: <spanx style="verb">EC</spanx>
              </t>
              <t>
                Implementation Requirements: RECOMMENDED+
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWKKtyValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                "kty" Parameter Value: <spanx style="verb">RSA</spanx>
              </t>
              <t>
                Implementation Requirements: REQUIRED
              </t>
	      <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWKKtyValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                "kty" Parameter Value: <spanx style="verb">oct</spanx>
              </t>
              <t>
                Implementation Requirements: RECOMMENDED+
              </t>
	      <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="JWKKtyValues" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	</section>
	<?rfc subcompact="no"?>
      </section>

      <section title="JSON Web Key Parameters Registration" anchor="KeyRegistration">
	<t>
	  This specification registers the parameter names defined in
	  Sections <xref target="JWKEC" format="counter"/>,
	  <xref target="JWKRSA" format="counter"/>, and
	  <xref target="JWKoct" format="counter"/> in the
	  IANA JSON Web Key Parameters registry <xref target="JWK"/>.
	</t>

        <section title="Registry Contents" anchor="KeyContents">
          <t> <?rfc subcompact="yes"?>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">crv</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="crvECDef" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">x</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="xECDef" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">y</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="yECDef" /> of [[ this document ]]
              </t>
            </list>
	  </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">d</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="dECDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>

	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">n</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="nRSADef" /> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">e</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="eRSADef" /> of [[ this document ]]
              </t>
            </list>
	  </t>


	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">d</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="dRSADef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">p</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="pRSADef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">q</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="qRSADef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">dp</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="dpRSADef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">dq</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="dqRSADef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">qi</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="qiRSADef"/> of [[ this document ]]
              </t>
            </list>
	  </t>
	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">oth</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="othRSADef"/> of [[ this document ]]
              </t>
            </list>
	  </t>

	  <t>
            <list style='symbols'>
              <t>
                Parameter Name: <spanx style="verb">k</spanx>
              </t>
              <t>
                Change Controller: IETF
              </t>
              <t>
                Specification Document(s): <xref target="kOctDef"/> of [[ this document ]]
              </t>
            </list>
	  </t>

	</section>
	<?rfc subcompact="no"?>
      </section>

    </section>

    <section title="Security Considerations" anchor="Security">
      <t>
	All of the security issues faced by any cryptographic application
	must be faced by a JWS/JWE/JWK agent.  Among these issues are protecting
	the user's private and symmetric keys, preventing various attacks, and helping the
	user avoid mistakes such as inadvertently encrypting a message for
	the wrong recipient.  The entire list of security considerations is
	beyond the scope of this document, but some significant considerations are
	listed here.
      </t>
      <t>
	The security considerations in
	<xref target="AES"/>,
	<xref target="DSS"/>,
	<xref target="JWE"/>,
	<xref target="JWK"/>,
	<xref target="JWS"/>,
	<xref target="NIST.800-38A"/>,
	<xref target="NIST.800-38D"/>,
	<xref target="NIST.800-56A"/>,
	<xref target="RFC2104"/>,
	<xref target="RFC3394"/>,
	<xref target="RFC3447"/>,
	<xref target="RFC5116"/>,
	<xref target="RFC6090"/>, and
	<xref target="SHS"/> apply to this specification.
      </t>
      <t>
	Eventually the algorithms and/or key sizes currently described
	in this specification will no longer be considered
	sufficiently secure and will be removed.  Therefore,
	implementers and deployments must be prepared for this
	eventuality.
      </t>
      <t>
	Algorithms of matching strengths should be used together whenever possible.
	For instance, when AES Key Wrap is used with a given key size,
	using the same key size is recommended when AES GCM is also used.
      </t>
      <t>
	While Section 8 of RFC 3447 <xref target="RFC3447"/>
	explicitly calls for people not to adopt RSASSA-PKCS1 for new
	applications and instead requests that people transition to
	RSASSA-PSS, this specification does include RSASSA-PKCS1, for
	interoperability reasons, because it commonly implemented.
      </t>
      <t>
	Keys used with RSAES-PKCS1-v1_5 must follow the constraints in
	Section 7.2 of RFC 3447 <xref target="RFC3447"/>.  In particular, keys with
	a low public key exponent value must not be used.
      </t>
      <t>
	Plaintext JWSs (JWSs that use the <spanx style="verb">alg</spanx>
	value <spanx style="verb">none</spanx>) provide no integrity protection.
	Thus, they must only be used in contexts where the payload is secured by
	means other than a digital signature or MAC value, or need not be secured.
      </t>
      <t>
	Receiving agents that validate signatures and sending agents that
	encrypt messages need to be cautious of cryptographic processing
	usage when validating signatures and encrypting messages using keys
	larger than those mandated in this specification.  An attacker could
	send certificates with keys that would result in excessive
	cryptographic processing, for example, keys larger than those
	mandated in this specification, which could swamp the processing
	element.  Agents that use such keys without first validating the
	certificate to a trust anchor are advised to have some sort of
	cryptographic resource management system to prevent such attacks.
      </t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2104.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3394.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3629.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4868.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5116.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5226.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6090.xml' ?>

      <reference anchor="SHS">
        <front>
          <title>Secure Hash Standard (SHS)</title>

          <author>
            <organization>National Institute of Standards and
            Technology</organization>
          </author>

          <date month="October" year="2008" />
        </front>
        <seriesInfo name="FIPS" value="PUB 180-3" />
        <format target="http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf" type="PDF" />
      </reference>

      <reference anchor="DSS">
        <front>
          <title>Digital Signature Standard (DSS)</title>

          <author>
            <organization>National Institute of Standards and
            Technology</organization>
          </author>

          <date month="June" year="2009" />
        </front>
        <seriesInfo name="FIPS" value="PUB 186-3" />
        <format target="http://csrc.nist.gov/publications/fips/fips186-3/fips_186-3.pdf" type="PDF" />
      </reference>

      <reference anchor="AES">
        <front>
          <title>Advanced Encryption Standard (AES)</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)
            </organization>
          </author>
          <date month="November" year="2001" />
        </front>
        <seriesInfo name="FIPS" value="PUB 197" />
	<format target="http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf" type="PDF" />
      </reference>

      <reference anchor="NIST.800-38A">
        <front>
          <title>Recommendation for Block Cipher Modes of Operation</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)
            </organization>
          </author>
          <date month="December" year="2001" />
        </front>
        <seriesInfo name="NIST" value="PUB 800-38A" />
	<format target="http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf" type="PDF" />
      </reference>

      <reference anchor="NIST.800-38D">
        <front>
          <title>Recommendation for Block Cipher Modes of Operation:
	  Galois/Counter Mode (GCM) and GMAC</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)
            </organization>
          </author>
          <date month="December" year="2001" />
        </front>
        <seriesInfo name="NIST" value="PUB 800-38D" />
	<format target="http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf" type="PDF" />
      </reference>

      <reference anchor="NIST.800-56A">
        <front>
          <title>Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography (Revised)</title>
          <author>
            <organization>National Institute of Standards and Technology (NIST)
            </organization>
          </author>
          <date month="March" year="2007" />
        </front>
        <seriesInfo name="NIST" value="PUB 800-56A" />
	<format target="http://csrc.nist.gov/publications/nistpubs/800-56A/SP800-56A_Revision1_Mar08-2007.pdf" type="PDF" />
      </reference>

      <reference anchor="JWS">
        <front>
          <title>JSON Web Signature (JWS)</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization abbrev="Ping Identity">Ping Identity</organization>
	    <address>
	      <email>ve7jtb@ve7jtb.com</email>
	    </address>
	  </author>

	  <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
	    <organization abbrev="NRI">Nomura Research Institute</organization>
	    <address>
	      <email>n-sakimura@nri.co.jp</email>
	    </address>
	  </author>

	  <date day="23" month="April" year="2013" />
        </front>
        <seriesInfo value="draft-ietf-jose-json-web-signature" name="Internet-Draft"/>
	<format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-signature" type="HTML" />
      </reference>

      <reference anchor="JWE">
        <front>
          <title>JSON Web Encryption (JWE)</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>

	  <author fullname="Eric Rescorla" initials="E." surname="Rescorla">
	    <organization abbrev="RTFM">RTFM, Inc.</organization>
	    <address>
	      <email>ekr@rtfm.com</email>
	    </address>
	  </author>

	  <author fullname="Joe Hildebrand" initials="J." surname="Hildebrand">
	    <organization abbrev="Cisco">Cisco Systems, Inc.</organization>
	    <address>
	      <email>jhildebr@cisco.com</email>
	    </address>
	  </author>

	  <date day="23" month="April" year="2013" />
        </front>
        <seriesInfo value="draft-ietf-jose-json-web-encryption" name="Internet-Draft"/>
	<format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-encryption" type="HTML" />
      </reference>

      <reference anchor="JWK">
        <front>
	  <title>JSON Web Key (JWK)</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	    <address>
	      <email>mbj@microsoft.com</email>
	      <uri>http://self-issued.info/</uri>
	    </address>
	  </author>

	  <date day="23" month="April" year="2013" />
        </front>
        <seriesInfo value="draft-ietf-jose-json-web-key" name="Internet-Draft"/>
	<format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-key" type="HTML" />
      </reference>

      <reference anchor="USASCII">
	<front>
	  <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange</title>
	  <author>
	    <organization>American National Standards Institute</organization>
	  </author>
	  <date year="1986"/>
	</front>
	<seriesInfo name="ANSI" value="X3.4"/>
      </reference>

    </references>

    <references title="Informative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3275.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4122.xml' ?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml4/reference.W3C.CR-xmldsig-core2-20120124.xml" ?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-xmlenc-core-20021210.xml" ?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml4/reference.W3C.CR-xmlenc-core1-20120313.xml" ?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-rescorla-jsms-00.xml" ?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-mcgrew-aead-aes-cbc-hmac-sha2-01.xml" ?>

      <reference anchor="MagicSignatures">
        <front>
          <title>Magic Signatures</title>

          <author fullname="John Panzer (editor)" initials="J." surname="Panzer (editor)"></author>

          <author fullname="Ben Laurie" initials="B." surname="Laurie"></author>

          <author fullname="Dirk Balfanz" initials="D." surname="Balfanz"></author>

          <date day="7" month="January" year="2011" />
        </front>
        <format target="http://salmon-protocol.googlecode.com/svn/trunk/draft-panzer-magicsig-01.html" type="HTML" />
      </reference>

      <reference anchor="JSS">
        <front>
          <title>JSON Simple Sign</title>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization>independent</organization>
	  </author>

	  <author fullname="Nat Sakimura (editor)" initials="N. " surname="Sakimura (editor)">
	    <organization abbrev="NRI">Nomura Research Institute</organization>
	  </author>

          <date month="September" year="2010" />
        </front>
        <format target="http://jsonenc.info/jss/1.0/" type="HTML" />
      </reference>

      <reference anchor="JSE">
        <front>
          <title>JSON Simple Encryption</title>

	  <author fullname="John Bradley" initials="J." surname="Bradley">
	    <organization>independent</organization>
	  </author>

	  <author fullname="Nat Sakimura (editor)" initials="N. " surname="Sakimura (editor)">
	    <organization abbrev="NRI">Nomura Research Institute</organization>
	  </author>

          <date month="September" year="2010" />
        </front>
        <format target="http://jsonenc.info/enc/1.0/" type="HTML" />
      </reference>

      <reference anchor="CanvasApp">
        <front>
          <title>Canvas Applications</title>

          <author fullname="Facebook" surname="Facebook"></author>

          <date year="2010" />
        </front>
        <format target="http://developers.facebook.com/docs/authentication/canvas" type="HTML" />
      </reference>

      <reference anchor="JCA">
        <front>
          <title>Java Cryptography Architecture</title>

	  <author fullname="Oracle" surname="Oracle">
	  </author>

          <date year="2011" />
        </front>
        <format target="http://download.java.net/jdk7/docs/technotes/guides/security/SunProviders.html" type="HTML" />
      </reference>


    </references>

    <section title="Digital Signature/MAC Algorithm Identifier Cross-Reference" anchor="SigAlgXref">
      <t>
	This appendix contains a table cross-referencing the
	digital signature and MAC <spanx style="verb">alg</spanx> (algorithm)
	values used in this specification
	with the equivalent identifiers used by other standards and
	software packages.  See <xref target="RFC3275">XML DSIG</xref>,
	<xref target="W3C.CR-xmldsig-core2-20120124">XML DSIG 2.0</xref>,
	and <xref target="JCA">Java Cryptography Architecture</xref>
	for more information about the names defined by those
	documents.
      </t>
      <texttable>

	<ttcol align="left">Algorithm</ttcol>
	<ttcol align="left">JWS</ttcol>
	<ttcol align="left">XML DSIG</ttcol>
	<ttcol align="left">JCA</ttcol>
	<ttcol align="left">OID</ttcol>

	<c>HMAC using SHA-256 hash algorithm</c>
	<c>HS256</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#hmac-sha256</c>
	<c>HmacSHA256</c>
	<c>1.2.840.113549.2.9</c>

	<c>HMAC using SHA-384 hash algorithm</c>
	<c>HS384</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#hmac-sha384</c>
	<c>HmacSHA384</c>
	<c>1.2.840.113549.2.10</c>

	<c>HMAC using SHA-512 hash algorithm</c>
	<c>HS512</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#hmac-sha512</c>
	<c>HmacSHA512</c>
	<c>1.2.840.113549.2.11</c>

	<c>RSASSA using SHA-256 hash algorithm</c>
	<c>RS256</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#rsa-sha256</c>
	<c>SHA256withRSA</c>
	<c>1.2.840.113549.1.1.11</c>

	<c>RSASSA using SHA-384 hash algorithm</c>
	<c>RS384</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#rsa-sha384</c>
	<c>SHA384withRSA</c>
	<c>1.2.840.113549.1.1.12</c>

	<c>RSASSA using SHA-512 hash algorithm</c>
	<c>RS512</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#rsa-sha512</c>
	<c>SHA512withRSA</c>
	<c>1.2.840.113549.1.1.13</c>

	<c>ECDSA using P-256 curve and SHA-256 hash algorithm</c>
	<c>ES256</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256</c>
	<c>SHA256withECDSA</c>
	<c>1.2.840.10045.4.3.2</c>

	<c>ECDSA using P-384 curve and SHA-384 hash algorithm</c>
	<c>ES384</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384</c>
	<c>SHA384withECDSA</c>
	<c>1.2.840.10045.4.3.3</c>

	<c>ECDSA using P-521 curve and SHA-512 hash algorithm</c>
	<c>ES512</c>
	<c>http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512</c>
	<c>SHA512withECDSA</c>
	<c>1.2.840.10045.4.3.4</c>

      </texttable>
    </section>

    <section title="Encryption Algorithm Identifier Cross-Reference" anchor="EncAlgXref">
      <t>
	This appendix contains a table cross-referencing the <spanx
	style="verb">alg</spanx> (algorithm) and <spanx style="verb">enc</spanx> (encryption method)
	values used in this specification with the equivalent
	identifiers used by other standards and software packages.
	See
	<xref target="W3C.REC-xmlenc-core-20021210">XML Encryption</xref>,
	<xref target="W3C.CR-xmlenc-core1-20120313">XML Encryption 1.1</xref>,
	and <xref
	target="JCA">Java Cryptography Architecture</xref> for more
	information about the names defined by those documents.
      </t>
      <t>
	For the composite algorithms <spanx style="verb">A128CBC-HS256</spanx> and
	<spanx style="verb">A256CBC-HS512</spanx>, the corresponding AES CBC
	algorithm identifiers are listed.
      </t>
      <texttable>

	<ttcol align="left">Algorithm</ttcol>
	<ttcol align="left">JWE</ttcol>
	<ttcol align="left">XML ENC</ttcol>
	<ttcol align="left">JCA</ttcol>

	<c>RSAES-PKCS1-V1_5</c>
	<c>RSA1_5</c>
	<c>http://www.w3.org/2001/04/xmlenc#rsa-1_5</c>
	<c>RSA/ECB/PKCS1Padding</c>
	<!-- RSA/ECB/PKCS1Padding or RSA/None/PKCS1Padding ? -->

	<c>RSAES using Optimal Asymmetric Encryption Padding (OAEP)</c>
	<c>RSA-OAEP</c>
	<c>http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p</c>
	<c>RSA/ECB/OAEPWithSHA-1AndMGF1Padding</c>
	<!-- RSA/ECB/OAEPWithSHA-1AndMGF1Padding or RSA/None/OAEPWithSHA-1AndMGF1Padding ? -->

	<c>Elliptic Curve Diffie-Hellman Ephemeral Static</c>
	<c>ECDH-ES</c>
	<c>http://www.w3.org/2009/xmlenc11#ECDH-ES</c>
	<c></c>

	<c>Advanced Encryption Standard (AES) Key Wrap Algorithm
	using 128 bit keys</c>
	<c>A128KW</c>
	<c>http://www.w3.org/2001/04/xmlenc#kw-aes128</c>
	<c></c>

	<c>AES Key Wrap Algorithm
	using 256 bit keys</c>
	<c>A256KW</c>
	<c>http://www.w3.org/2001/04/xmlenc#kw-aes256</c>
	<c></c>

	<c>AES in Cipher Block Chaining (CBC) mode with PKCS #5 padding
	using 128 bit keys</c>
	<c>A128CBC-HS256</c>
	<c>http://www.w3.org/2001/04/xmlenc#aes128-cbc</c>
	<c>AES/CBC/PKCS5Padding</c>

	<c>AES in CBC mode with PKCS #5 padding
	using 256 bit keys</c>
	<c>A256CBC-HS512</c>
	<c>http://www.w3.org/2001/04/xmlenc#aes256-cbc</c>
	<c>AES/CBC/PKCS5Padding</c>

	<c>AES in Galois/Counter Mode (GCM)
	using 128 bit keys</c>
	<c>A128GCM</c>
	<c>http://www.w3.org/2009/xmlenc11#aes128-gcm</c>
	<c>AES/GCM/NoPadding</c>

	<c>AES GCM
	using 256 bit keys</c>
	<c>A256GCM</c>
	<c>http://www.w3.org/2009/xmlenc11#aes256-gcm</c>
	<c>AES/GCM/NoPadding</c>

      </texttable>
    </section>

    <section title="Test Cases for AES_CBC_HMAC_SHA2 Algorithms"
	     anchor="CBC_HMAC_TestCases">
      <t>
	The following test cases can be used to validate implementations of
	the AES_CBC_HMAC_SHA2 algorithms defined in <xref target="AES_CBC_HMAC_SHA2"/>.
	They are also intended to correspond to test cases that may appear in a
	future version of <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2"/>,
	demonstrating that the cryptographic computations performed are the same.
      </t>
      <t>
	The variable names are those defined in <xref target="AES_CBC_HMAC_SHA2"/>.
	All values are hexadecimal.
      </t>

      <section title="Test Cases for AES_128_CBC_HMAC_SHA_256"
	     anchor="CBC_HMAC_256_TestCases">
	<figure>
	  <artwork><![CDATA[
AES_128_CBC_HMAC_SHA_256

  K =       00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f

  MAC_KEY = 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f

  ENC_KEY = 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f

  P =       41 20 63 69 70 68 65 72 20 73 79 73 74 65 6d 20
            6d 75 73 74 20 6e 6f 74 20 62 65 20 72 65 71 75
            69 72 65 64 20 74 6f 20 62 65 20 73 65 63 72 65
            74 2c 20 61 6e 64 20 69 74 20 6d 75 73 74 20 62
            65 20 61 62 6c 65 20 74 6f 20 66 61 6c 6c 20 69
            6e 74 6f 20 74 68 65 20 68 61 6e 64 73 20 6f 66
            20 74 68 65 20 65 6e 65 6d 79 20 77 69 74 68 6f
            75 74 20 69 6e 63 6f 6e 76 65 6e 69 65 6e 63 65

  IV =      1a f3 8c 2d c2 b9 6f fd d8 66 94 09 23 41 bc 04

  A =       54 68 65 20 73 65 63 6f 6e 64 20 70 72 69 6e 63
            69 70 6c 65 20 6f 66 20 41 75 67 75 73 74 65 20
            4b 65 72 63 6b 68 6f 66 66 73

  AL =      00 00 00 00 00 00 01 50

  E =       c8 0e df a3 2d df 39 d5 ef 00 c0 b4 68 83 42 79
            a2 e4 6a 1b 80 49 f7 92 f7 6b fe 54 b9 03 a9 c9
            a9 4a c9 b4 7a d2 65 5c 5f 10 f9 ae f7 14 27 e2
            fc 6f 9b 3f 39 9a 22 14 89 f1 63 62 c7 03 23 36
            09 d4 5a c6 98 64 e3 32 1c f8 29 35 ac 40 96 c8
            6e 13 33 14 c5 40 19 e8 ca 79 80 df a4 b9 cf 1b
            38 4c 48 6f 3a 54 c5 10 78 15 8e e5 d7 9d e5 9f
            bd 34 d8 48 b3 d6 95 50 a6 76 46 34 44 27 ad e5
            4b 88 51 ff b5 98 f7 f8 00 74 b9 47 3c 82 e2 db

  M =       65 2c 3f a3 6b 0a 7c 5b 32 19 fa b3 a3 0b c1 c4
            e6 e5 45 82 47 65 15 f0 ad 9f 75 a2 b7 1c 73 ef

  T =       65 2c 3f a3 6b 0a 7c 5b 32 19 fa b3 a3 0b c1 c4
]]></artwork>
	</figure>
      </section>

      <section title="Test Cases for AES_256_CBC_HMAC_SHA_512"
	     anchor="CBC_HMAC_512_TestCases">
	<figure>
	  <artwork><![CDATA[
  K =       00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
            20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
            30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f

  MAC_KEY = 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f

  ENC_KEY = 20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
            30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f

  P =       41 20 63 69 70 68 65 72 20 73 79 73 74 65 6d 20
            6d 75 73 74 20 6e 6f 74 20 62 65 20 72 65 71 75
            69 72 65 64 20 74 6f 20 62 65 20 73 65 63 72 65
            74 2c 20 61 6e 64 20 69 74 20 6d 75 73 74 20 62
            65 20 61 62 6c 65 20 74 6f 20 66 61 6c 6c 20 69
            6e 74 6f 20 74 68 65 20 68 61 6e 64 73 20 6f 66
            20 74 68 65 20 65 6e 65 6d 79 20 77 69 74 68 6f
            75 74 20 69 6e 63 6f 6e 76 65 6e 69 65 6e 63 65

  IV =      1a f3 8c 2d c2 b9 6f fd d8 66 94 09 23 41 bc 04

  A =       54 68 65 20 73 65 63 6f 6e 64 20 70 72 69 6e 63
            69 70 6c 65 20 6f 66 20 41 75 67 75 73 74 65 20
            4b 65 72 63 6b 68 6f 66 66 73

  AL =      00 00 00 00 00 00 01 50

  E =       4a ff aa ad b7 8c 31 c5 da 4b 1b 59 0d 10 ff bd
            3d d8 d5 d3 02 42 35 26 91 2d a0 37 ec bc c7 bd
            82 2c 30 1d d6 7c 37 3b cc b5 84 ad 3e 92 79 c2
            e6 d1 2a 13 74 b7 7f 07 75 53 df 82 94 10 44 6b
            36 eb d9 70 66 29 6a e6 42 7e a7 5c 2e 08 46 a1
            1a 09 cc f5 37 0d c8 0b fe cb ad 28 c7 3f 09 b3
            a3 b7 5e 66 2a 25 94 41 0a e4 96 b2 e2 e6 60 9e
            31 e6 e0 2c c8 37 f0 53 d2 1f 37 ff 4f 51 95 0b
            be 26 38 d0 9d d7 a4 93 09 30 80 6d 07 03 b1 f6

  M =       4d d3 b4 c0 88 a7 f4 5c 21 68 39 64 5b 20 12 bf
            2e 62 69 a8 c5 6a 81 6d bc 1b 26 77 61 95 5b c5
            fd 30 a5 65 c6 16 ff b2 f3 64 ba ec e6 8f c4 07
            53 bc fc 02 5d de 36 93 75 4a a1 f5 c3 37 3b 9c

  T =       4d d3 b4 c0 88 a7 f4 5c 21 68 39 64 5b 20 12 bf
            2e 62 69 a8 c5 6a 81 6d bc 1b 26 77 61 95 5b c5
]]></artwork>
	</figure>
      </section>


    </section>

    <section title="Acknowledgements" anchor="Acknowledgements">
      <t>
	Solutions for signing and encrypting JSON content were
	previously explored by <xref target="MagicSignatures">Magic
	Signatures</xref>, <xref target="JSS">JSON Simple Sign</xref>,
	<xref target="CanvasApp">Canvas Applications</xref>, <xref
	target="JSE">JSON Simple Encryption</xref>, and <xref
	target="I-D.rescorla-jsms">JavaScript Message Security
	Format</xref>, all of which influenced this draft.
      </t>
      <t>
	The <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2">Authenticated Encryption with AES-CBC and HMAC-SHA</xref>
	specification, upon which the AES_CBC_HMAC_SHA2 algorithms are based,
	was written by David A. McGrew and Kenny Paterson.
	The test cases for AES_CBC_HMAC_SHA2 are based upon those
	for <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2"/> by John Foley.
      </t>
      <t>
        This specification is the work of the JOSE Working Group,
	which includes dozens of active and dedicated participants.
	In particular, the following individuals contributed ideas,
        feedback, and wording that influenced this specification:
      </t>
      <t>
	Dirk Balfanz,
	Richard Barnes,
	John Bradley,
	Brian Campbell,
	Breno de Medeiros,
	Yaron Y. Goland,
	Dick Hardt,
	Jeff Hodges,
	Edmund Jay,
	James Manger,
	Tony Nadalin,
	Axel Nennker,
	John Panzer,
	Emmanuel Raviart,
	Nat Sakimura,
	Jim Schaad,
	Hannes Tschofenig,
	and Sean Turner.
      </t>
      <t>
	Jim Schaad and Karen O'Donoghue chaired the JOSE working group and
	Sean Turner and Stephen Farrell served as Security area directors
	during the creation of this specification.
      </t>
    </section>

    <section title="Document History" anchor="History">
      <t>
	[[ to be removed by the RFC editor before publication as an RFC ]]
      </t>

      <t>
	-09
	<list style='symbols'>
	  <t>
	    Expanded the scope of the JWK parameters to include
	    private and symmetric key representations, as specified by
	    draft-jones-jose-json-private-and-symmetric-key-00.
	  </t>
	  <t>
	    Changed term "JWS Secured Input" to "JWS Signing Input".
	  </t>
	  <t>
	    Changed from using the term "byte" to "octet" when referring to 8 bit values.
	  </t>
	  <t>
	    Specified that AES Key Wrap uses the default initial value
	    specified in Section 2.2.3.1 of RFC 3394.
	    This addressed issue #19.
	  </t>
	  <t>
	    Added Key Management Mode definitions to terminology section
	    and used the defined terms to provide clearer key management instructions.
	    This addressed issue #5.
	  </t>
	  <t>
	    Replaced <spanx style="verb">A128CBC+HS256</spanx>
	    and <spanx style="verb">A256CBC+HS512</spanx>
	    with <spanx style="verb">A128CBC-HS256</spanx>
	    and <spanx style="verb">A256CBC-HS512</spanx>.
	    The new algorithms perform the same cryptographic computations as
	    <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2"/>,
	    but with the Initialization Vector and Authentication Tag values remaining
	    separate from the Ciphertext value in the output representation.
	    Also deleted the header parameters
	    <spanx style="verb">epu</spanx> (encryption PartyUInfo) and
	    <spanx style="verb">epv</spanx> (encryption PartyVInfo),
	    since they are no longer used.
	  </t>
	  <t>
	    Changed from using the term "Integrity Value" to "Authentication Tag".
	  </t>
	</list>
      </t>
      <t>
	-08
	<list style='symbols'>
	  <t>
	    Changed the name of the JWK key type parameter from
	    <spanx style="verb">alg</spanx> to <spanx style="verb">kty</spanx>.
	  </t>
	  <t>
	    Replaced uses of the term "AEAD" with "Authenticated Encryption", since
	    the term AEAD in the RFC 5116 sense implied the use of a particular
	    data representation, rather than just referring to the class of
	    algorithms that perform authenticated encryption with associated data.
	  </t>
	  <t>
	    Applied editorial improvements suggested by
	    Jeff Hodges.
	    Many of these simplified the terminology used.
	  </t>
	  <t>
	    Added seriesInfo information to Internet Draft references.
	  </t>
	</list>
      </t>
      <t>
	-07
	<list style='symbols'>
	  <t>
	    Added a data length prefix to PartyUInfo and PartyVInfo values.
	  </t>
	  <t>
	    Changed the name of the JWK RSA modulus parameter from 
	    <spanx style="verb">mod</spanx> to <spanx style="verb">n</spanx>
	    and the name of the JWK RSA exponent parameter from
	    <spanx style="verb">xpo</spanx> to <spanx style="verb">e</spanx>,
	    so that the identifiers are the same as those used in RFC 3447.
	  </t>
	  <t>
	    Made several local editorial changes to clean up loose ends
	    left over from to the decision to only support
	    block encryption methods providing integrity.
	  </t>
	</list>
      </t>
      <t>
	-06
	<list style='symbols'>
	  <t>
	    Removed the <spanx style="verb">int</spanx> and
	    <spanx style="verb">kdf</spanx> parameters and defined the new composite
	    Authenticated Encryption algorithms <spanx style="verb">A128CBC+HS256</spanx> and
	    <spanx style="verb">A256CBC+HS512</spanx> to replace the former
	    uses of AES CBC, which required the use of separate integrity
	    and key derivation functions.
	  </t>
	  <t>
	    Included additional values in the Concat KDF calculation -- the
	    desired output size and the algorithm value,
	    and optionally PartyUInfo and PartyVInfo values.
	    Added the optional header parameters
	    <spanx style="verb">apu</spanx> (agreement PartyUInfo),
	    <spanx style="verb">apv</spanx> (agreement PartyVInfo),
	    <spanx style="verb">epu</spanx> (encryption PartyUInfo), and
	    <spanx style="verb">epv</spanx> (encryption PartyVInfo).
	  </t>
	  <t>
	    Changed the name of the JWK RSA exponent parameter from 
	    <spanx style="verb">exp</spanx> to <spanx style="verb">xpo</spanx>
	    so as to allow the potential use of the name <spanx style="verb">exp</spanx>
	    for a future extension that might define an expiration parameter for keys.
	    (The <spanx style="verb">exp</spanx> name is already used for this
	    purpose in the JWT specification.)
	  </t>
	  <t>
	    Applied changes made by the RFC Editor to RFC 6749's registry language
	    to this specification.
	  </t>
	</list>
      </t>
      <t>
	-05
	<list style='symbols'>
	  <t>
	    Support both direct encryption using a
	    shared or agreed upon symmetric key, and the use of a
	    shared or agreed upon symmetric key to key wrap the CMK.
	    Specifically, added the <spanx style="verb">alg</spanx> values
	    <spanx style="verb">dir</spanx>,
	    <spanx style="verb">ECDH-ES+A128KW</spanx>, and
	    <spanx style="verb">ECDH-ES+A256KW</spanx>
	    to finish filling in this set of capabilities.
	  </t>
	  <t>
	    Updated open issues.
	  </t>
	</list>
      </t>
      <t>
	-04
	<list style='symbols'>
	  <t>
	    Added text requiring that any leading zero bytes be retained in
	    base64url encoded key value representations for fixed-length values.
	  </t>
	  <t>
	    Added this language to Registration Templates:
	    "This name is case sensitive.  Names that match other registered names
	    in a case insensitive manner SHOULD NOT be accepted."
	  </t>
	  <t>
	    Described additional open issues.
	  </t>
	  <t>
	    Applied editorial suggestions.
	  </t>
	</list>
      </t>
      <t>
        -03
        <list style='symbols'>
	  <t>
	    Always use a 128 bit "authentication tag" size for
	    AES GCM, regardless of the key size.
	  </t>
	  <t>
	    Specified that use of a 128 bit IV is REQUIRED with AES CBC.
	    It was previously RECOMMENDED.
	  </t>
	  <t>
	    Removed key size language for ECDSA algorithms, since the
	    key size is implied by the algorithm being used.
	  </t>
	  <t>
	    Stated that the <spanx style="verb">int</spanx> key size
	    must be the same as the hash output size (and not larger,
	    as was previously allowed) so that its size is defined for
	    key generation purposes.
	  </t>
	  <t>
	    Added the <spanx style="verb">kdf</spanx> (key derivation function) header parameter
	    to provide crypto agility for key derivation.
	    The default KDF remains the Concat KDF with the SHA-256 digest function.
	  </t>
	  <t>
	    Clarified that the <spanx style="verb">mod</spanx> and
	    <spanx style="verb">exp</spanx> values are unsigned.
	  </t>
	  <t>
	    Added Implementation Requirements columns to algorithm tables
	    and Implementation Requirements entries to algorithm registries.
	  </t>
	  <t>
	    Changed AES Key Wrap to RECOMMENDED.
	  </t>
	  <t>
	    Moved registries
	    JSON Web Signature and Encryption Header Parameters and
	    JSON Web Signature and Encryption Type Values
	    to the JWS specification.
	  </t>
	  <t>
	    Moved JSON Web Key Parameters registry to the JWK specification.
	  </t>
          <t>
	    Changed registration requirements from RFC Required to
	    Specification Required with Expert Review.
	  </t>
	  <t>
	    Added Registration Template sections for defined registries.
	  </t>
	  <t>
	    Added Registry Contents sections to populate registry values.
	  </t>
	  <t>
	    No longer say "the UTF-8 representation of the JWS Secured Input
	    (which is the same as the ASCII representation)".  Just call it
	    "the ASCII representation of the JWS Secured Input".
	  </t>
	  <t>
	    Added "Collision Resistant Namespace" to the terminology section.
	  </t>
	  <t>
	    Numerous editorial improvements.
	  </t>
	</list>
      </t>
      <t>
        -02
        <list style='symbols'>
	  <t>
	    For AES GCM,
	    use the "additional authenticated data" parameter
	    to provide integrity for the header, encrypted key, and
	    ciphertext and use the resulting "authentication tag"
	    value as the JWE Authentication Tag.
	  </t>
	  <t>
	    Defined minimum required key sizes for algorithms
	    without specified key sizes.
	  </t>
	  <t>
	    Defined KDF output key sizes.
	  </t>
	  <t>
	    Specified the use of PKCS #5 padding with AES CBC.
	  </t>
	  <t>
	    Generalized text to allow key agreement to be employed
	    as an alternative to key wrapping or key encryption.
	  </t>
	  <t>
	    Clarified that ECDH-ES is a key agreement algorithm.
	  </t>
	  <t>
	    Required implementation of AES-128-KW and AES-256-KW.
	  </t>
	  <t>
	    Removed the use of <spanx style="verb">A128GCM</spanx> and
	    <spanx style="verb">A256GCM</spanx> for key wrapping.
	  </t>
          <t>
	    Removed <spanx style="verb">A512KW</spanx> since it turns
	    out that it's not a standard algorithm.
          </t>
	  <t>
	    Clarified the relationship between
	    <spanx style="verb">typ</spanx> header parameter values
	    and MIME types.
	  </t>
	  <t>
	    Generalized language to refer to Message Authentication Codes (MACs)
	    rather than Hash-based Message Authentication Codes (HMACs)
	    unless in a context specific to HMAC algorithms.
	  </t>
	  <t>
	    Established registries:
	    JSON Web Signature and Encryption Header Parameters,
	    JSON Web Signature and Encryption Algorithms,
	    JSON Web Signature and Encryption "typ" Values,
	    JSON Web Key Parameters, and
	    JSON Web Key Algorithm Families.
	  </t>
	  <t>
	    Moved algorithm-specific definitions from JWK to JWA.
	  </t>
          <t>
            Reformatted to give each member definition its own section heading.
          </t>
        </list>
      </t>
      <t>
        -01
        <list style='symbols'>
          <t>
           Moved definition of "alg":"none" for JWSs here from the JWT
           specification since this functionality is likely to be
           useful in more contexts that just for JWTs.
          </t>
	  <t>
	    Added Advanced Encryption Standard (AES) Key Wrap Algorithm
	    using 512 bit keys (<spanx style="verb">A512KW</spanx>).
	  </t>

	  <t>
	    Added text "Alternatively, the Encoded JWS Signature MAY be base64url
	    decoded to produce the JWS Signature and this value can
	    be compared with the computed HMAC value, as this
	    comparison produces the same result as comparing the
	    encoded values".
	  </t>
          <t>
	    Corrected the Magic Signatures reference.
          </t>
	  <t>
	    Made other editorial improvements suggested by JOSE
	    working group participants.
	  </t>
        </list>
      </t>
      <t>
        -00
        <list style='symbols'>
          <t>
            Created the initial IETF draft based upon
            draft-jones-json-web-signature-04 and
            draft-jones-json-web-encryption-02 with no normative changes.
          </t>
	  <t>
	    Changed terminology to no longer call both digital
	    signatures and HMACs "signatures".
	  </t>
        </list>
      </t>
    </section>     

  </back>
</rfc>
