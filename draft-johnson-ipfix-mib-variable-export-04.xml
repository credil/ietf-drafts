<?xml version="1.0" encoding="US-ASCII"?>

<!-- $Id$ -->

<!--
One method to get references from the online citation libraries.
There has to be one entity for each item to be referenced.
An alternate method (rfc include) is described in the references.
-->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2578 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2578.xml">
<!ENTITY RFC2863 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2863.xml">
<!ENTITY RFC5101 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5101.xml">
<!ENTITY RFC5102 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5102.xml">
<!--
<!ENTITY RFC2981 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2981.xml">
<!ENTITY RFC2982 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2982.xml">
-->
<!ENTITY RFC3444 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3444.xml">
<!--
<!ENTITY RFC5470 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5470.xml">
-->
<!ENTITY RFC5476 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5476.xml">
<!ENTITY RFC4022 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4022.xml">
<!ENTITY RFC4293 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4293.xml">
<!ENTITY RFC6313 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6313.xml">

]>

<!-- used by XSLT processors -->
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<!--
For a complete list and description of processing instructions (PIs), please see http://xml.resource.org/authoring/README.html.
-->

<!--
Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.  (Here they are set differently than their defaults in xml2rfc v1.32)
-->

<?rfc strict="yes" ?>  <!-- give errors regarding ID-nits and DTD validation -->

<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>    <!-- generate a ToC -->
<?rfc tocdepth="3"?> <!-- the number of levels of subsections in ToC. default: 3 -->

<!-- control references -->
<?rfc symrefs="yes"?>   <!-- use symbolic references tags, i.e, [RFC2119] -->
<?rfc sortrefs="yes" ?> <!-- sort the reference entries alphabetically -->

<!--
Control vertical white space (using these PIs as follows is recommended by the RFC Editor)
-->
<?rfc compact="yes" ?>    <!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>  <!-- keep one blank line between list items -->


<!--
category values: std, bcp, info, exp, and historic
ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
           or pre5378Trust200902
you can add the attributes updates="NNNN" and obsoletes="NNNN"
they will automatically be output with "(if approved)"
-->
<rfc category="std"
     docName="draft-johnson-ipfix-mib-variable-export-04"
     ipr="trust200902">

<!--
***************** AUTHOR NOTES ******************

XML RENDERING NOTES:
-        There is a bug in xml2rfc where the bit numbers at the top of the artwork need to be oddly aligned to render properly.

-->


<!-- ***** FRONT MATTER ***** -->
<front>
  <!-- The abbreviated title is used in the page header - it is only
       necessary if the full title is longer than 39 characters -->
  <title abbrev="Exporting MIB Variables with IPFIX">
    Exporting MIB Variables using the IPFIX Protocol
  </title>

  <!-- add 'role="editor"' below for the editors if appropriate -->

  <author fullname="Benoit Claise" initials="B." surname="Claise">
    <organization>Cisco Systems, Inc.</organization>
    <address>
      <postal>
	<street>De Kleetlaan 6a b1</street>
	<city>Diegem</city>
	<region></region>
	<code>1813</code>
	<country>Belgium</country>
      </postal>
      <phone>+32 2 704 5622</phone>
      <email>bclaise@cisco.com</email>
      <!-- uri and facsimile elements may also be added -->
    </address>
  </author>

  <author fullname="Paul Aitken" initials="P." surname="Aitken">
    <organization>Cisco Systems, Inc.</organization>
    <address>
      <postal>
	<street>96 Commercial Quay</street>
        <street>Commercial Street</street>
	<city>Edinburgh</city>
	<region></region>
	<code>EH6 6LX</code>
	<country>UK</country>
      </postal>
      <phone>+44 131 561 3616</phone>
      <email>paitken@cisco.com</email>
      <!-- uri and facsimile elements may also be added -->
    </address>
  </author>

  <author fullname="Srikar" initials="S." surname="B S">
    <organization>Cisco Systems, Inc.</organization>
    <address>
        <postal>
	  <street>Mail Stop BGL13/3/, SEZ Unit, Cessna Business Park, Kadubeesanahalli</street>
          <street>Village Varthur Hobli, Sarjapur Marathalli Outer Ring Road</street>
	  <city>Bangalore</city>
	  <region></region>
	  <code>KARNATAKA 560 103</code>
	  <country>IN</country>
        </postal>
        <phone>+91 80 4426 3264</phone>
        <email>srikar@cisco.com</email>
        <!-- uri and facsimile elements may also be added -->
    </address>
  </author>

  <author fullname="Juergen Schoenwaelder" initials="J." surname="Schoenwaelder">
    <organization>Jacobs University Bremen</organization>
    <address>
      <postal>
	<street>Campus Ring 1</street>
	<city>Bremen</city>
	<region></region>
	<code>28725</code>
	<country>Germany</country>
      </postal>
      <phone>+49 421 200-3587</phone>
      <email>j.schoenwaelder@jacobs-university.de</email>
      <!-- uri and facsimile elements may also be added -->
    </address>
  </author>


  <!--
If the month and year are both specified and are the current ones, xml2rfc will fill in the current day for you. If only the current year is specified, xml2rfc will fill in the current day and month for you. If the year is not the current one, it is necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the purpose of calculating the expiry date).  With drafts it is normally sufficient to specify just the year.
-->
  <date year="2012" />


  <!-- Meta-data Declarations -->
  <area>General</area>
  <workgroup>IPFIX Working Group</workgroup>

 <!-- Keywords will be incorporated into HTML output
      files in a meta tag but they have no effect on text or nroff
      output. If you submit your draft to the RFC Editor, the
      keywords will be used for the search engine. -->
  <keyword>IPFIX</keyword>
  <keyword>MIB</keyword>
  <keyword>SNMP</keyword>

  <abstract>
    <t>
      This document specifies a way to complement IPFIX Flow Records
      with Management Base (MIB) objects, avoiding the need to define
      new IPFIX Information Elements for existing Management
      Information Base objects that are already fully specified.
    </t>
    <t>
      This method requires an extension to the current IPFIX protocol.
      New Template Set and Options Template Sets are specified to
      allow the export of Simple Network Management Protocol (SNMP)
      MIB Objects along with IPFIX Information Elements.
    </t>
  </abstract>
</front>

<middle>

  <section anchor="sectionOpenIssues" title="Open Issues / To do list">
    <t>
      <list style="symbols">

        <t>
          Skipping the length. Is a new Set ID the right solution?	
        </t>
<!--
As a non-author, I would look for a generic mechanism for each set, rather than a new set for each new IE format.
-->
        <t>
          "timestamps, exporters, and other animals" -> see the mailing list.
        </t>
<!--
The issue is to provide a timestamp indicating when the OID was sampled.

1. Could this be prior to the IPFIX exporter requesting the value? (ie the data was already stale.) If so, this is a harder problem to solve since the timestamp must come from the SNMP infra which provides the OID (ie, in the form "value X as at time T").

Else, if it's reasonable for the exporter to indicate the time at which the OID was retrieved from the SNMP infra - so, not taking into account how fresh or how stale the data may be - then the existing IPFIX observationTime* elements can readily be used.

2. Is a single timestamp sufficient for all OIDs, or are individual timestamps required per OID? In the latter case, how to express the timestamp / OID relationship? Perhaps IPFIX structured data.

3. If there are other timestamps in the flow record - eg, flowStart* / flowEnd* - then was the OID observed at the start or end time, or another time?

Considering 2+3, I would say something like, "if timestamps are required, an observationTime* element should be paired with the OID using structured data."
-->
        <t>
          Question: index is an IPFIX IE that didn't appear the flow record? Do we preclude this case?
        </t>

        <t>
          The value of the MIB OID acting as an index may not be of fixed length and may have no default length, for example
          the OID can be of type string or type MIB OID.
        </t>

        <t>
          "we can use the IE as an index if there is one and only one similar with that length in the Template Records". To be discussed.
        </t>

        <t>
          use case: no index count and no index OID in the SNMP agent
          -> add this with the solution discussed with the DCM2.0 team.
        </t>

        <t>
          This also allows reduced size encoding for the indices.
        </t>

        <t>
          some TODO in the XML version:
          <list style="symbols">
            <t>
              write section: "Indexed MIB Objects with a mix of MIB OID and IPFIX Information Element"
            </t>
            <t>
              insert example: "Using MIB Objects with IPFIX Structured Data"
            </t>
          </list>
        </t>

        <t>
          Describe how to choose between multiple instances of the required index field (eg, when the index is the egress interface for multicast).
          eg, rather than specifying the index IE by ID, we could specify it by number: the n'th field in the record.
        </t>

        <t>
          IPFIX Structured Data: how should it work? Add example to "sectionStructuredData".
        </t>

        <t>
          How does the example in 5.5 work (ifOutQLen indexed by: ifIndex) since ifIndex is not present in the record?
        </t>

        <t>
          How does the example in 5.8.2 work, since the ifName is indexed by ifIndex which comes after - so the value is not already known.
        </t>

        <t>
          Improve the examples: Add an example with the mix of IPFIX IE and OID in sectionUseIndexedwithaMixofOIDAndIPFIXIE.
        </t>

        <t>
          RFC 5610: explain what needs to be updated.
        </t>

        <t>
          ID to name mappings? -> use this for an example in section 5.
        </t>

        <t>
          What does this mean? : "(Consider the counter synchronization issue, non-key info should be static)".
        </t>

        <t>
          Tidy up the XML.
        </t>

        <t>
          (JS) Do we need to add something about the contextEngineID and contextName?
          Optionally associate context with template via options
          Could be done with common properties or in a flow record
          However, do we limit all MIB variables in a Template Record to a single context?
          3 cases:
          <list hangIndent="2" style="numbers">
            <t>
              if a simple SNMP agent, no contextEngineID and contextName, because it's the default
            </t>
            <t>
              the context information is valid for the entire flow record
            </t>
            <t>
              the context information is specific for each IE within the entire flow record
            </t>
          </list>

          question regarding 3.: only one context for an entire flow or can a flow record export MIB OID from different context?
          (JS): ask the IPFIX mailing list.
          (BC): ask internally in Cisco
          Action: complete the "Identifying the SNMP Context" section
        </t>

        <t>
          (JS) Inacio's figure: send email to the mailing list.
        </t>
      </list>
    </t>
  </section>


  <section anchor="sectionIntroduction" title="Introduction">
    <t>
      There is growing interest in using IPFIX as a push mechanism for
      exporting management information. Using a push protocol such as
      IPFIX instead of a polling protocol like SNMP is especially
      interesting in situations, where large chunks of repetitive data
      need to be exported periodically.
    </t>
    <t>
      While initially targeted at different problems, there is a large
      parallel between the information transported via IPFIX and SNMP.
      Furthermore, certain Management Information Base (MIB) objects
      are highly relevant to flows as they are understood today. For
      example, in the IPFIX information model <xref target="RFC5102"
      />, Information Elements coming from the SNMP world have already
      been specified, e.g., ingressInterface and egressInterface both
      refer to the ifIndex defined in <xref target="RFC2863"/>.
    </t>
    <t>
      Rather than mapping existing MIB objects to IPFIX Information
      Elements on a case by case basis, it would be advantageous to
      enable the export of any existing or future MIB objects as part
      of an IPFIX Flow Record.  This way, the duplication of data
      models <xref target="RFC3444"/>, both as SMI MIB objects and
      IPFIX Information Elements, out of the same information model
      <xref target="RFC3444" /> would be avoided.
    </t>
    <t>
      In this document, new Template Sets for Flow Records and Options
      Records are specified to allow Templates to contain any
      combination of fields defined by traditional IPFIX Information
      Element(s) and/or MIB Object Identifier(s). The MIB Object
      Identifiers can reference either non-indexed or indexed MIB
      object(s). Note that the enterprise-specific MIB Object Identifiers
      are also supported.
    </t>
    <t>
      When an indexed MIB object is exported, a method to
      identify how that MIB object is indexed is specified so that
      the full meaning of the information being exported can be
      conveyed.  The specifications encompasses the different index types
      for the MIB Objects Identifier: indexed by one or multiple MIB
      variable(s), indexed by one or multiple IPFIX Information Element(s), indexed by a
      mix of MIB variable(s) and IPFIX Information Element(s). A set of example use cases
      is used to illustrate how these specifications can be used.
    </t>
    <t>
      Some Exporters may not have the knowledge to convey the full information on 
      how the MIB objects being exported are indexed. They may not know the index
      count and/or the OID's of the objects that are used to index a MIB object.
      In such cases the Exporter can send the the values of the index OID's
      identifying the instance of the object being exported as one string that
      conveys the instance identifier part of an object being exported. The
      Collecting Process may know how a MIB object is indexed by some other means,
      for example, it could compile this information from the MIB Module that
      defines exported MIB object or the Collecting Process could be hardcoded with
      this information for a pre-defined set of MIB objects that it is
      interested in.  An example use case is used to illustrate this mechanism.
    </t>
   </section>

  <section anchor="sectionMotivation" title="Motivation and Architectural Model">
    <t>
      Most Flow Records contain the ingressInterface and/or the
      egressInterface Information Element. These Information Elements
      carry an ifIndex value, a MIB object defined in
      <xref target="RFC2863"/>. In order to retrieve additional
      information about the identified interface, a Collector could
      simply poll relevant objects from the device running the
      Exporter via SNMP, however, that approach has several problems:
      <list style="symbols">
	<t>
	  It requires implementing a mediation function between two
	  data models, i.e., MIB objects and IPFIX Information
	  Elements.
	</t>
	<t>
	  Confirming the validity of simple mappings (e.g., ifIndex to
	  ifName) requires to either check on a regular basis that the
	  Exporter's network management system did not reload, or to
	  impose ifIndex persistence across an Exporter's reload.
	</t>
	<t>
	  Synchronization problems occur since counters carried in
	  Flow Records and counters carried in SNMP messages are
	  retrieved from the Exporter at different points in time and
	  thus can't be correlated. In the best case, assuming very
	  tight integration of an IPFIX Collector with and SNMP
	  polling engine, SNMP data is retrieved shortly after Data
	  Records have been received, which implies the sum of the
        active or inactive timeouts (if not null) plus the time to
        export the Flow Record to the Collector. If, however, the
        SNMP data is retrieved by a generic Network Management Station
        (NMS) polling interface statistics, then the time lag between
	  IPFIX counters and SNMP counters can be significant.
	</t>
      </list>
    </t>
    <t>
      The intended scope of this work is the addition of MIB
      variable(s) to IPFIX Information Elements in Flow Records, in
      order to complement the Flow Records with useful and already
      standardized information. More specifically, the
      case of an existing Template Record, which needed to be augmented
      with some MIB variables whose index was already present in the
      Template Record as an IPFIX Information Element: typically, a 7-tuple Flow Record
      containing the ingressInterface Information Element, augmented by interface counters
      <xref target="RFC2863"/>, which are indexed by the respective
      ingressInterface values in the Flow Records.
    </t>

    <t>
      The intended goal of this work is not a replacement of SNMP
      notifications, even if the specifications in this document could
      potentially allow this. Since IPFIX is a push mechanism,
      initiated from the Exporter with no acknowledgment method, this
      specification does not provide the ability to execute
      configuration changes.
    </t>
    <t>
      The Distributed Management Expression MIB
      <xref target="RFC2982"/>, which is a mechanism to create new MIB
      variables based on the content of existing ones, could also be
      advantageous in this context of this specification.  Indeed, newly
      created MIB object (for example, the link utilization MIB variable),
	created with the Distributed Management Expression MIB
      <xref target="RFC2982"/> could nicely complement Flow Records.
    </t>
    <t>
      Another advantage of exporting MIB objects via IPFIX is that IPFIX
      would benefit from an extended series of types to be exported.  The
      simple and application-wide data types specified in SMIv2
      <xref target="RFC2578"/>, along with a new textual conventions, can be
      exported within IPFIX and then decoded in the Collector.
    </t>
    <figure align="center" anchor="figure_arch"
	    title="Architectural Model">
      <artwork align="center">
  +------+  +-------+  +.........+  +.....+
  | SNMP |  | IPFIX |  : NETCONF :  : CLI :
  +------+  +-------+  +.........+  +.....+
      |         |           |          |
+--------------------------------------------+
| Instrumentation (specified in MIB modules) |
+--------------------------------------------+
      </artwork>
    </figure>
    <t>
      The overall architectural model is depicted in
      <xref target="figure_arch"/>.  The IPFIX Exporter accesses the
      device's instrumentation, which follows the specifications
      contained in MIB modules. Other management interfaces such as
      NETCONF or the device's Command Line Interface (CLI) may provide
      access to the same instrumentation.
    </t>
  </section>

  <section anchor="sectionTerminology" title="Terminology">
    <t>
      IPFIX-specific terminology (Information Element, Template,
      Template Record, Options Template Record, Template Set,
      Collector, Exporter, Flow Record, etc.) used in this document is
      defined in Section 2 of <xref target="RFC5101"/>. As in
      <xref target="RFC5101" />, these IPFIX-specific terms have the
      first letter of a word capitalized.
    </t>
    <t>
      This document prefers the more generic term "Data Record" as
      opposed to "Flow Record" as this specification allows the export
      of MIB objects.
    </t>
    <t>MIB Object Identifier (MIB OID)
      <list hangIndent="5" style="empty">
	<t>
	  An ASCII character sequences of decimal non-negative
	  sub-identifier values.  Each sub-identifier value MUST NOT
	  exceed 2^32-1 (4294967295) and MUST NOT have leading
	  zeros. Sub-identifiers are separated by single dots and
	  without any intermediate whitespace.
	</t>
      </list>
    </t>
    <t>MIB Object Identifier Information Element
      <list hangIndent="5" style="empty">
	<t>
          An IPFIX Information Element ("MIBObjectIdentifierMarker")
          that denotes that a MIB Object Identifier is exported in the
          (Options) Template Record.
	</t>
      </list>
    </t>
    <!-- ADD MORE TERMINOLOGY LIKE THIS
         <t>Term goes here!
           <list hangIndent="5" style="empty">
             <t>Defintion goes here!</t>
           </list>
         </t>
         -->
    <t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
      "MAY", and "OPTIONAL" in this document are to be interpreted as
      described in <xref target="RFC2119" />.
    </t>
  </section> <!-- Terminology -->

 <section anchor="sectionExtendedFormats" title="MIB OID Extended Template Formats">
   <t>
        Extended Template Record Formats are required to export data defined by MIB Object Identifiers.
        New Template Sets are required for these extended Template Record Formats.
   </t>

   <section anchor="sectionExtendedRecordFormat" title="MIB OID Extended Template Record Format">
        <t>
         The format of the MIB Object Identifier Extended Template Record is shown in
         <xref target="figure_ExtendedTemplateRecord" />.  It consists of a Template Record Header
         and one or more Field Specifiers.
        </t>
        <figure align="center" anchor="figure_ExtendedTemplateRecord"
                title="MIB Object Identifier Extended Template Record Format">
         <artwork align="center">
<![CDATA[+---------------------------------------------------+
| Template Record Header                            |
+---------------------------------------------------+
| Field Specifier                                   |
+---------------------------------------------------+
| Field Specifier                                   |
+---------------------------------------------------+
                      ...
+---------------------------------------------------+
| Field Specifier                                   |
+---------------------------------------------------+]]>
         </artwork>
        </figure>
        <t>
         A MIB Object Identifier Extended Template Record MUST contain at least one MIB Object
         Identifier Extended Field Specifier.  It MAY also contain any combination of IANA-assigned
         and/or enterprise-specific Information Element identifiers as specified in
         <xref target="RFC5101" />.
        </t>

        <t>
         The format of the Template Record Header is shown in
         <xref target="figure_TemplateRecordHeader" />.
        </t>

        <figure align="center" anchor="figure_TemplateRecordHeader"
                title="Template Record Header Format">
         <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Template ID (> 255)   |         Field Count           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
         </artwork>
        </figure>
        <t>
         Where:
         <list hangIndent="2" style="empty">
           <t>Template ID
           <list hangIndent="3" style="empty">
             <t>Template ID of this Template Record.  This value is greater than 255.</t>
           </list>
           </t>
           <t>Field Count
           <list hangIndent="3" style="empty">
             <t>Number of all fields in this Template Record.</t>
           </list>
           </t>
         </list>
        </t>
        <t>
         At this level of detail the layout of the Template Record Format, as specified in
         <xref target="RFC5101" />, and the MIB Object Identifier Extended Template Record Format
         are identical.  It is only the structure of the Field Specifiers that is different (see
         <xref target="sectionMibOidFieldSpecifier"/>).
        </t>
   </section> <!-- MIB OID Extended Template Record Format -->

   <section anchor="sectionExtendedOptionsFormat" title="MIB OID Extended Options Template Record Format">

        <t>
         The format of the MIB Object Identifier Extended Options Template Record is shown in
         <xref target="figure_ExtendedOptionsTemplateRecord" />. It consists of an Options Template
         Record Header and one or more Field Specifiers.
        </t>

        <figure align="center" anchor="figure_ExtendedOptionsTemplateRecord"
                title="MIB Object Identifier Options Extended Template Record Format">
         <artwork align="center">
<![CDATA[+---------------------------------------------------+
| Options Template Record Header                    |
+---------------------------------------------------+
| Field Specifier                                   |
+---------------------------------------------------+
| Field Specifier                                   |
+---------------------------------------------------+
                      ...
+---------------------------------------------------+
| Field Specifier                                   |
+---------------------------------------------------+]]>
         </artwork>
        </figure>

        <t>
         A MIB Object Identifier Extended Options Template Record MUST contain at least one MIB
         Object Identifier Extended Field Specifier, which MAY be a scope field.
	 It MAY also contain any combination of IANA-assigned and/or enterprise-specific
	 Information Element identifiers.
        </t>
        <t>
         The format of the Options Template Record Header is shown in
         <xref target="figure_OptionsTemplateRecordHeader" />.
        </t>

        <figure align="center" anchor="figure_OptionsTemplateRecordHeader"
                title="Options Template Record Header Format">
         <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Template ID (> 255)   |         Field Count           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      Scope Field Count        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
         </artwork>
        </figure>

        <t>
         Where:
         <list hangIndent="2" style="empty">
           <t>Template ID
           <list hangIndent="3" style="empty">
             <t>Template ID of this Template Record.  This value is greater than 255.</t>
           </list>
           </t>
           <t>Field Count
           <list hangIndent="3" style="empty">
             <t>Number of all fields in this Template Record, including the Scope Fields.</t>
           </list>
           </t>
           <t>Scope Field Count
           <list hangIndent="3" style="empty">
             <t>Number of scope fields in this Options Template Record.  The Scope
                Fields are normal Fields except that they are interpreted as Scope at
                the Collector.  The Scope Field Count MUST NOT be zero for an Options
                Template Record.</t>
           </list>
           </t>
         </list>
        </t>

        <t>
         As with the Template Record Format, the only difference between the standard Options
         Template Record Format as defined in <xref target="RFC5101" /> and the MIB Object
         Identifier Extended Template Options Record Format is the structure of the Field Specifiers
         (see <xref target="sectionMibOidFieldSpecifier" />).
        </t>

        <t>
	Both indexed and non-indexed MIB Objects may be used as scope fields in an IPFIX Options Template Record.
	Each scope MIB object is included in the IPFIX Scope Field Count.
	When indexed MIB Objects are used, the index information is not included in the Scope Field Count
	since the size of the index information	is already specified in the MIB Object's "index count" field
	(see <xref target="sectionIndexedFormatWithOIDAsIndex" />). Examples are given in <xref target="sectionUsingScope" />.
        </t>

   </section> <!-- MIB OID Extended Options Template Record Format -->

   <section anchor="sectionMibOidFieldSpecifier" title="MIB OID Extended Field Specifier Format">

        <t>
         This section specifies how the Field Specifier format in <xref target="RFC5101" /> is
         extended to allow fields to be defined using a specified MIB Object.  First for a MIB
         Object Identifier that is a non-indexed MIB object, then for an indexed MIB object.
        </t>
        <t>
         The Field Specifier formats are shown in <xref target="figure_standardFieldSpecifier" />
         to <xref target="figure_extendedIndexFieldSpecifierMIB" /> below.
        </t>

        <section anchor="sectionStandardFormat" title="Standard Field Specifier Format">
         <t>
           The Field Specifier format in <xref target="figure_standardFieldSpecifier" />, along with
           the associated definitions, has been copied from <xref target="RFC5101" />, for an easier
           comparison with the MIB Object Identifier Extended Field Specifier Format in
           <xref target="figure_extendedFieldSpecifier" /> through
           <xref target="figure_extendedIndexFieldSpecifierMIB" />.
         </t>
         <t>
           When exporting an IANA-assigned and/or enterprise-specific IPFIX Information Element identifier,
           the Field Specifier Format is the same as shown below.
         </t>

         <figure align="center" anchor="figure_standardFieldSpecifier"
                 title="Standard Field Specifier format">
           <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|E|  Information Element ident. |        Field Length           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                      Enterprise Number                        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
           </artwork>
         </figure>

        <t>
         Where:
         <list hangIndent="2" style="empty">
           <t>E
           <list hangIndent="3" style="empty">
             <t>
                Enterprise bit.  This is the first bit of the Field Specifier. If this bit is zero,
                the Information Element Identifier identifies an IETF specified Information Element,
                and the four octet Enterprise Number field MUST NOT be present.  If this bit is one,
                the Information Element identifier identifies an enterprise-specific Information
                Element, and the Enterprise Number filed MUST be present.
             </t>
           </list>
           </t>
           <t>Information Element identifier
           <list hangIndent="3" style="empty">
             <t>A numeric value that represents the type of the Information Element.  Refer to
                <xref target="RFC5102" />.</t>
           </list>
           </t>
           <t>Field Length
           <list hangIndent="3" style="empty">
             <t>
                The length of the corresponding encoded Information Element, in octets.  Refer to
                <xref target="RFC5102" />.  The field length may be smaller than the definition in
                <xref target="RFC5102" /> if reduced size encoding is used.  The value 65535 is
                reserved for variable length Information Element.
             </t>
           </list>
           </t>
           <t>Enterprise Number
           <list hangIndent="3" style="empty">
             <t>
                IANA enterprise number <xref target="PEN" /> of the authority defining the Information
                Element identifier in this Template Record.
             </t>
           </list>
           </t>
         </list>
        </t>
        </section> <!-- Standard Field Specifier Format -->

        <section anchor="sectionExtendedNonIndexedFormat" title="Extended Field Specifier Format for a non-indexed MIB Object">
         <t>
           When a MIB object is to be exported, a special Information Element value is used to show
           that the extended Field Specifier is being used, as shown in
           <xref target="figure_extendedFieldSpecifier" />:
         </t>

         <figure align="center" anchor="figure_extendedFieldSpecifier"
                 title="MIB Object Identifier Extended Field Specifier Format for a non-indexed MIB Object with an OID length &lt; 255">
           <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|E|         MIB OID IE          |         Field Length          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|Index Count = 0|  MIB OID Len  |    MIB Object Identifier ...  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|              ... MIB Object Identifier continued              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
           </artwork>
         </figure>

         <t>
           Where:
           <list hangIndent="2" style="empty">
             <t>E
                <list hangIndent="3" style="empty">
                 <t>
                   Enterprise bit. This is the first bit of the Field Specifier. The
                   value is always set to 0 for the MIB Object Identifier Extended Field
                   Specifier Format, even if the MIB Object Identifier is enterprise-specific,
                   because the MIB OID IE is an IANA standard field and is not enterprise-specific.
                 </t>
                </list>
             </t>
             <t>MIB OID IE
                <list hangIndent="3" style="empty">
                 <t>
                   Special IPFIX Information Element, MIBObjectIdentifierMarker, that denotes that a
                   MIB object is exported in the (Options) Template Record.  When the MIB Object
                   Identifier Information Element (MIB OID IE) is used, the MIB Object Identifier
                   must be specified in the MIB Object Identifier Extended Field Specifier for the
                   Collecting Process to be able to decode the Records.
                 </t>
                </list>
             </t>
             <t>Field Length
                <list hangIndent="3" style="empty">
                 <t>
                   The definition is as <xref target="RFC5101" />.
		   Note that the Field Length can be expressed using reduced size encoding per <xref target="RFC5101" />.
                 </t>
                </list>
             </t>
             <t>Index Count
                <list hangIndent="3" style="empty">
                 <t>
                   The number of indices for a MIB object. Set to zero for a non-indexed MIB object.
                 </t>
                </list>
             </t>
             <t>MIB Object Identifier Length
                <list hangIndent="3" style="empty">
                 <t>
                   The length of the textual representation of the MIB Object Identifier that follows.  This is encoded in the
                   same manner as the variable length encoding in <xref target="RFC5101" />.  If the
                   length of the MIB Object Identifier is greater than or equal to 255 octets, the
                   length is encoded into 3 octets before the MIB Object Name, where the first octet is
                   255 and the length is carried in the second and third octets as shown in
                   <xref target="figure_extendedFieldSpecifierLong" />.
                   If the MIB Object Identifier is longer than 254 characters then the length MUST be extended.
                 </t>
                </list>
             </t>
             <t>MIB Object Identifier
                <list hangIndent="3" style="empty">
                 <t>
		   The textual representation of a MIB object
		   identifier as defined in
		   <xref target="sectionTerminology"/>.
                 </t>
                </list>
             </t>
           </list>
         </t>

         <figure align="center" anchor="figure_extendedFieldSpecifierLong"
                 title="MIB Object Identifier Extended Field Specifier Format for a non-indexed MIB Object with an OID length >= 255">
           <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|E|         MIB OID IE          |        Field Length           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|Index Count = 0|      255      | MIB Object Identifier Length  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                  MIB Object Identifier ...                    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|              ... MIB Object Identifier continued              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
           </artwork>
         </figure>

        </section> <!-- Extended Field Specifier Format for non-indexed MIB Object -->

        <section anchor="sectionIndexedFormatWithOIDAsIndex" title="Extended Field Specifier Format for an Indexed MIB Object, with an MIB OID as Index">

         <t>
           The mechanism for "Extended Field Specifier Format for non-indexed MIB Object" in
           <xref target="sectionExtendedNonIndexedFormat"/> can be used for exporting any MIB objects, including indexed
           MIB objects. However, per the nature of indexing in MIB module, every indexed object
           is specified by a new MIB Object Identifier, which in turn implies that a new
           Template Record must be used for every indexed object. For example, the ifInOctets
           for the interface represented by the interface ifIndex 1 is ifInOctets.1,
           the ifInOctets for the interface represented by the interface ifIndex 2 is
           ifInOctets.2, ...
	   This makes the export mechanism for "Extended Field Specifier Format
           for non-indexed MIB Object" inefficient when used for indexed MIB objects.
	   An example is shown in <xref target="sectionMultipleTemplatesRequired"/>.
         </t>

         <t>
           When an indexed MIB object is exported in IPFIX, either the meaning of the exported value of each
           index may be identified or the complete OID segment identifying the instance can be sent as one piece.
	   When the meaning of each index is identified, this index (or indices) MUST be a MIB Object Identifier (this section)
           or an IPFIX Information Element (see <xref target="sectionIndexedFormatWithIPFIXIEAsIndex" />).
         </t>

         <t>
           A MIB Object Identifier MAY be used as an index and sent as described in
           <xref target="figure_extendedIndexFieldSpecifierMIB" />.  However, if a MIB Object Identifier with
           an index is used as an index then its indices will not be identified.
         </t>

         <figure align="center" anchor="figure_extendedIndexFieldSpecifierMIB"
                 title="MIB Object Identifier Extended Field Specifier Format with a MIB Index using a normal MIB Object Identifier as index">
           <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|E|         MIB OID IE          |         Field Length          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Index Count  |  MIB OID Len  |   MIB Object Identifier ...   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|              ... MIB Object Identifier continued              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|E|         MIB OID IE          |      Index Field length       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|Idx MIB OID Len|        Index MIB Object Identifier ...        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         ... Index MIB Object Identifier continued ...         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                            ...]]>
           </artwork>
         </figure>

         <t>
           Where:
           <list hangIndent="2" style="empty">
             <t>E
                <list hangIndent="3" style="empty">
                 <t>
                   Enterprise bit. This is the first bit of the Field Specifier. The
                   value is always set to 0 for the MIB Object Identifier Extended Field
                   Specifier Format, even if the MIB Object Identifier is enterprise-specific,
                   because the MIB OID IE is an IANA standard field and is not enterprise-specific.

<!-- Old text:
                   Enterprise bit.  In the special case of a MIB Object Identifier export, the
                   Enterprise bit MUST always be 0, even if the exported MIB object is specified in
                   a proprietary MIB, therefore containing the private enterprise number in its OID.
-->
                 </t>
                </list>
             </t>
             <t>MIB OID IE
                <list hangIndent="3" style="empty">
                 <t>
                   Special IPFIX Information Element, MIBObjectIdentifierMarker, that denotes that a
                   MIB object is exported in the (Options) Template Record.  When the MIB Object
                   Identifier Information Element (MIB OID IE) is used, the MIB Object Identifier
                   must be specified in the MIB Object Identifier Extended Field Specifier for the
                   Collecting Process to be able to decode the Records.
                 </t>
                </list>
             </t>
             <t>Field Length
                <list hangIndent="3" style="empty">
                 <t>
                   The definition is as <xref target="RFC5101" />.
		   Note that the Field Length can be expressed using reduced size encoding per <xref target="RFC5101" />.
                 </t>
                </list>
             </t>
             <t>Index Count
                <list hangIndent="3" style="empty">
                 <t>
                   The number of indices for a MIB object, and zero for a non-indexed MIB object.
                 </t>
                </list>
             </t>
             <t>MIB Object Identifier Length
                <list hangIndent="3" style="empty">
                 <t>
                   The length of the textual representation of the MIB Object Identifier that follows.
		   This is encoded in the same manner as the variable length encoding in <xref target="RFC5101" />.
		   If the length of the MIB Object Identifier is greater than or equal to 255 octets,
                   the length is encoded into 3 octets before the MIB Object Name
		   Where the first octet is 255 and the length is carried in the second and third octets
                   (as shown in <xref target="figure_extendedFieldSpecifierLong" />).
                   If the MIB Object Identifier is longer than 254 characters then the length MUST be extended.
                 </t>
                </list>
             </t>
             <t>MIB Object Identifier
                <list hangIndent="3" style="empty">
                 <t>
		   The textual representation of a MIB object
                   identifier as defined in
                   <xref target="sectionTerminology"/>.
                   For any indices identified using Information Elements the Enterprise bit can be 1,
                   indicating that an Enterprise Number will follow the Information Element.
                 </t>
                </list>
             </t>
             <t>Index Field Length
                <list hangIndent="3" style="empty">
                 <t>
                   The length of the encoded index field, in octets, per the Field Length definition in <xref target="RFC5101" />.
		   Note that the Index Field Length can be expressed using reduced size encoding per <xref target="RFC5101" />.
                 </t>
                </list>
             </t>
             <t>Index MIB Object Identifier Length
                <list hangIndent="3" style="empty">
                 <t>
                   The length of the textual representation of the MIB Object Identifier being used as an index.  This is encoded
                   in the same manner as the variable length encoding in <xref target="RFC5101" />.
                   If the length of the MIB Object Identifier is greater than or equal to 255
                   octets, the length is encoded into 3 octets before the MIB Object Name. The
                   first octet is 255 and the length is carried in the second and third octets.
                 </t>
                </list>
             </t>
             <t>Index MIB Object Identifier
                <list hangIndent="3" style="empty">
                 <t>
		   The textual representation of a MIB object
                   identifier as defined in
                   <xref target="sectionTerminology"/>.
                 </t>
                </list>
             </t>
           </list>
         </t>

        </section> <!-- Extended Field Specifier Format for an Indexed MIB Object, with an MIB OID as Index -->

        <section anchor="sectionIndexedFormatWithIPFIXIEAsIndex" title="Extended Field Specifier Format for an Indexed MIB Object, with an IPFIX Information Element as Index">

          <t>
            A possible optimization for the Extended Field Specifier Format for an Indexed MIB Object as specified in
            <xref target="sectionIndexedFormatWithOIDAsIndex" /> is to use an existing IPFIX
            Information Element, which is already present in the Flow definition, as the index for indexed MIB
            Object. On the top not repeating the index, the primary advantage is to make a clear link between
            the Flow Record values and the MIB variable index.
          </t>

          <t>
            For example, if a Flow Record definition contains the source IP address, the destination IP address,
            and the ingressInterface Information Element as Flow Keys, this implies that
            the IP address pairs are seen on that specific interface. If the ifInOctets, indexed by that specific
            interface, is added to the Flow Record, it's clear from the Flow Record, that the ifInOctets is related
            to the same interface. If the ifInOctets was indexed by the ifIndex
            (as specified in <xref target="sectionIndexedFormatWithOIDAsIndex" />), the Collector would have to hardcode
            that the semantic of ifIndex MIB variable is equivalent to the ingressInterface Information Element.
          </t>


          <t>
            When an indexed MIB object is exported in IPFIX, the index (or indices) MAY be an IPFIX Information Element(s).
            Note that this/these IPFIX Information Element(s) MAY be an
 enterprise-specific Information Element.
          </t>

        <t>
	   Indexed MIB Objects, with IPFIX Information Elements as index, are exported as shown in <xref target="figure_extendedIndexFieldSpecifier" />.
         </t>

         <figure align="center" anchor="figure_extendedIndexFieldSpecifier"
                 title="MIB Object Identifier Extended Field Specifier Format with an indexed MIB Object using an IPFIX Information Element as Index">
           <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|E|         MIB OID IE          |         Field Length          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Index Count  |  MIB OID Len  |    MIB Object Identifier ...  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|              ... MIB Object Identifier continued              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|E| Index Information Element 1 |       Index 1 Length          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|E| Index Information Element 2 |       Index 2 Length          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       Index Information Element 2 Enterprise Number           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                            ...
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|E| Index Information Element N |       Index N Length          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       Index Information Element N Enterprise Number           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
           </artwork>
         </figure>

         <t>
           Where:
           <list hangIndent="2" style="empty">
             <t>E
                <list hangIndent="3" style="empty">
                 <t>
                   Enterprise bit. This is the first bit of the Field Specifier. The
                   value is always set to 0 for the MIB Object Identifier Extended Field
                   Specifier Format, even if the MIB Object Identifier is enterprise-specific,
                   because the MIB OID IE is an IANA standard field and is not enterprise-specific.
                 </t>
                </list>
             </t>
             <t>MIB OID IE
                <list hangIndent="3" style="empty">
                 <t>
                   Special IPFIX Information Element, MIBObjectIdentifierMarker, that denotes that a
                   MIB object is exported in the (Options) Template Record.  When the MIB Object
                   Identifier Information Element (MIB OID IE) is used, the MIB Object Identifier
                   must be specified in the MIB Object Identifier Extended Field Specifier for the
                   Collecting Process to be able to decode the Records.
                 </t>
                </list>
             </t>
             <t>Field Length
                <list hangIndent="3" style="empty">
                 <t>
                   The definition is as <xref target="RFC5101" />.
		   The Field Length does not include the length of the index fields, since these are specified separately.
		   Note that the Field Length can be expressed using reduced size encoding per <xref target="RFC5101" />.
                 </t>
                </list>
             </t>
             <t>Index Count
                <list hangIndent="3" style="empty">
                 <t>
                   The number of indices for a MIB object, and zero for a non-indexed MIB object. The
                   index count MUST be consistent with the INDEX definition of the corresponding MIB
                   module.
                 </t>
                </list>
             </t>
             <t>MIB Object Identifier Length
                <list hangIndent="3" style="empty">
                 <t>
                   The length of the textual representation of the MIB Object Identifier that follows.
                   This is encoded in the same manner as the variable length encoding in <xref target="RFC5101" />.
		   If the length of the MIB Object Identifier is greater than or equal to 255 octets,
		   the length is encoded into 3 octets before the MIB Object Name
                   where the first octet is 255 and the length is carried in the second and third octets
                   (as shown in <xref target="figure_extendedFieldSpecifierLong" />).
                   If the MIB Object Identifier is longer than 254 characters then the length MUST be extended.
                 </t>
                </list>
             </t>
             <t>MIB Object Identifier
                <list hangIndent="3" style="empty">
                 <t>
		       The textual representation of a MIB object
                   identifier as defined in
                   <xref target="sectionTerminology"/>.
                 </t>
                </list>
             </t>
             <t>Index Information Element 1..N
                <list hangIndent="3" style="empty">
                 <t>
		       The Information Element(s) that are used as indices for the MIB Object Identifier.
                 </t>

                 <t>
			 Regular Information Elements, enterprise-specific Information Elements, and non-indexed MIB object identifiers may all be used as indices.
			 However, indexed MIB object identifiers may not be used as indices because SNMP doesn't support hierarchical indexing.
                 </t>
                </list>
             </t>
             <t>Index 1..N Length
                <list hangIndent="3" style="empty">
                 <t>
		       The respective index lengths for the Information Element(s) 1..N
                 </t>
                </list>
             </t>

           </list>
         </t>


        </section> <!-- Extended Field Specifier Format for an Indexed MIB Object, with an IPFIX Information Element as Index -->
   
        <section anchor="sectionIndexedFormatWithMIBObjInstanceIDString" title="Extended Field Specifier Format for an Indexed MIB Object, with one IPFIX Information Element for the OID segment identifying the instance">

          <t>
		    When MIB objects are to be exported, the Exporter may need to interact with the MIB instrumentation in an SNMP agent
		to obtain the required information. For some SNMP agents, the MIB instrumentation by design does not have knowledge of
		the OID of the indice(s) that identify the instance of the MIB object being accessed. For example, when 
		accessing a MIB object ifInOctets.10, the MIB instrumentation code may not know that the object ifInOctets is indexed
		by ifIndex, it is sufficient for it to map the value (10) of the ifIndex to an interface on the device.
		For such SNMP agents, the Exporter can not use the methods described in <xref target="sectionIndexedFormatWithOIDAsIndex" /> and
		<xref target="sectionIndexedFormatWithIPFIXIEAsIndex" /> without making extensive changes to the existing MIB instrumentation.
	  </t>
	  <t>
		An alternate method for exporting Indexed MIB objects in such cases is to convey only the value(s) of the indice(s)
		that identify the instances being exported.  The index count and OIDs of the indice(s) are not conveyed in the IPFIX template
		record. The Collecting Process is assumed to have the intelligence to understand how the exported
	    objects are indexed. For example, it can either compile this information from the MIB Module where this object type is
		defined or it may be hardcoded with this information for specific MIB objects that are of interest to it. 
	    The object identifier of the indexed MIB object is split into two parts, first part is the OID prefix which
		is the OID of the corresponding object type and the second part is the OID segment identifying the instance.
	    An information element called MIBInstanceIdentifier is defined for conveying the instance identification segment
	    of an indexed MIB object's OID in string format. While the OID prefix is sent in the template record,
	    the instance identifier segment is sent in the data record. Since the instance identifier segment of the MIB
		OID is in the data-record, the same template record can be used for exporting different instances of the same
		MIB object.
	  </t>
	  <t>
	    Indexed MIB objects, with MIBInstanceIdentifier as
	    index are exported as shown in <xref target="figure_extendedInstnaceIDFieldSpecifier" />
          </t>
         <figure align="center" anchor="figure_extendedInstnaceIDFieldSpecifier"
                 title="MIB Object Identifier Extended Field Specifier Format with an indexed MIB Object using MIBInstanceIdentifier as Index">
           <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|E|         MIB OID IE          |         Field Length          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Index Count=1 |  MIB OID Len  |    MIB Object Identifier ...  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|              ... MIB Object Identifier continued              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|E|    MIBInstanceIdentifier    |MIBInstanceIdentifier Len=FFFF |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
           </artwork>
         </figure>

         <t>
           Where:
           <list hangIndent="2" style="empty">
             <t>E
                <list hangIndent="3" style="empty">
                 <t>
                   Enterprise bit. This is the first bit of the Field Specifier. The
                   value is always set to 0 for the MIB Object Identifier Extended Field
                   Specifier Format, even if the MIB Object Identifier is enterprise-specific,
                   because the MIB OID IE is an IANA standard field and is not enterprise-specific.
                 </t>
                </list>
             </t>
             <t>MIB OID IE
                <list hangIndent="3" style="empty">
                 <t>
                   Special IPFIX Information Element, MIBObjectIdentifierMarker, that denotes that a
                   MIB object is exported in the (Options) Template Record.  When the MIB Object
                   Identifier Information Element (MIB OID IE) is used, the MIB Object Identifier
                   must be specified in the MIB Object Identifier Extended Field Specifier for the
                   Collecting Process to be able to decode the Records.
                 </t>
                </list>
             </t>
             <t>Field Length
                <list hangIndent="3" style="empty">
                 <t>
                   The definition is as <xref target="RFC5101" />.
		   The Field Length does not include the length of the index fields, since these are specified separately.
		   Note that the Field Length can be expressed using reduced size encoding per <xref target="RFC5101" />.
                 </t>
                </list>
             </t>
             <t>Index Count
                <list hangIndent="3" style="empty">
                 <t>
		   When the OID segment identifying the instance is exported as one string using the
		   MIBInstanceIdentifier the Index Count value is always set to 1 to indicate that
		   there is one information element conveying index values for this MIB object.
                   Since the Collecting Process is assumed to know the INDEX definition of the 
		   MIB object, the actual index count need not be conveyed.
                 </t>
                </list>
             </t>
             <t>MIB Object Identifier Length
                <list hangIndent="3" style="empty">
                 <t>
                   The length of the textual representation of the MIB Object Identifier that follows.
                   This is encoded in the same manner as the variable length encoding in <xref target="RFC5101" />.
		   If the length of the MIB Object Identifier is greater than or equal to 255 octets,
		   the length is encoded into 3 octets before the MIB Object Name
                   where the first octet is 255 and the length is carried in the second and third octets
                   (as shown in <xref target="figure_extendedFieldSpecifierLong" />).
                   If the MIB Object Identifier is longer than 254 characters then the length MUST be extended.
                 </t>
                </list>
             </t>
             <t>MIB Object Identifier
                <list hangIndent="3" style="empty">
                 <t>
		       The textual representation of a MIB object
                   identifier as defined in
                   <xref target="sectionTerminology"/>.
                 </t>
                </list>
             </t>
             <t>E
                <list hangIndent="3" style="empty">
                 <t>
                   Enterprise bit. This is the enterprise bit for the MIBInstanceIdentifier that follows. The
                   value is always set to 0 when the MIBInstanceIdentifier is used
                   because the MIBInstanceIdentifier is an IANA standard field and is not enterprise-specific.
                 </t>
                </list>
             </t>
             <t>MIB Instance Identifier
                <list hangIndent="3" style="empty">
                 <t>
                   IPFIX Information Element, MIBInstanceIdentifier, that denotes that a
                   MIB Instance identifier string is exported in the data record following the MIB Object's value.
		   This instance identifier when concatenated with the MIB object type OID that was sent in the template record gives the complete OID
		   of the MIB variable that is being exported.
                 </t>
                </list>
             </t>
           </list>
         </t>


        </section> <!-- Extended Field Specifier Format for an Indexed MIB Object, with one IPFIX Information Element for the OID segment identifying an instance -->

    </section> <!-- MIB OID Extended Field Specifier Format -->

   <section anchor="indicesConsiderations" title="Indices Considerations">
	<t>
         When using an Indexed MIB Object, the Template Record contains the index/indices length. In some cases, this
         index/indices information might be redundant in the export information. For example, when the index is an
         Information Element already contained in the Template Record, the length is already part of the Template
         Record, and available to the Collecting Process for decode, as shown in the example in
         <xref target="sectionUseCasePSAMPwithanIPFIXInformationElement"/>. A second example in
         <xref target="sectionUsingScope"/> is when a specific MIB OID is already part of the Template Record as a standalone
         MIB object in a Template Record, and also reused as an index.
	</t>
      <t>
         However, there are two cases where the index length is required. Therefore, for consistent decoding on the
         Collecting Process, the Index Length is always specified next to the index.

      </t>
      <t>
         Situation 1: When a non-indexed MIB object is used as an index, and doesn't appear as a standalone MIB object in
         the Template Record, the Collecting Process might not want, per design,
 to access the MIB modules in order to find
         the length of the value for a particular MIB OID.
      </t>
      <t>
         Situation 2: A Template Record might contain two similar Information Elements with different encoding lengths
         even if this situation is an unlikely real-world scenario), while an Indexed MIB Object might want to refer to
         one of this Information Element as the index. However, without clearly specifying the index length, the Collecting
         Process would not know which length
to decode the index with.
      </t>
	<t>
         When an Information Element is used as index, there MUST be one and only one similar Information Element with
         the exact same length in the Template Record, so that the Collecting Process knows which Information Element value
         from the Flow Records to match. Note that this rule also implies that the reduced size encoding <xref target="RFC5101" /> of the Information
         Element in the index compared to the Information Element in the Template Record is not allowed. If the Collecting
         Process can not determine clearly which Information Element value to chose as the index because there are two (or more)
         Information Elements with the same length, then index MUST specified as the MIB Object Identifier.
      </t>
      <t>
         An indexed MIB object MAY be indexed by a mix of MIB OID(s) and IPFIX Information Element(s)
      </t>


    </section> <!-- Indices Considerations-->


    <section anchor="sectionIdentifyingContext" title="Identifying the SNMP Context">
	<t>
	Each MIB OID is looked up in a specific context, usually the default context.  If exporting a MIB OID value that isn't in the default context then the context string MUST be identified and associated with the MIB OID.  This can be done on a per template basis by exporting an Options Template Record.
	</t>
	<t>
	A new IPFIX Information Element, "MIBObjectIdentifierMarker" has been allocated for this purpose.
	See <xref target="sectionIANA"/>.
	</t>
    </section> <!-- Identifying the SNMP Context -->

    <section anchor="sectionTemplateManagement" title="Template Management">
	<t>
	Templates are managed as per <xref target="RFC5101" />.
	</t>
	<t>
	The Set ID field MUST contain the value TBD1 for any Template Set that contains a MIB Object Identifier Extended Field Specifier. The Template Withdrawal Message for such a Template must also use a Set ID field containing the value TBD1.
	</t>
	<t>
	The Set ID field MUST contain the value TBD2 for any Option Template Set that contains a MIB Object Identifier Extended Field Specifier.  The Template Withdrawal Message for such an Option Template must also use a Set ID field containing the value TBD2.
	</t>
    </section> <!-- Template Management -->

</section> <!-- MIB OID Extended Template Formats -->

<section anchor="sectinExampleUseCases" title="Example Use Cases">

    <section anchor="sectionMultipleTemplatesRequired" title="Without Using the Specifications in this Document">

	<t>
	This example shows the need for indexed MIB objects using the example of exporting ifInOctets from <xref target="sectionIndexedFormatWithOIDAsIndex" />.
	</t>
	<t>
	A Template Record for exporting the ifInOctets for the interface represented by the interface ifIndex 1
	(i.e., ifInOctets.1) is shown in <xref target="figure_multipleTemplates"/>.
	While this may be useful for exporting the single ifInOctets.1 field,
	clearly additional Templates are required in order to export ifInOctets.2, ifInOctets.3, etc.
	Therefore Indexed MIB objects (per <xref target="sectionIndexedFormatWithOIDAsIndex"/>) are required in order to export arbitrary ifInOctets.x.
	</t>

         <figure align="center" anchor="figure_multipleTemplates"
                 title="Template for exporting ifInOctets.1">
           <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Set ID = TBD1        |          Length = 36          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|        Template ID = 256      |        Field Count = 1        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|IE=MIBObjectIdentifierMarker |        Field Length = 4       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|Index Count = 0|MIB OID Len=22 |    MIB Object Identifier ...  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     ... MIB Object Identifier = "1.3.6.1.2.1.2.2.1.10.1"      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued                |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
           </artwork>
         </figure>

    </section>

    <section anchor="sectionUseCaseTcpCurrEstab" title="Non-indexed MIB Object: Established TCP Connections">
	<t>
	The number of established TCP connections of a remote network device could be monitored by configuring it to periodically export the number of established TCP connections to a centralized Collector.  In this example, the Exporter would export an IPFIX Message every 30 minutes that contained Data Records detailing the number of established TCP connections.
	</t>

	<t>
	The table of data that is to be exported looks like:
	</t>

	<texttable anchor="TCP_Usage_Data" title="Established TCP Connections">
	<ttcol align="center">TIMESTAMP</ttcol>
	<ttcol align="center">ESTABLISHED TCP CONN.</ttcol>

	<c>StartTime +  &nbsp;&nbsp;0 seconds</c><c>10</c>
	<c>StartTime +       &nbsp;60 seconds</c><c>14</c>
	<c>StartTime +            120 seconds</c><c>19</c>
	<c>StartTime +            180 seconds</c><c>16</c>
	<c>StartTime +            240 seconds</c><c>23</c>
	<c>StartTime +            300 seconds</c><c>29</c>
	</texttable>

	<t>
	The Template Record for such a Data Record will detail two Information Elements:
	</t>

	<t>
	    <list hangIndent="2" style="numbers">
		<t>
		flowStartSeconds from <xref target="RFC5102" />, Information Element 150: The absolute timestamp of the first packet of this Flow.
		</t>
		<t>
		tcpCurrEstab from <xref target="RFC4022"/>, Object ID "1.3.6.1.2.1.6.9": The number of TCP connections for which the current state is either ESTABLISHED or CLOSE-WAIT.
		</t>
	    </list>
	</t>
	<t>
	<xref target="figure_ExampleTemplateSet_tcpCurrEstab" /> shows the exported Template Set
detailing the Template Record for exporting the number of established TCP connections (see <xref target="sectionUseCaseTcpCurrEstab" />).
	</t>
	<figure align="center" anchor="figure_ExampleTemplateSet_tcpCurrEstab"
	       title="Example of tcpCurrEstab Template Set">
            <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Set ID = TBD1        |          Length = 33          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|        Template ID = 257      |        Field Count = 2        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|   IE = flowStartSeconds     |        Field Length = 4       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|IE=MIBObjectIdentifierMarker |        Field Length = 4       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|Index Count = 0|MIB OID Len=15 |    MIB Object Identifier ...  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         ... MIB Object Identifier = "1.3.6.1.2.1.6.9"         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ... |
+-+-+-+-+-+-+-+-+]]>
            </artwork>
	</figure>
	<t>
	<xref target="figure_ExampleDataSet_tcpCurrEstab" /> shows the start of the Data Set for exporting the number of established TCP connections (see <xref target="sectionUseCaseTcpCurrEstab" />).
	</t>
	<figure align="center" anchor="figure_ExampleDataSet_tcpCurrEstab"
                title="Example of tcpCurrEstab Data Set">
            <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Set ID = 257         |         Length = 52           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    StartTime +   0 seconds                    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                              10                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    StartTime +  60 seconds                    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                              14                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    StartTime + 120 seconds                    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                              19                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    StartTime + 180 seconds                    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                              16                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    StartTime + 240 seconds                    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                              23                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    StartTime + 300 seconds                    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                              29                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
            </artwork>
	</figure>
    </section> <!-- Non-indexed MIB Object: Established TCP Connections -->


<section anchor="sectionUseCaseCpuLoad" title="Enterprise Specific MIB Object: Detailing CPU Load History">
<t>
For the sake of demonstrating a enterprise-specific MIB object, a non-indexed MIB object is chosen for simplicity.
The CPU Usage of a remote network device could be monitored by configuring it to periodically export CPU usage information, i.e. the cpmCPUTotal1minRev from the proprietary CISCO-PROCESS-MIB, Object ID "1.3.6.1.4.1.9.9.109.1.1.1.1.7", to a centralized Collector.  In this example, the Exporter would export an IPFIX Message every 30 minutes that contained Data Records detailing the CPU 1 minute busy average at 1 minute intervals.
</t>
<t>
The table of data that is to be exported looks like:
</t>
<texttable anchor="CPU_Usage_Data" title="CPU Usage Data">
<ttcol align="center">TIMESTAMP</ttcol>
<ttcol align="center">CPU BUSY PERCENTAGE</ttcol>

<c>StartTime +  &nbsp;&nbsp;0 seconds</c><c>10%</c>
<c>StartTime +       &nbsp;60 seconds</c><c>14%</c>
<c>StartTime +            120 seconds</c><c>19%</c>
<c>StartTime +            180 seconds</c><c>16%</c>
<c>StartTime +            240 seconds</c><c>23%</c>
<c>StartTime +            300 seconds</c><c>29%</c>
</texttable>

<t>
The Template Record for such a Data Record will detail two Information Elements:
</t>

<t>
<list hangIndent="2" style="numbers">
<t>
flowStartSeconds from <xref target="RFC5102" />, Information Element 150: The absolute timestamp of the first packet of this Flow.
</t>
<t>
cpmCPUTotal1minRev, the overall CPU busy percentage in the last one-minute period
</t>
</list>
</t>
<t>
<xref target="figure_ExampleTemplateSet_CPULoad" /> shows the exported Template Set
detailing the Template Record for exporting CPU Load (see <xref target="sectionUseCaseCpuLoad" />).
</t>
	<figure align="center" anchor="figure_ExampleTemplateSet_CPULoad"
                title="Example of CPU Load Template Set">
            <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Set ID = TBD1        |          Length = 47          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|        Template ID = 258      |        Field Count = 2        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|   IE = flowStartSeconds     |        Field Length = 4       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|IE=MIBObjectIdentifierMarker |        Field Length = 1       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|Index Count = 0|MIB OID Len=29 |    MIB Object Identifier ...  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  ... MIB Object Identifier = "1.3.6.1.4.1.9.9.109.1.1.1.1.7"  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ... MIB Object Identifier continued |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
            </artwork>
	</figure>

<t>
Note that although cpmCPUTotal1minRev is 32 bits long, reduced size encoding (<xref target="RFC5101" />) has been used to encoded it within a single octet.
</t>

<t>
This example stresses that, even though the OID cpmCPUTotal1minRev is enterprise-specific, the E bit for the MIBObjectIdentifierMarker is set to "0"
since the "MIBObjectIdentifierMarker" Information Element is not enterprise-specific.
</t>
<t>
The corresponding Data Set does not add any value for this example, and is therefore not displayed.
</t>

</section> <!-- Non-indexed MIB Object: Detailing CPU Load History -->




<section anchor="sectionUseCasePSAMPwithanOID"
        title="Indexed MIB Object with an OID: Output Interface Queue Size in PSAMP Packet Report">

<t>
Following on the example from the previous section (see <xref target="sectionUseCasePSAMPwithanIPFIXInformationElement" />), if the Template Record for the example Data Record does not contain the egressInterface, the ifOutQLen must be indexed by the ifIndex interface index as detailed in the IF-MIB <xref target="RFC2863" />:
</t>

<t>
The Template Record for the example Data Record contains the following Information Elements:
</t>

<t>
<list hangIndent="2" style="numbers">
<t>
sourceIPv4Address
</t><t>
destinationIPv4Address
</t><t>
totalLengthIPv4
</t><t>
ifOutQLen indexed by: ifIndex
</t>
</list>
</t>

<t>
<xref target="figure_ExampleTemplateSet_PSAMPifIndex" /> shows the exported Template Set detailing the Template for exporting a PSAMP Report with Interface Output Queue Length (ifOutQLen) but using the ifIndex MIB object as the exported index.</t>
	<figure align="center" anchor="figure_ExampleTemplateSet_PSAMPifIndex"
                title="Example of a Template for a PSAMP Report with ifOutQLen using ifIndex from IF-MIB [RFC2863] as an index">
            <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Set ID = TBD1        |          Length = 70          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|        Template ID = 259      |        Field Count = 4        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|   IE = sourceIPv4Address    |        Field Length = 4       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0| IE = destinationIPv4Address |        Field Length = 4       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|    IE = totalLengthIPv4     |        Field Length = 4       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|IE=MIBObjectIdentifierMarker |        Field Length = 1       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Index Count=1 |MIB OID Len=20 |    MIB Object Identifier ...  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      ... MIB Object Identifier = "1.3.6.1.2.1.2.2.1.21"       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| ... MIB OID continued         |0|IE=MIBObjectIdentifierMarker |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  1.3.6.1.2.1.2.2.1.1 length   |MIB OID Len=19 | MIB Obj ID ...|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       MIB Object Identifier = "1.3.6.1.2.1.2.2.1.1" ...       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| ... MIB Object Identifier cont|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
            </artwork>
	</figure>

<t>
Note that IPFIX reduced size encoding <xref target="RFC5101" /> has been used in this example to express ifOutQLen in a single octet, rather than the 32 bits specified in the IF-MIB <xref target="RFC2863" />.
</t>
<t>
The corresponding IPFIX Data Record is shown in <xref target="figure_ExampleDataSet_PSAMPPacketReport_withOID" />.
For the sake of the example, the interface index of "Eth 1/0" is 15 and the
interface index of "Eth 1/1" is 16.
</t>

	<figure align="center" anchor="figure_ExampleDataSet_PSAMPPacketReport_withOID"
                title="Example of PSAMP Packet Report with the ifOutQLen using ifIndex from IF-MIB [RFC2863] as an index">
            <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Set ID = 259         |         Length = 72           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          192.0.2.1                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          192.0.2.3                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                             150                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      45       |                     15 ...                    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      ...      |                  192.0.2.4 ...                |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      ...      |                  192.0.2.9 ...                |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      ...      |                     350 ...                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      ...      |       45      |             15 ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|             ...               |         192.0.2.3 ...         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|             ...               |         192.0.2.9 ...         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|             ...               |              650 ...          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|             ...               |       23      |    ...        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                 ... 15                        |    ...        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                 ... 192.0.2.4                 |    ...        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                 ... 192.0.2.6                 |    ...        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                 ...  350                      |       0       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                              16                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
            </artwork>
	</figure>

</section> <!-- Indexed MIB Objects with one MIB variable: Output Interface Queue Size in PSAMP Packet Report -->


<section anchor="sectionUseCaseIndexedWithTwoOIDs"
        title="Indexed MIB Object with Two OIDs: The ipIfStatsInForwDatagrams">
<t>
MIB objects may be indexed by multiple indices. Note that all the indices apply to the MIB object, i.e. index 2 is not an index of index 1.
</t>
<t>
This example shows the export of ipIfStatsInForwDatagrams from the IP-MIB <xref target="RFC4293"/> indexed by the ipIfStatsIPVersion and ipIfStatsIfIndex which are provided as scope fields in an IPFIX option. Note that since these fields are used as indices for ipIfStatsInForwDatagrams, they don't need their own indices to be identified.
</t>

<t>
The Options Template Record for the example Data Record contains the following Information Elements:
</t>

<t>
    <list hangIndent="2" style="numbers">
	<t>
	ipIfStatsIPVersion (1.3.6.1.2.1.4.31.3.1.1) (scope field)
	</t>
	<t>
	ipIfStatsIfIndex (1.3.6.1.2.1.4.31.3.1.2) (scope field)
	</t>
	<t>
	ipIfStatsInForwDatagrams (1.3.6.1.2.1.4.31.3.1.12) (non-scope field) indexed by ipIfStatsIPVersion and ipIfStatsIfIndex
	</t>
    </list>
</t>

<t>
	<xref target="figure_ExampleTemplateSet_2indices" /> shows the exported Options Template Set.
</t>

	<figure align="center" anchor="figure_ExampleTemplateSet_2indices"
                title="Example of an Options Template for an Indexed MIB Object with two indices.">
            <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Set ID = TBD2         |          Length = 146         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       Template ID = 260       |        Field Count = 3        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Scope Field Count = 2     |0|  MIBObjectIdentifierMarker  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Scope Field 1 Length = 1    |Index Count = 0|MIB OID Len=22 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      MIB Object Identifier = "1.3.6.1.2.1.4.31.3.1.1" ...     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|MIB Object Identifier continued|0|  MIBObjectIdentifierMarker  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Scope Field 2 Length = 2    |Index Count = 0|MIB OID Len=22 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      MIB Object Identifier = "1.3.6.1.2.1.4.31.3.1.2" ...     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            ... MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            ... MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            ... MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            ... MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|MIB Object Identifier continued|0|  MIBObjectIdentifierMarker  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       Field Length = 4        |Index Count = 2|MIB OID Len=23 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     MIB Object Identifier = "1.3.6.1.2.1.4.31.3.1.12" ...     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            ... MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            ... MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            ... MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            ... MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            ... MIB Object Identifier continued|0|MIB OID IE...|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|... MIB OID IE | 1.3.6.1.2.1.4.31.3.1.1 Length |MIB OID Len=22 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     MIB Object Identifier = "1.3.6.1.2.1.4.31.3.1.1" ...      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            ... MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            ... MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            ... MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            ... MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   ... MIB Object Identifier   |0|         MIB OID IE          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| 1.3.6.1.2.1.4.31.3.1.2 Length | MIB OID Len=22| MIB Obj ID ...|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     MIB Object Identifier = "1.3.6.1.2.1.4.31.3.1.2" ...      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            ... MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            ... MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|            ... MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   ... MIB Object Identifier   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
            </artwork>
	</figure>

</section> <!-- Indexed MIB Object with two OIDs-->

<section anchor="sectionUseCasePSAMPwithanIPFIXInformationElement"
        title="Indexed MIB Object with an IPFIX Information Element: Output Interface Queue Size in PSAMP Packet Report">
<t>
If a PSAMP Packet Report <xref target="RFC5476" /> was generated on any dropped packets on an interface then it may be desirable to know if the send queue on the output interface was full.  This could be done be exporting the size of the send queue (ifOutQLen) in the same Data Record as the PSAMP Packet Report.
</t>

<t>
The exported data looks like:
</t>
<texttable anchor="PSAMP_Data"
          title="Packet Report with Interface Output Queue Length (ifOutQLen) Data">

<ttcol align="center">SRC ADDR</ttcol>
<ttcol align="center">DST ADDR</ttcol>
<ttcol align="center">PAK LEN</ttcol>
<ttcol align="center">OUTPUT I/F</ttcol>
<ttcol align="center">OUTPUT Q. LEN (ifOutQLen)</ttcol>

<c>192.0.2.1</c> <c>192.0.2.3</c> <c>150</c> <c>Eth 1/0 (15)</c> <c>45</c>
<c>192.0.2.4</c> <c>192.0.2.9</c> <c>350</c> <c>Eth 1/0 (15)</c> <c>45</c>
<c>192.0.2.3</c> <c>192.0.2.9</c> <c>650</c> <c>Eth 1/0 (15)</c> <c>23</c>
<c>192.0.2.4</c> <c>192.0.2.6</c> <c>350</c> <c>Eth 1/1 (16)</c> <c>&nbsp;0</c>
</texttable>

<t>
The MIB object for the Interface Output Queue Length, ifOutQLen ("1.3.6.1.2.1.2.2.1.21"), is indexed by the ifIndex interface index as detailed in the IF-MIB <xref target="RFC2863" />.  If, for example, the interface index of "Eth 1/0" in the example is 15, the full MIB Object Identifier for (ifOutQLen) would be "1.3.6.1.2.1.2.2.1.21.15".  Without a method to specify the index the full MIB OID would have to be used, which would mean specifying a new Template Record.  Rather than export a separate Template Record for each Interface Index, it is more practical to identify the index in the Data Record itself.
</t>

<t>
In fact, only how the indexed object was indexed is necessary, although it is often useful to specify the index value.  The example identifies the Egress Interface, but for other uses it may be sufficient to know that the ifOutQLen value was taken for the interface that the packet was switched out of, without identifying the actual interface.
</t>

<t>
The Template Record for the example Data Record contains the following Information Elements:
</t>

<t>
<list hangIndent="2" style="numbers">
<t>
sourceIPv4Address
</t><t>
destinationIPv4Address
</t><t>
totalLengthIPv4
</t><t>
egressInterface
</t><t>
ifOutQLen indexed by: egressInterface
</t>
</list>
</t>

<t>
<xref target="figure_ExampleTemplateSet_PSAMP" /> shows the exported Template Set detailing the Template for exporting a PSAMP Report with Interface Output Queue Length (ifOutQLen) (see <xref target="sectionUseCasePSAMPwithanOID" />).
</t>

	<figure align="center" anchor="figure_ExampleTemplateSet_PSAMP"
                title="Example of Template for a PSAMP Report with ifOutQLen indexed by egressInterface">
            <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Set ID = TBD1        |          Length = 54          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|        Template ID = 261      |        Field Count = 5        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|   IE = sourceIPv4Address    |        Field Length = 4       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0| IE = destinationIPv4Address |        Field Length = 4       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|    IE = totalLengthIPv4     |        Field Length = 4       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|    IE = egressInterface     |        Field Length = 4       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|IE=MIBObjectIdentifierMarker |        Field Length 4         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Index Count=1 |MIB OID Len=20 |    MIB Object Identifier ...  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|      ... MIB Object Identifier = "1.3.6.1.2.1.2.2.1.21"       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| ... MIB OID continued         |0|    IE = egressInterface     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  egressInterface Length = 4   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
            </artwork>
	</figure>

<t>
The corresponding IPFIX Data Record is shown in <xref target="figure_ExampleDataSet_PSAMPPacketReport_withIPFIXIE" />.
For the sake of the example, the interface index of "Eth 1/0" is 15 and the
interface index of "Eth 1/1" is 16.
</t>

	<figure align="center" anchor="figure_ExampleDataSet_PSAMPPacketReport_withIPFIXIE"
                title="Example of PSAMP Packet Report with ifOutQLen indexed by egressInterface">
            <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Set ID = 261         |         Length = 84           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          192.0.2.1                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          192.0.2.3                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                             150                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        15 (Eth 1/0)                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                              45                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          192.0.2.4                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          192.0.2.9                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                             350                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        15 (Eth 1/0)                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                              45                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          192.0.2.3                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          192.0.2.9                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                             650                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        15 (Eth 1/0)                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                              23                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          192.0.2.4                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          192.0.2.6                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                             350                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        16 (Eth 1/1)                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                               0                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
            </artwork>
	</figure>

 </section> <!-- Indexed MIB Objects with one IPFIX IE: Output Interface Queue Size in PSAMP Packet Report -->


<section anchor="sectionUseIndexedwithaMixofOIDAndIPFIXIE"
        title="Indexed MIB Objects with a mix of MIB OID and IPFIX Information Element">
<t>
	TODO.
</t>
</section> <!-- Indexed MIB Objects with a mix of MIB OID and IPFIX Information Element -->

<section anchor="sectionUseIndexedwithMIBInstanceIdentifier"
        title="Indexed MIB Object with MIBInstanceIdentifier Information Element: ipIfStatsOutOctets">
<t>
This example shows the export of ipIfStatsOutOctets from the IP-MIB <xref target="RFC4293"/> indexed by the ipIfStatsIPVersion and ipIfStatsIfIndex, using the MIBInstanceIdentifier Information Element to carry the index information.
</t>

<t>
The exported data looks like:
</t>
<texttable anchor="ipIfStatsOutOctets"
          title="The number octets in IP datagrams delivered to the lower layers for transmission">

<ttcol align="center">ipIfStatsIPVersion</ttcol>
<ttcol align="center">ipIfStatsIfIndex</ttcol>
<ttcol align="center">ipIfStatsOutOctets</ttcol>

<c>1(IPv4)</c> <c>10</c><c>235876</c>
<c>2(IPv6)</c> <c>11</c><c>38688</c>
</texttable>

<t>
The MIB object ipIfStatsOutOctets ("1.3.6.1.2.1.4.31.3.1.32"), is indexed by ipIfStatsIPVersion and ipIfStatsIfIndex as detailed in IP-MIB <xref target="RFC4293"/>.  The instance of the ipIfStatsOutOctets for the IPv4 protocol on the interface identified by ifIndex 10 is identified in the data record with the instance identifier segment ("1.10") in string format, while the instance of the ipIfStatsOutOctets for the IPv6 protocol on the interface identified by ifIndex 11 is identified in the data record with the instance identifier segment ("2.11") in string format.
</t>

<t>
The Template Record for the example Data Records contains the following Information Elements:
</t>

<t>
    <list hangIndent="2" style="numbers">
	<t>
	ipIfStatsOutOctets (1.3.6.1.2.1.4.31.3.1.32) 
	</t>
    </list>
</t>

<t>
	<xref target="figure_ExampleTemplateSetwithMIBInstanceIdentifier" /> shows the exported Template Set.
</t>

	<figure align="center" anchor="figure_ExampleTemplateSetwithMIBInstanceIdentifier"
                title="Example of a Template for an MIB Objects that use the MIBInstanceIdentifier Information Element">
            <artwork align="center">
<![CDATA[ 0                   1                   2                   2
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Set ID = TBD1         |          Length = 86          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       Template ID = 264       |        Field Count = 1        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|IE=MIBObjectIdentifierMarker |        Field Length = 4       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Index Count=1 |MIB OID Len=23 |    MIB Object Identifier ...  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  ...MIB Object Identifier = "1.3.6.1.2.1.4.31.3.1.32"         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|...MIB OID     |0|  MIBInstanceIdentifier IE   | FieldLength...|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   ... = FFFF  |
+-+-+-+-+-+-+-+-+]]>
            </artwork>
	</figure>
<t>
The corresponding IPFIX Data Record is shown in <xref target="figure_ExampleDataSetwithMIBInstanceIdentifier" />.
</t>
<t>
Variable length encoding is used for MIBInstanceIdentifier Information Element.
</t>

	<figure align="center" anchor="figure_ExampleDataSetwithMIBInstanceIdentifier"
                title="Example of ipIfStatsOutOctets using ipIfStatsIPVersion and ipIfStatsIfIndex as indices">
            <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Set ID = 264        |          Length = 22          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                  ipIfStatsOutOctets = 235876                  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Length = 4   |                  "1.10"...                    | 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     ...       |          ipIfStatsOutOctets = 38688           | 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     ...       |  Length = 4   |            "2.11"...          | 
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|              ...              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
            </artwork>
	</figure>


</section> <!-- Indexed MIB Object with MIBInstanceIdentifier Information Element -->


<section anchor="sectionUsingScope"
        title="Using MIB Objects as IPFIX Options Scope fields">
    <t>
	Both indexed and non-indexed MIB Objects may be used as IPFIX Options Scope fields
	as discussed in <xref target="sectionExtendedOptionsFormat" />.
    </t>

    <section anchor="sectionUseNonIndexedasScope"
        title="Using non-Indexed MIB Objects as Option Scope fields">

	<t>
	In this example, a Cisco Telepresence system uses an IPFIX option to report bandwidth usage statistics.
	The ctpcLocalAddrType and ctpcLocalAddr OIDs from the CISCO-TELEPRESENCE-CALL MIB are used as scope fields
	to identify the Telepresence system. The ctpcLocalAddrType is expressed with a fixed size of 1 octet,
	while the ctpcLocalAddr is expressed using a variable length field.
	</t>
	<t>
	These scope fields are followed by two non-scope fields containing the number of packets and bytes.
	IPFIX reduced size encoding is used to express each of these fields in 32 bits.
	</t>
	<t>
	Therefore the Options Template Record for the example Data Record contains the following Information Elements:
	</t>
	<t>
	    <list hangIndent="2" style="numbers">
		<t>
		ctpcLocalAddrType (1.3.6.1.4.1.9.9.644.1.2.1) (scope field)
		</t>
		<t>
		ctpcLocalAddr (1.3.6.1.4.1.9.9.644.1.2.2) (scope field)
		</t>
		<t>
		octetDeltaCount (non-scope field)
		</t>
		<t>
		packetDeltaCount (non-scope field)
		</t>
	    </list>
	</t>
	<t>
	The IPFIX Options Template Record is shown in <xref target="figure_ExampleOptionsTemplateSet_NonIndexedasScope" />.
	</t>

        <figure align="center" anchor="figure_ExampleOptionsTemplateSet_NonIndexedasScope"
                title="Example of an IPFIX Options Template Record using non-Indexed MIB Objects as scope fields">
            <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Set ID = TBD2         |          Length = 80          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       Template ID = 262       |        Field Count = 4        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Scope Field Count = 2     |0|  MIBObjectIdentifierMarker  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Scope Field 1 Length = 1    |Index Count = 0|MIB OID Len=25 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    MIB Object Identifier = "1.3.6.1.4.1.9.9.644.1.2.1" ...    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|... MIB OID ID |0|  MIBObjectIdentifierMarker | Scope Field ...|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|...Length=65535|Index Count = 0|MIB OID Len=25 | MIB OID ID ...|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  ... MIB Object Identifier = "1.3.6.1.4.1.9.9.644.1.2.2" ...  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued                |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|     octetDeltaCount = 1     |       Field Length = 4        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|0|    packetDeltaCount = 2     |       Field Length = 4        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
            </artwork>
        </figure>

	<t>
	The corresponding IPFIX Options Data Record is shown in
	<xref target="figure_ExampleOptionsDataSet_NonIndexedasScope" />.
	</t>

        <figure align="center" anchor="figure_ExampleOptionsDataSet_NonIndexedasScope"
                title="Example of an IPFIX Options Data Record using non-Indexed MIB Objects as scope fields">
            <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Set ID = 262          |          Length = 18          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| AddrType = 1  |  Length = 4   |  ctpcLocalAddrsystemID = ...  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         ... 192.0.2.1         |  octetDeltaCount = nnnn ...   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| ... octetDeltaCount continued |  packetDeltaCount = nnnn ...  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| ... packetDeltaCount continued|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
            </artwork>
        </figure>

    </section> <!-- Using non-Indexed MIB Objects as Option Scope fields -->

    <section anchor="sectionUseIndexedasScope"
        title="Using Indexed MIB Objects as Option Scope fields">
	<t>
        In this example, interface statistics are reported using ifName and ifInOctets from the IF-MIB <xref target="RFC2863" />.
	Both of these fields are indexed by the ifIndex. The ifName and ifIndex are scope fields.
	</t>
	<t>
	Therefore the Options Template Record for the example Data Record contains the following Information Elements:
	</t>
	<t>
	    <list hangIndent="2" style="numbers">
		<t>
		ifName (1.3.6.1.2.1.31.1.1.1.1) (scope field) indexed by ifIndex
		</t>
		<t>
		ifIndex (1.3.6.1.2.1.2.2.1.1) (scope field)
		</t>
		<t>
		ifInOctets (1.3.6.1.2.1.2.2.1.10) (non-scope field) indexed by ifIndex
		</t>
	    </list>
	</t>

	<t>
	The IPFIX Options Template Record is shown in <xref target="figure_ExampleOptionsTemplateSet_IndexedasScope" />.
	</t>

        <figure align="center" anchor="figure_ExampleOptionsTemplateSet_IndexedasScope"
                title="Example of an IPFIX Options Template Record using Indexed MIB Objects as scope fields">
            <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Set ID = TBD2         |          Length = 137         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       Template ID 263         |        Field Count = 3        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Scope Field Count = 2     |0|  MIBObjectIdentifierMarker  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Scope Field 1 Length = 65535 |Index Count = 1|MIB OID Len=22 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       MIB Object Identifier = "1.3.6.1.2.1.31.1.1.1.1"        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|MIB Object Identifier continued|0|  MIBObjectIdentifierMarker  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Scope Field 1 index Length = 4|MIB OID Len=19 | MIB OID ID ...|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     ... MIB Object Identifier = "1.3.6.1.2.1.2.2.1.1" ...     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued                |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   ... MIB Object Identifier   |0|  MIBObjectIdentifierMarker  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Scope Field 2 Length = 4   |Index Count = 0|MIB OID Len=19 |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       MIB Object Identifier = "1.3.6.1.2.1.2.2.1.1" ...       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|        ... MIB Obj Identifier continued       |0| MIBObject...|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|...Ident Marker|       Field Length =  4       |Index Count = 1|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|MIB OID Len=20 |MIB Object Identifier="1.3.6.1.2.1.2.2.1.10"...|
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  ... MIB OID  |0|  MIBObjectIdentifierMarker  |  Field 1 ...  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|... index Len=4|MIB OID Len=19 |   MIB Object Identifier ...   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     ... MIB Object Identifier = "1.3.6.1.2.1.2.2.1.1" ...     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           ...  MIB Object Identifier continued ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|... MIB Obj Id |
+-+-+-+-+-+-+-+-+]]>
            </artwork>
        </figure>

	<t>
	The corresponding IPFIX Options Data Record is shown in
	<xref target="figure_ExampleOptionsDataSet_IndexedasScope" />.
	For the sake of the example, the interface index of "Eth 1/1" is 15 and the ifInOctets are 1000.
	</t>

        <figure align="center" anchor="figure_ExampleOptionsDataSet_IndexedasScope"
                title="Example of an IPFIX Options Data Record using Indexed MIB Objects as scope fields">
            <artwork align="center">
<![CDATA[ 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Set ID = 263          |          Length = 20          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Length = 7   |             ifName = "Eth 1/1" ...            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                     ... ifName continued                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                         ifIndex = 15                          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                       ifInOctets = 1000                       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+]]>
            </artwork>
        </figure>

    </section> <!-- Using Indexed MIB Objects as Option Scope fields" -->

</section> <!-- Indexed MIB Objects as IPFIX Options Scope fields-->

    <section anchor="sectionStructuredData" title="Using MIB Objects with IPFIX Structured Data">
	<t>
	It's possible to export both indexed and non-indexed MIB Objects using IPFIX Structured Data per <xref target="RFC6313" /> as shown in the example below.
	</t>
	<t>
	TODO: insert example.
	</t>
    </section> <!-- Using MIB Objects with IPFIX Structured Data -->

</section> <!-- Use Cases -->

<section anchor="sectionConfConsiderations" title="Configuration Considerations">
<t>
When configuring a MIB OID for export, consideration should be given to whether the SNMP Context String should also be configurable.  If a non-default Context String is used then it should be associated with the fields as per <xref target="sectionIdentifyingContext" />.
</t>
</section>
<section anchor="sectionCollectingProcess" title="The Collecting Process's Side">
<t>
This section describes the Collecting Process when using SCTP and PR-SCTP as the transport protocol. Any necessary changes to the Collecting Process specifically related to TCP or UDP transport protocols are specified in section 10 of <xref target="RFC5101" />.
</t>
<t>
The specifications in section 9 of <xref target="RFC5101" /> also apply to Collector's that implement this specification. In addition, the following specifications should be noted.
</t>
<t>
A Collecting Process that implements this specification MUST be able to receive Set IDs TBD1 and TBD2, as specified in this document.
</t>
<t>
A Collecting Process that implements this specification MUST have access to MIB modules in order to look up the received MIB Object Identifiers and find the type and name of MIB OID fields used in received templates.  It should be noted that since reduced size encoding MAY be used by the Exporting Process then the Collecting Process cannot assume a received size for a field is the maximum size it should expect for that field.
</t>
<t>
If a Collecting Process receives a MIB Object ID that it cannot decode, it SHOULD log an error.
</t>
<t>
If a Collecting Process receives a MIB Object ID for an indexed MIB Object but isn't sent the appropriate number of indices then it SHOULD log an error, but it MAY use the Template Record to decode the Data Records as the associated indices are purely semantic information.
</t>
</section> <!-- The Collecting Process's Side -->

<section anchor="sectionApplicability" title="Applicability">
<t>
Making available the many and varied items from MIB modules opens up a wide range of possible applications for the IPFIX protocol, some quite different from the usual flow information. Some potential enhancements for traditional applications are detailed below:
</t>
<t>
Some monitoring applications periodically export an interface id to interface name mapping using IPFIX Options Templates.  This could be expanded to include the MIB object "ifInUcastPkts" of the IF-MIB <xref target="RFC2863"/> indexed using the ingressInterface Information Element, as a index.  This would give the input statistics for each interface which can be compared to the flow information to ensure the sampling rate is expected. Or, if there is no sampling, to ensure that all the expected packets are being monitored.
</t>
</section> <!-- Applicability -->

    <section anchor="sectionSecurity" title="Security Considerations">
      <t>
	For this extension to the IPFIX protocol, the same security
	considerations as for the IPFIX protocol apply
	<xref target="RFC5101" />.
      </t>
      <t>
	The access to MIB objects is controlled by the configuration
	of the IPFIX exporter. This is consistent with the way IPFIX
	controls access to other Information Elements in general. The
	configuration of an IPFIX exporter determines which MIB
	objects are included in IPFIX flow records sent to certain
	collectors. Network operators should take care that only MIB
	objects are included in IPFIX flow records that the receiving
	flow collector is allowed to receive.
      </t>
    </section> <!-- Security Considerations -->

    <section anchor="sectionIANA" title="IANA Considerations">
      <section anchor="sectionIANANewSets" title="New Set IDs">
        <t>
	  IPFIX Messages use two fields with assigned values.  These are
	  the IPFIX Version Number, indicating which version of the
	  IPFIX Protocol was used to export an IPFIX Message, and the
	  IPFIX Set ID, indicating the type for each set of information
	  within an IPFIX Message.
        </t>
        <t>
	  The previously reserved Set ID values of TBD1 and TBD2 are
	  allocated in IANA's IPFIX Set IDs registry <xref target="IANA-SETS" />,
	  and are used as specified in this document.  All other Set ID values
	  are reserved for future use. Set ID values above 255 are used
	  for Data Sets.
        </t>
      </section> <!-- New Set IDs -->

      <section anchor="sectionIANANewDataTypes" title="New Data Types">
      <t>
      	A new mibObject data type must be allocated in IANA's IPFIX Information Element Data Types registry, <xref target="IANA-DATATYPES" />.
      </t>
      </section> <!-- New Data Types -->

      <section anchor="sectionIANANewElements" title="New Information Elements">
      <t>
	Two new Information Elements, "MIBObjectIdentifierMarker", and
	"MIBInstanceIdentifier" must be allocated in IANA's IPFIX registry,
        <xref target="IANA-IPFIX" />:
      </t>
	    <t>MIB Object Identifier Marker
	      <list hangIndent="5" style="empty">
		<t>
		  Description:
		  An IPFIX Information Element ("MIBObjectIdentifierMarker")
		  that denotes that a MIB Object Identifier is exported in the
		  (Options) Template Record.
		</t>
		<t>
		Abstract Data Type: mibObject
		</t>
		<t>
		Data Type Semantics: identifier
		</t>
		<t>
		ElementId: TBD
		</t>
		<t>
		Status: current
		</t>
		<t>
		Reference: [this document].
		</t>
	      </list>
	    </t>
            <t>MIB Instance Identifier
               <list hangIndent="3" style="empty">
                <t>
		  Description:
                  IPFIX Information Element, MIBInstanceIdentifier, that denotes that a
                  MIB Instance identifier string is exported in the data record following the MIB Object's value.
		  This instance identifier when concatenated with the MIB object type OID that was sent in the template record gives the complete OID
		  of the MIB variable that is being exported.
                </t>
		<t>
		Abstract Data Type: mibObject
		</t>
		<t>
		Data Type Semantics: identifier
		</t>
		<t>
		ElementId: TBD
		</t>
		<t>
		Status: current
		</t>
		<t>
		Reference: [this document].
		</t>
                </list>
             </t>
      </section> <!-- New Information Elements -->
    </section> <!-- IANA Considerations -->

 <section title="Acknowledgements">

      <t>The authors would like to thank Andrew Johnson for his collaboration on the first version of the draft.</t>

    </section>

  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>

<!--
There are 2 ways to insert reference entries from the citation libraries:
 1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
 2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
    (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

Both are cited textually in the same manner: by using xref elements.
If you use the PI option, xml2rfc will, by default, try to find included files in the same
directory as the including file. You can also define the XML_LIBRARY environment variable
with a value containing a set of directories to search.  These can be either in the local
filing system or remote ones accessed by http (http://domain/dir/... ).
-->

    <references title="Normative References">

      <!--
	  The references below are defined at the top of this file.  If you
	  want to add a reference you MUST add it at the top.
	-->
      &RFC2119;
      &RFC2578;
      &RFC2863;
      &RFC4293;
      &RFC5101;
      &RFC5102;

      <reference anchor="PEN"
		 target="http://www.iana.org/assignments/enterprise-numbers">
	<front>
	  <title>Private Enterprise Numbers registry</title>
	  <author>
            <organization>IANA</organization>
	  </author>
	</front>
      </reference>

      <reference anchor="IANA-IPFIX"
		 target="http://www.iana.org/assignments/ipfix/ipfix.xml">
	<front>
	  <title>IPFIX Information Elements registry</title>
	  <author>
            <organization>IANA</organization>
	  </author>
	</front>
      </reference>

      <reference anchor="IANA-SETS"
		 target="http://www.iana.org/assignments/ipfix/ipfix.xml#ipfix-set-ids">
	<front>
	  <title>IPFIX Set IDs registry</title>
	  <author>
            <organization>IANA</organization>
	  </author>
	</front>
      </reference>

      <reference anchor="IANA-DATATYPES"
		 target="http://www.iana.org/assignments/ipfix/ipfix.xml#ipfix-information-element-data-types">
	<front>
	  <title>IPFIX Information Element Data Types registry</title>
	  <author>
            <organization>IANA</organization>
	  </author>
	</front>
      </reference>

    </references>

    <references title="Informative References">

      <!-- The references below are defined at the top of this file.  If
	   you want to add a reference you MUST add it at the top.  -->

<!--
      &RFC2981;
-->
      &RFC2982;
      &RFC3444;
      &RFC4022;
<!--
      &RFC5470;
-->
      &RFC5476;
      &RFC6313;

    </references>

  </back>
</rfc>
