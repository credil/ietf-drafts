<?xml version="1.0" encoding="US-ASCII"?><!-- This template is for creating an Internet Draft using xml2rfc,     which is available here: http://xml.resource.org. --><!DOCTYPE rfc SYSTEM "rfc2629.dtd" [<!-- One method to get references from the online citation libraries.     There has to be one entity for each item to be referenced.      An alternate method (rfc include) is described in the references. --><!ENTITY RFC2827 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2827.xml"><!ENTITY RFC3704 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3704.xml"><!ENTITY I-D.chown-homenet-arch SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.chown-homenet-arch.xml">]><?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?><!-- used by XSLT processors --><!-- For a complete list and description of processing instructions (PIs),      please see http://xml.resource.org/authoring/README.html. --><!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.     (Here they are set differently than their defaults in xml2rfc v1.32) --><?rfc strict="yes" ?><!-- give errors regarding ID-nits and DTD validation --><!-- control the table of contents (ToC) --><?rfc toc="yes"?><!-- generate a ToC --><?rfc tocdepth="4"?><!-- the number of levels of subsections in ToC. default: 3 --><!-- control references --><?rfc symrefs="yes"?><!-- use symbolic references tags, i.e, [RFC2119] instead of [1] --><?rfc sortrefs="yes" ?><!-- sort the reference entries alphabetically --><!-- control vertical white space      (using these PIs as follows is recommended by the RFC Editor) --><?rfc compact="yes" ?><!-- do not start each main section on a new page --><?rfc subcompact="no" ?><!-- keep one blank line between list items --><!-- end of list of popular I-D processing instructions --><rfc category="info" docName="draft-habault-gallet-homenet-multihoming-sdsa-00" ipr="pre5378Trust200902">  <!-- category values: std, bcp, info, exp, and historic     ipr values: full3667, noModification3667, noDerivatives3667     you can add the attributes updates="NNNN" and obsoletes="NNNN"      they will automatically be output with "(if approved)" -->  <!-- ***** FRONT MATTER ***** -->  <front>    <!-- The abbreviated title is used in the page header - it is only necessary if the          full title is longer than 39 characters -->    <title abbrev="SDSA">Proposal for selecting the default-route according to source address</title>    <!-- add 'role="editor"' below for the editors if appropriate -->    <!-- Another author who claims to be an editor -->    <author fullname="Guillaume Habault" initials="G.H."            surname="Habault">      <organization>Telecom Bretagne</organization>      <address>        <postal>          <street></street>          <!-- Reorder these if your country does things differently -->          <city>Rennes</city>          <region></region>          <code>35000</code>          <country>FRANCE</country>        </postal>        <phone>+33 2 99 12 7032</phone>        <email>guillaume.habault@telecom-bretagne.eu</email>        <!-- uri and facsimile elements may also be added -->      </address>    </author>      <author fullname="Laurent Toutain" initials="L.T."            surname="Toutain">      <organization>Telecom Bretagne</organization>      <address>        <postal>          <street></street>          <!-- Reorder these if your country does things differently -->          <city>Rennes</city>          <region></region>          <code>35000</code>          <country>FRANCE</country>        </postal>        <phone>+33 2 99 12 7026</phone>        <email>laurent.toutain@telecom-bretagne.eu</email>        <!-- uri and facsimile elements may also be added -->      </address>    </author>          <author fullname="Etienne Gallet de Santerre" initials="E.G."            surname="Gallet de Santerre">      <organization></organization>      <address>        <postal>          <street></street>          <!-- Reorder these if your country does things differently -->          <city>Rennes</city>          <region></region>          <code>35000</code>          <country>FRANCE</country>        </postal>        <phone></phone>        <email>etiegall@yahoo.fr</email>        <!-- uri and facsimile elements may also be added -->      </address>    </author>    <date month="February" year="2012" />    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill          in the current day for you. If only the current year is specified, xml2rfc will fill 	 in the current day and month for you. If the year is not the current one, it is 	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 	 specify just the year. -->    <!-- Meta-data Declarations -->    <area>General</area>    <!-- <workgroup>HOMENET WG</workgroup> -->    <!-- WG name at the upperleft corner of the doc,         IETF is fine for individual submissions.  	 If this element is not present, the default is "Network Working Group",         which is used by the RFC Editor as a nod to the history of the IETF. -->    <keyword>SDSA routing</keyword>    <!-- Keywords will be incorporated into HTML output         files in a meta tag but they have no effect on text or nroff         output. If you submit your draft to the RFC Editor, the         keywords will be used for the search engine. -->    <abstract>      <t>SDSA approach is to assure that packets, going out the multihomed site, have the correct source address, regarding to the ISP and thus to avoid the ingress filtering problem. In that purpose, SDSA takes into account the source address in the site routing decision for outgoing packets, when default-route is involved.</t>    </abstract>  </front>  <middle>    <section title="Introduction">      <t>Many companies are connected to the Internet through several Internet Service Providers (ISPs). This practice, known as multihoming, increases the communication capabilities of companies, enabling link-failure-resistant connection, load sharing and redundancy. In <xref target="I-D.chown-homenet-arch" /> Homenet working group is also taking multihoming into consideration for future home network which puts the ingress filtering issue of multihomed network back on the agenda. In IPv6, multihomed sites generally have several global prefixes for their networks, which means several global addresses for each end-host of a site. When these multihomed end-hosts try to communicate with another site, the communication can be filtered by the provider edge router because of ingress filtering (the packet is dropped if the ISP has not delegated the packet's source address prefix <xref target="RFC2827" />, <xref target="RFC3704" />). It results in an unjustified packet loss and a subsequent delay in packet transmission.</t>	<t>An interesting approach to solve the described ingress filtering issue is proposed in the Source Address Dependent (SAD) routing mechanism <xref target="BGRA06" />. SAD routing proposes to have several routing tables on each router, each table being dependent on one of the prefixes delegated by the ISPs. With this proposal, packets are routed to their destination through the correct ISP. However, several routing tables on each router highly increases the memory space needed for routing information. The construction and maintenance of such tables is time-consuming and all routes to site destinations are duplicate on each table. Due to their independence on the source address, this redundancy of local information is unnecessary. In order to avoid these issues and still resolve the ingress filtering issue in an IPv6 multihomed edge network, we propose the Selection of the Default-route according to the Source Address (SDSA) of a packet. SDSA enhances the routing protocol in an edge network because it takes into account the source address of a packet in the routing decision. As it does not require major modifications in edge networks, SDSA is easy to deploy and brings immediate benefits. Moreover, it could be possible to couple SDSA with other solutions (e.g. solution providing session survival) to cover all issues that multihoming rises.</t>    </section>	<section title="Proposal">		<t>SDSA approach is to assure that packets, going out the multihomed site, have the correct source address, regarding to the ISP and thus to avoid the ingress filtering problem. In that purpose, SDSA takes into account the source address in the site routing decision for outgoing packets, when default-route is involved.</t>		<section title="SDSA routers">			<t>Routers implied in the SDSA selection have two routing tables. The first one, very similar to actual routing tables, lists known destinations (site destinations and some specific external destinations advertised by ISPs) and the next hop to those destinations. This first table does not have any default route. We call this table the destination table. The second table contains all the prefixes delegated by the site's ISPs. Each prefix of this table is associated with a next hop (an SDSA router too) and drives packets along a path to the ISP, which has delegated the prefix. We call this second table the prefix table. The prefix table represents a list of different default-routes, which depend on prefixes. Such a structure has the advantage of separating the routing knowledge to the architecture knowledge. Site topology changes do not impact the prefix table (except possibly for next hop) and changes in delegated prefix do not imply a recomputation of the destination table.</t>		</section>		<section title="Packet processing">			<t>The packet processing by an SDSA router is slightly different from the processing of a classical router to take into account the source address. For all the traffic to a known destination, routers perform destination based routing. SDSA occurs only when an end-host in a multihomed site sends a packet to a destination in another site. The packet is forwarded until it reaches an SDSA router. The SDSA router processes the packet following the algorithm in Figure 1. 			<figure align="center" anchor="algorithm" title="SDSA algorithm">        			<preamble></preamble>        			<artwork align="left"><![CDATA[     Packet arrives           |           |           v+---------------------+              +-------------+| Destination address |  Best match  | Packet sent ||   comparison with   |------------->| to next hop ||     known routes    |    found     |             |+---------------------+              +-------------+           |           | No match found           |           v+---------------------+              +-------------+|    Source address   |  Best match  | Packet sent ||comparison with known|------------->| to next hop ||  delegated prefixes |    found     |             |+---------------------+              +-------------+           |           | No match found           |                      +----------------+           |                      | Packet dropped |           +--------------------->|   by ingress   |                                  |    filtering   |                                  +----------------+            ]]></artwork>        			<postamble></postamble>      			</figure>It checks the destination address and compares to all known routes (except the default route). If the destination address matches an entry, the packet is sent to the next hop and the algorithm ends. If not, the source address is checked and compared to the list of delegated prefixes. If a match is found in this list, the packet is sent to the associated next hop. If there is no match, the packet is dropped, considered as a trial of address spoofing. With this process, a packet whom destination is unknown, is routed to the ISP edge router which has delegated the source address prefix.</t>		</section>	</section>	<section title="Network routing evolution">			<t>To select the default route based on the source address, first, we need to change the routing table structure of SDSA routers to accept several default routes. Second, to populate this new routing table, the diffusion of routes has to support some modifications.</t>		<section title="Routing table strucutre">			<t>As mentionned previously, the classical routing table is separated in two complementary tables. The first one, which we called the destination table, contains all routes that we find currently in a routing table, except the default route. The entries of the destination table are mostly internal prefixes and some specific external prefixes announced by ISPs. Next hops are specified as in current routing tables. This table is used for the destination address check. The second table, called the prefix table, is populated with prefixes delegated by ISPs. Each prefix of this table has an associated next hop which will be used to route packets along a path to the ISP which has delegated the prefix. The prefix table participates in the source address check when there is no match during the destination address check. We called entries of that table, Default Source Routes (DSRs).</t>		</section>		<section title="Default Source Routes Diffusion">			<t>Each edge router announces the same information as legacy routing systems and the DSR associated with the prefix delegated by its directly connected ISP. SDSA site routers receive these announces (from different edge routers) and construct their routing destination and prefix tables.			<figure align="center" anchor="comparison" title="SDSA routing compared to classical routing">        			<preamble></preamble>        			<artwork align="left"><![CDATA[      +-------+       +-------+      | ISP A |	      | ISP B |      +-------+	      +-------+    {a::} |* 	    {b::} |x  	  |*		  |@	       +----+* 	       +----+@	    + ------------- +	       | RA |* 	       | RB |@	    | R3 classical  |       +----+* 	       +----+@	    | routing table |      /      \*       /	    \@	    |---------------|     |        \*     /	     |@	    | Dest  | NH    |+----+ 	       +----+        +----+ | ...           || R1 | ------- | R2 | -*-*-* | R3 |~| ...           |+----+ 	       +----+        +----+ | ::/0  | RB    |     |			   */@	    + ------------- +	      \			 */@	    + ------------- +       +----+		*/@	    |   R3 SDSA	    |       | R4 | ---------*+@	    | routing table |       +----+	       *|@	    |---------------|		       *|@	    | Prefix  | NH  |		   +-----------+    |   a::   | R2  |		   | IPv6 Host |    |   b::   | RB  |		   +-----------+    + ------------- +@@@@ Classical routing - Dropped by ingress filtering**** SDSA routing - Delivered to destination            ]]></artwork>        			<postamble></postamble>      			</figure>Figure 2 shows a comparison between an SDSA routing scheme and a classical one. In this example, we show routing tables of R3 only, with and without SDSA, but all routers can use the SDSA mechanism. We notice that R3 has several DSRs, each one corresponding to a default route	to a specific ISP. ISPA	(respectively ISPB ) delegates prefix a (respectively b) to RA (respectively RB). Routers RA and RB advertise their routing information (knwon routes and DSRs) to the site. SDSA routers use this routing information to populate their destination table and their prefix table. A packet to a destination address λ::1 from a source address a::1 is dropped by ISPB in a classical routing scheme (the @ path in Figure 2), whereas the packet is forwarded to router RA and sent through ISPA until its destination, in the SDSA scheme (the * path in Figure 2).</t>		</section>		<section title="Deployment of SDSA">			<t>As described in Section 2.2, if the destination address does not match any entry in the destination table, the source address is compared to DSRs. The SDSA mechanism is only efficient if SDSA routers are aware of all prefixes delegated by site ISPs. Indeed, if an SDSA router does not know all prefixes, a source address check could have no match in the prefix table even if the prefix of the source address has been delegated by one of the site ISPs. So, each SDSA router has to receive a DSR from each ISP of the site; particularly, the edge routers.As all routers involved in SDSA mechanism have to be aware of all prefixes delegated by ISPs, a necessary condition to use the SDSA mechanism is that there is a unique connected graph of SDSA routers including, at least, all edge routers (as shown in Figure 3).</t>			<figure align="center" anchor="condition" title="Necessary condition to an SDSA deployment">        			<preamble></preamble>        			<artwork align="left"><![CDATA[     +-------+              +-------+     | ISP A |	            | ISP B |     +-------+              +-------+     |       |              |       |    \      |       |              |       |     |+----+     +----+      +----+     +----+  | SDSA 	| R* |-----| R* |------| R* |-----| R* |  | area+----+     +----+      +----+     +----+  |  |   \               /          /       /  |    \        +----+          /  |     \      /               /         \  |      +----+               +----+      |  |      | R  |---------------| R  |      |  |      +----+               +----+      |  |                          /            | Classical  |                         /             |  routing+----+                +----+              |    area| R  |----------------| R  |              |+----+ 	              +----+              |                                         /R*: SDSA RouterR : Classical Router            ]]></artwork>        			<postamble></postamble>      			</figure>			<section title="Partial SDSA Site">				<t>As SDSA requires router modifications in a site, it must be progressively deployable. In that purpose, SDSA does not need to be run on all site routers immediately and brings benefits even if few routers are using it.</t><t>In a partial deployment scheme, all routers are not using the SDSA mechanism, but it is possible to go to one edge router to another along a path of SDSA routers (see Figure 3). A packet sent by a terminal host to an external destination is potentially processed by a router that does not use SDSA. Following the default route of each classical router, the packet is necessarily forwarded to an SDSA router. Then, the packet is routed by this SDSA router to the appropriate edge router (associated with the source address prefix). An evident drawback of this deployment method is that the path followed by the packet from source to edge router is not necessarly the shortest. The worst case occurs when the packet is routed by classical routers to an inappropriate edge router. Then, this edge router uses the SDSA mechanism to forward the packet on a path to the correct edge router. This increases the delay to deliver the packet to the destination. On the other hand, considering that, without SDSA, the packet would have been dropped by ingress filtering at ISP edge router, the deployment of SDSA in the site remains a positive evolution.</t>			</section>			<section title="Total SDSA Site">				<t>In a total SDSA deployment scheme, all routers use SDSA, and are aware of ISP prefixes. A packet sent by a site machine to an external destination is directly pro- cessed by an SDSA router. Therefore, the packet is forwarded along a route to the edge router which has advertised the prefix of the packet source address. Thus, the path followed by the packet from the source to correct ISP edge router is the best possible as the SDSA process is made as close as possible to the source.</t><t>The total SDSA deployment scheme not only solves the ingress filtering issue, but also makes internal routing as efficient as with current routing protocols.</t>			</section>		</section>	</section>	<section anchor="simple_list" title="SDSA Analysis">		<t>According to <xref target="WVTP97" />, the Buildup Time Complexity (BTC) of a table containing n entries of length k is in O(nk). The Space/Memory Complexity (SMC) of such a table is in O(n). Compared to a classical router, an SDSA has two tables to construct and update. We call k (resp. l) the length of a destination table item (resp. prefix table item), m the number of ISPs and n the number of advertised routes. We can make the assumption that k ~ l and that m &le; n. For the SDSA proposal, the complexity is the sum of each table complexity. Consequently, the SDSA BTC and SMC are given by:</t>				<t><list style="empty">			          <t>BTCSDSA =O(ml+nk)=O(nk)	(1)</t>			          <t>SMCSDSA = O(m + n) = O(n)	(2)</t>			        </list>The time complexity of the construction and the update of SDSA tables is equivalent to current complexity.</t>	</section>	    <section anchor="IANA" title="IANA Considerations">      <t>TBD</t>    </section>    <section anchor="Security" title="Security Considerations">      <t>TBD</t>    </section>        <section anchor="acknowledgement" title="Acknowledgement">      <t>The work presented in this draft has been realized by Etienne Gallet de Santere in the preparation of his thesis. The result of his research and his thesis has never been published. However, regarding the growing interest in multihoming, it seems important to present his research all the more so implementation has already been realized.</t>    </section>  </middle>  <!--  *****BACK MATTER ***** -->  <back>    <!-- References split into informative and normative -->    <!-- There are 2 ways to insert reference entries from the citation libraries:     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")     Both are cited textually in the same manner: by using xref elements.     If you use the PI option, xml2rfc will, by default, try to find included files in the same     directory as the including file. You can also define the XML_LIBRARY environment variable     with a value containing a set of directories to search.  These can be either in the local     filing system or remote ones accessed by http (http://domain/dir/... ).-->    <references title="Normative References">      &RFC2827;      &RFC3704;      <reference anchor="WVTP97">        <!-- the following is the minimum to make xml2rfc happy -->        <front>          <title>Scalable high speed ip routing lookups</title>          <author initials="M.W." surname="Waldvogel">            <organization></organization>          </author>          <author initials="G.V." surname="Varghese">            <organization></organization>          </author>          <author initials="J.T." surname="Turner">            <organization></organization>          </author>          <author initials="B.P." surname="Plattner">            <organization></organization>          </author>          <date year="1997" />        </front>      </reference>            <reference anchor="BGRA06">        <!-- the following is the minimum to make xml2rfc happy -->        <front>          <title>End-site routing support for IPv6 multihoming</title>          <author initials="M.B." surname="Bagnulo">            <organization></organization>          </author>          <author initials="A.G." surname="Garcia-Martinez">            <organization></organization>          </author>          <author initials="J.R." surname="Rodriguez">            <organization></organization>          </author>          <author initials="A.A." surname="Azcorra">            <organization></organization>          </author>          <date year="2006" />        </front>      </reference>    </references>    <references title="Informative References">      <!-- Here we use entities that we defined at the beginning. -->      &I-D.chown-homenet-arch;      <!-- A reference written by by an organization not a person. -->    </references>    <!-- Change Logv00 2006-03-15  EBD   Initial versionv01 2006-04-03  EBD   Moved PI location back to position 1 -                      v3.1 of XMLmind is better with them at this location.v02 2007-03-07  AH    removed extraneous nested_list attribute,                      other minor correctionsv03 2007-03-09  EBD   Added comments on null IANA sections and fixed heading capitalization.                      Modified comments around figure to reflect non-implementation of                      figure indent control.  Put in reference using anchor="DOMINATION".                      Fixed up the date specification comments to reflect current truth.v04 2007-03-09 AH     Major changes: shortened discussion of PIs,                      added discussion of rfc include.v05 2007-03-10 EBD    Added preamble to C program example to tell about ABNF and alternative                       images. Removed meta-characters from comments (causes problems).  -->  </back></rfc>