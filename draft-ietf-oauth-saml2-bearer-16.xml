<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<?xml-stylesheet type='text/xsl' 'rfc2629.xslt ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->                                                                                         
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std"
     docName="draft-ietf-oauth-saml2-bearer-16"
     ipr="trust200902">
    <!-- category values: std, bcp, info, exp, and historic
ipr values: full3667, noModification3667, noDerivatives3667
you can add the attributes updates="NNNN" and obsoletes="NNNN"
they will automatically be output with "(if approved)" -->

    <!-- ***** FRONT MATTER ***** -->

    <front>
        <!-- The abbreviated title is used in the page header - it is only necessary if the
 full title is longer than 39 characters -->

        <title abbrev="OAuth SAML Assertion Profiles">SAML 2.0 Profile for OAuth 2.0 Client Authentication and Authorization Grants</title>

        <!-- add 'role="editor"' below for the editors if appropriate -->
        <author fullname="Brian Campbell" initials="B." surname="Campbell">
            <organization abbrev="Ping Identity">Ping Identity Corp.</organization>
          
            <address>
                <email>brian.d.campbell@gmail.com</email>
            </address>
        </author>

        <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
            <organization abbrev="Salesforce">Salesforce.com</organization>
            <address>
                <email>cmortimore@salesforce.com</email>
            </address>
        </author>

	<author fullname="Michael B. Jones" surname="Jones" initials="M.B.">
	  <organization>Microsoft</organization>
	  <address>
	    <email>mbj@microsoft.com</email>
	    <uri>http://self-issued.info/</uri>
	  </address>
	</author>

        <date year="2013"/>

        <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
           in the current day for you. If only the current year is specified, xml2rfc will fill
       in the current day and month for you. If the year is not the current one, it is
       necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
       purpose of calculating the expiry date).  With drafts it is normally sufficient to
       specify just the year. -->

        <!-- Meta-data Declarations -->

        <area>Security</area>

        <workgroup>OAuth Working Group</workgroup>

        <!-- WG name at the upperleft corner of the doc,
IETF is fine for individual submissions.
If this element is not present, the default is "Network Working Group",
which is used by the RFC Editor as a nod to the history of the IETF. -->

        <keyword>OAuth</keyword>
        <keyword>SAML</keyword>
        <keyword>Assertion</keyword>


        <!-- Keywords will be incorporated into HTML output
files in a meta tag but they have no effect on text or nroff
output. If you submit your draft to the RFC Editor, the
keywords will be used for the search engine. -->

        <abstract>
            <t>This specification defines the use of a SAML 2.0 Bearer Assertion as a means for requesting an OAuth 2.0 access
                token as well as for use as a means of client authentication.
            </t>
        </abstract>
    </front>

    <middle>
        <section title="Introduction">

            <t>The Security Assertion Markup Language (SAML) 2.0 <xref target="OASIS.saml-core-2.0-os"/>
                is an XML-based framework that allows identity and security information to be shared across security domains.
                The SAML specification, while primarily targeted at providing cross domain Web browser single sign-on,
                was also designed to be modular and extensible to facilitate use in other contexts.
            </t>

            <t>    
              The Assertion, an XML security token, is a fundamental construct of SAML that is often adopted
                for use in other protocols and specifications.
                An Assertion is generally issued by an identity provider and consumed by a service provider who relies
                on its content to identify the Assertion's subject for security related purposes.
            </t>

            <t>
                The OAuth 2.0 Authorization Framework <xref target="RFC6749"/> provides
                a method for making authenticated HTTP requests to a resource using an access token.
                Access tokens are issued to third-party clients by an
                authorization server (AS) with the (sometimes implicit) approval of the resource owner.
                In OAuth, an authorization grant is an abstract term used to describe
                intermediate credentials that represent the resource owner
                authorization.  An authorization grant is used by the client to obtain an access token.
                Several authorization grant types are defined to support a wide range
                of client types and user experiences.
                OAuth also allows for the definition of new extension grant types
                to support additional clients or to provide a bridge between OAuth and other trust frameworks.
                Finally, OAuth allows the definition of additional authentication mechanisms to be used by clients when interacting with the authorization server.
            </t>

            <t>
	      The Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants
	      <xref target="I-D.ietf-oauth-assertions"/> specification
	      is an abstract extension to OAuth 2.0 that provides a general
	      framework for the use of Assertions as client credentials and/or authorization grants with OAuth 2.0.
	      This specification profiles the
	      Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants
	      <xref target="I-D.ietf-oauth-assertions"/> specification
               to define an extension grant type that uses a SAML 2.0 Bearer Assertion to
               request an OAuth 2.0 access token as well as for use as client credentials.
               The format and processing rules for the SAML Assertion defined in this specification are intentionally similar,
               though not identical, to those in the Web Browser SSO Profile defined in
	       the SAML Profiles <xref target="OASIS.saml-profiles-2.0-os"/> specification.
               This specification is reusing, to the extent reasonable, concepts and patterns from that well-established Profile.
            </t>

            <t>This document defines how a SAML Assertion can be used to request an access token when a client wishes to utilize an existing trust
               relationship, expressed through the semantics of
	       (and digital signature or keyed message digest calculated over) the SAML Assertion,
               without a direct user approval step at the authorization server.  It also defines how a SAML Assertion can be used as a client authentication mechanism.
               The use of an Assertion for client
               authentication is orthogonal to and separable from using an Assertion as an
               authorization grant.  They can be used either in combination or separately.
               Client assertion authentication is nothing more than an alternative way for a client to authenticate
               to the token endpoint and must be used in conjunction with some grant type to form a complete and
               meaningful protocol request. Assertion authorization grants may be used with or without client authentication
               or identification. Whether or not client authentication is needed in conjunction with an assertion authorization
               grant, as well as the supported types of client authentication, are policy decisions at the discretion of the authorization server.
            </t>
            <t>The process by which the client obtains the SAML Assertion, prior to exchanging it with the authorization server or using it for client authentication, is out of scope.</t>

            <section title="Notational Conventions">
                <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
                    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
                    document are to be interpreted as described in RFC 2119 <xref target="RFC2119"/>.
                </t>
                <t>
                    Unless otherwise noted, all the protocol parameter names and values are case sensitive.
                </t>
            </section>

	    <section title='Terminology'>
	      <t>
		All terms are as defined in
		The OAuth 2.0 Authorization Framework <xref target="RFC6749"/>,
		the Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants
		<xref target="I-D.ietf-oauth-assertions"/>,
		and the Security Assertion Markup Language (SAML) 2.0 <xref target="OASIS.saml-core-2.0-os"/>
		specifications.
	      </t>
	    </section>

        </section>
        <section title="HTTP Parameter Bindings for Transporting Assertions">
            <t>
              The Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants
	      <xref target="I-D.ietf-oauth-assertions"/> specification
	      defines generic HTTP parameters for transporting Assertions
	      during interactions with a token endpoint.
              This section defines specific parameters and treatments of those parameters
	      for use with SAML 2.0 Bearer Assertions.
            </t>
            <section title="Using SAML Assertions as Authorization Grants">
              <t>
		To use a SAML Bearer Assertion as an authorization grant, use an access token request as defined in
                Section 4 of the
	        Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants
	        <xref target="I-D.ietf-oauth-assertions"/> specification
		with the following specific parameter values and encodings.
	      </t>
              <t>The value of the <spanx style='verb'>grant_type</spanx> parameter MUST be
	      <spanx style='verb'>urn:ietf:params:oauth:grant-type:saml2-bearer</spanx>.</t>
              <t>
                The value of the <spanx style='verb'>assertion</spanx> parameter
		MUST contain a single SAML 2.0 Assertion. The SAML Assertion XML data
		MUST be encoded using base64url,
                where the encoding adheres to the definition in Section 5 of RFC 4648 <xref target="RFC4648"/>
                and where the padding bits are set to zero.
                To avoid the need for subsequent encoding steps
		(by "application/x-www-form-urlencoded" <xref target='W3C.REC-html401-19991224'/>, for example),
                the base64url encoded data SHOULD NOT be line wrapped and pad characters ("=") SHOULD NOT be included.
              </t>
              <t>
		The <spanx style='verb'>scope</spanx> parameter may be used, as defined in the
		Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants
		<xref target="I-D.ietf-oauth-assertions"/> specification, to indicate the requested scope.
	      </t>
              <t>Authentication of the client is optional, as described in
                Section 3.2.1 of OAuth 2.0 <xref target="RFC6749"/> and
                consequently, the <spanx style='verb'>client_id</spanx> is only needed
                when a form of client authentication that relies on the parameter is used.</t>

              <t>The following non-normative example demonstrates an Access Token Request with an assertion as
                 an authorization grant
	(with extra line breaks for display purposes only):</t>

        <figure>
          <artwork><![CDATA[
  POST /token.oauth2 HTTP/1.1
  Host: as.example.com
  Content-Type: application/x-www-form-urlencoded

  grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-bearer&
  assertion=PHNhbWxwOl...[omitted for brevity]...ZT4
]]></artwork>
        </figure>

            </section>
            <section title="Using SAML Assertions for Client Authentication">
              <t>To use a SAML Bearer Assertion for client authentication, use the following parameter values and encodings.</t>
              <t>The value of the <spanx style='verb'>client_assertion_type</spanx> parameter MUST be
	      <spanx style='verb'>urn:ietf:params:oauth:client-assertion-type:saml2-bearer</spanx>.</t>
              <t>
                The value of the <spanx style='verb'>client_assertion</spanx> parameter
		MUST contain a single SAML 2.0 Assertion. The SAML Assertion XML data
		MUST be encoded using base64url,
                where the encoding adheres to the definition in Section 5 of RFC 4648 <xref target="RFC4648"/>
                and where the padding bits are set to zero.
                To avoid the need for subsequent encoding steps
		(by "application/x-www-form-urlencoded" <xref target='W3C.REC-html401-19991224'/>, for example),
                the base64url encoded data SHOULD NOT be line wrapped and pad characters ("=") SHOULD NOT be included.
              </t>

              <t>The following non-normative example demonstrates a client
                authenticating using an assertion during the presentation of an authorization code grant in an
                Access Token Request
                (with extra line breaks for display purposes only):</t>

        <figure>
          <artwork><![CDATA[
  POST /token.oauth2 HTTP/1.1
  Host: as.example.com
  Content-Type: application/x-www-form-urlencoded

  grant_type=authorization_code&
  code=vAZEIHjQTHuGgaSvyW9hO0RpusLzkvTOww3trZBxZpo&
  client_assertion_type=urn%3Aietf%3Aparams%3Aoauth
  %3Aclient-assertion-type%3Asaml2-bearer&
  client_assertion=PHNhbW...[omitted for brevity]...ZT
]]></artwork>
        </figure>

            </section>
        </section>

        <section anchor="assertion_reqs" title="Assertion Format and Processing Requirements">
                <t>
                  In order to issue an access token response as described in
		  OAuth 2.0 <xref target="RFC6749"/>
                  or to rely on an Assertion for client authentication,
                  the authorization server MUST validate the Assertion according to the criteria below.
                  Application of additional restrictions and policy are at the discretion of the authorization server.
                </t>
                <t>
                    <list style="numbers">
                        <t>The Assertion's &lt;Issuer&gt; element MUST contain a unique identifier for the entity that
                            issued the Assertion. 
                        </t>
                        <t>The Assertion MUST contain a &lt;Conditions&gt; element with an &lt;AudienceRestriction&gt; element with an &lt;Audience&gt;
                            element that identifies the
                            authorization server as an intended audience. Section 2.5.1.4 of
			    Assertions and Protocols for the OASIS Security Assertion Markup Language
			    <xref target="OASIS.saml-core-2.0-os"/>
			    defines the &lt;AudienceRestriction&gt; and &lt;Audience&gt; elements and, in addition to the
                            URI references discussed there, the token endpoint URL of the authorization server MAY be used as a URI that identifies the authorization server as an intended audience.
                            Assertions that do not identify the Authorization Server as an intended audience MUST be rejected.
                        </t>
                        <t>The Assertion MUST contain a &lt;Subject&gt; element. The subject MAY identify the resource owner for
                            Additional information identifying the subject/principal of the transaction MAY be included in an &lt;AttributeStatement&gt;.
                          <list style="letters">
                            <t>When using an Assertion as an authorization grant, the Subject SHOULD identify
			    an authorized accessor for whom the access token is being requested
			    (typically the resource owner, or an authorized delegate).</t>

                            <t>
			      For client authentication, the Subject MUST be the
			      <spanx style='verb'>client_id</spanx> of the OAuth client.
			    </t>
                          </list>
                        </t>
                        <t>
                          The Assertion MUST have an expiry that limits the time window during which it can be used.
                          The expiry can be expressed either as the NotOnOrAfter attribute
                          of the &lt;Conditions&gt; element or as the NotOnOrAfter attribute of a suitable &lt;SubjectConfirmationData&gt; element.

                        </t>

                        <t>
                        The &lt;Subject&gt; element MUST contain at least one &lt;SubjectConfirmation&gt;
                        element that allows the authorization server to confirm it as a Bearer Assertion.
                        Such a &lt;SubjectConfirmation&gt; element MUST have a Method attribute with a value of
                        <spanx style='verb'>urn:oasis:names:tc:SAML:2.0:cm:bearer</spanx>.
			The &lt;SubjectConfirmation&gt; element MUST contain a &lt;SubjectConfirmationData&gt; element, unless the Assertion has a suitable NotOnOrAfter
                        attribute on the &lt;Conditions&gt; element, in which case the &lt;SubjectConfirmationData&gt; element MAY be omitted.
                        When present, the &lt;SubjectConfirmationData&gt; element MUST have a Recipient attribute with a value
                        indicating the token endpoint URL of the authorization server (or an acceptable alias). The authorization server MUST
                        verify that the value of the Recipient attribute matches the token endpoint
                        URL (or an acceptable alias) to which the Assertion was delivered.
                        The &lt;SubjectConfirmationData&gt; element MUST have a NotOnOrAfter attribute
                        that limits the window during which the Assertion can be confirmed.
                        The &lt;SubjectConfirmationData&gt; element MAY also contain an Address attribute limiting
                        the client address from which the Assertion can be delivered.
                        Verification of the Address is at the discretion of the authorization server.
                        </t>

                        <t>
                        The authorization server
                        MUST verify that the NotOnOrAfter instant has not passed, subject to allowable clock skew between systems.
                        An invalid NotOnOrAfter instant on the &lt;Conditions&gt; element invalidates the entire Assertion.
                        An invalid NotOnOrAfter instant on a &lt;SubjectConfirmationData&gt; element only invalidates the individual &lt;SubjectConfirmation&gt;.
                        The authorization server MAY reject Assertions with a NotOnOrAfter instant that is unreasonably far in the future.
                        The authorization server MAY ensure that Bearer Assertions are not replayed, by maintaining
                        the set of used ID values for the length of time for which the Assertion would be considered
                        valid based on the applicable NotOnOrAfter instant.
                        </t>

                        <t>If the Assertion issuer authenticated the subject, the Assertion SHOULD contain a single &lt;AuthnStatement&gt;
                            representing that authentication event.
                        </t>
                        <t>If the Assertion was issued with the intention that the presenter act autonomously on behalf of
                            the subject, an &lt;AuthnStatement&gt; SHOULD NOT be included.
                            The presenter SHOULD be identified in the &lt;NameID&gt; or similar element in the &lt;SubjectConfirmation&gt; element, or by other available means like
			    SAML V2.0 Condition for Delegation Restriction <xref target="OASIS.saml-deleg-cs"/>.
                        </t>
                        <t>
                            Other statements, in particular &lt;AttributeStatement&gt; elements, MAY be included in the
                            Assertion.
                        </t>

                        <t>
			  The Assertion MUST be digitally signed or have a keyed message digest applied
			  by the issuer.  The authorization server
			  MUST reject assertions with an invalid signature or keyed message digest.
                        </t>
                        <t>Encrypted elements MAY appear in place of their plain text counterparts as defined in
                            <xref target="OASIS.saml-core-2.0-os"/>.
                        </t>
                        <t>The authorization server MUST verify that the Assertion is valid in all other respects per
                            <xref target="OASIS.saml-core-2.0-os"/>, such as (but not limited to) evaluating all content within the Conditions element including the NotOnOrAfter and NotBefore attributes, rejecting unknown condition types, etc.
                        </t>
                    </list>
                </t>

                <section title="Authorization Grant Processing">

                  <t>
		    Assertion authorization grants may be used with or without client authentication
		    or identification. Whether or not client authentication is needed in
		    conjunction with an assertion authorization grant, as well as the supported types
		    of client authentication, are policy decisions at the discretion of the
		    authorization server. However, if client credentials are present in
		    the request, the authorization server MUST validate them.
                  </t>

                    <t>If the Assertion is not valid, or its subject confirmation requirements cannot be met, the
                    authorization server MUST construct an error response as defined in
		    OAuth 2.0 <xref target="RFC6749"/>.
                    The value of the <spanx style='verb'>error</spanx> parameter MUST be the
		    <spanx style='verb'>invalid_grant</spanx> error code. The authorization server
                    MAY include additional information regarding the reasons the Assertion was considered invalid using the
                    <spanx style='verb'>error_description</spanx> or <spanx style='verb'>error_uri</spanx> parameters.
                          <figure>
                              <preamble>For example:</preamble>
                                <artwork><![CDATA[
  HTTP/1.1 400 Bad Request
  Content-Type: application/json
  Cache-Control: no-store

  {
    "error":"invalid_grant",
    "error_description":"Audience validation failed"
  }
]]></artwork>
                            </figure>
                  </t>
                </section>

                <section title="Client Authentication Processing">

                  <t>If the client Assertion is not valid, or its subject confirmation requirements cannot be met, the
                  authorization server MUST construct an error response as defined in
		  OAuth 2.0 <xref target="RFC6749"/>.
                  The value of the <spanx style='verb'>error</spanx> parameter MUST be the
		  <spanx style='verb'>invalid_client</spanx> error code. The authorization server
                  MAY include additional information regarding the reasons the Assertion was considered invalid using the
                  <spanx style='verb'>error_description</spanx> or <spanx style='verb'>error_uri</spanx> parameters.

            </t>
          </section>

            </section>

             <section anchor="example" title="Authorization Grant Example">
                <t>Though non-normative, the following examples illustrate what a conforming Assertion and access token request would look like.
                </t>
               <t>
		 The example shows an assertion issued and signed by the SAML Identity Provider identified as
		 <spanx style='verb'>https://saml-idp.example.com</spanx>.
                 The subject of the assertion is identified by email address as <spanx style='verb'>brian@example.com</spanx>,
		 who authenticated
                 to the Identity Provider by means of a digital signature where the key was validated as part of an X.509 Public Key Infrastructure.
                 The intended audience of the assertion is <spanx style='verb'>https://saml-sp.example.net</spanx>,
		 which is an identifier for a SAML Service Provider with which the authorization server identifies itself.
		 The assertion is sent as part of an access token request to the authorization server's
		 token endpoint at <spanx style='verb'>https://authz.example.net/token.oauth2</spanx>.
               </t>
      <figure title='Example SAML 2.0 Assertion' anchor='assertion'>
          <preamble>
              Below is an example SAML 2.0 Assertion (whitespace formatting is for
              display purposes only):

          </preamble>
                <artwork><![CDATA[
  <Assertion IssueInstant="2010-10-01T20:07:34.619Z"
    ID="ef1xsbZxPV2oqjd7HTLRLIBlBb7"
    Version="2.0"
    xmlns="urn:oasis:names:tc:SAML:2.0:assertion">
   <Issuer>https://saml-idp.example.com</Issuer>
   <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
    [...omitted for brevity...]
   </ds:Signature>
   <Subject>
    <NameID
      Format="urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress">
     brian@example.com
    </NameID>
    <SubjectConfirmation
      Method="urn:oasis:names:tc:SAML:2.0:cm:bearer">
     <SubjectConfirmationData
       NotOnOrAfter="2010-10-01T20:12:34.619Z"
       Recipient="https://authz.example.net/token.oauth2"/>
     </SubjectConfirmation>
    </Subject>
    <Conditions>
      <AudienceRestriction>
        <Audience>https://saml-sp.example.net</Audience>
      </AudienceRestriction>
    </Conditions>
    <AuthnStatement AuthnInstant="2010-10-01T20:07:34.371Z">
      <AuthnContext>
        <AuthnContextClassRef>
          urn:oasis:names:tc:SAML:2.0:ac:classes:X509
        </AuthnContextClassRef>
      </AuthnContext>
    </AuthnStatement>
  </Assertion>
]]></artwork>
              </figure>
                <figure anchor="http" title="Example Request">
            <preamble>
              To present the Assertion shown in the previous example as part of an access token request, for example,
               the client might make the following HTTPS request
	       (with extra line breaks for display purposes only):
            </preamble>
            <artwork><![CDATA[
  POST /token.oauth2 HTTP/1.1
  Host: authz.example.net
  Content-Type: application/x-www-form-urlencoded

  grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
  bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
  [...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork>
          </figure>
            </section>

	<section anchor="Interoperability" title="Interoperability Considerations">
	  <t>
	    Agreement between system entities regarding identifiers,
	    keys, and endpoints is required in order to achieve interoperable
	    deployments of this profile. Specific items that require agreement are as follows:
	    values for the issuer and audience identifiers, the location of the token endpoint, and the key used to
	    apply and verify the digital signature over the assertion.
	    The exchange of such information is explicitly out
	    of scope for this specification and typical deployment of it will be done
	    alongside existing SAML Web SSO deployments that have already established a means of
	    exchanging such information.
	    Metadata for the OASIS Security Assertion Markup Language (SAML) V2.0
	    <xref target="OASIS.saml-metadata-2.0-os"/>
	    is one common method of exchanging SAML related information about system entities.
	  </t>

	</section>

        <section anchor="Security" title="Security Considerations">
            <!--<t>All drafts are required to have a security considerations section.
                See
                <xref target="RFC3552">RFC 3552</xref>
                for a guide.
            </t>   -->
          <t>
	    No additional security considerations apply beyond those described within
	    The OAuth 2.0 Authorization Framework <xref target="RFC6749"/>,
	    the Assertion Framework for OAuth 2.0 Client Authentication and Authorization Grants
	    <xref target="I-D.ietf-oauth-assertions"/>,
	    and the Security and Privacy Considerations
	    for the OASIS Security Assertion Markup Language (SAML) V2.0
	    <xref target="OASIS.saml-sec-consider-2.0-os"/>
	    specifications.
	  </t>
          <!-- "8. Security considerations - you could probably just refer to the core
            OAuth spec and to the SAML spec here, but see RFC 3552 for insights."  - Peter Saint-Andre -->
        </section>

        <section title='IANA Considerations'>
          <section title='Sub-Namespace Registration of urn:ietf:params:oauth:grant-type:saml2-bearer'>
            <t>
              This is a request to IANA to please register the value
	      <spanx style='verb'>grant-type:saml2-bearer</spanx> in the
	      registry urn:ietf:params:oauth established in
	      An IETF URN Sub-Namespace for OAuth <xref target="RFC6755"/>.

              <list style='symbols'>
                <t>URN: urn:ietf:params:oauth:grant-type:saml2-bearer</t>
                <t>Common Name: SAML 2.0 Bearer Assertion Grant Type Profile for OAuth 2.0</t>
                <t>Change controller: IETF</t>
                <t>Specification Document: [[this document]]</t>
              </list>
            </t>
          </section>
          <section title='Sub-Namespace Registration of urn:ietf:params:oauth:client-assertion-type:saml2-bearer'>
            <t>
              This is a request to IANA to please register the value
	      <spanx style='verb'>client-assertion-type:saml2-bearer</spanx> in the
	      registry urn:ietf:params:oauth established in
	      An IETF URN Sub-Namespace for OAuth <xref target="RFC6755"/>.

              <list style='symbols'>
                <t>URN: urn:ietf:params:oauth:client-assertion-type:saml2-bearer</t>
                <t>Common Name: SAML 2.0 Bearer Assertion Profile for OAuth 2.0 Client Authentication </t>
                <t>Change controller: IETF</t>
                <t>Specification Document: [[this document]]</t>
              </list>
            </t>
          </section>
        </section>
    </middle>                                                                                           


  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- see http://www.rfc-editor.org/policy.html#policy.refs -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
	 1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
	 2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
	 (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

Both are cited textually in the same manner: by using xref elements.
If you use the PI option, xml2rfc will, by default, try to find included files in the same
directory as the including file. You can also define the XML_LIBRARY environment variable
with a value containing a set of directories to search.  These can be either in the local
filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6749.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.6755.xml' ?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml2/reference.OASIS.saml-core-2.0-os.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-assertions-10.xml' ?>

    </references>
    <references title="Informative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml2/reference.OASIS.saml-sec-consider-2.0-os.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml2/reference.OASIS.saml-profiles-2.0-os.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml2/reference.OASIS.saml-metadata-2.0-os.xml' ?>
      <reference anchor="OASIS.saml-deleg-cs">
        <front>
          <title abbrev='SAML2 DEL'>SAML V2.0 Condition for Delegation Restriction</title>
          <author initials='S.' surname='Cantor' fullname='Scott Cantor' role='editor'/>
          <date year="2009" month="Nov"/>
        </front>
        <format type='HTML' target='http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-delegation-cs-01.html'/>
      </reference>
    </references>

    <section title='Acknowledgements'>
      <t>
	The following people contributed wording and concepts to this document:
	Paul Madsen, Patrick Harding, Peter Motykowski, Eran Hammer, Peter Saint-Andre,
	Ian Barnett, Eric Fazendin, Torsten Lodderstedt, Susan Harper, Scott Tomilson,
	Scott Cantor, Hannes Tschofenig, David Waite,
	Phil Hunt, and Mukesh Bhatnagar.
      </t>
    </section>
    <section title='Document History'>
      <t>
	[[ to be removed by RFC editor before publication as an RFC ]]
      </t>
      <t>
        draft-ietf-oauth-saml2-bearer-16
        <list style='symbols'>
          <t>
	    Changed title from "SAML 2.0 Bearer Assertion Profiles for OAuth 2.0"
	    to "SAML 2.0 Profile for OAuth 2.0 Client Authentication and Authorization Grants"
	    to be more explicit about the scope of the document per
	    http://www.ietf.org/mail-archive/web/oauth/current/msg11063.html.
	  </t>
          <t>
	    Fixed typo in text identifying the presenter from "or similar element, the"
	    to "or similar element in the".
	  </t>
          <t>
	    Numbered the list of processing rules.
	  </t>
          <t>
	    Smallish editorial cleanups to try and improve readability and comprehensibility.
	  </t>
          <t>
	    Cleaner split out of the processing rules in cases where they differ
	    for client authentication and authorization grants.
	  </t>
          <t>
	    Clarified the parameters that are used/available for authorization grants.
	  </t>
          <t>
	    Added Interoperability Considerations section and info reference to SAML Metadata.
	  </t>
          <t>
	    Added more explanatory context to the example in Section 4.
	  </t>
        </list>
      </t>
      <t>
        draft-ietf-oauth-saml2-bearer-15
        <list style='symbols'>
          <t>Reference RFC 6749 and RFC 6755.</t>
          <t>Update draft-ietf-oauth-assertions reference to -06.</t>
          <t>Remove extraneous word per http://www.ietf.org/mail-archive/web/oauth/current/msg10055.html</t>
        </list>
      </t>
      <t>
        draft-ietf-oauth-saml2-bearer-14
            <list style='symbols'>
              <t>Add more text to intro explaining that an assertion grant type can be used with or without client
                authentication/identification and that client assertion authentication is nothing more than an alternative way for a client to authenticate to the token endpoint</t>
              <t>Add examples to Sections 2.1 and 2.2</t>
              <t>Update references</t>
            </list>
      </t>
       <t>
        draft-ietf-oauth-saml2-bearer-13
            <list style='symbols'>
              <t>Update references: oauth-assertions-04, oauth-urn-sub-ns-05, oauth -28</t>
              <t>Changed "Description" to "Specification Document" in both registration requests in IANA Considerations per changes to the template in ietf-oauth-urn-sub-ns(-03)</t>
              <t>Added "(or an acceptable alias)" so that it's in both sentences about Recipient and the token endpoint URL so there's no ambiguity</t>
              <t>Update area and workgroup (now Security and OAuth was Internet and nothing)</t>
            </list>
      </t>
      <t>
	draft-ietf-oauth-saml2-bearer-12
        <list style='symbols'>
          <t>updated reference to draft-ietf-oauth-v2 from -25 to -26 and draft-ietf-oauth-assertions from -02 to -03</t>
        </list>
      </t>
      <t>
	draft-ietf-oauth-saml2-bearer-11
	<list style='symbols'>
	  <t>Removed text about limited lifetime access tokens
	  and the SHOULD NOT on issuing refresh tokens.  The text
	  was moved to draft-ietf-oauth-assertions-02 and
	  somewhat modified per
	  http://www.ietf.org/mail-archive/web/oauth/current/msg08298.html.</t>
	  <t>Fixed typo/missing word per
	  http://www.ietf.org/mail-archive/web/oauth/current/msg08733.html.</t>
	  <t>Added Terminology section.</t>
	</list>
      </t>
      <t>
	draft-ietf-oauth-saml2-bearer-10
	<list style='symbols'>
	  <t>fix a spelling mistake</t>
	</list>
      </t>
      <t>
	draft-ietf-oauth-saml2-bearer-09
	<list style='symbols'>
	  <t>Attempt to address an ambiguity around validation requirements when the Conditions element contain a NotOnOrAfter and SubjectConfirmation/SubjectConfirmationData does too.  Basically it needs to have at least one bearer SubjectConfirmation element but that element can omit SubjectConfirmationData, if Conditions has an expiry on it. Otherwise, a valid SubjectConfirmation must have a SubjectConfirmationData with Recipient and NotOnOrAfter.  And any SubjectConfirmationData that has those elements needs to have them checked. </t>
	  <t>clarified that AudienceRestriction is under Conditions (even though it's implied by schema)</t>               
	  <t>fix a typo</t>
	</list>
      </t>
      <t>
	draft-ietf-oauth-saml2-bearer-08
	<list style='symbols'>
	  <t>fix some typos</t>
	</list>
      </t>
      <t>
	draft-ietf-oauth-saml2-bearer-07
	<list style='symbols'>
	  <t>update reference from draft-campbell-oauth-urn-sub-ns to draft-ietf-oauth-urn-sub-ns</t>
	  <t>Updated to reference draft-ietf-oauth-v2-20</t>
	</list>
      </t>
      <t>
	draft-ietf-oauth-saml2-bearer-06
	<list style='symbols'>
	  <t>Fix three typos NamseID->NameID and (2x) Namspace->Namespace</t>
	</list>
      </t>
      <t>
	draft-ietf-oauth-saml2-bearer-05
	<list style='symbols'>
	  <t>Allow for subject confirmation data to be optional when Conditions contain audience and NotOnOrAfter</t>
	  <t>
	    Rework most of the spec to profile draft-ietf-oauth-assertions for both authn and authz including (but not limited to):
	    <list style='symbols'>
	      <t>remove requirement for issuer to be urn:oasis:names:tc:SAML:2.0:nameid-format:entity</t>
	      <t>change wording on Subject requirements</t>
	    </list>
	  </t>
	  <t>using a MAY, explicitly say that the Audience can be token endpoint URL of the authorization server</t>
	  <t>Change title to be more generic (allowing for client authn too)</t>
	  <t>added client authentication to the abstract</t>
	  <t>register and use urn:ietf:params:oauth:grant-type:saml2-bearer for grant type rather than http://oauth.net/grant_type/saml/2.0/bearer</t>
	  <t>register urn:ietf:params:oauth:client-assertion-type:saml2-bearer</t>
	  <t>remove scope parameter as it is defined in http://tools.ietf.org/html/draft-ietf-oauth-assertions</t>
	  <t>remove assertion param registration because it [should] be in http://tools.ietf.org/html/draft-ietf-oauth-assertions</t> 
	  <t>fix typo(s) and update/add references</t>
	</list>
      </t>
      <t>
	draft-ietf-oauth-saml2-bearer-04
	<list style='symbols'>
	  <t>
	    Changed the grant_type URI from "http://oauth.net/grant_type/assertion/saml/2.0/bearer" to
	    "http://oauth.net/grant_type/saml/2.0/bearer" - dropping the word assertion from the path.
	    Recent versions of draft-ietf-oauth-v2 no longer refer to extension grants using the word assertion so
	    this URI is more reflective of that.  It also more closely aligns with the grant type URI in
	    draft-jones-oauth-jwt-bearer-00 which is "http://oauth.net/grant_type/jwt/1.0/bearer".
	  </t>
	  <t>Added "case sensitive" to scope definition to align with draft-ietf-oauth-v2-15/16.</t>
	  <t>Updated to reference draft-ietf-oauth-v2-16</t>
	</list>
      </t>
      <t>
	draft-ietf-oauth-saml2-bearer-03
	<list style='symbols'>
	  <t>Cleanup of some editorial issues.</t>
	</list>
      </t>
      <t>
	draft-ietf-oauth-saml2-bearer-02
	<list style='symbols'>
	  <t>Added scope parameter with text copied from draft-ietf-oauth-v2-12 (the reorg of draft-ietf-oauth-v2-12 made it so scope wasn't really inherited by this spec anymore) </t>
	  <t>Change definition of the assertion parameter to be more generally applicable per the suggestion near the end of http://www.ietf.org/mail-archive/web/oauth/current/msg05253.html</t>
	  <t>Editorial changes based on feedback</t>
	</list>
      </t>

      <t>
	draft-ietf-oauth-saml2-bearer-01
	<list style='symbols'>
	  <t>Update spec name when referencing draft-ietf-oauth-v2 (The OAuth 2.0 Protocol Framework -> The OAuth 2.0 Authorization Protocol)</t>
	  <t>
	    Update wording in Introduction to talk about extension grant types rather than the assertion grant type which is a term no longer used in OAuth 2.0
	  </t>
	  <t>Updated to reference draft-ietf-oauth-v2-12 and denote as work in progress</t>
	  <t>Update Parameter Registration Request to use similar terms as draft-ietf-oauth-v2-12 and remove Related information part</t>
	  <t>Add some text giving discretion to AS on rejecting assertions with unreasonably long validity window.</t>
	</list>
      </t>
      <t>
	draft-ietf-oauth-saml2-bearer-00
	<list style='symbols'>
	  <t>Added Parameter Registration Request for "assertion" to IANA Considerations.</t>
	  <t>
	    Changed document name to draft-ietf-oauth-saml2-bearer in anticipation of becoming an OAUTH WG item.
	  </t>
	  <t>Attempt to move the entire definition of the 'assertion' parameter into this draft (it will no longer be defined in OAuth 2 Protocol Framework). </t>
	</list>
      </t>
      <t>
	draft-campbell-oauth-saml-01
	<list style='symbols'>
	  <t>
	    Updated to reference draft-ietf-oauth-v2-11 and reflect changes from -10 to -11.
	  </t>
	  <t>Updated examples.</t>
	  <t>
	    Relaxed processing rules to allow for more than one SubjectConfirmation element.
	  </t>
	  <t>
	    Removed the 'MUST NOT contain a NotBefore attribute' on SubjectConfirmationData.
	  </t>
	  <t>
	    Relaxed wording that ties the subject of the Assertion to the resource owner.
	  </t>
	  <t>Added some wording about identifying the client when the subject hasn't directly authenticated including an informative reference to SAML V2.0 Condition for Delegation Restriction.</t>
	  <t>
	    Added a few examples to the language about verifying that the
	    Assertion is valid in all other respects.
	  </t>
	  <t>
	    Added some wording to the introduction about the similarities to Web SSO in the format and processing rules
	  </t>
	  <t>
	    Changed the grant_type (was assertion_type) URI from http://oauth.net/assertion_type/saml/2.0/bearer
	    to http://oauth.net/grant_type/assertion/saml/2.0/bearer
	  </t>
	  <t>Changed title to include "Grant Type" in it.</t>
	  <t>Editorial updates based on feedback from the WG and others (including capitalization of Assertion when referring to SAML).</t>
	</list>
      </t>
      <t>
	draft-campbell-oauth-saml-00
	<list style='symbols'>
	  <t>
	    Initial I-D
	  </t>
	</list>
      </t>
    </section>
  </back>
</rfc>
