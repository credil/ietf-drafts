<?xml version="1.0" ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<!-- processing instructions (for a complete list and description,
     see http://xml.resource.org/authoring/README.html -->

<?rfc strict="yes" ?>   <!-- enforce ID-nits conventions and DTD validity -->

<?rfc comments="yes" ?>  <!-- controls display of <cref> elements -->
<?rfc inline="yes" ?>    <!-- put comments inline instead of
                              at the end in comments section -->
<?rfc editing="no" ?>   <!-- insert editing marks -->

    <!-- table of contents (TOC), may be omitted for very short documents --> 
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>

<?rfc symrefs="yes"?>    <!-- use symbolic tags in -->
                         <!-- references/citations instead of numbers -->
<?rfc sortrefs="yes" ?>

    <!-- start new paragraphs from the same page etc. -->
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<!-- end of list of processing instructions -->

    <!-- Information about the document.
         categories values: std, bcp, info, exp, and historic
         For Internet-Drafts, specify attribute "ipr".
         (ipr values are: full3978, noModification3978, noDerivatives3978),
         Also for Internet-Drafts, can specify values for
         attributes "iprExtract", and "docName".  Note
         that the value for iprExtract is the anchor attribute
         value of a section that can be extracted, and is only
         useful when the value of "ipr" is not "full3667". -->

<rfc category="std"
     ipr="full3978"
     docName="draft-ietf-hubmib-efm-cu-mib-06.txt">
 
<!-- $Id$ -->
 
<front>

<title abbrev="EFMCu Interfaces MIB">
  Ethernet in the First Mile Copper (EFMCu) Interfaces MIB 
</title>

<author initials="E." surname="Beili" fullname="Edward Beili">
  <organization>Actelis Networks</organization>
  <address>
    <postal>
      <street>Bazel 25</street>
      <city>Petach-Tikva</city>
      <country>Israel</country>
    </postal>
    <phone>+972-3-924-3491</phone>
    <email>edward.beili@actelis.com</email>
  </address>
</author>

<date day="12" month="October" year="2006"/>

<area>Operations and Management</area>

<keyword>Network Management</keyword>
<keyword>Simple Network Management Protocol</keyword>
<keyword>SNMP</keyword>
<keyword>Management Information Base</keyword>
<keyword>MIB</keyword>
<keyword>Textual Conventions</keyword>

<abstract>
  <t>
   This document defines Management Information Base (MIB) modules for
   use with network management protocols in TCP/IP based internets.
   This document proposes an extension to the Ethernet-like Interfaces
   MIB and MAU MIB modules with a set of objects for managing
   Ethernet in the First Mile Copper (EFMCu) interfaces
   10PASS-TS and 2BASE-TL, defined in IEEE Std 802.3ah-2004.
   In addition a set of objects is defined, describing cross-connect
   capability of a managed device with multi-layer (stacked) interfaces,
   extending the stack management objects in the Interfaces Group MIB
   and the Inverted Stack Table MIB modules. 
  </t>
</abstract>

</front>
 
<middle>

<section title="Introduction">
  <t>
   New Ethernet-like interfaces have been defined in the
   Institute of Electrical and Electronics Engineers (IEEE) Standard
   802.3ah-2004 <xref target="802.3ah"/>,
   a.k.a. Ethernet in the First Mile (EFM), which is now a part of the
   base IEEE Standard 802.3-2005 <xref target="802.3"/>.
   In particular 2BASE-TL and 10PASS-TS physical interfaces (PHYs),
   defined over voice-grade copper pairs, have
   been specified for the long and short reach respectively.
   These interfaces, collectively called EFMCu, are based on
   ITU-T G.SHDSL <xref target="G.991.2"/> and VDSL <xref target="G.993.1"/>
   specifications and support variable rates and optional
   Physical Medium Entity (PME) aggregation (a.k.a. multi-pair bonding).
  </t>
  <t>
   2BASE-TL PHY is capable of providing at least 2Mbps
   over 2700 m long single copper pair with a mean Bit Error Rate (BER)
   of 10^-7 (using 5dB target noise margin).
  </t>
  <t>
   10PASS-TS PHY is capable of providing at least 10Mbps over
   750 m long single copper pair with a mean BER of 10^-7 (using 6dB
   target noise margin).
  </t>
  <t>
   This memo defines a Management Information Base (MIB) module for
   use with network management protocols in the Internet 
   community to manage EFMCu interfaces.
   In addition a MIB module is defined describing cross-connect
   capability of a stacked interface.
  </t>
  <t>
   Note that managed objects for Operation, Administration and
   Management (OAM) and Ethernet over Passive Optical Networks (EPON)
   clauses of IEEE 802.3ah are defined in EFM-COMMON-MIB
   <xref target="I-D.ietf-hubmib-efm-mib"/> and EFM-EPON-MIB
   <xref target="I-D.ietf-hubmib-efm-epon-mib"/> respectively.
  </t>
</section>

<section title="The Internet-Standard Management Framework">
  <t>
   For a detailed overview of the documents that describe the current
   Internet-Standard Management Framework, please refer to
   section 7 of RFC 3410 <xref target="RFC3410"/>.
  </t>
  <t>
   Managed objects are accessed via a virtual information store,
   termed the Management Information Base or MIB.  MIB objects are
   generally accessed through the Simple Network Management Protocol
   (SNMP).  Objects in the MIB are defined using the mechanisms
   defined in the Structure of Management Information (SMI).  This
   memo specifies a MIB module that is compliant to the SMIv2, which
   is described in STD 58, RFC 2578 <xref target="RFC2578"/>,
   STD 58, RFC 2579 <xref target="RFC2579"/> and STD 58, RFC
   2580 <xref target="RFC2580"/>.
  </t>
  <t>
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119
   <xref target="RFC2119"/>.
  </t>
</section>

<section title="Relation to other MIB modules">
 <t>
  This section outlines the relationship of the MIB modules defined in
  this document with other MIB modules
  described in the relevant RFCs. Specifically, Interfaces Group MIB
  (IF-MIB), Ethernet-Like (EtherLike-MIB), MAU (MAU-MIB), SHDSL
  (HDSL2-SHDSL-LINE-MIB) and VDSL (VDSL-LINE-EXT-MCM-MIB) are discussed.
 </t>
 <section title="Relation to Interfaces Group MIB module">
  <t>
   2BASE-TL and 10PASS-TS PHY's specified in the EFM-CU-MIB module are stacked
   (a.k.a. aggregated or bonded) Ethernet interfaces and as such are managed
   using generic interface management objects defined in the
   IF-MIB <xref target="RFC2863"/>.
  </t>
  <t>
   The stack management, i.e. actual connection of the sub-layers to
   the top layer interface, is done via the ifStackTable, as defined in 
   the IF-MIB <xref target="RFC2863"/> and its inverse
   ifInvStackTable, as defined in the IF-INVERTED-STACK-MIB
   <xref target="RFC2864"/>.
  </t>
  <t>
   The new tables ifCapStackTable and its inverse
   ifInvCapStackTable defined in the IF-CAP-STACK-MIB module
   below, extend the stack management with an ability to describe
   possible connections or cross-connect capability, when a flexible
   cross-connect matrix is present between the interface layers.
  </t>
   <section title="Layering Model">
    <t>
     An EFMCu interface can aggregate up to 32 Physical Medium
     Entity (PME) sub-layer devices (modems), using so
     called PME Aggregation Function (PAF).
    </t>
    <t>
     A generic EFMCu device can have a number of Physical Coding
     Sublayer (PCS) ports, each connected to a MAC via Medium Independent
     Interface (MII) at the upper layer, and cross-connected to a
     number of underlying PMEs, with a single PCS per PME relationship,
     see clause 61.1 of <xref target="802.3ah"/> for more details.
    </t>
    <t>
     Each PME in the aggregated EFMCu port is represented in the
     Interface table (ifTable) as a separate port with ifType of shdsl(169) for
     2BASE-TL or vdsl(97) for 10PASS-TS. The ifType values are defined in
     <xref target="IANAifType-MIB"/>.
    </t>
    <t>
     ifSpeed for each PME SHALL return the actual data bitrate
     of the active PME (e.g. for 2BaseTL PMEs it is a multiple of
     64Kbps). Zero value SHALL be returned when PME is initializing or down.
    </t>
    <t>
     The ifSpeed of the PCS is the sum of the current operating data
     rates of all PMEs in the aggregation group, without the 64/65B
     encapsulation overhead and PAF overhead, but accounting for the
     Inter-Frame Gaps (IFG).
    <figure anchor="Figure 1" title="Example configuration with no frame loss">
      <preamble>When using the stated definition of ifSpeed for the
                PCS, there would be no frame loss in the following configuration
                (the test-sets are configured to generate 100% of back
                to back traffic, i.e. minimal IFG, at 10 or 100Mbps,
                with min and max frame sizes;
                the EFM interfaces are aggregated, to achieve the shown speed):
      </preamble> 
      <artwork>
[testset]--10BaseT--[CO]--2BaseTL--[CPE]--10BaseT--[testset]
  ifSpeed=  10Mbps         10Mbps         10Mbps

[testset]--100BaseT--[CO]--10PassTS--[CPE]--100BaseT--[testset]
  ifSpeed=  100Mbps         100Mbps         100Mbps
</artwork>
    </figure>
    </t>
    <figure anchor="Figure 2" title="Use of ifTable and ifMauTable for EFMCu ports">
      <preamble>The following figure shows the layering diagram and
                corresponding use of ifTable and ifMauTable:</preamble>
        <artwork>
 _________________________   _
|        LLC              |  |
+-------------------------+  | 1 ifEntry
|        MAC              |  |     ifType: ethernetCsmacd(6)
+-------------------------+  >   ifMauEntry
|        Reconsiliation   |  |     ifMauType: dot3MauType2BaseTL or
+-------------------------+  |                dot3MauType10PassTS
|        PCS              |  |
+-------------+---+-------+  +
| TC \        |   |       |  |
+-----\       |   |       |  |
| PMA > PME 1 |...| PME N |  > N ifEntry  (N=1..32)
+-----/       |   |       |  |     ifType: shdsl(169) or vdsl(97)    
| PMD/        |   |       |  |
 -------------+---+-------   -
      </artwork>
    </figure>
    <t>
     The ifStackTable is indexed by the ifIndex values of the aggregated
     EFMCu port (PCS) and the PMEs connected to it. ifStackTable allows a
     Network Management application to determine which PMEs are connected
     to a particular PCS and change connections (if supported by the 
     application). The ifInvStackTable, being an inverted version of
     the ifStackTable, provides an efficient means for a Network
     Management application to read a subset of the ifStackTable and
     thereby determine which PCS runs on top of a particular PME.
    </t>
    <t>
     A new table ifCapStackTable defined in the IF-CAP-STACK-MIB
     module, specifies for each higher-layer interface (e.g. PCS port)
     a list of lower-layer interfaces (e.g. PMEs), which can possibly
     be cross-connected to that higher-layer interface,
     determined by the cross-connect
     capability of the device. This table, modeled after ifStackTable, is
     read only, reflecting current cross-connect capability of a
     stacked interface, which
     can be dynamic in some implementations (e.g. if PMEs are located
     on a pluggable module and the module is pulled out).
     Note that PME availability per PCS, described by
     ifCapStackTable, can be constrained by other parameters,
     for example by aggregation capacity of a PCS or by the PME in
     question being already connected to another PCS. So, in
     order to ensure that a particular PME can be connected to the PCS,
     all respective parameters (e.g. ifCapStackTable,
     ifStackTable and efmCuPAFCapacity) SHALL be inspected.
    </t>
    <t>
     The ifInvCapStackTable, also defined in the IF-CAP-STACK-MIB module,
     describes which higher-layer interfaces (e.g. PCS ports) can possibly
     be connected to a particular lower-layer interface (e.g. PME),
     providing inverted mapping of ifCapStackTable.
     While it contains no additional information beyond that already
     contained in the ifCapStackTable, the ifInvCapStackTable has the
     ifIndex values in its INDEX clause in the reverse order, i.e., the
     lower-layer interface first, and the higher-layer interface
     second, providing an efficient means for a Network Management
     application to read a subset of the ifCapStackTable and thereby
     determine which interfaces can be connected to run on top of a
     particular interface.
    </t>
   </section>

   <section title="PME Aggregation Function (PAF)">
    <t>
     The PME Aggregation Function (PAF) allows a number of PMEs to be
     aggregated onto a PCS port, by fragmenting the Ethernet frames,
     transmitting the fragments over multiple PMEs and assembling the
     original frames at the remote port. PAF is OPTIONAL, meaning that a
     device with a single PME MAY perform fragmentation and
     re-assembly if this function is supported by the device.
     Note however that the agent is REQUIRED to report on the
     PAF capability for all EFMCu ports (2BASE-TL and 10PASS-TS).
    </t>
    <t>
     The EFM-CU-MIB module allows a Network Management application to query
     PAF capability and enable/disable it if supported. Note that
     enabling PAF effectively turns on fragmentation and re-assembly,
     even on a single-PME port.
    </t>
   </section>

   <section title="Discovery Operation">
    <t>
     The EFMCu ports may optionally support discovery operation,
     whereby PMEs, during initialization, exchange information about
     their respective aggregation groups (PCS). This information can
     then be used to detect copper misconnections or for an automatic
     assignment of the local PMEs into aggregation groups instead of
     a fixed pre-configuration.
    </t>
    <t>
     The MIB modules defined in this document allow a Network
     Management application to control EFM Discovery mechanism and query
     its results. Note that the Discovery mechanism can work only if
     PAF is supported and enabled.
    </t>
    <t>
     Two tables are used by the EFM Discovery mechanism: ifStackTable and
     ifCapStackTable. The following pseudo-code gives
     an example of the Discovery and automatic PME assignment for a generic
     PAF enabled multi-PCS EFMCu device, located at Central Office
     (CO), using objects defined in these MIB modules and in IF-MIB
     [Note that automatic PME assignment is only shown here for
     the purposes of the example. Fixed PME pre-assignment, manual
     assignment or auto-assignment using an alternative internal
     algorithm may be chosen by a particular implementation]:
    </t>
    <figure>
      <artwork>
// Go over all PCS ports in the CO device
FOREACH pcs[i] IN CO_device
{ // Perform discovery and auto-assignment only on PAF enabled ports
  // with room for more PMEs
  IF ( pcs[i].PAFSupported AND pcs[i].NumPMEs &lt; pcs[i].PAFCapacity )
    { dc = pcs[i].DiscoveryCode = MAC[i]; // unique 6 Byte per PCS
      // Go over all disconnected PMEs, which can
      // pottentially be connected to the PCS
      FOREACH pme[j] IN ifCapStackTable[pcs[i]] AND
                     NOT ifInvStackTable[pme[j]]  // not connected
        { // Try to grab the remote RT_device, by writing the value
          // of the local 6 Byte discovery code to the remote
          // discovery code register (via handshake mechanism).
          // This operation is atomic Set-if-Clear action, i.e. it
          // would succeed only if the remote discovery register was
          // zero. Read the remote discovery code register via Get
          // operation to see if the RT_device, attached via the PME
          // is indeed marked as being the CO_device peer.
          pme[j].RemoteDiscoveryCode = dc;        // Set-if-Clear
          r = pme[j].RemoteDiscoveryCode;         // Get
          IF ( r == dc AND pcs[i].NumPMEs &lt; pcs[i].PAFCapacity)
            { // Remote RT_device connected via PME[j] is/was a peer
              // for PCS[i] and there room for another PME in the
              // PCS[i] aggregation group (max. PAF capacity is not
              // reached yet).
              // Connect this PME to the PCS (via ifStackTable,
              // ifInvStackTable being inverse of ifStackTable is
              // updated automatically)
              ADD pme[j] TO ifStackTable[pcs[i]];
                // pcs[i] is auto-added to ifInvStackTable[pme[j]]
              pcs[i].NumPMEs = pcs[i].NumPMEs + 1;
              // Discover all other disconnected PMEs,
              // attached to the same RT_device and connect them to
              // the PCS provided there is enough room for more PMEs.
              FOREACH pme[k] IN ifCapStackTable[pcs[i]] and
                             NOT ifInvStackTable[pme[k]]
                { r = pme[k].RemoteDiscoveryCode; // Get
                  IF ( r == dc AND
                       pcs[i].NumPMEs &lt; pcs[i].PAFCapacity)
                    { ADD pme[k] TO ifStackTable[pcs[i]];
                        // pcs[i] is added TO ifInvStackTable[pme[k]]
                      pcs[i].NumPMEs = pcs[i].NumPMEs + 1;
                    }
                }
            }
          // At this point we have discovered all local PMEs which
          // are physically connected to the same remote RT_device
          // and connected them to PCS[i]. Go to the next PCS.
          BREAK;
        }
    }
}
      </artwork>
    </figure>
    <t>
     An SNMP Agent for a EFMCu device builds ifCapStackTable
     and its inverse ifInvCapStackTable according to the information
     contained in the Clause 45 PME_Available_register (see
     <xref target="802.3ah"/> 61.1.5.3 and 45.2.3.20).
    </t>
    <t>
     Adding a PME to the ifStackTable row for a specific PCS, involves
     actual connection of the PME to the PCS, which can be done by modifying
     Clause 45 PME_Aggregate_register (see <xref target="802.3ah"/>
     61.1.5.3 and 45.2.3.21).
    </t>
    <t>
     Note that PCS port does not have to be operationally 'down' for
     the connection to succeed. In fact, a dynamic PME
     addition (and removal) MAY be implemented with an available PME being
     initialized first (by setting its ifAdminStatus to 'up') and then
     added to an operationally 'up' PCS port, by modifying a respective
     ifStackTable (and respective ifInvStackTable) entry.
    </t>
    <t>
     It is RECOMMENDED that a removal of the last operationally 'up' PME
     from an operationally 'up' PCS would be rejected by the
     implementation, as this action would completely drop the link.
    </t>
  </section>
  <section title="EFMCu ports initialization">
   <t>
    EFMCu ports being built on top of xDSL technology, require a
    lengthy initialization or 'training' process, before any data can
    pass. During this initialization both ends of a link (peers) work
    cooperatively to achieve required data rate on a particular copper
    pair. Sometimes, when the copper line is too long or the noise
    on the line is too high, that 'training' process may fail
    to achieve a specific target rate with required characteristics.
   </t>
   <t>
    The ifAdminStatus object from the IF-MIB, controls
    the desired state of a PCS with all the PMEs connected to it or of
    an individual PME port. Setting this object to 'up'
    instructs a particular PCS or PME to start initialization process,
    which may take tens of seconds for EFMCu ports, especially if PAF is
    involved. The ifOperStatus object shows the operational state of an
    interface (extended by ifMauMediaAvailable object from MAU-MIB for
    PCS and efmCuPmeOperStatus defined in the EFM-CU-MIB
    module for PME interfaces).
   </t>
   <t>
    A disconnected PME may be initialized by changing the ifAdminState
    from 'down' to 'up'. Changing the ifAdminState to 'up' on the
    PCS initializes all PMEs connected to that particular PCS.
    Note that in case of PAF some interfaces may fail to initialize
    while others succeed. The PCS is considered operationally 'up' if at
    least one PME aggregated by its PAF is operationally 'up'. When all
    PMEs connected to the PCS are 'down' the PCS SHALL be considered
    operationally 'lowerLayerDown'. The PCS SHALL be considered
    operationally 'notPresent' if it is not connected to any PME.
    The PCS/PME interface SHALL remain operationally 'down' during
    initialization.
   </t>
   <t>
    The efmCuPmeOperStatus defined in the EFM-CU-MIB module
    expands PME's ifOperStatus
    value of 'down' to 'downReady', 'downNotReady' and 'init' values,
    indicating various EFMCu PME specific states.
   </t>
  </section>
  <section title="Usage of ifTable">
   <t>
    Both PME and PCS interfaces of the EFMCu PHY are managed using
    interface specific management objects defined in the EFM-CU-MIB module and
    generic interface objects from the ifTable of IF-MIB, with all
    management table entries referenced by the interface index ifIndex.
   </t>
   <t>
    The following table summarizes EFMCu specific interpretations for
    some of the ifTable objects specified by the mandatory
    ifGeneralInformationGroup:
   </t>
   <texttable anchor='table1'>
    <ttcol align='left'>IF-MIB object</ttcol>
    <ttcol align='left'>EFMCu interpretation</ttcol>
    <c>ifIndex</c><c>Interface index. Note that each PME and each PCS
                     in the EFMCu PHY MUST have a unique index, as
                     there some PCS and PME specific attributes
                     accessible only on the PCS or PME level.</c>
    <c>ifType</c><c>ethernetCsmacd(6) for PCS, shdsl(169) for
                    2BASE-TL PME, vdsl(97) for 10PASS-TS PME</c>
    <c>ifSpeed</c><c>Operating data rate for the PME. For the PCS it
     is the sum of the current operating data rates of all PMEs in the
     aggregation group, without the 64/65B encapsulation overhead and
     PAF overhead, but accounting for the Inter-Frame Gaps (IFG)</c>
    <c>ifAdminStatus</c><c>Setting this object to 'up' instructs a
                           particular PCS (with all PMEs connected to
                           it) or PME to start initialization process</c>
    <c>ifOperStatus</c><c>efmCuPmeOperStatus supplements the 'down' value
                          of ifOperStatus for PMEs.</c>
   </texttable>
   </section>
  </section>

  <section title="Relation to SHDSL MIB module">
   <t>
    G.SHDSL.bis modems, similar to PME(s) comprising a 2BASE-TL port, are
    described in HDSL2-SHDSL-LINE-MIB
    <xref target="RFC4319"/>.
    Note that not all attributes of G.SHDSL modems reflected in
    HDSL2-SHDSL-LINE-MIB have adequate management objects
    (Clause 30 attributes and Clause 45 registers) in the EFM standard.
   </t>
   <t>
    Because of these differences and for the purposes of simplicity,
    unification of attributes common to both 2BASE-TL and 10PASS-TS PMEs
    and name consistency (e.g. prefixing the 2BASE-TL PME related objects
    with 'efmCuPme2B' instead of 'hdsl2shdsl'), it was decided not to reference
    HDSL2-SHDSL-LINE-MIB objects, but define all the relevant objects
    in the EFM-CU-MIB module.
   </t>
   <t>
    However, if some functionality, not available in the EFM-CU-MIB module, is
    required and supported by the PME, e.g. performance monitoring,
    relevant HDSL2-SHDSL-LINE-MIB groups MAY be included and applied
    for PMEs of 2BASE-TL subtype.
   </t>
  </section>

  <section title="Relation to VDSL MIB module">
   <t>
    VDSL (DMT) modems, similar to the PME(s) comprising a 10PASS-TS port,
    are described in VDSL-LINE-EXT-MCM-MIB
    <xref target="RFC4070"/>.
    Note that not all attributes of VDSL modems reflected in
    VDSL-LINE-EXT-MCM-MIB have adequate management objects
    (Clause 30 attributes and Clause 45 registers) in the EFM standard.
   </t>
   <t>
    Because of these differences and for the purposes of simplicity,
    unification of attributes common to both 2BASE-TL and 10PASS-TS PMEs
    and name consistency, it was decided not to reference
    VDSL-LINE-EXT-MCM-MIB objects, but define all the relevant objects
    in the EFM-CU-MIB module.
   </t>
   <t>
    However, if some functionality, not available in the EFM-CU-MIB module, is
    required and supported by the PME,
    relevant VDSL-LINE-EXT-MCM-MIB groups MAY be included and applied
    for PMEs of 10PASS-TS subtype.
   </t>
  </section>

  <section title="Relation to Ethernet-Like and MAU MIB modules">
   <t>
    The implementation of EtherLike-MIB <xref target="RFC3635"/>
    and MAU-MIB <xref target="I-D.ietf-hubmib-rfc3636bis"/> is
    REQUIRED for the EFMCu interfaces.
   </t>
   <t>
    Two new values of ifMauType (OBJECT-IDENTITIES of dot3MauType)
    and corresponding bit definitions of ifMauTypeListBits
    (IANAifMauTypeListBits) have been defined in the IANA-MAU-MIB
    <xref target="I-D.ietf-hubmib-rfc3636bis"/> for the EFMCu MAUs:

     <list style='symbols'>
      <t>dot3MauType2BaseTL and b2BaseTL - for 2BASE-TL MAU</t>
      <t>dot3MauType10PassTS and b10PassTS - for 10PASS-TS MAU</t>
     </list>
   </t>
   <t>
    Additionally IANA-MAU-MIB defines two new values of
    ifMauMediaAvailable, as a textual convention
    IANAifMauMediaAvailable - availableReduced and ready,
    specifically for the EFMCu ports.
    Due to the PME aggregation, the EFMCu interpretation of some
    possible ifMauMediaAvailable values differs from other MAUs as follows:

     <list style='symbols'>
      <t>unknown - the EFMCu interface (PCS with connected PMEs) is initializing</t>
      <t>ready - the interface is down, at least one PME in the
         aggregation group (all PMEs connected to
         the PCS) is ready for handshake</t>
      <t>available - the interface is up, all PMEs in the aggregation
         group are up</t>
      <t>notAvailable - the interface is down, all PMEs in the aggregation
         group are down, no handshake tones are detected by any PME</t>
      <t>availableReduced - the interface is up, a link fault is
         detected at the receive direction by one or more PMEs in the
         aggregation group, but at least one PME is up</t>
      <t>pmdLinkFault - a link fault is detected at the receive
         direction by all PMEs in the aggregation group</t>
     </list>
   </t>
   <t>
    As an EtherLike interface every EFMCu port (an ifEntry
    representing a consolidation of LLC, MAC and PCS (sub)layers)
    SHALL return an ifType of ethernetCsmacd(6).
    While most of the MAU characteristics are not applicable to the EFMCu
    ports (no auto-negotiation, false carriers or jabber),
    they SHALL return an appropriate ifMauType (dot3MauType2BaseTL or
    dot3mauType10PassTS) in order to direct the management software
    to look in the EFM-CU-MIB module for the desired information. For example
    the information on the particular EFMCu flavor that an EFMCu port
    is running is available from efmCuOperSubType, defined in the
    EFM-CU-MIB module.
   </t>
   <t>
    Since EFMCu PMEs are not EtherLike interfaces, they cannot be
    instantiated as MAU interface objects.
   </t>
 </section>
</section>

<section title="MIB Structure">

 <section title="EFM Copper MIB Overview">
  <t>
   The main management objects defined in the EFM-CU-MIB module are split into 2
   groups:
   <list style='symbols'>
    <t>efmCuPort - containing objects for configuration, capabilities,
    status and notifications, common to all EFMCu PHYs.</t>
    <t>efmCuPme - containing objects for configuration, capabilities,
    status and notifications of EFMCu PMEs.</t>
   </list>
  </t>
  <t>
   The efmCuPme group in turn contains efmCuPme2B and efmCuPme10P
   groups, which define PME Profiles specific to 2BASE-TL and
   10PASS-TS PMEs respectively, as well as PME specific status information.
  </t>
 </section>

 <section title="Interface stack capability MIB Overview">
  <t>
   The IF-CAP-STACK-MIB module contains 2 tables:
   <list style='symbols'>
    <t>ifCapStackTable - containing objects that define possible
       relationships among the sub-layers of an interface with
       flexible cross-connect (cross-connect capability).</t>
    <t>ifInvCapStackTable - an inverse of the ifCapstackTable.</t>
   </list>
  </t>
 </section>

 <section title="PME Profiles">
  <t>
   Since a managed node can have a large number of EFMCu PHYs,
   provisioning every parameter on every EFMCu PHY may become
   burdensome. Moreover, most PMEs are provisioned identically
   with the same set of parameters.  To simplify the provisioning
   process, the EFM-CU-MIB module makes use of configuration profiles, similar
   to HDSL2-SHDSL-LINE-MIB and VDSL-LINE-EXT-MCM-MIB. A profile is a
   set of parameters, used either for configuration or representation
   of a PME. The same profile can be shared by multiple PME ports,
   using the same configuration.
  </t>
  <t>
   The PME profiles are defined in
   efmCuPme2BProfileTable and efmCu10PProfileTable for
   2BASE-TL and 10PASS-TS PMEs respectively. There are 12 predefined
   standard profiles for 2BASE-TL and 22 standard profiles for
   10PASS-TS, defined in 802.3ah and dedicated for rapid provisioning
   of EFMCu PHYs in most scenarios. In addition the EFM-CU-MIB defines two
   additional predefined profiles for "best-effort" provisioning of
   2BASE-TL PMEs.
   An ability to define new configuration profiles is also provided to 
   allow for EFMCu deployment tailored to specific copper environment and 
   spectral regulations.
  </t>
  <t>
   A specific configuration or administrative profile is assigned to a
   specific PME via efmCuPmeAdminProfile object. If efmCuPmeAdminProfile
   is zero, then efmCuAdminProfile object of the PCS port, connected to the
   PME, determines the configuration profile (or a list of possible
   profiles) for that PME. This mechanism allows to specify a common
   profile(s) for all PMEs connected to the PCS port, with an ability
   to change individual PME profiles by setting efmCuPmeAdminProfile
   object, which overwrites profile set by efmCuAdminProfile.
  </t>
  <t>
   A current operating PME profile is pointed to by efmCuPmeOperProfile object.
   Note that this profile entry, can be created automatically, to reflect
   achieved parameters in adaptive (not fixed) initialization.
  </t>
 </section>

 <section title="Mapping of IEEE 802.3ah Managed Objects">
  <t>
   This section contains the mapping between relevant managed objects
   (attributes) defined in <xref target="802.3ah"/> Clause 30, and managed
   objects defined in this document and in associated MIB modules,
   i.e., the IF-MIB <xref target="RFC2863"/>.
  </t>
  <t>
   Note that majority of the objects defined in the EFM-CU-MIB module
   do not have direct counterparts in Clause 30 and instead refer to Clause 45
   registers.
  </t>
<!--
  <t><spanx style="emph">EdNote:
   It would be a good idea to update Clause 30 of 802.3 after this
   MIB module is approved, via a maintanence request.
  </spanx></t>
-->
  <texttable anchor='table2'>
   <ttcol align='left'>IEEE 802.3 Managed Object</ttcol>
   <ttcol align='left'>Corresponding SNMP Object</ttcol>
   <c>oMAU - Basic Package (Mandatory)</c><c></c>
   <c>aMAUType</c>                  <c>ifMauType (MAU-MIB)</c>
   <c>aMAUTypeList</c>              <c>ifMauTypeListBits (MAU-MIB)</c>
   <c>aMediaAvailable</c>           <c>ifMediaAvailable (MAU-MIB)</c>
   <c>oPAF - Basic Package (Mandatory)</c><c></c>
   <c>aPAFID</c>                    <c>ifIndex (IF-MIB)</c>
   <c>aPhyEnd</c>                   <c>efmCuPhySide</c>
   <c>aPHYCurrentStatus</c>         <c>efmCuStatus</c>
   <c>aPAFSupported</c>             <c>efmCuPAFSupported</c>

   <c>oPAF - PME Aggregation Package (Optional)</c><c></c>
   <c>aPAFAdminState</c>            <c>efmCuPAFAdminState</c>
   <c>aLocalPAFCapacity</c>         <c>efmCuPAFCapacity</c>
   <c>aLocalPMEAvailable</c>        <c>ifCapStackTable</c>
   <c>aLocalPMEAggregate</c>        <c>ifStackTable (IF-MIB)</c>
   <c>aRemotePAFSupported</c>       <c>efmCuRemotePAFSupported</c>
   <c>aRemotePAFCapacity</c>        <c>efmCuRemotePAFCapacity</c>
   <c>aRemotePMEAggregate</c>       <c></c>

   <c>oPME - 10P/2B Package (Mandatory)</c><c></c>
   <c>aPMEID</c>                    <c>ifIndex (IF-MIB)</c>
   <c>aPMEAdminState</c>            <c>ifAdminState (IF-MIB)</c>
   <c>aPMEStatus</c>                <c>efmCuPmeStatus</c>
   <c>aPMESNRMgn</c>                <c>efmCuPmeSnrMgn</c>
   <c>aTCCodingViolations</c>       <c>efmCuPmeTCCodingErrors</c>
   <c>aTCCRCErrors</c>              <c>efmCuPmeTCCrcErrors</c>
   <c>aProfileSelect</c>            <c>efmCuAdminProfile, efmCuPmeAdminProfile</c>
   <c>aOperatingProfile</c>         <c>efmCuPmeOperProfile</c>
   <c>aPMEFECCorrectedBlocks</c>    <c>efmCuPme10PFECCorrectedBlocks</c>
   <c>aPMEFECUncorrectableBlocks</c><c>efmCuPme10PFECUncorrectedBlocks</c>
  </texttable>
 </section>

</section>

<section title="Interface Stack Capability MIB Definitions">
<figure>
  <artwork>
<?rfc include="if-cap-stack-mib.mib"?>
  </artwork>
</figure>
</section>

<section title="EFM Copper MIB Definitions">
<figure>
  <artwork>
<?rfc include="efm-cu-mib.mib"?>
  </artwork>
</figure>
</section>

<section title="Security Considerations">
 <t>
  There is a number of managed objects defined in the EFM-CU-MIB module
  that have a MAX-ACCESS clause of read-write or read-create.
  Most objects are writeable only when the link is Down.
  Writing to these objects can have potentially
  disruptive effects on network operation, for example:
 </t>
 <t>
  <list style='symbols'>
   <t>Changing of efmCuPmeAdminSubType MAY lead to a potential locking
      of the link, as peer PMEs of the same sub-type cannot exchange
      handshake messages.</t>
   <t>Changing of efmCuPAFAdminState to enabled MAY lead to a
      potential locking of the link, if the peer Phy does not support PAF.</t>
   <t>Changing of efmCuPAFDiscoveryCode, before the discovery operation,
      MAY lead to a wrongful discovery, for example when two -O ports
      are connected to the same multi-PME -R port and both -O ports
      have the same Discovery register value.</t>
   <t>Changing PCS or PME configuration parameters (e.g. profile of a
      PCS or PME via efmCuAdminProfile or efmCuPmeAdminProfile)
      MAY lead to anything from link quality and rate degradation
      to a complete link initialization failure, as ability of an
      EFMCu port to support a particular configuration depends on the copper
      environment.</t>
   <t>Activation of a PME can cause a severe degradation of
      service for another EFMCu Phy, whose PME(s) MAY be affected by
      the cross-talk from the newly activated PME.</t>
   <t>Removal of a PME from an operationally 'up' EFMCu port,
      aggregating several PMEs, MAY cause port's rate degradation</t>
  </list>
 </t>
 <t>
  The user of the EFM-CU-MIB module must therefore be aware that support for
  SET operations in a non-secure environment without proper protection
  can have a negative effect on network operations.
 </t>
 <t>
  The readable objects in the EFM-CU-MIB module (i.e., those with MAX-ACCESS
  other than not-accessible) may be considered sensitive in some
  environments since, collectively, they provide information about the
  performance of network interfaces and can reveal some aspects of
  their configuration.  In particular since EFMCu can be carried over
  Unshielded Twisted Pair (UTP) voice grade copper in a bundle with
  other pairs belonging to another operator/customer, it is
  theoretically possible to evasdrop to an EFMCu transmission simply by
  "listening" to a cross-talk from an EFMCu pair, especially if the
  parameters of the EFMCu link in question are known.
  In such environments it is important to control
  even GET and NOTIFY access to these objects and possibly even to
  encrypt their values when sending them over the network via SNMP.
 </t>
 <t>
  SNMP versions prior to SNMPv3 did not include adequate security.
  Even if the network itself is secure (for example by using IPSec),
  even then, there is no control as to who on the secure network is
  allowed to access and GET/SET (read/change/create/delete) the objects
  in these MIB modules.
 </t>
 <t>
  It is RECOMMENDED that implementers consider the security features as
  provided by the SNMPv3 framework (see <xref target="RFC3410"/>, section 8),
  including full support for the SNMPv3 cryptographic mechanisms (for
  authentication and privacy).
 </t>
 <t>
  Further, deployment of SNMP versions prior to SNMPv3 is NOT
  RECOMMENDED.  Instead, it is RECOMMENDED to deploy SNMPv3 and to
  enable cryptographic security.  It is then a customer/operator
  responsibility to ensure that the SNMP entity giving access to an
  instance of these MIB modules is properly configured to give access to
  the objects only to those principals (users) that have legitimate
  rights to indeed GET or SET (change/create/delete) them.
 </t>
</section>

<section title="IANA Considerations">
 <t>
  The two new values of dot3MauType (dot3MauType2BaseTL and
  dot3MauType10PassTS) and corresponding IANAifMauTypeListBits bit
  definitions (b2BaseTL and b10PassTS), as well as the new values for
  IANAifMauMediaAvailable (availableReduced and ready) SHALL be
  defined by the IANA in the IANA-MAU-MIB module (see
  <xref target="I-D.ietf-hubmib-rfc3636bis"/>) before this document is
  published as an RFC.
 </t>
</section>

<section title="Acknowledgments">
 <t>
   This document was produced by the IETF Ethernet Interfaces and Hub
   MIB Working Group, whose efforts were greatly advanced by the
   contributions of the following people (in alphabetical order):
  <list>
   <t>Dan Romascanu</t>
   <t>Marina Popilov</t>
   <t>Mathias Riess</t>
   <t>Matt Squire</t>
   <t>Mike Heard</t>
   <t>Udi Ashkenazi</t>
  </list>
 </t>
</section>

<!-- seems to come automagically
<section title="Intellectual Property Notice">
 <t>
  The IETF takes no position regarding the validity or scope of any
  intellectual property or other rights that might be claimed to
  pertain to the implementation or use of the technology describe
  in this document or the extent to which any license under such
  rights might or might not be available; neither does it represent
  that it has made any effort to identify any such rights.
  Information on the IETF's procedures with respect to rights in
  standards-track and standards-related documentation can be found
  in BCP-11. Copies of claims of rights made available for
  publication and any assurances of licenses to be made available,
  or the result of an attempt made to obtain a general license or
  permission for the use of such proprietary rights by implementors
  or users of this specification can be obtained from the IETF
  Secretariat.
 </t>
 <t>
  The IETF invites any interested party to bring to its attention
  any copyrights, patents or patent applications, or other
  proprietary rights which may cover technology that may be required
  to practice this standard. Please address the information to the
  IETF Executive Director.
 </t>
</section>
-->

</middle>

<back>

<references title="Normative References">

  <?rfc include="reference.RFC.2119.xml"?>
  <?rfc include="reference.RFC.2578.xml"?>
  <?rfc include="reference.RFC.2579.xml"?>
  <?rfc include="reference.RFC.2580.xml"?>
  <?rfc include="reference.RFC.3410.xml"?>

  <reference anchor="802.3ah">
    <front>
      <title>
        IEEE Standard for Information technology -
        Telecommunications and information exchange between systems -
        Local and metropolitan area networks -
        Specific requirements -
        Part 3: Carrier Sense Multiple Access with Collision Detection
        (CSMA/CD) Access Method and Physical Layer Specifications -
        Amendment: Media Access Control Parameters, Physical
        Layers and Management Parameters for Subscriber Access Networks
      </title>
      <author>
        <organization>IEEE</organization>
      </author>
      <date day="07" month="September" year="2004"/>
    </front>
    <seriesInfo name="IEEE Std" value="802.3ah-2004"/>
    <format type="PDF" octets="7189994"
     target="http://standards.ieee.org/getieee802/download/802.3ah-2004.pdf" />
  </reference>

  <reference anchor="802.3">
    <front>
      <title>
        IEEE Standard for Information technology -
        Telecommunications and information exchange between systems -
        Local and metropolitan area networks -
        Specific requirements -
        Part 3: Carrier Sense Multiple Access with Collision Detection
        (CSMA/CD) Access Method and Physical Layer Specifications
      </title>
      <author>
        <organization>IEEE</organization>
      </author>
      <date day="12" month="December" year="2005"/>
    </front>
    <seriesInfo name="IEEE Std" value="802.3-2005"/>
    <format type="PDF"
     target="http://standards.ieee.org/getieee802/802.3.html" />
  </reference>

</references>

<references title="Informative References">

  <?rfc include="reference.RFC.2863.xml"?>
  <?rfc include="reference.RFC.2864.xml"?>
  <?rfc include="reference.RFC.3635.xml"?>

<!-- RFC 3636 (MAU-MIB) is replaced by rfc3636bis (draft) 
  <?rfc include="reference.RFC.3636.xml"?>
-->
  <reference anchor="I-D.ietf-hubmib-rfc3636bis">
    <front>
      <title>Definitions of Managed Objects for IEEE 802.3 Medium
             Attachment Units (MAUs)</title>
      <author initials="E" surname="Beili" fullname="Edward Beili">
        <organization>Actelis Networks</organization>
        <address>
          <email>edward.beili@actelis.com</email>
        </address>
      </author>
      <date month="July" day="25" year="2006" />
    </front>
    <seriesInfo name="Internet-Draft" value="draft-ietf-hubmib-rfc3636bis-05" />
    <format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-hubmib-rfc3636bis-05.txt" />
  </reference>

<!-- RFC 3276 (SHDSL MIB) is replaced by HDSL2-SHDSL-LINE-MIB,
     published as RFC 4319
  <?rfc include="reference.RFC.3276.xml"?>
-->
  <?rfc include="reference.RFC.4319.xml"?>

<!-- VDSL MIB is extended by VDSL-EXT-MCM MIB, published as RFC 4070
  <?rfc include="reference.RFC.3728.xml"?>
-->
  <?rfc include="reference.RFC.4070.xml"?>

  <reference anchor="IANAifType-MIB">
    <front>
      <title>IANAifType Textual Convention definition</title>
      <author >
        <organization>Internet Assigned Numbers Authority (IANA)</organization>
      </author>
    </front>
    <seriesInfo name="" value="http://www.iana.org/assignments/ianaiftype-mib" />
    <format type="TXT" target="http://www.iana.org/assignments/ianaiftype-mib"/>
  </reference>

  <reference anchor="I-D.ietf-hubmib-efm-mib">
    <front>
      <title>Definitions and Managed Objects for OAM Functions
             on Ethernet Like Interfaces</title>
      <author initials="M" surname="Squire" fullname="Matt Squire">
        <organization>Hatteras Networks</organization>
        <address>
          <email>msquire@hatterasnetworks.com</email>
        </address>
      </author>
      <date day="5" month="March" year="2006" />
    </front>
    <seriesInfo name="Internet-Draft" value="draft-ietf-hubmib-efm-mib-04" />
    <format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-hubmib-efm-mib-04.txt" />
  </reference>

  <reference anchor="I-D.ietf-hubmib-efm-epon-mib">
    <front>
      <title>Managed Objects of EPON</title>
      <author initials="L" surname="Khermosh" fullname="Lior Khermosh">
        <organization>Passave Technologies</organization>
        <address>
          <email>lior_khermosh@pmc-sierra.com</email>
        </address>
      </author>
      <date month="July" day="23" year="2006" />
    </front>
    <seriesInfo name="Internet-Draft" value="draft-ietf-hubmib-efm-epon-mib-05" />
    <format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-hubmib-efm-epon-mib-05.txt" />
  </reference>

  <reference anchor="G.991.2">
    <front>
      <title>
        Single-pair High-speed Digital Subscriber Line (SHDSL) transceivers
      </title>
      <author>
        <organization>ITU-T</organization>
      </author>
      <date day="14" month="December" year="2003"/>
    </front>
    <seriesInfo name="ITU-T Recommendation" value="G.991.2"/>
    <format type="PDF" octets="4467920"
     target="http://www.itu.int/rec/recommendation.asp?type=folders&amp;lang=e&amp;parent=T-REC-G.991.2" />
  </reference>

  <reference anchor="G.993.1">
    <front>
      <title>
        Very High speed Digital Subscriber Line transceivers
      </title>
      <author>
        <organization>ITU-T</organization>
      </author>
      <date month="June" year="2004"/>
    </front>
    <seriesInfo name="ITU-T Recommendation" value="G.993.1"/>
    <format type="PDF" octets="2051871"
     target="http://www.itu.int/rec/recommendation.asp?type=folders&amp;lang=e&amp;parent=T-REC-G.993.1" />
  </reference>

  <reference anchor="ANFP">
    <front>
      <title>
        Specification of the Access Network Frequency Plan (ANFP)
        applicable to transmission systems used on the BT Access Network
      </title>
      <author>
        <organization>Network Interoperability Consultative Committee (NICC)</organization>
      </author>
      <date month="August" year="2005"/>
    </front>
    <seriesInfo name="NICC Document" value="ND1602:2005/08"/>
    <format type="PDF" octets="1191047"
     target="http://www.nicc.org.uk/nicc-public/Public/interconnectstandards/dsltg_spec/nd1602_2005_08.pdf" />
  </reference>

</references>

</back>

</rfc>
