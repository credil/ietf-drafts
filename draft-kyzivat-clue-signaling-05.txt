



Network Working Group                                         P. Kyzivat
Internet-Draft                                                   L. Xiao
Intended status: Standards Track                               C. Groves
Expires: March 19, 2014                                           Huawei
                                                               R. Hansen
                                                           Cisco Systems
                                                      September 15, 2013


                             CLUE Signaling
                    draft-kyzivat-clue-signaling-05

Abstract

   This document specifies how signaling is conducted in the course of
   CLUE sessions.  This includes how SIP/SDP signaling is applied to
   CLUE sessions as well as defining a CLUE-specific signaling protocol
   that complements SIP/SDP and supports negotiation of CLUE application
   level data.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 19, 2014.

Copyright Notice

   Copyright (c) 2013 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must



Kyzivat, et al.          Expires March 19, 2014                 [Page 1]

Internet-Draft               CLUE Signaling               September 2013


   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  CLUE-Specific Signaling Protocol  . . . . . . . . . . . . . .   4
     3.1.  CLUE Messages . . . . . . . . . . . . . . . . . . . . . .   4
       3.1.1.  Request Messages  . . . . . . . . . . . . . . . . . .   4
       3.1.2.  Response Messages . . . . . . . . . . . . . . . . . .   5
       3.1.3.  CLUE Requests . . . . . . . . . . . . . . . . . . . .   5
         3.1.3.1.  ADVERTISEMENT Message . . . . . . . . . . . . . .   5
         3.1.3.2.  CONFIGURE Message . . . . . . . . . . . . . . . .   5
         3.1.3.3.  SUPPORTED Message . . . . . . . . . . . . . . . .   5
         3.1.3.4.  REQUIRED Message  . . . . . . . . . . . . . . . .   5
       3.1.4.  CLUE Response Reasons . . . . . . . . . . . . . . . .   6
     3.2.  Message Sequencing  . . . . . . . . . . . . . . . . . . .   7
       3.2.1.  Pairing of Requests and Responses . . . . . . . . . .   8
       3.2.2.  Version Negotiation Happens First . . . . . . . . . .   8
       3.2.3.  Provider and Consumer Roles . . . . . . . . . . . . .   8
       3.2.4.  Independent Sequencing of Provider and Consumer Roles   8
       3.2.5.  Signaling Changes in Provider State . . . . . . . . .   8
       3.2.6.  Signaling Changes in Consumer State . . . . . . . . .   9
       3.2.7.  Dangling Text [[TODO: FIX]] . . . . . . . . . . . . .   9
     3.3.  Protocol Versioning and Options . . . . . . . . . . . . .  10
       3.3.1.  Versioning Objectives . . . . . . . . . . . . . . . .  10
       3.3.2.  Versioning Overview . . . . . . . . . . . . . . . . .  11
       3.3.3.  Version Negotiation . . . . . . . . . . . . . . . . .  13
       3.3.4.  Option Negotiation  . . . . . . . . . . . . . . . . .  14
       3.3.5.  Option Elements . . . . . . . . . . . . . . . . . . .  14
         3.3.5.1.  <mediaProvider> . . . . . . . . . . . . . . . . .  14
       3.3.6.  Version & option negotiation errors . . . . . . . . .  15
       3.3.7.  Definition and Use of Version Numbers . . . . . . . .  16
       3.3.8.  Version & Option Negotiation Examples . . . . . . . .  17
         3.3.8.1.  Successful Negotiation - Multi-version  . . . . .  17
         3.3.8.2.  Successful Negotiation - Consumer-Only Endpoint .  18
         3.3.8.3.  Successful Negotiation - Provider-Only Endpoint .  19
         3.3.8.4.  Version Incompatibility . . . . . . . . . . . . .  20
         3.3.8.5.  Option Incompatibility  . . . . . . . . . . . . .  21
         3.3.8.6.  Syntax Error  . . . . . . . . . . . . . . . . . .  22
     3.4.  Message Syntax  . . . . . . . . . . . . . . . . . . . . .  22
     3.5.  Message Transport . . . . . . . . . . . . . . . . . . . .  25
       3.5.1.  CLUE Channel Lifetime . . . . . . . . . . . . . . . .  26
       3.5.2.  Channel Error Handling  . . . . . . . . . . . . . . .  26
     3.6.  Message Framing . . . . . . . . . . . . . . . . . . . . .  27
   4.  CLUE use of SDP O/A . . . . . . . . . . . . . . . . . . . . .  27



Kyzivat, et al.          Expires March 19, 2014                 [Page 2]

Internet-Draft               CLUE Signaling               September 2013


     4.1.  Establishing the CLUE channel . . . . . . . . . . . . . .  27
     4.2.  Representing CLUE Encodings in SDP  . . . . . . . . . . .  27
     4.3.  Representing CLUE Encoding Groups in SDP  . . . . . . . .  28
     4.4.  Signaling CLUE control of "m" lines . . . . . . . . . . .  28
     4.5.  Ensuring interoperability with non-CLUE devices . . . . .  29
   5.  Interaction of CLUE and SDP negotiations  . . . . . . . . . .  29
     5.1.  Independence of SDP and CLUE negotiation  . . . . . . . .  30
     5.2.  Recommendations for operating with non-atomic operations   30
     5.3.  Constraints on sending media  . . . . . . . . . . . . . .  31
   6.  Example: A call between two CLUE-capable endpoints  . . . . .  31
   7.  Example: A call between a CLUE and non-CLUE-capable endpoint   38
   8.  CLUE requirements on SDP O/A  . . . . . . . . . . . . . . . .  40
   9.  SIP Signaling . . . . . . . . . . . . . . . . . . . . . . . .  40
   10. Interoperation with Legacy SIP Devices  . . . . . . . . . . .  40
   11. CLUE over RTCWEB  . . . . . . . . . . . . . . . . . . . . . .  40
   12. Open Issues . . . . . . . . . . . . . . . . . . . . . . . . .  41
   13. What else?  . . . . . . . . . . . . . . . . . . . . . . . . .  41
   14. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  41
   15. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  41
   16. Security Considerations . . . . . . . . . . . . . . . . . . .  41
   17. Change History  . . . . . . . . . . . . . . . . . . . . . . .  41
   18. References  . . . . . . . . . . . . . . . . . . . . . . . . .  43
     18.1.  Normative References . . . . . . . . . . . . . . . . . .  43
     18.2.  Informative References . . . . . . . . . . . . . . . . .  43
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  44

1.  Introduction

   This document specifies how signaling is conducted in the course of
   CLUE sessions.  This includes how SIP/SDP signaling is applied to
   CLUE sessions as well as defining a CLUE-specific signaling protocol
   that complements SIP/SDP and supports negotiation of CLUE application
   level data.

   [Yes, this is a dup of the abstract for now.  Eventually it should
   say more.]

2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   This document draws liberally from the terminology defined in the
   CLUE Framework [I-D.ietf-clue-framework].

   Other terms introduced here:




Kyzivat, et al.          Expires March 19, 2014                 [Page 3]

Internet-Draft               CLUE Signaling               September 2013


   CLUE Channel:  A reliable, bidirectional, transport mechanism used to
      convey CLUE messages.  A CLUE channel consists of one SCTP stream
      in each direction over a DTLS/SCTP session.

3.  CLUE-Specific Signaling Protocol

   The CLUE Framework [I-D.ietf-clue-framework] mentions a CLUE-specific
   protocol for the exchange of ADVERTISEMENT and CONFIGURE messages,
   but gives little detail.  The Data Model
   [I-D.presta-clue-data-model-schema] specifies a model and XML
   representation for CLUE-related data, but doesn't currently specify
   exactly what data belongs in each message, or how messages are
   sequenced.  This document provides the detail missing from those
   documents.

3.1.  CLUE Messages

   CLUE messages have the following characteristics:

   o  They are encoded in XML, following the schema in section
      Section 3.4].

   o  There are two kinds of messages - requests and responses.  (This
      is similar to SIP.)

   o  Every request message expects exactly one response message.

   o  Every request message carries a sequence number that identifies
      it.

   o  Each end of the connection assigns sequential sequence numbers to
      the requests it sends.

   o  Every response message carries the sequence number of the message
      to which it responds.

   o  Responses are to be sent promptly upon the receipt of a request.
      (Needs more detail.)

   o  Responses also carry info describing the error.

3.1.1.  Request Messages

   A request message specifies an action the sender is requesting the
   recipient to perform.  There are a number of request types, each of
   which describes a different action.  Each carries parameters
   qualifying the action.




Kyzivat, et al.          Expires March 19, 2014                 [Page 4]

Internet-Draft               CLUE Signaling               September 2013


3.1.2.  Response Messages

   The recipient of a request message must send a response message that
   acknowledges that the request has been received.  The response
   indicates if the request was processed successfully, and if not, then
   the reason for failure.  A special reason (OK) indicates that the
   request was processes successfully.

3.1.3.  CLUE Requests

3.1.3.1.  ADVERTISEMENT Message

   This message contains XML representations of captures, capture
   scenes, encoding groups, and simultaneous sets using the types
   defined for those in the Data Model
   [I-D.presta-clue-data-model-schema].

   The XML definition for this is element <advertisement> in section
   Section 3.4.

   [[ Currently this does not contain any representation of encodings.
   It assumes those will be defined in SDP. ]]

3.1.3.2.  CONFIGURE Message

   This message optionally contains an XML representations of
   captureEncodings using the type defined in the Data Model
   [I-D.presta-clue-data-model-schema].  A configure message with no
   captureEncodings indicates that no captures are requested.

   [[ It currently also contains a reference to the request number of
   the advertisement it is based upon.  Whether this should be present,
   or if it should implicitly reference the most recently acknowledged
   advertisement is TBD. ]]

   The XML definition for this is element <configure> in section
   Section 3.4

3.1.3.3.  SUPPORTED Message

   The Supported message describes the CLUE versions, and options,
   supported by the sender.  The details of how use this message are
   presented in section Section 3.2.2.

3.1.3.4.  REQUIRED Message






Kyzivat, et al.          Expires March 19, 2014                 [Page 5]

Internet-Draft               CLUE Signaling               September 2013


   The Required message describes the CLUE version, and options, that
   have been negotiated by the sender and the receiver.  The details of
   how use this message are presented in section Section 3.2.2.

3.1.4.  CLUE Response Reasons

   The following reasons are defined:

   OK:  The message was successfully processed.

   Syntax Error:  Message has failed due to a syntax error detected at
      the message level.  The message does not conform to the schema.
      Used when the message cannot be parsed.

   Sequencing Error:  Sequence number has already been used, or is
      greater than the expected number.  (Details of possible errors
      depend upon the specific sequence numbering mechanism.)

   Version incompatibility:  There is no common value between the major
      version numbers supported by the two endpoints of the CLUE
      channel.

   Option incompatibility:  This can occur if options supported by one
      endpoint are inconsistent with those supported by the other
      endpoint.  E.g., The <mediaProvider> option is not specified by
      either endpoint.  Options SHOULD be specified so as to make it
      difficult for this problem to occur.

      This error may also be used to indicate that insufficient options
      have been required among the two ends for a useful session to
      result.  This can occur with a feature that needs to be present on
      at least one end, but not on a specific end.  E.g., The
      <mediaProvider> option was Supported by at least one of the
      endpoints, but it was not Required by either.

      This may also be used to indicate that an option element in the
      Required message has attributes or body content that is
      syntactically correct, but in inconsistent with the rules for
      option negotiation specified for that particular element.  The
      definition of each option must specify the negotiation rules for
      that option.

   Unsupported option:  Unsupported option

      An option element type received in a Required message did not
      appear in the corresponding Supported element.

      (This code is never received in response to a Supported message.)



Kyzivat, et al.          Expires March 19, 2014                 [Page 6]

Internet-Draft               CLUE Signaling               September 2013


   Unknown capture identity:  The received Configure message contains an
      unknown capture identity not previously declared by an
      Advertisement.  The message is ignored.

   Invalid identity:  The received Configure message contains an invalid
      capture identity.  For example a duplicated Capture scene identity
      or some other semantically incorrect usage.  The message has
      ignored.

   Invalid value:  The received message contains an invalid parameter
      value.  The value is not according to the specification for the
      containing element.

   Missing element:  The received message is missing an element.
      Certain parameters require multiple values, e.g. Point of capture
      requires X,Y,Z co-ordinates if one or more elements are missing
      this error code is used.

   Conflicting parameters or values:  The received message contains
      multiple values that may not be used together.

   Invalid capture area:  The received message defines a capture area
      that cannot be rendered in a sensible manner.  For example the
      capture area does not define a quadrilateral region.

   Invalid point of line of capture:  The indicated co-ordinate for the
      point on line of capture is invalid.  For example: does not lie
      between the point of capture and the area of capture or it is the
      same as the point of capture.

   Invalid capture scene entry:  The message contains an invalid capture
      scene entry.  For example the capture scene entry contains more
      than one media type.

   Invalid Simultaneous Set:  The simultaneous set contained in the
      message is invalid.  For example the simultaneous set refers to an
      undefined capture set or does not match the specified capture
      scene entries.

   Invalid Configuration:  The Configure message requests a
      configuration that the provider cannot support.

   Invalid Advertisement reference:  The Configure message refers to an
      invalid Advertisement.  The message refers-to/depends-upon out-of-
      date ADVERTISEMENT message or provides an invalid reference.

3.2.  Message Sequencing




Kyzivat, et al.          Expires March 19, 2014                 [Page 7]

Internet-Draft               CLUE Signaling               September 2013


   [[NOTE: Should have some state machines formalizing this
   sequencing.]]

3.2.1.  Pairing of Requests and Responses

   Each endpoint of a CLUE channel sends both requests and responses.
   For each request sent, a prompt response is required.  Each response
   identifies the request to which it responds.  After sending a
   request, one or more requests may be received before a response is
   received.

3.2.2.  Version Negotiation Happens First

   Upon establishment of the CLUE channel, version and option
   negotiation, using Supported and Required requests, MUST complete
   before any other requests are sent on the channel.  Refer to section
   Section 3.3 for details of this process.

3.2.3.  Provider and Consumer Roles

   Each CLUE endpoint has two roles that it potential performs: provider
   and consumer.  In common cases an endpoint can perform both roles.
   Which roles are actually performed is determined during option
   negotiation.

3.2.4.  Independent Sequencing of Provider and Consumer Roles

   In the provider role, an endpoint sends Advertisement messages and
   receives Configure messages.

   In the consumer role, an endpoint receives Advertisement messages and
   sends Configure messages.

   The messages (requests and responses) used by each role are exchanged
   over the same CLUE channel, and may be interleaved in an arbitrary
   manner, constrained only by the sequencing rules for each role.

3.2.5.  Signaling Changes in Provider State

   Once a CLUE session has been established, ADVERTISEMENTs and
   CONFIGUREs exchanged, and media is flowing, a provider may experience
   a change in state that has an effect on what it wishes or is able to
   provide.  In this case it may need to alter what it is sending and/or
   send a new ADVERTISEMENT.  In some cases it will be necessary to
   alter what is being sent without first sending a new ADVERTISEMENT
   and waiting for a CONFIGURE conforming to it.





Kyzivat, et al.          Expires March 19, 2014                 [Page 8]

Internet-Draft               CLUE Signaling               September 2013


   The following is a non-exhaustive list of situations and recommended
   actions:

   o  An advertised capture, that is not currently configured, is no
      longer available.

      To recover from this: Send a new ADVERTISEMENT that omits this
      capture.

   o  An advertised capture, that has been configured, is no longer
      available.

      To recover from this: (1) stop transmitting the configured
      encoding of this capture.  (2) Send a new ADVERTISEMENT that omits
      this capture.

   o  The provider loses some resource and must reduce the frame rate,
      frame size, or resolution of a capture encoding.

      If the reduced values still fall within the advertised values for
      the capture then the change may be made without any further
      signaling.

      If the change must be outside the range of what was advertised,
      then the provider must cease transmitting the capture encoding.
      It then must send a new ADVERTISEMENT reflecting what it is now
      capable of delivering.

   o  New or changed scenes or scene geometry.  For instance, the
      addition of a new scene containing presentation captures.  Also,
      an MCU may make significant changes in what it advertises as new
      endpoints join a conference.

   o  [Add more]

3.2.6.  Signaling Changes in Consumer State

   If the Consumer for some reason looses the CLUE state information how
   does it ask for an Advertisement from the provider?  There could be
   multiple possibilities.  A error code approach?  However error codes
   would typically be associated with a NACK so it may not be good for a
   Config message.  Maybe send a message which means "send me a complete
   update".  An alternative may be to release the connection or just do
   new signaling to establish a new CLUE session.

3.2.7.  Dangling Text [[TODO: FIX]]





Kyzivat, et al.          Expires March 19, 2014                 [Page 9]

Internet-Draft               CLUE Signaling               September 2013


   There is a very basic introduction to this topic in section 4
   (Overview) of the CLUE Framework [I-D.ietf-clue-framework].  After
   removing extraneous material it would look like:

              +-----------+                     +-----------+
              | Endpoint1 |                     | Endpoint2 |
              +----+------+                     +-----+-----+
                   |                                  |
                   | ADVERTISEMENT 1                  |
                   |*********************************>|
                   |                  ADVERTISEMENT 2 |
                   |<*********************************|
                   |                                  |
                   |                      CONFIGURE 1 |
                   |<*********************************|
                   | CONFIGURE 2                      |
                   |*********************************>|
                   |                                  |


   But we need much more than this, to show multiple CONFIGUREs per
   ADVERTISEMENT, interleaving of ADVERTISEMENTs and CONFIGUREs in both
   directions, etc.

   Message sequencing needs to be described at two levels:

   o  Basic sequencing of the CLUE messages themselves, without regard
      for the SIP/SDP signaling that may be going on at the same time.
      This is useful to cover the basic concepts.  That should be
      covered in this section.  It provides context for understanding
      the more detailed treatment later.

      This could include some simple state machines.

   o  In reality there is a complex dependency between CLUE signaling
      and SDP Offer/Answer exchanges carried in SIP signaling.  So there
      is a need to describe the valid ways in which these two forms of
      signaling interact.  That is covered in Section 5.

3.3.  Protocol Versioning and Options

3.3.1.  Versioning Objectives

   The CLUE versioning mechanism addresses the following needs:

   o  Coverage:

      *  Versioning of basic behavior and options,



Kyzivat, et al.          Expires March 19, 2014                [Page 10]

Internet-Draft               CLUE Signaling               September 2013


      *  CLUE message exchange,

      *  CLUE message exchange,

      *  coordinated use of SIP and SDP,

      *  required media behavior.

   o  Remain fixed for the duration of the CLUE channel

   o  Be extensible for configuration of new options.

   o  Be sufficient (with extensions) for all envisioned future
      versions.

3.3.2.  Versioning Overview

   An initial message exchange on the CLUE channel handles the
   negotiation of version and options.

   o  Dedicated message types are used for this negotiation.

   o  The negotiation is repeated if the CLUE channel is reestablished.

   The version usage is similar in philosophy to XMPP:

   o  See [RFC6120] section 4.7.5.

   o  A version has major and minor components.  (Each a non-negative
      integer.)

   o  Major version changes denote non-interoperable changes.

   o  Minor version changes denote schema changes that are backward
      compatible by ignoring unknown XML elements, or other backward
      compatible changes.

   o  If a common major version cannot be negotiated, then CLUE MUST NOT
      be used.

   o  The same message exchange also negotiates options.

   o  Each option is denoted by a unique XML element in the negotiation.

   Figure 1 shows the negotiation in simplified form:

                       | Supported       Supported |
                       |------------\ /------------|



Kyzivat, et al.          Expires March 19, 2014                [Page 11]

Internet-Draft               CLUE Signaling               September 2013


                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       | Required         Required |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       |  Advertise/Configure/...  |
                       |<------------------------->|

              Figure 1: Basic Option Negotiation (simplified)

   Dedicated message types are used for the negotiation because:

   o  The protocol can then ensure that the negotiation is done first,
      and once.  Not changing mid-session means an endpoint can plan
      ahead, and predict what may be used and what might be received.

   o  This provides extensible framework for negotiating optional
      features.

   o  A full option negotiation can be completed before other messages
      are exchanged.

   Figure 2 and Figure 3 are simplified examples of the Supported and
   Required messages:

                <supported>
                    <version major="1" minor="0">
                      <!- May repeat version if multiple
                         major versions supported.      ->
                   <!- Options follow ->
                   <mediaProvider/>
                    ...
                </supported>

                 Figure 2: Supported Message (simplified)

               <required>
                   <version major="1" minor="0">
                     <!- Requested options of peer follow ->
                  <!- Options follow ->
                  <mediaProvider/>
                   ...
               </required>

                  Figure 3: Required Message (simplified)



Kyzivat, et al.          Expires March 19, 2014                [Page 12]

Internet-Draft               CLUE Signaling               September 2013


3.3.3.  Version Negotiation

   The Supported message includes one or more <version> elements, each
   denoting a major/minor version combination that the sender of the
   message is capable of supporting.

   The <version> element contains both a major and minor version.  Each
   is a non-negative integer.  Each <version> element in the message
   MUST contain a unique major version number, distinct from the major
   version number in all the other <version> elements in the message.
   The minor version in a <version> element denotes the largest minor
   version the sender supports for the corresponding major version.
   (Minor versions are always backwards compatible, so support for a
   minor version implies support for all smaller minor versions.)

   Each endpoint of the CLUE channel sends a Supported message, and
   receives the Supported message sent by the other end.  Then each end
   compares the versions sent and the versions received to determine the
   version to be used for this CLUE session.

   o  If there is no major version in common between the two ends,
      negotiation fails.

   o  The <version> elements from the two ends that have the largest
      matching major version are selected.

   o  After exchange each end determines compatible version numbers to
      be used for encoding and decoding messages, and other behavior in
      the CLUE session.

      *  The <version> elements from the two ends that have the largest
         matching major version are selected.

      *  The side that sent the smaller minor version chooses the one it
         sent.

      *  The side that sent the larger minor version may choose the
         minor version it received, or the one it sent, or any value
         between those two.

   o  Each end then sends a Required message with a single <version>
      element containing the major and minor versions it has chosen.

      [[Note: "required" is the wrong semantic for this.  Might want a
      better message name.]]

   o  Each end then behaves in accord with the specifications denoted by
      the version it chose.  This continues until the end of the CLUE



Kyzivat, et al.          Expires March 19, 2014                [Page 13]

Internet-Draft               CLUE Signaling               September 2013


      session, or until changed as a result of another version
      negotiation when the CLUE channel is reestablished.

      [[Note: The version negotiation remains in effect even if the CLUE
      channel is lost.]]

3.3.4.  Option Negotiation

   Option negotiation is used to agree upon which options will be
   available for use within the CLUE session.  (It does not say that
   these options must be used.)  This may be used for both standard and
   proprietary options.  (As used here, and option could be either a
   feature described as part of this specification that is optional to
   implement, or a feature defined in a separate specification that
   extends this one.)

   Each end includes, within the Supported message it sends, elements
   describing those options it is willing and able to use with this CLUE
   session.

   Each side, upon receiving a Supported message, selects from that
   message those option elements that it wishes the peer to use.  (If/
   when occasion for that use arises.)  It then includes those selected
   elements into the Required message that it sends.

   Within a received Supported message, unknown option elements MUST be
   ignored.  This includes elements that are of a known type that is not
   known to denote an option.

3.3.5.  Option Elements

   Each option is denoted, in the Supported and Required messages, by an
   XML element.  There are no special rules for these elements - they
   can be any XML element.  The attributes and body of the element may
   carry further information about the option.  The same element type is
   used to denote the option in the Supported message and the
   corresponding Required message, but the attributes and body may
   differ according to option-specific rules.  This may be used to
   negotiate aspects of a particular option.  The ordering of option
   elements is irrelevant within the Supported and Required messages,
   and need not be consistent in the two.

   Only one option element is defined in this document: <mediaProvider>.

3.3.5.1.  <mediaProvider>

   The <mediaProvider> element, when placed in a Supported message,
   indicates that the sender is willing and able to send Advertisement



Kyzivat, et al.          Expires March 19, 2014                [Page 14]

Internet-Draft               CLUE Signaling               September 2013


   messages and receive Configure messages.  When placed in a Required
   message, the <mediaProvider> element indicates that the sender is
   willing, able, and desirous of receiving Advertisement messages and
   sending Configure messages.  If an endpoint does not receive
   <mediaProvider> in a Required message, it MUST NOT send Advertisement
   messages.  For common cases <mediaProvider> should be supported and
   required by both endpoints, to enable bidirectional exchange of
   media.  If not required by either end, the CLUE session is useless.
   This is an error condition, and SHOULD result in termination of the
   CLUE channel.

   The <mediaProvider> element has no defined attributes or body.

3.3.6.  Version & option negotiation errors

   The following are errors that may be detected and reported during
   version negotiation:

   o  Version incompatibility

      There is no common value between the major version numbers sent in
      a Supported message and those in the received Supported message.

   o  Option incompatibility

      This can occur if options supported by one endpoint are
      inconsistent with those supported by the other endpoint.  E.g.,
      The <mediaProvider> option is not specified by either endpoint.
      Options SHOULD be specified so as to make it difficult for this
      problem to occur.

      This error may also be used to indicate that insufficient options
      have been required among the two ends for a useful session to
      result.  This can occur with a feature that needs to be present on
      at least one end, but not on a specific end.  E.g., The
      <mediaProvider> option was Supported by at least one of the
      endpoints, but it was not Required by either.

      This may also be used to indicate that an option element in the
      Required message has attributes or body content that is
      syntactically correct, but in inconsistent with the rules for
      option negotiation specified for that particular element.  The
      definition of each option must specify the negotiation rules for
      that option.

   o  Unsupported option





Kyzivat, et al.          Expires March 19, 2014                [Page 15]

Internet-Draft               CLUE Signaling               September 2013


      An option element type received in a Required message did not
      appear in the corresponding Supported element.

      (Unsupported options received in a Supported message do not
      trigger this error.  They are ignored.)

   These errors are reported using the normal message error reporting
   mechanism.

   Other applicable error codes may also be returned in response to a
   Supported or Required message.

   Errors that occur at this stage result in negotiation failure.  When
   this occurs, CLUE cannot be used until the end of the SIP session, or
   until a new CLUE channel is negotiated and a subsequent version
   negotiation succeeds.  The SIP session may continue without CLUE
   features.

3.3.7.  Definition and Use of Version Numbers

   [[NOTE: THIS IS AWKWARD.  SUGGESTIONS FOR BETTER WAYS TO DEFINE THIS
   ARE WELCOME.]]

   This document defines CLUE version 1.0 (major=1, minor=0).  This
   denotes the normative behavior defined in this document and other
   documents upon which it normatively depends, including but is not
   limited to:

   o  the schema defined in Section 3.4 of this document;

   o  the schema defined in [clue-data-model];

   o  the protocol used to exchange CLUE messages;

   o  the protocol defined herein that defines valid sequence of CLUE
      messages;

   o  the specific rules defined herein for employing SIP, SDP, and RTP
      to realize the CLUE messages.

   Given two CLUE versions Vx and Vy, then Vx is backward compatible
   with Vy if and only if:

   o  All messages valid according to the schema of Vx are also valid
      according to the schemas of Vy






Kyzivat, et al.          Expires March 19, 2014                [Page 16]

Internet-Draft               CLUE Signaling               September 2013


   o  All messages valid according to the schema of Vy can be made valid
      according to the schemas of Vx by deleting elements undefined in
      the schemas of Vx.

      [[NOTE: THIS PROBABLY NEEDS WORK!]]

   o  All normative behaviors defined for Vx are defined consistently
      for Vy.

      [[NOTE: SOME HAND WAVING HERE.]]

   Revisions, updates, to any of the documents denoted by Version 1.0
   MAY result in the definition of a new CLUE version.  If they do, then
   this document MUST be revised to define the new version.

   The CLUE version to be defined in a revision to this document MUST be
   determined as follows:

   o  If the revision and the document being revised are mutually
      backward compatible (they are functionally equivalent), then the
      CLUE version MUST remain unchanged.

   o  Else if the revision is backward compatible with the document
      being revised, then the CLUE major version MUST remain unchanged,
      and the CLUE minor version MUST be increased by one (1).

   o  Else the CLUE major version must be increased by one (1), and the
      CLUE minor version set to zero (0).

   When a CLUE implementation sends a Supported message, it MUST include
   the CLUE versions it is willing and able to conform with.

3.3.8.  Version & Option Negotiation Examples

3.3.8.1.  Successful Negotiation - Multi-version

                       | Supported       Supported |
                       | Version 2.0               |
                       | Version 1.2   Version 1.1 |
                       | mediaProv       mediaProv |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       | OK response   OK response |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|



Kyzivat, et al.          Expires March 19, 2014                [Page 17]

Internet-Draft               CLUE Signaling               September 2013


                       |                           |
                       | Required         Required |
                       | Version 1.2   Version 1.1 |
                       | mediaProv       mediaProv |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       | OK response   OK response |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       |         Advertise         |
                       |<------------------------->|
                       |                           |
                       |         Configure         |
                       |<------------------------->|


   The endpoint on the left can support versions 1.2 and 2.0, and
   because of backward compatibility can support versions 1.0 and 1.1.
   The endpoint on the right supports only version 2.0.  Both endpoints
   with to both provide and consume media.  They each send a Supported
   message indicating what they support.

   The element on the left, upon receiving the Supported message,
   determines that it is permitted to use version 1.2 or 1.1, and
   decides to use 1.2.  It sends a Required message containing version
   1.2 and also includes the mediaProvider option element, because it
   wants its peer to provide media.

   The element on the right, upon receiving the Supported message,
   selects version 1.1 because it is the highest version in common to
   the two sides.  It sends a Required message containing version 1.1
   because that is the highest version in common.  It also includes the
   mediaProvider option element, because it wants its peer to provide
   media.

   Upon receiving the Required messages, both endpoints determine that
   they should send Advertisements.

   Advertisement and Configure messages will flow in both directions.

3.3.8.2.  Successful Negotiation - Consumer-Only Endpoint

                       | Supported       Supported |
                       | Version 1.0   Version 1.0 |



Kyzivat, et al.          Expires March 19, 2014                [Page 18]

Internet-Draft               CLUE Signaling               September 2013


                       | mediaProv       (no opts) |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       | OK response   OK response |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       | Required         Required |
                       | Version 1.0   Version 1.0 |
                       | (no opts)       mediaProv |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       | OK response   OK response |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       |  Advertise                |
                       |-------------------------->|
                       |                           |
                       |                 Configure |
                       |<--------------------------|


   The endpoint on the right consumes media, but doesn't provide any so
   it doesn't include the mediaProvider option element in the Supported
   message it sends.

   The element on the left would like to include a mediaProvider option
   element in the Requirements message it sends, but can't because it
   did not receive one in the Supported message it received.

   Advertisement messages will only go from left to right, and Configure
   messages will only go from right to left.

3.3.8.3.  Successful Negotiation - Provider-Only Endpoint

                       | Supported       Supported |
                       | Version 1.0   Version 1.0 |
                       | mediaProv       mediaProv |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|



Kyzivat, et al.          Expires March 19, 2014                [Page 19]

Internet-Draft               CLUE Signaling               September 2013


                       |                           |
                       | OK response   OK response |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       | Required         Required |
                       | Version 1.0   Version 1.0 |
                       | (no opts)       mediaProv |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       | OK response   OK response |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       |  Advertise                |
                       |-------------------------->|
                       |                           |
                       |                 Configure |
                       |<--------------------------|


   The endpoint on the left provides media but does not consume any so
   it includes the mediaProvider option element in the Supported message
   it sends, but does't include the mediaProvider option element in the
   Required message it sends.

   Advertisement messages will only go from left to right, and Configure
   messages will only go from right to left.

3.3.8.4.  Version Incompatibility

                       | Supported       Supported |
                       | Version 1.2   Version 2.1 |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       | Version           Version |
                       | Incompat.       Incompat. |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       |     close clue channel    |



Kyzivat, et al.          Expires March 19, 2014                [Page 20]

Internet-Draft               CLUE Signaling               September 2013


                       |<------------------------->|
                       |                           |
                       |     legacy mode or BYE    |
                       |<------------------------->|


   Upon receiving the Supported message, each endpoint discovers there
   is no major version in common, so CLUE usage is not possible.  Each
   sends an error response indicating this and then ceases CLUE usage.

3.3.8.5.  Option Incompatibility

                       | Supported       Supported |
                       | Version 1.0   Version 1.0 |
                       | mediaProv       mediaProv |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       | Required         Required |
                       | (no opts)       (no opts) |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       | Option             Option |
                       | Incompat.       Incompat. |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       |     close clue channel    |
                       |<------------------------->|
                       |                           |
                       |     legacy mode or BYE    |
                       |<------------------------->|


   Neither of the endpoints is willing to provide media.  It makes no
   sense to continue CLUE operation in this situation.  Each endpoint
   realizes this upon receiving the Supported message, sends an error
   response indicating this and then ceases CLUE usage.









Kyzivat, et al.          Expires March 19, 2014                [Page 21]

Internet-Draft               CLUE Signaling               September 2013


3.3.8.6.  Syntax Error

                       | Supported          !@#$%^ |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       | syntax error  OK response |
                       |------------\ /------------|
                       |             X             |
                       |<-----------/ \----------->|
                       |                           |
                       |     close clue channel    |
                       |-------------------------->|
                       |                           |
                       |     legacy mode or BYE    |
                       |<------------------------->|


3.4.  Message Syntax

   [[ The following is a first cut at a schema for the actual messages
   in the clue protocol.  It uses <encodingGroups> from the data model
   but not <encodings>.  Rather, it assumes that encodings are described
   in SDP as m-lines with a text identifier, and that the identifier has
   the same value as the encodingIDs embedded in the <encodingGroups>.
   If we stick with this the data model should be adjusted to agree, but
   until then it should "work".  The SDP encoding of the identifier is
   proposed to be 'a=label:ID', though 'a=mid:ID' is another candidate.
   ]]

   For now there only <advertisement> and <configure> are defined.  More
   messages will be needed for acknowledgment.

   <?xml version="1.0" encoding="UTF-8" ?>
   <xs:schema
      targetNamespace="urn:ietf:params:xml:ns:clue-message"
      xmlns:tns="urn:ietf:params:xml:ns:clue-message"
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xmlns:dm="urn:ietf:params:xml:ns:clue-info"
      xmlns="urn:ietf:params:xml:ns:clue-message"
      elementFormDefault="qualified"
      attributeFormDefault="unqualified">

   <!-- Import data model schema -->
      <xs:import namespace="urn:ietf:params:xml:ns:clue-info"
                 schemaLocation="clue-data-model-04-wip.xsd"/>




Kyzivat, et al.          Expires March 19, 2014                [Page 22]

Internet-Draft               CLUE Signaling               September 2013


   <!-- ELEMENT DEFINITIONS -->
   <xs:element name="response"  type="responseMessageType"/>
   <xs:element name="advertisement" type="advertisementMessageType"/>
   <xs:element name="configure" type="configureMessageType"/>
   <xs:element name="supported" type="supportedMessageType"/>
   <xs:element name="required"  type="requiredMessageType"/>

   <!-- CLUE MESSAGE TYPE -->
   <xs:complexType name="clueMessageType" abstract="true">
     <xs:sequence>
       <!-- mandatory fields -->
       <!-- TBS: version info -->
     </xs:sequence>
   </xs:complexType>

   <!-- CLUE REQUEST MESSAGE TYPE -->
   <xs:complexType name="clueRequestMessageType" abstract="true">
    <xs:complexContent>
     <xs:extension base="clueMessageType">
      <xs:sequence>
        <!-- mandatory fields -->
        <xs:element name="requestNumber" type="xs:integer"/>
      </xs:sequence>
     </xs:extension>
    </xs:complexContent>
   </xs:complexType>

   <!-- CLUE RESPONSE MESSAGE TYPE -->
   <xs:complexType name="clueResponseMessageType">
    <xs:complexContent>
     <xs:extension base="clueMessageType">
      <xs:sequence>
        <!-- mandatory fields -->
        <xs:element name="requestNumber" type="xs:integer"/>
        <xs:element name="reason" type="reasonType" minOccurs="1"/>
        <!-- optional fields -->
        <xs:any namespace="##other"
            processContents="lax" minOccurs="0"/>
      </xs:sequence>
     </xs:extension>
    </xs:complexContent>
   </xs:complexType>

   <!-- CLUE ADVERTISEMENT MESSAGE TYPE -->
   <xs:complexType name="advertisementMessageType">
    <xs:complexContent>
     <xs:extension base="clueRequestMessageType">
      <xs:sequence>



Kyzivat, et al.          Expires March 19, 2014                [Page 23]

Internet-Draft               CLUE Signaling               September 2013


        <!-- mandatory fields -->
        <xs:element name="mediaCaptures"
                    type="dm:mediaCapturesType"/>
        <xs:element name="encodingGroups"
                    type="dm:encodingGroupsType"/>
        <!-- The encodings are defined via identifiers in the SDP,
             referenced in encodingGroups -->
        <xs:element name="captureScenes"
                    type="dm:captureScenesType"/>
        <!-- optional fields -->
        <xs:element name="simultaneousSets"
                    type="dm:simultaneousSetsType" minOccurs="0"/>
        <xs:any namespace="##other"
                processContents="lax" minOccurs="0"/>
      </xs:sequence>
     </xs:extension>
    </xs:complexContent>
   </xs:complexType>

   <!-- CLUE CONFIGURE MESSAGE TYPE -->
   <xs:complexType name="configureMessageType">
    <xs:complexContent>
     <xs:extension base="clueRequestMessageType">
      <xs:sequence>
        <!-- mandatory fields -->
        <xs:element name="advertisementNumber" type="xs:integer"/>
        <!-- advertisementNumber is requestNumber
             of the advertisement-->
        <!-- optional fields -->
        <xs:element name="captureEncodings"
                    type="dm:captureEncodingsType" minOccurs="0"/>
        <xs:any namespace="##other"
                processContents="lax" minOccurs="0"/>
      </xs:sequence>
     </xs:extension>
    </xs:complexContent>
   </xs:complexType>

   <!-- CLUE SUPPORTED MESSAGE TYPE -->
   <xs:complexType name="supportedMessageType">
    <xs:complexContent>
     <xs:extension base="clueRequestMessageType">
      <xs:sequence>
        <!-- mandatory fields -->
        <xs:element name="version"
                    type="versionType"
                    maxOccurs="unbounded"/>
        <!-- optional fields -->



Kyzivat, et al.          Expires March 19, 2014                [Page 24]

Internet-Draft               CLUE Signaling               September 2013


        <xs:element name="Options"
                    type="OptionsType" minOccurs="0"/>
        <xs:any namespace="##other"
                processContents="lax" minOccurs="0"/>
      </xs:sequence>
     </xs:extension>
    </xs:complexContent>
   </xs:complexType>

   <!-- CLUE REQUIRED MESSAGE TYPE -->
   <xs:complexType name="requiredMessageType">
    <xs:complexContent>
     <xs:extension base="clueRequestMessageType">
      <xs:sequence>
        <!-- mandatory fields -->
        <xs:element name="version"
                    type="versionType"
                    maxOccurs="1"/>
        <!-- optional fields -->
        <xs:element name="Options"
                    type="OptionsType" minOccurs="0"/>
        <xs:any namespace="##other"
                processContents="lax" minOccurs="0"/>
      </xs:sequence>
     </xs:extension>
    </xs:complexContent>
   </xs:complexType>

   <!-- OPTIONS TYPE -->
   <xs:complexType name="optionsType">
     <!-- each element represents one option -->
     <xs:any processContents="lax" minOccurs="0"/>
   </xs:complexType>

   <!-- REASON TYPE -->
   <xs:complexType name="reasonType">
     <xs:simpleContent>
       <xs:extension base="xs:string">
         <xs:attribute type="xs:short" name="code" use="required"/>
       </xs:extension>
     </xs:simpleContent>
   </xs:complexType>

   </xs:schema>


3.5.  Message Transport




Kyzivat, et al.          Expires March 19, 2014                [Page 25]

Internet-Draft               CLUE Signaling               September 2013


   CLUE messages are transported over a bidirectional CLUE channel.  In
   a two-party CLUE session, a CLUE channel connects the two endpoints.
   In a CLUE conference, each endpoint has a CLUE channel connecting it
   to an MCU.  (In conferences with cascaded mixers [RFC4353], two MCUs
   will be connected by a CLUE channel.)

3.5.1.  CLUE Channel Lifetime

   The transport mechanism used for CLUE messages is DTLS/SCTP as
   specified in [I-D.tuexen-tsvwg-sctp-dtls-encaps] and
   [I-D.ietf-mmusic-sctp-sdp].  A CLUE channel consists of one SCTP
   stream in each direction over a DTLS/SCTP session.  The mechanism for
   establishing the DTLS/SCTP session is described in Section 4.

   The CLUE channel will usually be offered during the initial SIP
   INVITE, and remain connected for the duration of the CLUE/SIP
   session.  However this need not be the case.  The CLUE channel may be
   established mid-session after desire and capability for CLUE have
   been determined, and the CLUE channel may be dropped mid-call if the
   desire and/or capability to support it is lost.

   There may be cases when it becomes necessary to "reset" the CLUE
   channel.  This by be as a result of an error on the underlying SCTP
   association, a need to change the endpoint address of the SCTP
   association, loss of CLUE protocol state, or something else TBD.

   The precise mechanisms used to determine when a reset is required,
   and how to accomplish it and return to a well defined state are TBS.

3.5.2.  Channel Error Handling

   We will need to specify behavior in the face of transport errors that
   are so severe that they can't be managed via CLUE messaging within
   the CLUE channel.  Some errors of this sort are:

   o  Unable to establish the SCTP association after signaling it in
      SDP.

   o  CLUE channel setup rejected by peer.

   o  Error reported by transport while writing message to CLUE channel.

   o  Error reported by transport while reading message from CLUE
      channel.

   o  Timeout - overdue acknowledgement of a CLUE message.
      (Requirements for now soon a message must be responded to are
      TBD.)



Kyzivat, et al.          Expires March 19, 2014                [Page 26]

Internet-Draft               CLUE Signaling               September 2013


   o  Application fault.  CLUE protocol state lost.

   The worst case is to drop the entire CLUE call.  Another possibility
   is to fall back to legacy compatibility mode.  Or perhaps a "reset"
   can be done on the protocol.  E.g. this might be accomplished by
   sending a new O/A and establishing a replacement SCTP association.
   Or a new CLUE channel might be established within the existing SCTP
   association.

3.6.  Message Framing

   Message framing is provided by the SCTP transport protocol.  Each
   CLUE message is carried in one SCTP message.

4.  CLUE use of SDP O/A

4.1.  Establishing the CLUE channel

   The CLUE channel is usually offered in the first SIP O/A exchange
   between two parties in an intended CLUE session.  The offer of the
   CLUE channel is the indicator that this SIP session is proposing to
   establish a CLUE session.

   (However it is also acceptable to start with a non-CLUE SIP session
   and upgrade it to a CLUE session later.)

   The mechanism for negotiating a DTLS/SCTP connection is specified in
   [I-D.ietf-mmusic-sctp-sdp].  We need to specify how to select the
   specific pair of SCTP streams that comprise the CLUE channel.

   The presence of an active m-line for the CLUE channel in an SDP offer
   is an indication that the offer that the sender is CLUE-capable and
   hence can understand CLUE-specific syntax.

4.2.  Representing CLUE Encodings in SDP

   Many CLUE constructs have no good analog in SDP.  Entities such as
   'captures', which describe spatial and other properties of a capture
   source such as a camera, are not tied directly to RTP streams, do not
   have negotiated properties and would prove a significant challenge to
   represent in SDP syntax (while also greatly increasing the size of
   the SDP).

   However, two entities defined in the CLUE Framework
   [I-D.ietf-clue-framework] are a much closer fit for SDP: Encodings
   and Encoding Groups.  Both describe RTP media properties and
   limitations, though unlike most SDP usage they describe the sender's
   capabilities, not the receiver's.  Representing encodings in CLUE



Kyzivat, et al.          Expires March 19, 2014                [Page 27]

Internet-Draft               CLUE Signaling               September 2013


   splits media limitations across two protocols, and risks duplicated
   and potentially contradictory information being sent in CLUE and SDP.
   As such we are exploring representing this information in SDP, with
   the decision to convey them in the CLUE messages only to be made if
   the SDP approach proves impractical.

   This draft presents an attempt to describe CLUE encodings in SDP.  As
   a decision has not yet been reached on how multiplexed RTP streams
   are to be expressed in SDP, at this stage the draft does so without
   multiplexing, using existing SDP attributes, with a seperate "m" line
   and hence port per unidirectional RTP stream.  This is done with the
   understanding that when a decision is reached on new syntax for
   multiplexing RTP streams in SDP the CLUE SDP signaling will be
   modified to use it.  Further, the framework document states that the
   multiplexing of streams by an implementation is optional, and in the
   case of a disaggregated system, with media streams going to different
   addresses, may not be possible.

   With the current scheme of using existing syntax, an encoding is
   specified in SDP as a unicast "m" line, which MUST be marked as
   sendonly with the "a=sendonly" attribute or as inactive with the
   "a=inactive" attribute.  The encoder capabilities of the stream are
   defined here using existing syntax; for instance, for H.264 see Table
   6 in [RFC6184] for a list of valid parameters for representing
   encoder sender stream limits.

   Every "m" line representing a CLUE encoding SHOULD contain a "label"
   attribute as defined in [RFC4574].  This label is used to identify
   the encoding by the sender in CLUE Advertisement messages and by the
   receiver in CLUE Configure messages.

   A receiver who wishes to receive a CLUE stream via this encoding
   requires a matching "a=recvonly" "m" line.  As well as the normal
   restrictions defined in [RFC3264] media MUST NOT be sent on this
   stream until the sender has received a valid CLUE Configure message
   specifying the capture to be used for this stream.

4.3.  Representing CLUE Encoding Groups in SDP

   As per the previous section, there would be advantages to conveying
   encoding group information in SDP.  However, with current SDP syntax
   there is no way to express the encoding group limits defined in the
   Data Model [I-D.presta-clue-data-model-schema].  As such the current
   draft keeps encoding groups as part of the Advertisement message for
   the time being.

4.4.  Signaling CLUE control of "m" lines




Kyzivat, et al.          Expires March 19, 2014                [Page 28]

Internet-Draft               CLUE Signaling               September 2013


   In many cases an implementation may wish to mix media channels that
   are under CLUE control with those that are not.  It may want to
   ensure that there are non-CLUE streams for purposes of
   interoperability, or that can provide media from the start of the
   call before CLUE negotiation completes, or because the implementation
   wants CLUE-controlled video but traditional audio, or for any other
   reasons.

   Which "m" lines in an SDP body are under control of the CLUE channel
   is signalled via the SDP Grouping Framework [RFC5888].  Devices that
   wish to negotiate CLUE MUST support the grouping framework.

   A new semantic for the "group" session-level attribute, "CLUE", is
   used to signal which "m" lines are under the control of a CLUE
   channel.  As per the framework, all of the "m" lines of a session
   description that uses "group" MUST be identified with a "mid"
   attribute whether they are controlled by CLUE or not.  The "mid" id
   of any "m" lines controlled by a CLUE channel MUST be included in the
   "CLUE" group attribute alongside the "mid" id of the CLUE channel
   controlling them.

   The CLUE group MUST NOT include more than one "m" line for a CLUE
   channel.  If a CLUE channel is part of the CLUE group attribute other
   media "m" lines included in the group are under the control of that
   CLUE channel; media MUST NOT be sent or received on these "m" lines
   until the CLUE channel has been negotiated and negotiation has taken
   place as defined in this document.  If no CLUE channel is part of the
   CLUE group attribute then media MUST NOT be sent or received on these
   "m" lines.

   "m" lines not specified as under CLUE control follow normal rules for
   media streams negotiated in SDP as defined in documents such as
   [RFC3264].

   An SDP MAY include more than one group attribute with the "CLUE"
   semantic.  An "mid" id for a given "m" line MUST NOT be included in
   more than one CLUE group.

4.5.  Ensuring interoperability with non-CLUE devices

   A CLUE-capable device sending an initial SDP offer SHOULD include an
   "m" line for the CLUE channel, but SHOULD NOT include any other CLUE-
   controlled "m" lines.  Once each side of the call is aware that the
   other side is CLUE-capable a new O/A exchange MAY be used to add
   CLUE-controlled "m" lines.

5.  Interaction of CLUE and SDP negotiations




Kyzivat, et al.          Expires March 19, 2014                [Page 29]

Internet-Draft               CLUE Signaling               September 2013


   Information about media streams in CLUE is split between two message
   types: SDP, which defines media addresses and limits, and the CLUE
   channel, which defines properties of capture devices available, scene
   information and additional constraints.  As a result certain
   operations, such as advertising support for a new transmissible
   capture with associated stream, cannot be performed atomically, as
   they require changes to both SDP and CLUE messaging.

   This section defines how the negotiation of the two protocols
   interact, provides some recommendations on dealing with intermediary
   stages in non-atomic operations, and mandates additional constraints
   on when CLUE-configured media can be sent.

5.1.  Independence of SDP and CLUE negotiation

   To avoid complicated state machines with the potential to reach
   invalid states if messages were to be lost, or be rewritten en-route
   by middle boxes, the current proposal is that SDP and CLUE messages
   are independent.  The state of the CLUE channel does not restrict
   when an implementation may send a new SDP offer or answer, and
   likewise the implementation's ability to send a new CLUE
   Advertisement or Configure message is not restricted by the results
   of or the state of the most recent SDP negotiation.

   The primary implication of this is that a device may receive an SDP
   with a CLUE encoding it does not yet have capture information for, or
   receive a CLUE Configure message specifying a capture encoding for
   which the far end has not negotiated a media stream in SDP.

   CLUE messages contain an EncodingID which is used to identify a
   specific encoding in SDP.  The non-atomic nature of CLUE negotiation
   means that a sender may wish to send a new Advertisement before the
   corresponding SDP message.  As such the sender of the CLUE message
   MAY include an EncodingID which does not currently match an extant id
   in SDP.

5.2.  Recommendations for operating with non-atomic operations

   Generally, implementations that receive messages for which they have
   incomplete information SHOULD wait until they have the corresponding
   information they lack before sending messages to make changes related
   to that information.  For instance, an implementation that receives a
   new SDP offer with three new "a=sendonly" CLUE "m" lines that has not
   received the corresponding CLUE Advertisement providing the capture
   information for those streams SHOULD NOT include corresponding
   "a=recvonly" lines in its answer, but instead should make a new SDP
   offer when and if a new Advertisement arrives with captures relevant
   to those encodings.



Kyzivat, et al.          Expires March 19, 2014                [Page 30]

Internet-Draft               CLUE Signaling               September 2013


   Because of the constraints of offer/answer and because new SDP
   negotiations are generally more 'costly' than sending a new CLUE
   message, implementations needing to make changes to both channels
   SHOULD prioritize sending the updated CLUE message over sending the
   new SDP message.  The aim is for the recipient to receive the CLUE
   changes before the SDP changes, allowing the recipient to send their
   SDP answers without incomplete information, reducing the number of
   new SDP offers required.

5.3.  Constraints on sending media

   While SDP and CLUE message states do not impose constraints on each
   other, both impose constraints on the sending of media - media MUST
   NOT be sent unless it has been negotiated in both CLUE and SDP: an
   implementation MUST NOT send a specific CLUE capture encoding unless
   its most recent SDP exchange contains an active media channel for
   that encoding AND the far end has sent a CLUE Configure message
   specifying a valid capture for that encoding.

6.  Example: A call between two CLUE-capable endpoints

   This example illustrates a call between two CLUE-capable endpoints.
   Alice, initiating the call, is a system with three cameras and three
   screens.  Bob, receiving the call, is a system with two cameras and
   two screens.  A call-flow diagram is presented, followed by an
   summary of each message.

   To manage the size of this section only video is considered, and SDP
   snippets only illustrate video 'm' lines.  ACKs are not discussed.



                 +----------+                      +-----------+
                 |  Alice   |                      |    Bob    |
                 |          |                      |           |
                 +----+-----+                      +-----+-----+
                      |                                  |
                      |                                  |
                      | INVITE 1 (BASIC SDP+COMEDIA)     |
                      |--------------------------------->|
                      |                                  |
                      |                                  |
                      |     200 OK 2 (BASIC SDP+COMEDIA) |
                      |<---------------------------------|
                      |                                  |
                      |                                  |
                      | ACK 1                            |
                      |--------------------------------->|



Kyzivat, et al.          Expires March 19, 2014                [Page 31]

Internet-Draft               CLUE Signaling               September 2013


                      |                                  |
                      |                                  |
                      |                                  |
                      |<########### MEDIA 1 ############>|
                      |   1 video A->B, 1 video B->A     |
                      |<################################>|
                      |                                  |
                      |                                  |
                      |                                  |
                      |<================================>|
                      |   CLUE CTRL CHANNEL ESTABLISHED  |
                      |<================================>|
                      |                                  |
                      |                                  |
                      | ADVERTISEMENT 1                  |
                      |*********************************>|
                      |                                  |
                      |                                  |
                      |                  ADVERTISEMENT 2 |
                      |<*********************************|
                      |                                  |
                      |                                  |
                      | INVITE 2 (+3 sendonly)           |
                      |--------------------------------->|
                      |                                  |
                      |                                  |
                      |                      CONFIGURE 1 |
                      |<*********************************|
                      |                                  |
                      |                                  |
                      |           200 OK 2 (+2 recvonly) |
                      |<---------------------------------|
                      |                                  |
                      |                                  |
                      | ACK 2                            |
                      |--------------------------------->|
                      |                                  |
                      |                                  |
                      |                                  |
                      |<########### MEDIA 2 ############>|
                      |   2 video A->B, 1 video B->A     |
                      |<################################>|
                      |                                  |
                      |                                  |
                      |           INVITE 3 (+2 sendonly) |
                      |<---------------------------------|
                      |                                  |
                      |                                  |



Kyzivat, et al.          Expires March 19, 2014                [Page 32]

Internet-Draft               CLUE Signaling               September 2013


                      | CONFIGURE 3                      |
                      |*********************************>|
                      |                                  |
                      |                                  |
                      | 200 OK 3 (+2 recvonly)           |
                      |--------------------------------->|
                      |                                  |
                      |                                  |
                      |                                  |
                      |                            ACK 3 |
                      |<---------------------------------|
                      |                                  |
                      |                                  |
                      |                                  |
                      |<########### MEDIA 3 ############>|
                      |   2 video A->B, 2 video B->A     |
                      |<################################>|
                      |                                  |
                      |                                  |
                      |                                  |
                      v                                  v



   In INVITE 1, Alice sends Bob a SIP INVITE including in the SDP body
   the basilar audio and video capabilities ("BASIC SDP") and the
   information needed for opening a control channel to be used for CLUE
   protocol messages exchange, according to what is envisioned in the
   COMEDIA approach ("COMEDIA") for DTLS/SCTP channel
   [I-D.ietf-mmusic-sctp-sdp].  A snippet of the SDP showing the
   grouping attribute and the video m-line are shown below (mid 3
   represents the CLUE channel):


      ...
      a=group:CLUE 3
      ...
      m=video 6002 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
      a=sendrecv
      a=mid:2



   Bob responds with a similar SDP (200 OK 1); due to their similiarity
   no SDP snippet is shown here.  Alice and Bob are each able to send a
   single audio and video stream (whether they choose to send this



Kyzivat, et al.          Expires March 19, 2014                [Page 33]

Internet-Draft               CLUE Signaling               September 2013


   initial media before CLUE has been negotiated is implementation-
   dependent).  This is illustrated as MEDIA 1.

   With the successful initial O/A Alice and Bob are also free to
   negotiate the CLUE channel.  Once this is successfully established
   CLUE negotiation can begin.  This is illustrated as CLUE CHANNEL
   ESTABLISHED.

   Alice now sends her CLUE Advertisement (ADVERTISEMENT 1).  She
   advertises three static captures representing her three cameras.  She
   also includes switched captures suitable for two- and one-screen
   systems.  All of these captures are in a single capture scene, with
   suitable capture scene entries to tell Bob that he should either
   subscribe to the three static captures, the two switched capture view
   or the one switched capture view.  Alice has no simultaneity
   constraints, so includes all six captures in one simultaneous set.
   Finally, Alice includes an encoding group with three encoding IDs:
   "enc1", "enc2" and "enc3".  These encoding ids aren't currently
   valid, but will match the next SDP offer she sends.

   Bob received ADVERTISEMENT 1 but does not yet send a Configure
   message, because he has not yet received Alice's encoding
   information, so as yet he does not know if she will have sufficient
   resources to send him the two streams he ideally wants at a quality
   he is happy with.

   Bob also sends his CLUE Advertisement (ADVERTISEMENT 2).  He
   advertises two static captures representing his cameras.  He also
   includes a single composed capture for single-screen systems, in
   which he will composite the two camera views into a single video
   stream.  All three captures are in a single capture scene, with
   suitable capture scene entries to tell Alice that she should either
   subscribe to the two static captures, or the single composed capture.
   Bob also has no simultaneity constraints, so includes all three
   captures in one simultaneous set.  Bob also includes a single
   encoding group with two encoding IDs: "foo" and "bar".

   Similarly, Alices receives ADVERTISEMENT 2 but does not yet send a
   Configure message, because she has not yet received Bob's encoding
   information.











Kyzivat, et al.          Expires March 19, 2014                [Page 34]

Internet-Draft               CLUE Signaling               September 2013


   Alice now sends INVITE 2.  She maintains the sendrecv audio, video
   and CLUE m-lines, and she adds three new sendonly m-lines to
   represents the maximum three encodings she can send.  Each of these
   m-lines has a label corresponding to one of the encoding ids from
   ADVERTISEMENT 1.  Each also has its mid added to the grouping
   attribute to show they are controlled by the CLUE channel.  A snippet
   of the SDP showing the grouping attribute and the video m-lines are
   shown below (mid 3 represents the CLUE channel):


      ...
      a=group:CLUE 3 4 5 6
      ...
      m=video 6002 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
      a=sendrecv
      a=mid:2
      ...
      m=video 6004 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016
      a=sendonly
      a=mid:4
      a=label:enc1
      m=video 6006 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016
      a=sendonly
      a=mid:5
      a=label:enc2
      m=video 6008 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016
      a=sendonly
      a=mid:6
      a=label:enc3



   Bob now has all the information he needs to decide which streams to
   configure.  As such he now sends CONFIGURE 1.  This requests the pair
   of switched captures that represent Alice's scene, and he configures
   them with encoder ids "enc1" and "enc2".

   Alice receives Bob's message CONFIGURE 1 but does not yet send the
   capture encodings specified, because at this stage Bob hasn't
   negotiated the ability to receive these streams in SDP.



Kyzivat, et al.          Expires March 19, 2014                [Page 35]

Internet-Draft               CLUE Signaling               September 2013


   Bob now sends his SDP answer as part of 200 OK 2.  Alongside his
   original audio, video and CLUE m-lines he includes two active
   recvonly m-lines and a zeroed m-line for the third.  He adds their
   mid values to the grouping attribute to show they are controlled by
   the CLUE channel.  A snippet of the SDP showing the grouping
   attribute and the video m-lines are shown below (mid 100 represents
   the CLUE channel):


      ...
      a=group:CLUE 11 12 100
      ...
      m=video 58722 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
      a=sendrecv
      a=mid:10
      ...
      m=video 58724 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
      a=recvonly
      a=mid:11
      m=video 58726 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
      a=recvonly
      a=mid:12
      m=video 0 RTP/AVP 96



   On receiving 200 OK 2 from Bob Alice is now able to send the two
   streams of video Bob requested - this is illustrated as MEDIA 2.

   The constraints of offer/answer meant that Bob could not include his
   encoder information as new m-lines in 200 OK 2.  As such Bob now
   sends INVITE 3 to generate a new offer.  Along with all the streams
   from 200 OK 2 Bob also includes two new sendonly streams.  Each
   stream has a label corresponding to the encoding ids in his
   ADVERTISEMENT 2 message.  He also adds their mid values to the
   grouping attribute to show they are controlled by the CLUE channel.
   A snippet of the SDP showing the grouping attribute and the video
   m-lines are shown below (mid 100 represents the CLUE channel):


      ...
      a=group:CLUE 11 12 13 14 100



Kyzivat, et al.          Expires March 19, 2014                [Page 36]

Internet-Draft               CLUE Signaling               September 2013


      ...
      m=video 58722 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
      a=sendrecv
      a=mid:10
      ...
      m=video 58724 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
      a=recvonly
      a=mid:11
      m=video 58726 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
      a=recvonly
      a=mid:12
      m=video 0 RTP/AVP 96
      m=video 58728 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016
      a=sendonly
      a=label:foo
      a=mid:13
      m=video 58730 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016
      a=sendonly
      a=label:bar
      a=mid:14



   Having received this Alice now has all the information she needs to
   send CONFIGURE 2.  She requests the two static captures from Bob, to
   be sent on encodings "foo" and "bar".

   Bob receives Alice's message CONFIGURE 2 but does not yet send the
   capture encodings specified, because Alice hasn't yet negotiated the
   ability to receive these streams in SDP.

   Alice now sends 200 OK 3, matching two recvonly m-lines to Bob's new
   sendonly lines.  She includes their mid values in the grouping
   attribute to show they are controlled by the CLUE channel.  A snippet
   of the SDP showing the grouping attribute and the video m-lines are
   shown below (mid 3 represents the CLUE channel):





Kyzivat, et al.          Expires March 19, 2014                [Page 37]

Internet-Draft               CLUE Signaling               September 2013


      ...
      a=group:CLUE 3 4 5 7 8
      ...
      m=video 6002 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
      a=sendrecv
      a=mid:2
      ...
      m=video 6004 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016
      a=sendonly
      a=mid:4
      a=label:enc1
      m=video 6006 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016
      a=sendonly
      a=mid:5
      a=label:enc2
      m=video 0 RTP/AVP 96
      m=video 6010 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
      a=recvonly
      a=mid:7
      m=video 6012 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
      a=recvonly
      a=mid:8



   Finally, on receiving 200 OK 3 Bob is now able to send the two
   streams of video Alice requested - this is illustrated as MEDIA 3.

   Both sides of the call are now sending multiple video streams with
   their sources defined via CLUE negotiation.  As the call progresses
   either side can send new Advertisement or Configure or new SDP
   negotiation to add, remove or change what they have available or want
   to receive.

7.  Example: A call between a CLUE and non-CLUE-capable endpoint






Kyzivat, et al.          Expires March 19, 2014                [Page 38]

Internet-Draft               CLUE Signaling               September 2013


   In this brief example Alice is a CLUE-capable endpoint making a call
   to Bob, who is not CLUE-capable, i.e., it is not able to use the CLUE
   protocol.



         +----------+                      +-----------+
         |   EP1    |                      |    EP2    |
         |          |                      |           |
         +----+-----+                      +-----+-----+
              |                                  |
              |                                  |
              | INVITE 1 (BASIC SDP+COMEDIA)     |
              |--------------------------------->|
              |                                  |
              |                                  |
              | 200 0K 1 (BASIC SDP+*NO*COMEDIA) |
              |<---------------------------------|
              |                                  |
              |                                  |
              | ACK 1                            |
              |--------------------------------->|
              |                                  |
              |                                  |
              |                                  |
              |<########### MEDIA 1 ############>|
              |   1 video A->B, 1 video B->A     |
              |<################################>|
              |                                  |
              |                                  |
              |                                  |
              |                                  |
              v                                  v



   In INVITE 1, Alice sends Bob a SIP INVITE including in the SDP body
   the basilar audio and video capabilities ("BASIC SDP") and the
   information needed for opening a control channel to be used for CLUE
   protocol messages exchange, according to what is envisioned in the
   COMEDIA approach ("COMEDIA") for DTLS/SCTP channel
   [I-D.ietf-mmusic-sctp-sdp].  A snippet of the SDP showing the
   grouping attribute and the video m-line are shown below (mid 3
   represents the CLUE channel):


      ...
      a=group:CLUE 3



Kyzivat, et al.          Expires March 19, 2014                [Page 39]

Internet-Draft               CLUE Signaling               September 2013


      ...
      m=video 6002 RTP/AVP 96
      a=rtpmap:96 H264/90000
      a=fmtp:96 profile-level-id=42e016;max-mbps=108000;max-fs=3600
      a=sendrecv
      a=mid:2



   Bob is not CLUE capable, and hence does not recognize the "CLUE"
   semantic for the grouping attribute, not does he support the CLUE
   channel.  He responds with an answer with audio and video, but with
   the CLUE channel zeroed.

   From the lack of the CLUE channel Alice understands that Bob does not
   support CLUE, or does not wish to use it.  Both sides are now able to
   send a single audio and video stream to each other.  Alice at this
   point begins to send her fallback video: in this case likely a
   switched view from whichever camera shows the current loudest
   participant on her side.

8.  CLUE requirements on SDP O/A

   The current proposal calls for a new "CLUE" semantic for the SDP
   Grouping Framework [RFC5888].

   Any other SDP extensions required to support CLUE signaling should
   also be specified here.  Then we will need to take action within
   MMUSIC to make those happen.  This section should be empty and
   removed before this document becomes an RFC.

   NOTE: The RTP mapping document [I-D.even-clue-rtp-mapping] is also
   likely to call for SDP extensions.  We will have to reconcile how to
   coordinate these two documents.

9.  SIP Signaling

   (Placeholder) This may be unremarkable.  If so we can drop it.

10.  Interoperation with Legacy SIP Devices

   This may just describe how the degenerate form of the general
   mechanisms work for legacy devices.  Or it may describe special case
   handling that we mandate as part of CLUE.  Or it may just discuss
   non-normative things for implementors should consider.

11.  CLUE over RTCWEB




Kyzivat, et al.          Expires March 19, 2014                [Page 40]

Internet-Draft               CLUE Signaling               September 2013


   We may want to rule this out of scope for now.  But we should be
   thinking about this.

12.  Open Issues

   Here are issues pertinent to signaling that need resolution.
   Resolution will probably result in changes somewhere in this
   document, but may also impact other documents.

   o  While the preference is to multiplex multiple capture encodings
      over a single RTP session, this will not always be desirable or
      possible.  The factors that prevent multiplexing may come from
      either the provider or the consumer.  So the extent of
      multiplexing must be negotiated.  The decision about how to
      multiplex affects the number and grouping of m-lines in the SDP.
      The endpoint of a CLUE session that sends an offer needs to know
      the mapping of capture encodings to m-lines for both sides.

      AFAIK this issue hasn't yet been considered at all.

   o  The current method for expressing encodings in SDP limits the
      parameters available when describing H264 encoder capabilities to
      those defined in Table 6 in [RFC6184]

13.  What else?

14.  Acknowledgements

   The team focusing on this draft consists of: Roni Even, Rob Hansen,
   Christer Holmberg, Paul Kyzivat, Simon Pietro-Romano, Roberta Presta.

   Christian Groves has contributed detailed comments and suggestions.

   The author list should be updated as people contribute substantial
   text to this document.

15.  IANA Considerations

   TBD

16.  Security Considerations

   TBD

17.  Change History

   -05:  Revisions by pkyzivat:




Kyzivat, et al.          Expires March 19, 2014                [Page 41]

Internet-Draft               CLUE Signaling               September 2013


      *  Specified versioning model and mechanism.

      *  Added explicit response to all messages.

      *  Rearranged text to work with the above changes.  (Which
         rendered diff almost useless.)

   -04:  Revisions by Rob Hansen: ???

   -03:  Revisions by pkyzivat:

      *  Added a syntax section with an XML schema for CLUE messages.
         This is a strawhorse, and is very incomplete, but it
         establishes a template for doing this based on elements defined
         in the data model.  (Thanks to Roberta for help with this!)

      *  Did some rewording to fit the syntax section in and reference
         it.

      *  Did some relatively minor restructuring of the document to make
         it flow better in a logical way.

   -02:  A bunch of revisions by pkyzivat:

      *  Moved roberta's call flows to a more appropriate place in the
         document.

      *  New section on versioning.

      *  New section on NAK.

      *  A couple of possible alternatives for message acknowledgment.

      *  Some discussion of when/how to signal changes in provider
         state.

      *  Some discussion about the handling of transport errors.

      *  Added a change history section.

      These were developed by Lennard Xiao, Christian Groves and Paul,
      so added Lennard and Christian as authors.

   -01:  Updated by roberta to include some sample call flows.

   -00:  Initial version by pkyzivat.  Established general outline for
      the document, and specified a few things thought to represent wg
      consensus.



Kyzivat, et al.          Expires March 19, 2014                [Page 42]

Internet-Draft               CLUE Signaling               September 2013


18.  References

18.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [I-D.ietf-clue-framework]
              Duckworth, M., Pepperell, A., and S. Wenger, "Framework
              for Telepresence Multi-Streams", draft-ietf-clue-
              framework-11 (work in progress), July 2013.

   [I-D.presta-clue-data-model-schema]
              Presta, R. and S. Romano, "An XML Schema for the CLUE data
              model", draft-presta-clue-data-model-schema-03 (work in
              progress), March 2013.

   [I-D.ietf-mmusic-sctp-sdp]
              Loreto, S. and G. Camarillo, "Stream Control Transmission
              Protocol (SCTP)-Based Media Transport in the Session
              Description Protocol (SDP)", draft-ietf-mmusic-sctp-sdp-04
              (work in progress), June 2013.

   [I-D.tuexen-tsvwg-sctp-dtls-encaps]
              Jesup, R., Loreto, S., Stewart, R., and M. Tuexen, "DTLS
              Encapsulation of SCTP Packets for RTCWEB", draft-tuexen-
              tsvwg-sctp-dtls-encaps-01 (work in progress), July 2012.

   [RFC4574]  Levin, O. and G. Camarillo, "The Session Description
              Protocol (SDP) Label Attribute", RFC 4574, August 2006.

   [RFC5888]  Camarillo, G. and H. Schulzrinne, "The Session Description
              Protocol (SDP) Grouping Framework", RFC 5888, June 2010.

18.2.  Informative References

   [RFC4353]  Rosenberg, J., "A Framework for Conferencing with the
              Session Initiation Protocol (SIP)", RFC 4353, February
              2006.

   [RFC3264]  Rosenberg, J. and H. Schulzrinne, "An Offer/Answer Model
              with Session Description Protocol (SDP)", RFC 3264, June
              2002.

   [RFC6120]  Saint-Andre, P., "Extensible Messaging and Presence
              Protocol (XMPP): Core", RFC 6120, March 2011.





Kyzivat, et al.          Expires March 19, 2014                [Page 43]

Internet-Draft               CLUE Signaling               September 2013


   [RFC6184]  Wang, Y., Even, R., Kristensen, T., and R. Jesup, "RTP
              Payload Format for H.264 Video", RFC 6184, May 2011.

   [I-D.even-clue-sdp-clue-relation]
              Even, R., "Signalling of CLUE and SDP offer/answer",
              draft-even-clue-sdp-clue-relation-01 (work in progress),
              October 2012.

   [I-D.even-clue-rtp-mapping]
              Even, R. and J. Lennox, "Mapping RTP streams to CLUE media
              captures", draft-even-clue-rtp-mapping-05 (work in
              progress), February 2013.

   [I-D.hansen-clue-sdp-interaction]
              Hansen, R., "SDP and CLUE message interactions", draft-
              hansen-clue-sdp-interaction-01 (work in progress),
              February 2013.

Authors' Addresses

   Paul Kyzivat
   Huawei

   Email: pkyzivat@alum.mit.edu


   Lennard Xiao
   Huawei

   Email: lennard.xiao@huawei.com


   Christian Groves
   Huawei

   Email: Christian.Groves@nteczone.com


   Robert Hansen
   Cisco Systems

   Email: rohanse2@cisco.com









Kyzivat, et al.          Expires March 19, 2014                [Page 44]
