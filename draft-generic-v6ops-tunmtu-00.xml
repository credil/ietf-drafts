<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc strict='yes'?>
<?rfc iprnotified='no'?>
<rfc category="info" docName="draft-generic-v6ops-tunmtu-00.txt"
     ipr="trust200902">
  <front>
    <title abbrev="Generic Tunnel MTU">Generic Tunnel MTU
    Determination</title>

    <author fullname="Fred L. Templin" initials="F. L." role="editor"
            surname="Templin">
      <organization>Boeing Research &amp; Technology</organization>

      <address>
        <postal>
          <street>P.O. Box 3707</street>

          <city>Seattle</city>

          <region>WA</region>

          <code>98124</code>

          <country>USA</country>
        </postal>

        <email>fltemplin@acm.org</email>
      </address>
    </author>

    <date day="22" month="May" year="2012" />

    <keyword>I-D</keyword>

    <keyword>Internet-Draft</keyword>

    <abstract>
      <t>The IPv6-over-IPv4 tunnel MTU as defined by "Basic Transition
      Mechanisms for IPv6" is currently recommended to be set to 1480 or less
      when static MTU determination is used. This is to avoid IPv4
      fragmentation within the tunnel, but requires the tunnel ingress to drop
      any IPv6 packet larger than 1480 bytes and return an ICMPv6 Packet Too
      Big (PTB) message. Concerns for operational issues with both IPv4 and
      IPv6 Path MTU Discovery point to the possibility of MTU-related black
      holes when a packet is dropped due to an MTU restriction. Fortunately,
      the "Internet cell size" is 1500 bytes, i.e., the minimum MTU configured
      by the vast majority of links in the Internet. This document therefore
      presents a method to boost the tunnel MTU to 1500 bytes.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The IPv6-over-IPv4 tunnel MTU as defined by "Basic Transition
      Mechanisms for IPv6" is currently recommended to be set to 1480 or less
      when static MTU determination is used <xref target="RFC4213"></xref>.
      This is to avoid IPv4 fragmentation within the tunnel <xref
      target="RFC0791"></xref>, but requires the tunnel ingress to drop any
      IPv6 packet larger than 1480 bytes and return an ICMPv6 Packet Too Big
      (PTB) message <xref target="RFC2460"></xref>. Concerns for operational
      issues with both IPv4 and IPv6 Path MTU Discovery (PMTUD) <xref
      target="RFC1191"></xref><xref target="RFC1981"> </xref> point to the
      possibility of MTU-related black holes when a packet is dropped due to
      an MTU restriction. Fortunately, the "Internet cell size" is 1500 bytes,
      i.e., the minimum MTU configured by the vast majority of links in the
      Internet. This document therefore presents a method to boost the tunnel
      MTU to 1500 bytes.</t>

      <t>Pushing the tunnel MTU to 1500 bytes is met with the challenge that
      the addition of the IPv4 encapsulation header would cause a 1500 byte
      IPv6 packet to appear as a 1520 byte IPv4 packet on the wire. This can
      result in the packet being either fragmented or dropped by an IPv4
      router that configures a 1500 byte link, depending on the setting of the
      "Don't Fragment" (DF) bit in the IPv4 header. Using the approach
      outlined in this document, the tunnel ingress avoids this issue by
      performing IPv6 fragmentation on the inner IPv6 packet before outer IPv4
      encapsulation. The approach is outlined in the following sections.</t>
    </section>

    <section title="Problem Statement">
      <t>When an IPv6 tunnel configures a smaller MTU than 1500 bytes, packets
      that are small enough to traverse earlier links in the path toward the
      final destination can suddenly be dropped at the tunnel ingress with an
      ICMPv6 PTB message returned to the original source. However, operational
      experience has shown that the PTB messages can be lost in the network
      due to filtering in which case the source does not receive notification
      of the loss. It is therefore highly desirable that the tunnel configure
      an MTU of at least 1500 bytes.</t>

      <t>One possibility is to use IP fragmentation of the outer IP layer
      protocol so that inner packets up to 1500 bytes are delivered even if
      the tunnel encapsulation causes the outer packet to be larger than 1500
      bytes. However, IPv4 fragmentation has been shown to be dangerous at
      high data rates due to the 16-bit Identification field wrapping while
      reassemblies are still active. Also, if outer IPv4 fragmentation were
      used the tunnel egress would need to do the reassembly which can be an
      onerous burden when the egress is located on a router.</t>

      <t>A second possibility is to enable IP PMTUD on the outer packet.
      However, the PTB messages that may result could either be lost on the
      return path to the tunnel ingress or may not contain enough information
      for translation into an inner packet PTB for delivery to the original
      source. Still another possibility is for the tunnel ingress to maintain
      state about MTU sizes for various tunnel egresses, but this becomes
      unwieldy when the number of egresses is large.</t>

      <t>In short, PMTUD for both IPv4 and IPv6 is a mess and new approaches
      are needed. Preferably, PMTUD can be avoided through operational
      arrangements, as described in the following sections.</t>
    </section>

    <section title="Tunnel MTU and Fragmentation">
      <t>Section 3.2 of <xref target="RFC4213"></xref> presents both static
      and dynamic MTU determination algorithms. These algorithms have been
      shown to be problematic in many instances, as discussed in Section 2.
      This document therefore proposes a new tunnel MTU and fragmentation
      method via the following algorithm:</t>

      <t><figure>
          <artwork><![CDATA[
   1. set the tunnel ingress MTU to 1500
   2. for IPv6 packets to be admitted into the tunnel,
      do the following:
      a) if the packet is 1501 or more, drop it and
         send an ICMPv6 PTB with MTU size 1500
      b) if the packet is between 1281 - 1500:
         - admit the packet into the tunnel, subject to
           rate limiting (see Section 3).
         - break the packet into 2 pieces, where the first
           piece is a random length between 512-1024 bytes
         - insert a fragment header on both pieces and set
           the Identification field to a 32-bit value as
           specified in Section 4. (If the original packet
           already included a fragment header, however the
           original fragment header is used.)
         - encapsulate both pieces in an IPv4 header and
           send them to the tunnel far end.
      c) if the packet is 1280 or less:
         - admit the packet into the tunnel
         - encapsulate the packet in an IPv4 header and
           send it to the tunnel far end
  3. the IPv6 destination host gets to reassemble if
     necessary
]]></artwork>
        </figure>In the above algorithm, the tunnel MTU can be set to 1500
      bytes independently of other nodes, i.e., the approach is incrementally
      deployable.</t>
    </section>

    <section title="Setting the Identification Field">
      <t>The algorithm in Section 3 ignores the IPv6 requirement that routers
      in the network must not fragment IPv6 packets. However, we observe that
      the 32-bit Identification field provides sufficient protection against
      accidental reassembly of fragments from different IPv6 packets if
      operational considerations are observed.</t>

      <t>Specifically, the tunnel ingress must ensure that there will be no
      IPv6 fragments alive in the system with duplicate Identification values.
      Since <xref target="RFC2460"></xref> specifies that the maximum time a
      node may retain an incomplete fragmented packet is 60 seconds, this
      means that the tunnel ingress must not allow the Identification values
      to be repeated within this timeframe. The tunnel ingress can therefore
      calculate a maximum data rate for admission of fragmented packets into
      the tunnel.</t>

      <t>To avoid Identification value duplication, the tunnel ingress must
      admit no more than (2^32 / 60) = 71582788 IPv6 packets requiring
      fragmentation into the tunnel per second. In the worst case, consider
      that each packet is 1281 bytes (i.e., 10248 bits) in length. The tunnel
      ingress can then calculate the maximum data rate as (71582788 * 10248) =
      733580411424 bits/sec, or approximately 733 Gbps. It is therefore
      essential that the tunnel ingress set a rate limit to no more than 733
      Gbps for those packets that will require fragmentation. This restriction
      can be relaxed if the tunnel ingress maintains a per-egress
      Identification value instead of a single Identification value for all
      tunnel egresses.</t>

      <t>The algorithm in Section 3 requires that the tunnel ingress perform
      IPv6 fragmentation (when necessary), but the tunnel egress does not
      perform reassembly; hence, the tunnel endpoints remain stateless.
      Instead, the final destination IPv6 host may be obliged to reassemble
      IPv6 packets up to 1500 bytes in length, but hosts are already required
      to reassemble at least that much by the IPv6 standard <xref
      target="RFC2460"></xref>.</t>

      <t>Note that a possible conflict exists when IPv6 fragmentation has
      already been performed by a source host before the fragments arrive at
      the tunnel ingress. In that case, there is a small possibility that the
      Identification values used by the source host will temporarily be in
      close correlation with those used by the tunnel ingress, where a
      "collision" may occur in which the fragments produced by the source host
      have the same Identification value as the fragments produced by the
      tunnel ingress. Two factors that mitigate such conflicts are the random
      length of the first fragment used by the tunnel ingress (i.e., to cause
      a length mismatch for colliding reassemblies) and, in even rarer
      instance, the use of the TCP/UDP checksum.</t>

      <t>For that reason, the Identification values chosen for the fragmented
      tunneled packets are *not* assigned sequentially to avoid corrupting a
      block of reassemblies at a single destination host. Instead, the
      Identification values must be spaced so that the value begins counting
      at a random variable N (between 0 - (2^32 - 1)), then (N + C), then (N +
      2C), then (N + 3C) etc. modulo 2^32 until the count returns again to N.
      The sequence then begins at (N+1), then ((N+1) + C), then ((N+1) + 2C),
      etc. until all integer values within 2^32 are covered. Using this
      method, large numbers of outstanding reassemblies can be accommodated
      with only very rare instances of packet loss.</t>
    </section>

    <section title="Applicability">
      <t>This approach applies to all tunneling methods that use the basic
      transition mechanisms, including configured tunnels <xref
      target="RFC4213"></xref>, 6to4 <xref target="RFC3056"></xref>, ISATAP
      <xref target="RFC5214"></xref>, DSMIP <xref target="RFC5555"></xref>,
      6rd <xref target="RFC5969"></xref>, etc.</t>

      <t>Note that this same approach can also be applied to tunneling methods
      that use other than the basic transition mechanisms. These can include
      Teredo <xref target="RFC4380"></xref>, LISP <xref
      target="I-D.ietf-lisp"></xref>, SEAL <xref
      target="I-D.templin-intarea-seal"></xref>, and even IPv6-over-IPv6
      encapsulation <xref target="RFC2473"></xref></t>
    </section>

    <section title="IANA Considerations">
      <t>There are no IANA considerations for this document.</t>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>The security considerations for basic transition mechanisms apply
      also to this document.</t>
    </section>

    <section anchor="acknowledge" title="Acknowledgments">
      <t>This method was inspired through discussion on the IETF v6ops list in
      the May 2012 timeframe.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.0791"?>

      <?rfc include="reference.RFC.4213"?>

      <?rfc include="reference.RFC.2460"?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.1981"?>

      <?rfc include="reference.RFC.1191"?>

      <?rfc include="reference.RFC.3056"?>

      <?rfc include="reference.RFC.5214"?>

      <?rfc include="reference.RFC.5555"?>

      <?rfc include="reference.RFC.5969"?>

      <?rfc include="reference.RFC.4380"?>

      <?rfc include="reference.RFC.2473"?>

      <?rfc include="reference.I-D.templin-intarea-seal"?>

      <?rfc include="reference.I-D.ietf-lisp"?>
    </references>
  </back>
</rfc>
